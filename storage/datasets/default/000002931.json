{
	"title": "MetadataExt in std::os::unix::fs - Rust",
	"url": "https://doc.rust-lang.org/stable/std/os/unix/fs/trait.MetadataExt.html",
	"markdown": "# MetadataExt in std::os::unix::fs - Rust\n\n```\npub trait MetadataExt {\nShow 16 methods    // Required methods\n    fn dev(&self) -> u64;\n    fn ino(&self) -> u64;\n    fn mode(&self) -> u32;\n    fn nlink(&self) -> u64;\n    fn uid(&self) -> u32;\n    fn gid(&self) -> u32;\n    fn rdev(&self) -> u64;\n    fn size(&self) -> u64;\n    fn atime(&self) -> i64;\n    fn atime_nsec(&self) -> i64;\n    fn mtime(&self) -> i64;\n    fn mtime_nsec(&self) -> i64;\n    fn ctime(&self) -> i64;\n    fn ctime_nsec(&self) -> i64;\n    fn blksize(&self) -> u64;\n    fn blocks(&self) -> u64;\n}\n```\n\nAvailable on **Unix** only.\n\nExpand description\n\n1.1.0 · [source](about:blank/src/std/os/unix/fs.rs.html#441)\n\nReturns the ID of the device containing the file.\n\n##### [§](#examples)Examples\n\n```\nuse std::io;\nuse std::fs;\nuse std::os::unix::fs::MetadataExt;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    let dev_id = meta.dev();\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::io;%0Ause+std::fs;%0Ause+std::os::unix::fs::MetadataExt;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+meta+=+fs::metadata(%22some_file%22)?;%0A++++let+dev_id+=+meta.dev();%0A++++Ok(())%0A%7D&edition=2021)\n\n1.1.0 · [source](about:blank/src/std/os/unix/fs.rs.html#458)\n\nReturns the inode number.\n\n##### [§](#examples-1)Examples\n\n```\nuse std::fs;\nuse std::os::unix::fs::MetadataExt;\nuse std::io;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    let inode = meta.ino();\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0Ause+std::os::unix::fs::MetadataExt;%0Ause+std::io;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+meta+=+fs::metadata(%22some_file%22)?;%0A++++let+inode+=+meta.ino();%0A++++Ok(())%0A%7D&edition=2021)\n\n1.1.0 · [source](about:blank/src/std/os/unix/fs.rs.html#479)\n\nReturns the rights applied to this file.\n\n##### [§](#examples-2)Examples\n\n```\nuse std::fs;\nuse std::os::unix::fs::MetadataExt;\nuse std::io;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    let mode = meta.mode();\n    let user_has_write_access      = mode & 0o200;\n    let user_has_read_write_access = mode & 0o600;\n    let group_has_read_access      = mode & 0o040;\n    let others_have_exec_access    = mode & 0o001;\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0Ause+std::os::unix::fs::MetadataExt;%0Ause+std::io;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+meta+=+fs::metadata(%22some_file%22)?;%0A++++let+mode+=+meta.mode();%0A++++let+user_has_write_access++++++=+mode+%26+0o200;%0A++++let+user_has_read_write_access+=+mode+%26+0o600;%0A++++let+group_has_read_access++++++=+mode+%26+0o040;%0A++++let+others_have_exec_access++++=+mode+%26+0o001;%0A++++Ok(())%0A%7D&edition=2021)\n\n1.1.0 · [source](about:blank/src/std/os/unix/fs.rs.html#496)\n\nReturns the number of hard links pointing to this file.\n\n##### [§](#examples-3)Examples\n\n```\nuse std::fs;\nuse std::os::unix::fs::MetadataExt;\nuse std::io;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    let nb_hard_links = meta.nlink();\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0Ause+std::os::unix::fs::MetadataExt;%0Ause+std::io;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+meta+=+fs::metadata(%22some_file%22)?;%0A++++let+nb_hard_links+=+meta.nlink();%0A++++Ok(())%0A%7D&edition=2021)\n\n1.1.0 · [source](about:blank/src/std/os/unix/fs.rs.html#513)\n\nReturns the user ID of the owner of this file.\n\n##### [§](#examples-4)Examples\n\n```\nuse std::fs;\nuse std::os::unix::fs::MetadataExt;\nuse std::io;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    let user_id = meta.uid();\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0Ause+std::os::unix::fs::MetadataExt;%0Ause+std::io;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+meta+=+fs::metadata(%22some_file%22)?;%0A++++let+user_id+=+meta.uid();%0A++++Ok(())%0A%7D&edition=2021)\n\n1.1.0 · [source](about:blank/src/std/os/unix/fs.rs.html#530)\n\nReturns the group ID of the owner of this file.\n\n##### [§](#examples-5)Examples\n\n```\nuse std::fs;\nuse std::os::unix::fs::MetadataExt;\nuse std::io;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    let group_id = meta.gid();\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0Ause+std::os::unix::fs::MetadataExt;%0Ause+std::io;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+meta+=+fs::metadata(%22some_file%22)?;%0A++++let+group_id+=+meta.gid();%0A++++Ok(())%0A%7D&edition=2021)\n\n1.1.0 · [source](about:blank/src/std/os/unix/fs.rs.html#547)\n\nReturns the device ID of this file (if it is a special one).\n\n##### [§](#examples-6)Examples\n\n```\nuse std::fs;\nuse std::os::unix::fs::MetadataExt;\nuse std::io;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    let device_id = meta.rdev();\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0Ause+std::os::unix::fs::MetadataExt;%0Ause+std::io;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+meta+=+fs::metadata(%22some_file%22)?;%0A++++let+device_id+=+meta.rdev();%0A++++Ok(())%0A%7D&edition=2021)\n\n1.1.0 · [source](about:blank/src/std/os/unix/fs.rs.html#564)\n\nReturns the total size of this file in bytes.\n\n##### [§](#examples-7)Examples\n\n```\nuse std::fs;\nuse std::os::unix::fs::MetadataExt;\nuse std::io;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    let file_size = meta.size();\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0Ause+std::os::unix::fs::MetadataExt;%0Ause+std::io;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+meta+=+fs::metadata(%22some_file%22)?;%0A++++let+file_size+=+meta.size();%0A++++Ok(())%0A%7D&edition=2021)\n\n1.1.0 · [source](about:blank/src/std/os/unix/fs.rs.html#581)\n\nReturns the last access time of the file, in seconds since Unix Epoch.\n\n##### [§](#examples-8)Examples\n\n```\nuse std::fs;\nuse std::os::unix::fs::MetadataExt;\nuse std::io;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    let last_access_time = meta.atime();\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0Ause+std::os::unix::fs::MetadataExt;%0Ause+std::io;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+meta+=+fs::metadata(%22some_file%22)?;%0A++++let+last_access_time+=+meta.atime();%0A++++Ok(())%0A%7D&edition=2021)\n\n1.1.0 · [source](about:blank/src/std/os/unix/fs.rs.html#600)\n\nReturns the last access time of the file, in nanoseconds since [`atime`](about:blank/trait.MetadataExt.html#tymethod.atime \"method std::os::unix::fs::MetadataExt::atime\").\n\n##### [§](#examples-9)Examples\n\n```\nuse std::fs;\nuse std::os::unix::fs::MetadataExt;\nuse std::io;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    let nano_last_access_time = meta.atime_nsec();\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0Ause+std::os::unix::fs::MetadataExt;%0Ause+std::io;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+meta+=+fs::metadata(%22some_file%22)?;%0A++++let+nano_last_access_time+=+meta.atime_nsec();%0A++++Ok(())%0A%7D&edition=2021)\n\n1.1.0 · [source](about:blank/src/std/os/unix/fs.rs.html#617)\n\nReturns the last modification time of the file, in seconds since Unix Epoch.\n\n##### [§](#examples-10)Examples\n\n```\nuse std::fs;\nuse std::os::unix::fs::MetadataExt;\nuse std::io;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    let last_modification_time = meta.mtime();\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0Ause+std::os::unix::fs::MetadataExt;%0Ause+std::io;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+meta+=+fs::metadata(%22some_file%22)?;%0A++++let+last_modification_time+=+meta.mtime();%0A++++Ok(())%0A%7D&edition=2021)\n\n1.1.0 · [source](about:blank/src/std/os/unix/fs.rs.html#636)\n\nReturns the last modification time of the file, in nanoseconds since [`mtime`](about:blank/trait.MetadataExt.html#tymethod.mtime \"method std::os::unix::fs::MetadataExt::mtime\").\n\n##### [§](#examples-11)Examples\n\n```\nuse std::fs;\nuse std::os::unix::fs::MetadataExt;\nuse std::io;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    let nano_last_modification_time = meta.mtime_nsec();\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0Ause+std::os::unix::fs::MetadataExt;%0Ause+std::io;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+meta+=+fs::metadata(%22some_file%22)?;%0A++++let+nano_last_modification_time+=+meta.mtime_nsec();%0A++++Ok(())%0A%7D&edition=2021)\n\n1.1.0 · [source](about:blank/src/std/os/unix/fs.rs.html#653)\n\nReturns the last status change time of the file, in seconds since Unix Epoch.\n\n##### [§](#examples-12)Examples\n\n```\nuse std::fs;\nuse std::os::unix::fs::MetadataExt;\nuse std::io;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    let last_status_change_time = meta.ctime();\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0Ause+std::os::unix::fs::MetadataExt;%0Ause+std::io;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+meta+=+fs::metadata(%22some_file%22)?;%0A++++let+last_status_change_time+=+meta.ctime();%0A++++Ok(())%0A%7D&edition=2021)\n\n1.1.0 · [source](about:blank/src/std/os/unix/fs.rs.html#672)\n\nReturns the last status change time of the file, in nanoseconds since [`ctime`](about:blank/trait.MetadataExt.html#tymethod.ctime \"method std::os::unix::fs::MetadataExt::ctime\").\n\n##### [§](#examples-13)Examples\n\n```\nuse std::fs;\nuse std::os::unix::fs::MetadataExt;\nuse std::io;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    let nano_last_status_change_time = meta.ctime_nsec();\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0Ause+std::os::unix::fs::MetadataExt;%0Ause+std::io;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+meta+=+fs::metadata(%22some_file%22)?;%0A++++let+nano_last_status_change_time+=+meta.ctime_nsec();%0A++++Ok(())%0A%7D&edition=2021)\n\n1.1.0 · [source](about:blank/src/std/os/unix/fs.rs.html#689)\n\nReturns the block size for filesystem I/O.\n\n##### [§](#examples-14)Examples\n\n```\nuse std::fs;\nuse std::os::unix::fs::MetadataExt;\nuse std::io;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    let block_size = meta.blksize();\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0Ause+std::os::unix::fs::MetadataExt;%0Ause+std::io;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+meta+=+fs::metadata(%22some_file%22)?;%0A++++let+block_size+=+meta.blksize();%0A++++Ok(())%0A%7D&edition=2021)\n\n1.1.0 · [source](about:blank/src/std/os/unix/fs.rs.html#708)\n\nReturns the number of blocks allocated to the file, in 512-byte units.\n\nPlease note that this may be smaller than `st_size / 512` when the file has holes.\n\n##### [§](#examples-15)Examples\n\n```\nuse std::fs;\nuse std::os::unix::fs::MetadataExt;\nuse std::io;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    let blocks = meta.blocks();\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0Ause+std::os::unix::fs::MetadataExt;%0Ause+std::io;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+meta+=+fs::metadata(%22some_file%22)?;%0A++++let+blocks+=+meta.blocks();%0A++++Ok(())%0A%7D&edition=2021)\n\n1.1.0 · [source](about:blank/src/std/os/unix/fs.rs.html#715-768)[§](#impl-MetadataExt-for-Metadata)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Unix-specific extensions to `fs::Metadata`.\"><title>MetadataExt in std::os::unix::fs - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../../../\" data-static-root-path=\"../../../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc trait\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">MetadataExt</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">MetadataExt</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#required-methods\">Required Methods</a></h3><ul class=\"block\"><li><a href=\"#tymethod.atime\">atime</a></li><li><a href=\"#tymethod.atime_nsec\">atime_nsec</a></li><li><a href=\"#tymethod.blksize\">blksize</a></li><li><a href=\"#tymethod.blocks\">blocks</a></li><li><a href=\"#tymethod.ctime\">ctime</a></li><li><a href=\"#tymethod.ctime_nsec\">ctime_nsec</a></li><li><a href=\"#tymethod.dev\">dev</a></li><li><a href=\"#tymethod.gid\">gid</a></li><li><a href=\"#tymethod.ino\">ino</a></li><li><a href=\"#tymethod.mode\">mode</a></li><li><a href=\"#tymethod.mtime\">mtime</a></li><li><a href=\"#tymethod.mtime_nsec\">mtime_nsec</a></li><li><a href=\"#tymethod.nlink\">nlink</a></li><li><a href=\"#tymethod.rdev\">rdev</a></li><li><a href=\"#tymethod.size\">size</a></li><li><a href=\"#tymethod.uid\">uid</a></li></ul><h3><a href=\"#implementors\">Implementors</a></h3></section><h2><a href=\"index.html\">In std::os::unix::fs</a></h2><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.DirBuilderExt.html\">DirBuilderExt</a></li><li><a href=\"trait.DirEntryExt.html\">DirEntryExt</a></li><li><a href=\"trait.DirEntryExt2.html\">DirEntryExt2</a></li><li><a href=\"trait.FileExt.html\">FileExt</a></li><li><a href=\"trait.FileTypeExt.html\">FileTypeExt</a></li><li><a href=\"trait.MetadataExt.html\">MetadataExt</a></li><li><a href=\"trait.OpenOptionsExt.html\">OpenOptionsExt</a></li><li><a href=\"trait.PermissionsExt.html\">PermissionsExt</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.chown.html\">chown</a></li><li><a href=\"fn.chroot.html\">chroot</a></li><li><a href=\"fn.fchown.html\">fchown</a></li><li><a href=\"fn.lchown.html\">lchown</a></li><li><a href=\"fn.symlink.html\">symlink</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Trait <a href=\"../../../index.html\">std</a>::<wbr><a href=\"../../index.html\">os</a>::<wbr><a href=\"../index.html\">unix</a>::<wbr><a href=\"index.html\">fs</a>::<wbr><a class=\"trait\" href=\"#\">MetadataExt</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.1.0\">1.1.0</span> · <a class=\"src\" href=\"../../../../src/std/os/unix/fs.rs.html#424-712\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub trait MetadataExt {\n<details class=\"toggle type-contents-toggle\"><summary class=\"hideme\"><span>Show 16 methods</span></summary>    // Required methods\n    fn <a href=\"#tymethod.dev\" class=\"fn\">dev</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.u64.html\">u64</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.ino\" class=\"fn\">ino</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.u64.html\">u64</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.mode\" class=\"fn\">mode</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.u32.html\">u32</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.nlink\" class=\"fn\">nlink</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.u64.html\">u64</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.uid\" class=\"fn\">uid</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.u32.html\">u32</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.gid\" class=\"fn\">gid</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.u32.html\">u32</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.rdev\" class=\"fn\">rdev</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.u64.html\">u64</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.size\" class=\"fn\">size</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.u64.html\">u64</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.atime\" class=\"fn\">atime</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.i64.html\">i64</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.atime_nsec\" class=\"fn\">atime_nsec</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.i64.html\">i64</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.mtime\" class=\"fn\">mtime</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.i64.html\">i64</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.mtime_nsec\" class=\"fn\">mtime_nsec</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.i64.html\">i64</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.ctime\" class=\"fn\">ctime</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.i64.html\">i64</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.ctime_nsec\" class=\"fn\">ctime_nsec</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.i64.html\">i64</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.blksize\" class=\"fn\">blksize</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.u64.html\">u64</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.blocks\" class=\"fn\">blocks</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.u64.html\">u64</a>;\n</details>}</code></pre><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Unix</strong> only.</div></span><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Unix-specific extensions to <a href=\"../../../fs/struct.Metadata.html\" title=\"struct std::fs::Metadata\"><code>fs::Metadata</code></a>.</p>\n</div></details><h2 id=\"required-methods\" class=\"section-header\">Required Methods<a href=\"#required-methods\" class=\"anchor\">§</a></h2><div class=\"methods\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.dev\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.1.0\">1.1.0</span> · <a class=\"src\" href=\"../../../../src/std/os/unix/fs.rs.html#441\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.dev\" class=\"fn\">dev</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\"><p>Returns the ID of the device containing the file.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io;\n<span class=\"kw\">use </span>std::fs;\n<span class=\"kw\">use </span>std::os::unix::fs::MetadataExt;\n\n<span class=\"kw\">fn </span>main() -&gt; io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>meta = fs::metadata(<span class=\"string\">\"some_file\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span>dev_id = meta.dev();\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::io;%0Ause+std::fs;%0Ause+std::os::unix::fs::MetadataExt;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+meta+=+fs::metadata(%22some_file%22)?;%0A++++let+dev_id+=+meta.dev();%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.ino\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.1.0\">1.1.0</span> · <a class=\"src\" href=\"../../../../src/std/os/unix/fs.rs.html#458\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.ino\" class=\"fn\">ino</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\"><p>Returns the inode number.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs;\n<span class=\"kw\">use </span>std::os::unix::fs::MetadataExt;\n<span class=\"kw\">use </span>std::io;\n\n<span class=\"kw\">fn </span>main() -&gt; io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>meta = fs::metadata(<span class=\"string\">\"some_file\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span>inode = meta.ino();\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0Ause+std::os::unix::fs::MetadataExt;%0Ause+std::io;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+meta+=+fs::metadata(%22some_file%22)?;%0A++++let+inode+=+meta.ino();%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.mode\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.1.0\">1.1.0</span> · <a class=\"src\" href=\"../../../../src/std/os/unix/fs.rs.html#479\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.mode\" class=\"fn\">mode</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the rights applied to this file.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs;\n<span class=\"kw\">use </span>std::os::unix::fs::MetadataExt;\n<span class=\"kw\">use </span>std::io;\n\n<span class=\"kw\">fn </span>main() -&gt; io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>meta = fs::metadata(<span class=\"string\">\"some_file\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span>mode = meta.mode();\n    <span class=\"kw\">let </span>user_has_write_access      = mode &amp; <span class=\"number\">0o200</span>;\n    <span class=\"kw\">let </span>user_has_read_write_access = mode &amp; <span class=\"number\">0o600</span>;\n    <span class=\"kw\">let </span>group_has_read_access      = mode &amp; <span class=\"number\">0o040</span>;\n    <span class=\"kw\">let </span>others_have_exec_access    = mode &amp; <span class=\"number\">0o001</span>;\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0Ause+std::os::unix::fs::MetadataExt;%0Ause+std::io;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+meta+=+fs::metadata(%22some_file%22)?;%0A++++let+mode+=+meta.mode();%0A++++let+user_has_write_access++++++=+mode+%26+0o200;%0A++++let+user_has_read_write_access+=+mode+%26+0o600;%0A++++let+group_has_read_access++++++=+mode+%26+0o040;%0A++++let+others_have_exec_access++++=+mode+%26+0o001;%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.nlink\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.1.0\">1.1.0</span> · <a class=\"src\" href=\"../../../../src/std/os/unix/fs.rs.html#496\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.nlink\" class=\"fn\">nlink</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of hard links pointing to this file.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs;\n<span class=\"kw\">use </span>std::os::unix::fs::MetadataExt;\n<span class=\"kw\">use </span>std::io;\n\n<span class=\"kw\">fn </span>main() -&gt; io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>meta = fs::metadata(<span class=\"string\">\"some_file\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span>nb_hard_links = meta.nlink();\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0Ause+std::os::unix::fs::MetadataExt;%0Ause+std::io;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+meta+=+fs::metadata(%22some_file%22)?;%0A++++let+nb_hard_links+=+meta.nlink();%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.uid\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.1.0\">1.1.0</span> · <a class=\"src\" href=\"../../../../src/std/os/unix/fs.rs.html#513\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.uid\" class=\"fn\">uid</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the user ID of the owner of this file.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs;\n<span class=\"kw\">use </span>std::os::unix::fs::MetadataExt;\n<span class=\"kw\">use </span>std::io;\n\n<span class=\"kw\">fn </span>main() -&gt; io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>meta = fs::metadata(<span class=\"string\">\"some_file\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span>user_id = meta.uid();\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0Ause+std::os::unix::fs::MetadataExt;%0Ause+std::io;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+meta+=+fs::metadata(%22some_file%22)?;%0A++++let+user_id+=+meta.uid();%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.gid\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.1.0\">1.1.0</span> · <a class=\"src\" href=\"../../../../src/std/os/unix/fs.rs.html#530\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.gid\" class=\"fn\">gid</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the group ID of the owner of this file.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs;\n<span class=\"kw\">use </span>std::os::unix::fs::MetadataExt;\n<span class=\"kw\">use </span>std::io;\n\n<span class=\"kw\">fn </span>main() -&gt; io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>meta = fs::metadata(<span class=\"string\">\"some_file\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span>group_id = meta.gid();\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0Ause+std::os::unix::fs::MetadataExt;%0Ause+std::io;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+meta+=+fs::metadata(%22some_file%22)?;%0A++++let+group_id+=+meta.gid();%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.rdev\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.1.0\">1.1.0</span> · <a class=\"src\" href=\"../../../../src/std/os/unix/fs.rs.html#547\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.rdev\" class=\"fn\">rdev</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\"><p>Returns the device ID of this file (if it is a special one).</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs;\n<span class=\"kw\">use </span>std::os::unix::fs::MetadataExt;\n<span class=\"kw\">use </span>std::io;\n\n<span class=\"kw\">fn </span>main() -&gt; io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>meta = fs::metadata(<span class=\"string\">\"some_file\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span>device_id = meta.rdev();\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0Ause+std::os::unix::fs::MetadataExt;%0Ause+std::io;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+meta+=+fs::metadata(%22some_file%22)?;%0A++++let+device_id+=+meta.rdev();%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.size\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.1.0\">1.1.0</span> · <a class=\"src\" href=\"../../../../src/std/os/unix/fs.rs.html#564\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.size\" class=\"fn\">size</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\"><p>Returns the total size of this file in bytes.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs;\n<span class=\"kw\">use </span>std::os::unix::fs::MetadataExt;\n<span class=\"kw\">use </span>std::io;\n\n<span class=\"kw\">fn </span>main() -&gt; io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>meta = fs::metadata(<span class=\"string\">\"some_file\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span>file_size = meta.size();\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0Ause+std::os::unix::fs::MetadataExt;%0Ause+std::io;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+meta+=+fs::metadata(%22some_file%22)?;%0A++++let+file_size+=+meta.size();%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.atime\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.1.0\">1.1.0</span> · <a class=\"src\" href=\"../../../../src/std/os/unix/fs.rs.html#581\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.atime\" class=\"fn\">atime</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Returns the last access time of the file, in seconds since Unix Epoch.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs;\n<span class=\"kw\">use </span>std::os::unix::fs::MetadataExt;\n<span class=\"kw\">use </span>std::io;\n\n<span class=\"kw\">fn </span>main() -&gt; io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>meta = fs::metadata(<span class=\"string\">\"some_file\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span>last_access_time = meta.atime();\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0Ause+std::os::unix::fs::MetadataExt;%0Ause+std::io;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+meta+=+fs::metadata(%22some_file%22)?;%0A++++let+last_access_time+=+meta.atime();%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.atime_nsec\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.1.0\">1.1.0</span> · <a class=\"src\" href=\"../../../../src/std/os/unix/fs.rs.html#600\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.atime_nsec\" class=\"fn\">atime_nsec</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Returns the last access time of the file, in nanoseconds since <a href=\"trait.MetadataExt.html#tymethod.atime\" title=\"method std::os::unix::fs::MetadataExt::atime\"><code>atime</code></a>.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs;\n<span class=\"kw\">use </span>std::os::unix::fs::MetadataExt;\n<span class=\"kw\">use </span>std::io;\n\n<span class=\"kw\">fn </span>main() -&gt; io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>meta = fs::metadata(<span class=\"string\">\"some_file\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span>nano_last_access_time = meta.atime_nsec();\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0Ause+std::os::unix::fs::MetadataExt;%0Ause+std::io;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+meta+=+fs::metadata(%22some_file%22)?;%0A++++let+nano_last_access_time+=+meta.atime_nsec();%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.mtime\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.1.0\">1.1.0</span> · <a class=\"src\" href=\"../../../../src/std/os/unix/fs.rs.html#617\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.mtime\" class=\"fn\">mtime</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Returns the last modification time of the file, in seconds since Unix Epoch.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs;\n<span class=\"kw\">use </span>std::os::unix::fs::MetadataExt;\n<span class=\"kw\">use </span>std::io;\n\n<span class=\"kw\">fn </span>main() -&gt; io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>meta = fs::metadata(<span class=\"string\">\"some_file\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span>last_modification_time = meta.mtime();\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0Ause+std::os::unix::fs::MetadataExt;%0Ause+std::io;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+meta+=+fs::metadata(%22some_file%22)?;%0A++++let+last_modification_time+=+meta.mtime();%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.mtime_nsec\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.1.0\">1.1.0</span> · <a class=\"src\" href=\"../../../../src/std/os/unix/fs.rs.html#636\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.mtime_nsec\" class=\"fn\">mtime_nsec</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Returns the last modification time of the file, in nanoseconds since <a href=\"trait.MetadataExt.html#tymethod.mtime\" title=\"method std::os::unix::fs::MetadataExt::mtime\"><code>mtime</code></a>.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs;\n<span class=\"kw\">use </span>std::os::unix::fs::MetadataExt;\n<span class=\"kw\">use </span>std::io;\n\n<span class=\"kw\">fn </span>main() -&gt; io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>meta = fs::metadata(<span class=\"string\">\"some_file\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span>nano_last_modification_time = meta.mtime_nsec();\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0Ause+std::os::unix::fs::MetadataExt;%0Ause+std::io;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+meta+=+fs::metadata(%22some_file%22)?;%0A++++let+nano_last_modification_time+=+meta.mtime_nsec();%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.ctime\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.1.0\">1.1.0</span> · <a class=\"src\" href=\"../../../../src/std/os/unix/fs.rs.html#653\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.ctime\" class=\"fn\">ctime</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Returns the last status change time of the file, in seconds since Unix Epoch.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs;\n<span class=\"kw\">use </span>std::os::unix::fs::MetadataExt;\n<span class=\"kw\">use </span>std::io;\n\n<span class=\"kw\">fn </span>main() -&gt; io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>meta = fs::metadata(<span class=\"string\">\"some_file\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span>last_status_change_time = meta.ctime();\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0Ause+std::os::unix::fs::MetadataExt;%0Ause+std::io;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+meta+=+fs::metadata(%22some_file%22)?;%0A++++let+last_status_change_time+=+meta.ctime();%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.ctime_nsec\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.1.0\">1.1.0</span> · <a class=\"src\" href=\"../../../../src/std/os/unix/fs.rs.html#672\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.ctime_nsec\" class=\"fn\">ctime_nsec</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Returns the last status change time of the file, in nanoseconds since <a href=\"trait.MetadataExt.html#tymethod.ctime\" title=\"method std::os::unix::fs::MetadataExt::ctime\"><code>ctime</code></a>.</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs;\n<span class=\"kw\">use </span>std::os::unix::fs::MetadataExt;\n<span class=\"kw\">use </span>std::io;\n\n<span class=\"kw\">fn </span>main() -&gt; io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>meta = fs::metadata(<span class=\"string\">\"some_file\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span>nano_last_status_change_time = meta.ctime_nsec();\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0Ause+std::os::unix::fs::MetadataExt;%0Ause+std::io;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+meta+=+fs::metadata(%22some_file%22)?;%0A++++let+nano_last_status_change_time+=+meta.ctime_nsec();%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.blksize\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.1.0\">1.1.0</span> · <a class=\"src\" href=\"../../../../src/std/os/unix/fs.rs.html#689\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.blksize\" class=\"fn\">blksize</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\"><p>Returns the block size for filesystem I/O.</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs;\n<span class=\"kw\">use </span>std::os::unix::fs::MetadataExt;\n<span class=\"kw\">use </span>std::io;\n\n<span class=\"kw\">fn </span>main() -&gt; io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>meta = fs::metadata(<span class=\"string\">\"some_file\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span>block_size = meta.blksize();\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0Ause+std::os::unix::fs::MetadataExt;%0Ause+std::io;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+meta+=+fs::metadata(%22some_file%22)?;%0A++++let+block_size+=+meta.blksize();%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.blocks\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.1.0\">1.1.0</span> · <a class=\"src\" href=\"../../../../src/std/os/unix/fs.rs.html#708\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.blocks\" class=\"fn\">blocks</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of blocks allocated to the file, in 512-byte units.</p>\n<p>Please note that this may be smaller than <code>st_size / 512</code> when the file has holes.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs;\n<span class=\"kw\">use </span>std::os::unix::fs::MetadataExt;\n<span class=\"kw\">use </span>std::io;\n\n<span class=\"kw\">fn </span>main() -&gt; io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>meta = fs::metadata(<span class=\"string\">\"some_file\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span>blocks = meta.blocks();\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0Ause+std::os::unix::fs::MetadataExt;%0Ause+std::io;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+meta+=+fs::metadata(%22some_file%22)?;%0A++++let+blocks+=+meta.blocks();%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div><h2 id=\"implementors\" class=\"section-header\">Implementors<a href=\"#implementors\" class=\"anchor\">§</a></h2><div id=\"implementors-list\"><section id=\"impl-MetadataExt-for-Metadata\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.1.0\">1.1.0</span> · <a class=\"src\" href=\"../../../../src/std/os/unix/fs.rs.html#715-768\">source</a></span><a href=\"#impl-MetadataExt-for-Metadata\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.MetadataExt.html\" title=\"trait std::os::unix::fs::MetadataExt\">MetadataExt</a> for <a class=\"struct\" href=\"../../../fs/struct.Metadata.html\" title=\"struct std::fs::Metadata\">Metadata</a></h3></section></div><script src=\"../../../../trait.impl/std/os/unix/fs/trait.MetadataExt.js\" async=\"\"></script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:26:25.911Z"
}