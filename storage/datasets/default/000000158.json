{
	"title": "Environment Variables - The Cargo Book",
	"url": "https://doc.rust-lang.org/cargo/reference/environment-variables.html",
	"markdown": "# Environment Variables - The Cargo Book\n\nCargo sets and reads a number of environment variables which your code can detect or override. Here is a list of the variables Cargo sets, organized by when it interacts with them:\n\n## [Environment variables Cargo reads](#environment-variables-cargo-reads)\n\nYou can override these environment variables to change Cargo’s behavior on your system:\n\n-   `CARGO_LOG` — Cargo uses the [`tracing`](https://docs.rs/tracing) crate to display debug log messages. The `CARGO_LOG` environment variable can be set to enable debug logging, with a value such as `trace`, `debug`, or `warn`. Usually it is only used during debugging. For more details refer to the [Debug logging](https://doc.crates.io/contrib/implementation/debugging.html#logging).\n-   `CARGO_HOME` — Cargo maintains a local cache of the registry index and of git checkouts of crates. By default these are stored under `$HOME/.cargo` (`%USERPROFILE%\\.cargo` on Windows), but this variable overrides the location of this directory. Once a crate is cached it is not removed by the clean command. For more details refer to the [guide](../guide/cargo-home.html).\n-   `CARGO_TARGET_DIR` — Location of where to place all generated artifacts, relative to the current working directory. See [`build.target-dir`](about:blank/config.html#buildtarget-dir) to set via config.\n-   `CARGO` — If set, Cargo will forward this value instead of setting it to its own auto-detected path when it builds crates and when it executes build scripts and external subcommands. This value is not directly executed by Cargo, and should always point at a command that behaves exactly like `cargo`, as that’s what users of the variable will be expecting.\n-   `RUSTC` — Instead of running `rustc`, Cargo will execute this specified compiler instead. See [`build.rustc`](about:blank/config.html#buildrustc) to set via config.\n-   `RUSTC_WRAPPER` — Instead of simply running `rustc`, Cargo will execute this specified wrapper, passing as its command-line arguments the rustc invocation, with the first argument being the path to the actual rustc. Useful to set up a build cache tool such as `sccache`. See [`build.rustc-wrapper`](about:blank/config.html#buildrustc-wrapper) to set via config. Setting this to the empty string overwrites the config and resets cargo to not use a wrapper.\n-   `RUSTC_WORKSPACE_WRAPPER` — Instead of simply running `rustc`, for workspace members Cargo will execute this specified wrapper, passing as its command-line arguments the rustc invocation, with the first argument being the path to the actual rustc. When building a single-package project without workspaces, that package is considered to be the workspace. It affects the filename hash so that artifacts produced by the wrapper are cached separately. See [`build.rustc-workspace-wrapper`](about:blank/config.html#buildrustc-workspace-wrapper) to set via config. Setting this to the empty string overwrites the config and resets cargo to not use a wrapper for workspace members. If both `RUSTC_WRAPPER` and `RUSTC_WORKSPACE_WRAPPER` are set, then they will be nested: the final invocation is `$RUSTC_WRAPPER $RUSTC_WORKSPACE_WRAPPER $RUSTC`.\n-   `RUSTDOC` — Instead of running `rustdoc`, Cargo will execute this specified `rustdoc` instance instead. See [`build.rustdoc`](about:blank/config.html#buildrustdoc) to set via config.\n-   `RUSTDOCFLAGS` — A space-separated list of custom flags to pass to all `rustdoc` invocations that Cargo performs. In contrast with [`cargo rustdoc`](../commands/cargo-rustdoc.html), this is useful for passing a flag to _all_ `rustdoc` instances. See [`build.rustdocflags`](about:blank/config.html#buildrustdocflags) for some more ways to set flags. This string is split by whitespace; for a more robust encoding of multiple arguments, see `CARGO_ENCODED_RUSTDOCFLAGS`.\n-   `CARGO_ENCODED_RUSTDOCFLAGS` — A list of custom flags separated by `0x1f` (ASCII Unit Separator) to pass to all `rustdoc` invocations that Cargo performs.\n-   `RUSTFLAGS` — A space-separated list of custom flags to pass to all compiler invocations that Cargo performs. In contrast with [`cargo rustc`](../commands/cargo-rustc.html), this is useful for passing a flag to _all_ compiler instances. See [`build.rustflags`](about:blank/config.html#buildrustflags) for some more ways to set flags. This string is split by whitespace; for a more robust encoding of multiple arguments, see `CARGO_ENCODED_RUSTFLAGS`.\n-   `CARGO_ENCODED_RUSTFLAGS` — A list of custom flags separated by `0x1f` (ASCII Unit Separator) to pass to all compiler invocations that Cargo performs.\n-   `CARGO_INCREMENTAL` — If this is set to 1 then Cargo will force [incremental compilation](about:blank/profiles.html#incremental) to be enabled for the current compilation, and when set to 0 it will force disabling it. If this env var isn’t present then cargo’s defaults will otherwise be used. See also [`build.incremental`](about:blank/config.html#buildincremental) config value.\n-   `CARGO_CACHE_RUSTC_INFO` — If this is set to 0 then Cargo will not try to cache compiler version information.\n-   `HTTPS_PROXY` or `https_proxy` or `http_proxy` — The HTTP proxy to use, see [`http.proxy`](about:blank/config.html#httpproxy) for more detail.\n-   `HTTP_TIMEOUT` — The HTTP timeout in seconds, see [`http.timeout`](about:blank/config.html#httptimeout) for more detail.\n-   `TERM` — If this is set to `dumb`, it disables the progress bar.\n-   `BROWSER` — The web browser to execute to open documentation with [`cargo doc`](../commands/cargo-doc.html)’s’ `--open` flag, see [`doc.browser`](about:blank/config.html#docbrowser) for more details.\n-   `RUSTFMT` — Instead of running `rustfmt`, [`cargo fmt`](https://github.com/rust-lang/rustfmt) will execute this specified `rustfmt` instance instead.\n\n### [Configuration environment variables](#configuration-environment-variables)\n\nCargo reads environment variables for some configuration values. See the [configuration chapter](about:blank/config.html#environment-variables) for more details. In summary, the supported environment variables are:\n\n-   `CARGO_ALIAS_<name>` — Command aliases, see [`alias`](about:blank/config.html#alias).\n-   `CARGO_BUILD_JOBS` — Number of parallel jobs, see [`build.jobs`](about:blank/config.html#buildjobs).\n-   `CARGO_BUILD_RUSTC` — The `rustc` executable, see [`build.rustc`](about:blank/config.html#buildrustc).\n-   `CARGO_BUILD_RUSTC_WRAPPER` — The `rustc` wrapper, see [`build.rustc-wrapper`](about:blank/config.html#buildrustc-wrapper).\n-   `CARGO_BUILD_RUSTC_WORKSPACE_WRAPPER` — The `rustc` wrapper for workspace members only, see [`build.rustc-workspace-wrapper`](about:blank/config.html#buildrustc-workspace-wrapper).\n-   `CARGO_BUILD_RUSTDOC` — The `rustdoc` executable, see [`build.rustdoc`](about:blank/config.html#buildrustdoc).\n-   `CARGO_BUILD_TARGET` — The default target platform, see [`build.target`](about:blank/config.html#buildtarget).\n-   `CARGO_BUILD_TARGET_DIR` — The default output directory, see [`build.target-dir`](about:blank/config.html#buildtarget-dir).\n-   `CARGO_BUILD_RUSTFLAGS` — Extra `rustc` flags, see [`build.rustflags`](about:blank/config.html#buildrustflags).\n-   `CARGO_BUILD_RUSTDOCFLAGS` — Extra `rustdoc` flags, see [`build.rustdocflags`](about:blank/config.html#buildrustdocflags).\n-   `CARGO_BUILD_INCREMENTAL` — Incremental compilation, see [`build.incremental`](about:blank/config.html#buildincremental).\n-   `CARGO_BUILD_DEP_INFO_BASEDIR` — Dep-info relative directory, see [`build.dep-info-basedir`](about:blank/config.html#builddep-info-basedir).\n-   `CARGO_CARGO_NEW_VCS` — The default source control system with [`cargo new`](../commands/cargo-new.html), see [`cargo-new.vcs`](about:blank/config.html#cargo-newvcs).\n-   `CARGO_FUTURE_INCOMPAT_REPORT_FREQUENCY` — How often we should generate a future incompat report notification, see [`future-incompat-report.frequency`](about:blank/config.html#future-incompat-reportfrequency).\n-   `CARGO_HTTP_DEBUG` — Enables HTTP debugging, see [`http.debug`](about:blank/config.html#httpdebug).\n-   `CARGO_HTTP_PROXY` — Enables HTTP proxy, see [`http.proxy`](about:blank/config.html#httpproxy).\n-   `CARGO_HTTP_TIMEOUT` — The HTTP timeout, see [`http.timeout`](about:blank/config.html#httptimeout).\n-   `CARGO_HTTP_CAINFO` — The TLS certificate Certificate Authority file, see [`http.cainfo`](about:blank/config.html#httpcainfo).\n-   `CARGO_HTTP_CHECK_REVOKE` — Disables TLS certificate revocation checks, see [`http.check-revoke`](about:blank/config.html#httpcheck-revoke).\n-   `CARGO_HTTP_SSL_VERSION` — The TLS version to use, see [`http.ssl-version`](about:blank/config.html#httpssl-version).\n-   `CARGO_HTTP_LOW_SPEED_LIMIT` — The HTTP low-speed limit, see [`http.low-speed-limit`](about:blank/config.html#httplow-speed-limit).\n-   `CARGO_HTTP_MULTIPLEXING` — Whether HTTP/2 multiplexing is used, see [`http.multiplexing`](about:blank/config.html#httpmultiplexing).\n-   `CARGO_HTTP_USER_AGENT` — The HTTP user-agent header, see [`http.user-agent`](about:blank/config.html#httpuser-agent).\n-   `CARGO_INSTALL_ROOT` — The default directory for [`cargo install`](../commands/cargo-install.html), see [`install.root`](about:blank/config.html#installroot).\n-   `CARGO_NET_RETRY` — Number of times to retry network errors, see [`net.retry`](about:blank/config.html#netretry).\n-   `CARGO_NET_GIT_FETCH_WITH_CLI` — Enables the use of the `git` executable to fetch, see [`net.git-fetch-with-cli`](about:blank/config.html#netgit-fetch-with-cli).\n-   `CARGO_NET_OFFLINE` — Offline mode, see [`net.offline`](about:blank/config.html#netoffline).\n-   `CARGO_PROFILE_<name>_BUILD_OVERRIDE_<key>` — Override build script profile, see [`profile.<name>.build-override`](about:blank/config.html#profilenamebuild-override).\n-   `CARGO_PROFILE_<name>_CODEGEN_UNITS` — Set code generation units, see [`profile.<name>.codegen-units`](about:blank/config.html#profilenamecodegen-units).\n-   `CARGO_PROFILE_<name>_DEBUG` — What kind of debug info to include, see [`profile.<name>.debug`](about:blank/config.html#profilenamedebug).\n-   `CARGO_PROFILE_<name>_DEBUG_ASSERTIONS` — Enable/disable debug assertions, see [`profile.<name>.debug-assertions`](about:blank/config.html#profilenamedebug-assertions).\n-   `CARGO_PROFILE_<name>_INCREMENTAL` — Enable/disable incremental compilation, see [`profile.<name>.incremental`](about:blank/config.html#profilenameincremental).\n-   `CARGO_PROFILE_<name>_LTO` — Link-time optimization, see [`profile.<name>.lto`](about:blank/config.html#profilenamelto).\n-   `CARGO_PROFILE_<name>_OVERFLOW_CHECKS` — Enable/disable overflow checks, see [`profile.<name>.overflow-checks`](about:blank/config.html#profilenameoverflow-checks).\n-   `CARGO_PROFILE_<name>_OPT_LEVEL` — Set the optimization level, see [`profile.<name>.opt-level`](about:blank/config.html#profilenameopt-level).\n-   `CARGO_PROFILE_<name>_PANIC` — The panic strategy to use, see [`profile.<name>.panic`](about:blank/config.html#profilenamepanic).\n-   `CARGO_PROFILE_<name>_RPATH` — The rpath linking option, see [`profile.<name>.rpath`](about:blank/config.html#profilenamerpath).\n-   `CARGO_PROFILE_<name>_SPLIT_DEBUGINFO` — Controls debug file output behavior, see [`profile.<name>.split-debuginfo`](about:blank/config.html#profilenamesplit-debuginfo).\n-   `CARGO_PROFILE_<name>_STRIP` — Controls stripping of symbols and/or debuginfos, see [`profile.<name>.strip`](about:blank/config.html#profilenamestrip).\n-   `CARGO_REGISTRIES_<name>_CREDENTIAL_PROVIDER` — Credential provider for a registry, see [`registries.<name>.credential-provider`](about:blank/config.html#registriesnamecredential-provider).\n-   `CARGO_REGISTRIES_<name>_INDEX` — URL of a registry index, see [`registries.<name>.index`](about:blank/config.html#registriesnameindex).\n-   `CARGO_REGISTRIES_<name>_TOKEN` — Authentication token of a registry, see [`registries.<name>.token`](about:blank/config.html#registriesnametoken).\n-   `CARGO_REGISTRY_CREDENTIAL_PROVIDER` — Credential provider for [crates.io](https://crates.io/), see [`registry.credential-provider`](about:blank/config.html#registrycredential-provider).\n-   `CARGO_REGISTRY_DEFAULT` — Default registry for the `--registry` flag, see [`registry.default`](about:blank/config.html#registrydefault).\n-   `CARGO_REGISTRY_GLOBAL_CREDENTIAL_PROVIDERS` — Credential providers for registries that do not have a specific provider defined. See [`registry.global-credential-providers`](about:blank/config.html#registryglobal-credential-providers).\n-   `CARGO_REGISTRY_TOKEN` — Authentication token for [crates.io](https://crates.io/), see [`registry.token`](about:blank/config.html#registrytoken).\n-   `CARGO_TARGET_<triple>_LINKER` — The linker to use, see [`target.<triple>.linker`](about:blank/config.html#targettriplelinker). The triple must be [converted to uppercase and underscores](about:blank/config.html#environment-variables).\n-   `CARGO_TARGET_<triple>_RUNNER` — The executable runner, see [`target.<triple>.runner`](about:blank/config.html#targettriplerunner).\n-   `CARGO_TARGET_<triple>_RUSTFLAGS` — Extra `rustc` flags for a target, see [`target.<triple>.rustflags`](about:blank/config.html#targettriplerustflags).\n-   `CARGO_TERM_QUIET` — Quiet mode, see [`term.quiet`](about:blank/config.html#termquiet).\n-   `CARGO_TERM_VERBOSE` — The default terminal verbosity, see [`term.verbose`](about:blank/config.html#termverbose).\n-   `CARGO_TERM_COLOR` — The default color mode, see [`term.color`](about:blank/config.html#termcolor).\n-   `CARGO_TERM_PROGRESS_WHEN` — The default progress bar showing mode, see [`term.progress.when`](about:blank/config.html#termprogresswhen).\n-   `CARGO_TERM_PROGRESS_WIDTH` — The default progress bar width, see [`term.progress.width`](about:blank/config.html#termprogresswidth).\n\n## [Environment variables Cargo sets for crates](#environment-variables-cargo-sets-for-crates)\n\nCargo exposes these environment variables to your crate when it is compiled. Note that this applies for running binaries with `cargo run` and `cargo test` as well. To get the value of any of these variables in a Rust program, do this:\n\n```rust\nlet version = env!(\"CARGO_PKG_VERSION\");\n```\n\n`version` will now contain the value of `CARGO_PKG_VERSION`.\n\nNote that if one of these values is not provided in the manifest, the corresponding environment variable is set to the empty string, `\"\"`.\n\n-   `CARGO` — Path to the `cargo` binary performing the build.\n-   `CARGO_MANIFEST_DIR` — The directory containing the manifest of your package.\n-   `CARGO_PKG_VERSION` — The full version of your package.\n-   `CARGO_PKG_VERSION_MAJOR` — The major version of your package.\n-   `CARGO_PKG_VERSION_MINOR` — The minor version of your package.\n-   `CARGO_PKG_VERSION_PATCH` — The patch version of your package.\n-   `CARGO_PKG_VERSION_PRE` — The pre-release version of your package.\n-   `CARGO_PKG_AUTHORS` — Colon separated list of authors from the manifest of your package.\n-   `CARGO_PKG_NAME` — The name of your package.\n-   `CARGO_PKG_DESCRIPTION` — The description from the manifest of your package.\n-   `CARGO_PKG_HOMEPAGE` — The home page from the manifest of your package.\n-   `CARGO_PKG_REPOSITORY` — The repository from the manifest of your package.\n-   `CARGO_PKG_LICENSE` — The license from the manifest of your package.\n-   `CARGO_PKG_LICENSE_FILE` — The license file from the manifest of your package.\n-   `CARGO_PKG_RUST_VERSION` — The Rust version from the manifest of your package. Note that this is the minimum Rust version supported by the package, not the current Rust version.\n-   `CARGO_PKG_README` — Path to the README file of your package.\n-   `CARGO_CRATE_NAME` — The name of the crate that is currently being compiled. It is the name of the [Cargo target](cargo-targets.html) with `-` converted to `_`, such as the name of the library, binary, example, integration test, or benchmark.\n-   `CARGO_BIN_NAME` — The name of the binary that is currently being compiled. Only set for [binaries](about:blank/cargo-targets.html#binaries) or binary [examples](about:blank/cargo-targets.html#examples). This name does not include any file extension, such as `.exe`.\n-   `OUT_DIR` — If the package has a build script, this is set to the folder where the build script should place its output. See below for more information. (Only set during compilation.)\n-   `CARGO_BIN_EXE_<name>` — The absolute path to a binary target’s executable. This is only set when building an [integration test](about:blank/cargo-targets.html#integration-tests) or benchmark. This may be used with the [`env` macro](../../std/macro.env.html) to find the executable to run for testing purposes. The `<name>` is the name of the binary target, exactly as-is. For example, `CARGO_BIN_EXE_my-program` for a binary named `my-program`. Binaries are automatically built when the test is built, unless the binary has required features that are not enabled.\n-   `CARGO_PRIMARY_PACKAGE` — This environment variable will be set if the package being built is primary. Primary packages are the ones the user selected on the command-line, either with `-p` flags or the defaults based on the current directory and the default workspace members. This environment variable will not be set when building dependencies. This is only set when compiling the package (not when running binaries or tests).\n-   `CARGO_TARGET_TMPDIR` — Only set when building [integration test](about:blank/cargo-targets.html#integration-tests) or benchmark code. This is a path to a directory inside the target directory where integration tests or benchmarks are free to put any data needed by the tests/benches. Cargo initially creates this directory but doesn’t manage its content in any way, this is the responsibility of the test code.\n-   `CARGO_RUSTC_CURRENT_DIR` — This is a path that `rustc` is invoked from **(nightly only)**.\n\n### [Dynamic library paths](#dynamic-library-paths)\n\nCargo also sets the dynamic library path when compiling and running binaries with commands like `cargo run` and `cargo test`. This helps with locating shared libraries that are part of the build process. The variable name depends on the platform:\n\n-   Windows: `PATH`\n-   macOS: `DYLD_FALLBACK_LIBRARY_PATH`\n-   Unix: `LD_LIBRARY_PATH`\n-   AIX: `LIBPATH`\n\nThe value is extended from the existing value when Cargo starts. macOS has special consideration where if `DYLD_FALLBACK_LIBRARY_PATH` is not already set, it will add the default `$HOME/lib:/usr/local/lib:/usr/lib`.\n\nCargo includes the following paths:\n\n-   Search paths included from any build script with the [`rustc-link-search` instruction](about:blank/build-scripts.html#rustc-link-search). Paths outside of the `target` directory are removed. It is the responsibility of the user running Cargo to properly set the environment if additional libraries on the system are needed in the search path.\n-   The base output directory, such as `target/debug`, and the “deps” directory. This is mostly for legacy support of `rustc` compiler plugins.\n-   The rustc sysroot library path. This generally is not important to most users.\n\n## [Environment variables Cargo sets for build scripts](#environment-variables-cargo-sets-for-build-scripts)\n\nCargo sets several environment variables when build scripts are run. Because these variables are not yet set when the build script is compiled, the above example using `env!` won’t work and instead you’ll need to retrieve the values when the build script is run:\n\n```rust\nuse std::env;\nlet out_dir = env::var(\"OUT_DIR\").unwrap();\n```\n\n`out_dir` will now contain the value of `OUT_DIR`.\n\n-   `CARGO` — Path to the `cargo` binary performing the build.\n-   `CARGO_MANIFEST_DIR` — The directory containing the manifest for the package being built (the package containing the build script). Also note that this is the value of the current working directory of the build script when it starts.\n-   `CARGO_MANIFEST_LINKS` — the manifest `links` value.\n-   `CARGO_MAKEFLAGS` — Contains parameters needed for Cargo’s [jobserver](https://www.gnu.org/software/make/manual/html_node/Job-Slots.html) implementation to parallelize subprocesses. Rustc or cargo invocations from build.rs can already read `CARGO_MAKEFLAGS`, but GNU Make requires the flags to be specified either directly as arguments, or through the `MAKEFLAGS` environment variable. Currently Cargo doesn’t set the `MAKEFLAGS` variable, but it’s free for build scripts invoking GNU Make to set it to the contents of `CARGO_MAKEFLAGS`.\n-   `CARGO_FEATURE_<name>` — For each activated feature of the package being built, this environment variable will be present where `<name>` is the name of the feature uppercased and having `-` translated to `_`.\n-   `CARGO_CFG_<cfg>` — For each [configuration option](../../reference/conditional-compilation.html) of the package being built, this environment variable will contain the value of the configuration, where `<cfg>` is the name of the configuration uppercased and having `-` translated to `_`. Boolean configurations are present if they are set, and not present otherwise. Configurations with multiple values are joined to a single variable with the values delimited by `,`. This includes values built-in to the compiler (which can be seen with `rustc --print=cfg`) and values set by build scripts and extra flags passed to `rustc` (such as those defined in `RUSTFLAGS`). Some examples of what these variables are:\n    \n    -   `CARGO_CFG_UNIX` — Set on [unix-like platforms](about:blank/reference/conditional-compilation.html#unix-and-windows).\n    -   `CARGO_CFG_WINDOWS` — Set on [windows-like platforms](about:blank/reference/conditional-compilation.html#unix-and-windows).\n    -   `CARGO_CFG_TARGET_FAMILY=unix` — The [target family](about:blank/reference/conditional-compilation.html#target_family).\n    -   `CARGO_CFG_TARGET_OS=macos` — The [target operating system](about:blank/reference/conditional-compilation.html#target_os).\n    -   `CARGO_CFG_TARGET_ARCH=x86_64` — The CPU [target architecture](about:blank/reference/conditional-compilation.html#target_arch).\n    -   `CARGO_CFG_TARGET_VENDOR=apple` — The [target vendor](about:blank/reference/conditional-compilation.html#target_vendor).\n    -   `CARGO_CFG_TARGET_ENV=gnu` — The [target environment](about:blank/reference/conditional-compilation.html#target_env) ABI.\n    -   `CARGO_CFG_TARGET_POINTER_WIDTH=64` — The CPU [pointer width](about:blank/reference/conditional-compilation.html#target_pointer_width).\n    -   `CARGO_CFG_TARGET_ENDIAN=little` — The CPU [target endianness](about:blank/reference/conditional-compilation.html#target_endian).\n    -   `CARGO_CFG_TARGET_FEATURE=mmx,sse` — List of CPU [target features](about:blank/reference/conditional-compilation.html#target_feature) enabled.\n    \n    > Note that different [target triples](about:blank/appendix/glossary.html#target) have different sets of `cfg` values, hence variables present in one target triple might not be available in the other.\n    \n-   `OUT_DIR` — the folder in which all output and intermediate artifacts should be placed. This folder is inside the build directory for the package being built, and it is unique for the package in question.\n-   `TARGET` — the target triple that is being compiled for. Native code should be compiled for this triple. See the [Target Triple](about:blank/appendix/glossary.html#target) description for more information.\n-   `HOST` — the host triple of the Rust compiler.\n-   `NUM_JOBS` — the parallelism specified as the top-level parallelism. This can be useful to pass a `-j` parameter to a system like `make`. Note that care should be taken when interpreting this environment variable. For historical purposes this is still provided but recent versions of Cargo, for example, do not need to run `make -j`, and instead can set the `MAKEFLAGS` env var to the content of `CARGO_MAKEFLAGS` to activate the use of Cargo’s GNU Make compatible [jobserver](https://www.gnu.org/software/make/manual/html_node/Job-Slots.html) for sub-make invocations.\n-   `OPT_LEVEL`, `DEBUG` — values of the corresponding variables for the profile currently being built.\n-   `PROFILE` — `release` for release builds, `debug` for other builds. This is determined based on if the [profile](profiles.html) inherits from the [`dev`](about:blank/profiles.html#dev) or [`release`](about:blank/profiles.html#release) profile. Using this environment variable is not recommended. Using other environment variables like `OPT_LEVEL` provide a more correct view of the actual settings being used.\n-   `DEP_<name>_<key>` — For more information about this set of environment variables, see build script documentation about [`links`](about:blank/build-scripts.html#the-links-manifest-key).\n-   `RUSTC`, `RUSTDOC` — the compiler and documentation generator that Cargo has resolved to use, passed to the build script so it might use it as well.\n-   `RUSTC_WRAPPER` — the `rustc` wrapper, if any, that Cargo is using. See [`build.rustc-wrapper`](about:blank/config.html#buildrustc-wrapper).\n-   `RUSTC_WORKSPACE_WRAPPER` — the `rustc` wrapper, if any, that Cargo is using for workspace members. See [`build.rustc-workspace-wrapper`](about:blank/config.html#buildrustc-workspace-wrapper).\n-   `RUSTC_LINKER` — The path to the linker binary that Cargo has resolved to use for the current target, if specified. The linker can be changed by editing `.cargo/config.toml`; see the documentation about [cargo configuration](config.html) for more information.\n-   `CARGO_ENCODED_RUSTFLAGS` — extra flags that Cargo invokes `rustc` with, separated by a `0x1f` character (ASCII Unit Separator). See [`build.rustflags`](about:blank/config.html#buildrustflags). Note that since Rust 1.55, `RUSTFLAGS` is removed from the environment; scripts should use `CARGO_ENCODED_RUSTFLAGS` instead.\n-   `CARGO_PKG_<var>` — The package information variables, with the same names and values as are [provided during crate building](#environment-variables-cargo-sets-for-crates).\n\n## [Environment variables Cargo sets for 3rd party subcommands](#environment-variables-cargo-sets-for-3rd-party-subcommands)\n\nCargo exposes this environment variable to 3rd party subcommands (ie. programs named `cargo-foobar` placed in `$PATH`):\n\n-   `CARGO` — Path to the `cargo` binary performing the build.\n-   `CARGO_MAKEFLAGS` — Contains parameters needed for Cargo’s [jobserver](https://www.gnu.org/software/make/manual/html_node/Job-Slots.html) implementation to parallelize subprocesses. This is set only when Cargo detects the existence of a jobserver.\n\nFor extended information about your environment you may run `cargo metadata`.",
	"html": "<!DOCTYPE html><html lang=\"en\" class=\"light\" dir=\"ltr\"><head>\n        <!-- Book generated using mdBook -->\n        <meta charset=\"UTF-8\">\n        <title>Environment Variables - The Cargo Book</title>\n\n\n        <!-- Custom HTML head -->\n        <style>\n            dd {\n                margin-bottom: 1em;\n            }\n        </style>\n\n        <meta name=\"description\" content=\"\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <meta name=\"theme-color\" content=\"rgb(255, 255, 255)\">\n\n        <link rel=\"shortcut icon\" href=\"../favicon.png\">\n        <link rel=\"stylesheet\" href=\"../css/variables.css\">\n        <link rel=\"stylesheet\" href=\"../css/general.css\">\n        <link rel=\"stylesheet\" href=\"../css/chrome.css\">\n        <link rel=\"stylesheet\" href=\"../css/print.css\" media=\"print\">\n\n        <!-- Fonts -->\n        <link rel=\"stylesheet\" href=\"../FontAwesome/css/font-awesome.css\">\n        <link rel=\"stylesheet\" href=\"../fonts/fonts.css\">\n\n        <!-- Highlight.js Stylesheets -->\n        <link rel=\"stylesheet\" href=\"../highlight.css\">\n        <link rel=\"stylesheet\" href=\"../tomorrow-night.css\" disabled=\"\">\n        <link rel=\"stylesheet\" href=\"../ayu-highlight.css\" disabled=\"\">\n\n        <!-- Custom theme stylesheets -->\n\n    </head>\n    <body class=\"js sidebar-visible\">\n    <div id=\"body-container\">\n        <!-- Provide site root to javascript -->\n        <script>\n            var path_to_root = \"../\";\n            var default_theme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"navy\" : \"light\";\n        </script>\n\n        <!-- Work around some values being stored in localStorage wrapped in quotes -->\n        <script>\n            try {\n                var theme = localStorage.getItem('mdbook-theme');\n                var sidebar = localStorage.getItem('mdbook-sidebar');\n\n                if (theme.startsWith('\"') && theme.endsWith('\"')) {\n                    localStorage.setItem('mdbook-theme', theme.slice(1, theme.length - 1));\n                }\n\n                if (sidebar.startsWith('\"') && sidebar.endsWith('\"')) {\n                    localStorage.setItem('mdbook-sidebar', sidebar.slice(1, sidebar.length - 1));\n                }\n            } catch (e) { }\n        </script>\n\n        <!-- Set the theme before any content is loaded, prevents flash -->\n        <script>\n            var theme;\n            try { theme = localStorage.getItem('mdbook-theme'); } catch(e) { }\n            if (theme === null || theme === undefined) { theme = default_theme; }\n            var html = document.querySelector('html');\n            html.classList.remove('light')\n            html.classList.add(theme);\n            var body = document.querySelector('body');\n            body.classList.remove('no-js')\n            body.classList.add('js');\n        </script>\n\n        <input type=\"checkbox\" id=\"sidebar-toggle-anchor\" class=\"hidden\">\n\n        <!-- Hide / unhide sidebar before it is displayed -->\n        <script>\n            var body = document.querySelector('body');\n            var sidebar = null;\n            var sidebar_toggle = document.getElementById(\"sidebar-toggle-anchor\");\n            if (document.body.clientWidth >= 1080) {\n                try { sidebar = localStorage.getItem('mdbook-sidebar'); } catch(e) { }\n                sidebar = sidebar || 'visible';\n            } else {\n                sidebar = 'hidden';\n            }\n            sidebar_toggle.checked = sidebar === 'visible';\n            body.classList.remove('sidebar-visible');\n            body.classList.add(\"sidebar-\" + sidebar);\n        </script>\n\n        <nav id=\"sidebar\" class=\"sidebar\" aria-label=\"Table of contents\" aria-hidden=\"false\">\n            <div class=\"sidebar-scrollbox\">\n                <ol class=\"chapter\"><li class=\"chapter-item expanded affix \"><a href=\"../index.html\" tabindex=\"0\">Introduction</a></li><li class=\"chapter-item expanded \"><a href=\"../getting-started/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.</strong> Getting Started</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../getting-started/installation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.1.</strong> Installation</a></li><li class=\"chapter-item expanded \"><a href=\"../getting-started/first-steps.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.2.</strong> First Steps with Cargo</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../guide/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.</strong> Cargo Guide</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../guide/why-cargo-exists.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.1.</strong> Why Cargo Exists</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/creating-a-new-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.2.</strong> Creating a New Package</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/working-on-an-existing-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.3.</strong> Working on an Existing Package</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/dependencies.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.4.</strong> Dependencies</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/project-layout.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.5.</strong> Package Layout</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/cargo-toml-vs-cargo-lock.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.6.</strong> Cargo.toml vs Cargo.lock</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/tests.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.7.</strong> Tests</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/continuous-integration.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.8.</strong> Continuous Integration</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/cargo-home.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.9.</strong> Cargo Home</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/build-cache.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.10.</strong> Build Cache</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.</strong> Cargo Reference</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/specifying-dependencies.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.1.</strong> Specifying Dependencies</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/overriding-dependencies.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.1.1.</strong> Overriding Dependencies</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/manifest.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.2.</strong> The Manifest Format</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/cargo-targets.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.2.1.</strong> Cargo Targets</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/workspaces.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.3.</strong> Workspaces</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/features.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.4.</strong> Features</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/features-examples.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.4.1.</strong> Features Examples</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/profiles.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.5.</strong> Profiles</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/config.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.6.</strong> Configuration</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/environment-variables.html\" class=\"active\" tabindex=\"0\"><strong aria-hidden=\"true\">3.7.</strong> Environment Variables</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/build-scripts.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.8.</strong> Build Scripts</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/build-script-examples.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.8.1.</strong> Build Script Examples</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/publishing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.9.</strong> Publishing on crates.io</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/pkgid-spec.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.10.</strong> Package ID Specifications</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/source-replacement.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.11.</strong> Source Replacement</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/external-tools.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.12.</strong> External Tools</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/registries.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.</strong> Registries</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/registry-authentication.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.1.</strong> Registry Authentication</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/credential-provider-protocol.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.1.1.</strong> Credential Provider Protocol</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/running-a-registry.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.2.</strong> Running a Registry</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/registry-index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.2.1.</strong> Registry Index</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/registry-web-api.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.2.2.</strong> Registry Web API</a></li></ol></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/resolver.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.14.</strong> Dependency Resolution</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/semver.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.15.</strong> SemVer Compatibility</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/future-incompat-report.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.16.</strong> Future incompat report</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/timings.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.17.</strong> Reporting build timings</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/unstable.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.18.</strong> Unstable Features</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../commands/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.</strong> Cargo Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../commands/general-commands.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.</strong> General Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../commands/cargo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.1.</strong> cargo</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-help.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.2.</strong> cargo help</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-version.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.3.</strong> cargo version</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../commands/build-commands.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.</strong> Build Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-bench.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.1.</strong> cargo bench</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-build.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.2.</strong> cargo build</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-check.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.3.</strong> cargo check</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-clean.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.4.</strong> cargo clean</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-doc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.5.</strong> cargo doc</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-fetch.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.6.</strong> cargo fetch</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-fix.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.7.</strong> cargo fix</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-run.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.8.</strong> cargo run</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-rustc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.9.</strong> cargo rustc</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-rustdoc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.10.</strong> cargo rustdoc</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-test.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.11.</strong> cargo test</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-report.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.12.</strong> cargo report</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../commands/manifest-commands.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.</strong> Manifest Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-add.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.1.</strong> cargo add</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-generate-lockfile.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.2.</strong> cargo generate-lockfile</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-locate-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.3.</strong> cargo locate-project</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-metadata.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.4.</strong> cargo metadata</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-pkgid.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.5.</strong> cargo pkgid</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-remove.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.6.</strong> cargo remove</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-tree.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.7.</strong> cargo tree</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-update.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.8.</strong> cargo update</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-vendor.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.9.</strong> cargo vendor</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-verify-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.10.</strong> cargo verify-project</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../commands/package-commands.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.</strong> Package Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-init.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.1.</strong> cargo init</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-install.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.2.</strong> cargo install</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-new.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.3.</strong> cargo new</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-search.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.4.</strong> cargo search</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-uninstall.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.5.</strong> cargo uninstall</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../commands/publishing-commands.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.</strong> Publishing Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-login.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.1.</strong> cargo login</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-logout.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.2.</strong> cargo logout</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-owner.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.3.</strong> cargo owner</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-package.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.4.</strong> cargo package</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-publish.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.5.</strong> cargo publish</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-yank.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.6.</strong> cargo yank</a></li></ol></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../faq.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.</strong> FAQ</a></li><li class=\"chapter-item expanded \"><a href=\"../appendix/glossary.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.</strong> Appendix: Glossary</a></li><li class=\"chapter-item expanded \"><a href=\"../appendix/git-authentication.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.</strong> Appendix: Git Authentication</a></li></ol>\n            </div>\n            <div id=\"sidebar-resize-handle\" class=\"sidebar-resize-handle\">\n                <div class=\"sidebar-resize-indicator\"></div>\n            </div>\n        </nav>\n\n        <!-- Track and set sidebar scroll position -->\n        <script>\n            var sidebarScrollbox = document.querySelector('#sidebar .sidebar-scrollbox');\n            sidebarScrollbox.addEventListener('click', function(e) {\n                if (e.target.tagName === 'A') {\n                    sessionStorage.setItem('sidebar-scroll', sidebarScrollbox.scrollTop);\n                }\n            }, { passive: true });\n            var sidebarScrollTop = sessionStorage.getItem('sidebar-scroll');\n            sessionStorage.removeItem('sidebar-scroll');\n            if (sidebarScrollTop) {\n                // preserve sidebar scroll position when navigating via links within sidebar\n                sidebarScrollbox.scrollTop = sidebarScrollTop;\n            } else {\n                // scroll sidebar to current active section when navigating via \"next/previous chapter\" buttons\n                var activeSection = document.querySelector('#sidebar .active');\n                if (activeSection) {\n                    activeSection.scrollIntoView({ block: 'center' });\n                }\n            }\n        </script>\n\n        <div id=\"page-wrapper\" class=\"page-wrapper\">\n\n            <div class=\"page\">\n                                <div id=\"menu-bar-hover-placeholder\"></div>\n                <div id=\"menu-bar\" class=\"menu-bar\" style=\"top: 0px;\">\n                    <div class=\"left-buttons\">\n                        <label id=\"sidebar-toggle\" class=\"icon-button\" for=\"sidebar-toggle-anchor\" title=\"Toggle Table of Contents\" aria-label=\"Toggle Table of Contents\" aria-controls=\"sidebar\" aria-expanded=\"true\">\n                            <i class=\"fa fa-bars\"></i>\n                        </label>\n                        <button id=\"theme-toggle\" class=\"icon-button\" type=\"button\" title=\"Change theme\" aria-label=\"Change theme\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-controls=\"theme-list\">\n                            <i class=\"fa fa-paint-brush\"></i>\n                        </button>\n                        <ul id=\"theme-list\" class=\"theme-popup\" aria-label=\"Themes\" role=\"menu\">\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme theme-selected\" id=\"light\">Light</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"rust\">Rust</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"coal\">Coal</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"navy\">Navy</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"ayu\">Ayu</button></li>\n                        </ul>\n                        <button id=\"search-toggle\" class=\"icon-button\" type=\"button\" title=\"Search. (Shortkey: s)\" aria-label=\"Toggle Searchbar\" aria-expanded=\"false\" aria-keyshortcuts=\"S\" aria-controls=\"searchbar\">\n                            <i class=\"fa fa-search\"></i>\n                        </button>\n                    </div>\n\n                    <h1 class=\"menu-title\">The Cargo Book</h1>\n\n                    <div class=\"right-buttons\">\n                        <a href=\"../print.html\" title=\"Print this book\" aria-label=\"Print this book\">\n                            <i id=\"print-button\" class=\"fa fa-print\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/cargo/tree/master/src/doc/src\" title=\"Git repository\" aria-label=\"Git repository\">\n                            <i id=\"git-repository-button\" class=\"fa fa-github\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/cargo/edit/master/src/doc/src/reference/environment-variables.md\" title=\"Suggest an edit\" aria-label=\"Suggest an edit\">\n                            <i id=\"git-edit-button\" class=\"fa fa-edit\"></i>\n                        </a>\n\n                    </div>\n                </div>\n\n                <div id=\"search-wrapper\" class=\"hidden\">\n                    <form id=\"searchbar-outer\" class=\"searchbar-outer\">\n                        <input type=\"search\" id=\"searchbar\" name=\"searchbar\" placeholder=\"Search this book ...\" aria-controls=\"searchresults-outer\" aria-describedby=\"searchresults-header\">\n                    </form>\n                    <div id=\"searchresults-outer\" class=\"searchresults-outer hidden\">\n                        <div id=\"searchresults-header\" class=\"searchresults-header\"></div>\n                        <ul id=\"searchresults\">\n                        </ul>\n                    </div>\n                </div>\n\n                <!-- Apply ARIA attributes after the sidebar and the sidebar toggle button are added to the DOM -->\n                <script>\n                    document.getElementById('sidebar-toggle').setAttribute('aria-expanded', sidebar === 'visible');\n                    document.getElementById('sidebar').setAttribute('aria-hidden', sidebar !== 'visible');\n                    Array.from(document.querySelectorAll('#sidebar a')).forEach(function(link) {\n                        link.setAttribute('tabIndex', sidebar === 'visible' ? 0 : -1);\n                    });\n                </script>\n\n                <div id=\"content\" class=\"content\">\n                    <main>\n                        <h1 id=\"environment-variables\"><a class=\"header\" href=\"#environment-variables\">Environment Variables</a></h1>\n<p>Cargo sets and reads a number of environment variables which your code can detect\nor override. Here is a list of the variables Cargo sets, organized by when it interacts\nwith them:</p>\n<h2 id=\"environment-variables-cargo-reads\"><a class=\"header\" href=\"#environment-variables-cargo-reads\">Environment variables Cargo reads</a></h2>\n<p>You can override these environment variables to change Cargo’s behavior on your\nsystem:</p>\n<ul>\n<li><code class=\"hljs\">CARGO_LOG</code> — Cargo uses the <a href=\"https://docs.rs/tracing\"><code class=\"hljs\">tracing</code></a> crate to display debug log messages.\nThe <code class=\"hljs\">CARGO_LOG</code> environment variable can be set to enable debug logging,\nwith a value such as <code class=\"hljs\">trace</code>, <code class=\"hljs\">debug</code>, or <code class=\"hljs\">warn</code>.\nUsually it is only used during debugging. For more details refer to the\n<a href=\"https://doc.crates.io/contrib/implementation/debugging.html#logging\">Debug logging</a>.</li>\n<li><code class=\"hljs\">CARGO_HOME</code> — Cargo maintains a local cache of the registry index and of\ngit checkouts of crates. By default these are stored under <code class=\"hljs\">$HOME/.cargo</code>\n(<code class=\"hljs\">%USERPROFILE%\\.cargo</code> on Windows), but this variable overrides the\nlocation of this directory. Once a crate is cached it is not removed by the\nclean command.\nFor more details refer to the <a href=\"../guide/cargo-home.html\">guide</a>.</li>\n<li><code class=\"hljs\">CARGO_TARGET_DIR</code> — Location of where to place all generated artifacts,\nrelative to the current working directory. See <a href=\"config.html#buildtarget-dir\"><code class=\"hljs\">build.target-dir</code></a> to set\nvia config.</li>\n<li><code class=\"hljs\">CARGO</code> — If set, Cargo will forward this value instead of setting it\nto its own auto-detected path when it builds crates and when it\nexecutes build scripts and external subcommands. This value is not\ndirectly executed by Cargo, and should always point at a command that\nbehaves exactly like <code class=\"hljs\">cargo</code>, as that’s what users of the variable\nwill be expecting.</li>\n<li><code class=\"hljs\">RUSTC</code> — Instead of running <code class=\"hljs\">rustc</code>, Cargo will execute this specified\ncompiler instead. See <a href=\"config.html#buildrustc\"><code class=\"hljs\">build.rustc</code></a> to set via config.</li>\n<li><code class=\"hljs\">RUSTC_WRAPPER</code> — Instead of simply running <code class=\"hljs\">rustc</code>, Cargo will execute this\nspecified wrapper, passing as its command-line arguments the rustc\ninvocation, with the first argument being the path to the actual rustc.\nUseful to set up a build cache tool such as <code class=\"hljs\">sccache</code>. See\n<a href=\"config.html#buildrustc-wrapper\"><code class=\"hljs\">build.rustc-wrapper</code></a> to set via config. Setting this to the empty string\noverwrites the config and resets cargo to not use a wrapper.</li>\n<li><code class=\"hljs\">RUSTC_WORKSPACE_WRAPPER</code> — Instead of simply running <code class=\"hljs\">rustc</code>, for workspace members Cargo will\nexecute this specified wrapper, passing as its command-line arguments the rustc invocation, with\nthe first argument being the path to the actual rustc. When building a single-package project\nwithout workspaces, that package is considered to be the workspace. It affects the filename hash\nso that artifacts produced by the wrapper are cached separately. See\n<a href=\"config.html#buildrustc-workspace-wrapper\"><code class=\"hljs\">build.rustc-workspace-wrapper</code></a> to set via config. Setting this to the empty string overwrites\nthe config and resets cargo to not use a wrapper for workspace members. If both <code class=\"hljs\">RUSTC_WRAPPER</code>\nand <code class=\"hljs\">RUSTC_WORKSPACE_WRAPPER</code> are set, then they will be nested: the final invocation is\n<code class=\"hljs\">$RUSTC_WRAPPER $RUSTC_WORKSPACE_WRAPPER $RUSTC</code>.</li>\n<li><code class=\"hljs\">RUSTDOC</code> — Instead of running <code class=\"hljs\">rustdoc</code>, Cargo will execute this specified\n<code class=\"hljs\">rustdoc</code> instance instead. See <a href=\"config.html#buildrustdoc\"><code class=\"hljs\">build.rustdoc</code></a> to set via config.</li>\n<li><code class=\"hljs\">RUSTDOCFLAGS</code> — A space-separated list of custom flags to pass to all <code class=\"hljs\">rustdoc</code>\ninvocations that Cargo performs. In contrast with <a href=\"../commands/cargo-rustdoc.html\"><code class=\"hljs\">cargo rustdoc</code></a>, this is\nuseful for passing a flag to <em>all</em> <code class=\"hljs\">rustdoc</code> instances. See\n<a href=\"config.html#buildrustdocflags\"><code class=\"hljs\">build.rustdocflags</code></a> for some more ways to set flags. This string is\nsplit by whitespace; for a more robust encoding of multiple arguments,\nsee <code class=\"hljs\">CARGO_ENCODED_RUSTDOCFLAGS</code>.</li>\n<li><code class=\"hljs\">CARGO_ENCODED_RUSTDOCFLAGS</code> —  A list of custom flags separated by <code class=\"hljs\">0x1f</code>\n(ASCII Unit Separator) to pass to all <code class=\"hljs\">rustdoc</code> invocations that Cargo performs.</li>\n<li><code class=\"hljs\">RUSTFLAGS</code> — A space-separated list of custom flags to pass to all compiler\ninvocations that Cargo performs. In contrast with <a href=\"../commands/cargo-rustc.html\"><code class=\"hljs\">cargo rustc</code></a>, this is\nuseful for passing a flag to <em>all</em> compiler instances. See\n<a href=\"config.html#buildrustflags\"><code class=\"hljs\">build.rustflags</code></a> for some more ways to set flags. This string is\nsplit by whitespace; for a more robust encoding of multiple arguments,\nsee <code class=\"hljs\">CARGO_ENCODED_RUSTFLAGS</code>.</li>\n<li><code class=\"hljs\">CARGO_ENCODED_RUSTFLAGS</code> — A list of custom flags separated by <code class=\"hljs\">0x1f</code>\n(ASCII Unit Separator) to pass to all compiler invocations that Cargo performs.</li>\n<li><code class=\"hljs\">CARGO_INCREMENTAL</code> — If this is set to 1 then Cargo will force <a href=\"profiles.html#incremental\">incremental\ncompilation</a> to be enabled for the current compilation, and when set to 0 it\nwill force disabling it. If this env var isn’t present then cargo’s defaults\nwill otherwise be used. See also <a href=\"config.html#buildincremental\"><code class=\"hljs\">build.incremental</code></a> config value.</li>\n<li><code class=\"hljs\">CARGO_CACHE_RUSTC_INFO</code> — If this is set to 0 then Cargo will not try to cache\ncompiler version information.</li>\n<li><code class=\"hljs\">HTTPS_PROXY</code> or <code class=\"hljs\">https_proxy</code> or <code class=\"hljs\">http_proxy</code> — The HTTP proxy to use, see\n<a href=\"config.html#httpproxy\"><code class=\"hljs\">http.proxy</code></a> for more detail.</li>\n<li><code class=\"hljs\">HTTP_TIMEOUT</code> — The HTTP timeout in seconds, see <a href=\"config.html#httptimeout\"><code class=\"hljs\">http.timeout</code></a> for more\ndetail.</li>\n<li><code class=\"hljs\">TERM</code> — If this is set to <code class=\"hljs\">dumb</code>, it disables the progress bar.</li>\n<li><code class=\"hljs\">BROWSER</code> — The web browser to execute to open documentation with <a href=\"../commands/cargo-doc.html\"><code class=\"hljs\">cargo doc</code></a>’s’ <code class=\"hljs\">--open</code> flag, see <a href=\"config.html#docbrowser\"><code class=\"hljs\">doc.browser</code></a> for more details.</li>\n<li><code class=\"hljs\">RUSTFMT</code> — Instead of running <code class=\"hljs\">rustfmt</code>,\n<a href=\"https://github.com/rust-lang/rustfmt\"><code class=\"hljs\">cargo fmt</code></a> will execute this specified\n<code class=\"hljs\">rustfmt</code> instance instead.</li>\n</ul>\n<h3 id=\"configuration-environment-variables\"><a class=\"header\" href=\"#configuration-environment-variables\">Configuration environment variables</a></h3>\n<p>Cargo reads environment variables for some configuration values.\nSee the <a href=\"config.html#environment-variables\">configuration chapter</a> for more details.\nIn summary, the supported environment variables are:</p>\n<ul>\n<li><code class=\"hljs\">CARGO_ALIAS_&lt;name&gt;</code> — Command aliases, see <a href=\"config.html#alias\"><code class=\"hljs\">alias</code></a>.</li>\n<li><code class=\"hljs\">CARGO_BUILD_JOBS</code> — Number of parallel jobs, see <a href=\"config.html#buildjobs\"><code class=\"hljs\">build.jobs</code></a>.</li>\n<li><code class=\"hljs\">CARGO_BUILD_RUSTC</code> — The <code class=\"hljs\">rustc</code> executable, see <a href=\"config.html#buildrustc\"><code class=\"hljs\">build.rustc</code></a>.</li>\n<li><code class=\"hljs\">CARGO_BUILD_RUSTC_WRAPPER</code> — The <code class=\"hljs\">rustc</code> wrapper, see <a href=\"config.html#buildrustc-wrapper\"><code class=\"hljs\">build.rustc-wrapper</code></a>.</li>\n<li><code class=\"hljs\">CARGO_BUILD_RUSTC_WORKSPACE_WRAPPER</code> — The <code class=\"hljs\">rustc</code> wrapper for workspace members only, see <a href=\"config.html#buildrustc-workspace-wrapper\"><code class=\"hljs\">build.rustc-workspace-wrapper</code></a>.</li>\n<li><code class=\"hljs\">CARGO_BUILD_RUSTDOC</code> — The <code class=\"hljs\">rustdoc</code> executable, see <a href=\"config.html#buildrustdoc\"><code class=\"hljs\">build.rustdoc</code></a>.</li>\n<li><code class=\"hljs\">CARGO_BUILD_TARGET</code> — The default target platform, see <a href=\"config.html#buildtarget\"><code class=\"hljs\">build.target</code></a>.</li>\n<li><code class=\"hljs\">CARGO_BUILD_TARGET_DIR</code> — The default output directory, see <a href=\"config.html#buildtarget-dir\"><code class=\"hljs\">build.target-dir</code></a>.</li>\n<li><code class=\"hljs\">CARGO_BUILD_RUSTFLAGS</code> — Extra <code class=\"hljs\">rustc</code> flags, see <a href=\"config.html#buildrustflags\"><code class=\"hljs\">build.rustflags</code></a>.</li>\n<li><code class=\"hljs\">CARGO_BUILD_RUSTDOCFLAGS</code> — Extra <code class=\"hljs\">rustdoc</code> flags, see <a href=\"config.html#buildrustdocflags\"><code class=\"hljs\">build.rustdocflags</code></a>.</li>\n<li><code class=\"hljs\">CARGO_BUILD_INCREMENTAL</code> — Incremental compilation, see <a href=\"config.html#buildincremental\"><code class=\"hljs\">build.incremental</code></a>.</li>\n<li><code class=\"hljs\">CARGO_BUILD_DEP_INFO_BASEDIR</code> — Dep-info relative directory, see <a href=\"config.html#builddep-info-basedir\"><code class=\"hljs\">build.dep-info-basedir</code></a>.</li>\n<li><code class=\"hljs\">CARGO_CARGO_NEW_VCS</code> — The default source control system with <a href=\"../commands/cargo-new.html\"><code class=\"hljs\">cargo new</code></a>, see <a href=\"config.html#cargo-newvcs\"><code class=\"hljs\">cargo-new.vcs</code></a>.</li>\n<li><code class=\"hljs\">CARGO_FUTURE_INCOMPAT_REPORT_FREQUENCY</code> — How often we should generate a future incompat report notification, see <a href=\"config.html#future-incompat-reportfrequency\"><code class=\"hljs\">future-incompat-report.frequency</code></a>.</li>\n<li><code class=\"hljs\">CARGO_HTTP_DEBUG</code> — Enables HTTP debugging, see <a href=\"config.html#httpdebug\"><code class=\"hljs\">http.debug</code></a>.</li>\n<li><code class=\"hljs\">CARGO_HTTP_PROXY</code> — Enables HTTP proxy, see <a href=\"config.html#httpproxy\"><code class=\"hljs\">http.proxy</code></a>.</li>\n<li><code class=\"hljs\">CARGO_HTTP_TIMEOUT</code> — The HTTP timeout, see <a href=\"config.html#httptimeout\"><code class=\"hljs\">http.timeout</code></a>.</li>\n<li><code class=\"hljs\">CARGO_HTTP_CAINFO</code> — The TLS certificate Certificate Authority file, see <a href=\"config.html#httpcainfo\"><code class=\"hljs\">http.cainfo</code></a>.</li>\n<li><code class=\"hljs\">CARGO_HTTP_CHECK_REVOKE</code> — Disables TLS certificate revocation checks, see <a href=\"config.html#httpcheck-revoke\"><code class=\"hljs\">http.check-revoke</code></a>.</li>\n<li><code class=\"hljs\">CARGO_HTTP_SSL_VERSION</code> — The TLS version to use, see <a href=\"config.html#httpssl-version\"><code class=\"hljs\">http.ssl-version</code></a>.</li>\n<li><code class=\"hljs\">CARGO_HTTP_LOW_SPEED_LIMIT</code> — The HTTP low-speed limit, see <a href=\"config.html#httplow-speed-limit\"><code class=\"hljs\">http.low-speed-limit</code></a>.</li>\n<li><code class=\"hljs\">CARGO_HTTP_MULTIPLEXING</code> — Whether HTTP/2 multiplexing is used, see <a href=\"config.html#httpmultiplexing\"><code class=\"hljs\">http.multiplexing</code></a>.</li>\n<li><code class=\"hljs\">CARGO_HTTP_USER_AGENT</code> — The HTTP user-agent header, see <a href=\"config.html#httpuser-agent\"><code class=\"hljs\">http.user-agent</code></a>.</li>\n<li><code class=\"hljs\">CARGO_INSTALL_ROOT</code> — The default directory for <a href=\"../commands/cargo-install.html\"><code class=\"hljs\">cargo install</code></a>, see <a href=\"config.html#installroot\"><code class=\"hljs\">install.root</code></a>.</li>\n<li><code class=\"hljs\">CARGO_NET_RETRY</code> — Number of times to retry network errors, see <a href=\"config.html#netretry\"><code class=\"hljs\">net.retry</code></a>.</li>\n<li><code class=\"hljs\">CARGO_NET_GIT_FETCH_WITH_CLI</code> — Enables the use of the <code class=\"hljs\">git</code> executable to fetch, see <a href=\"config.html#netgit-fetch-with-cli\"><code class=\"hljs\">net.git-fetch-with-cli</code></a>.</li>\n<li><code class=\"hljs\">CARGO_NET_OFFLINE</code> — Offline mode, see <a href=\"config.html#netoffline\"><code class=\"hljs\">net.offline</code></a>.</li>\n<li><code class=\"hljs\">CARGO_PROFILE_&lt;name&gt;_BUILD_OVERRIDE_&lt;key&gt;</code> — Override build script profile, see <a href=\"config.html#profilenamebuild-override\"><code class=\"hljs\">profile.&lt;name&gt;.build-override</code></a>.</li>\n<li><code class=\"hljs\">CARGO_PROFILE_&lt;name&gt;_CODEGEN_UNITS</code> — Set code generation units, see <a href=\"config.html#profilenamecodegen-units\"><code class=\"hljs\">profile.&lt;name&gt;.codegen-units</code></a>.</li>\n<li><code class=\"hljs\">CARGO_PROFILE_&lt;name&gt;_DEBUG</code> — What kind of debug info to include, see <a href=\"config.html#profilenamedebug\"><code class=\"hljs\">profile.&lt;name&gt;.debug</code></a>.</li>\n<li><code class=\"hljs\">CARGO_PROFILE_&lt;name&gt;_DEBUG_ASSERTIONS</code> — Enable/disable debug assertions, see <a href=\"config.html#profilenamedebug-assertions\"><code class=\"hljs\">profile.&lt;name&gt;.debug-assertions</code></a>.</li>\n<li><code class=\"hljs\">CARGO_PROFILE_&lt;name&gt;_INCREMENTAL</code> — Enable/disable incremental compilation, see <a href=\"config.html#profilenameincremental\"><code class=\"hljs\">profile.&lt;name&gt;.incremental</code></a>.</li>\n<li><code class=\"hljs\">CARGO_PROFILE_&lt;name&gt;_LTO</code> — Link-time optimization, see <a href=\"config.html#profilenamelto\"><code class=\"hljs\">profile.&lt;name&gt;.lto</code></a>.</li>\n<li><code class=\"hljs\">CARGO_PROFILE_&lt;name&gt;_OVERFLOW_CHECKS</code> — Enable/disable overflow checks, see <a href=\"config.html#profilenameoverflow-checks\"><code class=\"hljs\">profile.&lt;name&gt;.overflow-checks</code></a>.</li>\n<li><code class=\"hljs\">CARGO_PROFILE_&lt;name&gt;_OPT_LEVEL</code> — Set the optimization level, see <a href=\"config.html#profilenameopt-level\"><code class=\"hljs\">profile.&lt;name&gt;.opt-level</code></a>.</li>\n<li><code class=\"hljs\">CARGO_PROFILE_&lt;name&gt;_PANIC</code> — The panic strategy to use, see <a href=\"config.html#profilenamepanic\"><code class=\"hljs\">profile.&lt;name&gt;.panic</code></a>.</li>\n<li><code class=\"hljs\">CARGO_PROFILE_&lt;name&gt;_RPATH</code> — The rpath linking option, see <a href=\"config.html#profilenamerpath\"><code class=\"hljs\">profile.&lt;name&gt;.rpath</code></a>.</li>\n<li><code class=\"hljs\">CARGO_PROFILE_&lt;name&gt;_SPLIT_DEBUGINFO</code> — Controls debug file output behavior, see <a href=\"config.html#profilenamesplit-debuginfo\"><code class=\"hljs\">profile.&lt;name&gt;.split-debuginfo</code></a>.</li>\n<li><code class=\"hljs\">CARGO_PROFILE_&lt;name&gt;_STRIP</code> — Controls stripping of symbols and/or debuginfos, see <a href=\"config.html#profilenamestrip\"><code class=\"hljs\">profile.&lt;name&gt;.strip</code></a>.</li>\n<li><code class=\"hljs\">CARGO_REGISTRIES_&lt;name&gt;_CREDENTIAL_PROVIDER</code> — Credential provider for a registry, see <a href=\"config.html#registriesnamecredential-provider\"><code class=\"hljs\">registries.&lt;name&gt;.credential-provider</code></a>.</li>\n<li><code class=\"hljs\">CARGO_REGISTRIES_&lt;name&gt;_INDEX</code> — URL of a registry index, see <a href=\"config.html#registriesnameindex\"><code class=\"hljs\">registries.&lt;name&gt;.index</code></a>.</li>\n<li><code class=\"hljs\">CARGO_REGISTRIES_&lt;name&gt;_TOKEN</code> — Authentication token of a registry, see <a href=\"config.html#registriesnametoken\"><code class=\"hljs\">registries.&lt;name&gt;.token</code></a>.</li>\n<li><code class=\"hljs\">CARGO_REGISTRY_CREDENTIAL_PROVIDER</code> — Credential provider for <a href=\"https://crates.io/\">crates.io</a>, see <a href=\"config.html#registrycredential-provider\"><code class=\"hljs\">registry.credential-provider</code></a>.</li>\n<li><code class=\"hljs\">CARGO_REGISTRY_DEFAULT</code> — Default registry for the <code class=\"hljs\">--registry</code> flag, see <a href=\"config.html#registrydefault\"><code class=\"hljs\">registry.default</code></a>.</li>\n<li><code class=\"hljs\">CARGO_REGISTRY_GLOBAL_CREDENTIAL_PROVIDERS</code> — Credential providers for registries that do not have a specific provider defined. See <a href=\"config.html#registryglobal-credential-providers\"><code class=\"hljs\">registry.global-credential-providers</code></a>.</li>\n<li><code class=\"hljs\">CARGO_REGISTRY_TOKEN</code> — Authentication token for <a href=\"https://crates.io/\">crates.io</a>, see <a href=\"config.html#registrytoken\"><code class=\"hljs\">registry.token</code></a>.</li>\n<li><code class=\"hljs\">CARGO_TARGET_&lt;triple&gt;_LINKER</code> — The linker to use, see <a href=\"config.html#targettriplelinker\"><code class=\"hljs\">target.&lt;triple&gt;.linker</code></a>. The triple must be <a href=\"config.html#environment-variables\">converted to uppercase and underscores</a>.</li>\n<li><code class=\"hljs\">CARGO_TARGET_&lt;triple&gt;_RUNNER</code> — The executable runner, see <a href=\"config.html#targettriplerunner\"><code class=\"hljs\">target.&lt;triple&gt;.runner</code></a>.</li>\n<li><code class=\"hljs\">CARGO_TARGET_&lt;triple&gt;_RUSTFLAGS</code> — Extra <code class=\"hljs\">rustc</code> flags for a target, see <a href=\"config.html#targettriplerustflags\"><code class=\"hljs\">target.&lt;triple&gt;.rustflags</code></a>.</li>\n<li><code class=\"hljs\">CARGO_TERM_QUIET</code> — Quiet mode, see <a href=\"config.html#termquiet\"><code class=\"hljs\">term.quiet</code></a>.</li>\n<li><code class=\"hljs\">CARGO_TERM_VERBOSE</code> — The default terminal verbosity, see <a href=\"config.html#termverbose\"><code class=\"hljs\">term.verbose</code></a>.</li>\n<li><code class=\"hljs\">CARGO_TERM_COLOR</code> — The default color mode, see <a href=\"config.html#termcolor\"><code class=\"hljs\">term.color</code></a>.</li>\n<li><code class=\"hljs\">CARGO_TERM_PROGRESS_WHEN</code> — The default progress bar showing mode, see <a href=\"config.html#termprogresswhen\"><code class=\"hljs\">term.progress.when</code></a>.</li>\n<li><code class=\"hljs\">CARGO_TERM_PROGRESS_WIDTH</code> — The default progress bar width, see <a href=\"config.html#termprogresswidth\"><code class=\"hljs\">term.progress.width</code></a>.</li>\n</ul>\n<h2 id=\"environment-variables-cargo-sets-for-crates\"><a class=\"header\" href=\"#environment-variables-cargo-sets-for-crates\">Environment variables Cargo sets for crates</a></h2>\n<p>Cargo exposes these environment variables to your crate when it is compiled.\nNote that this applies for running binaries with <code class=\"hljs\">cargo run</code> and <code class=\"hljs\">cargo test</code>\nas well. To get the value of any of these variables in a Rust program, do\nthis:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">let</span> version = <span class=\"hljs-built_in\">env!</span>(<span class=\"hljs-string\">\"CARGO_PKG_VERSION\"</span>);</code></pre>\n<p><code class=\"hljs\">version</code> will now contain the value of <code class=\"hljs\">CARGO_PKG_VERSION</code>.</p>\n<p>Note that if one of these values is not provided in the manifest, the\ncorresponding environment variable is set to the empty string, <code class=\"hljs\">\"\"</code>.</p>\n<ul>\n<li><code class=\"hljs\">CARGO</code> — Path to the <code class=\"hljs\">cargo</code> binary performing the build.</li>\n<li><code class=\"hljs\">CARGO_MANIFEST_DIR</code> — The directory containing the manifest of your package.</li>\n<li><code class=\"hljs\">CARGO_PKG_VERSION</code> — The full version of your package.</li>\n<li><code class=\"hljs\">CARGO_PKG_VERSION_MAJOR</code> — The major version of your package.</li>\n<li><code class=\"hljs\">CARGO_PKG_VERSION_MINOR</code> — The minor version of your package.</li>\n<li><code class=\"hljs\">CARGO_PKG_VERSION_PATCH</code> — The patch version of your package.</li>\n<li><code class=\"hljs\">CARGO_PKG_VERSION_PRE</code> — The pre-release version of your package.</li>\n<li><code class=\"hljs\">CARGO_PKG_AUTHORS</code> — Colon separated list of authors from the manifest of your package.</li>\n<li><code class=\"hljs\">CARGO_PKG_NAME</code> — The name of your package.</li>\n<li><code class=\"hljs\">CARGO_PKG_DESCRIPTION</code> — The description from the manifest of your package.</li>\n<li><code class=\"hljs\">CARGO_PKG_HOMEPAGE</code> — The home page from the manifest of your package.</li>\n<li><code class=\"hljs\">CARGO_PKG_REPOSITORY</code> — The repository from the manifest of your package.</li>\n<li><code class=\"hljs\">CARGO_PKG_LICENSE</code> — The license from the manifest of your package.</li>\n<li><code class=\"hljs\">CARGO_PKG_LICENSE_FILE</code> — The license file from the manifest of your package.</li>\n<li><code class=\"hljs\">CARGO_PKG_RUST_VERSION</code> — The Rust version from the manifest of your package.\nNote that this is the minimum Rust version supported by the package, not the\ncurrent Rust version.</li>\n<li><code class=\"hljs\">CARGO_PKG_README</code> — Path to the README file of your package.</li>\n<li><code class=\"hljs\">CARGO_CRATE_NAME</code> — The name of the crate that is currently being compiled. It is the name of the <a href=\"cargo-targets.html\">Cargo target</a> with <code class=\"hljs\">-</code> converted to <code class=\"hljs\">_</code>, such as the name of the library, binary, example, integration test, or benchmark.</li>\n<li><code class=\"hljs\">CARGO_BIN_NAME</code> — The name of the binary that is currently being compiled.\nOnly set for <a href=\"cargo-targets.html#binaries\">binaries</a> or binary <a href=\"cargo-targets.html#examples\">examples</a>. This name does not include any\nfile extension, such as <code class=\"hljs\">.exe</code>.</li>\n<li><code class=\"hljs\">OUT_DIR</code> — If the package has a build script, this is set to the folder\nwhere the build script should place its output. See below for more information.\n(Only set during compilation.)</li>\n<li><code class=\"hljs\">CARGO_BIN_EXE_&lt;name&gt;</code> — The absolute path to a binary target’s executable.\nThis is only set when building an <a href=\"cargo-targets.html#integration-tests\">integration test</a> or benchmark. This may\nbe used with the <a href=\"../../std/macro.env.html\"><code class=\"hljs\">env</code> macro</a> to find the executable to run for testing\npurposes. The <code class=\"hljs\">&lt;name&gt;</code> is the name of the binary target, exactly as-is. For\nexample, <code class=\"hljs\">CARGO_BIN_EXE_my-program</code> for a binary named <code class=\"hljs\">my-program</code>.\nBinaries are automatically built when the test is built, unless the binary\nhas required features that are not enabled.</li>\n<li><code class=\"hljs\">CARGO_PRIMARY_PACKAGE</code> — This environment variable will be set if the\npackage being built is primary. Primary packages are the ones the user\nselected on the command-line, either with <code class=\"hljs\">-p</code> flags or the defaults based\non the current directory and the default workspace members. This environment\nvariable will not be set when building dependencies. This is only set when\ncompiling the package (not when running binaries or tests).</li>\n<li><code class=\"hljs\">CARGO_TARGET_TMPDIR</code> — Only set when building <a href=\"cargo-targets.html#integration-tests\">integration test</a> or benchmark code.\nThis is a path to a directory inside the target directory\nwhere integration tests or benchmarks are free to put any data needed by\nthe tests/benches. Cargo initially creates this directory but doesn’t\nmanage its content in any way, this is the responsibility of the test code.</li>\n<li><code class=\"hljs\">CARGO_RUSTC_CURRENT_DIR</code> — This is a path that <code class=\"hljs\">rustc</code> is invoked from <strong>(nightly only)</strong>.</li>\n</ul>\n<h3 id=\"dynamic-library-paths\"><a class=\"header\" href=\"#dynamic-library-paths\">Dynamic library paths</a></h3>\n<p>Cargo also sets the dynamic library path when compiling and running binaries\nwith commands like <code class=\"hljs\">cargo run</code> and <code class=\"hljs\">cargo test</code>. This helps with locating\nshared libraries that are part of the build process. The variable name depends\non the platform:</p>\n<ul>\n<li>Windows: <code class=\"hljs\">PATH</code></li>\n<li>macOS: <code class=\"hljs\">DYLD_FALLBACK_LIBRARY_PATH</code></li>\n<li>Unix: <code class=\"hljs\">LD_LIBRARY_PATH</code></li>\n<li>AIX: <code class=\"hljs\">LIBPATH</code></li>\n</ul>\n<p>The value is extended from the existing value when Cargo starts. macOS has\nspecial consideration where if <code class=\"hljs\">DYLD_FALLBACK_LIBRARY_PATH</code> is not already\nset, it will add the default <code class=\"hljs\">$HOME/lib:/usr/local/lib:/usr/lib</code>.</p>\n<p>Cargo includes the following paths:</p>\n<ul>\n<li>Search paths included from any build script with the <a href=\"build-scripts.html#rustc-link-search\"><code class=\"hljs\">rustc-link-search</code>\ninstruction</a>. Paths outside of the\n<code class=\"hljs\">target</code> directory are removed. It is the responsibility of the user running\nCargo to properly set the environment if additional libraries on the system\nare needed in the search path.</li>\n<li>The base output directory, such as <code class=\"hljs\">target/debug</code>, and the “deps” directory.\nThis is mostly for legacy support of <code class=\"hljs\">rustc</code> compiler plugins.</li>\n<li>The rustc sysroot library path. This generally is not important to most\nusers.</li>\n</ul>\n<h2 id=\"environment-variables-cargo-sets-for-build-scripts\"><a class=\"header\" href=\"#environment-variables-cargo-sets-for-build-scripts\">Environment variables Cargo sets for build scripts</a></h2>\n<p>Cargo sets several environment variables when build scripts are run. Because these variables\nare not yet set when the build script is compiled, the above example using <code class=\"hljs\">env!</code> won’t work\nand instead you’ll need to retrieve the values when the build script is run:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">use</span> std::env;\n<span class=\"hljs-keyword\">let</span> out_dir = env::var(<span class=\"hljs-string\">\"OUT_DIR\"</span>).unwrap();</code></pre>\n<p><code class=\"hljs\">out_dir</code> will now contain the value of <code class=\"hljs\">OUT_DIR</code>.</p>\n<ul>\n<li><code class=\"hljs\">CARGO</code> — Path to the <code class=\"hljs\">cargo</code> binary performing the build.</li>\n<li><code class=\"hljs\">CARGO_MANIFEST_DIR</code> — The directory containing the manifest for the package\nbeing built (the package containing the build script). Also note that this is\nthe value of the current working directory of the build script when it starts.</li>\n<li><code class=\"hljs\">CARGO_MANIFEST_LINKS</code> — the manifest <code class=\"hljs\">links</code> value.</li>\n<li><code class=\"hljs\">CARGO_MAKEFLAGS</code> — Contains parameters needed for Cargo’s <a href=\"https://www.gnu.org/software/make/manual/html_node/Job-Slots.html\">jobserver</a>\nimplementation to parallelize subprocesses. Rustc or cargo invocations from\nbuild.rs can already read <code class=\"hljs\">CARGO_MAKEFLAGS</code>, but GNU Make requires the flags\nto be specified either directly as arguments, or through the <code class=\"hljs\">MAKEFLAGS</code>\nenvironment variable. Currently Cargo doesn’t set the <code class=\"hljs\">MAKEFLAGS</code> variable,\nbut it’s free for build scripts invoking GNU Make to set it to the contents\nof <code class=\"hljs\">CARGO_MAKEFLAGS</code>.</li>\n<li><code class=\"hljs\">CARGO_FEATURE_&lt;name&gt;</code> — For each activated feature of the package being built,\nthis environment variable will be present where <code class=\"hljs\">&lt;name&gt;</code> is the name of the\nfeature uppercased and having <code class=\"hljs\">-</code> translated to <code class=\"hljs\">_</code>.</li>\n<li><code class=\"hljs\">CARGO_CFG_&lt;cfg&gt;</code> — For each <a href=\"../../reference/conditional-compilation.html\">configuration option</a> of the\npackage being built, this environment variable will contain the value of the\nconfiguration, where <code class=\"hljs\">&lt;cfg&gt;</code> is the name of the configuration uppercased and\nhaving <code class=\"hljs\">-</code> translated to <code class=\"hljs\">_</code>. Boolean configurations are present if they are\nset, and not present otherwise. Configurations with multiple values are\njoined to a single variable with the values delimited by <code class=\"hljs\">,</code>. This includes\nvalues built-in to the compiler (which can be seen with <code class=\"hljs\">rustc --print=cfg</code>)\nand values set by build scripts and extra flags passed to <code class=\"hljs\">rustc</code> (such as\nthose defined in <code class=\"hljs\">RUSTFLAGS</code>). Some examples of what these variables are:\n<ul>\n<li><code class=\"hljs\">CARGO_CFG_UNIX</code> — Set on <a href=\"../../reference/conditional-compilation.html#unix-and-windows\">unix-like platforms</a>.</li>\n<li><code class=\"hljs\">CARGO_CFG_WINDOWS</code> — Set on <a href=\"../../reference/conditional-compilation.html#unix-and-windows\">windows-like platforms</a>.</li>\n<li><code class=\"hljs\">CARGO_CFG_TARGET_FAMILY=unix</code> — The <a href=\"../../reference/conditional-compilation.html#target_family\">target family</a>.</li>\n<li><code class=\"hljs\">CARGO_CFG_TARGET_OS=macos</code> — The <a href=\"../../reference/conditional-compilation.html#target_os\">target operating system</a>.</li>\n<li><code class=\"hljs\">CARGO_CFG_TARGET_ARCH=x86_64</code> — The CPU <a href=\"../../reference/conditional-compilation.html#target_arch\">target architecture</a>.</li>\n<li><code class=\"hljs\">CARGO_CFG_TARGET_VENDOR=apple</code> — The <a href=\"../../reference/conditional-compilation.html#target_vendor\">target vendor</a>.</li>\n<li><code class=\"hljs\">CARGO_CFG_TARGET_ENV=gnu</code> — The <a href=\"../../reference/conditional-compilation.html#target_env\">target environment</a> ABI.</li>\n<li><code class=\"hljs\">CARGO_CFG_TARGET_POINTER_WIDTH=64</code> — The CPU <a href=\"../../reference/conditional-compilation.html#target_pointer_width\">pointer width</a>.</li>\n<li><code class=\"hljs\">CARGO_CFG_TARGET_ENDIAN=little</code> — The CPU <a href=\"../../reference/conditional-compilation.html#target_endian\">target endianness</a>.</li>\n<li><code class=\"hljs\">CARGO_CFG_TARGET_FEATURE=mmx,sse</code> — List of CPU <a href=\"../../reference/conditional-compilation.html#target_feature\">target features</a> enabled.</li>\n</ul>\n<blockquote>\n<p>Note that different <a href=\"../appendix/glossary.html#target\">target triples</a> have different sets of <code class=\"hljs\">cfg</code> values,\nhence variables present in one target triple might not be available in the other.</p>\n</blockquote>\n</li>\n<li><code class=\"hljs\">OUT_DIR</code> — the folder in which all output and intermediate artifacts should\nbe placed. This folder is inside the build directory for the package being built,\nand it is unique for the package in question.</li>\n<li><code class=\"hljs\">TARGET</code> — the target triple that is being compiled for. Native code should be\ncompiled for this triple. See the <a href=\"../appendix/glossary.html#target\">Target Triple</a> description for more information.</li>\n<li><code class=\"hljs\">HOST</code> — the host triple of the Rust compiler.</li>\n<li><code class=\"hljs\">NUM_JOBS</code> — the parallelism specified as the top-level parallelism. This can\nbe useful to pass a <code class=\"hljs\">-j</code> parameter to a system like <code class=\"hljs\">make</code>. Note that care\nshould be taken when interpreting this environment variable. For historical\npurposes this is still provided but recent versions of Cargo, for example, do\nnot need to run <code class=\"hljs\">make -j</code>, and instead can set the <code class=\"hljs\">MAKEFLAGS</code> env var to the\ncontent of <code class=\"hljs\">CARGO_MAKEFLAGS</code> to activate the use of Cargo’s GNU Make compatible\n<a href=\"https://www.gnu.org/software/make/manual/html_node/Job-Slots.html\">jobserver</a> for sub-make invocations.</li>\n<li><code class=\"hljs\">OPT_LEVEL</code>, <code class=\"hljs\">DEBUG</code> — values of the corresponding variables for the profile currently being built.</li>\n<li><code class=\"hljs\">PROFILE</code> — <code class=\"hljs\">release</code> for release builds, <code class=\"hljs\">debug</code> for other builds. This is\ndetermined based on if the <a href=\"profiles.html\">profile</a> inherits from the <a href=\"profiles.html#dev\"><code class=\"hljs\">dev</code></a> or\n<a href=\"profiles.html#release\"><code class=\"hljs\">release</code></a> profile. Using this environment variable is not recommended.\nUsing other environment variables like <code class=\"hljs\">OPT_LEVEL</code> provide a more correct\nview of the actual settings being used.</li>\n<li><code class=\"hljs\">DEP_&lt;name&gt;_&lt;key&gt;</code> — For more information about this set of environment variables,\nsee build script documentation about <a href=\"build-scripts.html#the-links-manifest-key\"><code class=\"hljs\">links</code></a>.</li>\n<li><code class=\"hljs\">RUSTC</code>, <code class=\"hljs\">RUSTDOC</code> — the compiler and documentation generator that Cargo has\nresolved to use, passed to the build script so it might use it as well.</li>\n<li><code class=\"hljs\">RUSTC_WRAPPER</code> — the <code class=\"hljs\">rustc</code> wrapper, if any, that Cargo is using. See <a href=\"config.html#buildrustc-wrapper\"><code class=\"hljs\">build.rustc-wrapper</code></a>.</li>\n<li><code class=\"hljs\">RUSTC_WORKSPACE_WRAPPER</code> — the <code class=\"hljs\">rustc</code> wrapper, if any, that Cargo is using\nfor workspace members. See <a href=\"config.html#buildrustc-workspace-wrapper\"><code class=\"hljs\">build.rustc-workspace-wrapper</code></a>.</li>\n<li><code class=\"hljs\">RUSTC_LINKER</code> — The path to the linker binary that Cargo has resolved to use\nfor the current target, if specified. The linker can be changed by editing\n<code class=\"hljs\">.cargo/config.toml</code>; see the documentation about <a href=\"config.html\">cargo configuration</a>\nfor more information.</li>\n<li><code class=\"hljs\">CARGO_ENCODED_RUSTFLAGS</code> — extra flags that Cargo invokes <code class=\"hljs\">rustc</code> with,\nseparated by a <code class=\"hljs\">0x1f</code> character (ASCII Unit Separator). See\n<a href=\"config.html#buildrustflags\"><code class=\"hljs\">build.rustflags</code></a>. Note that since Rust 1.55, <code class=\"hljs\">RUSTFLAGS</code> is removed from\nthe environment; scripts should use <code class=\"hljs\">CARGO_ENCODED_RUSTFLAGS</code> instead.</li>\n<li><code class=\"hljs\">CARGO_PKG_&lt;var&gt;</code> — The package information variables, with the same names and values as are <a href=\"#environment-variables-cargo-sets-for-crates\">provided during crate building</a>.</li>\n</ul>\n<h2 id=\"environment-variables-cargo-sets-for-3rd-party-subcommands\"><a class=\"header\" href=\"#environment-variables-cargo-sets-for-3rd-party-subcommands\">Environment variables Cargo sets for 3rd party subcommands</a></h2>\n<p>Cargo exposes this environment variable to 3rd party subcommands\n(ie. programs named <code class=\"hljs\">cargo-foobar</code> placed in <code class=\"hljs\">$PATH</code>):</p>\n<ul>\n<li><code class=\"hljs\">CARGO</code> — Path to the <code class=\"hljs\">cargo</code> binary performing the build.</li>\n<li><code class=\"hljs\">CARGO_MAKEFLAGS</code> — Contains parameters needed for Cargo’s <a href=\"https://www.gnu.org/software/make/manual/html_node/Job-Slots.html\">jobserver</a>\nimplementation to parallelize subprocesses.\nThis is set only when Cargo detects the existence of a jobserver.</li>\n</ul>\n<p>For extended information about your environment you may run <code class=\"hljs\">cargo metadata</code>.</p>\n\n                    </main>\n\n                    <nav class=\"nav-wrapper\" aria-label=\"Page navigation\">\n                        <!-- Mobile navigation buttons -->\n                            <a rel=\"prev\" href=\"../reference/config.html\" class=\"mobile-nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                                <i class=\"fa fa-angle-left\"></i>\n                            </a>\n\n                            <a rel=\"next prefetch\" href=\"../reference/build-scripts.html\" class=\"mobile-nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                                <i class=\"fa fa-angle-right\"></i>\n                            </a>\n\n                        <div style=\"clear: both\"></div>\n                    </nav>\n                </div>\n            </div>\n\n            <nav class=\"nav-wide-wrapper\" aria-label=\"Page navigation\">\n                    <a rel=\"prev\" href=\"../reference/config.html\" class=\"nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                        <i class=\"fa fa-angle-left\"></i>\n                    </a>\n\n                    <a rel=\"next prefetch\" href=\"../reference/build-scripts.html\" class=\"nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                        <i class=\"fa fa-angle-right\"></i>\n                    </a>\n            </nav>\n\n        </div>\n\n\n\n\n        <script>\n            window.playground_copyable = true;\n        </script>\n\n\n        <script src=\"../elasticlunr.min.js\"></script>\n        <script src=\"../mark.min.js\"></script>\n        <script src=\"../searcher.js\"></script>\n\n        <script src=\"../clipboard.min.js\"></script>\n        <script src=\"../highlight.js\"></script>\n        <script src=\"../book.js\"></script>\n\n        <!-- Custom JS scripts -->\n\n\n    </div>\n    \n\n</body></html>",
	"crawlDate": "2024-07-28T05:09:22.172Z"
}