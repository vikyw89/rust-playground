{
	"title": "Implementing an Object-Oriented Design Pattern - The Rust Programming Language",
	"url": "https://doc.rust-lang.org/stable/book/ch17-03-oo-design-patterns.html",
	"markdown": "# Implementing an Object-Oriented Design Pattern\n\nThe _state pattern_ is an object-oriented design pattern. The crux of the pattern is that we define a set of states a value can have internally. The states are represented by a set of _state objects_, and the value’s behavior changes based on its state. We’re going to work through an example of a blog post struct that has a field to hold its state, which will be a state object from the set “draft”, “review”, or “published”.\n\nThe state objects share functionality: in Rust, of course, we use structs and traits rather than objects and inheritance. Each state object is responsible for its own behavior and for governing when it should change into another state. The value that holds a state object knows nothing about the different behavior of the states or when to transition between states.\n\nThe advantage of using the state pattern is that, when the business requirements of the program change, we won’t need to change the code of the value holding the state or the code that uses the value. We’ll only need to update the code inside one of the state objects to change its rules or perhaps add more state objects.\n\nFirst, we’re going to implement the state pattern in a more traditional object-oriented way, then we’ll use an approach that’s a bit more natural in Rust. Let’s dig in to incrementally implementing a blog post workflow using the state pattern.\n\nThe final functionality will look like this:\n\n1.  A blog post starts as an empty draft.\n2.  When the draft is done, a review of the post is requested.\n3.  When the post is approved, it gets published.\n4.  Only published blog posts return content to print, so unapproved posts can’t accidentally be published.\n\nAny other changes attempted on a post should have no effect. For example, if we try to approve a draft blog post before we’ve requested a review, the post should remain an unpublished draft.\n\nListing 17-11 shows this workflow in code form: this is an example usage of the API we’ll implement in a library crate named `blog`. This won’t compile yet because we haven’t implemented the `blog` crate.\n\nFilename: src/main.rs\n\n```rust\nuse blog::Post;\n\nfn main() {\n    let mut post = Post::new();\n\n    post.add_text(\"I ate a salad for lunch today\");\n    assert_eq!(\"\", post.content());\n\n    post.request_review();\n    assert_eq!(\"\", post.content());\n\n    post.approve();\n    assert_eq!(\"I ate a salad for lunch today\", post.content());\n}\n```\n\nListing 17-11: Code that demonstrates the desired behavior we want our `blog` crate to have\n\nWe want to allow the user to create a new draft blog post with `Post::new`. We want to allow text to be added to the blog post. If we try to get the post’s content immediately, before approval, we shouldn’t get any text because the post is still a draft. We’ve added `assert_eq!` in the code for demonstration purposes. An excellent unit test for this would be to assert that a draft blog post returns an empty string from the `content` method, but we’re not going to write tests for this example.\n\nNext, we want to enable a request for a review of the post, and we want `content` to return an empty string while waiting for the review. When the post receives approval, it should get published, meaning the text of the post will be returned when `content` is called.\n\nNotice that the only type we’re interacting with from the crate is the `Post` type. This type will use the state pattern and will hold a value that will be one of three state objects representing the various states a post can be in—draft, waiting for review, or published. Changing from one state to another will be managed internally within the `Post` type. The states change in response to the methods called by our library’s users on the `Post` instance, but they don’t have to manage the state changes directly. Also, users can’t make a mistake with the states, like publishing a post before it’s reviewed.\n\n### [Defining `Post` and Creating a New Instance in the Draft State](#defining-post-and-creating-a-new-instance-in-the-draft-state)\n\nLet’s get started on the implementation of the library! We know we need a public `Post` struct that holds some content, so we’ll start with the definition of the struct and an associated public `new` function to create an instance of `Post`, as shown in Listing 17-12. We’ll also make a private `State` trait that will define the behavior that all state objects for a `Post` must have.\n\nThen `Post` will hold a trait object of `Box<dyn State>` inside an `Option<T>` in a private field named `state` to hold the state object. You’ll see why the `Option<T>` is necessary in a bit.\n\nFilename: src/lib.rs\n\n```rust\npub struct Post {\n    state: Option<Box<dyn State>>,\n    content: String,\n}\n\nimpl Post {\n    pub fn new() -> Post {\n        Post {\n            state: Some(Box::new(Draft {})),\n            content: String::new(),\n        }\n    }\n}\n\ntrait State {}\n\nstruct Draft {}\n\nimpl State for Draft {}\n```\n\nListing 17-12: Definition of a `Post` struct and a `new` function that creates a new `Post` instance, a `State` trait, and a `Draft` struct\n\nThe `State` trait defines the behavior shared by different post states. The state objects are `Draft`, `PendingReview`, and `Published`, and they will all implement the `State` trait. For now, the trait doesn’t have any methods, and we’ll start by defining just the `Draft` state because that is the state we want a post to start in.\n\nWhen we create a new `Post`, we set its `state` field to a `Some` value that holds a `Box`. This `Box` points to a new instance of the `Draft` struct. This ensures whenever we create a new instance of `Post`, it will start out as a draft. Because the `state` field of `Post` is private, there is no way to create a `Post` in any other state! In the `Post::new` function, we set the `content` field to a new, empty `String`.\n\n### [Storing the Text of the Post Content](#storing-the-text-of-the-post-content)\n\nWe saw in Listing 17-11 that we want to be able to call a method named `add_text` and pass it a `&str` that is then added as the text content of the blog post. We implement this as a method, rather than exposing the `content` field as `pub`, so that later we can implement a method that will control how the `content` field’s data is read. The `add_text` method is pretty straightforward, so let’s add the implementation in Listing 17-13 to the `impl Post` block:\n\nFilename: src/lib.rs\n\n```rust\npub struct Post {\n    state: Option<Box<dyn State>>,\n    content: String,\n}\n\nimpl Post {\n    // --snip--\n    pub fn new() -> Post {\n        Post {\n            state: Some(Box::new(Draft {})),\n            content: String::new(),\n        }\n    }\n\n    pub fn add_text(&mut self, text: &str) {\n        self.content.push_str(text);\n    }\n}\n\ntrait State {}\n\nstruct Draft {}\n\nimpl State for Draft {}\n```\n\nListing 17-13: Implementing the `add_text` method to add text to a post’s `content`\n\nThe `add_text` method takes a mutable reference to `self`, because we’re changing the `Post` instance that we’re calling `add_text` on. We then call `push_str` on the `String` in `content` and pass the `text` argument to add to the saved `content`. This behavior doesn’t depend on the state the post is in, so it’s not part of the state pattern. The `add_text` method doesn’t interact with the `state` field at all, but it is part of the behavior we want to support.\n\n### [Ensuring the Content of a Draft Post Is Empty](#ensuring-the-content-of-a-draft-post-is-empty)\n\nEven after we’ve called `add_text` and added some content to our post, we still want the `content` method to return an empty string slice because the post is still in the draft state, as shown on line 7 of Listing 17-11. For now, let’s implement the `content` method with the simplest thing that will fulfill this requirement: always returning an empty string slice. We’ll change this later once we implement the ability to change a post’s state so it can be published. So far, posts can only be in the draft state, so the post content should always be empty. Listing 17-14 shows this placeholder implementation:\n\nFilename: src/lib.rs\n\n```rust\npub struct Post {\n    state: Option<Box<dyn State>>,\n    content: String,\n}\n\nimpl Post {\n    // --snip--\n    pub fn new() -> Post {\n        Post {\n            state: Some(Box::new(Draft {})),\n            content: String::new(),\n        }\n    }\n\n    pub fn add_text(&mut self, text: &str) {\n        self.content.push_str(text);\n    }\n\n    pub fn content(&self) -> &str {\n        \"\"\n    }\n}\n\ntrait State {}\n\nstruct Draft {}\n\nimpl State for Draft {}\n```\n\nListing 17-14: Adding a placeholder implementation for the `content` method on `Post` that always returns an empty string slice\n\nWith this added `content` method, everything in Listing 17-11 up to line 7 works as intended.\n\n### [Requesting a Review of the Post Changes Its State](#requesting-a-review-of-the-post-changes-its-state)\n\nNext, we need to add functionality to request a review of a post, which should change its state from `Draft` to `PendingReview`. Listing 17-15 shows this code:\n\nFilename: src/lib.rs\n\n```rust\npub struct Post {\n    state: Option<Box<dyn State>>,\n    content: String,\n}\n\nimpl Post {\n    // --snip--\n    pub fn new() -> Post {\n        Post {\n            state: Some(Box::new(Draft {})),\n            content: String::new(),\n        }\n    }\n\n    pub fn add_text(&mut self, text: &str) {\n        self.content.push_str(text);\n    }\n\n    pub fn content(&self) -> &str {\n        \"\"\n    }\n\n    pub fn request_review(&mut self) {\n        if let Some(s) = self.state.take() {\n            self.state = Some(s.request_review())\n        }\n    }\n}\n\ntrait State {\n    fn request_review(self: Box<Self>) -> Box<dyn State>;\n}\n\nstruct Draft {}\n\nimpl State for Draft {\n    fn request_review(self: Box<Self>) -> Box<dyn State> {\n        Box::new(PendingReview {})\n    }\n}\n\nstruct PendingReview {}\n\nimpl State for PendingReview {\n    fn request_review(self: Box<Self>) -> Box<dyn State> {\n        self\n    }\n}\n```\n\nListing 17-15: Implementing `request_review` methods on `Post` and the `State` trait\n\nWe give `Post` a public method named `request_review` that will take a mutable reference to `self`. Then we call an internal `request_review` method on the current state of `Post`, and this second `request_review` method consumes the current state and returns a new state.\n\nWe add the `request_review` method to the `State` trait; all types that implement the trait will now need to implement the `request_review` method. Note that rather than having `self`, `&self`, or `&mut self` as the first parameter of the method, we have `self: Box<Self>`. This syntax means the method is only valid when called on a `Box` holding the type. This syntax takes ownership of `Box<Self>`, invalidating the old state so the state value of the `Post` can transform into a new state.\n\nTo consume the old state, the `request_review` method needs to take ownership of the state value. This is where the `Option` in the `state` field of `Post` comes in: we call the `take` method to take the `Some` value out of the `state` field and leave a `None` in its place, because Rust doesn’t let us have unpopulated fields in structs. This lets us move the `state` value out of `Post` rather than borrowing it. Then we’ll set the post’s `state` value to the result of this operation.\n\nWe need to set `state` to `None` temporarily rather than setting it directly with code like `self.state = self.state.request_review();` to get ownership of the `state` value. This ensures `Post` can’t use the old `state` value after we’ve transformed it into a new state.\n\nThe `request_review` method on `Draft` returns a new, boxed instance of a new `PendingReview` struct, which represents the state when a post is waiting for a review. The `PendingReview` struct also implements the `request_review` method but doesn’t do any transformations. Rather, it returns itself, because when we request a review on a post already in the `PendingReview` state, it should stay in the `PendingReview` state.\n\nNow we can start seeing the advantages of the state pattern: the `request_review` method on `Post` is the same no matter its `state` value. Each state is responsible for its own rules.\n\nWe’ll leave the `content` method on `Post` as is, returning an empty string slice. We can now have a `Post` in the `PendingReview` state as well as in the `Draft` state, but we want the same behavior in the `PendingReview` state. Listing 17-11 now works up to line 10!\n\n### [Adding `approve` to Change the Behavior of `content`](#adding-approve-to-change-the-behavior-of-content)\n\nThe `approve` method will be similar to the `request_review` method: it will set `state` to the value that the current state says it should have when that state is approved, as shown in Listing 17-16:\n\nFilename: src/lib.rs\n\n```rust\npub struct Post {\n    state: Option<Box<dyn State>>,\n    content: String,\n}\n\nimpl Post {\n    // --snip--\n    pub fn new() -> Post {\n        Post {\n            state: Some(Box::new(Draft {})),\n            content: String::new(),\n        }\n    }\n\n    pub fn add_text(&mut self, text: &str) {\n        self.content.push_str(text);\n    }\n\n    pub fn content(&self) -> &str {\n        \"\"\n    }\n\n    pub fn request_review(&mut self) {\n        if let Some(s) = self.state.take() {\n            self.state = Some(s.request_review())\n        }\n    }\n\n    pub fn approve(&mut self) {\n        if let Some(s) = self.state.take() {\n            self.state = Some(s.approve())\n        }\n    }\n}\n\ntrait State {\n    fn request_review(self: Box<Self>) -> Box<dyn State>;\n    fn approve(self: Box<Self>) -> Box<dyn State>;\n}\n\nstruct Draft {}\n\nimpl State for Draft {\n    // --snip--\n    fn request_review(self: Box<Self>) -> Box<dyn State> {\n        Box::new(PendingReview {})\n    }\n\n    fn approve(self: Box<Self>) -> Box<dyn State> {\n        self\n    }\n}\n\nstruct PendingReview {}\n\nimpl State for PendingReview {\n    // --snip--\n    fn request_review(self: Box<Self>) -> Box<dyn State> {\n        self\n    }\n\n    fn approve(self: Box<Self>) -> Box<dyn State> {\n        Box::new(Published {})\n    }\n}\n\nstruct Published {}\n\nimpl State for Published {\n    fn request_review(self: Box<Self>) -> Box<dyn State> {\n        self\n    }\n\n    fn approve(self: Box<Self>) -> Box<dyn State> {\n        self\n    }\n}\n```\n\nListing 17-16: Implementing the `approve` method on `Post` and the `State` trait\n\nWe add the `approve` method to the `State` trait and add a new struct that implements `State`, the `Published` state.\n\nSimilar to the way `request_review` on `PendingReview` works, if we call the `approve` method on a `Draft`, it will have no effect because `approve` will return `self`. When we call `approve` on `PendingReview`, it returns a new, boxed instance of the `Published` struct. The `Published` struct implements the `State` trait, and for both the `request_review` method and the `approve` method, it returns itself, because the post should stay in the `Published` state in those cases.\n\nNow we need to update the `content` method on `Post`. We want the value returned from `content` to depend on the current state of the `Post`, so we’re going to have the `Post` delegate to a `content` method defined on its `state`, as shown in Listing 17-17:\n\nFilename: src/lib.rs\n\n```rust\npub struct Post {\n    state: Option<Box<dyn State>>,\n    content: String,\n}\n\nimpl Post {\n    // --snip--\n    pub fn new() -> Post {\n        Post {\n            state: Some(Box::new(Draft {})),\n            content: String::new(),\n        }\n    }\n\n    pub fn add_text(&mut self, text: &str) {\n        self.content.push_str(text);\n    }\n\n    pub fn content(&self) -> &str {\n        self.state.as_ref().unwrap().content(self)\n    }\n    // --snip--\n\n    pub fn request_review(&mut self) {\n        if let Some(s) = self.state.take() {\n            self.state = Some(s.request_review())\n        }\n    }\n\n    pub fn approve(&mut self) {\n        if let Some(s) = self.state.take() {\n            self.state = Some(s.approve())\n        }\n    }\n}\n\ntrait State {\n    fn request_review(self: Box<Self>) -> Box<dyn State>;\n    fn approve(self: Box<Self>) -> Box<dyn State>;\n}\n\nstruct Draft {}\n\nimpl State for Draft {\n    fn request_review(self: Box<Self>) -> Box<dyn State> {\n        Box::new(PendingReview {})\n    }\n\n    fn approve(self: Box<Self>) -> Box<dyn State> {\n        self\n    }\n}\n\nstruct PendingReview {}\n\nimpl State for PendingReview {\n    fn request_review(self: Box<Self>) -> Box<dyn State> {\n        self\n    }\n\n    fn approve(self: Box<Self>) -> Box<dyn State> {\n        Box::new(Published {})\n    }\n}\n\nstruct Published {}\n\nimpl State for Published {\n    fn request_review(self: Box<Self>) -> Box<dyn State> {\n        self\n    }\n\n    fn approve(self: Box<Self>) -> Box<dyn State> {\n        self\n    }\n}\n```\n\nListing 17-17: Updating the `content` method on `Post` to delegate to a `content` method on `State`\n\nBecause the goal is to keep all these rules inside the structs that implement `State`, we call a `content` method on the value in `state` and pass the post instance (that is, `self`) as an argument. Then we return the value that’s returned from using the `content` method on the `state` value.\n\nWe call the `as_ref` method on the `Option` because we want a reference to the value inside the `Option` rather than ownership of the value. Because `state` is an `Option<Box<dyn State>>`, when we call `as_ref`, an `Option<&Box<dyn State>>` is returned. If we didn’t call `as_ref`, we would get an error because we can’t move `state` out of the borrowed `&self` of the function parameter.\n\nWe then call the `unwrap` method, which we know will never panic, because we know the methods on `Post` ensure that `state` will always contain a `Some` value when those methods are done. This is one of the cases we talked about in the [“Cases In Which You Have More Information Than the Compiler”](about:blank/ch09-03-to-panic-or-not-to-panic.html#cases-in-which-you-have-more-information-than-the-compiler) section of Chapter 9 when we know that a `None` value is never possible, even though the compiler isn’t able to understand that.\n\nAt this point, when we call `content` on the `&Box<dyn State>`, deref coercion will take effect on the `&` and the `Box` so the `content` method will ultimately be called on the type that implements the `State` trait. That means we need to add `content` to the `State` trait definition, and that is where we’ll put the logic for what content to return depending on which state we have, as shown in Listing 17-18:\n\nFilename: src/lib.rs\n\n```rust\npub struct Post {\n    state: Option<Box<dyn State>>,\n    content: String,\n}\n\nimpl Post {\n    pub fn new() -> Post {\n        Post {\n            state: Some(Box::new(Draft {})),\n            content: String::new(),\n        }\n    }\n\n    pub fn add_text(&mut self, text: &str) {\n        self.content.push_str(text);\n    }\n\n    pub fn content(&self) -> &str {\n        self.state.as_ref().unwrap().content(self)\n    }\n\n    pub fn request_review(&mut self) {\n        if let Some(s) = self.state.take() {\n            self.state = Some(s.request_review())\n        }\n    }\n\n    pub fn approve(&mut self) {\n        if let Some(s) = self.state.take() {\n            self.state = Some(s.approve())\n        }\n    }\n}\n\ntrait State {\n    // --snip--\n    fn request_review(self: Box<Self>) -> Box<dyn State>;\n    fn approve(self: Box<Self>) -> Box<dyn State>;\n\n    fn content<'a>(&self, post: &'a Post) -> &'a str {\n        \"\"\n    }\n}\n\n// --snip--\n\nstruct Draft {}\n\nimpl State for Draft {\n    fn request_review(self: Box<Self>) -> Box<dyn State> {\n        Box::new(PendingReview {})\n    }\n\n    fn approve(self: Box<Self>) -> Box<dyn State> {\n        self\n    }\n}\n\nstruct PendingReview {}\n\nimpl State for PendingReview {\n    fn request_review(self: Box<Self>) -> Box<dyn State> {\n        self\n    }\n\n    fn approve(self: Box<Self>) -> Box<dyn State> {\n        Box::new(Published {})\n    }\n}\n\nstruct Published {}\n\nimpl State for Published {\n    // --snip--\n    fn request_review(self: Box<Self>) -> Box<dyn State> {\n        self\n    }\n\n    fn approve(self: Box<Self>) -> Box<dyn State> {\n        self\n    }\n\n    fn content<'a>(&self, post: &'a Post) -> &'a str {\n        &post.content\n    }\n}\n```\n\nListing 17-18: Adding the `content` method to the `State` trait\n\nWe add a default implementation for the `content` method that returns an empty string slice. That means we don’t need to implement `content` on the `Draft` and `PendingReview` structs. The `Published` struct will override the `content` method and return the value in `post.content`.\n\nNote that we need lifetime annotations on this method, as we discussed in Chapter 10. We’re taking a reference to a `post` as an argument and returning a reference to part of that `post`, so the lifetime of the returned reference is related to the lifetime of the `post` argument.\n\nAnd we’re done—all of Listing 17-11 now works! We’ve implemented the state pattern with the rules of the blog post workflow. The logic related to the rules lives in the state objects rather than being scattered throughout `Post`.\n\n#### [Why Not An Enum?](#why-not-an-enum)\n\nYou may have been wondering why we didn’t use an `enum` with the different possible post states as variants. That’s certainly a possible solution, try it and compare the end results to see which you prefer! One disadvantage of using an enum is every place that checks the value of the enum will need a `match` expression or similar to handle every possible variant. This could get more repetitive than this trait object solution.\n\n### [Trade-offs of the State Pattern](#trade-offs-of-the-state-pattern)\n\nWe’ve shown that Rust is capable of implementing the object-oriented state pattern to encapsulate the different kinds of behavior a post should have in each state. The methods on `Post` know nothing about the various behaviors. The way we organized the code, we have to look in only one place to know the different ways a published post can behave: the implementation of the `State` trait on the `Published` struct.\n\nIf we were to create an alternative implementation that didn’t use the state pattern, we might instead use `match` expressions in the methods on `Post` or even in the `main` code that checks the state of the post and changes behavior in those places. That would mean we would have to look in several places to understand all the implications of a post being in the published state! This would only increase the more states we added: each of those `match` expressions would need another arm.\n\nWith the state pattern, the `Post` methods and the places we use `Post` don’t need `match` expressions, and to add a new state, we would only need to add a new struct and implement the trait methods on that one struct.\n\nThe implementation using the state pattern is easy to extend to add more functionality. To see the simplicity of maintaining code that uses the state pattern, try a few of these suggestions:\n\n-   Add a `reject` method that changes the post’s state from `PendingReview` back to `Draft`.\n-   Require two calls to `approve` before the state can be changed to `Published`.\n-   Allow users to add text content only when a post is in the `Draft` state. Hint: have the state object responsible for what might change about the content but not responsible for modifying the `Post`.\n\nOne downside of the state pattern is that, because the states implement the transitions between states, some of the states are coupled to each other. If we add another state between `PendingReview` and `Published`, such as `Scheduled`, we would have to change the code in `PendingReview` to transition to `Scheduled` instead. It would be less work if `PendingReview` didn’t need to change with the addition of a new state, but that would mean switching to another design pattern.\n\nAnother downside is that we’ve duplicated some logic. To eliminate some of the duplication, we might try to make default implementations for the `request_review` and `approve` methods on the `State` trait that return `self`; however, this would violate object safety, because the trait doesn’t know what the concrete `self` will be exactly. We want to be able to use `State` as a trait object, so we need its methods to be object safe.\n\nOther duplication includes the similar implementations of the `request_review` and `approve` methods on `Post`. Both methods delegate to the implementation of the same method on the value in the `state` field of `Option` and set the new value of the `state` field to the result. If we had a lot of methods on `Post` that followed this pattern, we might consider defining a macro to eliminate the repetition (see the [“Macros”](about:blank/ch19-06-macros.html#macros) section in Chapter 19).\n\nBy implementing the state pattern exactly as it’s defined for object-oriented languages, we’re not taking as full advantage of Rust’s strengths as we could. Let’s look at some changes we can make to the `blog` crate that can make invalid states and transitions into compile time errors.\n\n#### [Encoding States and Behavior as Types](#encoding-states-and-behavior-as-types)\n\nWe’ll show you how to rethink the state pattern to get a different set of trade-offs. Rather than encapsulating the states and transitions completely so outside code has no knowledge of them, we’ll encode the states into different types. Consequently, Rust’s type checking system will prevent attempts to use draft posts where only published posts are allowed by issuing a compiler error.\n\nLet’s consider the first part of `main` in Listing 17-11:\n\nFilename: src/main.rs\n\n```rust\nuse blog::Post;\n\nfn main() {\n    let mut post = Post::new();\n\n    post.add_text(\"I ate a salad for lunch today\");\n    assert_eq!(\"\", post.content());\n\n    post.request_review();\n    assert_eq!(\"\", post.content());\n\n    post.approve();\n    assert_eq!(\"I ate a salad for lunch today\", post.content());\n}\n```\n\nWe still enable the creation of new posts in the draft state using `Post::new` and the ability to add text to the post’s content. But instead of having a `content` method on a draft post that returns an empty string, we’ll make it so draft posts don’t have the `content` method at all. That way, if we try to get a draft post’s content, we’ll get a compiler error telling us the method doesn’t exist. As a result, it will be impossible for us to accidentally display draft post content in production, because that code won’t even compile. Listing 17-19 shows the definition of a `Post` struct and a `DraftPost` struct, as well as methods on each:\n\nFilename: src/lib.rs\n\n```rust\npub struct Post {\n    content: String,\n}\n\npub struct DraftPost {\n    content: String,\n}\n\nimpl Post {\n    pub fn new() -> DraftPost {\n        DraftPost {\n            content: String::new(),\n        }\n    }\n\n    pub fn content(&self) -> &str {\n        &self.content\n    }\n}\n\nimpl DraftPost {\n    pub fn add_text(&mut self, text: &str) {\n        self.content.push_str(text);\n    }\n}\n```\n\nListing 17-19: A `Post` with a `content` method and a `DraftPost` without a `content` method\n\nBoth the `Post` and `DraftPost` structs have a private `content` field that stores the blog post text. The structs no longer have the `state` field because we’re moving the encoding of the state to the types of the structs. The `Post` struct will represent a published post, and it has a `content` method that returns the `content`.\n\nWe still have a `Post::new` function, but instead of returning an instance of `Post`, it returns an instance of `DraftPost`. Because `content` is private and there aren’t any functions that return `Post`, it’s not possible to create an instance of `Post` right now.\n\nThe `DraftPost` struct has an `add_text` method, so we can add text to `content` as before, but note that `DraftPost` does not have a `content` method defined! So now the program ensures all posts start as draft posts, and draft posts don’t have their content available for display. Any attempt to get around these constraints will result in a compiler error.\n\n#### [Implementing Transitions as Transformations into Different Types](#implementing-transitions-as-transformations-into-different-types)\n\nSo how do we get a published post? We want to enforce the rule that a draft post has to be reviewed and approved before it can be published. A post in the pending review state should still not display any content. Let’s implement these constraints by adding another struct, `PendingReviewPost`, defining the `request_review` method on `DraftPost` to return a `PendingReviewPost`, and defining an `approve` method on `PendingReviewPost` to return a `Post`, as shown in Listing 17-20:\n\nFilename: src/lib.rs\n\n```rust\npub struct Post {\n    content: String,\n}\n\npub struct DraftPost {\n    content: String,\n}\n\nimpl Post {\n    pub fn new() -> DraftPost {\n        DraftPost {\n            content: String::new(),\n        }\n    }\n\n    pub fn content(&self) -> &str {\n        &self.content\n    }\n}\n\nimpl DraftPost {\n    // --snip--\n    pub fn add_text(&mut self, text: &str) {\n        self.content.push_str(text);\n    }\n\n    pub fn request_review(self) -> PendingReviewPost {\n        PendingReviewPost {\n            content: self.content,\n        }\n    }\n}\n\npub struct PendingReviewPost {\n    content: String,\n}\n\nimpl PendingReviewPost {\n    pub fn approve(self) -> Post {\n        Post {\n            content: self.content,\n        }\n    }\n}\n```\n\nListing 17-20: A `PendingReviewPost` that gets created by calling `request_review` on `DraftPost` and an `approve` method that turns a `PendingReviewPost` into a published `Post`\n\nThe `request_review` and `approve` methods take ownership of `self`, thus consuming the `DraftPost` and `PendingReviewPost` instances and transforming them into a `PendingReviewPost` and a published `Post`, respectively. This way, we won’t have any lingering `DraftPost` instances after we’ve called `request_review` on them, and so forth. The `PendingReviewPost` struct doesn’t have a `content` method defined on it, so attempting to read its content results in a compiler error, as with `DraftPost`. Because the only way to get a published `Post` instance that does have a `content` method defined is to call the `approve` method on a `PendingReviewPost`, and the only way to get a `PendingReviewPost` is to call the `request_review` method on a `DraftPost`, we’ve now encoded the blog post workflow into the type system.\n\nBut we also have to make some small changes to `main`. The `request_review` and `approve` methods return new instances rather than modifying the struct they’re called on, so we need to add more `let post =` shadowing assignments to save the returned instances. We also can’t have the assertions about the draft and pending review posts’ contents be empty strings, nor do we need them: we can’t compile code that tries to use the content of posts in those states any longer. The updated code in `main` is shown in Listing 17-21:\n\nFilename: src/main.rs\n\n```rust\nuse blog::Post;\n\nfn main() {\n    let mut post = Post::new();\n\n    post.add_text(\"I ate a salad for lunch today\");\n\n    let post = post.request_review();\n\n    let post = post.approve();\n\n    assert_eq!(\"I ate a salad for lunch today\", post.content());\n}\n```\n\nListing 17-21: Modifications to `main` to use the new implementation of the blog post workflow\n\nThe changes we needed to make to `main` to reassign `post` mean that this implementation doesn’t quite follow the object-oriented state pattern anymore: the transformations between the states are no longer encapsulated entirely within the `Post` implementation. However, our gain is that invalid states are now impossible because of the type system and the type checking that happens at compile time! This ensures that certain bugs, such as display of the content of an unpublished post, will be discovered before they make it to production.\n\nTry the tasks suggested at the start of this section on the `blog` crate as it is after Listing 17-21 to see what you think about the design of this version of the code. Note that some of the tasks might be completed already in this design.\n\nWe’ve seen that even though Rust is capable of implementing object-oriented design patterns, other patterns, such as encoding state into the type system, are also available in Rust. These patterns have different trade-offs. Although you might be very familiar with object-oriented patterns, rethinking the problem to take advantage of Rust’s features can provide benefits, such as preventing some bugs at compile time. Object-oriented patterns won’t always be the best solution in Rust due to certain features, like ownership, that object-oriented languages don’t have.\n\n## [Summary](#summary)\n\nNo matter whether or not you think Rust is an object-oriented language after reading this chapter, you now know that you can use trait objects to get some object-oriented features in Rust. Dynamic dispatch can give your code some flexibility in exchange for a bit of runtime performance. You can use this flexibility to implement object-oriented patterns that can help your code’s maintainability. Rust also has other features, like ownership, that object-oriented languages don’t have. An object-oriented pattern won’t always be the best way to take advantage of Rust’s strengths, but is an available option.\n\nNext, we’ll look at patterns, which are another of Rust’s features that enable lots of flexibility. We’ve looked at them briefly throughout the book but haven’t seen their full capability yet. Let’s go!",
	"html": "<!DOCTYPE html><html lang=\"en\" class=\"light\" dir=\"ltr\"><head>\n        <!-- Book generated using mdBook -->\n        <meta charset=\"UTF-8\">\n        <title>Implementing an Object-Oriented Design Pattern - The Rust Programming Language</title>\n\n\n        <!-- Custom HTML head -->\n        \n        <meta name=\"description\" content=\"\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <meta name=\"theme-color\" content=\"rgb(255, 255, 255)\">\n\n        <link rel=\"icon\" href=\"favicon.svg\">\n        <link rel=\"shortcut icon\" href=\"favicon.png\">\n        <link rel=\"stylesheet\" href=\"css/variables.css\">\n        <link rel=\"stylesheet\" href=\"css/general.css\">\n        <link rel=\"stylesheet\" href=\"css/chrome.css\">\n        <link rel=\"stylesheet\" href=\"css/print.css\" media=\"print\">\n\n        <!-- Fonts -->\n        <link rel=\"stylesheet\" href=\"FontAwesome/css/font-awesome.css\">\n        <link rel=\"stylesheet\" href=\"fonts/fonts.css\">\n\n        <!-- Highlight.js Stylesheets -->\n        <link rel=\"stylesheet\" href=\"highlight.css\">\n        <link rel=\"stylesheet\" href=\"tomorrow-night.css\" disabled=\"\">\n        <link rel=\"stylesheet\" href=\"ayu-highlight.css\" disabled=\"\">\n\n        <!-- Custom theme stylesheets -->\n        <link rel=\"stylesheet\" href=\"ferris.css\">\n        <link rel=\"stylesheet\" href=\"theme/2018-edition.css\">\n        <link rel=\"stylesheet\" href=\"theme/semantic-notes.css\">\n        <link rel=\"stylesheet\" href=\"theme/listing.css\">\n\n    </head>\n    <body class=\"js sidebar-visible\">\n    <div id=\"body-container\">\n        <!-- Provide site root to javascript -->\n        <script>\n            var path_to_root = \"\";\n            var default_theme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"navy\" : \"light\";\n        </script>\n\n        <!-- Work around some values being stored in localStorage wrapped in quotes -->\n        <script>\n            try {\n                var theme = localStorage.getItem('mdbook-theme');\n                var sidebar = localStorage.getItem('mdbook-sidebar');\n\n                if (theme.startsWith('\"') && theme.endsWith('\"')) {\n                    localStorage.setItem('mdbook-theme', theme.slice(1, theme.length - 1));\n                }\n\n                if (sidebar.startsWith('\"') && sidebar.endsWith('\"')) {\n                    localStorage.setItem('mdbook-sidebar', sidebar.slice(1, sidebar.length - 1));\n                }\n            } catch (e) { }\n        </script>\n\n        <!-- Set the theme before any content is loaded, prevents flash -->\n        <script>\n            var theme;\n            try { theme = localStorage.getItem('mdbook-theme'); } catch(e) { }\n            if (theme === null || theme === undefined) { theme = default_theme; }\n            var html = document.querySelector('html');\n            html.classList.remove('light')\n            html.classList.add(theme);\n            var body = document.querySelector('body');\n            body.classList.remove('no-js')\n            body.classList.add('js');\n        </script>\n\n        <input type=\"checkbox\" id=\"sidebar-toggle-anchor\" class=\"hidden\">\n\n        <!-- Hide / unhide sidebar before it is displayed -->\n        <script>\n            var body = document.querySelector('body');\n            var sidebar = null;\n            var sidebar_toggle = document.getElementById(\"sidebar-toggle-anchor\");\n            if (document.body.clientWidth >= 1080) {\n                try { sidebar = localStorage.getItem('mdbook-sidebar'); } catch(e) { }\n                sidebar = sidebar || 'visible';\n            } else {\n                sidebar = 'hidden';\n            }\n            sidebar_toggle.checked = sidebar === 'visible';\n            body.classList.remove('sidebar-visible');\n            body.classList.add(\"sidebar-\" + sidebar);\n        </script>\n\n        <nav id=\"sidebar\" class=\"sidebar\" aria-label=\"Table of contents\" aria-hidden=\"false\">\n            <div class=\"sidebar-scrollbox\">\n                <ol class=\"chapter\"><li class=\"chapter-item expanded affix \"><a href=\"title-page.html\" tabindex=\"0\">The Rust Programming Language</a></li><li class=\"chapter-item expanded affix \"><a href=\"foreword.html\" tabindex=\"0\">Foreword</a></li><li class=\"chapter-item expanded affix \"><a href=\"ch00-00-introduction.html\" tabindex=\"0\">Introduction</a></li><li class=\"chapter-item expanded \"><a href=\"ch01-00-getting-started.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.</strong> Getting Started</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch01-01-installation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.1.</strong> Installation</a></li><li class=\"chapter-item expanded \"><a href=\"ch01-02-hello-world.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.2.</strong> Hello, World!</a></li><li class=\"chapter-item expanded \"><a href=\"ch01-03-hello-cargo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.3.</strong> Hello, Cargo!</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch02-00-guessing-game-tutorial.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.</strong> Programming a Guessing Game</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-00-common-programming-concepts.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.</strong> Common Programming Concepts</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch03-01-variables-and-mutability.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.1.</strong> Variables and Mutability</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-02-data-types.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.2.</strong> Data Types</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-03-how-functions-work.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.3.</strong> Functions</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-04-comments.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.4.</strong> Comments</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-05-control-flow.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.5.</strong> Control Flow</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch04-00-understanding-ownership.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.</strong> Understanding Ownership</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch04-01-what-is-ownership.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.</strong> What is Ownership?</a></li><li class=\"chapter-item expanded \"><a href=\"ch04-02-references-and-borrowing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.</strong> References and Borrowing</a></li><li class=\"chapter-item expanded \"><a href=\"ch04-03-slices.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.</strong> The Slice Type</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch05-00-structs.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.</strong> Using Structs to Structure Related Data</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch05-01-defining-structs.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.1.</strong> Defining and Instantiating Structs</a></li><li class=\"chapter-item expanded \"><a href=\"ch05-02-example-structs.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.2.</strong> An Example Program Using Structs</a></li><li class=\"chapter-item expanded \"><a href=\"ch05-03-method-syntax.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.3.</strong> Method Syntax</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch06-00-enums.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.</strong> Enums and Pattern Matching</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch06-01-defining-an-enum.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.1.</strong> Defining an Enum</a></li><li class=\"chapter-item expanded \"><a href=\"ch06-02-match.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.2.</strong> The match Control Flow Construct</a></li><li class=\"chapter-item expanded \"><a href=\"ch06-03-if-let.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.3.</strong> Concise Control Flow with if let</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch07-00-managing-growing-projects-with-packages-crates-and-modules.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.</strong> Managing Growing Projects with Packages, Crates, and Modules</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch07-01-packages-and-crates.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.1.</strong> Packages and Crates</a></li><li class=\"chapter-item expanded \"><a href=\"ch07-02-defining-modules-to-control-scope-and-privacy.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.2.</strong> Defining Modules to Control Scope and Privacy</a></li><li class=\"chapter-item expanded \"><a href=\"ch07-03-paths-for-referring-to-an-item-in-the-module-tree.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.3.</strong> Paths for Referring to an Item in the Module Tree</a></li><li class=\"chapter-item expanded \"><a href=\"ch07-04-bringing-paths-into-scope-with-the-use-keyword.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.4.</strong> Bringing Paths Into Scope with the use Keyword</a></li><li class=\"chapter-item expanded \"><a href=\"ch07-05-separating-modules-into-different-files.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.5.</strong> Separating Modules into Different Files</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch08-00-common-collections.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.</strong> Common Collections</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch08-01-vectors.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.1.</strong> Storing Lists of Values with Vectors</a></li><li class=\"chapter-item expanded \"><a href=\"ch08-02-strings.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.</strong> Storing UTF-8 Encoded Text with Strings</a></li><li class=\"chapter-item expanded \"><a href=\"ch08-03-hash-maps.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.3.</strong> Storing Keys with Associated Values in Hash Maps</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch09-00-error-handling.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.</strong> Error Handling</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch09-01-unrecoverable-errors-with-panic.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.1.</strong> Unrecoverable Errors with panic!</a></li><li class=\"chapter-item expanded \"><a href=\"ch09-02-recoverable-errors-with-result.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.2.</strong> Recoverable Errors with Result</a></li><li class=\"chapter-item expanded \"><a href=\"ch09-03-to-panic-or-not-to-panic.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.3.</strong> To panic! or Not to panic!</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch10-00-generics.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.</strong> Generic Types, Traits, and Lifetimes</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch10-01-syntax.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.</strong> Generic Data Types</a></li><li class=\"chapter-item expanded \"><a href=\"ch10-02-traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.2.</strong> Traits: Defining Shared Behavior</a></li><li class=\"chapter-item expanded \"><a href=\"ch10-03-lifetime-syntax.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.3.</strong> Validating References with Lifetimes</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch11-00-testing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.</strong> Writing Automated Tests</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch11-01-writing-tests.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.1.</strong> How to Write Tests</a></li><li class=\"chapter-item expanded \"><a href=\"ch11-02-running-tests.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.2.</strong> Controlling How Tests Are Run</a></li><li class=\"chapter-item expanded \"><a href=\"ch11-03-test-organization.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.3.</strong> Test Organization</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch12-00-an-io-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.</strong> An I/O Project: Building a Command Line Program</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch12-01-accepting-command-line-arguments.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.1.</strong> Accepting Command Line Arguments</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-02-reading-a-file.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.2.</strong> Reading a File</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-03-improving-error-handling-and-modularity.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.3.</strong> Refactoring to Improve Modularity and Error Handling</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-04-testing-the-librarys-functionality.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.4.</strong> Developing the Library’s Functionality with Test Driven Development</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-05-working-with-environment-variables.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.5.</strong> Working with Environment Variables</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-06-writing-to-stderr-instead-of-stdout.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.6.</strong> Writing Error Messages to Standard Error Instead of Standard Output</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch13-00-functional-features.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.</strong> Functional Language Features: Iterators and Closures</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch13-01-closures.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.1.</strong> Closures: Anonymous Functions that Capture Their Environment</a></li><li class=\"chapter-item expanded \"><a href=\"ch13-02-iterators.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.2.</strong> Processing a Series of Items with Iterators</a></li><li class=\"chapter-item expanded \"><a href=\"ch13-03-improving-our-io-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.3.</strong> Improving Our I/O Project</a></li><li class=\"chapter-item expanded \"><a href=\"ch13-04-performance.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.4.</strong> Comparing Performance: Loops vs. Iterators</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch14-00-more-about-cargo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.</strong> More about Cargo and Crates.io</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch14-01-release-profiles.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.1.</strong> Customizing Builds with Release Profiles</a></li><li class=\"chapter-item expanded \"><a href=\"ch14-02-publishing-to-crates-io.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.2.</strong> Publishing a Crate to Crates.io</a></li><li class=\"chapter-item expanded \"><a href=\"ch14-03-cargo-workspaces.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.3.</strong> Cargo Workspaces</a></li><li class=\"chapter-item expanded \"><a href=\"ch14-04-installing-binaries.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.4.</strong> Installing Binaries from Crates.io with cargo install</a></li><li class=\"chapter-item expanded \"><a href=\"ch14-05-extending-cargo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.5.</strong> Extending Cargo with Custom Commands</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch15-00-smart-pointers.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.</strong> Smart Pointers</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch15-01-box.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.1.</strong> Using Box&lt;T&gt; to Point to Data on the Heap</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-02-deref.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.2.</strong> Treating Smart Pointers Like Regular References with the Deref Trait</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-03-drop.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.3.</strong> Running Code on Cleanup with the Drop Trait</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-04-rc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.4.</strong> Rc&lt;T&gt;, the Reference Counted Smart Pointer</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-05-interior-mutability.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.5.</strong> RefCell&lt;T&gt; and the Interior Mutability Pattern</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-06-reference-cycles.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.6.</strong> Reference Cycles Can Leak Memory</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch16-00-concurrency.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.</strong> Fearless Concurrency</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch16-01-threads.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.1.</strong> Using Threads to Run Code Simultaneously</a></li><li class=\"chapter-item expanded \"><a href=\"ch16-02-message-passing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.2.</strong> Using Message Passing to Transfer Data Between Threads</a></li><li class=\"chapter-item expanded \"><a href=\"ch16-03-shared-state.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.3.</strong> Shared-State Concurrency</a></li><li class=\"chapter-item expanded \"><a href=\"ch16-04-extensible-concurrency-sync-and-send.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.4.</strong> Extensible Concurrency with the Sync and Send Traits</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch17-00-oop.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.</strong> Object Oriented Programming Features of Rust</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch17-01-what-is-oo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.1.</strong> Characteristics of Object-Oriented Languages</a></li><li class=\"chapter-item expanded \"><a href=\"ch17-02-trait-objects.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.2.</strong> Using Trait Objects That Allow for Values of Different Types</a></li><li class=\"chapter-item expanded \"><a href=\"ch17-03-oo-design-patterns.html\" class=\"active\" tabindex=\"0\"><strong aria-hidden=\"true\">17.3.</strong> Implementing an Object-Oriented Design Pattern</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch18-00-patterns.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.</strong> Patterns and Matching</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch18-01-all-the-places-for-patterns.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.1.</strong> All the Places Patterns Can Be Used</a></li><li class=\"chapter-item expanded \"><a href=\"ch18-02-refutability.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.2.</strong> Refutability: Whether a Pattern Might Fail to Match</a></li><li class=\"chapter-item expanded \"><a href=\"ch18-03-pattern-syntax.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.3.</strong> Pattern Syntax</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch19-00-advanced-features.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.</strong> Advanced Features</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch19-01-unsafe-rust.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.1.</strong> Unsafe Rust</a></li><li class=\"chapter-item expanded \"><a href=\"ch19-03-advanced-traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.2.</strong> Advanced Traits</a></li><li class=\"chapter-item expanded \"><a href=\"ch19-04-advanced-types.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.3.</strong> Advanced Types</a></li><li class=\"chapter-item expanded \"><a href=\"ch19-05-advanced-functions-and-closures.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.4.</strong> Advanced Functions and Closures</a></li><li class=\"chapter-item expanded \"><a href=\"ch19-06-macros.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.5.</strong> Macros</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch20-00-final-project-a-web-server.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.</strong> Final Project: Building a Multithreaded Web Server</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch20-01-single-threaded.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.1.</strong> Building a Single-Threaded Web Server</a></li><li class=\"chapter-item expanded \"><a href=\"ch20-02-multithreaded.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.2.</strong> Turning Our Single-Threaded Server into a Multithreaded Server</a></li><li class=\"chapter-item expanded \"><a href=\"ch20-03-graceful-shutdown-and-cleanup.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.3.</strong> Graceful Shutdown and Cleanup</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"appendix-00.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.</strong> Appendix</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"appendix-01-keywords.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.1.</strong> A - Keywords</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-02-operators.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.2.</strong> B - Operators and Symbols</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-03-derivable-traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.3.</strong> C - Derivable Traits</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-04-useful-development-tools.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.4.</strong> D - Useful Development Tools</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-05-editions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.5.</strong> E - Editions</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-06-translation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.6.</strong> F - Translations of the Book</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-07-nightly-rust.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.7.</strong> G - How Rust is Made and “Nightly Rust”</a></li></ol></li></ol>\n            </div>\n            <div id=\"sidebar-resize-handle\" class=\"sidebar-resize-handle\">\n                <div class=\"sidebar-resize-indicator\"></div>\n            </div>\n        </nav>\n\n        <!-- Track and set sidebar scroll position -->\n        <script>\n            var sidebarScrollbox = document.querySelector('#sidebar .sidebar-scrollbox');\n            sidebarScrollbox.addEventListener('click', function(e) {\n                if (e.target.tagName === 'A') {\n                    sessionStorage.setItem('sidebar-scroll', sidebarScrollbox.scrollTop);\n                }\n            }, { passive: true });\n            var sidebarScrollTop = sessionStorage.getItem('sidebar-scroll');\n            sessionStorage.removeItem('sidebar-scroll');\n            if (sidebarScrollTop) {\n                // preserve sidebar scroll position when navigating via links within sidebar\n                sidebarScrollbox.scrollTop = sidebarScrollTop;\n            } else {\n                // scroll sidebar to current active section when navigating via \"next/previous chapter\" buttons\n                var activeSection = document.querySelector('#sidebar .active');\n                if (activeSection) {\n                    activeSection.scrollIntoView({ block: 'center' });\n                }\n            }\n        </script>\n\n        <div id=\"page-wrapper\" class=\"page-wrapper\">\n\n            <div class=\"page\">\n                                <div id=\"menu-bar-hover-placeholder\"></div>\n                <div id=\"menu-bar\" class=\"menu-bar\" style=\"top: 0px;\">\n                    <div class=\"left-buttons\">\n                        <label id=\"sidebar-toggle\" class=\"icon-button\" for=\"sidebar-toggle-anchor\" title=\"Toggle Table of Contents\" aria-label=\"Toggle Table of Contents\" aria-controls=\"sidebar\" aria-expanded=\"true\">\n                            <i class=\"fa fa-bars\"></i>\n                        </label>\n                        <button id=\"theme-toggle\" class=\"icon-button\" type=\"button\" title=\"Change theme\" aria-label=\"Change theme\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-controls=\"theme-list\">\n                            <i class=\"fa fa-paint-brush\"></i>\n                        </button>\n                        <ul id=\"theme-list\" class=\"theme-popup\" aria-label=\"Themes\" role=\"menu\">\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme theme-selected\" id=\"light\">Light</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"rust\">Rust</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"coal\">Coal</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"navy\">Navy</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"ayu\">Ayu</button></li>\n                        </ul>\n                        <button id=\"search-toggle\" class=\"icon-button\" type=\"button\" title=\"Search. (Shortkey: s)\" aria-label=\"Toggle Searchbar\" aria-expanded=\"false\" aria-keyshortcuts=\"S\" aria-controls=\"searchbar\">\n                            <i class=\"fa fa-search\"></i>\n                        </button>\n                    </div>\n\n                    <h1 class=\"menu-title\">The Rust Programming Language</h1>\n\n                    <div class=\"right-buttons\">\n                        <a href=\"print.html\" title=\"Print this book\" aria-label=\"Print this book\">\n                            <i id=\"print-button\" class=\"fa fa-print\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/book\" title=\"Git repository\" aria-label=\"Git repository\">\n                            <i id=\"git-repository-button\" class=\"fa fa-github\"></i>\n                        </a>\n\n                    </div>\n                </div>\n\n                <div id=\"search-wrapper\" class=\"hidden\">\n                    <form id=\"searchbar-outer\" class=\"searchbar-outer\">\n                        <input type=\"search\" id=\"searchbar\" name=\"searchbar\" placeholder=\"Search this book ...\" aria-controls=\"searchresults-outer\" aria-describedby=\"searchresults-header\">\n                    </form>\n                    <div id=\"searchresults-outer\" class=\"searchresults-outer hidden\">\n                        <div id=\"searchresults-header\" class=\"searchresults-header\"></div>\n                        <ul id=\"searchresults\">\n                        </ul>\n                    </div>\n                </div>\n\n                <!-- Apply ARIA attributes after the sidebar and the sidebar toggle button are added to the DOM -->\n                <script>\n                    document.getElementById('sidebar-toggle').setAttribute('aria-expanded', sidebar === 'visible');\n                    document.getElementById('sidebar').setAttribute('aria-hidden', sidebar !== 'visible');\n                    Array.from(document.querySelectorAll('#sidebar a')).forEach(function(link) {\n                        link.setAttribute('tabIndex', sidebar === 'visible' ? 0 : -1);\n                    });\n                </script>\n\n                <div id=\"content\" class=\"content\">\n                    <main>\n                        <h2 id=\"implementing-an-object-oriented-design-pattern\"><a class=\"header\" href=\"#implementing-an-object-oriented-design-pattern\">Implementing an Object-Oriented Design Pattern</a></h2>\n<p>The <em>state pattern</em> is an object-oriented design pattern. The crux of the\npattern is that we define a set of states a value can have internally. The\nstates are represented by a set of <em>state objects</em>, and the value’s behavior\nchanges based on its state. We’re going to work through an example of a blog\npost struct that has a field to hold its state, which will be a state object\nfrom the set “draft”, “review”, or “published”.</p>\n<p>The state objects share functionality: in Rust, of course, we use structs and\ntraits rather than objects and inheritance. Each state object is responsible\nfor its own behavior and for governing when it should change into another\nstate. The value that holds a state object knows nothing about the different\nbehavior of the states or when to transition between states.</p>\n<p>The advantage of using the state pattern is that, when the business\nrequirements of the program change, we won’t need to change the code of the\nvalue holding the state or the code that uses the value. We’ll only need to\nupdate the code inside one of the state objects to change its rules or perhaps\nadd more state objects.</p>\n<p>First, we’re going to implement the state pattern in a more traditional\nobject-oriented way, then we’ll use an approach that’s a bit more natural in\nRust. Let’s dig in to incrementally implementing a blog post workflow using the\nstate pattern.</p>\n<p>The final functionality will look like this:</p>\n<ol>\n<li>A blog post starts as an empty draft.</li>\n<li>When the draft is done, a review of the post is requested.</li>\n<li>When the post is approved, it gets published.</li>\n<li>Only published blog posts return content to print, so unapproved posts can’t\naccidentally be published.</li>\n</ol>\n<p>Any other changes attempted on a post should have no effect. For example, if we\ntry to approve a draft blog post before we’ve requested a review, the post\nshould remain an unpublished draft.</p>\n<p>Listing 17-11 shows this workflow in code form: this is an example usage of the\nAPI we’ll implement in a library crate named <code class=\"hljs\">blog</code>. This won’t compile yet\nbecause we haven’t implemented the <code class=\"hljs\">blog</code> crate.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs\"><span class=\"hljs-keyword\">use</span> blog::Post;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> post = Post::new();\n\n    post.add_text(<span class=\"hljs-string\">\"I ate a salad for lunch today\"</span>);\n    <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-string\">\"\"</span>, post.content());\n\n    post.request_review();\n    <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-string\">\"\"</span>, post.content());\n\n    post.approve();\n    <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-string\">\"I ate a salad for lunch today\"</span>, post.content());\n}</code></pre>\n<p><span class=\"caption\">Listing 17-11: Code that demonstrates the desired\nbehavior we want our <code class=\"hljs\">blog</code> crate to have</span></p>\n<p>We want to allow the user to create a new draft blog post with <code class=\"hljs\">Post::new</code>. We\nwant to allow text to be added to the blog post. If we try to get the post’s\ncontent immediately, before approval, we shouldn’t get any text because the\npost is still a draft. We’ve added <code class=\"hljs\">assert_eq!</code> in the code for demonstration\npurposes. An excellent unit test for this would be to assert that a draft blog\npost returns an empty string from the <code class=\"hljs\">content</code> method, but we’re not going to\nwrite tests for this example.</p>\n<p>Next, we want to enable a request for a review of the post, and we want\n<code class=\"hljs\">content</code> to return an empty string while waiting for the review. When the post\nreceives approval, it should get published, meaning the text of the post will\nbe returned when <code class=\"hljs\">content</code> is called.</p>\n<p>Notice that the only type we’re interacting with from the crate is the <code class=\"hljs\">Post</code>\ntype. This type will use the state pattern and will hold a value that will be\none of three state objects representing the various states a post can be\nin—draft, waiting for review, or published. Changing from one state to another\nwill be managed internally within the <code class=\"hljs\">Post</code> type. The states change in\nresponse to the methods called by our library’s users on the <code class=\"hljs\">Post</code> instance,\nbut they don’t have to manage the state changes directly. Also, users can’t\nmake a mistake with the states, like publishing a post before it’s reviewed.</p>\n<h3 id=\"defining-post-and-creating-a-new-instance-in-the-draft-state\"><a class=\"header\" href=\"#defining-post-and-creating-a-new-instance-in-the-draft-state\">Defining <code>Post</code> and Creating a New Instance in the Draft State</a></h3>\n<p>Let’s get started on the implementation of the library! We know we need a\npublic <code class=\"hljs\">Post</code> struct that holds some content, so we’ll start with the\ndefinition of the struct and an associated public <code class=\"hljs\">new</code> function to create an\ninstance of <code class=\"hljs\">Post</code>, as shown in Listing 17-12. We’ll also make a private\n<code class=\"hljs\">State</code> trait that will define the behavior that all state objects for a <code class=\"hljs\">Post</code>\nmust have.</p>\n<p>Then <code class=\"hljs\">Post</code> will hold a trait object of <code class=\"hljs\">Box&lt;dyn State&gt;</code> inside an <code class=\"hljs\">Option&lt;T&gt;</code>\nin a private field named <code class=\"hljs\">state</code> to hold the state object. You’ll see why the\n<code class=\"hljs\">Option&lt;T&gt;</code> is necessary in a bit.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust noplayground hljs\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Post</span></span> {\n    state: <span class=\"hljs-built_in\">Option</span>&lt;<span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> State&gt;&gt;,\n    content: <span class=\"hljs-built_in\">String</span>,\n}\n\n<span class=\"hljs-keyword\">impl</span> Post {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>() -&gt; Post {\n        Post {\n            state: <span class=\"hljs-literal\">Some</span>(<span class=\"hljs-built_in\">Box</span>::new(Draft {})),\n            content: <span class=\"hljs-built_in\">String</span>::new(),\n        }\n    }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">State</span></span> {}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Draft</span></span> {}\n\n<span class=\"hljs-keyword\">impl</span> State <span class=\"hljs-keyword\">for</span> Draft {}</code></pre>\n<p><span class=\"caption\">Listing 17-12: Definition of a <code class=\"hljs\">Post</code> struct and a <code class=\"hljs\">new</code>\nfunction that creates a new <code class=\"hljs\">Post</code> instance, a <code class=\"hljs\">State</code> trait, and a <code class=\"hljs\">Draft</code>\nstruct</span></p>\n<p>The <code class=\"hljs\">State</code> trait defines the behavior shared by different post states. The\nstate objects are <code class=\"hljs\">Draft</code>, <code class=\"hljs\">PendingReview</code>, and <code class=\"hljs\">Published</code>, and they will all\nimplement the <code class=\"hljs\">State</code> trait. For now, the trait doesn’t have any methods, and\nwe’ll start by defining just the <code class=\"hljs\">Draft</code> state because that is the state we\nwant a post to start in.</p>\n<p>When we create a new <code class=\"hljs\">Post</code>, we set its <code class=\"hljs\">state</code> field to a <code class=\"hljs\">Some</code> value that\nholds a <code class=\"hljs\">Box</code>. This <code class=\"hljs\">Box</code> points to a new instance of the <code class=\"hljs\">Draft</code> struct.\nThis ensures whenever we create a new instance of <code class=\"hljs\">Post</code>, it will start out as\na draft. Because the <code class=\"hljs\">state</code> field of <code class=\"hljs\">Post</code> is private, there is no way to\ncreate a <code class=\"hljs\">Post</code> in any other state! In the <code class=\"hljs\">Post::new</code> function, we set the\n<code class=\"hljs\">content</code> field to a new, empty <code class=\"hljs\">String</code>.</p>\n<h3 id=\"storing-the-text-of-the-post-content\"><a class=\"header\" href=\"#storing-the-text-of-the-post-content\">Storing the Text of the Post Content</a></h3>\n<p>We saw in Listing 17-11 that we want to be able to call a method named\n<code class=\"hljs\">add_text</code> and pass it a <code class=\"hljs\">&amp;str</code> that is then added as the text content of the\nblog post. We implement this as a method, rather than exposing the <code class=\"hljs\">content</code>\nfield as <code class=\"hljs\">pub</code>, so that later we can implement a method that will control how\nthe <code class=\"hljs\">content</code> field’s data is read. The <code class=\"hljs\">add_text</code> method is pretty\nstraightforward, so let’s add the implementation in Listing 17-13 to the <code class=\"hljs\">impl Post</code> block:</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust noplayground hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Post</span></span> {\n</span><span class=\"boring\">    state: <span class=\"hljs-built_in\">Option</span>&lt;<span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> State&gt;&gt;,\n</span><span class=\"boring\">    content: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">impl</span> Post {\n    <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>() -&gt; Post {\n</span><span class=\"boring\">        Post {\n</span><span class=\"boring\">            state: <span class=\"hljs-literal\">Some</span>(<span class=\"hljs-built_in\">Box</span>::new(Draft {})),\n</span><span class=\"boring\">            content: <span class=\"hljs-built_in\">String</span>::new(),\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span>    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">add_text</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, text: &amp;<span class=\"hljs-built_in\">str</span>) {\n        <span class=\"hljs-keyword\">self</span>.content.push_str(text);\n    }\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">State</span></span> {}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Draft</span></span> {}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> State <span class=\"hljs-keyword\">for</span> Draft {}</span></code></pre>\n<p><span class=\"caption\">Listing 17-13: Implementing the <code class=\"hljs\">add_text</code> method to add\ntext to a post’s <code class=\"hljs\">content</code></span></p>\n<p>The <code class=\"hljs\">add_text</code> method takes a mutable reference to <code class=\"hljs\">self</code>, because we’re\nchanging the <code class=\"hljs\">Post</code> instance that we’re calling <code class=\"hljs\">add_text</code> on. We then call\n<code class=\"hljs\">push_str</code> on the <code class=\"hljs\">String</code> in <code class=\"hljs\">content</code> and pass the <code class=\"hljs\">text</code> argument to add to\nthe saved <code class=\"hljs\">content</code>. This behavior doesn’t depend on the state the post is in,\nso it’s not part of the state pattern. The <code class=\"hljs\">add_text</code> method doesn’t interact\nwith the <code class=\"hljs\">state</code> field at all, but it is part of the behavior we want to\nsupport.</p>\n<h3 id=\"ensuring-the-content-of-a-draft-post-is-empty\"><a class=\"header\" href=\"#ensuring-the-content-of-a-draft-post-is-empty\">Ensuring the Content of a Draft Post Is Empty</a></h3>\n<p>Even after we’ve called <code class=\"hljs\">add_text</code> and added some content to our post, we still\nwant the <code class=\"hljs\">content</code> method to return an empty string slice because the post is\nstill in the draft state, as shown on line 7 of Listing 17-11. For now, let’s\nimplement the <code class=\"hljs\">content</code> method with the simplest thing that will fulfill this\nrequirement: always returning an empty string slice. We’ll change this later\nonce we implement the ability to change a post’s state so it can be published.\nSo far, posts can only be in the draft state, so the post content should always\nbe empty. Listing 17-14 shows this placeholder implementation:</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust noplayground hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Post</span></span> {\n</span><span class=\"boring\">    state: <span class=\"hljs-built_in\">Option</span>&lt;<span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> State&gt;&gt;,\n</span><span class=\"boring\">    content: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">impl</span> Post {\n    <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>() -&gt; Post {\n</span><span class=\"boring\">        Post {\n</span><span class=\"boring\">            state: <span class=\"hljs-literal\">Some</span>(<span class=\"hljs-built_in\">Box</span>::new(Draft {})),\n</span><span class=\"boring\">            content: <span class=\"hljs-built_in\">String</span>::new(),\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">add_text</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, text: &amp;<span class=\"hljs-built_in\">str</span>) {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">self</span>.content.push_str(text);\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span>    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">content</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; &amp;<span class=\"hljs-built_in\">str</span> {\n        <span class=\"hljs-string\">\"\"</span>\n    }\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">State</span></span> {}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Draft</span></span> {}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> State <span class=\"hljs-keyword\">for</span> Draft {}</span></code></pre>\n<p><span class=\"caption\">Listing 17-14: Adding a placeholder implementation for\nthe <code class=\"hljs\">content</code> method on <code class=\"hljs\">Post</code> that always returns an empty string slice</span></p>\n<p>With this added <code class=\"hljs\">content</code> method, everything in Listing 17-11 up to line 7\nworks as intended.</p>\n<h3 id=\"requesting-a-review-of-the-post-changes-its-state\"><a class=\"header\" href=\"#requesting-a-review-of-the-post-changes-its-state\">Requesting a Review of the Post Changes Its State</a></h3>\n<p>Next, we need to add functionality to request a review of a post, which should\nchange its state from <code class=\"hljs\">Draft</code> to <code class=\"hljs\">PendingReview</code>. Listing 17-15 shows this code:</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust noplayground hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Post</span></span> {\n</span><span class=\"boring\">    state: <span class=\"hljs-built_in\">Option</span>&lt;<span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> State&gt;&gt;,\n</span><span class=\"boring\">    content: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">impl</span> Post {\n    <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>() -&gt; Post {\n</span><span class=\"boring\">        Post {\n</span><span class=\"boring\">            state: <span class=\"hljs-literal\">Some</span>(<span class=\"hljs-built_in\">Box</span>::new(Draft {})),\n</span><span class=\"boring\">            content: <span class=\"hljs-built_in\">String</span>::new(),\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">add_text</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, text: &amp;<span class=\"hljs-built_in\">str</span>) {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">self</span>.content.push_str(text);\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">content</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; &amp;<span class=\"hljs-built_in\">str</span> {\n</span><span class=\"boring\">        <span class=\"hljs-string\">\"\"</span>\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span>    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">request_review</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) {\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-literal\">Some</span>(s) = <span class=\"hljs-keyword\">self</span>.state.take() {\n            <span class=\"hljs-keyword\">self</span>.state = <span class=\"hljs-literal\">Some</span>(s.request_review())\n        }\n    }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">State</span></span> {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">request_review</span></span>(<span class=\"hljs-keyword\">self</span>: <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">Self</span>&gt;) -&gt; <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> State&gt;;\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Draft</span></span> {}\n\n<span class=\"hljs-keyword\">impl</span> State <span class=\"hljs-keyword\">for</span> Draft {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">request_review</span></span>(<span class=\"hljs-keyword\">self</span>: <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">Self</span>&gt;) -&gt; <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> State&gt; {\n        <span class=\"hljs-built_in\">Box</span>::new(PendingReview {})\n    }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">PendingReview</span></span> {}\n\n<span class=\"hljs-keyword\">impl</span> State <span class=\"hljs-keyword\">for</span> PendingReview {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">request_review</span></span>(<span class=\"hljs-keyword\">self</span>: <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">Self</span>&gt;) -&gt; <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> State&gt; {\n        <span class=\"hljs-keyword\">self</span>\n    }\n}</code></pre>\n<p><span class=\"caption\">Listing 17-15: Implementing <code class=\"hljs\">request_review</code> methods on\n<code class=\"hljs\">Post</code> and the <code class=\"hljs\">State</code> trait</span></p>\n<p>We give <code class=\"hljs\">Post</code> a public method named <code class=\"hljs\">request_review</code> that will take a mutable\nreference to <code class=\"hljs\">self</code>. Then we call an internal <code class=\"hljs\">request_review</code> method on the\ncurrent state of <code class=\"hljs\">Post</code>, and this second <code class=\"hljs\">request_review</code> method consumes the\ncurrent state and returns a new state.</p>\n<p>We add the <code class=\"hljs\">request_review</code> method to the <code class=\"hljs\">State</code> trait; all types that\nimplement the trait will now need to implement the <code class=\"hljs\">request_review</code> method.\nNote that rather than having <code class=\"hljs\">self</code>, <code class=\"hljs\">&amp;self</code>, or <code class=\"hljs\">&amp;mut self</code> as the first\nparameter of the method, we have <code class=\"hljs\">self: Box&lt;Self&gt;</code>. This syntax means the\nmethod is only valid when called on a <code class=\"hljs\">Box</code> holding the type. This syntax takes\nownership of <code class=\"hljs\">Box&lt;Self&gt;</code>, invalidating the old state so the state value of the\n<code class=\"hljs\">Post</code> can transform into a new state.</p>\n<p>To consume the old state, the <code class=\"hljs\">request_review</code> method needs to take ownership\nof the state value. This is where the <code class=\"hljs\">Option</code> in the <code class=\"hljs\">state</code> field of <code class=\"hljs\">Post</code>\ncomes in: we call the <code class=\"hljs\">take</code> method to take the <code class=\"hljs\">Some</code> value out of the <code class=\"hljs\">state</code>\nfield and leave a <code class=\"hljs\">None</code> in its place, because Rust doesn’t let us have\nunpopulated fields in structs. This lets us move the <code class=\"hljs\">state</code> value out of\n<code class=\"hljs\">Post</code> rather than borrowing it. Then we’ll set the post’s <code class=\"hljs\">state</code> value to the\nresult of this operation.</p>\n<p>We need to set <code class=\"hljs\">state</code> to <code class=\"hljs\">None</code> temporarily rather than setting it directly\nwith code like <code class=\"hljs\">self.state = self.state.request_review();</code> to get ownership of\nthe <code class=\"hljs\">state</code> value. This ensures <code class=\"hljs\">Post</code> can’t use the old <code class=\"hljs\">state</code> value after\nwe’ve transformed it into a new state.</p>\n<p>The <code class=\"hljs\">request_review</code> method on <code class=\"hljs\">Draft</code> returns a new, boxed instance of a new\n<code class=\"hljs\">PendingReview</code> struct, which represents the state when a post is waiting for a\nreview. The <code class=\"hljs\">PendingReview</code> struct also implements the <code class=\"hljs\">request_review</code> method\nbut doesn’t do any transformations. Rather, it returns itself, because when we\nrequest a review on a post already in the <code class=\"hljs\">PendingReview</code> state, it should stay\nin the <code class=\"hljs\">PendingReview</code> state.</p>\n<p>Now we can start seeing the advantages of the state pattern: the\n<code class=\"hljs\">request_review</code> method on <code class=\"hljs\">Post</code> is the same no matter its <code class=\"hljs\">state</code> value. Each\nstate is responsible for its own rules.</p>\n<p>We’ll leave the <code class=\"hljs\">content</code> method on <code class=\"hljs\">Post</code> as is, returning an empty string\nslice. We can now have a <code class=\"hljs\">Post</code> in the <code class=\"hljs\">PendingReview</code> state as well as in the\n<code class=\"hljs\">Draft</code> state, but we want the same behavior in the <code class=\"hljs\">PendingReview</code> state.\nListing 17-11 now works up to line 10!</p>\n<!-- Old headings. Do not remove or links may break. -->\n<p><a id=\"adding-the-approve-method-that-changes-the-behavior-of-content\"></a></p>\n<h3 id=\"adding-approve-to-change-the-behavior-of-content\"><a class=\"header\" href=\"#adding-approve-to-change-the-behavior-of-content\">Adding <code>approve</code> to Change the Behavior of <code>content</code></a></h3>\n<p>The <code class=\"hljs\">approve</code> method will be similar to the <code class=\"hljs\">request_review</code> method: it will\nset <code class=\"hljs\">state</code> to the value that the current state says it should have when that\nstate is approved, as shown in Listing 17-16:</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust noplayground hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Post</span></span> {\n</span><span class=\"boring\">    state: <span class=\"hljs-built_in\">Option</span>&lt;<span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> State&gt;&gt;,\n</span><span class=\"boring\">    content: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">impl</span> Post {\n    <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>() -&gt; Post {\n</span><span class=\"boring\">        Post {\n</span><span class=\"boring\">            state: <span class=\"hljs-literal\">Some</span>(<span class=\"hljs-built_in\">Box</span>::new(Draft {})),\n</span><span class=\"boring\">            content: <span class=\"hljs-built_in\">String</span>::new(),\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">add_text</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, text: &amp;<span class=\"hljs-built_in\">str</span>) {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">self</span>.content.push_str(text);\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">content</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; &amp;<span class=\"hljs-built_in\">str</span> {\n</span><span class=\"boring\">        <span class=\"hljs-string\">\"\"</span>\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">request_review</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-literal\">Some</span>(s) = <span class=\"hljs-keyword\">self</span>.state.take() {\n</span><span class=\"boring\">            <span class=\"hljs-keyword\">self</span>.state = <span class=\"hljs-literal\">Some</span>(s.request_review())\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span>    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">approve</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) {\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-literal\">Some</span>(s) = <span class=\"hljs-keyword\">self</span>.state.take() {\n            <span class=\"hljs-keyword\">self</span>.state = <span class=\"hljs-literal\">Some</span>(s.approve())\n        }\n    }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">State</span></span> {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">request_review</span></span>(<span class=\"hljs-keyword\">self</span>: <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">Self</span>&gt;) -&gt; <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> State&gt;;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">approve</span></span>(<span class=\"hljs-keyword\">self</span>: <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">Self</span>&gt;) -&gt; <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> State&gt;;\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Draft</span></span> {}\n\n<span class=\"hljs-keyword\">impl</span> State <span class=\"hljs-keyword\">for</span> Draft {\n    <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">request_review</span></span>(<span class=\"hljs-keyword\">self</span>: <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">Self</span>&gt;) -&gt; <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> State&gt; {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">Box</span>::new(PendingReview {})\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">approve</span></span>(<span class=\"hljs-keyword\">self</span>: <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">Self</span>&gt;) -&gt; <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> State&gt; {\n        <span class=\"hljs-keyword\">self</span>\n    }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">PendingReview</span></span> {}\n\n<span class=\"hljs-keyword\">impl</span> State <span class=\"hljs-keyword\">for</span> PendingReview {\n    <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">request_review</span></span>(<span class=\"hljs-keyword\">self</span>: <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">Self</span>&gt;) -&gt; <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> State&gt; {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">self</span>\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">approve</span></span>(<span class=\"hljs-keyword\">self</span>: <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">Self</span>&gt;) -&gt; <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> State&gt; {\n        <span class=\"hljs-built_in\">Box</span>::new(Published {})\n    }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Published</span></span> {}\n\n<span class=\"hljs-keyword\">impl</span> State <span class=\"hljs-keyword\">for</span> Published {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">request_review</span></span>(<span class=\"hljs-keyword\">self</span>: <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">Self</span>&gt;) -&gt; <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> State&gt; {\n        <span class=\"hljs-keyword\">self</span>\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">approve</span></span>(<span class=\"hljs-keyword\">self</span>: <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">Self</span>&gt;) -&gt; <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> State&gt; {\n        <span class=\"hljs-keyword\">self</span>\n    }\n}</code></pre>\n<p><span class=\"caption\">Listing 17-16: Implementing the <code class=\"hljs\">approve</code> method on\n<code class=\"hljs\">Post</code> and the <code class=\"hljs\">State</code> trait</span></p>\n<p>We add the <code class=\"hljs\">approve</code> method to the <code class=\"hljs\">State</code> trait and add a new struct that\nimplements <code class=\"hljs\">State</code>, the <code class=\"hljs\">Published</code> state.</p>\n<p>Similar to the way <code class=\"hljs\">request_review</code> on <code class=\"hljs\">PendingReview</code> works, if we call the\n<code class=\"hljs\">approve</code> method on a <code class=\"hljs\">Draft</code>, it will have no effect because <code class=\"hljs\">approve</code> will\nreturn <code class=\"hljs\">self</code>. When we call <code class=\"hljs\">approve</code> on <code class=\"hljs\">PendingReview</code>, it returns a new,\nboxed instance of the <code class=\"hljs\">Published</code> struct. The <code class=\"hljs\">Published</code> struct implements the\n<code class=\"hljs\">State</code> trait, and for both the <code class=\"hljs\">request_review</code> method and the <code class=\"hljs\">approve</code>\nmethod, it returns itself, because the post should stay in the <code class=\"hljs\">Published</code>\nstate in those cases.</p>\n<p>Now we need to update the <code class=\"hljs\">content</code> method on <code class=\"hljs\">Post</code>. We want the value\nreturned from <code class=\"hljs\">content</code> to depend on the current state of the <code class=\"hljs\">Post</code>, so we’re\ngoing to have the <code class=\"hljs\">Post</code> delegate to a <code class=\"hljs\">content</code> method defined on its <code class=\"hljs\">state</code>,\nas shown in Listing 17-17:</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Post</span></span> {\n</span><span class=\"boring\">    state: <span class=\"hljs-built_in\">Option</span>&lt;<span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> State&gt;&gt;,\n</span><span class=\"boring\">    content: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">impl</span> Post {\n    <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>() -&gt; Post {\n</span><span class=\"boring\">        Post {\n</span><span class=\"boring\">            state: <span class=\"hljs-literal\">Some</span>(<span class=\"hljs-built_in\">Box</span>::new(Draft {})),\n</span><span class=\"boring\">            content: <span class=\"hljs-built_in\">String</span>::new(),\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">add_text</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, text: &amp;<span class=\"hljs-built_in\">str</span>) {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">self</span>.content.push_str(text);\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span>    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">content</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; &amp;<span class=\"hljs-built_in\">str</span> {\n        <span class=\"hljs-keyword\">self</span>.state.as_ref().unwrap().content(<span class=\"hljs-keyword\">self</span>)\n    }\n    <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">request_review</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-literal\">Some</span>(s) = <span class=\"hljs-keyword\">self</span>.state.take() {\n</span><span class=\"boring\">            <span class=\"hljs-keyword\">self</span>.state = <span class=\"hljs-literal\">Some</span>(s.request_review())\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">approve</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-literal\">Some</span>(s) = <span class=\"hljs-keyword\">self</span>.state.take() {\n</span><span class=\"boring\">            <span class=\"hljs-keyword\">self</span>.state = <span class=\"hljs-literal\">Some</span>(s.approve())\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span>}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">State</span></span> {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">request_review</span></span>(<span class=\"hljs-keyword\">self</span>: <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">Self</span>&gt;) -&gt; <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> State&gt;;\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">approve</span></span>(<span class=\"hljs-keyword\">self</span>: <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">Self</span>&gt;) -&gt; <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> State&gt;;\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Draft</span></span> {}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> State <span class=\"hljs-keyword\">for</span> Draft {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">request_review</span></span>(<span class=\"hljs-keyword\">self</span>: <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">Self</span>&gt;) -&gt; <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> State&gt; {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">Box</span>::new(PendingReview {})\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">approve</span></span>(<span class=\"hljs-keyword\">self</span>: <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">Self</span>&gt;) -&gt; <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> State&gt; {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">self</span>\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">PendingReview</span></span> {}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> State <span class=\"hljs-keyword\">for</span> PendingReview {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">request_review</span></span>(<span class=\"hljs-keyword\">self</span>: <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">Self</span>&gt;) -&gt; <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> State&gt; {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">self</span>\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">approve</span></span>(<span class=\"hljs-keyword\">self</span>: <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">Self</span>&gt;) -&gt; <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> State&gt; {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">Box</span>::new(Published {})\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Published</span></span> {}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> State <span class=\"hljs-keyword\">for</span> Published {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">request_review</span></span>(<span class=\"hljs-keyword\">self</span>: <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">Self</span>&gt;) -&gt; <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> State&gt; {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">self</span>\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">approve</span></span>(<span class=\"hljs-keyword\">self</span>: <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">Self</span>&gt;) -&gt; <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> State&gt; {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">self</span>\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}</span></code></pre>\n<p><span class=\"caption\">Listing 17-17: Updating the <code class=\"hljs\">content</code> method on <code class=\"hljs\">Post</code> to\ndelegate to a <code class=\"hljs\">content</code> method on <code class=\"hljs\">State</code></span></p>\n<p>Because the goal is to keep all these rules inside the structs that implement\n<code class=\"hljs\">State</code>, we call a <code class=\"hljs\">content</code> method on the value in <code class=\"hljs\">state</code> and pass the post\ninstance (that is, <code class=\"hljs\">self</code>) as an argument. Then we return the value that’s\nreturned from using the <code class=\"hljs\">content</code> method on the <code class=\"hljs\">state</code> value.</p>\n<p>We call the <code class=\"hljs\">as_ref</code> method on the <code class=\"hljs\">Option</code> because we want a reference to the\nvalue inside the <code class=\"hljs\">Option</code> rather than ownership of the value. Because <code class=\"hljs\">state</code>\nis an <code class=\"hljs\">Option&lt;Box&lt;dyn State&gt;&gt;</code>, when we call <code class=\"hljs\">as_ref</code>, an <code class=\"hljs\">Option&lt;&amp;Box&lt;dyn State&gt;&gt;</code> is returned. If we didn’t call <code class=\"hljs\">as_ref</code>, we would get an error because\nwe can’t move <code class=\"hljs\">state</code> out of the borrowed <code class=\"hljs\">&amp;self</code> of the function parameter.</p>\n<p>We then call the <code class=\"hljs\">unwrap</code> method, which we know will never panic, because we\nknow the methods on <code class=\"hljs\">Post</code> ensure that <code class=\"hljs\">state</code> will always contain a <code class=\"hljs\">Some</code>\nvalue when those methods are done. This is one of the cases we talked about in\nthe <a href=\"ch09-03-to-panic-or-not-to-panic.html#cases-in-which-you-have-more-information-than-the-compiler\">“Cases In Which You Have More Information Than the\nCompiler”</a><!-- ignore --> section of Chapter 9 when we\nknow that a <code class=\"hljs\">None</code> value is never possible, even though the compiler isn’t able\nto understand that.</p>\n<p>At this point, when we call <code class=\"hljs\">content</code> on the <code class=\"hljs\">&amp;Box&lt;dyn State&gt;</code>, deref coercion\nwill take effect on the <code class=\"hljs\">&amp;</code> and the <code class=\"hljs\">Box</code> so the <code class=\"hljs\">content</code> method will\nultimately be called on the type that implements the <code class=\"hljs\">State</code> trait. That means\nwe need to add <code class=\"hljs\">content</code> to the <code class=\"hljs\">State</code> trait definition, and that is where\nwe’ll put the logic for what content to return depending on which state we\nhave, as shown in Listing 17-18:</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust noplayground hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Post</span></span> {\n</span><span class=\"boring\">    state: <span class=\"hljs-built_in\">Option</span>&lt;<span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> State&gt;&gt;,\n</span><span class=\"boring\">    content: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> Post {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>() -&gt; Post {\n</span><span class=\"boring\">        Post {\n</span><span class=\"boring\">            state: <span class=\"hljs-literal\">Some</span>(<span class=\"hljs-built_in\">Box</span>::new(Draft {})),\n</span><span class=\"boring\">            content: <span class=\"hljs-built_in\">String</span>::new(),\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">add_text</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, text: &amp;<span class=\"hljs-built_in\">str</span>) {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">self</span>.content.push_str(text);\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">content</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; &amp;<span class=\"hljs-built_in\">str</span> {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">self</span>.state.as_ref().unwrap().content(<span class=\"hljs-keyword\">self</span>)\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">request_review</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-literal\">Some</span>(s) = <span class=\"hljs-keyword\">self</span>.state.take() {\n</span><span class=\"boring\">            <span class=\"hljs-keyword\">self</span>.state = <span class=\"hljs-literal\">Some</span>(s.request_review())\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">approve</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-literal\">Some</span>(s) = <span class=\"hljs-keyword\">self</span>.state.take() {\n</span><span class=\"boring\">            <span class=\"hljs-keyword\">self</span>.state = <span class=\"hljs-literal\">Some</span>(s.approve())\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">State</span></span> {\n    <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">request_review</span></span>(<span class=\"hljs-keyword\">self</span>: <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">Self</span>&gt;) -&gt; <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> State&gt;;\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">approve</span></span>(<span class=\"hljs-keyword\">self</span>: <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">Self</span>&gt;) -&gt; <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> State&gt;;\n</span><span class=\"boring\">\n</span>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">content</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(&amp;<span class=\"hljs-keyword\">self</span>, post: &amp;<span class=\"hljs-symbol\">'a</span> Post) -&gt; &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span> {\n        <span class=\"hljs-string\">\"\"</span>\n    }\n}\n\n<span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Draft</span></span> {}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> State <span class=\"hljs-keyword\">for</span> Draft {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">request_review</span></span>(<span class=\"hljs-keyword\">self</span>: <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">Self</span>&gt;) -&gt; <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> State&gt; {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">Box</span>::new(PendingReview {})\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">approve</span></span>(<span class=\"hljs-keyword\">self</span>: <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">Self</span>&gt;) -&gt; <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> State&gt; {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">self</span>\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">PendingReview</span></span> {}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> State <span class=\"hljs-keyword\">for</span> PendingReview {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">request_review</span></span>(<span class=\"hljs-keyword\">self</span>: <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">Self</span>&gt;) -&gt; <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> State&gt; {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">self</span>\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">approve</span></span>(<span class=\"hljs-keyword\">self</span>: <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">Self</span>&gt;) -&gt; <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> State&gt; {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">Box</span>::new(Published {})\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Published</span></span> {}\n\n<span class=\"hljs-keyword\">impl</span> State <span class=\"hljs-keyword\">for</span> Published {\n    <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">request_review</span></span>(<span class=\"hljs-keyword\">self</span>: <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">Self</span>&gt;) -&gt; <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> State&gt; {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">self</span>\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">approve</span></span>(<span class=\"hljs-keyword\">self</span>: <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">Self</span>&gt;) -&gt; <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> State&gt; {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">self</span>\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">content</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(&amp;<span class=\"hljs-keyword\">self</span>, post: &amp;<span class=\"hljs-symbol\">'a</span> Post) -&gt; &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span> {\n        &amp;post.content\n    }\n}</code></pre>\n<p><span class=\"caption\">Listing 17-18: Adding the <code class=\"hljs\">content</code> method to the <code class=\"hljs\">State</code>\ntrait</span></p>\n<p>We add a default implementation for the <code class=\"hljs\">content</code> method that returns an empty\nstring slice. That means we don’t need to implement <code class=\"hljs\">content</code> on the <code class=\"hljs\">Draft</code>\nand <code class=\"hljs\">PendingReview</code> structs. The <code class=\"hljs\">Published</code> struct will override the <code class=\"hljs\">content</code>\nmethod and return the value in <code class=\"hljs\">post.content</code>.</p>\n<p>Note that we need lifetime annotations on this method, as we discussed in\nChapter 10. We’re taking a reference to a <code class=\"hljs\">post</code> as an argument and returning a\nreference to part of that <code class=\"hljs\">post</code>, so the lifetime of the returned reference is\nrelated to the lifetime of the <code class=\"hljs\">post</code> argument.</p>\n<p>And we’re done—all of Listing 17-11 now works! We’ve implemented the state\npattern with the rules of the blog post workflow. The logic related to the\nrules lives in the state objects rather than being scattered throughout <code class=\"hljs\">Post</code>.</p>\n<section class=\"note\" aria-role=\"note\">\n<h4 id=\"why-not-an-enum\"><a class=\"header\" href=\"#why-not-an-enum\">Why Not An Enum?</a></h4>\n<p>You may have been wondering why we didn’t use an <code class=\"hljs\">enum</code> with the different\npossible post states as variants. That’s certainly a possible solution, try\nit and compare the end results to see which you prefer! One disadvantage of\nusing an enum is every place that checks the value of the enum will need a\n<code class=\"hljs\">match</code> expression or similar to handle every possible variant. This could\nget more repetitive than this trait object solution.</p>\n</section>\n<h3 id=\"trade-offs-of-the-state-pattern\"><a class=\"header\" href=\"#trade-offs-of-the-state-pattern\">Trade-offs of the State Pattern</a></h3>\n<p>We’ve shown that Rust is capable of implementing the object-oriented state\npattern to encapsulate the different kinds of behavior a post should have in\neach state. The methods on <code class=\"hljs\">Post</code> know nothing about the various behaviors. The\nway we organized the code, we have to look in only one place to know the\ndifferent ways a published post can behave: the implementation of the <code class=\"hljs\">State</code>\ntrait on the <code class=\"hljs\">Published</code> struct.</p>\n<p>If we were to create an alternative implementation that didn’t use the state\npattern, we might instead use <code class=\"hljs\">match</code> expressions in the methods on <code class=\"hljs\">Post</code> or\neven in the <code class=\"hljs\">main</code> code that checks the state of the post and changes behavior\nin those places. That would mean we would have to look in several places to\nunderstand all the implications of a post being in the published state! This\nwould only increase the more states we added: each of those <code class=\"hljs\">match</code> expressions\nwould need another arm.</p>\n<p>With the state pattern, the <code class=\"hljs\">Post</code> methods and the places we use <code class=\"hljs\">Post</code> don’t\nneed <code class=\"hljs\">match</code> expressions, and to add a new state, we would only need to add a\nnew struct and implement the trait methods on that one struct.</p>\n<p>The implementation using the state pattern is easy to extend to add more\nfunctionality. To see the simplicity of maintaining code that uses the state\npattern, try a few of these suggestions:</p>\n<ul>\n<li>Add a <code class=\"hljs\">reject</code> method that changes the post’s state from <code class=\"hljs\">PendingReview</code> back\nto <code class=\"hljs\">Draft</code>.</li>\n<li>Require two calls to <code class=\"hljs\">approve</code> before the state can be changed to <code class=\"hljs\">Published</code>.</li>\n<li>Allow users to add text content only when a post is in the <code class=\"hljs\">Draft</code> state.\nHint: have the state object responsible for what might change about the\ncontent but not responsible for modifying the <code class=\"hljs\">Post</code>.</li>\n</ul>\n<p>One downside of the state pattern is that, because the states implement the\ntransitions between states, some of the states are coupled to each other. If we\nadd another state between <code class=\"hljs\">PendingReview</code> and <code class=\"hljs\">Published</code>, such as <code class=\"hljs\">Scheduled</code>,\nwe would have to change the code in <code class=\"hljs\">PendingReview</code> to transition to\n<code class=\"hljs\">Scheduled</code> instead. It would be less work if <code class=\"hljs\">PendingReview</code> didn’t need to\nchange with the addition of a new state, but that would mean switching to\nanother design pattern.</p>\n<p>Another downside is that we’ve duplicated some logic. To eliminate some of the\nduplication, we might try to make default implementations for the\n<code class=\"hljs\">request_review</code> and <code class=\"hljs\">approve</code> methods on the <code class=\"hljs\">State</code> trait that return <code class=\"hljs\">self</code>;\nhowever, this would violate object safety, because the trait doesn’t know what\nthe concrete <code class=\"hljs\">self</code> will be exactly. We want to be able to use <code class=\"hljs\">State</code> as a\ntrait object, so we need its methods to be object safe.</p>\n<p>Other duplication includes the similar implementations of the <code class=\"hljs\">request_review</code>\nand <code class=\"hljs\">approve</code> methods on <code class=\"hljs\">Post</code>. Both methods delegate to the implementation of\nthe same method on the value in the <code class=\"hljs\">state</code> field of <code class=\"hljs\">Option</code> and set the new\nvalue of the <code class=\"hljs\">state</code> field to the result. If we had a lot of methods on <code class=\"hljs\">Post</code>\nthat followed this pattern, we might consider defining a macro to eliminate the\nrepetition (see the <a href=\"ch19-06-macros.html#macros\">“Macros”</a><!-- ignore --> section in Chapter 19).</p>\n<p>By implementing the state pattern exactly as it’s defined for object-oriented\nlanguages, we’re not taking as full advantage of Rust’s strengths as we could.\nLet’s look at some changes we can make to the <code class=\"hljs\">blog</code> crate that can make\ninvalid states and transitions into compile time errors.</p>\n<h4 id=\"encoding-states-and-behavior-as-types\"><a class=\"header\" href=\"#encoding-states-and-behavior-as-types\">Encoding States and Behavior as Types</a></h4>\n<p>We’ll show you how to rethink the state pattern to get a different set of\ntrade-offs. Rather than encapsulating the states and transitions completely so\noutside code has no knowledge of them, we’ll encode the states into different\ntypes. Consequently, Rust’s type checking system will prevent attempts to use\ndraft posts where only published posts are allowed by issuing a compiler error.</p>\n<p>Let’s consider the first part of <code class=\"hljs\">main</code> in Listing 17-11:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> blog::Post;\n</span><span class=\"boring\">\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> post = Post::new();\n\n    post.add_text(<span class=\"hljs-string\">\"I ate a salad for lunch today\"</span>);\n    <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-string\">\"\"</span>, post.content());\n<span class=\"boring\">\n</span><span class=\"boring\">    post.request_review();\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-string\">\"\"</span>, post.content());\n</span><span class=\"boring\">\n</span><span class=\"boring\">    post.approve();\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-string\">\"I ate a salad for lunch today\"</span>, post.content());\n</span>}</code></pre>\n<p>We still enable the creation of new posts in the draft state using <code class=\"hljs\">Post::new</code>\nand the ability to add text to the post’s content. But instead of having a\n<code class=\"hljs\">content</code> method on a draft post that returns an empty string, we’ll make it so\ndraft posts don’t have the <code class=\"hljs\">content</code> method at all. That way, if we try to get\na draft post’s content, we’ll get a compiler error telling us the method\ndoesn’t exist. As a result, it will be impossible for us to accidentally\ndisplay draft post content in production, because that code won’t even compile.\nListing 17-19 shows the definition of a <code class=\"hljs\">Post</code> struct and a <code class=\"hljs\">DraftPost</code> struct,\nas well as methods on each:</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust noplayground hljs\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Post</span></span> {\n    content: <span class=\"hljs-built_in\">String</span>,\n}\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">DraftPost</span></span> {\n    content: <span class=\"hljs-built_in\">String</span>,\n}\n\n<span class=\"hljs-keyword\">impl</span> Post {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>() -&gt; DraftPost {\n        DraftPost {\n            content: <span class=\"hljs-built_in\">String</span>::new(),\n        }\n    }\n\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">content</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; &amp;<span class=\"hljs-built_in\">str</span> {\n        &amp;<span class=\"hljs-keyword\">self</span>.content\n    }\n}\n\n<span class=\"hljs-keyword\">impl</span> DraftPost {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">add_text</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, text: &amp;<span class=\"hljs-built_in\">str</span>) {\n        <span class=\"hljs-keyword\">self</span>.content.push_str(text);\n    }\n}</code></pre>\n<p><span class=\"caption\">Listing 17-19: A <code class=\"hljs\">Post</code> with a <code class=\"hljs\">content</code> method and a\n<code class=\"hljs\">DraftPost</code> without a <code class=\"hljs\">content</code> method</span></p>\n<p>Both the <code class=\"hljs\">Post</code> and <code class=\"hljs\">DraftPost</code> structs have a private <code class=\"hljs\">content</code> field that\nstores the blog post text. The structs no longer have the <code class=\"hljs\">state</code> field because\nwe’re moving the encoding of the state to the types of the structs. The <code class=\"hljs\">Post</code>\nstruct will represent a published post, and it has a <code class=\"hljs\">content</code> method that\nreturns the <code class=\"hljs\">content</code>.</p>\n<p>We still have a <code class=\"hljs\">Post::new</code> function, but instead of returning an instance of\n<code class=\"hljs\">Post</code>, it returns an instance of <code class=\"hljs\">DraftPost</code>. Because <code class=\"hljs\">content</code> is private\nand there aren’t any functions that return <code class=\"hljs\">Post</code>, it’s not possible to create\nan instance of <code class=\"hljs\">Post</code> right now.</p>\n<p>The <code class=\"hljs\">DraftPost</code> struct has an <code class=\"hljs\">add_text</code> method, so we can add text to\n<code class=\"hljs\">content</code> as before, but note that <code class=\"hljs\">DraftPost</code> does not have a <code class=\"hljs\">content</code> method\ndefined! So now the program ensures all posts start as draft posts, and draft\nposts don’t have their content available for display. Any attempt to get around\nthese constraints will result in a compiler error.</p>\n<h4 id=\"implementing-transitions-as-transformations-into-different-types\"><a class=\"header\" href=\"#implementing-transitions-as-transformations-into-different-types\">Implementing Transitions as Transformations into Different Types</a></h4>\n<p>So how do we get a published post? We want to enforce the rule that a draft\npost has to be reviewed and approved before it can be published. A post in the\npending review state should still not display any content. Let’s implement\nthese constraints by adding another struct, <code class=\"hljs\">PendingReviewPost</code>, defining the\n<code class=\"hljs\">request_review</code> method on <code class=\"hljs\">DraftPost</code> to return a <code class=\"hljs\">PendingReviewPost</code>, and\ndefining an <code class=\"hljs\">approve</code> method on <code class=\"hljs\">PendingReviewPost</code> to return a <code class=\"hljs\">Post</code>, as\nshown in Listing 17-20:</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust noplayground hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Post</span></span> {\n</span><span class=\"boring\">    content: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">DraftPost</span></span> {\n</span><span class=\"boring\">    content: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> Post {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>() -&gt; DraftPost {\n</span><span class=\"boring\">        DraftPost {\n</span><span class=\"boring\">            content: <span class=\"hljs-built_in\">String</span>::new(),\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">content</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; &amp;<span class=\"hljs-built_in\">str</span> {\n</span><span class=\"boring\">        &amp;<span class=\"hljs-keyword\">self</span>.content\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">impl</span> DraftPost {\n    <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">add_text</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, text: &amp;<span class=\"hljs-built_in\">str</span>) {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">self</span>.content.push_str(text);\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span>    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">request_review</span></span>(<span class=\"hljs-keyword\">self</span>) -&gt; PendingReviewPost {\n        PendingReviewPost {\n            content: <span class=\"hljs-keyword\">self</span>.content,\n        }\n    }\n}\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">PendingReviewPost</span></span> {\n    content: <span class=\"hljs-built_in\">String</span>,\n}\n\n<span class=\"hljs-keyword\">impl</span> PendingReviewPost {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">approve</span></span>(<span class=\"hljs-keyword\">self</span>) -&gt; Post {\n        Post {\n            content: <span class=\"hljs-keyword\">self</span>.content,\n        }\n    }\n}</code></pre>\n<p><span class=\"caption\">Listing 17-20: A <code class=\"hljs\">PendingReviewPost</code> that gets created by\ncalling <code class=\"hljs\">request_review</code> on <code class=\"hljs\">DraftPost</code> and an <code class=\"hljs\">approve</code> method that turns a\n<code class=\"hljs\">PendingReviewPost</code> into a published <code class=\"hljs\">Post</code></span></p>\n<p>The <code class=\"hljs\">request_review</code> and <code class=\"hljs\">approve</code> methods take ownership of <code class=\"hljs\">self</code>, thus\nconsuming the <code class=\"hljs\">DraftPost</code> and <code class=\"hljs\">PendingReviewPost</code> instances and transforming\nthem into a <code class=\"hljs\">PendingReviewPost</code> and a published <code class=\"hljs\">Post</code>, respectively. This way,\nwe won’t have any lingering <code class=\"hljs\">DraftPost</code> instances after we’ve called\n<code class=\"hljs\">request_review</code> on them, and so forth. The <code class=\"hljs\">PendingReviewPost</code> struct doesn’t\nhave a <code class=\"hljs\">content</code> method defined on it, so attempting to read its content\nresults in a compiler error, as with <code class=\"hljs\">DraftPost</code>. Because the only way to get a\npublished <code class=\"hljs\">Post</code> instance that does have a <code class=\"hljs\">content</code> method defined is to call\nthe <code class=\"hljs\">approve</code> method on a <code class=\"hljs\">PendingReviewPost</code>, and the only way to get a\n<code class=\"hljs\">PendingReviewPost</code> is to call the <code class=\"hljs\">request_review</code> method on a <code class=\"hljs\">DraftPost</code>,\nwe’ve now encoded the blog post workflow into the type system.</p>\n<p>But we also have to make some small changes to <code class=\"hljs\">main</code>. The <code class=\"hljs\">request_review</code> and\n<code class=\"hljs\">approve</code> methods return new instances rather than modifying the struct they’re\ncalled on, so we need to add more <code class=\"hljs\">let post =</code> shadowing assignments to save\nthe returned instances. We also can’t have the assertions about the draft and\npending review posts’ contents be empty strings, nor do we need them: we can’t\ncompile code that tries to use the content of posts in those states any longer.\nThe updated code in <code class=\"hljs\">main</code> is shown in Listing 17-21:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">use</span> blog::Post;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> post = Post::new();\n\n    post.add_text(<span class=\"hljs-string\">\"I ate a salad for lunch today\"</span>);\n\n    <span class=\"hljs-keyword\">let</span> post = post.request_review();\n\n    <span class=\"hljs-keyword\">let</span> post = post.approve();\n\n    <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-string\">\"I ate a salad for lunch today\"</span>, post.content());\n}</code></pre>\n<p><span class=\"caption\">Listing 17-21: Modifications to <code class=\"hljs\">main</code> to use the new\nimplementation of the blog post workflow</span></p>\n<p>The changes we needed to make to <code class=\"hljs\">main</code> to reassign <code class=\"hljs\">post</code> mean that this\nimplementation doesn’t quite follow the object-oriented state pattern anymore:\nthe transformations between the states are no longer encapsulated entirely\nwithin the <code class=\"hljs\">Post</code> implementation. However, our gain is that invalid states are\nnow impossible because of the type system and the type checking that happens at\ncompile time! This ensures that certain bugs, such as display of the content of\nan unpublished post, will be discovered before they make it to production.</p>\n<p>Try the tasks suggested at the start of this section on the <code class=\"hljs\">blog</code> crate as it\nis after Listing 17-21 to see what you think about the design of this version\nof the code. Note that some of the tasks might be completed already in this\ndesign.</p>\n<p>We’ve seen that even though Rust is capable of implementing object-oriented\ndesign patterns, other patterns, such as encoding state into the type system,\nare also available in Rust. These patterns have different trade-offs. Although\nyou might be very familiar with object-oriented patterns, rethinking the\nproblem to take advantage of Rust’s features can provide benefits, such as\npreventing some bugs at compile time. Object-oriented patterns won’t always be\nthe best solution in Rust due to certain features, like ownership, that\nobject-oriented languages don’t have.</p>\n<h2 id=\"summary\"><a class=\"header\" href=\"#summary\">Summary</a></h2>\n<p>No matter whether or not you think Rust is an object-oriented language after\nreading this chapter, you now know that you can use trait objects to get some\nobject-oriented features in Rust. Dynamic dispatch can give your code some\nflexibility in exchange for a bit of runtime performance. You can use this\nflexibility to implement object-oriented patterns that can help your code’s\nmaintainability. Rust also has other features, like ownership, that\nobject-oriented languages don’t have. An object-oriented pattern won’t always\nbe the best way to take advantage of Rust’s strengths, but is an available\noption.</p>\n<p>Next, we’ll look at patterns, which are another of Rust’s features that enable\nlots of flexibility. We’ve looked at them briefly throughout the book but\nhaven’t seen their full capability yet. Let’s go!</p>\n\n                    </main>\n\n                    <nav class=\"nav-wrapper\" aria-label=\"Page navigation\">\n                        <!-- Mobile navigation buttons -->\n                            <a rel=\"prev\" href=\"ch17-02-trait-objects.html\" class=\"mobile-nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                                <i class=\"fa fa-angle-left\"></i>\n                            </a>\n\n                            <a rel=\"next prefetch\" href=\"ch18-00-patterns.html\" class=\"mobile-nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                                <i class=\"fa fa-angle-right\"></i>\n                            </a>\n\n                        <div style=\"clear: both\"></div>\n                    </nav>\n                </div>\n            </div>\n\n            <nav class=\"nav-wide-wrapper\" aria-label=\"Page navigation\">\n                    <a rel=\"prev\" href=\"ch17-02-trait-objects.html\" class=\"nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                        <i class=\"fa fa-angle-left\"></i>\n                    </a>\n\n                    <a rel=\"next prefetch\" href=\"ch18-00-patterns.html\" class=\"nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                        <i class=\"fa fa-angle-right\"></i>\n                    </a>\n            </nav>\n\n        </div>\n\n\n\n\n        <script>\n            window.playground_copyable = true;\n        </script>\n\n\n        <script src=\"elasticlunr.min.js\"></script>\n        <script src=\"mark.min.js\"></script>\n        <script src=\"searcher.js\"></script>\n\n        <script src=\"clipboard.min.js\"></script>\n        <script src=\"highlight.js\"></script>\n        <script src=\"book.js\"></script>\n\n        <!-- Custom JS scripts -->\n        <script src=\"ferris.js\"></script>\n\n\n    </div>\n    \n\n</body></html>",
	"crawlDate": "2024-07-28T05:08:32.387Z"
}