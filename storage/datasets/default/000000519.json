{
	"title": "SliceIndex in std::slice - Rust",
	"url": "https://doc.rust-lang.org/stable/std/slice/trait.SliceIndex.html",
	"markdown": "# SliceIndex in std::slice - Rust\n\n```\npub unsafe trait SliceIndex<T>: Sealedwhere\n    T: ?Sized,{\n    type Output: ?Sized;\n\n    // Required methods\n    fn get(self, slice: &T) -> Option<&Self::Output>;\n    fn get_mut(self, slice: &mut T) -> Option<&mut Self::Output>;\n    unsafe fn get_unchecked(self, slice: *const T) -> *const Self::Output;\n    unsafe fn get_unchecked_mut(self, slice: *mut T) -> *mut Self::Output;\n    fn index(self, slice: &T) -> &Self::Output;\n    fn index_mut(self, slice: &mut T) -> &mut Self::Output;\n}\n```\n\nExpand description\n\nA helper trait used for indexing operations.\n\nImplementations of this trait have to promise that if the argument to `get_unchecked(_mut)` is a safe reference, then so is the result.\n\n1.28.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/index.rs.html#154)\n\nThe output type returned by methods.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/slice/index.rs.html#159)\n\n🔬This is a nightly-only experimental API. (`slice_index_methods`)\n\nReturns a shared reference to the output at this location, if in bounds.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/slice/index.rs.html#164)\n\n🔬This is a nightly-only experimental API. (`slice_index_methods`)\n\nReturns a mutable reference to the output at this location, if in bounds.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/slice/index.rs.html#173)\n\n🔬This is a nightly-only experimental API. (`slice_index_methods`)\n\nReturns a pointer to the output at this location, without performing any bounds checking. Calling this method with an out-of-bounds index or a dangling `slice` pointer is _[undefined behavior](https://doc.rust-lang.org/reference/behavior-considered-undefined.html)_ even if the resulting pointer is not used.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/slice/index.rs.html#182)\n\n🔬This is a nightly-only experimental API. (`slice_index_methods`)\n\nReturns a mutable pointer to the output at this location, without performing any bounds checking. Calling this method with an out-of-bounds index or a dangling `slice` pointer is _[undefined behavior](https://doc.rust-lang.org/reference/behavior-considered-undefined.html)_ even if the resulting pointer is not used.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/slice/index.rs.html#188)\n\n🔬This is a nightly-only experimental API. (`slice_index_methods`)\n\nReturns a shared reference to the output at this location, panicking if out of bounds.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/slice/index.rs.html#194)\n\n🔬This is a nightly-only experimental API. (`slice_index_methods`)\n\nReturns a mutable reference to the output at this location, panicking if out of bounds.\n\n1.73.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#278)[§](#impl-SliceIndex%3Cstr%3E-for-(Bound%3Cusize%3E,+Bound%3Cusize%3E))\n\nImplements substring slicing for arbitrary bounds.\n\nReturns a slice of the given string bounded by the byte indices provided by each bound.\n\nThis operation is _O_(1).\n\n#### [§](#panics)Panics\n\nPanics if `begin` or `end` (if it exists and once adjusted for inclusion/exclusion) does not point to the starting byte offset of a character (as defined by `is_char_boundary`), if `begin > end`, or if `end > len`.\n\n[§](#associatedtype.Output-1)\n\n1.20.0 (const: unstable) · [source](https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#163)[§](#impl-SliceIndex%3Cstr%3E-for-Range%3Cusize%3E)\n\nImplements substring slicing with syntax `&self[begin .. end]` or `&mut self[begin .. end]`.\n\nReturns a slice of the given string from the byte range \\[`begin`, `end`).\n\nThis operation is _O_(1).\n\nPrior to 1.20.0, these indexing operations were still supported by direct implementation of `Index` and `IndexMut`.\n\n#### [§](#panics-1)Panics\n\nPanics if `begin` or `end` does not point to the starting byte offset of a character (as defined by `is_char_boundary`), if `begin > end`, or if `end > len`.\n\n#### [§](#examples)Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert_eq!(&s[0 .. 1], \"L\");\n\nassert_eq!(&s[1 .. 9], \"öwe 老\");\n\n// these will panic:\n// byte 2 lies within `ö`:\n// &s[2 ..3];\n\n// byte 8 lies within `老`\n// &s[1 .. 8];\n\n// byte 100 is outside the string\n// &s[3 .. 100];\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s+=+%22L%C3%B6we+%E8%80%81%E8%99%8E+L%C3%A9opard%22;%0A++++assert_eq!(%26s%5B0+..+1%5D,+%22L%22);%0A++++%0A++++assert_eq!(%26s%5B1+..+9%5D,+%22%C3%B6we+%E8%80%81%22);%0A++++%0A++++//+these+will+panic:%0A++++//+byte+2+lies+within+%60%C3%B6%60:%0A++++//+%26s%5B2+..3%5D;%0A++++%0A++++//+byte+8+lies+within+%60%E8%80%81%60%0A++++//+%26s%5B1+..+8%5D;%0A++++%0A++++//+byte+100+is+outside+the+string%0A++++//+%26s%5B3+..+100%5D;%0A%7D&edition=2021)\n\n[§](#associatedtype.Output-2)\n\n1.20.0 (const: unstable) · [source](https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#402)[§](#impl-SliceIndex%3Cstr%3E-for-RangeFrom%3Cusize%3E)\n\nImplements substring slicing with syntax `&self[begin ..]` or `&mut self[begin ..]`.\n\nReturns a slice of the given string from the byte range \\[`begin`, `len`). Equivalent to `&self[begin .. len]` or `&mut self[begin .. len]`.\n\nThis operation is _O_(1).\n\nPrior to 1.20.0, these indexing operations were still supported by direct implementation of `Index` and `IndexMut`.\n\n#### [§](#panics-2)Panics\n\nPanics if `begin` does not point to the starting byte offset of a character (as defined by `is_char_boundary`), or if `begin > len`.\n\n[§](#associatedtype.Output-3)\n\n1.20.0 (const: unstable) · [source](https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#98)[§](#impl-SliceIndex%3Cstr%3E-for-RangeFull)\n\nImplements substring slicing with syntax `&self[..]` or `&mut self[..]`.\n\nReturns a slice of the whole string, i.e., returns `&self` or `&mut self`. Equivalent to `&self[0 .. len]` or `&mut self[0 .. len]`. Unlike other indexing operations, this can never panic.\n\nThis operation is _O_(1).\n\nPrior to 1.20.0, these indexing operations were still supported by direct implementation of `Index` and `IndexMut`.\n\nEquivalent to `&self[0 .. len]` or `&mut self[0 .. len]`.\n\n[§](#associatedtype.Output-4)\n\n1.26.0 (const: unstable) · [source](https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#474)[§](#impl-SliceIndex%3Cstr%3E-for-RangeInclusive%3Cusize%3E)\n\nImplements substring slicing with syntax `&self[begin ..= end]` or `&mut self[begin ..= end]`.\n\nReturns a slice of the given string from the byte range \\[`begin`, `end`\\]. Equivalent to `&self [begin .. end + 1]` or `&mut self[begin .. end + 1]`, except if `end` has the maximum value for `usize`.\n\nThis operation is _O_(1).\n\n#### [§](#panics-3)Panics\n\nPanics if `begin` does not point to the starting byte offset of a character (as defined by `is_char_boundary`), if `end` does not point to the ending byte offset of a character (`end + 1` is either a starting byte offset or equal to `len`), if `begin > end`, or if `end >= len`.\n\n[§](#associatedtype.Output-5)\n\n1.20.0 (const: unstable) · [source](https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#333)[§](#impl-SliceIndex%3Cstr%3E-for-RangeTo%3Cusize%3E)\n\nImplements substring slicing with syntax `&self[.. end]` or `&mut self[.. end]`.\n\nReturns a slice of the given string from the byte range \\[0, `end`). Equivalent to `&self[0 .. end]` or `&mut self[0 .. end]`.\n\nThis operation is _O_(1).\n\nPrior to 1.20.0, these indexing operations were still supported by direct implementation of `Index` and `IndexMut`.\n\n#### [§](#panics-4)Panics\n\nPanics if `end` does not point to the starting byte offset of a character (as defined by `is_char_boundary`), or if `end > len`.\n\n[§](#associatedtype.Output-6)\n\n1.26.0 (const: unstable) · [source](https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#526)[§](#impl-SliceIndex%3Cstr%3E-for-RangeToInclusive%3Cusize%3E)\n\nImplements substring slicing with syntax `&self[..= end]` or `&mut self[..= end]`.\n\nReturns a slice of the given string from the byte range \\[0, `end`\\]. Equivalent to `&self [0 .. end + 1]`, except if `end` has the maximum value for `usize`.\n\nThis operation is _O_(1).\n\n#### [§](#panics-5)Panics\n\nPanics if `end` does not point to the ending byte offset of a character (`end + 1` is either a starting byte offset as defined by `is_char_boundary`, or equal to `len`), or if `end >= len`.\n\n[§](#associatedtype.Output-7)\n\n1.53.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/index.rs.html#854)[§](#impl-SliceIndex%3C%5BT%5D%3E-for-(Bound%3Cusize%3E,+Bound%3Cusize%3E))\n\n[§](#associatedtype.Output-8)\n\n1.15.0 (const: unstable) · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/index.rs.html#200)[§](#impl-SliceIndex%3C%5BT%5D%3E-for-usize)\n\nThe methods `index` and `index_mut` panic if the index is out of bounds.\n\n[§](#associatedtype.Output-9)\n\n1.15.0 (const: unstable) · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/index.rs.html#336)[§](#impl-SliceIndex%3C%5BT%5D%3E-for-Range%3Cusize%3E)\n\nThe methods `index` and `index_mut` panic if:\n\n-   the start of the range is greater than the end of the range or\n-   the end of the range is out of bounds.\n\n[§](#associatedtype.Output-10)\n\n1.15.0 (const: unstable) · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/index.rs.html#464)[§](#impl-SliceIndex%3C%5BT%5D%3E-for-RangeFrom%3Cusize%3E)\n\nThe methods `index` and `index_mut` panic if the start of the range is out of bounds.\n\n[§](#associatedtype.Output-11)\n\n1.15.0 (const: unstable) · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/index.rs.html#510)[§](#impl-SliceIndex%3C%5BT%5D%3E-for-RangeFull)\n\n[§](#associatedtype.Output-12)\n\n1.26.0 (const: unstable) · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/index.rs.html#550)[§](#impl-SliceIndex%3C%5BT%5D%3E-for-RangeInclusive%3Cusize%3E)\n\nThe methods `index` and `index_mut` panic if:\n\n-   the end of the range is `usize::MAX` or\n-   the start of the range is greater than the end of the range or\n-   the end of the range is out of bounds.\n\n[§](#associatedtype.Output-13)\n\n1.15.0 (const: unstable) · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/index.rs.html#425)[§](#impl-SliceIndex%3C%5BT%5D%3E-for-RangeTo%3Cusize%3E)\n\nThe methods `index` and `index_mut` panic if the end of the range is out of bounds.\n\n[§](#associatedtype.Output-14)\n\n1.26.0 (const: unstable) · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/index.rs.html#595)[§](#impl-SliceIndex%3C%5BT%5D%3E-for-RangeToInclusive%3Cusize%3E)\n\nThe methods `index` and `index_mut` panic if the end of the range is out of bounds.\n\n[§](#associatedtype.Output-15)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"A helper trait used for indexing operations.\"><title>SliceIndex in std::slice - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc trait\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">SliceIndex</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">SliceIndex</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#required-associated-types\">Required Associated Types</a></h3><ul class=\"block\"><li><a href=\"#associatedtype.Output\">Output</a></li></ul><h3><a href=\"#required-methods\">Required Methods</a></h3><ul class=\"block\"><li><a href=\"#tymethod.get\">get</a></li><li><a href=\"#tymethod.get_mut\">get_mut</a></li><li><a href=\"#tymethod.get_unchecked\">get_unchecked</a></li><li><a href=\"#tymethod.get_unchecked_mut\">get_unchecked_mut</a></li><li><a href=\"#tymethod.index\">index</a></li><li><a href=\"#tymethod.index_mut\">index_mut</a></li></ul><h3><a href=\"#implementors\">Implementors</a></h3></section><h2><a href=\"index.html\">In std::slice</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.ArrayChunks.html\">ArrayChunks</a></li><li><a href=\"struct.ArrayChunksMut.html\">ArrayChunksMut</a></li><li><a href=\"struct.ArrayWindows.html\">ArrayWindows</a></li><li><a href=\"struct.ChunkBy.html\">ChunkBy</a></li><li><a href=\"struct.ChunkByMut.html\">ChunkByMut</a></li><li><a href=\"struct.Chunks.html\">Chunks</a></li><li><a href=\"struct.ChunksExact.html\">ChunksExact</a></li><li><a href=\"struct.ChunksExactMut.html\">ChunksExactMut</a></li><li><a href=\"struct.ChunksMut.html\">ChunksMut</a></li><li><a href=\"struct.EscapeAscii.html\">EscapeAscii</a></li><li><a href=\"struct.Iter.html\">Iter</a></li><li><a href=\"struct.IterMut.html\">IterMut</a></li><li><a href=\"struct.RChunks.html\">RChunks</a></li><li><a href=\"struct.RChunksExact.html\">RChunksExact</a></li><li><a href=\"struct.RChunksExactMut.html\">RChunksExactMut</a></li><li><a href=\"struct.RChunksMut.html\">RChunksMut</a></li><li><a href=\"struct.RSplit.html\">RSplit</a></li><li><a href=\"struct.RSplitMut.html\">RSplitMut</a></li><li><a href=\"struct.RSplitN.html\">RSplitN</a></li><li><a href=\"struct.RSplitNMut.html\">RSplitNMut</a></li><li><a href=\"struct.Split.html\">Split</a></li><li><a href=\"struct.SplitInclusive.html\">SplitInclusive</a></li><li><a href=\"struct.SplitInclusiveMut.html\">SplitInclusiveMut</a></li><li><a href=\"struct.SplitMut.html\">SplitMut</a></li><li><a href=\"struct.SplitN.html\">SplitN</a></li><li><a href=\"struct.SplitNMut.html\">SplitNMut</a></li><li><a href=\"struct.Windows.html\">Windows</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.Concat.html\">Concat</a></li><li><a href=\"trait.Join.html\">Join</a></li><li><a href=\"trait.SliceIndex.html\">SliceIndex</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.from_mut.html\">from_mut</a></li><li><a href=\"fn.from_mut_ptr_range.html\">from_mut_ptr_range</a></li><li><a href=\"fn.from_ptr_range.html\">from_ptr_range</a></li><li><a href=\"fn.from_raw_parts.html\">from_raw_parts</a></li><li><a href=\"fn.from_raw_parts_mut.html\">from_raw_parts_mut</a></li><li><a href=\"fn.from_ref.html\">from_ref</a></li><li><a href=\"fn.range.html\">range</a></li><li><a href=\"fn.try_range.html\">try_range</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Trait <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">slice</a>::<wbr><a class=\"trait\" href=\"#\">SliceIndex</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/index.rs.html#151\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub unsafe trait SliceIndex&lt;T&gt;: Sealed<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div>{\n    type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a>: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>;\n\n    // Required methods\n    fn <a href=\"#tymethod.get\" class=\"fn\">get</a>(self, slice: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;Self::<a class=\"associatedtype\" href=\"trait.SliceIndex.html#associatedtype.Output\" title=\"type std::slice::SliceIndex::Output\">Output</a>&gt;;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.get_mut\" class=\"fn\">get_mut</a>(self, slice: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;mut Self::<a class=\"associatedtype\" href=\"trait.SliceIndex.html#associatedtype.Output\" title=\"type std::slice::SliceIndex::Output\">Output</a>&gt;;\n<span class=\"item-spacer\"></span>    unsafe fn <a href=\"#tymethod.get_unchecked\" class=\"fn\">get_unchecked</a>(self, slice: <a class=\"primitive\" href=\"../primitive.pointer.html\">*const T</a>) -&gt; <a class=\"primitive\" href=\"../primitive.pointer.html\">*const </a>Self::<a class=\"associatedtype\" href=\"trait.SliceIndex.html#associatedtype.Output\" title=\"type std::slice::SliceIndex::Output\">Output</a>;\n<span class=\"item-spacer\"></span>    unsafe fn <a href=\"#tymethod.get_unchecked_mut\" class=\"fn\">get_unchecked_mut</a>(self, slice: <a class=\"primitive\" href=\"../primitive.pointer.html\">*mut T</a>) -&gt; <a class=\"primitive\" href=\"../primitive.pointer.html\">*mut </a>Self::<a class=\"associatedtype\" href=\"trait.SliceIndex.html#associatedtype.Output\" title=\"type std::slice::SliceIndex::Output\">Output</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.index\" class=\"fn\">index</a>(self, slice: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>) -&gt; &amp;Self::<a class=\"associatedtype\" href=\"trait.SliceIndex.html#associatedtype.Output\" title=\"type std::slice::SliceIndex::Output\">Output</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.index_mut\" class=\"fn\">index_mut</a>(self, slice: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>) -&gt; &amp;mut Self::<a class=\"associatedtype\" href=\"trait.SliceIndex.html#associatedtype.Output\" title=\"type std::slice::SliceIndex::Output\">Output</a>;\n}</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>A helper trait used for indexing operations.</p>\n<p>Implementations of this trait have to promise that if the argument\nto <code>get_unchecked(_mut)</code> is a safe reference, then so is the result.</p>\n</div></details><h2 id=\"required-associated-types\" class=\"section-header\">Required Associated Types<a href=\"#required-associated-types\" class=\"anchor\">§</a></h2><div class=\"methods\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/index.rs.html#154\">source</a></span><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a>: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a></h4></section></summary><div class=\"docblock\"><p>The output type returned by methods.</p>\n</div></details></div><h2 id=\"required-methods\" class=\"section-header\">Required Methods<a href=\"#required-methods\" class=\"anchor\">§</a></h2><div class=\"methods\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.get\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/index.rs.html#159\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.get\" class=\"fn\">get</a>(self, slice: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;Self::<a class=\"associatedtype\" href=\"trait.SliceIndex.html#associatedtype.Output\" title=\"type std::slice::SliceIndex::Output\">Output</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns a shared reference to the output at this location, if in\nbounds.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.get_mut\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/index.rs.html#164\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.get_mut\" class=\"fn\">get_mut</a>(self, slice: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;mut Self::<a class=\"associatedtype\" href=\"trait.SliceIndex.html#associatedtype.Output\" title=\"type std::slice::SliceIndex::Output\">Output</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns a mutable reference to the output at this location, if in\nbounds.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.get_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/index.rs.html#173\">source</a><h4 class=\"code-header\">unsafe fn <a href=\"#tymethod.get_unchecked\" class=\"fn\">get_unchecked</a>(self, slice: <a class=\"primitive\" href=\"../primitive.pointer.html\">*const T</a>) -&gt; <a class=\"primitive\" href=\"../primitive.pointer.html\">*const </a>Self::<a class=\"associatedtype\" href=\"trait.SliceIndex.html#associatedtype.Output\" title=\"type std::slice::SliceIndex::Output\">Output</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns a pointer to the output at this location, without\nperforming any bounds checking.\nCalling this method with an out-of-bounds index or a dangling <code>slice</code> pointer\nis <em><a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">undefined behavior</a></em> even if the resulting pointer is not used.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.get_unchecked_mut\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/index.rs.html#182\">source</a><h4 class=\"code-header\">unsafe fn <a href=\"#tymethod.get_unchecked_mut\" class=\"fn\">get_unchecked_mut</a>(self, slice: <a class=\"primitive\" href=\"../primitive.pointer.html\">*mut T</a>) -&gt; <a class=\"primitive\" href=\"../primitive.pointer.html\">*mut </a>Self::<a class=\"associatedtype\" href=\"trait.SliceIndex.html#associatedtype.Output\" title=\"type std::slice::SliceIndex::Output\">Output</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns a mutable pointer to the output at this location, without\nperforming any bounds checking.\nCalling this method with an out-of-bounds index or a dangling <code>slice</code> pointer\nis <em><a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">undefined behavior</a></em> even if the resulting pointer is not used.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.index\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/index.rs.html#188\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.index\" class=\"fn\">index</a>(self, slice: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>) -&gt; &amp;Self::<a class=\"associatedtype\" href=\"trait.SliceIndex.html#associatedtype.Output\" title=\"type std::slice::SliceIndex::Output\">Output</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns a shared reference to the output at this location, panicking\nif out of bounds.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.index_mut\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/index.rs.html#194\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.index_mut\" class=\"fn\">index_mut</a>(self, slice: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>) -&gt; &amp;mut Self::<a class=\"associatedtype\" href=\"trait.SliceIndex.html#associatedtype.Output\" title=\"type std::slice::SliceIndex::Output\">Output</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns a mutable reference to the output at this location, panicking\nif out of bounds.</p>\n</div></details></div><h2 id=\"implementors\" class=\"section-header\">Implementors<a href=\"#implementors\" class=\"anchor\">§</a></h2><div id=\"implementors-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-SliceIndex%3Cstr%3E-for-(Bound%3Cusize%3E,+Bound%3Cusize%3E)\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.73.0\">1.73.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#278\">source</a></span><a href=\"#impl-SliceIndex%3Cstr%3E-for-(Bound%3Cusize%3E,+Bound%3Cusize%3E)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>&gt; for (<a class=\"enum\" href=\"../ops/enum.Bound.html\" title=\"enum std::ops::Bound\">Bound</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;, <a class=\"enum\" href=\"../ops/enum.Bound.html\" title=\"enum std::ops::Bound\">Bound</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;)</h3></section></summary><div class=\"docblock\"><p>Implements substring slicing for arbitrary bounds.</p>\n<p>Returns a slice of the given string bounded by the byte indices\nprovided by each bound.</p>\n<p>This operation is <em>O</em>(1).</p>\n<h4 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h4>\n<p>Panics if <code>begin</code> or <code>end</code> (if it exists and once adjusted for\ninclusion/exclusion) does not point to the starting byte offset of\na character (as defined by <code>is_char_boundary</code>), if <code>begin &gt; end</code>, or if\n<code>end &gt; len</code>.</p>\n</div><div class=\"impl-items\"><section id=\"associatedtype.Output-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"../primitive.str.html\">str</a></h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-SliceIndex%3Cstr%3E-for-Range%3Cusize%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0, const unstable\">1.20.0 (const: unstable)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#163\">source</a></span><a href=\"#impl-SliceIndex%3Cstr%3E-for-Range%3Cusize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"../ops/struct.Range.html\" title=\"struct std::ops::Range\">Range</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h3></section></summary><div class=\"docblock\"><p>Implements substring slicing with syntax <code>&amp;self[begin .. end]</code> or <code>&amp;mut self[begin .. end]</code>.</p>\n<p>Returns a slice of the given string from the byte range\n[<code>begin</code>, <code>end</code>).</p>\n<p>This operation is <em>O</em>(1).</p>\n<p>Prior to 1.20.0, these indexing operations were still supported by\ndirect implementation of <code>Index</code> and <code>IndexMut</code>.</p>\n<h4 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h4>\n<p>Panics if <code>begin</code> or <code>end</code> does not point to the starting byte offset of\na character (as defined by <code>is_char_boundary</code>), if <code>begin &gt; end</code>, or if\n<code>end &gt; len</code>.</p>\n<h4 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h4>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">\"Löwe 老虎 Léopard\"</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>s[<span class=\"number\">0 </span>.. <span class=\"number\">1</span>], <span class=\"string\">\"L\"</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>s[<span class=\"number\">1 </span>.. <span class=\"number\">9</span>], <span class=\"string\">\"öwe 老\"</span>);\n\n<span class=\"comment\">// these will panic:\n// byte 2 lies within `ö`:\n// &amp;s[2 ..3];\n\n// byte 8 lies within `老`\n// &amp;s[1 .. 8];\n\n// byte 100 is outside the string\n// &amp;s[3 .. 100];</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s+=+%22L%C3%B6we+%E8%80%81%E8%99%8E+L%C3%A9opard%22;%0A++++assert_eq!(%26s%5B0+..+1%5D,+%22L%22);%0A++++%0A++++assert_eq!(%26s%5B1+..+9%5D,+%22%C3%B6we+%E8%80%81%22);%0A++++%0A++++//+these+will+panic:%0A++++//+byte+2+lies+within+%60%C3%B6%60:%0A++++//+%26s%5B2+..3%5D;%0A++++%0A++++//+byte+8+lies+within+%60%E8%80%81%60%0A++++//+%26s%5B1+..+8%5D;%0A++++%0A++++//+byte+100+is+outside+the+string%0A++++//+%26s%5B3+..+100%5D;%0A%7D&amp;edition=2021\">Run</a></div>\n</div><div class=\"impl-items\"><section id=\"associatedtype.Output-2\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-2\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"../primitive.str.html\">str</a></h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-SliceIndex%3Cstr%3E-for-RangeFrom%3Cusize%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0, const unstable\">1.20.0 (const: unstable)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#402\">source</a></span><a href=\"#impl-SliceIndex%3Cstr%3E-for-RangeFrom%3Cusize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"../ops/struct.RangeFrom.html\" title=\"struct std::ops::RangeFrom\">RangeFrom</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h3></section></summary><div class=\"docblock\"><p>Implements substring slicing with syntax <code>&amp;self[begin ..]</code> or <code>&amp;mut self[begin ..]</code>.</p>\n<p>Returns a slice of the given string from the byte range [<code>begin</code>, <code>len</code>).\nEquivalent to <code>&amp;self[begin .. len]</code> or <code>&amp;mut self[begin .. len]</code>.</p>\n<p>This operation is <em>O</em>(1).</p>\n<p>Prior to 1.20.0, these indexing operations were still supported by\ndirect implementation of <code>Index</code> and <code>IndexMut</code>.</p>\n<h4 id=\"panics-2\"><a class=\"doc-anchor\" href=\"#panics-2\">§</a>Panics</h4>\n<p>Panics if <code>begin</code> does not point to the starting byte offset of\na character (as defined by <code>is_char_boundary</code>), or if <code>begin &gt; len</code>.</p>\n</div><div class=\"impl-items\"><section id=\"associatedtype.Output-3\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-3\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"../primitive.str.html\">str</a></h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-SliceIndex%3Cstr%3E-for-RangeFull\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0, const unstable\">1.20.0 (const: unstable)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#98\">source</a></span><a href=\"#impl-SliceIndex%3Cstr%3E-for-RangeFull\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"../ops/struct.RangeFull.html\" title=\"struct std::ops::RangeFull\">RangeFull</a></h3></section></summary><div class=\"docblock\"><p>Implements substring slicing with syntax <code>&amp;self[..]</code> or <code>&amp;mut self[..]</code>.</p>\n<p>Returns a slice of the whole string, i.e., returns <code>&amp;self</code> or <code>&amp;mut self</code>. Equivalent to <code>&amp;self[0 .. len]</code> or <code>&amp;mut self[0 .. len]</code>. Unlike\nother indexing operations, this can never panic.</p>\n<p>This operation is <em>O</em>(1).</p>\n<p>Prior to 1.20.0, these indexing operations were still supported by\ndirect implementation of <code>Index</code> and <code>IndexMut</code>.</p>\n<p>Equivalent to <code>&amp;self[0 .. len]</code> or <code>&amp;mut self[0 .. len]</code>.</p>\n</div><div class=\"impl-items\"><section id=\"associatedtype.Output-4\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-4\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"../primitive.str.html\">str</a></h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-SliceIndex%3Cstr%3E-for-RangeInclusive%3Cusize%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.26.0, const unstable\">1.26.0 (const: unstable)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#474\">source</a></span><a href=\"#impl-SliceIndex%3Cstr%3E-for-RangeInclusive%3Cusize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"../ops/struct.RangeInclusive.html\" title=\"struct std::ops::RangeInclusive\">RangeInclusive</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h3></section></summary><div class=\"docblock\"><p>Implements substring slicing with syntax <code>&amp;self[begin ..= end]</code> or <code>&amp;mut self[begin ..= end]</code>.</p>\n<p>Returns a slice of the given string from the byte range\n[<code>begin</code>, <code>end</code>]. Equivalent to <code>&amp;self [begin .. end + 1]</code> or <code>&amp;mut self[begin .. end + 1]</code>, except if <code>end</code> has the maximum value for\n<code>usize</code>.</p>\n<p>This operation is <em>O</em>(1).</p>\n<h4 id=\"panics-3\"><a class=\"doc-anchor\" href=\"#panics-3\">§</a>Panics</h4>\n<p>Panics if <code>begin</code> does not point to the starting byte offset of\na character (as defined by <code>is_char_boundary</code>), if <code>end</code> does not point\nto the ending byte offset of a character (<code>end + 1</code> is either a starting\nbyte offset or equal to <code>len</code>), if <code>begin &gt; end</code>, or if <code>end &gt;= len</code>.</p>\n</div><div class=\"impl-items\"><section id=\"associatedtype.Output-5\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-5\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"../primitive.str.html\">str</a></h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-SliceIndex%3Cstr%3E-for-RangeTo%3Cusize%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0, const unstable\">1.20.0 (const: unstable)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#333\">source</a></span><a href=\"#impl-SliceIndex%3Cstr%3E-for-RangeTo%3Cusize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"../ops/struct.RangeTo.html\" title=\"struct std::ops::RangeTo\">RangeTo</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h3></section></summary><div class=\"docblock\"><p>Implements substring slicing with syntax <code>&amp;self[.. end]</code> or <code>&amp;mut self[.. end]</code>.</p>\n<p>Returns a slice of the given string from the byte range [0, <code>end</code>).\nEquivalent to <code>&amp;self[0 .. end]</code> or <code>&amp;mut self[0 .. end]</code>.</p>\n<p>This operation is <em>O</em>(1).</p>\n<p>Prior to 1.20.0, these indexing operations were still supported by\ndirect implementation of <code>Index</code> and <code>IndexMut</code>.</p>\n<h4 id=\"panics-4\"><a class=\"doc-anchor\" href=\"#panics-4\">§</a>Panics</h4>\n<p>Panics if <code>end</code> does not point to the starting byte offset of a\ncharacter (as defined by <code>is_char_boundary</code>), or if <code>end &gt; len</code>.</p>\n</div><div class=\"impl-items\"><section id=\"associatedtype.Output-6\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-6\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"../primitive.str.html\">str</a></h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-SliceIndex%3Cstr%3E-for-RangeToInclusive%3Cusize%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.26.0, const unstable\">1.26.0 (const: unstable)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#526\">source</a></span><a href=\"#impl-SliceIndex%3Cstr%3E-for-RangeToInclusive%3Cusize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"../ops/struct.RangeToInclusive.html\" title=\"struct std::ops::RangeToInclusive\">RangeToInclusive</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h3></section></summary><div class=\"docblock\"><p>Implements substring slicing with syntax <code>&amp;self[..= end]</code> or <code>&amp;mut self[..= end]</code>.</p>\n<p>Returns a slice of the given string from the byte range [0, <code>end</code>].\nEquivalent to <code>&amp;self [0 .. end + 1]</code>, except if <code>end</code> has the maximum\nvalue for <code>usize</code>.</p>\n<p>This operation is <em>O</em>(1).</p>\n<h4 id=\"panics-5\"><a class=\"doc-anchor\" href=\"#panics-5\">§</a>Panics</h4>\n<p>Panics if <code>end</code> does not point to the ending byte offset of a character\n(<code>end + 1</code> is either a starting byte offset as defined by\n<code>is_char_boundary</code>, or equal to <code>len</code>), or if <code>end &gt;= len</code>.</p>\n</div><div class=\"impl-items\"><section id=\"associatedtype.Output-7\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-7\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"../primitive.str.html\">str</a></h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-SliceIndex%3C%5BT%5D%3E-for-(Bound%3Cusize%3E,+Bound%3Cusize%3E)\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0\">1.53.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/index.rs.html#854\">source</a></span><a href=\"#impl-SliceIndex%3C%5BT%5D%3E-for-(Bound%3Cusize%3E,+Bound%3Cusize%3E)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>&gt; for (<a class=\"enum\" href=\"../ops/enum.Bound.html\" title=\"enum std::ops::Bound\">Bound</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;, <a class=\"enum\" href=\"../ops/enum.Bound.html\" title=\"enum std::ops::Bound\">Bound</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;)</h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Output-8\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-8\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a></h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-SliceIndex%3C%5BT%5D%3E-for-usize\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.15.0, const unstable\">1.15.0 (const: unstable)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/index.rs.html#200\">source</a></span><a href=\"#impl-SliceIndex%3C%5BT%5D%3E-for-usize\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>&gt; for <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a></h3></section></summary><div class=\"docblock\"><p>The methods <code>index</code> and <code>index_mut</code> panic if the index is out of bounds.</p>\n</div><div class=\"impl-items\"><section id=\"associatedtype.Output-9\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-9\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = T</h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-SliceIndex%3C%5BT%5D%3E-for-Range%3Cusize%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.15.0, const unstable\">1.15.0 (const: unstable)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/index.rs.html#336\">source</a></span><a href=\"#impl-SliceIndex%3C%5BT%5D%3E-for-Range%3Cusize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"../ops/struct.Range.html\" title=\"struct std::ops::Range\">Range</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h3></section></summary><div class=\"docblock\"><p>The methods <code>index</code> and <code>index_mut</code> panic if:</p>\n<ul>\n<li>the start of the range is greater than the end of the range or</li>\n<li>the end of the range is out of bounds.</li>\n</ul>\n</div><div class=\"impl-items\"><section id=\"associatedtype.Output-10\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-10\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a></h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-SliceIndex%3C%5BT%5D%3E-for-RangeFrom%3Cusize%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.15.0, const unstable\">1.15.0 (const: unstable)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/index.rs.html#464\">source</a></span><a href=\"#impl-SliceIndex%3C%5BT%5D%3E-for-RangeFrom%3Cusize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"../ops/struct.RangeFrom.html\" title=\"struct std::ops::RangeFrom\">RangeFrom</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h3></section></summary><div class=\"docblock\"><p>The methods <code>index</code> and <code>index_mut</code> panic if the start of the range is out of bounds.</p>\n</div><div class=\"impl-items\"><section id=\"associatedtype.Output-11\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-11\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a></h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-SliceIndex%3C%5BT%5D%3E-for-RangeFull\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.15.0, const unstable\">1.15.0 (const: unstable)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/index.rs.html#510\">source</a></span><a href=\"#impl-SliceIndex%3C%5BT%5D%3E-for-RangeFull\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"../ops/struct.RangeFull.html\" title=\"struct std::ops::RangeFull\">RangeFull</a></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Output-12\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-12\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a></h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-SliceIndex%3C%5BT%5D%3E-for-RangeInclusive%3Cusize%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.26.0, const unstable\">1.26.0 (const: unstable)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/index.rs.html#550\">source</a></span><a href=\"#impl-SliceIndex%3C%5BT%5D%3E-for-RangeInclusive%3Cusize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"../ops/struct.RangeInclusive.html\" title=\"struct std::ops::RangeInclusive\">RangeInclusive</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h3></section></summary><div class=\"docblock\"><p>The methods <code>index</code> and <code>index_mut</code> panic if:</p>\n<ul>\n<li>the end of the range is <code>usize::MAX</code> or</li>\n<li>the start of the range is greater than the end of the range or</li>\n<li>the end of the range is out of bounds.</li>\n</ul>\n</div><div class=\"impl-items\"><section id=\"associatedtype.Output-13\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-13\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a></h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-SliceIndex%3C%5BT%5D%3E-for-RangeTo%3Cusize%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.15.0, const unstable\">1.15.0 (const: unstable)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/index.rs.html#425\">source</a></span><a href=\"#impl-SliceIndex%3C%5BT%5D%3E-for-RangeTo%3Cusize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"../ops/struct.RangeTo.html\" title=\"struct std::ops::RangeTo\">RangeTo</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h3></section></summary><div class=\"docblock\"><p>The methods <code>index</code> and <code>index_mut</code> panic if the end of the range is out of bounds.</p>\n</div><div class=\"impl-items\"><section id=\"associatedtype.Output-14\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-14\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a></h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-SliceIndex%3C%5BT%5D%3E-for-RangeToInclusive%3Cusize%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.26.0, const unstable\">1.26.0 (const: unstable)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/index.rs.html#595\">source</a></span><a href=\"#impl-SliceIndex%3C%5BT%5D%3E-for-RangeToInclusive%3Cusize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"../ops/struct.RangeToInclusive.html\" title=\"struct std::ops::RangeToInclusive\">RangeToInclusive</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h3></section></summary><div class=\"docblock\"><p>The methods <code>index</code> and <code>index_mut</code> panic if the end of the range is out of bounds.</p>\n</div><div class=\"impl-items\"><section id=\"associatedtype.Output-15\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-15\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a></h4></section></div></details></div><script src=\"../../trait.impl/core/slice/index/trait.SliceIndex.js\" data-ignore-extern-crates=\"core\" async=\"\"></script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:12:02.461Z"
}