{
	"title": "process.rs - source",
	"url": "https://doc.rust-lang.org/stable/src/std/process.rs.html#2449-2459",
	"markdown": "# process.rs - source\n\n```\n//! A module for working with processes.\n//!\n//! This module is mostly concerned with spawning and interacting with child\n//! processes, but it also provides [`abort`] and [`exit`] for terminating the\n//! current process.\n//!\n//! # Spawning a process\n//!\n//! The [`Command`] struct is used to configure and spawn processes:\n//!\n//! ```no_run\n//! use std::process::Command;\n//!\n//! let output = Command::new(\"echo\")\n//!     .arg(\"Hello world\")\n//!     .output()\n//!     .expect(\"Failed to execute command\");\n//!\n//! assert_eq!(b\"Hello world\\n\", output.stdout.as_slice());\n//! ```\n//!\n//! Several methods on [`Command`], such as [`spawn`] or [`output`], can be used\n//! to spawn a process. In particular, [`output`] spawns the child process and\n//! waits until the process terminates, while [`spawn`] will return a [`Child`]\n//! that represents the spawned child process.\n//!\n//! # Handling I/O\n//!\n//! The [`stdout`], [`stdin`], and [`stderr`] of a child process can be\n//! configured by passing an [`Stdio`] to the corresponding method on\n//! [`Command`]. Once spawned, they can be accessed from the [`Child`]. For\n//! example, piping output from one command into another command can be done\n//! like so:\n//!\n//! ```no_run\n//! use std::process::{Command, Stdio};\n//!\n//! // stdout must be configured with `Stdio::piped` in order to use\n//! // `echo_child.stdout`\n//! let echo_child = Command::new(\"echo\")\n//!     .arg(\"Oh no, a tpyo!\")\n//!     .stdout(Stdio::piped())\n//!     .spawn()\n//!     .expect(\"Failed to start echo process\");\n//!\n//! // Note that `echo_child` is moved here, but we won't be needing\n//! // `echo_child` anymore\n//! let echo_out = echo_child.stdout.expect(\"Failed to open echo stdout\");\n//!\n//! let mut sed_child = Command::new(\"sed\")\n//!     .arg(\"s/tpyo/typo/\")\n//!     .stdin(Stdio::from(echo_out))\n//!     .stdout(Stdio::piped())\n//!     .spawn()\n//!     .expect(\"Failed to start sed process\");\n//!\n//! let output = sed_child.wait_with_output().expect(\"Failed to wait on sed\");\n//! assert_eq!(b\"Oh no, a typo!\\n\", output.stdout.as_slice());\n//! ```\n//!\n//! Note that [`ChildStderr`] and [`ChildStdout`] implement [`Read`] and\n//! [`ChildStdin`] implements [`Write`]:\n//!\n//! ```no_run\n//! use std::process::{Command, Stdio};\n//! use std::io::Write;\n//!\n//! let mut child = Command::new(\"/bin/cat\")\n//!     .stdin(Stdio::piped())\n//!     .stdout(Stdio::piped())\n//!     .spawn()\n//!     .expect(\"failed to execute child\");\n//!\n//! // If the child process fills its stdout buffer, it may end up\n//! // waiting until the parent reads the stdout, and not be able to\n//! // read stdin in the meantime, causing a deadlock.\n//! // Writing from another thread ensures that stdout is being read\n//! // at the same time, avoiding the problem.\n//! let mut stdin = child.stdin.take().expect(\"failed to get stdin\");\n//! std::thread::spawn(move || {\n//!     stdin.write_all(b\"test\").expect(\"failed to write to stdin\");\n//! });\n//!\n//! let output = child\n//!     .wait_with_output()\n//!     .expect(\"failed to wait on child\");\n//!\n//! assert_eq!(b\"test\", output.stdout.as_slice());\n//! ```\n//!\n//! # Windows argument splitting\n//!\n//! On Unix systems arguments are passed to a new process as an array of strings,\n//! but on Windows arguments are passed as a single commandline string and it is\n//! up to the child process to parse it into an array. Therefore the parent and\n//! child processes must agree on how the commandline string is encoded.\n//!\n//! Most programs use the standard C run-time `argv`, which in practice results\n//! in consistent argument handling. However some programs have their own way of\n//! parsing the commandline string. In these cases using [`arg`] or [`args`] may\n//! result in the child process seeing a different array of arguments then the\n//! parent process intended.\n//!\n//! Two ways of mitigating this are:\n//!\n//! * Validate untrusted input so that only a safe subset is allowed.\n//! * Use [`raw_arg`] to build a custom commandline. This bypasses the escaping\n//!   rules used by [`arg`] so should be used with due caution.\n//!\n//! `cmd.exe` and `.bat` files use non-standard argument parsing and are especially\n//! vulnerable to malicious input as they may be used to run arbitrary shell\n//! commands. Untrusted arguments should be restricted as much as possible.\n//! For examples on handling this see [`raw_arg`].\n//!\n//! ### Batch file special handling\n//!\n//! On Windows, `Command` uses the Windows API function [`CreateProcessW`] to\n//! spawn new processes. An undocumented feature of this function is that\n//! when given a `.bat` file as the application to run, it will automatically\n//! convert that into running `cmd.exe /c` with the batch file as the next argument.\n//!\n//! For historical reasons Rust currently preserves this behaviour when using\n//! [`Command::new`], and escapes the arguments according to `cmd.exe` rules.\n//! Due to the complexity of `cmd.exe` argument handling, it might not be\n//! possible to safely escape some special characters, and using them will result\n//! in an error being returned at process spawn. The set of unescapeable\n//! special characters might change between releases.\n//!\n//! Also note that running batch scripts in this way may be removed in the\n//! future and so should not be relied upon.\n//!\n//! [`spawn`]: Command::spawn\n//! [`output`]: Command::output\n//!\n//! [`stdout`]: Command::stdout\n//! [`stdin`]: Command::stdin\n//! [`stderr`]: Command::stderr\n//!\n//! [`Write`]: io::Write\n//! [`Read`]: io::Read\n//!\n//! [`arg`]: Command::arg\n//! [`args`]: Command::args\n//! [`raw_arg`]: crate::os::windows::process::CommandExt::raw_arg\n//!\n//! [`CreateProcessW`]: https://learn.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-createprocessw\n\n#![stable(feature = \"process\", since = \"1.0.0\")]\n#![deny(unsafe_op_in_unsafe_fn)]\n\n#[cfg(all(test, not(any(target_os = \"emscripten\", target_env = \"sgx\", target_os = \"xous\"))))]\nmod tests;\n\nuse crate::io::prelude::*;\n\nuse crate::convert::Infallible;\nuse crate::ffi::OsStr;\nuse crate::fmt;\nuse crate::fs;\nuse crate::io::{self, BorrowedCursor, IoSlice, IoSliceMut};\nuse crate::num::NonZero;\nuse crate::path::Path;\nuse crate::str;\nuse crate::sys::pipe::{read2, AnonPipe};\nuse crate::sys::process as imp;\n#[stable(feature = \"command_access\", since = \"1.57.0\")]\npub use crate::sys_common::process::CommandEnvs;\nuse crate::sys_common::{AsInner, AsInnerMut, FromInner, IntoInner};\n\n/// Representation of a running or exited child process.\n///\n/// This structure is used to represent and manage child processes. A child\n/// process is created via the [`Command`] struct, which configures the\n/// spawning process and can itself be constructed using a builder-style\n/// interface.\n///\n/// There is no implementation of [`Drop`] for child processes,\n/// so if you do not ensure the `Child` has exited then it will continue to\n/// run, even after the `Child` handle to the child process has gone out of\n/// scope.\n///\n/// Calling [`wait`] (or other functions that wrap around it) will make\n/// the parent process wait until the child has actually exited before\n/// continuing.\n///\n/// # Warning\n///\n/// On some systems, calling [`wait`] or similar is necessary for the OS to\n/// release resources. A process that terminated but has not been waited on is\n/// still around as a \"zombie\". Leaving too many zombies around may exhaust\n/// global resources (for example process IDs).\n///\n/// The standard library does *not* automatically wait on child processes (not\n/// even if the `Child` is dropped), it is up to the application developer to do\n/// so. As a consequence, dropping `Child` handles without waiting on them first\n/// is not recommended in long-running applications.\n///\n/// # Examples\n///\n/// ```should_panic\n/// use std::process::Command;\n///\n/// let mut child = Command::new(\"/bin/cat\")\n///     .arg(\"file.txt\")\n///     .spawn()\n///     .expect(\"failed to execute child\");\n///\n/// let ecode = child.wait().expect(\"failed to wait on child\");\n///\n/// assert!(ecode.success());\n/// ```\n///\n/// [`wait`]: Child::wait\n#[stable(feature = \"process\", since = \"1.0.0\")]\npub struct Child {\n    pub(crate) handle: imp::Process,\n\n    /// The handle for writing to the child's standard input (stdin), if it\n    /// has been captured. You might find it helpful to do\n    ///\n    /// ```ignore (incomplete)\n    /// let stdin = child.stdin.take().unwrap();\n    /// ```\n    ///\n    /// to avoid partially moving the `child` and thus blocking yourself from calling\n    /// functions on `child` while using `stdin`.\n    #[stable(feature = \"process\", since = \"1.0.0\")]\n    pub stdin: Option<ChildStdin>,\n\n    /// The handle for reading from the child's standard output (stdout), if it\n    /// has been captured. You might find it helpful to do\n    ///\n    /// ```ignore (incomplete)\n    /// let stdout = child.stdout.take().unwrap();\n    /// ```\n    ///\n    /// to avoid partially moving the `child` and thus blocking yourself from calling\n    /// functions on `child` while using `stdout`.\n    #[stable(feature = \"process\", since = \"1.0.0\")]\n    pub stdout: Option<ChildStdout>,\n\n    /// The handle for reading from the child's standard error (stderr), if it\n    /// has been captured. You might find it helpful to do\n    ///\n    /// ```ignore (incomplete)\n    /// let stderr = child.stderr.take().unwrap();\n    /// ```\n    ///\n    /// to avoid partially moving the `child` and thus blocking yourself from calling\n    /// functions on `child` while using `stderr`.\n    #[stable(feature = \"process\", since = \"1.0.0\")]\n    pub stderr: Option<ChildStderr>,\n}\n\n/// Allows extension traits within `std`.\n#[unstable(feature = \"sealed\", issue = \"none\")]\nimpl crate::sealed::Sealed for Child {}\n\nimpl AsInner<imp::Process> for Child {\n    #[inline]\n    fn as_inner(&self) -> &imp::Process {\n        &self.handle\n    }\n}\n\nimpl FromInner<(imp::Process, imp::StdioPipes)> for Child {\n    fn from_inner((handle, io): (imp::Process, imp::StdioPipes)) -> Child {\n        Child {\n            handle,\n            stdin: io.stdin.map(ChildStdin::from_inner),\n            stdout: io.stdout.map(ChildStdout::from_inner),\n            stderr: io.stderr.map(ChildStderr::from_inner),\n        }\n    }\n}\n\nimpl IntoInner<imp::Process> for Child {\n    fn into_inner(self) -> imp::Process {\n        self.handle\n    }\n}\n\n#[stable(feature = \"std_debug\", since = \"1.16.0\")]\nimpl fmt::Debug for Child {\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        f.debug_struct(\"Child\")\n            .field(\"stdin\", &self.stdin)\n            .field(\"stdout\", &self.stdout)\n            .field(\"stderr\", &self.stderr)\n            .finish_non_exhaustive()\n    }\n}\n\n/// A handle to a child process's standard input (stdin).\n///\n/// This struct is used in the [`stdin`] field on [`Child`].\n///\n/// When an instance of `ChildStdin` is [dropped], the `ChildStdin`'s underlying\n/// file handle will be closed. If the child process was blocked on input prior\n/// to being dropped, it will become unblocked after dropping.\n///\n/// [`stdin`]: Child::stdin\n/// [dropped]: Drop\n#[stable(feature = \"process\", since = \"1.0.0\")]\npub struct ChildStdin {\n    inner: AnonPipe,\n}\n\n// In addition to the `impl`s here, `ChildStdin` also has `impl`s for\n// `AsFd`/`From<OwnedFd>`/`Into<OwnedFd>` and\n// `AsRawFd`/`IntoRawFd`/`FromRawFd`, on Unix and WASI, and\n// `AsHandle`/`From<OwnedHandle>`/`Into<OwnedHandle>` and\n// `AsRawHandle`/`IntoRawHandle`/`FromRawHandle` on Windows.\n\n#[stable(feature = \"process\", since = \"1.0.0\")]\nimpl Write for ChildStdin {\n    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n        (&*self).write(buf)\n    }\n\n    fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n        (&*self).write_vectored(bufs)\n    }\n\n    fn is_write_vectored(&self) -> bool {\n        io::Write::is_write_vectored(&&*self)\n    }\n\n    #[inline]\n    fn flush(&mut self) -> io::Result<()> {\n        (&*self).flush()\n    }\n}\n\n#[stable(feature = \"write_mt\", since = \"1.48.0\")]\nimpl Write for &ChildStdin {\n    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n        self.inner.write(buf)\n    }\n\n    fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n        self.inner.write_vectored(bufs)\n    }\n\n    fn is_write_vectored(&self) -> bool {\n        self.inner.is_write_vectored()\n    }\n\n    #[inline]\n    fn flush(&mut self) -> io::Result<()> {\n        Ok(())\n    }\n}\n\nimpl AsInner<AnonPipe> for ChildStdin {\n    #[inline]\n    fn as_inner(&self) -> &AnonPipe {\n        &self.inner\n    }\n}\n\nimpl IntoInner<AnonPipe> for ChildStdin {\n    fn into_inner(self) -> AnonPipe {\n        self.inner\n    }\n}\n\nimpl FromInner<AnonPipe> for ChildStdin {\n    fn from_inner(pipe: AnonPipe) -> ChildStdin {\n        ChildStdin { inner: pipe }\n    }\n}\n\n#[stable(feature = \"std_debug\", since = \"1.16.0\")]\nimpl fmt::Debug for ChildStdin {\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        f.debug_struct(\"ChildStdin\").finish_non_exhaustive()\n    }\n}\n\n/// A handle to a child process's standard output (stdout).\n///\n/// This struct is used in the [`stdout`] field on [`Child`].\n///\n/// When an instance of `ChildStdout` is [dropped], the `ChildStdout`'s\n/// underlying file handle will be closed.\n///\n/// [`stdout`]: Child::stdout\n/// [dropped]: Drop\n#[stable(feature = \"process\", since = \"1.0.0\")]\npub struct ChildStdout {\n    inner: AnonPipe,\n}\n\n// In addition to the `impl`s here, `ChildStdout` also has `impl`s for\n// `AsFd`/`From<OwnedFd>`/`Into<OwnedFd>` and\n// `AsRawFd`/`IntoRawFd`/`FromRawFd`, on Unix and WASI, and\n// `AsHandle`/`From<OwnedHandle>`/`Into<OwnedHandle>` and\n// `AsRawHandle`/`IntoRawHandle`/`FromRawHandle` on Windows.\n\n#[stable(feature = \"process\", since = \"1.0.0\")]\nimpl Read for ChildStdout {\n    fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n        self.inner.read(buf)\n    }\n\n    fn read_buf(&mut self, buf: BorrowedCursor<'_>) -> io::Result<()> {\n        self.inner.read_buf(buf)\n    }\n\n    fn read_vectored(&mut self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n        self.inner.read_vectored(bufs)\n    }\n\n    #[inline]\n    fn is_read_vectored(&self) -> bool {\n        self.inner.is_read_vectored()\n    }\n\n    fn read_to_end(&mut self, buf: &mut Vec<u8>) -> io::Result<usize> {\n        self.inner.read_to_end(buf)\n    }\n}\n\nimpl AsInner<AnonPipe> for ChildStdout {\n    #[inline]\n    fn as_inner(&self) -> &AnonPipe {\n        &self.inner\n    }\n}\n\nimpl IntoInner<AnonPipe> for ChildStdout {\n    fn into_inner(self) -> AnonPipe {\n        self.inner\n    }\n}\n\nimpl FromInner<AnonPipe> for ChildStdout {\n    fn from_inner(pipe: AnonPipe) -> ChildStdout {\n        ChildStdout { inner: pipe }\n    }\n}\n\n#[stable(feature = \"std_debug\", since = \"1.16.0\")]\nimpl fmt::Debug for ChildStdout {\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        f.debug_struct(\"ChildStdout\").finish_non_exhaustive()\n    }\n}\n\n/// A handle to a child process's stderr.\n///\n/// This struct is used in the [`stderr`] field on [`Child`].\n///\n/// When an instance of `ChildStderr` is [dropped], the `ChildStderr`'s\n/// underlying file handle will be closed.\n///\n/// [`stderr`]: Child::stderr\n/// [dropped]: Drop\n#[stable(feature = \"process\", since = \"1.0.0\")]\npub struct ChildStderr {\n    inner: AnonPipe,\n}\n\n// In addition to the `impl`s here, `ChildStderr` also has `impl`s for\n// `AsFd`/`From<OwnedFd>`/`Into<OwnedFd>` and\n// `AsRawFd`/`IntoRawFd`/`FromRawFd`, on Unix and WASI, and\n// `AsHandle`/`From<OwnedHandle>`/`Into<OwnedHandle>` and\n// `AsRawHandle`/`IntoRawHandle`/`FromRawHandle` on Windows.\n\n#[stable(feature = \"process\", since = \"1.0.0\")]\nimpl Read for ChildStderr {\n    fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n        self.inner.read(buf)\n    }\n\n    fn read_buf(&mut self, buf: BorrowedCursor<'_>) -> io::Result<()> {\n        self.inner.read_buf(buf)\n    }\n\n    fn read_vectored(&mut self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n        self.inner.read_vectored(bufs)\n    }\n\n    #[inline]\n    fn is_read_vectored(&self) -> bool {\n        self.inner.is_read_vectored()\n    }\n\n    fn read_to_end(&mut self, buf: &mut Vec<u8>) -> io::Result<usize> {\n        self.inner.read_to_end(buf)\n    }\n}\n\nimpl AsInner<AnonPipe> for ChildStderr {\n    #[inline]\n    fn as_inner(&self) -> &AnonPipe {\n        &self.inner\n    }\n}\n\nimpl IntoInner<AnonPipe> for ChildStderr {\n    fn into_inner(self) -> AnonPipe {\n        self.inner\n    }\n}\n\nimpl FromInner<AnonPipe> for ChildStderr {\n    fn from_inner(pipe: AnonPipe) -> ChildStderr {\n        ChildStderr { inner: pipe }\n    }\n}\n\n#[stable(feature = \"std_debug\", since = \"1.16.0\")]\nimpl fmt::Debug for ChildStderr {\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        f.debug_struct(\"ChildStderr\").finish_non_exhaustive()\n    }\n}\n\n/// A process builder, providing fine-grained control\n/// over how a new process should be spawned.\n///\n/// A default configuration can be\n/// generated using `Command::new(program)`, where `program` gives a path to the\n/// program to be executed. Additional builder methods allow the configuration\n/// to be changed (for example, by adding arguments) prior to spawning:\n///\n/// ```\n/// use std::process::Command;\n///\n/// let output = if cfg!(target_os = \"windows\") {\n///     Command::new(\"cmd\")\n///         .args([\"/C\", \"echo hello\"])\n///         .output()\n///         .expect(\"failed to execute process\")\n/// } else {\n///     Command::new(\"sh\")\n///         .arg(\"-c\")\n///         .arg(\"echo hello\")\n///         .output()\n///         .expect(\"failed to execute process\")\n/// };\n///\n/// let hello = output.stdout;\n/// ```\n///\n/// `Command` can be reused to spawn multiple processes. The builder methods\n/// change the command without needing to immediately spawn the process.\n///\n/// ```no_run\n/// use std::process::Command;\n///\n/// let mut echo_hello = Command::new(\"sh\");\n/// echo_hello.arg(\"-c\").arg(\"echo hello\");\n/// let hello_1 = echo_hello.output().expect(\"failed to execute process\");\n/// let hello_2 = echo_hello.output().expect(\"failed to execute process\");\n/// ```\n///\n/// Similarly, you can call builder methods after spawning a process and then\n/// spawn a new process with the modified settings.\n///\n/// ```no_run\n/// use std::process::Command;\n///\n/// let mut list_dir = Command::new(\"ls\");\n///\n/// // Execute `ls` in the current directory of the program.\n/// list_dir.status().expect(\"process failed to execute\");\n///\n/// println!();\n///\n/// // Change `ls` to execute in the root directory.\n/// list_dir.current_dir(\"/\");\n///\n/// // And then execute `ls` again but in the root directory.\n/// list_dir.status().expect(\"process failed to execute\");\n/// ```\n#[stable(feature = \"process\", since = \"1.0.0\")]\n#[cfg_attr(not(test), rustc_diagnostic_item = \"Command\")]\npub struct Command {\n    inner: imp::Command,\n}\n\n/// Allows extension traits within `std`.\n#[unstable(feature = \"sealed\", issue = \"none\")]\nimpl crate::sealed::Sealed for Command {}\n\nimpl Command {\n    /// Constructs a new `Command` for launching the program at\n    /// path `program`, with the following default configuration:\n    ///\n    /// * No arguments to the program\n    /// * Inherit the current process's environment\n    /// * Inherit the current process's working directory\n    /// * Inherit stdin/stdout/stderr for [`spawn`] or [`status`], but create pipes for [`output`]\n    ///\n    /// [`spawn`]: Self::spawn\n    /// [`status`]: Self::status\n    /// [`output`]: Self::output\n    ///\n    /// Builder methods are provided to change these defaults and\n    /// otherwise configure the process.\n    ///\n    /// If `program` is not an absolute path, the `PATH` will be searched in\n    /// an OS-defined way.\n    ///\n    /// The search path to be used may be controlled by setting the\n    /// `PATH` environment variable on the Command,\n    /// but this has some implementation limitations on Windows\n    /// (see issue #37519).\n    ///\n    /// # Platform-specific behavior\n    ///\n    /// Note on Windows: For executable files with the .exe extension,\n    /// it can be omitted when specifying the program for this Command.\n    /// However, if the file has a different extension,\n    /// a filename including the extension needs to be provided,\n    /// otherwise the file won't be found.\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```no_run\n    /// use std::process::Command;\n    ///\n    /// Command::new(\"sh\")\n    ///     .spawn()\n    ///     .expect(\"sh command failed to start\");\n    /// ```\n    #[stable(feature = \"process\", since = \"1.0.0\")]\n    pub fn new<S: AsRef<OsStr>>(program: S) -> Command {\n        Command { inner: imp::Command::new(program.as_ref()) }\n    }\n\n    /// Adds an argument to pass to the program.\n    ///\n    /// Only one argument can be passed per use. So instead of:\n    ///\n    /// ```no_run\n    /// # std::process::Command::new(\"sh\")\n    /// .arg(\"-C /path/to/repo\")\n    /// # ;\n    /// ```\n    ///\n    /// usage would be:\n    ///\n    /// ```no_run\n    /// # std::process::Command::new(\"sh\")\n    /// .arg(\"-C\")\n    /// .arg(\"/path/to/repo\")\n    /// # ;\n    /// ```\n    ///\n    /// To pass multiple arguments see [`args`].\n    ///\n    /// [`args`]: Command::args\n    ///\n    /// Note that the argument is not passed through a shell, but given\n    /// literally to the program. This means that shell syntax like quotes,\n    /// escaped characters, word splitting, glob patterns, variable substitution,\n    /// etc. have no effect.\n    ///\n    /// <div class=\"warning\">\n    ///\n    /// On Windows, use caution with untrusted inputs. Most applications use the\n    /// standard convention for decoding arguments passed to them. These are safe to\n    /// use with `arg`. However, some applications such as `cmd.exe` and `.bat` files\n    /// use a non-standard way of decoding arguments. They are therefore vulnerable\n    /// to malicious input.\n    ///\n    /// In the case of `cmd.exe` this is especially important because a malicious\n    /// argument can potentially run arbitrary shell commands.\n    ///\n    /// See [Windows argument splitting][windows-args] for more details\n    /// or [`raw_arg`] for manually implementing non-standard argument encoding.\n    ///\n    /// [`raw_arg`]: crate::os::windows::process::CommandExt::raw_arg\n    /// [windows-args]: crate::process#windows-argument-splitting\n    ///\n    /// </div>\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```no_run\n    /// use std::process::Command;\n    ///\n    /// Command::new(\"ls\")\n    ///     .arg(\"-l\")\n    ///     .arg(\"-a\")\n    ///     .spawn()\n    ///     .expect(\"ls command failed to start\");\n    /// ```\n    #[stable(feature = \"process\", since = \"1.0.0\")]\n    pub fn arg<S: AsRef<OsStr>>(&mut self, arg: S) -> &mut Command {\n        self.inner.arg(arg.as_ref());\n        self\n    }\n\n    /// Adds multiple arguments to pass to the program.\n    ///\n    /// To pass a single argument see [`arg`].\n    ///\n    /// [`arg`]: Command::arg\n    ///\n    /// Note that the arguments are not passed through a shell, but given\n    /// literally to the program. This means that shell syntax like quotes,\n    /// escaped characters, word splitting, glob patterns, variable substitution, etc.\n    /// have no effect.\n    ///\n    /// <div class=\"warning\">\n    ///\n    /// On Windows, use caution with untrusted inputs. Most applications use the\n    /// standard convention for decoding arguments passed to them. These are safe to\n    /// use with `arg`. However, some applications such as `cmd.exe` and `.bat` files\n    /// use a non-standard way of decoding arguments. They are therefore vulnerable\n    /// to malicious input.\n    ///\n    /// In the case of `cmd.exe` this is especially important because a malicious\n    /// argument can potentially run arbitrary shell commands.\n    ///\n    /// See [Windows argument splitting][windows-args] for more details\n    /// or [`raw_arg`] for manually implementing non-standard argument encoding.\n    ///\n    /// [`raw_arg`]: crate::os::windows::process::CommandExt::raw_arg\n    /// [windows-args]: crate::process#windows-argument-splitting\n    ///\n    /// </div>\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```no_run\n    /// use std::process::Command;\n    ///\n    /// Command::new(\"ls\")\n    ///     .args([\"-l\", \"-a\"])\n    ///     .spawn()\n    ///     .expect(\"ls command failed to start\");\n    /// ```\n    #[stable(feature = \"process\", since = \"1.0.0\")]\n    pub fn args<I, S>(&mut self, args: I) -> &mut Command\n    where\n        I: IntoIterator<Item = S>,\n        S: AsRef<OsStr>,\n    {\n        for arg in args {\n            self.arg(arg.as_ref());\n        }\n        self\n    }\n\n    /// Inserts or updates an explicit environment variable mapping.\n    ///\n    /// This method allows you to add an environment variable mapping to the spawned process or\n    /// overwrite a previously set value. You can use [`Command::envs`] to set multiple environment\n    /// variables simultaneously.\n    ///\n    /// Child processes will inherit environment variables from their parent process by default.\n    /// Environment variables explicitly set using [`Command::env`] take precedence over inherited\n    /// variables. You can disable environment variable inheritance entirely using\n    /// [`Command::env_clear`] or for a single key using [`Command::env_remove`].\n    ///\n    /// Note that environment variable names are case-insensitive (but\n    /// case-preserving) on Windows and case-sensitive on all other platforms.\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```no_run\n    /// use std::process::Command;\n    ///\n    /// Command::new(\"ls\")\n    ///     .env(\"PATH\", \"/bin\")\n    ///     .spawn()\n    ///     .expect(\"ls command failed to start\");\n    /// ```\n    #[stable(feature = \"process\", since = \"1.0.0\")]\n    pub fn env<K, V>(&mut self, key: K, val: V) -> &mut Command\n    where\n        K: AsRef<OsStr>,\n        V: AsRef<OsStr>,\n    {\n        self.inner.env_mut().set(key.as_ref(), val.as_ref());\n        self\n    }\n\n    /// Inserts or updates multiple explicit environment variable mappings.\n    ///\n    /// This method allows you to add multiple environment variable mappings to the spawned process\n    /// or overwrite previously set values. You can use [`Command::env`] to set a single environment\n    /// variable.\n    ///\n    /// Child processes will inherit environment variables from their parent process by default.\n    /// Environment variables explicitly set using [`Command::envs`] take precedence over inherited\n    /// variables. You can disable environment variable inheritance entirely using\n    /// [`Command::env_clear`] or for a single key using [`Command::env_remove`].\n    ///\n    /// Note that environment variable names are case-insensitive (but case-preserving) on Windows\n    /// and case-sensitive on all other platforms.\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```no_run\n    /// use std::process::{Command, Stdio};\n    /// use std::env;\n    /// use std::collections::HashMap;\n    ///\n    /// let filtered_env : HashMap<String, String> =\n    ///     env::vars().filter(|&(ref k, _)|\n    ///         k == \"TERM\" || k == \"TZ\" || k == \"LANG\" || k == \"PATH\"\n    ///     ).collect();\n    ///\n    /// Command::new(\"printenv\")\n    ///     .stdin(Stdio::null())\n    ///     .stdout(Stdio::inherit())\n    ///     .env_clear()\n    ///     .envs(&filtered_env)\n    ///     .spawn()\n    ///     .expect(\"printenv failed to start\");\n    /// ```\n    #[stable(feature = \"command_envs\", since = \"1.19.0\")]\n    pub fn envs<I, K, V>(&mut self, vars: I) -> &mut Command\n    where\n        I: IntoIterator<Item = (K, V)>,\n        K: AsRef<OsStr>,\n        V: AsRef<OsStr>,\n    {\n        for (ref key, ref val) in vars {\n            self.inner.env_mut().set(key.as_ref(), val.as_ref());\n        }\n        self\n    }\n\n    /// Removes an explicitly set environment variable and prevents inheriting it from a parent\n    /// process.\n    ///\n    /// This method will remove the explicit value of an environment variable set via\n    /// [`Command::env`] or [`Command::envs`]. In addition, it will prevent the spawned child\n    /// process from inheriting that environment variable from its parent process.\n    ///\n    /// After calling [`Command::env_remove`], the value associated with its key from\n    /// [`Command::get_envs`] will be [`None`].\n    ///\n    /// To clear all explicitly set environment variables and disable all environment variable\n    /// inheritance, you can use [`Command::env_clear`].\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```no_run\n    /// use std::process::Command;\n    ///\n    /// Command::new(\"ls\")\n    ///     .env_remove(\"PATH\")\n    ///     .spawn()\n    ///     .expect(\"ls command failed to start\");\n    /// ```\n    #[stable(feature = \"process\", since = \"1.0.0\")]\n    pub fn env_remove<K: AsRef<OsStr>>(&mut self, key: K) -> &mut Command {\n        self.inner.env_mut().remove(key.as_ref());\n        self\n    }\n\n    /// Clears all explicitly set environment variables and prevents inheriting any parent process\n    /// environment variables.\n    ///\n    /// This method will remove all explicitly added environment variables set via [`Command::env`]\n    /// or [`Command::envs`]. In addition, it will prevent the spawned child process from inheriting\n    /// any environment variable from its parent process.\n    ///\n    /// After calling [`Command::env_clear`], the iterator from [`Command::get_envs`] will be\n    /// empty.\n    ///\n    /// You can use [`Command::env_remove`] to clear a single mapping.\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```no_run\n    /// use std::process::Command;\n    ///\n    /// Command::new(\"ls\")\n    ///     .env_clear()\n    ///     .spawn()\n    ///     .expect(\"ls command failed to start\");\n    /// ```\n    #[stable(feature = \"process\", since = \"1.0.0\")]\n    pub fn env_clear(&mut self) -> &mut Command {\n        self.inner.env_mut().clear();\n        self\n    }\n\n    /// Sets the working directory for the child process.\n    ///\n    /// # Platform-specific behavior\n    ///\n    /// If the program path is relative (e.g., `\"./script.sh\"`), it's ambiguous\n    /// whether it should be interpreted relative to the parent's working\n    /// directory or relative to `current_dir`. The behavior in this case is\n    /// platform specific and unstable, and it's recommended to use\n    /// [`canonicalize`] to get an absolute program path instead.\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```no_run\n    /// use std::process::Command;\n    ///\n    /// Command::new(\"ls\")\n    ///     .current_dir(\"/bin\")\n    ///     .spawn()\n    ///     .expect(\"ls command failed to start\");\n    /// ```\n    ///\n    /// [`canonicalize`]: crate::fs::canonicalize\n    #[stable(feature = \"process\", since = \"1.0.0\")]\n    pub fn current_dir<P: AsRef<Path>>(&mut self, dir: P) -> &mut Command {\n        self.inner.cwd(dir.as_ref().as_ref());\n        self\n    }\n\n    /// Configuration for the child process's standard input (stdin) handle.\n    ///\n    /// Defaults to [`inherit`] when used with [`spawn`] or [`status`], and\n    /// defaults to [`piped`] when used with [`output`].\n    ///\n    /// [`inherit`]: Stdio::inherit\n    /// [`piped`]: Stdio::piped\n    /// [`spawn`]: Self::spawn\n    /// [`status`]: Self::status\n    /// [`output`]: Self::output\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```no_run\n    /// use std::process::{Command, Stdio};\n    ///\n    /// Command::new(\"ls\")\n    ///     .stdin(Stdio::null())\n    ///     .spawn()\n    ///     .expect(\"ls command failed to start\");\n    /// ```\n    #[stable(feature = \"process\", since = \"1.0.0\")]\n    pub fn stdin<T: Into<Stdio>>(&mut self, cfg: T) -> &mut Command {\n        self.inner.stdin(cfg.into().0);\n        self\n    }\n\n    /// Configuration for the child process's standard output (stdout) handle.\n    ///\n    /// Defaults to [`inherit`] when used with [`spawn`] or [`status`], and\n    /// defaults to [`piped`] when used with [`output`].\n    ///\n    /// [`inherit`]: Stdio::inherit\n    /// [`piped`]: Stdio::piped\n    /// [`spawn`]: Self::spawn\n    /// [`status`]: Self::status\n    /// [`output`]: Self::output\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```no_run\n    /// use std::process::{Command, Stdio};\n    ///\n    /// Command::new(\"ls\")\n    ///     .stdout(Stdio::null())\n    ///     .spawn()\n    ///     .expect(\"ls command failed to start\");\n    /// ```\n    #[stable(feature = \"process\", since = \"1.0.0\")]\n    pub fn stdout<T: Into<Stdio>>(&mut self, cfg: T) -> &mut Command {\n        self.inner.stdout(cfg.into().0);\n        self\n    }\n\n    /// Configuration for the child process's standard error (stderr) handle.\n    ///\n    /// Defaults to [`inherit`] when used with [`spawn`] or [`status`], and\n    /// defaults to [`piped`] when used with [`output`].\n    ///\n    /// [`inherit`]: Stdio::inherit\n    /// [`piped`]: Stdio::piped\n    /// [`spawn`]: Self::spawn\n    /// [`status`]: Self::status\n    /// [`output`]: Self::output\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```no_run\n    /// use std::process::{Command, Stdio};\n    ///\n    /// Command::new(\"ls\")\n    ///     .stderr(Stdio::null())\n    ///     .spawn()\n    ///     .expect(\"ls command failed to start\");\n    /// ```\n    #[stable(feature = \"process\", since = \"1.0.0\")]\n    pub fn stderr<T: Into<Stdio>>(&mut self, cfg: T) -> &mut Command {\n        self.inner.stderr(cfg.into().0);\n        self\n    }\n\n    /// Executes the command as a child process, returning a handle to it.\n    ///\n    /// By default, stdin, stdout and stderr are inherited from the parent.\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```no_run\n    /// use std::process::Command;\n    ///\n    /// Command::new(\"ls\")\n    ///     .spawn()\n    ///     .expect(\"ls command failed to start\");\n    /// ```\n    #[stable(feature = \"process\", since = \"1.0.0\")]\n    pub fn spawn(&mut self) -> io::Result<Child> {\n        self.inner.spawn(imp::Stdio::Inherit, true).map(Child::from_inner)\n    }\n\n    /// Executes the command as a child process, waiting for it to finish and\n    /// collecting all of its output.\n    ///\n    /// By default, stdout and stderr are captured (and used to provide the\n    /// resulting output). Stdin is not inherited from the parent and any\n    /// attempt by the child process to read from the stdin stream will result\n    /// in the stream immediately closing.\n    ///\n    /// # Examples\n    ///\n    /// ```should_panic\n    /// use std::process::Command;\n    /// use std::io::{self, Write};\n    /// let output = Command::new(\"/bin/cat\")\n    ///     .arg(\"file.txt\")\n    ///     .output()\n    ///     .expect(\"failed to execute process\");\n    ///\n    /// println!(\"status: {}\", output.status);\n    /// io::stdout().write_all(&output.stdout).unwrap();\n    /// io::stderr().write_all(&output.stderr).unwrap();\n    ///\n    /// assert!(output.status.success());\n    /// ```\n    #[stable(feature = \"process\", since = \"1.0.0\")]\n    pub fn output(&mut self) -> io::Result<Output> {\n        let (status, stdout, stderr) = self.inner.output()?;\n        Ok(Output { status: ExitStatus(status), stdout, stderr })\n    }\n\n    /// Executes a command as a child process, waiting for it to finish and\n    /// collecting its status.\n    ///\n    /// By default, stdin, stdout and stderr are inherited from the parent.\n    ///\n    /// # Examples\n    ///\n    /// ```should_panic\n    /// use std::process::Command;\n    ///\n    /// let status = Command::new(\"/bin/cat\")\n    ///     .arg(\"file.txt\")\n    ///     .status()\n    ///     .expect(\"failed to execute process\");\n    ///\n    /// println!(\"process finished with: {status}\");\n    ///\n    /// assert!(status.success());\n    /// ```\n    #[stable(feature = \"process\", since = \"1.0.0\")]\n    pub fn status(&mut self) -> io::Result<ExitStatus> {\n        self.inner\n            .spawn(imp::Stdio::Inherit, true)\n            .map(Child::from_inner)\n            .and_then(|mut p| p.wait())\n    }\n\n    /// Returns the path to the program that was given to [`Command::new`].\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::process::Command;\n    ///\n    /// let cmd = Command::new(\"echo\");\n    /// assert_eq!(cmd.get_program(), \"echo\");\n    /// ```\n    #[must_use]\n    #[stable(feature = \"command_access\", since = \"1.57.0\")]\n    pub fn get_program(&self) -> &OsStr {\n        self.inner.get_program()\n    }\n\n    /// Returns an iterator of the arguments that will be passed to the program.\n    ///\n    /// This does not include the path to the program as the first argument;\n    /// it only includes the arguments specified with [`Command::arg`] and\n    /// [`Command::args`].\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::ffi::OsStr;\n    /// use std::process::Command;\n    ///\n    /// let mut cmd = Command::new(\"echo\");\n    /// cmd.arg(\"first\").arg(\"second\");\n    /// let args: Vec<&OsStr> = cmd.get_args().collect();\n    /// assert_eq!(args, &[\"first\", \"second\"]);\n    /// ```\n    #[stable(feature = \"command_access\", since = \"1.57.0\")]\n    pub fn get_args(&self) -> CommandArgs<'_> {\n        CommandArgs { inner: self.inner.get_args() }\n    }\n\n    /// Returns an iterator of the environment variables explicitly set for the child process.\n    ///\n    /// Environment variables explicitly set using [`Command::env`], [`Command::envs`], and\n    /// [`Command::env_remove`] can be retrieved with this method.\n    ///\n    /// Note that this output does not include environment variables inherited from the parent\n    /// process.\n    ///\n    /// Each element is a tuple key/value pair `(&OsStr, Option<&OsStr>)`. A [`None`] value\n    /// indicates its key was explicitly removed via [`Command::env_remove`]. The associated key for\n    /// the [`None`] value will no longer inherit from its parent process.\n    ///\n    /// An empty iterator can indicate that no explicit mappings were added or that\n    /// [`Command::env_clear`] was called. After calling [`Command::env_clear`], the child process\n    /// will not inherit any environment variables from its parent process.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::ffi::OsStr;\n    /// use std::process::Command;\n    ///\n    /// let mut cmd = Command::new(\"ls\");\n    /// cmd.env(\"TERM\", \"dumb\").env_remove(\"TZ\");\n    /// let envs: Vec<(&OsStr, Option<&OsStr>)> = cmd.get_envs().collect();\n    /// assert_eq!(envs, &[\n    ///     (OsStr::new(\"TERM\"), Some(OsStr::new(\"dumb\"))),\n    ///     (OsStr::new(\"TZ\"), None)\n    /// ]);\n    /// ```\n    #[stable(feature = \"command_access\", since = \"1.57.0\")]\n    pub fn get_envs(&self) -> CommandEnvs<'_> {\n        self.inner.get_envs()\n    }\n\n    /// Returns the working directory for the child process.\n    ///\n    /// This returns [`None`] if the working directory will not be changed.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::path::Path;\n    /// use std::process::Command;\n    ///\n    /// let mut cmd = Command::new(\"ls\");\n    /// assert_eq!(cmd.get_current_dir(), None);\n    /// cmd.current_dir(\"/bin\");\n    /// assert_eq!(cmd.get_current_dir(), Some(Path::new(\"/bin\")));\n    /// ```\n    #[must_use]\n    #[stable(feature = \"command_access\", since = \"1.57.0\")]\n    pub fn get_current_dir(&self) -> Option<&Path> {\n        self.inner.get_current_dir()\n    }\n}\n\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl fmt::Debug for Command {\n    /// Format the program and arguments of a Command for display. Any\n    /// non-utf8 data is lossily converted using the utf8 replacement\n    /// character.\n    ///\n    /// The default format approximates a shell invocation of the program along with its\n    /// arguments. It does not include most of the other command properties. The output is not guaranteed to work\n    /// (e.g. due to lack of shell-escaping or differences in path resolution).\n    /// On some platforms you can use [the alternate syntax] to show more fields.\n    ///\n    /// Note that the debug implementation is platform-specific.\n    ///\n    /// [the alternate syntax]: fmt#sign0\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        self.inner.fmt(f)\n    }\n}\n\nimpl AsInner<imp::Command> for Command {\n    #[inline]\n    fn as_inner(&self) -> &imp::Command {\n        &self.inner\n    }\n}\n\nimpl AsInnerMut<imp::Command> for Command {\n    #[inline]\n    fn as_inner_mut(&mut self) -> &mut imp::Command {\n        &mut self.inner\n    }\n}\n\n/// An iterator over the command arguments.\n///\n/// This struct is created by [`Command::get_args`]. See its documentation for\n/// more.\n#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n#[stable(feature = \"command_access\", since = \"1.57.0\")]\n#[derive(Debug)]\npub struct CommandArgs<'a> {\n    inner: imp::CommandArgs<'a>,\n}\n\n#[stable(feature = \"command_access\", since = \"1.57.0\")]\nimpl<'a> Iterator for CommandArgs<'a> {\n    type Item = &'a OsStr;\n    fn next(&mut self) -> Option<&'a OsStr> {\n        self.inner.next()\n    }\n    fn size_hint(&self) -> (usize, Option<usize>) {\n        self.inner.size_hint()\n    }\n}\n\n#[stable(feature = \"command_access\", since = \"1.57.0\")]\nimpl<'a> ExactSizeIterator for CommandArgs<'a> {\n    fn len(&self) -> usize {\n        self.inner.len()\n    }\n    fn is_empty(&self) -> bool {\n        self.inner.is_empty()\n    }\n}\n\n/// The output of a finished process.\n///\n/// This is returned in a Result by either the [`output`] method of a\n/// [`Command`], or the [`wait_with_output`] method of a [`Child`]\n/// process.\n///\n/// [`output`]: Command::output\n/// [`wait_with_output`]: Child::wait_with_output\n#[derive(PartialEq, Eq, Clone)]\n#[stable(feature = \"process\", since = \"1.0.0\")]\npub struct Output {\n    /// The status (exit code) of the process.\n    #[stable(feature = \"process\", since = \"1.0.0\")]\n    pub status: ExitStatus,\n    /// The data that the process wrote to stdout.\n    #[stable(feature = \"process\", since = \"1.0.0\")]\n    pub stdout: Vec<u8>,\n    /// The data that the process wrote to stderr.\n    #[stable(feature = \"process\", since = \"1.0.0\")]\n    pub stderr: Vec<u8>,\n}\n\n// If either stderr or stdout are valid utf8 strings it prints the valid\n// strings, otherwise it prints the byte sequence instead\n#[stable(feature = \"process_output_debug\", since = \"1.7.0\")]\nimpl fmt::Debug for Output {\n    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n        let stdout_utf8 = str::from_utf8(&self.stdout);\n        let stdout_debug: &dyn fmt::Debug = match stdout_utf8 {\n            Ok(ref str) => str,\n            Err(_) => &self.stdout,\n        };\n\n        let stderr_utf8 = str::from_utf8(&self.stderr);\n        let stderr_debug: &dyn fmt::Debug = match stderr_utf8 {\n            Ok(ref str) => str,\n            Err(_) => &self.stderr,\n        };\n\n        fmt.debug_struct(\"Output\")\n            .field(\"status\", &self.status)\n            .field(\"stdout\", stdout_debug)\n            .field(\"stderr\", stderr_debug)\n            .finish()\n    }\n}\n\n/// Describes what to do with a standard I/O stream for a child process when\n/// passed to the [`stdin`], [`stdout`], and [`stderr`] methods of [`Command`].\n///\n/// [`stdin`]: Command::stdin\n/// [`stdout`]: Command::stdout\n/// [`stderr`]: Command::stderr\n#[stable(feature = \"process\", since = \"1.0.0\")]\npub struct Stdio(imp::Stdio);\n\nimpl Stdio {\n    /// A new pipe should be arranged to connect the parent and child processes.\n    ///\n    /// # Examples\n    ///\n    /// With stdout:\n    ///\n    /// ```no_run\n    /// use std::process::{Command, Stdio};\n    ///\n    /// let output = Command::new(\"echo\")\n    ///     .arg(\"Hello, world!\")\n    ///     .stdout(Stdio::piped())\n    ///     .output()\n    ///     .expect(\"Failed to execute command\");\n    ///\n    /// assert_eq!(String::from_utf8_lossy(&output.stdout), \"Hello, world!\\n\");\n    /// // Nothing echoed to console\n    /// ```\n    ///\n    /// With stdin:\n    ///\n    /// ```no_run\n    /// use std::io::Write;\n    /// use std::process::{Command, Stdio};\n    ///\n    /// let mut child = Command::new(\"rev\")\n    ///     .stdin(Stdio::piped())\n    ///     .stdout(Stdio::piped())\n    ///     .spawn()\n    ///     .expect(\"Failed to spawn child process\");\n    ///\n    /// let mut stdin = child.stdin.take().expect(\"Failed to open stdin\");\n    /// std::thread::spawn(move || {\n    ///     stdin.write_all(\"Hello, world!\".as_bytes()).expect(\"Failed to write to stdin\");\n    /// });\n    ///\n    /// let output = child.wait_with_output().expect(\"Failed to read stdout\");\n    /// assert_eq!(String::from_utf8_lossy(&output.stdout), \"!dlrow ,olleH\");\n    /// ```\n    ///\n    /// Writing more than a pipe buffer's worth of input to stdin without also reading\n    /// stdout and stderr at the same time may cause a deadlock.\n    /// This is an issue when running any program that doesn't guarantee that it reads\n    /// its entire stdin before writing more than a pipe buffer's worth of output.\n    /// The size of a pipe buffer varies on different targets.\n    ///\n    #[must_use]\n    #[stable(feature = \"process\", since = \"1.0.0\")]\n    pub fn piped() -> Stdio {\n        Stdio(imp::Stdio::MakePipe)\n    }\n\n    /// The child inherits from the corresponding parent descriptor.\n    ///\n    /// # Examples\n    ///\n    /// With stdout:\n    ///\n    /// ```no_run\n    /// use std::process::{Command, Stdio};\n    ///\n    /// let output = Command::new(\"echo\")\n    ///     .arg(\"Hello, world!\")\n    ///     .stdout(Stdio::inherit())\n    ///     .output()\n    ///     .expect(\"Failed to execute command\");\n    ///\n    /// assert_eq!(String::from_utf8_lossy(&output.stdout), \"\");\n    /// // \"Hello, world!\" echoed to console\n    /// ```\n    ///\n    /// With stdin:\n    ///\n    /// ```no_run\n    /// use std::process::{Command, Stdio};\n    /// use std::io::{self, Write};\n    ///\n    /// let output = Command::new(\"rev\")\n    ///     .stdin(Stdio::inherit())\n    ///     .stdout(Stdio::piped())\n    ///     .output()\n    ///     .expect(\"Failed to execute command\");\n    ///\n    /// print!(\"You piped in the reverse of: \");\n    /// io::stdout().write_all(&output.stdout).unwrap();\n    /// ```\n    #[must_use]\n    #[stable(feature = \"process\", since = \"1.0.0\")]\n    pub fn inherit() -> Stdio {\n        Stdio(imp::Stdio::Inherit)\n    }\n\n    /// This stream will be ignored. This is the equivalent of attaching the\n    /// stream to `/dev/null`.\n    ///\n    /// # Examples\n    ///\n    /// With stdout:\n    ///\n    /// ```no_run\n    /// use std::process::{Command, Stdio};\n    ///\n    /// let output = Command::new(\"echo\")\n    ///     .arg(\"Hello, world!\")\n    ///     .stdout(Stdio::null())\n    ///     .output()\n    ///     .expect(\"Failed to execute command\");\n    ///\n    /// assert_eq!(String::from_utf8_lossy(&output.stdout), \"\");\n    /// // Nothing echoed to console\n    /// ```\n    ///\n    /// With stdin:\n    ///\n    /// ```no_run\n    /// use std::process::{Command, Stdio};\n    ///\n    /// let output = Command::new(\"rev\")\n    ///     .stdin(Stdio::null())\n    ///     .stdout(Stdio::piped())\n    ///     .output()\n    ///     .expect(\"Failed to execute command\");\n    ///\n    /// assert_eq!(String::from_utf8_lossy(&output.stdout), \"\");\n    /// // Ignores any piped-in input\n    /// ```\n    #[must_use]\n    #[stable(feature = \"process\", since = \"1.0.0\")]\n    pub fn null() -> Stdio {\n        Stdio(imp::Stdio::Null)\n    }\n\n    /// Returns `true` if this requires [`Command`] to create a new pipe.\n    ///\n    /// # Example\n    ///\n    /// ```\n    /// #![feature(stdio_makes_pipe)]\n    /// use std::process::Stdio;\n    ///\n    /// let io = Stdio::piped();\n    /// assert_eq!(io.makes_pipe(), true);\n    /// ```\n    #[unstable(feature = \"stdio_makes_pipe\", issue = \"98288\")]\n    pub fn makes_pipe(&self) -> bool {\n        matches!(self.0, imp::Stdio::MakePipe)\n    }\n}\n\nimpl FromInner<imp::Stdio> for Stdio {\n    fn from_inner(inner: imp::Stdio) -> Stdio {\n        Stdio(inner)\n    }\n}\n\n#[stable(feature = \"std_debug\", since = \"1.16.0\")]\nimpl fmt::Debug for Stdio {\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        f.debug_struct(\"Stdio\").finish_non_exhaustive()\n    }\n}\n\n#[stable(feature = \"stdio_from\", since = \"1.20.0\")]\nimpl From<ChildStdin> for Stdio {\n    /// Converts a [`ChildStdin`] into a [`Stdio`].\n    ///\n    /// # Examples\n    ///\n    /// `ChildStdin` will be converted to `Stdio` using `Stdio::from` under the hood.\n    ///\n    /// ```rust,no_run\n    /// use std::process::{Command, Stdio};\n    ///\n    /// let reverse = Command::new(\"rev\")\n    ///     .stdin(Stdio::piped())\n    ///     .spawn()\n    ///     .expect(\"failed reverse command\");\n    ///\n    /// let _echo = Command::new(\"echo\")\n    ///     .arg(\"Hello, world!\")\n    ///     .stdout(reverse.stdin.unwrap()) // Converted into a Stdio here\n    ///     .output()\n    ///     .expect(\"failed echo command\");\n    ///\n    /// // \"!dlrow ,olleH\" echoed to console\n    /// ```\n    fn from(child: ChildStdin) -> Stdio {\n        Stdio::from_inner(child.into_inner().into())\n    }\n}\n\n#[stable(feature = \"stdio_from\", since = \"1.20.0\")]\nimpl From<ChildStdout> for Stdio {\n    /// Converts a [`ChildStdout`] into a [`Stdio`].\n    ///\n    /// # Examples\n    ///\n    /// `ChildStdout` will be converted to `Stdio` using `Stdio::from` under the hood.\n    ///\n    /// ```rust,no_run\n    /// use std::process::{Command, Stdio};\n    ///\n    /// let hello = Command::new(\"echo\")\n    ///     .arg(\"Hello, world!\")\n    ///     .stdout(Stdio::piped())\n    ///     .spawn()\n    ///     .expect(\"failed echo command\");\n    ///\n    /// let reverse = Command::new(\"rev\")\n    ///     .stdin(hello.stdout.unwrap())  // Converted into a Stdio here\n    ///     .output()\n    ///     .expect(\"failed reverse command\");\n    ///\n    /// assert_eq!(reverse.stdout, b\"!dlrow ,olleH\\n\");\n    /// ```\n    fn from(child: ChildStdout) -> Stdio {\n        Stdio::from_inner(child.into_inner().into())\n    }\n}\n\n#[stable(feature = \"stdio_from\", since = \"1.20.0\")]\nimpl From<ChildStderr> for Stdio {\n    /// Converts a [`ChildStderr`] into a [`Stdio`].\n    ///\n    /// # Examples\n    ///\n    /// ```rust,no_run\n    /// use std::process::{Command, Stdio};\n    ///\n    /// let reverse = Command::new(\"rev\")\n    ///     .arg(\"non_existing_file.txt\")\n    ///     .stderr(Stdio::piped())\n    ///     .spawn()\n    ///     .expect(\"failed reverse command\");\n    ///\n    /// let cat = Command::new(\"cat\")\n    ///     .arg(\"-\")\n    ///     .stdin(reverse.stderr.unwrap()) // Converted into a Stdio here\n    ///     .output()\n    ///     .expect(\"failed echo command\");\n    ///\n    /// assert_eq!(\n    ///     String::from_utf8_lossy(&cat.stdout),\n    ///     \"rev: cannot open non_existing_file.txt: No such file or directory\\n\"\n    /// );\n    /// ```\n    fn from(child: ChildStderr) -> Stdio {\n        Stdio::from_inner(child.into_inner().into())\n    }\n}\n\n#[stable(feature = \"stdio_from\", since = \"1.20.0\")]\nimpl From<fs::File> for Stdio {\n    /// Converts a [`File`](fs::File) into a [`Stdio`].\n    ///\n    /// # Examples\n    ///\n    /// `File` will be converted to `Stdio` using `Stdio::from` under the hood.\n    ///\n    /// ```rust,no_run\n    /// use std::fs::File;\n    /// use std::process::Command;\n    ///\n    /// // With the `foo.txt` file containing \"Hello, world!\"\n    /// let file = File::open(\"foo.txt\").unwrap();\n    ///\n    /// let reverse = Command::new(\"rev\")\n    ///     .stdin(file)  // Implicit File conversion into a Stdio\n    ///     .output()\n    ///     .expect(\"failed reverse command\");\n    ///\n    /// assert_eq!(reverse.stdout, b\"!dlrow ,olleH\");\n    /// ```\n    fn from(file: fs::File) -> Stdio {\n        Stdio::from_inner(file.into_inner().into())\n    }\n}\n\n#[stable(feature = \"stdio_from_stdio\", since = \"1.74.0\")]\nimpl From<io::Stdout> for Stdio {\n    /// Redirect command stdout/stderr to our stdout\n    ///\n    /// # Examples\n    ///\n    /// ```rust\n    /// #![feature(exit_status_error)]\n    /// use std::io;\n    /// use std::process::Command;\n    ///\n    /// # fn test() -> Result<(), Box<dyn std::error::Error>> {\n    /// let output = Command::new(\"whoami\")\n    // \"whoami\" is a command which exists on both Unix and Windows,\n    // and which succeeds, producing some stdout output but no stderr.\n    ///     .stdout(io::stdout())\n    ///     .output()?;\n    /// output.status.exit_ok()?;\n    /// assert!(output.stdout.is_empty());\n    /// # Ok(())\n    /// # }\n    /// #\n    /// # if cfg!(unix) {\n    /// #     test().unwrap();\n    /// # }\n    /// ```\n    fn from(inherit: io::Stdout) -> Stdio {\n        Stdio::from_inner(inherit.into())\n    }\n}\n\n#[stable(feature = \"stdio_from_stdio\", since = \"1.74.0\")]\nimpl From<io::Stderr> for Stdio {\n    /// Redirect command stdout/stderr to our stderr\n    ///\n    /// # Examples\n    ///\n    /// ```rust\n    /// #![feature(exit_status_error)]\n    /// use std::io;\n    /// use std::process::Command;\n    ///\n    /// # fn test() -> Result<(), Box<dyn std::error::Error>> {\n    /// let output = Command::new(\"whoami\")\n    ///     .stdout(io::stderr())\n    ///     .output()?;\n    /// output.status.exit_ok()?;\n    /// assert!(output.stdout.is_empty());\n    /// # Ok(())\n    /// # }\n    /// #\n    /// # if cfg!(unix) {\n    /// #     test().unwrap();\n    /// # }\n    /// ```\n    fn from(inherit: io::Stderr) -> Stdio {\n        Stdio::from_inner(inherit.into())\n    }\n}\n\n/// Describes the result of a process after it has terminated.\n///\n/// This `struct` is used to represent the exit status or other termination of a child process.\n/// Child processes are created via the [`Command`] struct and their exit\n/// status is exposed through the [`status`] method, or the [`wait`] method\n/// of a [`Child`] process.\n///\n/// An `ExitStatus` represents every possible disposition of a process.  On Unix this\n/// is the **wait status**.  It is *not* simply an *exit status* (a value passed to `exit`).\n///\n/// For proper error reporting of failed processes, print the value of `ExitStatus` or\n/// `ExitStatusError` using their implementations of [`Display`](crate::fmt::Display).\n///\n/// # Differences from `ExitCode`\n///\n/// [`ExitCode`] is intended for terminating the currently running process, via\n/// the `Termination` trait, in contrast to `ExitStatus`, which represents the\n/// termination of a child process. These APIs are separate due to platform\n/// compatibility differences and their expected usage; it is not generally\n/// possible to exactly reproduce an `ExitStatus` from a child for the current\n/// process after the fact.\n///\n/// [`status`]: Command::status\n/// [`wait`]: Child::wait\n//\n// We speak slightly loosely (here and in various other places in the stdlib docs) about `exit`\n// vs `_exit`.  Naming of Unix system calls is not standardised across Unices, so terminology is a\n// matter of convention and tradition.  For clarity we usually speak of `exit`, even when we might\n// mean an underlying system call such as `_exit`.\n#[derive(PartialEq, Eq, Clone, Copy, Debug)]\n#[stable(feature = \"process\", since = \"1.0.0\")]\npub struct ExitStatus(imp::ExitStatus);\n\n/// The default value is one which indicates successful completion.\n#[stable(feature = \"process_exitstatus_default\", since = \"1.73.0\")]\nimpl Default for ExitStatus {\n    fn default() -> Self {\n        // Ideally this would be done by ExitCode::default().into() but that is complicated.\n        ExitStatus::from_inner(imp::ExitStatus::default())\n    }\n}\n\n/// Allows extension traits within `std`.\n#[unstable(feature = \"sealed\", issue = \"none\")]\nimpl crate::sealed::Sealed for ExitStatus {}\n\nimpl ExitStatus {\n    /// Was termination successful?  Returns a `Result`.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// #![feature(exit_status_error)]\n    /// # if cfg!(unix) {\n    /// use std::process::Command;\n    ///\n    /// let status = Command::new(\"ls\")\n    ///     .arg(\"/dev/nonexistent\")\n    ///     .status()\n    ///     .expect(\"ls could not be executed\");\n    ///\n    /// println!(\"ls: {status}\");\n    /// status.exit_ok().expect_err(\"/dev/nonexistent could be listed!\");\n    /// # } // cfg!(unix)\n    /// ```\n    #[unstable(feature = \"exit_status_error\", issue = \"84908\")]\n    pub fn exit_ok(&self) -> Result<(), ExitStatusError> {\n        self.0.exit_ok().map_err(ExitStatusError)\n    }\n\n    /// Was termination successful? Signal termination is not considered a\n    /// success, and success is defined as a zero exit status.\n    ///\n    /// # Examples\n    ///\n    /// ```rust,no_run\n    /// use std::process::Command;\n    ///\n    /// let status = Command::new(\"mkdir\")\n    ///     .arg(\"projects\")\n    ///     .status()\n    ///     .expect(\"failed to execute mkdir\");\n    ///\n    /// if status.success() {\n    ///     println!(\"'projects/' directory created\");\n    /// } else {\n    ///     println!(\"failed to create 'projects/' directory: {status}\");\n    /// }\n    /// ```\n    #[must_use]\n    #[stable(feature = \"process\", since = \"1.0.0\")]\n    pub fn success(&self) -> bool {\n        self.0.exit_ok().is_ok()\n    }\n\n    /// Returns the exit code of the process, if any.\n    ///\n    /// In Unix terms the return value is the **exit status**: the value passed to `exit`, if the\n    /// process finished by calling `exit`.  Note that on Unix the exit status is truncated to 8\n    /// bits, and that values that didn't come from a program's call to `exit` may be invented by the\n    /// runtime system (often, for example, 255, 254, 127 or 126).\n    ///\n    /// On Unix, this will return `None` if the process was terminated by a signal.\n    /// [`ExitStatusExt`](crate::os::unix::process::ExitStatusExt) is an\n    /// extension trait for extracting any such signal, and other details, from the `ExitStatus`.\n    ///\n    /// # Examples\n    ///\n    /// ```no_run\n    /// use std::process::Command;\n    ///\n    /// let status = Command::new(\"mkdir\")\n    ///     .arg(\"projects\")\n    ///     .status()\n    ///     .expect(\"failed to execute mkdir\");\n    ///\n    /// match status.code() {\n    ///     Some(code) => println!(\"Exited with status code: {code}\"),\n    ///     None => println!(\"Process terminated by signal\")\n    /// }\n    /// ```\n    #[must_use]\n    #[stable(feature = \"process\", since = \"1.0.0\")]\n    pub fn code(&self) -> Option<i32> {\n        self.0.code()\n    }\n}\n\nimpl AsInner<imp::ExitStatus> for ExitStatus {\n    #[inline]\n    fn as_inner(&self) -> &imp::ExitStatus {\n        &self.0\n    }\n}\n\nimpl FromInner<imp::ExitStatus> for ExitStatus {\n    fn from_inner(s: imp::ExitStatus) -> ExitStatus {\n        ExitStatus(s)\n    }\n}\n\n#[stable(feature = \"process\", since = \"1.0.0\")]\nimpl fmt::Display for ExitStatus {\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        self.0.fmt(f)\n    }\n}\n\n/// Allows extension traits within `std`.\n#[unstable(feature = \"sealed\", issue = \"none\")]\nimpl crate::sealed::Sealed for ExitStatusError {}\n\n/// Describes the result of a process after it has failed\n///\n/// Produced by the [`.exit_ok`](ExitStatus::exit_ok) method on [`ExitStatus`].\n///\n/// # Examples\n///\n/// ```\n/// #![feature(exit_status_error)]\n/// # if cfg!(unix) {\n/// use std::process::{Command, ExitStatusError};\n///\n/// fn run(cmd: &str) -> Result<(),ExitStatusError> {\n///     Command::new(cmd).status().unwrap().exit_ok()?;\n///     Ok(())\n/// }\n///\n/// run(\"true\").unwrap();\n/// run(\"false\").unwrap_err();\n/// # } // cfg!(unix)\n/// ```\n#[derive(PartialEq, Eq, Clone, Copy, Debug)]\n#[unstable(feature = \"exit_status_error\", issue = \"84908\")]\n// The definition of imp::ExitStatusError should ideally be such that\n// Result<(), imp::ExitStatusError> has an identical representation to imp::ExitStatus.\npub struct ExitStatusError(imp::ExitStatusError);\n\n#[unstable(feature = \"exit_status_error\", issue = \"84908\")]\nimpl ExitStatusError {\n    /// Reports the exit code, if applicable, from an `ExitStatusError`.\n    ///\n    /// In Unix terms the return value is the **exit status**: the value passed to `exit`, if the\n    /// process finished by calling `exit`.  Note that on Unix the exit status is truncated to 8\n    /// bits, and that values that didn't come from a program's call to `exit` may be invented by the\n    /// runtime system (often, for example, 255, 254, 127 or 126).\n    ///\n    /// On Unix, this will return `None` if the process was terminated by a signal.  If you want to\n    /// handle such situations specially, consider using methods from\n    /// [`ExitStatusExt`](crate::os::unix::process::ExitStatusExt).\n    ///\n    /// If the process finished by calling `exit` with a nonzero value, this will return\n    /// that exit status.\n    ///\n    /// If the error was something else, it will return `None`.\n    ///\n    /// If the process exited successfully (ie, by calling `exit(0)`), there is no\n    /// `ExitStatusError`.  So the return value from `ExitStatusError::code()` is always nonzero.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// #![feature(exit_status_error)]\n    /// # #[cfg(unix)] {\n    /// use std::process::Command;\n    ///\n    /// let bad = Command::new(\"false\").status().unwrap().exit_ok().unwrap_err();\n    /// assert_eq!(bad.code(), Some(1));\n    /// # } // #[cfg(unix)]\n    /// ```\n    #[must_use]\n    pub fn code(&self) -> Option<i32> {\n        self.code_nonzero().map(Into::into)\n    }\n\n    /// Reports the exit code, if applicable, from an `ExitStatusError`, as a [`NonZero`].\n    ///\n    /// This is exactly like [`code()`](Self::code), except that it returns a <code>[NonZero]<[i32]></code>.\n    ///\n    /// Plain `code`, returning a plain integer, is provided because it is often more convenient.\n    /// The returned value from `code()` is indeed also nonzero; use `code_nonzero()` when you want\n    /// a type-level guarantee of nonzeroness.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// #![feature(exit_status_error)]\n    ///\n    /// # if cfg!(unix) {\n    /// use std::num::NonZero;\n    /// use std::process::Command;\n    ///\n    /// let bad = Command::new(\"false\").status().unwrap().exit_ok().unwrap_err();\n    /// assert_eq!(bad.code_nonzero().unwrap(), NonZero::new(1).unwrap());\n    /// # } // cfg!(unix)\n    /// ```\n    #[must_use]\n    pub fn code_nonzero(&self) -> Option<NonZero<i32>> {\n        self.0.code()\n    }\n\n    /// Converts an `ExitStatusError` (back) to an `ExitStatus`.\n    #[must_use]\n    pub fn into_status(&self) -> ExitStatus {\n        ExitStatus(self.0.into())\n    }\n}\n\n#[unstable(feature = \"exit_status_error\", issue = \"84908\")]\nimpl From<ExitStatusError> for ExitStatus {\n    fn from(error: ExitStatusError) -> Self {\n        Self(error.0.into())\n    }\n}\n\n#[unstable(feature = \"exit_status_error\", issue = \"84908\")]\nimpl fmt::Display for ExitStatusError {\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        write!(f, \"process exited unsuccessfully: {}\", self.into_status())\n    }\n}\n\n#[unstable(feature = \"exit_status_error\", issue = \"84908\")]\nimpl crate::error::Error for ExitStatusError {}\n\n/// This type represents the status code the current process can return\n/// to its parent under normal termination.\n///\n/// `ExitCode` is intended to be consumed only by the standard library (via\n/// [`Termination::report()`]), and intentionally does not provide accessors like\n/// `PartialEq`, `Eq`, or `Hash`. Instead the standard library provides the\n/// canonical `SUCCESS` and `FAILURE` exit codes as well as `From<u8> for\n/// ExitCode` for constructing other arbitrary exit codes.\n///\n/// # Portability\n///\n/// Numeric values used in this type don't have portable meanings, and\n/// different platforms may mask different amounts of them.\n///\n/// For the platform's canonical successful and unsuccessful codes, see\n/// the [`SUCCESS`] and [`FAILURE`] associated items.\n///\n/// [`SUCCESS`]: ExitCode::SUCCESS\n/// [`FAILURE`]: ExitCode::FAILURE\n///\n/// # Differences from `ExitStatus`\n///\n/// `ExitCode` is intended for terminating the currently running process, via\n/// the `Termination` trait, in contrast to [`ExitStatus`], which represents the\n/// termination of a child process. These APIs are separate due to platform\n/// compatibility differences and their expected usage; it is not generally\n/// possible to exactly reproduce an `ExitStatus` from a child for the current\n/// process after the fact.\n///\n/// # Examples\n///\n/// `ExitCode` can be returned from the `main` function of a crate, as it implements\n/// [`Termination`]:\n///\n/// ```\n/// use std::process::ExitCode;\n/// # fn check_foo() -> bool { true }\n///\n/// fn main() -> ExitCode {\n///     if !check_foo() {\n///         return ExitCode::from(42);\n///     }\n///\n///     ExitCode::SUCCESS\n/// }\n/// ```\n#[derive(Clone, Copy, Debug)]\n#[stable(feature = \"process_exitcode\", since = \"1.61.0\")]\npub struct ExitCode(imp::ExitCode);\n\n/// Allows extension traits within `std`.\n#[unstable(feature = \"sealed\", issue = \"none\")]\nimpl crate::sealed::Sealed for ExitCode {}\n\n#[stable(feature = \"process_exitcode\", since = \"1.61.0\")]\nimpl ExitCode {\n    /// The canonical `ExitCode` for successful termination on this platform.\n    ///\n    /// Note that a `()`-returning `main` implicitly results in a successful\n    /// termination, so there's no need to return this from `main` unless\n    /// you're also returning other possible codes.\n    #[stable(feature = \"process_exitcode\", since = \"1.61.0\")]\n    pub const SUCCESS: ExitCode = ExitCode(imp::ExitCode::SUCCESS);\n\n    /// The canonical `ExitCode` for unsuccessful termination on this platform.\n    ///\n    /// If you're only returning this and `SUCCESS` from `main`, consider\n    /// instead returning `Err(_)` and `Ok(())` respectively, which will\n    /// return the same codes (but will also `eprintln!` the error).\n    #[stable(feature = \"process_exitcode\", since = \"1.61.0\")]\n    pub const FAILURE: ExitCode = ExitCode(imp::ExitCode::FAILURE);\n\n    /// Exit the current process with the given `ExitCode`.\n    ///\n    /// Note that this has the same caveats as [`process::exit()`][exit], namely that this function\n    /// terminates the process immediately, so no destructors on the current stack or any other\n    /// thread's stack will be run. If a clean shutdown is needed, it is recommended to simply\n    /// return this ExitCode from the `main` function, as demonstrated in the [type\n    /// documentation](#examples).\n    ///\n    /// # Differences from `process::exit()`\n    ///\n    /// `process::exit()` accepts any `i32` value as the exit code for the process; however, there\n    /// are platforms that only use a subset of that value (see [`process::exit` platform-specific\n    /// behavior][exit#platform-specific-behavior]). `ExitCode` exists because of this; only\n    /// `ExitCode`s that are supported by a majority of our platforms can be created, so those\n    /// problems don't exist (as much) with this method.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// #![feature(exitcode_exit_method)]\n    /// # use std::process::ExitCode;\n    /// # use std::fmt;\n    /// # enum UhOhError { GenericProblem, Specific, WithCode { exit_code: ExitCode, _x: () } }\n    /// # impl fmt::Display for UhOhError {\n    /// #     fn fmt(&self, _: &mut fmt::Formatter<'_>) -> fmt::Result { unimplemented!() }\n    /// # }\n    /// // there's no way to gracefully recover from an UhOhError, so we just\n    /// // print a message and exit\n    /// fn handle_unrecoverable_error(err: UhOhError) -> ! {\n    ///     eprintln!(\"UH OH! {err}\");\n    ///     let code = match err {\n    ///         UhOhError::GenericProblem => ExitCode::FAILURE,\n    ///         UhOhError::Specific => ExitCode::from(3),\n    ///         UhOhError::WithCode { exit_code, .. } => exit_code,\n    ///     };\n    ///     code.exit_process()\n    /// }\n    /// ```\n    #[unstable(feature = \"exitcode_exit_method\", issue = \"97100\")]\n    pub fn exit_process(self) -> ! {\n        exit(self.to_i32())\n    }\n}\n\nimpl ExitCode {\n    // This is private/perma-unstable because ExitCode is opaque; we don't know that i32 will serve\n    // all usecases, for example windows seems to use u32, unix uses the 8-15th bits of an i32, we\n    // likely want to isolate users anything that could restrict the platform specific\n    // representation of an ExitCode\n    //\n    // More info: https://internals.rust-lang.org/t/mini-pre-rfc-redesigning-process-exitstatus/5426\n    /// Convert an `ExitCode` into an i32\n    #[unstable(\n        feature = \"process_exitcode_internals\",\n        reason = \"exposed only for libstd\",\n        issue = \"none\"\n    )]\n    #[inline]\n    #[doc(hidden)]\n    pub fn to_i32(self) -> i32 {\n        self.0.as_i32()\n    }\n}\n\n/// The default value is [`ExitCode::SUCCESS`]\n#[stable(feature = \"process_exitcode_default\", since = \"1.75.0\")]\nimpl Default for ExitCode {\n    fn default() -> Self {\n        ExitCode::SUCCESS\n    }\n}\n\n#[stable(feature = \"process_exitcode\", since = \"1.61.0\")]\nimpl From<u8> for ExitCode {\n    /// Construct an `ExitCode` from an arbitrary u8 value.\n    fn from(code: u8) -> Self {\n        ExitCode(imp::ExitCode::from(code))\n    }\n}\n\nimpl AsInner<imp::ExitCode> for ExitCode {\n    #[inline]\n    fn as_inner(&self) -> &imp::ExitCode {\n        &self.0\n    }\n}\n\nimpl FromInner<imp::ExitCode> for ExitCode {\n    fn from_inner(s: imp::ExitCode) -> ExitCode {\n        ExitCode(s)\n    }\n}\n\nimpl Child {\n    /// Forces the child process to exit. If the child has already exited, `Ok(())`\n    /// is returned.\n    ///\n    /// The mapping to [`ErrorKind`]s is not part of the compatibility contract of the function.\n    ///\n    /// This is equivalent to sending a SIGKILL on Unix platforms.\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```no_run\n    /// use std::process::Command;\n    ///\n    /// let mut command = Command::new(\"yes\");\n    /// if let Ok(mut child) = command.spawn() {\n    ///     child.kill().expect(\"command couldn't be killed\");\n    /// } else {\n    ///     println!(\"yes command didn't start\");\n    /// }\n    /// ```\n    ///\n    /// [`ErrorKind`]: io::ErrorKind\n    /// [`InvalidInput`]: io::ErrorKind::InvalidInput\n    #[stable(feature = \"process\", since = \"1.0.0\")]\n    pub fn kill(&mut self) -> io::Result<()> {\n        self.handle.kill()\n    }\n\n    /// Returns the OS-assigned process identifier associated with this child.\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```no_run\n    /// use std::process::Command;\n    ///\n    /// let mut command = Command::new(\"ls\");\n    /// if let Ok(child) = command.spawn() {\n    ///     println!(\"Child's ID is {}\", child.id());\n    /// } else {\n    ///     println!(\"ls command didn't start\");\n    /// }\n    /// ```\n    #[must_use]\n    #[stable(feature = \"process_id\", since = \"1.3.0\")]\n    pub fn id(&self) -> u32 {\n        self.handle.id()\n    }\n\n    /// Waits for the child to exit completely, returning the status that it\n    /// exited with. This function will continue to have the same return value\n    /// after it has been called at least once.\n    ///\n    /// The stdin handle to the child process, if any, will be closed\n    /// before waiting. This helps avoid deadlock: it ensures that the\n    /// child does not block waiting for input from the parent, while\n    /// the parent waits for the child to exit.\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```no_run\n    /// use std::process::Command;\n    ///\n    /// let mut command = Command::new(\"ls\");\n    /// if let Ok(mut child) = command.spawn() {\n    ///     child.wait().expect(\"command wasn't running\");\n    ///     println!(\"Child has finished its execution!\");\n    /// } else {\n    ///     println!(\"ls command didn't start\");\n    /// }\n    /// ```\n    #[stable(feature = \"process\", since = \"1.0.0\")]\n    pub fn wait(&mut self) -> io::Result<ExitStatus> {\n        drop(self.stdin.take());\n        self.handle.wait().map(ExitStatus)\n    }\n\n    /// Attempts to collect the exit status of the child if it has already\n    /// exited.\n    ///\n    /// This function will not block the calling thread and will only\n    /// check to see if the child process has exited or not. If the child has\n    /// exited then on Unix the process ID is reaped. This function is\n    /// guaranteed to repeatedly return a successful exit status so long as the\n    /// child has already exited.\n    ///\n    /// If the child has exited, then `Ok(Some(status))` is returned. If the\n    /// exit status is not available at this time then `Ok(None)` is returned.\n    /// If an error occurs, then that error is returned.\n    ///\n    /// Note that unlike `wait`, this function will not attempt to drop stdin.\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```no_run\n    /// use std::process::Command;\n    ///\n    /// let mut child = Command::new(\"ls\").spawn().unwrap();\n    ///\n    /// match child.try_wait() {\n    ///     Ok(Some(status)) => println!(\"exited with: {status}\"),\n    ///     Ok(None) => {\n    ///         println!(\"status not ready yet, let's really wait\");\n    ///         let res = child.wait();\n    ///         println!(\"result: {res:?}\");\n    ///     }\n    ///     Err(e) => println!(\"error attempting to wait: {e}\"),\n    /// }\n    /// ```\n    #[stable(feature = \"process_try_wait\", since = \"1.18.0\")]\n    pub fn try_wait(&mut self) -> io::Result<Option<ExitStatus>> {\n        Ok(self.handle.try_wait()?.map(ExitStatus))\n    }\n\n    /// Simultaneously waits for the child to exit and collect all remaining\n    /// output on the stdout/stderr handles, returning an `Output`\n    /// instance.\n    ///\n    /// The stdin handle to the child process, if any, will be closed\n    /// before waiting. This helps avoid deadlock: it ensures that the\n    /// child does not block waiting for input from the parent, while\n    /// the parent waits for the child to exit.\n    ///\n    /// By default, stdin, stdout and stderr are inherited from the parent.\n    /// In order to capture the output into this `Result<Output>` it is\n    /// necessary to create new pipes between parent and child. Use\n    /// `stdout(Stdio::piped())` or `stderr(Stdio::piped())`, respectively.\n    ///\n    /// # Examples\n    ///\n    /// ```should_panic\n    /// use std::process::{Command, Stdio};\n    ///\n    /// let child = Command::new(\"/bin/cat\")\n    ///     .arg(\"file.txt\")\n    ///     .stdout(Stdio::piped())\n    ///     .spawn()\n    ///     .expect(\"failed to execute child\");\n    ///\n    /// let output = child\n    ///     .wait_with_output()\n    ///     .expect(\"failed to wait on child\");\n    ///\n    /// assert!(output.status.success());\n    /// ```\n    ///\n    #[stable(feature = \"process\", since = \"1.0.0\")]\n    pub fn wait_with_output(mut self) -> io::Result<Output> {\n        drop(self.stdin.take());\n\n        let (mut stdout, mut stderr) = (Vec::new(), Vec::new());\n        match (self.stdout.take(), self.stderr.take()) {\n            (None, None) => {}\n            (Some(mut out), None) => {\n                let res = out.read_to_end(&mut stdout);\n                res.unwrap();\n            }\n            (None, Some(mut err)) => {\n                let res = err.read_to_end(&mut stderr);\n                res.unwrap();\n            }\n            (Some(out), Some(err)) => {\n                let res = read2(out.inner, &mut stdout, err.inner, &mut stderr);\n                res.unwrap();\n            }\n        }\n\n        let status = self.wait()?;\n        Ok(Output { status, stdout, stderr })\n    }\n}\n\n/// Terminates the current process with the specified exit code.\n///\n/// This function will never return and will immediately terminate the current\n/// process. The exit code is passed through to the underlying OS and will be\n/// available for consumption by another process.\n///\n/// Note that because this function never returns, and that it terminates the\n/// process, no destructors on the current stack or any other thread's stack\n/// will be run. If a clean shutdown is needed it is recommended to only call\n/// this function at a known point where there are no more destructors left\n/// to run; or, preferably, simply return a type implementing [`Termination`]\n/// (such as [`ExitCode`] or `Result`) from the `main` function and avoid this\n/// function altogether:\n///\n/// ```\n/// # use std::io::Error as MyError;\n/// fn main() -> Result<(), MyError> {\n///     // ...\n///     Ok(())\n/// }\n/// ```\n///\n/// ## Platform-specific behavior\n///\n/// **Unix**: On Unix-like platforms, it is unlikely that all 32 bits of `exit`\n/// will be visible to a parent process inspecting the exit code. On most\n/// Unix-like platforms, only the eight least-significant bits are considered.\n///\n/// For example, the exit code for this example will be `0` on Linux, but `256`\n/// on Windows:\n///\n/// ```no_run\n/// use std::process;\n///\n/// process::exit(0x0100);\n/// ```\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\n#[cfg_attr(not(test), rustc_diagnostic_item = \"process_exit\")]\npub fn exit(code: i32) -> ! {\n    crate::rt::cleanup();\n    crate::sys::os::exit(code)\n}\n\n/// Terminates the process in an abnormal fashion.\n///\n/// The function will never return and will immediately terminate the current\n/// process in a platform specific \"abnormal\" manner.\n///\n/// Note that because this function never returns, and that it terminates the\n/// process, no destructors on the current stack or any other thread's stack\n/// will be run.\n///\n/// Rust IO buffers (eg, from `BufWriter`) will not be flushed.\n/// Likewise, C stdio buffers will (on most platforms) not be flushed.\n///\n/// This is in contrast to the default behaviour of [`panic!`] which unwinds\n/// the current thread's stack and calls all destructors.\n/// When `panic=\"abort\"` is set, either as an argument to `rustc` or in a\n/// crate's Cargo.toml, [`panic!`] and `abort` are similar. However,\n/// [`panic!`] will still call the [panic hook] while `abort` will not.\n///\n/// If a clean shutdown is needed it is recommended to only call\n/// this function at a known point where there are no more destructors left\n/// to run.\n///\n/// The process's termination will be similar to that from the C `abort()`\n/// function.  On Unix, the process will terminate with signal `SIGABRT`, which\n/// typically means that the shell prints \"Aborted\".\n///\n/// # Examples\n///\n/// ```no_run\n/// use std::process;\n///\n/// fn main() {\n///     println!(\"aborting\");\n///\n///     process::abort();\n///\n///     // execution never gets here\n/// }\n/// ```\n///\n/// The `abort` function terminates the process, so the destructor will not\n/// get run on the example below:\n///\n/// ```no_run\n/// use std::process;\n///\n/// struct HasDrop;\n///\n/// impl Drop for HasDrop {\n///     fn drop(&mut self) {\n///         println!(\"This will never be printed!\");\n///     }\n/// }\n///\n/// fn main() {\n///     let _x = HasDrop;\n///     process::abort();\n///     // the destructor implemented for HasDrop will never get run\n/// }\n/// ```\n///\n/// [panic hook]: crate::panic::set_hook\n#[stable(feature = \"process_abort\", since = \"1.17.0\")]\n#[cold]\npub fn abort() -> ! {\n    crate::sys::abort_internal();\n}\n\n/// Returns the OS-assigned process identifier associated with this process.\n///\n/// # Examples\n///\n/// Basic usage:\n///\n/// ```no_run\n/// use std::process;\n///\n/// println!(\"My pid is {}\", process::id());\n/// ```\n///\n///\n#[must_use]\n#[stable(feature = \"getpid\", since = \"1.26.0\")]\npub fn id() -> u32 {\n    crate::sys::os::getpid()\n}\n\n/// A trait for implementing arbitrary return types in the `main` function.\n///\n/// The C-main function only supports returning integers.\n/// So, every type implementing the `Termination` trait has to be converted\n/// to an integer.\n///\n/// The default implementations are returning `libc::EXIT_SUCCESS` to indicate\n/// a successful execution. In case of a failure, `libc::EXIT_FAILURE` is returned.\n///\n/// Because different runtimes have different specifications on the return value\n/// of the `main` function, this trait is likely to be available only on\n/// standard library's runtime for convenience. Other runtimes are not required\n/// to provide similar functionality.\n#[cfg_attr(not(any(test, doctest)), lang = \"termination\")]\n#[stable(feature = \"termination_trait_lib\", since = \"1.61.0\")]\n#[rustc_on_unimplemented(on(\n    cause = \"MainFunctionType\",\n    message = \"`main` has invalid return type `{Self}`\",\n    label = \"`main` can only return types that implement `{Termination}`\"\n))]\npub trait Termination {\n    /// Is called to get the representation of the value as status code.\n    /// This status code is returned to the operating system.\n    #[stable(feature = \"termination_trait_lib\", since = \"1.61.0\")]\n    fn report(self) -> ExitCode;\n}\n\n#[stable(feature = \"termination_trait_lib\", since = \"1.61.0\")]\nimpl Termination for () {\n    #[inline]\n    fn report(self) -> ExitCode {\n        ExitCode::SUCCESS\n    }\n}\n\n#[stable(feature = \"termination_trait_lib\", since = \"1.61.0\")]\nimpl Termination for ! {\n    fn report(self) -> ExitCode {\n        self\n    }\n}\n\n#[stable(feature = \"termination_trait_lib\", since = \"1.61.0\")]\nimpl Termination for Infallible {\n    fn report(self) -> ExitCode {\n        match self {}\n    }\n}\n\n#[stable(feature = \"termination_trait_lib\", since = \"1.61.0\")]\nimpl Termination for ExitCode {\n    #[inline]\n    fn report(self) -> ExitCode {\n        self\n    }\n}\n\n#[stable(feature = \"termination_trait_lib\", since = \"1.61.0\")]\nimpl<T: Termination, E: fmt::Debug> Termination for Result<T, E> {\n    fn report(self) -> ExitCode {\n        match self {\n            Ok(val) => val.report(),\n            Err(err) => {\n                io::attempt_print_to_stderr(format_args_nl!(\"Error: {err:?}\"));\n                ExitCode::FAILURE\n            }\n        }\n    }\n}\n\n```",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Source of the Rust file `library/std/src/process.rs`.\"><title>process.rs - source</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"../../static.files/src-script-e66d777a5a92e9b2.js\"></script><script defer=\"\" src=\"../../src-files1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc src\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"sidebar\"><div class=\"src-sidebar-title\"><h2>Files</h2></div><div id=\"src-sidebar\"><details class=\"dir-entry\"><summary>alloc</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>boxed</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/alloc/boxed/thin.rs.html\">thin.rs</a></div></details><details class=\"dir-entry\"><summary>collections</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>binary_heap</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/alloc/collections/binary_heap/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>btree</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>map</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/alloc/collections/btree/map/entry.rs.html\">entry.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/alloc/collections/btree/append.rs.html\">append.rs</a><a href=\"../../src/alloc/collections/btree/borrow.rs.html\">borrow.rs</a><a href=\"../../src/alloc/collections/btree/dedup_sorted_iter.rs.html\">dedup_sorted_iter.rs</a><a href=\"../../src/alloc/collections/btree/fix.rs.html\">fix.rs</a><a href=\"../../src/alloc/collections/btree/map.rs.html\">map.rs</a><a href=\"../../src/alloc/collections/btree/mem.rs.html\">mem.rs</a><a href=\"../../src/alloc/collections/btree/merge_iter.rs.html\">merge_iter.rs</a><a href=\"../../src/alloc/collections/btree/mod.rs.html\">mod.rs</a><a href=\"../../src/alloc/collections/btree/navigate.rs.html\">navigate.rs</a><a href=\"../../src/alloc/collections/btree/node.rs.html\">node.rs</a><a href=\"../../src/alloc/collections/btree/remove.rs.html\">remove.rs</a><a href=\"../../src/alloc/collections/btree/search.rs.html\">search.rs</a><a href=\"../../src/alloc/collections/btree/set.rs.html\">set.rs</a><a href=\"../../src/alloc/collections/btree/set_val.rs.html\">set_val.rs</a><a href=\"../../src/alloc/collections/btree/split.rs.html\">split.rs</a></div></details><details class=\"dir-entry\"><summary>vec_deque</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/alloc/collections/vec_deque/drain.rs.html\">drain.rs</a><a href=\"../../src/alloc/collections/vec_deque/into_iter.rs.html\">into_iter.rs</a><a href=\"../../src/alloc/collections/vec_deque/iter.rs.html\">iter.rs</a><a href=\"../../src/alloc/collections/vec_deque/iter_mut.rs.html\">iter_mut.rs</a><a href=\"../../src/alloc/collections/vec_deque/macros.rs.html\">macros.rs</a><a href=\"../../src/alloc/collections/vec_deque/mod.rs.html\">mod.rs</a><a href=\"../../src/alloc/collections/vec_deque/spec_extend.rs.html\">spec_extend.rs</a><a href=\"../../src/alloc/collections/vec_deque/spec_from_iter.rs.html\">spec_from_iter.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/alloc/collections/linked_list.rs.html\">linked_list.rs</a><a href=\"../../src/alloc/collections/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>ffi</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/alloc/ffi/c_str.rs.html\">c_str.rs</a><a href=\"../../src/alloc/ffi/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>vec</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/alloc/vec/cow.rs.html\">cow.rs</a><a href=\"../../src/alloc/vec/drain.rs.html\">drain.rs</a><a href=\"../../src/alloc/vec/extract_if.rs.html\">extract_if.rs</a><a href=\"../../src/alloc/vec/in_place_collect.rs.html\">in_place_collect.rs</a><a href=\"../../src/alloc/vec/in_place_drop.rs.html\">in_place_drop.rs</a><a href=\"../../src/alloc/vec/into_iter.rs.html\">into_iter.rs</a><a href=\"../../src/alloc/vec/is_zero.rs.html\">is_zero.rs</a><a href=\"../../src/alloc/vec/mod.rs.html\">mod.rs</a><a href=\"../../src/alloc/vec/partial_eq.rs.html\">partial_eq.rs</a><a href=\"../../src/alloc/vec/set_len_on_drop.rs.html\">set_len_on_drop.rs</a><a href=\"../../src/alloc/vec/spec_extend.rs.html\">spec_extend.rs</a><a href=\"../../src/alloc/vec/spec_from_elem.rs.html\">spec_from_elem.rs</a><a href=\"../../src/alloc/vec/spec_from_iter.rs.html\">spec_from_iter.rs</a><a href=\"../../src/alloc/vec/spec_from_iter_nested.rs.html\">spec_from_iter_nested.rs</a><a href=\"../../src/alloc/vec/splice.rs.html\">splice.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/alloc/alloc.rs.html\">alloc.rs</a><a href=\"../../src/alloc/borrow.rs.html\">borrow.rs</a><a href=\"../../src/alloc/boxed.rs.html\">boxed.rs</a><a href=\"../../src/alloc/fmt.rs.html\">fmt.rs</a><a href=\"../../src/alloc/lib.rs.html\">lib.rs</a><a href=\"../../src/alloc/macros.rs.html\">macros.rs</a><a href=\"../../src/alloc/raw_vec.rs.html\">raw_vec.rs</a><a href=\"../../src/alloc/rc.rs.html\">rc.rs</a><a href=\"../../src/alloc/slice.rs.html\">slice.rs</a><a href=\"../../src/alloc/str.rs.html\">str.rs</a><a href=\"../../src/alloc/string.rs.html\">string.rs</a><a href=\"../../src/alloc/sync.rs.html\">sync.rs</a><a href=\"../../src/alloc/task.rs.html\">task.rs</a></div></details><details class=\"dir-entry\"><summary>core</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>alloc</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/alloc/global.rs.html\">global.rs</a><a href=\"../../src/core/alloc/layout.rs.html\">layout.rs</a><a href=\"../../src/core/alloc/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>array</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/array/ascii.rs.html\">ascii.rs</a><a href=\"../../src/core/array/drain.rs.html\">drain.rs</a><a href=\"../../src/core/array/equality.rs.html\">equality.rs</a><a href=\"../../src/core/array/iter.rs.html\">iter.rs</a><a href=\"../../src/core/array/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>ascii</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/ascii/ascii_char.rs.html\">ascii_char.rs</a></div></details><details class=\"dir-entry\"><summary>async_iter</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/async_iter/async_iter.rs.html\">async_iter.rs</a><a href=\"../../src/core/async_iter/from_iter.rs.html\">from_iter.rs</a><a href=\"../../src/core/async_iter/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>cell</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/cell/lazy.rs.html\">lazy.rs</a><a href=\"../../src/core/cell/once.rs.html\">once.rs</a></div></details><details class=\"dir-entry\"><summary>char</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/char/convert.rs.html\">convert.rs</a><a href=\"../../src/core/char/decode.rs.html\">decode.rs</a><a href=\"../../src/core/char/methods.rs.html\">methods.rs</a><a href=\"../../src/core/char/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>cmp</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/cmp/bytewise.rs.html\">bytewise.rs</a></div></details><details class=\"dir-entry\"><summary>convert</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/convert/mod.rs.html\">mod.rs</a><a href=\"../../src/core/convert/num.rs.html\">num.rs</a></div></details><details class=\"dir-entry\"><summary>ffi</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/ffi/c_str.rs.html\">c_str.rs</a><a href=\"../../src/core/ffi/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>fmt</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/fmt/builders.rs.html\">builders.rs</a><a href=\"../../src/core/fmt/float.rs.html\">float.rs</a><a href=\"../../src/core/fmt/mod.rs.html\">mod.rs</a><a href=\"../../src/core/fmt/num.rs.html\">num.rs</a><a href=\"../../src/core/fmt/rt.rs.html\">rt.rs</a></div></details><details class=\"dir-entry\"><summary>future</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/future/async_drop.rs.html\">async_drop.rs</a><a href=\"../../src/core/future/future.rs.html\">future.rs</a><a href=\"../../src/core/future/into_future.rs.html\">into_future.rs</a><a href=\"../../src/core/future/join.rs.html\">join.rs</a><a href=\"../../src/core/future/mod.rs.html\">mod.rs</a><a href=\"../../src/core/future/pending.rs.html\">pending.rs</a><a href=\"../../src/core/future/poll_fn.rs.html\">poll_fn.rs</a><a href=\"../../src/core/future/ready.rs.html\">ready.rs</a></div></details><details class=\"dir-entry\"><summary>hash</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/hash/mod.rs.html\">mod.rs</a><a href=\"../../src/core/hash/sip.rs.html\">sip.rs</a></div></details><details class=\"dir-entry\"><summary>intrinsics</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/intrinsics/mir.rs.html\">mir.rs</a><a href=\"../../src/core/intrinsics/simd.rs.html\">simd.rs</a></div></details><details class=\"dir-entry\"><summary>io</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/io/borrowed_buf.rs.html\">borrowed_buf.rs</a><a href=\"../../src/core/io/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>iter</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>adapters</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/iter/adapters/array_chunks.rs.html\">array_chunks.rs</a><a href=\"../../src/core/iter/adapters/by_ref_sized.rs.html\">by_ref_sized.rs</a><a href=\"../../src/core/iter/adapters/chain.rs.html\">chain.rs</a><a href=\"../../src/core/iter/adapters/cloned.rs.html\">cloned.rs</a><a href=\"../../src/core/iter/adapters/copied.rs.html\">copied.rs</a><a href=\"../../src/core/iter/adapters/cycle.rs.html\">cycle.rs</a><a href=\"../../src/core/iter/adapters/enumerate.rs.html\">enumerate.rs</a><a href=\"../../src/core/iter/adapters/filter.rs.html\">filter.rs</a><a href=\"../../src/core/iter/adapters/filter_map.rs.html\">filter_map.rs</a><a href=\"../../src/core/iter/adapters/flatten.rs.html\">flatten.rs</a><a href=\"../../src/core/iter/adapters/fuse.rs.html\">fuse.rs</a><a href=\"../../src/core/iter/adapters/inspect.rs.html\">inspect.rs</a><a href=\"../../src/core/iter/adapters/intersperse.rs.html\">intersperse.rs</a><a href=\"../../src/core/iter/adapters/map.rs.html\">map.rs</a><a href=\"../../src/core/iter/adapters/map_while.rs.html\">map_while.rs</a><a href=\"../../src/core/iter/adapters/map_windows.rs.html\">map_windows.rs</a><a href=\"../../src/core/iter/adapters/mod.rs.html\">mod.rs</a><a href=\"../../src/core/iter/adapters/peekable.rs.html\">peekable.rs</a><a href=\"../../src/core/iter/adapters/rev.rs.html\">rev.rs</a><a href=\"../../src/core/iter/adapters/scan.rs.html\">scan.rs</a><a href=\"../../src/core/iter/adapters/skip.rs.html\">skip.rs</a><a href=\"../../src/core/iter/adapters/skip_while.rs.html\">skip_while.rs</a><a href=\"../../src/core/iter/adapters/step_by.rs.html\">step_by.rs</a><a href=\"../../src/core/iter/adapters/take.rs.html\">take.rs</a><a href=\"../../src/core/iter/adapters/take_while.rs.html\">take_while.rs</a><a href=\"../../src/core/iter/adapters/zip.rs.html\">zip.rs</a></div></details><details class=\"dir-entry\"><summary>sources</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/iter/sources/empty.rs.html\">empty.rs</a><a href=\"../../src/core/iter/sources/from_coroutine.rs.html\">from_coroutine.rs</a><a href=\"../../src/core/iter/sources/from_fn.rs.html\">from_fn.rs</a><a href=\"../../src/core/iter/sources/once.rs.html\">once.rs</a><a href=\"../../src/core/iter/sources/once_with.rs.html\">once_with.rs</a><a href=\"../../src/core/iter/sources/repeat.rs.html\">repeat.rs</a><a href=\"../../src/core/iter/sources/repeat_n.rs.html\">repeat_n.rs</a><a href=\"../../src/core/iter/sources/repeat_with.rs.html\">repeat_with.rs</a><a href=\"../../src/core/iter/sources/successors.rs.html\">successors.rs</a></div></details><details class=\"dir-entry\"><summary>traits</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/iter/traits/accum.rs.html\">accum.rs</a><a href=\"../../src/core/iter/traits/collect.rs.html\">collect.rs</a><a href=\"../../src/core/iter/traits/double_ended.rs.html\">double_ended.rs</a><a href=\"../../src/core/iter/traits/exact_size.rs.html\">exact_size.rs</a><a href=\"../../src/core/iter/traits/iterator.rs.html\">iterator.rs</a><a href=\"../../src/core/iter/traits/marker.rs.html\">marker.rs</a><a href=\"../../src/core/iter/traits/mod.rs.html\">mod.rs</a><a href=\"../../src/core/iter/traits/unchecked_iterator.rs.html\">unchecked_iterator.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/core/iter/mod.rs.html\">mod.rs</a><a href=\"../../src/core/iter/range.rs.html\">range.rs</a><a href=\"../../src/core/iter/sources.rs.html\">sources.rs</a></div></details><details class=\"dir-entry\"><summary>macros</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/macros/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>mem</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/mem/manually_drop.rs.html\">manually_drop.rs</a><a href=\"../../src/core/mem/maybe_uninit.rs.html\">maybe_uninit.rs</a><a href=\"../../src/core/mem/mod.rs.html\">mod.rs</a><a href=\"../../src/core/mem/transmutability.rs.html\">transmutability.rs</a></div></details><details class=\"dir-entry\"><summary>net</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/net/display_buffer.rs.html\">display_buffer.rs</a><a href=\"../../src/core/net/ip_addr.rs.html\">ip_addr.rs</a><a href=\"../../src/core/net/mod.rs.html\">mod.rs</a><a href=\"../../src/core/net/parser.rs.html\">parser.rs</a><a href=\"../../src/core/net/socket_addr.rs.html\">socket_addr.rs</a></div></details><details class=\"dir-entry\"><summary>num</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>dec2flt</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/num/dec2flt/common.rs.html\">common.rs</a><a href=\"../../src/core/num/dec2flt/decimal.rs.html\">decimal.rs</a><a href=\"../../src/core/num/dec2flt/float.rs.html\">float.rs</a><a href=\"../../src/core/num/dec2flt/fpu.rs.html\">fpu.rs</a><a href=\"../../src/core/num/dec2flt/lemire.rs.html\">lemire.rs</a><a href=\"../../src/core/num/dec2flt/mod.rs.html\">mod.rs</a><a href=\"../../src/core/num/dec2flt/number.rs.html\">number.rs</a><a href=\"../../src/core/num/dec2flt/parse.rs.html\">parse.rs</a><a href=\"../../src/core/num/dec2flt/slow.rs.html\">slow.rs</a><a href=\"../../src/core/num/dec2flt/table.rs.html\">table.rs</a></div></details><details class=\"dir-entry\"><summary>flt2dec</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>strategy</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/num/flt2dec/strategy/dragon.rs.html\">dragon.rs</a><a href=\"../../src/core/num/flt2dec/strategy/grisu.rs.html\">grisu.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/core/num/flt2dec/decoder.rs.html\">decoder.rs</a><a href=\"../../src/core/num/flt2dec/estimator.rs.html\">estimator.rs</a><a href=\"../../src/core/num/flt2dec/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>shells</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/num/shells/i128.rs.html\">i128.rs</a><a href=\"../../src/core/num/shells/i16.rs.html\">i16.rs</a><a href=\"../../src/core/num/shells/i32.rs.html\">i32.rs</a><a href=\"../../src/core/num/shells/i64.rs.html\">i64.rs</a><a href=\"../../src/core/num/shells/i8.rs.html\">i8.rs</a><a href=\"../../src/core/num/shells/int_macros.rs.html\">int_macros.rs</a><a href=\"../../src/core/num/shells/isize.rs.html\">isize.rs</a><a href=\"../../src/core/num/shells/u128.rs.html\">u128.rs</a><a href=\"../../src/core/num/shells/u16.rs.html\">u16.rs</a><a href=\"../../src/core/num/shells/u32.rs.html\">u32.rs</a><a href=\"../../src/core/num/shells/u64.rs.html\">u64.rs</a><a href=\"../../src/core/num/shells/u8.rs.html\">u8.rs</a><a href=\"../../src/core/num/shells/usize.rs.html\">usize.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/core/num/bignum.rs.html\">bignum.rs</a><a href=\"../../src/core/num/diy_float.rs.html\">diy_float.rs</a><a href=\"../../src/core/num/error.rs.html\">error.rs</a><a href=\"../../src/core/num/f128.rs.html\">f128.rs</a><a href=\"../../src/core/num/f16.rs.html\">f16.rs</a><a href=\"../../src/core/num/f32.rs.html\">f32.rs</a><a href=\"../../src/core/num/f64.rs.html\">f64.rs</a><a href=\"../../src/core/num/fmt.rs.html\">fmt.rs</a><a href=\"../../src/core/num/int_log10.rs.html\">int_log10.rs</a><a href=\"../../src/core/num/int_macros.rs.html\">int_macros.rs</a><a href=\"../../src/core/num/mod.rs.html\">mod.rs</a><a href=\"../../src/core/num/nonzero.rs.html\">nonzero.rs</a><a href=\"../../src/core/num/overflow_panic.rs.html\">overflow_panic.rs</a><a href=\"../../src/core/num/saturating.rs.html\">saturating.rs</a><a href=\"../../src/core/num/uint_macros.rs.html\">uint_macros.rs</a><a href=\"../../src/core/num/wrapping.rs.html\">wrapping.rs</a></div></details><details class=\"dir-entry\"><summary>ops</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/ops/arith.rs.html\">arith.rs</a><a href=\"../../src/core/ops/async_function.rs.html\">async_function.rs</a><a href=\"../../src/core/ops/bit.rs.html\">bit.rs</a><a href=\"../../src/core/ops/control_flow.rs.html\">control_flow.rs</a><a href=\"../../src/core/ops/coroutine.rs.html\">coroutine.rs</a><a href=\"../../src/core/ops/deref.rs.html\">deref.rs</a><a href=\"../../src/core/ops/drop.rs.html\">drop.rs</a><a href=\"../../src/core/ops/function.rs.html\">function.rs</a><a href=\"../../src/core/ops/index.rs.html\">index.rs</a><a href=\"../../src/core/ops/index_range.rs.html\">index_range.rs</a><a href=\"../../src/core/ops/mod.rs.html\">mod.rs</a><a href=\"../../src/core/ops/range.rs.html\">range.rs</a><a href=\"../../src/core/ops/try_trait.rs.html\">try_trait.rs</a><a href=\"../../src/core/ops/unsize.rs.html\">unsize.rs</a></div></details><details class=\"dir-entry\"><summary>panic</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/panic/location.rs.html\">location.rs</a><a href=\"../../src/core/panic/panic_info.rs.html\">panic_info.rs</a><a href=\"../../src/core/panic/unwind_safe.rs.html\">unwind_safe.rs</a></div></details><details class=\"dir-entry\"><summary>portable-simd</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>crates</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>core_simd</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>src</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>masks</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/portable-simd/crates/core_simd/src/masks/full_masks.rs.html\">full_masks.rs</a></div></details><details class=\"dir-entry\"><summary>ops</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/portable-simd/crates/core_simd/src/ops/assign.rs.html\">assign.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html\">deref.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html\">shift_scalar.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html\">unary.rs</a></div></details><details class=\"dir-entry\"><summary>simd</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>cmp</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html\">eq.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html\">ord.rs</a></div></details><details class=\"dir-entry\"><summary>num</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html\">float.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html\">int.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html\">uint.rs</a></div></details><details class=\"dir-entry\"><summary>ptr</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/portable-simd/crates/core_simd/src/simd/ptr/const_ptr.rs.html\">const_ptr.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/simd/ptr/mut_ptr.rs.html\">mut_ptr.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/core/portable-simd/crates/core_simd/src/simd/cmp.rs.html\">cmp.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/simd/num.rs.html\">num.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/simd/prelude.rs.html\">prelude.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/simd/ptr.rs.html\">ptr.rs</a></div></details><details class=\"dir-entry\"><summary>vendor</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html\">x86.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/core/portable-simd/crates/core_simd/src/alias.rs.html\">alias.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/cast.rs.html\">cast.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/fmt.rs.html\">fmt.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/iter.rs.html\">iter.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/lane_count.rs.html\">lane_count.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/masks.rs.html\">masks.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/mod.rs.html\">mod.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/ops.rs.html\">ops.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/select.rs.html\">select.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/swizzle.rs.html\">swizzle.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/swizzle_dyn.rs.html\">swizzle_dyn.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html\">to_bytes.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/vector.rs.html\">vector.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/vendor.rs.html\">vendor.rs</a></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details><details class=\"dir-entry\"><summary>prelude</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/prelude/common.rs.html\">common.rs</a><a href=\"../../src/core/prelude/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>ptr</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/ptr/alignment.rs.html\">alignment.rs</a><a href=\"../../src/core/ptr/const_ptr.rs.html\">const_ptr.rs</a><a href=\"../../src/core/ptr/metadata.rs.html\">metadata.rs</a><a href=\"../../src/core/ptr/mod.rs.html\">mod.rs</a><a href=\"../../src/core/ptr/mut_ptr.rs.html\">mut_ptr.rs</a><a href=\"../../src/core/ptr/non_null.rs.html\">non_null.rs</a><a href=\"../../src/core/ptr/unique.rs.html\">unique.rs</a></div></details><details class=\"dir-entry\"><summary>slice</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>iter</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/slice/iter/macros.rs.html\">macros.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/core/slice/ascii.rs.html\">ascii.rs</a><a href=\"../../src/core/slice/cmp.rs.html\">cmp.rs</a><a href=\"../../src/core/slice/index.rs.html\">index.rs</a><a href=\"../../src/core/slice/iter.rs.html\">iter.rs</a><a href=\"../../src/core/slice/memchr.rs.html\">memchr.rs</a><a href=\"../../src/core/slice/mod.rs.html\">mod.rs</a><a href=\"../../src/core/slice/raw.rs.html\">raw.rs</a><a href=\"../../src/core/slice/rotate.rs.html\">rotate.rs</a><a href=\"../../src/core/slice/select.rs.html\">select.rs</a><a href=\"../../src/core/slice/sort.rs.html\">sort.rs</a><a href=\"../../src/core/slice/specialize.rs.html\">specialize.rs</a></div></details><details class=\"dir-entry\"><summary>stdarch</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>crates</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>core_arch</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>src</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>aarch64</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>neon</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/aarch64/neon/generated.rs.html\">generated.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/aarch64/neon/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/aarch64/mod.rs.html\">mod.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/aarch64/prefetch.rs.html\">prefetch.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/aarch64/tme.rs.html\">tme.rs</a></div></details><details class=\"dir-entry\"><summary>arm</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/arm/dsp.rs.html\">dsp.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/arm/mod.rs.html\">mod.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/arm/neon.rs.html\">neon.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/arm/sat.rs.html\">sat.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/arm/simd32.rs.html\">simd32.rs</a></div></details><details class=\"dir-entry\"><summary>arm_shared</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>barrier</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/arm_shared/barrier/cp15.rs.html\">cp15.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/arm_shared/barrier/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>neon</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/arm_shared/neon/generated.rs.html\">generated.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/arm_shared/neon/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/arm_shared/crc.rs.html\">crc.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/arm_shared/crypto.rs.html\">crypto.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/arm_shared/hints.rs.html\">hints.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/arm_shared/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>loongarch64</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>lasx</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/loongarch64/lasx/generated.rs.html\">generated.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/loongarch64/lasx/mod.rs.html\">mod.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/loongarch64/lasx/types.rs.html\">types.rs</a></div></details><details class=\"dir-entry\"><summary>lsx</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/loongarch64/lsx/generated.rs.html\">generated.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/loongarch64/lsx/mod.rs.html\">mod.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/loongarch64/lsx/types.rs.html\">types.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/loongarch64/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>mips</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/mips/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>nvptx</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/nvptx/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>powerpc</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/powerpc/altivec.rs.html\">altivec.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/powerpc/macros.rs.html\">macros.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/powerpc/mod.rs.html\">mod.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/powerpc/vsx.rs.html\">vsx.rs</a></div></details><details class=\"dir-entry\"><summary>powerpc64</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/powerpc64/mod.rs.html\">mod.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/powerpc64/vsx.rs.html\">vsx.rs</a></div></details><details class=\"dir-entry\"><summary>riscv32</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/riscv32/mod.rs.html\">mod.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/riscv32/zk.rs.html\">zk.rs</a></div></details><details class=\"dir-entry\"><summary>riscv64</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/riscv64/mod.rs.html\">mod.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/riscv64/zk.rs.html\">zk.rs</a></div></details><details class=\"dir-entry\"><summary>riscv_shared</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/riscv_shared/mod.rs.html\">mod.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/riscv_shared/p.rs.html\">p.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/riscv_shared/zb.rs.html\">zb.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/riscv_shared/zk.rs.html\">zk.rs</a></div></details><details class=\"dir-entry\"><summary>wasm32</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/wasm32/atomic.rs.html\">atomic.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/wasm32/memory.rs.html\">memory.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/wasm32/mod.rs.html\">mod.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/wasm32/relaxed_simd.rs.html\">relaxed_simd.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/wasm32/simd128.rs.html\">simd128.rs</a></div></details><details class=\"dir-entry\"><summary>x86</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/abm.rs.html\">abm.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/adx.rs.html\">adx.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/aes.rs.html\">aes.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/avx.rs.html\">avx.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/avx2.rs.html\">avx2.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/avx512bf16.rs.html\">avx512bf16.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/avx512bitalg.rs.html\">avx512bitalg.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/avx512bw.rs.html\">avx512bw.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/avx512cd.rs.html\">avx512cd.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/avx512f.rs.html\">avx512f.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/avx512ifma.rs.html\">avx512ifma.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/avx512vbmi.rs.html\">avx512vbmi.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/avx512vbmi2.rs.html\">avx512vbmi2.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/avx512vnni.rs.html\">avx512vnni.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/avx512vpopcntdq.rs.html\">avx512vpopcntdq.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/bmi1.rs.html\">bmi1.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/bmi2.rs.html\">bmi2.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/bswap.rs.html\">bswap.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/bt.rs.html\">bt.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/cpuid.rs.html\">cpuid.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/eflags.rs.html\">eflags.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/f16c.rs.html\">f16c.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/fma.rs.html\">fma.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/fxsr.rs.html\">fxsr.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/gfni.rs.html\">gfni.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/macros.rs.html\">macros.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/mod.rs.html\">mod.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/pclmulqdq.rs.html\">pclmulqdq.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/rdrand.rs.html\">rdrand.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/rdtsc.rs.html\">rdtsc.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/rtm.rs.html\">rtm.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/sha.rs.html\">sha.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/sse.rs.html\">sse.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/sse2.rs.html\">sse2.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/sse3.rs.html\">sse3.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/sse41.rs.html\">sse41.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/sse42.rs.html\">sse42.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/sse4a.rs.html\">sse4a.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/ssse3.rs.html\">ssse3.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/tbm.rs.html\">tbm.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/vaes.rs.html\">vaes.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/vpclmulqdq.rs.html\">vpclmulqdq.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/xsave.rs.html\">xsave.rs</a></div></details><details class=\"dir-entry\"><summary>x86_64</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/abm.rs.html\">abm.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/adx.rs.html\">adx.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/avx.rs.html\">avx.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/avx2.rs.html\">avx2.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/avx512f.rs.html\">avx512f.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/bmi.rs.html\">bmi.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/bmi2.rs.html\">bmi2.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/bswap.rs.html\">bswap.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/bt.rs.html\">bt.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/cmpxchg16b.rs.html\">cmpxchg16b.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/fxsr.rs.html\">fxsr.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/macros.rs.html\">macros.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/mod.rs.html\">mod.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/rdrand.rs.html\">rdrand.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/sse.rs.html\">sse.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/sse2.rs.html\">sse2.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/sse41.rs.html\">sse41.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/sse42.rs.html\">sse42.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/xsave.rs.html\">xsave.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/macros.rs.html\">macros.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/mod.rs.html\">mod.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/simd.rs.html\">simd.rs</a></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details><details class=\"dir-entry\"><summary>str</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/str/converts.rs.html\">converts.rs</a><a href=\"../../src/core/str/count.rs.html\">count.rs</a><a href=\"../../src/core/str/error.rs.html\">error.rs</a><a href=\"../../src/core/str/iter.rs.html\">iter.rs</a><a href=\"../../src/core/str/lossy.rs.html\">lossy.rs</a><a href=\"../../src/core/str/mod.rs.html\">mod.rs</a><a href=\"../../src/core/str/pattern.rs.html\">pattern.rs</a><a href=\"../../src/core/str/traits.rs.html\">traits.rs</a><a href=\"../../src/core/str/validations.rs.html\">validations.rs</a></div></details><details class=\"dir-entry\"><summary>sync</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/sync/atomic.rs.html\">atomic.rs</a><a href=\"../../src/core/sync/exclusive.rs.html\">exclusive.rs</a><a href=\"../../src/core/sync/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>task</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/task/mod.rs.html\">mod.rs</a><a href=\"../../src/core/task/poll.rs.html\">poll.rs</a><a href=\"../../src/core/task/ready.rs.html\">ready.rs</a><a href=\"../../src/core/task/wake.rs.html\">wake.rs</a></div></details><details class=\"dir-entry\"><summary>unicode</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/unicode/mod.rs.html\">mod.rs</a><a href=\"../../src/core/unicode/printable.rs.html\">printable.rs</a><a href=\"../../src/core/unicode/unicode_data.rs.html\">unicode_data.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/core/any.rs.html\">any.rs</a><a href=\"../../src/core/arch.rs.html\">arch.rs</a><a href=\"../../src/core/ascii.rs.html\">ascii.rs</a><a href=\"../../src/core/asserting.rs.html\">asserting.rs</a><a href=\"../../src/core/bool.rs.html\">bool.rs</a><a href=\"../../src/core/borrow.rs.html\">borrow.rs</a><a href=\"../../src/core/cell.rs.html\">cell.rs</a><a href=\"../../src/core/clone.rs.html\">clone.rs</a><a href=\"../../src/core/cmp.rs.html\">cmp.rs</a><a href=\"../../src/core/default.rs.html\">default.rs</a><a href=\"../../src/core/error.rs.html\">error.rs</a><a href=\"../../src/core/escape.rs.html\">escape.rs</a><a href=\"../../src/core/hint.rs.html\">hint.rs</a><a href=\"../../src/core/internal_macros.rs.html\">internal_macros.rs</a><a href=\"../../src/core/intrinsics.rs.html\">intrinsics.rs</a><a href=\"../../src/core/lib.rs.html\">lib.rs</a><a href=\"../../src/core/marker.rs.html\">marker.rs</a><a href=\"../../src/core/option.rs.html\">option.rs</a><a href=\"../../src/core/panic.rs.html\">panic.rs</a><a href=\"../../src/core/panicking.rs.html\">panicking.rs</a><a href=\"../../src/core/pat.rs.html\">pat.rs</a><a href=\"../../src/core/pin.rs.html\">pin.rs</a><a href=\"../../src/core/primitive.rs.html\">primitive.rs</a><a href=\"../../src/core/primitive_docs.rs.html\">primitive_docs.rs</a><a href=\"../../src/core/result.rs.html\">result.rs</a><a href=\"../../src/core/time.rs.html\">time.rs</a><a href=\"../../src/core/tuple.rs.html\">tuple.rs</a><a href=\"../../src/core/ub_checks.rs.html\">ub_checks.rs</a><a href=\"../../src/core/unit.rs.html\">unit.rs</a></div></details><details class=\"dir-entry\"><summary>proc_macro</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>bridge</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/proc_macro/bridge/arena.rs.html\">arena.rs</a><a href=\"../../src/proc_macro/bridge/buffer.rs.html\">buffer.rs</a><a href=\"../../src/proc_macro/bridge/client.rs.html\">client.rs</a><a href=\"../../src/proc_macro/bridge/closure.rs.html\">closure.rs</a><a href=\"../../src/proc_macro/bridge/fxhash.rs.html\">fxhash.rs</a><a href=\"../../src/proc_macro/bridge/handle.rs.html\">handle.rs</a><a href=\"../../src/proc_macro/bridge/mod.rs.html\">mod.rs</a><a href=\"../../src/proc_macro/bridge/rpc.rs.html\">rpc.rs</a><a href=\"../../src/proc_macro/bridge/selfless_reify.rs.html\">selfless_reify.rs</a><a href=\"../../src/proc_macro/bridge/server.rs.html\">server.rs</a><a href=\"../../src/proc_macro/bridge/symbol.rs.html\">symbol.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/proc_macro/diagnostic.rs.html\">diagnostic.rs</a><a href=\"../../src/proc_macro/lib.rs.html\">lib.rs</a><a href=\"../../src/proc_macro/quote.rs.html\">quote.rs</a></div></details><details class=\"dir-entry\" open=\"\"><summary>std</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>backtrace</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>src</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>backtrace</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/backtrace/src/backtrace/libunwind.rs.html\">libunwind.rs</a><a href=\"../../src/std/backtrace/src/backtrace/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>symbolize</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>gimli</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/backtrace/src/symbolize/gimli/elf.rs.html\">elf.rs</a><a href=\"../../src/std/backtrace/src/symbolize/gimli/libs_dl_iterate_phdr.rs.html\">libs_dl_iterate_phdr.rs</a><a href=\"../../src/std/backtrace/src/symbolize/gimli/mmap_unix.rs.html\">mmap_unix.rs</a><a href=\"../../src/std/backtrace/src/symbolize/gimli/parse_running_mmaps_unix.rs.html\">parse_running_mmaps_unix.rs</a><a href=\"../../src/std/backtrace/src/symbolize/gimli/stash.rs.html\">stash.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/backtrace/src/symbolize/gimli.rs.html\">gimli.rs</a><a href=\"../../src/std/backtrace/src/symbolize/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/backtrace/src/lib.rs.html\">lib.rs</a><a href=\"../../src/std/backtrace/src/print.rs.html\">print.rs</a><a href=\"../../src/std/backtrace/src/types.rs.html\">types.rs</a></div></details></div><div class=\"files\"></div></details><details class=\"dir-entry\"><summary>collections</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>hash</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/collections/hash/map.rs.html\">map.rs</a><a href=\"../../src/std/collections/hash/mod.rs.html\">mod.rs</a><a href=\"../../src/std/collections/hash/set.rs.html\">set.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/collections/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>core</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>src</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/core/src/primitive_docs.rs.html\">primitive_docs.rs</a></div></details></div><div class=\"files\"></div></details><details class=\"dir-entry\"><summary>ffi</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/ffi/c_str.rs.html\">c_str.rs</a><a href=\"../../src/std/ffi/mod.rs.html\">mod.rs</a><a href=\"../../src/std/ffi/os_str.rs.html\">os_str.rs</a></div></details><details class=\"dir-entry\"><summary>hash</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/hash/mod.rs.html\">mod.rs</a><a href=\"../../src/std/hash/random.rs.html\">random.rs</a></div></details><details class=\"dir-entry\"><summary>io</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>buffered</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>bufreader</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/io/buffered/bufreader/buffer.rs.html\">buffer.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/io/buffered/bufreader.rs.html\">bufreader.rs</a><a href=\"../../src/std/io/buffered/bufwriter.rs.html\">bufwriter.rs</a><a href=\"../../src/std/io/buffered/linewriter.rs.html\">linewriter.rs</a><a href=\"../../src/std/io/buffered/linewritershim.rs.html\">linewritershim.rs</a><a href=\"../../src/std/io/buffered/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>error</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/io/error/repr_bitpacked.rs.html\">repr_bitpacked.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/io/copy.rs.html\">copy.rs</a><a href=\"../../src/std/io/cursor.rs.html\">cursor.rs</a><a href=\"../../src/std/io/error.rs.html\">error.rs</a><a href=\"../../src/std/io/impls.rs.html\">impls.rs</a><a href=\"../../src/std/io/mod.rs.html\">mod.rs</a><a href=\"../../src/std/io/prelude.rs.html\">prelude.rs</a><a href=\"../../src/std/io/stdio.rs.html\">stdio.rs</a><a href=\"../../src/std/io/util.rs.html\">util.rs</a></div></details><details class=\"dir-entry\"><summary>net</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/net/ip_addr.rs.html\">ip_addr.rs</a><a href=\"../../src/std/net/mod.rs.html\">mod.rs</a><a href=\"../../src/std/net/socket_addr.rs.html\">socket_addr.rs</a><a href=\"../../src/std/net/tcp.rs.html\">tcp.rs</a><a href=\"../../src/std/net/udp.rs.html\">udp.rs</a></div></details><details class=\"dir-entry\"><summary>os</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>fd</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/os/fd/mod.rs.html\">mod.rs</a><a href=\"../../src/std/os/fd/net.rs.html\">net.rs</a><a href=\"../../src/std/os/fd/owned.rs.html\">owned.rs</a><a href=\"../../src/std/os/fd/raw.rs.html\">raw.rs</a></div></details><details class=\"dir-entry\"><summary>linux</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/os/linux/fs.rs.html\">fs.rs</a><a href=\"../../src/std/os/linux/mod.rs.html\">mod.rs</a><a href=\"../../src/std/os/linux/net.rs.html\">net.rs</a><a href=\"../../src/std/os/linux/process.rs.html\">process.rs</a><a href=\"../../src/std/os/linux/raw.rs.html\">raw.rs</a></div></details><details class=\"dir-entry\"><summary>net</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>linux_ext</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/os/net/linux_ext/addr.rs.html\">addr.rs</a><a href=\"../../src/std/os/net/linux_ext/mod.rs.html\">mod.rs</a><a href=\"../../src/std/os/net/linux_ext/socket.rs.html\">socket.rs</a><a href=\"../../src/std/os/net/linux_ext/tcp.rs.html\">tcp.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/os/net/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>raw</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/os/raw/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>unix</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>ffi</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/os/unix/ffi/mod.rs.html\">mod.rs</a><a href=\"../../src/std/os/unix/ffi/os_str.rs.html\">os_str.rs</a></div></details><details class=\"dir-entry\"><summary>io</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/os/unix/io/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>net</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/os/unix/net/addr.rs.html\">addr.rs</a><a href=\"../../src/std/os/unix/net/ancillary.rs.html\">ancillary.rs</a><a href=\"../../src/std/os/unix/net/datagram.rs.html\">datagram.rs</a><a href=\"../../src/std/os/unix/net/listener.rs.html\">listener.rs</a><a href=\"../../src/std/os/unix/net/mod.rs.html\">mod.rs</a><a href=\"../../src/std/os/unix/net/stream.rs.html\">stream.rs</a><a href=\"../../src/std/os/unix/net/ucred.rs.html\">ucred.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/os/unix/fs.rs.html\">fs.rs</a><a href=\"../../src/std/os/unix/mod.rs.html\">mod.rs</a><a href=\"../../src/std/os/unix/process.rs.html\">process.rs</a><a href=\"../../src/std/os/unix/raw.rs.html\">raw.rs</a><a href=\"../../src/std/os/unix/thread.rs.html\">thread.rs</a></div></details><details class=\"dir-entry\"><summary>wasi</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>io</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/os/wasi/io/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>net</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/os/wasi/net/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/os/wasi/ffi.rs.html\">ffi.rs</a><a href=\"../../src/std/os/wasi/fs.rs.html\">fs.rs</a><a href=\"../../src/std/os/wasi/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>wasip2</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/os/wasip2/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>windows</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>io</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/os/windows/io/handle.rs.html\">handle.rs</a><a href=\"../../src/std/os/windows/io/mod.rs.html\">mod.rs</a><a href=\"../../src/std/os/windows/io/raw.rs.html\">raw.rs</a><a href=\"../../src/std/os/windows/io/socket.rs.html\">socket.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/os/windows/ffi.rs.html\">ffi.rs</a><a href=\"../../src/std/os/windows/fs.rs.html\">fs.rs</a><a href=\"../../src/std/os/windows/mod.rs.html\">mod.rs</a><a href=\"../../src/std/os/windows/process.rs.html\">process.rs</a><a href=\"../../src/std/os/windows/raw.rs.html\">raw.rs</a><a href=\"../../src/std/os/windows/thread.rs.html\">thread.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/os/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>portable-simd</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>crates</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>std_float</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>src</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/portable-simd/crates/std_float/src/lib.rs.html\">lib.rs</a></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details><details class=\"dir-entry\"><summary>prelude</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/prelude/common.rs.html\">common.rs</a><a href=\"../../src/std/prelude/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>sync</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>mpmc</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/sync/mpmc/array.rs.html\">array.rs</a><a href=\"../../src/std/sync/mpmc/context.rs.html\">context.rs</a><a href=\"../../src/std/sync/mpmc/counter.rs.html\">counter.rs</a><a href=\"../../src/std/sync/mpmc/error.rs.html\">error.rs</a><a href=\"../../src/std/sync/mpmc/list.rs.html\">list.rs</a><a href=\"../../src/std/sync/mpmc/mod.rs.html\">mod.rs</a><a href=\"../../src/std/sync/mpmc/select.rs.html\">select.rs</a><a href=\"../../src/std/sync/mpmc/utils.rs.html\">utils.rs</a><a href=\"../../src/std/sync/mpmc/waker.rs.html\">waker.rs</a><a href=\"../../src/std/sync/mpmc/zero.rs.html\">zero.rs</a></div></details><details class=\"dir-entry\"><summary>mpsc</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/sync/mpsc/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/sync/barrier.rs.html\">barrier.rs</a><a href=\"../../src/std/sync/condvar.rs.html\">condvar.rs</a><a href=\"../../src/std/sync/lazy_lock.rs.html\">lazy_lock.rs</a><a href=\"../../src/std/sync/mod.rs.html\">mod.rs</a><a href=\"../../src/std/sync/mutex.rs.html\">mutex.rs</a><a href=\"../../src/std/sync/once.rs.html\">once.rs</a><a href=\"../../src/std/sync/once_lock.rs.html\">once_lock.rs</a><a href=\"../../src/std/sync/poison.rs.html\">poison.rs</a><a href=\"../../src/std/sync/reentrant_lock.rs.html\">reentrant_lock.rs</a><a href=\"../../src/std/sync/rwlock.rs.html\">rwlock.rs</a></div></details><details class=\"dir-entry\"><summary>sys</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>os_str</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/sys/os_str/bytes.rs.html\">bytes.rs</a><a href=\"../../src/std/sys/os_str/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>pal</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>common</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/sys/pal/common/alloc.rs.html\">alloc.rs</a><a href=\"../../src/std/sys/pal/common/mod.rs.html\">mod.rs</a><a href=\"../../src/std/sys/pal/common/small_c_string.rs.html\">small_c_string.rs</a></div></details><details class=\"dir-entry\"><summary>unix</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>process</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/sys/pal/unix/process/mod.rs.html\">mod.rs</a><a href=\"../../src/std/sys/pal/unix/process/process_common.rs.html\">process_common.rs</a><a href=\"../../src/std/sys/pal/unix/process/process_unix.rs.html\">process_unix.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/sys/pal/unix/alloc.rs.html\">alloc.rs</a><a href=\"../../src/std/sys/pal/unix/args.rs.html\">args.rs</a><a href=\"../../src/std/sys/pal/unix/env.rs.html\">env.rs</a><a href=\"../../src/std/sys/pal/unix/fd.rs.html\">fd.rs</a><a href=\"../../src/std/sys/pal/unix/fs.rs.html\">fs.rs</a><a href=\"../../src/std/sys/pal/unix/futex.rs.html\">futex.rs</a><a href=\"../../src/std/sys/pal/unix/io.rs.html\">io.rs</a><a href=\"../../src/std/sys/pal/unix/kernel_copy.rs.html\">kernel_copy.rs</a><a href=\"../../src/std/sys/pal/unix/mod.rs.html\">mod.rs</a><a href=\"../../src/std/sys/pal/unix/net.rs.html\">net.rs</a><a href=\"../../src/std/sys/pal/unix/os.rs.html\">os.rs</a><a href=\"../../src/std/sys/pal/unix/pipe.rs.html\">pipe.rs</a><a href=\"../../src/std/sys/pal/unix/rand.rs.html\">rand.rs</a><a href=\"../../src/std/sys/pal/unix/stack_overflow.rs.html\">stack_overflow.rs</a><a href=\"../../src/std/sys/pal/unix/stdio.rs.html\">stdio.rs</a><a href=\"../../src/std/sys/pal/unix/thread.rs.html\">thread.rs</a><a href=\"../../src/std/sys/pal/unix/thread_local_dtor.rs.html\">thread_local_dtor.rs</a><a href=\"../../src/std/sys/pal/unix/thread_local_key.rs.html\">thread_local_key.rs</a><a href=\"../../src/std/sys/pal/unix/time.rs.html\">time.rs</a><a href=\"../../src/std/sys/pal/unix/weak.rs.html\">weak.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/sys/pal/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>path</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/sys/path/mod.rs.html\">mod.rs</a><a href=\"../../src/std/sys/path/unix.rs.html\">unix.rs</a></div></details><details class=\"dir-entry\"><summary>personality</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>dwarf</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/sys/personality/dwarf/eh.rs.html\">eh.rs</a><a href=\"../../src/std/sys/personality/dwarf/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/sys/personality/gcc.rs.html\">gcc.rs</a><a href=\"../../src/std/sys/personality/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>sync</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>condvar</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/sys/sync/condvar/futex.rs.html\">futex.rs</a><a href=\"../../src/std/sys/sync/condvar/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>mutex</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/sys/sync/mutex/futex.rs.html\">futex.rs</a><a href=\"../../src/std/sys/sync/mutex/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>once</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/sys/sync/once/futex.rs.html\">futex.rs</a><a href=\"../../src/std/sys/sync/once/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>rwlock</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/sys/sync/rwlock/futex.rs.html\">futex.rs</a><a href=\"../../src/std/sys/sync/rwlock/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>thread_parking</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/sys/sync/thread_parking/futex.rs.html\">futex.rs</a><a href=\"../../src/std/sys/sync/thread_parking/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/sys/sync/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>thread_local</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>fast_local</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/sys/thread_local/fast_local/eager.rs.html\">eager.rs</a><a href=\"../../src/std/sys/thread_local/fast_local/lazy.rs.html\">lazy.rs</a><a href=\"../../src/std/sys/thread_local/fast_local/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/sys/thread_local/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/sys/cmath.rs.html\">cmath.rs</a><a href=\"../../src/std/sys/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>sys_common</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/sys_common/backtrace.rs.html\">backtrace.rs</a><a href=\"../../src/std/sys_common/fs.rs.html\">fs.rs</a><a href=\"../../src/std/sys_common/io.rs.html\">io.rs</a><a href=\"../../src/std/sys_common/lazy_box.rs.html\">lazy_box.rs</a><a href=\"../../src/std/sys_common/mod.rs.html\">mod.rs</a><a href=\"../../src/std/sys_common/net.rs.html\">net.rs</a><a href=\"../../src/std/sys_common/process.rs.html\">process.rs</a><a href=\"../../src/std/sys_common/thread_local_dtor.rs.html\">thread_local_dtor.rs</a><a href=\"../../src/std/sys_common/thread_local_key.rs.html\">thread_local_key.rs</a><a href=\"../../src/std/sys_common/wstr.rs.html\">wstr.rs</a><a href=\"../../src/std/sys_common/wtf8.rs.html\">wtf8.rs</a></div></details><details class=\"dir-entry\"><summary>thread</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/thread/local.rs.html\">local.rs</a><a href=\"../../src/std/thread/mod.rs.html\">mod.rs</a><a href=\"../../src/std/thread/scoped.rs.html\">scoped.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/alloc.rs.html\">alloc.rs</a><a href=\"../../src/std/ascii.rs.html\">ascii.rs</a><a href=\"../../src/std/backtrace.rs.html\">backtrace.rs</a><a href=\"../../src/std/env.rs.html\">env.rs</a><a href=\"../../src/std/error.rs.html\">error.rs</a><a href=\"../../src/std/f128.rs.html\">f128.rs</a><a href=\"../../src/std/f16.rs.html\">f16.rs</a><a href=\"../../src/std/f32.rs.html\">f32.rs</a><a href=\"../../src/std/f64.rs.html\">f64.rs</a><a href=\"../../src/std/fs.rs.html\">fs.rs</a><a href=\"../../src/std/keyword_docs.rs.html\">keyword_docs.rs</a><a href=\"../../src/std/lib.rs.html\">lib.rs</a><a href=\"../../src/std/macros.rs.html\">macros.rs</a><a href=\"../../src/std/num.rs.html\">num.rs</a><a href=\"../../src/std/panic.rs.html\">panic.rs</a><a href=\"../../src/std/panicking.rs.html\">panicking.rs</a><a href=\"../../src/std/pat.rs.html\">pat.rs</a><a href=\"../../src/std/path.rs.html\">path.rs</a><a href=\"../../src/std/process.rs.html\" class=\"selected\">process.rs</a><a href=\"../../src/std/rt.rs.html\">rt.rs</a><a href=\"../../src/std/time.rs.html\">time.rs</a></div></details><details class=\"dir-entry\"><summary>test</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>formatters</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/test/formatters/json.rs.html\">json.rs</a><a href=\"../../src/test/formatters/junit.rs.html\">junit.rs</a><a href=\"../../src/test/formatters/mod.rs.html\">mod.rs</a><a href=\"../../src/test/formatters/pretty.rs.html\">pretty.rs</a><a href=\"../../src/test/formatters/terse.rs.html\">terse.rs</a></div></details><details class=\"dir-entry\"><summary>helpers</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/test/helpers/concurrency.rs.html\">concurrency.rs</a><a href=\"../../src/test/helpers/metrics.rs.html\">metrics.rs</a><a href=\"../../src/test/helpers/mod.rs.html\">mod.rs</a><a href=\"../../src/test/helpers/shuffle.rs.html\">shuffle.rs</a></div></details><details class=\"dir-entry\"><summary>term</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>terminfo</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>parser</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/test/term/terminfo/parser/compiled.rs.html\">compiled.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/test/term/terminfo/mod.rs.html\">mod.rs</a><a href=\"../../src/test/term/terminfo/parm.rs.html\">parm.rs</a><a href=\"../../src/test/term/terminfo/searcher.rs.html\">searcher.rs</a></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"><a href=\"../../src/test/bench.rs.html\">bench.rs</a><a href=\"../../src/test/cli.rs.html\">cli.rs</a><a href=\"../../src/test/console.rs.html\">console.rs</a><a href=\"../../src/test/event.rs.html\">event.rs</a><a href=\"../../src/test/lib.rs.html\">lib.rs</a><a href=\"../../src/test/options.rs.html\">options.rs</a><a href=\"../../src/test/stats.rs.html\">stats.rs</a><a href=\"../../src/test/term.rs.html\">term.rs</a><a href=\"../../src/test/test_result.rs.html\">test_result.rs</a><a href=\"../../src/test/time.rs.html\">time.rs</a><a href=\"../../src/test/types.rs.html\">types.rs</a></div></details></div></nav><div class=\"sidebar-resizer\"></div><main><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"example-wrap\"><div data-nosnippet=\"\"><pre class=\"src-line-numbers\"><a href=\"#1\" id=\"1\">1</a>\n<a href=\"#2\" id=\"2\">2</a>\n<a href=\"#3\" id=\"3\">3</a>\n<a href=\"#4\" id=\"4\">4</a>\n<a href=\"#5\" id=\"5\">5</a>\n<a href=\"#6\" id=\"6\">6</a>\n<a href=\"#7\" id=\"7\">7</a>\n<a href=\"#8\" id=\"8\">8</a>\n<a href=\"#9\" id=\"9\">9</a>\n<a href=\"#10\" id=\"10\">10</a>\n<a href=\"#11\" id=\"11\">11</a>\n<a href=\"#12\" id=\"12\">12</a>\n<a href=\"#13\" id=\"13\">13</a>\n<a href=\"#14\" id=\"14\">14</a>\n<a href=\"#15\" id=\"15\">15</a>\n<a href=\"#16\" id=\"16\">16</a>\n<a href=\"#17\" id=\"17\">17</a>\n<a href=\"#18\" id=\"18\">18</a>\n<a href=\"#19\" id=\"19\">19</a>\n<a href=\"#20\" id=\"20\">20</a>\n<a href=\"#21\" id=\"21\">21</a>\n<a href=\"#22\" id=\"22\">22</a>\n<a href=\"#23\" id=\"23\">23</a>\n<a href=\"#24\" id=\"24\">24</a>\n<a href=\"#25\" id=\"25\">25</a>\n<a href=\"#26\" id=\"26\">26</a>\n<a href=\"#27\" id=\"27\">27</a>\n<a href=\"#28\" id=\"28\">28</a>\n<a href=\"#29\" id=\"29\">29</a>\n<a href=\"#30\" id=\"30\">30</a>\n<a href=\"#31\" id=\"31\">31</a>\n<a href=\"#32\" id=\"32\">32</a>\n<a href=\"#33\" id=\"33\">33</a>\n<a href=\"#34\" id=\"34\">34</a>\n<a href=\"#35\" id=\"35\">35</a>\n<a href=\"#36\" id=\"36\">36</a>\n<a href=\"#37\" id=\"37\">37</a>\n<a href=\"#38\" id=\"38\">38</a>\n<a href=\"#39\" id=\"39\">39</a>\n<a href=\"#40\" id=\"40\">40</a>\n<a href=\"#41\" id=\"41\">41</a>\n<a href=\"#42\" id=\"42\">42</a>\n<a href=\"#43\" id=\"43\">43</a>\n<a href=\"#44\" id=\"44\">44</a>\n<a href=\"#45\" id=\"45\">45</a>\n<a href=\"#46\" id=\"46\">46</a>\n<a href=\"#47\" id=\"47\">47</a>\n<a href=\"#48\" id=\"48\">48</a>\n<a href=\"#49\" id=\"49\">49</a>\n<a href=\"#50\" id=\"50\">50</a>\n<a href=\"#51\" id=\"51\">51</a>\n<a href=\"#52\" id=\"52\">52</a>\n<a href=\"#53\" id=\"53\">53</a>\n<a href=\"#54\" id=\"54\">54</a>\n<a href=\"#55\" id=\"55\">55</a>\n<a href=\"#56\" id=\"56\">56</a>\n<a href=\"#57\" id=\"57\">57</a>\n<a href=\"#58\" id=\"58\">58</a>\n<a href=\"#59\" id=\"59\">59</a>\n<a href=\"#60\" id=\"60\">60</a>\n<a href=\"#61\" id=\"61\">61</a>\n<a href=\"#62\" id=\"62\">62</a>\n<a href=\"#63\" id=\"63\">63</a>\n<a href=\"#64\" id=\"64\">64</a>\n<a href=\"#65\" id=\"65\">65</a>\n<a href=\"#66\" id=\"66\">66</a>\n<a href=\"#67\" id=\"67\">67</a>\n<a href=\"#68\" id=\"68\">68</a>\n<a href=\"#69\" id=\"69\">69</a>\n<a href=\"#70\" id=\"70\">70</a>\n<a href=\"#71\" id=\"71\">71</a>\n<a href=\"#72\" id=\"72\">72</a>\n<a href=\"#73\" id=\"73\">73</a>\n<a href=\"#74\" id=\"74\">74</a>\n<a href=\"#75\" id=\"75\">75</a>\n<a href=\"#76\" id=\"76\">76</a>\n<a href=\"#77\" id=\"77\">77</a>\n<a href=\"#78\" id=\"78\">78</a>\n<a href=\"#79\" id=\"79\">79</a>\n<a href=\"#80\" id=\"80\">80</a>\n<a href=\"#81\" id=\"81\">81</a>\n<a href=\"#82\" id=\"82\">82</a>\n<a href=\"#83\" id=\"83\">83</a>\n<a href=\"#84\" id=\"84\">84</a>\n<a href=\"#85\" id=\"85\">85</a>\n<a href=\"#86\" id=\"86\">86</a>\n<a href=\"#87\" id=\"87\">87</a>\n<a href=\"#88\" id=\"88\">88</a>\n<a href=\"#89\" id=\"89\">89</a>\n<a href=\"#90\" id=\"90\">90</a>\n<a href=\"#91\" id=\"91\">91</a>\n<a href=\"#92\" id=\"92\">92</a>\n<a href=\"#93\" id=\"93\">93</a>\n<a href=\"#94\" id=\"94\">94</a>\n<a href=\"#95\" id=\"95\">95</a>\n<a href=\"#96\" id=\"96\">96</a>\n<a href=\"#97\" id=\"97\">97</a>\n<a href=\"#98\" id=\"98\">98</a>\n<a href=\"#99\" id=\"99\">99</a>\n<a href=\"#100\" id=\"100\">100</a>\n<a href=\"#101\" id=\"101\">101</a>\n<a href=\"#102\" id=\"102\">102</a>\n<a href=\"#103\" id=\"103\">103</a>\n<a href=\"#104\" id=\"104\">104</a>\n<a href=\"#105\" id=\"105\">105</a>\n<a href=\"#106\" id=\"106\">106</a>\n<a href=\"#107\" id=\"107\">107</a>\n<a href=\"#108\" id=\"108\">108</a>\n<a href=\"#109\" id=\"109\">109</a>\n<a href=\"#110\" id=\"110\">110</a>\n<a href=\"#111\" id=\"111\">111</a>\n<a href=\"#112\" id=\"112\">112</a>\n<a href=\"#113\" id=\"113\">113</a>\n<a href=\"#114\" id=\"114\">114</a>\n<a href=\"#115\" id=\"115\">115</a>\n<a href=\"#116\" id=\"116\">116</a>\n<a href=\"#117\" id=\"117\">117</a>\n<a href=\"#118\" id=\"118\">118</a>\n<a href=\"#119\" id=\"119\">119</a>\n<a href=\"#120\" id=\"120\">120</a>\n<a href=\"#121\" id=\"121\">121</a>\n<a href=\"#122\" id=\"122\">122</a>\n<a href=\"#123\" id=\"123\">123</a>\n<a href=\"#124\" id=\"124\">124</a>\n<a href=\"#125\" id=\"125\">125</a>\n<a href=\"#126\" id=\"126\">126</a>\n<a href=\"#127\" id=\"127\">127</a>\n<a href=\"#128\" id=\"128\">128</a>\n<a href=\"#129\" id=\"129\">129</a>\n<a href=\"#130\" id=\"130\">130</a>\n<a href=\"#131\" id=\"131\">131</a>\n<a href=\"#132\" id=\"132\">132</a>\n<a href=\"#133\" id=\"133\">133</a>\n<a href=\"#134\" id=\"134\">134</a>\n<a href=\"#135\" id=\"135\">135</a>\n<a href=\"#136\" id=\"136\">136</a>\n<a href=\"#137\" id=\"137\">137</a>\n<a href=\"#138\" id=\"138\">138</a>\n<a href=\"#139\" id=\"139\">139</a>\n<a href=\"#140\" id=\"140\">140</a>\n<a href=\"#141\" id=\"141\">141</a>\n<a href=\"#142\" id=\"142\">142</a>\n<a href=\"#143\" id=\"143\">143</a>\n<a href=\"#144\" id=\"144\">144</a>\n<a href=\"#145\" id=\"145\">145</a>\n<a href=\"#146\" id=\"146\">146</a>\n<a href=\"#147\" id=\"147\">147</a>\n<a href=\"#148\" id=\"148\">148</a>\n<a href=\"#149\" id=\"149\">149</a>\n<a href=\"#150\" id=\"150\">150</a>\n<a href=\"#151\" id=\"151\">151</a>\n<a href=\"#152\" id=\"152\">152</a>\n<a href=\"#153\" id=\"153\">153</a>\n<a href=\"#154\" id=\"154\">154</a>\n<a href=\"#155\" id=\"155\">155</a>\n<a href=\"#156\" id=\"156\">156</a>\n<a href=\"#157\" id=\"157\">157</a>\n<a href=\"#158\" id=\"158\">158</a>\n<a href=\"#159\" id=\"159\">159</a>\n<a href=\"#160\" id=\"160\">160</a>\n<a href=\"#161\" id=\"161\">161</a>\n<a href=\"#162\" id=\"162\">162</a>\n<a href=\"#163\" id=\"163\">163</a>\n<a href=\"#164\" id=\"164\">164</a>\n<a href=\"#165\" id=\"165\">165</a>\n<a href=\"#166\" id=\"166\">166</a>\n<a href=\"#167\" id=\"167\">167</a>\n<a href=\"#168\" id=\"168\">168</a>\n<a href=\"#169\" id=\"169\">169</a>\n<a href=\"#170\" id=\"170\">170</a>\n<a href=\"#171\" id=\"171\">171</a>\n<a href=\"#172\" id=\"172\">172</a>\n<a href=\"#173\" id=\"173\">173</a>\n<a href=\"#174\" id=\"174\">174</a>\n<a href=\"#175\" id=\"175\">175</a>\n<a href=\"#176\" id=\"176\">176</a>\n<a href=\"#177\" id=\"177\">177</a>\n<a href=\"#178\" id=\"178\">178</a>\n<a href=\"#179\" id=\"179\">179</a>\n<a href=\"#180\" id=\"180\">180</a>\n<a href=\"#181\" id=\"181\">181</a>\n<a href=\"#182\" id=\"182\">182</a>\n<a href=\"#183\" id=\"183\">183</a>\n<a href=\"#184\" id=\"184\">184</a>\n<a href=\"#185\" id=\"185\">185</a>\n<a href=\"#186\" id=\"186\">186</a>\n<a href=\"#187\" id=\"187\">187</a>\n<a href=\"#188\" id=\"188\">188</a>\n<a href=\"#189\" id=\"189\">189</a>\n<a href=\"#190\" id=\"190\">190</a>\n<a href=\"#191\" id=\"191\">191</a>\n<a href=\"#192\" id=\"192\">192</a>\n<a href=\"#193\" id=\"193\">193</a>\n<a href=\"#194\" id=\"194\">194</a>\n<a href=\"#195\" id=\"195\">195</a>\n<a href=\"#196\" id=\"196\">196</a>\n<a href=\"#197\" id=\"197\">197</a>\n<a href=\"#198\" id=\"198\">198</a>\n<a href=\"#199\" id=\"199\">199</a>\n<a href=\"#200\" id=\"200\">200</a>\n<a href=\"#201\" id=\"201\">201</a>\n<a href=\"#202\" id=\"202\">202</a>\n<a href=\"#203\" id=\"203\">203</a>\n<a href=\"#204\" id=\"204\">204</a>\n<a href=\"#205\" id=\"205\">205</a>\n<a href=\"#206\" id=\"206\">206</a>\n<a href=\"#207\" id=\"207\">207</a>\n<a href=\"#208\" id=\"208\">208</a>\n<a href=\"#209\" id=\"209\">209</a>\n<a href=\"#210\" id=\"210\">210</a>\n<a href=\"#211\" id=\"211\">211</a>\n<a href=\"#212\" id=\"212\">212</a>\n<a href=\"#213\" id=\"213\">213</a>\n<a href=\"#214\" id=\"214\">214</a>\n<a href=\"#215\" id=\"215\">215</a>\n<a href=\"#216\" id=\"216\">216</a>\n<a href=\"#217\" id=\"217\">217</a>\n<a href=\"#218\" id=\"218\">218</a>\n<a href=\"#219\" id=\"219\">219</a>\n<a href=\"#220\" id=\"220\">220</a>\n<a href=\"#221\" id=\"221\">221</a>\n<a href=\"#222\" id=\"222\">222</a>\n<a href=\"#223\" id=\"223\">223</a>\n<a href=\"#224\" id=\"224\">224</a>\n<a href=\"#225\" id=\"225\">225</a>\n<a href=\"#226\" id=\"226\">226</a>\n<a href=\"#227\" id=\"227\">227</a>\n<a href=\"#228\" id=\"228\">228</a>\n<a href=\"#229\" id=\"229\">229</a>\n<a href=\"#230\" id=\"230\">230</a>\n<a href=\"#231\" id=\"231\">231</a>\n<a href=\"#232\" id=\"232\">232</a>\n<a href=\"#233\" id=\"233\">233</a>\n<a href=\"#234\" id=\"234\">234</a>\n<a href=\"#235\" id=\"235\">235</a>\n<a href=\"#236\" id=\"236\">236</a>\n<a href=\"#237\" id=\"237\">237</a>\n<a href=\"#238\" id=\"238\">238</a>\n<a href=\"#239\" id=\"239\">239</a>\n<a href=\"#240\" id=\"240\">240</a>\n<a href=\"#241\" id=\"241\">241</a>\n<a href=\"#242\" id=\"242\">242</a>\n<a href=\"#243\" id=\"243\">243</a>\n<a href=\"#244\" id=\"244\">244</a>\n<a href=\"#245\" id=\"245\">245</a>\n<a href=\"#246\" id=\"246\">246</a>\n<a href=\"#247\" id=\"247\">247</a>\n<a href=\"#248\" id=\"248\">248</a>\n<a href=\"#249\" id=\"249\">249</a>\n<a href=\"#250\" id=\"250\">250</a>\n<a href=\"#251\" id=\"251\">251</a>\n<a href=\"#252\" id=\"252\">252</a>\n<a href=\"#253\" id=\"253\">253</a>\n<a href=\"#254\" id=\"254\">254</a>\n<a href=\"#255\" id=\"255\">255</a>\n<a href=\"#256\" id=\"256\">256</a>\n<a href=\"#257\" id=\"257\">257</a>\n<a href=\"#258\" id=\"258\">258</a>\n<a href=\"#259\" id=\"259\">259</a>\n<a href=\"#260\" id=\"260\">260</a>\n<a href=\"#261\" id=\"261\">261</a>\n<a href=\"#262\" id=\"262\">262</a>\n<a href=\"#263\" id=\"263\">263</a>\n<a href=\"#264\" id=\"264\">264</a>\n<a href=\"#265\" id=\"265\">265</a>\n<a href=\"#266\" id=\"266\">266</a>\n<a href=\"#267\" id=\"267\">267</a>\n<a href=\"#268\" id=\"268\">268</a>\n<a href=\"#269\" id=\"269\">269</a>\n<a href=\"#270\" id=\"270\">270</a>\n<a href=\"#271\" id=\"271\">271</a>\n<a href=\"#272\" id=\"272\">272</a>\n<a href=\"#273\" id=\"273\">273</a>\n<a href=\"#274\" id=\"274\">274</a>\n<a href=\"#275\" id=\"275\">275</a>\n<a href=\"#276\" id=\"276\">276</a>\n<a href=\"#277\" id=\"277\">277</a>\n<a href=\"#278\" id=\"278\">278</a>\n<a href=\"#279\" id=\"279\">279</a>\n<a href=\"#280\" id=\"280\">280</a>\n<a href=\"#281\" id=\"281\">281</a>\n<a href=\"#282\" id=\"282\">282</a>\n<a href=\"#283\" id=\"283\">283</a>\n<a href=\"#284\" id=\"284\">284</a>\n<a href=\"#285\" id=\"285\">285</a>\n<a href=\"#286\" id=\"286\">286</a>\n<a href=\"#287\" id=\"287\">287</a>\n<a href=\"#288\" id=\"288\">288</a>\n<a href=\"#289\" id=\"289\">289</a>\n<a href=\"#290\" id=\"290\">290</a>\n<a href=\"#291\" id=\"291\">291</a>\n<a href=\"#292\" id=\"292\">292</a>\n<a href=\"#293\" id=\"293\">293</a>\n<a href=\"#294\" id=\"294\">294</a>\n<a href=\"#295\" id=\"295\">295</a>\n<a href=\"#296\" id=\"296\">296</a>\n<a href=\"#297\" id=\"297\">297</a>\n<a href=\"#298\" id=\"298\">298</a>\n<a href=\"#299\" id=\"299\">299</a>\n<a href=\"#300\" id=\"300\">300</a>\n<a href=\"#301\" id=\"301\">301</a>\n<a href=\"#302\" id=\"302\">302</a>\n<a href=\"#303\" id=\"303\">303</a>\n<a href=\"#304\" id=\"304\">304</a>\n<a href=\"#305\" id=\"305\">305</a>\n<a href=\"#306\" id=\"306\">306</a>\n<a href=\"#307\" id=\"307\">307</a>\n<a href=\"#308\" id=\"308\">308</a>\n<a href=\"#309\" id=\"309\">309</a>\n<a href=\"#310\" id=\"310\">310</a>\n<a href=\"#311\" id=\"311\">311</a>\n<a href=\"#312\" id=\"312\">312</a>\n<a href=\"#313\" id=\"313\">313</a>\n<a href=\"#314\" id=\"314\">314</a>\n<a href=\"#315\" id=\"315\">315</a>\n<a href=\"#316\" id=\"316\">316</a>\n<a href=\"#317\" id=\"317\">317</a>\n<a href=\"#318\" id=\"318\">318</a>\n<a href=\"#319\" id=\"319\">319</a>\n<a href=\"#320\" id=\"320\">320</a>\n<a href=\"#321\" id=\"321\">321</a>\n<a href=\"#322\" id=\"322\">322</a>\n<a href=\"#323\" id=\"323\">323</a>\n<a href=\"#324\" id=\"324\">324</a>\n<a href=\"#325\" id=\"325\">325</a>\n<a href=\"#326\" id=\"326\">326</a>\n<a href=\"#327\" id=\"327\">327</a>\n<a href=\"#328\" id=\"328\">328</a>\n<a href=\"#329\" id=\"329\">329</a>\n<a href=\"#330\" id=\"330\">330</a>\n<a href=\"#331\" id=\"331\">331</a>\n<a href=\"#332\" id=\"332\">332</a>\n<a href=\"#333\" id=\"333\">333</a>\n<a href=\"#334\" id=\"334\">334</a>\n<a href=\"#335\" id=\"335\">335</a>\n<a href=\"#336\" id=\"336\">336</a>\n<a href=\"#337\" id=\"337\">337</a>\n<a href=\"#338\" id=\"338\">338</a>\n<a href=\"#339\" id=\"339\">339</a>\n<a href=\"#340\" id=\"340\">340</a>\n<a href=\"#341\" id=\"341\">341</a>\n<a href=\"#342\" id=\"342\">342</a>\n<a href=\"#343\" id=\"343\">343</a>\n<a href=\"#344\" id=\"344\">344</a>\n<a href=\"#345\" id=\"345\">345</a>\n<a href=\"#346\" id=\"346\">346</a>\n<a href=\"#347\" id=\"347\">347</a>\n<a href=\"#348\" id=\"348\">348</a>\n<a href=\"#349\" id=\"349\">349</a>\n<a href=\"#350\" id=\"350\">350</a>\n<a href=\"#351\" id=\"351\">351</a>\n<a href=\"#352\" id=\"352\">352</a>\n<a href=\"#353\" id=\"353\">353</a>\n<a href=\"#354\" id=\"354\">354</a>\n<a href=\"#355\" id=\"355\">355</a>\n<a href=\"#356\" id=\"356\">356</a>\n<a href=\"#357\" id=\"357\">357</a>\n<a href=\"#358\" id=\"358\">358</a>\n<a href=\"#359\" id=\"359\">359</a>\n<a href=\"#360\" id=\"360\">360</a>\n<a href=\"#361\" id=\"361\">361</a>\n<a href=\"#362\" id=\"362\">362</a>\n<a href=\"#363\" id=\"363\">363</a>\n<a href=\"#364\" id=\"364\">364</a>\n<a href=\"#365\" id=\"365\">365</a>\n<a href=\"#366\" id=\"366\">366</a>\n<a href=\"#367\" id=\"367\">367</a>\n<a href=\"#368\" id=\"368\">368</a>\n<a href=\"#369\" id=\"369\">369</a>\n<a href=\"#370\" id=\"370\">370</a>\n<a href=\"#371\" id=\"371\">371</a>\n<a href=\"#372\" id=\"372\">372</a>\n<a href=\"#373\" id=\"373\">373</a>\n<a href=\"#374\" id=\"374\">374</a>\n<a href=\"#375\" id=\"375\">375</a>\n<a href=\"#376\" id=\"376\">376</a>\n<a href=\"#377\" id=\"377\">377</a>\n<a href=\"#378\" id=\"378\">378</a>\n<a href=\"#379\" id=\"379\">379</a>\n<a href=\"#380\" id=\"380\">380</a>\n<a href=\"#381\" id=\"381\">381</a>\n<a href=\"#382\" id=\"382\">382</a>\n<a href=\"#383\" id=\"383\">383</a>\n<a href=\"#384\" id=\"384\">384</a>\n<a href=\"#385\" id=\"385\">385</a>\n<a href=\"#386\" id=\"386\">386</a>\n<a href=\"#387\" id=\"387\">387</a>\n<a href=\"#388\" id=\"388\">388</a>\n<a href=\"#389\" id=\"389\">389</a>\n<a href=\"#390\" id=\"390\">390</a>\n<a href=\"#391\" id=\"391\">391</a>\n<a href=\"#392\" id=\"392\">392</a>\n<a href=\"#393\" id=\"393\">393</a>\n<a href=\"#394\" id=\"394\">394</a>\n<a href=\"#395\" id=\"395\">395</a>\n<a href=\"#396\" id=\"396\">396</a>\n<a href=\"#397\" id=\"397\">397</a>\n<a href=\"#398\" id=\"398\">398</a>\n<a href=\"#399\" id=\"399\">399</a>\n<a href=\"#400\" id=\"400\">400</a>\n<a href=\"#401\" id=\"401\">401</a>\n<a href=\"#402\" id=\"402\">402</a>\n<a href=\"#403\" id=\"403\">403</a>\n<a href=\"#404\" id=\"404\">404</a>\n<a href=\"#405\" id=\"405\">405</a>\n<a href=\"#406\" id=\"406\">406</a>\n<a href=\"#407\" id=\"407\">407</a>\n<a href=\"#408\" id=\"408\">408</a>\n<a href=\"#409\" id=\"409\">409</a>\n<a href=\"#410\" id=\"410\">410</a>\n<a href=\"#411\" id=\"411\">411</a>\n<a href=\"#412\" id=\"412\">412</a>\n<a href=\"#413\" id=\"413\">413</a>\n<a href=\"#414\" id=\"414\">414</a>\n<a href=\"#415\" id=\"415\">415</a>\n<a href=\"#416\" id=\"416\">416</a>\n<a href=\"#417\" id=\"417\">417</a>\n<a href=\"#418\" id=\"418\">418</a>\n<a href=\"#419\" id=\"419\">419</a>\n<a href=\"#420\" id=\"420\">420</a>\n<a href=\"#421\" id=\"421\">421</a>\n<a href=\"#422\" id=\"422\">422</a>\n<a href=\"#423\" id=\"423\">423</a>\n<a href=\"#424\" id=\"424\">424</a>\n<a href=\"#425\" id=\"425\">425</a>\n<a href=\"#426\" id=\"426\">426</a>\n<a href=\"#427\" id=\"427\">427</a>\n<a href=\"#428\" id=\"428\">428</a>\n<a href=\"#429\" id=\"429\">429</a>\n<a href=\"#430\" id=\"430\">430</a>\n<a href=\"#431\" id=\"431\">431</a>\n<a href=\"#432\" id=\"432\">432</a>\n<a href=\"#433\" id=\"433\">433</a>\n<a href=\"#434\" id=\"434\">434</a>\n<a href=\"#435\" id=\"435\">435</a>\n<a href=\"#436\" id=\"436\">436</a>\n<a href=\"#437\" id=\"437\">437</a>\n<a href=\"#438\" id=\"438\">438</a>\n<a href=\"#439\" id=\"439\">439</a>\n<a href=\"#440\" id=\"440\">440</a>\n<a href=\"#441\" id=\"441\">441</a>\n<a href=\"#442\" id=\"442\">442</a>\n<a href=\"#443\" id=\"443\">443</a>\n<a href=\"#444\" id=\"444\">444</a>\n<a href=\"#445\" id=\"445\">445</a>\n<a href=\"#446\" id=\"446\">446</a>\n<a href=\"#447\" id=\"447\">447</a>\n<a href=\"#448\" id=\"448\">448</a>\n<a href=\"#449\" id=\"449\">449</a>\n<a href=\"#450\" id=\"450\">450</a>\n<a href=\"#451\" id=\"451\">451</a>\n<a href=\"#452\" id=\"452\">452</a>\n<a href=\"#453\" id=\"453\">453</a>\n<a href=\"#454\" id=\"454\">454</a>\n<a href=\"#455\" id=\"455\">455</a>\n<a href=\"#456\" id=\"456\">456</a>\n<a href=\"#457\" id=\"457\">457</a>\n<a href=\"#458\" id=\"458\">458</a>\n<a href=\"#459\" id=\"459\">459</a>\n<a href=\"#460\" id=\"460\">460</a>\n<a href=\"#461\" id=\"461\">461</a>\n<a href=\"#462\" id=\"462\">462</a>\n<a href=\"#463\" id=\"463\">463</a>\n<a href=\"#464\" id=\"464\">464</a>\n<a href=\"#465\" id=\"465\">465</a>\n<a href=\"#466\" id=\"466\">466</a>\n<a href=\"#467\" id=\"467\">467</a>\n<a href=\"#468\" id=\"468\">468</a>\n<a href=\"#469\" id=\"469\">469</a>\n<a href=\"#470\" id=\"470\">470</a>\n<a href=\"#471\" id=\"471\">471</a>\n<a href=\"#472\" id=\"472\">472</a>\n<a href=\"#473\" id=\"473\">473</a>\n<a href=\"#474\" id=\"474\">474</a>\n<a href=\"#475\" id=\"475\">475</a>\n<a href=\"#476\" id=\"476\">476</a>\n<a href=\"#477\" id=\"477\">477</a>\n<a href=\"#478\" id=\"478\">478</a>\n<a href=\"#479\" id=\"479\">479</a>\n<a href=\"#480\" id=\"480\">480</a>\n<a href=\"#481\" id=\"481\">481</a>\n<a href=\"#482\" id=\"482\">482</a>\n<a href=\"#483\" id=\"483\">483</a>\n<a href=\"#484\" id=\"484\">484</a>\n<a href=\"#485\" id=\"485\">485</a>\n<a href=\"#486\" id=\"486\">486</a>\n<a href=\"#487\" id=\"487\">487</a>\n<a href=\"#488\" id=\"488\">488</a>\n<a href=\"#489\" id=\"489\">489</a>\n<a href=\"#490\" id=\"490\">490</a>\n<a href=\"#491\" id=\"491\">491</a>\n<a href=\"#492\" id=\"492\">492</a>\n<a href=\"#493\" id=\"493\">493</a>\n<a href=\"#494\" id=\"494\">494</a>\n<a href=\"#495\" id=\"495\">495</a>\n<a href=\"#496\" id=\"496\">496</a>\n<a href=\"#497\" id=\"497\">497</a>\n<a href=\"#498\" id=\"498\">498</a>\n<a href=\"#499\" id=\"499\">499</a>\n<a href=\"#500\" id=\"500\">500</a>\n<a href=\"#501\" id=\"501\">501</a>\n<a href=\"#502\" id=\"502\">502</a>\n<a href=\"#503\" id=\"503\">503</a>\n<a href=\"#504\" id=\"504\">504</a>\n<a href=\"#505\" id=\"505\">505</a>\n<a href=\"#506\" id=\"506\">506</a>\n<a href=\"#507\" id=\"507\">507</a>\n<a href=\"#508\" id=\"508\">508</a>\n<a href=\"#509\" id=\"509\">509</a>\n<a href=\"#510\" id=\"510\">510</a>\n<a href=\"#511\" id=\"511\">511</a>\n<a href=\"#512\" id=\"512\">512</a>\n<a href=\"#513\" id=\"513\">513</a>\n<a href=\"#514\" id=\"514\">514</a>\n<a href=\"#515\" id=\"515\">515</a>\n<a href=\"#516\" id=\"516\">516</a>\n<a href=\"#517\" id=\"517\">517</a>\n<a href=\"#518\" id=\"518\">518</a>\n<a href=\"#519\" id=\"519\">519</a>\n<a href=\"#520\" id=\"520\">520</a>\n<a href=\"#521\" id=\"521\">521</a>\n<a href=\"#522\" id=\"522\">522</a>\n<a href=\"#523\" id=\"523\">523</a>\n<a href=\"#524\" id=\"524\">524</a>\n<a href=\"#525\" id=\"525\">525</a>\n<a href=\"#526\" id=\"526\">526</a>\n<a href=\"#527\" id=\"527\">527</a>\n<a href=\"#528\" id=\"528\">528</a>\n<a href=\"#529\" id=\"529\">529</a>\n<a href=\"#530\" id=\"530\">530</a>\n<a href=\"#531\" id=\"531\">531</a>\n<a href=\"#532\" id=\"532\">532</a>\n<a href=\"#533\" id=\"533\">533</a>\n<a href=\"#534\" id=\"534\">534</a>\n<a href=\"#535\" id=\"535\">535</a>\n<a href=\"#536\" id=\"536\">536</a>\n<a href=\"#537\" id=\"537\">537</a>\n<a href=\"#538\" id=\"538\">538</a>\n<a href=\"#539\" id=\"539\">539</a>\n<a href=\"#540\" id=\"540\">540</a>\n<a href=\"#541\" id=\"541\">541</a>\n<a href=\"#542\" id=\"542\">542</a>\n<a href=\"#543\" id=\"543\">543</a>\n<a href=\"#544\" id=\"544\">544</a>\n<a href=\"#545\" id=\"545\">545</a>\n<a href=\"#546\" id=\"546\">546</a>\n<a href=\"#547\" id=\"547\">547</a>\n<a href=\"#548\" id=\"548\">548</a>\n<a href=\"#549\" id=\"549\">549</a>\n<a href=\"#550\" id=\"550\">550</a>\n<a href=\"#551\" id=\"551\">551</a>\n<a href=\"#552\" id=\"552\">552</a>\n<a href=\"#553\" id=\"553\">553</a>\n<a href=\"#554\" id=\"554\">554</a>\n<a href=\"#555\" id=\"555\">555</a>\n<a href=\"#556\" id=\"556\">556</a>\n<a href=\"#557\" id=\"557\">557</a>\n<a href=\"#558\" id=\"558\">558</a>\n<a href=\"#559\" id=\"559\">559</a>\n<a href=\"#560\" id=\"560\">560</a>\n<a href=\"#561\" id=\"561\">561</a>\n<a href=\"#562\" id=\"562\">562</a>\n<a href=\"#563\" id=\"563\">563</a>\n<a href=\"#564\" id=\"564\">564</a>\n<a href=\"#565\" id=\"565\">565</a>\n<a href=\"#566\" id=\"566\">566</a>\n<a href=\"#567\" id=\"567\">567</a>\n<a href=\"#568\" id=\"568\">568</a>\n<a href=\"#569\" id=\"569\">569</a>\n<a href=\"#570\" id=\"570\">570</a>\n<a href=\"#571\" id=\"571\">571</a>\n<a href=\"#572\" id=\"572\">572</a>\n<a href=\"#573\" id=\"573\">573</a>\n<a href=\"#574\" id=\"574\">574</a>\n<a href=\"#575\" id=\"575\">575</a>\n<a href=\"#576\" id=\"576\">576</a>\n<a href=\"#577\" id=\"577\">577</a>\n<a href=\"#578\" id=\"578\">578</a>\n<a href=\"#579\" id=\"579\">579</a>\n<a href=\"#580\" id=\"580\">580</a>\n<a href=\"#581\" id=\"581\">581</a>\n<a href=\"#582\" id=\"582\">582</a>\n<a href=\"#583\" id=\"583\">583</a>\n<a href=\"#584\" id=\"584\">584</a>\n<a href=\"#585\" id=\"585\">585</a>\n<a href=\"#586\" id=\"586\">586</a>\n<a href=\"#587\" id=\"587\">587</a>\n<a href=\"#588\" id=\"588\">588</a>\n<a href=\"#589\" id=\"589\">589</a>\n<a href=\"#590\" id=\"590\">590</a>\n<a href=\"#591\" id=\"591\">591</a>\n<a href=\"#592\" id=\"592\">592</a>\n<a href=\"#593\" id=\"593\">593</a>\n<a href=\"#594\" id=\"594\">594</a>\n<a href=\"#595\" id=\"595\">595</a>\n<a href=\"#596\" id=\"596\">596</a>\n<a href=\"#597\" id=\"597\">597</a>\n<a href=\"#598\" id=\"598\">598</a>\n<a href=\"#599\" id=\"599\">599</a>\n<a href=\"#600\" id=\"600\">600</a>\n<a href=\"#601\" id=\"601\">601</a>\n<a href=\"#602\" id=\"602\">602</a>\n<a href=\"#603\" id=\"603\">603</a>\n<a href=\"#604\" id=\"604\">604</a>\n<a href=\"#605\" id=\"605\">605</a>\n<a href=\"#606\" id=\"606\">606</a>\n<a href=\"#607\" id=\"607\">607</a>\n<a href=\"#608\" id=\"608\">608</a>\n<a href=\"#609\" id=\"609\">609</a>\n<a href=\"#610\" id=\"610\">610</a>\n<a href=\"#611\" id=\"611\">611</a>\n<a href=\"#612\" id=\"612\">612</a>\n<a href=\"#613\" id=\"613\">613</a>\n<a href=\"#614\" id=\"614\">614</a>\n<a href=\"#615\" id=\"615\">615</a>\n<a href=\"#616\" id=\"616\">616</a>\n<a href=\"#617\" id=\"617\">617</a>\n<a href=\"#618\" id=\"618\">618</a>\n<a href=\"#619\" id=\"619\">619</a>\n<a href=\"#620\" id=\"620\">620</a>\n<a href=\"#621\" id=\"621\">621</a>\n<a href=\"#622\" id=\"622\">622</a>\n<a href=\"#623\" id=\"623\">623</a>\n<a href=\"#624\" id=\"624\">624</a>\n<a href=\"#625\" id=\"625\">625</a>\n<a href=\"#626\" id=\"626\">626</a>\n<a href=\"#627\" id=\"627\">627</a>\n<a href=\"#628\" id=\"628\">628</a>\n<a href=\"#629\" id=\"629\">629</a>\n<a href=\"#630\" id=\"630\">630</a>\n<a href=\"#631\" id=\"631\">631</a>\n<a href=\"#632\" id=\"632\">632</a>\n<a href=\"#633\" id=\"633\">633</a>\n<a href=\"#634\" id=\"634\">634</a>\n<a href=\"#635\" id=\"635\">635</a>\n<a href=\"#636\" id=\"636\">636</a>\n<a href=\"#637\" id=\"637\">637</a>\n<a href=\"#638\" id=\"638\">638</a>\n<a href=\"#639\" id=\"639\">639</a>\n<a href=\"#640\" id=\"640\">640</a>\n<a href=\"#641\" id=\"641\">641</a>\n<a href=\"#642\" id=\"642\">642</a>\n<a href=\"#643\" id=\"643\">643</a>\n<a href=\"#644\" id=\"644\">644</a>\n<a href=\"#645\" id=\"645\">645</a>\n<a href=\"#646\" id=\"646\">646</a>\n<a href=\"#647\" id=\"647\">647</a>\n<a href=\"#648\" id=\"648\">648</a>\n<a href=\"#649\" id=\"649\">649</a>\n<a href=\"#650\" id=\"650\">650</a>\n<a href=\"#651\" id=\"651\">651</a>\n<a href=\"#652\" id=\"652\">652</a>\n<a href=\"#653\" id=\"653\">653</a>\n<a href=\"#654\" id=\"654\">654</a>\n<a href=\"#655\" id=\"655\">655</a>\n<a href=\"#656\" id=\"656\">656</a>\n<a href=\"#657\" id=\"657\">657</a>\n<a href=\"#658\" id=\"658\">658</a>\n<a href=\"#659\" id=\"659\">659</a>\n<a href=\"#660\" id=\"660\">660</a>\n<a href=\"#661\" id=\"661\">661</a>\n<a href=\"#662\" id=\"662\">662</a>\n<a href=\"#663\" id=\"663\">663</a>\n<a href=\"#664\" id=\"664\">664</a>\n<a href=\"#665\" id=\"665\">665</a>\n<a href=\"#666\" id=\"666\">666</a>\n<a href=\"#667\" id=\"667\">667</a>\n<a href=\"#668\" id=\"668\">668</a>\n<a href=\"#669\" id=\"669\">669</a>\n<a href=\"#670\" id=\"670\">670</a>\n<a href=\"#671\" id=\"671\">671</a>\n<a href=\"#672\" id=\"672\">672</a>\n<a href=\"#673\" id=\"673\">673</a>\n<a href=\"#674\" id=\"674\">674</a>\n<a href=\"#675\" id=\"675\">675</a>\n<a href=\"#676\" id=\"676\">676</a>\n<a href=\"#677\" id=\"677\">677</a>\n<a href=\"#678\" id=\"678\">678</a>\n<a href=\"#679\" id=\"679\">679</a>\n<a href=\"#680\" id=\"680\">680</a>\n<a href=\"#681\" id=\"681\">681</a>\n<a href=\"#682\" id=\"682\">682</a>\n<a href=\"#683\" id=\"683\">683</a>\n<a href=\"#684\" id=\"684\">684</a>\n<a href=\"#685\" id=\"685\">685</a>\n<a href=\"#686\" id=\"686\">686</a>\n<a href=\"#687\" id=\"687\">687</a>\n<a href=\"#688\" id=\"688\">688</a>\n<a href=\"#689\" id=\"689\">689</a>\n<a href=\"#690\" id=\"690\">690</a>\n<a href=\"#691\" id=\"691\">691</a>\n<a href=\"#692\" id=\"692\">692</a>\n<a href=\"#693\" id=\"693\">693</a>\n<a href=\"#694\" id=\"694\">694</a>\n<a href=\"#695\" id=\"695\">695</a>\n<a href=\"#696\" id=\"696\">696</a>\n<a href=\"#697\" id=\"697\">697</a>\n<a href=\"#698\" id=\"698\">698</a>\n<a href=\"#699\" id=\"699\">699</a>\n<a href=\"#700\" id=\"700\">700</a>\n<a href=\"#701\" id=\"701\">701</a>\n<a href=\"#702\" id=\"702\">702</a>\n<a href=\"#703\" id=\"703\">703</a>\n<a href=\"#704\" id=\"704\">704</a>\n<a href=\"#705\" id=\"705\">705</a>\n<a href=\"#706\" id=\"706\">706</a>\n<a href=\"#707\" id=\"707\">707</a>\n<a href=\"#708\" id=\"708\">708</a>\n<a href=\"#709\" id=\"709\">709</a>\n<a href=\"#710\" id=\"710\">710</a>\n<a href=\"#711\" id=\"711\">711</a>\n<a href=\"#712\" id=\"712\">712</a>\n<a href=\"#713\" id=\"713\">713</a>\n<a href=\"#714\" id=\"714\">714</a>\n<a href=\"#715\" id=\"715\">715</a>\n<a href=\"#716\" id=\"716\">716</a>\n<a href=\"#717\" id=\"717\">717</a>\n<a href=\"#718\" id=\"718\">718</a>\n<a href=\"#719\" id=\"719\">719</a>\n<a href=\"#720\" id=\"720\">720</a>\n<a href=\"#721\" id=\"721\">721</a>\n<a href=\"#722\" id=\"722\">722</a>\n<a href=\"#723\" id=\"723\">723</a>\n<a href=\"#724\" id=\"724\">724</a>\n<a href=\"#725\" id=\"725\">725</a>\n<a href=\"#726\" id=\"726\">726</a>\n<a href=\"#727\" id=\"727\">727</a>\n<a href=\"#728\" id=\"728\">728</a>\n<a href=\"#729\" id=\"729\">729</a>\n<a href=\"#730\" id=\"730\">730</a>\n<a href=\"#731\" id=\"731\">731</a>\n<a href=\"#732\" id=\"732\">732</a>\n<a href=\"#733\" id=\"733\">733</a>\n<a href=\"#734\" id=\"734\">734</a>\n<a href=\"#735\" id=\"735\">735</a>\n<a href=\"#736\" id=\"736\">736</a>\n<a href=\"#737\" id=\"737\">737</a>\n<a href=\"#738\" id=\"738\">738</a>\n<a href=\"#739\" id=\"739\">739</a>\n<a href=\"#740\" id=\"740\">740</a>\n<a href=\"#741\" id=\"741\">741</a>\n<a href=\"#742\" id=\"742\">742</a>\n<a href=\"#743\" id=\"743\">743</a>\n<a href=\"#744\" id=\"744\">744</a>\n<a href=\"#745\" id=\"745\">745</a>\n<a href=\"#746\" id=\"746\">746</a>\n<a href=\"#747\" id=\"747\">747</a>\n<a href=\"#748\" id=\"748\">748</a>\n<a href=\"#749\" id=\"749\">749</a>\n<a href=\"#750\" id=\"750\">750</a>\n<a href=\"#751\" id=\"751\">751</a>\n<a href=\"#752\" id=\"752\">752</a>\n<a href=\"#753\" id=\"753\">753</a>\n<a href=\"#754\" id=\"754\">754</a>\n<a href=\"#755\" id=\"755\">755</a>\n<a href=\"#756\" id=\"756\">756</a>\n<a href=\"#757\" id=\"757\">757</a>\n<a href=\"#758\" id=\"758\">758</a>\n<a href=\"#759\" id=\"759\">759</a>\n<a href=\"#760\" id=\"760\">760</a>\n<a href=\"#761\" id=\"761\">761</a>\n<a href=\"#762\" id=\"762\">762</a>\n<a href=\"#763\" id=\"763\">763</a>\n<a href=\"#764\" id=\"764\">764</a>\n<a href=\"#765\" id=\"765\">765</a>\n<a href=\"#766\" id=\"766\">766</a>\n<a href=\"#767\" id=\"767\">767</a>\n<a href=\"#768\" id=\"768\">768</a>\n<a href=\"#769\" id=\"769\">769</a>\n<a href=\"#770\" id=\"770\">770</a>\n<a href=\"#771\" id=\"771\">771</a>\n<a href=\"#772\" id=\"772\">772</a>\n<a href=\"#773\" id=\"773\">773</a>\n<a href=\"#774\" id=\"774\">774</a>\n<a href=\"#775\" id=\"775\">775</a>\n<a href=\"#776\" id=\"776\">776</a>\n<a href=\"#777\" id=\"777\">777</a>\n<a href=\"#778\" id=\"778\">778</a>\n<a href=\"#779\" id=\"779\">779</a>\n<a href=\"#780\" id=\"780\">780</a>\n<a href=\"#781\" id=\"781\">781</a>\n<a href=\"#782\" id=\"782\">782</a>\n<a href=\"#783\" id=\"783\">783</a>\n<a href=\"#784\" id=\"784\">784</a>\n<a href=\"#785\" id=\"785\">785</a>\n<a href=\"#786\" id=\"786\">786</a>\n<a href=\"#787\" id=\"787\">787</a>\n<a href=\"#788\" id=\"788\">788</a>\n<a href=\"#789\" id=\"789\">789</a>\n<a href=\"#790\" id=\"790\">790</a>\n<a href=\"#791\" id=\"791\">791</a>\n<a href=\"#792\" id=\"792\">792</a>\n<a href=\"#793\" id=\"793\">793</a>\n<a href=\"#794\" id=\"794\">794</a>\n<a href=\"#795\" id=\"795\">795</a>\n<a href=\"#796\" id=\"796\">796</a>\n<a href=\"#797\" id=\"797\">797</a>\n<a href=\"#798\" id=\"798\">798</a>\n<a href=\"#799\" id=\"799\">799</a>\n<a href=\"#800\" id=\"800\">800</a>\n<a href=\"#801\" id=\"801\">801</a>\n<a href=\"#802\" id=\"802\">802</a>\n<a href=\"#803\" id=\"803\">803</a>\n<a href=\"#804\" id=\"804\">804</a>\n<a href=\"#805\" id=\"805\">805</a>\n<a href=\"#806\" id=\"806\">806</a>\n<a href=\"#807\" id=\"807\">807</a>\n<a href=\"#808\" id=\"808\">808</a>\n<a href=\"#809\" id=\"809\">809</a>\n<a href=\"#810\" id=\"810\">810</a>\n<a href=\"#811\" id=\"811\">811</a>\n<a href=\"#812\" id=\"812\">812</a>\n<a href=\"#813\" id=\"813\">813</a>\n<a href=\"#814\" id=\"814\">814</a>\n<a href=\"#815\" id=\"815\">815</a>\n<a href=\"#816\" id=\"816\">816</a>\n<a href=\"#817\" id=\"817\">817</a>\n<a href=\"#818\" id=\"818\">818</a>\n<a href=\"#819\" id=\"819\">819</a>\n<a href=\"#820\" id=\"820\">820</a>\n<a href=\"#821\" id=\"821\">821</a>\n<a href=\"#822\" id=\"822\">822</a>\n<a href=\"#823\" id=\"823\">823</a>\n<a href=\"#824\" id=\"824\">824</a>\n<a href=\"#825\" id=\"825\">825</a>\n<a href=\"#826\" id=\"826\">826</a>\n<a href=\"#827\" id=\"827\">827</a>\n<a href=\"#828\" id=\"828\">828</a>\n<a href=\"#829\" id=\"829\">829</a>\n<a href=\"#830\" id=\"830\">830</a>\n<a href=\"#831\" id=\"831\">831</a>\n<a href=\"#832\" id=\"832\">832</a>\n<a href=\"#833\" id=\"833\">833</a>\n<a href=\"#834\" id=\"834\">834</a>\n<a href=\"#835\" id=\"835\">835</a>\n<a href=\"#836\" id=\"836\">836</a>\n<a href=\"#837\" id=\"837\">837</a>\n<a href=\"#838\" id=\"838\">838</a>\n<a href=\"#839\" id=\"839\">839</a>\n<a href=\"#840\" id=\"840\">840</a>\n<a href=\"#841\" id=\"841\">841</a>\n<a href=\"#842\" id=\"842\">842</a>\n<a href=\"#843\" id=\"843\">843</a>\n<a href=\"#844\" id=\"844\">844</a>\n<a href=\"#845\" id=\"845\">845</a>\n<a href=\"#846\" id=\"846\">846</a>\n<a href=\"#847\" id=\"847\">847</a>\n<a href=\"#848\" id=\"848\">848</a>\n<a href=\"#849\" id=\"849\">849</a>\n<a href=\"#850\" id=\"850\">850</a>\n<a href=\"#851\" id=\"851\">851</a>\n<a href=\"#852\" id=\"852\">852</a>\n<a href=\"#853\" id=\"853\">853</a>\n<a href=\"#854\" id=\"854\">854</a>\n<a href=\"#855\" id=\"855\">855</a>\n<a href=\"#856\" id=\"856\">856</a>\n<a href=\"#857\" id=\"857\">857</a>\n<a href=\"#858\" id=\"858\">858</a>\n<a href=\"#859\" id=\"859\">859</a>\n<a href=\"#860\" id=\"860\">860</a>\n<a href=\"#861\" id=\"861\">861</a>\n<a href=\"#862\" id=\"862\">862</a>\n<a href=\"#863\" id=\"863\">863</a>\n<a href=\"#864\" id=\"864\">864</a>\n<a href=\"#865\" id=\"865\">865</a>\n<a href=\"#866\" id=\"866\">866</a>\n<a href=\"#867\" id=\"867\">867</a>\n<a href=\"#868\" id=\"868\">868</a>\n<a href=\"#869\" id=\"869\">869</a>\n<a href=\"#870\" id=\"870\">870</a>\n<a href=\"#871\" id=\"871\">871</a>\n<a href=\"#872\" id=\"872\">872</a>\n<a href=\"#873\" id=\"873\">873</a>\n<a href=\"#874\" id=\"874\">874</a>\n<a href=\"#875\" id=\"875\">875</a>\n<a href=\"#876\" id=\"876\">876</a>\n<a href=\"#877\" id=\"877\">877</a>\n<a href=\"#878\" id=\"878\">878</a>\n<a href=\"#879\" id=\"879\">879</a>\n<a href=\"#880\" id=\"880\">880</a>\n<a href=\"#881\" id=\"881\">881</a>\n<a href=\"#882\" id=\"882\">882</a>\n<a href=\"#883\" id=\"883\">883</a>\n<a href=\"#884\" id=\"884\">884</a>\n<a href=\"#885\" id=\"885\">885</a>\n<a href=\"#886\" id=\"886\">886</a>\n<a href=\"#887\" id=\"887\">887</a>\n<a href=\"#888\" id=\"888\">888</a>\n<a href=\"#889\" id=\"889\">889</a>\n<a href=\"#890\" id=\"890\">890</a>\n<a href=\"#891\" id=\"891\">891</a>\n<a href=\"#892\" id=\"892\">892</a>\n<a href=\"#893\" id=\"893\">893</a>\n<a href=\"#894\" id=\"894\">894</a>\n<a href=\"#895\" id=\"895\">895</a>\n<a href=\"#896\" id=\"896\">896</a>\n<a href=\"#897\" id=\"897\">897</a>\n<a href=\"#898\" id=\"898\">898</a>\n<a href=\"#899\" id=\"899\">899</a>\n<a href=\"#900\" id=\"900\">900</a>\n<a href=\"#901\" id=\"901\">901</a>\n<a href=\"#902\" id=\"902\">902</a>\n<a href=\"#903\" id=\"903\">903</a>\n<a href=\"#904\" id=\"904\">904</a>\n<a href=\"#905\" id=\"905\">905</a>\n<a href=\"#906\" id=\"906\">906</a>\n<a href=\"#907\" id=\"907\">907</a>\n<a href=\"#908\" id=\"908\">908</a>\n<a href=\"#909\" id=\"909\">909</a>\n<a href=\"#910\" id=\"910\">910</a>\n<a href=\"#911\" id=\"911\">911</a>\n<a href=\"#912\" id=\"912\">912</a>\n<a href=\"#913\" id=\"913\">913</a>\n<a href=\"#914\" id=\"914\">914</a>\n<a href=\"#915\" id=\"915\">915</a>\n<a href=\"#916\" id=\"916\">916</a>\n<a href=\"#917\" id=\"917\">917</a>\n<a href=\"#918\" id=\"918\">918</a>\n<a href=\"#919\" id=\"919\">919</a>\n<a href=\"#920\" id=\"920\">920</a>\n<a href=\"#921\" id=\"921\">921</a>\n<a href=\"#922\" id=\"922\">922</a>\n<a href=\"#923\" id=\"923\">923</a>\n<a href=\"#924\" id=\"924\">924</a>\n<a href=\"#925\" id=\"925\">925</a>\n<a href=\"#926\" id=\"926\">926</a>\n<a href=\"#927\" id=\"927\">927</a>\n<a href=\"#928\" id=\"928\">928</a>\n<a href=\"#929\" id=\"929\">929</a>\n<a href=\"#930\" id=\"930\">930</a>\n<a href=\"#931\" id=\"931\">931</a>\n<a href=\"#932\" id=\"932\">932</a>\n<a href=\"#933\" id=\"933\">933</a>\n<a href=\"#934\" id=\"934\">934</a>\n<a href=\"#935\" id=\"935\">935</a>\n<a href=\"#936\" id=\"936\">936</a>\n<a href=\"#937\" id=\"937\">937</a>\n<a href=\"#938\" id=\"938\">938</a>\n<a href=\"#939\" id=\"939\">939</a>\n<a href=\"#940\" id=\"940\">940</a>\n<a href=\"#941\" id=\"941\">941</a>\n<a href=\"#942\" id=\"942\">942</a>\n<a href=\"#943\" id=\"943\">943</a>\n<a href=\"#944\" id=\"944\">944</a>\n<a href=\"#945\" id=\"945\">945</a>\n<a href=\"#946\" id=\"946\">946</a>\n<a href=\"#947\" id=\"947\">947</a>\n<a href=\"#948\" id=\"948\">948</a>\n<a href=\"#949\" id=\"949\">949</a>\n<a href=\"#950\" id=\"950\">950</a>\n<a href=\"#951\" id=\"951\">951</a>\n<a href=\"#952\" id=\"952\">952</a>\n<a href=\"#953\" id=\"953\">953</a>\n<a href=\"#954\" id=\"954\">954</a>\n<a href=\"#955\" id=\"955\">955</a>\n<a href=\"#956\" id=\"956\">956</a>\n<a href=\"#957\" id=\"957\">957</a>\n<a href=\"#958\" id=\"958\">958</a>\n<a href=\"#959\" id=\"959\">959</a>\n<a href=\"#960\" id=\"960\">960</a>\n<a href=\"#961\" id=\"961\">961</a>\n<a href=\"#962\" id=\"962\">962</a>\n<a href=\"#963\" id=\"963\">963</a>\n<a href=\"#964\" id=\"964\">964</a>\n<a href=\"#965\" id=\"965\">965</a>\n<a href=\"#966\" id=\"966\">966</a>\n<a href=\"#967\" id=\"967\">967</a>\n<a href=\"#968\" id=\"968\">968</a>\n<a href=\"#969\" id=\"969\">969</a>\n<a href=\"#970\" id=\"970\">970</a>\n<a href=\"#971\" id=\"971\">971</a>\n<a href=\"#972\" id=\"972\">972</a>\n<a href=\"#973\" id=\"973\">973</a>\n<a href=\"#974\" id=\"974\">974</a>\n<a href=\"#975\" id=\"975\">975</a>\n<a href=\"#976\" id=\"976\">976</a>\n<a href=\"#977\" id=\"977\">977</a>\n<a href=\"#978\" id=\"978\">978</a>\n<a href=\"#979\" id=\"979\">979</a>\n<a href=\"#980\" id=\"980\">980</a>\n<a href=\"#981\" id=\"981\">981</a>\n<a href=\"#982\" id=\"982\">982</a>\n<a href=\"#983\" id=\"983\">983</a>\n<a href=\"#984\" id=\"984\">984</a>\n<a href=\"#985\" id=\"985\">985</a>\n<a href=\"#986\" id=\"986\">986</a>\n<a href=\"#987\" id=\"987\">987</a>\n<a href=\"#988\" id=\"988\">988</a>\n<a href=\"#989\" id=\"989\">989</a>\n<a href=\"#990\" id=\"990\">990</a>\n<a href=\"#991\" id=\"991\">991</a>\n<a href=\"#992\" id=\"992\">992</a>\n<a href=\"#993\" id=\"993\">993</a>\n<a href=\"#994\" id=\"994\">994</a>\n<a href=\"#995\" id=\"995\">995</a>\n<a href=\"#996\" id=\"996\">996</a>\n<a href=\"#997\" id=\"997\">997</a>\n<a href=\"#998\" id=\"998\">998</a>\n<a href=\"#999\" id=\"999\">999</a>\n<a href=\"#1000\" id=\"1000\">1000</a>\n<a href=\"#1001\" id=\"1001\">1001</a>\n<a href=\"#1002\" id=\"1002\">1002</a>\n<a href=\"#1003\" id=\"1003\">1003</a>\n<a href=\"#1004\" id=\"1004\">1004</a>\n<a href=\"#1005\" id=\"1005\">1005</a>\n<a href=\"#1006\" id=\"1006\">1006</a>\n<a href=\"#1007\" id=\"1007\">1007</a>\n<a href=\"#1008\" id=\"1008\">1008</a>\n<a href=\"#1009\" id=\"1009\">1009</a>\n<a href=\"#1010\" id=\"1010\">1010</a>\n<a href=\"#1011\" id=\"1011\">1011</a>\n<a href=\"#1012\" id=\"1012\">1012</a>\n<a href=\"#1013\" id=\"1013\">1013</a>\n<a href=\"#1014\" id=\"1014\">1014</a>\n<a href=\"#1015\" id=\"1015\">1015</a>\n<a href=\"#1016\" id=\"1016\">1016</a>\n<a href=\"#1017\" id=\"1017\">1017</a>\n<a href=\"#1018\" id=\"1018\">1018</a>\n<a href=\"#1019\" id=\"1019\">1019</a>\n<a href=\"#1020\" id=\"1020\">1020</a>\n<a href=\"#1021\" id=\"1021\">1021</a>\n<a href=\"#1022\" id=\"1022\">1022</a>\n<a href=\"#1023\" id=\"1023\">1023</a>\n<a href=\"#1024\" id=\"1024\">1024</a>\n<a href=\"#1025\" id=\"1025\">1025</a>\n<a href=\"#1026\" id=\"1026\">1026</a>\n<a href=\"#1027\" id=\"1027\">1027</a>\n<a href=\"#1028\" id=\"1028\">1028</a>\n<a href=\"#1029\" id=\"1029\">1029</a>\n<a href=\"#1030\" id=\"1030\">1030</a>\n<a href=\"#1031\" id=\"1031\">1031</a>\n<a href=\"#1032\" id=\"1032\">1032</a>\n<a href=\"#1033\" id=\"1033\">1033</a>\n<a href=\"#1034\" id=\"1034\">1034</a>\n<a href=\"#1035\" id=\"1035\">1035</a>\n<a href=\"#1036\" id=\"1036\">1036</a>\n<a href=\"#1037\" id=\"1037\">1037</a>\n<a href=\"#1038\" id=\"1038\">1038</a>\n<a href=\"#1039\" id=\"1039\">1039</a>\n<a href=\"#1040\" id=\"1040\">1040</a>\n<a href=\"#1041\" id=\"1041\">1041</a>\n<a href=\"#1042\" id=\"1042\">1042</a>\n<a href=\"#1043\" id=\"1043\">1043</a>\n<a href=\"#1044\" id=\"1044\">1044</a>\n<a href=\"#1045\" id=\"1045\">1045</a>\n<a href=\"#1046\" id=\"1046\">1046</a>\n<a href=\"#1047\" id=\"1047\">1047</a>\n<a href=\"#1048\" id=\"1048\">1048</a>\n<a href=\"#1049\" id=\"1049\">1049</a>\n<a href=\"#1050\" id=\"1050\">1050</a>\n<a href=\"#1051\" id=\"1051\">1051</a>\n<a href=\"#1052\" id=\"1052\">1052</a>\n<a href=\"#1053\" id=\"1053\">1053</a>\n<a href=\"#1054\" id=\"1054\">1054</a>\n<a href=\"#1055\" id=\"1055\">1055</a>\n<a href=\"#1056\" id=\"1056\">1056</a>\n<a href=\"#1057\" id=\"1057\">1057</a>\n<a href=\"#1058\" id=\"1058\">1058</a>\n<a href=\"#1059\" id=\"1059\">1059</a>\n<a href=\"#1060\" id=\"1060\">1060</a>\n<a href=\"#1061\" id=\"1061\">1061</a>\n<a href=\"#1062\" id=\"1062\">1062</a>\n<a href=\"#1063\" id=\"1063\">1063</a>\n<a href=\"#1064\" id=\"1064\">1064</a>\n<a href=\"#1065\" id=\"1065\">1065</a>\n<a href=\"#1066\" id=\"1066\">1066</a>\n<a href=\"#1067\" id=\"1067\">1067</a>\n<a href=\"#1068\" id=\"1068\">1068</a>\n<a href=\"#1069\" id=\"1069\">1069</a>\n<a href=\"#1070\" id=\"1070\">1070</a>\n<a href=\"#1071\" id=\"1071\">1071</a>\n<a href=\"#1072\" id=\"1072\">1072</a>\n<a href=\"#1073\" id=\"1073\">1073</a>\n<a href=\"#1074\" id=\"1074\">1074</a>\n<a href=\"#1075\" id=\"1075\">1075</a>\n<a href=\"#1076\" id=\"1076\">1076</a>\n<a href=\"#1077\" id=\"1077\">1077</a>\n<a href=\"#1078\" id=\"1078\">1078</a>\n<a href=\"#1079\" id=\"1079\">1079</a>\n<a href=\"#1080\" id=\"1080\">1080</a>\n<a href=\"#1081\" id=\"1081\">1081</a>\n<a href=\"#1082\" id=\"1082\">1082</a>\n<a href=\"#1083\" id=\"1083\">1083</a>\n<a href=\"#1084\" id=\"1084\">1084</a>\n<a href=\"#1085\" id=\"1085\">1085</a>\n<a href=\"#1086\" id=\"1086\">1086</a>\n<a href=\"#1087\" id=\"1087\">1087</a>\n<a href=\"#1088\" id=\"1088\">1088</a>\n<a href=\"#1089\" id=\"1089\">1089</a>\n<a href=\"#1090\" id=\"1090\">1090</a>\n<a href=\"#1091\" id=\"1091\">1091</a>\n<a href=\"#1092\" id=\"1092\">1092</a>\n<a href=\"#1093\" id=\"1093\">1093</a>\n<a href=\"#1094\" id=\"1094\">1094</a>\n<a href=\"#1095\" id=\"1095\">1095</a>\n<a href=\"#1096\" id=\"1096\">1096</a>\n<a href=\"#1097\" id=\"1097\">1097</a>\n<a href=\"#1098\" id=\"1098\">1098</a>\n<a href=\"#1099\" id=\"1099\">1099</a>\n<a href=\"#1100\" id=\"1100\">1100</a>\n<a href=\"#1101\" id=\"1101\">1101</a>\n<a href=\"#1102\" id=\"1102\">1102</a>\n<a href=\"#1103\" id=\"1103\">1103</a>\n<a href=\"#1104\" id=\"1104\">1104</a>\n<a href=\"#1105\" id=\"1105\">1105</a>\n<a href=\"#1106\" id=\"1106\">1106</a>\n<a href=\"#1107\" id=\"1107\">1107</a>\n<a href=\"#1108\" id=\"1108\">1108</a>\n<a href=\"#1109\" id=\"1109\">1109</a>\n<a href=\"#1110\" id=\"1110\">1110</a>\n<a href=\"#1111\" id=\"1111\">1111</a>\n<a href=\"#1112\" id=\"1112\">1112</a>\n<a href=\"#1113\" id=\"1113\">1113</a>\n<a href=\"#1114\" id=\"1114\">1114</a>\n<a href=\"#1115\" id=\"1115\">1115</a>\n<a href=\"#1116\" id=\"1116\">1116</a>\n<a href=\"#1117\" id=\"1117\">1117</a>\n<a href=\"#1118\" id=\"1118\">1118</a>\n<a href=\"#1119\" id=\"1119\">1119</a>\n<a href=\"#1120\" id=\"1120\">1120</a>\n<a href=\"#1121\" id=\"1121\">1121</a>\n<a href=\"#1122\" id=\"1122\">1122</a>\n<a href=\"#1123\" id=\"1123\">1123</a>\n<a href=\"#1124\" id=\"1124\">1124</a>\n<a href=\"#1125\" id=\"1125\">1125</a>\n<a href=\"#1126\" id=\"1126\">1126</a>\n<a href=\"#1127\" id=\"1127\">1127</a>\n<a href=\"#1128\" id=\"1128\">1128</a>\n<a href=\"#1129\" id=\"1129\">1129</a>\n<a href=\"#1130\" id=\"1130\">1130</a>\n<a href=\"#1131\" id=\"1131\">1131</a>\n<a href=\"#1132\" id=\"1132\">1132</a>\n<a href=\"#1133\" id=\"1133\">1133</a>\n<a href=\"#1134\" id=\"1134\">1134</a>\n<a href=\"#1135\" id=\"1135\">1135</a>\n<a href=\"#1136\" id=\"1136\">1136</a>\n<a href=\"#1137\" id=\"1137\">1137</a>\n<a href=\"#1138\" id=\"1138\">1138</a>\n<a href=\"#1139\" id=\"1139\">1139</a>\n<a href=\"#1140\" id=\"1140\">1140</a>\n<a href=\"#1141\" id=\"1141\">1141</a>\n<a href=\"#1142\" id=\"1142\">1142</a>\n<a href=\"#1143\" id=\"1143\">1143</a>\n<a href=\"#1144\" id=\"1144\">1144</a>\n<a href=\"#1145\" id=\"1145\">1145</a>\n<a href=\"#1146\" id=\"1146\">1146</a>\n<a href=\"#1147\" id=\"1147\">1147</a>\n<a href=\"#1148\" id=\"1148\">1148</a>\n<a href=\"#1149\" id=\"1149\">1149</a>\n<a href=\"#1150\" id=\"1150\">1150</a>\n<a href=\"#1151\" id=\"1151\">1151</a>\n<a href=\"#1152\" id=\"1152\">1152</a>\n<a href=\"#1153\" id=\"1153\">1153</a>\n<a href=\"#1154\" id=\"1154\">1154</a>\n<a href=\"#1155\" id=\"1155\">1155</a>\n<a href=\"#1156\" id=\"1156\">1156</a>\n<a href=\"#1157\" id=\"1157\">1157</a>\n<a href=\"#1158\" id=\"1158\">1158</a>\n<a href=\"#1159\" id=\"1159\">1159</a>\n<a href=\"#1160\" id=\"1160\">1160</a>\n<a href=\"#1161\" id=\"1161\">1161</a>\n<a href=\"#1162\" id=\"1162\">1162</a>\n<a href=\"#1163\" id=\"1163\">1163</a>\n<a href=\"#1164\" id=\"1164\">1164</a>\n<a href=\"#1165\" id=\"1165\">1165</a>\n<a href=\"#1166\" id=\"1166\">1166</a>\n<a href=\"#1167\" id=\"1167\">1167</a>\n<a href=\"#1168\" id=\"1168\">1168</a>\n<a href=\"#1169\" id=\"1169\">1169</a>\n<a href=\"#1170\" id=\"1170\">1170</a>\n<a href=\"#1171\" id=\"1171\">1171</a>\n<a href=\"#1172\" id=\"1172\">1172</a>\n<a href=\"#1173\" id=\"1173\">1173</a>\n<a href=\"#1174\" id=\"1174\">1174</a>\n<a href=\"#1175\" id=\"1175\">1175</a>\n<a href=\"#1176\" id=\"1176\">1176</a>\n<a href=\"#1177\" id=\"1177\">1177</a>\n<a href=\"#1178\" id=\"1178\">1178</a>\n<a href=\"#1179\" id=\"1179\">1179</a>\n<a href=\"#1180\" id=\"1180\">1180</a>\n<a href=\"#1181\" id=\"1181\">1181</a>\n<a href=\"#1182\" id=\"1182\">1182</a>\n<a href=\"#1183\" id=\"1183\">1183</a>\n<a href=\"#1184\" id=\"1184\">1184</a>\n<a href=\"#1185\" id=\"1185\">1185</a>\n<a href=\"#1186\" id=\"1186\">1186</a>\n<a href=\"#1187\" id=\"1187\">1187</a>\n<a href=\"#1188\" id=\"1188\">1188</a>\n<a href=\"#1189\" id=\"1189\">1189</a>\n<a href=\"#1190\" id=\"1190\">1190</a>\n<a href=\"#1191\" id=\"1191\">1191</a>\n<a href=\"#1192\" id=\"1192\">1192</a>\n<a href=\"#1193\" id=\"1193\">1193</a>\n<a href=\"#1194\" id=\"1194\">1194</a>\n<a href=\"#1195\" id=\"1195\">1195</a>\n<a href=\"#1196\" id=\"1196\">1196</a>\n<a href=\"#1197\" id=\"1197\">1197</a>\n<a href=\"#1198\" id=\"1198\">1198</a>\n<a href=\"#1199\" id=\"1199\">1199</a>\n<a href=\"#1200\" id=\"1200\">1200</a>\n<a href=\"#1201\" id=\"1201\">1201</a>\n<a href=\"#1202\" id=\"1202\">1202</a>\n<a href=\"#1203\" id=\"1203\">1203</a>\n<a href=\"#1204\" id=\"1204\">1204</a>\n<a href=\"#1205\" id=\"1205\">1205</a>\n<a href=\"#1206\" id=\"1206\">1206</a>\n<a href=\"#1207\" id=\"1207\">1207</a>\n<a href=\"#1208\" id=\"1208\">1208</a>\n<a href=\"#1209\" id=\"1209\">1209</a>\n<a href=\"#1210\" id=\"1210\">1210</a>\n<a href=\"#1211\" id=\"1211\">1211</a>\n<a href=\"#1212\" id=\"1212\">1212</a>\n<a href=\"#1213\" id=\"1213\">1213</a>\n<a href=\"#1214\" id=\"1214\">1214</a>\n<a href=\"#1215\" id=\"1215\">1215</a>\n<a href=\"#1216\" id=\"1216\">1216</a>\n<a href=\"#1217\" id=\"1217\">1217</a>\n<a href=\"#1218\" id=\"1218\">1218</a>\n<a href=\"#1219\" id=\"1219\">1219</a>\n<a href=\"#1220\" id=\"1220\">1220</a>\n<a href=\"#1221\" id=\"1221\">1221</a>\n<a href=\"#1222\" id=\"1222\">1222</a>\n<a href=\"#1223\" id=\"1223\">1223</a>\n<a href=\"#1224\" id=\"1224\">1224</a>\n<a href=\"#1225\" id=\"1225\">1225</a>\n<a href=\"#1226\" id=\"1226\">1226</a>\n<a href=\"#1227\" id=\"1227\">1227</a>\n<a href=\"#1228\" id=\"1228\">1228</a>\n<a href=\"#1229\" id=\"1229\">1229</a>\n<a href=\"#1230\" id=\"1230\">1230</a>\n<a href=\"#1231\" id=\"1231\">1231</a>\n<a href=\"#1232\" id=\"1232\">1232</a>\n<a href=\"#1233\" id=\"1233\">1233</a>\n<a href=\"#1234\" id=\"1234\">1234</a>\n<a href=\"#1235\" id=\"1235\">1235</a>\n<a href=\"#1236\" id=\"1236\">1236</a>\n<a href=\"#1237\" id=\"1237\">1237</a>\n<a href=\"#1238\" id=\"1238\">1238</a>\n<a href=\"#1239\" id=\"1239\">1239</a>\n<a href=\"#1240\" id=\"1240\">1240</a>\n<a href=\"#1241\" id=\"1241\">1241</a>\n<a href=\"#1242\" id=\"1242\">1242</a>\n<a href=\"#1243\" id=\"1243\">1243</a>\n<a href=\"#1244\" id=\"1244\">1244</a>\n<a href=\"#1245\" id=\"1245\">1245</a>\n<a href=\"#1246\" id=\"1246\">1246</a>\n<a href=\"#1247\" id=\"1247\">1247</a>\n<a href=\"#1248\" id=\"1248\">1248</a>\n<a href=\"#1249\" id=\"1249\">1249</a>\n<a href=\"#1250\" id=\"1250\">1250</a>\n<a href=\"#1251\" id=\"1251\">1251</a>\n<a href=\"#1252\" id=\"1252\">1252</a>\n<a href=\"#1253\" id=\"1253\">1253</a>\n<a href=\"#1254\" id=\"1254\">1254</a>\n<a href=\"#1255\" id=\"1255\">1255</a>\n<a href=\"#1256\" id=\"1256\">1256</a>\n<a href=\"#1257\" id=\"1257\">1257</a>\n<a href=\"#1258\" id=\"1258\">1258</a>\n<a href=\"#1259\" id=\"1259\">1259</a>\n<a href=\"#1260\" id=\"1260\">1260</a>\n<a href=\"#1261\" id=\"1261\">1261</a>\n<a href=\"#1262\" id=\"1262\">1262</a>\n<a href=\"#1263\" id=\"1263\">1263</a>\n<a href=\"#1264\" id=\"1264\">1264</a>\n<a href=\"#1265\" id=\"1265\">1265</a>\n<a href=\"#1266\" id=\"1266\">1266</a>\n<a href=\"#1267\" id=\"1267\">1267</a>\n<a href=\"#1268\" id=\"1268\">1268</a>\n<a href=\"#1269\" id=\"1269\">1269</a>\n<a href=\"#1270\" id=\"1270\">1270</a>\n<a href=\"#1271\" id=\"1271\">1271</a>\n<a href=\"#1272\" id=\"1272\">1272</a>\n<a href=\"#1273\" id=\"1273\">1273</a>\n<a href=\"#1274\" id=\"1274\">1274</a>\n<a href=\"#1275\" id=\"1275\">1275</a>\n<a href=\"#1276\" id=\"1276\">1276</a>\n<a href=\"#1277\" id=\"1277\">1277</a>\n<a href=\"#1278\" id=\"1278\">1278</a>\n<a href=\"#1279\" id=\"1279\">1279</a>\n<a href=\"#1280\" id=\"1280\">1280</a>\n<a href=\"#1281\" id=\"1281\">1281</a>\n<a href=\"#1282\" id=\"1282\">1282</a>\n<a href=\"#1283\" id=\"1283\">1283</a>\n<a href=\"#1284\" id=\"1284\">1284</a>\n<a href=\"#1285\" id=\"1285\">1285</a>\n<a href=\"#1286\" id=\"1286\">1286</a>\n<a href=\"#1287\" id=\"1287\">1287</a>\n<a href=\"#1288\" id=\"1288\">1288</a>\n<a href=\"#1289\" id=\"1289\">1289</a>\n<a href=\"#1290\" id=\"1290\">1290</a>\n<a href=\"#1291\" id=\"1291\">1291</a>\n<a href=\"#1292\" id=\"1292\">1292</a>\n<a href=\"#1293\" id=\"1293\">1293</a>\n<a href=\"#1294\" id=\"1294\">1294</a>\n<a href=\"#1295\" id=\"1295\">1295</a>\n<a href=\"#1296\" id=\"1296\">1296</a>\n<a href=\"#1297\" id=\"1297\">1297</a>\n<a href=\"#1298\" id=\"1298\">1298</a>\n<a href=\"#1299\" id=\"1299\">1299</a>\n<a href=\"#1300\" id=\"1300\">1300</a>\n<a href=\"#1301\" id=\"1301\">1301</a>\n<a href=\"#1302\" id=\"1302\">1302</a>\n<a href=\"#1303\" id=\"1303\">1303</a>\n<a href=\"#1304\" id=\"1304\">1304</a>\n<a href=\"#1305\" id=\"1305\">1305</a>\n<a href=\"#1306\" id=\"1306\">1306</a>\n<a href=\"#1307\" id=\"1307\">1307</a>\n<a href=\"#1308\" id=\"1308\">1308</a>\n<a href=\"#1309\" id=\"1309\">1309</a>\n<a href=\"#1310\" id=\"1310\">1310</a>\n<a href=\"#1311\" id=\"1311\">1311</a>\n<a href=\"#1312\" id=\"1312\">1312</a>\n<a href=\"#1313\" id=\"1313\">1313</a>\n<a href=\"#1314\" id=\"1314\">1314</a>\n<a href=\"#1315\" id=\"1315\">1315</a>\n<a href=\"#1316\" id=\"1316\">1316</a>\n<a href=\"#1317\" id=\"1317\">1317</a>\n<a href=\"#1318\" id=\"1318\">1318</a>\n<a href=\"#1319\" id=\"1319\">1319</a>\n<a href=\"#1320\" id=\"1320\">1320</a>\n<a href=\"#1321\" id=\"1321\">1321</a>\n<a href=\"#1322\" id=\"1322\">1322</a>\n<a href=\"#1323\" id=\"1323\">1323</a>\n<a href=\"#1324\" id=\"1324\">1324</a>\n<a href=\"#1325\" id=\"1325\">1325</a>\n<a href=\"#1326\" id=\"1326\">1326</a>\n<a href=\"#1327\" id=\"1327\">1327</a>\n<a href=\"#1328\" id=\"1328\">1328</a>\n<a href=\"#1329\" id=\"1329\">1329</a>\n<a href=\"#1330\" id=\"1330\">1330</a>\n<a href=\"#1331\" id=\"1331\">1331</a>\n<a href=\"#1332\" id=\"1332\">1332</a>\n<a href=\"#1333\" id=\"1333\">1333</a>\n<a href=\"#1334\" id=\"1334\">1334</a>\n<a href=\"#1335\" id=\"1335\">1335</a>\n<a href=\"#1336\" id=\"1336\">1336</a>\n<a href=\"#1337\" id=\"1337\">1337</a>\n<a href=\"#1338\" id=\"1338\">1338</a>\n<a href=\"#1339\" id=\"1339\">1339</a>\n<a href=\"#1340\" id=\"1340\">1340</a>\n<a href=\"#1341\" id=\"1341\">1341</a>\n<a href=\"#1342\" id=\"1342\">1342</a>\n<a href=\"#1343\" id=\"1343\">1343</a>\n<a href=\"#1344\" id=\"1344\">1344</a>\n<a href=\"#1345\" id=\"1345\">1345</a>\n<a href=\"#1346\" id=\"1346\">1346</a>\n<a href=\"#1347\" id=\"1347\">1347</a>\n<a href=\"#1348\" id=\"1348\">1348</a>\n<a href=\"#1349\" id=\"1349\">1349</a>\n<a href=\"#1350\" id=\"1350\">1350</a>\n<a href=\"#1351\" id=\"1351\">1351</a>\n<a href=\"#1352\" id=\"1352\">1352</a>\n<a href=\"#1353\" id=\"1353\">1353</a>\n<a href=\"#1354\" id=\"1354\">1354</a>\n<a href=\"#1355\" id=\"1355\">1355</a>\n<a href=\"#1356\" id=\"1356\">1356</a>\n<a href=\"#1357\" id=\"1357\">1357</a>\n<a href=\"#1358\" id=\"1358\">1358</a>\n<a href=\"#1359\" id=\"1359\">1359</a>\n<a href=\"#1360\" id=\"1360\">1360</a>\n<a href=\"#1361\" id=\"1361\">1361</a>\n<a href=\"#1362\" id=\"1362\">1362</a>\n<a href=\"#1363\" id=\"1363\">1363</a>\n<a href=\"#1364\" id=\"1364\">1364</a>\n<a href=\"#1365\" id=\"1365\">1365</a>\n<a href=\"#1366\" id=\"1366\">1366</a>\n<a href=\"#1367\" id=\"1367\">1367</a>\n<a href=\"#1368\" id=\"1368\">1368</a>\n<a href=\"#1369\" id=\"1369\">1369</a>\n<a href=\"#1370\" id=\"1370\">1370</a>\n<a href=\"#1371\" id=\"1371\">1371</a>\n<a href=\"#1372\" id=\"1372\">1372</a>\n<a href=\"#1373\" id=\"1373\">1373</a>\n<a href=\"#1374\" id=\"1374\">1374</a>\n<a href=\"#1375\" id=\"1375\">1375</a>\n<a href=\"#1376\" id=\"1376\">1376</a>\n<a href=\"#1377\" id=\"1377\">1377</a>\n<a href=\"#1378\" id=\"1378\">1378</a>\n<a href=\"#1379\" id=\"1379\">1379</a>\n<a href=\"#1380\" id=\"1380\">1380</a>\n<a href=\"#1381\" id=\"1381\">1381</a>\n<a href=\"#1382\" id=\"1382\">1382</a>\n<a href=\"#1383\" id=\"1383\">1383</a>\n<a href=\"#1384\" id=\"1384\">1384</a>\n<a href=\"#1385\" id=\"1385\">1385</a>\n<a href=\"#1386\" id=\"1386\">1386</a>\n<a href=\"#1387\" id=\"1387\">1387</a>\n<a href=\"#1388\" id=\"1388\">1388</a>\n<a href=\"#1389\" id=\"1389\">1389</a>\n<a href=\"#1390\" id=\"1390\">1390</a>\n<a href=\"#1391\" id=\"1391\">1391</a>\n<a href=\"#1392\" id=\"1392\">1392</a>\n<a href=\"#1393\" id=\"1393\">1393</a>\n<a href=\"#1394\" id=\"1394\">1394</a>\n<a href=\"#1395\" id=\"1395\">1395</a>\n<a href=\"#1396\" id=\"1396\">1396</a>\n<a href=\"#1397\" id=\"1397\">1397</a>\n<a href=\"#1398\" id=\"1398\">1398</a>\n<a href=\"#1399\" id=\"1399\">1399</a>\n<a href=\"#1400\" id=\"1400\">1400</a>\n<a href=\"#1401\" id=\"1401\">1401</a>\n<a href=\"#1402\" id=\"1402\">1402</a>\n<a href=\"#1403\" id=\"1403\">1403</a>\n<a href=\"#1404\" id=\"1404\">1404</a>\n<a href=\"#1405\" id=\"1405\">1405</a>\n<a href=\"#1406\" id=\"1406\">1406</a>\n<a href=\"#1407\" id=\"1407\">1407</a>\n<a href=\"#1408\" id=\"1408\">1408</a>\n<a href=\"#1409\" id=\"1409\">1409</a>\n<a href=\"#1410\" id=\"1410\">1410</a>\n<a href=\"#1411\" id=\"1411\">1411</a>\n<a href=\"#1412\" id=\"1412\">1412</a>\n<a href=\"#1413\" id=\"1413\">1413</a>\n<a href=\"#1414\" id=\"1414\">1414</a>\n<a href=\"#1415\" id=\"1415\">1415</a>\n<a href=\"#1416\" id=\"1416\">1416</a>\n<a href=\"#1417\" id=\"1417\">1417</a>\n<a href=\"#1418\" id=\"1418\">1418</a>\n<a href=\"#1419\" id=\"1419\">1419</a>\n<a href=\"#1420\" id=\"1420\">1420</a>\n<a href=\"#1421\" id=\"1421\">1421</a>\n<a href=\"#1422\" id=\"1422\">1422</a>\n<a href=\"#1423\" id=\"1423\">1423</a>\n<a href=\"#1424\" id=\"1424\">1424</a>\n<a href=\"#1425\" id=\"1425\">1425</a>\n<a href=\"#1426\" id=\"1426\">1426</a>\n<a href=\"#1427\" id=\"1427\">1427</a>\n<a href=\"#1428\" id=\"1428\">1428</a>\n<a href=\"#1429\" id=\"1429\">1429</a>\n<a href=\"#1430\" id=\"1430\">1430</a>\n<a href=\"#1431\" id=\"1431\">1431</a>\n<a href=\"#1432\" id=\"1432\">1432</a>\n<a href=\"#1433\" id=\"1433\">1433</a>\n<a href=\"#1434\" id=\"1434\">1434</a>\n<a href=\"#1435\" id=\"1435\">1435</a>\n<a href=\"#1436\" id=\"1436\">1436</a>\n<a href=\"#1437\" id=\"1437\">1437</a>\n<a href=\"#1438\" id=\"1438\">1438</a>\n<a href=\"#1439\" id=\"1439\">1439</a>\n<a href=\"#1440\" id=\"1440\">1440</a>\n<a href=\"#1441\" id=\"1441\">1441</a>\n<a href=\"#1442\" id=\"1442\">1442</a>\n<a href=\"#1443\" id=\"1443\">1443</a>\n<a href=\"#1444\" id=\"1444\">1444</a>\n<a href=\"#1445\" id=\"1445\">1445</a>\n<a href=\"#1446\" id=\"1446\">1446</a>\n<a href=\"#1447\" id=\"1447\">1447</a>\n<a href=\"#1448\" id=\"1448\">1448</a>\n<a href=\"#1449\" id=\"1449\">1449</a>\n<a href=\"#1450\" id=\"1450\">1450</a>\n<a href=\"#1451\" id=\"1451\">1451</a>\n<a href=\"#1452\" id=\"1452\">1452</a>\n<a href=\"#1453\" id=\"1453\">1453</a>\n<a href=\"#1454\" id=\"1454\">1454</a>\n<a href=\"#1455\" id=\"1455\">1455</a>\n<a href=\"#1456\" id=\"1456\">1456</a>\n<a href=\"#1457\" id=\"1457\">1457</a>\n<a href=\"#1458\" id=\"1458\">1458</a>\n<a href=\"#1459\" id=\"1459\">1459</a>\n<a href=\"#1460\" id=\"1460\">1460</a>\n<a href=\"#1461\" id=\"1461\">1461</a>\n<a href=\"#1462\" id=\"1462\">1462</a>\n<a href=\"#1463\" id=\"1463\">1463</a>\n<a href=\"#1464\" id=\"1464\">1464</a>\n<a href=\"#1465\" id=\"1465\">1465</a>\n<a href=\"#1466\" id=\"1466\">1466</a>\n<a href=\"#1467\" id=\"1467\">1467</a>\n<a href=\"#1468\" id=\"1468\">1468</a>\n<a href=\"#1469\" id=\"1469\">1469</a>\n<a href=\"#1470\" id=\"1470\">1470</a>\n<a href=\"#1471\" id=\"1471\">1471</a>\n<a href=\"#1472\" id=\"1472\">1472</a>\n<a href=\"#1473\" id=\"1473\">1473</a>\n<a href=\"#1474\" id=\"1474\">1474</a>\n<a href=\"#1475\" id=\"1475\">1475</a>\n<a href=\"#1476\" id=\"1476\">1476</a>\n<a href=\"#1477\" id=\"1477\">1477</a>\n<a href=\"#1478\" id=\"1478\">1478</a>\n<a href=\"#1479\" id=\"1479\">1479</a>\n<a href=\"#1480\" id=\"1480\">1480</a>\n<a href=\"#1481\" id=\"1481\">1481</a>\n<a href=\"#1482\" id=\"1482\">1482</a>\n<a href=\"#1483\" id=\"1483\">1483</a>\n<a href=\"#1484\" id=\"1484\">1484</a>\n<a href=\"#1485\" id=\"1485\">1485</a>\n<a href=\"#1486\" id=\"1486\">1486</a>\n<a href=\"#1487\" id=\"1487\">1487</a>\n<a href=\"#1488\" id=\"1488\">1488</a>\n<a href=\"#1489\" id=\"1489\">1489</a>\n<a href=\"#1490\" id=\"1490\">1490</a>\n<a href=\"#1491\" id=\"1491\">1491</a>\n<a href=\"#1492\" id=\"1492\">1492</a>\n<a href=\"#1493\" id=\"1493\">1493</a>\n<a href=\"#1494\" id=\"1494\">1494</a>\n<a href=\"#1495\" id=\"1495\">1495</a>\n<a href=\"#1496\" id=\"1496\">1496</a>\n<a href=\"#1497\" id=\"1497\">1497</a>\n<a href=\"#1498\" id=\"1498\">1498</a>\n<a href=\"#1499\" id=\"1499\">1499</a>\n<a href=\"#1500\" id=\"1500\">1500</a>\n<a href=\"#1501\" id=\"1501\">1501</a>\n<a href=\"#1502\" id=\"1502\">1502</a>\n<a href=\"#1503\" id=\"1503\">1503</a>\n<a href=\"#1504\" id=\"1504\">1504</a>\n<a href=\"#1505\" id=\"1505\">1505</a>\n<a href=\"#1506\" id=\"1506\">1506</a>\n<a href=\"#1507\" id=\"1507\">1507</a>\n<a href=\"#1508\" id=\"1508\">1508</a>\n<a href=\"#1509\" id=\"1509\">1509</a>\n<a href=\"#1510\" id=\"1510\">1510</a>\n<a href=\"#1511\" id=\"1511\">1511</a>\n<a href=\"#1512\" id=\"1512\">1512</a>\n<a href=\"#1513\" id=\"1513\">1513</a>\n<a href=\"#1514\" id=\"1514\">1514</a>\n<a href=\"#1515\" id=\"1515\">1515</a>\n<a href=\"#1516\" id=\"1516\">1516</a>\n<a href=\"#1517\" id=\"1517\">1517</a>\n<a href=\"#1518\" id=\"1518\">1518</a>\n<a href=\"#1519\" id=\"1519\">1519</a>\n<a href=\"#1520\" id=\"1520\">1520</a>\n<a href=\"#1521\" id=\"1521\">1521</a>\n<a href=\"#1522\" id=\"1522\">1522</a>\n<a href=\"#1523\" id=\"1523\">1523</a>\n<a href=\"#1524\" id=\"1524\">1524</a>\n<a href=\"#1525\" id=\"1525\">1525</a>\n<a href=\"#1526\" id=\"1526\">1526</a>\n<a href=\"#1527\" id=\"1527\">1527</a>\n<a href=\"#1528\" id=\"1528\">1528</a>\n<a href=\"#1529\" id=\"1529\">1529</a>\n<a href=\"#1530\" id=\"1530\">1530</a>\n<a href=\"#1531\" id=\"1531\">1531</a>\n<a href=\"#1532\" id=\"1532\">1532</a>\n<a href=\"#1533\" id=\"1533\">1533</a>\n<a href=\"#1534\" id=\"1534\">1534</a>\n<a href=\"#1535\" id=\"1535\">1535</a>\n<a href=\"#1536\" id=\"1536\">1536</a>\n<a href=\"#1537\" id=\"1537\">1537</a>\n<a href=\"#1538\" id=\"1538\">1538</a>\n<a href=\"#1539\" id=\"1539\">1539</a>\n<a href=\"#1540\" id=\"1540\">1540</a>\n<a href=\"#1541\" id=\"1541\">1541</a>\n<a href=\"#1542\" id=\"1542\">1542</a>\n<a href=\"#1543\" id=\"1543\">1543</a>\n<a href=\"#1544\" id=\"1544\">1544</a>\n<a href=\"#1545\" id=\"1545\">1545</a>\n<a href=\"#1546\" id=\"1546\">1546</a>\n<a href=\"#1547\" id=\"1547\">1547</a>\n<a href=\"#1548\" id=\"1548\">1548</a>\n<a href=\"#1549\" id=\"1549\">1549</a>\n<a href=\"#1550\" id=\"1550\">1550</a>\n<a href=\"#1551\" id=\"1551\">1551</a>\n<a href=\"#1552\" id=\"1552\">1552</a>\n<a href=\"#1553\" id=\"1553\">1553</a>\n<a href=\"#1554\" id=\"1554\">1554</a>\n<a href=\"#1555\" id=\"1555\">1555</a>\n<a href=\"#1556\" id=\"1556\">1556</a>\n<a href=\"#1557\" id=\"1557\">1557</a>\n<a href=\"#1558\" id=\"1558\">1558</a>\n<a href=\"#1559\" id=\"1559\">1559</a>\n<a href=\"#1560\" id=\"1560\">1560</a>\n<a href=\"#1561\" id=\"1561\">1561</a>\n<a href=\"#1562\" id=\"1562\">1562</a>\n<a href=\"#1563\" id=\"1563\">1563</a>\n<a href=\"#1564\" id=\"1564\">1564</a>\n<a href=\"#1565\" id=\"1565\">1565</a>\n<a href=\"#1566\" id=\"1566\">1566</a>\n<a href=\"#1567\" id=\"1567\">1567</a>\n<a href=\"#1568\" id=\"1568\">1568</a>\n<a href=\"#1569\" id=\"1569\">1569</a>\n<a href=\"#1570\" id=\"1570\">1570</a>\n<a href=\"#1571\" id=\"1571\">1571</a>\n<a href=\"#1572\" id=\"1572\">1572</a>\n<a href=\"#1573\" id=\"1573\">1573</a>\n<a href=\"#1574\" id=\"1574\">1574</a>\n<a href=\"#1575\" id=\"1575\">1575</a>\n<a href=\"#1576\" id=\"1576\">1576</a>\n<a href=\"#1577\" id=\"1577\">1577</a>\n<a href=\"#1578\" id=\"1578\">1578</a>\n<a href=\"#1579\" id=\"1579\">1579</a>\n<a href=\"#1580\" id=\"1580\">1580</a>\n<a href=\"#1581\" id=\"1581\">1581</a>\n<a href=\"#1582\" id=\"1582\">1582</a>\n<a href=\"#1583\" id=\"1583\">1583</a>\n<a href=\"#1584\" id=\"1584\">1584</a>\n<a href=\"#1585\" id=\"1585\">1585</a>\n<a href=\"#1586\" id=\"1586\">1586</a>\n<a href=\"#1587\" id=\"1587\">1587</a>\n<a href=\"#1588\" id=\"1588\">1588</a>\n<a href=\"#1589\" id=\"1589\">1589</a>\n<a href=\"#1590\" id=\"1590\">1590</a>\n<a href=\"#1591\" id=\"1591\">1591</a>\n<a href=\"#1592\" id=\"1592\">1592</a>\n<a href=\"#1593\" id=\"1593\">1593</a>\n<a href=\"#1594\" id=\"1594\">1594</a>\n<a href=\"#1595\" id=\"1595\">1595</a>\n<a href=\"#1596\" id=\"1596\">1596</a>\n<a href=\"#1597\" id=\"1597\">1597</a>\n<a href=\"#1598\" id=\"1598\">1598</a>\n<a href=\"#1599\" id=\"1599\">1599</a>\n<a href=\"#1600\" id=\"1600\">1600</a>\n<a href=\"#1601\" id=\"1601\">1601</a>\n<a href=\"#1602\" id=\"1602\">1602</a>\n<a href=\"#1603\" id=\"1603\">1603</a>\n<a href=\"#1604\" id=\"1604\">1604</a>\n<a href=\"#1605\" id=\"1605\">1605</a>\n<a href=\"#1606\" id=\"1606\">1606</a>\n<a href=\"#1607\" id=\"1607\">1607</a>\n<a href=\"#1608\" id=\"1608\">1608</a>\n<a href=\"#1609\" id=\"1609\">1609</a>\n<a href=\"#1610\" id=\"1610\">1610</a>\n<a href=\"#1611\" id=\"1611\">1611</a>\n<a href=\"#1612\" id=\"1612\">1612</a>\n<a href=\"#1613\" id=\"1613\">1613</a>\n<a href=\"#1614\" id=\"1614\">1614</a>\n<a href=\"#1615\" id=\"1615\">1615</a>\n<a href=\"#1616\" id=\"1616\">1616</a>\n<a href=\"#1617\" id=\"1617\">1617</a>\n<a href=\"#1618\" id=\"1618\">1618</a>\n<a href=\"#1619\" id=\"1619\">1619</a>\n<a href=\"#1620\" id=\"1620\">1620</a>\n<a href=\"#1621\" id=\"1621\">1621</a>\n<a href=\"#1622\" id=\"1622\">1622</a>\n<a href=\"#1623\" id=\"1623\">1623</a>\n<a href=\"#1624\" id=\"1624\">1624</a>\n<a href=\"#1625\" id=\"1625\">1625</a>\n<a href=\"#1626\" id=\"1626\">1626</a>\n<a href=\"#1627\" id=\"1627\">1627</a>\n<a href=\"#1628\" id=\"1628\">1628</a>\n<a href=\"#1629\" id=\"1629\">1629</a>\n<a href=\"#1630\" id=\"1630\">1630</a>\n<a href=\"#1631\" id=\"1631\">1631</a>\n<a href=\"#1632\" id=\"1632\">1632</a>\n<a href=\"#1633\" id=\"1633\">1633</a>\n<a href=\"#1634\" id=\"1634\">1634</a>\n<a href=\"#1635\" id=\"1635\">1635</a>\n<a href=\"#1636\" id=\"1636\">1636</a>\n<a href=\"#1637\" id=\"1637\">1637</a>\n<a href=\"#1638\" id=\"1638\">1638</a>\n<a href=\"#1639\" id=\"1639\">1639</a>\n<a href=\"#1640\" id=\"1640\">1640</a>\n<a href=\"#1641\" id=\"1641\">1641</a>\n<a href=\"#1642\" id=\"1642\">1642</a>\n<a href=\"#1643\" id=\"1643\">1643</a>\n<a href=\"#1644\" id=\"1644\">1644</a>\n<a href=\"#1645\" id=\"1645\">1645</a>\n<a href=\"#1646\" id=\"1646\">1646</a>\n<a href=\"#1647\" id=\"1647\">1647</a>\n<a href=\"#1648\" id=\"1648\">1648</a>\n<a href=\"#1649\" id=\"1649\">1649</a>\n<a href=\"#1650\" id=\"1650\">1650</a>\n<a href=\"#1651\" id=\"1651\">1651</a>\n<a href=\"#1652\" id=\"1652\">1652</a>\n<a href=\"#1653\" id=\"1653\">1653</a>\n<a href=\"#1654\" id=\"1654\">1654</a>\n<a href=\"#1655\" id=\"1655\">1655</a>\n<a href=\"#1656\" id=\"1656\">1656</a>\n<a href=\"#1657\" id=\"1657\">1657</a>\n<a href=\"#1658\" id=\"1658\">1658</a>\n<a href=\"#1659\" id=\"1659\">1659</a>\n<a href=\"#1660\" id=\"1660\">1660</a>\n<a href=\"#1661\" id=\"1661\">1661</a>\n<a href=\"#1662\" id=\"1662\">1662</a>\n<a href=\"#1663\" id=\"1663\">1663</a>\n<a href=\"#1664\" id=\"1664\">1664</a>\n<a href=\"#1665\" id=\"1665\">1665</a>\n<a href=\"#1666\" id=\"1666\">1666</a>\n<a href=\"#1667\" id=\"1667\">1667</a>\n<a href=\"#1668\" id=\"1668\">1668</a>\n<a href=\"#1669\" id=\"1669\">1669</a>\n<a href=\"#1670\" id=\"1670\">1670</a>\n<a href=\"#1671\" id=\"1671\">1671</a>\n<a href=\"#1672\" id=\"1672\">1672</a>\n<a href=\"#1673\" id=\"1673\">1673</a>\n<a href=\"#1674\" id=\"1674\">1674</a>\n<a href=\"#1675\" id=\"1675\">1675</a>\n<a href=\"#1676\" id=\"1676\">1676</a>\n<a href=\"#1677\" id=\"1677\">1677</a>\n<a href=\"#1678\" id=\"1678\">1678</a>\n<a href=\"#1679\" id=\"1679\">1679</a>\n<a href=\"#1680\" id=\"1680\">1680</a>\n<a href=\"#1681\" id=\"1681\">1681</a>\n<a href=\"#1682\" id=\"1682\">1682</a>\n<a href=\"#1683\" id=\"1683\">1683</a>\n<a href=\"#1684\" id=\"1684\">1684</a>\n<a href=\"#1685\" id=\"1685\">1685</a>\n<a href=\"#1686\" id=\"1686\">1686</a>\n<a href=\"#1687\" id=\"1687\">1687</a>\n<a href=\"#1688\" id=\"1688\">1688</a>\n<a href=\"#1689\" id=\"1689\">1689</a>\n<a href=\"#1690\" id=\"1690\">1690</a>\n<a href=\"#1691\" id=\"1691\">1691</a>\n<a href=\"#1692\" id=\"1692\">1692</a>\n<a href=\"#1693\" id=\"1693\">1693</a>\n<a href=\"#1694\" id=\"1694\">1694</a>\n<a href=\"#1695\" id=\"1695\">1695</a>\n<a href=\"#1696\" id=\"1696\">1696</a>\n<a href=\"#1697\" id=\"1697\">1697</a>\n<a href=\"#1698\" id=\"1698\">1698</a>\n<a href=\"#1699\" id=\"1699\">1699</a>\n<a href=\"#1700\" id=\"1700\">1700</a>\n<a href=\"#1701\" id=\"1701\">1701</a>\n<a href=\"#1702\" id=\"1702\">1702</a>\n<a href=\"#1703\" id=\"1703\">1703</a>\n<a href=\"#1704\" id=\"1704\">1704</a>\n<a href=\"#1705\" id=\"1705\">1705</a>\n<a href=\"#1706\" id=\"1706\">1706</a>\n<a href=\"#1707\" id=\"1707\">1707</a>\n<a href=\"#1708\" id=\"1708\">1708</a>\n<a href=\"#1709\" id=\"1709\">1709</a>\n<a href=\"#1710\" id=\"1710\">1710</a>\n<a href=\"#1711\" id=\"1711\">1711</a>\n<a href=\"#1712\" id=\"1712\">1712</a>\n<a href=\"#1713\" id=\"1713\">1713</a>\n<a href=\"#1714\" id=\"1714\">1714</a>\n<a href=\"#1715\" id=\"1715\">1715</a>\n<a href=\"#1716\" id=\"1716\">1716</a>\n<a href=\"#1717\" id=\"1717\">1717</a>\n<a href=\"#1718\" id=\"1718\">1718</a>\n<a href=\"#1719\" id=\"1719\">1719</a>\n<a href=\"#1720\" id=\"1720\">1720</a>\n<a href=\"#1721\" id=\"1721\">1721</a>\n<a href=\"#1722\" id=\"1722\">1722</a>\n<a href=\"#1723\" id=\"1723\">1723</a>\n<a href=\"#1724\" id=\"1724\">1724</a>\n<a href=\"#1725\" id=\"1725\">1725</a>\n<a href=\"#1726\" id=\"1726\">1726</a>\n<a href=\"#1727\" id=\"1727\">1727</a>\n<a href=\"#1728\" id=\"1728\">1728</a>\n<a href=\"#1729\" id=\"1729\">1729</a>\n<a href=\"#1730\" id=\"1730\">1730</a>\n<a href=\"#1731\" id=\"1731\">1731</a>\n<a href=\"#1732\" id=\"1732\">1732</a>\n<a href=\"#1733\" id=\"1733\">1733</a>\n<a href=\"#1734\" id=\"1734\">1734</a>\n<a href=\"#1735\" id=\"1735\">1735</a>\n<a href=\"#1736\" id=\"1736\">1736</a>\n<a href=\"#1737\" id=\"1737\">1737</a>\n<a href=\"#1738\" id=\"1738\">1738</a>\n<a href=\"#1739\" id=\"1739\">1739</a>\n<a href=\"#1740\" id=\"1740\">1740</a>\n<a href=\"#1741\" id=\"1741\">1741</a>\n<a href=\"#1742\" id=\"1742\">1742</a>\n<a href=\"#1743\" id=\"1743\">1743</a>\n<a href=\"#1744\" id=\"1744\">1744</a>\n<a href=\"#1745\" id=\"1745\">1745</a>\n<a href=\"#1746\" id=\"1746\">1746</a>\n<a href=\"#1747\" id=\"1747\">1747</a>\n<a href=\"#1748\" id=\"1748\">1748</a>\n<a href=\"#1749\" id=\"1749\">1749</a>\n<a href=\"#1750\" id=\"1750\">1750</a>\n<a href=\"#1751\" id=\"1751\">1751</a>\n<a href=\"#1752\" id=\"1752\">1752</a>\n<a href=\"#1753\" id=\"1753\">1753</a>\n<a href=\"#1754\" id=\"1754\">1754</a>\n<a href=\"#1755\" id=\"1755\">1755</a>\n<a href=\"#1756\" id=\"1756\">1756</a>\n<a href=\"#1757\" id=\"1757\">1757</a>\n<a href=\"#1758\" id=\"1758\">1758</a>\n<a href=\"#1759\" id=\"1759\">1759</a>\n<a href=\"#1760\" id=\"1760\">1760</a>\n<a href=\"#1761\" id=\"1761\">1761</a>\n<a href=\"#1762\" id=\"1762\">1762</a>\n<a href=\"#1763\" id=\"1763\">1763</a>\n<a href=\"#1764\" id=\"1764\">1764</a>\n<a href=\"#1765\" id=\"1765\">1765</a>\n<a href=\"#1766\" id=\"1766\">1766</a>\n<a href=\"#1767\" id=\"1767\">1767</a>\n<a href=\"#1768\" id=\"1768\">1768</a>\n<a href=\"#1769\" id=\"1769\">1769</a>\n<a href=\"#1770\" id=\"1770\">1770</a>\n<a href=\"#1771\" id=\"1771\">1771</a>\n<a href=\"#1772\" id=\"1772\">1772</a>\n<a href=\"#1773\" id=\"1773\">1773</a>\n<a href=\"#1774\" id=\"1774\">1774</a>\n<a href=\"#1775\" id=\"1775\">1775</a>\n<a href=\"#1776\" id=\"1776\">1776</a>\n<a href=\"#1777\" id=\"1777\">1777</a>\n<a href=\"#1778\" id=\"1778\">1778</a>\n<a href=\"#1779\" id=\"1779\">1779</a>\n<a href=\"#1780\" id=\"1780\">1780</a>\n<a href=\"#1781\" id=\"1781\">1781</a>\n<a href=\"#1782\" id=\"1782\">1782</a>\n<a href=\"#1783\" id=\"1783\">1783</a>\n<a href=\"#1784\" id=\"1784\">1784</a>\n<a href=\"#1785\" id=\"1785\">1785</a>\n<a href=\"#1786\" id=\"1786\">1786</a>\n<a href=\"#1787\" id=\"1787\">1787</a>\n<a href=\"#1788\" id=\"1788\">1788</a>\n<a href=\"#1789\" id=\"1789\">1789</a>\n<a href=\"#1790\" id=\"1790\">1790</a>\n<a href=\"#1791\" id=\"1791\">1791</a>\n<a href=\"#1792\" id=\"1792\">1792</a>\n<a href=\"#1793\" id=\"1793\">1793</a>\n<a href=\"#1794\" id=\"1794\">1794</a>\n<a href=\"#1795\" id=\"1795\">1795</a>\n<a href=\"#1796\" id=\"1796\">1796</a>\n<a href=\"#1797\" id=\"1797\">1797</a>\n<a href=\"#1798\" id=\"1798\">1798</a>\n<a href=\"#1799\" id=\"1799\">1799</a>\n<a href=\"#1800\" id=\"1800\">1800</a>\n<a href=\"#1801\" id=\"1801\">1801</a>\n<a href=\"#1802\" id=\"1802\">1802</a>\n<a href=\"#1803\" id=\"1803\">1803</a>\n<a href=\"#1804\" id=\"1804\">1804</a>\n<a href=\"#1805\" id=\"1805\">1805</a>\n<a href=\"#1806\" id=\"1806\">1806</a>\n<a href=\"#1807\" id=\"1807\">1807</a>\n<a href=\"#1808\" id=\"1808\">1808</a>\n<a href=\"#1809\" id=\"1809\">1809</a>\n<a href=\"#1810\" id=\"1810\">1810</a>\n<a href=\"#1811\" id=\"1811\">1811</a>\n<a href=\"#1812\" id=\"1812\">1812</a>\n<a href=\"#1813\" id=\"1813\">1813</a>\n<a href=\"#1814\" id=\"1814\">1814</a>\n<a href=\"#1815\" id=\"1815\">1815</a>\n<a href=\"#1816\" id=\"1816\">1816</a>\n<a href=\"#1817\" id=\"1817\">1817</a>\n<a href=\"#1818\" id=\"1818\">1818</a>\n<a href=\"#1819\" id=\"1819\">1819</a>\n<a href=\"#1820\" id=\"1820\">1820</a>\n<a href=\"#1821\" id=\"1821\">1821</a>\n<a href=\"#1822\" id=\"1822\">1822</a>\n<a href=\"#1823\" id=\"1823\">1823</a>\n<a href=\"#1824\" id=\"1824\">1824</a>\n<a href=\"#1825\" id=\"1825\">1825</a>\n<a href=\"#1826\" id=\"1826\">1826</a>\n<a href=\"#1827\" id=\"1827\">1827</a>\n<a href=\"#1828\" id=\"1828\">1828</a>\n<a href=\"#1829\" id=\"1829\">1829</a>\n<a href=\"#1830\" id=\"1830\">1830</a>\n<a href=\"#1831\" id=\"1831\">1831</a>\n<a href=\"#1832\" id=\"1832\">1832</a>\n<a href=\"#1833\" id=\"1833\">1833</a>\n<a href=\"#1834\" id=\"1834\">1834</a>\n<a href=\"#1835\" id=\"1835\">1835</a>\n<a href=\"#1836\" id=\"1836\">1836</a>\n<a href=\"#1837\" id=\"1837\">1837</a>\n<a href=\"#1838\" id=\"1838\">1838</a>\n<a href=\"#1839\" id=\"1839\">1839</a>\n<a href=\"#1840\" id=\"1840\">1840</a>\n<a href=\"#1841\" id=\"1841\">1841</a>\n<a href=\"#1842\" id=\"1842\">1842</a>\n<a href=\"#1843\" id=\"1843\">1843</a>\n<a href=\"#1844\" id=\"1844\">1844</a>\n<a href=\"#1845\" id=\"1845\">1845</a>\n<a href=\"#1846\" id=\"1846\">1846</a>\n<a href=\"#1847\" id=\"1847\">1847</a>\n<a href=\"#1848\" id=\"1848\">1848</a>\n<a href=\"#1849\" id=\"1849\">1849</a>\n<a href=\"#1850\" id=\"1850\">1850</a>\n<a href=\"#1851\" id=\"1851\">1851</a>\n<a href=\"#1852\" id=\"1852\">1852</a>\n<a href=\"#1853\" id=\"1853\">1853</a>\n<a href=\"#1854\" id=\"1854\">1854</a>\n<a href=\"#1855\" id=\"1855\">1855</a>\n<a href=\"#1856\" id=\"1856\">1856</a>\n<a href=\"#1857\" id=\"1857\">1857</a>\n<a href=\"#1858\" id=\"1858\">1858</a>\n<a href=\"#1859\" id=\"1859\">1859</a>\n<a href=\"#1860\" id=\"1860\">1860</a>\n<a href=\"#1861\" id=\"1861\">1861</a>\n<a href=\"#1862\" id=\"1862\">1862</a>\n<a href=\"#1863\" id=\"1863\">1863</a>\n<a href=\"#1864\" id=\"1864\">1864</a>\n<a href=\"#1865\" id=\"1865\">1865</a>\n<a href=\"#1866\" id=\"1866\">1866</a>\n<a href=\"#1867\" id=\"1867\">1867</a>\n<a href=\"#1868\" id=\"1868\">1868</a>\n<a href=\"#1869\" id=\"1869\">1869</a>\n<a href=\"#1870\" id=\"1870\">1870</a>\n<a href=\"#1871\" id=\"1871\">1871</a>\n<a href=\"#1872\" id=\"1872\">1872</a>\n<a href=\"#1873\" id=\"1873\">1873</a>\n<a href=\"#1874\" id=\"1874\">1874</a>\n<a href=\"#1875\" id=\"1875\">1875</a>\n<a href=\"#1876\" id=\"1876\">1876</a>\n<a href=\"#1877\" id=\"1877\">1877</a>\n<a href=\"#1878\" id=\"1878\">1878</a>\n<a href=\"#1879\" id=\"1879\">1879</a>\n<a href=\"#1880\" id=\"1880\">1880</a>\n<a href=\"#1881\" id=\"1881\">1881</a>\n<a href=\"#1882\" id=\"1882\">1882</a>\n<a href=\"#1883\" id=\"1883\">1883</a>\n<a href=\"#1884\" id=\"1884\">1884</a>\n<a href=\"#1885\" id=\"1885\">1885</a>\n<a href=\"#1886\" id=\"1886\">1886</a>\n<a href=\"#1887\" id=\"1887\">1887</a>\n<a href=\"#1888\" id=\"1888\">1888</a>\n<a href=\"#1889\" id=\"1889\">1889</a>\n<a href=\"#1890\" id=\"1890\">1890</a>\n<a href=\"#1891\" id=\"1891\">1891</a>\n<a href=\"#1892\" id=\"1892\">1892</a>\n<a href=\"#1893\" id=\"1893\">1893</a>\n<a href=\"#1894\" id=\"1894\">1894</a>\n<a href=\"#1895\" id=\"1895\">1895</a>\n<a href=\"#1896\" id=\"1896\">1896</a>\n<a href=\"#1897\" id=\"1897\">1897</a>\n<a href=\"#1898\" id=\"1898\">1898</a>\n<a href=\"#1899\" id=\"1899\">1899</a>\n<a href=\"#1900\" id=\"1900\">1900</a>\n<a href=\"#1901\" id=\"1901\">1901</a>\n<a href=\"#1902\" id=\"1902\">1902</a>\n<a href=\"#1903\" id=\"1903\">1903</a>\n<a href=\"#1904\" id=\"1904\">1904</a>\n<a href=\"#1905\" id=\"1905\">1905</a>\n<a href=\"#1906\" id=\"1906\">1906</a>\n<a href=\"#1907\" id=\"1907\">1907</a>\n<a href=\"#1908\" id=\"1908\">1908</a>\n<a href=\"#1909\" id=\"1909\">1909</a>\n<a href=\"#1910\" id=\"1910\">1910</a>\n<a href=\"#1911\" id=\"1911\">1911</a>\n<a href=\"#1912\" id=\"1912\">1912</a>\n<a href=\"#1913\" id=\"1913\">1913</a>\n<a href=\"#1914\" id=\"1914\">1914</a>\n<a href=\"#1915\" id=\"1915\">1915</a>\n<a href=\"#1916\" id=\"1916\">1916</a>\n<a href=\"#1917\" id=\"1917\">1917</a>\n<a href=\"#1918\" id=\"1918\">1918</a>\n<a href=\"#1919\" id=\"1919\">1919</a>\n<a href=\"#1920\" id=\"1920\">1920</a>\n<a href=\"#1921\" id=\"1921\">1921</a>\n<a href=\"#1922\" id=\"1922\">1922</a>\n<a href=\"#1923\" id=\"1923\">1923</a>\n<a href=\"#1924\" id=\"1924\">1924</a>\n<a href=\"#1925\" id=\"1925\">1925</a>\n<a href=\"#1926\" id=\"1926\">1926</a>\n<a href=\"#1927\" id=\"1927\">1927</a>\n<a href=\"#1928\" id=\"1928\">1928</a>\n<a href=\"#1929\" id=\"1929\">1929</a>\n<a href=\"#1930\" id=\"1930\">1930</a>\n<a href=\"#1931\" id=\"1931\">1931</a>\n<a href=\"#1932\" id=\"1932\">1932</a>\n<a href=\"#1933\" id=\"1933\">1933</a>\n<a href=\"#1934\" id=\"1934\">1934</a>\n<a href=\"#1935\" id=\"1935\">1935</a>\n<a href=\"#1936\" id=\"1936\">1936</a>\n<a href=\"#1937\" id=\"1937\">1937</a>\n<a href=\"#1938\" id=\"1938\">1938</a>\n<a href=\"#1939\" id=\"1939\">1939</a>\n<a href=\"#1940\" id=\"1940\">1940</a>\n<a href=\"#1941\" id=\"1941\">1941</a>\n<a href=\"#1942\" id=\"1942\">1942</a>\n<a href=\"#1943\" id=\"1943\">1943</a>\n<a href=\"#1944\" id=\"1944\">1944</a>\n<a href=\"#1945\" id=\"1945\">1945</a>\n<a href=\"#1946\" id=\"1946\">1946</a>\n<a href=\"#1947\" id=\"1947\">1947</a>\n<a href=\"#1948\" id=\"1948\">1948</a>\n<a href=\"#1949\" id=\"1949\">1949</a>\n<a href=\"#1950\" id=\"1950\">1950</a>\n<a href=\"#1951\" id=\"1951\">1951</a>\n<a href=\"#1952\" id=\"1952\">1952</a>\n<a href=\"#1953\" id=\"1953\">1953</a>\n<a href=\"#1954\" id=\"1954\">1954</a>\n<a href=\"#1955\" id=\"1955\">1955</a>\n<a href=\"#1956\" id=\"1956\">1956</a>\n<a href=\"#1957\" id=\"1957\">1957</a>\n<a href=\"#1958\" id=\"1958\">1958</a>\n<a href=\"#1959\" id=\"1959\">1959</a>\n<a href=\"#1960\" id=\"1960\">1960</a>\n<a href=\"#1961\" id=\"1961\">1961</a>\n<a href=\"#1962\" id=\"1962\">1962</a>\n<a href=\"#1963\" id=\"1963\">1963</a>\n<a href=\"#1964\" id=\"1964\">1964</a>\n<a href=\"#1965\" id=\"1965\">1965</a>\n<a href=\"#1966\" id=\"1966\">1966</a>\n<a href=\"#1967\" id=\"1967\">1967</a>\n<a href=\"#1968\" id=\"1968\">1968</a>\n<a href=\"#1969\" id=\"1969\">1969</a>\n<a href=\"#1970\" id=\"1970\">1970</a>\n<a href=\"#1971\" id=\"1971\">1971</a>\n<a href=\"#1972\" id=\"1972\">1972</a>\n<a href=\"#1973\" id=\"1973\">1973</a>\n<a href=\"#1974\" id=\"1974\">1974</a>\n<a href=\"#1975\" id=\"1975\">1975</a>\n<a href=\"#1976\" id=\"1976\">1976</a>\n<a href=\"#1977\" id=\"1977\">1977</a>\n<a href=\"#1978\" id=\"1978\">1978</a>\n<a href=\"#1979\" id=\"1979\">1979</a>\n<a href=\"#1980\" id=\"1980\">1980</a>\n<a href=\"#1981\" id=\"1981\">1981</a>\n<a href=\"#1982\" id=\"1982\">1982</a>\n<a href=\"#1983\" id=\"1983\">1983</a>\n<a href=\"#1984\" id=\"1984\">1984</a>\n<a href=\"#1985\" id=\"1985\">1985</a>\n<a href=\"#1986\" id=\"1986\">1986</a>\n<a href=\"#1987\" id=\"1987\">1987</a>\n<a href=\"#1988\" id=\"1988\">1988</a>\n<a href=\"#1989\" id=\"1989\">1989</a>\n<a href=\"#1990\" id=\"1990\">1990</a>\n<a href=\"#1991\" id=\"1991\">1991</a>\n<a href=\"#1992\" id=\"1992\">1992</a>\n<a href=\"#1993\" id=\"1993\">1993</a>\n<a href=\"#1994\" id=\"1994\">1994</a>\n<a href=\"#1995\" id=\"1995\">1995</a>\n<a href=\"#1996\" id=\"1996\">1996</a>\n<a href=\"#1997\" id=\"1997\">1997</a>\n<a href=\"#1998\" id=\"1998\">1998</a>\n<a href=\"#1999\" id=\"1999\">1999</a>\n<a href=\"#2000\" id=\"2000\">2000</a>\n<a href=\"#2001\" id=\"2001\">2001</a>\n<a href=\"#2002\" id=\"2002\">2002</a>\n<a href=\"#2003\" id=\"2003\">2003</a>\n<a href=\"#2004\" id=\"2004\">2004</a>\n<a href=\"#2005\" id=\"2005\">2005</a>\n<a href=\"#2006\" id=\"2006\">2006</a>\n<a href=\"#2007\" id=\"2007\">2007</a>\n<a href=\"#2008\" id=\"2008\">2008</a>\n<a href=\"#2009\" id=\"2009\">2009</a>\n<a href=\"#2010\" id=\"2010\">2010</a>\n<a href=\"#2011\" id=\"2011\">2011</a>\n<a href=\"#2012\" id=\"2012\">2012</a>\n<a href=\"#2013\" id=\"2013\">2013</a>\n<a href=\"#2014\" id=\"2014\">2014</a>\n<a href=\"#2015\" id=\"2015\">2015</a>\n<a href=\"#2016\" id=\"2016\">2016</a>\n<a href=\"#2017\" id=\"2017\">2017</a>\n<a href=\"#2018\" id=\"2018\">2018</a>\n<a href=\"#2019\" id=\"2019\">2019</a>\n<a href=\"#2020\" id=\"2020\">2020</a>\n<a href=\"#2021\" id=\"2021\">2021</a>\n<a href=\"#2022\" id=\"2022\">2022</a>\n<a href=\"#2023\" id=\"2023\">2023</a>\n<a href=\"#2024\" id=\"2024\">2024</a>\n<a href=\"#2025\" id=\"2025\">2025</a>\n<a href=\"#2026\" id=\"2026\">2026</a>\n<a href=\"#2027\" id=\"2027\">2027</a>\n<a href=\"#2028\" id=\"2028\">2028</a>\n<a href=\"#2029\" id=\"2029\">2029</a>\n<a href=\"#2030\" id=\"2030\">2030</a>\n<a href=\"#2031\" id=\"2031\">2031</a>\n<a href=\"#2032\" id=\"2032\">2032</a>\n<a href=\"#2033\" id=\"2033\">2033</a>\n<a href=\"#2034\" id=\"2034\">2034</a>\n<a href=\"#2035\" id=\"2035\">2035</a>\n<a href=\"#2036\" id=\"2036\">2036</a>\n<a href=\"#2037\" id=\"2037\">2037</a>\n<a href=\"#2038\" id=\"2038\">2038</a>\n<a href=\"#2039\" id=\"2039\">2039</a>\n<a href=\"#2040\" id=\"2040\">2040</a>\n<a href=\"#2041\" id=\"2041\">2041</a>\n<a href=\"#2042\" id=\"2042\">2042</a>\n<a href=\"#2043\" id=\"2043\">2043</a>\n<a href=\"#2044\" id=\"2044\">2044</a>\n<a href=\"#2045\" id=\"2045\">2045</a>\n<a href=\"#2046\" id=\"2046\">2046</a>\n<a href=\"#2047\" id=\"2047\">2047</a>\n<a href=\"#2048\" id=\"2048\">2048</a>\n<a href=\"#2049\" id=\"2049\">2049</a>\n<a href=\"#2050\" id=\"2050\">2050</a>\n<a href=\"#2051\" id=\"2051\">2051</a>\n<a href=\"#2052\" id=\"2052\">2052</a>\n<a href=\"#2053\" id=\"2053\">2053</a>\n<a href=\"#2054\" id=\"2054\">2054</a>\n<a href=\"#2055\" id=\"2055\">2055</a>\n<a href=\"#2056\" id=\"2056\">2056</a>\n<a href=\"#2057\" id=\"2057\">2057</a>\n<a href=\"#2058\" id=\"2058\">2058</a>\n<a href=\"#2059\" id=\"2059\">2059</a>\n<a href=\"#2060\" id=\"2060\">2060</a>\n<a href=\"#2061\" id=\"2061\">2061</a>\n<a href=\"#2062\" id=\"2062\">2062</a>\n<a href=\"#2063\" id=\"2063\">2063</a>\n<a href=\"#2064\" id=\"2064\">2064</a>\n<a href=\"#2065\" id=\"2065\">2065</a>\n<a href=\"#2066\" id=\"2066\">2066</a>\n<a href=\"#2067\" id=\"2067\">2067</a>\n<a href=\"#2068\" id=\"2068\">2068</a>\n<a href=\"#2069\" id=\"2069\">2069</a>\n<a href=\"#2070\" id=\"2070\">2070</a>\n<a href=\"#2071\" id=\"2071\">2071</a>\n<a href=\"#2072\" id=\"2072\">2072</a>\n<a href=\"#2073\" id=\"2073\">2073</a>\n<a href=\"#2074\" id=\"2074\">2074</a>\n<a href=\"#2075\" id=\"2075\">2075</a>\n<a href=\"#2076\" id=\"2076\">2076</a>\n<a href=\"#2077\" id=\"2077\">2077</a>\n<a href=\"#2078\" id=\"2078\">2078</a>\n<a href=\"#2079\" id=\"2079\">2079</a>\n<a href=\"#2080\" id=\"2080\">2080</a>\n<a href=\"#2081\" id=\"2081\">2081</a>\n<a href=\"#2082\" id=\"2082\">2082</a>\n<a href=\"#2083\" id=\"2083\">2083</a>\n<a href=\"#2084\" id=\"2084\">2084</a>\n<a href=\"#2085\" id=\"2085\">2085</a>\n<a href=\"#2086\" id=\"2086\">2086</a>\n<a href=\"#2087\" id=\"2087\">2087</a>\n<a href=\"#2088\" id=\"2088\">2088</a>\n<a href=\"#2089\" id=\"2089\">2089</a>\n<a href=\"#2090\" id=\"2090\">2090</a>\n<a href=\"#2091\" id=\"2091\">2091</a>\n<a href=\"#2092\" id=\"2092\">2092</a>\n<a href=\"#2093\" id=\"2093\">2093</a>\n<a href=\"#2094\" id=\"2094\">2094</a>\n<a href=\"#2095\" id=\"2095\">2095</a>\n<a href=\"#2096\" id=\"2096\">2096</a>\n<a href=\"#2097\" id=\"2097\">2097</a>\n<a href=\"#2098\" id=\"2098\">2098</a>\n<a href=\"#2099\" id=\"2099\">2099</a>\n<a href=\"#2100\" id=\"2100\">2100</a>\n<a href=\"#2101\" id=\"2101\">2101</a>\n<a href=\"#2102\" id=\"2102\">2102</a>\n<a href=\"#2103\" id=\"2103\">2103</a>\n<a href=\"#2104\" id=\"2104\">2104</a>\n<a href=\"#2105\" id=\"2105\">2105</a>\n<a href=\"#2106\" id=\"2106\">2106</a>\n<a href=\"#2107\" id=\"2107\">2107</a>\n<a href=\"#2108\" id=\"2108\">2108</a>\n<a href=\"#2109\" id=\"2109\">2109</a>\n<a href=\"#2110\" id=\"2110\">2110</a>\n<a href=\"#2111\" id=\"2111\">2111</a>\n<a href=\"#2112\" id=\"2112\">2112</a>\n<a href=\"#2113\" id=\"2113\">2113</a>\n<a href=\"#2114\" id=\"2114\">2114</a>\n<a href=\"#2115\" id=\"2115\">2115</a>\n<a href=\"#2116\" id=\"2116\">2116</a>\n<a href=\"#2117\" id=\"2117\">2117</a>\n<a href=\"#2118\" id=\"2118\">2118</a>\n<a href=\"#2119\" id=\"2119\">2119</a>\n<a href=\"#2120\" id=\"2120\">2120</a>\n<a href=\"#2121\" id=\"2121\">2121</a>\n<a href=\"#2122\" id=\"2122\">2122</a>\n<a href=\"#2123\" id=\"2123\">2123</a>\n<a href=\"#2124\" id=\"2124\">2124</a>\n<a href=\"#2125\" id=\"2125\">2125</a>\n<a href=\"#2126\" id=\"2126\">2126</a>\n<a href=\"#2127\" id=\"2127\">2127</a>\n<a href=\"#2128\" id=\"2128\">2128</a>\n<a href=\"#2129\" id=\"2129\">2129</a>\n<a href=\"#2130\" id=\"2130\">2130</a>\n<a href=\"#2131\" id=\"2131\">2131</a>\n<a href=\"#2132\" id=\"2132\">2132</a>\n<a href=\"#2133\" id=\"2133\">2133</a>\n<a href=\"#2134\" id=\"2134\">2134</a>\n<a href=\"#2135\" id=\"2135\">2135</a>\n<a href=\"#2136\" id=\"2136\">2136</a>\n<a href=\"#2137\" id=\"2137\">2137</a>\n<a href=\"#2138\" id=\"2138\">2138</a>\n<a href=\"#2139\" id=\"2139\">2139</a>\n<a href=\"#2140\" id=\"2140\">2140</a>\n<a href=\"#2141\" id=\"2141\">2141</a>\n<a href=\"#2142\" id=\"2142\">2142</a>\n<a href=\"#2143\" id=\"2143\">2143</a>\n<a href=\"#2144\" id=\"2144\">2144</a>\n<a href=\"#2145\" id=\"2145\">2145</a>\n<a href=\"#2146\" id=\"2146\">2146</a>\n<a href=\"#2147\" id=\"2147\">2147</a>\n<a href=\"#2148\" id=\"2148\">2148</a>\n<a href=\"#2149\" id=\"2149\">2149</a>\n<a href=\"#2150\" id=\"2150\">2150</a>\n<a href=\"#2151\" id=\"2151\">2151</a>\n<a href=\"#2152\" id=\"2152\">2152</a>\n<a href=\"#2153\" id=\"2153\">2153</a>\n<a href=\"#2154\" id=\"2154\">2154</a>\n<a href=\"#2155\" id=\"2155\">2155</a>\n<a href=\"#2156\" id=\"2156\">2156</a>\n<a href=\"#2157\" id=\"2157\">2157</a>\n<a href=\"#2158\" id=\"2158\">2158</a>\n<a href=\"#2159\" id=\"2159\">2159</a>\n<a href=\"#2160\" id=\"2160\">2160</a>\n<a href=\"#2161\" id=\"2161\">2161</a>\n<a href=\"#2162\" id=\"2162\">2162</a>\n<a href=\"#2163\" id=\"2163\">2163</a>\n<a href=\"#2164\" id=\"2164\">2164</a>\n<a href=\"#2165\" id=\"2165\">2165</a>\n<a href=\"#2166\" id=\"2166\">2166</a>\n<a href=\"#2167\" id=\"2167\">2167</a>\n<a href=\"#2168\" id=\"2168\">2168</a>\n<a href=\"#2169\" id=\"2169\">2169</a>\n<a href=\"#2170\" id=\"2170\">2170</a>\n<a href=\"#2171\" id=\"2171\">2171</a>\n<a href=\"#2172\" id=\"2172\">2172</a>\n<a href=\"#2173\" id=\"2173\">2173</a>\n<a href=\"#2174\" id=\"2174\">2174</a>\n<a href=\"#2175\" id=\"2175\">2175</a>\n<a href=\"#2176\" id=\"2176\">2176</a>\n<a href=\"#2177\" id=\"2177\">2177</a>\n<a href=\"#2178\" id=\"2178\">2178</a>\n<a href=\"#2179\" id=\"2179\">2179</a>\n<a href=\"#2180\" id=\"2180\">2180</a>\n<a href=\"#2181\" id=\"2181\">2181</a>\n<a href=\"#2182\" id=\"2182\">2182</a>\n<a href=\"#2183\" id=\"2183\">2183</a>\n<a href=\"#2184\" id=\"2184\">2184</a>\n<a href=\"#2185\" id=\"2185\">2185</a>\n<a href=\"#2186\" id=\"2186\">2186</a>\n<a href=\"#2187\" id=\"2187\">2187</a>\n<a href=\"#2188\" id=\"2188\">2188</a>\n<a href=\"#2189\" id=\"2189\">2189</a>\n<a href=\"#2190\" id=\"2190\">2190</a>\n<a href=\"#2191\" id=\"2191\">2191</a>\n<a href=\"#2192\" id=\"2192\">2192</a>\n<a href=\"#2193\" id=\"2193\">2193</a>\n<a href=\"#2194\" id=\"2194\">2194</a>\n<a href=\"#2195\" id=\"2195\">2195</a>\n<a href=\"#2196\" id=\"2196\">2196</a>\n<a href=\"#2197\" id=\"2197\">2197</a>\n<a href=\"#2198\" id=\"2198\">2198</a>\n<a href=\"#2199\" id=\"2199\">2199</a>\n<a href=\"#2200\" id=\"2200\">2200</a>\n<a href=\"#2201\" id=\"2201\">2201</a>\n<a href=\"#2202\" id=\"2202\">2202</a>\n<a href=\"#2203\" id=\"2203\">2203</a>\n<a href=\"#2204\" id=\"2204\">2204</a>\n<a href=\"#2205\" id=\"2205\">2205</a>\n<a href=\"#2206\" id=\"2206\">2206</a>\n<a href=\"#2207\" id=\"2207\">2207</a>\n<a href=\"#2208\" id=\"2208\">2208</a>\n<a href=\"#2209\" id=\"2209\">2209</a>\n<a href=\"#2210\" id=\"2210\">2210</a>\n<a href=\"#2211\" id=\"2211\">2211</a>\n<a href=\"#2212\" id=\"2212\">2212</a>\n<a href=\"#2213\" id=\"2213\">2213</a>\n<a href=\"#2214\" id=\"2214\">2214</a>\n<a href=\"#2215\" id=\"2215\">2215</a>\n<a href=\"#2216\" id=\"2216\">2216</a>\n<a href=\"#2217\" id=\"2217\">2217</a>\n<a href=\"#2218\" id=\"2218\">2218</a>\n<a href=\"#2219\" id=\"2219\">2219</a>\n<a href=\"#2220\" id=\"2220\">2220</a>\n<a href=\"#2221\" id=\"2221\">2221</a>\n<a href=\"#2222\" id=\"2222\">2222</a>\n<a href=\"#2223\" id=\"2223\">2223</a>\n<a href=\"#2224\" id=\"2224\">2224</a>\n<a href=\"#2225\" id=\"2225\">2225</a>\n<a href=\"#2226\" id=\"2226\">2226</a>\n<a href=\"#2227\" id=\"2227\">2227</a>\n<a href=\"#2228\" id=\"2228\">2228</a>\n<a href=\"#2229\" id=\"2229\">2229</a>\n<a href=\"#2230\" id=\"2230\">2230</a>\n<a href=\"#2231\" id=\"2231\">2231</a>\n<a href=\"#2232\" id=\"2232\">2232</a>\n<a href=\"#2233\" id=\"2233\">2233</a>\n<a href=\"#2234\" id=\"2234\">2234</a>\n<a href=\"#2235\" id=\"2235\">2235</a>\n<a href=\"#2236\" id=\"2236\">2236</a>\n<a href=\"#2237\" id=\"2237\">2237</a>\n<a href=\"#2238\" id=\"2238\">2238</a>\n<a href=\"#2239\" id=\"2239\">2239</a>\n<a href=\"#2240\" id=\"2240\">2240</a>\n<a href=\"#2241\" id=\"2241\">2241</a>\n<a href=\"#2242\" id=\"2242\">2242</a>\n<a href=\"#2243\" id=\"2243\">2243</a>\n<a href=\"#2244\" id=\"2244\">2244</a>\n<a href=\"#2245\" id=\"2245\">2245</a>\n<a href=\"#2246\" id=\"2246\">2246</a>\n<a href=\"#2247\" id=\"2247\">2247</a>\n<a href=\"#2248\" id=\"2248\">2248</a>\n<a href=\"#2249\" id=\"2249\">2249</a>\n<a href=\"#2250\" id=\"2250\">2250</a>\n<a href=\"#2251\" id=\"2251\">2251</a>\n<a href=\"#2252\" id=\"2252\">2252</a>\n<a href=\"#2253\" id=\"2253\">2253</a>\n<a href=\"#2254\" id=\"2254\">2254</a>\n<a href=\"#2255\" id=\"2255\">2255</a>\n<a href=\"#2256\" id=\"2256\">2256</a>\n<a href=\"#2257\" id=\"2257\">2257</a>\n<a href=\"#2258\" id=\"2258\">2258</a>\n<a href=\"#2259\" id=\"2259\">2259</a>\n<a href=\"#2260\" id=\"2260\">2260</a>\n<a href=\"#2261\" id=\"2261\">2261</a>\n<a href=\"#2262\" id=\"2262\">2262</a>\n<a href=\"#2263\" id=\"2263\">2263</a>\n<a href=\"#2264\" id=\"2264\">2264</a>\n<a href=\"#2265\" id=\"2265\">2265</a>\n<a href=\"#2266\" id=\"2266\">2266</a>\n<a href=\"#2267\" id=\"2267\">2267</a>\n<a href=\"#2268\" id=\"2268\">2268</a>\n<a href=\"#2269\" id=\"2269\">2269</a>\n<a href=\"#2270\" id=\"2270\">2270</a>\n<a href=\"#2271\" id=\"2271\">2271</a>\n<a href=\"#2272\" id=\"2272\">2272</a>\n<a href=\"#2273\" id=\"2273\">2273</a>\n<a href=\"#2274\" id=\"2274\">2274</a>\n<a href=\"#2275\" id=\"2275\">2275</a>\n<a href=\"#2276\" id=\"2276\">2276</a>\n<a href=\"#2277\" id=\"2277\">2277</a>\n<a href=\"#2278\" id=\"2278\">2278</a>\n<a href=\"#2279\" id=\"2279\">2279</a>\n<a href=\"#2280\" id=\"2280\">2280</a>\n<a href=\"#2281\" id=\"2281\">2281</a>\n<a href=\"#2282\" id=\"2282\">2282</a>\n<a href=\"#2283\" id=\"2283\">2283</a>\n<a href=\"#2284\" id=\"2284\">2284</a>\n<a href=\"#2285\" id=\"2285\">2285</a>\n<a href=\"#2286\" id=\"2286\">2286</a>\n<a href=\"#2287\" id=\"2287\">2287</a>\n<a href=\"#2288\" id=\"2288\">2288</a>\n<a href=\"#2289\" id=\"2289\">2289</a>\n<a href=\"#2290\" id=\"2290\">2290</a>\n<a href=\"#2291\" id=\"2291\">2291</a>\n<a href=\"#2292\" id=\"2292\">2292</a>\n<a href=\"#2293\" id=\"2293\">2293</a>\n<a href=\"#2294\" id=\"2294\">2294</a>\n<a href=\"#2295\" id=\"2295\">2295</a>\n<a href=\"#2296\" id=\"2296\">2296</a>\n<a href=\"#2297\" id=\"2297\">2297</a>\n<a href=\"#2298\" id=\"2298\">2298</a>\n<a href=\"#2299\" id=\"2299\">2299</a>\n<a href=\"#2300\" id=\"2300\">2300</a>\n<a href=\"#2301\" id=\"2301\">2301</a>\n<a href=\"#2302\" id=\"2302\">2302</a>\n<a href=\"#2303\" id=\"2303\">2303</a>\n<a href=\"#2304\" id=\"2304\">2304</a>\n<a href=\"#2305\" id=\"2305\">2305</a>\n<a href=\"#2306\" id=\"2306\">2306</a>\n<a href=\"#2307\" id=\"2307\">2307</a>\n<a href=\"#2308\" id=\"2308\">2308</a>\n<a href=\"#2309\" id=\"2309\">2309</a>\n<a href=\"#2310\" id=\"2310\">2310</a>\n<a href=\"#2311\" id=\"2311\">2311</a>\n<a href=\"#2312\" id=\"2312\">2312</a>\n<a href=\"#2313\" id=\"2313\">2313</a>\n<a href=\"#2314\" id=\"2314\">2314</a>\n<a href=\"#2315\" id=\"2315\">2315</a>\n<a href=\"#2316\" id=\"2316\">2316</a>\n<a href=\"#2317\" id=\"2317\">2317</a>\n<a href=\"#2318\" id=\"2318\">2318</a>\n<a href=\"#2319\" id=\"2319\">2319</a>\n<a href=\"#2320\" id=\"2320\">2320</a>\n<a href=\"#2321\" id=\"2321\">2321</a>\n<a href=\"#2322\" id=\"2322\">2322</a>\n<a href=\"#2323\" id=\"2323\">2323</a>\n<a href=\"#2324\" id=\"2324\">2324</a>\n<a href=\"#2325\" id=\"2325\">2325</a>\n<a href=\"#2326\" id=\"2326\">2326</a>\n<a href=\"#2327\" id=\"2327\">2327</a>\n<a href=\"#2328\" id=\"2328\">2328</a>\n<a href=\"#2329\" id=\"2329\">2329</a>\n<a href=\"#2330\" id=\"2330\">2330</a>\n<a href=\"#2331\" id=\"2331\">2331</a>\n<a href=\"#2332\" id=\"2332\">2332</a>\n<a href=\"#2333\" id=\"2333\">2333</a>\n<a href=\"#2334\" id=\"2334\">2334</a>\n<a href=\"#2335\" id=\"2335\">2335</a>\n<a href=\"#2336\" id=\"2336\">2336</a>\n<a href=\"#2337\" id=\"2337\">2337</a>\n<a href=\"#2338\" id=\"2338\">2338</a>\n<a href=\"#2339\" id=\"2339\">2339</a>\n<a href=\"#2340\" id=\"2340\">2340</a>\n<a href=\"#2341\" id=\"2341\">2341</a>\n<a href=\"#2342\" id=\"2342\">2342</a>\n<a href=\"#2343\" id=\"2343\">2343</a>\n<a href=\"#2344\" id=\"2344\">2344</a>\n<a href=\"#2345\" id=\"2345\">2345</a>\n<a href=\"#2346\" id=\"2346\">2346</a>\n<a href=\"#2347\" id=\"2347\">2347</a>\n<a href=\"#2348\" id=\"2348\">2348</a>\n<a href=\"#2349\" id=\"2349\">2349</a>\n<a href=\"#2350\" id=\"2350\">2350</a>\n<a href=\"#2351\" id=\"2351\">2351</a>\n<a href=\"#2352\" id=\"2352\">2352</a>\n<a href=\"#2353\" id=\"2353\">2353</a>\n<a href=\"#2354\" id=\"2354\">2354</a>\n<a href=\"#2355\" id=\"2355\">2355</a>\n<a href=\"#2356\" id=\"2356\">2356</a>\n<a href=\"#2357\" id=\"2357\">2357</a>\n<a href=\"#2358\" id=\"2358\">2358</a>\n<a href=\"#2359\" id=\"2359\">2359</a>\n<a href=\"#2360\" id=\"2360\">2360</a>\n<a href=\"#2361\" id=\"2361\">2361</a>\n<a href=\"#2362\" id=\"2362\">2362</a>\n<a href=\"#2363\" id=\"2363\">2363</a>\n<a href=\"#2364\" id=\"2364\">2364</a>\n<a href=\"#2365\" id=\"2365\">2365</a>\n<a href=\"#2366\" id=\"2366\">2366</a>\n<a href=\"#2367\" id=\"2367\">2367</a>\n<a href=\"#2368\" id=\"2368\">2368</a>\n<a href=\"#2369\" id=\"2369\">2369</a>\n<a href=\"#2370\" id=\"2370\">2370</a>\n<a href=\"#2371\" id=\"2371\">2371</a>\n<a href=\"#2372\" id=\"2372\">2372</a>\n<a href=\"#2373\" id=\"2373\">2373</a>\n<a href=\"#2374\" id=\"2374\">2374</a>\n<a href=\"#2375\" id=\"2375\">2375</a>\n<a href=\"#2376\" id=\"2376\">2376</a>\n<a href=\"#2377\" id=\"2377\">2377</a>\n<a href=\"#2378\" id=\"2378\">2378</a>\n<a href=\"#2379\" id=\"2379\">2379</a>\n<a href=\"#2380\" id=\"2380\">2380</a>\n<a href=\"#2381\" id=\"2381\">2381</a>\n<a href=\"#2382\" id=\"2382\">2382</a>\n<a href=\"#2383\" id=\"2383\">2383</a>\n<a href=\"#2384\" id=\"2384\">2384</a>\n<a href=\"#2385\" id=\"2385\">2385</a>\n<a href=\"#2386\" id=\"2386\">2386</a>\n<a href=\"#2387\" id=\"2387\">2387</a>\n<a href=\"#2388\" id=\"2388\">2388</a>\n<a href=\"#2389\" id=\"2389\">2389</a>\n<a href=\"#2390\" id=\"2390\">2390</a>\n<a href=\"#2391\" id=\"2391\">2391</a>\n<a href=\"#2392\" id=\"2392\">2392</a>\n<a href=\"#2393\" id=\"2393\">2393</a>\n<a href=\"#2394\" id=\"2394\">2394</a>\n<a href=\"#2395\" id=\"2395\">2395</a>\n<a href=\"#2396\" id=\"2396\">2396</a>\n<a href=\"#2397\" id=\"2397\">2397</a>\n<a href=\"#2398\" id=\"2398\">2398</a>\n<a href=\"#2399\" id=\"2399\">2399</a>\n<a href=\"#2400\" id=\"2400\">2400</a>\n<a href=\"#2401\" id=\"2401\">2401</a>\n<a href=\"#2402\" id=\"2402\">2402</a>\n<a href=\"#2403\" id=\"2403\">2403</a>\n<a href=\"#2404\" id=\"2404\">2404</a>\n<a href=\"#2405\" id=\"2405\">2405</a>\n<a href=\"#2406\" id=\"2406\">2406</a>\n<a href=\"#2407\" id=\"2407\">2407</a>\n<a href=\"#2408\" id=\"2408\">2408</a>\n<a href=\"#2409\" id=\"2409\">2409</a>\n<a href=\"#2410\" id=\"2410\">2410</a>\n<a href=\"#2411\" id=\"2411\">2411</a>\n<a href=\"#2412\" id=\"2412\">2412</a>\n<a href=\"#2413\" id=\"2413\">2413</a>\n<a href=\"#2414\" id=\"2414\">2414</a>\n<a href=\"#2415\" id=\"2415\">2415</a>\n<a href=\"#2416\" id=\"2416\">2416</a>\n<a href=\"#2417\" id=\"2417\">2417</a>\n<a href=\"#2418\" id=\"2418\">2418</a>\n<a href=\"#2419\" id=\"2419\">2419</a>\n<a href=\"#2420\" id=\"2420\">2420</a>\n<a href=\"#2421\" id=\"2421\">2421</a>\n<a href=\"#2422\" id=\"2422\">2422</a>\n<a href=\"#2423\" id=\"2423\">2423</a>\n<a href=\"#2424\" id=\"2424\">2424</a>\n<a href=\"#2425\" id=\"2425\">2425</a>\n<a href=\"#2426\" id=\"2426\">2426</a>\n<a href=\"#2427\" id=\"2427\">2427</a>\n<a href=\"#2428\" id=\"2428\">2428</a>\n<a href=\"#2429\" id=\"2429\">2429</a>\n<a href=\"#2430\" id=\"2430\">2430</a>\n<a href=\"#2431\" id=\"2431\">2431</a>\n<a href=\"#2432\" id=\"2432\">2432</a>\n<a href=\"#2433\" id=\"2433\">2433</a>\n<a href=\"#2434\" id=\"2434\">2434</a>\n<a href=\"#2435\" id=\"2435\">2435</a>\n<a href=\"#2436\" id=\"2436\">2436</a>\n<a href=\"#2437\" id=\"2437\">2437</a>\n<a href=\"#2438\" id=\"2438\">2438</a>\n<a href=\"#2439\" id=\"2439\">2439</a>\n<a href=\"#2440\" id=\"2440\">2440</a>\n<a href=\"#2441\" id=\"2441\">2441</a>\n<a href=\"#2442\" id=\"2442\">2442</a>\n<a href=\"#2443\" id=\"2443\">2443</a>\n<a href=\"#2444\" id=\"2444\">2444</a>\n<a href=\"#2445\" id=\"2445\">2445</a>\n<a href=\"#2446\" id=\"2446\">2446</a>\n<a href=\"#2447\" id=\"2447\">2447</a>\n<a href=\"#2448\" id=\"2448\">2448</a>\n<a href=\"#2449\" id=\"2449\" class=\"line-highlighted\">2449</a>\n<a href=\"#2450\" id=\"2450\" class=\"line-highlighted\">2450</a>\n<a href=\"#2451\" id=\"2451\" class=\"line-highlighted\">2451</a>\n<a href=\"#2452\" id=\"2452\" class=\"line-highlighted\">2452</a>\n<a href=\"#2453\" id=\"2453\" class=\"line-highlighted\">2453</a>\n<a href=\"#2454\" id=\"2454\" class=\"line-highlighted\">2454</a>\n<a href=\"#2455\" id=\"2455\" class=\"line-highlighted\">2455</a>\n<a href=\"#2456\" id=\"2456\" class=\"line-highlighted\">2456</a>\n<a href=\"#2457\" id=\"2457\" class=\"line-highlighted\">2457</a>\n<a href=\"#2458\" id=\"2458\" class=\"line-highlighted\">2458</a>\n<a href=\"#2459\" id=\"2459\" class=\"line-highlighted\">2459</a>\n</pre></div><pre class=\"rust\"><code><span class=\"doccomment\">//! A module for working with processes.\n//!\n//! This module is mostly concerned with spawning and interacting with child\n//! processes, but it also provides [`abort`] and [`exit`] for terminating the\n//! current process.\n//!\n//! # Spawning a process\n//!\n//! The [`Command`] struct is used to configure and spawn processes:\n//!\n//! ```no_run\n//! use std::process::Command;\n//!\n//! let output = Command::new(\"echo\")\n//!     .arg(\"Hello world\")\n//!     .output()\n//!     .expect(\"Failed to execute command\");\n//!\n//! assert_eq!(b\"Hello world\\n\", output.stdout.as_slice());\n//! ```\n//!\n//! Several methods on [`Command`], such as [`spawn`] or [`output`], can be used\n//! to spawn a process. In particular, [`output`] spawns the child process and\n//! waits until the process terminates, while [`spawn`] will return a [`Child`]\n//! that represents the spawned child process.\n//!\n//! # Handling I/O\n//!\n//! The [`stdout`], [`stdin`], and [`stderr`] of a child process can be\n//! configured by passing an [`Stdio`] to the corresponding method on\n//! [`Command`]. Once spawned, they can be accessed from the [`Child`]. For\n//! example, piping output from one command into another command can be done\n//! like so:\n//!\n//! ```no_run\n//! use std::process::{Command, Stdio};\n//!\n//! // stdout must be configured with `Stdio::piped` in order to use\n//! // `echo_child.stdout`\n//! let echo_child = Command::new(\"echo\")\n//!     .arg(\"Oh no, a tpyo!\")\n//!     .stdout(Stdio::piped())\n//!     .spawn()\n//!     .expect(\"Failed to start echo process\");\n//!\n//! // Note that `echo_child` is moved here, but we won't be needing\n//! // `echo_child` anymore\n//! let echo_out = echo_child.stdout.expect(\"Failed to open echo stdout\");\n//!\n//! let mut sed_child = Command::new(\"sed\")\n//!     .arg(\"s/tpyo/typo/\")\n//!     .stdin(Stdio::from(echo_out))\n//!     .stdout(Stdio::piped())\n//!     .spawn()\n//!     .expect(\"Failed to start sed process\");\n//!\n//! let output = sed_child.wait_with_output().expect(\"Failed to wait on sed\");\n//! assert_eq!(b\"Oh no, a typo!\\n\", output.stdout.as_slice());\n//! ```\n//!\n//! Note that [`ChildStderr`] and [`ChildStdout`] implement [`Read`] and\n//! [`ChildStdin`] implements [`Write`]:\n//!\n//! ```no_run\n//! use std::process::{Command, Stdio};\n//! use std::io::Write;\n//!\n//! let mut child = Command::new(\"/bin/cat\")\n//!     .stdin(Stdio::piped())\n//!     .stdout(Stdio::piped())\n//!     .spawn()\n//!     .expect(\"failed to execute child\");\n//!\n//! // If the child process fills its stdout buffer, it may end up\n//! // waiting until the parent reads the stdout, and not be able to\n//! // read stdin in the meantime, causing a deadlock.\n//! // Writing from another thread ensures that stdout is being read\n//! // at the same time, avoiding the problem.\n//! let mut stdin = child.stdin.take().expect(\"failed to get stdin\");\n//! std::thread::spawn(move || {\n//!     stdin.write_all(b\"test\").expect(\"failed to write to stdin\");\n//! });\n//!\n//! let output = child\n//!     .wait_with_output()\n//!     .expect(\"failed to wait on child\");\n//!\n//! assert_eq!(b\"test\", output.stdout.as_slice());\n//! ```\n//!\n//! # Windows argument splitting\n//!\n//! On Unix systems arguments are passed to a new process as an array of strings,\n//! but on Windows arguments are passed as a single commandline string and it is\n//! up to the child process to parse it into an array. Therefore the parent and\n//! child processes must agree on how the commandline string is encoded.\n//!\n//! Most programs use the standard C run-time `argv`, which in practice results\n//! in consistent argument handling. However some programs have their own way of\n//! parsing the commandline string. In these cases using [`arg`] or [`args`] may\n//! result in the child process seeing a different array of arguments then the\n//! parent process intended.\n//!\n//! Two ways of mitigating this are:\n//!\n//! * Validate untrusted input so that only a safe subset is allowed.\n//! * Use [`raw_arg`] to build a custom commandline. This bypasses the escaping\n//!   rules used by [`arg`] so should be used with due caution.\n//!\n//! `cmd.exe` and `.bat` files use non-standard argument parsing and are especially\n//! vulnerable to malicious input as they may be used to run arbitrary shell\n//! commands. Untrusted arguments should be restricted as much as possible.\n//! For examples on handling this see [`raw_arg`].\n//!\n//! ### Batch file special handling\n//!\n//! On Windows, `Command` uses the Windows API function [`CreateProcessW`] to\n//! spawn new processes. An undocumented feature of this function is that\n//! when given a `.bat` file as the application to run, it will automatically\n//! convert that into running `cmd.exe /c` with the batch file as the next argument.\n//!\n//! For historical reasons Rust currently preserves this behaviour when using\n//! [`Command::new`], and escapes the arguments according to `cmd.exe` rules.\n//! Due to the complexity of `cmd.exe` argument handling, it might not be\n//! possible to safely escape some special characters, and using them will result\n//! in an error being returned at process spawn. The set of unescapeable\n//! special characters might change between releases.\n//!\n//! Also note that running batch scripts in this way may be removed in the\n//! future and so should not be relied upon.\n//!\n//! [`spawn`]: Command::spawn\n//! [`output`]: Command::output\n//!\n//! [`stdout`]: Command::stdout\n//! [`stdin`]: Command::stdin\n//! [`stderr`]: Command::stderr\n//!\n//! [`Write`]: io::Write\n//! [`Read`]: io::Read\n//!\n//! [`arg`]: Command::arg\n//! [`args`]: Command::args\n//! [`raw_arg`]: crate::os::windows::process::CommandExt::raw_arg\n//!\n//! [`CreateProcessW`]: https://learn.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-createprocessw\n\n</span><span class=\"attr\">#![stable(feature = <span class=\"string\">\"process\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n#![deny(unsafe_op_in_unsafe_fn)]\n\n#[cfg(all(test, not(any(target_os = <span class=\"string\">\"emscripten\"</span>, target_env = <span class=\"string\">\"sgx\"</span>, target_os = <span class=\"string\">\"xous\"</span>))))]\n</span><span class=\"kw\">mod </span>tests;\n\n<span class=\"kw\">use </span><span class=\"kw\">crate</span>::io::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">use </span><span class=\"kw\">crate</span>::convert::Infallible;\n<span class=\"kw\">use </span><span class=\"kw\">crate</span>::ffi::OsStr;\n<span class=\"kw\">use </span><span class=\"kw\">crate</span>::fmt;\n<span class=\"kw\">use </span><span class=\"kw\">crate</span>::fs;\n<span class=\"kw\">use </span><span class=\"kw\">crate</span>::io::{<span class=\"self\">self</span>, BorrowedCursor, IoSlice, IoSliceMut};\n<span class=\"kw\">use </span><span class=\"kw\">crate</span>::num::NonZero;\n<span class=\"kw\">use </span><span class=\"kw\">crate</span>::path::Path;\n<span class=\"kw\">use </span><span class=\"kw\">crate</span>::str;\n<span class=\"kw\">use </span><span class=\"kw\">crate</span>::sys::pipe::{read2, AnonPipe};\n<span class=\"kw\">use </span><span class=\"kw\">crate</span>::sys::process <span class=\"kw\">as </span>imp;\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"command_access\"</span>, since = <span class=\"string\">\"1.57.0\"</span>)]\n</span><span class=\"kw\">pub use </span><span class=\"kw\">crate</span>::sys_common::process::CommandEnvs;\n<span class=\"kw\">use </span><span class=\"kw\">crate</span>::sys_common::{AsInner, AsInnerMut, FromInner, IntoInner};\n\n<span class=\"doccomment\">/// Representation of a running or exited child process.\n///\n/// This structure is used to represent and manage child processes. A child\n/// process is created via the [`Command`] struct, which configures the\n/// spawning process and can itself be constructed using a builder-style\n/// interface.\n///\n/// There is no implementation of [`Drop`] for child processes,\n/// so if you do not ensure the `Child` has exited then it will continue to\n/// run, even after the `Child` handle to the child process has gone out of\n/// scope.\n///\n/// Calling [`wait`] (or other functions that wrap around it) will make\n/// the parent process wait until the child has actually exited before\n/// continuing.\n///\n/// # Warning\n///\n/// On some systems, calling [`wait`] or similar is necessary for the OS to\n/// release resources. A process that terminated but has not been waited on is\n/// still around as a \"zombie\". Leaving too many zombies around may exhaust\n/// global resources (for example process IDs).\n///\n/// The standard library does *not* automatically wait on child processes (not\n/// even if the `Child` is dropped), it is up to the application developer to do\n/// so. As a consequence, dropping `Child` handles without waiting on them first\n/// is not recommended in long-running applications.\n///\n/// # Examples\n///\n/// ```should_panic\n/// use std::process::Command;\n///\n/// let mut child = Command::new(\"/bin/cat\")\n///     .arg(\"file.txt\")\n///     .spawn()\n///     .expect(\"failed to execute child\");\n///\n/// let ecode = child.wait().expect(\"failed to wait on child\");\n///\n/// assert!(ecode.success());\n/// ```\n///\n/// [`wait`]: Child::wait\n</span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"process\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">pub struct </span>Child {\n    <span class=\"kw\">pub</span>(<span class=\"kw\">crate</span>) handle: imp::Process,\n\n    <span class=\"doccomment\">/// The handle for writing to the child's standard input (stdin), if it\n    /// has been captured. You might find it helpful to do\n    ///\n    /// ```ignore (incomplete)\n    /// let stdin = child.stdin.take().unwrap();\n    /// ```\n    ///\n    /// to avoid partially moving the `child` and thus blocking yourself from calling\n    /// functions on `child` while using `stdin`.\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"process\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">pub </span>stdin: <span class=\"prelude-ty\">Option</span>&lt;ChildStdin&gt;,\n\n    <span class=\"doccomment\">/// The handle for reading from the child's standard output (stdout), if it\n    /// has been captured. You might find it helpful to do\n    ///\n    /// ```ignore (incomplete)\n    /// let stdout = child.stdout.take().unwrap();\n    /// ```\n    ///\n    /// to avoid partially moving the `child` and thus blocking yourself from calling\n    /// functions on `child` while using `stdout`.\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"process\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">pub </span>stdout: <span class=\"prelude-ty\">Option</span>&lt;ChildStdout&gt;,\n\n    <span class=\"doccomment\">/// The handle for reading from the child's standard error (stderr), if it\n    /// has been captured. You might find it helpful to do\n    ///\n    /// ```ignore (incomplete)\n    /// let stderr = child.stderr.take().unwrap();\n    /// ```\n    ///\n    /// to avoid partially moving the `child` and thus blocking yourself from calling\n    /// functions on `child` while using `stderr`.\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"process\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">pub </span>stderr: <span class=\"prelude-ty\">Option</span>&lt;ChildStderr&gt;,\n}\n\n<span class=\"doccomment\">/// Allows extension traits within `std`.\n</span><span class=\"attr\">#[unstable(feature = <span class=\"string\">\"sealed\"</span>, issue = <span class=\"string\">\"none\"</span>)]\n</span><span class=\"kw\">impl </span><span class=\"kw\">crate</span>::sealed::Sealed <span class=\"kw\">for </span>Child {}\n\n<span class=\"kw\">impl </span>AsInner&lt;imp::Process&gt; <span class=\"kw\">for </span>Child {\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>as_inner(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; <span class=\"kw-2\">&amp;</span>imp::Process {\n        <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.handle\n    }\n}\n\n<span class=\"kw\">impl </span>FromInner&lt;(imp::Process, imp::StdioPipes)&gt; <span class=\"kw\">for </span>Child {\n    <span class=\"kw\">fn </span>from_inner((handle, io): (imp::Process, imp::StdioPipes)) -&gt; Child {\n        Child {\n            handle,\n            stdin: io.stdin.map(ChildStdin::from_inner),\n            stdout: io.stdout.map(ChildStdout::from_inner),\n            stderr: io.stderr.map(ChildStderr::from_inner),\n        }\n    }\n}\n\n<span class=\"kw\">impl </span>IntoInner&lt;imp::Process&gt; <span class=\"kw\">for </span>Child {\n    <span class=\"kw\">fn </span>into_inner(<span class=\"self\">self</span>) -&gt; imp::Process {\n        <span class=\"self\">self</span>.handle\n    }\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"std_debug\"</span>, since = <span class=\"string\">\"1.16.0\"</span>)]\n</span><span class=\"kw\">impl </span>fmt::Debug <span class=\"kw\">for </span>Child {\n    <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, f: <span class=\"kw-2\">&amp;mut </span>fmt::Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; fmt::Result {\n        f.debug_struct(<span class=\"string\">\"Child\"</span>)\n            .field(<span class=\"string\">\"stdin\"</span>, <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.stdin)\n            .field(<span class=\"string\">\"stdout\"</span>, <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.stdout)\n            .field(<span class=\"string\">\"stderr\"</span>, <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.stderr)\n            .finish_non_exhaustive()\n    }\n}\n\n<span class=\"doccomment\">/// A handle to a child process's standard input (stdin).\n///\n/// This struct is used in the [`stdin`] field on [`Child`].\n///\n/// When an instance of `ChildStdin` is [dropped], the `ChildStdin`'s underlying\n/// file handle will be closed. If the child process was blocked on input prior\n/// to being dropped, it will become unblocked after dropping.\n///\n/// [`stdin`]: Child::stdin\n/// [dropped]: Drop\n</span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"process\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">pub struct </span>ChildStdin {\n    inner: AnonPipe,\n}\n\n<span class=\"comment\">// In addition to the `impl`s here, `ChildStdin` also has `impl`s for\n// `AsFd`/`From&lt;OwnedFd&gt;`/`Into&lt;OwnedFd&gt;` and\n// `AsRawFd`/`IntoRawFd`/`FromRawFd`, on Unix and WASI, and\n// `AsHandle`/`From&lt;OwnedHandle&gt;`/`Into&lt;OwnedHandle&gt;` and\n// `AsRawHandle`/`IntoRawHandle`/`FromRawHandle` on Windows.\n\n</span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"process\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl </span>Write <span class=\"kw\">for </span>ChildStdin {\n    <span class=\"kw\">fn </span>write(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, buf: <span class=\"kw-2\">&amp;</span>[u8]) -&gt; io::Result&lt;usize&gt; {\n        (<span class=\"kw-2\">&amp;*</span><span class=\"self\">self</span>).write(buf)\n    }\n\n    <span class=\"kw\">fn </span>write_vectored(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, bufs: <span class=\"kw-2\">&amp;</span>[IoSlice&lt;<span class=\"lifetime\">'_</span>&gt;]) -&gt; io::Result&lt;usize&gt; {\n        (<span class=\"kw-2\">&amp;*</span><span class=\"self\">self</span>).write_vectored(bufs)\n    }\n\n    <span class=\"kw\">fn </span>is_write_vectored(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; bool {\n        io::Write::is_write_vectored(&amp;&amp;<span class=\"kw-2\">*</span><span class=\"self\">self</span>)\n    }\n\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>flush(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) -&gt; io::Result&lt;()&gt; {\n        (<span class=\"kw-2\">&amp;*</span><span class=\"self\">self</span>).flush()\n    }\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"write_mt\"</span>, since = <span class=\"string\">\"1.48.0\"</span>)]\n</span><span class=\"kw\">impl </span>Write <span class=\"kw\">for </span><span class=\"kw-2\">&amp;</span>ChildStdin {\n    <span class=\"kw\">fn </span>write(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, buf: <span class=\"kw-2\">&amp;</span>[u8]) -&gt; io::Result&lt;usize&gt; {\n        <span class=\"self\">self</span>.inner.write(buf)\n    }\n\n    <span class=\"kw\">fn </span>write_vectored(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, bufs: <span class=\"kw-2\">&amp;</span>[IoSlice&lt;<span class=\"lifetime\">'_</span>&gt;]) -&gt; io::Result&lt;usize&gt; {\n        <span class=\"self\">self</span>.inner.write_vectored(bufs)\n    }\n\n    <span class=\"kw\">fn </span>is_write_vectored(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; bool {\n        <span class=\"self\">self</span>.inner.is_write_vectored()\n    }\n\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>flush(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) -&gt; io::Result&lt;()&gt; {\n        <span class=\"prelude-val\">Ok</span>(())\n    }\n}\n\n<span class=\"kw\">impl </span>AsInner&lt;AnonPipe&gt; <span class=\"kw\">for </span>ChildStdin {\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>as_inner(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; <span class=\"kw-2\">&amp;</span>AnonPipe {\n        <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.inner\n    }\n}\n\n<span class=\"kw\">impl </span>IntoInner&lt;AnonPipe&gt; <span class=\"kw\">for </span>ChildStdin {\n    <span class=\"kw\">fn </span>into_inner(<span class=\"self\">self</span>) -&gt; AnonPipe {\n        <span class=\"self\">self</span>.inner\n    }\n}\n\n<span class=\"kw\">impl </span>FromInner&lt;AnonPipe&gt; <span class=\"kw\">for </span>ChildStdin {\n    <span class=\"kw\">fn </span>from_inner(pipe: AnonPipe) -&gt; ChildStdin {\n        ChildStdin { inner: pipe }\n    }\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"std_debug\"</span>, since = <span class=\"string\">\"1.16.0\"</span>)]\n</span><span class=\"kw\">impl </span>fmt::Debug <span class=\"kw\">for </span>ChildStdin {\n    <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, f: <span class=\"kw-2\">&amp;mut </span>fmt::Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; fmt::Result {\n        f.debug_struct(<span class=\"string\">\"ChildStdin\"</span>).finish_non_exhaustive()\n    }\n}\n\n<span class=\"doccomment\">/// A handle to a child process's standard output (stdout).\n///\n/// This struct is used in the [`stdout`] field on [`Child`].\n///\n/// When an instance of `ChildStdout` is [dropped], the `ChildStdout`'s\n/// underlying file handle will be closed.\n///\n/// [`stdout`]: Child::stdout\n/// [dropped]: Drop\n</span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"process\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">pub struct </span>ChildStdout {\n    inner: AnonPipe,\n}\n\n<span class=\"comment\">// In addition to the `impl`s here, `ChildStdout` also has `impl`s for\n// `AsFd`/`From&lt;OwnedFd&gt;`/`Into&lt;OwnedFd&gt;` and\n// `AsRawFd`/`IntoRawFd`/`FromRawFd`, on Unix and WASI, and\n// `AsHandle`/`From&lt;OwnedHandle&gt;`/`Into&lt;OwnedHandle&gt;` and\n// `AsRawHandle`/`IntoRawHandle`/`FromRawHandle` on Windows.\n\n</span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"process\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl </span>Read <span class=\"kw\">for </span>ChildStdout {\n    <span class=\"kw\">fn </span>read(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, buf: <span class=\"kw-2\">&amp;mut </span>[u8]) -&gt; io::Result&lt;usize&gt; {\n        <span class=\"self\">self</span>.inner.read(buf)\n    }\n\n    <span class=\"kw\">fn </span>read_buf(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, buf: BorrowedCursor&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; io::Result&lt;()&gt; {\n        <span class=\"self\">self</span>.inner.read_buf(buf)\n    }\n\n    <span class=\"kw\">fn </span>read_vectored(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, bufs: <span class=\"kw-2\">&amp;mut </span>[IoSliceMut&lt;<span class=\"lifetime\">'_</span>&gt;]) -&gt; io::Result&lt;usize&gt; {\n        <span class=\"self\">self</span>.inner.read_vectored(bufs)\n    }\n\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>is_read_vectored(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; bool {\n        <span class=\"self\">self</span>.inner.is_read_vectored()\n    }\n\n    <span class=\"kw\">fn </span>read_to_end(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, buf: <span class=\"kw-2\">&amp;mut </span>Vec&lt;u8&gt;) -&gt; io::Result&lt;usize&gt; {\n        <span class=\"self\">self</span>.inner.read_to_end(buf)\n    }\n}\n\n<span class=\"kw\">impl </span>AsInner&lt;AnonPipe&gt; <span class=\"kw\">for </span>ChildStdout {\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>as_inner(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; <span class=\"kw-2\">&amp;</span>AnonPipe {\n        <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.inner\n    }\n}\n\n<span class=\"kw\">impl </span>IntoInner&lt;AnonPipe&gt; <span class=\"kw\">for </span>ChildStdout {\n    <span class=\"kw\">fn </span>into_inner(<span class=\"self\">self</span>) -&gt; AnonPipe {\n        <span class=\"self\">self</span>.inner\n    }\n}\n\n<span class=\"kw\">impl </span>FromInner&lt;AnonPipe&gt; <span class=\"kw\">for </span>ChildStdout {\n    <span class=\"kw\">fn </span>from_inner(pipe: AnonPipe) -&gt; ChildStdout {\n        ChildStdout { inner: pipe }\n    }\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"std_debug\"</span>, since = <span class=\"string\">\"1.16.0\"</span>)]\n</span><span class=\"kw\">impl </span>fmt::Debug <span class=\"kw\">for </span>ChildStdout {\n    <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, f: <span class=\"kw-2\">&amp;mut </span>fmt::Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; fmt::Result {\n        f.debug_struct(<span class=\"string\">\"ChildStdout\"</span>).finish_non_exhaustive()\n    }\n}\n\n<span class=\"doccomment\">/// A handle to a child process's stderr.\n///\n/// This struct is used in the [`stderr`] field on [`Child`].\n///\n/// When an instance of `ChildStderr` is [dropped], the `ChildStderr`'s\n/// underlying file handle will be closed.\n///\n/// [`stderr`]: Child::stderr\n/// [dropped]: Drop\n</span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"process\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">pub struct </span>ChildStderr {\n    inner: AnonPipe,\n}\n\n<span class=\"comment\">// In addition to the `impl`s here, `ChildStderr` also has `impl`s for\n// `AsFd`/`From&lt;OwnedFd&gt;`/`Into&lt;OwnedFd&gt;` and\n// `AsRawFd`/`IntoRawFd`/`FromRawFd`, on Unix and WASI, and\n// `AsHandle`/`From&lt;OwnedHandle&gt;`/`Into&lt;OwnedHandle&gt;` and\n// `AsRawHandle`/`IntoRawHandle`/`FromRawHandle` on Windows.\n\n</span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"process\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl </span>Read <span class=\"kw\">for </span>ChildStderr {\n    <span class=\"kw\">fn </span>read(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, buf: <span class=\"kw-2\">&amp;mut </span>[u8]) -&gt; io::Result&lt;usize&gt; {\n        <span class=\"self\">self</span>.inner.read(buf)\n    }\n\n    <span class=\"kw\">fn </span>read_buf(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, buf: BorrowedCursor&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; io::Result&lt;()&gt; {\n        <span class=\"self\">self</span>.inner.read_buf(buf)\n    }\n\n    <span class=\"kw\">fn </span>read_vectored(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, bufs: <span class=\"kw-2\">&amp;mut </span>[IoSliceMut&lt;<span class=\"lifetime\">'_</span>&gt;]) -&gt; io::Result&lt;usize&gt; {\n        <span class=\"self\">self</span>.inner.read_vectored(bufs)\n    }\n\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>is_read_vectored(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; bool {\n        <span class=\"self\">self</span>.inner.is_read_vectored()\n    }\n\n    <span class=\"kw\">fn </span>read_to_end(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, buf: <span class=\"kw-2\">&amp;mut </span>Vec&lt;u8&gt;) -&gt; io::Result&lt;usize&gt; {\n        <span class=\"self\">self</span>.inner.read_to_end(buf)\n    }\n}\n\n<span class=\"kw\">impl </span>AsInner&lt;AnonPipe&gt; <span class=\"kw\">for </span>ChildStderr {\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>as_inner(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; <span class=\"kw-2\">&amp;</span>AnonPipe {\n        <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.inner\n    }\n}\n\n<span class=\"kw\">impl </span>IntoInner&lt;AnonPipe&gt; <span class=\"kw\">for </span>ChildStderr {\n    <span class=\"kw\">fn </span>into_inner(<span class=\"self\">self</span>) -&gt; AnonPipe {\n        <span class=\"self\">self</span>.inner\n    }\n}\n\n<span class=\"kw\">impl </span>FromInner&lt;AnonPipe&gt; <span class=\"kw\">for </span>ChildStderr {\n    <span class=\"kw\">fn </span>from_inner(pipe: AnonPipe) -&gt; ChildStderr {\n        ChildStderr { inner: pipe }\n    }\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"std_debug\"</span>, since = <span class=\"string\">\"1.16.0\"</span>)]\n</span><span class=\"kw\">impl </span>fmt::Debug <span class=\"kw\">for </span>ChildStderr {\n    <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, f: <span class=\"kw-2\">&amp;mut </span>fmt::Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; fmt::Result {\n        f.debug_struct(<span class=\"string\">\"ChildStderr\"</span>).finish_non_exhaustive()\n    }\n}\n\n<span class=\"doccomment\">/// A process builder, providing fine-grained control\n/// over how a new process should be spawned.\n///\n/// A default configuration can be\n/// generated using `Command::new(program)`, where `program` gives a path to the\n/// program to be executed. Additional builder methods allow the configuration\n/// to be changed (for example, by adding arguments) prior to spawning:\n///\n/// ```\n/// use std::process::Command;\n///\n/// let output = if cfg!(target_os = \"windows\") {\n///     Command::new(\"cmd\")\n///         .args([\"/C\", \"echo hello\"])\n///         .output()\n///         .expect(\"failed to execute process\")\n/// } else {\n///     Command::new(\"sh\")\n///         .arg(\"-c\")\n///         .arg(\"echo hello\")\n///         .output()\n///         .expect(\"failed to execute process\")\n/// };\n///\n/// let hello = output.stdout;\n/// ```\n///\n/// `Command` can be reused to spawn multiple processes. The builder methods\n/// change the command without needing to immediately spawn the process.\n///\n/// ```no_run\n/// use std::process::Command;\n///\n/// let mut echo_hello = Command::new(\"sh\");\n/// echo_hello.arg(\"-c\").arg(\"echo hello\");\n/// let hello_1 = echo_hello.output().expect(\"failed to execute process\");\n/// let hello_2 = echo_hello.output().expect(\"failed to execute process\");\n/// ```\n///\n/// Similarly, you can call builder methods after spawning a process and then\n/// spawn a new process with the modified settings.\n///\n/// ```no_run\n/// use std::process::Command;\n///\n/// let mut list_dir = Command::new(\"ls\");\n///\n/// // Execute `ls` in the current directory of the program.\n/// list_dir.status().expect(\"process failed to execute\");\n///\n/// println!();\n///\n/// // Change `ls` to execute in the root directory.\n/// list_dir.current_dir(\"/\");\n///\n/// // And then execute `ls` again but in the root directory.\n/// list_dir.status().expect(\"process failed to execute\");\n/// ```\n</span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"process\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n#[cfg_attr(not(test), rustc_diagnostic_item = <span class=\"string\">\"Command\"</span>)]\n</span><span class=\"kw\">pub struct </span>Command {\n    inner: imp::Command,\n}\n\n<span class=\"doccomment\">/// Allows extension traits within `std`.\n</span><span class=\"attr\">#[unstable(feature = <span class=\"string\">\"sealed\"</span>, issue = <span class=\"string\">\"none\"</span>)]\n</span><span class=\"kw\">impl </span><span class=\"kw\">crate</span>::sealed::Sealed <span class=\"kw\">for </span>Command {}\n\n<span class=\"kw\">impl </span>Command {\n    <span class=\"doccomment\">/// Constructs a new `Command` for launching the program at\n    /// path `program`, with the following default configuration:\n    ///\n    /// * No arguments to the program\n    /// * Inherit the current process's environment\n    /// * Inherit the current process's working directory\n    /// * Inherit stdin/stdout/stderr for [`spawn`] or [`status`], but create pipes for [`output`]\n    ///\n    /// [`spawn`]: Self::spawn\n    /// [`status`]: Self::status\n    /// [`output`]: Self::output\n    ///\n    /// Builder methods are provided to change these defaults and\n    /// otherwise configure the process.\n    ///\n    /// If `program` is not an absolute path, the `PATH` will be searched in\n    /// an OS-defined way.\n    ///\n    /// The search path to be used may be controlled by setting the\n    /// `PATH` environment variable on the Command,\n    /// but this has some implementation limitations on Windows\n    /// (see issue #37519).\n    ///\n    /// # Platform-specific behavior\n    ///\n    /// Note on Windows: For executable files with the .exe extension,\n    /// it can be omitted when specifying the program for this Command.\n    /// However, if the file has a different extension,\n    /// a filename including the extension needs to be provided,\n    /// otherwise the file won't be found.\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```no_run\n    /// use std::process::Command;\n    ///\n    /// Command::new(\"sh\")\n    ///     .spawn()\n    ///     .expect(\"sh command failed to start\");\n    /// ```\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"process\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>new&lt;S: AsRef&lt;OsStr&gt;&gt;(program: S) -&gt; Command {\n        Command { inner: imp::Command::new(program.as_ref()) }\n    }\n\n    <span class=\"doccomment\">/// Adds an argument to pass to the program.\n    ///\n    /// Only one argument can be passed per use. So instead of:\n    ///\n    /// ```no_run\n    /// # std::process::Command::new(\"sh\")\n    /// .arg(\"-C /path/to/repo\")\n    /// # ;\n    /// ```\n    ///\n    /// usage would be:\n    ///\n    /// ```no_run\n    /// # std::process::Command::new(\"sh\")\n    /// .arg(\"-C\")\n    /// .arg(\"/path/to/repo\")\n    /// # ;\n    /// ```\n    ///\n    /// To pass multiple arguments see [`args`].\n    ///\n    /// [`args`]: Command::args\n    ///\n    /// Note that the argument is not passed through a shell, but given\n    /// literally to the program. This means that shell syntax like quotes,\n    /// escaped characters, word splitting, glob patterns, variable substitution,\n    /// etc. have no effect.\n    ///\n    /// &lt;div class=\"warning\"&gt;\n    ///\n    /// On Windows, use caution with untrusted inputs. Most applications use the\n    /// standard convention for decoding arguments passed to them. These are safe to\n    /// use with `arg`. However, some applications such as `cmd.exe` and `.bat` files\n    /// use a non-standard way of decoding arguments. They are therefore vulnerable\n    /// to malicious input.\n    ///\n    /// In the case of `cmd.exe` this is especially important because a malicious\n    /// argument can potentially run arbitrary shell commands.\n    ///\n    /// See [Windows argument splitting][windows-args] for more details\n    /// or [`raw_arg`] for manually implementing non-standard argument encoding.\n    ///\n    /// [`raw_arg`]: crate::os::windows::process::CommandExt::raw_arg\n    /// [windows-args]: crate::process#windows-argument-splitting\n    ///\n    /// &lt;/div&gt;\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```no_run\n    /// use std::process::Command;\n    ///\n    /// Command::new(\"ls\")\n    ///     .arg(\"-l\")\n    ///     .arg(\"-a\")\n    ///     .spawn()\n    ///     .expect(\"ls command failed to start\");\n    /// ```\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"process\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>arg&lt;S: AsRef&lt;OsStr&gt;&gt;(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, arg: S) -&gt; <span class=\"kw-2\">&amp;mut </span>Command {\n        <span class=\"self\">self</span>.inner.arg(arg.as_ref());\n        <span class=\"self\">self\n    </span>}\n\n    <span class=\"doccomment\">/// Adds multiple arguments to pass to the program.\n    ///\n    /// To pass a single argument see [`arg`].\n    ///\n    /// [`arg`]: Command::arg\n    ///\n    /// Note that the arguments are not passed through a shell, but given\n    /// literally to the program. This means that shell syntax like quotes,\n    /// escaped characters, word splitting, glob patterns, variable substitution, etc.\n    /// have no effect.\n    ///\n    /// &lt;div class=\"warning\"&gt;\n    ///\n    /// On Windows, use caution with untrusted inputs. Most applications use the\n    /// standard convention for decoding arguments passed to them. These are safe to\n    /// use with `arg`. However, some applications such as `cmd.exe` and `.bat` files\n    /// use a non-standard way of decoding arguments. They are therefore vulnerable\n    /// to malicious input.\n    ///\n    /// In the case of `cmd.exe` this is especially important because a malicious\n    /// argument can potentially run arbitrary shell commands.\n    ///\n    /// See [Windows argument splitting][windows-args] for more details\n    /// or [`raw_arg`] for manually implementing non-standard argument encoding.\n    ///\n    /// [`raw_arg`]: crate::os::windows::process::CommandExt::raw_arg\n    /// [windows-args]: crate::process#windows-argument-splitting\n    ///\n    /// &lt;/div&gt;\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```no_run\n    /// use std::process::Command;\n    ///\n    /// Command::new(\"ls\")\n    ///     .args([\"-l\", \"-a\"])\n    ///     .spawn()\n    ///     .expect(\"ls command failed to start\");\n    /// ```\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"process\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>args&lt;I, S&gt;(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, args: I) -&gt; <span class=\"kw-2\">&amp;mut </span>Command\n    <span class=\"kw\">where\n        </span>I: IntoIterator&lt;Item = S&gt;,\n        S: AsRef&lt;OsStr&gt;,\n    {\n        <span class=\"kw\">for </span>arg <span class=\"kw\">in </span>args {\n            <span class=\"self\">self</span>.arg(arg.as_ref());\n        }\n        <span class=\"self\">self\n    </span>}\n\n    <span class=\"doccomment\">/// Inserts or updates an explicit environment variable mapping.\n    ///\n    /// This method allows you to add an environment variable mapping to the spawned process or\n    /// overwrite a previously set value. You can use [`Command::envs`] to set multiple environment\n    /// variables simultaneously.\n    ///\n    /// Child processes will inherit environment variables from their parent process by default.\n    /// Environment variables explicitly set using [`Command::env`] take precedence over inherited\n    /// variables. You can disable environment variable inheritance entirely using\n    /// [`Command::env_clear`] or for a single key using [`Command::env_remove`].\n    ///\n    /// Note that environment variable names are case-insensitive (but\n    /// case-preserving) on Windows and case-sensitive on all other platforms.\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```no_run\n    /// use std::process::Command;\n    ///\n    /// Command::new(\"ls\")\n    ///     .env(\"PATH\", \"/bin\")\n    ///     .spawn()\n    ///     .expect(\"ls command failed to start\");\n    /// ```\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"process\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>env&lt;K, V&gt;(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, key: K, val: V) -&gt; <span class=\"kw-2\">&amp;mut </span>Command\n    <span class=\"kw\">where\n        </span>K: AsRef&lt;OsStr&gt;,\n        V: AsRef&lt;OsStr&gt;,\n    {\n        <span class=\"self\">self</span>.inner.env_mut().set(key.as_ref(), val.as_ref());\n        <span class=\"self\">self\n    </span>}\n\n    <span class=\"doccomment\">/// Inserts or updates multiple explicit environment variable mappings.\n    ///\n    /// This method allows you to add multiple environment variable mappings to the spawned process\n    /// or overwrite previously set values. You can use [`Command::env`] to set a single environment\n    /// variable.\n    ///\n    /// Child processes will inherit environment variables from their parent process by default.\n    /// Environment variables explicitly set using [`Command::envs`] take precedence over inherited\n    /// variables. You can disable environment variable inheritance entirely using\n    /// [`Command::env_clear`] or for a single key using [`Command::env_remove`].\n    ///\n    /// Note that environment variable names are case-insensitive (but case-preserving) on Windows\n    /// and case-sensitive on all other platforms.\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```no_run\n    /// use std::process::{Command, Stdio};\n    /// use std::env;\n    /// use std::collections::HashMap;\n    ///\n    /// let filtered_env : HashMap&lt;String, String&gt; =\n    ///     env::vars().filter(|&amp;(ref k, _)|\n    ///         k == \"TERM\" || k == \"TZ\" || k == \"LANG\" || k == \"PATH\"\n    ///     ).collect();\n    ///\n    /// Command::new(\"printenv\")\n    ///     .stdin(Stdio::null())\n    ///     .stdout(Stdio::inherit())\n    ///     .env_clear()\n    ///     .envs(&amp;filtered_env)\n    ///     .spawn()\n    ///     .expect(\"printenv failed to start\");\n    /// ```\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"command_envs\"</span>, since = <span class=\"string\">\"1.19.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>envs&lt;I, K, V&gt;(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, vars: I) -&gt; <span class=\"kw-2\">&amp;mut </span>Command\n    <span class=\"kw\">where\n        </span>I: IntoIterator&lt;Item = (K, V)&gt;,\n        K: AsRef&lt;OsStr&gt;,\n        V: AsRef&lt;OsStr&gt;,\n    {\n        <span class=\"kw\">for </span>(<span class=\"kw-2\">ref </span>key, <span class=\"kw-2\">ref </span>val) <span class=\"kw\">in </span>vars {\n            <span class=\"self\">self</span>.inner.env_mut().set(key.as_ref(), val.as_ref());\n        }\n        <span class=\"self\">self\n    </span>}\n\n    <span class=\"doccomment\">/// Removes an explicitly set environment variable and prevents inheriting it from a parent\n    /// process.\n    ///\n    /// This method will remove the explicit value of an environment variable set via\n    /// [`Command::env`] or [`Command::envs`]. In addition, it will prevent the spawned child\n    /// process from inheriting that environment variable from its parent process.\n    ///\n    /// After calling [`Command::env_remove`], the value associated with its key from\n    /// [`Command::get_envs`] will be [`None`].\n    ///\n    /// To clear all explicitly set environment variables and disable all environment variable\n    /// inheritance, you can use [`Command::env_clear`].\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```no_run\n    /// use std::process::Command;\n    ///\n    /// Command::new(\"ls\")\n    ///     .env_remove(\"PATH\")\n    ///     .spawn()\n    ///     .expect(\"ls command failed to start\");\n    /// ```\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"process\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>env_remove&lt;K: AsRef&lt;OsStr&gt;&gt;(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, key: K) -&gt; <span class=\"kw-2\">&amp;mut </span>Command {\n        <span class=\"self\">self</span>.inner.env_mut().remove(key.as_ref());\n        <span class=\"self\">self\n    </span>}\n\n    <span class=\"doccomment\">/// Clears all explicitly set environment variables and prevents inheriting any parent process\n    /// environment variables.\n    ///\n    /// This method will remove all explicitly added environment variables set via [`Command::env`]\n    /// or [`Command::envs`]. In addition, it will prevent the spawned child process from inheriting\n    /// any environment variable from its parent process.\n    ///\n    /// After calling [`Command::env_clear`], the iterator from [`Command::get_envs`] will be\n    /// empty.\n    ///\n    /// You can use [`Command::env_remove`] to clear a single mapping.\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```no_run\n    /// use std::process::Command;\n    ///\n    /// Command::new(\"ls\")\n    ///     .env_clear()\n    ///     .spawn()\n    ///     .expect(\"ls command failed to start\");\n    /// ```\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"process\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>env_clear(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) -&gt; <span class=\"kw-2\">&amp;mut </span>Command {\n        <span class=\"self\">self</span>.inner.env_mut().clear();\n        <span class=\"self\">self\n    </span>}\n\n    <span class=\"doccomment\">/// Sets the working directory for the child process.\n    ///\n    /// # Platform-specific behavior\n    ///\n    /// If the program path is relative (e.g., `\"./script.sh\"`), it's ambiguous\n    /// whether it should be interpreted relative to the parent's working\n    /// directory or relative to `current_dir`. The behavior in this case is\n    /// platform specific and unstable, and it's recommended to use\n    /// [`canonicalize`] to get an absolute program path instead.\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```no_run\n    /// use std::process::Command;\n    ///\n    /// Command::new(\"ls\")\n    ///     .current_dir(\"/bin\")\n    ///     .spawn()\n    ///     .expect(\"ls command failed to start\");\n    /// ```\n    ///\n    /// [`canonicalize`]: crate::fs::canonicalize\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"process\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>current_dir&lt;P: AsRef&lt;Path&gt;&gt;(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, dir: P) -&gt; <span class=\"kw-2\">&amp;mut </span>Command {\n        <span class=\"self\">self</span>.inner.cwd(dir.as_ref().as_ref());\n        <span class=\"self\">self\n    </span>}\n\n    <span class=\"doccomment\">/// Configuration for the child process's standard input (stdin) handle.\n    ///\n    /// Defaults to [`inherit`] when used with [`spawn`] or [`status`], and\n    /// defaults to [`piped`] when used with [`output`].\n    ///\n    /// [`inherit`]: Stdio::inherit\n    /// [`piped`]: Stdio::piped\n    /// [`spawn`]: Self::spawn\n    /// [`status`]: Self::status\n    /// [`output`]: Self::output\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```no_run\n    /// use std::process::{Command, Stdio};\n    ///\n    /// Command::new(\"ls\")\n    ///     .stdin(Stdio::null())\n    ///     .spawn()\n    ///     .expect(\"ls command failed to start\");\n    /// ```\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"process\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>stdin&lt;T: Into&lt;Stdio&gt;&gt;(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, cfg: T) -&gt; <span class=\"kw-2\">&amp;mut </span>Command {\n        <span class=\"self\">self</span>.inner.stdin(cfg.into().<span class=\"number\">0</span>);\n        <span class=\"self\">self\n    </span>}\n\n    <span class=\"doccomment\">/// Configuration for the child process's standard output (stdout) handle.\n    ///\n    /// Defaults to [`inherit`] when used with [`spawn`] or [`status`], and\n    /// defaults to [`piped`] when used with [`output`].\n    ///\n    /// [`inherit`]: Stdio::inherit\n    /// [`piped`]: Stdio::piped\n    /// [`spawn`]: Self::spawn\n    /// [`status`]: Self::status\n    /// [`output`]: Self::output\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```no_run\n    /// use std::process::{Command, Stdio};\n    ///\n    /// Command::new(\"ls\")\n    ///     .stdout(Stdio::null())\n    ///     .spawn()\n    ///     .expect(\"ls command failed to start\");\n    /// ```\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"process\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>stdout&lt;T: Into&lt;Stdio&gt;&gt;(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, cfg: T) -&gt; <span class=\"kw-2\">&amp;mut </span>Command {\n        <span class=\"self\">self</span>.inner.stdout(cfg.into().<span class=\"number\">0</span>);\n        <span class=\"self\">self\n    </span>}\n\n    <span class=\"doccomment\">/// Configuration for the child process's standard error (stderr) handle.\n    ///\n    /// Defaults to [`inherit`] when used with [`spawn`] or [`status`], and\n    /// defaults to [`piped`] when used with [`output`].\n    ///\n    /// [`inherit`]: Stdio::inherit\n    /// [`piped`]: Stdio::piped\n    /// [`spawn`]: Self::spawn\n    /// [`status`]: Self::status\n    /// [`output`]: Self::output\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```no_run\n    /// use std::process::{Command, Stdio};\n    ///\n    /// Command::new(\"ls\")\n    ///     .stderr(Stdio::null())\n    ///     .spawn()\n    ///     .expect(\"ls command failed to start\");\n    /// ```\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"process\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>stderr&lt;T: Into&lt;Stdio&gt;&gt;(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, cfg: T) -&gt; <span class=\"kw-2\">&amp;mut </span>Command {\n        <span class=\"self\">self</span>.inner.stderr(cfg.into().<span class=\"number\">0</span>);\n        <span class=\"self\">self\n    </span>}\n\n    <span class=\"doccomment\">/// Executes the command as a child process, returning a handle to it.\n    ///\n    /// By default, stdin, stdout and stderr are inherited from the parent.\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```no_run\n    /// use std::process::Command;\n    ///\n    /// Command::new(\"ls\")\n    ///     .spawn()\n    ///     .expect(\"ls command failed to start\");\n    /// ```\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"process\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>spawn(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) -&gt; io::Result&lt;Child&gt; {\n        <span class=\"self\">self</span>.inner.spawn(imp::Stdio::Inherit, <span class=\"bool-val\">true</span>).map(Child::from_inner)\n    }\n\n    <span class=\"doccomment\">/// Executes the command as a child process, waiting for it to finish and\n    /// collecting all of its output.\n    ///\n    /// By default, stdout and stderr are captured (and used to provide the\n    /// resulting output). Stdin is not inherited from the parent and any\n    /// attempt by the child process to read from the stdin stream will result\n    /// in the stream immediately closing.\n    ///\n    /// # Examples\n    ///\n    /// ```should_panic\n    /// use std::process::Command;\n    /// use std::io::{self, Write};\n    /// let output = Command::new(\"/bin/cat\")\n    ///     .arg(\"file.txt\")\n    ///     .output()\n    ///     .expect(\"failed to execute process\");\n    ///\n    /// println!(\"status: {}\", output.status);\n    /// io::stdout().write_all(&amp;output.stdout).unwrap();\n    /// io::stderr().write_all(&amp;output.stderr).unwrap();\n    ///\n    /// assert!(output.status.success());\n    /// ```\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"process\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>output(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) -&gt; io::Result&lt;Output&gt; {\n        <span class=\"kw\">let </span>(status, stdout, stderr) = <span class=\"self\">self</span>.inner.output()<span class=\"question-mark\">?</span>;\n        <span class=\"prelude-val\">Ok</span>(Output { status: ExitStatus(status), stdout, stderr })\n    }\n\n    <span class=\"doccomment\">/// Executes a command as a child process, waiting for it to finish and\n    /// collecting its status.\n    ///\n    /// By default, stdin, stdout and stderr are inherited from the parent.\n    ///\n    /// # Examples\n    ///\n    /// ```should_panic\n    /// use std::process::Command;\n    ///\n    /// let status = Command::new(\"/bin/cat\")\n    ///     .arg(\"file.txt\")\n    ///     .status()\n    ///     .expect(\"failed to execute process\");\n    ///\n    /// println!(\"process finished with: {status}\");\n    ///\n    /// assert!(status.success());\n    /// ```\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"process\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>status(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) -&gt; io::Result&lt;ExitStatus&gt; {\n        <span class=\"self\">self</span>.inner\n            .spawn(imp::Stdio::Inherit, <span class=\"bool-val\">true</span>)\n            .map(Child::from_inner)\n            .and_then(|<span class=\"kw-2\">mut </span>p| p.wait())\n    }\n\n    <span class=\"doccomment\">/// Returns the path to the program that was given to [`Command::new`].\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::process::Command;\n    ///\n    /// let cmd = Command::new(\"echo\");\n    /// assert_eq!(cmd.get_program(), \"echo\");\n    /// ```\n    </span><span class=\"attr\">#[must_use]\n    #[stable(feature = <span class=\"string\">\"command_access\"</span>, since = <span class=\"string\">\"1.57.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>get_program(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; <span class=\"kw-2\">&amp;</span>OsStr {\n        <span class=\"self\">self</span>.inner.get_program()\n    }\n\n    <span class=\"doccomment\">/// Returns an iterator of the arguments that will be passed to the program.\n    ///\n    /// This does not include the path to the program as the first argument;\n    /// it only includes the arguments specified with [`Command::arg`] and\n    /// [`Command::args`].\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::ffi::OsStr;\n    /// use std::process::Command;\n    ///\n    /// let mut cmd = Command::new(\"echo\");\n    /// cmd.arg(\"first\").arg(\"second\");\n    /// let args: Vec&lt;&amp;OsStr&gt; = cmd.get_args().collect();\n    /// assert_eq!(args, &amp;[\"first\", \"second\"]);\n    /// ```\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"command_access\"</span>, since = <span class=\"string\">\"1.57.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>get_args(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; CommandArgs&lt;<span class=\"lifetime\">'_</span>&gt; {\n        CommandArgs { inner: <span class=\"self\">self</span>.inner.get_args() }\n    }\n\n    <span class=\"doccomment\">/// Returns an iterator of the environment variables explicitly set for the child process.\n    ///\n    /// Environment variables explicitly set using [`Command::env`], [`Command::envs`], and\n    /// [`Command::env_remove`] can be retrieved with this method.\n    ///\n    /// Note that this output does not include environment variables inherited from the parent\n    /// process.\n    ///\n    /// Each element is a tuple key/value pair `(&amp;OsStr, Option&lt;&amp;OsStr&gt;)`. A [`None`] value\n    /// indicates its key was explicitly removed via [`Command::env_remove`]. The associated key for\n    /// the [`None`] value will no longer inherit from its parent process.\n    ///\n    /// An empty iterator can indicate that no explicit mappings were added or that\n    /// [`Command::env_clear`] was called. After calling [`Command::env_clear`], the child process\n    /// will not inherit any environment variables from its parent process.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::ffi::OsStr;\n    /// use std::process::Command;\n    ///\n    /// let mut cmd = Command::new(\"ls\");\n    /// cmd.env(\"TERM\", \"dumb\").env_remove(\"TZ\");\n    /// let envs: Vec&lt;(&amp;OsStr, Option&lt;&amp;OsStr&gt;)&gt; = cmd.get_envs().collect();\n    /// assert_eq!(envs, &amp;[\n    ///     (OsStr::new(\"TERM\"), Some(OsStr::new(\"dumb\"))),\n    ///     (OsStr::new(\"TZ\"), None)\n    /// ]);\n    /// ```\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"command_access\"</span>, since = <span class=\"string\">\"1.57.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>get_envs(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; CommandEnvs&lt;<span class=\"lifetime\">'_</span>&gt; {\n        <span class=\"self\">self</span>.inner.get_envs()\n    }\n\n    <span class=\"doccomment\">/// Returns the working directory for the child process.\n    ///\n    /// This returns [`None`] if the working directory will not be changed.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::path::Path;\n    /// use std::process::Command;\n    ///\n    /// let mut cmd = Command::new(\"ls\");\n    /// assert_eq!(cmd.get_current_dir(), None);\n    /// cmd.current_dir(\"/bin\");\n    /// assert_eq!(cmd.get_current_dir(), Some(Path::new(\"/bin\")));\n    /// ```\n    </span><span class=\"attr\">#[must_use]\n    #[stable(feature = <span class=\"string\">\"command_access\"</span>, since = <span class=\"string\">\"1.57.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>get_current_dir(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>Path&gt; {\n        <span class=\"self\">self</span>.inner.get_current_dir()\n    }\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl </span>fmt::Debug <span class=\"kw\">for </span>Command {\n    <span class=\"doccomment\">/// Format the program and arguments of a Command for display. Any\n    /// non-utf8 data is lossily converted using the utf8 replacement\n    /// character.\n    ///\n    /// The default format approximates a shell invocation of the program along with its\n    /// arguments. It does not include most of the other command properties. The output is not guaranteed to work\n    /// (e.g. due to lack of shell-escaping or differences in path resolution).\n    /// On some platforms you can use [the alternate syntax] to show more fields.\n    ///\n    /// Note that the debug implementation is platform-specific.\n    ///\n    /// [the alternate syntax]: fmt#sign0\n    </span><span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, f: <span class=\"kw-2\">&amp;mut </span>fmt::Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; fmt::Result {\n        <span class=\"self\">self</span>.inner.fmt(f)\n    }\n}\n\n<span class=\"kw\">impl </span>AsInner&lt;imp::Command&gt; <span class=\"kw\">for </span>Command {\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>as_inner(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; <span class=\"kw-2\">&amp;</span>imp::Command {\n        <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.inner\n    }\n}\n\n<span class=\"kw\">impl </span>AsInnerMut&lt;imp::Command&gt; <span class=\"kw\">for </span>Command {\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>as_inner_mut(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) -&gt; <span class=\"kw-2\">&amp;mut </span>imp::Command {\n        <span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>.inner\n    }\n}\n\n<span class=\"doccomment\">/// An iterator over the command arguments.\n///\n/// This struct is created by [`Command::get_args`]. See its documentation for\n/// more.\n</span><span class=\"attr\">#[must_use = <span class=\"string\">\"iterators are lazy and do nothing unless consumed\"</span>]\n#[stable(feature = <span class=\"string\">\"command_access\"</span>, since = <span class=\"string\">\"1.57.0\"</span>)]\n#[derive(Debug)]\n</span><span class=\"kw\">pub struct </span>CommandArgs&lt;<span class=\"lifetime\">'a</span>&gt; {\n    inner: imp::CommandArgs&lt;<span class=\"lifetime\">'a</span>&gt;,\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"command_access\"</span>, since = <span class=\"string\">\"1.57.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;<span class=\"lifetime\">'a</span>&gt; Iterator <span class=\"kw\">for </span>CommandArgs&lt;<span class=\"lifetime\">'a</span>&gt; {\n    <span class=\"kw\">type </span>Item = <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>OsStr;\n    <span class=\"kw\">fn </span>next(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>OsStr&gt; {\n        <span class=\"self\">self</span>.inner.next()\n    }\n    <span class=\"kw\">fn </span>size_hint(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; (usize, <span class=\"prelude-ty\">Option</span>&lt;usize&gt;) {\n        <span class=\"self\">self</span>.inner.size_hint()\n    }\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"command_access\"</span>, since = <span class=\"string\">\"1.57.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;<span class=\"lifetime\">'a</span>&gt; ExactSizeIterator <span class=\"kw\">for </span>CommandArgs&lt;<span class=\"lifetime\">'a</span>&gt; {\n    <span class=\"kw\">fn </span>len(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; usize {\n        <span class=\"self\">self</span>.inner.len()\n    }\n    <span class=\"kw\">fn </span>is_empty(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; bool {\n        <span class=\"self\">self</span>.inner.is_empty()\n    }\n}\n\n<span class=\"doccomment\">/// The output of a finished process.\n///\n/// This is returned in a Result by either the [`output`] method of a\n/// [`Command`], or the [`wait_with_output`] method of a [`Child`]\n/// process.\n///\n/// [`output`]: Command::output\n/// [`wait_with_output`]: Child::wait_with_output\n</span><span class=\"attr\">#[derive(PartialEq, Eq, Clone)]\n#[stable(feature = <span class=\"string\">\"process\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">pub struct </span>Output {\n    <span class=\"doccomment\">/// The status (exit code) of the process.\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"process\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">pub </span>status: ExitStatus,\n    <span class=\"doccomment\">/// The data that the process wrote to stdout.\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"process\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">pub </span>stdout: Vec&lt;u8&gt;,\n    <span class=\"doccomment\">/// The data that the process wrote to stderr.\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"process\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">pub </span>stderr: Vec&lt;u8&gt;,\n}\n\n<span class=\"comment\">// If either stderr or stdout are valid utf8 strings it prints the valid\n// strings, otherwise it prints the byte sequence instead\n</span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"process_output_debug\"</span>, since = <span class=\"string\">\"1.7.0\"</span>)]\n</span><span class=\"kw\">impl </span>fmt::Debug <span class=\"kw\">for </span>Output {\n    <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, fmt: <span class=\"kw-2\">&amp;mut </span>fmt::Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; fmt::Result {\n        <span class=\"kw\">let </span>stdout_utf8 = str::from_utf8(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.stdout);\n        <span class=\"kw\">let </span>stdout_debug: <span class=\"kw-2\">&amp;</span><span class=\"kw\">dyn </span>fmt::Debug = <span class=\"kw\">match </span>stdout_utf8 {\n            <span class=\"prelude-val\">Ok</span>(<span class=\"kw-2\">ref </span>str) =&gt; str,\n            <span class=\"prelude-val\">Err</span>(<span class=\"kw\">_</span>) =&gt; <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.stdout,\n        };\n\n        <span class=\"kw\">let </span>stderr_utf8 = str::from_utf8(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.stderr);\n        <span class=\"kw\">let </span>stderr_debug: <span class=\"kw-2\">&amp;</span><span class=\"kw\">dyn </span>fmt::Debug = <span class=\"kw\">match </span>stderr_utf8 {\n            <span class=\"prelude-val\">Ok</span>(<span class=\"kw-2\">ref </span>str) =&gt; str,\n            <span class=\"prelude-val\">Err</span>(<span class=\"kw\">_</span>) =&gt; <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.stderr,\n        };\n\n        fmt.debug_struct(<span class=\"string\">\"Output\"</span>)\n            .field(<span class=\"string\">\"status\"</span>, <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.status)\n            .field(<span class=\"string\">\"stdout\"</span>, stdout_debug)\n            .field(<span class=\"string\">\"stderr\"</span>, stderr_debug)\n            .finish()\n    }\n}\n\n<span class=\"doccomment\">/// Describes what to do with a standard I/O stream for a child process when\n/// passed to the [`stdin`], [`stdout`], and [`stderr`] methods of [`Command`].\n///\n/// [`stdin`]: Command::stdin\n/// [`stdout`]: Command::stdout\n/// [`stderr`]: Command::stderr\n</span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"process\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">pub struct </span>Stdio(imp::Stdio);\n\n<span class=\"kw\">impl </span>Stdio {\n    <span class=\"doccomment\">/// A new pipe should be arranged to connect the parent and child processes.\n    ///\n    /// # Examples\n    ///\n    /// With stdout:\n    ///\n    /// ```no_run\n    /// use std::process::{Command, Stdio};\n    ///\n    /// let output = Command::new(\"echo\")\n    ///     .arg(\"Hello, world!\")\n    ///     .stdout(Stdio::piped())\n    ///     .output()\n    ///     .expect(\"Failed to execute command\");\n    ///\n    /// assert_eq!(String::from_utf8_lossy(&amp;output.stdout), \"Hello, world!\\n\");\n    /// // Nothing echoed to console\n    /// ```\n    ///\n    /// With stdin:\n    ///\n    /// ```no_run\n    /// use std::io::Write;\n    /// use std::process::{Command, Stdio};\n    ///\n    /// let mut child = Command::new(\"rev\")\n    ///     .stdin(Stdio::piped())\n    ///     .stdout(Stdio::piped())\n    ///     .spawn()\n    ///     .expect(\"Failed to spawn child process\");\n    ///\n    /// let mut stdin = child.stdin.take().expect(\"Failed to open stdin\");\n    /// std::thread::spawn(move || {\n    ///     stdin.write_all(\"Hello, world!\".as_bytes()).expect(\"Failed to write to stdin\");\n    /// });\n    ///\n    /// let output = child.wait_with_output().expect(\"Failed to read stdout\");\n    /// assert_eq!(String::from_utf8_lossy(&amp;output.stdout), \"!dlrow ,olleH\");\n    /// ```\n    ///\n    /// Writing more than a pipe buffer's worth of input to stdin without also reading\n    /// stdout and stderr at the same time may cause a deadlock.\n    /// This is an issue when running any program that doesn't guarantee that it reads\n    /// its entire stdin before writing more than a pipe buffer's worth of output.\n    /// The size of a pipe buffer varies on different targets.\n    ///\n    </span><span class=\"attr\">#[must_use]\n    #[stable(feature = <span class=\"string\">\"process\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>piped() -&gt; Stdio {\n        Stdio(imp::Stdio::MakePipe)\n    }\n\n    <span class=\"doccomment\">/// The child inherits from the corresponding parent descriptor.\n    ///\n    /// # Examples\n    ///\n    /// With stdout:\n    ///\n    /// ```no_run\n    /// use std::process::{Command, Stdio};\n    ///\n    /// let output = Command::new(\"echo\")\n    ///     .arg(\"Hello, world!\")\n    ///     .stdout(Stdio::inherit())\n    ///     .output()\n    ///     .expect(\"Failed to execute command\");\n    ///\n    /// assert_eq!(String::from_utf8_lossy(&amp;output.stdout), \"\");\n    /// // \"Hello, world!\" echoed to console\n    /// ```\n    ///\n    /// With stdin:\n    ///\n    /// ```no_run\n    /// use std::process::{Command, Stdio};\n    /// use std::io::{self, Write};\n    ///\n    /// let output = Command::new(\"rev\")\n    ///     .stdin(Stdio::inherit())\n    ///     .stdout(Stdio::piped())\n    ///     .output()\n    ///     .expect(\"Failed to execute command\");\n    ///\n    /// print!(\"You piped in the reverse of: \");\n    /// io::stdout().write_all(&amp;output.stdout).unwrap();\n    /// ```\n    </span><span class=\"attr\">#[must_use]\n    #[stable(feature = <span class=\"string\">\"process\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>inherit() -&gt; Stdio {\n        Stdio(imp::Stdio::Inherit)\n    }\n\n    <span class=\"doccomment\">/// This stream will be ignored. This is the equivalent of attaching the\n    /// stream to `/dev/null`.\n    ///\n    /// # Examples\n    ///\n    /// With stdout:\n    ///\n    /// ```no_run\n    /// use std::process::{Command, Stdio};\n    ///\n    /// let output = Command::new(\"echo\")\n    ///     .arg(\"Hello, world!\")\n    ///     .stdout(Stdio::null())\n    ///     .output()\n    ///     .expect(\"Failed to execute command\");\n    ///\n    /// assert_eq!(String::from_utf8_lossy(&amp;output.stdout), \"\");\n    /// // Nothing echoed to console\n    /// ```\n    ///\n    /// With stdin:\n    ///\n    /// ```no_run\n    /// use std::process::{Command, Stdio};\n    ///\n    /// let output = Command::new(\"rev\")\n    ///     .stdin(Stdio::null())\n    ///     .stdout(Stdio::piped())\n    ///     .output()\n    ///     .expect(\"Failed to execute command\");\n    ///\n    /// assert_eq!(String::from_utf8_lossy(&amp;output.stdout), \"\");\n    /// // Ignores any piped-in input\n    /// ```\n    </span><span class=\"attr\">#[must_use]\n    #[stable(feature = <span class=\"string\">\"process\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>null() -&gt; Stdio {\n        Stdio(imp::Stdio::Null)\n    }\n\n    <span class=\"doccomment\">/// Returns `true` if this requires [`Command`] to create a new pipe.\n    ///\n    /// # Example\n    ///\n    /// ```\n    /// #![feature(stdio_makes_pipe)]\n    /// use std::process::Stdio;\n    ///\n    /// let io = Stdio::piped();\n    /// assert_eq!(io.makes_pipe(), true);\n    /// ```\n    </span><span class=\"attr\">#[unstable(feature = <span class=\"string\">\"stdio_makes_pipe\"</span>, issue = <span class=\"string\">\"98288\"</span>)]\n    </span><span class=\"kw\">pub fn </span>makes_pipe(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; bool {\n        <span class=\"macro\">matches!</span>(<span class=\"self\">self</span>.<span class=\"number\">0</span>, imp::Stdio::MakePipe)\n    }\n}\n\n<span class=\"kw\">impl </span>FromInner&lt;imp::Stdio&gt; <span class=\"kw\">for </span>Stdio {\n    <span class=\"kw\">fn </span>from_inner(inner: imp::Stdio) -&gt; Stdio {\n        Stdio(inner)\n    }\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"std_debug\"</span>, since = <span class=\"string\">\"1.16.0\"</span>)]\n</span><span class=\"kw\">impl </span>fmt::Debug <span class=\"kw\">for </span>Stdio {\n    <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, f: <span class=\"kw-2\">&amp;mut </span>fmt::Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; fmt::Result {\n        f.debug_struct(<span class=\"string\">\"Stdio\"</span>).finish_non_exhaustive()\n    }\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"stdio_from\"</span>, since = <span class=\"string\">\"1.20.0\"</span>)]\n</span><span class=\"kw\">impl </span>From&lt;ChildStdin&gt; <span class=\"kw\">for </span>Stdio {\n    <span class=\"doccomment\">/// Converts a [`ChildStdin`] into a [`Stdio`].\n    ///\n    /// # Examples\n    ///\n    /// `ChildStdin` will be converted to `Stdio` using `Stdio::from` under the hood.\n    ///\n    /// ```rust,no_run\n    /// use std::process::{Command, Stdio};\n    ///\n    /// let reverse = Command::new(\"rev\")\n    ///     .stdin(Stdio::piped())\n    ///     .spawn()\n    ///     .expect(\"failed reverse command\");\n    ///\n    /// let _echo = Command::new(\"echo\")\n    ///     .arg(\"Hello, world!\")\n    ///     .stdout(reverse.stdin.unwrap()) // Converted into a Stdio here\n    ///     .output()\n    ///     .expect(\"failed echo command\");\n    ///\n    /// // \"!dlrow ,olleH\" echoed to console\n    /// ```\n    </span><span class=\"kw\">fn </span>from(child: ChildStdin) -&gt; Stdio {\n        Stdio::from_inner(child.into_inner().into())\n    }\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"stdio_from\"</span>, since = <span class=\"string\">\"1.20.0\"</span>)]\n</span><span class=\"kw\">impl </span>From&lt;ChildStdout&gt; <span class=\"kw\">for </span>Stdio {\n    <span class=\"doccomment\">/// Converts a [`ChildStdout`] into a [`Stdio`].\n    ///\n    /// # Examples\n    ///\n    /// `ChildStdout` will be converted to `Stdio` using `Stdio::from` under the hood.\n    ///\n    /// ```rust,no_run\n    /// use std::process::{Command, Stdio};\n    ///\n    /// let hello = Command::new(\"echo\")\n    ///     .arg(\"Hello, world!\")\n    ///     .stdout(Stdio::piped())\n    ///     .spawn()\n    ///     .expect(\"failed echo command\");\n    ///\n    /// let reverse = Command::new(\"rev\")\n    ///     .stdin(hello.stdout.unwrap())  // Converted into a Stdio here\n    ///     .output()\n    ///     .expect(\"failed reverse command\");\n    ///\n    /// assert_eq!(reverse.stdout, b\"!dlrow ,olleH\\n\");\n    /// ```\n    </span><span class=\"kw\">fn </span>from(child: ChildStdout) -&gt; Stdio {\n        Stdio::from_inner(child.into_inner().into())\n    }\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"stdio_from\"</span>, since = <span class=\"string\">\"1.20.0\"</span>)]\n</span><span class=\"kw\">impl </span>From&lt;ChildStderr&gt; <span class=\"kw\">for </span>Stdio {\n    <span class=\"doccomment\">/// Converts a [`ChildStderr`] into a [`Stdio`].\n    ///\n    /// # Examples\n    ///\n    /// ```rust,no_run\n    /// use std::process::{Command, Stdio};\n    ///\n    /// let reverse = Command::new(\"rev\")\n    ///     .arg(\"non_existing_file.txt\")\n    ///     .stderr(Stdio::piped())\n    ///     .spawn()\n    ///     .expect(\"failed reverse command\");\n    ///\n    /// let cat = Command::new(\"cat\")\n    ///     .arg(\"-\")\n    ///     .stdin(reverse.stderr.unwrap()) // Converted into a Stdio here\n    ///     .output()\n    ///     .expect(\"failed echo command\");\n    ///\n    /// assert_eq!(\n    ///     String::from_utf8_lossy(&amp;cat.stdout),\n    ///     \"rev: cannot open non_existing_file.txt: No such file or directory\\n\"\n    /// );\n    /// ```\n    </span><span class=\"kw\">fn </span>from(child: ChildStderr) -&gt; Stdio {\n        Stdio::from_inner(child.into_inner().into())\n    }\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"stdio_from\"</span>, since = <span class=\"string\">\"1.20.0\"</span>)]\n</span><span class=\"kw\">impl </span>From&lt;fs::File&gt; <span class=\"kw\">for </span>Stdio {\n    <span class=\"doccomment\">/// Converts a [`File`](fs::File) into a [`Stdio`].\n    ///\n    /// # Examples\n    ///\n    /// `File` will be converted to `Stdio` using `Stdio::from` under the hood.\n    ///\n    /// ```rust,no_run\n    /// use std::fs::File;\n    /// use std::process::Command;\n    ///\n    /// // With the `foo.txt` file containing \"Hello, world!\"\n    /// let file = File::open(\"foo.txt\").unwrap();\n    ///\n    /// let reverse = Command::new(\"rev\")\n    ///     .stdin(file)  // Implicit File conversion into a Stdio\n    ///     .output()\n    ///     .expect(\"failed reverse command\");\n    ///\n    /// assert_eq!(reverse.stdout, b\"!dlrow ,olleH\");\n    /// ```\n    </span><span class=\"kw\">fn </span>from(file: fs::File) -&gt; Stdio {\n        Stdio::from_inner(file.into_inner().into())\n    }\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"stdio_from_stdio\"</span>, since = <span class=\"string\">\"1.74.0\"</span>)]\n</span><span class=\"kw\">impl </span>From&lt;io::Stdout&gt; <span class=\"kw\">for </span>Stdio {\n    <span class=\"doccomment\">/// Redirect command stdout/stderr to our stdout\n    ///\n    /// # Examples\n    ///\n    /// ```rust\n    /// #![feature(exit_status_error)]\n    /// use std::io;\n    /// use std::process::Command;\n    ///\n    /// # fn test() -&gt; Result&lt;(), Box&lt;dyn std::error::Error&gt;&gt; {\n    /// let output = Command::new(\"whoami\")\n    </span><span class=\"comment\">// \"whoami\" is a command which exists on both Unix and Windows,\n    // and which succeeds, producing some stdout output but no stderr.\n    </span><span class=\"doccomment\">///     .stdout(io::stdout())\n    ///     .output()?;\n    /// output.status.exit_ok()?;\n    /// assert!(output.stdout.is_empty());\n    /// # Ok(())\n    /// # }\n    /// #\n    /// # if cfg!(unix) {\n    /// #     test().unwrap();\n    /// # }\n    /// ```\n    </span><span class=\"kw\">fn </span>from(inherit: io::Stdout) -&gt; Stdio {\n        Stdio::from_inner(inherit.into())\n    }\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"stdio_from_stdio\"</span>, since = <span class=\"string\">\"1.74.0\"</span>)]\n</span><span class=\"kw\">impl </span>From&lt;io::Stderr&gt; <span class=\"kw\">for </span>Stdio {\n    <span class=\"doccomment\">/// Redirect command stdout/stderr to our stderr\n    ///\n    /// # Examples\n    ///\n    /// ```rust\n    /// #![feature(exit_status_error)]\n    /// use std::io;\n    /// use std::process::Command;\n    ///\n    /// # fn test() -&gt; Result&lt;(), Box&lt;dyn std::error::Error&gt;&gt; {\n    /// let output = Command::new(\"whoami\")\n    ///     .stdout(io::stderr())\n    ///     .output()?;\n    /// output.status.exit_ok()?;\n    /// assert!(output.stdout.is_empty());\n    /// # Ok(())\n    /// # }\n    /// #\n    /// # if cfg!(unix) {\n    /// #     test().unwrap();\n    /// # }\n    /// ```\n    </span><span class=\"kw\">fn </span>from(inherit: io::Stderr) -&gt; Stdio {\n        Stdio::from_inner(inherit.into())\n    }\n}\n\n<span class=\"doccomment\">/// Describes the result of a process after it has terminated.\n///\n/// This `struct` is used to represent the exit status or other termination of a child process.\n/// Child processes are created via the [`Command`] struct and their exit\n/// status is exposed through the [`status`] method, or the [`wait`] method\n/// of a [`Child`] process.\n///\n/// An `ExitStatus` represents every possible disposition of a process.  On Unix this\n/// is the **wait status**.  It is *not* simply an *exit status* (a value passed to `exit`).\n///\n/// For proper error reporting of failed processes, print the value of `ExitStatus` or\n/// `ExitStatusError` using their implementations of [`Display`](crate::fmt::Display).\n///\n/// # Differences from `ExitCode`\n///\n/// [`ExitCode`] is intended for terminating the currently running process, via\n/// the `Termination` trait, in contrast to `ExitStatus`, which represents the\n/// termination of a child process. These APIs are separate due to platform\n/// compatibility differences and their expected usage; it is not generally\n/// possible to exactly reproduce an `ExitStatus` from a child for the current\n/// process after the fact.\n///\n/// [`status`]: Command::status\n/// [`wait`]: Child::wait\n</span><span class=\"comment\">//\n// We speak slightly loosely (here and in various other places in the stdlib docs) about `exit`\n// vs `_exit`.  Naming of Unix system calls is not standardised across Unices, so terminology is a\n// matter of convention and tradition.  For clarity we usually speak of `exit`, even when we might\n// mean an underlying system call such as `_exit`.\n</span><span class=\"attr\">#[derive(PartialEq, Eq, Clone, Copy, Debug)]\n#[stable(feature = <span class=\"string\">\"process\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">pub struct </span>ExitStatus(imp::ExitStatus);\n\n<span class=\"doccomment\">/// The default value is one which indicates successful completion.\n</span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"process_exitstatus_default\"</span>, since = <span class=\"string\">\"1.73.0\"</span>)]\n</span><span class=\"kw\">impl </span>Default <span class=\"kw\">for </span>ExitStatus {\n    <span class=\"kw\">fn </span>default() -&gt; <span class=\"self\">Self </span>{\n        <span class=\"comment\">// Ideally this would be done by ExitCode::default().into() but that is complicated.\n        </span>ExitStatus::from_inner(imp::ExitStatus::default())\n    }\n}\n\n<span class=\"doccomment\">/// Allows extension traits within `std`.\n</span><span class=\"attr\">#[unstable(feature = <span class=\"string\">\"sealed\"</span>, issue = <span class=\"string\">\"none\"</span>)]\n</span><span class=\"kw\">impl </span><span class=\"kw\">crate</span>::sealed::Sealed <span class=\"kw\">for </span>ExitStatus {}\n\n<span class=\"kw\">impl </span>ExitStatus {\n    <span class=\"doccomment\">/// Was termination successful?  Returns a `Result`.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// #![feature(exit_status_error)]\n    /// # if cfg!(unix) {\n    /// use std::process::Command;\n    ///\n    /// let status = Command::new(\"ls\")\n    ///     .arg(\"/dev/nonexistent\")\n    ///     .status()\n    ///     .expect(\"ls could not be executed\");\n    ///\n    /// println!(\"ls: {status}\");\n    /// status.exit_ok().expect_err(\"/dev/nonexistent could be listed!\");\n    /// # } // cfg!(unix)\n    /// ```\n    </span><span class=\"attr\">#[unstable(feature = <span class=\"string\">\"exit_status_error\"</span>, issue = <span class=\"string\">\"84908\"</span>)]\n    </span><span class=\"kw\">pub fn </span>exit_ok(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Result</span>&lt;(), ExitStatusError&gt; {\n        <span class=\"self\">self</span>.<span class=\"number\">0</span>.exit_ok().map_err(ExitStatusError)\n    }\n\n    <span class=\"doccomment\">/// Was termination successful? Signal termination is not considered a\n    /// success, and success is defined as a zero exit status.\n    ///\n    /// # Examples\n    ///\n    /// ```rust,no_run\n    /// use std::process::Command;\n    ///\n    /// let status = Command::new(\"mkdir\")\n    ///     .arg(\"projects\")\n    ///     .status()\n    ///     .expect(\"failed to execute mkdir\");\n    ///\n    /// if status.success() {\n    ///     println!(\"'projects/' directory created\");\n    /// } else {\n    ///     println!(\"failed to create 'projects/' directory: {status}\");\n    /// }\n    /// ```\n    </span><span class=\"attr\">#[must_use]\n    #[stable(feature = <span class=\"string\">\"process\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>success(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; bool {\n        <span class=\"self\">self</span>.<span class=\"number\">0</span>.exit_ok().is_ok()\n    }\n\n    <span class=\"doccomment\">/// Returns the exit code of the process, if any.\n    ///\n    /// In Unix terms the return value is the **exit status**: the value passed to `exit`, if the\n    /// process finished by calling `exit`.  Note that on Unix the exit status is truncated to 8\n    /// bits, and that values that didn't come from a program's call to `exit` may be invented by the\n    /// runtime system (often, for example, 255, 254, 127 or 126).\n    ///\n    /// On Unix, this will return `None` if the process was terminated by a signal.\n    /// [`ExitStatusExt`](crate::os::unix::process::ExitStatusExt) is an\n    /// extension trait for extracting any such signal, and other details, from the `ExitStatus`.\n    ///\n    /// # Examples\n    ///\n    /// ```no_run\n    /// use std::process::Command;\n    ///\n    /// let status = Command::new(\"mkdir\")\n    ///     .arg(\"projects\")\n    ///     .status()\n    ///     .expect(\"failed to execute mkdir\");\n    ///\n    /// match status.code() {\n    ///     Some(code) =&gt; println!(\"Exited with status code: {code}\"),\n    ///     None =&gt; println!(\"Process terminated by signal\")\n    /// }\n    /// ```\n    </span><span class=\"attr\">#[must_use]\n    #[stable(feature = <span class=\"string\">\"process\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>code(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Option</span>&lt;i32&gt; {\n        <span class=\"self\">self</span>.<span class=\"number\">0</span>.code()\n    }\n}\n\n<span class=\"kw\">impl </span>AsInner&lt;imp::ExitStatus&gt; <span class=\"kw\">for </span>ExitStatus {\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>as_inner(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; <span class=\"kw-2\">&amp;</span>imp::ExitStatus {\n        <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.<span class=\"number\">0\n    </span>}\n}\n\n<span class=\"kw\">impl </span>FromInner&lt;imp::ExitStatus&gt; <span class=\"kw\">for </span>ExitStatus {\n    <span class=\"kw\">fn </span>from_inner(s: imp::ExitStatus) -&gt; ExitStatus {\n        ExitStatus(s)\n    }\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"process\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl </span>fmt::Display <span class=\"kw\">for </span>ExitStatus {\n    <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, f: <span class=\"kw-2\">&amp;mut </span>fmt::Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; fmt::Result {\n        <span class=\"self\">self</span>.<span class=\"number\">0</span>.fmt(f)\n    }\n}\n\n<span class=\"doccomment\">/// Allows extension traits within `std`.\n</span><span class=\"attr\">#[unstable(feature = <span class=\"string\">\"sealed\"</span>, issue = <span class=\"string\">\"none\"</span>)]\n</span><span class=\"kw\">impl </span><span class=\"kw\">crate</span>::sealed::Sealed <span class=\"kw\">for </span>ExitStatusError {}\n\n<span class=\"doccomment\">/// Describes the result of a process after it has failed\n///\n/// Produced by the [`.exit_ok`](ExitStatus::exit_ok) method on [`ExitStatus`].\n///\n/// # Examples\n///\n/// ```\n/// #![feature(exit_status_error)]\n/// # if cfg!(unix) {\n/// use std::process::{Command, ExitStatusError};\n///\n/// fn run(cmd: &amp;str) -&gt; Result&lt;(),ExitStatusError&gt; {\n///     Command::new(cmd).status().unwrap().exit_ok()?;\n///     Ok(())\n/// }\n///\n/// run(\"true\").unwrap();\n/// run(\"false\").unwrap_err();\n/// # } // cfg!(unix)\n/// ```\n</span><span class=\"attr\">#[derive(PartialEq, Eq, Clone, Copy, Debug)]\n#[unstable(feature = <span class=\"string\">\"exit_status_error\"</span>, issue = <span class=\"string\">\"84908\"</span>)]\n</span><span class=\"comment\">// The definition of imp::ExitStatusError should ideally be such that\n// Result&lt;(), imp::ExitStatusError&gt; has an identical representation to imp::ExitStatus.\n</span><span class=\"kw\">pub struct </span>ExitStatusError(imp::ExitStatusError);\n\n<span class=\"attr\">#[unstable(feature = <span class=\"string\">\"exit_status_error\"</span>, issue = <span class=\"string\">\"84908\"</span>)]\n</span><span class=\"kw\">impl </span>ExitStatusError {\n    <span class=\"doccomment\">/// Reports the exit code, if applicable, from an `ExitStatusError`.\n    ///\n    /// In Unix terms the return value is the **exit status**: the value passed to `exit`, if the\n    /// process finished by calling `exit`.  Note that on Unix the exit status is truncated to 8\n    /// bits, and that values that didn't come from a program's call to `exit` may be invented by the\n    /// runtime system (often, for example, 255, 254, 127 or 126).\n    ///\n    /// On Unix, this will return `None` if the process was terminated by a signal.  If you want to\n    /// handle such situations specially, consider using methods from\n    /// [`ExitStatusExt`](crate::os::unix::process::ExitStatusExt).\n    ///\n    /// If the process finished by calling `exit` with a nonzero value, this will return\n    /// that exit status.\n    ///\n    /// If the error was something else, it will return `None`.\n    ///\n    /// If the process exited successfully (ie, by calling `exit(0)`), there is no\n    /// `ExitStatusError`.  So the return value from `ExitStatusError::code()` is always nonzero.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// #![feature(exit_status_error)]\n    /// # #[cfg(unix)] {\n    /// use std::process::Command;\n    ///\n    /// let bad = Command::new(\"false\").status().unwrap().exit_ok().unwrap_err();\n    /// assert_eq!(bad.code(), Some(1));\n    /// # } // #[cfg(unix)]\n    /// ```\n    </span><span class=\"attr\">#[must_use]\n    </span><span class=\"kw\">pub fn </span>code(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Option</span>&lt;i32&gt; {\n        <span class=\"self\">self</span>.code_nonzero().map(Into::into)\n    }\n\n    <span class=\"doccomment\">/// Reports the exit code, if applicable, from an `ExitStatusError`, as a [`NonZero`].\n    ///\n    /// This is exactly like [`code()`](Self::code), except that it returns a &lt;code&gt;[NonZero]&lt;[i32]&gt;&lt;/code&gt;.\n    ///\n    /// Plain `code`, returning a plain integer, is provided because it is often more convenient.\n    /// The returned value from `code()` is indeed also nonzero; use `code_nonzero()` when you want\n    /// a type-level guarantee of nonzeroness.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// #![feature(exit_status_error)]\n    ///\n    /// # if cfg!(unix) {\n    /// use std::num::NonZero;\n    /// use std::process::Command;\n    ///\n    /// let bad = Command::new(\"false\").status().unwrap().exit_ok().unwrap_err();\n    /// assert_eq!(bad.code_nonzero().unwrap(), NonZero::new(1).unwrap());\n    /// # } // cfg!(unix)\n    /// ```\n    </span><span class=\"attr\">#[must_use]\n    </span><span class=\"kw\">pub fn </span>code_nonzero(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Option</span>&lt;NonZero&lt;i32&gt;&gt; {\n        <span class=\"self\">self</span>.<span class=\"number\">0</span>.code()\n    }\n\n    <span class=\"doccomment\">/// Converts an `ExitStatusError` (back) to an `ExitStatus`.\n    </span><span class=\"attr\">#[must_use]\n    </span><span class=\"kw\">pub fn </span>into_status(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; ExitStatus {\n        ExitStatus(<span class=\"self\">self</span>.<span class=\"number\">0</span>.into())\n    }\n}\n\n<span class=\"attr\">#[unstable(feature = <span class=\"string\">\"exit_status_error\"</span>, issue = <span class=\"string\">\"84908\"</span>)]\n</span><span class=\"kw\">impl </span>From&lt;ExitStatusError&gt; <span class=\"kw\">for </span>ExitStatus {\n    <span class=\"kw\">fn </span>from(error: ExitStatusError) -&gt; <span class=\"self\">Self </span>{\n        <span class=\"self\">Self</span>(error.<span class=\"number\">0</span>.into())\n    }\n}\n\n<span class=\"attr\">#[unstable(feature = <span class=\"string\">\"exit_status_error\"</span>, issue = <span class=\"string\">\"84908\"</span>)]\n</span><span class=\"kw\">impl </span>fmt::Display <span class=\"kw\">for </span>ExitStatusError {\n    <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, f: <span class=\"kw-2\">&amp;mut </span>fmt::Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; fmt::Result {\n        <span class=\"macro\">write!</span>(f, <span class=\"string\">\"process exited unsuccessfully: {}\"</span>, <span class=\"self\">self</span>.into_status())\n    }\n}\n\n<span class=\"attr\">#[unstable(feature = <span class=\"string\">\"exit_status_error\"</span>, issue = <span class=\"string\">\"84908\"</span>)]\n</span><span class=\"kw\">impl </span><span class=\"kw\">crate</span>::error::Error <span class=\"kw\">for </span>ExitStatusError {}\n\n<span class=\"doccomment\">/// This type represents the status code the current process can return\n/// to its parent under normal termination.\n///\n/// `ExitCode` is intended to be consumed only by the standard library (via\n/// [`Termination::report()`]), and intentionally does not provide accessors like\n/// `PartialEq`, `Eq`, or `Hash`. Instead the standard library provides the\n/// canonical `SUCCESS` and `FAILURE` exit codes as well as `From&lt;u8&gt; for\n/// ExitCode` for constructing other arbitrary exit codes.\n///\n/// # Portability\n///\n/// Numeric values used in this type don't have portable meanings, and\n/// different platforms may mask different amounts of them.\n///\n/// For the platform's canonical successful and unsuccessful codes, see\n/// the [`SUCCESS`] and [`FAILURE`] associated items.\n///\n/// [`SUCCESS`]: ExitCode::SUCCESS\n/// [`FAILURE`]: ExitCode::FAILURE\n///\n/// # Differences from `ExitStatus`\n///\n/// `ExitCode` is intended for terminating the currently running process, via\n/// the `Termination` trait, in contrast to [`ExitStatus`], which represents the\n/// termination of a child process. These APIs are separate due to platform\n/// compatibility differences and their expected usage; it is not generally\n/// possible to exactly reproduce an `ExitStatus` from a child for the current\n/// process after the fact.\n///\n/// # Examples\n///\n/// `ExitCode` can be returned from the `main` function of a crate, as it implements\n/// [`Termination`]:\n///\n/// ```\n/// use std::process::ExitCode;\n/// # fn check_foo() -&gt; bool { true }\n///\n/// fn main() -&gt; ExitCode {\n///     if !check_foo() {\n///         return ExitCode::from(42);\n///     }\n///\n///     ExitCode::SUCCESS\n/// }\n/// ```\n</span><span class=\"attr\">#[derive(Clone, Copy, Debug)]\n#[stable(feature = <span class=\"string\">\"process_exitcode\"</span>, since = <span class=\"string\">\"1.61.0\"</span>)]\n</span><span class=\"kw\">pub struct </span>ExitCode(imp::ExitCode);\n\n<span class=\"doccomment\">/// Allows extension traits within `std`.\n</span><span class=\"attr\">#[unstable(feature = <span class=\"string\">\"sealed\"</span>, issue = <span class=\"string\">\"none\"</span>)]\n</span><span class=\"kw\">impl </span><span class=\"kw\">crate</span>::sealed::Sealed <span class=\"kw\">for </span>ExitCode {}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"process_exitcode\"</span>, since = <span class=\"string\">\"1.61.0\"</span>)]\n</span><span class=\"kw\">impl </span>ExitCode {\n    <span class=\"doccomment\">/// The canonical `ExitCode` for successful termination on this platform.\n    ///\n    /// Note that a `()`-returning `main` implicitly results in a successful\n    /// termination, so there's no need to return this from `main` unless\n    /// you're also returning other possible codes.\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"process_exitcode\"</span>, since = <span class=\"string\">\"1.61.0\"</span>)]\n    </span><span class=\"kw\">pub const </span>SUCCESS: ExitCode = ExitCode(imp::ExitCode::SUCCESS);\n\n    <span class=\"doccomment\">/// The canonical `ExitCode` for unsuccessful termination on this platform.\n    ///\n    /// If you're only returning this and `SUCCESS` from `main`, consider\n    /// instead returning `Err(_)` and `Ok(())` respectively, which will\n    /// return the same codes (but will also `eprintln!` the error).\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"process_exitcode\"</span>, since = <span class=\"string\">\"1.61.0\"</span>)]\n    </span><span class=\"kw\">pub const </span>FAILURE: ExitCode = ExitCode(imp::ExitCode::FAILURE);\n\n    <span class=\"doccomment\">/// Exit the current process with the given `ExitCode`.\n    ///\n    /// Note that this has the same caveats as [`process::exit()`][exit], namely that this function\n    /// terminates the process immediately, so no destructors on the current stack or any other\n    /// thread's stack will be run. If a clean shutdown is needed, it is recommended to simply\n    /// return this ExitCode from the `main` function, as demonstrated in the [type\n    /// documentation](#examples).\n    ///\n    /// # Differences from `process::exit()`\n    ///\n    /// `process::exit()` accepts any `i32` value as the exit code for the process; however, there\n    /// are platforms that only use a subset of that value (see [`process::exit` platform-specific\n    /// behavior][exit#platform-specific-behavior]). `ExitCode` exists because of this; only\n    /// `ExitCode`s that are supported by a majority of our platforms can be created, so those\n    /// problems don't exist (as much) with this method.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// #![feature(exitcode_exit_method)]\n    /// # use std::process::ExitCode;\n    /// # use std::fmt;\n    /// # enum UhOhError { GenericProblem, Specific, WithCode { exit_code: ExitCode, _x: () } }\n    /// # impl fmt::Display for UhOhError {\n    /// #     fn fmt(&amp;self, _: &amp;mut fmt::Formatter&lt;'_&gt;) -&gt; fmt::Result { unimplemented!() }\n    /// # }\n    /// // there's no way to gracefully recover from an UhOhError, so we just\n    /// // print a message and exit\n    /// fn handle_unrecoverable_error(err: UhOhError) -&gt; ! {\n    ///     eprintln!(\"UH OH! {err}\");\n    ///     let code = match err {\n    ///         UhOhError::GenericProblem =&gt; ExitCode::FAILURE,\n    ///         UhOhError::Specific =&gt; ExitCode::from(3),\n    ///         UhOhError::WithCode { exit_code, .. } =&gt; exit_code,\n    ///     };\n    ///     code.exit_process()\n    /// }\n    /// ```\n    </span><span class=\"attr\">#[unstable(feature = <span class=\"string\">\"exitcode_exit_method\"</span>, issue = <span class=\"string\">\"97100\"</span>)]\n    </span><span class=\"kw\">pub fn </span>exit_process(<span class=\"self\">self</span>) -&gt; ! {\n        exit(<span class=\"self\">self</span>.to_i32())\n    }\n}\n\n<span class=\"kw\">impl </span>ExitCode {\n    <span class=\"comment\">// This is private/perma-unstable because ExitCode is opaque; we don't know that i32 will serve\n    // all usecases, for example windows seems to use u32, unix uses the 8-15th bits of an i32, we\n    // likely want to isolate users anything that could restrict the platform specific\n    // representation of an ExitCode\n    //\n    // More info: https://internals.rust-lang.org/t/mini-pre-rfc-redesigning-process-exitstatus/5426\n    </span><span class=\"doccomment\">/// Convert an `ExitCode` into an i32\n    </span><span class=\"attr\">#[unstable(\n        feature = <span class=\"string\">\"process_exitcode_internals\"</span>,\n        reason = <span class=\"string\">\"exposed only for libstd\"</span>,\n        issue = <span class=\"string\">\"none\"\n    </span>)]\n    #[inline]\n    #[doc(hidden)]\n    </span><span class=\"kw\">pub fn </span>to_i32(<span class=\"self\">self</span>) -&gt; i32 {\n        <span class=\"self\">self</span>.<span class=\"number\">0</span>.as_i32()\n    }\n}\n\n<span class=\"doccomment\">/// The default value is [`ExitCode::SUCCESS`]\n</span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"process_exitcode_default\"</span>, since = <span class=\"string\">\"1.75.0\"</span>)]\n</span><span class=\"kw\">impl </span>Default <span class=\"kw\">for </span>ExitCode {\n    <span class=\"kw\">fn </span>default() -&gt; <span class=\"self\">Self </span>{\n        ExitCode::SUCCESS\n    }\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"process_exitcode\"</span>, since = <span class=\"string\">\"1.61.0\"</span>)]\n</span><span class=\"kw\">impl </span>From&lt;u8&gt; <span class=\"kw\">for </span>ExitCode {\n    <span class=\"doccomment\">/// Construct an `ExitCode` from an arbitrary u8 value.\n    </span><span class=\"kw\">fn </span>from(code: u8) -&gt; <span class=\"self\">Self </span>{\n        ExitCode(imp::ExitCode::from(code))\n    }\n}\n\n<span class=\"kw\">impl </span>AsInner&lt;imp::ExitCode&gt; <span class=\"kw\">for </span>ExitCode {\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>as_inner(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; <span class=\"kw-2\">&amp;</span>imp::ExitCode {\n        <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.<span class=\"number\">0\n    </span>}\n}\n\n<span class=\"kw\">impl </span>FromInner&lt;imp::ExitCode&gt; <span class=\"kw\">for </span>ExitCode {\n    <span class=\"kw\">fn </span>from_inner(s: imp::ExitCode) -&gt; ExitCode {\n        ExitCode(s)\n    }\n}\n\n<span class=\"kw\">impl </span>Child {\n    <span class=\"doccomment\">/// Forces the child process to exit. If the child has already exited, `Ok(())`\n    /// is returned.\n    ///\n    /// The mapping to [`ErrorKind`]s is not part of the compatibility contract of the function.\n    ///\n    /// This is equivalent to sending a SIGKILL on Unix platforms.\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```no_run\n    /// use std::process::Command;\n    ///\n    /// let mut command = Command::new(\"yes\");\n    /// if let Ok(mut child) = command.spawn() {\n    ///     child.kill().expect(\"command couldn't be killed\");\n    /// } else {\n    ///     println!(\"yes command didn't start\");\n    /// }\n    /// ```\n    ///\n    /// [`ErrorKind`]: io::ErrorKind\n    /// [`InvalidInput`]: io::ErrorKind::InvalidInput\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"process\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>kill(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) -&gt; io::Result&lt;()&gt; {\n        <span class=\"self\">self</span>.handle.kill()\n    }\n\n    <span class=\"doccomment\">/// Returns the OS-assigned process identifier associated with this child.\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```no_run\n    /// use std::process::Command;\n    ///\n    /// let mut command = Command::new(\"ls\");\n    /// if let Ok(child) = command.spawn() {\n    ///     println!(\"Child's ID is {}\", child.id());\n    /// } else {\n    ///     println!(\"ls command didn't start\");\n    /// }\n    /// ```\n    </span><span class=\"attr\">#[must_use]\n    #[stable(feature = <span class=\"string\">\"process_id\"</span>, since = <span class=\"string\">\"1.3.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>id(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; u32 {\n        <span class=\"self\">self</span>.handle.id()\n    }\n\n    <span class=\"doccomment\">/// Waits for the child to exit completely, returning the status that it\n    /// exited with. This function will continue to have the same return value\n    /// after it has been called at least once.\n    ///\n    /// The stdin handle to the child process, if any, will be closed\n    /// before waiting. This helps avoid deadlock: it ensures that the\n    /// child does not block waiting for input from the parent, while\n    /// the parent waits for the child to exit.\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```no_run\n    /// use std::process::Command;\n    ///\n    /// let mut command = Command::new(\"ls\");\n    /// if let Ok(mut child) = command.spawn() {\n    ///     child.wait().expect(\"command wasn't running\");\n    ///     println!(\"Child has finished its execution!\");\n    /// } else {\n    ///     println!(\"ls command didn't start\");\n    /// }\n    /// ```\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"process\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>wait(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) -&gt; io::Result&lt;ExitStatus&gt; {\n        drop(<span class=\"self\">self</span>.stdin.take());\n        <span class=\"self\">self</span>.handle.wait().map(ExitStatus)\n    }\n\n    <span class=\"doccomment\">/// Attempts to collect the exit status of the child if it has already\n    /// exited.\n    ///\n    /// This function will not block the calling thread and will only\n    /// check to see if the child process has exited or not. If the child has\n    /// exited then on Unix the process ID is reaped. This function is\n    /// guaranteed to repeatedly return a successful exit status so long as the\n    /// child has already exited.\n    ///\n    /// If the child has exited, then `Ok(Some(status))` is returned. If the\n    /// exit status is not available at this time then `Ok(None)` is returned.\n    /// If an error occurs, then that error is returned.\n    ///\n    /// Note that unlike `wait`, this function will not attempt to drop stdin.\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```no_run\n    /// use std::process::Command;\n    ///\n    /// let mut child = Command::new(\"ls\").spawn().unwrap();\n    ///\n    /// match child.try_wait() {\n    ///     Ok(Some(status)) =&gt; println!(\"exited with: {status}\"),\n    ///     Ok(None) =&gt; {\n    ///         println!(\"status not ready yet, let's really wait\");\n    ///         let res = child.wait();\n    ///         println!(\"result: {res:?}\");\n    ///     }\n    ///     Err(e) =&gt; println!(\"error attempting to wait: {e}\"),\n    /// }\n    /// ```\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"process_try_wait\"</span>, since = <span class=\"string\">\"1.18.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>try_wait(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) -&gt; io::Result&lt;<span class=\"prelude-ty\">Option</span>&lt;ExitStatus&gt;&gt; {\n        <span class=\"prelude-val\">Ok</span>(<span class=\"self\">self</span>.handle.try_wait()<span class=\"question-mark\">?</span>.map(ExitStatus))\n    }\n\n    <span class=\"doccomment\">/// Simultaneously waits for the child to exit and collect all remaining\n    /// output on the stdout/stderr handles, returning an `Output`\n    /// instance.\n    ///\n    /// The stdin handle to the child process, if any, will be closed\n    /// before waiting. This helps avoid deadlock: it ensures that the\n    /// child does not block waiting for input from the parent, while\n    /// the parent waits for the child to exit.\n    ///\n    /// By default, stdin, stdout and stderr are inherited from the parent.\n    /// In order to capture the output into this `Result&lt;Output&gt;` it is\n    /// necessary to create new pipes between parent and child. Use\n    /// `stdout(Stdio::piped())` or `stderr(Stdio::piped())`, respectively.\n    ///\n    /// # Examples\n    ///\n    /// ```should_panic\n    /// use std::process::{Command, Stdio};\n    ///\n    /// let child = Command::new(\"/bin/cat\")\n    ///     .arg(\"file.txt\")\n    ///     .stdout(Stdio::piped())\n    ///     .spawn()\n    ///     .expect(\"failed to execute child\");\n    ///\n    /// let output = child\n    ///     .wait_with_output()\n    ///     .expect(\"failed to wait on child\");\n    ///\n    /// assert!(output.status.success());\n    /// ```\n    ///\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"process\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>wait_with_output(<span class=\"kw-2\">mut </span><span class=\"self\">self</span>) -&gt; io::Result&lt;Output&gt; {\n        drop(<span class=\"self\">self</span>.stdin.take());\n\n        <span class=\"kw\">let </span>(<span class=\"kw-2\">mut </span>stdout, <span class=\"kw-2\">mut </span>stderr) = (Vec::new(), Vec::new());\n        <span class=\"kw\">match </span>(<span class=\"self\">self</span>.stdout.take(), <span class=\"self\">self</span>.stderr.take()) {\n            (<span class=\"prelude-val\">None</span>, <span class=\"prelude-val\">None</span>) =&gt; {}\n            (<span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">mut </span>out), <span class=\"prelude-val\">None</span>) =&gt; {\n                <span class=\"kw\">let </span>res = out.read_to_end(<span class=\"kw-2\">&amp;mut </span>stdout);\n                res.unwrap();\n            }\n            (<span class=\"prelude-val\">None</span>, <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">mut </span>err)) =&gt; {\n                <span class=\"kw\">let </span>res = err.read_to_end(<span class=\"kw-2\">&amp;mut </span>stderr);\n                res.unwrap();\n            }\n            (<span class=\"prelude-val\">Some</span>(out), <span class=\"prelude-val\">Some</span>(err)) =&gt; {\n                <span class=\"kw\">let </span>res = read2(out.inner, <span class=\"kw-2\">&amp;mut </span>stdout, err.inner, <span class=\"kw-2\">&amp;mut </span>stderr);\n                res.unwrap();\n            }\n        }\n\n        <span class=\"kw\">let </span>status = <span class=\"self\">self</span>.wait()<span class=\"question-mark\">?</span>;\n        <span class=\"prelude-val\">Ok</span>(Output { status, stdout, stderr })\n    }\n}\n\n<span class=\"doccomment\">/// Terminates the current process with the specified exit code.\n///\n/// This function will never return and will immediately terminate the current\n/// process. The exit code is passed through to the underlying OS and will be\n/// available for consumption by another process.\n///\n/// Note that because this function never returns, and that it terminates the\n/// process, no destructors on the current stack or any other thread's stack\n/// will be run. If a clean shutdown is needed it is recommended to only call\n/// this function at a known point where there are no more destructors left\n/// to run; or, preferably, simply return a type implementing [`Termination`]\n/// (such as [`ExitCode`] or `Result`) from the `main` function and avoid this\n/// function altogether:\n///\n/// ```\n/// # use std::io::Error as MyError;\n/// fn main() -&gt; Result&lt;(), MyError&gt; {\n///     // ...\n///     Ok(())\n/// }\n/// ```\n///\n/// ## Platform-specific behavior\n///\n/// **Unix**: On Unix-like platforms, it is unlikely that all 32 bits of `exit`\n/// will be visible to a parent process inspecting the exit code. On most\n/// Unix-like platforms, only the eight least-significant bits are considered.\n///\n/// For example, the exit code for this example will be `0` on Linux, but `256`\n/// on Windows:\n///\n/// ```no_run\n/// use std::process;\n///\n/// process::exit(0x0100);\n/// ```\n</span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n#[cfg_attr(not(test), rustc_diagnostic_item = <span class=\"string\">\"process_exit\"</span>)]\n</span><span class=\"kw\">pub fn </span>exit(code: i32) -&gt; ! {\n    <span class=\"kw\">crate</span>::rt::cleanup();\n    <span class=\"kw\">crate</span>::sys::os::exit(code)\n}\n\n<span class=\"doccomment\">/// Terminates the process in an abnormal fashion.\n///\n/// The function will never return and will immediately terminate the current\n/// process in a platform specific \"abnormal\" manner.\n///\n/// Note that because this function never returns, and that it terminates the\n/// process, no destructors on the current stack or any other thread's stack\n/// will be run.\n///\n/// Rust IO buffers (eg, from `BufWriter`) will not be flushed.\n/// Likewise, C stdio buffers will (on most platforms) not be flushed.\n///\n/// This is in contrast to the default behaviour of [`panic!`] which unwinds\n/// the current thread's stack and calls all destructors.\n/// When `panic=\"abort\"` is set, either as an argument to `rustc` or in a\n/// crate's Cargo.toml, [`panic!`] and `abort` are similar. However,\n/// [`panic!`] will still call the [panic hook] while `abort` will not.\n///\n/// If a clean shutdown is needed it is recommended to only call\n/// this function at a known point where there are no more destructors left\n/// to run.\n///\n/// The process's termination will be similar to that from the C `abort()`\n/// function.  On Unix, the process will terminate with signal `SIGABRT`, which\n/// typically means that the shell prints \"Aborted\".\n///\n/// # Examples\n///\n/// ```no_run\n/// use std::process;\n///\n/// fn main() {\n///     println!(\"aborting\");\n///\n///     process::abort();\n///\n///     // execution never gets here\n/// }\n/// ```\n///\n/// The `abort` function terminates the process, so the destructor will not\n/// get run on the example below:\n///\n/// ```no_run\n/// use std::process;\n///\n/// struct HasDrop;\n///\n/// impl Drop for HasDrop {\n///     fn drop(&amp;mut self) {\n///         println!(\"This will never be printed!\");\n///     }\n/// }\n///\n/// fn main() {\n///     let _x = HasDrop;\n///     process::abort();\n///     // the destructor implemented for HasDrop will never get run\n/// }\n/// ```\n///\n/// [panic hook]: crate::panic::set_hook\n</span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"process_abort\"</span>, since = <span class=\"string\">\"1.17.0\"</span>)]\n#[cold]\n</span><span class=\"kw\">pub fn </span>abort() -&gt; ! {\n    <span class=\"kw\">crate</span>::sys::abort_internal();\n}\n\n<span class=\"doccomment\">/// Returns the OS-assigned process identifier associated with this process.\n///\n/// # Examples\n///\n/// Basic usage:\n///\n/// ```no_run\n/// use std::process;\n///\n/// println!(\"My pid is {}\", process::id());\n/// ```\n///\n///\n</span><span class=\"attr\">#[must_use]\n#[stable(feature = <span class=\"string\">\"getpid\"</span>, since = <span class=\"string\">\"1.26.0\"</span>)]\n</span><span class=\"kw\">pub fn </span>id() -&gt; u32 {\n    <span class=\"kw\">crate</span>::sys::os::getpid()\n}\n\n<span class=\"doccomment\">/// A trait for implementing arbitrary return types in the `main` function.\n///\n/// The C-main function only supports returning integers.\n/// So, every type implementing the `Termination` trait has to be converted\n/// to an integer.\n///\n/// The default implementations are returning `libc::EXIT_SUCCESS` to indicate\n/// a successful execution. In case of a failure, `libc::EXIT_FAILURE` is returned.\n///\n/// Because different runtimes have different specifications on the return value\n/// of the `main` function, this trait is likely to be available only on\n/// standard library's runtime for convenience. Other runtimes are not required\n/// to provide similar functionality.\n</span><span class=\"attr\">#[cfg_attr(not(any(test, doctest)), lang = <span class=\"string\">\"termination\"</span>)]\n#[stable(feature = <span class=\"string\">\"termination_trait_lib\"</span>, since = <span class=\"string\">\"1.61.0\"</span>)]\n#[rustc_on_unimplemented(on(\n    cause = <span class=\"string\">\"MainFunctionType\"</span>,\n    message = <span class=\"string\">\"`main` has invalid return type `{Self}`\"</span>,\n    label = <span class=\"string\">\"`main` can only return types that implement `{Termination}`\"\n</span>))]\n</span><span class=\"kw\">pub trait </span>Termination {\n    <span class=\"doccomment\">/// Is called to get the representation of the value as status code.\n    /// This status code is returned to the operating system.\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"termination_trait_lib\"</span>, since = <span class=\"string\">\"1.61.0\"</span>)]\n    </span><span class=\"kw\">fn </span>report(<span class=\"self\">self</span>) -&gt; ExitCode;\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"termination_trait_lib\"</span>, since = <span class=\"string\">\"1.61.0\"</span>)]\n</span><span class=\"kw\">impl </span>Termination <span class=\"kw\">for </span>() {\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>report(<span class=\"self\">self</span>) -&gt; ExitCode {\n        ExitCode::SUCCESS\n    }\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"termination_trait_lib\"</span>, since = <span class=\"string\">\"1.61.0\"</span>)]\n</span><span class=\"kw\">impl </span>Termination <span class=\"kw\">for </span>! {\n    <span class=\"kw\">fn </span>report(<span class=\"self\">self</span>) -&gt; ExitCode {\n        <span class=\"self\">self\n    </span>}\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"termination_trait_lib\"</span>, since = <span class=\"string\">\"1.61.0\"</span>)]\n</span><span class=\"kw\">impl </span>Termination <span class=\"kw\">for </span>Infallible {\n    <span class=\"kw\">fn </span>report(<span class=\"self\">self</span>) -&gt; ExitCode {\n        <span class=\"kw\">match </span><span class=\"self\">self </span>{}\n    }\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"termination_trait_lib\"</span>, since = <span class=\"string\">\"1.61.0\"</span>)]\n</span><span class=\"kw\">impl </span>Termination <span class=\"kw\">for </span>ExitCode {\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>report(<span class=\"self\">self</span>) -&gt; ExitCode {\n        <span class=\"self\">self\n    </span>}\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"termination_trait_lib\"</span>, since = <span class=\"string\">\"1.61.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;T: Termination, E: fmt::Debug&gt; Termination <span class=\"kw\">for </span><span class=\"prelude-ty\">Result</span>&lt;T, E&gt; {\n    <span class=\"kw\">fn </span>report(<span class=\"self\">self</span>) -&gt; ExitCode {\n        <span class=\"kw\">match </span><span class=\"self\">self </span>{\n            <span class=\"prelude-val\">Ok</span>(val) =&gt; val.report(),\n            <span class=\"prelude-val\">Err</span>(err) =&gt; {\n                io::attempt_print_to_stderr(<span class=\"macro\">format_args_nl!</span>(<span class=\"string\">\"Error: {err:?}\"</span>));\n                ExitCode::FAILURE\n            }\n        }\n    }\n}\n</code></pre></div></section></main></body></html>",
	"crawlDate": "2024-07-28T05:12:39.579Z"
}