{
	"title": "The Rust Unstable Book",
	"url": "https://doc.rust-lang.org/stable/unstable-book/print.html",
	"markdown": "# The Rust Unstable Book\n\nWelcome to the Unstable Book! This book consists of a number of chapters, each one organized by a \"feature flag.\" That is, when using an unstable feature of Rust, you must use a flag, like this:\n\n```rust\n#![feature(coroutines, coroutine_trait, stmt_expr_attributes)]\n\nuse std::ops::{Coroutine, CoroutineState};\nuse std::pin::Pin;\n\nfn main() {\n    let mut coroutine = #[coroutine] || {\n        yield 1;\n        return \"foo\"\n    };\n\n    match Pin::new(&mut coroutine).resume(()) {\n        CoroutineState::Yielded(1) => {}\n        _ => panic!(\"unexpected value from resume\"),\n    }\n    match Pin::new(&mut coroutine).resume(()) {\n        CoroutineState::Complete(\"foo\") => {}\n        _ => panic!(\"unexpected value from resume\"),\n    }\n}\n```\n\nThe `coroutines` feature [has a chapter](language-features/coroutines.html) describing how to use it.\n\nBecause this documentation relates to unstable features, we make no guarantees that what is contained here is accurate or up to date. It's developed on a best-effort basis. Each page will have a link to its tracking issue with the latest developments; you might want to check those as well.\n\n## [Compiler flags](#compiler-flags)\n\n## [`branch-protection`](#branch-protection)\n\nThis option lets you enable branch authentication instructions on AArch64. This option is only accepted when targeting AArch64 architectures. It takes some combination of the following values, separated by a `,`.\n\n-   `pac-ret` - Enable pointer authentication for non-leaf functions.\n-   `leaf` - Enable pointer authentication for all functions, including leaf functions.\n-   `b-key` - Sign return addresses with key B, instead of the default key A.\n-   `bti` - Enable branch target identification.\n\n`leaf` and `b-key` are only valid if `pac-ret` was previously specified. For example, `-Z branch-protection=bti,pac-ret,leaf` is valid, but `-Z branch-protection=bti,leaf,pac-ret` is not.\n\nRust's standard library does not ship with BTI or pointer authentication enabled by default. In Cargo projects the standard library can be recompiled with pointer authentication using the nightly [build-std](about:blank/cargo/reference/unstable.html#build-std) feature.\n\n## [`cf-protection`](#cf-protection)\n\nThe tracking issue for this feature is: [#93754](https://github.com/rust-lang/rust/issues/93754).\n\n---\n\nThis option enables control-flow enforcement technology (CET) on x86; a more detailed description of CET is available [here](https://www.intel.com/content/www/us/en/develop/articles/technical-look-control-flow-enforcement-technology.html). Similar to `clang`, this flag takes one of the following values:\n\n-   `none` - Disable CET completely (this is the default).\n-   `branch` - Enable indirect branch tracking (`IBT`).\n-   `return` - Enable shadow stack (`SHSTK`).\n-   `full` - Enable both `branch` and `return`.\n\nThis flag only applies to the LLVM backend: it sets the `cf-protection-branch` and `cf-protection-return` flags on LLVM modules. Note, however, that all compiled modules linked together must have the flags set for the compiled output to be CET-enabled. Currently, Rust's standard library does not ship with CET enabled by default, so you may need to rebuild all standard modules with a `cargo` command like:\n\n```sh\n$ RUSTFLAGS=\"-Z cf-protection=full\" cargo +nightly build -Z build-std --target x86_64-unknown-linux-gnu\n\n```\n\n### [Detection](#detection)\n\nAn ELF binary is CET-enabled if it has the `IBT` and `SHSTK` tags, e.g.:\n\n```sh\n$ readelf -a target/x86_64-unknown-linux-gnu/debug/example | grep feature:\n      Properties: x86 feature: IBT, SHSTK\n\n```\n\n### [Troubleshooting](#troubleshooting)\n\nTo display modules that are not CET enabled, examine the linker errors available when `cet-report` is enabled:\n\n```sh\n$ RUSTC_LOG=rustc_codegen_ssa::back::link=info rustc-custom -v -Z cf-protection=full -C link-arg=\"-Wl,-z,cet-report=warning\" -o example example.rs\n...\n/usr/bin/ld: /.../build/x86_64-unknown-linux-gnu/stage1/lib/rustlib/x86_64-unknown-linux-gnu/lib/libstd-d73f7266be14cb8b.rlib(std-d73f7266be14cb8b.std.f7443020-cgu.12.rcgu.o): warning: missing IBT and SHSTK properties\n\n```\n\n## [`codegen-backend`](#codegen-backend)\n\nThe tracking issue for this feature is: [#77933](https://github.com/rust-lang/rust/issues/77933).\n\n---\n\nThis feature allows you to specify a path to a dynamic library to use as rustc's code generation backend at runtime.\n\nSet the `-Zcodegen-backend=<path>` compiler flag to specify the location of the backend. The library must be of crate type `dylib` and must contain a function named `__rustc_codegen_backend` with a signature of `fn() -> Box<dyn rustc_codegen_ssa::traits::CodegenBackend>`.\n\n## [Example](#example)\n\nSee also the [`hotplug_codegen_backend`](https://github.com/rust-lang/rust/tree/master/tests/run-make-fulldeps/hotplug_codegen_backend) test for a full example.\n\n```rust\nuse rustc_codegen_ssa::traits::CodegenBackend;\n\nstruct MyBackend;\n\nimpl CodegenBackend for MyBackend {\n   // Implement codegen methods\n}\n\n#[no_mangle]\npub fn __rustc_codegen_backend() -> Box<dyn CodegenBackend> {\n    Box::new(MyBackend)\n}\n```\n\n## [Unstable codegen options](#unstable-codegen-options)\n\nAll of these options are passed to `rustc` via the `-C` flag, short for \"codegen\". The flags are stable but some of their values are individually unstable, and also require using `-Z unstable-options` to be accepted.\n\n## [linker-flavor](#linker-flavor)\n\nIn addition to the stable set of linker flavors, the following unstable values also exist:\n\n-   `ptx`: use [`rust-ptx-linker`](https://github.com/denzp/rust-ptx-linker) for Nvidia NVPTX GPGPU support.\n-   `bpf`: use [`bpf-linker`](https://github.com/alessandrod/bpf-linker) for eBPF support.\n-   `llbc`: for linking in llvm bitcode. Install the preview rustup components`llvm-bitcode-linker` and `llvm-tools` to use as a self-contained linker by passing `-Zunstable-options -Clink-self-contained=+linker` together with `-Clinker-flavor=llbc`. Can currently only be used for Nvidia NVPTX targets (`nvptx64-nvidia-cuda`).\n\nAdditionally, a set of more precise linker flavors also exists, for example allowing targets to declare that they use the LLD linker by default. The following values are currently unstable, and the goal is for them to become stable, and preferred in practice over the existing stable values:\n\n-   `gnu`: unix-like linker with GNU extensions\n-   `gnu-lld`: `gnu` using LLD\n-   `gnu-cc`: `gnu` using a C/C++ compiler as the linker driver\n-   `gnu-lld-cc`: `gnu` using LLD and a C/C++ compiler as the linker driver\n-   `darwin`: unix-like linker for Apple targets\n-   `darwin-lld`: `darwin` using LLD\n-   `darwin-cc`: `darwin` using a C/C++ compiler as the linker driver\n-   `darwin-lld-cc`: `darwin` using LLD and a C/C++ compiler as the linker driver\n-   `wasm-lld`: unix-like linker for Wasm targets, with LLD\n-   `wasm-lld-cc`: unix-like linker for Wasm targets, with LLD and a C/C++ compiler as the linker driver\n-   `unix`: basic unix-like linker for \"any other Unix\" targets (Solaris/illumos, L4Re, MSP430, etc), not supported with LLD.\n-   `unix-cc`: `unix` using a C/C++ compiler as the linker driver\n-   `msvc-lld`: MSVC-style linker for Windows and UEFI, with LLD\n-   `em-cc`: emscripten compiler frontend, similar to `wasm-lld-cc` with a different interface\n\n## [link-self-contained](#link-self-contained)\n\nThis flag generally controls whether the linker will use libraries and objects shipped with Rust instead of those in the system. The stable boolean values for this flag are coarse-grained (everything or nothing), but there exists a set of unstable values with finer-grained control, `-Clink-self-contained` can accept a comma-separated list of components, individually enabled (`+component`) or disabled (`-component`):\n\n-   `crto`: CRT objects (e.g. on `windows-gnu`, `musl`, `wasi` targets)\n-   `libc`: libc static library (e.g. on `musl`, `wasi` targets)\n-   `unwind`: libgcc/libunwind (e.g. on `windows-gnu`, `fuchsia`, `fortanix`, `gnullvm` targets)\n-   `linker`: linker, dlltool, and their necessary libraries (e.g. on `windows-gnu` and for `rust-lld`)\n-   `sanitizers`: sanitizer runtime libraries\n-   `mingw`: other MinGW libs and Windows import libs\n\nOut of the above self-contained linking components, `linker` is the only one currently implemented (beyond parsing the CLI options).\n\nIt refers to the LLD linker, built from the same LLVM revision used by rustc (named `rust-lld` to avoid naming conflicts), that is distributed via `rustup` with the compiler (and is used by default for the wasm targets). One can also opt-in to use it by combining this flag with an appropriate linker flavor: for example, `-Clinker-flavor=gnu-lld-cc -Clink-self-contained=+linker` will use the toolchain's `rust-lld` as the linker.\n\n## [`control-flow-guard`](#control-flow-guard)\n\nThe tracking issue for this feature is: [#68793](https://github.com/rust-lang/rust/issues/68793).\n\n---\n\nThe rustc flag `-Z control-flow-guard` enables the Windows [Control Flow Guard](https://docs.microsoft.com/en-us/windows/win32/secbp/control-flow-guard) (CFG) platform security feature.\n\nCFG is an exploit mitigation designed to enforce control-flow integrity for software running on supported [Windows platforms (Windows 8.1 onwards)](https://docs.microsoft.com/en-us/windows/win32/secbp/control-flow-guard). Specifically, CFG uses runtime checks to validate the target address of every indirect call/jump before allowing the call to complete.\n\nDuring compilation, the compiler identifies all indirect calls/jumps and adds CFG checks. It also emits metadata containing the relative addresses of all address-taken functions. At runtime, if the binary is run on a CFG-aware operating system, the loader uses the CFG metadata to generate a bitmap of the address space and marks those addresses that contain valid targets. On each indirect call, the inserted check determines whether the target address is marked in this bitmap. If the target is not valid, the process is terminated.\n\nIn terms of interoperability:\n\n-   Code compiled with CFG enabled can be linked with libraries and object files that are not compiled with CFG. In this case, a CFG-aware linker can identify address-taken functions in the non-CFG libraries.\n-   Libraries compiled with CFG can linked into non-CFG programs. In this case, the CFG runtime checks in the libraries are not used (i.e. the mitigation is completely disabled).\n\nCFG functionality is completely implemented in the LLVM backend and is supported for X86 (32-bit and 64-bit), ARM, and Aarch64 targets. The rustc flag adds the relevant LLVM module flags to enable the feature. This flag will be ignored for all non-Windows targets.\n\n## [When to use Control Flow Guard](#when-to-use-control-flow-guard)\n\nThe primary motivation for enabling CFG in Rust is to enhance security when linking against non-Rust code, especially C/C++ code. To achieve full CFG protection, all indirect calls (including any from Rust code) must have the appropriate CFG checks, as added by this flag. CFG can also improve security for Rust code that uses the `unsafe` keyword.\n\nAnother motivation behind CFG is to harden programs against [return-oriented programming (ROP)](https://en.wikipedia.org/wiki/Return-oriented_programming) attacks. CFG disallows an attacker from taking advantage of the program's own instructions while redirecting control flow in unexpected ways.\n\n## [Overhead of Control Flow Guard](#overhead-of-control-flow-guard)\n\nThe CFG checks and metadata can potentially increase binary size and runtime overhead. The magnitude of any increase depends on the number and frequency of indirect calls. For example, enabling CFG for the Rust standard library increases binary size by approximately 0.14%. Enabling CFG in the SPEC CPU 2017 Integer Speed benchmark suite (compiled with Clang/LLVM) incurs approximate runtime overheads of between 0% and 8%, with a geometric mean of 2.9%.\n\n## [Testing Control Flow Guard](#testing-control-flow-guard)\n\nThe rustc flag `-Z control-flow-guard=nochecks` instructs LLVM to emit the list of valid call targets without inserting runtime checks. This flag should only be used for testing purposes as it does not provide security enforcement.\n\n## [Control Flow Guard in libraries](#control-flow-guard-in-libraries)\n\nIt is strongly recommended to also enable CFG checks for all linked libraries, including the standard library.\n\nTo enable CFG in the standard library, use the [cargo `-Z build-std` functionality](about:blank/cargo/reference/unstable.html#build-std) to recompile the standard library with the same configuration options as the main program.\n\nFor example:\n\n```cmd\nrustup toolchain install --force nightly\nrustup component add rust-src\nSET RUSTFLAGS=-Z control-flow-guard\ncargo +nightly build -Z build-std --target x86_64-pc-windows-msvc\n\n```\n\n```\nrustup toolchain install --force nightly\nrustup component add rust-src\n$Env:RUSTFLAGS = \"-Z control-flow-guard\"\ncargo +nightly build -Z build-std --target x86_64-pc-windows-msvc\n\n```\n\nAlternatively, if you are building the standard library from source, you can set `control-flow-guard = true` in the config.toml file.\n\n## [`coverage-options`](#coverage-options)\n\nThis option controls details of the coverage instrumentation performed by `-C instrument-coverage`.\n\nMultiple options can be passed, separated by commas. Valid options are:\n\n-   `block`, `branch`, `condition`, `mcdc`: Sets the level of coverage instrumentation. Setting the level will override any previously-specified level.\n    -   `block` (default): Blocks in the control-flow graph will be instrumented for coverage.\n    -   `branch`: In addition to block coverage, also enables branch coverage instrumentation.\n    -   `condition`: In addition to branch coverage, also instruments some boolean expressions as branches, even if they are not directly used as branch conditions.\n    -   `mcdc`: In addition to condition coverage, also enables MC/DC instrumentation. (Branch coverage instrumentation may differ in some cases.)\n\n## [`debug-info-for-profiling`](#debug-info-for-profiling)\n\n---\n\n## [Introduction](#introduction)\n\nAutomatic Feedback Directed Optimization (AFDO) is a method for using sampling based profiles to guide optimizations. This is contrasted with other methods of FDO or profile-guided optimization (PGO) which use instrumented profiling.\n\nUnlike PGO (controlled by the `rustc` flags `-Cprofile-generate` and `-Cprofile-use`), a binary being profiled does not perform significantly worse, and thus it's possible to profile binaries used in real workflows and not necessary to construct artificial workflows.\n\n## [Use](#use)\n\nIn order to use AFDO, the target platform must be Linux running on an `x86_64` architecture with the performance profiler `perf` available. In addition, the external tool `create_llvm_prof` from [this repository](https://github.com/google/autofdo) must be used.\n\nGiven a Rust file `main.rs`, we can produce an optimized binary as follows:\n\n```shell\nrustc -O -Zdebug-info-for-profiling main.rs -o main\nperf record -b ./main\ncreate_llvm_prof --binary=main --out=code.prof\nrustc -O -Zprofile-sample-use=code.prof main.rs -o main2\n\n```\n\nThe `perf` command produces a profile `perf.data`, which is then used by the `create_llvm_prof` command to create `code.prof`. This final profile is then used by `rustc` to guide optimizations in producing the binary `main2`.\n\nThe tracking issue for this feature is: https://github.com/rust-lang/compiler-team/issues/656\n\n---\n\nThis flag can be used to override the target's [`default_hidden_visibility`](https://doc.rust-lang.org/beta/nightly-rustc/rustc_target/spec/struct.TargetOptions.html#structfield.default_hidden_visibility) setting. Using `-Zdefault_hidden_visibility=yes` is roughly equivalent to Clang's [`-fvisibility=hidden`](https://clang.llvm.org/docs/ClangCommandLineReference.html#cmdoption-clang-fvisibility) cmdline flag.\n\n## [`direct_access_external_data`](#direct_access_external_data)\n\nThe tracking issue for this feature is: https://github.com/rust-lang/compiler-team/issues/707\n\n---\n\nOption `-Z direct-access-external-data` controls how to access symbols of external data.\n\nSupported values for this option are:\n\n-   `yes` - Don't use GOT indirection to reference external data symbols.\n-   `no` - Use GOT indirection to reference external data symbols.\n\nIf the option is not explicitly specified, different targets have different default values.\n\n## [`dump-mono-stats`](#dump-mono-stats)\n\n---\n\nThe `-Z dump-mono-stats` compiler flag generates a file with a list of the monomorphized items in the current crate. It is useful for investigating compile times.\n\nIt accepts an optional directory where the file will be located. If no directory is specified, the file will be placed in the current directory.\n\nSee also `-Z dump-mono-stats-format` and `-Z print-mono-items`. Unlike `print-mono-items`, `dump-mono-stats` aggregates monomorphized items by definition and includes a size estimate of how large the item is when codegened.\n\nSee [https://rustc-dev-guide.rust-lang.org/backend/monomorph.html](https://rustc-dev-guide.rust-lang.org/backend/monomorph.html) for an overview of monomorphized items.\n\n## [`dump-mono-stats-format`](#dump-mono-stats-format)\n\n---\n\nThe `-Z dump-mono-stats-format` compiler flag controls what file format to use for `-Z dump-mono-stats`. The default is markdown; currently JSON is also supported. JSON can be useful for programmatically manipulating the results (e.g. to find the item that took the longest to compile).\n\n## [`dwarf-version`](#dwarf-version)\n\nThis option controls the version of DWARF that the compiler emits, on platforms that use DWARF to encode debug information. It takes one of the following values:\n\n-   `2`: DWARF version 2 (the default on certain platforms, like macOS).\n-   `4`: DWARF version 4 (the default on certain platforms, like Linux).\n-   `5`: DWARF version 5.\n\n## [`dylib-lto`](#dylib-lto)\n\nThis option enables using LTO for the `dylib` crate type. This is currently only used for compiling `rustc` itself (more specifically, the `librustc_driver` dylib).\n\n## [`emit-stack-sizes`](#emit-stack-sizes)\n\nThe tracking issue for this feature is: [#54192](https://github.com/rust-lang/rust/issues/54192)\n\n---\n\nThe rustc flag `-Z emit-stack-sizes` makes LLVM emit stack size metadata.\n\n> **NOTE**: This LLVM feature only supports the ELF object format as of LLVM 8.0. Using this flag with targets that use other object formats (e.g. macOS and Windows) will result in it being ignored.\n\nConsider this crate:\n\n```\n#![crate_type = \"lib\"]\n\nuse std::ptr;\n\npub fn foo() {\n    // this function doesn't use the stack\n}\n\npub fn bar() {\n    let xs = [0u32; 2];\n\n    // force LLVM to allocate `xs` on the stack\n    unsafe { ptr::read_volatile(&xs.as_ptr()); }\n}\n\n```\n\nUsing the `-Z emit-stack-sizes` flag produces extra linker sections in the output _object file_.\n\n```console\n$ rustc -C opt-level=3 --emit=obj foo.rs\n\n$ size -A foo.o\nfoo.o  :\nsection                                 size   addr\n.text                                      0      0\n.text._ZN3foo3foo17he211d7b4a3a0c16eE      1      0\n.text._ZN3foo3bar17h1acb594305f70c2eE     22      0\n.note.GNU-stack                            0      0\n.eh_frame                                 72      0\nTotal                                     95\n\n$ rustc -C opt-level=3 --emit=obj -Z emit-stack-sizes foo.rs\n\n$ size -A foo.o\nfoo.o  :\nsection                                 size   addr\n.text                                      0      0\n.text._ZN3foo3foo17he211d7b4a3a0c16eE      1      0\n.stack_sizes                               9      0\n.text._ZN3foo3bar17h1acb594305f70c2eE     22      0\n.stack_sizes                               9      0\n.note.GNU-stack                            0      0\n.eh_frame                                 72      0\nTotal                                    113\n\n```\n\nAs of LLVM 7.0 the data will be written into a section named `.stack_sizes` and the format is \"an array of pairs of function symbol values (pointer size) and stack sizes (unsigned LEB128)\".\n\n```console\n$ objdump -d foo.o\n\nfoo.o:     file format elf64-x86-64\n\nDisassembly of section .text._ZN3foo3foo17he211d7b4a3a0c16eE:\n\n0000000000000000 <_ZN3foo3foo17he211d7b4a3a0c16eE>:\n   0:   c3                      retq\n\nDisassembly of section .text._ZN3foo3bar17h1acb594305f70c2eE:\n\n0000000000000000 <_ZN3foo3bar17h1acb594305f70c2eE>:\n   0:   48 83 ec 10             sub    $0x10,%rsp\n   4:   48 8d 44 24 08          lea    0x8(%rsp),%rax\n   9:   48 89 04 24             mov    %rax,(%rsp)\n   d:   48 8b 04 24             mov    (%rsp),%rax\n  11:   48 83 c4 10             add    $0x10,%rsp\n  15:   c3                      retq\n\n$ objdump -s -j .stack_sizes foo.o\n\nfoo.o:     file format elf64-x86-64\n\nContents of section .stack_sizes:\n 0000 00000000 00000000 00                 .........\nContents of section .stack_sizes:\n 0000 00000000 00000000 10                 .........\n\n```\n\nIt's important to note that linkers will discard this linker section by default. To preserve the section you can use a linker script like the one shown below.\n\n```text\n/* file: keep-stack-sizes.x */\nSECTIONS\n{\n  /* `INFO` makes the section not allocatable so it won't be loaded into memory */\n  .stack_sizes (INFO) :\n  {\n    KEEP(*(.stack_sizes));\n  }\n}\n\n```\n\nThe linker script must be passed to the linker using a rustc flag like `-C link-arg`.\n\n```\n// file: src/main.rs\nuse std::ptr;\n\n#[inline(never)]\nfn main() {\n    let xs = [0u32; 2];\n\n    // force LLVM to allocate `xs` on the stack\n    unsafe { ptr::read_volatile(&xs.as_ptr()); }\n}\n\n```\n\n```console\n$ RUSTFLAGS=\"-Z emit-stack-sizes\" cargo build --release\n\n$ size -A target/release/hello | grep stack_sizes || echo section was not found\nsection was not found\n\n$ RUSTFLAGS=\"-Z emit-stack-sizes\" cargo rustc --release -- \\\n    -C link-arg=-Wl,-Tkeep-stack-sizes.x \\\n    -C link-arg=-N\n\n$ size -A target/release/hello | grep stack_sizes\n.stack_sizes                               90   176272\n\n$ # non-allocatable section (flags don't contain the \"A\" (alloc) flag)\n$ readelf -S target/release/hello\nSection Headers:\n  [Nr]   Name              Type             Address           Offset\n       Size              EntSize            Flags  Link  Info  Align\n(..)\n  [1031] .stack_sizes      PROGBITS         000000000002b090  0002b0f0\n       000000000000005a  0000000000000000   L       5     0     1\n\n$ objdump -s -j .stack_sizes target/release/hello\n\ntarget/release/hello:     file format elf64-x86-64\n\nContents of section .stack_sizes:\n 2b090 c0040000 00000000 08f00400 00000000  ................\n 2b0a0 00080005 00000000 00000810 05000000  ................\n 2b0b0 00000000 20050000 00000000 10400500  .... ........@..\n 2b0c0 00000000 00087005 00000000 00000080  ......p.........\n 2b0d0 05000000 00000000 90050000 00000000  ................\n 2b0e0 00a00500 00000000 0000               ..........\n\n```\n\n> Author note: I'm not entirely sure why, in _this_ case, `-N` is required in addition to `-Tkeep-stack-sizes.x`. For example, it's not required when producing statically linked files for the ARM Cortex-M architecture.\n\n## [`env-set`](#env-set)\n\nThe tracking issue for this feature is: [#118372](https://github.com/rust-lang/rust/issues/118372).\n\n---\n\nThis option flag allows to specify environment variables value at compile time to be used by `env!` and `option_env!` macros. It also impacts `tracked_env::var` function from the `proc_macro` crate.\n\nThis information will be stored in the dep-info files. For more information about dep-info files, take a look [here](https://doc.rust-lang.org/cargo/guide/build-cache.html#dep-info-files).\n\nWhen retrieving an environment variable value, the one specified by `--env-set` will take precedence. For example, if you want have `PATH=a` in your environment and pass:\n\n```bash\nrustc --env-set PATH=env\n\n```\n\nThen you will have:\n\n```rust\n#![allow(unused)]\nfn main() {\nassert_eq!(env!(\"PATH\"), \"env\");\n}\n```\n\nIt will trigger a new compilation if any of the `--env-set` argument value is different. So if you first passed:\n\n```bash\n--env-set A=B --env X=12\n\n```\n\nand then on next compilation:\n\n```bash\n--env-set A=B\n\n```\n\n`X` value is different (not set) so the code will be re-compiled.\n\nPlease note that on Windows, environment variables are case insensitive but case preserving whereas `rustc`'s environment variables are case sensitive. For example, having `Path` in your environment (case insensitive) is different than using `rustc --env-set Path=...` (case sensitive).\n\n## [`export-executable-symbols`](#export-executable-symbols)\n\nThe tracking issue for this feature is: [#84161](https://github.com/rust-lang/rust/issues/84161).\n\n---\n\nThe `-Zexport-executable-symbols` compiler flag makes `rustc` export symbols from executables. The resulting binary is runnable, but can also be used as a dynamic library. This is useful for interoperating with programs written in other languages, in particular languages with a runtime like Java or Lua.\n\nFor example on windows:\n\n```rust\n#[no_mangle]\nfn my_function() -> usize {\n    return 42;\n}\n\nfn main() {\n    println!(\"Hello, world!\");\n}\n```\n\nA standard `cargo build` will produce a `.exe` without an export directory. When the `export-executable-symbols` flag is added\n\n```\nexport RUSTFLAGS=\"-Zexport-executable-symbols\"\ncargo build\n\n```\n\nthe binary has an export directory with the functions:\n\n```plain\nThe Export Tables (interpreted .edata section contents)\n\n...\n\n[Ordinal/Name Pointer] Table\n    [   0] my_function\n    [   1] main\n\n```\n\n(the output of `objdump -x` on the binary)\n\nPlease note that the `#[no_mangle]` attribute is required. Without it, the symbol is not exported.\n\nThe equivalent of this flag in C and C++ compilers is the `__declspec(dllexport)` annotation or the `-rdynamic` linker flag.\n\n## [`--extern` Options](#--extern-options)\n\n-   Tracking issue for `--extern` crate modifiers: [#98405](https://github.com/rust-lang/rust/issues/98405)\n-   Tracking issue for `noprelude`: [#98398](https://github.com/rust-lang/rust/issues/98398)\n-   Tracking issue for `priv`: [#98399](https://github.com/rust-lang/rust/issues/98399)\n-   Tracking issue for `nounused`: [#98400](https://github.com/rust-lang/rust/issues/98400)\n-   Tracking issue for `force`: [#111302](https://github.com/rust-lang/rust/issues/111302)\n\nThe behavior of the `--extern` flag can be modified with `noprelude`, `priv` or `nounused` options.\n\nThis is unstable feature, so you have to provide `-Zunstable-options` to enable it.\n\n## [Examples](#examples)\n\nUse your own build of the `core` crate.\n\n`rustc main.rs -Z unstable-options --extern noprelude:core=libcore.rlib`\n\nTo use multiple options, separate them with a comma:\n\n`rustc main.rs -Z unstable-options --extern noprelude,priv,nounused:mydep=mydep.rlib`\n\n## [Options](#options)\n\n-   `noprelude`: Do not add the crate to the external prelude. If used, it will need to be imported using `extern crate`. This is used by the [build-std project](https://github.com/rust-lang/wg-cargo-std-aware/) to simulate compatibility with sysroot-only crates.\n-   `priv`: Mark the crate as a private dependency for the [`exported_private_dependencies`](about:blank/rustc/lints/listing/warn-by-default.html#exported-private-dependencies) lint.\n-   `nounused`: Suppress [`unused-crate-dependencies`](about:blank/rustc/lints/listing/allowed-by-default.html#unused-crate-dependencies) warnings for the crate.\n-   `force`: Resolve the crate as if it is used, even if it is not used. This can be used to satisfy compilation session requirements like the presence of an allocator or panic handler.\n\n## [`external-clangrt`](#external-clangrt)\n\nThis option controls whether the compiler links in its own runtime library for [sanitizers](compiler-flags/./sanitizer.html). Passing this flag makes the compiler _not_ link its own library. For more information, see the section in the sanitizers doc on [working with other languages.](about:blank/compiler-flags/sanitizer.html#working-with-other-languages)\n\n## [`fixed-x18`](#fixed-x18)\n\nThis option prevents the compiler from using the x18 register. It is only supported on aarch64.\n\nFrom the [ABI spec](https://developer.arm.com/documentation/den0024/a/The-ABI-for-ARM-64-bit-Architecture/Register-use-in-the-AArch64-Procedure-Call-Standard/Parameters-in-general-purpose-registers):\n\n> X18 is the platform register and is reserved for the use of platform ABIs. This is an additional temporary register on platforms that don't assign a special meaning to it.\n\nThis flag only has an effect when the x18 register would otherwise be considered a temporary register. When the flag is applied, x18 is always a reserved register.\n\nThis flag is intended for use with the shadow call stack sanitizer. Generally, when that sanitizer is enabled, the x18 register is used to store a pointer to the shadow stack. Enabling this flag prevents the compiler from overwriting the shadow stack pointer with temporary data, which is necessary for the sanitizer to work correctly.\n\nCurrently, the `-Zsanitizer=shadow-call-stack` flag is only supported on platforms that always treat x18 as a reserved register, and the `-Zfixed-x18` flag is not required to use the sanitizer on such platforms. However, the sanitizer may be supported on targets where this is not the case in the future.\n\nIt is undefined behavior for `-Zsanitizer=shadow-call-stack` code to call into code where x18 is a temporary register. On the other hand, when you are _not_ using the shadow call stack sanitizer, compilation units compiled with and without the `-Zfixed-x18` flag are compatible with each other.\n\n## [`function-return`](#function-return)\n\nThe tracking issue for this feature is: https://github.com/rust-lang/rust/issues/116853.\n\n---\n\nOption `-Zfunction-return` controls how function returns are converted.\n\nIt is equivalent to [Clang](https://clang.llvm.org/docs/ClangCommandLineReference.html#cmdoption-clang-mfunction-return)'s and [GCC](https://gcc.gnu.org/onlinedocs/gcc/x86-Options.html#index-mfunction-return)'s `-mfunction-return`. The Linux kernel uses it for RETHUNK builds. For details, see [LLVM commit 2240d72f15f3](https://github.com/llvm/llvm-project/commit/2240d72f15f3b7b9d9fb65450f9bf635fd310f6f) (\"\\[X86\\] initial -mfunction-return=thunk-extern support\") which introduces the feature.\n\nSupported values for this option are:\n\n-   `keep`: do not convert function returns.\n-   `thunk-extern`: convert function returns (`ret`) to jumps (`jmp`) to an external symbol called `__x86_return_thunk`.\n\nLike in Clang, GCC's values `thunk` and `thunk-inline` are not supported.\n\nOnly x86 and non-large code models are supported.\n\n## [`instrument-xray`](#instrument-xray)\n\nThe tracking issue for this feature is: [#102921](https://github.com/rust-lang/rust/issues/102921).\n\n---\n\nEnable generation of NOP sleds for XRay function tracing instrumentation. For more information on XRay, read [LLVM documentation](https://llvm.org/docs/XRay.html), and/or the [XRay whitepaper](http://research.google.com/pubs/pub45287.html).\n\nSet the `-Z instrument-xray` compiler flag in order to enable XRay instrumentation.\n\n-   `-Z instrument-xray` – use the default settings\n-   `-Z instrument-xray=skip-exit` – configure a custom setting\n-   `-Z instrument-xray=ignore-loops,instruction-threshold=300` – multiple settings separated by commas\n\nSupported options:\n\n-   `always` – force instrumentation of all functions\n-   `never` – do no instrument any functions\n-   `ignore-loops` – ignore presence of loops, instrument functions based only on instruction count\n-   `instruction-threshold=10` – set a different instruction threshold for instrumentation\n-   `skip-entry` – do no instrument function entry\n-   `skip-exit` – do no instrument function exit\n\nThe default settings are:\n\n-   instrument both entry & exit from functions\n-   instrument functions with at least 200 instructions, or containing a non-trivial loop\n\nNote that `-Z instrument-xray` only enables generation of NOP sleds which on their own don't do anything useful. In order to actually trace the functions, you will need to link a separate runtime library of your choice, such as Clang's [XRay Runtime Library](https://www.llvm.org/docs/XRay.html#xray-runtime-library).\n\n## [`link-native-libraries`](#link-native-libraries)\n\nThis option allows ignoring libraries specified in `#[link]` attributes instead of passing them to the linker. This can be useful in build systems that manage native libraries themselves and pass them manually, e.g. with `-Clink-arg`.\n\n-   `yes` - Pass native libraries to the linker. Default.\n-   `no` - Don't pass native libraries to the linker.\n\n## [`linker-features`](#linker-features)\n\n---\n\nThe `-Zlinker-features` compiler flag allows enabling or disabling specific features used during linking, and is intended to be stabilized under the codegen options as `-Clinker-features`.\n\nThese feature flags are a flexible extension mechanism that is complementary to linker flavors, designed to avoid the combinatorial explosion of having to create a new set of flavors for each linker feature we'd want to use.\n\nFor example, this design allows:\n\n-   default feature sets for principal flavors, or for specific targets.\n-   flavor-specific features: for example, clang offers automatic cross-linking with `--target`, which gcc-style compilers don't support. The _flavor_ is still a C/C++ compiler, and we don't want to multiply the number of flavors for this use-case. Instead, we can have a single `+target` feature.\n-   umbrella features: for example, if clang accumulates more features in the future than just the `+target` above. That could be modeled as `+clang`.\n-   niche features for resolving specific issues: for example, on Apple targets the linker flag implementing the `as-needed` native link modifier (#99424) is only possible on sufficiently recent linker versions.\n-   still allows for discovery and automation, for example via feature detection. This can be useful in exotic environments/build systems.\n\nThe flag accepts a comma-separated list of features, individually enabled (`+features`) or disabled (`-features`), though currently only one is exposed on the CLI:\n\n-   `lld`: to toggle using the lld linker, either the system-installed binary, or the self-contained `rust-lld` linker.\n\nAs described above, this list is intended to grow in the future.\n\nOne of the most common uses of this flag will be to toggle self-contained linking with `rust-lld` on and off: `-Clinker-features=+lld -Clink-self-contained=+linker` will use the toolchain's `rust-lld` as the linker. Inversely, `-Clinker-features=-lld` would opt out of that, if the current target had self-contained linking enabled by default.\n\n## [`llvm-module-flag`](#llvm-module-flag)\n\n---\n\nThis flag allows adding a key/value to the `!llvm.module.flags` metadata in the LLVM-IR for a compiled Rust module. The syntax is\n\n`-Z llvm_module_flag=<name>:<type>:<value>:<behavior>`\n\nCurrently only u32 values are supported but the type is required to be specified for forward compatibility. The `behavior` element must match one of the named LLVM [metadata behaviors](https://llvm.org/docs/LangRef.html#module-flags-metadata)\n\n## [`location-detail`](#location-detail)\n\nThe tracking issue for this feature is: [#70580](https://github.com/rust-lang/rust/issues/70580).\n\n---\n\nOption `-Z location-detail=val` controls what location details are tracked when using `caller_location`. This allows users to control what location details are printed as part of panic messages, by allowing them to exclude any combination of filenames, line numbers, and column numbers. This option is intended to provide users with a way to mitigate the size impact of `#[track_caller]`.\n\nThis option supports a comma separated list of location details to be included. Valid options within this list are:\n\n-   `file` - the filename of the panic will be included in the panic output\n-   `line` - the source line of the panic will be included in the panic output\n-   `column` - the source column of the panic will be included in the panic output\n\nAny combination of these three options are supported. Alternatively, you can pass `none` to this option, which results in no location details being tracked. If this option is not specified, all three are included by default.\n\nAn example of a panic output when using `-Z location-detail=line`:\n\n```text\npanicked at 'Process blink had a fault', <redacted>:323:0\n\n```\n\nThe code size savings from this option are two-fold. First, the `&'static str` values for each path to a file containing a panic are removed from the binary. For projects with deep directory structures and many files with panics, this can add up. This category of savings can only be realized by excluding filenames from the panic output. Second, savings can be realized by allowing multiple panics to be fused into a single panicking branch. It is often the case that within a single file, multiple panics with the same panic message exist -- e.g. two calls to `Option::unwrap()` in a single line, or two calls to `Result::expect()` on adjacent lines. If column and line information are included in the `Location` struct passed to the panic handler, these branches cannot be fused, as the output is different depending on which panic occurs. However if line and column information is identical for all panics, these branches can be fused, which can lead to substantial code size savings, especially for small embedded binaries with many panics.\n\nThe savings from this option are amplified when combined with the use of `-Zbuild-std`, as otherwise paths for panics within the standard library are still included in your binary.\n\n## [`move_size_limit`](#move_size_limit)\n\n---\n\nThe `-Zmove-size-limit=N` compiler flag enables `large_assignments` lints which will warn when moving objects whose size exceeds `N` bytes.\n\nLint warns only about moves in functions that participate in code generation. Consequently it will be ineffective for compiler invocation that emit metadata only, i.e., `cargo check` like workflows.\n\n## [`no-jump-tables`](#no-jump-tables)\n\nThe tracking issue for this feature is [#116592](https://github.com/rust-lang/rust/issues/116592)\n\n---\n\nThis option enables the `-fno-jump-tables` flag for LLVM, which makes the codegen backend avoid generating jump tables when lowering switches.\n\nThis option adds the LLVM `no-jump-tables=true` attribute to every function.\n\nThe option can be used to help provide protection against jump-oriented-programming (JOP) attacks, such as with the linux kernel's [IBT](https://www.phoronix.com/news/Linux-IBT-By-Default-Tip).\n\n```sh\nRUSTFLAGS=\"-Zno-jump-tables\" cargo +nightly build -Z build-std\n\n```\n\n## [`no-parallel-llvm`](#no-parallel-llvm)\n\n---\n\nThis flag disables parallelization of codegen and linking, while otherwise preserving behavior with regard to codegen units and LTO.\n\nThis flag is not useful for regular users, but it can be useful for debugging the backend. Codegen issues commonly only manifest under specific circumstances, e.g. if multiple codegen units are used and ThinLTO is enabled. Serialization of these threaded configurations makes the use of LLVM debugging facilities easier, by avoiding the interleaving of output.\n\n## [`no-unique-section-names`](#no-unique-section-names)\n\n---\n\nThis flag currently applies only to ELF-based targets using the LLVM codegen backend. It prevents the generation of unique ELF section names for each separate code and data item when `-Z function-sections` is also in use, which is the default for most targets. This option can reduce the size of object files, and depending on the linker, the final ELF binary as well.\n\nFor example, a function `func` will by default generate a code section called `.text.func`. Normally this is fine because the linker will merge all those `.text.*` sections into a single one in the binary. However, starting with [LLVM 12](https://github.com/llvm/llvm-project/commit/ee5d1a04), the backend will also generate unique section names for exception handling, so you would see a section name of `.gcc_except_table.func` in the object file and potentially in the final ELF binary, which could add significant bloat to programs that contain many functions.\n\nThis flag instructs LLVM to use the same `.text` and `.gcc_except_table` section name for each function, and it is analogous to Clang's `-fno-unique-section-names` option.\n\n## [`on-broken-pipe`](#on-broken-pipe)\n\n---\n\nThe tracking issue for this feature is: [#97889](https://github.com/rust-lang/rust/issues/97889)\n\nNote: The ui for this feature was previously an attribute named `#[unix_sigpipe = \"...\"]`.\n\n---\n\n## [Overview](#overview)\n\nThe `-Zon-broken-pipe=...` compiler flag can be used to specify how libstd shall setup `SIGPIPE` on Unix platforms before invoking `fn main()`. This flag is ignored on non-Unix targets. The flag can be used with three different values or be omitted entirely. It affects `SIGPIPE` before `fn main()` and before children get `exec()`'ed:\n\n| Compiler flag | `SIGPIPE` before `fn main()` | `SIGPIPE` before child `exec()` |\n| --- | --- | --- |\n| not used | `SIG_IGN` | `SIG_DFL` |\n| `-Zon-broken-pipe=kill` | `SIG_DFL` | not touched |\n| `-Zon-broken-pipe=error` | `SIG_IGN` | not touched |\n| `-Zon-broken-pipe=inherit` | not touched | not touched |\n\n## [`-Zon-broken-pipe` not used](#-zon-broken-pipe-not-used)\n\nIf `-Zon-broken-pipe` is not used, libstd will behave in the manner it has since 2014, before Rust 1.0. `SIGPIPE` will be set to `SIG_IGN` before `fn main()` and result in `EPIPE` errors which are converted to `std::io::ErrorKind::BrokenPipe`.\n\nWhen spawning child processes, `SIGPIPE` will be set to `SIG_DFL` before doing the underlying `exec()` syscall.\n\n## [`-Zon-broken-pipe=kill`](#-zon-broken-pipekill)\n\nSet the `SIGPIPE` handler to `SIG_DFL` before invoking `fn main()`. This will result in your program getting killed if it tries to write to a closed pipe. This is normally what you want if your program produces textual output.\n\nWhen spawning child processes, `SIGPIPE` will not be touched. This normally means child processes inherit `SIG_DFL` for `SIGPIPE`.\n\n### [Example](#example-1)\n\n```rust\nfn main() {\n    loop {\n        println!(\"hello world\");\n    }\n}\n```\n\n```console\n$ rustc -Zon-broken-pipe=kill main.rs\n$ ./main | head -n1\nhello world\n\n```\n\n## [`-Zon-broken-pipe=error`](#-zon-broken-pipeerror)\n\nSet the `SIGPIPE` handler to `SIG_IGN` before invoking `fn main()`. This will result in `ErrorKind::BrokenPipe` errors if you program tries to write to a closed pipe. This is normally what you want if you for example write socket servers, socket clients, or pipe peers.\n\nWhen spawning child processes, `SIGPIPE` will not be touched. This normally means child processes inherit `SIG_IGN` for `SIGPIPE`.\n\n### [Example](#example-2)\n\n```rust\nfn main() {\n    loop {\n        println!(\"hello world\");\n    }\n}\n```\n\n```console\n$ rustc -Zon-broken-pipe=error main.rs\n$ ./main | head -n1\nhello world\nthread 'main' panicked at library/std/src/io/stdio.rs:1118:9:\nfailed printing to stdout: Broken pipe (os error 32)\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\n```\n\n## [`-Zon-broken-pipe=inherit`](#-zon-broken-pipeinherit)\n\nLeave `SIGPIPE` untouched before entering `fn main()`. Unless the parent process has changed the default `SIGPIPE` handler from `SIG_DFL` to something else, this will behave the same as `-Zon-broken-pipe=kill`.\n\nWhen spawning child processes, `SIGPIPE` will not be touched. This normally means child processes inherit `SIG_DFL` for `SIGPIPE`.\n\n## [`print=check-cfg`](#printcheck-cfg)\n\nThe tracking issue for this feature is: [#125704](https://github.com/rust-lang/rust/issues/125704).\n\n---\n\nThis option of the `--print` flag print the list of expected cfgs.\n\nThis is related to the `--check-cfg` flag which allows specifying arbitrary expected names and values.\n\nThis print option works similarly to `--print=cfg` (modulo check-cfg specifics):\n\n-   _check\\_cfg syntax_: _output of --print=check-cfg_\n-   `cfg(windows)`: `windows`\n-   `cfg(feature, values(\"foo\", \"bar\"))`: `feature=\"foo\"` and `feature=\"bar\"`\n-   `cfg(feature, values(none(), \"\"))`: `feature` and `feature=\"\"`\n-   `cfg(feature, values(any()))`: `feature=any()`\n-   `cfg(feature, values())`: `feature=`\n-   `cfg(any())`: `any()`\n-   _nothing_: `any()=any()`\n\nTo be used like this:\n\n```bash\nrustc --print=check-cfg -Zunstable-options lib.rs\n\n```\n\n## [`profile`](#profile)\n\nThe tracking issue for this feature is: [#42524](https://github.com/rust-lang/rust/issues/42524).\n\n---\n\nThis feature allows the generation of code coverage reports.\n\nSet the `-Zprofile` compiler flag in order to enable gcov profiling.\n\nFor example:\n\n```\ncargo new testgcov --bin\ncd testgcov\nexport RUSTFLAGS=\"-Zprofile -Ccodegen-units=1 -Copt-level=0 -Clink-dead-code -Coverflow-checks=off -Zpanic_abort_tests -Cpanic=abort\"\nexport CARGO_INCREMENTAL=0\ncargo build\ncargo run\n\n```\n\nOnce you've built and run your program, files with the `gcno` (after build) and `gcda` (after execution) extensions will be created. You can parse them with [llvm-cov gcov](https://llvm.org/docs/CommandGuide/llvm-cov.html#llvm-cov-gcov) or [grcov](https://github.com/mozilla/grcov).\n\nPlease note that `RUSTFLAGS` by default applies to everything that cargo builds and runs during a build! When the `--target` flag is explicitly passed to cargo, the `RUSTFLAGS` no longer apply to build scripts and procedural macros. For more fine-grained control consider passing a `RUSTC_WRAPPER` program to cargo that only adds the profiling flags to rustc for the specific crates you want to profile.\n\n## [`profile-sample-use`](#profile-sample-use)\n\n---\n\n`-Zprofile-sample-use=code.prof` directs `rustc` to use the profile `code.prof` as a source for Automatic Feedback Directed Optimization (AFDO). See the documentation of [`-Zdebug-info-for-profiling`](compiler-flags/debug_info_for_profiling.html) for more information on using AFDO.\n\n## [`remap-cwd-prefix`](#remap-cwd-prefix)\n\nThe tracking issue for this feature is: [#87325](https://github.com/rust-lang/rust/issues/87325).\n\n---\n\nThis flag will rewrite absolute paths under the current working directory, replacing the current working directory prefix with a specified value.\n\nThe given value may be absolute or relative, or empty. This switch takes precedence over `--remap-path-prefix` in case they would both match a given path.\n\nThis flag helps to produce deterministic output, by removing the current working directory from build output, while allowing the command line to be universally reproducible, such that the same execution will work on all machines, regardless of build environment.\n\n## [Example](#example-3)\n\n```sh\n# This would produce an absolute path to main.rs in build outputs of\n# \"./main.rs\".\nrustc -Z remap-cwd-prefix=. main.rs\n\n```\n\n## [`remap-path-scope`](#remap-path-scope)\n\nThe tracking issue for this feature is: [#111540](https://github.com/rust-lang/rust/issues/111540).\n\n---\n\nWhen the `--remap-path-prefix` option is passed to rustc, source path prefixes in all output will be affected by default. The `--remap-path-scope` argument can be used in conjunction with `--remap-path-prefix` to determine paths in which output context should be affected. This flag accepts a comma-separated list of values and may be specified multiple times, in which case the scopes are aggregated together. The valid scopes are:\n\n-   `macro` - apply remappings to the expansion of `std::file!()` macro. This is where paths in embedded panic messages come from\n-   `diagnostics` - apply remappings to printed compiler diagnostics\n-   `debuginfo` - apply remappings to debug informations\n-   `object` - apply remappings to all paths in compiled executables or libraries, but not elsewhere. Currently an alias for `macro,debuginfo`.\n-   `all` - an alias for all of the above, also equivalent to supplying only `--remap-path-prefix` without `--remap-path-scope`.\n\n## [Example](#example-4)\n\n```sh\n# This would produce an absolute path to main.rs in build outputs of\n# \"./main.rs\".\nrustc --remap-path-prefix=$(PWD)=/remapped -Zremap-path-scope=object main.rs\n\n```\n\n## [`report-time`](#report-time)\n\nThe tracking issue for this feature is: [#64888](https://github.com/rust-lang/rust/issues/64888)\n\n---\n\nThe `report-time` feature adds a possibility to report execution time of the tests generated via `libtest`.\n\nThis is unstable feature, so you have to provide `-Zunstable-options` to get this feature working.\n\nSample usage command:\n\n```sh\n./test_executable -Zunstable-options --report-time\n\n```\n\nAvailable options:\n\n```sh\n--report-time\n                Show execution time of each test.\n                Threshold values for colorized output can be\n                configured via\n                `RUST_TEST_TIME_UNIT`, `RUST_TEST_TIME_INTEGRATION`\n                and\n                `RUST_TEST_TIME_DOCTEST` environment variables.\n                Expected format of environment variable is\n                `VARIABLE=WARN_TIME,CRITICAL_TIME`.\n                Not available for --format=terse\n--ensure-time\n                Treat excess of the test execution time limit as\n                error.\n                Threshold values for this option can be configured via\n                `RUST_TEST_TIME_UNIT`, `RUST_TEST_TIME_INTEGRATION`\n                and\n                `RUST_TEST_TIME_DOCTEST` environment variables.\n                Expected format of environment variable is\n                `VARIABLE=WARN_TIME,CRITICAL_TIME`.\n                `CRITICAL_TIME` here means the limit that should not be\n                exceeded by test.\n\n```\n\nExample of the environment variable format:\n\n```sh\nRUST_TEST_TIME_UNIT=100,200\n\n```\n\nwhere 100 stands for warn time, and 200 stands for critical time.\n\n## [Examples](#examples-1)\n\n```sh\ncargo test --tests -- -Zunstable-options --report-time\n    Finished dev [unoptimized + debuginfo] target(s) in 0.02s\n     Running target/debug/deps/example-27fb188025bec02c\n\nrunning 3 tests\ntest tests::unit_test_quick ... ok <0.000s>\ntest tests::unit_test_warn ... ok <0.055s>\ntest tests::unit_test_critical ... ok <0.110s>\n\ntest result: ok. 3 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n\n     Running target/debug/deps/tests-cedb06f6526d15d9\n\nrunning 3 tests\ntest unit_test_quick ... ok <0.000s>\ntest unit_test_warn ... ok <0.550s>\ntest unit_test_critical ... ok <1.100s>\n\ntest result: ok. 3 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n\n```\n\n## [`sanitizer`](#sanitizer)\n\nSanitizers are tools that help detect and prevent various types of bugs and vulnerabilities in software. They are available in compilers and work by instrumenting the code to add additional runtime checks. While they provide powerful tools for identifying bugs or security issues, it's important to note that using sanitizers can introduce runtime overhead and might not catch all possible issues. Therefore, they are typically used alongside other best practices in software development, such as testing and fuzzing, to ensure the highest level of software quality and security.\n\nThe tracking issues for this feature are:\n\n-   [#39699](https://github.com/rust-lang/rust/issues/39699).\n-   [#89653](https://github.com/rust-lang/rust/issues/89653).\n\n---\n\nThis feature allows for use of one of following sanitizers:\n\n-   Those intended for testing or fuzzing (but not production use):\n    \n    -   [AddressSanitizer](about:blank/compiler-flags/sanitizer.html#addresssanitizer) a fast memory error detector.\n    -   [HWAddressSanitizer](about:blank/compiler-flags/sanitizer.html#hwaddresssanitizer) a memory error detector similar to AddressSanitizer, but based on partial hardware assistance.\n    -   [LeakSanitizer](about:blank/compiler-flags/sanitizer.html#leaksanitizer) a run-time memory leak detector.\n    -   [MemorySanitizer](about:blank/compiler-flags/sanitizer.html#memorysanitizer) a detector of uninitialized reads.\n    -   [ThreadSanitizer](about:blank/compiler-flags/sanitizer.html#threadsanitizer) a fast data race detector.\n-   Those that apart from testing, may be used in production:\n    \n    -   [ControlFlowIntegrity](about:blank/compiler-flags/sanitizer.html#controlflowintegrity) LLVM Control Flow Integrity (CFI) provides forward-edge control flow protection.\n    -   [DataFlowSanitizer](about:blank/compiler-flags/sanitizer.html#dataflowsanitizer) a generic dynamic data flow analysis framework.\n    -   [KernelControlFlowIntegrity](about:blank/compiler-flags/sanitizer.html#kernelcontrolflowintegrity) LLVM Kernel Control Flow Integrity (KCFI) provides forward-edge control flow protection for operating systems kernels.\n    -   [MemTagSanitizer](about:blank/compiler-flags/sanitizer.html#memtagsanitizer) fast memory error detector based on Armv8.5-A Memory Tagging Extension.\n    -   [SafeStack](about:blank/compiler-flags/sanitizer.html#safestack) provides backward-edge control flow protection by separating the stack into safe and unsafe regions.\n    -   [ShadowCallStack](about:blank/compiler-flags/sanitizer.html#shadowcallstack) provides backward-edge control flow protection (aarch64 only).\n\nTo enable a sanitizer compile with `-Zsanitizer=address`, `-Zsanitizer=cfi`, `-Zsanitizer=dataflow`,`-Zsanitizer=hwaddress`, `-Zsanitizer=leak`, `-Zsanitizer=memory`, `-Zsanitizer=memtag`, `-Zsanitizer=shadow-call-stack`, or `-Zsanitizer=thread`. You might also need the `--target` and `build-std` flags. If you're working with other languages that are also instrumented with sanitizers, you might need the `external-clangrt` flag. See the section on [working with other languages](about:blank/compiler-flags/sanitizer.html#working-with-other-languages).\n\nExample:\n\n```shell\n$ RUSTFLAGS=-Zsanitizer=address cargo build -Zbuild-std --target x86_64-unknown-linux-gnu\n\n```\n\nAdditional options for sanitizers can be passed to LLVM command line argument processor via LLVM arguments using `llvm-args` codegen option (e.g., `-Cllvm-args=-dfsan-combine-pointer-labels-on-load=false`). See the sanitizer documentation for more information about additional options.\n\n## [AddressSanitizer](#addresssanitizer)\n\nAddressSanitizer is a memory error detector. It can detect the following types of bugs:\n\n-   Out of bound accesses to heap, stack and globals\n-   Use after free\n-   Use after return (runtime flag `ASAN_OPTIONS=detect_stack_use_after_return=1`)\n-   Use after scope\n-   Double-free, invalid free\n-   Memory leaks\n\nThe memory leak detection is enabled by default on Linux, and can be enabled with runtime flag `ASAN_OPTIONS=detect_leaks=1` on macOS.\n\nAddressSanitizer is supported on the following targets:\n\n-   `aarch64-apple-darwin`\n-   `aarch64-unknown-fuchsia`\n-   `aarch64-unknown-linux-gnu`\n-   `x86_64-apple-darwin`\n-   `x86_64-unknown-fuchsia`\n-   `x86_64-unknown-freebsd`\n-   `x86_64-unknown-linux-gnu`\n\nAddressSanitizer works with non-instrumented code although it will impede its ability to detect some bugs. It is not expected to produce false positive reports.\n\nSee the [Clang AddressSanitizer documentation](https://clang.llvm.org/docs/AddressSanitizer.html) for more details.\n\n## [Examples](#examples-2)\n\nStack buffer overflow:\n\n```rust\nfn main() {\n    let xs = [0, 1, 2, 3];\n    let _y = unsafe { *xs.as_ptr().offset(4) };\n}\n```\n\n```shell\n$ export RUSTFLAGS=-Zsanitizer=address RUSTDOCFLAGS=-Zsanitizer=address\n$ cargo run -Zbuild-std --target x86_64-unknown-linux-gnu\n==37882==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7ffe400e6250 at pc 0x5609a841fb20 bp 0x7ffe400e6210 sp 0x7ffe400e6208\nREAD of size 4 at 0x7ffe400e6250 thread T0\n    #0 0x5609a841fb1f in example::main::h628ffc6626ed85b2 /.../src/main.rs:3:23\n    ...\n\nAddress 0x7ffe400e6250 is located in stack of thread T0 at offset 48 in frame\n    #0 0x5609a841f8af in example::main::h628ffc6626ed85b2 /.../src/main.rs:1\n\n  This frame has 1 object(s):\n    [32, 48) 'xs' (line 2) <== Memory access at offset 48 overflows this variable\nHINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork\n      (longjmp and C++ exceptions *are* supported)\nSUMMARY: AddressSanitizer: stack-buffer-overflow /.../src/main.rs:3:23 in example::main::h628ffc6626ed85b2\nShadow bytes around the buggy address:\n  0x100048014bf0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x100048014c00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x100048014c10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x100048014c20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x100048014c30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n=>0x100048014c40: 00 00 00 00 f1 f1 f1 f1 00 00[f3]f3 00 00 00 00\n  0x100048014c50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x100048014c60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x100048014c70: f1 f1 f1 f1 00 00 f3 f3 00 00 00 00 00 00 00 00\n  0x100048014c80: 00 00 00 00 00 00 00 00 00 00 00 00 f1 f1 f1 f1\n  0x100048014c90: 00 00 f3 f3 00 00 00 00 00 00 00 00 00 00 00 00\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07\n  Heap left redzone:       fa\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Container overflow:      fc\n  Array cookie:            ac\n  Intra object redzone:    bb\n  ASan internal:           fe\n  Left alloca redzone:     ca\n  Right alloca redzone:    cb\n  Shadow gap:              cc\n==37882==ABORTING\n\n```\n\nUse of a stack object after its scope has already ended:\n\n```rust\nstatic mut P: *mut usize = std::ptr::null_mut();\n\nfn main() {\n    unsafe {\n        {\n            let mut x = 0;\n            P = &mut x;\n        }\n        std::ptr::write_volatile(P, 123);\n    }\n}\n```\n\n```shell\n$ export RUSTFLAGS=-Zsanitizer=address RUSTDOCFLAGS=-Zsanitizer=address\n$ cargo run -Zbuild-std --target x86_64-unknown-linux-gnu\n=================================================================\n==39249==ERROR: AddressSanitizer: stack-use-after-scope on address 0x7ffc7ed3e1a0 at pc 0x55c98b262a8e bp 0x7ffc7ed3e050 sp 0x7ffc7ed3e048\nWRITE of size 8 at 0x7ffc7ed3e1a0 thread T0\n    #0 0x55c98b262a8d in core::ptr::write_volatile::he21f1df5a82f329a /.../src/rust/src/libcore/ptr/mod.rs:1048:5\n    #1 0x55c98b262cd2 in example::main::h628ffc6626ed85b2 /.../src/main.rs:9:9\n    ...\n\nAddress 0x7ffc7ed3e1a0 is located in stack of thread T0 at offset 32 in frame\n    #0 0x55c98b262bdf in example::main::h628ffc6626ed85b2 /.../src/main.rs:3\n\n  This frame has 1 object(s):\n    [32, 40) 'x' (line 6) <== Memory access at offset 32 is inside this variable\nHINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork\n      (longjmp and C++ exceptions *are* supported)\nSUMMARY: AddressSanitizer: stack-use-after-scope /.../src/rust/src/libcore/ptr/mod.rs:1048:5 in core::ptr::write_volatile::he21f1df5a82f329a\nShadow bytes around the buggy address:\n  0x10000fd9fbe0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10000fd9fbf0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10000fd9fc00: 00 00 00 00 00 00 00 00 00 00 00 00 f1 f1 f1 f1\n  0x10000fd9fc10: f8 f8 f3 f3 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10000fd9fc20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n=>0x10000fd9fc30: f1 f1 f1 f1[f8]f3 f3 f3 00 00 00 00 00 00 00 00\n  0x10000fd9fc40: 00 00 00 00 00 00 00 00 00 00 00 00 f1 f1 f1 f1\n  0x10000fd9fc50: 00 00 f3 f3 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10000fd9fc60: 00 00 00 00 00 00 00 00 f1 f1 f1 f1 00 00 f3 f3\n  0x10000fd9fc70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10000fd9fc80: 00 00 00 00 f1 f1 f1 f1 00 00 f3 f3 00 00 00 00\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07\n  Heap left redzone:       fa\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Container overflow:      fc\n  Array cookie:            ac\n  Intra object redzone:    bb\n  ASan internal:           fe\n  Left alloca redzone:     ca\n  Right alloca redzone:    cb\n  Shadow gap:              cc\n==39249==ABORTING\n\n```\n\n## [ControlFlowIntegrity](#controlflowintegrity)\n\nThe LLVM CFI support in the Rust compiler provides forward-edge control flow protection for both Rust-compiled code only and for C or C++ and Rust -compiled code mixed-language binaries, also known as “mixed binaries” (i.e., for when C or C++ and Rust -compiled code share the same virtual address space), by aggregating function pointers in groups identified by their return and parameter types.\n\nLLVM CFI can be enabled with `-Zsanitizer=cfi` and requires LTO (i.e., `-Clinker-plugin-lto` or `-Clto`). Cross-language LLVM CFI can be enabled with `-Zsanitizer=cfi`, and requires the `-Zsanitizer-cfi-normalize-integers` option to be used with Clang `-fsanitize-cfi-icall-experimental-normalize-integers` option for cross-language LLVM CFI support, and proper (i.e., non-rustc) LTO (i.e., `-Clinker-plugin-lto`).\n\nIt is recommended to rebuild the standard library with CFI enabled by using the Cargo build-std feature (i.e., `-Zbuild-std`) when enabling CFI.\n\nSee the [Clang ControlFlowIntegrity documentation](https://clang.llvm.org/docs/ControlFlowIntegrity.html) for more details.\n\n## [Example 1: Redirecting control flow using an indirect branch/call to an invalid destination](#example-1-redirecting-control-flow-using-an-indirect-branchcall-to-an-invalid-destination)\n\n```rust\n#![feature(naked_functions)]\n\nuse std::arch::asm;\nuse std::mem;\n\nfn add_one(x: i32) -> i32 {\n    x + 1\n}\n\n#[naked]\npub extern \"C\" fn add_two(x: i32) {\n    // x + 2 preceded by a landing pad/nop block\n    unsafe {\n        asm!(\n            \"\n             nop\n             nop\n             nop\n             nop\n             nop\n             nop\n             nop\n             nop\n             nop\n             lea eax, [rdi+2]\n             ret\n        \",\n            options(noreturn)\n        );\n    }\n}\n\nfn do_twice(f: fn(i32) -> i32, arg: i32) -> i32 {\n    f(arg) + f(arg)\n}\n\nfn main() {\n    let answer = do_twice(add_one, 5);\n\n    println!(\"The answer is: {}\", answer);\n\n    println!(\"With CFI enabled, you should not see the next answer\");\n    let f: fn(i32) -> i32 = unsafe {\n        // Offset 0 is a valid branch/call destination (i.e., the function entry\n        // point), but offsets 1-8 within the landing pad/nop block are invalid\n        // branch/call destinations (i.e., within the body of the function).\n        mem::transmute::<*const u8, fn(i32) -> i32>((add_two as *const u8).offset(5))\n    };\n    let next_answer = do_twice(f, 5);\n\n    println!(\"The next answer is: {}\", next_answer);\n}\n```\n\nFig. 1. Redirecting control flow using an indirect branch/call to an invalid destination (i.e., within the body of the function).\n\n```shell\n$ cargo run --release\n   Compiling rust-cfi-1 v0.1.0 (/home/rcvalle/rust-cfi-1)\n    Finished release [optimized] target(s) in 0.42s\n     Running `target/release/rust-cfi-1`\nThe answer is: 12\nWith CFI enabled, you should not see the next answer\nThe next answer is: 14\n$\n\n```\n\nFig. 2. Build and execution of Fig. 1 with LLVM CFI disabled.\n\n```shell\n$ RUSTFLAGS=\"-Clinker-plugin-lto -Clinker=clang -Clink-arg=-fuse-ld=lld -Zsanitizer=cfi\" cargo run -Zbuild-std -Zbuild-std-features --release --target x86_64-unknown-linux-gnu\n   ...\n   Compiling rust-cfi-1 v0.1.0 (/home/rcvalle/rust-cfi-1)\n    Finished release [optimized] target(s) in 1m 08s\n     Running `target/x86_64-unknown-linux-gnu/release/rust-cfi-1`\nThe answer is: 12\nWith CFI enabled, you should not see the next answer\nIllegal instruction\n$\n\n```\n\nFig. 3. Build and execution of Fig. 1 with LLVM CFI enabled.\n\nWhen LLVM CFI is enabled, if there are any attempts to change/hijack control flow using an indirect branch/call to an invalid destination, the execution is terminated (see Fig. 3).\n\n## [Example 2: Redirecting control flow using an indirect branch/call to a function with a different number of parameters](#example-2-redirecting-control-flow-using-an-indirect-branchcall-to-a-function-with-a-different-number-of-parameters)\n\n```rust\nuse std::mem;\n\nfn add_one(x: i32) -> i32 {\n    x + 1\n}\n\nfn add_two(x: i32, _y: i32) -> i32 {\n    x + 2\n}\n\nfn do_twice(f: fn(i32) -> i32, arg: i32) -> i32 {\n    f(arg) + f(arg)\n}\n\nfn main() {\n    let answer = do_twice(add_one, 5);\n\n    println!(\"The answer is: {}\", answer);\n\n    println!(\"With CFI enabled, you should not see the next answer\");\n    let f: fn(i32) -> i32 =\n        unsafe { mem::transmute::<*const u8, fn(i32) -> i32>(add_two as *const u8) };\n    let next_answer = do_twice(f, 5);\n\n    println!(\"The next answer is: {}\", next_answer);\n}\n```\n\nFig. 4. Redirecting control flow using an indirect branch/call to a function with a different number of parameters than arguments intended/passed in the call/branch site.\n\n```shell\n$ cargo run --release\n   Compiling rust-cfi-2 v0.1.0 (/home/rcvalle/rust-cfi-2)\n    Finished release [optimized] target(s) in 0.43s\n     Running `target/release/rust-cfi-2`\nThe answer is: 12\nWith CFI enabled, you should not see the next answer\nThe next answer is: 14\n$\n\n```\n\nFig. 5. Build and execution of Fig. 4 with LLVM CFI disabled.\n\n```shell\n$ RUSTFLAGS=\"-Clinker-plugin-lto -Clinker=clang -Clink-arg=-fuse-ld=lld -Zsanitizer=cfi\" cargo run -Zbuild-std -Zbuild-std-features --release --target x86_64-unknown-linux-gnu\n   ...\n   Compiling rust-cfi-2 v0.1.0 (/home/rcvalle/rust-cfi-2)\n    Finished release [optimized] target(s) in 1m 08s\n     Running `target/x86_64-unknown-linux-gnu/release/rust-cfi-2`\nThe answer is: 12\nWith CFI enabled, you should not see the next answer\nIllegal instruction\n$\n\n```\n\nFig. 6. Build and execution of Fig. 4 with LLVM CFI enabled.\n\nWhen LLVM CFI is enabled, if there are any attempts to change/hijack control flow using an indirect branch/call to a function with different number of parameters than arguments intended/passed in the call/branch site, the execution is also terminated (see Fig. 6).\n\n## [Example 3: Redirecting control flow using an indirect branch/call to a function with different return and parameter types](#example-3-redirecting-control-flow-using-an-indirect-branchcall-to-a-function-with-different-return-and-parameter-types)\n\n```rust\nuse std::mem;\n\nfn add_one(x: i32) -> i32 {\n    x + 1\n}\n\nfn add_two(x: i64) -> i64 {\n    x + 2\n}\n\nfn do_twice(f: fn(i32) -> i32, arg: i32) -> i32 {\n    f(arg) + f(arg)\n}\n\nfn main() {\n    let answer = do_twice(add_one, 5);\n\n    println!(\"The answer is: {}\", answer);\n\n    println!(\"With CFI enabled, you should not see the next answer\");\n    let f: fn(i32) -> i32 =\n        unsafe { mem::transmute::<*const u8, fn(i32) -> i32>(add_two as *const u8) };\n    let next_answer = do_twice(f, 5);\n\n    println!(\"The next answer is: {}\", next_answer);\n}\n```\n\nFig. 7. Redirecting control flow using an indirect branch/call to a function with different return and parameter types than the return type expected and arguments intended/passed at the call/branch site.\n\n```shell\n$ cargo run --release\n   Compiling rust-cfi-3 v0.1.0 (/home/rcvalle/rust-cfi-3)\n    Finished release [optimized] target(s) in 0.44s\n     Running `target/release/rust-cfi-3`\nThe answer is: 12\nWith CFI enabled, you should not see the next answer\nThe next answer is: 14\n$\n\n```\n\nFig. 8. Build and execution of Fig. 7 with LLVM CFI disabled.\n\n```shell\n$ RUSTFLAGS=\"-Clinker-plugin-lto -Clinker=clang -Clink-arg=-fuse-ld=lld -Zsanitizer=cfi\" cargo run -Zbuild-std -Zbuild-std-features --release --target x86_64-unknown-linux-gnu\n   ...\n   Compiling rust-cfi-3 v0.1.0 (/home/rcvalle/rust-cfi-3)\n    Finished release [optimized] target(s) in 1m 07s\n     Running `target/x86_64-unknown-linux-gnu/release/rust-cfi-3`\nThe answer is: 12\nWith CFI enabled, you should not see the next answer\nIllegal instruction\n$\n\n```\n\nFig. 9. Build and execution of Fig. 7 with LLVM CFI enabled.\n\nWhen LLVM CFI is enabled, if there are any attempts to change/hijack control flow using an indirect branch/call to a function with different return and parameter types than the return type expected and arguments intended/passed in the call/branch site, the execution is also terminated (see Fig. 9).\n\n## [Example 4: Redirecting control flow using an indirect branch/call to a function with different return and parameter types across the FFI boundary](#example-4-redirecting-control-flow-using-an-indirect-branchcall-to-a-function-with-different-return-and-parameter-types-across-the-ffi-boundary)\n\n```ignore\nint\ndo_twice(int (*fn)(int), int arg)\n{\n    return fn(arg) + fn(arg);\n}\n\n```\n\nFig. 10. Example C library.\n\n```ignore\nuse std::mem;\n\n#[link(name = \"foo\")]\nextern \"C\" {\n    fn do_twice(f: unsafe extern \"C\" fn(i32) -> i32, arg: i32) -> i32;\n}\n\nunsafe extern \"C\" fn add_one(x: i32) -> i32 {\n    x + 1\n}\n\nunsafe extern \"C\" fn add_two(x: i64) -> i64 {\n    x + 2\n}\n\nfn main() {\n    let answer = unsafe { do_twice(add_one, 5) };\n\n    println!(\"The answer is: {}\", answer);\n\n    println!(\"With CFI enabled, you should not see the next answer\");\n    let f: unsafe extern \"C\" fn(i32) -> i32 = unsafe {\n        mem::transmute::<*const u8, unsafe extern \"C\" fn(i32) -> i32>(add_two as *const u8)\n    };\n    let next_answer = unsafe { do_twice(f, 5) };\n\n    println!(\"The next answer is: {}\", next_answer);\n}\n\n```\n\nFig. 11. Redirecting control flow using an indirect branch/call to a function with different return and parameter types than the return type expected and arguments intended/passed in the call/branch site, across the FFI boundary.\n\n```shell\n$ make\nmkdir -p target/release\nclang -I. -Isrc -Wall -c src/foo.c -o target/release/libfoo.o\nllvm-ar rcs target/release/libfoo.a target/release/libfoo.o\nRUSTFLAGS=\"-L./target/release -Clinker=clang -Clink-arg=-fuse-ld=lld\" cargo build --release\n   Compiling rust-cfi-4 v0.1.0 (/home/rcvalle/rust-cfi-4)\n    Finished release [optimized] target(s) in 0.49s\n$ ./target/release/rust-cfi-4\nThe answer is: 12\nWith CFI enabled, you should not see the next answer\nThe next answer is: 14\n$\n\n```\n\nFig. 12. Build and execution of Figs. 10–11 with LLVM CFI disabled.\n\n```shell\n$ make\nmkdir -p target/release\nclang -I. -Isrc -Wall -flto -fsanitize=cfi -fsanitize-cfi-icall-experimental-normalize-integers -fvisibility=hidden -c -emit-llvm src/foo.c -o target/release/libfoo.bc\nllvm-ar rcs target/release/libfoo.a target/release/libfoo.bc\nRUSTFLAGS=\"-L./target/release -Clinker-plugin-lto -Clinker=clang -Clink-arg=-fuse-ld=lld -Zsanitizer=cfi -Zsanitizer-cfi-normalize-integers\" cargo build -Zbuild-std -Zbuild-std-features --release --target x86_64-unknown-linux-gnu\n   ...\n   Compiling rust-cfi-4 v0.1.0 (/home/rcvalle/rust-cfi-4)\n    Finished release [optimized] target(s) in 1m 06s\n$ ./target/x86_64-unknown-linux-gnu/release/rust-cfi-4\nThe answer is: 12\nWith CFI enabled, you should not see the next answer\nIllegal instruction\n$\n\n```\n\nFig. 13. Build and execution of FIgs. 10–11 with LLVM CFI enabled.\n\nWhen LLVM CFI is enabled, if there are any attempts to redirect control flow using an indirect branch/call to a function with different return and parameter types than the return type expected and arguments intended/passed in the call/branch site, even across the FFI boundary and for extern \"C\" function types indirectly called (i.e., callbacks/function pointers) across the FFI boundary, the execution is also terminated (see Fig. 13).\n\n## [HWAddressSanitizer](#hwaddresssanitizer)\n\nHWAddressSanitizer is a newer variant of AddressSanitizer that consumes much less memory.\n\nHWAddressSanitizer is supported on the following targets:\n\n-   `aarch64-linux-android`\n-   `aarch64-unknown-linux-gnu`\n\nHWAddressSanitizer requires `tagged-globals` target feature to instrument globals. To enable this target feature compile with `-C target-feature=+tagged-globals`\n\nSee the [Clang HWAddressSanitizer documentation](https://clang.llvm.org/docs/HardwareAssistedAddressSanitizerDesign.html) for more details.\n\n## [Example](#example-5)\n\nHeap buffer overflow:\n\n```rust\nfn main() {\n    let xs = vec![0, 1, 2, 3];\n    let _y = unsafe { *xs.as_ptr().offset(4) };\n}\n```\n\n```shell\n$ rustc main.rs -Zsanitizer=hwaddress -C target-feature=+tagged-globals -C\nlinker=aarch64-linux-gnu-gcc -C link-arg=-fuse-ld=lld --target\naarch64-unknown-linux-gnu\n\n```\n\n```shell\n$ ./main\n==241==ERROR: HWAddressSanitizer: tag-mismatch on address 0xefdeffff0050 at pc 0xaaaae0ae4a98\nREAD of size 4 at 0xefdeffff0050 tags: 2c/00 (ptr/mem) in thread T0\n    #0 0xaaaae0ae4a94  (/.../main+0x54a94)\n    ...\n\n[0xefdeffff0040,0xefdeffff0060) is a small allocated heap chunk; size: 32 offset: 16\n0xefdeffff0050 is located 0 bytes to the right of 16-byte region [0xefdeffff0040,0xefdeffff0050)\nallocated here:\n    #0 0xaaaae0acb80c  (/.../main+0x3b80c)\n    ...\n\nThread: T0 0xeffe00002000 stack: [0xffffc28ad000,0xffffc30ad000) sz: 8388608 tls: [0xffffaa10a020,0xffffaa10a7d0)\nMemory tags around the buggy address (one tag corresponds to 16 bytes):\n  0xfefcefffef80: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n  0xfefcefffef90: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n  0xfefcefffefa0: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n  0xfefcefffefb0: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n  0xfefcefffefc0: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n  0xfefcefffefd0: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n  0xfefcefffefe0: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n  0xfefcefffeff0: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n=>0xfefceffff000: d7  d7  05  00  2c [00] 00  00  00  00  00  00  00  00  00  00\n  0xfefceffff010: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n  0xfefceffff020: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n  0xfefceffff030: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n  0xfefceffff040: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n  0xfefceffff050: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n  0xfefceffff060: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n  0xfefceffff070: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n  0xfefceffff080: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\nTags for short granules around the buggy address (one tag corresponds to 16 bytes):\n  0xfefcefffeff0: ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..\n=>0xfefceffff000: ..  ..  8c  ..  .. [..] ..  ..  ..  ..  ..  ..  ..  ..  ..  ..\n  0xfefceffff010: ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..\nSee https://clang.llvm.org/docs/HardwareAssistedAddressSanitizerDesign.html#short-granules for a description of short granule tags\nRegisters where the failure occurred (pc 0xaaaae0ae4a98):\n    x0  2c00efdeffff0050  x1  0000000000000004  x2  0000000000000004  x3  0000000000000000\n    x4  0000fffefc30ac37  x5  000000000000005d  x6  00000ffffc30ac37  x7  0000efff00000000\n    x8  2c00efdeffff0050  x9  0200efff00000000  x10 0000000000000000  x11 0200efff00000000\n    x12 0200effe00000310  x13 0200effe00000310  x14 0000000000000008  x15 5d00ffffc30ac360\n    x16 0000aaaae0ad062c  x17 0000000000000003  x18 0000000000000001  x19 0000ffffc30ac658\n    x20 4e00ffffc30ac6e0  x21 0000aaaae0ac5e10  x22 0000000000000000  x23 0000000000000000\n    x24 0000000000000000  x25 0000000000000000  x26 0000000000000000  x27 0000000000000000\n    x28 0000000000000000  x29 0000ffffc30ac5a0  x30 0000aaaae0ae4a98\nSUMMARY: HWAddressSanitizer: tag-mismatch (/.../main+0x54a94)\n\n```\n\n## [KernelControlFlowIntegrity](#kernelcontrolflowintegrity)\n\nThe LLVM Kernel Control Flow Integrity (CFI) support to the Rust compiler initially provides forward-edge control flow protection for operating systems kernels for Rust-compiled code only by aggregating function pointers in groups identified by their return and parameter types. (See [LLVM commit cff5bef \"KCFI sanitizer\"](https://github.com/llvm/llvm-project/commit/cff5bef948c91e4919de8a5fb9765e0edc13f3de).)\n\nForward-edge control flow protection for C or C++ and Rust -compiled code \"mixed binaries\" (i.e., for when C or C++ and Rust -compiled code share the same virtual address space) will be provided in later work by defining and using compatible type identifiers (see Type metadata in the design document in the tracking issue [#89653](https://github.com/rust-lang/rust/issues/89653)).\n\nLLVM KCFI can be enabled with `-Zsanitizer=kcfi`.\n\nLLVM KCFI is supported on the following targets:\n\n-   `aarch64-linux-android`\n-   `aarch64-unknown-linux-gnu`\n-   `x86_64-linux-android`\n-   `x86_64-unknown-linux-gnu`\n\nSee the [Clang KernelControlFlowIntegrity documentation](https://clang.llvm.org/docs/ControlFlowIntegrity.html#fsanitize-kcfi) for more details.\n\n## [DataFlowSanitizer](#dataflowsanitizer)\n\nDataFlowSanitizer is a generalised dynamic data flow analysis.\n\nUnlike other Sanitizer tools, this tool is not designed to detect a specific class of bugs on its own. Instead, it provides a generic dynamic data flow analysis framework to be used by clients to help detect application-specific issues within their own code.\n\nDataFlowSanitizer is supported on the following targets:\n\n-   `x86_64-unknown-linux-gnu`\n\nSee the [Clang DataFlowSanitizer documentation](https://clang.llvm.org/docs/DataFlowSanitizer.html) for more details.\n\n## [KernelAddressSanitizer](#kerneladdresssanitizer)\n\nKernelAddressSanitizer (KASAN) is a freestanding version of AddressSanitizer which is suitable for detecting memory errors in programs which do not have a runtime environment, such as operating system kernels. KernelAddressSanitizer requires manual implementation of the underlying functions used for tracking KernelAddressSanitizer state.\n\nKernelAddressSanitizer is supported on the following targets:\n\n-   `aarch64-unknown-none`\n-   `riscv64gc-unknown-none-elf`\n-   `riscv64imac-unknown-none-elf`\n-   `x86_64-unknown-none`\n\nSee the [Linux Kernel's KernelAddressSanitizer documentation](https://www.kernel.org/doc/html/latest/dev-tools/kasan.html) for more details.\n\n## [LeakSanitizer](#leaksanitizer)\n\nLeakSanitizer is run-time memory leak detector.\n\nLeakSanitizer is supported on the following targets:\n\n-   `aarch64-apple-darwin`\n-   `aarch64-unknown-linux-gnu`\n-   `x86_64-apple-darwin`\n-   `x86_64-unknown-linux-gnu`\n\nSee the [Clang LeakSanitizer documentation](https://clang.llvm.org/docs/LeakSanitizer.html) for more details.\n\n## [MemorySanitizer](#memorysanitizer)\n\nMemorySanitizer is detector of uninitialized reads.\n\nMemorySanitizer is supported on the following targets:\n\n-   `aarch64-unknown-linux-gnu`\n-   `x86_64-unknown-freebsd`\n-   `x86_64-unknown-linux-gnu`\n\nMemorySanitizer requires all program code to be instrumented. C/C++ dependencies need to be recompiled using Clang with `-fsanitize=memory` option. Failing to achieve that will result in false positive reports.\n\nSee the [Clang MemorySanitizer documentation](https://clang.llvm.org/docs/MemorySanitizer.html) for more details.\n\n## [Example](#example-6)\n\nDetecting the use of uninitialized memory. The `-Zbuild-std` flag rebuilds and instruments the standard library, and is strictly necessary for the correct operation of the tool. The `-Zsanitizer-memory-track-origins` enables tracking of the origins of uninitialized memory:\n\n```rust\nuse std::mem::MaybeUninit;\n\nfn main() {\n    unsafe {\n        let a = MaybeUninit::<[usize; 4]>::uninit();\n        let a = a.assume_init();\n        println!(\"{}\", a[2]);\n    }\n}\n```\n\n```shell\n$ export \\\n  RUSTFLAGS='-Zsanitizer=memory -Zsanitizer-memory-track-origins' \\\n  RUSTDOCFLAGS='-Zsanitizer=memory -Zsanitizer-memory-track-origins'\n$ cargo clean\n$ cargo run -Zbuild-std --target x86_64-unknown-linux-gnu\n==9416==WARNING: MemorySanitizer: use-of-uninitialized-value\n    #0 0x560c04f7488a in core::fmt::num::imp::fmt_u64::haa293b0b098501ca $RUST/build/x86_64-unknown-linux-gnu/stage1/lib/rustlib/src/rust/src/libcore/fmt/num.rs:202:16\n...\n  Uninitialized value was stored to memory at\n    #0 0x560c04ae898a in __msan_memcpy.part.0 $RUST/src/llvm-project/compiler-rt/lib/msan/msan_interceptors.cc:1558:3\n    #1 0x560c04b2bf88 in memory::main::hd2333c1899d997f5 $CWD/src/main.rs:6:16\n\n  Uninitialized value was created by an allocation of 'a' in the stack frame of function '_ZN6memory4main17hd2333c1899d997f5E'\n    #0 0x560c04b2bc50 in memory::main::hd2333c1899d997f5 $CWD/src/main.rs:3\n\n```\n\nMemTagSanitizer detects a similar class of errors as AddressSanitizer and HardwareAddressSanitizer, but with lower overhead suitable for use as hardening for production binaries.\n\nMemTagSanitizer is supported on the following targets:\n\n-   `aarch64-linux-android`\n-   `aarch64-unknown-linux-gnu`\n\nMemTagSanitizer requires hardware support and the `mte` target feature. To enable this target feature compile with `-C target-feature=\"+mte\"`.\n\nSee the [LLVM MemTagSanitizer documentation](https://llvm.org/docs/MemTagSanitizer.html) for more details.\n\n## [SafeStack](#safestack)\n\nSafeStack provides backward edge control flow protection by separating the stack into data which is only accessed safely (the safe stack) and all other data (the unsafe stack).\n\nSafeStack can be enabled with the `-Zsanitizer=safestack` option and is supported on the following targets:\n\n-   `x86_64-unknown-linux-gnu`\n\nSee the [Clang SafeStack documentation](https://clang.llvm.org/docs/SafeStack.html) for more details.\n\n## [ShadowCallStack](#shadowcallstack)\n\nShadowCallStack provides backward edge control flow protection by storing a function's return address in a separately allocated 'shadow call stack' and loading the return address from that shadow call stack.\n\nShadowCallStack requires a platform ABI which reserves `x18` as the instrumentation makes use of this register.\n\nShadowCallStack can be enabled with `-Zsanitizer=shadow-call-stack` option and is supported on the following targets:\n\n-   `aarch64-linux-android`\n\nA runtime must be provided by the application or operating system.\n\nSee the [Clang ShadowCallStack documentation](https://clang.llvm.org/docs/ShadowCallStack.html) for more details.\n\n## [ThreadSanitizer](#threadsanitizer)\n\nThreadSanitizer is a data race detection tool. It is supported on the following targets:\n\n-   `aarch64-apple-darwin`\n-   `aarch64-unknown-linux-gnu`\n-   `x86_64-apple-darwin`\n-   `x86_64-unknown-freebsd`\n-   `x86_64-unknown-linux-gnu`\n\nTo work correctly ThreadSanitizer needs to be \"aware\" of all synchronization operations in a program. It generally achieves that through combination of library interception (for example synchronization performed through `pthread_mutex_lock` / `pthread_mutex_unlock`) and compile time instrumentation (e.g. atomic operations). Using it without instrumenting all the program code can lead to false positive reports.\n\nThreadSanitizer does not support atomic fences `std::sync::atomic::fence`, nor synchronization performed using inline assembly code.\n\nSee the [Clang ThreadSanitizer documentation](https://clang.llvm.org/docs/ThreadSanitizer.html) for more details.\n\n## [Example](#example-7)\n\n```rust\nstatic mut A: usize = 0;\n\nfn main() {\n    let t = std::thread::spawn(|| {\n        unsafe { A += 1 };\n    });\n    unsafe { A += 1 };\n\n    t.join().unwrap();\n}\n```\n\n```shell\n$ export RUSTFLAGS=-Zsanitizer=thread RUSTDOCFLAGS=-Zsanitizer=thread\n$ cargo run -Zbuild-std --target x86_64-unknown-linux-gnu\n==================\nWARNING: ThreadSanitizer: data race (pid=10574)\n  Read of size 8 at 0x5632dfe3d030 by thread T1:\n    #0 example::main::_$u7b$$u7b$closure$u7d$$u7d$::h23f64b0b2f8c9484 ../src/main.rs:5:18 (example+0x86cec)\n    ...\n\n  Previous write of size 8 at 0x5632dfe3d030 by main thread:\n    #0 example::main::h628ffc6626ed85b2 /.../src/main.rs:7:14 (example+0x868c8)\n    ...\n    #11 main <null> (example+0x86a1a)\n\n  Location is global 'example::A::h43ac149ddf992709' of size 8 at 0x5632dfe3d030 (example+0x000000bd9030)\n\n```\n\n## [Instrumentation of external dependencies and std](#instrumentation-of-external-dependencies-and-std)\n\nThe sanitizers to varying degrees work correctly with partially instrumented code. On the one extreme is LeakSanitizer that doesn't use any compile time instrumentation, on the other is MemorySanitizer that requires that all program code to be instrumented (failing to achieve that will inevitably result in false positives).\n\nIt is strongly recommended to combine sanitizers with recompiled and instrumented standard library, for example using [cargo `-Zbuild-std` functionality](about:blank/cargo/reference/unstable.html#build-std).\n\n## [Working with other languages](#working-with-other-languages)\n\nSanitizers rely on compiler runtime libraries to function properly. Rust links in its own compiler runtime which might conflict with runtimes required by languages such as C++. Since Rust's runtime doesn't always contain the symbols required by C++ instrumented code, you might need to skip linking it so another runtime can be linked instead.\n\nA separate unstable option `-Zexternal-clangrt` can be used to make rustc skip linking the compiler runtime for the sanitizer. This will require you to link in an external runtime, such as from clang instead.\n\n## [Build scripts and procedural macros](#build-scripts-and-procedural-macros)\n\nUse of sanitizers together with build scripts and procedural macros is technically possible, but in almost all cases it would be best avoided. This is especially true for procedural macros which would require an instrumented version of rustc.\n\nIn more practical terms when using cargo always remember to pass `--target` flag, so that rustflags will not be applied to build scripts and procedural macros.\n\n## [Symbolizing the Reports](#symbolizing-the-reports)\n\nSanitizers produce symbolized stacktraces when llvm-symbolizer binary is in `PATH`.\n\n## [Additional Information](#additional-information)\n\n-   [Sanitizers project page](https://github.com/google/sanitizers/wiki/)\n-   [AddressSanitizer in Clang](https://clang.llvm.org/docs/AddressSanitizer.html)\n-   [ControlFlowIntegrity in Clang](https://clang.llvm.org/docs/ControlFlowIntegrity.html)\n-   [DataFlowSanitizer in Clang](https://clang.llvm.org/docs/DataFlowSanitizer.html)\n-   [HWAddressSanitizer in Clang](https://clang.llvm.org/docs/HardwareAssistedAddressSanitizerDesign.html)\n-   [Linux Kernel's KernelAddressSanitizer documentation](https://www.kernel.org/doc/html/latest/dev-tools/kasan.html)\n-   [LeakSanitizer in Clang](https://clang.llvm.org/docs/LeakSanitizer.html)\n-   [MemorySanitizer in Clang](https://clang.llvm.org/docs/MemorySanitizer.html)\n-   [MemTagSanitizer in LLVM](https://llvm.org/docs/MemTagSanitizer.html)\n-   [ThreadSanitizer in Clang](https://clang.llvm.org/docs/ThreadSanitizer.html)\n\n## [`self-profile`](#self-profile)\n\n---\n\nThe `-Zself-profile` compiler flag enables rustc's internal profiler. When enabled, the compiler will output three binary files in the specified directory (or the current working directory if no directory is specified). These files can be analyzed by using the tools in the [`measureme`](https://github.com/rust-lang/measureme.git) repository.\n\nTo control the data recorded in the trace files, use the `-Zself-profile-events` flag.\n\nFor example:\n\nFirst, run a compilation session and provide the `-Zself-profile` flag:\n\n```console\n$ rustc --crate-name foo -Zself-profile\n\n```\n\nThis will generate three files in the working directory such as:\n\n-   `foo-1234.events`\n-   `foo-1234.string_data`\n-   `foo-1234.string_index`\n\nWhere `foo` is the name of the crate and `1234` is the process id of the rustc process.\n\nTo get a summary of where the compiler is spending its time:\n\n```console\n$ ../measureme/target/release/summarize summarize foo-1234\n\n```\n\nTo generate a flamegraph of the same data:\n\n```console\n$ ../measureme/target/release/inferno foo-1234\n\n```\n\nTo dump the event data in a Chromium-profiler compatible format:\n\n```console\n$ ../measureme/target/release/crox foo-1234\n\n```\n\nFor more information, consult the [`measureme`](https://github.com/rust-lang/measureme.git) documentation.\n\n## [`self-profile-events`](#self-profile-events)\n\n---\n\nThe `-Zself-profile-events` compiler flag controls what events are recorded by the self-profiler when it is enabled via the `-Zself-profile` flag.\n\nThis flag takes a comma delimited list of event types to record.\n\nFor example:\n\n```console\n$ rustc -Zself-profile -Zself-profile-events=default,args\n\n```\n\n## [Event types](#event-types)\n\n-   `query-provider`\n    \n    -   Traces each query used internally by the compiler.\n-   `generic-activity`\n    \n    -   Traces other parts of the compiler not covered by the query system.\n-   `query-cache-hit`\n    \n    -   Adds tracing information that records when the in-memory query cache is \"hit\" and does not need to re-execute a query which has been cached.\n    -   Disabled by default because this significantly increases the trace file size.\n-   `query-blocked`\n    \n    -   Tracks time that a query tries to run but is blocked waiting on another thread executing the same query to finish executing.\n    -   Query blocking only occurs when the compiler is built with parallel mode support.\n-   `incr-cache-load`\n    \n    -   Tracks time that is spent loading and deserializing query results from the incremental compilation on-disk cache.\n-   `query-keys`\n    \n    -   Adds a serialized representation of each query's query key to the tracing data.\n    -   Disabled by default because this significantly increases the trace file size.\n-   `function-args`\n    \n    -   Adds additional tracing data to some `generic-activity` events.\n    -   Disabled by default for parity with `query-keys`.\n-   `llvm`\n    \n    -   Adds tracing information about LLVM passes and codegeneration.\n    -   Disabled by default because this significantly increases the trace file size.\n\n## [Event synonyms](#event-synonyms)\n\n-   `none`\n    \n    -   Disables all events. Equivalent to the self-profiler being disabled.\n-   `default`\n    \n    -   The default set of events which stikes a balance between providing detailed tracing data and adding additional overhead to the compilation.\n-   `args`\n    \n    -   Equivalent to `query-keys` and `function-args`.\n-   `all`\n    \n    -   Enables all events.\n\n## [Examples](#examples-3)\n\nEnable the profiler and capture the default set of events (both invocations are equivalent):\n\n```console\n$ rustc -Zself-profile\n$ rustc -Zself-profile -Zself-profile-events=default\n\n```\n\nEnable the profiler and capture the default events and their arguments:\n\n```console\n$ rustc -Zself-profile -Zself-profile-events=default,args\n\n```\n\n## [`shell-argfiles`](#shell-argfiles)\n\n---\n\nThe `-Zshell-argfiles` compiler flag allows argfiles to be parsed using POSIX \"shell-style\" quoting. When enabled, the compiler will use `shlex` to parse the arguments from argfiles specified with `@shell:<path>`.\n\nBecause this feature controls the parsing of input arguments, the `-Zshell-argfiles` flag must be present before the argument specifying the shell-style argument file.\n\n## [`src-hash-algorithm`](#src-hash-algorithm)\n\nThe tracking issue for this feature is: [#70401](https://github.com/rust-lang/rust/issues/70401).\n\n---\n\nThe `-Z src-hash-algorithm` compiler flag controls which algorithm is used when hashing each source file. The hash is stored in the debug info and can be used by a debugger to verify the source code matches the executable.\n\nSupported hash algorithms are: `md5`, `sha1`, and `sha256`. Note that not all hash algorithms are supported by all debug info formats.\n\nBy default, the compiler chooses the hash algorithm based on the target specification.\n\n## [`temps-dir`](#temps-dir)\n\n---\n\nThe `-Ztemps-dir` compiler flag specifies the directory to write the intermediate files in. If not set, the output directory is used. This option is useful if you are running more than one instance of `rustc` (e.g. with different `--crate-type` settings), and you need to make sure they are not overwriting each other's intermediate files. No files are kept unless `-C save-temps=yes` is also set.\n\n## [`tiny-const-eval-limit`](#tiny-const-eval-limit)\n\n---\n\nThe `-Ztiny-const-eval-limit` compiler flag sets a tiny, non-configurable limit for const eval. This flag should only be used by const eval tests in the rustc test suite.\n\n## [`tls_model`](#tls_model)\n\nThe tracking issue for this feature is: None.\n\n---\n\nOption `-Z tls-model` controls [TLS model](https://www.akkadia.org/drepper/tls.pdf) used to generate code for accessing `#[thread_local]` `static` items.\n\nSupported values for this option are:\n\n-   `global-dynamic` - General Dynamic TLS Model (alternatively called Global Dynamic) is the most general option usable in all circumstances, even if the TLS data is defined in a shared library loaded at runtime and is accessed from code outside of that library. This is the default for most targets.\n-   `local-dynamic` - model usable if the TLS data is only accessed from the shared library or executable it is defined in. The TLS data may be in a library loaded after startup (via `dlopen`).\n-   `initial-exec` - model usable if the TLS data is defined in the executable or in a shared library loaded at program startup. The TLS data must not be in a library loaded after startup (via `dlopen`).\n-   `local-exec` - model usable only if the TLS data is defined directly in the executable, but not in a shared library, and is accessed only from that executable.\n-   `emulated` - Uses thread-specific data keys to implement emulated TLS. It is like using a general-dynamic TLS model for all modes.\n\n`rustc` and LLVM may use a more optimized model than specified if they know that we are producing an executable rather than a library, or that the `static` item is private enough.\n\n## [`ub-checks`](#ub-checks)\n\nThe tracking issue for this feature is: [#123499](https://github.com/rust-lang/rust/issues/123499).\n\n---\n\nThe `-Zub-checks` compiler flag enables additional runtime checks that detect some causes of Undefined Behavior at runtime. By default, `-Zub-checks` flag inherits the value of `-Cdebug-assertions`.\n\nAll checks are generated on a best-effort basis; even if we have a check implemented for some cause of Undefined Behavior, it may be possible for the check to not fire. If a dependency is compiled with `-Zub-checks=no` but the final binary or library is compiled with `-Zub-checks=yes`, UB checks reached by the dependency are likely to be optimized out.\n\nWhen `-Zub-checks` detects UB, a non-unwinding panic is produced. That means that we will not unwind the stack and will not call any `Drop` impls, but we will execute the configured panic hook. We expect that unsafe code has been written which relies on code not unwinding which may have UB checks inserted. Ergo, an unwinding panic could easily turn works-as-intended UB into a much bigger problem. Calling the panic hook theoretically has the same implications, but we expect that the standard library panic hook will be stateless enough to be always called, and that if a user has configured a panic hook that the hook may be very helpful to debugging the detected UB.\n\n## [`unsound-mir-opts`](#unsound-mir-opts)\n\n---\n\nThe `-Zunsound-mir-opts` compiler flag enables [MIR optimization passes](https://rustc-dev-guide.rust-lang.org/mir/optimizations.html) which can cause unsound behavior. This flag should only be used by MIR optimization tests in the rustc test suite.\n\n## [`virtual-function-elimination`](#virtual-function-elimination)\n\nThis option controls whether LLVM runs the Virtual Function Elimination (VFE) optimization. This optimization in only available with LTO, so this flag can only be passed if [`-Clto`](about:blank/rustc/codegen-options/index.html#lto) is also passed.\n\nVFE makes it possible to remove functions from vtables that are never dynamically called by the rest of the code. Without this flag, LLVM makes the really conservative assumption, that if any function in a vtable is called, no function that is referenced by this vtable can be removed. With this flag additional information are given to LLVM, so that it can determine which functions are actually called and remove the unused functions.\n\n## [Limitations](#limitations)\n\nAt the time of writing this flag may remove vtable functions too eagerly. One such example is in this code:\n\n```rust\n#![allow(unused)]\nfn main() {\ntrait Foo { fn foo(&self) { println!(\"foo\") } }\n\nimpl Foo for usize {}\n\npub struct FooBox(Box<dyn Foo>);\n\npub fn make_foo() -> FooBox { FooBox(Box::new(0)) }\n\n#[inline]\npub fn f(a: FooBox) { a.0.foo() }\n}\n```\n\nIn the above code the `Foo` trait is private, so an assumption is made that its functions can only be seen/called from the current crate and can therefore get optimized out, if unused. However, with `make_foo` you can produce a wrapped `dyn Foo` type outside of the current crate, which can then be used in `f`. Due to inlining of `f`, `Foo::foo` can then be called from a foreign crate. This can lead to miscompilations.\n\n## [`wasm-c-abi`](#wasm-c-abi)\n\nThis option controls whether Rust uses the spec-compliant C ABI when compiling for the `wasm32-unknown-unknown` target.\n\nThis makes it possible to be ABI-compatible with all other spec-compliant Wasm like Rusts `wasm32-wasi`.\n\nThis compiler flag is perma-unstable, as it will be enabled by default in the future with no option to fall back to the old non-spec-compliant ABI.\n\n## [Language features](#language-features)\n\n## [`aarch64_ver_target_feature`](#aarch64_ver_target_feature)\n\nThe tracking issue for this feature is: [#44839](https://github.com/rust-lang/rust/issues/44839)\n\n---\n\n## [`abi_avr_interrupt`](#abi_avr_interrupt)\n\nThe tracking issue for this feature is: [#69664](https://github.com/rust-lang/rust/issues/69664)\n\n---\n\n## [`abi_c_cmse_nonsecure_call`](#abi_c_cmse_nonsecure_call)\n\nThe tracking issue for this feature is: [#81391](https://github.com/rust-lang/rust/issues/81391)\n\n---\n\nThe [TrustZone-M feature](https://developer.arm.com/documentation/100690/latest/) is available for targets with the Armv8-M architecture profile (`thumbv8m` in their target name). LLVM, the Rust compiler and the linker are providing [support](https://developer.arm.com/documentation/ecm0359818/latest/) for the TrustZone-M feature.\n\nOne of the things provided, with this unstable feature, is the `C-cmse-nonsecure-call` function ABI. This ABI is used on function pointers to non-secure code to mark a non-secure function call (see [section 5.5](https://developer.arm.com/documentation/ecm0359818/latest/) for details).\n\nWith this ABI, the compiler will do the following to perform the call:\n\n-   save registers needed after the call to Secure memory\n-   clear all registers that might contain confidential information\n-   clear the Least Significant Bit of the function address\n-   branches using the BLXNS instruction\n\nTo avoid using the non-secure stack, the compiler will constrain the number and type of parameters/return value.\n\nThe `extern \"C-cmse-nonsecure-call\"` ABI is otherwise equivalent to the `extern \"C\"` ABI.\n\n```rust\n#![no_std]\n#![feature(abi_c_cmse_nonsecure_call)]\n\n#[no_mangle]\npub fn call_nonsecure_function(addr: usize) -> u32 {\n    let non_secure_function =\n        unsafe { core::mem::transmute::<usize, extern \"C-cmse-nonsecure-call\" fn() -> u32>(addr) };\n    non_secure_function()\n}\n```\n\n```text\n$ rustc --emit asm --crate-type lib --target thumbv8m.main-none-eabi function.rs\n\ncall_nonsecure_function:\n        .fnstart\n        .save   {r7, lr}\n        push    {r7, lr}\n        .setfp  r7, sp\n        mov     r7, sp\n        .pad    #16\n        sub     sp, #16\n        str     r0, [sp, #12]\n        ldr     r0, [sp, #12]\n        str     r0, [sp, #8]\n        b       .LBB0_1\n.LBB0_1:\n        ldr     r0, [sp, #8]\n        push.w  {r4, r5, r6, r7, r8, r9, r10, r11}\n        bic     r0, r0, #1\n        mov     r1, r0\n        mov     r2, r0\n        mov     r3, r0\n        mov     r4, r0\n        mov     r5, r0\n        mov     r6, r0\n        mov     r7, r0\n        mov     r8, r0\n        mov     r9, r0\n        mov     r10, r0\n        mov     r11, r0\n        mov     r12, r0\n        msr     apsr_nzcvq, r0\n        blxns   r0\n        pop.w   {r4, r5, r6, r7, r8, r9, r10, r11}\n        str     r0, [sp, #4]\n        b       .LBB0_2\n.LBB0_2:\n        ldr     r0, [sp, #4]\n        add     sp, #16\n        pop     {r7, pc}\n\n```\n\n## [`abi_msp430_interrupt`](#abi_msp430_interrupt)\n\nThe tracking issue for this feature is: [#38487](https://github.com/rust-lang/rust/issues/38487)\n\n---\n\nIn the MSP430 architecture, interrupt handlers have a special calling convention. You can use the `\"msp430-interrupt\"` ABI to make the compiler apply the right calling convention to the interrupt handlers you define.\n\n```rust\n#![feature(abi_msp430_interrupt)]\n#![no_std]\n\n// Place the interrupt handler at the appropriate memory address\n// (Alternatively, you can use `#[used]` and remove `pub` and `#[no_mangle]`)\n#[link_section = \"__interrupt_vector_10\"]\n#[no_mangle]\npub static TIM0_VECTOR: extern \"msp430-interrupt\" fn() = tim0;\n\n// The interrupt handler\nextern \"msp430-interrupt\" fn tim0() {\n    // ..\n}\n```\n\n```text\n$ msp430-elf-objdump -CD ./target/msp430/release/app\nDisassembly of section __interrupt_vector_10:\n\n0000fff2 <TIM0_VECTOR>:\n    fff2:       00 c0           interrupt service routine at 0xc000\n\nDisassembly of section .text:\n\n0000c000 <int::tim0>:\n    c000:       00 13           reti\n\n```\n\n## [`abi_ptx`](#abi_ptx)\n\nThe tracking issue for this feature is: [#38788](https://github.com/rust-lang/rust/issues/38788)\n\n---\n\nWhen emitting PTX code, all vanilla Rust functions (`fn`) get translated to \"device\" functions. These functions are _not_ callable from the host via the CUDA API so a crate with only device functions is not too useful!\n\nOTOH, \"global\" functions _can_ be called by the host; you can think of them as the real public API of your crate. To produce a global function use the `\"ptx-kernel\"` ABI.\n\n```rust\n#![feature(abi_ptx)]\n#![no_std]\n\npub unsafe extern \"ptx-kernel\" fn global_function() {\n    device_function();\n}\n\npub fn device_function() {\n    // ..\n}\n```\n\n```text\n$ xargo rustc --target nvptx64-nvidia-cuda --release -- --emit=asm\n\n$ cat $(find -name '*.s')\n//\n// Generated by LLVM NVPTX Back-End\n//\n\n.version 3.2\n.target sm_20\n.address_size 64\n\n        // .globl       _ZN6kernel15global_function17h46111ebe6516b382E\n\n.visible .entry _ZN6kernel15global_function17h46111ebe6516b382E()\n{\n\n\n        ret;\n}\n\n        // .globl       _ZN6kernel15device_function17hd6a0e4993bbf3f78E\n.visible .func _ZN6kernel15device_function17hd6a0e4993bbf3f78E()\n{\n\n\n        ret;\n}\n\n```\n\n## [`abi_riscv_interrupt`](#abi_riscv_interrupt)\n\nThe tracking issue for this feature is: [#111889](https://github.com/rust-lang/rust/issues/111889)\n\n---\n\n## [`abi_unadjusted`](#abi_unadjusted)\n\nThis feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.\n\n---\n\n## [`abi_vectorcall`](#abi_vectorcall)\n\nThe tracking issue for this feature is: [#124485](https://github.com/rust-lang/rust/issues/124485)\n\n---\n\nAdds support for the Windows `\"vectorcall\"` ABI, the equivalent of `__vectorcall` in MSVC.\n\n```rust\nextern \"vectorcall\" {\n    fn add_f64s(x: f64, y: f64) -> f64;\n}\n\nfn main() {\n    println!(\"{}\", add_f64s(2.0, 4.0));\n}\n```\n\n## [`abi_x86_interrupt`](#abi_x86_interrupt)\n\nThe tracking issue for this feature is: [#40180](https://github.com/rust-lang/rust/issues/40180)\n\n---\n\n## [`adt_const_params`](#adt_const_params)\n\nThe tracking issue for this feature is: [#95174](https://github.com/rust-lang/rust/issues/95174)\n\n---\n\nAllows for using more complex types for const parameters, such as structs or enums.\n\n```rust\n#![allow(unused)]\n#![feature(adt_const_params)]\n#![allow(incomplete_features)]\n\nfn main() {\nuse std::marker::ConstParamTy;\n\n#[derive(ConstParamTy, PartialEq, Eq)]\nenum Foo {\n    A,\n    B,\n    C,\n}\n\n#[derive(ConstParamTy, PartialEq, Eq)]\nstruct Bar {\n    flag: bool,\n}\n\nfn is_foo_a_and_bar_true<const F: Foo, const B: Bar>() -> bool {\n    match (F, B.flag) {\n        (Foo::A, true) => true,\n        _ => false,\n    }\n}\n}\n```\n\n## [`alloc_error_handler`](#alloc_error_handler)\n\nThe tracking issue for this feature is: [#51540](https://github.com/rust-lang/rust/issues/51540)\n\n---\n\n## [`allocator_internals`](#allocator_internals)\n\nThis feature does not have a tracking issue, it is an unstable implementation detail of the `global_allocator` feature not intended for use outside the compiler.\n\n---\n\n## [`allow_internal_unsafe`](#allow_internal_unsafe)\n\nThis feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.\n\n---\n\n## [`allow_internal_unstable`](#allow_internal_unstable)\n\nThis feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.\n\n---\n\n## [`anonymous_lifetime_in_impl_trait`](#anonymous_lifetime_in_impl_trait)\n\nThis feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.\n\n---\n\n## [`arbitrary_self_types`](#arbitrary_self_types)\n\nThe tracking issue for this feature is: [#44874](https://github.com/rust-lang/rust/issues/44874)\n\n---\n\n## [`arm_target_feature`](#arm_target_feature)\n\nThe tracking issue for this feature is: [#44839](https://github.com/rust-lang/rust/issues/44839)\n\n---\n\n## [`asm_const`](#asm_const)\n\nThe tracking issue for this feature is: [#93332](https://github.com/rust-lang/rust/issues/93332)\n\n---\n\nThis feature adds a `const <expr>` operand type to `asm!` and `global_asm!`.\n\n-   `<expr>` must be an integer constant expression.\n-   The value of the expression is formatted as a string and substituted directly into the asm template string.\n\n## [`asm_experimental_arch`](#asm_experimental_arch)\n\nThe tracking issue for this feature is: [#93335](https://github.com/rust-lang/rust/issues/93335)\n\n---\n\nThis feature tracks `asm!` and `global_asm!` support for the following architectures:\n\n-   NVPTX\n-   PowerPC\n-   Hexagon\n-   MIPS32r2 and MIPS64r2\n-   wasm32\n-   BPF\n-   SPIR-V\n-   AVR\n-   MSP430\n-   M68k\n-   CSKY\n-   s390x\n-   Arm64EC\n\n## [Register classes](#register-classes)\n\n| Architecture | Register class | Registers | LLVM constraint code |\n| --- | --- | --- | --- |\n| MIPS | `reg` | `$[2-25]` | `r` |\n| MIPS | `freg` | `$f[0-31]` | `f` |\n| NVPTX | `reg16` | None\\* | `h` |\n| NVPTX | `reg32` | None\\* | `r` |\n| NVPTX | `reg64` | None\\* | `l` |\n| Hexagon | `reg` | `r[0-28]` | `r` |\n| PowerPC | `reg` | `r[0-31]` | `r` |\n| PowerPC | `reg_nonzero` | `r[1-31]` | `b` |\n| PowerPC | `freg` | `f[0-31]` | `f` |\n| PowerPC | `cr` | `cr[0-7]`, `cr` | Only clobbers |\n| PowerPC | `xer` | `xer` | Only clobbers |\n| wasm32 | `local` | None\\* | `r` |\n| BPF | `reg` | `r[0-10]` | `r` |\n| BPF | `wreg` | `w[0-10]` | `w` |\n| AVR | `reg` | `r[2-25]`, `XH`, `XL`, `ZH`, `ZL` | `r` |\n| AVR | `reg_upper` | `r[16-25]`, `XH`, `XL`, `ZH`, `ZL` | `d` |\n| AVR | `reg_pair` | `r3r2` .. `r25r24`, `X`, `Z` | `r` |\n| AVR | `reg_iw` | `r25r24`, `X`, `Z` | `w` |\n| AVR | `reg_ptr` | `X`, `Z` | `e` |\n| MSP430 | `reg` | `r[0-15]` | `r` |\n| M68k | `reg` | `d[0-7]`, `a[0-7]` | `r` |\n| M68k | `reg_data` | `d[0-7]` | `d` |\n| M68k | `reg_addr` | `a[0-3]` | `a` |\n| CSKY | `reg` | `r[0-31]` | `r` |\n| CSKY | `freg` | `f[0-31]` | `f` |\n| s390x | `reg` | `r[0-10]`, `r[12-14]` | `r` |\n| s390x | `freg` | `f[0-15]` | `f` |\n| Arm64EC | `reg` | `x[0-12]`, `x[15-22]`, `x[25-27]`, `x30` | `r` |\n| Arm64EC | `vreg` | `v[0-15]` | `w` |\n| Arm64EC | `vreg_low16` | `v[0-15]` | `x` |\n\n> **Notes**:\n> \n> -   NVPTX doesn't have a fixed register set, so named registers are not supported.\n>     \n> -   WebAssembly doesn't have registers, so named registers are not supported.\n>     \n\n## [Register class supported types](#register-class-supported-types)\n\n| Architecture | Register class | Target feature | Allowed types |\n| --- | --- | --- | --- |\n| MIPS32 | `reg` | None | `i8`, `i16`, `i32`, `f32` |\n| MIPS32 | `freg` | None | `f32`, `f64` |\n| MIPS64 | `reg` | None | `i8`, `i16`, `i32`, `i64`, `f32`, `f64` |\n| MIPS64 | `freg` | None | `f32`, `f64` |\n| NVPTX | `reg16` | None | `i8`, `i16` |\n| NVPTX | `reg32` | None | `i8`, `i16`, `i32`, `f32` |\n| NVPTX | `reg64` | None | `i8`, `i16`, `i32`, `f32`, `i64`, `f64` |\n| Hexagon | `reg` | None | `i8`, `i16`, `i32`, `f32` |\n| PowerPC | `reg` | None | `i8`, `i16`, `i32` |\n| PowerPC | `reg_nonzero` | None | `i8`, `i16`, `i32` |\n| PowerPC | `freg` | None | `f32`, `f64` |\n| PowerPC | `cr` | N/A | Only clobbers |\n| PowerPC | `xer` | N/A | Only clobbers |\n| wasm32 | `local` | None | `i8` `i16` `i32` `i64` `f32` `f64` |\n| BPF | `reg` | None | `i8` `i16` `i32` `i64` |\n| BPF | `wreg` | `alu32` | `i8` `i16` `i32` |\n| AVR | `reg`, `reg_upper` | None | `i8` |\n| AVR | `reg_pair`, `reg_iw`, `reg_ptr` | None | `i16` |\n| MSP430 | `reg` | None | `i8`, `i16` |\n| M68k | `reg`, `reg_addr` | None | `i16`, `i32` |\n| M68k | `reg_data` | None | `i8`, `i16`, `i32` |\n| CSKY | `reg` | None | `i8`, `i16`, `i32` |\n| CSKY | `freg` | None | `f32`, |\n| s390x | `reg`, `reg_addr` | None | `i8`, `i16`, `i32`, `i64` |\n| s390x | `freg` | None | `f32`, `f64` |\n| Arm64EC | `reg` | None | `i8`, `i16`, `i32`, `f32`, `i64`, `f64` |\n| Arm64EC | `vreg` | None | `i8`, `i16`, `i32`, `f32`, `i64`, `f64`,  \n`i8x8`, `i16x4`, `i32x2`, `i64x1`, `f32x2`, `f64x1`,  \n`i8x16`, `i16x8`, `i32x4`, `i64x2`, `f32x4`, `f64x2` |\n\n## [Register aliases](#register-aliases)\n\n| Architecture | Base register | Aliases |\n| --- | --- | --- |\n| Hexagon | `r29` | `sp` |\n| Hexagon | `r30` | `fr` |\n| Hexagon | `r31` | `lr` |\n| BPF | `r[0-10]` | `w[0-10]` |\n| AVR | `XH` | `r27` |\n| AVR | `XL` | `r26` |\n| AVR | `ZH` | `r31` |\n| AVR | `ZL` | `r30` |\n| MSP430 | `r0` | `pc` |\n| MSP430 | `r1` | `sp` |\n| MSP430 | `r2` | `sr` |\n| MSP430 | `r3` | `cg` |\n| MSP430 | `r4` | `fp` |\n| M68k | `a5` | `bp` |\n| M68k | `a6` | `fp` |\n| M68k | `a7` | `sp`, `usp`, `ssp`, `isp` |\n| CSKY | `r[0-3]` | `a[0-3]` |\n| CSKY | `r[4-11]` | `l[0-7]` |\n| CSKY | `r[12-13]` | `t[0-1]` |\n| CSKY | `r14` | `sp` |\n| CSKY | `r15` | `lr` |\n| CSKY | `r[16-17]` | `l[8-9]` |\n| CSKY | `r[18-25]` | `t[2-9]` |\n| CSKY | `r28` | `rgb` |\n| CSKY | `r29` | `rtb` |\n| CSKY | `r30` | `svbr` |\n| CSKY | `r31` | `tls` |\n| Arm64EC | `x[0-30]` | `w[0-30]` |\n| Arm64EC | `x29` | `fp` |\n| Arm64EC | `x30` | `lr` |\n| Arm64EC | `sp` | `wsp` |\n| Arm64EC | `xzr` | `wzr` |\n| Arm64EC | `v[0-15]` | `b[0-15]`, `h[0-15]`, `s[0-15]`, `d[0-15]`, `q[0-15]` |\n\n> **Notes**:\n> \n> -   TI does not mandate a frame pointer for MSP430, but toolchains are allowed to use one; LLVM uses `r4`.\n\n## [Unsupported registers](#unsupported-registers)\n\n| Architecture | Unsupported register | Reason |\n| --- | --- | --- |\n| All | `sp`, `r15` (s390x) | The stack pointer must be restored to its original value at the end of an asm code block. |\n| All | `fr` (Hexagon), `$fp` (MIPS), `Y` (AVR), `r4` (MSP430), `a6` (M68k), `r11` (s390x), `x29` (Arm64EC) | The frame pointer cannot be used as an input or output. |\n| All | `r19` (Hexagon), `x19` (Arm64EC) | This is used internally by LLVM as a \"base pointer\" for functions with complex stack frames. |\n| MIPS | `$0` or `$zero` | This is a constant zero register which can't be modified. |\n| MIPS | `$1` or `$at` | Reserved for assembler. |\n| MIPS | `$26`/`$k0`, `$27`/`$k1` | OS-reserved registers. |\n| MIPS | `$28`/`$gp` | Global pointer cannot be used as inputs or outputs. |\n| MIPS | `$ra` | Return address cannot be used as inputs or outputs. |\n| Hexagon | `lr` | This is the link register which cannot be used as an input or output. |\n| AVR | `r0`, `r1`, `r1r0` | Due to an issue in LLVM, the `r0` and `r1` registers cannot be used as inputs or outputs. If modified, they must be restored to their original values before the end of the block. |\n| MSP430 | `r0`, `r2`, `r3` | These are the program counter, status register, and constant generator respectively. Neither the status register nor constant generator can be written to. |\n| M68k | `a4`, `a5` | Used internally by LLVM for the base pointer and global base pointer. |\n| CSKY | `r7`, `r28` | Used internally by LLVM for the base pointer and global base pointer. |\n| CSKY | `r8` | Used internally by LLVM for the frame pointer. |\n| CSKY | `r14` | Used internally by LLVM for the stack pointer. |\n| CSKY | `r15` | This is the link register. |\n| CSKY | `r[26-30]` | Reserved by its ABI. |\n| CSKY | `r31` | This is the TLS register. |\n| Arm64EC | `xzr` | This is a constant zero register which can't be modified. |\n| Arm64EC | `x18` | This is an OS-reserved register. |\n| Arm64EC | `x13`, `x14`, `x23`, `x24`, `x28`, `v[16-31]` | These are AArch64 registers that are not supported for Arm64EC. |\n\n## [Template modifiers](#template-modifiers)\n\n| Architecture | Register class | Modifier | Example output | LLVM modifier |\n| --- | --- | --- | --- | --- |\n| MIPS | `reg` | None | `$2` | None |\n| MIPS | `freg` | None | `$f0` | None |\n| NVPTX | `reg16` | None | `rs0` | None |\n| NVPTX | `reg32` | None | `r0` | None |\n| NVPTX | `reg64` | None | `rd0` | None |\n| Hexagon | `reg` | None | `r0` | None |\n| PowerPC | `reg` | None | `0` | None |\n| PowerPC | `reg_nonzero` | None | `3` | None |\n| PowerPC | `freg` | None | `0` | None |\n| s390x | `reg` | None | `%r0` | None |\n| s390x | `reg_addr` | None | `%r1` | None |\n| s390x | `freg` | None | `%f0` | None |\n| CSKY | `reg` | None | `r0` | None |\n| CSKY | `freg` | None | `f0` | None |\n| Arm64EC | `reg` | None | `x0` | `x` |\n| Arm64EC | `reg` | `w` | `w0` | `w` |\n| Arm64EC | `reg` | `x` | `x0` | `x` |\n| Arm64EC | `vreg` | None | `v0` | None |\n| Arm64EC | `vreg` | `v` | `v0` | None |\n| Arm64EC | `vreg` | `b` | `b0` | `b` |\n| Arm64EC | `vreg` | `h` | `h0` | `h` |\n| Arm64EC | `vreg` | `s` | `s0` | `s` |\n| Arm64EC | `vreg` | `d` | `d0` | `d` |\n| Arm64EC | `vreg` | `q` | `q0` | `q` |\n\n## [Flags covered by `preserves_flags`](#flags-covered-by-preserves_flags)\n\nThese flags registers must be restored upon exiting the asm block if the `preserves_flags` option is set:\n\n-   AVR\n    -   The status register `SREG`.\n-   MSP430\n    -   The status register `r2`.\n-   M68k\n    -   The condition code register `ccr`.\n-   s390x\n    -   The condition code register `cc`.\n-   Arm64EC\n    -   Condition flags (`NZCV` register).\n    -   Floating-point status (`FPSR` register).\n\n## [`asm_goto`](#asm_goto)\n\nThe tracking issue for this feature is: [#119364](https://github.com/rust-lang/rust/issues/119364)\n\n---\n\nThis feature adds a `label <block>` operand type to `asm!`.\n\nExample:\n\n```rust\n\nunsafe {\n    asm!(\n        \"jmp {}\",\n        label {\n            println!(\"Jumped from asm!\");\n        }\n    );\n}\n```\n\nThe block must have unit type or diverge.\n\nWhen `label <block>` is used together with `noreturn` option, it means that the assembly will not fallthrough. It's allowed to jump to a label within the assembly. In this case, the entire `asm!` expression will have an unit type as opposed to diverging, if not all label blocks diverge. The `asm!` expression still diverges if `noreturn` option is used and all label blocks diverge.\n\n## [`asm_unwind`](#asm_unwind)\n\nThe tracking issue for this feature is: [#93334](https://github.com/rust-lang/rust/issues/93334)\n\n---\n\nThis feature adds a `may_unwind` option to `asm!` which allows an `asm` block to unwind stack and be part of the stack unwinding process. This option is only supported by the LLVM backend right now.\n\n## [`associated_const_equality`](#associated_const_equality)\n\nThe tracking issue for this feature is: [#92827](https://github.com/rust-lang/rust/issues/92827)\n\n---\n\n## [`associated_type_defaults`](#associated_type_defaults)\n\nThe tracking issue for this feature is: [#29661](https://github.com/rust-lang/rust/issues/29661)\n\n---\n\n## [`async_closure`](#async_closure)\n\nThe tracking issue for this feature is: [#62290](https://github.com/rust-lang/rust/issues/62290)\n\n---\n\n## [`async_fn_track_caller`](#async_fn_track_caller)\n\nThe tracking issue for this feature is: [#110011](https://github.com/rust-lang/rust/issues/110011)\n\n---\n\n## [`async_for_loop`](#async_for_loop)\n\nThe tracking issue for this feature is: [#118898](https://github.com/rust-lang/rust/issues/118898)\n\n---\n\n## [`auto_traits`](#auto_traits)\n\nThe tracking issue for this feature is [#13231](https://github.com/rust-lang/rust/issues/13231)\n\n---\n\nThe `auto_traits` feature gate allows you to define auto traits.\n\nAuto traits, like [`Send`](language-features/../../std/marker/trait.Send.html) or [`Sync`](language-features/../../std/marker/trait.Sync.html) in the standard library, are marker traits that are automatically implemented for every type, unless the type, or a type it contains, has explicitly opted out via a negative impl. (Negative impls are separately controlled by the `negative_impls` feature.)\n\n```rust\nimpl !Trait for Type {}\n```\n\nExample:\n\n```rust\n#![feature(negative_impls)]\n#![feature(auto_traits)]\n\nauto trait Valid {}\n\nstruct True;\nstruct False;\n\nimpl !Valid for False {}\n\nstruct MaybeValid<T>(T);\n\nfn must_be_valid<T: Valid>(_t: T) { }\n\nfn main() {\n    // works\n    must_be_valid( MaybeValid(True) );\n\n    // compiler error - trait bound not satisfied\n    // must_be_valid( MaybeValid(False) );\n}\n```\n\n## [Automatic trait implementations](#automatic-trait-implementations)\n\nWhen a type is declared as an `auto trait`, we will automatically create impls for every struct/enum/union, unless an explicit impl is provided. These automatic impls contain a where clause for each field of the form `T: AutoTrait`, where `T` is the type of the field and `AutoTrait` is the auto trait in question. As an example, consider the struct `List` and the auto trait `Send`:\n\n```rust\n#![allow(unused)]\nfn main() {\nstruct List<T> {\n  data: T,\n  next: Option<Box<List<T>>>,\n}\n}\n```\n\nPresuming that there is no explicit impl of `Send` for `List`, the compiler will supply an automatic impl of the form:\n\n```rust\n#![allow(unused)]\nfn main() {\nstruct List<T> {\n  data: T,\n  next: Option<Box<List<T>>>,\n}\n\nunsafe impl<T> Send for List<T>\nwhere\n  T: Send, // from the field `data`\n  Option<Box<List<T>>>: Send, // from the field `next`\n{ }\n}\n```\n\nExplicit impls may be either positive or negative. They take the form:\n\n```rust\nimpl<...> AutoTrait for StructName<..> { }\nimpl<...> !AutoTrait for StructName<..> { }\n```\n\n## [Coinduction: Auto traits permit cyclic matching](#coinduction-auto-traits-permit-cyclic-matching)\n\nUnlike ordinary trait matching, auto traits are **coinductive**. This means, in short, that cycles which occur in trait matching are considered ok. As an example, consider the recursive struct `List` introduced in the previous section. In attempting to determine whether `List: Send`, we would wind up in a cycle: to apply the impl, we must show that `Option<Box<List>>: Send`, which will in turn require `Box<List>: Send` and then finally `List: Send` again. Under ordinary trait matching, this cycle would be an error, but for an auto trait it is considered a successful match.\n\n## [Items](#items)\n\nAuto traits cannot have any trait items, such as methods or associated types. This ensures that we can generate default implementations.\n\n## [Supertraits](#supertraits)\n\nAuto traits cannot have supertraits. This is for soundness reasons, as the interaction of coinduction with implied bounds is difficult to reconcile.\n\n## [`avx512_target_feature`](#avx512_target_feature)\n\nThe tracking issue for this feature is: [#44839](https://github.com/rust-lang/rust/issues/44839)\n\n---\n\n## [`box_patterns`](#box_patterns)\n\nThe tracking issue for this feature is: [#29641](https://github.com/rust-lang/rust/issues/29641)\n\n---\n\nBox patterns let you match on `Box<T>`s:\n\n```rust\n#![feature(box_patterns)]\n\nfn main() {\n    let b = Some(Box::new(5));\n    match b {\n        Some(box n) if n < 0 => {\n            println!(\"Box contains negative number {n}\");\n        },\n        Some(box n) if n >= 0 => {\n            println!(\"Box contains non-negative number {n}\");\n        },\n        None => {\n            println!(\"No box\");\n        },\n        _ => unreachable!()\n    }\n}\n```\n\n## [`bpf_target_feature`](#bpf_target_feature)\n\nThe tracking issue for this feature is: [#44839](https://github.com/rust-lang/rust/issues/44839)\n\n---\n\n## [`builtin_syntax`](#builtin_syntax)\n\nThe tracking issue for this feature is: [#110680](https://github.com/rust-lang/rust/issues/110680)\n\n---\n\n## [`c_unwind`](#c_unwind)\n\nThe tracking issue for this feature is: [#74990](https://github.com/rust-lang/rust/issues/74990)\n\n---\n\nIntroduces new ABI strings:\n\n-   \"C-unwind\"\n-   \"cdecl-unwind\"\n-   \"stdcall-unwind\"\n-   \"fastcall-unwind\"\n-   \"vectorcall-unwind\"\n-   \"thiscall-unwind\"\n-   \"aapcs-unwind\"\n-   \"win64-unwind\"\n-   \"sysv64-unwind\"\n-   \"system-unwind\"\n\nThese enable unwinding from other languages (such as C++) into Rust frames and from Rust into other languages.\n\nSee [RFC 2945](https://github.com/rust-lang/rfcs/blob/master/text/2945-c-unwind-abi.md) for more information.\n\n## [`c_variadic`](#c_variadic)\n\nThe tracking issue for this feature is: [#44930](https://github.com/rust-lang/rust/issues/44930)\n\n---\n\nThe `c_variadic` language feature enables C-variadic functions to be defined in Rust. They may be called both from within Rust and via FFI.\n\n## [Examples](#examples-4)\n\n```rust\n#![allow(unused)]\n#![feature(c_variadic)]\n\nfn main() {\npub unsafe extern \"C\" fn add(n: usize, mut args: ...) -> usize {\n    let mut sum = 0;\n    for _ in 0..n {\n        sum += args.arg::<usize>();\n    }\n    sum\n}\n}\n```\n\n## [`cfg_overflow_checks`](#cfg_overflow_checks)\n\nThe tracking issue for this feature is: [#111466](https://github.com/rust-lang/rust/issues/111466)\n\n---\n\n## [`cfg_relocation_model`](#cfg_relocation_model)\n\nThe tracking issue for this feature is: [#114929](https://github.com/rust-lang/rust/issues/114929)\n\n---\n\n## [`cfg_sanitize`](#cfg_sanitize)\n\nThe tracking issue for this feature is: [#39699](https://github.com/rust-lang/rust/issues/39699)\n\n---\n\nThe `cfg_sanitize` feature makes it possible to execute different code depending on whether a particular sanitizer is enabled or not.\n\n## [Examples](#examples-5)\n\n```rust\n#![allow(unused)]\n#![feature(cfg_sanitize)]\n\nfn main() {\n#[cfg(sanitize = \"thread\")]\nfn a() {\n    // ...\n}\n\n#[cfg(not(sanitize = \"thread\"))]\nfn a() {\n    // ...\n}\n\nfn b() {\n    if cfg!(sanitize = \"leak\") {\n        // ...\n    } else {\n        // ...\n    }\n}\n}\n```\n\n## [`cfg_sanitizer_cfi`](#cfg_sanitizer_cfi)\n\nThe tracking issue for this feature is: [#89653](https://github.com/rust-lang/rust/issues/89653)\n\n---\n\n## [`cfg_target_compact`](#cfg_target_compact)\n\nThe tracking issue for this feature is: [#96901](https://github.com/rust-lang/rust/issues/96901)\n\n---\n\n## [`cfg_target_has_atomic`](#cfg_target_has_atomic)\n\nThe tracking issue for this feature is: [#94039](https://github.com/rust-lang/rust/issues/94039)\n\n---\n\n## [`cfg_target_has_atomic_equal_alignment`](#cfg_target_has_atomic_equal_alignment)\n\nThe tracking issue for this feature is: [#93822](https://github.com/rust-lang/rust/issues/93822)\n\n---\n\n## [`cfg_target_thread_local`](#cfg_target_thread_local)\n\nThe tracking issue for this feature is: [#29594](https://github.com/rust-lang/rust/issues/29594)\n\n---\n\n## [`cfg_ub_checks`](#cfg_ub_checks)\n\nThe tracking issue for this feature is: [#123499](https://github.com/rust-lang/rust/issues/123499)\n\n---\n\n## [`cfg_version`](#cfg_version)\n\nThe tracking issue for this feature is: [#64796](https://github.com/rust-lang/rust/issues/64796)\n\n---\n\nThe `cfg_version` feature makes it possible to execute different code depending on the compiler version. It will return true if the compiler version is greater than or equal to the specified version.\n\n## [Examples](#examples-6)\n\n```rust\n#![allow(unused)]\n#![feature(cfg_version)]\n\nfn main() {\n#[cfg(version(\"1.42\"))] // 1.42 and above\nfn a() {\n    // ...\n}\n\n#[cfg(not(version(\"1.42\")))] // 1.41 and below\nfn a() {\n    // ...\n}\n\nfn b() {\n    if cfg!(version(\"1.42\")) {\n        // ...\n    } else {\n        // ...\n    }\n}\n}\n```\n\n## [`cfi_encoding`](#cfi_encoding)\n\nThe tracking issue for this feature is: [#89653](https://github.com/rust-lang/rust/issues/89653)\n\n---\n\nThe `cfi_encoding` feature allows the user to define a CFI encoding for a type. It allows the user to use a different names for types that otherwise would be required to have the same name as used in externally defined C functions.\n\n## [Examples](#examples-7)\n\n```rust\n#![allow(unused)]\n#![feature(cfi_encoding, extern_types)]\n\nfn main() {\n#[cfi_encoding = \"3Foo\"]\npub struct Type1(i32);\n\nextern {\n    #[cfi_encoding = \"3Bar\"]\n    type Type2;\n}\n}\n```\n\n## [`closure_lifetime_binder`](#closure_lifetime_binder)\n\nThe tracking issue for this feature is: [#97362](https://github.com/rust-lang/rust/issues/97362)\n\n---\n\n## [`closure_track_caller`](#closure_track_caller)\n\nThe tracking issue for this feature is: [#87417](https://github.com/rust-lang/rust/issues/87417)\n\n---\n\nAllows using the `#[track_caller]` attribute on closures and coroutines. Calls made to the closure or coroutine will have caller information available through `std::panic::Location::caller()`, just like using `#[track_caller]` on a function.\n\n## [`cmse_nonsecure_entry`](#cmse_nonsecure_entry)\n\nThe tracking issue for this feature is: [#75835](https://github.com/rust-lang/rust/issues/75835)\n\n---\n\nThe [TrustZone-M feature](https://developer.arm.com/documentation/100690/latest/) is available for targets with the Armv8-M architecture profile (`thumbv8m` in their target name). LLVM, the Rust compiler and the linker are providing [support](https://developer.arm.com/documentation/ecm0359818/latest/) for the TrustZone-M feature.\n\nOne of the things provided, with this unstable feature, is the `cmse_nonsecure_entry` attribute. This attribute marks a Secure function as an entry function (see [section 5.4](https://developer.arm.com/documentation/ecm0359818/latest/) for details). With this attribute, the compiler will do the following:\n\n-   add a special symbol on the function which is the `__acle_se_` prefix and the standard function name\n-   constrain the number of parameters to avoid using the Non-Secure stack\n-   before returning from the function, clear registers that might contain Secure information\n-   use the `BXNS` instruction to return\n\nBecause the stack can not be used to pass parameters, there will be compilation errors if:\n\n-   the total size of all parameters is too big (for example more than four 32 bits integers)\n-   the entry function is not using a C ABI\n\nThe special symbol `__acle_se_` will be used by the linker to generate a secure gateway veneer.\n\n```rust\n#![feature(cmse_nonsecure_entry)]\n\n#[no_mangle]\n#[cmse_nonsecure_entry]\npub extern \"C\" fn entry_function(input: u32) -> u32 {\n    input + 6\n}\n```\n\n```text\n$ rustc --emit obj --crate-type lib --target thumbv8m.main-none-eabi function.rs\n$ arm-none-eabi-objdump -D function.o\n\n00000000 <entry_function>:\n   0:   b580            push    {r7, lr}\n   2:   466f            mov     r7, sp\n   4:   b082            sub     sp, #8\n   6:   9001            str     r0, [sp, #4]\n   8:   1d81            adds    r1, r0, #6\n   a:   460a            mov     r2, r1\n   c:   4281            cmp     r1, r0\n   e:   9200            str     r2, [sp, #0]\n  10:   d30b            bcc.n   2a <entry_function+0x2a>\n  12:   e7ff            b.n     14 <entry_function+0x14>\n  14:   9800            ldr     r0, [sp, #0]\n  16:   b002            add     sp, #8\n  18:   e8bd 4080       ldmia.w sp!, {r7, lr}\n  1c:   4671            mov     r1, lr\n  1e:   4672            mov     r2, lr\n  20:   4673            mov     r3, lr\n  22:   46f4            mov     ip, lr\n  24:   f38e 8800       msr     CPSR_f, lr\n  28:   4774            bxns    lr\n  2a:   f240 0000       movw    r0, #0\n  2e:   f2c0 0000       movt    r0, #0\n  32:   f240 0200       movw    r2, #0\n  36:   f2c0 0200       movt    r2, #0\n  3a:   211c            movs    r1, #28\n  3c:   f7ff fffe       bl      0 <_ZN4core9panicking5panic17h5c028258ca2fb3f5E>\n  40:   defe            udf     #254    ; 0xfe\n\n```\n\n## [`compiler_builtins`](#compiler_builtins)\n\nThis feature is internal to the Rust compiler and is not intended for general use.\n\n---\n\n## [`const_async_blocks`](#const_async_blocks)\n\nThe tracking issue for this feature is: [#85368](https://github.com/rust-lang/rust/issues/85368)\n\n---\n\n## [`const_closures`](#const_closures)\n\nThe tracking issue for this feature is: [#106003](https://github.com/rust-lang/rust/issues/106003)\n\n---\n\n## [`const_extern_fn`](#const_extern_fn)\n\nThe tracking issue for this feature is: [#64926](https://github.com/rust-lang/rust/issues/64926)\n\n---\n\n## [`const_fn_floating_point_arithmetic`](#const_fn_floating_point_arithmetic)\n\nThe tracking issue for this feature is: [#57241](https://github.com/rust-lang/rust/issues/57241)\n\n---\n\n## [`const_for`](#const_for)\n\nThe tracking issue for this feature is: [#87575](https://github.com/rust-lang/rust/issues/87575)\n\n---\n\n## [`const_mut_refs`](#const_mut_refs)\n\nThe tracking issue for this feature is: [#57349](https://github.com/rust-lang/rust/issues/57349)\n\n---\n\n## [`const_precise_live_drops`](#const_precise_live_drops)\n\nThe tracking issue for this feature is: [#73255](https://github.com/rust-lang/rust/issues/73255)\n\n---\n\n## [`const_refs_to_cell`](#const_refs_to_cell)\n\nThe tracking issue for this feature is: [#80384](https://github.com/rust-lang/rust/issues/80384)\n\n---\n\n## [`const_refs_to_static`](#const_refs_to_static)\n\nThe tracking issue for this feature is: [#119618](https://github.com/rust-lang/rust/issues/119618)\n\n---\n\n## [`const_trait_impl`](#const_trait_impl)\n\nThe tracking issue for this feature is: [#67792](https://github.com/rust-lang/rust/issues/67792)\n\n---\n\n## [`const_try`](#const_try)\n\nThe tracking issue for this feature is: [#74935](https://github.com/rust-lang/rust/issues/74935)\n\n---\n\n## [`coroutine_clone`](#coroutine_clone)\n\nThe tracking issue for this feature is: [#95360](https://github.com/rust-lang/rust/issues/95360)\n\n---\n\n## [`coroutines`](#coroutines)\n\nThe tracking issue for this feature is: [#43122](https://github.com/rust-lang/rust/issues/43122)\n\n---\n\nThe `coroutines` feature gate in Rust allows you to define coroutine or coroutine literals. A coroutine is a \"resumable function\" that syntactically resembles a closure but compiles to much different semantics in the compiler itself. The primary feature of a coroutine is that it can be suspended during execution to be resumed at a later date. Coroutines use the `yield` keyword to \"return\", and then the caller can `resume` a coroutine to resume execution just after the `yield` keyword.\n\nCoroutines are an extra-unstable feature in the compiler right now. Added in [RFC 2033](https://github.com/rust-lang/rfcs/pull/2033) they're mostly intended right now as a information/constraint gathering phase. The intent is that experimentation can happen on the nightly compiler before actual stabilization. A further RFC will be required to stabilize coroutines and will likely contain at least a few small tweaks to the overall design.\n\nA syntactical example of a coroutine is:\n\n```rust\n#![feature(coroutines, coroutine_trait, stmt_expr_attributes)]\n\nuse std::ops::{Coroutine, CoroutineState};\nuse std::pin::Pin;\n\nfn main() {\n    let mut coroutine = #[coroutine] || {\n        yield 1;\n        return \"foo\"\n    };\n\n    match Pin::new(&mut coroutine).resume(()) {\n        CoroutineState::Yielded(1) => {}\n        _ => panic!(\"unexpected value from resume\"),\n    }\n    match Pin::new(&mut coroutine).resume(()) {\n        CoroutineState::Complete(\"foo\") => {}\n        _ => panic!(\"unexpected value from resume\"),\n    }\n}\n```\n\nCoroutines are closure-like literals which are annotated with `#[coroutine]` and can contain a `yield` statement. The `yield` statement takes an optional expression of a value to yield out of the coroutine. All coroutine literals implement the `Coroutine` trait in the `std::ops` module. The `Coroutine` trait has one main method, `resume`, which resumes execution of the coroutine at the previous suspension point.\n\nAn example of the control flow of coroutines is that the following example prints all numbers in order:\n\n```rust\n#![feature(coroutines, coroutine_trait, stmt_expr_attributes)]\n\nuse std::ops::Coroutine;\nuse std::pin::Pin;\n\nfn main() {\n    let mut coroutine = #[coroutine] || {\n        println!(\"2\");\n        yield;\n        println!(\"4\");\n    };\n\n    println!(\"1\");\n    Pin::new(&mut coroutine).resume(());\n    println!(\"3\");\n    Pin::new(&mut coroutine).resume(());\n    println!(\"5\");\n}\n```\n\nAt this time the main use case of coroutines is an implementation primitive for `async`/`await` and `gen` syntax, but coroutines will likely be extended to other primitives in the future. Feedback on the design and usage is always appreciated!\n\n### [The `Coroutine` trait](#the-coroutine-trait)\n\nThe `Coroutine` trait in `std::ops` currently looks like:\n\n```rust\n#![allow(unused)]\nfn main() {\n#![feature(arbitrary_self_types, coroutine_trait)]\nuse std::ops::CoroutineState;\nuse std::pin::Pin;\n\npub trait Coroutine<R = ()> {\n    type Yield;\n    type Return;\n    fn resume(self: Pin<&mut Self>, resume: R) -> CoroutineState<Self::Yield, Self::Return>;\n}\n}\n```\n\nThe `Coroutine::Yield` type is the type of values that can be yielded with the `yield` statement. The `Coroutine::Return` type is the returned type of the coroutine. This is typically the last expression in a coroutine's definition or any value passed to `return` in a coroutine. The `resume` function is the entry point for executing the `Coroutine` itself.\n\nThe return value of `resume`, `CoroutineState`, looks like:\n\n```rust\n#![allow(unused)]\nfn main() {\npub enum CoroutineState<Y, R> {\n    Yielded(Y),\n    Complete(R),\n}\n}\n```\n\nThe `Yielded` variant indicates that the coroutine can later be resumed. This corresponds to a `yield` point in a coroutine. The `Complete` variant indicates that the coroutine is complete and cannot be resumed again. Calling `resume` after a coroutine has returned `Complete` will likely result in a panic of the program.\n\n### [Closure-like semantics](#closure-like-semantics)\n\nThe closure-like syntax for coroutines alludes to the fact that they also have closure-like semantics. Namely:\n\n-   When created, a coroutine executes no code. A closure literal does not actually execute any of the closure's code on construction, and similarly a coroutine literal does not execute any code inside the coroutine when constructed.\n    \n-   Coroutines can capture outer variables by reference or by move, and this can be tweaked with the `move` keyword at the beginning of the closure. Like closures all coroutines will have an implicit environment which is inferred by the compiler. Outer variables can be moved into a coroutine for use as the coroutine progresses.\n    \n-   Coroutine literals produce a value with a unique type which implements the `std::ops::Coroutine` trait. This allows actual execution of the coroutine through the `Coroutine::resume` method as well as also naming it in return types and such.\n    \n-   Traits like `Send` and `Sync` are automatically implemented for a `Coroutine` depending on the captured variables of the environment. Unlike closures, coroutines also depend on variables live across suspension points. This means that although the ambient environment may be `Send` or `Sync`, the coroutine itself may not be due to internal variables live across `yield` points being not-`Send` or not-`Sync`. Note that coroutines do not implement traits like `Copy` or `Clone` automatically.\n    \n-   Whenever a coroutine is dropped it will drop all captured environment variables.\n    \n\n### [Coroutines as state machines](#coroutines-as-state-machines)\n\nIn the compiler, coroutines are currently compiled as state machines. Each `yield` expression will correspond to a different state that stores all live variables over that suspension point. Resumption of a coroutine will dispatch on the current state and then execute internally until a `yield` is reached, at which point all state is saved off in the coroutine and a value is returned.\n\nLet's take a look at an example to see what's going on here:\n\n```rust\n#![feature(coroutines, coroutine_trait, stmt_expr_attributes)]\n\nuse std::ops::Coroutine;\nuse std::pin::Pin;\n\nfn main() {\n    let ret = \"foo\";\n    let mut coroutine = #[coroutine] move || {\n        yield 1;\n        return ret\n    };\n\n    Pin::new(&mut coroutine).resume(());\n    Pin::new(&mut coroutine).resume(());\n}\n```\n\nThis coroutine literal will compile down to something similar to:\n\n```rust\n#![feature(arbitrary_self_types, coroutine_trait)]\n\nuse std::ops::{Coroutine, CoroutineState};\nuse std::pin::Pin;\n\nfn main() {\n    let ret = \"foo\";\n    let mut coroutine = {\n        enum __Coroutine {\n            Start(&'static str),\n            Yield1(&'static str),\n            Done,\n        }\n\n        impl Coroutine for __Coroutine {\n            type Yield = i32;\n            type Return = &'static str;\n\n            fn resume(mut self: Pin<&mut Self>, resume: ()) -> CoroutineState<i32, &'static str> {\n                use std::mem;\n                match mem::replace(&mut *self, __Coroutine::Done) {\n                    __Coroutine::Start(s) => {\n                        *self = __Coroutine::Yield1(s);\n                        CoroutineState::Yielded(1)\n                    }\n\n                    __Coroutine::Yield1(s) => {\n                        *self = __Coroutine::Done;\n                        CoroutineState::Complete(s)\n                    }\n\n                    __Coroutine::Done => {\n                        panic!(\"coroutine resumed after completion\")\n                    }\n                }\n            }\n        }\n\n        __Coroutine::Start(ret)\n    };\n\n    Pin::new(&mut coroutine).resume(());\n    Pin::new(&mut coroutine).resume(());\n}\n```\n\nNotably here we can see that the compiler is generating a fresh type, `__Coroutine` in this case. This type has a number of states (represented here as an `enum`) corresponding to each of the conceptual states of the coroutine. At the beginning we're closing over our outer variable `foo` and then that variable is also live over the `yield` point, so it's stored in both states.\n\nWhen the coroutine starts it'll immediately yield 1, but it saves off its state just before it does so indicating that it has reached the yield point. Upon resuming again we'll execute the `return ret` which returns the `Complete` state.\n\nHere we can also note that the `Done` state, if resumed, panics immediately as it's invalid to resume a completed coroutine. It's also worth noting that this is just a rough desugaring, not a normative specification for what the compiler does.\n\n## [`coverage_attribute`](#coverage_attribute)\n\nThe tracking issue for this feature is: [#84605](https://github.com/rust-lang/rust/issues/84605)\n\n---\n\nThe `coverage` attribute can be used to selectively disable coverage instrumentation in an annotated function. This might be useful to:\n\n-   Avoid instrumentation overhead in a performance critical function\n-   Avoid generating coverage for a function that is not meant to be executed, but still target 100% coverage for the rest of the program.\n\n## [Example](#example-8)\n\n```rust\n#![allow(unused)]\n#![feature(coverage_attribute)]\n\nfn main() {\n// `foo()` will get coverage instrumentation (by default)\nfn foo() {\n  // ...\n}\n\n#[coverage(off)]\nfn bar() {\n  // ...\n}\n}\n```\n\n## [`csky_target_feature`](#csky_target_feature)\n\nThe tracking issue for this feature is: [#44839](https://github.com/rust-lang/rust/issues/44839)\n\n---\n\n## [`custom_inner_attributes`](#custom_inner_attributes)\n\nThe tracking issue for this feature is: [#54726](https://github.com/rust-lang/rust/issues/54726)\n\n---\n\n## [`custom_mir`](#custom_mir)\n\nThis feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.\n\n---\n\n## [`custom_test_frameworks`](#custom_test_frameworks)\n\nThe tracking issue for this feature is: [#50297](https://github.com/rust-lang/rust/issues/50297)\n\n---\n\nThe `custom_test_frameworks` feature allows the use of `#[test_case]` and `#![test_runner]`. Any function, const, or static can be annotated with `#[test_case]` causing it to be aggregated (like `#[test]`) and be passed to the test runner determined by the `#![test_runner]` crate attribute.\n\n```rust\n#![allow(unused)]\n#![feature(custom_test_frameworks)]\n#![test_runner(my_runner)]\n\nfn main() {\nfn my_runner(tests: &[&i32]) {\n    for t in tests {\n        if **t == 0 {\n            println!(\"PASSED\");\n        } else {\n            println!(\"FAILED\");\n        }\n    }\n}\n\n#[test_case]\nconst WILL_PASS: i32 = 0;\n\n#[test_case]\nconst WILL_FAIL: i32 = 4;\n}\n```\n\n## [`decl_macro`](#decl_macro)\n\nThe tracking issue for this feature is: [#39412](https://github.com/rust-lang/rust/issues/39412)\n\n---\n\n## [`default_type_parameter_fallback`](#default_type_parameter_fallback)\n\nThe tracking issue for this feature is: [#27336](https://github.com/rust-lang/rust/issues/27336)\n\n---\n\n## [`deprecated_safe`](#deprecated_safe)\n\nThe tracking issue for this feature is: [#94978](https://github.com/rust-lang/rust/issues/94978)\n\n---\n\n## [`deprecated_suggestion`](#deprecated_suggestion)\n\nThe tracking issue for this feature is: [#94785](https://github.com/rust-lang/rust/issues/94785)\n\n---\n\n## [`deref_patterns`](#deref_patterns)\n\nThe tracking issue for this feature is: [#87121](https://github.com/rust-lang/rust/issues/87121)\n\n---\n\n## [`do_not_recommend`](#do_not_recommend)\n\nThe tracking issue for this feature is: [#51992](https://github.com/rust-lang/rust/issues/51992)\n\n---\n\n## [`doc_auto_cfg`](#doc_auto_cfg)\n\nThe tracking issue for this feature is: [#43781](https://github.com/rust-lang/rust/issues/43781)\n\n---\n\n## [`doc_cfg`](#doc_cfg)\n\nThe tracking issue for this feature is: [#43781](https://github.com/rust-lang/rust/issues/43781)\n\n---\n\nThe `doc_cfg` feature allows an API be documented as only available in some specific platforms. This attribute has two effects:\n\n1.  In the annotated item's documentation, there will be a message saying \"Available on (platform) only\".\n    \n2.  The item's doc-tests will only run on the specific platform.\n    \n\nIn addition to allowing the use of the `#[doc(cfg)]` attribute, this feature enables the use of a special conditional compilation flag, `#[cfg(doc)]`, set whenever building documentation on your crate.\n\nThis feature was introduced as part of PR [#43348](https://github.com/rust-lang/rust/issues/43348) to allow the platform-specific parts of the standard library be documented.\n\n```rust\n#![allow(unused)]\n#![feature(doc_cfg)]\n\nfn main() {\n#[cfg(any(windows, doc))]\n#[doc(cfg(windows))]\n/// The application's icon in the notification area (a.k.a. system tray).\n///\n/// # Examples\n///\n/// ```no_run\n/// extern crate my_awesome_ui_library;\n/// use my_awesome_ui_library::current_app;\n/// use my_awesome_ui_library::windows::notification;\n///\n/// let icon = current_app().get::<notification::Icon>();\n/// icon.show();\n/// icon.show_message(\"Hello\");\n/// ```\npub struct Icon {\n    // ...\n}\n}\n```\n\n## [`doc_cfg_hide`](#doc_cfg_hide)\n\nThe tracking issue for this feature is: [#43781](https://github.com/rust-lang/rust/issues/43781)\n\n---\n\n## [`doc_masked`](#doc_masked)\n\nThe tracking issue for this feature is: [#44027](https://github.com/rust-lang/rust/pull/44027)\n\n---\n\nThe `doc_masked` feature allows a crate to exclude types from a given crate from appearing in lists of trait implementations. The specifics of the feature are as follows:\n\n1.  When rustdoc encounters an `extern crate` statement annotated with a `#[doc(masked)]` attribute, it marks the crate as being masked.\n    \n2.  When listing traits a given type implements, rustdoc ensures that traits from masked crates are not emitted into the documentation.\n    \n3.  When listing types that implement a given trait, rustdoc ensures that types from masked crates are not emitted into the documentation.\n    \n\nThis feature was introduced in PR [#44026](https://github.com/rust-lang/rust/pull/44026) to ensure that compiler-internal and implementation-specific types and traits were not included in the standard library's documentation. Such types would introduce broken links into the documentation.\n\n## [`doc_notable_trait`](#doc_notable_trait)\n\nThe tracking issue for this feature is: [#45040](https://github.com/rust-lang/rust/issues/45040)\n\nThe `doc_notable_trait` feature allows the use of the `#[doc(notable_trait)]` attribute, which will display the trait in a \"Notable traits\" dialog for functions returning types that implement the trait. For example, this attribute is applied to the `Iterator`, `Future`, `io::Read`, and `io::Write` traits in the standard library.\n\nYou can do this on your own traits like so:\n\n```\n#![feature(doc_notable_trait)]\n\n#[doc(notable_trait)]\npub trait MyTrait {}\n\npub struct MyStruct;\nimpl MyTrait for MyStruct {}\n\n/// The docs for this function will have a button that displays a dialog about\n/// `MyStruct` implementing `MyTrait`.\npub fn my_fn() -> MyStruct { MyStruct }\n\n```\n\nThis feature was originally implemented in PR [#45039](https://github.com/rust-lang/rust/pull/45039).\n\nSee also its documentation in [the rustdoc book](about:blank/rustdoc/unstable-features.html#adding-your-trait-to-the-notable-traits-dialog).\n\n## [`dropck_eyepatch`](#dropck_eyepatch)\n\nThe tracking issue for this feature is: [#34761](https://github.com/rust-lang/rust/issues/34761)\n\n---\n\n## [`dyn_star`](#dyn_star)\n\nThe tracking issue for this feature is: [#102425](https://github.com/rust-lang/rust/issues/102425)\n\n---\n\n## [`effects`](#effects)\n\nThe tracking issue for this feature is: [#102090](https://github.com/rust-lang/rust/issues/102090)\n\n---\n\n## [`ermsb_target_feature`](#ermsb_target_feature)\n\nThe tracking issue for this feature is: [#44839](https://github.com/rust-lang/rust/issues/44839)\n\n---\n\n## [`exhaustive_patterns`](#exhaustive_patterns)\n\nThe tracking issue for this feature is: [#51085](https://github.com/rust-lang/rust/issues/51085)\n\n---\n\n## [`explicit_tail_calls`](#explicit_tail_calls)\n\nThe tracking issue for this feature is: [#112788](https://github.com/rust-lang/rust/issues/112788)\n\n---\n\n## [`expr_fragment_specifier_2024`](#expr_fragment_specifier_2024)\n\nThe tracking issue for this feature is: [#123742](https://github.com/rust-lang/rust/issues/123742)\n\n---\n\n## [`extended_varargs_abi_support`](#extended_varargs_abi_support)\n\nThe tracking issue for this feature is: [#100189](https://github.com/rust-lang/rust/issues/100189)\n\n---\n\nThis feature adds the possibility of using `sysv64`, `win64` or `efiapi` calling conventions on functions with varargs.\n\n## [`extern_types`](#extern_types)\n\nThe tracking issue for this feature is: [#43467](https://github.com/rust-lang/rust/issues/43467)\n\n---\n\n## [`f128`](#f128)\n\nThe tracking issue for this feature is: [#116909](https://github.com/rust-lang/rust/issues/116909)\n\n---\n\nEnable the `f128` type for IEEE 128-bit floating numbers (quad precision).\n\n## [`f16`](#f16)\n\nThe tracking issue for this feature is: [#116909](https://github.com/rust-lang/rust/issues/116909)\n\n---\n\nEnable the `f16` type for IEEE 16-bit floating numbers (half precision).\n\n## [`ffi_const`](#ffi_const)\n\nThe tracking issue for this feature is: [#58328](https://github.com/rust-lang/rust/issues/58328)\n\n---\n\nThe `#[ffi_const]` attribute applies clang's `const` attribute to foreign functions declarations.\n\nThat is, `#[ffi_const]` functions shall have no effects except for its return value, which can only depend on the values of the function parameters, and is not affected by changes to the observable state of the program.\n\nApplying the `#[ffi_const]` attribute to a function that violates these requirements is undefined behaviour.\n\nThis attribute enables Rust to perform common optimizations, like sub-expression elimination, and it can avoid emitting some calls in repeated invocations of the function with the same argument values regardless of other operations being performed in between these functions calls (as opposed to `#[ffi_pure]` functions).\n\n## [Pitfalls](#pitfalls)\n\nA `#[ffi_const]` function can only read global memory that would not affect its return value for the whole execution of the program (e.g. immutable global memory). `#[ffi_const]` functions are referentially-transparent and therefore more strict than `#[ffi_pure]` functions.\n\nA common pitfall involves applying the `#[ffi_const]` attribute to a function that reads memory through pointer arguments which do not necessarily point to immutable global memory.\n\nA `#[ffi_const]` function that returns unit has no effect on the abstract machine's state, and a `#[ffi_const]` function cannot be `#[ffi_pure]`.\n\nA `#[ffi_const]` function must not diverge, neither via a side effect (e.g. a call to `abort`) nor by infinite loops.\n\nWhen translating C headers to Rust FFI, it is worth verifying for which targets the `const` attribute is enabled in those headers, and using the appropriate `cfg` macros in the Rust side to match those definitions. While the semantics of `const` are implemented identically by many C and C++ compilers, e.g., clang, [GCC](https://gcc.gnu.org/onlinedocs/gcc/Common-Function-Attributes.html#index-const-function-attribute), [ARM C/C++ compiler](http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0491c/Cacgigch.html), [IBM ILE C/C++](https://www.ibm.com/support/knowledgecenter/fr/ssw_ibm_i_71/rzarg/fn_attrib_const.htm), etc. they are not necessarily implemented in this way on all of them. It is therefore also worth verifying that the semantics of the C toolchain used to compile the binary being linked against are compatible with those of the `#[ffi_const]`.\n\n## [`ffi_pure`](#ffi_pure)\n\nThe tracking issue for this feature is: [#58329](https://github.com/rust-lang/rust/issues/58329)\n\n---\n\nThe `#[ffi_pure]` attribute applies clang's `pure` attribute to foreign functions declarations.\n\nThat is, `#[ffi_pure]` functions shall have no effects except for its return value, which shall not change across two consecutive function calls with the same parameters.\n\nApplying the `#[ffi_pure]` attribute to a function that violates these requirements is undefined behavior.\n\nThis attribute enables Rust to perform common optimizations, like sub-expression elimination and loop optimizations. Some common examples of pure functions are `strlen` or `memcmp`.\n\nThese optimizations are only applicable when the compiler can prove that no program state observable by the `#[ffi_pure]` function has changed between calls of the function, which could alter the result. See also the `#[ffi_const]` attribute, which provides stronger guarantees regarding the allowable behavior of a function, enabling further optimization.\n\n## [Pitfalls](#pitfalls-1)\n\nA `#[ffi_pure]` function can read global memory through the function parameters (e.g. pointers), globals, etc. `#[ffi_pure]` functions are not referentially-transparent, and are therefore more relaxed than `#[ffi_const]` functions.\n\nHowever, accessing global memory through volatile or atomic reads can violate the requirement that two consecutive function calls shall return the same value.\n\nA `pure` function that returns unit has no effect on the abstract machine's state.\n\nA `#[ffi_pure]` function must not diverge, neither via a side effect (e.g. a call to `abort`) nor by infinite loops.\n\nWhen translating C headers to Rust FFI, it is worth verifying for which targets the `pure` attribute is enabled in those headers, and using the appropriate `cfg` macros in the Rust side to match those definitions. While the semantics of `pure` are implemented identically by many C and C++ compilers, e.g., clang, [GCC](https://gcc.gnu.org/onlinedocs/gcc/Common-Function-Attributes.html#index-pure-function-attribute), [ARM C/C++ compiler](http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0491c/Cacigdac.html), [IBM ILE C/C++](https://www.ibm.com/support/knowledgecenter/fr/ssw_ibm_i_71/rzarg/fn_attrib_pure.htm), etc. they are not necessarily implemented in this way on all of them. It is therefore also worth verifying that the semantics of the C toolchain used to compile the binary being linked against are compatible with those of the `#[ffi_pure]`.\n\n## [`fn_align`](#fn_align)\n\nThe tracking issue for this feature is: [#82232](https://github.com/rust-lang/rust/issues/82232)\n\n---\n\n## [`fn_delegation`](#fn_delegation)\n\nThe tracking issue for this feature is: [#118212](https://github.com/rust-lang/rust/issues/118212)\n\n---\n\n## [`freeze_impls`](#freeze_impls)\n\nThe tracking issue for this feature is: [#121675](https://github.com/rust-lang/rust/issues/121675)\n\n---\n\n## [`fundamental`](#fundamental)\n\nThe tracking issue for this feature is: [#29635](https://github.com/rust-lang/rust/issues/29635)\n\n---\n\n## [`gen_blocks`](#gen_blocks)\n\nThe tracking issue for this feature is: [#117078](https://github.com/rust-lang/rust/issues/117078)\n\n---\n\n## [`generic_arg_infer`](#generic_arg_infer)\n\nThe tracking issue for this feature is: [#85077](https://github.com/rust-lang/rust/issues/85077)\n\n---\n\n## [`generic_assert`](#generic_assert)\n\nThis feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.\n\n---\n\n## [`generic_associated_types_extended`](#generic_associated_types_extended)\n\nThe tracking issue for this feature is: [#95451](https://github.com/rust-lang/rust/issues/95451)\n\n---\n\n## [`generic_const_exprs`](#generic_const_exprs)\n\nThe tracking issue for this feature is: [#76560](https://github.com/rust-lang/rust/issues/76560)\n\n---\n\n## [`generic_const_items`](#generic_const_items)\n\nThe tracking issue for this feature is: [#113521](https://github.com/rust-lang/rust/issues/113521)\n\n---\n\n## [`global_registration`](#global_registration)\n\nThe tracking issue for this feature is: [#125119](https://github.com/rust-lang/rust/issues/125119)\n\n---\n\n## [`half_open_range_patterns_in_slices`](#half_open_range_patterns_in_slices)\n\nThe tracking issue for this feature is: [#67264](https://github.com/rust-lang/rust/issues/67264) It is a future part of the `exclusive_range_pattern` feature, tracked at [#37854](https://github.com/rust-lang/rust/issues/37854).\n\n---\n\nThis feature allow using top-level half-open range patterns in slices.\n\n```rust\n#![feature(half_open_range_patterns_in_slices)]\n\nfn main() {\n    let xs = [13, 1, 5, 2, 3, 1, 21, 8];\n    let [a @ 3.., b @ ..3, c @ 4..6, ..] = xs else { return; };\n}\n```\n\nNote that this feature is not required if the patterns are wrapped between parenthesis.\n\n```rust\nfn main() {\n    let xs = [13, 1];\n    let [(a @ 3..), c] = xs else { return; };\n}\n```\n\n## [`hexagon_target_feature`](#hexagon_target_feature)\n\nThe tracking issue for this feature is: [#44839](https://github.com/rust-lang/rust/issues/44839)\n\n---\n\n## [`if_let_guard`](#if_let_guard)\n\nThe tracking issue for this feature is: [#51114](https://github.com/rust-lang/rust/issues/51114)\n\n---\n\n## [`impl_trait_in_assoc_type`](#impl_trait_in_assoc_type)\n\nThe tracking issue for this feature is: [#63063](https://github.com/rust-lang/rust/issues/63063)\n\n---\n\n## [`impl_trait_in_fn_trait_return`](#impl_trait_in_fn_trait_return)\n\nThe tracking issue for this feature is: [#99697](https://github.com/rust-lang/rust/issues/99697)\n\n---\n\n## [`inherent_associated_types`](#inherent_associated_types)\n\nThe tracking issue for this feature is: [#8995](https://github.com/rust-lang/rust/issues/8995)\n\n---\n\n## [`inline_const_pat`](#inline_const_pat)\n\nThe tracking issue for this feature is: [#76001](https://github.com/rust-lang/rust/issues/76001)\n\n---\n\nThis feature allows you to use inline constant expressions in pattern position:\n\n```rust\n#![allow(unused)]\n#![feature(inline_const_pat)]\n\nfn main() {\nconst fn one() -> i32 { 1 }\n\nlet some_int = 3;\nmatch some_int {\n    const { 1 + 2 } => println!(\"Matched 1 + 2\"),\n    const { one() } => println!(\"Matched const fn returning 1\"),\n    _ => println!(\"Didn't match anything :(\"),\n}\n}\n```\n\n## [`intra-doc-pointers`](#intra-doc-pointers)\n\nThe tracking issue for this feature is: [#80896](https://github.com/rust-lang/rust/issues/80896)\n\n---\n\nRustdoc does not currently allow disambiguating between `*const` and `*mut`, and raw pointers in intra-doc links are unstable until it does.\n\n```rust\n#![allow(unused)]\n#![feature(intra_doc_pointers)]\nfn main() {\n//! [pointer::add]\n}\n```\n\n## [`intrinsics`](#intrinsics)\n\nThe tracking issue for this feature is: None.\n\nIntrinsics are rarely intended to be stable directly, but are usually exported in some sort of stable manner. Prefer using the stable interfaces to the intrinsic directly when you can.\n\n---\n\n## [Intrinsics with fallback logic](#intrinsics-with-fallback-logic)\n\nMany intrinsics can be written in pure rust, albeit inefficiently or without supporting some features that only exist on some backends. Backends can simply not implement those intrinsics without causing any code miscompilations or failures to compile. All intrinsic fallback bodies are automatically made cross-crate inlineable (like `#[inline]`) by the codegen backend, but not the MIR inliner.\n\n```rust\n#![allow(unused)]\n#![feature(rustc_attrs, effects)]\n#![allow(internal_features)]\n\nfn main() {\n#[rustc_intrinsic]\nconst unsafe fn const_deallocate(_ptr: *mut u8, _size: usize, _align: usize) {}\n}\n```\n\nSince these are just regular functions, it is perfectly ok to create the intrinsic twice:\n\n```rust\n#![allow(unused)]\n#![feature(rustc_attrs, effects)]\n#![allow(internal_features)]\n\nfn main() {\n#[rustc_intrinsic]\nconst unsafe fn const_deallocate(_ptr: *mut u8, _size: usize, _align: usize) {}\n\nmod foo {\n    #[rustc_intrinsic]\n    const unsafe fn const_deallocate(_ptr: *mut u8, _size: usize, _align: usize) {\n        panic!(\"noisy const dealloc\")\n    }\n}\n\n}\n```\n\nThe behaviour on backends that override the intrinsic is exactly the same. On other backends, the intrinsic behaviour depends on which implementation is called, just like with any regular function.\n\n## [Intrinsics lowered to MIR instructions](#intrinsics-lowered-to-mir-instructions)\n\nVarious intrinsics have native MIR operations that they correspond to. Instead of requiring backends to implement both the intrinsic and the MIR operation, the `lower_intrinsics` pass will convert the calls to the MIR operation. Backends do not need to know about these intrinsics at all. These intrinsics only make sense without a body, and can either be declared as a \"rust-intrinsic\" or as a `#[rustc_intrinsic]`. The body is never used, as calls to the intrinsic do not exist anymore after MIR analyses.\n\n## [Intrinsics without fallback logic](#intrinsics-without-fallback-logic)\n\nThese must be implemented by all backends.\n\n### [`#[rustc_intrinsic]` declarations](#rustc_intrinsic-declarations)\n\nThese are written like intrinsics with fallback bodies, but the body is irrelevant. Use `loop {}` for the body or call the intrinsic recursively and add `#[rustc_intrinsic_must_be_overridden]` to the function to ensure that backends don't invoke the body.\n\n### [Legacy extern ABI based intrinsics](#legacy-extern-abi-based-intrinsics)\n\nThese are imported as if they were FFI functions, with the special `rust-intrinsic` ABI. For example, if one was in a freestanding context, but wished to be able to `transmute` between types, and perform efficient pointer arithmetic, one would import those functions via a declaration like\n\n```rust\n#![feature(intrinsics)]\n#![allow(internal_features)]\nfn main() {}\n\nextern \"rust-intrinsic\" {\n    fn transmute<T, U>(x: T) -> U;\n\n    fn arith_offset<T>(dst: *const T, offset: isize) -> *const T;\n}\n```\n\nAs with any other FFI functions, these are by default always `unsafe` to call. You can add `#[rustc_safe_intrinsic]` to the intrinsic to make it safe to call.\n\n## [`lahfsahf_target_feature`](#lahfsahf_target_feature)\n\nThe tracking issue for this feature is: [#44839](https://github.com/rust-lang/rust/issues/44839)\n\n---\n\n## [`lang_items`](#lang_items)\n\nThe tracking issue for this feature is: None.\n\n---\n\nThe `rustc` compiler has certain pluggable operations, that is, functionality that isn't hard-coded into the language, but is implemented in libraries, with a special marker to tell the compiler it exists. The marker is the attribute `#[lang = \"...\"]` and there are various different values of `...`, i.e. various different 'lang items'. Most of them can only be defined once.\n\nLang items are loaded lazily by the compiler; e.g. if one never uses `Box` then there is no need to define a function for `exchange_malloc`. `rustc` will emit an error when an item is needed but not found in the current crate or any that it depends on.\n\nSome features provided by lang items:\n\n-   overloadable operators via traits: the traits corresponding to the `==`, `<`, dereferencing (`*`) and `+` (etc.) operators are all marked with lang items; those specific four are `eq`, `partial_ord`, `deref`/`deref_mut`, and `add` respectively.\n-   panicking: the `panic` and `panic_impl` lang items, among others.\n-   stack unwinding: the lang item `eh_personality` is a function used by the failure mechanisms of the compiler. This is often mapped to GCC's personality function (see the [`std` implementation](https://github.com/rust-lang/rust/blob/master/library/std/src/sys/personality/gcc.rs) for more information), but programs which don't trigger a panic can be assured that this function is never called. Additionally, a `eh_catch_typeinfo` static is needed for certain targets which implement Rust panics on top of C++ exceptions.\n-   the traits in `core::marker` used to indicate types of various kinds; e.g. lang items `sized`, `sync` and `copy`.\n-   memory allocation, see below.\n\nMost lang items are defined by `core`, but if you're trying to build an executable without the `std` crate, you might run into the need for lang item definitions.\n\n## [Example: Implementing a `Box`](#example-implementing-a-box)\n\n`Box` pointers require two lang items: one for the type itself and one for allocation. A freestanding program that uses the `Box` sugar for dynamic allocations via `malloc` and `free`:\n\n```rust\n#![feature(lang_items, start, core_intrinsics, rustc_private, panic_unwind, rustc_attrs)]\n#![allow(internal_features)]\n#![no_std]\n\nextern crate libc;\nextern crate unwind;\n\nuse core::ffi::c_void;\nuse core::intrinsics;\nuse core::panic::PanicInfo;\nuse core::ptr::NonNull;\n\npub struct Global; // the global allocator\nstruct Unique<T>(NonNull<T>);\n\n#[lang = \"owned_box\"]\npub struct Box<T, A = Global>(Unique<T>, A);\n\nimpl<T> Box<T> {\n    pub fn new(x: T) -> Self {\n        #[rustc_box]\n        Box::new(x)\n    }\n}\n\nimpl<T, A> Drop for Box<T, A> {\n    fn drop(&mut self) {\n        unsafe {\n            libc::free(self.0.0.as_ptr() as *mut c_void);\n        }\n    }\n}\n\n#[lang = \"exchange_malloc\"]\nunsafe fn allocate(size: usize, _align: usize) -> *mut u8 {\n    let p = libc::malloc(size) as *mut u8;\n\n    // Check if `malloc` failed:\n    if p.is_null() {\n        intrinsics::abort();\n    }\n\n    p\n}\n\n#[start]\nfn main(_argc: isize, _argv: *const *const u8) -> isize {\n    let _x = Box::new(1);\n\n    0\n}\n\n#[lang = \"eh_personality\"]\nfn rust_eh_personality() {}\n\n#[panic_handler]\nfn panic_handler(_info: &PanicInfo) -> ! { intrinsics::abort() }\n```\n\nNote the use of `abort`: the `exchange_malloc` lang item is assumed to return a valid pointer, and so needs to do the check internally.\n\n## [List of all language items](#list-of-all-language-items)\n\nAn up-to-date list of all language items can be found [here](https://github.com/rust-lang/rust/blob/master/compiler/rustc_hir/src/lang_items.rs) in the compiler code.\n\n## [`large_assignments`](#large_assignments)\n\nThe tracking issue for this feature is: [#83518](https://github.com/rust-lang/rust/issues/83518)\n\n---\n\n## [`lazy_type_alias`](#lazy_type_alias)\n\nThe tracking issue for this feature is: [#112792](https://github.com/rust-lang/rust/issues/112792)\n\n---\n\n## [`let_chains`](#let_chains)\n\nThe tracking issue for this feature is: [#53667](https://github.com/rust-lang/rust/issues/53667)\n\n---\n\n## [`lifetime_capture_rules_2024`](#lifetime_capture_rules_2024)\n\nThis feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.\n\n---\n\n## [`link_arg_attribute`](#link_arg_attribute)\n\nThe tracking issue for this feature is: [#99427](https://github.com/rust-lang/rust/issues/99427)\n\n---\n\nThe `link_arg_attribute` feature allows passing arguments into the linker from inside of the source code. Order is preserved for link attributes as they were defined on a single extern block:\n\n```rust\n#![allow(unused)]\n#![feature(link_arg_attribute)]\n\nfn main() {\n#[link(kind = \"link-arg\", name = \"--start-group\")]\n#[link(kind = \"static\", name = \"c\")]\n#[link(kind = \"static\", name = \"gcc\")]\n#[link(kind = \"link-arg\", name = \"--end-group\")]\nextern \"C\" {}\n}\n```\n\n## [`link_cfg`](#link_cfg)\n\nThis feature is internal to the Rust compiler and is not intended for general use.\n\n---\n\n## [`link_llvm_intrinsics`](#link_llvm_intrinsics)\n\nThe tracking issue for this feature is: [#29602](https://github.com/rust-lang/rust/issues/29602)\n\n---\n\n## [`linkage`](#linkage)\n\nThe tracking issue for this feature is: [#29603](https://github.com/rust-lang/rust/issues/29603)\n\n---\n\n## [`lint_reasons`](#lint_reasons)\n\nThe tracking issue for this feature is: [#54503](https://github.com/rust-lang/rust/issues/54503)\n\n---\n\n## [`loongarch_target_feature`](#loongarch_target_feature)\n\nThe tracking issue for this feature is: [#44839](https://github.com/rust-lang/rust/issues/44839)\n\n---\n\nThe tracking issue for this feature is: [#83527](https://github.com/rust-lang/rust/issues/83527)\n\n---\n\n## [`marker_trait_attr`](#marker_trait_attr)\n\nThe tracking issue for this feature is: [#29864](https://github.com/rust-lang/rust/issues/29864)\n\n---\n\nNormally, Rust keeps you from adding trait implementations that could overlap with each other, as it would be ambiguous which to use. This feature, however, carves out an exception to that rule: a trait can opt-in to having overlapping implementations, at the cost that those implementations are not allowed to override anything (and thus the trait itself cannot have any associated items, as they're pointless when they'd need to do the same thing for every type anyway).\n\n```rust\n#![allow(unused)]\n#![feature(marker_trait_attr)]\n\nfn main() {\n#[marker] trait CheapToClone: Clone {}\n\nimpl<T: Copy> CheapToClone for T {}\n\n// These could potentially overlap with the blanket implementation above,\n// so are only allowed because CheapToClone is a marker trait.\nimpl<T: CheapToClone, U: CheapToClone> CheapToClone for (T, U) {}\nimpl<T: CheapToClone> CheapToClone for std::ops::Range<T> {}\n\nfn cheap_clone<T: CheapToClone>(t: T) -> T {\n    t.clone()\n}\n}\n```\n\nThis is expected to replace the unstable `overlapping_marker_traits` feature, which applied to all empty traits (without needing an opt-in).\n\n## [`min_exhaustive_patterns`](#min_exhaustive_patterns)\n\nThe tracking issue for this feature is: [#119612](https://github.com/rust-lang/rust/issues/119612)\n\n---\n\n## [`min_specialization`](#min_specialization)\n\nThe tracking issue for this feature is: [#31844](https://github.com/rust-lang/rust/issues/31844)\n\n---\n\n## [`mips_target_feature`](#mips_target_feature)\n\nThe tracking issue for this feature is: [#44839](https://github.com/rust-lang/rust/issues/44839)\n\n---\n\n## [`more_qualified_paths`](#more_qualified_paths)\n\nThe `more_qualified_paths` feature can be used in order to enable the use of qualified paths in patterns.\n\n## [Example](#example-9)\n\n```rust\n#![feature(more_qualified_paths)]\n\nfn main() {\n    // destructure through a qualified path\n    let <Foo as A>::Assoc { br } = StructStruct { br: 2 };\n}\n\nstruct StructStruct {\n    br: i8,\n}\n\nstruct Foo;\n\ntrait A {\n    type Assoc;\n}\n\nimpl A for Foo {\n    type Assoc = StructStruct;\n}\n```\n\n## [`multiple_supertrait_upcastable`](#multiple_supertrait_upcastable)\n\nThis feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.\n\n---\n\n## [`must_not_suspend`](#must_not_suspend)\n\nThe tracking issue for this feature is: [#83310](https://github.com/rust-lang/rust/issues/83310)\n\n---\n\n## [`mut_ref`](#mut_ref)\n\nThe tracking issue for this feature is: [#123076](https://github.com/rust-lang/rust/issues/123076)\n\n---\n\n## [`naked_functions`](#naked_functions)\n\nThe tracking issue for this feature is: [#90957](https://github.com/rust-lang/rust/issues/90957)\n\n---\n\n## [`native_link_modifiers_as_needed`](#native_link_modifiers_as_needed)\n\nThe tracking issue for this feature is: [#81490](https://github.com/rust-lang/rust/issues/81490)\n\n---\n\nThe `native_link_modifiers_as_needed` feature allows you to use the `as-needed` modifier.\n\n`as-needed` is only compatible with the `dynamic` and `framework` linking kinds. Using any other kind will result in a compiler error.\n\n`+as-needed` means that the library will be actually linked only if it satisfies some undefined symbols at the point at which it is specified on the command line, making it similar to static libraries in this regard.\n\nThis modifier translates to `--as-needed` for ld-like linkers, and to `-dead_strip_dylibs` / `-needed_library` / `-needed_framework` for ld64. The modifier does nothing for linkers that don't support it (e.g. `link.exe`).\n\nThe default for this modifier is unclear, some targets currently specify it as `+as-needed`, some do not. We may want to try making `+as-needed` a default for all targets.\n\n## [`needs_panic_runtime`](#needs_panic_runtime)\n\nThe tracking issue for this feature is: [#32837](https://github.com/rust-lang/rust/issues/32837)\n\n---\n\n## [`negative_bounds`](#negative_bounds)\n\nThis feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.\n\n---\n\n## [`negative_impls`](#negative_impls)\n\nThe tracking issue for this feature is [#68318](https://github.com/rust-lang/rust/issues/68318).\n\n---\n\nWith the feature gate `negative_impls`, you can write negative impls as well as positive ones:\n\n```rust\n#![allow(unused)]\n#![feature(negative_impls)]\nfn main() {\ntrait DerefMut { }\nimpl<T: ?Sized> !DerefMut for &T { }\n}\n```\n\nNegative impls indicate a semver guarantee that the given trait will not be implemented for the given types. Negative impls play an additional purpose for auto traits, described below.\n\nNegative impls have the following characteristics:\n\n-   They do not have any items.\n-   They must obey the orphan rules as if they were a positive impl.\n-   They cannot \"overlap\" with any positive impls.\n\n## [Semver interaction](#semver-interaction)\n\nIt is a breaking change to remove a negative impl. Negative impls are a commitment not to implement the given trait for the named types.\n\n## [Orphan and overlap rules](#orphan-and-overlap-rules)\n\nNegative impls must obey the same orphan rules as a positive impl. This implies you cannot add a negative impl for types defined in upstream crates and so forth.\n\nSimilarly, negative impls cannot overlap with positive impls, again using the same \"overlap\" check that we ordinarily use to determine if two impls overlap. (Note that positive impls typically cannot overlap with one another either, except as permitted by specialization.)\n\n## [Interaction with auto traits](#interaction-with-auto-traits)\n\nDeclaring a negative impl `impl !SomeAutoTrait for SomeType` for an auto-trait serves two purposes:\n\n-   as with any trait, it declares that `SomeType` will never implement `SomeAutoTrait`;\n-   it disables the automatic `SomeType: SomeAutoTrait` impl that would otherwise have been generated.\n\nNote that, at present, there is no way to indicate that a given type does not implement an auto trait _but that it may do so in the future_. For ordinary types, this is done by simply not declaring any impl at all, but that is not an option for auto traits. A workaround is that one could embed a marker type as one of the fields, where the marker type is `!AutoTrait`.\n\nNegative impls are used to declare that `&T: !DerefMut` and `&mut T: !Clone`, as required to fix the soundness of `Pin` described in [#66544](https://github.com/rust-lang/rust/issues/66544).\n\nThis serves two purposes:\n\n-   For proving the correctness of unsafe code, we can use that impl as evidence that no `DerefMut` or `Clone` impl exists.\n-   It prevents downstream crates from creating such impls.\n\n## [`never_patterns`](#never_patterns)\n\nThe tracking issue for this feature is: [#118155](https://github.com/rust-lang/rust/issues/118155)\n\n---\n\n## [`never_type`](#never_type)\n\nThe tracking issue for this feature is: [#35121](https://github.com/rust-lang/rust/issues/35121)\n\n---\n\n## [`never_type_fallback`](#never_type_fallback)\n\nThe tracking issue for this feature is: [#65992](https://github.com/rust-lang/rust/issues/65992)\n\n---\n\n## [`no_core`](#no_core)\n\nThe tracking issue for this feature is: [#29639](https://github.com/rust-lang/rust/issues/29639)\n\n---\n\n## [`no_sanitize`](#no_sanitize)\n\nThe tracking issue for this feature is: [#39699](https://github.com/rust-lang/rust/issues/39699)\n\n---\n\nThe `no_sanitize` attribute can be used to selectively disable sanitizer instrumentation in an annotated function. This might be useful to: avoid instrumentation overhead in a performance critical function, or avoid instrumenting code that contains constructs unsupported by given sanitizer.\n\nThe precise effect of this annotation depends on particular sanitizer in use. For example, with `no_sanitize(thread)`, the thread sanitizer will no longer instrument non-atomic store / load operations, but it will instrument atomic operations to avoid reporting false positives and provide meaning full stack traces.\n\n## [Examples](#examples-8)\n\n```rust\n#![allow(unused)]\n#![feature(no_sanitize)]\n\nfn main() {\n#[no_sanitize(address)]\nfn foo() {\n  // ...\n}\n}\n```\n\n## [`non_exhaustive_omitted_patterns_lint`](#non_exhaustive_omitted_patterns_lint)\n\nThe tracking issue for this feature is: [#89554](https://github.com/rust-lang/rust/issues/89554)\n\n---\n\n## [`non_lifetime_binders`](#non_lifetime_binders)\n\nThe tracking issue for this feature is: [#108185](https://github.com/rust-lang/rust/issues/108185)\n\n---\n\n## [`object_safe_for_dispatch`](#object_safe_for_dispatch)\n\nThe tracking issue for this feature is: [#43561](https://github.com/rust-lang/rust/issues/43561)\n\n---\n\n## [`offset_of_enum`](#offset_of_enum)\n\nThe tracking issue for this feature is: [#120141](https://github.com/rust-lang/rust/issues/120141)\n\n---\n\n## [`offset_of_nested`](#offset_of_nested)\n\nThe tracking issue for this feature is: [#120140](https://github.com/rust-lang/rust/issues/120140)\n\n---\n\n## [`omit_gdb_pretty_printer_section`](#omit_gdb_pretty_printer_section)\n\nThis feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.\n\n---\n\n## [`optimize_attribute`](#optimize_attribute)\n\nThe tracking issue for this feature is: [#54882](https://github.com/rust-lang/rust/issues/54882)\n\n---\n\n## [`panic_runtime`](#panic_runtime)\n\nThe tracking issue for this feature is: [#32837](https://github.com/rust-lang/rust/issues/32837)\n\n---\n\n## [`pattern_complexity`](#pattern_complexity)\n\nThis feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.\n\n---\n\n## [`pattern_types`](#pattern_types)\n\nThe tracking issue for this feature is: [#123646](https://github.com/rust-lang/rust/issues/123646)\n\n---\n\n## [`postfix-match`](#postfix-match)\n\n`postfix-match` adds the feature for matching upon values postfix the expressions that generate the values.\n\n```rust\n#![allow(unused)]\n#![feature(postfix_match)]\n\nfn main() {\nenum Foo {\n    Bar,\n    Baz\n}\n\nfn get_foo() -> Foo {\n    Foo::Bar\n}\n\nget_foo().match {\n    Foo::Bar => {},\n    Foo::Baz => panic!(),\n}\n}\n```\n\n## [`powerpc_target_feature`](#powerpc_target_feature)\n\nThe tracking issue for this feature is: [#44839](https://github.com/rust-lang/rust/issues/44839)\n\n---\n\n## [`precise_capturing`](#precise_capturing)\n\nThe tracking issue for this feature is: [#123432](https://github.com/rust-lang/rust/issues/123432)\n\n---\n\n## [`prelude_import`](#prelude_import)\n\nThis feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.\n\n---\n\n## [`prfchw_target_feature`](#prfchw_target_feature)\n\nThe tracking issue for this feature is: [#44839](https://github.com/rust-lang/rust/issues/44839)\n\n---\n\n## [`proc_macro_hygiene`](#proc_macro_hygiene)\n\nThe tracking issue for this feature is: [#54727](https://github.com/rust-lang/rust/issues/54727)\n\n---\n\n## [`profiler_runtime`](#profiler_runtime)\n\nThe tracking issue for this feature is: [#42524](https://github.com/rust-lang/rust/issues/42524).\n\n---\n\n## [`raw_ref_op`](#raw_ref_op)\n\nThe tracking issue for this feature is: [#64490](https://github.com/rust-lang/rust/issues/64490)\n\n---\n\n## [`ref_pat_eat_one_layer_2024`](#ref_pat_eat_one_layer_2024)\n\nThe tracking issue for this feature is: [#123076](https://github.com/rust-lang/rust/issues/123076)\n\n---\n\nThe tracking issue for this feature is: [#66079](https://github.com/rust-lang/rust/issues/66079)\n\n---\n\n## [`repr_simd`](#repr_simd)\n\nThe tracking issue for this feature is: [#27731](https://github.com/rust-lang/rust/issues/27731)\n\n---\n\n## [`repr128`](#repr128)\n\nThe tracking issue for this feature is: [#56071](https://github.com/rust-lang/rust/issues/56071)\n\n---\n\nThe `repr128` feature adds support for `#[repr(u128)]` on `enum`s.\n\n```rust\n#![allow(unused)]\n#![feature(repr128)]\n\nfn main() {\n#[repr(u128)]\nenum Foo {\n    Bar(u64),\n}\n}\n```\n\n## [`result_ffi_guarantees`](#result_ffi_guarantees)\n\nThe tracking issue for this feature is: [#110503](https://github.com/rust-lang/rust/issues/110503)\n\n---\n\nThis feature adds the possibility of using `Result<T, E>` in FFI if T's niche value can be used to describe E or vise-versa.\n\nSee [RFC 3391](https://github.com/rust-lang/rfcs/blob/master/text/3391-result_ffi_guarantees.md) for more information.\n\n## [`return_type_notation`](#return_type_notation)\n\nThe tracking issue for this feature is: [#109417](https://github.com/rust-lang/rust/issues/109417)\n\n---\n\n## [`riscv_target_feature`](#riscv_target_feature)\n\nThe tracking issue for this feature is: [#44839](https://github.com/rust-lang/rust/issues/44839)\n\n---\n\n## [`rtm_target_feature`](#rtm_target_feature)\n\nThe tracking issue for this feature is: [#44839](https://github.com/rust-lang/rust/issues/44839)\n\n---\n\n## [`rust_cold_cc`](#rust_cold_cc)\n\nThe tracking issue for this feature is: [#97544](https://github.com/rust-lang/rust/issues/97544)\n\n---\n\n## [`rustc_allow_const_fn_unstable`](#rustc_allow_const_fn_unstable)\n\nThe tracking issue for this feature is: [#69399](https://github.com/rust-lang/rust/issues/69399)\n\n---\n\n## [`rustc_attrs`](#rustc_attrs)\n\nThis feature has no tracking issue, and is therefore internal to the compiler, not being intended for general use.\n\nNote: `rustc_attrs` enables many rustc-internal attributes and this page only discuss a few of them.\n\n---\n\nThe `rustc_attrs` feature allows debugging rustc type layouts by using `#[rustc_layout(...)]` to debug layout at compile time (it even works with `cargo check`) as an alternative to `rustc -Z print-type-sizes` that is way more verbose.\n\nOptions provided by `#[rustc_layout(...)]` are `debug`, `size`, `align`, `abi`. Note that it only works on sized types without generics.\n\n## [Examples](#examples-9)\n\n```rust\n#![allow(unused)]\n#![feature(rustc_attrs)]\n\nfn main() {\n#[rustc_layout(abi, size)]\npub enum X {\n    Y(u8, u8, u8),\n    Z(isize),\n}\n}\n```\n\nWhen that is compiled, the compiler will error with something like\n\n```text\nerror: abi: Aggregate { sized: true }\n --> src/lib.rs:4:1\n  |\n4 | / pub enum T {\n5 | |     Y(u8, u8, u8),\n6 | |     Z(isize),\n7 | | }\n  | |_^\n\nerror: size: Size { raw: 16 }\n --> src/lib.rs:4:1\n  |\n4 | / pub enum T {\n5 | |     Y(u8, u8, u8),\n6 | |     Z(isize),\n7 | | }\n  | |_^\n\nerror: aborting due to 2 previous errors\n\n```\n\n## [`rustc_private`](#rustc_private)\n\nThe tracking issue for this feature is: [#27812](https://github.com/rust-lang/rust/issues/27812)\n\n---\n\n## [`rustdoc_internals`](#rustdoc_internals)\n\nThe tracking issue for this feature is: [#90418](https://github.com/rust-lang/rust/issues/90418)\n\n---\n\n## [`rustdoc_missing_doc_code_examples`](#rustdoc_missing_doc_code_examples)\n\nThe tracking issue for this feature is: [#101730](https://github.com/rust-lang/rust/issues/101730)\n\n---\n\n## [`simd_ffi`](#simd_ffi)\n\nThe tracking issue for this feature is: [#27731](https://github.com/rust-lang/rust/issues/27731)\n\n---\n\n## [`specialization`](#specialization)\n\nThe tracking issue for this feature is: [#31844](https://github.com/rust-lang/rust/issues/31844)\n\n---\n\n## [`sse4a_target_feature`](#sse4a_target_feature)\n\nThe tracking issue for this feature is: [#44839](https://github.com/rust-lang/rust/issues/44839)\n\n---\n\n## [`staged_api`](#staged_api)\n\nThis feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.\n\n---\n\n## [`start`](#start)\n\nThe tracking issue for this feature is: [#29633](https://github.com/rust-lang/rust/issues/29633)\n\n---\n\nAllows you to mark a function as the entry point of the executable, which is necessary in `#![no_std]` environments.\n\nThe function marked `#[start]` is passed the command line parameters in the same format as the C main function (aside from the integer types being used). It has to be non-generic and have the following signature:\n\n```rust\nlet _:\nfn(isize, *const *const u8) -> isize\n;\n```\n\nThis feature should not be confused with the `start` _lang item_ which is defined by the `std` crate and is written `#[lang = \"start\"]`.\n\n## [Usage together with the `std` crate](#usage-together-with-the-std-crate)\n\n`#[start]` can be used in combination with the `std` crate, in which case the normal `main` function (which would get called from the `std` crate) won't be used as an entry point. The initialization code in `std` will be skipped this way.\n\nExample:\n\n```rust\n#![allow(unused)]\n#![feature(start)]\n\nfn main() {\n#[start]\nfn start(_argc: isize, _argv: *const *const u8) -> isize {\n    0\n}\n}\n```\n\nUnwinding the stack past the `#[start]` function is currently considered Undefined Behavior (for any unwinding implementation):\n\n```rust\n#![feature(start)]\n\n#[start]\nfn start(_argc: isize, _argv: *const *const u8) -> isize {\n    std::panic::catch_unwind(|| {\n        panic!(); // panic safely gets caught or safely aborts execution\n    });\n\n    panic!(); // UB!\n\n    0\n}\n```\n\n## [`stmt_expr_attributes`](#stmt_expr_attributes)\n\nThe tracking issue for this feature is: [#15701](https://github.com/rust-lang/rust/issues/15701)\n\n---\n\n## [`strict_provenance`](#strict_provenance)\n\nThe tracking issue for this feature is: [#95228](https://github.com/rust-lang/rust/issues/95228)\n\n---\n\nThe `strict_provenance` feature allows to enable the `fuzzy_provenance_casts` and `lossy_provenance_casts` lints. These lint on casts between integers and pointers, that are recommended against or invalid in the strict provenance model. The same feature gate is also used for the experimental strict provenance API in `std` (actually `core`).\n\n## [Example](#example-10)\n\n```rust\n#![feature(strict_provenance)]\n#![warn(fuzzy_provenance_casts)]\n\nfn main() {\n    let _dangling = 16_usize as *const u8;\n    //~^ WARNING: strict provenance disallows casting integer `usize` to pointer `*const u8`\n}\n```\n\n## [`string_deref_patterns`](#string_deref_patterns)\n\nThe tracking issue for this feature is: [#87121](https://github.com/rust-lang/rust/issues/87121)\n\n---\n\nThis feature permits pattern matching `String` to `&str` through [its `Deref` implementation](https://doc.rust-lang.org/std/string/struct.String.html#impl-Deref-for-String).\n\n```rust\n#![allow(unused)]\n#![feature(string_deref_patterns)]\n\nfn main() {\npub enum Value {\n    String(String),\n    Number(u32),\n}\n\npub fn is_it_the_answer(value: Value) -> bool {\n    match value {\n        Value::String(\"42\") => true,\n        Value::Number(42) => true,\n        _ => false,\n    }\n}\n}\n```\n\nWithout this feature other constructs such as match guards have to be used.\n\n```rust\n#![allow(unused)]\nfn main() {\npub enum Value {\n   String(String),\n   Number(u32),\n}\n\npub fn is_it_the_answer(value: Value) -> bool {\n    match value {\n        Value::String(s) if s == \"42\" => true,\n        Value::Number(42) => true,\n        _ => false,\n    }\n}\n}\n```\n\n## [`structural_match`](#structural_match)\n\nThe tracking issue for this feature is: [#31434](https://github.com/rust-lang/rust/issues/31434)\n\n---\n\n## [`target_feature_11`](#target_feature_11)\n\nThe tracking issue for this feature is: [#69098](https://github.com/rust-lang/rust/issues/69098)\n\n---\n\n## [`tbm_target_feature`](#tbm_target_feature)\n\nThe tracking issue for this feature is: [#44839](https://github.com/rust-lang/rust/issues/44839)\n\n---\n\n## [`test_unstable_lint`](#test_unstable_lint)\n\nThis feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.\n\n---\n\n## [`thread_local`](#thread_local)\n\nThe tracking issue for this feature is: [#29594](https://github.com/rust-lang/rust/issues/29594)\n\n---\n\n## [`trait_alias`](#trait_alias)\n\nThe tracking issue for this feature is: [#41517](https://github.com/rust-lang/rust/issues/41517)\n\n---\n\nThe `trait_alias` feature adds support for trait aliases. These allow aliases to be created for one or more traits (currently just a single regular trait plus any number of auto-traits), and used wherever traits would normally be used as either bounds or trait objects.\n\n```rust\n#![feature(trait_alias)]\n\ntrait Foo = std::fmt::Debug + Send;\ntrait Bar = Foo + Sync;\n\n// Use trait alias as bound on type parameter.\nfn foo<T: Foo>(v: &T) {\n    println!(\"{:?}\", v);\n}\n\npub fn main() {\n    foo(&1);\n\n    // Use trait alias for trait objects.\n    let a: &Bar = &123;\n    println!(\"{:?}\", a);\n    let b = Box::new(456) as Box<dyn Foo>;\n    println!(\"{:?}\", b);\n}\n```\n\n## [`trait_upcasting`](#trait_upcasting)\n\nThe tracking issue for this feature is: [#65991](https://github.com/rust-lang/rust/issues/65991)\n\n---\n\nThe `trait_upcasting` feature adds support for trait upcasting coercion. This allows a trait object of type `dyn Bar` to be cast to a trait object of type `dyn Foo` so long as `Bar: Foo`.\n\n```rust\n#![allow(unused)]\n#![feature(trait_upcasting)]\n#![allow(incomplete_features)]\n\nfn main() {\ntrait Foo {}\n\ntrait Bar: Foo {}\n\nimpl Foo for i32 {}\n\nimpl<T: Foo + ?Sized> Bar for T {}\n\nlet bar: &dyn Bar = &123;\nlet foo: &dyn Foo = bar;\n}\n```\n\n## [`transmute_generic_consts`](#transmute_generic_consts)\n\nThe tracking issue for this feature is: [#109929](https://github.com/rust-lang/rust/issues/109929)\n\n---\n\n## [`transparent_unions`](#transparent_unions)\n\nThe tracking issue for this feature is [#60405](https://github.com/rust-lang/rust/issues/60405)\n\n---\n\nThe `transparent_unions` feature allows you mark `union`s as `#[repr(transparent)]`. A `union` may be `#[repr(transparent)]` in exactly the same conditions in which a `struct` may be `#[repr(transparent)]` (generally, this means the `union` must have exactly one non-zero-sized field). Some concrete illustrations follow.\n\n```rust\n#![allow(unused)]\n#![feature(transparent_unions)]\n\nfn main() {\n// This union has the same representation as `f32`.\n#[repr(transparent)]\nunion SingleFieldUnion {\n    field: f32,\n}\n\n// This union has the same representation as `usize`.\n#[repr(transparent)]\nunion MultiFieldUnion {\n    field: usize,\n    nothing: (),\n}\n}\n```\n\nFor consistency with transparent `struct`s, `union`s must have exactly one non-zero-sized field. If all fields are zero-sized, the `union` must not be `#[repr(transparent)]`:\n\n```rust\n#![allow(unused)]\n#![feature(transparent_unions)]\n\nfn main() {\n// This (non-transparent) union is already valid in stable Rust:\npub union GoodUnion {\n    pub nothing: (),\n}\n\n// Error: transparent union needs exactly one non-zero-sized field, but has 0\n// #[repr(transparent)]\n// pub union BadUnion {\n//     pub nothing: (),\n// }\n}\n```\n\nThe one exception is if the `union` is generic over `T` and has a field of type `T`, it may be `#[repr(transparent)]` even if `T` is a zero-sized type:\n\n```rust\n#![allow(unused)]\n#![feature(transparent_unions)]\n\nfn main() {\n// This union has the same representation as `T`.\n#[repr(transparent)]\npub union GenericUnion<T: Copy> { // Unions with non-`Copy` fields are unstable.\n    pub field: T,\n    pub nothing: (),\n}\n\n// This is okay even though `()` is a zero-sized type.\npub const THIS_IS_OKAY: GenericUnion<()> = GenericUnion { field: () };\n}\n```\n\nLike transparent `struct`s, a transparent `union` of type `U` has the same layout, size, and ABI as its single non-ZST field. If it is generic over a type `T`, and all its fields are ZSTs except for exactly one field of type `T`, then it has the same layout and ABI as `T` (even if `T` is a ZST when monomorphized).\n\nLike transparent `struct`s, transparent `union`s are FFI-safe if and only if their underlying representation type is also FFI-safe.\n\nA `union` may not be eligible for the same nonnull-style optimizations that a `struct` or `enum` (with the same fields) are eligible for. Adding `#[repr(transparent)]` to `union` does not change this. To give a more concrete example, it is unspecified whether `size_of::<T>()` is equal to `size_of::<Option<T>>()`, where `T` is a `union` (regardless of whether or not it is transparent). The Rust compiler is free to perform this optimization if possible, but is not required to, and different compiler versions may differ in their application of these optimizations.\n\n## [`trivial_bounds`](#trivial_bounds)\n\nThe tracking issue for this feature is: [#48214](https://github.com/rust-lang/rust/issues/48214)\n\n---\n\n## [`try_blocks`](#try_blocks)\n\nThe tracking issue for this feature is: [#31436](https://github.com/rust-lang/rust/issues/31436)\n\n---\n\nThe `try_blocks` feature adds support for `try` blocks. A `try` block creates a new scope one can use the `?` operator in.\n\n```rust\n#![allow(unused)]\n#![feature(try_blocks)]\n\nfn main() {\nuse std::num::ParseIntError;\n\nlet result: Result<i32, ParseIntError> = try {\n    \"1\".parse::<i32>()?\n        + \"2\".parse::<i32>()?\n        + \"3\".parse::<i32>()?\n};\nassert_eq!(result, Ok(6));\n\nlet result: Result<i32, ParseIntError> = try {\n    \"1\".parse::<i32>()?\n        + \"foo\".parse::<i32>()?\n        + \"3\".parse::<i32>()?\n};\nassert!(result.is_err());\n}\n```\n\n## [`type_alias_impl_trait`](#type_alias_impl_trait)\n\nThe tracking issue for this feature is: [#63063](https://github.com/rust-lang/rust/issues/63063)\n\n---\n\n## [`type_ascription`](#type_ascription)\n\nThe tracking issue for this feature is: [#23416](https://github.com/rust-lang/rust/issues/23416)\n\n---\n\n## [`type_changing_struct_update`](#type_changing_struct_update)\n\nThe tracking issue for this feature is: [#86555](https://github.com/rust-lang/rust/issues/86555)\n\n---\n\nThis implements [RFC2528](https://github.com/rust-lang/rfcs/blob/master/text/2528-type-changing-struct-update-syntax.md). When turned on, you can create instances of the same struct that have different generic type or lifetime parameters.\n\n```rust\n#![allow(unused_variables, dead_code)]\n#![feature(type_changing_struct_update)]\n\nfn main () {\n    struct Foo<T, U> {\n        field1: T,\n        field2: U,\n    }\n\n    let base: Foo<String, i32> = Foo {\n        field1: String::from(\"hello\"),\n        field2: 1234,\n    };\n    let updated: Foo<f64, i32> = Foo {\n        field1: 3.14,\n        ..base\n    };\n}\n```\n\n## [`unboxed_closures`](#unboxed_closures)\n\nThe tracking issue for this feature is [#29625](https://github.com/rust-lang/rust/issues/29625)\n\nSee Also: [`fn_traits`](language-features/../library-features/fn-traits.html)\n\n---\n\nThe `unboxed_closures` feature allows you to write functions using the `\"rust-call\"` ABI, required for implementing the [`Fn*`](language-features/../../std/ops/trait.Fn.html) family of traits. `\"rust-call\"` functions must have exactly one (non self) argument, a tuple representing the argument list.\n\n```rust\n#![feature(unboxed_closures)]\n\nextern \"rust-call\" fn add_args(args: (u32, u32)) -> u32 {\n    args.0 + args.1\n}\n\nfn main() {}\n```\n\n## [`unnamed_fields`](#unnamed_fields)\n\nThe tracking issue for this feature is: [#49804](https://github.com/rust-lang/rust/issues/49804)\n\n---\n\n## [`unsafe_attributes`](#unsafe_attributes)\n\nThe tracking issue for this feature is: [#123757](https://github.com/rust-lang/rust/issues/123757)\n\n---\n\n## [`unsafe_extern_blocks`](#unsafe_extern_blocks)\n\nThe tracking issue for this feature is: [#123743](https://github.com/rust-lang/rust/issues/123743)\n\n---\n\n## [`unsized_fn_params`](#unsized_fn_params)\n\nThe tracking issue for this feature is: [#48055](https://github.com/rust-lang/rust/issues/48055)\n\n---\n\n## [`unsized_locals`](#unsized_locals)\n\nThe tracking issue for this feature is: [#48055](https://github.com/rust-lang/rust/issues/48055)\n\n---\n\nThis implements [RFC1909](https://github.com/rust-lang/rfcs/blob/master/text/1909-unsized-rvalues.md). When turned on, you can have unsized arguments and locals:\n\n```rust\n#![allow(incomplete_features)]\n#![feature(unsized_locals, unsized_fn_params)]\n\nuse std::any::Any;\n\nfn main() {\n    let x: Box<dyn Any> = Box::new(42);\n    let x: dyn Any = *x;\n    //  ^ unsized local variable\n    //               ^^ unsized temporary\n    foo(x);\n}\n\nfn foo(_: dyn Any) {}\n//     ^^^^^^ unsized argument\n```\n\nThe RFC still forbids the following unsized expressions:\n\n```rust\n#![feature(unsized_locals)]\n\nuse std::any::Any;\n\nstruct MyStruct<T: ?Sized> {\n    content: T,\n}\n\nstruct MyTupleStruct<T: ?Sized>(T);\n\nfn answer() -> Box<dyn Any> {\n    Box::new(42)\n}\n\nfn main() {\n    // You CANNOT have unsized statics.\n    static X: dyn Any = *answer();  // ERROR\n    const Y: dyn Any = *answer();  // ERROR\n\n    // You CANNOT have struct initialized unsized.\n    MyStruct { content: *answer() };  // ERROR\n    MyTupleStruct(*answer());  // ERROR\n    (42, *answer());  // ERROR\n\n    // You CANNOT have unsized return types.\n    fn my_function() -> dyn Any { *answer() }  // ERROR\n\n    // You CAN have unsized local variables...\n    let mut x: dyn Any = *answer();  // OK\n    // ...but you CANNOT reassign to them.\n    x = *answer();  // ERROR\n\n    // You CANNOT even initialize them separately.\n    let y: dyn Any;  // OK\n    y = *answer();  // ERROR\n\n    // Not mentioned in the RFC, but by-move captured variables are also Sized.\n    let x: dyn Any = *answer();\n    (move || {  // ERROR\n        let y = x;\n    })();\n\n    // You CAN create a closure with unsized arguments,\n    // but you CANNOT call it.\n    // This is an implementation detail and may be changed in the future.\n    let f = |x: dyn Any| {};\n    f(*answer());  // ERROR\n}\n```\n\n## [By-value trait objects](#by-value-trait-objects)\n\nWith this feature, you can have by-value `self` arguments without `Self: Sized` bounds.\n\n```rust\n#![feature(unsized_fn_params)]\n\ntrait Foo {\n    fn foo(self) {}\n}\n\nimpl<T: ?Sized> Foo for T {}\n\nfn main() {\n    let slice: Box<[i32]> = Box::new([1, 2, 3]);\n    <[i32] as Foo>::foo(*slice);\n}\n```\n\nAnd `Foo` will also be object-safe.\n\n```rust\n#![feature(unsized_fn_params)]\n\ntrait Foo {\n    fn foo(self) {}\n}\n\nimpl<T: ?Sized> Foo for T {}\n\nfn main () {\n    let slice: Box<dyn Foo> = Box::new([1, 2, 3]);\n    // doesn't compile yet\n    <dyn Foo as Foo>::foo(*slice);\n}\n```\n\nOne of the objectives of this feature is to allow `Box<dyn FnOnce>`.\n\n## [Variable length arrays](#variable-length-arrays)\n\nThe RFC also describes an extension to the array literal syntax: `[e; dyn n]`. In the syntax, `n` isn't necessarily a constant expression. The array is dynamically allocated on the stack and has the type of `[T]`, instead of `[T; n]`.\n\n```rust\n#![feature(unsized_locals)]\n\nfn mergesort<T: Ord>(a: &mut [T]) {\n    let mut tmp = [T; dyn a.len()];\n    // ...\n}\n\nfn main() {\n    let mut a = [3, 1, 5, 6];\n    mergesort(&mut a);\n    assert_eq!(a, [1, 3, 5, 6]);\n}\n```\n\nVLAs are not implemented yet. The syntax isn't final, either. We may need an alternative syntax for Rust 2015 because, in Rust 2015, expressions like `[e; dyn(1)]` would be ambiguous. One possible alternative proposed in the RFC is `[e; n]`: if `n` captures one or more local variables, then it is considered as `[e; dyn n]`.\n\n## [Advisory on stack usage](#advisory-on-stack-usage)\n\nIt's advised not to casually use the `#![feature(unsized_locals)]` feature. Typical use-cases are:\n\n-   When you need a by-value trait objects.\n-   When you really need a fast allocation of small temporary arrays.\n\nAnother pitfall is repetitive allocation and temporaries. Currently the compiler simply extends the stack frame every time it encounters an unsized assignment. So for example, the code\n\n```rust\n#![feature(unsized_locals)]\n\nfn main() {\n    let x: Box<[i32]> = Box::new([1, 2, 3, 4, 5]);\n    let _x = {{{{{{{{{{*x}}}}}}}}}};\n}\n```\n\nand the code\n\n```rust\n#![feature(unsized_locals)]\n\nfn main() {\n    for _ in 0..10 {\n        let x: Box<[i32]> = Box::new([1, 2, 3, 4, 5]);\n        let _x = *x;\n    }\n}\n```\n\nwill unnecessarily extend the stack frame.\n\n## [`unsized_tuple_coercion`](#unsized_tuple_coercion)\n\nThe tracking issue for this feature is: [#42877](https://github.com/rust-lang/rust/issues/42877)\n\n---\n\nThis is a part of [RFC0401](https://github.com/rust-lang/rfcs/blob/master/text/0401-coercions.md). According to the RFC, there should be an implementation like this:\n\n```rust\nimpl<..., T, U: ?Sized> Unsized<(..., U)> for (..., T) where T: Unsized<U> {}\n```\n\nThis implementation is currently gated behind `#[feature(unsized_tuple_coercion)]` to avoid insta-stability. Therefore you can use it like this:\n\n```rust\n#![feature(unsized_tuple_coercion)]\n\nfn main() {\n    let x : ([i32; 3], [i32; 3]) = ([1, 2, 3], [4, 5, 6]);\n    let y : &([i32; 3], [i32]) = &x;\n    assert_eq!(y.1[0], 4);\n}\n```\n\n## [`used_with_arg`](#used_with_arg)\n\nThe tracking issue for this feature is: [#93798](https://github.com/rust-lang/rust/issues/93798)\n\n---\n\n## [`wasm_abi`](#wasm_abi)\n\nThe tracking issue for this feature is: [#83788](https://github.com/rust-lang/rust/issues/83788)\n\n---\n\n## [`wasm_target_feature`](#wasm_target_feature)\n\nThe tracking issue for this feature is: [#44839](https://github.com/rust-lang/rust/issues/44839)\n\n---\n\n## [`with_negative_coherence`](#with_negative_coherence)\n\nThis feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.\n\n---\n\n## [`yeet_expr`](#yeet_expr)\n\nThe tracking issue for this feature is: [#96373](https://github.com/rust-lang/rust/issues/96373)\n\n---\n\nThe `yeet_expr` feature adds support for `do yeet` expressions, which can be used to early-exit from a function or `try` block.\n\nThese are highly experimental, thus the placeholder syntax.\n\n```rust\n#![allow(unused)]\n#![feature(yeet_expr)]\n\nfn main() {\nfn foo() -> Result<String, i32> {\n    do yeet 4;\n}\nassert_eq!(foo(), Err(4));\n\nfn bar() -> Option<String> {\n    do yeet;\n}\nassert_eq!(bar(), None);\n}\n```\n\n## [Library Features](#library-features)\n\n## [`acceptfilter`](#acceptfilter)\n\nThe tracking issue for this feature is: [#121891](https://github.com/rust-lang/rust/issues/121891)\n\n---\n\n## [`addr_parse_ascii`](#addr_parse_ascii)\n\nThe tracking issue for this feature is: [#101035](https://github.com/rust-lang/rust/issues/101035)\n\n---\n\n## [`alloc_error_hook`](#alloc_error_hook)\n\nThe tracking issue for this feature is: [#51245](https://github.com/rust-lang/rust/issues/51245)\n\n---\n\n## [`alloc_internals`](#alloc_internals)\n\nThis feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.\n\n---\n\nThe tracking issue for this feature is: [#55724](https://github.com/rust-lang/rust/issues/55724)\n\n---\n\n## [`allocator_api`](#allocator_api)\n\nThe tracking issue for this feature is [#32838](https://github.com/rust-lang/rust/issues/32838)\n\n---\n\nSometimes you want the memory for one collection to use a different allocator than the memory for another collection. In this case, replacing the global allocator is not a workable option. Instead, you need to pass in an instance of an `AllocRef` to each collection for which you want a custom allocator.\n\nTBD\n\n## [`array_chunks`](#array_chunks)\n\nThe tracking issue for this feature is: [#74985](https://github.com/rust-lang/rust/issues/74985)\n\n---\n\n## [`array_into_iter_constructors`](#array_into_iter_constructors)\n\nThe tracking issue for this feature is: [#91583](https://github.com/rust-lang/rust/issues/91583)\n\n---\n\n## [`array_ptr_get`](#array_ptr_get)\n\nThe tracking issue for this feature is: [#119834](https://github.com/rust-lang/rust/issues/119834)\n\n---\n\n## [`array_try_from_fn`](#array_try_from_fn)\n\nThe tracking issue for this feature is: [#89379](https://github.com/rust-lang/rust/issues/89379)\n\n---\n\n## [`array_try_map`](#array_try_map)\n\nThe tracking issue for this feature is: [#79711](https://github.com/rust-lang/rust/issues/79711)\n\n---\n\n## [`array_windows`](#array_windows)\n\nThe tracking issue for this feature is: [#75027](https://github.com/rust-lang/rust/issues/75027)\n\n---\n\n## [`as_array_of_cells`](#as_array_of_cells)\n\nThe tracking issue for this feature is: [#88248](https://github.com/rust-lang/rust/issues/88248)\n\n---\n\n## [`ascii_char`](#ascii_char)\n\nThe tracking issue for this feature is: [#110998](https://github.com/rust-lang/rust/issues/110998)\n\n---\n\n## [`ascii_char_variants`](#ascii_char_variants)\n\nThe tracking issue for this feature is: [#110998](https://github.com/rust-lang/rust/issues/110998)\n\n---\n\n## [`assert_matches`](#assert_matches)\n\nThe tracking issue for this feature is: [#82775](https://github.com/rust-lang/rust/issues/82775)\n\n---\n\n## [`async_drop`](#async_drop)\n\nThis feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.\n\n---\n\n## [`async_fn_traits`](#async_fn_traits)\n\nSee Also: [`fn_traits`](library-features/../library-features/fn-traits.html)\n\n---\n\nThe `async_fn_traits` feature allows for implementation of the [`AsyncFn*`](library-features/../../std/ops/trait.AsyncFn.html) traits for creating custom closure-like types that return futures.\n\nThe main difference to the `Fn*` family of traits is that `AsyncFn` can return a future that borrows from itself (`FnOnce::Output` has no lifetime parameters, while `AsyncFnMut::CallRefFuture` does).\n\n## [`async_gen_internals`](#async_gen_internals)\n\nThis feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.\n\n---\n\n## [`async_iter_from_iter`](#async_iter_from_iter)\n\nThe tracking issue for this feature is: [#81798](https://github.com/rust-lang/rust/issues/81798)\n\n---\n\n## [`async_iterator`](#async_iterator)\n\nThe tracking issue for this feature is: [#79024](https://github.com/rust-lang/rust/issues/79024)\n\n---\n\n## [`atomic_bool_fetch_not`](#atomic_bool_fetch_not)\n\nThe tracking issue for this feature is: [#98485](https://github.com/rust-lang/rust/issues/98485)\n\n---\n\n## [`atomic_from_mut`](#atomic_from_mut)\n\nThe tracking issue for this feature is: [#76314](https://github.com/rust-lang/rust/issues/76314)\n\n---\n\n## [`backtrace_frames`](#backtrace_frames)\n\nThe tracking issue for this feature is: [#79676](https://github.com/rust-lang/rust/issues/79676)\n\n---\n\n## [`bigint_helper_methods`](#bigint_helper_methods)\n\nThe tracking issue for this feature is: [#85532](https://github.com/rust-lang/rust/issues/85532)\n\n---\n\n## [`binary_heap_drain_sorted`](#binary_heap_drain_sorted)\n\nThe tracking issue for this feature is: [#59278](https://github.com/rust-lang/rust/issues/59278)\n\n---\n\n## [`binary_heap_into_iter_sorted`](#binary_heap_into_iter_sorted)\n\nThe tracking issue for this feature is: [#59278](https://github.com/rust-lang/rust/issues/59278)\n\n---\n\n## [`bound_as_ref`](#bound_as_ref)\n\nThe tracking issue for this feature is: [#80996](https://github.com/rust-lang/rust/issues/80996)\n\n---\n\n## [`box_into_boxed_slice`](#box_into_boxed_slice)\n\nThe tracking issue for this feature is: [#71582](https://github.com/rust-lang/rust/issues/71582)\n\n---\n\n## [`box_into_inner`](#box_into_inner)\n\nThe tracking issue for this feature is: [#80437](https://github.com/rust-lang/rust/issues/80437)\n\n---\n\n## [`btree_cursors`](#btree_cursors)\n\nThe tracking issue for this feature is: [#107540](https://github.com/rust-lang/rust/issues/107540)\n\n---\n\nThe tracking issue for this feature is: [#70530](https://github.com/rust-lang/rust/issues/70530)\n\n---\n\n## [`btreemap_alloc`](#btreemap_alloc)\n\nThe tracking issue for this feature is: [#32838](https://github.com/rust-lang/rust/issues/32838)\n\n---\n\n## [`buf_read_has_data_left`](#buf_read_has_data_left)\n\nThe tracking issue for this feature is: [#86423](https://github.com/rust-lang/rust/issues/86423)\n\n---\n\n## [`bufread_skip_until`](#bufread_skip_until)\n\nThe tracking issue for this feature is: [#111735](https://github.com/rust-lang/rust/issues/111735)\n\n---\n\n## [`build_hasher_default_const_new`](#build_hasher_default_const_new)\n\nThe tracking issue for this feature is: [#123197](https://github.com/rust-lang/rust/issues/123197)\n\n---\n\n## [`c_size_t`](#c_size_t)\n\nThe tracking issue for this feature is: [#88345](https://github.com/rust-lang/rust/issues/88345)\n\n---\n\n## [`c_str_module`](#c_str_module)\n\nThe tracking issue for this feature is: [#112134](https://github.com/rust-lang/rust/issues/112134)\n\n---\n\n## [`c_void_variant`](#c_void_variant)\n\nThis feature is internal to the Rust compiler and is not intended for general use.\n\n---\n\n## [`can_vector`](#can_vector)\n\nThe tracking issue for this feature is: [#69941](https://github.com/rust-lang/rust/issues/69941)\n\n---\n\n## [`cell_leak`](#cell_leak)\n\nThe tracking issue for this feature is: [#69099](https://github.com/rust-lang/rust/issues/69099)\n\n---\n\n## [`cell_update`](#cell_update)\n\nThe tracking issue for this feature is: [#50186](https://github.com/rust-lang/rust/issues/50186)\n\n---\n\n## [`cfg_accessible`](#cfg_accessible)\n\nThe tracking issue for this feature is: [#64797](https://github.com/rust-lang/rust/issues/64797)\n\n---\n\n## [`cfg_eval`](#cfg_eval)\n\nThe tracking issue for this feature is: [#82679](https://github.com/rust-lang/rust/issues/82679)\n\n---\n\n## [`cfg_match`](#cfg_match)\n\nThe tracking issue for this feature is: [#115585](https://github.com/rust-lang/rust/issues/115585)\n\n---\n\n## [`char_indices_offset`](#char_indices_offset)\n\nThe tracking issue for this feature is: [#83871](https://github.com/rust-lang/rust/issues/83871)\n\n---\n\n## [`char_internals`](#char_internals)\n\nThis feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.\n\n---\n\n## [`char_min`](#char_min)\n\nThe tracking issue for this feature is: [#114298](https://github.com/rust-lang/rust/issues/114298)\n\n---\n\n## [`cmp_minmax`](#cmp_minmax)\n\nThe tracking issue for this feature is: [#115939](https://github.com/rust-lang/rust/issues/115939)\n\n---\n\n## [`coerce_unsized`](#coerce_unsized)\n\nThe tracking issue for this feature is: [#18598](https://github.com/rust-lang/rust/issues/18598)\n\n---\n\n## [`concat_bytes`](#concat_bytes)\n\nThe tracking issue for this feature is: [#87555](https://github.com/rust-lang/rust/issues/87555)\n\n---\n\n## [`concat_idents`](#concat_idents)\n\nThe tracking issue for this feature is: [#29599](https://github.com/rust-lang/rust/issues/29599)\n\n---\n\nThe `concat_idents` feature adds a macro for concatenating multiple identifiers into one identifier.\n\n## [Examples](#examples-10)\n\n```rust\n#![feature(concat_idents)]\n\nfn main() {\n    fn foobar() -> u32 { 23 }\n    let f = concat_idents!(foo, bar);\n    assert_eq!(f(), 23);\n}\n```\n\n## [`const_align_of_val`](#const_align_of_val)\n\nThe tracking issue for this feature is: [#46571](https://github.com/rust-lang/rust/issues/46571)\n\n---\n\n## [`const_align_of_val_raw`](#const_align_of_val_raw)\n\nThe tracking issue for this feature is: [#46571](https://github.com/rust-lang/rust/issues/46571)\n\n---\n\n## [`const_align_offset`](#const_align_offset)\n\nThe tracking issue for this feature is: [#90962](https://github.com/rust-lang/rust/issues/90962)\n\n---\n\n## [`const_alloc_error`](#const_alloc_error)\n\nThe tracking issue for this feature is: [#92523](https://github.com/rust-lang/rust/issues/92523)\n\n---\n\n## [`const_alloc_layout`](#const_alloc_layout)\n\nThe tracking issue for this feature is: [#67521](https://github.com/rust-lang/rust/issues/67521)\n\n---\n\n## [`const_arguments_as_str`](#const_arguments_as_str)\n\nThe tracking issue for this feature is: [#103900](https://github.com/rust-lang/rust/issues/103900)\n\n---\n\n## [`const_array_from_ref`](#const_array_from_ref)\n\nThe tracking issue for this feature is: [#90206](https://github.com/rust-lang/rust/issues/90206)\n\n---\n\n## [`const_array_into_iter_constructors`](#const_array_into_iter_constructors)\n\nThe tracking issue for this feature is: [#91583](https://github.com/rust-lang/rust/issues/91583)\n\n---\n\n## [`const_atomic_from_ptr`](#const_atomic_from_ptr)\n\nThe tracking issue for this feature is: [#108652](https://github.com/rust-lang/rust/issues/108652)\n\n---\n\n## [`const_bigint_helper_methods`](#const_bigint_helper_methods)\n\nThe tracking issue for this feature is: [#85532](https://github.com/rust-lang/rust/issues/85532)\n\n---\n\n## [`const_binary_heap_new_in`](#const_binary_heap_new_in)\n\nThe tracking issue for this feature is: [#112353](https://github.com/rust-lang/rust/issues/112353)\n\n---\n\n## [`const_black_box`](#const_black_box)\n\nThis feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.\n\n---\n\n## [`const_box`](#const_box)\n\nThe tracking issue for this feature is: [#92521](https://github.com/rust-lang/rust/issues/92521)\n\n---\n\n## [`const_btree_len`](#const_btree_len)\n\nThis feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.\n\n---\n\n## [`const_cell_into_inner`](#const_cell_into_inner)\n\nThe tracking issue for this feature is: [#78729](https://github.com/rust-lang/rust/issues/78729)\n\n---\n\n## [`const_char_from_u32_unchecked`](#const_char_from_u32_unchecked)\n\nThe tracking issue for this feature is: [#89259](https://github.com/rust-lang/rust/issues/89259)\n\n---\n\n## [`const_cmp`](#const_cmp)\n\nThe tracking issue for this feature is: [#92391](https://github.com/rust-lang/rust/issues/92391)\n\n---\n\n## [`const_collections_with_hasher`](#const_collections_with_hasher)\n\nThe tracking issue for this feature is: [#102575](https://github.com/rust-lang/rust/issues/102575)\n\n---\n\n## [`const_cow_is_borrowed`](#const_cow_is_borrowed)\n\nThe tracking issue for this feature is: [#65143](https://github.com/rust-lang/rust/issues/65143)\n\n---\n\n## [`const_cstr_from_ptr`](#const_cstr_from_ptr)\n\nThe tracking issue for this feature is: [#113219](https://github.com/rust-lang/rust/issues/113219)\n\n---\n\n## [`const_eval_select`](#const_eval_select)\n\nThe tracking issue for this feature is: [#124625](https://github.com/rust-lang/rust/issues/124625)\n\n---\n\n## [`const_exact_div`](#const_exact_div)\n\nThis feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.\n\n---\n\n## [`const_float_bits_conv`](#const_float_bits_conv)\n\nThe tracking issue for this feature is: [#72447](https://github.com/rust-lang/rust/issues/72447)\n\n---\n\n## [`const_float_classify`](#const_float_classify)\n\nThe tracking issue for this feature is: [#72505](https://github.com/rust-lang/rust/issues/72505)\n\n---\n\n## [`const_fmt_arguments_new`](#const_fmt_arguments_new)\n\nThis feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.\n\n---\n\n## [`const_format_args`](#const_format_args)\n\nThis feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.\n\n---\n\n## [`const_hash`](#const_hash)\n\nThe tracking issue for this feature is: [#104061](https://github.com/rust-lang/rust/issues/104061)\n\n---\n\n## [`const_heap`](#const_heap)\n\nThe tracking issue for this feature is: [#79597](https://github.com/rust-lang/rust/issues/79597)\n\n---\n\n## [`const_hint_assert_unchecked`](#const_hint_assert_unchecked)\n\nThe tracking issue for this feature is: [#119131](https://github.com/rust-lang/rust/issues/119131)\n\n---\n\n## [`const_index_range_slice_index`](#const_index_range_slice_index)\n\nThis feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.\n\n---\n\n## [`const_int_from_str`](#const_int_from_str)\n\nThe tracking issue for this feature is: [#59133](https://github.com/rust-lang/rust/issues/59133)\n\n---\n\n## [`const_intoiterator_identity`](#const_intoiterator_identity)\n\nThe tracking issue for this feature is: [#90603](https://github.com/rust-lang/rust/issues/90603)\n\n---\n\n## [`const_intrinsic_compare_bytes`](#const_intrinsic_compare_bytes)\n\nThis feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.\n\n---\n\n## [`const_intrinsic_copy`](#const_intrinsic_copy)\n\nThe tracking issue for this feature is: [#80697](https://github.com/rust-lang/rust/issues/80697)\n\n---\n\n## [`const_intrinsic_forget`](#const_intrinsic_forget)\n\nThis feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.\n\n---\n\n## [`const_intrinsic_raw_eq`](#const_intrinsic_raw_eq)\n\nThis feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.\n\n---\n\n## [`const_ip`](#const_ip)\n\nThe tracking issue for this feature is: [#76205](https://github.com/rust-lang/rust/issues/76205)\n\n---\n\n## [`const_ipv4`](#const_ipv4)\n\nThe tracking issue for this feature is: [#76205](https://github.com/rust-lang/rust/issues/76205)\n\n---\n\n## [`const_ipv6`](#const_ipv6)\n\nThe tracking issue for this feature is: [#76205](https://github.com/rust-lang/rust/issues/76205)\n\n---\n\n## [`const_likely`](#const_likely)\n\nThis feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.\n\n---\n\n## [`const_maybe_uninit_array_assume_init`](#const_maybe_uninit_array_assume_init)\n\nThe tracking issue for this feature is: [#96097](https://github.com/rust-lang/rust/issues/96097)\n\n---\n\n## [`const_maybe_uninit_as_mut_ptr`](#const_maybe_uninit_as_mut_ptr)\n\nThe tracking issue for this feature is: [#75251](https://github.com/rust-lang/rust/issues/75251)\n\n---\n\n## [`const_maybe_uninit_assume_init`](#const_maybe_uninit_assume_init)\n\nThis feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.\n\n---\n\n## [`const_maybe_uninit_uninit_array`](#const_maybe_uninit_uninit_array)\n\nThe tracking issue for this feature is: [#96097](https://github.com/rust-lang/rust/issues/96097)\n\n---\n\n## [`const_maybe_uninit_write`](#const_maybe_uninit_write)\n\nThe tracking issue for this feature is: [#63567](https://github.com/rust-lang/rust/issues/63567)\n\n---\n\n## [`const_nonnull_new`](#const_nonnull_new)\n\nThe tracking issue for this feature is: [#93235](https://github.com/rust-lang/rust/issues/93235)\n\n---\n\n## [`const_num_midpoint`](#const_num_midpoint)\n\nThe tracking issue for this feature is: [#110840](https://github.com/rust-lang/rust/issues/110840)\n\n---\n\n## [`const_ops`](#const_ops)\n\nThe tracking issue for this feature is: [#90080](https://github.com/rust-lang/rust/issues/90080)\n\n---\n\n## [`const_option`](#const_option)\n\nThe tracking issue for this feature is: [#67441](https://github.com/rust-lang/rust/issues/67441)\n\n---\n\n## [`const_option_ext`](#const_option_ext)\n\nThe tracking issue for this feature is: [#91930](https://github.com/rust-lang/rust/issues/91930)\n\n---\n\n## [`const_pin`](#const_pin)\n\nThe tracking issue for this feature is: [#76654](https://github.com/rust-lang/rust/issues/76654)\n\n---\n\n## [`const_pointer_is_aligned`](#const_pointer_is_aligned)\n\nThe tracking issue for this feature is: [#104203](https://github.com/rust-lang/rust/issues/104203)\n\n---\n\n## [`const_pref_align_of`](#const_pref_align_of)\n\nThe tracking issue for this feature is: [#91971](https://github.com/rust-lang/rust/issues/91971)\n\n---\n\n## [`const_ptr_as_ref`](#const_ptr_as_ref)\n\nThe tracking issue for this feature is: [#91822](https://github.com/rust-lang/rust/issues/91822)\n\n---\n\n## [`const_ptr_is_null`](#const_ptr_is_null)\n\nThe tracking issue for this feature is: [#74939](https://github.com/rust-lang/rust/issues/74939)\n\n---\n\n## [`const_ptr_sub_ptr`](#const_ptr_sub_ptr)\n\nThe tracking issue for this feature is: [#95892](https://github.com/rust-lang/rust/issues/95892)\n\n---\n\n## [`const_ptr_write`](#const_ptr_write)\n\nThe tracking issue for this feature is: [#86302](https://github.com/rust-lang/rust/issues/86302)\n\n---\n\n## [`const_range_bounds`](#const_range_bounds)\n\nThe tracking issue for this feature is: [#108082](https://github.com/rust-lang/rust/issues/108082)\n\n---\n\n## [`const_raw_ptr_comparison`](#const_raw_ptr_comparison)\n\nThe tracking issue for this feature is: [#53020](https://github.com/rust-lang/rust/issues/53020)\n\n---\n\n## [`const_replace`](#const_replace)\n\nThe tracking issue for this feature is: [#83164](https://github.com/rust-lang/rust/issues/83164)\n\n---\n\n## [`const_result`](#const_result)\n\nThe tracking issue for this feature is: [#82814](https://github.com/rust-lang/rust/issues/82814)\n\n---\n\n## [`const_size_of_val`](#const_size_of_val)\n\nThe tracking issue for this feature is: [#46571](https://github.com/rust-lang/rust/issues/46571)\n\n---\n\n## [`const_size_of_val_raw`](#const_size_of_val_raw)\n\nThe tracking issue for this feature is: [#46571](https://github.com/rust-lang/rust/issues/46571)\n\n---\n\n## [`const_slice_first_last`](#const_slice_first_last)\n\nThe tracking issue for this feature is: [#83570](https://github.com/rust-lang/rust/issues/83570)\n\n---\n\n## [`const_slice_first_last_chunk`](#const_slice_first_last_chunk)\n\nThe tracking issue for this feature is: [#111774](https://github.com/rust-lang/rust/issues/111774)\n\n---\n\n## [`const_slice_flatten`](#const_slice_flatten)\n\nThe tracking issue for this feature is: [#95629](https://github.com/rust-lang/rust/issues/95629)\n\n---\n\n## [`const_slice_from_mut_ptr_range`](#const_slice_from_mut_ptr_range)\n\nThe tracking issue for this feature is: [#89792](https://github.com/rust-lang/rust/issues/89792)\n\n---\n\n## [`const_slice_from_ptr_range`](#const_slice_from_ptr_range)\n\nThe tracking issue for this feature is: [#89792](https://github.com/rust-lang/rust/issues/89792)\n\n---\n\n## [`const_slice_from_raw_parts_mut`](#const_slice_from_raw_parts_mut)\n\nThe tracking issue for this feature is: [#67456](https://github.com/rust-lang/rust/issues/67456)\n\n---\n\n## [`const_slice_from_ref`](#const_slice_from_ref)\n\nThe tracking issue for this feature is: [#90206](https://github.com/rust-lang/rust/issues/90206)\n\n---\n\n## [`const_slice_index`](#const_slice_index)\n\nThis feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.\n\n---\n\n## [`const_slice_split_at_mut`](#const_slice_split_at_mut)\n\nThe tracking issue for this feature is: [#101804](https://github.com/rust-lang/rust/issues/101804)\n\n---\n\n## [`const_str_from_raw_parts_mut`](#const_str_from_raw_parts_mut)\n\nThe tracking issue for this feature is: [#119206](https://github.com/rust-lang/rust/issues/119206)\n\n---\n\n## [`const_str_from_utf8`](#const_str_from_utf8)\n\nThe tracking issue for this feature is: [#91006](https://github.com/rust-lang/rust/issues/91006)\n\n---\n\n## [`const_str_from_utf8_unchecked_mut`](#const_str_from_utf8_unchecked_mut)\n\nThe tracking issue for this feature is: [#91005](https://github.com/rust-lang/rust/issues/91005)\n\n---\n\n## [`const_strict_overflow_ops`](#const_strict_overflow_ops)\n\nThe tracking issue for this feature is: [#118260](https://github.com/rust-lang/rust/issues/118260)\n\n---\n\n## [`const_swap`](#const_swap)\n\nThe tracking issue for this feature is: [#83163](https://github.com/rust-lang/rust/issues/83163)\n\n---\n\n## [`const_three_way_compare`](#const_three_way_compare)\n\nThis feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.\n\n---\n\n## [`const_type_id`](#const_type_id)\n\nThe tracking issue for this feature is: [#77125](https://github.com/rust-lang/rust/issues/77125)\n\n---\n\n## [`const_type_name`](#const_type_name)\n\nThe tracking issue for this feature is: [#63084](https://github.com/rust-lang/rust/issues/63084)\n\n---\n\n## [`const_typed_swap`](#const_typed_swap)\n\nThis feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.\n\n---\n\n## [`const_ub_checks`](#const_ub_checks)\n\nThis feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.\n\n---\n\n## [`const_unicode_case_lookup`](#const_unicode_case_lookup)\n\nThe tracking issue for this feature is: [#101400](https://github.com/rust-lang/rust/issues/101400)\n\n---\n\n## [`const_unsafecell_get_mut`](#const_unsafecell_get_mut)\n\nThe tracking issue for this feature is: [#88836](https://github.com/rust-lang/rust/issues/88836)\n\n---\n\n## [`const_waker`](#const_waker)\n\nThe tracking issue for this feature is: [#102012](https://github.com/rust-lang/rust/issues/102012)\n\n---\n\nThis feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.\n\n---\n\n## [`context_ext`](#context_ext)\n\nThe tracking issue for this feature is: [#123392](https://github.com/rust-lang/rust/issues/123392)\n\n---\n\n## [`control_flow_enum`](#control_flow_enum)\n\nThe tracking issue for this feature is: [#75744](https://github.com/rust-lang/rust/issues/75744)\n\n---\n\n## [`convert_float_to_int`](#convert_float_to_int)\n\nThe tracking issue for this feature is: [#67057](https://github.com/rust-lang/rust/issues/67057)\n\n---\n\n## [`core_intrinsics`](#core_intrinsics)\n\nThis feature is internal to the Rust compiler and is not intended for general use.\n\n---\n\n## [`core_io_borrowed_buf`](#core_io_borrowed_buf)\n\nThe tracking issue for this feature is: [#117693](https://github.com/rust-lang/rust/issues/117693)\n\n---\n\n## [`core_pattern_type`](#core_pattern_type)\n\nThis feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.\n\n---\n\n## [`core_pattern_types`](#core_pattern_types)\n\nThis feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.\n\n---\n\n## [`core_private_bignum`](#core_private_bignum)\n\nThis feature is internal to the Rust compiler and is not intended for general use.\n\n---\n\n## [`core_private_diy_float`](#core_private_diy_float)\n\nThis feature is internal to the Rust compiler and is not intended for general use.\n\n---\n\n## [`coroutine_trait`](#coroutine_trait)\n\nThe tracking issue for this feature is: [#43122](https://github.com/rust-lang/rust/issues/43122)\n\n---\n\n## [`cow_is_borrowed`](#cow_is_borrowed)\n\nThe tracking issue for this feature is: [#65143](https://github.com/rust-lang/rust/issues/65143)\n\n---\n\n## [`cstr_bytes`](#cstr_bytes)\n\nThe tracking issue for this feature is: [#112115](https://github.com/rust-lang/rust/issues/112115)\n\n---\n\n## [`cursor_remaining`](#cursor_remaining)\n\nThe tracking issue for this feature is: [#86369](https://github.com/rust-lang/rust/issues/86369)\n\n---\n\n## [`deadline_api`](#deadline_api)\n\nThe tracking issue for this feature is: [#46316](https://github.com/rust-lang/rust/issues/46316)\n\n---\n\n## [`debug_closure_helpers`](#debug_closure_helpers)\n\nThe tracking issue for this feature is: [#117729](https://github.com/rust-lang/rust/issues/117729)\n\n---\n\n## [`dec2flt`](#dec2flt)\n\nThis feature is internal to the Rust compiler and is not intended for general use.\n\n---\n\n## [`deref_pure_trait`](#deref_pure_trait)\n\nThe tracking issue for this feature is: [#87121](https://github.com/rust-lang/rust/issues/87121)\n\n---\n\n## [`derive_clone_copy`](#derive_clone_copy)\n\nThis feature is internal to the Rust compiler and is not intended for general use.\n\n---\n\n## [`derive_const`](#derive_const)\n\nThis feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.\n\n---\n\n## [`derive_eq`](#derive_eq)\n\nThis feature is internal to the Rust compiler and is not intended for general use.\n\n---\n\n## [`dir_entry_ext2`](#dir_entry_ext2)\n\nThe tracking issue for this feature is: [#85573](https://github.com/rust-lang/rust/issues/85573)\n\n---\n\n## [`discriminant_kind`](#discriminant_kind)\n\nThis feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.\n\n---\n\n## [`dispatch_from_dyn`](#dispatch_from_dyn)\n\nThis feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.\n\n---\n\n## [`downcast_unchecked`](#downcast_unchecked)\n\nThe tracking issue for this feature is: [#90850](https://github.com/rust-lang/rust/issues/90850)\n\n---\n\n## [`drain_keep_rest`](#drain_keep_rest)\n\nThe tracking issue for this feature is: [#101122](https://github.com/rust-lang/rust/issues/101122)\n\n---\n\n## [`duration_abs_diff`](#duration_abs_diff)\n\nThe tracking issue for this feature is: [#117618](https://github.com/rust-lang/rust/issues/117618)\n\n---\n\n## [`duration_constants`](#duration_constants)\n\nThe tracking issue for this feature is: [#57391](https://github.com/rust-lang/rust/issues/57391)\n\n---\n\n## [`duration_constructors`](#duration_constructors)\n\nThe tracking issue for this feature is: [#120301](https://github.com/rust-lang/rust/issues/120301)\n\n---\n\nAdd the methods `from_mins`, `from_hours` and `from_days` to `Duration`.\n\n## [`duration_consts_float`](#duration_consts_float)\n\nThe tracking issue for this feature is: [#72440](https://github.com/rust-lang/rust/issues/72440)\n\n---\n\n## [`duration_millis_float`](#duration_millis_float)\n\nThe tracking issue for this feature is: [#122451](https://github.com/rust-lang/rust/issues/122451)\n\n---\n\n## [`duration_units`](#duration_units)\n\nThe tracking issue for this feature is: [#120301](https://github.com/rust-lang/rust/issues/120301)\n\n---\n\n## [`edition_panic`](#edition_panic)\n\nThis feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.\n\n---\n\n## [`entry_insert`](#entry_insert)\n\nThe tracking issue for this feature is: [#65225](https://github.com/rust-lang/rust/issues/65225)\n\n---\n\n## [`error_generic_member_access`](#error_generic_member_access)\n\nThe tracking issue for this feature is: [#99301](https://github.com/rust-lang/rust/issues/99301)\n\n---\n\n## [`error_in_core`](#error_in_core)\n\nThe tracking issue for this feature is: [#103765](https://github.com/rust-lang/rust/issues/103765)\n\n---\n\n## [`error_iter`](#error_iter)\n\nThe tracking issue for this feature is: [#58520](https://github.com/rust-lang/rust/issues/58520)\n\n---\n\n## [`error_reporter`](#error_reporter)\n\nThe tracking issue for this feature is: [#90172](https://github.com/rust-lang/rust/issues/90172)\n\n---\n\n## [`error_type_id`](#error_type_id)\n\nThe tracking issue for this feature is: [#60784](https://github.com/rust-lang/rust/issues/60784)\n\n---\n\n## [`exact_size_is_empty`](#exact_size_is_empty)\n\nThe tracking issue for this feature is: [#35428](https://github.com/rust-lang/rust/issues/35428)\n\n---\n\n## [`exclusive_wrapper`](#exclusive_wrapper)\n\nThe tracking issue for this feature is: [#98407](https://github.com/rust-lang/rust/issues/98407)\n\n---\n\n## [`exit_status_error`](#exit_status_error)\n\nThe tracking issue for this feature is: [#84908](https://github.com/rust-lang/rust/issues/84908)\n\n---\n\n## [`exitcode_exit_method`](#exitcode_exit_method)\n\nThe tracking issue for this feature is: [#97100](https://github.com/rust-lang/rust/issues/97100)\n\n---\n\n## [`exposed_provenance`](#exposed_provenance)\n\nThe tracking issue for this feature is: [#95228](https://github.com/rust-lang/rust/issues/95228)\n\n---\n\n## [`extend_one`](#extend_one)\n\nThe tracking issue for this feature is: [#72631](https://github.com/rust-lang/rust/issues/72631)\n\n---\n\nThe tracking issue for this feature is: [#43244](https://github.com/rust-lang/rust/issues/43244)\n\n---\n\n## [`fd`](#fd)\n\nThis feature is internal to the Rust compiler and is not intended for general use.\n\n---\n\n## [`fd_read`](#fd_read)\n\nThis feature is internal to the Rust compiler and is not intended for general use.\n\n---\n\n## [`float_gamma`](#float_gamma)\n\nThe tracking issue for this feature is: [#99842](https://github.com/rust-lang/rust/issues/99842)\n\n---\n\n## [`float_minimum_maximum`](#float_minimum_maximum)\n\nThe tracking issue for this feature is: [#91079](https://github.com/rust-lang/rust/issues/91079)\n\n---\n\n## [`float_next_up_down`](#float_next_up_down)\n\nThe tracking issue for this feature is: [#91399](https://github.com/rust-lang/rust/issues/91399)\n\n---\n\n## [`flt2dec`](#flt2dec)\n\nThis feature is internal to the Rust compiler and is not intended for general use.\n\n---\n\n## [`fmt_helpers_for_derive`](#fmt_helpers_for_derive)\n\nThis feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.\n\n---\n\n## [`fmt_internals`](#fmt_internals)\n\nThis feature is internal to the Rust compiler and is not intended for general use.\n\n---\n\n## [`fn_ptr_trait`](#fn_ptr_trait)\n\nThis feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.\n\n---\n\n## [`fn_traits`](#fn_traits)\n\nThe tracking issue for this feature is [#29625](https://github.com/rust-lang/rust/issues/29625)\n\nSee Also: [`unboxed_closures`](library-features/../language-features/unboxed-closures.html)\n\n---\n\nThe `fn_traits` feature allows for implementation of the [`Fn*`](library-features/../../std/ops/trait.Fn.html) traits for creating custom closure-like types.\n\n```rust\n#![feature(unboxed_closures)]\n#![feature(fn_traits)]\n\nstruct Adder {\n    a: u32\n}\n\nimpl FnOnce<(u32, )> for Adder {\n    type Output = u32;\n    extern \"rust-call\" fn call_once(self, b: (u32, )) -> Self::Output {\n        self.a + b.0\n    }\n}\n\nfn main() {\n    let adder = Adder { a: 3 };\n    assert_eq!(adder(2), 5);\n}\n```\n\n## [`forget_unsized`](#forget_unsized)\n\nThis feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.\n\n---\n\n## [`format_args_nl`](#format_args_nl)\n\nThis feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.\n\n---\n\n## [`freeze`](#freeze)\n\nThe tracking issue for this feature is: [#121675](https://github.com/rust-lang/rust/issues/121675)\n\n---\n\n## [`fs_try_exists`](#fs_try_exists)\n\nThe tracking issue for this feature is: [#83186](https://github.com/rust-lang/rust/issues/83186)\n\n---\n\n## [`future_join`](#future_join)\n\nThe tracking issue for this feature is: [#91642](https://github.com/rust-lang/rust/issues/91642)\n\n---\n\n## [`gen_future`](#gen_future)\n\nThe tracking issue for this feature is: [#50547](https://github.com/rust-lang/rust/issues/50547)\n\n---\n\n## [`generic_assert_internals`](#generic_assert_internals)\n\nThe tracking issue for this feature is: [#44838](https://github.com/rust-lang/rust/issues/44838)\n\n---\n\n## [`get_many_mut`](#get_many_mut)\n\nThe tracking issue for this feature is: [#104642](https://github.com/rust-lang/rust/issues/104642)\n\n---\n\n## [`get_mut_unchecked`](#get_mut_unchecked)\n\nThe tracking issue for this feature is: [#63292](https://github.com/rust-lang/rust/issues/63292)\n\n---\n\nThe tracking issue for this feature is: [#59618](https://github.com/rust-lang/rust/issues/59618)\n\n---\n\n## [`hash_raw_entry`](#hash_raw_entry)\n\nThe tracking issue for this feature is: [#56167](https://github.com/rust-lang/rust/issues/56167)\n\n---\n\n## [`hash_set_entry`](#hash_set_entry)\n\nThe tracking issue for this feature is: [#60896](https://github.com/rust-lang/rust/issues/60896)\n\n---\n\nThe tracking issue for this feature is: [#96762](https://github.com/rust-lang/rust/issues/96762)\n\n---\n\n## [`hashmap_internals`](#hashmap_internals)\n\nThis feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.\n\n---\n\n## [`hint_assert_unchecked`](#hint_assert_unchecked)\n\nThe tracking issue for this feature is: [#119131](https://github.com/rust-lang/rust/issues/119131)\n\n---\n\n## [`hint_must_use`](#hint_must_use)\n\nThe tracking issue for this feature is: [#94745](https://github.com/rust-lang/rust/issues/94745)\n\n---\n\n## [`inplace_iteration`](#inplace_iteration)\n\nThis feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.\n\n---\n\n## [`int_roundings`](#int_roundings)\n\nThe tracking issue for this feature is: [#88581](https://github.com/rust-lang/rust/issues/88581)\n\n---\n\n## [`integer_atomics`](#integer_atomics)\n\nThe tracking issue for this feature is: [#99069](https://github.com/rust-lang/rust/issues/99069)\n\n---\n\n## [`integer_sign_cast`](#integer_sign_cast)\n\nThe tracking issue for this feature is: [#125882](https://github.com/rust-lang/rust/issues/125882)\n\n---\n\n## [`internal_impls_macro`](#internal_impls_macro)\n\nThis feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.\n\n---\n\n## [`internal_output_capture`](#internal_output_capture)\n\nThis feature is internal to the Rust compiler and is not intended for general use.\n\n---\n\n## [`io_error_more`](#io_error_more)\n\nThe tracking issue for this feature is: [#86442](https://github.com/rust-lang/rust/issues/86442)\n\n---\n\n## [`io_error_uncategorized`](#io_error_uncategorized)\n\nThis feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.\n\n---\n\n## [`io_slice_advance`](#io_slice_advance)\n\nThe tracking issue for this feature is: [#62726](https://github.com/rust-lang/rust/issues/62726)\n\n---\n\n## [`ip`](#ip)\n\nThe tracking issue for this feature is: [#27709](https://github.com/rust-lang/rust/issues/27709)\n\n---\n\n## [`is_ascii_octdigit`](#is_ascii_octdigit)\n\nThe tracking issue for this feature is: [#101288](https://github.com/rust-lang/rust/issues/101288)\n\n---\n\n## [`is_riscv_feature_detected`](#is_riscv_feature_detected)\n\nThe tracking issue for this feature is: [#111192](https://github.com/rust-lang/rust/issues/111192)\n\n---\n\n## [`is_sorted`](#is_sorted)\n\nThe tracking issue for this feature is: [#53485](https://github.com/rust-lang/rust/issues/53485)\n\n---\n\nAdd the methods `is_sorted`, `is_sorted_by` and `is_sorted_by_key` to `[T]`; add the methods `is_sorted`, `is_sorted_by` and `is_sorted_by_key` to `Iterator`.\n\n## [`is_val_statically_known`](#is_val_statically_known)\n\nThis feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.\n\n---\n\n## [`isqrt`](#isqrt)\n\nThe tracking issue for this feature is: [#116226](https://github.com/rust-lang/rust/issues/116226)\n\n---\n\n## [`iter_advance_by`](#iter_advance_by)\n\nThe tracking issue for this feature is: [#77404](https://github.com/rust-lang/rust/issues/77404)\n\n---\n\n## [`iter_array_chunks`](#iter_array_chunks)\n\nThe tracking issue for this feature is: [#100450](https://github.com/rust-lang/rust/issues/100450)\n\n---\n\n## [`iter_chain`](#iter_chain)\n\nThe tracking issue for this feature is: [#125964](https://github.com/rust-lang/rust/issues/125964)\n\n---\n\n## [`iter_collect_into`](#iter_collect_into)\n\nThe tracking issue for this feature is: [#94780](https://github.com/rust-lang/rust/issues/94780)\n\n---\n\n## [`iter_from_coroutine`](#iter_from_coroutine)\n\nThe tracking issue for this feature is: [#43122](https://github.com/rust-lang/rust/issues/43122)\n\n---\n\n## [`iter_intersperse`](#iter_intersperse)\n\nThe tracking issue for this feature is: [#79524](https://github.com/rust-lang/rust/issues/79524)\n\n---\n\n## [`iter_is_partitioned`](#iter_is_partitioned)\n\nThe tracking issue for this feature is: [#62544](https://github.com/rust-lang/rust/issues/62544)\n\n---\n\n## [`iter_map_windows`](#iter_map_windows)\n\nThe tracking issue for this feature is: [#87155](https://github.com/rust-lang/rust/issues/87155)\n\n---\n\n## [`iter_next_chunk`](#iter_next_chunk)\n\nThe tracking issue for this feature is: [#98326](https://github.com/rust-lang/rust/issues/98326)\n\n---\n\n## [`iter_order_by`](#iter_order_by)\n\nThe tracking issue for this feature is: [#64295](https://github.com/rust-lang/rust/issues/64295)\n\n---\n\n## [`iter_partition_in_place`](#iter_partition_in_place)\n\nThe tracking issue for this feature is: [#62543](https://github.com/rust-lang/rust/issues/62543)\n\n---\n\n## [`iter_repeat_n`](#iter_repeat_n)\n\nThe tracking issue for this feature is: [#104434](https://github.com/rust-lang/rust/issues/104434)\n\n---\n\n## [`iterator_try_collect`](#iterator_try_collect)\n\nThe tracking issue for this feature is: [#94047](https://github.com/rust-lang/rust/issues/94047)\n\n---\n\n## [`iterator_try_reduce`](#iterator_try_reduce)\n\nThe tracking issue for this feature is: [#87053](https://github.com/rust-lang/rust/issues/87053)\n\n---\n\n## [`junction_point`](#junction_point)\n\nThe tracking issue for this feature is: [#121709](https://github.com/rust-lang/rust/issues/121709)\n\n---\n\n## [`layout_for_ptr`](#layout_for_ptr)\n\nThe tracking issue for this feature is: [#69835](https://github.com/rust-lang/rust/issues/69835)\n\n---\n\n## [`lazy_cell_consume`](#lazy_cell_consume)\n\nThe tracking issue for this feature is: [#125623](https://github.com/rust-lang/rust/issues/125623)\n\n---\n\n## [`liballoc_internals`](#liballoc_internals)\n\nThis feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.\n\n---\n\n## [`libstd_sys_internals`](#libstd_sys_internals)\n\nThis feature is internal to the Rust compiler and is not intended for general use.\n\n---\n\n## [`linked_list_cursors`](#linked_list_cursors)\n\nThe tracking issue for this feature is: [#58533](https://github.com/rust-lang/rust/issues/58533)\n\n---\n\n## [`linked_list_remove`](#linked_list_remove)\n\nThe tracking issue for this feature is: [#69210](https://github.com/rust-lang/rust/issues/69210)\n\n---\n\n## [`linked_list_retain`](#linked_list_retain)\n\nThe tracking issue for this feature is: [#114135](https://github.com/rust-lang/rust/issues/114135)\n\n---\n\n## [`linux_pidfd`](#linux_pidfd)\n\nThe tracking issue for this feature is: [#82971](https://github.com/rust-lang/rust/issues/82971)\n\n---\n\n## [`local_waker`](#local_waker)\n\nThe tracking issue for this feature is: [#118959](https://github.com/rust-lang/rust/issues/118959)\n\n---\n\n## [`log_syntax`](#log_syntax)\n\nThe tracking issue for this feature is: [#29598](https://github.com/rust-lang/rust/issues/29598)\n\n---\n\n## [`map_entry_replace`](#map_entry_replace)\n\nThe tracking issue for this feature is: [#44286](https://github.com/rust-lang/rust/issues/44286)\n\n---\n\n## [`map_many_mut`](#map_many_mut)\n\nThe tracking issue for this feature is: [#97601](https://github.com/rust-lang/rust/issues/97601)\n\n---\n\n## [`map_try_insert`](#map_try_insert)\n\nThe tracking issue for this feature is: [#82766](https://github.com/rust-lang/rust/issues/82766)\n\n---\n\n## [`mapped_lock_guards`](#mapped_lock_guards)\n\nThe tracking issue for this feature is: [#117108](https://github.com/rust-lang/rust/issues/117108)\n\n---\n\n## [`maybe_uninit_array_assume_init`](#maybe_uninit_array_assume_init)\n\nThe tracking issue for this feature is: [#96097](https://github.com/rust-lang/rust/issues/96097)\n\n---\n\n## [`maybe_uninit_as_bytes`](#maybe_uninit_as_bytes)\n\nThe tracking issue for this feature is: [#93092](https://github.com/rust-lang/rust/issues/93092)\n\n---\n\n## [`maybe_uninit_fill`](#maybe_uninit_fill)\n\nThe tracking issue for this feature is: [#117428](https://github.com/rust-lang/rust/issues/117428)\n\n---\n\n## [`maybe_uninit_slice`](#maybe_uninit_slice)\n\nThe tracking issue for this feature is: [#63569](https://github.com/rust-lang/rust/issues/63569)\n\n---\n\n## [`maybe_uninit_uninit_array`](#maybe_uninit_uninit_array)\n\nThe tracking issue for this feature is: [#96097](https://github.com/rust-lang/rust/issues/96097)\n\n---\n\n## [`maybe_uninit_uninit_array_transpose`](#maybe_uninit_uninit_array_transpose)\n\nThe tracking issue for this feature is: [#96097](https://github.com/rust-lang/rust/issues/96097)\n\n---\n\n## [`maybe_uninit_write_slice`](#maybe_uninit_write_slice)\n\nThe tracking issue for this feature is: [#79995](https://github.com/rust-lang/rust/issues/79995)\n\n---\n\n## [`mem_copy_fn`](#mem_copy_fn)\n\nThe tracking issue for this feature is: [#98262](https://github.com/rust-lang/rust/issues/98262)\n\n---\n\n## [`more_float_constants`](#more_float_constants)\n\nThe tracking issue for this feature is: [#103883](https://github.com/rust-lang/rust/issues/103883)\n\n---\n\n## [`new_uninit`](#new_uninit)\n\nThe tracking issue for this feature is: [#63291](https://github.com/rust-lang/rust/issues/63291)\n\n---\n\n## [`non_zero_count_ones`](#non_zero_count_ones)\n\nThe tracking issue for this feature is: [#120287](https://github.com/rust-lang/rust/issues/120287)\n\n---\n\n## [`nonzero_from_mut`](#nonzero_from_mut)\n\nThe tracking issue for this feature is: [#106290](https://github.com/rust-lang/rust/issues/106290)\n\n---\n\n## [`nonzero_internals`](#nonzero_internals)\n\nThis feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.\n\n---\n\n## [`nonzero_ops`](#nonzero_ops)\n\nThe tracking issue for this feature is: [#84186](https://github.com/rust-lang/rust/issues/84186)\n\n---\n\n## [`noop_waker`](#noop_waker)\n\nThe tracking issue for this feature is: [#98286](https://github.com/rust-lang/rust/issues/98286)\n\n---\n\n## [`num_midpoint`](#num_midpoint)\n\nThe tracking issue for this feature is: [#110840](https://github.com/rust-lang/rust/issues/110840)\n\n---\n\n## [`numfmt`](#numfmt)\n\nThis feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.\n\n---\n\n## [`once_cell_get_mut`](#once_cell_get_mut)\n\nThe tracking issue for this feature is: [#121641](https://github.com/rust-lang/rust/issues/121641)\n\n---\n\n## [`once_cell_try`](#once_cell_try)\n\nThe tracking issue for this feature is: [#109737](https://github.com/rust-lang/rust/issues/109737)\n\n---\n\n## [`once_cell_try_insert`](#once_cell_try_insert)\n\nThe tracking issue for this feature is: [#116693](https://github.com/rust-lang/rust/issues/116693)\n\n---\n\n## [`one_sided_range`](#one_sided_range)\n\nThe tracking issue for this feature is: [#69780](https://github.com/rust-lang/rust/issues/69780)\n\n---\n\n## [`option_get_or_insert_default`](#option_get_or_insert_default)\n\nThe tracking issue for this feature is: [#82901](https://github.com/rust-lang/rust/issues/82901)\n\n---\n\n## [`option_zip`](#option_zip)\n\nThe tracking issue for this feature is: [#70086](https://github.com/rust-lang/rust/issues/70086)\n\n---\n\n## [`os_str_display`](#os_str_display)\n\nThe tracking issue for this feature is: [#120048](https://github.com/rust-lang/rust/issues/120048)\n\n---\n\n## [`os_str_slice`](#os_str_slice)\n\nThe tracking issue for this feature is: [#118485](https://github.com/rust-lang/rust/issues/118485)\n\n---\n\n## [`panic_abort`](#panic_abort)\n\nThe tracking issue for this feature is: [#32837](https://github.com/rust-lang/rust/issues/32837)\n\n---\n\n## [`panic_always_abort`](#panic_always_abort)\n\nThe tracking issue for this feature is: [#84438](https://github.com/rust-lang/rust/issues/84438)\n\n---\n\n## [`panic_backtrace_config`](#panic_backtrace_config)\n\nThe tracking issue for this feature is: [#93346](https://github.com/rust-lang/rust/issues/93346)\n\n---\n\n## [`panic_can_unwind`](#panic_can_unwind)\n\nThe tracking issue for this feature is: [#92988](https://github.com/rust-lang/rust/issues/92988)\n\n---\n\n## [`panic_info_message`](#panic_info_message)\n\nThe tracking issue for this feature is: [#66745](https://github.com/rust-lang/rust/issues/66745)\n\n---\n\n## [`panic_internals`](#panic_internals)\n\nThis feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.\n\n---\n\n## [`panic_unwind`](#panic_unwind)\n\nThe tracking issue for this feature is: [#32837](https://github.com/rust-lang/rust/issues/32837)\n\n---\n\n## [`panic_update_hook`](#panic_update_hook)\n\nThe tracking issue for this feature is: [#92649](https://github.com/rust-lang/rust/issues/92649)\n\n---\n\n## [`path_file_prefix`](#path_file_prefix)\n\nThe tracking issue for this feature is: [#86319](https://github.com/rust-lang/rust/issues/86319)\n\n---\n\n## [`pattern`](#pattern)\n\nThe tracking issue for this feature is: [#27721](https://github.com/rust-lang/rust/issues/27721)\n\n---\n\n## [`peer_credentials_unix_socket`](#peer_credentials_unix_socket)\n\nThe tracking issue for this feature is: [#42839](https://github.com/rust-lang/rust/issues/42839)\n\n---\n\n## [`pin_deref_mut`](#pin_deref_mut)\n\nThe tracking issue for this feature is: [#86918](https://github.com/rust-lang/rust/issues/86918)\n\n---\n\n## [`pointer_is_aligned_to`](#pointer_is_aligned_to)\n\nThe tracking issue for this feature is: [#96284](https://github.com/rust-lang/rust/issues/96284)\n\n---\n\n## [`pointer_like_trait`](#pointer_like_trait)\n\nThis feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.\n\n---\n\n## [`portable_simd`](#portable_simd)\n\nThe tracking issue for this feature is: [#86656](https://github.com/rust-lang/rust/issues/86656)\n\n---\n\n## [`prelude_2024`](#prelude_2024)\n\nThe tracking issue for this feature is: [#121042](https://github.com/rust-lang/rust/issues/121042)\n\n---\n\n## [`print_internals`](#print_internals)\n\nThis feature is internal to the Rust compiler and is not intended for general use.\n\n---\n\n## [`proc_macro_def_site`](#proc_macro_def_site)\n\nThe tracking issue for this feature is: [#54724](https://github.com/rust-lang/rust/issues/54724)\n\n---\n\n## [`proc_macro_diagnostic`](#proc_macro_diagnostic)\n\nThe tracking issue for this feature is: [#54140](https://github.com/rust-lang/rust/issues/54140)\n\n---\n\n## [`proc_macro_expand`](#proc_macro_expand)\n\nThe tracking issue for this feature is: [#90765](https://github.com/rust-lang/rust/issues/90765)\n\n---\n\n## [`proc_macro_internals`](#proc_macro_internals)\n\nThe tracking issue for this feature is: [#27812](https://github.com/rust-lang/rust/issues/27812)\n\n---\n\n## [`proc_macro_quote`](#proc_macro_quote)\n\nThe tracking issue for this feature is: [#54722](https://github.com/rust-lang/rust/issues/54722)\n\n---\n\n## [`proc_macro_span`](#proc_macro_span)\n\nThe tracking issue for this feature is: [#54725](https://github.com/rust-lang/rust/issues/54725)\n\n---\n\n## [`proc_macro_tracked_env`](#proc_macro_tracked_env)\n\nThe tracking issue for this feature is: [#99515](https://github.com/rust-lang/rust/issues/99515)\n\n---\n\n## [`process_exitcode_internals`](#process_exitcode_internals)\n\nThis feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.\n\n---\n\n## [`process_internals`](#process_internals)\n\nThis feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.\n\n---\n\n## [`profiler_runtime_lib`](#profiler_runtime_lib)\n\nThis feature is internal to the Rust compiler and is not intended for general use.\n\n---\n\n## [`ptr_alignment_type`](#ptr_alignment_type)\n\nThe tracking issue for this feature is: [#102070](https://github.com/rust-lang/rust/issues/102070)\n\n---\n\n## [`ptr_as_ref_unchecked`](#ptr_as_ref_unchecked)\n\nThe tracking issue for this feature is: [#122034](https://github.com/rust-lang/rust/issues/122034)\n\n---\n\n## [`ptr_as_uninit`](#ptr_as_uninit)\n\nThe tracking issue for this feature is: [#75402](https://github.com/rust-lang/rust/issues/75402)\n\n---\n\n## [`ptr_internals`](#ptr_internals)\n\nThis feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.\n\n---\n\n## [`ptr_mask`](#ptr_mask)\n\nThe tracking issue for this feature is: [#98290](https://github.com/rust-lang/rust/issues/98290)\n\n---\n\nThe tracking issue for this feature is: [#81513](https://github.com/rust-lang/rust/issues/81513)\n\n---\n\n## [`ptr_sub_ptr`](#ptr_sub_ptr)\n\nThe tracking issue for this feature is: [#95892](https://github.com/rust-lang/rust/issues/95892)\n\n---\n\n## [`ptr_to_from_bits`](#ptr_to_from_bits)\n\nThe tracking issue for this feature is: [#91126](https://github.com/rust-lang/rust/issues/91126)\n\n---\n\n## [`pub_crate_should_not_need_unstable_attr`](#pub_crate_should_not_need_unstable_attr)\n\nThis feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.\n\n---\n\n## [`raw_os_error_ty`](#raw_os_error_ty)\n\nThe tracking issue for this feature is: [#107792](https://github.com/rust-lang/rust/issues/107792)\n\n---\n\n## [`raw_slice_split`](#raw_slice_split)\n\nThe tracking issue for this feature is: [#95595](https://github.com/rust-lang/rust/issues/95595)\n\n---\n\n## [`raw_vec_internals`](#raw_vec_internals)\n\nThis feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.\n\n---\n\n## [`read_buf`](#read_buf)\n\nThe tracking issue for this feature is: [#78485](https://github.com/rust-lang/rust/issues/78485)\n\n---\n\n## [`ready_into_inner`](#ready_into_inner)\n\nThe tracking issue for this feature is: [#101196](https://github.com/rust-lang/rust/issues/101196)\n\n---\n\n## [`receiver_trait`](#receiver_trait)\n\nThis feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.\n\n---\n\n## [`reentrant_lock`](#reentrant_lock)\n\nThe tracking issue for this feature is: [#121440](https://github.com/rust-lang/rust/issues/121440)\n\n---\n\n## [`restricted_std`](#restricted_std)\n\nThis feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.\n\n---\n\n## [`result_flattening`](#result_flattening)\n\nThe tracking issue for this feature is: [#70142](https://github.com/rust-lang/rust/issues/70142)\n\n---\n\n## [`round_char_boundary`](#round_char_boundary)\n\nThe tracking issue for this feature is: [#93743](https://github.com/rust-lang/rust/issues/93743)\n\n---\n\n## [`rt`](#rt)\n\nThis feature is internal to the Rust compiler and is not intended for general use.\n\n---\n\n## [`rustc_encodable_decodable`](#rustc_encodable_decodable)\n\nThis feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.\n\n---\n\n## [`sealed`](#sealed)\n\nThis feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.\n\n---\n\n## [`seek_stream_len`](#seek_stream_len)\n\nThe tracking issue for this feature is: [#59359](https://github.com/rust-lang/rust/issues/59359)\n\n---\n\n## [`set_ptr_value`](#set_ptr_value)\n\nThe tracking issue for this feature is: [#75091](https://github.com/rust-lang/rust/issues/75091)\n\n---\n\n## [`setgroups`](#setgroups)\n\nThe tracking issue for this feature is: [#90747](https://github.com/rust-lang/rust/issues/90747)\n\n---\n\n## [`sgx_platform`](#sgx_platform)\n\nThe tracking issue for this feature is: [#56975](https://github.com/rust-lang/rust/issues/56975)\n\n---\n\n## [`sized_type_properties`](#sized_type_properties)\n\nThis feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.\n\n---\n\n## [`slice_as_chunks`](#slice_as_chunks)\n\nThe tracking issue for this feature is: [#74985](https://github.com/rust-lang/rust/issues/74985)\n\n---\n\n## [`slice_concat_ext`](#slice_concat_ext)\n\nThe tracking issue for this feature is: [#27747](https://github.com/rust-lang/rust/issues/27747)\n\n---\n\n## [`slice_concat_trait`](#slice_concat_trait)\n\nThe tracking issue for this feature is: [#27747](https://github.com/rust-lang/rust/issues/27747)\n\n---\n\n## [`slice_from_ptr_range`](#slice_from_ptr_range)\n\nThe tracking issue for this feature is: [#89792](https://github.com/rust-lang/rust/issues/89792)\n\n---\n\n## [`slice_index_methods`](#slice_index_methods)\n\nThis feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.\n\n---\n\n## [`slice_internals`](#slice_internals)\n\nThis feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.\n\n---\n\n## [`slice_iter_mut_as_mut_slice`](#slice_iter_mut_as_mut_slice)\n\nThe tracking issue for this feature is: [#93079](https://github.com/rust-lang/rust/issues/93079)\n\n---\n\n## [`slice_partition_dedup`](#slice_partition_dedup)\n\nThe tracking issue for this feature is: [#54279](https://github.com/rust-lang/rust/issues/54279)\n\n---\n\n## [`slice_pattern`](#slice_pattern)\n\nThe tracking issue for this feature is: [#56345](https://github.com/rust-lang/rust/issues/56345)\n\n---\n\n## [`slice_ptr_get`](#slice_ptr_get)\n\nThe tracking issue for this feature is: [#74265](https://github.com/rust-lang/rust/issues/74265)\n\n---\n\n## [`slice_range`](#slice_range)\n\nThe tracking issue for this feature is: [#76393](https://github.com/rust-lang/rust/issues/76393)\n\n---\n\n## [`slice_split_once`](#slice_split_once)\n\nThe tracking issue for this feature is: [#112811](https://github.com/rust-lang/rust/issues/112811)\n\n---\n\n## [`slice_swap_unchecked`](#slice_swap_unchecked)\n\nThe tracking issue for this feature is: [#88539](https://github.com/rust-lang/rust/issues/88539)\n\n---\n\n## [`slice_take`](#slice_take)\n\nThe tracking issue for this feature is: [#62280](https://github.com/rust-lang/rust/issues/62280)\n\n---\n\n## [`solid_ext`](#solid_ext)\n\nThis feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.\n\n---\n\n## [`sort_floats`](#sort_floats)\n\nThe tracking issue for this feature is: [#93396](https://github.com/rust-lang/rust/issues/93396)\n\n---\n\n## [`sort_internals`](#sort_internals)\n\nThis feature is internal to the Rust compiler and is not intended for general use.\n\n---\n\n## [`split_array`](#split_array)\n\nThe tracking issue for this feature is: [#90091](https://github.com/rust-lang/rust/issues/90091)\n\n---\n\n## [`split_as_slice`](#split_as_slice)\n\nThe tracking issue for this feature is: [#96137](https://github.com/rust-lang/rust/issues/96137)\n\n---\n\n## [`std_internals`](#std_internals)\n\nThis feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.\n\n---\n\n## [`stdarch_arm_feature_detection`](#stdarch_arm_feature_detection)\n\nThe tracking issue for this feature is: [#111190](https://github.com/rust-lang/rust/issues/111190)\n\n---\n\n## [`stdarch_mips_feature_detection`](#stdarch_mips_feature_detection)\n\nThe tracking issue for this feature is: [#111188](https://github.com/rust-lang/rust/issues/111188)\n\n---\n\n## [`stdarch_powerpc_feature_detection`](#stdarch_powerpc_feature_detection)\n\nThe tracking issue for this feature is: [#111191](https://github.com/rust-lang/rust/issues/111191)\n\n---\n\n## [`stdio_makes_pipe`](#stdio_makes_pipe)\n\nThe tracking issue for this feature is: [#98288](https://github.com/rust-lang/rust/issues/98288)\n\n---\n\n## [`step_trait`](#step_trait)\n\nThe tracking issue for this feature is: [#42168](https://github.com/rust-lang/rust/issues/42168)\n\n---\n\n## [`str_from_raw_parts`](#str_from_raw_parts)\n\nThe tracking issue for this feature is: [#119206](https://github.com/rust-lang/rust/issues/119206)\n\n---\n\n## [`str_from_utf16_endian`](#str_from_utf16_endian)\n\nThe tracking issue for this feature is: [#116258](https://github.com/rust-lang/rust/issues/116258)\n\n---\n\n## [`str_internals`](#str_internals)\n\nThis feature is internal to the Rust compiler and is not intended for general use.\n\n---\n\n## [`str_lines_remainder`](#str_lines_remainder)\n\nThe tracking issue for this feature is: [#77998](https://github.com/rust-lang/rust/issues/77998)\n\n---\n\n## [`str_split_inclusive_remainder`](#str_split_inclusive_remainder)\n\nThe tracking issue for this feature is: [#77998](https://github.com/rust-lang/rust/issues/77998)\n\n---\n\n## [`str_split_remainder`](#str_split_remainder)\n\nThe tracking issue for this feature is: [#77998](https://github.com/rust-lang/rust/issues/77998)\n\n---\n\n## [`str_split_whitespace_remainder`](#str_split_whitespace_remainder)\n\nThe tracking issue for this feature is: [#77998](https://github.com/rust-lang/rust/issues/77998)\n\n---\n\n## [`strict_overflow_ops`](#strict_overflow_ops)\n\nThe tracking issue for this feature is: [#118260](https://github.com/rust-lang/rust/issues/118260)\n\n---\n\n## [`strict_provenance_atomic_ptr`](#strict_provenance_atomic_ptr)\n\nThe tracking issue for this feature is: [#99108](https://github.com/rust-lang/rust/issues/99108)\n\n---\n\n## [`string_extend_from_within`](#string_extend_from_within)\n\nThe tracking issue for this feature is: [#103806](https://github.com/rust-lang/rust/issues/103806)\n\n---\n\n## [`string_remove_matches`](#string_remove_matches)\n\nThe tracking issue for this feature is: [#72826](https://github.com/rust-lang/rust/issues/72826)\n\n---\n\n## [`sync_unsafe_cell`](#sync_unsafe_cell)\n\nThe tracking issue for this feature is: [#95439](https://github.com/rust-lang/rust/issues/95439)\n\n---\n\n## [`tcp_deferaccept`](#tcp_deferaccept)\n\nThe tracking issue for this feature is: [#119639](https://github.com/rust-lang/rust/issues/119639)\n\n---\n\n## [`tcp_linger`](#tcp_linger)\n\nThe tracking issue for this feature is: [#88494](https://github.com/rust-lang/rust/issues/88494)\n\n---\n\n## [`tcp_quickack`](#tcp_quickack)\n\nThe tracking issue for this feature is: [#96256](https://github.com/rust-lang/rust/issues/96256)\n\n---\n\n## [`tcplistener_into_incoming`](#tcplistener_into_incoming)\n\nThe tracking issue for this feature is: [#88339](https://github.com/rust-lang/rust/issues/88339)\n\n---\n\n## [`test`](#test)\n\nThe tracking issue for this feature is: None.\n\n---\n\nThe internals of the `test` crate are unstable, behind the `test` flag. The most widely used part of the `test` crate are benchmark tests, which can test the performance of your code. Let's make our `src/lib.rs` look like this (comments elided):\n\n```rust\n#![allow(unused)]\n#![feature(test)]\n\nfn main() {\nextern crate test;\n\npub fn add_two(a: i32) -> i32 {\n    a + 2\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n    use test::Bencher;\n\n    #[test]\n    fn it_works() {\n        assert_eq!(4, add_two(2));\n    }\n\n    #[bench]\n    fn bench_add_two(b: &mut Bencher) {\n        b.iter(|| add_two(2));\n    }\n}\n}\n```\n\nNote the `test` feature gate, which enables this unstable feature.\n\nWe've imported the `test` crate, which contains our benchmarking support. We have a new function as well, with the `bench` attribute. Unlike regular tests, which take no arguments, benchmark tests take a `&mut Bencher`. This `Bencher` provides an `iter` method, which takes a closure. This closure contains the code we'd like to benchmark.\n\nWe can run benchmark tests with `cargo bench`:\n\n```bash\n$ cargo bench\n   Compiling adder v0.0.1 (file:///home/steve/tmp/adder)\n     Running target/release/adder-91b3e234d4ed382a\n\nrunning 2 tests\ntest tests::it_works ... ignored\ntest tests::bench_add_two ... bench:         1 ns/iter (+/- 0)\n\ntest result: ok. 0 passed; 0 failed; 1 ignored; 1 measured\n\n```\n\nOur non-benchmark test was ignored. You may have noticed that `cargo bench` takes a bit longer than `cargo test`. This is because Rust runs our benchmark a number of times, and then takes the average. Because we're doing so little work in this example, we have a `1 ns/iter (+/- 0)`, but this would show the variance if there was one.\n\nAdvice on writing benchmarks:\n\n-   Move setup code outside the `iter` loop; only put the part you want to measure inside\n-   Make the code do \"the same thing\" on each iteration; do not accumulate or change state\n-   Make the outer function idempotent too; the benchmark runner is likely to run it many times\n-   Make the inner `iter` loop short and fast so benchmark runs are fast and the calibrator can adjust the run-length at fine resolution\n-   Make the code in the `iter` loop do something simple, to assist in pinpointing performance improvements (or regressions)\n\n## [Gotcha: optimizations](#gotcha-optimizations)\n\nThere's another tricky part to writing benchmarks: benchmarks compiled with optimizations activated can be dramatically changed by the optimizer so that the benchmark is no longer benchmarking what one expects. For example, the compiler might recognize that some calculation has no external effects and remove it entirely.\n\n```rust\n#![allow(unused)]\n#![feature(test)]\n\nfn main() {\nextern crate test;\nuse test::Bencher;\n\n#[bench]\nfn bench_xor_1000_ints(b: &mut Bencher) {\n    b.iter(|| {\n        (0..1000).fold(0, |old, new| old ^ new);\n    });\n}\n}\n```\n\ngives the following results\n\n```text\nrunning 1 test\ntest bench_xor_1000_ints ... bench:         0 ns/iter (+/- 0)\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 1 measured\n\n```\n\nThe benchmarking runner offers two ways to avoid this. Either, the closure that the `iter` method receives can return an arbitrary value which forces the optimizer to consider the result used and ensures it cannot remove the computation entirely. This could be done for the example above by adjusting the `b.iter` call to\n\n```rust\n#![allow(unused)]\nfn main() {\nstruct X;\nimpl X { fn iter<T, F>(&self, _: F) where F: FnMut() -> T {} } let b = X;\nb.iter(|| {\n    // Note lack of `;` (could also use an explicit `return`).\n    (0..1000).fold(0, |old, new| old ^ new)\n});\n}\n```\n\nOr, the other option is to call the generic `test::black_box` function, which is an opaque \"black box\" to the optimizer and so forces it to consider any argument as used.\n\n```rust\n#![feature(test)]\n\nextern crate test;\n\nfn main() {\nstruct X;\nimpl X { fn iter<T, F>(&self, _: F) where F: FnMut() -> T {} } let b = X;\nb.iter(|| {\n    let n = test::black_box(1000);\n\n    (0..n).fold(0, |a, b| a ^ b)\n})\n}\n```\n\nNeither of these read or modify the value, and are very cheap for small values. Larger values can be passed indirectly to reduce overhead (e.g. `black_box(&huge_struct)`).\n\nPerforming either of the above changes gives the following benchmarking results\n\n```text\nrunning 1 test\ntest bench_xor_1000_ints ... bench:       131 ns/iter (+/- 3)\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 1 measured\n\n```\n\nHowever, the optimizer can still modify a testcase in an undesirable manner even when using either of the above.\n\n## [`thin_box`](#thin_box)\n\nThe tracking issue for this feature is: [#92791](https://github.com/rust-lang/rust/issues/92791)\n\n---\n\n## [`thread_id_value`](#thread_id_value)\n\nThe tracking issue for this feature is: [#67939](https://github.com/rust-lang/rust/issues/67939)\n\n---\n\n## [`thread_local_internals`](#thread_local_internals)\n\nThis feature is internal to the Rust compiler and is not intended for general use.\n\n---\n\n## [`thread_sleep_until`](#thread_sleep_until)\n\nThe tracking issue for this feature is: [#113752](https://github.com/rust-lang/rust/issues/113752)\n\n---\n\n## [`thread_spawn_unchecked`](#thread_spawn_unchecked)\n\nThe tracking issue for this feature is: [#55132](https://github.com/rust-lang/rust/issues/55132)\n\n---\n\n## [`trace_macros`](#trace_macros)\n\nThe tracking issue for this feature is [#29598](https://github.com/rust-lang/rust/issues/29598).\n\n---\n\nWith `trace_macros` you can trace the expansion of macros in your code.\n\n## [Examples](#examples-11)\n\n```rust\n#![feature(trace_macros)]\n\nfn main() {\n    trace_macros!(true);\n    println!(\"Hello, Rust!\");\n    trace_macros!(false);\n}\n```\n\nThe `cargo build` output:\n\n```txt\nnote: trace_macro\n --> src/main.rs:5:5\n  |\n5 |     println!(\"Hello, Rust!\");\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n  |\n  = note: expanding `println! { \"Hello, Rust!\" }`\n  = note: to `print ! ( concat ! ( \"Hello, Rust!\" , \"\\n\" ) )`\n  = note: expanding `print! { concat ! ( \"Hello, Rust!\" , \"\\n\" ) }`\n  = note: to `$crate :: io :: _print ( format_args ! ( concat ! ( \"Hello, Rust!\" , \"\\n\" ) )\n          )`\n\n    Finished dev [unoptimized + debuginfo] target(s) in 0.60 secs\n\n```\n\n## [`track_path`](#track_path)\n\nThe tracking issue for this feature is: [#99515](https://github.com/rust-lang/rust/issues/99515)\n\n---\n\n## [`transmutability`](#transmutability)\n\nThe tracking issue for this feature is: [#99571](https://github.com/rust-lang/rust/issues/99571)\n\n---\n\n## [`trusted_fused`](#trusted_fused)\n\nThis feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.\n\n---\n\n## [`trusted_len`](#trusted_len)\n\nThe tracking issue for this feature is: [#37572](https://github.com/rust-lang/rust/issues/37572)\n\n---\n\n## [`trusted_len_next_unchecked`](#trusted_len_next_unchecked)\n\nThe tracking issue for this feature is: [#37572](https://github.com/rust-lang/rust/issues/37572)\n\n---\n\n## [`trusted_random_access`](#trusted_random_access)\n\nThis feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.\n\n---\n\n## [`trusted_step`](#trusted_step)\n\nThe tracking issue for this feature is: [#85731](https://github.com/rust-lang/rust/issues/85731)\n\n---\n\n## [`try_find`](#try_find)\n\nThe tracking issue for this feature is: [#63178](https://github.com/rust-lang/rust/issues/63178)\n\n---\n\n## [`try_reserve_kind`](#try_reserve_kind)\n\nThe tracking issue for this feature is: [#48043](https://github.com/rust-lang/rust/issues/48043)\n\n---\n\n## [`try_trait_v2`](#try_trait_v2)\n\nThe tracking issue for this feature is: [#84277](https://github.com/rust-lang/rust/issues/84277)\n\n---\n\n## [`try_trait_v2_residual`](#try_trait_v2_residual)\n\nThe tracking issue for this feature is: [#91285](https://github.com/rust-lang/rust/issues/91285)\n\n---\n\n## [`try_trait_v2_yeet`](#try_trait_v2_yeet)\n\nThe tracking issue for this feature is: [#96374](https://github.com/rust-lang/rust/issues/96374)\n\n---\n\n## [`try_with_capacity`](#try_with_capacity)\n\nThe tracking issue for this feature is: [#91913](https://github.com/rust-lang/rust/issues/91913)\n\n---\n\n## [`tuple_trait`](#tuple_trait)\n\nThis feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.\n\n---\n\n## [`ub_checks`](#ub_checks)\n\nThis feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.\n\n---\n\n## [`uefi_std`](#uefi_std)\n\nThe tracking issue for this feature is: [#100499](https://github.com/rust-lang/rust/issues/100499)\n\n---\n\n## [`unchecked_neg`](#unchecked_neg)\n\nThe tracking issue for this feature is: [#85122](https://github.com/rust-lang/rust/issues/85122)\n\n---\n\n## [`unchecked_shifts`](#unchecked_shifts)\n\nThe tracking issue for this feature is: [#85122](https://github.com/rust-lang/rust/issues/85122)\n\n---\n\n## [`unicode_internals`](#unicode_internals)\n\nThis feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.\n\n---\n\n## [`unique_rc_arc`](#unique_rc_arc)\n\nThe tracking issue for this feature is: [#112566](https://github.com/rust-lang/rust/issues/112566)\n\n---\n\n## [`unix_file_vectored_at`](#unix_file_vectored_at)\n\nThe tracking issue for this feature is: [#89517](https://github.com/rust-lang/rust/issues/89517)\n\n---\n\n## [`unix_set_mark`](#unix_set_mark)\n\nThe tracking issue for this feature is: [#96467](https://github.com/rust-lang/rust/issues/96467)\n\n---\n\n## [`unix_socket_ancillary_data`](#unix_socket_ancillary_data)\n\nThe tracking issue for this feature is: [#76915](https://github.com/rust-lang/rust/issues/76915)\n\n---\n\n## [`unix_socket_peek`](#unix_socket_peek)\n\nThe tracking issue for this feature is: [#76923](https://github.com/rust-lang/rust/issues/76923)\n\n---\n\n## [`unsafe_cell_from_mut`](#unsafe_cell_from_mut)\n\nThe tracking issue for this feature is: [#111645](https://github.com/rust-lang/rust/issues/111645)\n\n---\n\n## [`unsafe_pin_internals`](#unsafe_pin_internals)\n\nThis feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.\n\n---\n\n## [`unsize`](#unsize)\n\nThe tracking issue for this feature is: [#18598](https://github.com/rust-lang/rust/issues/18598)\n\n---\n\n## [`unwrap_infallible`](#unwrap_infallible)\n\nThe tracking issue for this feature is: [#61695](https://github.com/rust-lang/rust/issues/61695)\n\n---\n\n## [`update_panic_count`](#update_panic_count)\n\nThis feature is internal to the Rust compiler and is not intended for general use.\n\n---\n\nThe tracking issue for this feature is: [#94919](https://github.com/rust-lang/rust/issues/94919)\n\n---\n\nThe tracking issue for this feature is: [#94919](https://github.com/rust-lang/rust/issues/94919)\n\n---\n\n## [`variant_count`](#variant_count)\n\nThe tracking issue for this feature is: [#73662](https://github.com/rust-lang/rust/issues/73662)\n\n---\n\n## [`vec_into_raw_parts`](#vec_into_raw_parts)\n\nThe tracking issue for this feature is: [#65816](https://github.com/rust-lang/rust/issues/65816)\n\n---\n\n## [`vec_pop_if`](#vec_pop_if)\n\nThe tracking issue for this feature is: [#122741](https://github.com/rust-lang/rust/issues/122741)\n\n---\n\n## [`vec_push_within_capacity`](#vec_push_within_capacity)\n\nThe tracking issue for this feature is: [#100486](https://github.com/rust-lang/rust/issues/100486)\n\n---\n\n## [`vec_split_at_spare`](#vec_split_at_spare)\n\nThe tracking issue for this feature is: [#81944](https://github.com/rust-lang/rust/issues/81944)\n\n---\n\n## [`waker_getters`](#waker_getters)\n\nThe tracking issue for this feature is: [#96992](https://github.com/rust-lang/rust/issues/96992)\n\n---\n\n## [`wasi_ext`](#wasi_ext)\n\nThe tracking issue for this feature is: [#71213](https://github.com/rust-lang/rust/issues/71213)\n\n---\n\n## [`windows_by_handle`](#windows_by_handle)\n\nThe tracking issue for this feature is: [#63010](https://github.com/rust-lang/rust/issues/63010)\n\n---\n\n## [`windows_c`](#windows_c)\n\nThis feature is internal to the Rust compiler and is not intended for general use.\n\n---\n\n## [`windows_handle`](#windows_handle)\n\nThis feature is internal to the Rust compiler and is not intended for general use.\n\n---\n\n## [`windows_net`](#windows_net)\n\nThis feature is internal to the Rust compiler and is not intended for general use.\n\n---\n\n## [`windows_process_exit_code_from`](#windows_process_exit_code_from)\n\nThe tracking issue for this feature is: [#111688](https://github.com/rust-lang/rust/issues/111688)\n\n---\n\n## [`windows_process_extensions_async_pipes`](#windows_process_extensions_async_pipes)\n\nThe tracking issue for this feature is: [#98289](https://github.com/rust-lang/rust/issues/98289)\n\n---\n\n## [`windows_process_extensions_force_quotes`](#windows_process_extensions_force_quotes)\n\nThe tracking issue for this feature is: [#82227](https://github.com/rust-lang/rust/issues/82227)\n\n---\n\n## [`windows_process_extensions_main_thread_handle`](#windows_process_extensions_main_thread_handle)\n\nThe tracking issue for this feature is: [#96723](https://github.com/rust-lang/rust/issues/96723)\n\n---\n\n## [`windows_process_extensions_raw_attribute`](#windows_process_extensions_raw_attribute)\n\nThe tracking issue for this feature is: [#114854](https://github.com/rust-lang/rust/issues/114854)\n\n---\n\n## [`windows_stdio`](#windows_stdio)\n\nThis feature is internal to the Rust compiler and is not intended for general use.\n\n---\n\n## [`wrapping_int_impl`](#wrapping_int_impl)\n\nThe tracking issue for this feature is: [#32463](https://github.com/rust-lang/rust/issues/32463)\n\n---\n\n## [`wrapping_next_power_of_two`](#wrapping_next_power_of_two)\n\nThe tracking issue for this feature is: [#32463](https://github.com/rust-lang/rust/issues/32463)\n\n---\n\n## [`write_all_vectored`](#write_all_vectored)\n\nThe tracking issue for this feature is: [#70436](https://github.com/rust-lang/rust/issues/70436)\n\n---\n\n## [`yeet_desugar_details`](#yeet_desugar_details)\n\nThis feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.\n\n---",
	"html": "<!DOCTYPE html><html lang=\"en\" class=\"light\" dir=\"ltr\"><head>\n        <!-- Book generated using mdBook -->\n        <meta charset=\"UTF-8\">\n        <title>The Rust Unstable Book</title>\n        <meta name=\"robots\" content=\"noindex\">\n\n\n        <!-- Custom HTML head -->\n        \n        <meta name=\"description\" content=\"\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <meta name=\"theme-color\" content=\"rgb(255, 255, 255)\">\n\n        <link rel=\"icon\" href=\"favicon.svg\">\n        <link rel=\"shortcut icon\" href=\"favicon.png\">\n        <link rel=\"stylesheet\" href=\"css/variables.css\">\n        <link rel=\"stylesheet\" href=\"css/general.css\">\n        <link rel=\"stylesheet\" href=\"css/chrome.css\">\n        <link rel=\"stylesheet\" href=\"css/print.css\" media=\"print\">\n\n        <!-- Fonts -->\n        <link rel=\"stylesheet\" href=\"FontAwesome/css/font-awesome.css\">\n        <link rel=\"stylesheet\" href=\"fonts/fonts.css\">\n\n        <!-- Highlight.js Stylesheets -->\n        <link rel=\"stylesheet\" href=\"highlight.css\">\n        <link rel=\"stylesheet\" href=\"tomorrow-night.css\" disabled=\"\">\n        <link rel=\"stylesheet\" href=\"ayu-highlight.css\" disabled=\"\">\n\n        <!-- Custom theme stylesheets -->\n\n    </head>\n    <body class=\"js sidebar-visible\">\n    <div id=\"body-container\">\n        <!-- Provide site root to javascript -->\n        <script>\n            var path_to_root = \"\";\n            var default_theme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"navy\" : \"light\";\n        </script>\n\n        <!-- Work around some values being stored in localStorage wrapped in quotes -->\n        <script>\n            try {\n                var theme = localStorage.getItem('mdbook-theme');\n                var sidebar = localStorage.getItem('mdbook-sidebar');\n\n                if (theme.startsWith('\"') && theme.endsWith('\"')) {\n                    localStorage.setItem('mdbook-theme', theme.slice(1, theme.length - 1));\n                }\n\n                if (sidebar.startsWith('\"') && sidebar.endsWith('\"')) {\n                    localStorage.setItem('mdbook-sidebar', sidebar.slice(1, sidebar.length - 1));\n                }\n            } catch (e) { }\n        </script>\n\n        <!-- Set the theme before any content is loaded, prevents flash -->\n        <script>\n            var theme;\n            try { theme = localStorage.getItem('mdbook-theme'); } catch(e) { }\n            if (theme === null || theme === undefined) { theme = default_theme; }\n            var html = document.querySelector('html');\n            html.classList.remove('light')\n            html.classList.add(theme);\n            var body = document.querySelector('body');\n            body.classList.remove('no-js')\n            body.classList.add('js');\n        </script>\n\n        <input type=\"checkbox\" id=\"sidebar-toggle-anchor\" class=\"hidden\">\n\n        <!-- Hide / unhide sidebar before it is displayed -->\n        <script>\n            var body = document.querySelector('body');\n            var sidebar = null;\n            var sidebar_toggle = document.getElementById(\"sidebar-toggle-anchor\");\n            if (document.body.clientWidth >= 1080) {\n                try { sidebar = localStorage.getItem('mdbook-sidebar'); } catch(e) { }\n                sidebar = sidebar || 'visible';\n            } else {\n                sidebar = 'hidden';\n            }\n            sidebar_toggle.checked = sidebar === 'visible';\n            body.classList.remove('sidebar-visible');\n            body.classList.add(\"sidebar-\" + sidebar);\n        </script>\n\n        <nav id=\"sidebar\" class=\"sidebar\" aria-label=\"Table of contents\" aria-hidden=\"false\">\n            <div class=\"sidebar-scrollbox\">\n                <ol class=\"chapter\"><li class=\"chapter-item expanded affix \"><a href=\"the-unstable-book.html\" tabindex=\"0\">The Unstable Book</a></li><li class=\"chapter-item expanded \"><a href=\"compiler-flags.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.</strong> Compiler flags</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"compiler-flags/branch-protection.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.1.</strong> branch_protection</a></li><li class=\"chapter-item expanded \"><a href=\"compiler-flags/cf-protection.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.2.</strong> cf_protection</a></li><li class=\"chapter-item expanded \"><a href=\"compiler-flags/codegen-backend.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.3.</strong> codegen_backend</a></li><li class=\"chapter-item expanded \"><a href=\"compiler-flags/codegen-options.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.4.</strong> codegen_options</a></li><li class=\"chapter-item expanded \"><a href=\"compiler-flags/control-flow-guard.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.5.</strong> control_flow_guard</a></li><li class=\"chapter-item expanded \"><a href=\"compiler-flags/coverage-options.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.6.</strong> coverage_options</a></li><li class=\"chapter-item expanded \"><a href=\"compiler-flags/debug_info_for_profiling.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.7.</strong> debug_info_for_profiling</a></li><li class=\"chapter-item expanded \"><a href=\"compiler-flags/default-hidden-visibility.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.8.</strong> default_hidden_visibility</a></li><li class=\"chapter-item expanded \"><a href=\"compiler-flags/direct-access-external-data.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.9.</strong> direct_access_external_data</a></li><li class=\"chapter-item expanded \"><a href=\"compiler-flags/dump-mono-stats.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.10.</strong> dump_mono_stats</a></li><li class=\"chapter-item expanded \"><a href=\"compiler-flags/dump-mono-stats-format.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.11.</strong> dump_mono_stats_format</a></li><li class=\"chapter-item expanded \"><a href=\"compiler-flags/dwarf-version.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.12.</strong> dwarf_version</a></li><li class=\"chapter-item expanded \"><a href=\"compiler-flags/dylib-lto.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.13.</strong> dylib_lto</a></li><li class=\"chapter-item expanded \"><a href=\"compiler-flags/emit-stack-sizes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.14.</strong> emit_stack_sizes</a></li><li class=\"chapter-item expanded \"><a href=\"compiler-flags/env-set.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.15.</strong> env_set</a></li><li class=\"chapter-item expanded \"><a href=\"compiler-flags/export-executable-symbols.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.16.</strong> export_executable_symbols</a></li><li class=\"chapter-item expanded \"><a href=\"compiler-flags/extern-options.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.17.</strong> extern_options</a></li><li class=\"chapter-item expanded \"><a href=\"compiler-flags/external-clangrt.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.18.</strong> external_clangrt</a></li><li class=\"chapter-item expanded \"><a href=\"compiler-flags/fixed-x18.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.19.</strong> fixed_x18</a></li><li class=\"chapter-item expanded \"><a href=\"compiler-flags/function-return.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.20.</strong> function_return</a></li><li class=\"chapter-item expanded \"><a href=\"compiler-flags/instrument-xray.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.21.</strong> instrument_xray</a></li><li class=\"chapter-item expanded \"><a href=\"compiler-flags/link-native-libraries.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.22.</strong> link_native_libraries</a></li><li class=\"chapter-item expanded \"><a href=\"compiler-flags/linker-features.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.23.</strong> linker_features</a></li><li class=\"chapter-item expanded \"><a href=\"compiler-flags/llvm-module-flag.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.24.</strong> llvm_module_flag</a></li><li class=\"chapter-item expanded \"><a href=\"compiler-flags/location-detail.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.25.</strong> location_detail</a></li><li class=\"chapter-item expanded \"><a href=\"compiler-flags/move-size-limit.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.26.</strong> move_size_limit</a></li><li class=\"chapter-item expanded \"><a href=\"compiler-flags/no-jump-tables.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.27.</strong> no_jump_tables</a></li><li class=\"chapter-item expanded \"><a href=\"compiler-flags/no-parallel-llvm.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.28.</strong> no_parallel_llvm</a></li><li class=\"chapter-item expanded \"><a href=\"compiler-flags/no-unique-section-names.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.29.</strong> no_unique_section_names</a></li><li class=\"chapter-item expanded \"><a href=\"compiler-flags/on-broken-pipe.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.30.</strong> on_broken_pipe</a></li><li class=\"chapter-item expanded \"><a href=\"compiler-flags/print-check-cfg.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.31.</strong> print_check_cfg</a></li><li class=\"chapter-item expanded \"><a href=\"compiler-flags/profile.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.32.</strong> profile</a></li><li class=\"chapter-item expanded \"><a href=\"compiler-flags/profile_sample_use.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.33.</strong> profile_sample_use</a></li><li class=\"chapter-item expanded \"><a href=\"compiler-flags/remap-cwd-prefix.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.34.</strong> remap_cwd_prefix</a></li><li class=\"chapter-item expanded \"><a href=\"compiler-flags/remap-path-scope.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.35.</strong> remap_path_scope</a></li><li class=\"chapter-item expanded \"><a href=\"compiler-flags/report-time.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.36.</strong> report_time</a></li><li class=\"chapter-item expanded \"><a href=\"compiler-flags/sanitizer.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.37.</strong> sanitizer</a></li><li class=\"chapter-item expanded \"><a href=\"compiler-flags/self-profile.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.38.</strong> self_profile</a></li><li class=\"chapter-item expanded \"><a href=\"compiler-flags/self-profile-events.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.39.</strong> self_profile_events</a></li><li class=\"chapter-item expanded \"><a href=\"compiler-flags/shell-argfiles.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.40.</strong> shell_argfiles</a></li><li class=\"chapter-item expanded \"><a href=\"compiler-flags/src-hash-algorithm.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.41.</strong> src_hash_algorithm</a></li><li class=\"chapter-item expanded \"><a href=\"compiler-flags/temps-dir.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.42.</strong> temps_dir</a></li><li class=\"chapter-item expanded \"><a href=\"compiler-flags/tiny-const-eval-limit.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.43.</strong> tiny_const_eval_limit</a></li><li class=\"chapter-item expanded \"><a href=\"compiler-flags/tls-model.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.44.</strong> tls_model</a></li><li class=\"chapter-item expanded \"><a href=\"compiler-flags/ub-checks.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.45.</strong> ub_checks</a></li><li class=\"chapter-item expanded \"><a href=\"compiler-flags/unsound-mir-opts.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.46.</strong> unsound_mir_opts</a></li><li class=\"chapter-item expanded \"><a href=\"compiler-flags/virtual-function-elimination.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.47.</strong> virtual_function_elimination</a></li><li class=\"chapter-item expanded \"><a href=\"compiler-flags/wasm-c-abi.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.48.</strong> wasm_c_abi</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"language-features.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.</strong> Language features</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"language-features/aarch64-ver-target-feature.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.1.</strong> aarch64_ver_target_feature</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/abi-avr-interrupt.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.2.</strong> abi_avr_interrupt</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/abi-c-cmse-nonsecure-call.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.3.</strong> abi_c_cmse_nonsecure_call</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/abi-msp430-interrupt.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.4.</strong> abi_msp430_interrupt</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/abi-ptx.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.5.</strong> abi_ptx</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/abi-riscv-interrupt.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.6.</strong> abi_riscv_interrupt</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/abi-unadjusted.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.7.</strong> abi_unadjusted</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/abi-vectorcall.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.8.</strong> abi_vectorcall</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/abi-x86-interrupt.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.9.</strong> abi_x86_interrupt</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/adt-const-params.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.10.</strong> adt_const_params</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/alloc-error-handler.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.11.</strong> alloc_error_handler</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/allocator-internals.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.12.</strong> allocator_internals</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/allow-internal-unsafe.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.13.</strong> allow_internal_unsafe</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/allow-internal-unstable.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.14.</strong> allow_internal_unstable</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/anonymous-lifetime-in-impl-trait.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.15.</strong> anonymous_lifetime_in_impl_trait</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/arbitrary-self-types.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.16.</strong> arbitrary_self_types</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/arm-target-feature.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.17.</strong> arm_target_feature</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/asm-const.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.18.</strong> asm_const</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/asm-experimental-arch.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.19.</strong> asm_experimental_arch</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/asm-goto.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.20.</strong> asm_goto</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/asm-unwind.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.21.</strong> asm_unwind</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/associated-const-equality.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.22.</strong> associated_const_equality</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/associated-type-defaults.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.23.</strong> associated_type_defaults</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/async-closure.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.24.</strong> async_closure</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/async-fn-track-caller.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.25.</strong> async_fn_track_caller</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/async-for-loop.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.26.</strong> async_for_loop</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/auto-traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.27.</strong> auto_traits</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/avx512-target-feature.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.28.</strong> avx512_target_feature</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/box-patterns.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.29.</strong> box_patterns</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/bpf-target-feature.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.30.</strong> bpf_target_feature</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/builtin-syntax.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.31.</strong> builtin_syntax</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/c-unwind.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.32.</strong> c_unwind</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/c-variadic.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.33.</strong> c_variadic</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/cfg-overflow-checks.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.34.</strong> cfg_overflow_checks</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/cfg-relocation-model.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.35.</strong> cfg_relocation_model</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/cfg-sanitize.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.36.</strong> cfg_sanitize</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/cfg-sanitizer-cfi.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.37.</strong> cfg_sanitizer_cfi</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/cfg-target-compact.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.38.</strong> cfg_target_compact</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/cfg-target-has-atomic.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.39.</strong> cfg_target_has_atomic</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/cfg-target-has-atomic-equal-alignment.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.40.</strong> cfg_target_has_atomic_equal_alignment</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/cfg-target-thread-local.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.41.</strong> cfg_target_thread_local</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/cfg-ub-checks.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.42.</strong> cfg_ub_checks</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/cfg-version.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.43.</strong> cfg_version</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/cfi-encoding.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.44.</strong> cfi_encoding</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/closure-lifetime-binder.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.45.</strong> closure_lifetime_binder</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/closure-track-caller.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.46.</strong> closure_track_caller</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/cmse-nonsecure-entry.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.47.</strong> cmse_nonsecure_entry</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/compiler-builtins.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.48.</strong> compiler_builtins</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/const-async-blocks.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.49.</strong> const_async_blocks</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/const-closures.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.50.</strong> const_closures</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/const-extern-fn.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.51.</strong> const_extern_fn</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/const-fn-floating-point-arithmetic.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.52.</strong> const_fn_floating_point_arithmetic</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/const-for.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.53.</strong> const_for</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/const-mut-refs.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.54.</strong> const_mut_refs</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/const-precise-live-drops.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.55.</strong> const_precise_live_drops</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/const-refs-to-cell.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.56.</strong> const_refs_to_cell</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/const-refs-to-static.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.57.</strong> const_refs_to_static</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/const-trait-impl.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.58.</strong> const_trait_impl</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/const-try.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.59.</strong> const_try</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/coroutine-clone.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.60.</strong> coroutine_clone</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/coroutines.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.61.</strong> coroutines</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/coverage-attribute.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.62.</strong> coverage_attribute</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/csky-target-feature.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.63.</strong> csky_target_feature</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/custom-inner-attributes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.64.</strong> custom_inner_attributes</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/custom-mir.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.65.</strong> custom_mir</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/custom-test-frameworks.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.66.</strong> custom_test_frameworks</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/decl-macro.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.67.</strong> decl_macro</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/default-type-parameter-fallback.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.68.</strong> default_type_parameter_fallback</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/deprecated-safe.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.69.</strong> deprecated_safe</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/deprecated-suggestion.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.70.</strong> deprecated_suggestion</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/deref-patterns.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.71.</strong> deref_patterns</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/do-not-recommend.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.72.</strong> do_not_recommend</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/doc-auto-cfg.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.73.</strong> doc_auto_cfg</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/doc-cfg.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.74.</strong> doc_cfg</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/doc-cfg-hide.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.75.</strong> doc_cfg_hide</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/doc-masked.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.76.</strong> doc_masked</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/doc-notable-trait.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.77.</strong> doc_notable_trait</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/dropck-eyepatch.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.78.</strong> dropck_eyepatch</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/dyn-star.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.79.</strong> dyn_star</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/effects.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.80.</strong> effects</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/ermsb-target-feature.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.81.</strong> ermsb_target_feature</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/exhaustive-patterns.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.82.</strong> exhaustive_patterns</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/explicit-tail-calls.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.83.</strong> explicit_tail_calls</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/expr-fragment-specifier-2024.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.84.</strong> expr_fragment_specifier_2024</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/extended-varargs-abi-support.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.85.</strong> extended_varargs_abi_support</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/extern-types.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.86.</strong> extern_types</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/f128.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.87.</strong> f128</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/f16.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.88.</strong> f16</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/ffi-const.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.89.</strong> ffi_const</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/ffi-pure.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.90.</strong> ffi_pure</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/fn-align.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.91.</strong> fn_align</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/fn-delegation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.92.</strong> fn_delegation</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/freeze-impls.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.93.</strong> freeze_impls</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/fundamental.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.94.</strong> fundamental</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/gen-blocks.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.95.</strong> gen_blocks</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/generic-arg-infer.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.96.</strong> generic_arg_infer</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/generic-assert.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.97.</strong> generic_assert</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/generic-associated-types-extended.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.98.</strong> generic_associated_types_extended</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/generic-const-exprs.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.99.</strong> generic_const_exprs</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/generic-const-items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.100.</strong> generic_const_items</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/global-registration.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.101.</strong> global_registration</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/half-open-range-patterns-in-slices.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.102.</strong> half_open_range_patterns_in_slices</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/hexagon-target-feature.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.103.</strong> hexagon_target_feature</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/if-let-guard.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.104.</strong> if_let_guard</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/impl-trait-in-assoc-type.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.105.</strong> impl_trait_in_assoc_type</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/impl-trait-in-fn-trait-return.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.106.</strong> impl_trait_in_fn_trait_return</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/inherent-associated-types.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.107.</strong> inherent_associated_types</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/inline-const-pat.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.108.</strong> inline_const_pat</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/intra-doc-pointers.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.109.</strong> intra_doc_pointers</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/intrinsics.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.110.</strong> intrinsics</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/lahfsahf-target-feature.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.111.</strong> lahfsahf_target_feature</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/lang-items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.112.</strong> lang_items</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/large-assignments.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.113.</strong> large_assignments</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/lazy-type-alias.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.114.</strong> lazy_type_alias</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/let-chains.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.115.</strong> let_chains</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/lifetime-capture-rules-2024.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.116.</strong> lifetime_capture_rules_2024</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/link-arg-attribute.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.117.</strong> link_arg_attribute</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/link-cfg.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.118.</strong> link_cfg</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/link-llvm-intrinsics.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.119.</strong> link_llvm_intrinsics</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/linkage.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.120.</strong> linkage</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/lint-reasons.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.121.</strong> lint_reasons</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/loongarch-target-feature.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.122.</strong> loongarch_target_feature</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/macro-metavar-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.123.</strong> macro_metavar_expr</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/marker-trait-attr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.124.</strong> marker_trait_attr</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/min-exhaustive-patterns.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.125.</strong> min_exhaustive_patterns</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/min-specialization.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.126.</strong> min_specialization</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/mips-target-feature.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.127.</strong> mips_target_feature</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/more-qualified-paths.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.128.</strong> more_qualified_paths</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/multiple-supertrait-upcastable.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.129.</strong> multiple_supertrait_upcastable</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/must-not-suspend.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.130.</strong> must_not_suspend</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/mut-ref.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.131.</strong> mut_ref</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/naked-functions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.132.</strong> naked_functions</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/native-link-modifiers-as-needed.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.133.</strong> native_link_modifiers_as_needed</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/needs-panic-runtime.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.134.</strong> needs_panic_runtime</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/negative-bounds.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.135.</strong> negative_bounds</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/negative-impls.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.136.</strong> negative_impls</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/never-patterns.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.137.</strong> never_patterns</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/never-type.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.138.</strong> never_type</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/never-type-fallback.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.139.</strong> never_type_fallback</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/no-core.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.140.</strong> no_core</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/no-sanitize.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.141.</strong> no_sanitize</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/non-exhaustive-omitted-patterns-lint.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.142.</strong> non_exhaustive_omitted_patterns_lint</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/non-lifetime-binders.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.143.</strong> non_lifetime_binders</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/object-safe-for-dispatch.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.144.</strong> object_safe_for_dispatch</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/offset-of-enum.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.145.</strong> offset_of_enum</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/offset-of-nested.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.146.</strong> offset_of_nested</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/omit-gdb-pretty-printer-section.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.147.</strong> omit_gdb_pretty_printer_section</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/optimize-attribute.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.148.</strong> optimize_attribute</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/panic-runtime.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.149.</strong> panic_runtime</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/pattern-complexity.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.150.</strong> pattern_complexity</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/pattern-types.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.151.</strong> pattern_types</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/postfix-match.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.152.</strong> postfix_match</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/powerpc-target-feature.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.153.</strong> powerpc_target_feature</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/precise-capturing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.154.</strong> precise_capturing</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/prelude-import.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.155.</strong> prelude_import</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/prfchw-target-feature.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.156.</strong> prfchw_target_feature</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/proc-macro-hygiene.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.157.</strong> proc_macro_hygiene</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/profiler-runtime.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.158.</strong> profiler_runtime</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/raw-ref-op.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.159.</strong> raw_ref_op</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/ref-pat-eat-one-layer-2024.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.160.</strong> ref_pat_eat_one_layer_2024</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/register-tool.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.161.</strong> register_tool</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/repr-simd.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.162.</strong> repr_simd</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/repr128.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.163.</strong> repr128</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/result-ffi-guarantees.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.164.</strong> result_ffi_guarantees</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/return-type-notation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.165.</strong> return_type_notation</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/riscv-target-feature.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.166.</strong> riscv_target_feature</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/rtm-target-feature.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.167.</strong> rtm_target_feature</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/rust-cold-cc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.168.</strong> rust_cold_cc</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/rustc-allow-const-fn-unstable.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.169.</strong> rustc_allow_const_fn_unstable</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/rustc-attrs.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.170.</strong> rustc_attrs</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/rustc-private.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.171.</strong> rustc_private</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/rustdoc-internals.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.172.</strong> rustdoc_internals</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/rustdoc-missing-doc-code-examples.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.173.</strong> rustdoc_missing_doc_code_examples</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/simd-ffi.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.174.</strong> simd_ffi</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/specialization.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.175.</strong> specialization</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/sse4a-target-feature.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.176.</strong> sse4a_target_feature</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/staged-api.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.177.</strong> staged_api</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/start.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.178.</strong> start</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/stmt-expr-attributes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.179.</strong> stmt_expr_attributes</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/strict-provenance.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.180.</strong> strict_provenance</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/string-deref-patterns.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.181.</strong> string_deref_patterns</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/structural-match.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.182.</strong> structural_match</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/target-feature-11.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.183.</strong> target_feature_11</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/tbm-target-feature.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.184.</strong> tbm_target_feature</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/test-unstable-lint.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.185.</strong> test_unstable_lint</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/thread-local.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.186.</strong> thread_local</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/trait-alias.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.187.</strong> trait_alias</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/trait-upcasting.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.188.</strong> trait_upcasting</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/transmute-generic-consts.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.189.</strong> transmute_generic_consts</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/transparent-unions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.190.</strong> transparent_unions</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/trivial-bounds.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.191.</strong> trivial_bounds</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/try-blocks.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.192.</strong> try_blocks</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/type-alias-impl-trait.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.193.</strong> type_alias_impl_trait</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/type-ascription.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.194.</strong> type_ascription</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/type-changing-struct-update.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.195.</strong> type_changing_struct_update</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/unboxed-closures.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.196.</strong> unboxed_closures</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/unnamed-fields.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.197.</strong> unnamed_fields</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/unsafe-attributes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.198.</strong> unsafe_attributes</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/unsafe-extern-blocks.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.199.</strong> unsafe_extern_blocks</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/unsized-fn-params.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.200.</strong> unsized_fn_params</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/unsized-locals.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.201.</strong> unsized_locals</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/unsized-tuple-coercion.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.202.</strong> unsized_tuple_coercion</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/used-with-arg.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.203.</strong> used_with_arg</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/wasm-abi.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.204.</strong> wasm_abi</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/wasm-target-feature.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.205.</strong> wasm_target_feature</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/with-negative-coherence.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.206.</strong> with_negative_coherence</a></li><li class=\"chapter-item expanded \"><a href=\"language-features/yeet-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.207.</strong> yeet_expr</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"library-features.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.</strong> Library Features</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"library-features/acceptfilter.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.1.</strong> acceptfilter</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/addr-parse-ascii.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.2.</strong> addr_parse_ascii</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/alloc-error-hook.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.3.</strong> alloc_error_hook</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/alloc-internals.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.4.</strong> alloc_internals</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/alloc-layout-extra.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.5.</strong> alloc_layout_extra</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/allocator-api.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.6.</strong> allocator_api</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/array-chunks.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.7.</strong> array_chunks</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/array-into-iter-constructors.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.8.</strong> array_into_iter_constructors</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/array-ptr-get.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.9.</strong> array_ptr_get</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/array-try-from-fn.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.10.</strong> array_try_from_fn</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/array-try-map.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.11.</strong> array_try_map</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/array-windows.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.12.</strong> array_windows</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/as-array-of-cells.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.</strong> as_array_of_cells</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/ascii-char.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.14.</strong> ascii_char</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/ascii-char-variants.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.15.</strong> ascii_char_variants</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/assert-matches.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.16.</strong> assert_matches</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/async-drop.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.17.</strong> async_drop</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/async-fn-traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.18.</strong> async_fn_traits</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/async-gen-internals.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.19.</strong> async_gen_internals</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/async-iter-from-iter.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.20.</strong> async_iter_from_iter</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/async-iterator.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.21.</strong> async_iterator</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/atomic-bool-fetch-not.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.22.</strong> atomic_bool_fetch_not</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/atomic-from-mut.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.23.</strong> atomic_from_mut</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/backtrace-frames.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.24.</strong> backtrace_frames</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/bigint-helper-methods.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.25.</strong> bigint_helper_methods</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/binary-heap-drain-sorted.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.26.</strong> binary_heap_drain_sorted</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/binary-heap-into-iter-sorted.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.27.</strong> binary_heap_into_iter_sorted</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/bound-as-ref.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.28.</strong> bound_as_ref</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/box-into-boxed-slice.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.29.</strong> box_into_boxed_slice</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/box-into-inner.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.30.</strong> box_into_inner</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/btree-cursors.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.31.</strong> btree_cursors</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/btree-extract-if.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.32.</strong> btree_extract_if</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/btreemap-alloc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.33.</strong> btreemap_alloc</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/buf-read-has-data-left.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.34.</strong> buf_read_has_data_left</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/bufread-skip-until.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.35.</strong> bufread_skip_until</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/build-hasher-default-const-new.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.36.</strong> build_hasher_default_const_new</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/c-size-t.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.37.</strong> c_size_t</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/c-str-module.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.38.</strong> c_str_module</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/c-void-variant.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.39.</strong> c_void_variant</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/can-vector.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.40.</strong> can_vector</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/cell-leak.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.41.</strong> cell_leak</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/cell-update.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.42.</strong> cell_update</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/cfg-accessible.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.43.</strong> cfg_accessible</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/cfg-eval.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.44.</strong> cfg_eval</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/cfg-match.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.45.</strong> cfg_match</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/char-indices-offset.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.46.</strong> char_indices_offset</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/char-internals.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.47.</strong> char_internals</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/char-min.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.48.</strong> char_min</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/cmp-minmax.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.49.</strong> cmp_minmax</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/coerce-unsized.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.50.</strong> coerce_unsized</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/concat-bytes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.51.</strong> concat_bytes</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/concat-idents.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.52.</strong> concat_idents</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/const-align-of-val.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.53.</strong> const_align_of_val</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/const-align-of-val-raw.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.54.</strong> const_align_of_val_raw</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/const-align-offset.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.55.</strong> const_align_offset</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/const-alloc-error.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.56.</strong> const_alloc_error</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/const-alloc-layout.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.57.</strong> const_alloc_layout</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/const-arguments-as-str.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.58.</strong> const_arguments_as_str</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/const-array-from-ref.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.59.</strong> const_array_from_ref</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/const-array-into-iter-constructors.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.60.</strong> const_array_into_iter_constructors</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/const-atomic-from-ptr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.61.</strong> const_atomic_from_ptr</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/const-bigint-helper-methods.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.62.</strong> const_bigint_helper_methods</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/const-binary-heap-new-in.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.63.</strong> const_binary_heap_new_in</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/const-black-box.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.64.</strong> const_black_box</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/const-box.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.65.</strong> const_box</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/const-btree-len.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.66.</strong> const_btree_len</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/const-cell-into-inner.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.67.</strong> const_cell_into_inner</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/const-char-from-u32-unchecked.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.68.</strong> const_char_from_u32_unchecked</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/const-cmp.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.69.</strong> const_cmp</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/const-collections-with-hasher.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.70.</strong> const_collections_with_hasher</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/const-cow-is-borrowed.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.71.</strong> const_cow_is_borrowed</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/const-cstr-from-ptr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.72.</strong> const_cstr_from_ptr</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/const-eval-select.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.73.</strong> const_eval_select</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/const-exact-div.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.74.</strong> const_exact_div</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/const-float-bits-conv.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.75.</strong> const_float_bits_conv</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/const-float-classify.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.76.</strong> const_float_classify</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/const-fmt-arguments-new.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.77.</strong> const_fmt_arguments_new</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/const-format-args.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.78.</strong> const_format_args</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/const-hash.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.79.</strong> const_hash</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/const-heap.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.80.</strong> const_heap</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/const-hint-assert-unchecked.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.81.</strong> const_hint_assert_unchecked</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/const-index-range-slice-index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.82.</strong> const_index_range_slice_index</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/const-int-from-str.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.83.</strong> const_int_from_str</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/const-intoiterator-identity.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.84.</strong> const_intoiterator_identity</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/const-intrinsic-compare-bytes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.85.</strong> const_intrinsic_compare_bytes</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/const-intrinsic-copy.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.86.</strong> const_intrinsic_copy</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/const-intrinsic-forget.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.87.</strong> const_intrinsic_forget</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/const-intrinsic-raw-eq.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.88.</strong> const_intrinsic_raw_eq</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/const-ip.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.89.</strong> const_ip</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/const-ipv4.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.90.</strong> const_ipv4</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/const-ipv6.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.91.</strong> const_ipv6</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/const-likely.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.92.</strong> const_likely</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/const-maybe-uninit-array-assume-init.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.93.</strong> const_maybe_uninit_array_assume_init</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/const-maybe-uninit-as-mut-ptr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.94.</strong> const_maybe_uninit_as_mut_ptr</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/const-maybe-uninit-assume-init.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.95.</strong> const_maybe_uninit_assume_init</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/const-maybe-uninit-uninit-array.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.96.</strong> const_maybe_uninit_uninit_array</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/const-maybe-uninit-write.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.97.</strong> const_maybe_uninit_write</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/const-nonnull-new.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.98.</strong> const_nonnull_new</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/const-num-midpoint.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.99.</strong> const_num_midpoint</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/const-ops.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.100.</strong> const_ops</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/const-option.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.101.</strong> const_option</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/const-option-ext.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.102.</strong> const_option_ext</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/const-pin.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.103.</strong> const_pin</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/const-pointer-is-aligned.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.104.</strong> const_pointer_is_aligned</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/const-pref-align-of.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.105.</strong> const_pref_align_of</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/const-ptr-as-ref.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.106.</strong> const_ptr_as_ref</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/const-ptr-is-null.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.107.</strong> const_ptr_is_null</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/const-ptr-sub-ptr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.108.</strong> const_ptr_sub_ptr</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/const-ptr-write.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.109.</strong> const_ptr_write</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/const-range-bounds.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.110.</strong> const_range_bounds</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/const-raw-ptr-comparison.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.111.</strong> const_raw_ptr_comparison</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/const-replace.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.112.</strong> const_replace</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/const-result.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.113.</strong> const_result</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/const-size-of-val.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.114.</strong> const_size_of_val</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/const-size-of-val-raw.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.115.</strong> const_size_of_val_raw</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/const-slice-first-last.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.116.</strong> const_slice_first_last</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/const-slice-first-last-chunk.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.117.</strong> const_slice_first_last_chunk</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/const-slice-flatten.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.118.</strong> const_slice_flatten</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/const-slice-from-mut-ptr-range.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.119.</strong> const_slice_from_mut_ptr_range</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/const-slice-from-ptr-range.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.120.</strong> const_slice_from_ptr_range</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/const-slice-from-raw-parts-mut.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.121.</strong> const_slice_from_raw_parts_mut</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/const-slice-from-ref.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.122.</strong> const_slice_from_ref</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/const-slice-index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.123.</strong> const_slice_index</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/const-slice-split-at-mut.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.124.</strong> const_slice_split_at_mut</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/const-str-from-raw-parts-mut.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.125.</strong> const_str_from_raw_parts_mut</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/const-str-from-utf8.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.126.</strong> const_str_from_utf8</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/const-str-from-utf8-unchecked-mut.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.127.</strong> const_str_from_utf8_unchecked_mut</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/const-strict-overflow-ops.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.128.</strong> const_strict_overflow_ops</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/const-swap.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.129.</strong> const_swap</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/const-three-way-compare.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.130.</strong> const_three_way_compare</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/const-type-id.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.131.</strong> const_type_id</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/const-type-name.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.132.</strong> const_type_name</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/const-typed-swap.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.133.</strong> const_typed_swap</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/const-ub-checks.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.134.</strong> const_ub_checks</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/const-unicode-case-lookup.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.135.</strong> const_unicode_case_lookup</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/const-unsafecell-get-mut.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.136.</strong> const_unsafecell_get_mut</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/const-waker.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.137.</strong> const_waker</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/container-error-extra.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.138.</strong> container_error_extra</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/context-ext.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.139.</strong> context_ext</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/control-flow-enum.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.140.</strong> control_flow_enum</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/convert-float-to-int.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.141.</strong> convert_float_to_int</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/core-intrinsics.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.142.</strong> core_intrinsics</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/core-io-borrowed-buf.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.143.</strong> core_io_borrowed_buf</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/core-pattern-type.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.144.</strong> core_pattern_type</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/core-pattern-types.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.145.</strong> core_pattern_types</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/core-private-bignum.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.146.</strong> core_private_bignum</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/core-private-diy-float.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.147.</strong> core_private_diy_float</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/coroutine-trait.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.148.</strong> coroutine_trait</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/cow-is-borrowed.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.149.</strong> cow_is_borrowed</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/cstr-bytes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.150.</strong> cstr_bytes</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/cursor-remaining.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.151.</strong> cursor_remaining</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/deadline-api.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.152.</strong> deadline_api</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/debug-closure-helpers.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.153.</strong> debug_closure_helpers</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/dec2flt.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.154.</strong> dec2flt</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/deref-pure-trait.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.155.</strong> deref_pure_trait</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/derive-clone-copy.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.156.</strong> derive_clone_copy</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/derive-const.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.157.</strong> derive_const</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/derive-eq.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.158.</strong> derive_eq</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/dir-entry-ext2.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.159.</strong> dir_entry_ext2</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/discriminant-kind.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.160.</strong> discriminant_kind</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/dispatch-from-dyn.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.161.</strong> dispatch_from_dyn</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/downcast-unchecked.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.162.</strong> downcast_unchecked</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/drain-keep-rest.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.163.</strong> drain_keep_rest</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/duration-abs-diff.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.164.</strong> duration_abs_diff</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/duration-constants.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.165.</strong> duration_constants</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/duration-constructors.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.166.</strong> duration_constructors</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/duration-consts-float.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.167.</strong> duration_consts_float</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/duration-millis-float.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.168.</strong> duration_millis_float</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/duration-units.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.169.</strong> duration_units</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/edition-panic.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.170.</strong> edition_panic</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/entry-insert.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.171.</strong> entry_insert</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/error-generic-member-access.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.172.</strong> error_generic_member_access</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/error-in-core.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.173.</strong> error_in_core</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/error-iter.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.174.</strong> error_iter</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/error-reporter.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.175.</strong> error_reporter</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/error-type-id.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.176.</strong> error_type_id</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/exact-size-is-empty.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.177.</strong> exact_size_is_empty</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/exclusive-wrapper.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.178.</strong> exclusive_wrapper</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/exit-status-error.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.179.</strong> exit_status_error</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/exitcode-exit-method.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.180.</strong> exitcode_exit_method</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/exposed-provenance.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.181.</strong> exposed_provenance</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/extend-one.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.182.</strong> extend_one</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/extract-if.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.183.</strong> extract_if</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/fd.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.184.</strong> fd</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/fd-read.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.185.</strong> fd_read</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/float-gamma.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.186.</strong> float_gamma</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/float-minimum-maximum.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.187.</strong> float_minimum_maximum</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/float-next-up-down.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.188.</strong> float_next_up_down</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/flt2dec.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.189.</strong> flt2dec</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/fmt-helpers-for-derive.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.190.</strong> fmt_helpers_for_derive</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/fmt-internals.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.191.</strong> fmt_internals</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/fn-ptr-trait.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.192.</strong> fn_ptr_trait</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/fn-traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.193.</strong> fn_traits</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/forget-unsized.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.194.</strong> forget_unsized</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/format-args-nl.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.195.</strong> format_args_nl</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/freeze.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.196.</strong> freeze</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/fs-try-exists.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.197.</strong> fs_try_exists</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/future-join.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.198.</strong> future_join</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/gen-future.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.199.</strong> gen_future</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/generic-assert-internals.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.200.</strong> generic_assert_internals</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/get-many-mut.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.201.</strong> get_many_mut</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/get-mut-unchecked.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.202.</strong> get_mut_unchecked</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/hash-extract-if.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.203.</strong> hash_extract_if</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/hash-raw-entry.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.204.</strong> hash_raw_entry</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/hash-set-entry.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.205.</strong> hash_set_entry</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/hasher-prefixfree-extras.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.206.</strong> hasher_prefixfree_extras</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/hashmap-internals.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.207.</strong> hashmap_internals</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/hint-assert-unchecked.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.208.</strong> hint_assert_unchecked</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/hint-must-use.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.209.</strong> hint_must_use</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/inplace-iteration.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.210.</strong> inplace_iteration</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/int-roundings.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.211.</strong> int_roundings</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/integer-atomics.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.212.</strong> integer_atomics</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/integer-sign-cast.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.213.</strong> integer_sign_cast</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/internal-impls-macro.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.214.</strong> internal_impls_macro</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/internal-output-capture.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.215.</strong> internal_output_capture</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/io-error-more.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.216.</strong> io_error_more</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/io-error-uncategorized.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.217.</strong> io_error_uncategorized</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/io-slice-advance.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.218.</strong> io_slice_advance</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/ip.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.219.</strong> ip</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/is-ascii-octdigit.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.220.</strong> is_ascii_octdigit</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/is-riscv-feature-detected.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.221.</strong> is_riscv_feature_detected</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/is-sorted.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.222.</strong> is_sorted</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/is-val-statically-known.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.223.</strong> is_val_statically_known</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/isqrt.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.224.</strong> isqrt</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/iter-advance-by.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.225.</strong> iter_advance_by</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/iter-array-chunks.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.226.</strong> iter_array_chunks</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/iter-chain.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.227.</strong> iter_chain</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/iter-collect-into.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.228.</strong> iter_collect_into</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/iter-from-coroutine.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.229.</strong> iter_from_coroutine</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/iter-intersperse.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.230.</strong> iter_intersperse</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/iter-is-partitioned.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.231.</strong> iter_is_partitioned</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/iter-map-windows.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.232.</strong> iter_map_windows</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/iter-next-chunk.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.233.</strong> iter_next_chunk</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/iter-order-by.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.234.</strong> iter_order_by</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/iter-partition-in-place.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.235.</strong> iter_partition_in_place</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/iter-repeat-n.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.236.</strong> iter_repeat_n</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/iterator-try-collect.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.237.</strong> iterator_try_collect</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/iterator-try-reduce.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.238.</strong> iterator_try_reduce</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/junction-point.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.239.</strong> junction_point</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/layout-for-ptr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.240.</strong> layout_for_ptr</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/lazy-cell-consume.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.241.</strong> lazy_cell_consume</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/liballoc-internals.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.242.</strong> liballoc_internals</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/libstd-sys-internals.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.243.</strong> libstd_sys_internals</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/linked-list-cursors.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.244.</strong> linked_list_cursors</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/linked-list-remove.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.245.</strong> linked_list_remove</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/linked-list-retain.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.246.</strong> linked_list_retain</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/linux-pidfd.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.247.</strong> linux_pidfd</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/local-waker.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.248.</strong> local_waker</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/log-syntax.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.249.</strong> log_syntax</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/map-entry-replace.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.250.</strong> map_entry_replace</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/map-many-mut.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.251.</strong> map_many_mut</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/map-try-insert.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.252.</strong> map_try_insert</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/mapped-lock-guards.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.253.</strong> mapped_lock_guards</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/maybe-uninit-array-assume-init.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.254.</strong> maybe_uninit_array_assume_init</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/maybe-uninit-as-bytes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.255.</strong> maybe_uninit_as_bytes</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/maybe-uninit-fill.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.256.</strong> maybe_uninit_fill</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/maybe-uninit-slice.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.257.</strong> maybe_uninit_slice</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/maybe-uninit-uninit-array.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.258.</strong> maybe_uninit_uninit_array</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/maybe-uninit-uninit-array-transpose.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.259.</strong> maybe_uninit_uninit_array_transpose</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/maybe-uninit-write-slice.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.260.</strong> maybe_uninit_write_slice</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/mem-copy-fn.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.261.</strong> mem_copy_fn</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/more-float-constants.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.262.</strong> more_float_constants</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/new-uninit.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.263.</strong> new_uninit</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/non-zero-count-ones.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.264.</strong> non_zero_count_ones</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/nonzero-from-mut.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.265.</strong> nonzero_from_mut</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/nonzero-internals.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.266.</strong> nonzero_internals</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/nonzero-ops.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.267.</strong> nonzero_ops</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/noop-waker.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.268.</strong> noop_waker</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/num-midpoint.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.269.</strong> num_midpoint</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/numfmt.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.270.</strong> numfmt</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/once-cell-get-mut.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.271.</strong> once_cell_get_mut</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/once-cell-try.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.272.</strong> once_cell_try</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/once-cell-try-insert.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.273.</strong> once_cell_try_insert</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/one-sided-range.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.274.</strong> one_sided_range</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/option-get-or-insert-default.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.275.</strong> option_get_or_insert_default</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/option-zip.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.276.</strong> option_zip</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/os-str-display.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.277.</strong> os_str_display</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/os-str-slice.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.278.</strong> os_str_slice</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/panic-abort.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.279.</strong> panic_abort</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/panic-always-abort.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.280.</strong> panic_always_abort</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/panic-backtrace-config.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.281.</strong> panic_backtrace_config</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/panic-can-unwind.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.282.</strong> panic_can_unwind</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/panic-info-message.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.283.</strong> panic_info_message</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/panic-internals.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.284.</strong> panic_internals</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/panic-unwind.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.285.</strong> panic_unwind</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/panic-update-hook.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.286.</strong> panic_update_hook</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/path-file-prefix.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.287.</strong> path_file_prefix</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/pattern.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.288.</strong> pattern</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/peer-credentials-unix-socket.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.289.</strong> peer_credentials_unix_socket</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/pin-deref-mut.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.290.</strong> pin_deref_mut</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/pointer-is-aligned-to.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.291.</strong> pointer_is_aligned_to</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/pointer-like-trait.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.292.</strong> pointer_like_trait</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/portable-simd.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.293.</strong> portable_simd</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/prelude-2024.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.294.</strong> prelude_2024</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/print-internals.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.295.</strong> print_internals</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/proc-macro-def-site.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.296.</strong> proc_macro_def_site</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/proc-macro-diagnostic.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.297.</strong> proc_macro_diagnostic</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/proc-macro-expand.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.298.</strong> proc_macro_expand</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/proc-macro-internals.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.299.</strong> proc_macro_internals</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/proc-macro-quote.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.300.</strong> proc_macro_quote</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/proc-macro-span.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.301.</strong> proc_macro_span</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/proc-macro-tracked-env.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.302.</strong> proc_macro_tracked_env</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/process-exitcode-internals.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.303.</strong> process_exitcode_internals</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/process-internals.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.304.</strong> process_internals</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/profiler-runtime-lib.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.305.</strong> profiler_runtime_lib</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/ptr-alignment-type.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.306.</strong> ptr_alignment_type</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/ptr-as-ref-unchecked.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.307.</strong> ptr_as_ref_unchecked</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/ptr-as-uninit.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.308.</strong> ptr_as_uninit</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/ptr-internals.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.309.</strong> ptr_internals</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/ptr-mask.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.310.</strong> ptr_mask</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/ptr-metadata.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.311.</strong> ptr_metadata</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/ptr-sub-ptr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.312.</strong> ptr_sub_ptr</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/ptr-to-from-bits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.313.</strong> ptr_to_from_bits</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/pub-crate-should-not-need-unstable-attr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.314.</strong> pub_crate_should_not_need_unstable_attr</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/raw-os-error-ty.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.315.</strong> raw_os_error_ty</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/raw-slice-split.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.316.</strong> raw_slice_split</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/raw-vec-internals.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.317.</strong> raw_vec_internals</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/read-buf.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.318.</strong> read_buf</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/ready-into-inner.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.319.</strong> ready_into_inner</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/receiver-trait.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.320.</strong> receiver_trait</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/reentrant-lock.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.321.</strong> reentrant_lock</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/restricted-std.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.322.</strong> restricted_std</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/result-flattening.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.323.</strong> result_flattening</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/round-char-boundary.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.324.</strong> round_char_boundary</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/rt.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.325.</strong> rt</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/rustc-encodable-decodable.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.326.</strong> rustc_encodable_decodable</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/sealed.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.327.</strong> sealed</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/seek-stream-len.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.328.</strong> seek_stream_len</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/set-ptr-value.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.329.</strong> set_ptr_value</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/setgroups.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.330.</strong> setgroups</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/sgx-platform.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.331.</strong> sgx_platform</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/sized-type-properties.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.332.</strong> sized_type_properties</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/slice-as-chunks.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.333.</strong> slice_as_chunks</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/slice-concat-ext.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.334.</strong> slice_concat_ext</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/slice-concat-trait.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.335.</strong> slice_concat_trait</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/slice-from-ptr-range.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.336.</strong> slice_from_ptr_range</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/slice-index-methods.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.337.</strong> slice_index_methods</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/slice-internals.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.338.</strong> slice_internals</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/slice-iter-mut-as-mut-slice.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.339.</strong> slice_iter_mut_as_mut_slice</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/slice-partition-dedup.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.340.</strong> slice_partition_dedup</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/slice-pattern.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.341.</strong> slice_pattern</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/slice-ptr-get.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.342.</strong> slice_ptr_get</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/slice-range.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.343.</strong> slice_range</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/slice-split-once.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.344.</strong> slice_split_once</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/slice-swap-unchecked.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.345.</strong> slice_swap_unchecked</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/slice-take.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.346.</strong> slice_take</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/solid-ext.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.347.</strong> solid_ext</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/sort-floats.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.348.</strong> sort_floats</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/sort-internals.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.349.</strong> sort_internals</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/split-array.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.350.</strong> split_array</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/split-as-slice.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.351.</strong> split_as_slice</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/std-internals.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.352.</strong> std_internals</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/stdarch-arm-feature-detection.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.353.</strong> stdarch_arm_feature_detection</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/stdarch-mips-feature-detection.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.354.</strong> stdarch_mips_feature_detection</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/stdarch-powerpc-feature-detection.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.355.</strong> stdarch_powerpc_feature_detection</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/stdio-makes-pipe.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.356.</strong> stdio_makes_pipe</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/step-trait.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.357.</strong> step_trait</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/str-from-raw-parts.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.358.</strong> str_from_raw_parts</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/str-from-utf16-endian.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.359.</strong> str_from_utf16_endian</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/str-internals.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.360.</strong> str_internals</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/str-lines-remainder.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.361.</strong> str_lines_remainder</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/str-split-inclusive-remainder.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.362.</strong> str_split_inclusive_remainder</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/str-split-remainder.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.363.</strong> str_split_remainder</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/str-split-whitespace-remainder.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.364.</strong> str_split_whitespace_remainder</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/strict-overflow-ops.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.365.</strong> strict_overflow_ops</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/strict-provenance-atomic-ptr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.366.</strong> strict_provenance_atomic_ptr</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/string-extend-from-within.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.367.</strong> string_extend_from_within</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/string-remove-matches.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.368.</strong> string_remove_matches</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/sync-unsafe-cell.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.369.</strong> sync_unsafe_cell</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/tcp-deferaccept.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.370.</strong> tcp_deferaccept</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/tcp-linger.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.371.</strong> tcp_linger</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/tcp-quickack.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.372.</strong> tcp_quickack</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/tcplistener-into-incoming.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.373.</strong> tcplistener_into_incoming</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/test.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.374.</strong> test</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/thin-box.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.375.</strong> thin_box</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/thread-id-value.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.376.</strong> thread_id_value</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/thread-local-internals.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.377.</strong> thread_local_internals</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/thread-sleep-until.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.378.</strong> thread_sleep_until</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/thread-spawn-unchecked.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.379.</strong> thread_spawn_unchecked</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/trace-macros.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.380.</strong> trace_macros</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/track-path.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.381.</strong> track_path</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/transmutability.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.382.</strong> transmutability</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/trusted-fused.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.383.</strong> trusted_fused</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/trusted-len.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.384.</strong> trusted_len</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/trusted-len-next-unchecked.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.385.</strong> trusted_len_next_unchecked</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/trusted-random-access.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.386.</strong> trusted_random_access</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/trusted-step.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.387.</strong> trusted_step</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/try-find.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.388.</strong> try_find</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/try-reserve-kind.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.389.</strong> try_reserve_kind</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/try-trait-v2.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.390.</strong> try_trait_v2</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/try-trait-v2-residual.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.391.</strong> try_trait_v2_residual</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/try-trait-v2-yeet.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.392.</strong> try_trait_v2_yeet</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/try-with-capacity.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.393.</strong> try_with_capacity</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/tuple-trait.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.394.</strong> tuple_trait</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/ub-checks.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.395.</strong> ub_checks</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/uefi-std.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.396.</strong> uefi_std</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/unchecked-neg.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.397.</strong> unchecked_neg</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/unchecked-shifts.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.398.</strong> unchecked_shifts</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/unicode-internals.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.399.</strong> unicode_internals</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/unique-rc-arc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.400.</strong> unique_rc_arc</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/unix-file-vectored-at.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.401.</strong> unix_file_vectored_at</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/unix-set-mark.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.402.</strong> unix_set_mark</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/unix-socket-ancillary-data.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.403.</strong> unix_socket_ancillary_data</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/unix-socket-peek.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.404.</strong> unix_socket_peek</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/unsafe-cell-from-mut.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.405.</strong> unsafe_cell_from_mut</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/unsafe-pin-internals.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.406.</strong> unsafe_pin_internals</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/unsize.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.407.</strong> unsize</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/unwrap-infallible.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.408.</strong> unwrap_infallible</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/update-panic-count.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.409.</strong> update_panic_count</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/utf16-extra.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.410.</strong> utf16_extra</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/utf16-extra-const.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.411.</strong> utf16_extra_const</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/variant-count.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.412.</strong> variant_count</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/vec-into-raw-parts.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.413.</strong> vec_into_raw_parts</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/vec-pop-if.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.414.</strong> vec_pop_if</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/vec-push-within-capacity.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.415.</strong> vec_push_within_capacity</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/vec-split-at-spare.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.416.</strong> vec_split_at_spare</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/waker-getters.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.417.</strong> waker_getters</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/wasi-ext.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.418.</strong> wasi_ext</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/windows-by-handle.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.419.</strong> windows_by_handle</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/windows-c.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.420.</strong> windows_c</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/windows-handle.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.421.</strong> windows_handle</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/windows-net.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.422.</strong> windows_net</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/windows-process-exit-code-from.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.423.</strong> windows_process_exit_code_from</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/windows-process-extensions-async-pipes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.424.</strong> windows_process_extensions_async_pipes</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/windows-process-extensions-force-quotes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.425.</strong> windows_process_extensions_force_quotes</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/windows-process-extensions-main-thread-handle.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.426.</strong> windows_process_extensions_main_thread_handle</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/windows-process-extensions-raw-attribute.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.427.</strong> windows_process_extensions_raw_attribute</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/windows-stdio.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.428.</strong> windows_stdio</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/wrapping-int-impl.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.429.</strong> wrapping_int_impl</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/wrapping-next-power-of-two.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.430.</strong> wrapping_next_power_of_two</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/write-all-vectored.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.431.</strong> write_all_vectored</a></li><li class=\"chapter-item expanded \"><a href=\"library-features/yeet-desugar-details.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.432.</strong> yeet_desugar_details</a></li></ol></li></ol>\n            </div>\n            <div id=\"sidebar-resize-handle\" class=\"sidebar-resize-handle\">\n                <div class=\"sidebar-resize-indicator\"></div>\n            </div>\n        </nav>\n\n        <!-- Track and set sidebar scroll position -->\n        <script>\n            var sidebarScrollbox = document.querySelector('#sidebar .sidebar-scrollbox');\n            sidebarScrollbox.addEventListener('click', function(e) {\n                if (e.target.tagName === 'A') {\n                    sessionStorage.setItem('sidebar-scroll', sidebarScrollbox.scrollTop);\n                }\n            }, { passive: true });\n            var sidebarScrollTop = sessionStorage.getItem('sidebar-scroll');\n            sessionStorage.removeItem('sidebar-scroll');\n            if (sidebarScrollTop) {\n                // preserve sidebar scroll position when navigating via links within sidebar\n                sidebarScrollbox.scrollTop = sidebarScrollTop;\n            } else {\n                // scroll sidebar to current active section when navigating via \"next/previous chapter\" buttons\n                var activeSection = document.querySelector('#sidebar .active');\n                if (activeSection) {\n                    activeSection.scrollIntoView({ block: 'center' });\n                }\n            }\n        </script>\n\n        <div id=\"page-wrapper\" class=\"page-wrapper\">\n\n            <div class=\"page\">\n                                <div id=\"menu-bar-hover-placeholder\"></div>\n                <div id=\"menu-bar\" class=\"menu-bar\" style=\"top: 0px;\">\n                    <div class=\"left-buttons\">\n                        <label id=\"sidebar-toggle\" class=\"icon-button\" for=\"sidebar-toggle-anchor\" title=\"Toggle Table of Contents\" aria-label=\"Toggle Table of Contents\" aria-controls=\"sidebar\" aria-expanded=\"true\">\n                            <i class=\"fa fa-bars\"></i>\n                        </label>\n                        <button id=\"theme-toggle\" class=\"icon-button\" type=\"button\" title=\"Change theme\" aria-label=\"Change theme\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-controls=\"theme-list\">\n                            <i class=\"fa fa-paint-brush\"></i>\n                        </button>\n                        <ul id=\"theme-list\" class=\"theme-popup\" aria-label=\"Themes\" role=\"menu\">\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme theme-selected\" id=\"light\">Light</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"rust\">Rust</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"coal\">Coal</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"navy\">Navy</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"ayu\">Ayu</button></li>\n                        </ul>\n                        <button id=\"search-toggle\" class=\"icon-button\" type=\"button\" title=\"Search. (Shortkey: s)\" aria-label=\"Toggle Searchbar\" aria-expanded=\"false\" aria-keyshortcuts=\"S\" aria-controls=\"searchbar\">\n                            <i class=\"fa fa-search\"></i>\n                        </button>\n                    </div>\n\n                    <h1 class=\"menu-title\">The Rust Unstable Book</h1>\n\n                    <div class=\"right-buttons\">\n                        <a href=\"print.html\" title=\"Print this book\" aria-label=\"Print this book\">\n                            <i id=\"print-button\" class=\"fa fa-print\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/rust/tree/master/src/doc/unstable-book\" title=\"Git repository\" aria-label=\"Git repository\">\n                            <i id=\"git-repository-button\" class=\"fa fa-github\"></i>\n                        </a>\n\n                    </div>\n                </div>\n\n                <div id=\"search-wrapper\" class=\"hidden\">\n                    <form id=\"searchbar-outer\" class=\"searchbar-outer\">\n                        <input type=\"search\" id=\"searchbar\" name=\"searchbar\" placeholder=\"Search this book ...\" aria-controls=\"searchresults-outer\" aria-describedby=\"searchresults-header\">\n                    </form>\n                    <div id=\"searchresults-outer\" class=\"searchresults-outer hidden\">\n                        <div id=\"searchresults-header\" class=\"searchresults-header\"></div>\n                        <ul id=\"searchresults\">\n                        </ul>\n                    </div>\n                </div>\n\n                <!-- Apply ARIA attributes after the sidebar and the sidebar toggle button are added to the DOM -->\n                <script>\n                    document.getElementById('sidebar-toggle').setAttribute('aria-expanded', sidebar === 'visible');\n                    document.getElementById('sidebar').setAttribute('aria-hidden', sidebar !== 'visible');\n                    Array.from(document.querySelectorAll('#sidebar a')).forEach(function(link) {\n                        link.setAttribute('tabIndex', sidebar === 'visible' ? 0 : -1);\n                    });\n                </script>\n\n                <div id=\"content\" class=\"content\">\n                    <main>\n                        <h1 id=\"the-unstable-book\"><a class=\"header\" href=\"#the-unstable-book\">The Unstable Book</a></h1>\n<p>Welcome to the Unstable Book! This book consists of a number of chapters,\neach one organized by a \"feature flag.\" That is, when using an unstable\nfeature of Rust, you must use a flag, like this:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-meta\">#![feature(coroutines, coroutine_trait, stmt_expr_attributes)]</span>\n\n<span class=\"hljs-keyword\">use</span> std::ops::{Coroutine, CoroutineState};\n<span class=\"hljs-keyword\">use</span> std::pin::Pin;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> coroutine = <span class=\"hljs-meta\">#[coroutine]</span> || {\n        <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"foo\"</span>\n    };\n\n    <span class=\"hljs-keyword\">match</span> Pin::new(&amp;<span class=\"hljs-keyword\">mut</span> coroutine).resume(()) {\n        CoroutineState::Yielded(<span class=\"hljs-number\">1</span>) =&gt; {}\n        _ =&gt; <span class=\"hljs-built_in\">panic!</span>(<span class=\"hljs-string\">\"unexpected value from resume\"</span>),\n    }\n    <span class=\"hljs-keyword\">match</span> Pin::new(&amp;<span class=\"hljs-keyword\">mut</span> coroutine).resume(()) {\n        CoroutineState::Complete(<span class=\"hljs-string\">\"foo\"</span>) =&gt; {}\n        _ =&gt; <span class=\"hljs-built_in\">panic!</span>(<span class=\"hljs-string\">\"unexpected value from resume\"</span>),\n    }\n}</code></pre></pre>\n<p>The <code class=\"hljs\">coroutines</code> feature <a href=\"language-features/coroutines.html\">has a chapter</a> describing how to use it.</p>\n<p>Because this documentation relates to unstable features, we make no guarantees\nthat what is contained here is accurate or up to date. It's developed on a\nbest-effort basis. Each page will have a link to its tracking issue with the\nlatest developments; you might want to check those as well.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"compiler-flags\"><a class=\"header\" href=\"#compiler-flags\">Compiler flags</a></h1>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"branch-protection\"><a class=\"header\" href=\"#branch-protection\"><code>branch-protection</code></a></h1>\n<p>This option lets you enable branch authentication instructions on AArch64.\nThis option is only accepted when targeting AArch64 architectures.\nIt takes some combination of the following values, separated by a <code class=\"hljs\">,</code>.</p>\n<ul>\n<li><code class=\"hljs\">pac-ret</code> - Enable pointer authentication for non-leaf functions.</li>\n<li><code class=\"hljs\">leaf</code> - Enable pointer authentication for all functions, including leaf functions.</li>\n<li><code class=\"hljs\">b-key</code> - Sign return addresses with key B, instead of the default key A.</li>\n<li><code class=\"hljs\">bti</code> - Enable branch target identification.</li>\n</ul>\n<p><code class=\"hljs\">leaf</code> and <code class=\"hljs\">b-key</code> are only valid if <code class=\"hljs\">pac-ret</code> was previously specified.\nFor example, <code class=\"hljs\">-Z branch-protection=bti,pac-ret,leaf</code> is valid, but\n<code class=\"hljs\">-Z branch-protection=bti,leaf,pac-ret</code> is not.</p>\n<p>Rust's standard library does not ship with BTI or pointer authentication enabled by default.\nIn Cargo projects the standard library can be recompiled with pointer authentication using the nightly\n<a href=\"compiler-flags/../../cargo/reference/unstable.html#build-std\">build-std</a> feature.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"cf-protection\"><a class=\"header\" href=\"#cf-protection\"><code>cf-protection</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/93754\">#93754</a>.</p>\n<hr>\n<p>This option enables control-flow enforcement technology (CET) on x86; a more detailed description of\nCET is available <a href=\"https://www.intel.com/content/www/us/en/develop/articles/technical-look-control-flow-enforcement-technology.html\">here</a>. Similar to <code class=\"hljs\">clang</code>, this flag takes one of the following values:</p>\n<ul>\n<li><code class=\"hljs\">none</code> - Disable CET completely (this is the default).</li>\n<li><code class=\"hljs\">branch</code> - Enable indirect branch tracking (<code class=\"hljs\">IBT</code>).</li>\n<li><code class=\"hljs\">return</code> - Enable shadow stack (<code class=\"hljs\">SHSTK</code>).</li>\n<li><code class=\"hljs\">full</code> - Enable both <code class=\"hljs\">branch</code> and <code class=\"hljs\">return</code>.</li>\n</ul>\n<p>This flag only applies to the LLVM backend: it sets the <code class=\"hljs\">cf-protection-branch</code> and\n<code class=\"hljs\">cf-protection-return</code> flags on LLVM modules. Note, however, that all compiled modules linked\ntogether must have the flags set for the compiled output to be CET-enabled. Currently, Rust's\nstandard library does not ship with CET enabled by default, so you may need to rebuild all standard\nmodules with a <code class=\"hljs\">cargo</code> command like:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-sh hljs bash\">$ RUSTFLAGS=<span class=\"hljs-string\">\"-Z cf-protection=full\"</span> cargo +nightly build -Z build-std --target x86_64-unknown-linux-gnu\n</code></pre>\n<h3 id=\"detection\"><a class=\"header\" href=\"#detection\">Detection</a></h3>\n<p>An ELF binary is CET-enabled if it has the <code class=\"hljs\">IBT</code> and <code class=\"hljs\">SHSTK</code> tags, e.g.:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-sh hljs bash\">$ readelf -a target/x86_64-unknown-linux-gnu/debug/example | grep feature:\n      Properties: x86 feature: IBT, SHSTK\n</code></pre>\n<h3 id=\"troubleshooting\"><a class=\"header\" href=\"#troubleshooting\">Troubleshooting</a></h3>\n<p>To display modules that are not CET enabled, examine the linker errors available when <code class=\"hljs\">cet-report</code> is enabled:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-sh hljs bash\">$ RUSTC_LOG=rustc_codegen_ssa::back::link=info rustc-custom -v -Z cf-protection=full -C link-arg=<span class=\"hljs-string\">\"-Wl,-z,cet-report=warning\"</span> -o example example.rs\n...\n/usr/bin/ld: /.../build/x86_64-unknown-linux-gnu/stage1/lib/rustlib/x86_64-unknown-linux-gnu/lib/libstd-d73f7266be14cb8b.rlib(std-d73f7266be14cb8b.std.f7443020-cgu.12.rcgu.o): warning: missing IBT and SHSTK properties\n</code></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"codegen-backend\"><a class=\"header\" href=\"#codegen-backend\"><code>codegen-backend</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/77933\">#77933</a>.</p>\n<hr>\n<p>This feature allows you to specify a path to a dynamic library to use as rustc's\ncode generation backend at runtime.</p>\n<p>Set the <code class=\"hljs\">-Zcodegen-backend=&lt;path&gt;</code> compiler flag to specify the location of the\nbackend. The library must be of crate type <code class=\"hljs\">dylib</code> and must contain a function\nnamed <code class=\"hljs\">__rustc_codegen_backend</code> with a signature of <code class=\"hljs\">fn() -&gt; Box&lt;dyn rustc_codegen_ssa::traits::CodegenBackend&gt;</code>.</p>\n<h2 id=\"example\"><a class=\"header\" href=\"#example\">Example</a></h2>\n<p>See also the <a href=\"https://github.com/rust-lang/rust/tree/master/tests/run-make-fulldeps/hotplug_codegen_backend\"><code class=\"hljs\">hotplug_codegen_backend</code></a> test\nfor a full example.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore (partial-example) hljs\"><span class=\"hljs-keyword\">use</span> rustc_codegen_ssa::traits::CodegenBackend;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">MyBackend</span></span>;\n\n<span class=\"hljs-keyword\">impl</span> CodegenBackend <span class=\"hljs-keyword\">for</span> MyBackend {\n   <span class=\"hljs-comment\">// Implement codegen methods</span>\n}\n\n<span class=\"hljs-meta\">#[no_mangle]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">__rustc_codegen_backend</span></span>() -&gt; <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> CodegenBackend&gt; {\n    <span class=\"hljs-built_in\">Box</span>::new(MyBackend)\n}</code></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"unstable-codegen-options\"><a class=\"header\" href=\"#unstable-codegen-options\">Unstable codegen options</a></h1>\n<p>All of these options are passed to <code class=\"hljs\">rustc</code> via the <code class=\"hljs\">-C</code> flag, short for \"codegen\". The flags are\nstable but some of their values are individually unstable, and also require using <code class=\"hljs\">-Z unstable-options</code> to be accepted.</p>\n<h2 id=\"linker-flavor\"><a class=\"header\" href=\"#linker-flavor\">linker-flavor</a></h2>\n<p>In addition to the stable set of linker flavors, the following unstable values also exist:</p>\n<ul>\n<li><code class=\"hljs\">ptx</code>: use <a href=\"https://github.com/denzp/rust-ptx-linker\"><code class=\"hljs\">rust-ptx-linker</code></a>\nfor Nvidia NVPTX GPGPU support.</li>\n<li><code class=\"hljs\">bpf</code>: use <a href=\"https://github.com/alessandrod/bpf-linker\"><code class=\"hljs\">bpf-linker</code></a> for eBPF support.</li>\n<li><code class=\"hljs\">llbc</code>: for linking in llvm bitcode. Install the preview rustup components<code class=\"hljs\">llvm-bitcode-linker</code>\nand <code class=\"hljs\">llvm-tools</code> to use as a self-contained linker by passing\n<code class=\"hljs\">-Zunstable-options -Clink-self-contained=+linker</code> together with <code class=\"hljs\">-Clinker-flavor=llbc</code>.\nCan currently only be used for Nvidia NVPTX targets (<code class=\"hljs\">nvptx64-nvidia-cuda</code>).</li>\n</ul>\n<p>Additionally, a set of more precise linker flavors also exists, for example allowing targets to\ndeclare that they use the LLD linker by default. The following values are currently unstable, and\nthe goal is for them to become stable, and preferred in practice over the existing stable values:</p>\n<ul>\n<li><code class=\"hljs\">gnu</code>: unix-like linker with GNU extensions</li>\n<li><code class=\"hljs\">gnu-lld</code>: <code class=\"hljs\">gnu</code> using LLD</li>\n<li><code class=\"hljs\">gnu-cc</code>: <code class=\"hljs\">gnu</code> using a C/C++ compiler as the linker driver</li>\n<li><code class=\"hljs\">gnu-lld-cc</code>: <code class=\"hljs\">gnu</code> using LLD and a C/C++ compiler as the linker driver</li>\n<li><code class=\"hljs\">darwin</code>: unix-like linker for Apple targets</li>\n<li><code class=\"hljs\">darwin-lld</code>: <code class=\"hljs\">darwin</code> using LLD</li>\n<li><code class=\"hljs\">darwin-cc</code>: <code class=\"hljs\">darwin</code> using a C/C++ compiler as the linker driver</li>\n<li><code class=\"hljs\">darwin-lld-cc</code>: <code class=\"hljs\">darwin</code> using LLD and a C/C++ compiler as the linker driver</li>\n<li><code class=\"hljs\">wasm-lld</code>: unix-like linker for Wasm targets, with LLD</li>\n<li><code class=\"hljs\">wasm-lld-cc</code>: unix-like linker for Wasm targets, with LLD and a C/C++ compiler as the linker\ndriver</li>\n<li><code class=\"hljs\">unix</code>: basic unix-like linker for \"any other Unix\" targets (Solaris/illumos, L4Re, MSP430, etc),\nnot supported with LLD.</li>\n<li><code class=\"hljs\">unix-cc</code>: <code class=\"hljs\">unix</code> using a C/C++ compiler as the linker driver</li>\n<li><code class=\"hljs\">msvc-lld</code>: MSVC-style linker for Windows and UEFI, with LLD</li>\n<li><code class=\"hljs\">em-cc</code>: emscripten compiler frontend, similar to <code class=\"hljs\">wasm-lld-cc</code> with a different interface</li>\n</ul>\n<h2 id=\"link-self-contained\"><a class=\"header\" href=\"#link-self-contained\">link-self-contained</a></h2>\n<p>This flag generally controls whether the linker will use libraries and objects shipped with Rust\ninstead of those in the system. The stable boolean values for this flag are coarse-grained\n(everything or nothing), but there exists a set of unstable values with finer-grained control,\n<code class=\"hljs\">-Clink-self-contained</code> can accept a comma-separated list of components, individually enabled\n(<code class=\"hljs\">+component</code>) or disabled (<code class=\"hljs\">-component</code>):</p>\n<ul>\n<li><code class=\"hljs\">crto</code>: CRT objects (e.g. on <code class=\"hljs\">windows-gnu</code>, <code class=\"hljs\">musl</code>, <code class=\"hljs\">wasi</code> targets)</li>\n<li><code class=\"hljs\">libc</code>: libc static library (e.g. on <code class=\"hljs\">musl</code>, <code class=\"hljs\">wasi</code> targets)</li>\n<li><code class=\"hljs\">unwind</code>: libgcc/libunwind (e.g. on <code class=\"hljs\">windows-gnu</code>, <code class=\"hljs\">fuchsia</code>, <code class=\"hljs\">fortanix</code>, <code class=\"hljs\">gnullvm</code> targets)</li>\n<li><code class=\"hljs\">linker</code>: linker, dlltool, and their necessary libraries (e.g. on <code class=\"hljs\">windows-gnu</code> and for\n<code class=\"hljs\">rust-lld</code>)</li>\n<li><code class=\"hljs\">sanitizers</code>: sanitizer runtime libraries</li>\n<li><code class=\"hljs\">mingw</code>: other MinGW libs and Windows import libs</li>\n</ul>\n<p>Out of the above self-contained linking components, <code class=\"hljs\">linker</code> is the only one currently implemented\n(beyond parsing the CLI options).</p>\n<p>It refers to the LLD linker, built from the same LLVM revision used by rustc (named <code class=\"hljs\">rust-lld</code> to\navoid naming conflicts), that is distributed via <code class=\"hljs\">rustup</code> with the compiler (and is used by default\nfor the wasm targets). One can also opt-in to use it by combining this flag with an appropriate\nlinker flavor: for example, <code class=\"hljs\">-Clinker-flavor=gnu-lld-cc -Clink-self-contained=+linker</code> will use the\ntoolchain's <code class=\"hljs\">rust-lld</code> as the linker.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"control-flow-guard\"><a class=\"header\" href=\"#control-flow-guard\"><code>control-flow-guard</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/68793\">#68793</a>.</p>\n<hr>\n<p>The rustc flag <code class=\"hljs\">-Z control-flow-guard</code> enables the Windows <a href=\"https://docs.microsoft.com/en-us/windows/win32/secbp/control-flow-guard\">Control Flow Guard</a> (CFG) platform security feature.</p>\n<p>CFG is an exploit mitigation designed to enforce control-flow integrity for software running on supported <a href=\"https://docs.microsoft.com/en-us/windows/win32/secbp/control-flow-guard\">Windows platforms (Windows 8.1 onwards)</a>. Specifically, CFG uses runtime checks to validate the target address of every indirect call/jump before allowing the call to complete.</p>\n<p>During compilation, the compiler identifies all indirect calls/jumps and adds CFG checks. It also emits metadata containing the relative addresses of all address-taken functions. At runtime, if the binary is run on a CFG-aware operating system, the loader uses the CFG metadata to generate a bitmap of the address space and marks those addresses that contain valid targets. On each indirect call, the inserted check determines whether the target address is marked in this bitmap. If the target is not valid, the process is terminated.</p>\n<p>In terms of interoperability:</p>\n<ul>\n<li>Code compiled with CFG enabled can be linked with libraries and object files that are not compiled with CFG. In this case, a CFG-aware linker can identify address-taken functions in the non-CFG libraries.</li>\n<li>Libraries compiled with CFG can linked into non-CFG programs. In this case, the CFG runtime checks in the libraries are not used (i.e. the mitigation is completely disabled).</li>\n</ul>\n<p>CFG functionality is completely implemented in the LLVM backend and is supported for X86 (32-bit and 64-bit), ARM, and Aarch64 targets. The rustc flag adds the relevant LLVM module flags to enable the feature. This flag will be ignored for all non-Windows targets.</p>\n<h2 id=\"when-to-use-control-flow-guard\"><a class=\"header\" href=\"#when-to-use-control-flow-guard\">When to use Control Flow Guard</a></h2>\n<p>The primary motivation for enabling CFG in Rust is to enhance security when linking against non-Rust code, especially C/C++ code. To achieve full CFG protection, all indirect calls (including any from Rust code) must have the appropriate CFG checks, as added by this flag. CFG can also improve security for Rust code that uses the <code class=\"hljs\">unsafe</code> keyword.</p>\n<p>Another motivation behind CFG is to harden programs against <a href=\"https://en.wikipedia.org/wiki/Return-oriented_programming\">return-oriented programming (ROP)</a> attacks. CFG disallows an attacker from taking advantage of the program's own instructions while redirecting control flow in unexpected ways.</p>\n<h2 id=\"overhead-of-control-flow-guard\"><a class=\"header\" href=\"#overhead-of-control-flow-guard\">Overhead of Control Flow Guard</a></h2>\n<p>The CFG checks and metadata can potentially increase binary size and runtime overhead. The magnitude of any increase depends on the number and frequency of indirect calls. For example, enabling CFG for the Rust standard library increases binary size by approximately 0.14%. Enabling CFG in the SPEC CPU 2017 Integer Speed benchmark suite (compiled with Clang/LLVM) incurs approximate runtime overheads of between 0% and 8%, with a geometric mean of 2.9%.</p>\n<h2 id=\"testing-control-flow-guard\"><a class=\"header\" href=\"#testing-control-flow-guard\">Testing Control Flow Guard</a></h2>\n<p>The rustc flag <code class=\"hljs\">-Z control-flow-guard=nochecks</code> instructs LLVM to emit the list of valid call targets without inserting runtime checks. This flag should only be used for testing purposes as it does not provide security enforcement.</p>\n<h2 id=\"control-flow-guard-in-libraries\"><a class=\"header\" href=\"#control-flow-guard-in-libraries\">Control Flow Guard in libraries</a></h2>\n<p>It is strongly recommended to also enable CFG checks for all linked libraries, including the standard library.</p>\n<p>To enable CFG in the standard library, use the <a href=\"compiler-flags/../../cargo/reference/unstable.html#build-std\">cargo <code class=\"hljs\">-Z build-std</code> functionality</a> to recompile the standard library with the same configuration options as the main program.</p>\n<p>For example:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-cmd hljs\">rustup toolchain install --force nightly\nrustup component add rust-src\nSET RUSTFLAGS=-Z control-flow-guard\ncargo +nightly build -Z build-std --target x86_64-pc-windows-msvc\n</code></pre>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-PowerShell hljs\">rustup toolchain install --force nightly\nrustup component add rust-src\n$Env:RUSTFLAGS = \"-Z control-flow-guard\"\ncargo +nightly build -Z build-std --target x86_64-pc-windows-msvc\n</code></pre>\n<p>Alternatively, if you are building the standard library from source, you can set <code class=\"hljs\">control-flow-guard = true</code> in the config.toml file.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"coverage-options\"><a class=\"header\" href=\"#coverage-options\"><code>coverage-options</code></a></h1>\n<p>This option controls details of the coverage instrumentation performed by\n<code class=\"hljs\">-C instrument-coverage</code>.</p>\n<p>Multiple options can be passed, separated by commas. Valid options are:</p>\n<ul>\n<li><code class=\"hljs\">block</code>, <code class=\"hljs\">branch</code>, <code class=\"hljs\">condition</code>, <code class=\"hljs\">mcdc</code>:\nSets the level of coverage instrumentation.\nSetting the level will override any previously-specified level.\n<ul>\n<li><code class=\"hljs\">block</code> (default):\nBlocks in the control-flow graph will be instrumented for coverage.</li>\n<li><code class=\"hljs\">branch</code>:\nIn addition to block coverage, also enables branch coverage instrumentation.</li>\n<li><code class=\"hljs\">condition</code>:\nIn addition to branch coverage, also instruments some boolean expressions\nas branches, even if they are not directly used as branch conditions.</li>\n<li><code class=\"hljs\">mcdc</code>:\nIn addition to condition coverage, also enables MC/DC instrumentation.\n(Branch coverage instrumentation may differ in some cases.)</li>\n</ul>\n</li>\n</ul>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"debug-info-for-profiling\"><a class=\"header\" href=\"#debug-info-for-profiling\"><code>debug-info-for-profiling</code></a></h1>\n<hr>\n<h2 id=\"introduction\"><a class=\"header\" href=\"#introduction\">Introduction</a></h2>\n<p>Automatic Feedback Directed Optimization (AFDO) is a method for using sampling\nbased profiles to guide optimizations. This is contrasted with other methods of\nFDO or profile-guided optimization (PGO) which use instrumented profiling.</p>\n<p>Unlike PGO (controlled by the <code class=\"hljs\">rustc</code> flags <code class=\"hljs\">-Cprofile-generate</code> and\n<code class=\"hljs\">-Cprofile-use</code>), a binary being profiled does not perform significantly worse,\nand thus it's possible to profile binaries used in real workflows and not\nnecessary to construct artificial workflows.</p>\n<h2 id=\"use\"><a class=\"header\" href=\"#use\">Use</a></h2>\n<p>In order to use AFDO, the target platform must be Linux running on an <code class=\"hljs\">x86_64</code>\narchitecture with the performance profiler <code class=\"hljs\">perf</code> available. In addition, the\nexternal tool <code class=\"hljs\">create_llvm_prof</code> from <a href=\"https://github.com/google/autofdo\">this repository</a> must be used.</p>\n<p>Given a Rust file <code class=\"hljs\">main.rs</code>, we can produce an optimized binary as follows:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-shell hljs\">rustc -O -Zdebug-info-for-profiling main.rs -o main\nperf record -b ./main\ncreate_llvm_prof --binary=main --out=code.prof\nrustc -O -Zprofile-sample-use=code.prof main.rs -o main2\n</code></pre>\n<p>The <code class=\"hljs\">perf</code> command produces a profile <code class=\"hljs\">perf.data</code>, which is then used by the\n<code class=\"hljs\">create_llvm_prof</code> command to create <code class=\"hljs\">code.prof</code>. This final profile is then\nused by <code class=\"hljs\">rustc</code> to guide optimizations in producing the binary <code class=\"hljs\">main2</code>.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"default-hidden-visibility\"><a class=\"header\" href=\"#default-hidden-visibility\"><code>default-hidden-visibility</code></a></h1>\n<p>The tracking issue for this feature is: https://github.com/rust-lang/compiler-team/issues/656</p>\n<hr>\n<p>This flag can be used to override the target's\n<a href=\"https://doc.rust-lang.org/beta/nightly-rustc/rustc_target/spec/struct.TargetOptions.html#structfield.default_hidden_visibility\"><code class=\"hljs\">default_hidden_visibility</code></a>\nsetting.\nUsing <code class=\"hljs\">-Zdefault_hidden_visibility=yes</code> is roughly equivalent to Clang's\n<a href=\"https://clang.llvm.org/docs/ClangCommandLineReference.html#cmdoption-clang-fvisibility\"><code class=\"hljs\">-fvisibility=hidden</code></a>\ncmdline flag.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"direct_access_external_data\"><a class=\"header\" href=\"#direct_access_external_data\"><code>direct_access_external_data</code></a></h1>\n<p>The tracking issue for this feature is: https://github.com/rust-lang/compiler-team/issues/707</p>\n<hr>\n<p>Option <code class=\"hljs\">-Z direct-access-external-data</code> controls how to access symbols of\nexternal data.</p>\n<p>Supported values for this option are:</p>\n<ul>\n<li><code class=\"hljs\">yes</code> - Don't use GOT indirection to reference external data symbols.</li>\n<li><code class=\"hljs\">no</code> - Use GOT indirection to reference external data symbols.</li>\n</ul>\n<p>If the option is not explicitly specified, different targets have different\ndefault values.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"dump-mono-stats\"><a class=\"header\" href=\"#dump-mono-stats\"><code>dump-mono-stats</code></a></h1>\n<hr>\n<p>The <code class=\"hljs\">-Z dump-mono-stats</code> compiler flag generates a file with a list of the monomorphized items in the current crate.\nIt is useful for investigating compile times.</p>\n<p>It accepts an optional directory where the file will be located. If no directory is specified, the file will be placed in the current directory.</p>\n<p>See also <code class=\"hljs\">-Z dump-mono-stats-format</code> and <code class=\"hljs\">-Z print-mono-items</code>. Unlike <code class=\"hljs\">print-mono-items</code>,\n<code class=\"hljs\">dump-mono-stats</code> aggregates monomorphized items by definition and includes a size estimate of how\nlarge the item is when codegened.</p>\n<p>See <a href=\"https://rustc-dev-guide.rust-lang.org/backend/monomorph.html\">https://rustc-dev-guide.rust-lang.org/backend/monomorph.html</a> for an overview of monomorphized items.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"dump-mono-stats-format\"><a class=\"header\" href=\"#dump-mono-stats-format\"><code>dump-mono-stats-format</code></a></h1>\n<hr>\n<p>The <code class=\"hljs\">-Z dump-mono-stats-format</code> compiler flag controls what file format to use for <code class=\"hljs\">-Z dump-mono-stats</code>.\nThe default is markdown; currently JSON is also supported. JSON can be useful for programmatically manipulating the results (e.g. to find the item that took the longest to compile).</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h2 id=\"dwarf-version\"><a class=\"header\" href=\"#dwarf-version\"><code>dwarf-version</code></a></h2>\n<p>This option controls the version of DWARF that the compiler emits, on platforms\nthat use DWARF to encode debug information. It takes one of the following\nvalues:</p>\n<ul>\n<li><code class=\"hljs\">2</code>: DWARF version 2 (the default on certain platforms, like macOS).</li>\n<li><code class=\"hljs\">4</code>: DWARF version 4 (the default on certain platforms, like Linux).</li>\n<li><code class=\"hljs\">5</code>: DWARF version 5.</li>\n</ul>\n<div style=\"break-before: page; page-break-before: always;\"></div><h2 id=\"dylib-lto\"><a class=\"header\" href=\"#dylib-lto\"><code>dylib-lto</code></a></h2>\n<p>This option enables using LTO for the <code class=\"hljs\">dylib</code> crate type. This is currently only used for compiling\n<code class=\"hljs\">rustc</code> itself (more specifically, the <code class=\"hljs\">librustc_driver</code> dylib).</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"emit-stack-sizes\"><a class=\"header\" href=\"#emit-stack-sizes\"><code>emit-stack-sizes</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/54192\">#54192</a></p>\n<hr>\n<p>The rustc flag <code class=\"hljs\">-Z emit-stack-sizes</code> makes LLVM emit stack size metadata.</p>\n<blockquote>\n<p><strong>NOTE</strong>: This LLVM feature only supports the ELF object format as of LLVM\n8.0. Using this flag with targets that use other object formats (e.g. macOS\nand Windows) will result in it being ignored.</p>\n</blockquote>\n<p>Consider this crate:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">#![crate_type = \"lib\"]\n\nuse std::ptr;\n\npub fn foo() {\n    // this function doesn't use the stack\n}\n\npub fn bar() {\n    let xs = [0u32; 2];\n\n    // force LLVM to allocate `xs` on the stack\n    unsafe { ptr::read_volatile(&amp;xs.as_ptr()); }\n}\n</code></pre>\n<p>Using the <code class=\"hljs\">-Z emit-stack-sizes</code> flag produces extra linker sections in the\noutput <em>object file</em>.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> rustc -C opt-level=3 --emit=obj foo.rs</span>\n<span class=\"hljs-meta\">\n$</span><span class=\"bash\"> size -A foo.o</span>\nfoo.o  :\nsection                                 size   addr\n.text                                      0      0\n.text._ZN3foo3foo17he211d7b4a3a0c16eE      1      0\n.text._ZN3foo3bar17h1acb594305f70c2eE     22      0\n.note.GNU-stack                            0      0\n.eh_frame                                 72      0\nTotal                                     95\n<span class=\"hljs-meta\">\n$</span><span class=\"bash\"> rustc -C opt-level=3 --emit=obj -Z emit-stack-sizes foo.rs</span>\n<span class=\"hljs-meta\">\n$</span><span class=\"bash\"> size -A foo.o</span>\nfoo.o  :\nsection                                 size   addr\n.text                                      0      0\n.text._ZN3foo3foo17he211d7b4a3a0c16eE      1      0\n.stack_sizes                               9      0\n.text._ZN3foo3bar17h1acb594305f70c2eE     22      0\n.stack_sizes                               9      0\n.note.GNU-stack                            0      0\n.eh_frame                                 72      0\nTotal                                    113\n</code></pre>\n<p>As of LLVM 7.0 the data will be written into a section named <code class=\"hljs\">.stack_sizes</code> and\nthe format is \"an array of pairs of function symbol values (pointer size) and\nstack sizes (unsigned LEB128)\".</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> objdump -d foo.o</span>\n\nfoo.o:     file format elf64-x86-64\n\nDisassembly of section .text._ZN3foo3foo17he211d7b4a3a0c16eE:\n\n0000000000000000 &lt;_ZN3foo3foo17he211d7b4a3a0c16eE&gt;:\n   0:   c3                      retq\n\nDisassembly of section .text._ZN3foo3bar17h1acb594305f70c2eE:\n\n0000000000000000 &lt;_ZN3foo3bar17h1acb594305f70c2eE&gt;:\n   0:   48 83 ec 10             sub    $0x10,%rsp\n   4:   48 8d 44 24 08          lea    0x8(%rsp),%rax\n   9:   48 89 04 24             mov    %rax,(%rsp)\n   d:   48 8b 04 24             mov    (%rsp),%rax\n  11:   48 83 c4 10             add    $0x10,%rsp\n  15:   c3                      retq\n<span class=\"hljs-meta\">\n$</span><span class=\"bash\"> objdump -s -j .stack_sizes foo.o</span>\n\nfoo.o:     file format elf64-x86-64\n\nContents of section .stack_sizes:\n 0000 00000000 00000000 00                 .........\nContents of section .stack_sizes:\n 0000 00000000 00000000 10                 .........\n</code></pre>\n<p>It's important to note that linkers will discard this linker section by default.\nTo preserve the section you can use a linker script like the one shown below.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">/* file: keep-stack-sizes.x */\nSECTIONS\n{\n  /* `INFO` makes the section not allocatable so it won't be loaded into memory */\n  .stack_sizes (INFO) :\n  {\n    KEEP(*(.stack_sizes));\n  }\n}\n</code></pre>\n<p>The linker script must be passed to the linker using a rustc flag like <code class=\"hljs\">-C link-arg</code>.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">// file: src/main.rs\nuse std::ptr;\n\n#[inline(never)]\nfn main() {\n    let xs = [0u32; 2];\n\n    // force LLVM to allocate `xs` on the stack\n    unsafe { ptr::read_volatile(&amp;xs.as_ptr()); }\n}\n</code></pre>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> RUSTFLAGS=<span class=\"hljs-string\">\"-Z emit-stack-sizes\"</span> cargo build --release</span>\n<span class=\"hljs-meta\">\n$</span><span class=\"bash\"> size -A target/release/hello | grep stack_sizes || <span class=\"hljs-built_in\">echo</span> section was not found</span>\nsection was not found\n<span class=\"hljs-meta\">\n$</span><span class=\"bash\"> RUSTFLAGS=<span class=\"hljs-string\">\"-Z emit-stack-sizes\"</span> cargo rustc --release -- \\</span>\n    -C link-arg=-Wl,-Tkeep-stack-sizes.x \\\n    -C link-arg=-N\n<span class=\"hljs-meta\">\n$</span><span class=\"bash\"> size -A target/release/hello | grep stack_sizes</span>\n.stack_sizes                               90   176272\n<span class=\"hljs-meta\">\n$</span><span class=\"bash\"> <span class=\"hljs-comment\"># non-allocatable section (flags don't contain the \"A\" (alloc) flag)</span></span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> readelf -S target/release/hello</span>\nSection Headers:\n  [Nr]   Name              Type             Address           Offset\n       Size              EntSize            Flags  Link  Info  Align\n(..)\n  [1031] .stack_sizes      PROGBITS         000000000002b090  0002b0f0\n       000000000000005a  0000000000000000   L       5     0     1\n<span class=\"hljs-meta\">\n$</span><span class=\"bash\"> objdump -s -j .stack_sizes target/release/hello</span>\n\ntarget/release/hello:     file format elf64-x86-64\n\nContents of section .stack_sizes:\n 2b090 c0040000 00000000 08f00400 00000000  ................\n 2b0a0 00080005 00000000 00000810 05000000  ................\n 2b0b0 00000000 20050000 00000000 10400500  .... ........@..\n 2b0c0 00000000 00087005 00000000 00000080  ......p.........\n 2b0d0 05000000 00000000 90050000 00000000  ................\n 2b0e0 00a00500 00000000 0000               ..........\n</code></pre>\n<blockquote>\n<p>Author note: I'm not entirely sure why, in <em>this</em> case, <code class=\"hljs\">-N</code> is required in\naddition to <code class=\"hljs\">-Tkeep-stack-sizes.x</code>. For example, it's not required when\nproducing statically linked files for the ARM Cortex-M architecture.</p>\n</blockquote>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"env-set\"><a class=\"header\" href=\"#env-set\"><code>env-set</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/118372\">#118372</a>.</p>\n<hr>\n<p>This option flag allows to specify environment variables value at compile time to be\nused by <code class=\"hljs\">env!</code> and <code class=\"hljs\">option_env!</code> macros. It also impacts <code class=\"hljs\">tracked_env::var</code> function\nfrom the <code class=\"hljs\">proc_macro</code> crate.</p>\n<p>This information will be stored in the dep-info files. For more information about\ndep-info files, take a look <a href=\"https://doc.rust-lang.org/cargo/guide/build-cache.html#dep-info-files\">here</a>.</p>\n<p>When retrieving an environment variable value, the one specified by <code class=\"hljs\">--env-set</code> will take\nprecedence. For example, if you want have <code class=\"hljs\">PATH=a</code> in your environment and pass:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-bash hljs\">rustc --env-set PATH=env\n</code></pre>\n<p>Then you will have:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust no_run hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-built_in\">env!</span>(<span class=\"hljs-string\">\"PATH\"</span>), <span class=\"hljs-string\">\"env\"</span>);\n<span class=\"boring\">}</span></code></pre></pre>\n<p>It will trigger a new compilation if any of the <code class=\"hljs\">--env-set</code> argument value is different.\nSo if you first passed:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-bash hljs\">--env-set A=B --env X=12\n</code></pre>\n<p>and then on next compilation:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-bash hljs\">--env-set A=B\n</code></pre>\n<p><code class=\"hljs\">X</code> value is different (not set) so the code will be re-compiled.</p>\n<p>Please note that on Windows, environment variables are case insensitive but case\npreserving whereas <code class=\"hljs\">rustc</code>'s environment variables are case sensitive. For example,\nhaving <code class=\"hljs\">Path</code> in your environment (case insensitive) is different than using\n<code class=\"hljs\">rustc --env-set Path=...</code> (case sensitive).</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"export-executable-symbols\"><a class=\"header\" href=\"#export-executable-symbols\"><code>export-executable-symbols</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/84161\">#84161</a>.</p>\n<hr>\n<p>The <code class=\"hljs\">-Zexport-executable-symbols</code> compiler flag makes <code class=\"hljs\">rustc</code> export symbols from executables. The resulting binary is runnable, but can also be used as a dynamic library. This is useful for interoperating with programs written in other languages, in particular languages with a runtime like Java or Lua.</p>\n<p>For example on windows:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-meta\">#[no_mangle]</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">my_function</span></span>() -&gt; <span class=\"hljs-built_in\">usize</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">42</span>;\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Hello, world!\"</span>);\n}</code></pre></pre>\n<p>A standard <code class=\"hljs\">cargo build</code> will produce a <code class=\"hljs\">.exe</code> without an export directory. When the <code class=\"hljs\">export-executable-symbols</code> flag is added</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-Bash hljs\"><span class=\"hljs-built_in\">export</span> RUSTFLAGS=<span class=\"hljs-string\">\"-Zexport-executable-symbols\"</span>\ncargo build\n</code></pre>\n<p>the binary has an export directory with the functions:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-plain hljs\">The Export Tables (interpreted .edata section contents)\n\n...\n\n[Ordinal/Name Pointer] Table\n    [   0] my_function\n    [   1] main\n</code></pre>\n<p>(the output of <code class=\"hljs\">objdump -x</code> on the binary)</p>\n<p>Please note that the <code class=\"hljs\">#[no_mangle]</code> attribute is required. Without it, the symbol is not exported.</p>\n<p>The equivalent of this flag in C and C++ compilers is the <code class=\"hljs\">__declspec(dllexport)</code> annotation or the <code class=\"hljs\">-rdynamic</code> linker flag.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"--extern-options\"><a class=\"header\" href=\"#--extern-options\"><code>--extern</code> Options</a></h1>\n<ul>\n<li>Tracking issue for <code class=\"hljs\">--extern</code> crate modifiers: <a href=\"https://github.com/rust-lang/rust/issues/98405\">#98405</a></li>\n<li>Tracking issue for <code class=\"hljs\">noprelude</code>: <a href=\"https://github.com/rust-lang/rust/issues/98398\">#98398</a></li>\n<li>Tracking issue for <code class=\"hljs\">priv</code>: <a href=\"https://github.com/rust-lang/rust/issues/98399\">#98399</a></li>\n<li>Tracking issue for <code class=\"hljs\">nounused</code>: <a href=\"https://github.com/rust-lang/rust/issues/98400\">#98400</a></li>\n<li>Tracking issue for <code class=\"hljs\">force</code>: <a href=\"https://github.com/rust-lang/rust/issues/111302\">#111302</a></li>\n</ul>\n<p>The behavior of the <code class=\"hljs\">--extern</code> flag can be modified with <code class=\"hljs\">noprelude</code>, <code class=\"hljs\">priv</code> or <code class=\"hljs\">nounused</code> options.</p>\n<p>This is unstable feature, so you have to provide <code class=\"hljs\">-Zunstable-options</code> to enable it.</p>\n<h2 id=\"examples\"><a class=\"header\" href=\"#examples\">Examples</a></h2>\n<p>Use your own build of the <code class=\"hljs\">core</code> crate.</p>\n<p><code class=\"hljs\">rustc main.rs -Z unstable-options --extern noprelude:core=libcore.rlib</code></p>\n<p>To use multiple options, separate them with a comma:</p>\n<p><code class=\"hljs\">rustc main.rs -Z unstable-options --extern noprelude,priv,nounused:mydep=mydep.rlib</code></p>\n<h2 id=\"options\"><a class=\"header\" href=\"#options\">Options</a></h2>\n<ul>\n<li><code class=\"hljs\">noprelude</code>: Do not add the crate to the external prelude. If used, it will need to be imported using <code class=\"hljs\">extern crate</code>.\nThis is used by the <a href=\"https://github.com/rust-lang/wg-cargo-std-aware/\">build-std project</a> to simulate compatibility with sysroot-only crates.</li>\n<li><code class=\"hljs\">priv</code>: Mark the crate as a private dependency for the <a href=\"compiler-flags/../../rustc/lints/listing/warn-by-default.html#exported-private-dependencies\"><code class=\"hljs\">exported_private_dependencies</code></a> lint.</li>\n<li><code class=\"hljs\">nounused</code>: Suppress <a href=\"compiler-flags/../../rustc/lints/listing/allowed-by-default.html#unused-crate-dependencies\"><code class=\"hljs\">unused-crate-dependencies</code></a> warnings for the crate.</li>\n<li><code class=\"hljs\">force</code>: Resolve the crate as if it is used, even if it is not used. This can be used to satisfy compilation session requirements like the presence of an allocator or panic handler.</li>\n</ul>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"external-clangrt\"><a class=\"header\" href=\"#external-clangrt\"><code>external-clangrt</code></a></h1>\n<p>This option controls whether the compiler links in its own runtime library for\n<a href=\"compiler-flags/./sanitizer.html\">sanitizers</a>. Passing this flag makes the compiler <em>not</em> link\nits own library. For more information, see the section in the sanitizers doc on\n<a href=\"compiler-flags/./sanitizer.html#working-with-other-languages\">working with other languages.</a></p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"fixed-x18\"><a class=\"header\" href=\"#fixed-x18\"><code>fixed-x18</code></a></h1>\n<p>This option prevents the compiler from using the x18 register. It is only\nsupported on aarch64.</p>\n<p>From the <a href=\"https://developer.arm.com/documentation/den0024/a/The-ABI-for-ARM-64-bit-Architecture/Register-use-in-the-AArch64-Procedure-Call-Standard/Parameters-in-general-purpose-registers\">ABI spec</a>:</p>\n<blockquote>\n<p>X18 is the platform register and is reserved for the use of platform ABIs.\nThis is an additional temporary register on platforms that don't assign a\nspecial meaning to it.</p>\n</blockquote>\n<p>This flag only has an effect when the x18 register would otherwise be considered\na temporary register. When the flag is applied, x18 is always a reserved\nregister.</p>\n<p>This flag is intended for use with the shadow call stack sanitizer. Generally,\nwhen that sanitizer is enabled, the x18 register is used to store a pointer to\nthe shadow stack. Enabling this flag prevents the compiler from overwriting the\nshadow stack pointer with temporary data, which is necessary for the sanitizer\nto work correctly.</p>\n<p>Currently, the <code class=\"hljs\">-Zsanitizer=shadow-call-stack</code> flag is only supported on\nplatforms that always treat x18 as a reserved register, and the <code class=\"hljs\">-Zfixed-x18</code>\nflag is not required to use the sanitizer on such platforms. However, the\nsanitizer may be supported on targets where this is not the case in the future.</p>\n<p>It is undefined behavior for <code class=\"hljs\">-Zsanitizer=shadow-call-stack</code> code to call into\ncode where x18 is a temporary register. On the other hand, when you are <em>not</em>\nusing the shadow call stack sanitizer, compilation units compiled with and\nwithout the <code class=\"hljs\">-Zfixed-x18</code> flag are compatible with each other.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"function-return\"><a class=\"header\" href=\"#function-return\"><code>function-return</code></a></h1>\n<p>The tracking issue for this feature is: https://github.com/rust-lang/rust/issues/116853.</p>\n<hr>\n<p>Option <code class=\"hljs\">-Zfunction-return</code> controls how function returns are converted.</p>\n<p>It is equivalent to <a href=\"https://clang.llvm.org/docs/ClangCommandLineReference.html#cmdoption-clang-mfunction-return\">Clang</a>'s and <a href=\"https://gcc.gnu.org/onlinedocs/gcc/x86-Options.html#index-mfunction-return\">GCC</a>'s <code class=\"hljs\">-mfunction-return</code>. The Linux kernel\nuses it for RETHUNK builds. For details, see <a href=\"https://github.com/llvm/llvm-project/commit/2240d72f15f3b7b9d9fb65450f9bf635fd310f6f\">LLVM commit 2240d72f15f3</a> (\"[X86]\ninitial -mfunction-return=thunk-extern support\") which introduces the feature.</p>\n<p>Supported values for this option are:</p>\n<ul>\n<li><code class=\"hljs\">keep</code>: do not convert function returns.</li>\n<li><code class=\"hljs\">thunk-extern</code>: convert function returns (<code class=\"hljs\">ret</code>) to jumps (<code class=\"hljs\">jmp</code>)\nto an external symbol called <code class=\"hljs\">__x86_return_thunk</code>.</li>\n</ul>\n<p>Like in Clang, GCC's values <code class=\"hljs\">thunk</code> and <code class=\"hljs\">thunk-inline</code> are not supported.</p>\n<p>Only x86 and non-large code models are supported.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"instrument-xray\"><a class=\"header\" href=\"#instrument-xray\"><code>instrument-xray</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/102921\">#102921</a>.</p>\n<hr>\n<p>Enable generation of NOP sleds for XRay function tracing instrumentation.\nFor more information on XRay,\nread <a href=\"https://llvm.org/docs/XRay.html\">LLVM documentation</a>,\nand/or the <a href=\"http://research.google.com/pubs/pub45287.html\">XRay whitepaper</a>.</p>\n<p>Set the <code class=\"hljs\">-Z instrument-xray</code> compiler flag in order to enable XRay instrumentation.</p>\n<ul>\n<li><code class=\"hljs\">-Z instrument-xray</code> – use the default settings</li>\n<li><code class=\"hljs\">-Z instrument-xray=skip-exit</code> – configure a custom setting</li>\n<li><code class=\"hljs\">-Z instrument-xray=ignore-loops,instruction-threshold=300</code> –\nmultiple settings separated by commas</li>\n</ul>\n<p>Supported options:</p>\n<ul>\n<li><code class=\"hljs\">always</code> – force instrumentation of all functions</li>\n<li><code class=\"hljs\">never</code> – do no instrument any functions</li>\n<li><code class=\"hljs\">ignore-loops</code> – ignore presence of loops,\ninstrument functions based only on instruction count</li>\n<li><code class=\"hljs\">instruction-threshold=10</code> – set a different instruction threshold for instrumentation</li>\n<li><code class=\"hljs\">skip-entry</code> – do no instrument function entry</li>\n<li><code class=\"hljs\">skip-exit</code> – do no instrument function exit</li>\n</ul>\n<p>The default settings are:</p>\n<ul>\n<li>instrument both entry &amp; exit from functions</li>\n<li>instrument functions with at least 200 instructions,\nor containing a non-trivial loop</li>\n</ul>\n<p>Note that <code class=\"hljs\">-Z instrument-xray</code> only enables generation of NOP sleds\nwhich on their own don't do anything useful.\nIn order to actually trace the functions,\nyou will need to link a separate runtime library of your choice,\nsuch as Clang's <a href=\"https://www.llvm.org/docs/XRay.html#xray-runtime-library\">XRay Runtime Library</a>.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"link-native-libraries\"><a class=\"header\" href=\"#link-native-libraries\"><code>link-native-libraries</code></a></h1>\n<p>This option allows ignoring libraries specified in <code class=\"hljs\">#[link]</code> attributes instead of passing them to the linker.\nThis can be useful in build systems that manage native libraries themselves and pass them manually,\ne.g. with <code class=\"hljs\">-Clink-arg</code>.</p>\n<ul>\n<li><code class=\"hljs\">yes</code> - Pass native libraries to the linker. Default.</li>\n<li><code class=\"hljs\">no</code> - Don't pass native libraries to the linker.</li>\n</ul>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"linker-features\"><a class=\"header\" href=\"#linker-features\"><code>linker-features</code></a></h1>\n<hr>\n<p>The <code class=\"hljs\">-Zlinker-features</code> compiler flag allows enabling or disabling specific features used during\nlinking, and is intended to be stabilized under the codegen options as <code class=\"hljs\">-Clinker-features</code>.</p>\n<p>These feature flags are a flexible extension mechanism that is complementary to linker flavors,\ndesigned to avoid the combinatorial explosion of having to create a new set of flavors for each\nlinker feature we'd want to use.</p>\n<p>For example, this design allows:</p>\n<ul>\n<li>default feature sets for principal flavors, or for specific targets.</li>\n<li>flavor-specific features: for example, clang offers automatic cross-linking with <code class=\"hljs\">--target</code>, which\ngcc-style compilers don't support. The <em>flavor</em> is still a C/C++ compiler, and we don't want to\nmultiply the number of flavors for this use-case. Instead, we can have a single <code class=\"hljs\">+target</code> feature.</li>\n<li>umbrella features: for example, if clang accumulates more features in the future than just the\n<code class=\"hljs\">+target</code> above. That could be modeled as <code class=\"hljs\">+clang</code>.</li>\n<li>niche features for resolving specific issues: for example, on Apple targets the linker flag\nimplementing the <code class=\"hljs\">as-needed</code> native link modifier (#99424) is only possible on sufficiently recent\nlinker versions.</li>\n<li>still allows for discovery and automation, for example via feature detection. This can be useful\nin exotic environments/build systems.</li>\n</ul>\n<p>The flag accepts a comma-separated list of features, individually enabled (<code class=\"hljs\">+features</code>) or disabled\n(<code class=\"hljs\">-features</code>), though currently only one is exposed on the CLI:</p>\n<ul>\n<li><code class=\"hljs\">lld</code>: to toggle using the lld linker, either the system-installed binary, or the self-contained\n<code class=\"hljs\">rust-lld</code> linker.</li>\n</ul>\n<p>As described above, this list is intended to grow in the future.</p>\n<p>One of the most common uses of this flag will be to toggle self-contained linking with <code class=\"hljs\">rust-lld</code> on\nand off: <code class=\"hljs\">-Clinker-features=+lld -Clink-self-contained=+linker</code> will use the toolchain's <code class=\"hljs\">rust-lld</code>\nas the linker. Inversely, <code class=\"hljs\">-Clinker-features=-lld</code> would opt out of that, if the current target had\nself-contained linking enabled by default.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"llvm-module-flag\"><a class=\"header\" href=\"#llvm-module-flag\"><code>llvm-module-flag</code></a></h1>\n<hr>\n<p>This flag allows adding a key/value to the <code class=\"hljs\">!llvm.module.flags</code> metadata in the\nLLVM-IR for a compiled Rust module.  The syntax is</p>\n<p><code class=\"hljs\">-Z llvm_module_flag=&lt;name&gt;:&lt;type&gt;:&lt;value&gt;:&lt;behavior&gt;</code></p>\n<p>Currently only u32 values are supported but the type is required to be specified\nfor forward compatibility.  The <code class=\"hljs\">behavior</code> element must match one of the named\nLLVM <a href=\"https://llvm.org/docs/LangRef.html#module-flags-metadata\">metadata behaviors</a></p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"location-detail\"><a class=\"header\" href=\"#location-detail\"><code>location-detail</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/70580\">#70580</a>.</p>\n<hr>\n<p>Option <code class=\"hljs\">-Z location-detail=val</code> controls what location details are tracked when\nusing <code class=\"hljs\">caller_location</code>. This allows users to control what location details\nare printed as part of panic messages, by allowing them to exclude any combination\nof filenames, line numbers, and column numbers. This option is intended to provide\nusers with a way to mitigate the size impact of <code class=\"hljs\">#[track_caller]</code>.</p>\n<p>This option supports a comma separated list of location details to be included. Valid options\nwithin this list are:</p>\n<ul>\n<li><code class=\"hljs\">file</code> - the filename of the panic will be included in the panic output</li>\n<li><code class=\"hljs\">line</code> - the source line of the panic will be included in the panic output</li>\n<li><code class=\"hljs\">column</code> - the source column of the panic will be included in the panic output</li>\n</ul>\n<p>Any combination of these three options are supported. Alternatively, you can pass\n<code class=\"hljs\">none</code> to this option, which results in no location details being tracked.\nIf this option is not specified, all three are included by default.</p>\n<p>An example of a panic output when using <code class=\"hljs\">-Z location-detail=line</code>:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">panicked at 'Process blink had a fault', &lt;redacted&gt;:323:0\n</code></pre>\n<p>The code size savings from this option are two-fold. First, the <code class=\"hljs\">&amp;'static str</code> values\nfor each path to a file containing a panic are removed from the binary. For projects\nwith deep directory structures and many files with panics, this can add up. This category\nof savings can only be realized by excluding filenames from the panic output. Second,\nsavings can be realized by allowing multiple panics to be fused into a single panicking\nbranch. It is often the case that within a single file, multiple panics with the same\npanic message exist -- e.g. two calls to <code class=\"hljs\">Option::unwrap()</code> in a single line, or\ntwo calls to <code class=\"hljs\">Result::expect()</code> on adjacent lines. If column and line information\nare included in the <code class=\"hljs\">Location</code> struct passed to the panic handler, these branches cannot\nbe fused, as the output is different depending on which panic occurs. However if line\nand column information is identical for all panics, these branches can be fused, which\ncan lead to substantial code size savings, especially for small embedded binaries with\nmany panics.</p>\n<p>The savings from this option are amplified when combined with the use of <code class=\"hljs\">-Zbuild-std</code>, as\notherwise paths for panics within the standard library are still included in your binary.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"move_size_limit\"><a class=\"header\" href=\"#move_size_limit\"><code>move_size_limit</code></a></h1>\n<hr>\n<p>The <code class=\"hljs\">-Zmove-size-limit=N</code> compiler flag enables <code class=\"hljs\">large_assignments</code> lints which\nwill warn when moving objects whose size exceeds <code class=\"hljs\">N</code> bytes.</p>\n<p>Lint warns only about moves in functions that participate in code generation.\nConsequently it will be ineffective for compiler invocation that emit\nmetadata only, i.e., <code class=\"hljs\">cargo check</code> like workflows.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"no-jump-tables\"><a class=\"header\" href=\"#no-jump-tables\"><code>no-jump-tables</code></a></h1>\n<p>The tracking issue for this feature is <a href=\"https://github.com/rust-lang/rust/issues/116592\">#116592</a></p>\n<hr>\n<p>This option enables the <code class=\"hljs\">-fno-jump-tables</code> flag for LLVM, which makes the\ncodegen backend avoid generating jump tables when lowering switches.</p>\n<p>This option adds the LLVM <code class=\"hljs\">no-jump-tables=true</code> attribute to every function.</p>\n<p>The option can be used to help provide protection against\njump-oriented-programming (JOP) attacks, such as with the linux kernel's <a href=\"https://www.phoronix.com/news/Linux-IBT-By-Default-Tip\">IBT</a>.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-sh hljs bash\">RUSTFLAGS=<span class=\"hljs-string\">\"-Zno-jump-tables\"</span> cargo +nightly build -Z build-std\n</code></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"no-parallel-llvm\"><a class=\"header\" href=\"#no-parallel-llvm\"><code>no-parallel-llvm</code></a></h1>\n<hr>\n<p>This flag disables parallelization of codegen and linking, while otherwise preserving\nbehavior with regard to codegen units and LTO.</p>\n<p>This flag is not useful for regular users, but it can be useful for debugging the backend. Codegen issues commonly only manifest under specific circumstances, e.g. if multiple codegen units are used and ThinLTO is enabled. Serialization of these threaded configurations makes the use of LLVM debugging facilities easier, by avoiding the interleaving of output.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"no-unique-section-names\"><a class=\"header\" href=\"#no-unique-section-names\"><code>no-unique-section-names</code></a></h1>\n<hr>\n<p>This flag currently applies only to ELF-based targets using the LLVM codegen backend. It prevents the generation of unique ELF section names for each separate code and data item when <code class=\"hljs\">-Z function-sections</code> is also in use, which is the default for most targets. This option can reduce the size of object files, and depending on the linker, the final ELF binary as well.</p>\n<p>For example, a function <code class=\"hljs\">func</code> will by default generate a code section called <code class=\"hljs\">.text.func</code>. Normally this is fine because the linker will merge all those <code class=\"hljs\">.text.*</code> sections into a single one in the binary. However, starting with <a href=\"https://github.com/llvm/llvm-project/commit/ee5d1a04\">LLVM 12</a>, the backend will also generate unique section names for exception handling, so you would see a section name of <code class=\"hljs\">.gcc_except_table.func</code> in the object file and potentially in the final ELF binary, which could add significant bloat to programs that contain many functions.</p>\n<p>This flag instructs LLVM to use the same <code class=\"hljs\">.text</code> and <code class=\"hljs\">.gcc_except_table</code> section name for each function, and it is analogous to Clang's <code class=\"hljs\">-fno-unique-section-names</code> option.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"on-broken-pipe\"><a class=\"header\" href=\"#on-broken-pipe\"><code>on-broken-pipe</code></a></h1>\n<hr>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/97889\">#97889</a></p>\n<p>Note: The ui for this feature was previously an attribute named <code class=\"hljs\">#[unix_sigpipe = \"...\"]</code>.</p>\n<hr>\n<h2 id=\"overview\"><a class=\"header\" href=\"#overview\">Overview</a></h2>\n<p>The <code class=\"hljs\">-Zon-broken-pipe=...</code> compiler flag can be used to specify how libstd shall setup <code class=\"hljs\">SIGPIPE</code> on Unix platforms before invoking <code class=\"hljs\">fn main()</code>. This flag is ignored on non-Unix targets. The flag can be used with three different values or be omitted entirely. It affects <code class=\"hljs\">SIGPIPE</code> before <code class=\"hljs\">fn main()</code> and before children get <code class=\"hljs\">exec()</code>'ed:</p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Compiler flag</th><th><code class=\"hljs\">SIGPIPE</code> before <code class=\"hljs\">fn main()</code></th><th><code class=\"hljs\">SIGPIPE</code> before child <code class=\"hljs\">exec()</code></th></tr></thead><tbody>\n<tr><td>not used</td><td><code class=\"hljs\">SIG_IGN</code></td><td><code class=\"hljs\">SIG_DFL</code></td></tr>\n<tr><td><code class=\"hljs\">-Zon-broken-pipe=kill</code></td><td><code class=\"hljs\">SIG_DFL</code></td><td>not touched</td></tr>\n<tr><td><code class=\"hljs\">-Zon-broken-pipe=error</code></td><td><code class=\"hljs\">SIG_IGN</code></td><td>not touched</td></tr>\n<tr><td><code class=\"hljs\">-Zon-broken-pipe=inherit</code></td><td>not touched</td><td>not touched</td></tr>\n</tbody></table>\n</div>\n<h2 id=\"-zon-broken-pipe-not-used\"><a class=\"header\" href=\"#-zon-broken-pipe-not-used\"><code>-Zon-broken-pipe</code> not used</a></h2>\n<p>If <code class=\"hljs\">-Zon-broken-pipe</code> is not used, libstd will behave in the manner it has since 2014, before Rust 1.0. <code class=\"hljs\">SIGPIPE</code> will be set to <code class=\"hljs\">SIG_IGN</code> before <code class=\"hljs\">fn main()</code> and result in <code class=\"hljs\">EPIPE</code> errors which are converted to <code class=\"hljs\">std::io::ErrorKind::BrokenPipe</code>.</p>\n<p>When spawning child processes, <code class=\"hljs\">SIGPIPE</code> will be set to <code class=\"hljs\">SIG_DFL</code> before doing the underlying <code class=\"hljs\">exec()</code> syscall.</p>\n<h2 id=\"-zon-broken-pipekill\"><a class=\"header\" href=\"#-zon-broken-pipekill\"><code>-Zon-broken-pipe=kill</code></a></h2>\n<p>Set the <code class=\"hljs\">SIGPIPE</code> handler to <code class=\"hljs\">SIG_DFL</code> before invoking <code class=\"hljs\">fn main()</code>. This will result in your program getting killed if it tries to write to a closed pipe. This is normally what you want if your program produces textual output.</p>\n<p>When spawning child processes, <code class=\"hljs\">SIGPIPE</code> will not be touched. This normally means child processes inherit <code class=\"hljs\">SIG_DFL</code> for <code class=\"hljs\">SIGPIPE</code>.</p>\n<h3 id=\"example-1\"><a class=\"header\" href=\"#example-1\">Example</a></h3>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust no_run hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">loop</span> {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"hello world\"</span>);\n    }\n}</code></pre></pre>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> rustc -Zon-broken-pipe=<span class=\"hljs-built_in\">kill</span> main.rs</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> ./main | head -n1</span>\nhello world\n</code></pre>\n<h2 id=\"-zon-broken-pipeerror\"><a class=\"header\" href=\"#-zon-broken-pipeerror\"><code>-Zon-broken-pipe=error</code></a></h2>\n<p>Set the <code class=\"hljs\">SIGPIPE</code> handler to <code class=\"hljs\">SIG_IGN</code> before invoking <code class=\"hljs\">fn main()</code>. This will result in <code class=\"hljs\">ErrorKind::BrokenPipe</code> errors if you program tries to write to a closed pipe. This is normally what you want if you for example write socket servers, socket clients, or pipe peers.</p>\n<p>When spawning child processes, <code class=\"hljs\">SIGPIPE</code> will not be touched. This normally means child processes inherit <code class=\"hljs\">SIG_IGN</code> for <code class=\"hljs\">SIGPIPE</code>.</p>\n<h3 id=\"example-2\"><a class=\"header\" href=\"#example-2\">Example</a></h3>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust no_run hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">loop</span> {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"hello world\"</span>);\n    }\n}</code></pre></pre>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> rustc -Zon-broken-pipe=error main.rs</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> ./main | head -n1</span>\nhello world\nthread 'main' panicked at library/std/src/io/stdio.rs:1118:9:\nfailed printing to stdout: Broken pipe (os error 32)\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</code></pre>\n<h2 id=\"-zon-broken-pipeinherit\"><a class=\"header\" href=\"#-zon-broken-pipeinherit\"><code>-Zon-broken-pipe=inherit</code></a></h2>\n<p>Leave <code class=\"hljs\">SIGPIPE</code> untouched before entering <code class=\"hljs\">fn main()</code>. Unless the parent process has changed the default <code class=\"hljs\">SIGPIPE</code> handler from <code class=\"hljs\">SIG_DFL</code> to something else, this will behave the same as <code class=\"hljs\">-Zon-broken-pipe=kill</code>.</p>\n<p>When spawning child processes, <code class=\"hljs\">SIGPIPE</code> will not be touched. This normally means child processes inherit <code class=\"hljs\">SIG_DFL</code> for <code class=\"hljs\">SIGPIPE</code>.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"printcheck-cfg\"><a class=\"header\" href=\"#printcheck-cfg\"><code>print=check-cfg</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/125704\">#125704</a>.</p>\n<hr>\n<p>This option of the <code class=\"hljs\">--print</code> flag print the list of expected cfgs.</p>\n<p>This is related to the <code class=\"hljs\">--check-cfg</code> flag which allows specifying arbitrary expected\nnames and values.</p>\n<p>This print option works similarly to <code class=\"hljs\">--print=cfg</code> (modulo check-cfg specifics):</p>\n<ul>\n<li><em>check_cfg syntax</em>: <em>output of --print=check-cfg</em></li>\n<li><code class=\"hljs\">cfg(windows)</code>: <code class=\"hljs\">windows</code></li>\n<li><code class=\"hljs\">cfg(feature, values(\"foo\", \"bar\"))</code>: <code class=\"hljs\">feature=\"foo\"</code> and <code class=\"hljs\">feature=\"bar\"</code></li>\n<li><code class=\"hljs\">cfg(feature, values(none(), \"\"))</code>: <code class=\"hljs\">feature</code> and <code class=\"hljs\">feature=\"\"</code></li>\n<li><code class=\"hljs\">cfg(feature, values(any()))</code>: <code class=\"hljs\">feature=any()</code></li>\n<li><code class=\"hljs\">cfg(feature, values())</code>: <code class=\"hljs\">feature=</code></li>\n<li><code class=\"hljs\">cfg(any())</code>: <code class=\"hljs\">any()</code></li>\n<li><em>nothing</em>: <code class=\"hljs\">any()=any()</code></li>\n</ul>\n<p>To be used like this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-bash hljs\">rustc --<span class=\"hljs-built_in\">print</span>=check-cfg -Zunstable-options lib.rs\n</code></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"profile\"><a class=\"header\" href=\"#profile\"><code>profile</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/42524\">#42524</a>.</p>\n<hr>\n<p>This feature allows the generation of code coverage reports.</p>\n<p>Set the <code class=\"hljs\">-Zprofile</code> compiler flag in order to enable gcov profiling.</p>\n<p>For example:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-Bash hljs\">cargo new testgcov --bin\n<span class=\"hljs-built_in\">cd</span> testgcov\n<span class=\"hljs-built_in\">export</span> RUSTFLAGS=<span class=\"hljs-string\">\"-Zprofile -Ccodegen-units=1 -Copt-level=0 -Clink-dead-code -Coverflow-checks=off -Zpanic_abort_tests -Cpanic=abort\"</span>\n<span class=\"hljs-built_in\">export</span> CARGO_INCREMENTAL=0\ncargo build\ncargo run\n</code></pre>\n<p>Once you've built and run your program, files with the <code class=\"hljs\">gcno</code> (after build) and <code class=\"hljs\">gcda</code> (after execution) extensions will be created.\nYou can parse them with <a href=\"https://llvm.org/docs/CommandGuide/llvm-cov.html#llvm-cov-gcov\">llvm-cov gcov</a> or <a href=\"https://github.com/mozilla/grcov\">grcov</a>.</p>\n<p>Please note that <code class=\"hljs\">RUSTFLAGS</code> by default applies to everything that cargo builds and runs during a build!\nWhen the <code class=\"hljs\">--target</code> flag is explicitly passed to cargo, the <code class=\"hljs\">RUSTFLAGS</code> no longer apply to build scripts and procedural macros.\nFor more fine-grained control consider passing a <code class=\"hljs\">RUSTC_WRAPPER</code> program to cargo that only adds the profiling flags to\nrustc for the specific crates you want to profile.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"profile-sample-use\"><a class=\"header\" href=\"#profile-sample-use\"><code>profile-sample-use</code></a></h1>\n<hr>\n<p><code class=\"hljs\">-Zprofile-sample-use=code.prof</code> directs <code class=\"hljs\">rustc</code> to use the profile\n<code class=\"hljs\">code.prof</code> as a source for Automatic Feedback Directed Optimization (AFDO).\nSee the documentation of <a href=\"compiler-flags/debug_info_for_profiling.html\"><code class=\"hljs\">-Zdebug-info-for-profiling</code></a> for more information\non using AFDO.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"remap-cwd-prefix\"><a class=\"header\" href=\"#remap-cwd-prefix\"><code>remap-cwd-prefix</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/87325\">#87325</a>.</p>\n<hr>\n<p>This flag will rewrite absolute paths under the current working directory,\nreplacing the current working directory prefix with a specified value.</p>\n<p>The given value may be absolute or relative, or empty. This switch takes\nprecedence over <code class=\"hljs\">--remap-path-prefix</code> in case they would both match a given\npath.</p>\n<p>This flag helps to produce deterministic output, by removing the current working\ndirectory from build output, while allowing the command line to be universally\nreproducible, such that the same execution will work on all machines, regardless\nof build environment.</p>\n<h2 id=\"example-3\"><a class=\"header\" href=\"#example-3\">Example</a></h2>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-sh hljs bash\"><span class=\"hljs-comment\"># This would produce an absolute path to main.rs in build outputs of</span>\n<span class=\"hljs-comment\"># \"./main.rs\".</span>\nrustc -Z remap-cwd-prefix=. main.rs\n</code></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"remap-path-scope\"><a class=\"header\" href=\"#remap-path-scope\"><code>remap-path-scope</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/111540\">#111540</a>.</p>\n<hr>\n<p>When the <code class=\"hljs\">--remap-path-prefix</code> option is passed to rustc, source path prefixes in all output will be affected by default.\nThe <code class=\"hljs\">--remap-path-scope</code> argument can be used in conjunction with <code class=\"hljs\">--remap-path-prefix</code> to determine paths in which output context should be affected.\nThis flag accepts a comma-separated list of values and may be specified multiple times, in which case the scopes are aggregated together. The valid scopes are:</p>\n<ul>\n<li><code class=\"hljs\">macro</code> - apply remappings to the expansion of <code class=\"hljs\">std::file!()</code> macro. This is where paths in embedded panic messages come from</li>\n<li><code class=\"hljs\">diagnostics</code> - apply remappings to printed compiler diagnostics</li>\n<li><code class=\"hljs\">debuginfo</code> - apply remappings to debug informations</li>\n<li><code class=\"hljs\">object</code> - apply remappings to all paths in compiled executables or libraries, but not elsewhere. Currently an alias for <code class=\"hljs\">macro,debuginfo</code>.</li>\n<li><code class=\"hljs\">all</code> - an alias for all of the above, also equivalent to supplying only <code class=\"hljs\">--remap-path-prefix</code> without <code class=\"hljs\">--remap-path-scope</code>.</li>\n</ul>\n<h2 id=\"example-4\"><a class=\"header\" href=\"#example-4\">Example</a></h2>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-sh hljs bash\"><span class=\"hljs-comment\"># This would produce an absolute path to main.rs in build outputs of</span>\n<span class=\"hljs-comment\"># \"./main.rs\".</span>\nrustc --remap-path-prefix=$(PWD)=/remapped -Zremap-path-scope=object main.rs\n</code></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"report-time\"><a class=\"header\" href=\"#report-time\"><code>report-time</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/64888\">#64888</a></p>\n<hr>\n<p>The <code class=\"hljs\">report-time</code> feature adds a possibility to report execution time of the\ntests generated via <code class=\"hljs\">libtest</code>.</p>\n<p>This is unstable feature, so you have to provide <code class=\"hljs\">-Zunstable-options</code> to get\nthis feature working.</p>\n<p>Sample usage command:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-sh hljs bash\">./test_executable -Zunstable-options --report-time\n</code></pre>\n<p>Available options:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-sh hljs bash\">--report-time\n                Show execution time of each <span class=\"hljs-built_in\">test</span>.\n                Threshold values <span class=\"hljs-keyword\">for</span> colorized output can be\n                configured via\n                `RUST_TEST_TIME_UNIT`, `RUST_TEST_TIME_INTEGRATION`\n                and\n                `RUST_TEST_TIME_DOCTEST` environment variables.\n                Expected format of environment variable is\n                `VARIABLE=WARN_TIME,CRITICAL_TIME`.\n                Not available <span class=\"hljs-keyword\">for</span> --format=terse\n--ensure-time\n                Treat excess of the <span class=\"hljs-built_in\">test</span> execution time <span class=\"hljs-built_in\">limit</span> as\n                error.\n                Threshold values <span class=\"hljs-keyword\">for</span> this option can be configured via\n                `RUST_TEST_TIME_UNIT`, `RUST_TEST_TIME_INTEGRATION`\n                and\n                `RUST_TEST_TIME_DOCTEST` environment variables.\n                Expected format of environment variable is\n                `VARIABLE=WARN_TIME,CRITICAL_TIME`.\n                `CRITICAL_TIME` here means the <span class=\"hljs-built_in\">limit</span> that should not be\n                exceeded by <span class=\"hljs-built_in\">test</span>.\n</code></pre>\n<p>Example of the environment variable format:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-sh hljs bash\">RUST_TEST_TIME_UNIT=100,200\n</code></pre>\n<p>where 100 stands for warn time, and 200 stands for critical time.</p>\n<h2 id=\"examples-1\"><a class=\"header\" href=\"#examples-1\">Examples</a></h2>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-sh hljs bash\">cargo <span class=\"hljs-built_in\">test</span> --tests -- -Zunstable-options --report-time\n    Finished dev [unoptimized + debuginfo] target(s) <span class=\"hljs-keyword\">in</span> 0.02s\n     Running target/debug/deps/example-27fb188025bec02c\n\nrunning 3 tests\n<span class=\"hljs-built_in\">test</span> tests::unit_test_quick ... ok &lt;0.000s&gt;\n<span class=\"hljs-built_in\">test</span> tests::unit_test_warn ... ok &lt;0.055s&gt;\n<span class=\"hljs-built_in\">test</span> tests::unit_test_critical ... ok &lt;0.110s&gt;\n\n<span class=\"hljs-built_in\">test</span> result: ok. 3 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n\n     Running target/debug/deps/tests-cedb06f6526d15d9\n\nrunning 3 tests\n<span class=\"hljs-built_in\">test</span> unit_test_quick ... ok &lt;0.000s&gt;\n<span class=\"hljs-built_in\">test</span> unit_test_warn ... ok &lt;0.550s&gt;\n<span class=\"hljs-built_in\">test</span> unit_test_critical ... ok &lt;1.100s&gt;\n\n<span class=\"hljs-built_in\">test</span> result: ok. 3 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n</code></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"sanitizer\"><a class=\"header\" href=\"#sanitizer\"><code>sanitizer</code></a></h1>\n<p>Sanitizers are tools that help detect and prevent various types of bugs and\nvulnerabilities in software. They are available in compilers and work by\ninstrumenting the code to add additional runtime checks. While they provide\npowerful tools for identifying bugs or security issues, it's important to note\nthat using sanitizers can introduce runtime overhead and might not catch all\npossible issues. Therefore, they are typically used alongside other best\npractices in software development, such as testing and fuzzing, to ensure the\nhighest level of software quality and security.</p>\n<p>The tracking issues for this feature are:</p>\n<ul>\n<li><a href=\"https://github.com/rust-lang/rust/issues/39699\">#39699</a>.</li>\n<li><a href=\"https://github.com/rust-lang/rust/issues/89653\">#89653</a>.</li>\n</ul>\n<hr>\n<p>This feature allows for use of one of following sanitizers:</p>\n<ul>\n<li>\n<p>Those intended for testing or fuzzing (but not production use):</p>\n<ul>\n<li><a href=\"compiler-flags/sanitizer.html#addresssanitizer\">AddressSanitizer</a> a fast memory error detector.</li>\n<li><a href=\"compiler-flags/sanitizer.html#hwaddresssanitizer\">HWAddressSanitizer</a> a memory error detector similar to\nAddressSanitizer, but based on partial hardware assistance.</li>\n<li><a href=\"compiler-flags/sanitizer.html#leaksanitizer\">LeakSanitizer</a> a run-time memory leak detector.</li>\n<li><a href=\"compiler-flags/sanitizer.html#memorysanitizer\">MemorySanitizer</a> a detector of uninitialized reads.</li>\n<li><a href=\"compiler-flags/sanitizer.html#threadsanitizer\">ThreadSanitizer</a> a fast data race detector.</li>\n</ul>\n</li>\n<li>\n<p>Those that apart from testing, may be used in production:</p>\n<ul>\n<li><a href=\"compiler-flags/sanitizer.html#controlflowintegrity\">ControlFlowIntegrity</a> LLVM Control Flow Integrity\n(CFI) provides forward-edge control flow protection.</li>\n<li><a href=\"compiler-flags/sanitizer.html#dataflowsanitizer\">DataFlowSanitizer</a> a generic dynamic data flow analysis\nframework.</li>\n<li><a href=\"compiler-flags/sanitizer.html#kernelcontrolflowintegrity\">KernelControlFlowIntegrity</a> LLVM Kernel\nControl Flow Integrity (KCFI) provides forward-edge control flow protection\nfor operating systems kernels.</li>\n<li><a href=\"compiler-flags/sanitizer.html#memtagsanitizer\">MemTagSanitizer</a> fast memory error detector based on\nArmv8.5-A Memory Tagging Extension.</li>\n<li><a href=\"compiler-flags/sanitizer.html#safestack\">SafeStack</a> provides backward-edge control flow protection by\nseparating the stack into safe and unsafe regions.</li>\n<li><a href=\"compiler-flags/sanitizer.html#shadowcallstack\">ShadowCallStack</a> provides backward-edge control flow\nprotection (aarch64 only).</li>\n</ul>\n</li>\n</ul>\n<p>To enable a sanitizer compile with <code class=\"hljs\">-Zsanitizer=address</code>, <code class=\"hljs\">-Zsanitizer=cfi</code>,\n<code class=\"hljs\">-Zsanitizer=dataflow</code>,<code class=\"hljs\">-Zsanitizer=hwaddress</code>, <code class=\"hljs\">-Zsanitizer=leak</code>,\n<code class=\"hljs\">-Zsanitizer=memory</code>, <code class=\"hljs\">-Zsanitizer=memtag</code>, <code class=\"hljs\">-Zsanitizer=shadow-call-stack</code>, or\n<code class=\"hljs\">-Zsanitizer=thread</code>. You might also need the <code class=\"hljs\">--target</code> and <code class=\"hljs\">build-std</code> flags.\nIf you're working with other languages that are also instrumented with sanitizers,\nyou might need the <code class=\"hljs\">external-clangrt</code> flag. See the section on\n<a href=\"compiler-flags/sanitizer.html#working-with-other-languages\">working with other languages</a>.</p>\n<p>Example:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-shell hljs\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> RUSTFLAGS=-Zsanitizer=address cargo build -Zbuild-std --target x86_64-unknown-linux-gnu</span>\n</code></pre>\n<p>Additional options for sanitizers can be passed to LLVM command line argument\nprocessor via LLVM arguments using <code class=\"hljs\">llvm-args</code> codegen option (e.g.,\n<code class=\"hljs\">-Cllvm-args=-dfsan-combine-pointer-labels-on-load=false</code>). See the sanitizer\ndocumentation for more information about additional options.</p>\n<h1 id=\"addresssanitizer\"><a class=\"header\" href=\"#addresssanitizer\">AddressSanitizer</a></h1>\n<p>AddressSanitizer is a memory error detector. It can detect the following types\nof bugs:</p>\n<ul>\n<li>Out of bound accesses to heap, stack and globals</li>\n<li>Use after free</li>\n<li>Use after return (runtime flag <code class=\"hljs\">ASAN_OPTIONS=detect_stack_use_after_return=1</code>)</li>\n<li>Use after scope</li>\n<li>Double-free, invalid free</li>\n<li>Memory leaks</li>\n</ul>\n<p>The memory leak detection is enabled by default on Linux, and can be enabled\nwith runtime flag <code class=\"hljs\">ASAN_OPTIONS=detect_leaks=1</code> on macOS.</p>\n<p>AddressSanitizer is supported on the following targets:</p>\n<ul>\n<li><code class=\"hljs\">aarch64-apple-darwin</code></li>\n<li><code class=\"hljs\">aarch64-unknown-fuchsia</code></li>\n<li><code class=\"hljs\">aarch64-unknown-linux-gnu</code></li>\n<li><code class=\"hljs\">x86_64-apple-darwin</code></li>\n<li><code class=\"hljs\">x86_64-unknown-fuchsia</code></li>\n<li><code class=\"hljs\">x86_64-unknown-freebsd</code></li>\n<li><code class=\"hljs\">x86_64-unknown-linux-gnu</code></li>\n</ul>\n<p>AddressSanitizer works with non-instrumented code although it will impede its\nability to detect some bugs.  It is not expected to produce false positive\nreports.</p>\n<p>See the <a href=\"https://clang.llvm.org/docs/AddressSanitizer.html\">Clang AddressSanitizer documentation</a> for more details.</p>\n<h2 id=\"examples-2\"><a class=\"header\" href=\"#examples-2\">Examples</a></h2>\n<p>Stack buffer overflow:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> xs = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n    <span class=\"hljs-keyword\">let</span> _y = <span class=\"hljs-keyword\">unsafe</span> { *xs.as_ptr().offset(<span class=\"hljs-number\">4</span>) };\n}</code></pre></pre>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-shell hljs\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> <span class=\"hljs-built_in\">export</span> RUSTFLAGS=-Zsanitizer=address RUSTDOCFLAGS=-Zsanitizer=address</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run -Zbuild-std --target x86_64-unknown-linux-gnu</span>\n==37882==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7ffe400e6250 at pc 0x5609a841fb20 bp 0x7ffe400e6210 sp 0x7ffe400e6208\nREAD of size 4 at 0x7ffe400e6250 thread T0\n    #0 0x5609a841fb1f in example::main::h628ffc6626ed85b2 /.../src/main.rs:3:23\n    ...\n\nAddress 0x7ffe400e6250 is located in stack of thread T0 at offset 48 in frame\n    #0 0x5609a841f8af in example::main::h628ffc6626ed85b2 /.../src/main.rs:1\n\n  This frame has 1 object(s):\n    [32, 48) 'xs' (line 2) &lt;== Memory access at offset 48 overflows this variable\nHINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork\n      (longjmp and C++ exceptions *are* supported)\nSUMMARY: AddressSanitizer: stack-buffer-overflow /.../src/main.rs:3:23 in example::main::h628ffc6626ed85b2\nShadow bytes around the buggy address:\n  0x100048014bf0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x100048014c00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x100048014c10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x100048014c20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x100048014c30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n=&gt;0x100048014c40: 00 00 00 00 f1 f1 f1 f1 00 00[f3]f3 00 00 00 00\n  0x100048014c50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x100048014c60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x100048014c70: f1 f1 f1 f1 00 00 f3 f3 00 00 00 00 00 00 00 00\n  0x100048014c80: 00 00 00 00 00 00 00 00 00 00 00 00 f1 f1 f1 f1\n  0x100048014c90: 00 00 f3 f3 00 00 00 00 00 00 00 00 00 00 00 00\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07\n  Heap left redzone:       fa\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Container overflow:      fc\n  Array cookie:            ac\n  Intra object redzone:    bb\n  ASan internal:           fe\n  Left alloca redzone:     ca\n  Right alloca redzone:    cb\n  Shadow gap:              cc\n==37882==ABORTING\n</code></pre>\n<p>Use of a stack object after its scope has already ended:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">mut</span> P: *<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-built_in\">usize</span> = std::ptr::null_mut();\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">unsafe</span> {\n        {\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> x = <span class=\"hljs-number\">0</span>;\n            P = &amp;<span class=\"hljs-keyword\">mut</span> x;\n        }\n        std::ptr::write_volatile(P, <span class=\"hljs-number\">123</span>);\n    }\n}</code></pre></pre>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-shell hljs\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> <span class=\"hljs-built_in\">export</span> RUSTFLAGS=-Zsanitizer=address RUSTDOCFLAGS=-Zsanitizer=address</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run -Zbuild-std --target x86_64-unknown-linux-gnu</span>\n=================================================================\n==39249==ERROR: AddressSanitizer: stack-use-after-scope on address 0x7ffc7ed3e1a0 at pc 0x55c98b262a8e bp 0x7ffc7ed3e050 sp 0x7ffc7ed3e048\nWRITE of size 8 at 0x7ffc7ed3e1a0 thread T0\n    #0 0x55c98b262a8d in core::ptr::write_volatile::he21f1df5a82f329a /.../src/rust/src/libcore/ptr/mod.rs:1048:5\n    #1 0x55c98b262cd2 in example::main::h628ffc6626ed85b2 /.../src/main.rs:9:9\n    ...\n\nAddress 0x7ffc7ed3e1a0 is located in stack of thread T0 at offset 32 in frame\n    #0 0x55c98b262bdf in example::main::h628ffc6626ed85b2 /.../src/main.rs:3\n\n  This frame has 1 object(s):\n    [32, 40) 'x' (line 6) &lt;== Memory access at offset 32 is inside this variable\nHINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork\n      (longjmp and C++ exceptions *are* supported)\nSUMMARY: AddressSanitizer: stack-use-after-scope /.../src/rust/src/libcore/ptr/mod.rs:1048:5 in core::ptr::write_volatile::he21f1df5a82f329a\nShadow bytes around the buggy address:\n  0x10000fd9fbe0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10000fd9fbf0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10000fd9fc00: 00 00 00 00 00 00 00 00 00 00 00 00 f1 f1 f1 f1\n  0x10000fd9fc10: f8 f8 f3 f3 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10000fd9fc20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n=&gt;0x10000fd9fc30: f1 f1 f1 f1[f8]f3 f3 f3 00 00 00 00 00 00 00 00\n  0x10000fd9fc40: 00 00 00 00 00 00 00 00 00 00 00 00 f1 f1 f1 f1\n  0x10000fd9fc50: 00 00 f3 f3 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10000fd9fc60: 00 00 00 00 00 00 00 00 f1 f1 f1 f1 00 00 f3 f3\n  0x10000fd9fc70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10000fd9fc80: 00 00 00 00 f1 f1 f1 f1 00 00 f3 f3 00 00 00 00\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07\n  Heap left redzone:       fa\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Container overflow:      fc\n  Array cookie:            ac\n  Intra object redzone:    bb\n  ASan internal:           fe\n  Left alloca redzone:     ca\n  Right alloca redzone:    cb\n  Shadow gap:              cc\n==39249==ABORTING\n</code></pre>\n<h1 id=\"controlflowintegrity\"><a class=\"header\" href=\"#controlflowintegrity\">ControlFlowIntegrity</a></h1>\n<p>The LLVM CFI support in the Rust compiler provides forward-edge control flow\nprotection for both Rust-compiled code only and for C or C++ and Rust -compiled\ncode mixed-language binaries, also known as “mixed binaries” (i.e., for when C\nor C++ and Rust -compiled code share the same virtual address space), by\naggregating function pointers in groups identified by their return and parameter\ntypes.</p>\n<p>LLVM CFI can be enabled with <code class=\"hljs\">-Zsanitizer=cfi</code> and requires LTO (i.e.,\n<code class=\"hljs\">-Clinker-plugin-lto</code> or <code class=\"hljs\">-Clto</code>). Cross-language LLVM CFI can be enabled with\n<code class=\"hljs\">-Zsanitizer=cfi</code>, and requires the <code class=\"hljs\">-Zsanitizer-cfi-normalize-integers</code> option\nto be used with Clang <code class=\"hljs\">-fsanitize-cfi-icall-experimental-normalize-integers</code>\noption for cross-language LLVM CFI support, and proper (i.e., non-rustc) LTO\n(i.e., <code class=\"hljs\">-Clinker-plugin-lto</code>).</p>\n<p>It is recommended to rebuild the standard library with CFI enabled by using the\nCargo build-std feature (i.e., <code class=\"hljs\">-Zbuild-std</code>) when enabling CFI.</p>\n<p>See the <a href=\"https://clang.llvm.org/docs/ControlFlowIntegrity.html\">Clang ControlFlowIntegrity documentation</a> for more details.</p>\n<h2 id=\"example-1-redirecting-control-flow-using-an-indirect-branchcall-to-an-invalid-destination\"><a class=\"header\" href=\"#example-1-redirecting-control-flow-using-an-indirect-branchcall-to-an-invalid-destination\">Example 1: Redirecting control flow using an indirect branch/call to an invalid destination</a></h2>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore (making doc tests pass cross-platform is hard) hljs\"><span class=\"hljs-meta\">#![feature(naked_functions)]</span>\n\n<span class=\"hljs-keyword\">use</span> std::arch::asm;\n<span class=\"hljs-keyword\">use</span> std::mem;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">add_one</span></span>(x: <span class=\"hljs-built_in\">i32</span>) -&gt; <span class=\"hljs-built_in\">i32</span> {\n    x + <span class=\"hljs-number\">1</span>\n}\n\n<span class=\"hljs-meta\">#[naked]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">extern</span> <span class=\"hljs-string\">\"C\"</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">add_two</span></span>(x: <span class=\"hljs-built_in\">i32</span>) {\n    <span class=\"hljs-comment\">// x + 2 preceded by a landing pad/nop block</span>\n    <span class=\"hljs-keyword\">unsafe</span> {\n        asm!(\n            <span class=\"hljs-string\">\"\n             nop\n             nop\n             nop\n             nop\n             nop\n             nop\n             nop\n             nop\n             nop\n             lea eax, [rdi+2]\n             ret\n        \"</span>,\n            options(noreturn)\n        );\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">do_twice</span></span>(f: <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span></span>(<span class=\"hljs-built_in\">i32</span>) -&gt; <span class=\"hljs-built_in\">i32</span>, arg: <span class=\"hljs-built_in\">i32</span>) -&gt; <span class=\"hljs-built_in\">i32</span> {\n    f(arg) + f(arg)\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> answer = do_twice(add_one, <span class=\"hljs-number\">5</span>);\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The answer is: {}\"</span>, answer);\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"With CFI enabled, you should not see the next answer\"</span>);\n    <span class=\"hljs-keyword\">let</span> f: <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span></span>(<span class=\"hljs-built_in\">i32</span>) -&gt; <span class=\"hljs-built_in\">i32</span> = <span class=\"hljs-keyword\">unsafe</span> {\n        <span class=\"hljs-comment\">// Offset 0 is a valid branch/call destination (i.e., the function entry</span>\n        <span class=\"hljs-comment\">// point), but offsets 1-8 within the landing pad/nop block are invalid</span>\n        <span class=\"hljs-comment\">// branch/call destinations (i.e., within the body of the function).</span>\n        mem::transmute::&lt;*<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">u8</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span></span>(<span class=\"hljs-built_in\">i32</span>) -&gt; <span class=\"hljs-built_in\">i32</span>&gt;((add_two <span class=\"hljs-keyword\">as</span> *<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">u8</span>).offset(<span class=\"hljs-number\">5</span>))\n    };\n    <span class=\"hljs-keyword\">let</span> next_answer = do_twice(f, <span class=\"hljs-number\">5</span>);\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The next answer is: {}\"</span>, next_answer);\n}</code></pre>\n<p>Fig. 1. Redirecting control flow using an indirect branch/call to an invalid\ndestination (i.e., within the body of the function).</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-shell hljs\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run --release</span>\n   Compiling rust-cfi-1 v0.1.0 (/home/rcvalle/rust-cfi-1)\n    Finished release [optimized] target(s) in 0.42s\n     Running `target/release/rust-cfi-1`\nThe answer is: 12\nWith CFI enabled, you should not see the next answer\nThe next answer is: 14\n<span class=\"hljs-meta\">$</span>\n</code></pre>\n<p>Fig. 2. Build and execution of Fig. 1 with LLVM CFI disabled.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-shell hljs\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> RUSTFLAGS=<span class=\"hljs-string\">\"-Clinker-plugin-lto -Clinker=clang -Clink-arg=-fuse-ld=lld -Zsanitizer=cfi\"</span> cargo run -Zbuild-std -Zbuild-std-features --release --target x86_64-unknown-linux-gnu</span>\n   ...\n   Compiling rust-cfi-1 v0.1.0 (/home/rcvalle/rust-cfi-1)\n    Finished release [optimized] target(s) in 1m 08s\n     Running `target/x86_64-unknown-linux-gnu/release/rust-cfi-1`\nThe answer is: 12\nWith CFI enabled, you should not see the next answer\nIllegal instruction\n<span class=\"hljs-meta\">$</span>\n</code></pre>\n<p>Fig. 3. Build and execution of Fig. 1 with LLVM CFI enabled.</p>\n<p>When LLVM CFI is enabled, if there are any attempts to change/hijack control\nflow using an indirect branch/call to an invalid destination, the execution is\nterminated (see Fig. 3).</p>\n<h2 id=\"example-2-redirecting-control-flow-using-an-indirect-branchcall-to-a-function-with-a-different-number-of-parameters\"><a class=\"header\" href=\"#example-2-redirecting-control-flow-using-an-indirect-branchcall-to-a-function-with-a-different-number-of-parameters\">Example 2: Redirecting control flow using an indirect branch/call to a function with a different number of parameters</a></h2>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-keyword\">use</span> std::mem;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">add_one</span></span>(x: <span class=\"hljs-built_in\">i32</span>) -&gt; <span class=\"hljs-built_in\">i32</span> {\n    x + <span class=\"hljs-number\">1</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">add_two</span></span>(x: <span class=\"hljs-built_in\">i32</span>, _y: <span class=\"hljs-built_in\">i32</span>) -&gt; <span class=\"hljs-built_in\">i32</span> {\n    x + <span class=\"hljs-number\">2</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">do_twice</span></span>(f: <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span></span>(<span class=\"hljs-built_in\">i32</span>) -&gt; <span class=\"hljs-built_in\">i32</span>, arg: <span class=\"hljs-built_in\">i32</span>) -&gt; <span class=\"hljs-built_in\">i32</span> {\n    f(arg) + f(arg)\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> answer = do_twice(add_one, <span class=\"hljs-number\">5</span>);\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The answer is: {}\"</span>, answer);\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"With CFI enabled, you should not see the next answer\"</span>);\n    <span class=\"hljs-keyword\">let</span> f: <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span></span>(<span class=\"hljs-built_in\">i32</span>) -&gt; <span class=\"hljs-built_in\">i32</span> =\n        <span class=\"hljs-keyword\">unsafe</span> { mem::transmute::&lt;*<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">u8</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span></span>(<span class=\"hljs-built_in\">i32</span>) -&gt; <span class=\"hljs-built_in\">i32</span>&gt;(add_two <span class=\"hljs-keyword\">as</span> *<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">u8</span>) };\n    <span class=\"hljs-keyword\">let</span> next_answer = do_twice(f, <span class=\"hljs-number\">5</span>);\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The next answer is: {}\"</span>, next_answer);\n}</code></pre></pre>\n<p>Fig. 4. Redirecting control flow using an indirect branch/call to a function\nwith a different number of parameters than arguments intended/passed in the\ncall/branch site.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-shell hljs\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run --release</span>\n   Compiling rust-cfi-2 v0.1.0 (/home/rcvalle/rust-cfi-2)\n    Finished release [optimized] target(s) in 0.43s\n     Running `target/release/rust-cfi-2`\nThe answer is: 12\nWith CFI enabled, you should not see the next answer\nThe next answer is: 14\n<span class=\"hljs-meta\">$</span>\n</code></pre>\n<p>Fig. 5. Build and execution of Fig. 4 with LLVM CFI disabled.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-shell hljs\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> RUSTFLAGS=<span class=\"hljs-string\">\"-Clinker-plugin-lto -Clinker=clang -Clink-arg=-fuse-ld=lld -Zsanitizer=cfi\"</span> cargo run -Zbuild-std -Zbuild-std-features --release --target x86_64-unknown-linux-gnu</span>\n   ...\n   Compiling rust-cfi-2 v0.1.0 (/home/rcvalle/rust-cfi-2)\n    Finished release [optimized] target(s) in 1m 08s\n     Running `target/x86_64-unknown-linux-gnu/release/rust-cfi-2`\nThe answer is: 12\nWith CFI enabled, you should not see the next answer\nIllegal instruction\n<span class=\"hljs-meta\">$</span>\n</code></pre>\n<p>Fig. 6. Build and execution of Fig. 4 with LLVM CFI enabled.</p>\n<p>When LLVM CFI is enabled, if there are any attempts to change/hijack control\nflow using an indirect branch/call to a function with different number of\nparameters than arguments intended/passed in the call/branch site, the\nexecution is also terminated (see Fig. 6).</p>\n<h2 id=\"example-3-redirecting-control-flow-using-an-indirect-branchcall-to-a-function-with-different-return-and-parameter-types\"><a class=\"header\" href=\"#example-3-redirecting-control-flow-using-an-indirect-branchcall-to-a-function-with-different-return-and-parameter-types\">Example 3: Redirecting control flow using an indirect branch/call to a function with different return and parameter types</a></h2>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-keyword\">use</span> std::mem;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">add_one</span></span>(x: <span class=\"hljs-built_in\">i32</span>) -&gt; <span class=\"hljs-built_in\">i32</span> {\n    x + <span class=\"hljs-number\">1</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">add_two</span></span>(x: <span class=\"hljs-built_in\">i64</span>) -&gt; <span class=\"hljs-built_in\">i64</span> {\n    x + <span class=\"hljs-number\">2</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">do_twice</span></span>(f: <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span></span>(<span class=\"hljs-built_in\">i32</span>) -&gt; <span class=\"hljs-built_in\">i32</span>, arg: <span class=\"hljs-built_in\">i32</span>) -&gt; <span class=\"hljs-built_in\">i32</span> {\n    f(arg) + f(arg)\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> answer = do_twice(add_one, <span class=\"hljs-number\">5</span>);\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The answer is: {}\"</span>, answer);\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"With CFI enabled, you should not see the next answer\"</span>);\n    <span class=\"hljs-keyword\">let</span> f: <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span></span>(<span class=\"hljs-built_in\">i32</span>) -&gt; <span class=\"hljs-built_in\">i32</span> =\n        <span class=\"hljs-keyword\">unsafe</span> { mem::transmute::&lt;*<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">u8</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span></span>(<span class=\"hljs-built_in\">i32</span>) -&gt; <span class=\"hljs-built_in\">i32</span>&gt;(add_two <span class=\"hljs-keyword\">as</span> *<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">u8</span>) };\n    <span class=\"hljs-keyword\">let</span> next_answer = do_twice(f, <span class=\"hljs-number\">5</span>);\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The next answer is: {}\"</span>, next_answer);\n}</code></pre></pre>\n<p>Fig. 7. Redirecting control flow using an indirect branch/call to a function\nwith different return and parameter types than the return type expected and\narguments intended/passed at the call/branch site.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-shell hljs\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run --release</span>\n   Compiling rust-cfi-3 v0.1.0 (/home/rcvalle/rust-cfi-3)\n    Finished release [optimized] target(s) in 0.44s\n     Running `target/release/rust-cfi-3`\nThe answer is: 12\nWith CFI enabled, you should not see the next answer\nThe next answer is: 14\n<span class=\"hljs-meta\">$</span>\n</code></pre>\n<p>Fig. 8. Build and execution of Fig. 7 with LLVM CFI disabled.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-shell hljs\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> RUSTFLAGS=<span class=\"hljs-string\">\"-Clinker-plugin-lto -Clinker=clang -Clink-arg=-fuse-ld=lld -Zsanitizer=cfi\"</span> cargo run -Zbuild-std -Zbuild-std-features --release --target x86_64-unknown-linux-gnu</span>\n   ...\n   Compiling rust-cfi-3 v0.1.0 (/home/rcvalle/rust-cfi-3)\n    Finished release [optimized] target(s) in 1m 07s\n     Running `target/x86_64-unknown-linux-gnu/release/rust-cfi-3`\nThe answer is: 12\nWith CFI enabled, you should not see the next answer\nIllegal instruction\n<span class=\"hljs-meta\">$</span>\n</code></pre>\n<p>Fig. 9. Build and execution of Fig. 7 with LLVM CFI enabled.</p>\n<p>When LLVM CFI is enabled, if there are any attempts to change/hijack control\nflow using an indirect branch/call to a function with different return and\nparameter types than the return type expected and arguments intended/passed in\nthe call/branch site, the execution is also terminated (see Fig. 9).</p>\n<h2 id=\"example-4-redirecting-control-flow-using-an-indirect-branchcall-to-a-function-with-different-return-and-parameter-types-across-the-ffi-boundary\"><a class=\"header\" href=\"#example-4-redirecting-control-flow-using-an-indirect-branchcall-to-a-function-with-different-return-and-parameter-types-across-the-ffi-boundary\">Example 4: Redirecting control flow using an indirect branch/call to a function with different return and parameter types across the FFI boundary</a></h2>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-ignore (cannot-test-this-because-uses-custom-build) hljs\">int\ndo_twice(int (*fn)(int), int arg)\n{\n    return fn(arg) + fn(arg);\n}\n</code></pre>\n<p>Fig. 10. Example C library.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-ignore (cannot-test-this-because-uses-custom-build) hljs\">use std::mem;\n\n#[link(name = \"foo\")]\nextern \"C\" {\n    fn do_twice(f: unsafe extern \"C\" fn(i32) -&gt; i32, arg: i32) -&gt; i32;\n}\n\nunsafe extern \"C\" fn add_one(x: i32) -&gt; i32 {\n    x + 1\n}\n\nunsafe extern \"C\" fn add_two(x: i64) -&gt; i64 {\n    x + 2\n}\n\nfn main() {\n    let answer = unsafe { do_twice(add_one, 5) };\n\n    println!(\"The answer is: {}\", answer);\n\n    println!(\"With CFI enabled, you should not see the next answer\");\n    let f: unsafe extern \"C\" fn(i32) -&gt; i32 = unsafe {\n        mem::transmute::&lt;*const u8, unsafe extern \"C\" fn(i32) -&gt; i32&gt;(add_two as *const u8)\n    };\n    let next_answer = unsafe { do_twice(f, 5) };\n\n    println!(\"The next answer is: {}\", next_answer);\n}\n</code></pre>\n<p>Fig. 11. Redirecting control flow using an indirect branch/call to a function\nwith different return and parameter types than the return type expected and\narguments intended/passed in the call/branch site, across the FFI boundary.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-shell hljs\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> make</span>\nmkdir -p target/release\nclang -I. -Isrc -Wall -c src/foo.c -o target/release/libfoo.o\nllvm-ar rcs target/release/libfoo.a target/release/libfoo.o\nRUSTFLAGS=\"-L./target/release -Clinker=clang -Clink-arg=-fuse-ld=lld\" cargo build --release\n   Compiling rust-cfi-4 v0.1.0 (/home/rcvalle/rust-cfi-4)\n    Finished release [optimized] target(s) in 0.49s\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> ./target/release/rust-cfi-4</span>\nThe answer is: 12\nWith CFI enabled, you should not see the next answer\nThe next answer is: 14\n<span class=\"hljs-meta\">$</span>\n</code></pre>\n<p>Fig. 12. Build and execution of Figs. 10–11 with LLVM CFI disabled.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-shell hljs\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> make</span>\nmkdir -p target/release\nclang -I. -Isrc -Wall -flto -fsanitize=cfi -fsanitize-cfi-icall-experimental-normalize-integers -fvisibility=hidden -c -emit-llvm src/foo.c -o target/release/libfoo.bc\nllvm-ar rcs target/release/libfoo.a target/release/libfoo.bc\nRUSTFLAGS=\"-L./target/release -Clinker-plugin-lto -Clinker=clang -Clink-arg=-fuse-ld=lld -Zsanitizer=cfi -Zsanitizer-cfi-normalize-integers\" cargo build -Zbuild-std -Zbuild-std-features --release --target x86_64-unknown-linux-gnu\n   ...\n   Compiling rust-cfi-4 v0.1.0 (/home/rcvalle/rust-cfi-4)\n    Finished release [optimized] target(s) in 1m 06s\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> ./target/x86_64-unknown-linux-gnu/release/rust-cfi-4</span>\nThe answer is: 12\nWith CFI enabled, you should not see the next answer\nIllegal instruction\n<span class=\"hljs-meta\">$</span>\n</code></pre>\n<p>Fig. 13. Build and execution of FIgs. 10–11 with LLVM CFI enabled.</p>\n<p>When LLVM CFI is enabled, if there are any attempts to redirect control flow\nusing an indirect branch/call to a function with different return and parameter\ntypes than the return type expected and arguments intended/passed in the\ncall/branch site, even across the FFI boundary and for extern \"C\" function types\nindirectly called (i.e., callbacks/function pointers) across the FFI boundary,\nthe execution is also terminated (see Fig. 13).</p>\n<h1 id=\"hwaddresssanitizer\"><a class=\"header\" href=\"#hwaddresssanitizer\">HWAddressSanitizer</a></h1>\n<p>HWAddressSanitizer is a newer variant of AddressSanitizer that consumes much\nless memory.</p>\n<p>HWAddressSanitizer is supported on the following targets:</p>\n<ul>\n<li><code class=\"hljs\">aarch64-linux-android</code></li>\n<li><code class=\"hljs\">aarch64-unknown-linux-gnu</code></li>\n</ul>\n<p>HWAddressSanitizer requires <code class=\"hljs\">tagged-globals</code> target feature to instrument\nglobals. To enable this target feature compile with <code class=\"hljs\">-C target-feature=+tagged-globals</code></p>\n<p>See the <a href=\"https://clang.llvm.org/docs/HardwareAssistedAddressSanitizerDesign.html\">Clang HWAddressSanitizer documentation</a> for more details.</p>\n<h2 id=\"example-5\"><a class=\"header\" href=\"#example-5\">Example</a></h2>\n<p>Heap buffer overflow:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> xs = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n    <span class=\"hljs-keyword\">let</span> _y = <span class=\"hljs-keyword\">unsafe</span> { *xs.as_ptr().offset(<span class=\"hljs-number\">4</span>) };\n}</code></pre></pre>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-shell hljs\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> rustc main.rs -Zsanitizer=hwaddress -C target-feature=+tagged-globals -C</span>\nlinker=aarch64-linux-gnu-gcc -C link-arg=-fuse-ld=lld --target\naarch64-unknown-linux-gnu\n</code></pre>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-shell hljs\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> ./main</span>\n==241==ERROR: HWAddressSanitizer: tag-mismatch on address 0xefdeffff0050 at pc 0xaaaae0ae4a98\nREAD of size 4 at 0xefdeffff0050 tags: 2c/00 (ptr/mem) in thread T0\n    #0 0xaaaae0ae4a94  (/.../main+0x54a94)\n    ...\n\n[0xefdeffff0040,0xefdeffff0060) is a small allocated heap chunk; size: 32 offset: 16\n0xefdeffff0050 is located 0 bytes to the right of 16-byte region [0xefdeffff0040,0xefdeffff0050)\nallocated here:\n    #0 0xaaaae0acb80c  (/.../main+0x3b80c)\n    ...\n\nThread: T0 0xeffe00002000 stack: [0xffffc28ad000,0xffffc30ad000) sz: 8388608 tls: [0xffffaa10a020,0xffffaa10a7d0)\nMemory tags around the buggy address (one tag corresponds to 16 bytes):\n  0xfefcefffef80: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n  0xfefcefffef90: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n  0xfefcefffefa0: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n  0xfefcefffefb0: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n  0xfefcefffefc0: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n  0xfefcefffefd0: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n  0xfefcefffefe0: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n  0xfefcefffeff0: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n=&gt;0xfefceffff000: d7  d7  05  00  2c [00] 00  00  00  00  00  00  00  00  00  00\n  0xfefceffff010: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n  0xfefceffff020: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n  0xfefceffff030: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n  0xfefceffff040: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n  0xfefceffff050: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n  0xfefceffff060: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n  0xfefceffff070: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n  0xfefceffff080: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\nTags for short granules around the buggy address (one tag corresponds to 16 bytes):\n  0xfefcefffeff0: ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..\n=&gt;0xfefceffff000: ..  ..  8c  ..  .. [..] ..  ..  ..  ..  ..  ..  ..  ..  ..  ..\n  0xfefceffff010: ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..\nSee https://clang.llvm.org/docs/HardwareAssistedAddressSanitizerDesign.html#short-granules for a description of short granule tags\nRegisters where the failure occurred (pc 0xaaaae0ae4a98):\n    x0  2c00efdeffff0050  x1  0000000000000004  x2  0000000000000004  x3  0000000000000000\n    x4  0000fffefc30ac37  x5  000000000000005d  x6  00000ffffc30ac37  x7  0000efff00000000\n    x8  2c00efdeffff0050  x9  0200efff00000000  x10 0000000000000000  x11 0200efff00000000\n    x12 0200effe00000310  x13 0200effe00000310  x14 0000000000000008  x15 5d00ffffc30ac360\n    x16 0000aaaae0ad062c  x17 0000000000000003  x18 0000000000000001  x19 0000ffffc30ac658\n    x20 4e00ffffc30ac6e0  x21 0000aaaae0ac5e10  x22 0000000000000000  x23 0000000000000000\n    x24 0000000000000000  x25 0000000000000000  x26 0000000000000000  x27 0000000000000000\n    x28 0000000000000000  x29 0000ffffc30ac5a0  x30 0000aaaae0ae4a98\nSUMMARY: HWAddressSanitizer: tag-mismatch (/.../main+0x54a94)\n</code></pre>\n<h1 id=\"kernelcontrolflowintegrity\"><a class=\"header\" href=\"#kernelcontrolflowintegrity\">KernelControlFlowIntegrity</a></h1>\n<p>The LLVM Kernel Control Flow Integrity (CFI) support to the Rust compiler\ninitially provides forward-edge control flow protection for operating systems\nkernels for Rust-compiled code only by aggregating function pointers in groups\nidentified by their return and parameter types. (See <a href=\"https://github.com/llvm/llvm-project/commit/cff5bef948c91e4919de8a5fb9765e0edc13f3de\">LLVM commit cff5bef \"KCFI\nsanitizer\"</a>.)</p>\n<p>Forward-edge control flow protection for C or C++ and Rust -compiled code \"mixed\nbinaries\" (i.e., for when C or C++ and Rust -compiled code share the same\nvirtual address space) will be provided in later work by defining and using\ncompatible type identifiers (see Type metadata in the design document in the\ntracking issue <a href=\"https://github.com/rust-lang/rust/issues/89653\">#89653</a>).</p>\n<p>LLVM KCFI can be enabled with <code class=\"hljs\">-Zsanitizer=kcfi</code>.</p>\n<p>LLVM KCFI is supported on the following targets:</p>\n<ul>\n<li><code class=\"hljs\">aarch64-linux-android</code></li>\n<li><code class=\"hljs\">aarch64-unknown-linux-gnu</code></li>\n<li><code class=\"hljs\">x86_64-linux-android</code></li>\n<li><code class=\"hljs\">x86_64-unknown-linux-gnu</code></li>\n</ul>\n<p>See the <a href=\"https://clang.llvm.org/docs/ControlFlowIntegrity.html#fsanitize-kcfi\">Clang KernelControlFlowIntegrity documentation</a> for more\ndetails.</p>\n<h1 id=\"dataflowsanitizer\"><a class=\"header\" href=\"#dataflowsanitizer\">DataFlowSanitizer</a></h1>\n<p>DataFlowSanitizer is a generalised dynamic data flow analysis.</p>\n<p>Unlike other Sanitizer tools, this tool is not designed to detect a specific\nclass of bugs on its own. Instead, it provides a generic dynamic data flow\nanalysis framework to be used by clients to help detect application-specific\nissues within their own code.</p>\n<p>DataFlowSanitizer is supported on the following targets:</p>\n<ul>\n<li><code class=\"hljs\">x86_64-unknown-linux-gnu</code></li>\n</ul>\n<p>See the <a href=\"https://clang.llvm.org/docs/DataFlowSanitizer.html\">Clang DataFlowSanitizer documentation</a> for more details.</p>\n<h1 id=\"kerneladdresssanitizer\"><a class=\"header\" href=\"#kerneladdresssanitizer\">KernelAddressSanitizer</a></h1>\n<p>KernelAddressSanitizer (KASAN) is a freestanding version of AddressSanitizer\nwhich is suitable for detecting memory errors in programs which do not have a\nruntime environment, such as operating system kernels. KernelAddressSanitizer\nrequires manual implementation of the underlying functions used for tracking\nKernelAddressSanitizer state.</p>\n<p>KernelAddressSanitizer is supported on the following targets:</p>\n<ul>\n<li><code class=\"hljs\">aarch64-unknown-none</code></li>\n<li><code class=\"hljs\">riscv64gc-unknown-none-elf</code></li>\n<li><code class=\"hljs\">riscv64imac-unknown-none-elf</code></li>\n<li><code class=\"hljs\">x86_64-unknown-none</code></li>\n</ul>\n<p>See the <a href=\"https://www.kernel.org/doc/html/latest/dev-tools/kasan.html\">Linux Kernel's KernelAddressSanitizer documentation</a> for\nmore details.</p>\n<h1 id=\"leaksanitizer\"><a class=\"header\" href=\"#leaksanitizer\">LeakSanitizer</a></h1>\n<p>LeakSanitizer is run-time memory leak detector.</p>\n<p>LeakSanitizer is supported on the following targets:</p>\n<ul>\n<li><code class=\"hljs\">aarch64-apple-darwin</code></li>\n<li><code class=\"hljs\">aarch64-unknown-linux-gnu</code></li>\n<li><code class=\"hljs\">x86_64-apple-darwin</code></li>\n<li><code class=\"hljs\">x86_64-unknown-linux-gnu</code></li>\n</ul>\n<p>See the <a href=\"https://clang.llvm.org/docs/LeakSanitizer.html\">Clang LeakSanitizer documentation</a> for more details.</p>\n<h1 id=\"memorysanitizer\"><a class=\"header\" href=\"#memorysanitizer\">MemorySanitizer</a></h1>\n<p>MemorySanitizer is detector of uninitialized reads.</p>\n<p>MemorySanitizer is supported on the following targets:</p>\n<ul>\n<li><code class=\"hljs\">aarch64-unknown-linux-gnu</code></li>\n<li><code class=\"hljs\">x86_64-unknown-freebsd</code></li>\n<li><code class=\"hljs\">x86_64-unknown-linux-gnu</code></li>\n</ul>\n<p>MemorySanitizer requires all program code to be instrumented. C/C++ dependencies\nneed to be recompiled using Clang with <code class=\"hljs\">-fsanitize=memory</code> option. Failing to\nachieve that will result in false positive reports.</p>\n<p>See the <a href=\"https://clang.llvm.org/docs/MemorySanitizer.html\">Clang MemorySanitizer documentation</a> for more details.</p>\n<h2 id=\"example-6\"><a class=\"header\" href=\"#example-6\">Example</a></h2>\n<p>Detecting the use of uninitialized memory. The <code class=\"hljs\">-Zbuild-std</code> flag rebuilds and\ninstruments the standard library, and is strictly necessary for the correct\noperation of the tool. The <code class=\"hljs\">-Zsanitizer-memory-track-origins</code> enables tracking\nof the origins of uninitialized memory:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-keyword\">use</span> std::mem::MaybeUninit;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">unsafe</span> {\n        <span class=\"hljs-keyword\">let</span> a = MaybeUninit::&lt;[<span class=\"hljs-built_in\">usize</span>; <span class=\"hljs-number\">4</span>]&gt;::uninit();\n        <span class=\"hljs-keyword\">let</span> a = a.assume_init();\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{}\"</span>, a[<span class=\"hljs-number\">2</span>]);\n    }\n}</code></pre></pre>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-shell hljs\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> <span class=\"hljs-built_in\">export</span> \\</span>\n  RUSTFLAGS='-Zsanitizer=memory -Zsanitizer-memory-track-origins' \\\n  RUSTDOCFLAGS='-Zsanitizer=memory -Zsanitizer-memory-track-origins'\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo clean</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run -Zbuild-std --target x86_64-unknown-linux-gnu</span>\n==9416==WARNING: MemorySanitizer: use-of-uninitialized-value\n    #0 0x560c04f7488a in core::fmt::num::imp::fmt_u64::haa293b0b098501ca $RUST/build/x86_64-unknown-linux-gnu/stage1/lib/rustlib/src/rust/src/libcore/fmt/num.rs:202:16\n...\n  Uninitialized value was stored to memory at\n    #0 0x560c04ae898a in __msan_memcpy.part.0 $RUST/src/llvm-project/compiler-rt/lib/msan/msan_interceptors.cc:1558:3\n    #1 0x560c04b2bf88 in memory::main::hd2333c1899d997f5 $CWD/src/main.rs:6:16\n\n  Uninitialized value was created by an allocation of 'a' in the stack frame of function '_ZN6memory4main17hd2333c1899d997f5E'\n    #0 0x560c04b2bc50 in memory::main::hd2333c1899d997f5 $CWD/src/main.rs:3\n</code></pre>\n<h1 id=\"memtagsanitizer\"><a class=\"header\" href=\"#memtagsanitizer\">MemTagSanitizer</a></h1>\n<p>MemTagSanitizer detects a similar class of errors as AddressSanitizer and HardwareAddressSanitizer, but with lower overhead suitable for use as hardening for production binaries.</p>\n<p>MemTagSanitizer is supported on the following targets:</p>\n<ul>\n<li><code class=\"hljs\">aarch64-linux-android</code></li>\n<li><code class=\"hljs\">aarch64-unknown-linux-gnu</code></li>\n</ul>\n<p>MemTagSanitizer requires hardware support and the <code class=\"hljs\">mte</code> target feature.\nTo enable this target feature compile with <code class=\"hljs\">-C target-feature=\"+mte\"</code>.</p>\n<p>See the <a href=\"https://llvm.org/docs/MemTagSanitizer.html\">LLVM MemTagSanitizer documentation</a> for more details.</p>\n<h1 id=\"safestack\"><a class=\"header\" href=\"#safestack\">SafeStack</a></h1>\n<p>SafeStack provides backward edge control flow protection by separating the stack into data which is only accessed safely (the safe stack) and all other data (the unsafe stack).</p>\n<p>SafeStack can be enabled with the <code class=\"hljs\">-Zsanitizer=safestack</code> option and is supported on the following targets:</p>\n<ul>\n<li><code class=\"hljs\">x86_64-unknown-linux-gnu</code></li>\n</ul>\n<p>See the <a href=\"https://clang.llvm.org/docs/SafeStack.html\">Clang SafeStack documentation</a> for more details.</p>\n<h1 id=\"shadowcallstack\"><a class=\"header\" href=\"#shadowcallstack\">ShadowCallStack</a></h1>\n<p>ShadowCallStack provides backward edge control flow protection by storing a function's return address in a separately allocated 'shadow call stack' and loading the return address from that shadow call stack.</p>\n<p>ShadowCallStack requires a platform ABI which reserves <code class=\"hljs\">x18</code> as the instrumentation makes use of this register.</p>\n<p>ShadowCallStack can be enabled with <code class=\"hljs\">-Zsanitizer=shadow-call-stack</code> option and is supported on the following targets:</p>\n<ul>\n<li><code class=\"hljs\">aarch64-linux-android</code></li>\n</ul>\n<p>A runtime must be provided by the application or operating system.</p>\n<p>See the <a href=\"https://clang.llvm.org/docs/ShadowCallStack.html\">Clang ShadowCallStack documentation</a> for more details.</p>\n<h1 id=\"threadsanitizer\"><a class=\"header\" href=\"#threadsanitizer\">ThreadSanitizer</a></h1>\n<p>ThreadSanitizer is a data race detection tool. It is supported on the following\ntargets:</p>\n<ul>\n<li><code class=\"hljs\">aarch64-apple-darwin</code></li>\n<li><code class=\"hljs\">aarch64-unknown-linux-gnu</code></li>\n<li><code class=\"hljs\">x86_64-apple-darwin</code></li>\n<li><code class=\"hljs\">x86_64-unknown-freebsd</code></li>\n<li><code class=\"hljs\">x86_64-unknown-linux-gnu</code></li>\n</ul>\n<p>To work correctly ThreadSanitizer needs to be \"aware\" of all synchronization\noperations in a program. It generally achieves that through combination of\nlibrary interception (for example synchronization performed through\n<code class=\"hljs\">pthread_mutex_lock</code> / <code class=\"hljs\">pthread_mutex_unlock</code>) and compile time instrumentation\n(e.g. atomic operations). Using it without instrumenting all the program code\ncan lead to false positive reports.</p>\n<p>ThreadSanitizer does not support atomic fences <code class=\"hljs\">std::sync::atomic::fence</code>,\nnor synchronization performed using inline assembly code.</p>\n<p>See the <a href=\"https://clang.llvm.org/docs/ThreadSanitizer.html\">Clang ThreadSanitizer documentation</a> for more details.</p>\n<h2 id=\"example-7\"><a class=\"header\" href=\"#example-7\">Example</a></h2>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">mut</span> A: <span class=\"hljs-built_in\">usize</span> = <span class=\"hljs-number\">0</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> t = std::thread::spawn(|| {\n        <span class=\"hljs-keyword\">unsafe</span> { A += <span class=\"hljs-number\">1</span> };\n    });\n    <span class=\"hljs-keyword\">unsafe</span> { A += <span class=\"hljs-number\">1</span> };\n\n    t.join().unwrap();\n}</code></pre></pre>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-shell hljs\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> <span class=\"hljs-built_in\">export</span> RUSTFLAGS=-Zsanitizer=thread RUSTDOCFLAGS=-Zsanitizer=thread</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run -Zbuild-std --target x86_64-unknown-linux-gnu</span>\n==================\nWARNING: ThreadSanitizer: data race (pid=10574)\n  Read of size 8 at 0x5632dfe3d030 by thread T1:\n    #0 example::main::_$u7b$$u7b$closure$u7d$$u7d$::h23f64b0b2f8c9484 ../src/main.rs:5:18 (example+0x86cec)\n    ...\n\n  Previous write of size 8 at 0x5632dfe3d030 by main thread:\n    #0 example::main::h628ffc6626ed85b2 /.../src/main.rs:7:14 (example+0x868c8)\n    ...\n    #11 main &lt;null&gt; (example+0x86a1a)\n\n  Location is global 'example::A::h43ac149ddf992709' of size 8 at 0x5632dfe3d030 (example+0x000000bd9030)\n</code></pre>\n<h1 id=\"instrumentation-of-external-dependencies-and-std\"><a class=\"header\" href=\"#instrumentation-of-external-dependencies-and-std\">Instrumentation of external dependencies and std</a></h1>\n<p>The sanitizers to varying degrees work correctly with partially instrumented\ncode. On the one extreme is LeakSanitizer that doesn't use any compile time\ninstrumentation, on the other is MemorySanitizer that requires that all program\ncode to be instrumented (failing to achieve that will inevitably result in\nfalse positives).</p>\n<p>It is strongly recommended to combine sanitizers with recompiled and\ninstrumented standard library, for example using <a href=\"compiler-flags/../../cargo/reference/unstable.html#build-std\">cargo <code class=\"hljs\">-Zbuild-std</code>\nfunctionality</a>.</p>\n<h1 id=\"working-with-other-languages\"><a class=\"header\" href=\"#working-with-other-languages\">Working with other languages</a></h1>\n<p>Sanitizers rely on compiler runtime libraries to function properly. Rust links\nin its own compiler runtime which might conflict with runtimes required by\nlanguages such as C++. Since Rust's runtime doesn't always contain the symbols\nrequired by C++ instrumented code, you might need to skip linking it so another\nruntime can be linked instead.</p>\n<p>A separate unstable option <code class=\"hljs\">-Zexternal-clangrt</code> can be used to make rustc skip\nlinking the compiler runtime for the sanitizer. This will require you to link\nin an external runtime, such as from clang instead.</p>\n<h1 id=\"build-scripts-and-procedural-macros\"><a class=\"header\" href=\"#build-scripts-and-procedural-macros\">Build scripts and procedural macros</a></h1>\n<p>Use of sanitizers together with build scripts and procedural macros is\ntechnically possible, but in almost all cases it would be best avoided.  This\nis especially true for procedural macros which would require an instrumented\nversion of rustc.</p>\n<p>In more practical terms when using cargo always remember to pass <code class=\"hljs\">--target</code>\nflag, so that rustflags will not be applied to build scripts and procedural\nmacros.</p>\n<h1 id=\"symbolizing-the-reports\"><a class=\"header\" href=\"#symbolizing-the-reports\">Symbolizing the Reports</a></h1>\n<p>Sanitizers produce symbolized stacktraces when llvm-symbolizer binary is in <code class=\"hljs\">PATH</code>.</p>\n<h1 id=\"additional-information\"><a class=\"header\" href=\"#additional-information\">Additional Information</a></h1>\n<ul>\n<li><a href=\"https://github.com/google/sanitizers/wiki/\">Sanitizers project page</a></li>\n<li><a href=\"https://clang.llvm.org/docs/AddressSanitizer.html\">AddressSanitizer in Clang</a></li>\n<li><a href=\"https://clang.llvm.org/docs/ControlFlowIntegrity.html\">ControlFlowIntegrity in Clang</a></li>\n<li><a href=\"https://clang.llvm.org/docs/DataFlowSanitizer.html\">DataFlowSanitizer in Clang</a></li>\n<li><a href=\"https://clang.llvm.org/docs/HardwareAssistedAddressSanitizerDesign.html\">HWAddressSanitizer in Clang</a></li>\n<li><a href=\"https://www.kernel.org/doc/html/latest/dev-tools/kasan.html\">Linux Kernel's KernelAddressSanitizer documentation</a></li>\n<li><a href=\"https://clang.llvm.org/docs/LeakSanitizer.html\">LeakSanitizer in Clang</a></li>\n<li><a href=\"https://clang.llvm.org/docs/MemorySanitizer.html\">MemorySanitizer in Clang</a></li>\n<li><a href=\"https://llvm.org/docs/MemTagSanitizer.html\">MemTagSanitizer in LLVM</a></li>\n<li><a href=\"https://clang.llvm.org/docs/ThreadSanitizer.html\">ThreadSanitizer in Clang</a></li>\n</ul>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"self-profile\"><a class=\"header\" href=\"#self-profile\"><code>self-profile</code></a></h1>\n<hr>\n<p>The <code class=\"hljs\">-Zself-profile</code> compiler flag enables rustc's internal profiler.\nWhen enabled, the compiler will output three binary files in the specified directory (or the current working directory if no directory is specified).\nThese files can be analyzed by using the tools in the <a href=\"https://github.com/rust-lang/measureme.git\"><code class=\"hljs\">measureme</code></a> repository.</p>\n<p>To control the data recorded in the trace files, use the <code class=\"hljs\">-Zself-profile-events</code> flag.</p>\n<p>For example:</p>\n<p>First, run a compilation session and provide the <code class=\"hljs\">-Zself-profile</code> flag:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> rustc --crate-name foo -Zself-profile</span>\n</code></pre>\n<p>This will generate three files in the working directory such as:</p>\n<ul>\n<li><code class=\"hljs\">foo-1234.events</code></li>\n<li><code class=\"hljs\">foo-1234.string_data</code></li>\n<li><code class=\"hljs\">foo-1234.string_index</code></li>\n</ul>\n<p>Where <code class=\"hljs\">foo</code> is the name of the crate and <code class=\"hljs\">1234</code> is the process id of the rustc process.</p>\n<p>To get a summary of where the compiler is spending its time:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> ../measureme/target/release/summarize summarize foo-1234</span>\n</code></pre>\n<p>To generate a flamegraph of the same data:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> ../measureme/target/release/inferno foo-1234</span>\n</code></pre>\n<p>To dump the event data in a Chromium-profiler compatible format:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> ../measureme/target/release/crox foo-1234</span>\n</code></pre>\n<p>For more information, consult the <a href=\"https://github.com/rust-lang/measureme.git\"><code class=\"hljs\">measureme</code></a> documentation.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"self-profile-events\"><a class=\"header\" href=\"#self-profile-events\"><code>self-profile-events</code></a></h1>\n<hr>\n<p>The <code class=\"hljs\">-Zself-profile-events</code> compiler flag controls what events are recorded by the self-profiler when it is enabled via the <code class=\"hljs\">-Zself-profile</code> flag.</p>\n<p>This flag takes a comma delimited list of event types to record.</p>\n<p>For example:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> rustc -Zself-profile -Zself-profile-events=default,args</span>\n</code></pre>\n<h2 id=\"event-types\"><a class=\"header\" href=\"#event-types\">Event types</a></h2>\n<ul>\n<li>\n<p><code class=\"hljs\">query-provider</code></p>\n<ul>\n<li>Traces each query used internally by the compiler.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"hljs\">generic-activity</code></p>\n<ul>\n<li>Traces other parts of the compiler not covered by the query system.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"hljs\">query-cache-hit</code></p>\n<ul>\n<li>Adds tracing information that records when the in-memory query cache is \"hit\" and does not need to re-execute a query which has been cached.</li>\n<li>Disabled by default because this significantly increases the trace file size.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"hljs\">query-blocked</code></p>\n<ul>\n<li>Tracks time that a query tries to run but is blocked waiting on another thread executing the same query to finish executing.</li>\n<li>Query blocking only occurs when the compiler is built with parallel mode support.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"hljs\">incr-cache-load</code></p>\n<ul>\n<li>Tracks time that is spent loading and deserializing query results from the incremental compilation on-disk cache.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"hljs\">query-keys</code></p>\n<ul>\n<li>Adds a serialized representation of each query's query key to the tracing data.</li>\n<li>Disabled by default because this significantly increases the trace file size.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"hljs\">function-args</code></p>\n<ul>\n<li>Adds additional tracing data to some <code class=\"hljs\">generic-activity</code> events.</li>\n<li>Disabled by default for parity with <code class=\"hljs\">query-keys</code>.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"hljs\">llvm</code></p>\n<ul>\n<li>Adds tracing information about LLVM passes and codegeneration.</li>\n<li>Disabled by default because this significantly increases the trace file size.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"event-synonyms\"><a class=\"header\" href=\"#event-synonyms\">Event synonyms</a></h2>\n<ul>\n<li>\n<p><code class=\"hljs\">none</code></p>\n<ul>\n<li>Disables all events.\nEquivalent to the self-profiler being disabled.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"hljs\">default</code></p>\n<ul>\n<li>The default set of events which stikes a balance between providing detailed tracing data and adding additional overhead to the compilation.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"hljs\">args</code></p>\n<ul>\n<li>Equivalent to <code class=\"hljs\">query-keys</code> and <code class=\"hljs\">function-args</code>.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"hljs\">all</code></p>\n<ul>\n<li>Enables all events.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"examples-3\"><a class=\"header\" href=\"#examples-3\">Examples</a></h2>\n<p>Enable the profiler and capture the default set of events (both invocations are equivalent):</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> rustc -Zself-profile</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> rustc -Zself-profile -Zself-profile-events=default</span>\n</code></pre>\n<p>Enable the profiler and capture the default events and their arguments:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> rustc -Zself-profile -Zself-profile-events=default,args</span>\n</code></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"shell-argfiles\"><a class=\"header\" href=\"#shell-argfiles\"><code>shell-argfiles</code></a></h1>\n<hr>\n<p>The <code class=\"hljs\">-Zshell-argfiles</code> compiler flag allows argfiles to be parsed using POSIX\n\"shell-style\" quoting. When enabled, the compiler will use <code class=\"hljs\">shlex</code> to parse the\narguments from argfiles specified with <code class=\"hljs\">@shell:&lt;path&gt;</code>.</p>\n<p>Because this feature controls the parsing of input arguments, the\n<code class=\"hljs\">-Zshell-argfiles</code> flag must be present before the argument specifying the\nshell-style argument file.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"src-hash-algorithm\"><a class=\"header\" href=\"#src-hash-algorithm\"><code>src-hash-algorithm</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/70401\">#70401</a>.</p>\n<hr>\n<p>The <code class=\"hljs\">-Z src-hash-algorithm</code> compiler flag controls which algorithm is used when hashing each source file. The hash is stored in the debug info and can be used by a debugger to verify the source code matches the executable.</p>\n<p>Supported hash algorithms are: <code class=\"hljs\">md5</code>, <code class=\"hljs\">sha1</code>, and <code class=\"hljs\">sha256</code>. Note that not all hash algorithms are supported by all debug info formats.</p>\n<p>By default, the compiler chooses the hash algorithm based on the target specification.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"temps-dir\"><a class=\"header\" href=\"#temps-dir\"><code>temps-dir</code></a></h1>\n<hr>\n<p>The <code class=\"hljs\">-Ztemps-dir</code> compiler flag specifies the directory to write the\nintermediate files in. If not set, the output directory is used. This option is\nuseful if you are running more than one instance of <code class=\"hljs\">rustc</code> (e.g. with different\n<code class=\"hljs\">--crate-type</code> settings), and you need to make sure they are not overwriting\neach other's intermediate files. No files are kept unless <code class=\"hljs\">-C save-temps=yes</code> is\nalso set.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"tiny-const-eval-limit\"><a class=\"header\" href=\"#tiny-const-eval-limit\"><code>tiny-const-eval-limit</code></a></h1>\n<hr>\n<p>The <code class=\"hljs\">-Ztiny-const-eval-limit</code> compiler flag sets a tiny, non-configurable limit for const eval.\nThis flag should only be used by const eval tests in the rustc test suite.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"tls_model\"><a class=\"header\" href=\"#tls_model\"><code>tls_model</code></a></h1>\n<p>The tracking issue for this feature is: None.</p>\n<hr>\n<p>Option <code class=\"hljs\">-Z tls-model</code> controls <a href=\"https://www.akkadia.org/drepper/tls.pdf\">TLS model</a> used to\ngenerate code for accessing <code class=\"hljs\">#[thread_local]</code> <code class=\"hljs\">static</code> items.</p>\n<p>Supported values for this option are:</p>\n<ul>\n<li><code class=\"hljs\">global-dynamic</code> - General Dynamic TLS Model (alternatively called Global Dynamic) is the most\ngeneral option usable in all circumstances, even if the TLS data is defined in a shared library\nloaded at runtime and is accessed from code outside of that library.\nThis is the default for most targets.</li>\n<li><code class=\"hljs\">local-dynamic</code> - model usable if the TLS data is only accessed from the shared library or\nexecutable it is defined in. The TLS data may be in a library loaded after startup (via <code class=\"hljs\">dlopen</code>).</li>\n<li><code class=\"hljs\">initial-exec</code> - model usable if the TLS data is defined in the executable or in a shared library\nloaded at program startup.\nThe TLS data must not be in a library loaded after startup (via <code class=\"hljs\">dlopen</code>).</li>\n<li><code class=\"hljs\">local-exec</code> - model usable only if the TLS data is defined directly in the executable,\nbut not in a shared library, and is accessed only from that executable.</li>\n<li><code class=\"hljs\">emulated</code> - Uses thread-specific data keys to implement emulated TLS.\nIt is like using a general-dynamic TLS model for all modes.</li>\n</ul>\n<p><code class=\"hljs\">rustc</code> and LLVM may use a more optimized model than specified if they know that we are producing\nan executable rather than a library, or that the <code class=\"hljs\">static</code> item is private enough.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"ub-checks\"><a class=\"header\" href=\"#ub-checks\"><code>ub-checks</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/123499\">#123499</a>.</p>\n<hr>\n<p>The <code class=\"hljs\">-Zub-checks</code> compiler flag enables additional runtime checks that detect some causes of Undefined Behavior at runtime.\nBy default, <code class=\"hljs\">-Zub-checks</code> flag inherits the value of <code class=\"hljs\">-Cdebug-assertions</code>.</p>\n<p>All checks are generated on a best-effort basis; even if we have a check implemented for some cause of Undefined Behavior, it may be possible for the check to not fire.\nIf a dependency is compiled with <code class=\"hljs\">-Zub-checks=no</code> but the final binary or library is compiled with <code class=\"hljs\">-Zub-checks=yes</code>, UB checks reached by the dependency are likely to be optimized out.</p>\n<p>When <code class=\"hljs\">-Zub-checks</code> detects UB, a non-unwinding panic is produced.\nThat means that we will not unwind the stack and will not call any <code class=\"hljs\">Drop</code> impls, but we will execute the configured panic hook.\nWe expect that unsafe code has been written which relies on code not unwinding which may have UB checks inserted.\nErgo, an unwinding panic could easily turn works-as-intended UB into a much bigger problem.\nCalling the panic hook theoretically has the same implications, but we expect that the standard library panic hook will be stateless enough to be always called, and that if a user has configured a panic hook that the hook may be very helpful to debugging the detected UB.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"unsound-mir-opts\"><a class=\"header\" href=\"#unsound-mir-opts\"><code>unsound-mir-opts</code></a></h1>\n<hr>\n<p>The <code class=\"hljs\">-Zunsound-mir-opts</code> compiler flag enables <a href=\"https://rustc-dev-guide.rust-lang.org/mir/optimizations.html\">MIR optimization passes</a> which can cause unsound behavior.\nThis flag should only be used by MIR optimization tests in the rustc test suite.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"virtual-function-elimination\"><a class=\"header\" href=\"#virtual-function-elimination\"><code>virtual-function-elimination</code></a></h1>\n<p>This option controls whether LLVM runs the Virtual Function Elimination (VFE)\noptimization. This optimization in only available with LTO, so this flag can\nonly be passed if <a href=\"compiler-flags/../../rustc/codegen-options/index.html#lto\"><code class=\"hljs\">-Clto</code></a> is also passed.</p>\n<p>VFE makes it possible to remove functions from vtables that are never\ndynamically called by the rest of the code. Without this flag, LLVM makes the\nreally conservative assumption, that if any function in a vtable is called, no\nfunction that is referenced by this vtable can be removed. With this flag\nadditional information are given to LLVM, so that it can determine which\nfunctions are actually called and remove the unused functions.</p>\n<h2 id=\"limitations\"><a class=\"header\" href=\"#limitations\">Limitations</a></h2>\n<p>At the time of writing this flag may remove vtable functions too eagerly. One\nsuch example is in this code:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Foo</span></span> { <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) { <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"foo\"</span>) } }\n\n<span class=\"hljs-keyword\">impl</span> Foo <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">usize</span> {}\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">FooBox</span></span>(<span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> Foo&gt;);\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">make_foo</span></span>() -&gt; FooBox { FooBox(<span class=\"hljs-built_in\">Box</span>::new(<span class=\"hljs-number\">0</span>)) }\n\n<span class=\"hljs-meta\">#[inline]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">f</span></span>(a: FooBox) { a.<span class=\"hljs-number\">0</span>.foo() }\n<span class=\"boring\">}</span></code></pre></pre>\n<p>In the above code the <code class=\"hljs\">Foo</code> trait is private, so an assumption is made that its\nfunctions can only be seen/called from the current crate and can therefore get\noptimized out, if unused. However, with <code class=\"hljs\">make_foo</code> you can produce a wrapped\n<code class=\"hljs\">dyn Foo</code> type outside of the current crate, which can then be used in <code class=\"hljs\">f</code>. Due\nto inlining of <code class=\"hljs\">f</code>, <code class=\"hljs\">Foo::foo</code> can then be called from a foreign crate. This can\nlead to miscompilations.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"wasm-c-abi\"><a class=\"header\" href=\"#wasm-c-abi\"><code>wasm-c-abi</code></a></h1>\n<p>This option controls whether Rust uses the spec-compliant C ABI when compiling\nfor the <code class=\"hljs\">wasm32-unknown-unknown</code> target.</p>\n<p>This makes it possible to be ABI-compatible with all other spec-compliant Wasm\nlike Rusts <code class=\"hljs\">wasm32-wasi</code>.</p>\n<p>This compiler flag is perma-unstable, as it will be enabled by default in the\nfuture with no option to fall back to the old non-spec-compliant ABI.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"language-features\"><a class=\"header\" href=\"#language-features\">Language features</a></h1>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"aarch64_ver_target_feature\"><a class=\"header\" href=\"#aarch64_ver_target_feature\"><code>aarch64_ver_target_feature</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/44839\">#44839</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"abi_avr_interrupt\"><a class=\"header\" href=\"#abi_avr_interrupt\"><code>abi_avr_interrupt</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/69664\">#69664</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"abi_c_cmse_nonsecure_call\"><a class=\"header\" href=\"#abi_c_cmse_nonsecure_call\"><code>abi_c_cmse_nonsecure_call</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/81391\">#81391</a></p>\n<hr>\n<p>The <a href=\"https://developer.arm.com/documentation/100690/latest/\">TrustZone-M\nfeature</a> is available\nfor targets with the Armv8-M architecture profile (<code class=\"hljs\">thumbv8m</code> in their target\nname).\nLLVM, the Rust compiler and the linker are providing\n<a href=\"https://developer.arm.com/documentation/ecm0359818/latest/\">support</a> for the\nTrustZone-M feature.</p>\n<p>One of the things provided, with this unstable feature, is the\n<code class=\"hljs\">C-cmse-nonsecure-call</code> function ABI. This ABI is used on function pointers to\nnon-secure code to mark a non-secure function call (see <a href=\"https://developer.arm.com/documentation/ecm0359818/latest/\">section\n5.5</a> for details).</p>\n<p>With this ABI, the compiler will do the following to perform the call:</p>\n<ul>\n<li>save registers needed after the call to Secure memory</li>\n<li>clear all registers that might contain confidential information</li>\n<li>clear the Least Significant Bit of the function address</li>\n<li>branches using the BLXNS instruction</li>\n</ul>\n<p>To avoid using the non-secure stack, the compiler will constrain the number and\ntype of parameters/return value.</p>\n<p>The <code class=\"hljs\">extern \"C-cmse-nonsecure-call\"</code> ABI is otherwise equivalent to the\n<code class=\"hljs\">extern \"C\"</code> ABI.</p>\n<!-- NOTE(ignore) this example is specific to thumbv8m targets -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-meta\">#![no_std]</span>\n<span class=\"hljs-meta\">#![feature(abi_c_cmse_nonsecure_call)]</span>\n\n<span class=\"hljs-meta\">#[no_mangle]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">call_nonsecure_function</span></span>(addr: <span class=\"hljs-built_in\">usize</span>) -&gt; <span class=\"hljs-built_in\">u32</span> {\n    <span class=\"hljs-keyword\">let</span> non_secure_function =\n        <span class=\"hljs-keyword\">unsafe</span> { core::mem::transmute::&lt;<span class=\"hljs-built_in\">usize</span>, <span class=\"hljs-keyword\">extern</span> <span class=\"hljs-string\">\"C-cmse-nonsecure-call\"</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span></span>() -&gt; <span class=\"hljs-built_in\">u32</span>&gt;(addr) };\n    non_secure_function()\n}</code></pre>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">$ rustc --emit asm --crate-type lib --target thumbv8m.main-none-eabi function.rs\n\ncall_nonsecure_function:\n        .fnstart\n        .save   {r7, lr}\n        push    {r7, lr}\n        .setfp  r7, sp\n        mov     r7, sp\n        .pad    #16\n        sub     sp, #16\n        str     r0, [sp, #12]\n        ldr     r0, [sp, #12]\n        str     r0, [sp, #8]\n        b       .LBB0_1\n.LBB0_1:\n        ldr     r0, [sp, #8]\n        push.w  {r4, r5, r6, r7, r8, r9, r10, r11}\n        bic     r0, r0, #1\n        mov     r1, r0\n        mov     r2, r0\n        mov     r3, r0\n        mov     r4, r0\n        mov     r5, r0\n        mov     r6, r0\n        mov     r7, r0\n        mov     r8, r0\n        mov     r9, r0\n        mov     r10, r0\n        mov     r11, r0\n        mov     r12, r0\n        msr     apsr_nzcvq, r0\n        blxns   r0\n        pop.w   {r4, r5, r6, r7, r8, r9, r10, r11}\n        str     r0, [sp, #4]\n        b       .LBB0_2\n.LBB0_2:\n        ldr     r0, [sp, #4]\n        add     sp, #16\n        pop     {r7, pc}\n</code></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"abi_msp430_interrupt\"><a class=\"header\" href=\"#abi_msp430_interrupt\"><code>abi_msp430_interrupt</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/38487\">#38487</a></p>\n<hr>\n<p>In the MSP430 architecture, interrupt handlers have a special calling\nconvention. You can use the <code class=\"hljs\">\"msp430-interrupt\"</code> ABI to make the compiler apply\nthe right calling convention to the interrupt handlers you define.</p>\n<!-- NOTE(ignore) this example is specific to the msp430 target -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-meta\">#![feature(abi_msp430_interrupt)]</span>\n<span class=\"hljs-meta\">#![no_std]</span>\n\n<span class=\"hljs-comment\">// Place the interrupt handler at the appropriate memory address</span>\n<span class=\"hljs-comment\">// (Alternatively, you can use `#[used]` and remove `pub` and `#[no_mangle]`)</span>\n<span class=\"hljs-meta\">#[link_section = <span class=\"hljs-meta-string\">\"__interrupt_vector_10\"</span>]</span>\n<span class=\"hljs-meta\">#[no_mangle]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">static</span> TIM0_VECTOR: <span class=\"hljs-keyword\">extern</span> <span class=\"hljs-string\">\"msp430-interrupt\"</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span></span>() = tim0;\n\n<span class=\"hljs-comment\">// The interrupt handler</span>\n<span class=\"hljs-keyword\">extern</span> <span class=\"hljs-string\">\"msp430-interrupt\"</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">tim0</span></span>() {\n    <span class=\"hljs-comment\">// ..</span>\n}</code></pre>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">$ msp430-elf-objdump -CD ./target/msp430/release/app\nDisassembly of section __interrupt_vector_10:\n\n0000fff2 &lt;TIM0_VECTOR&gt;:\n    fff2:       00 c0           interrupt service routine at 0xc000\n\nDisassembly of section .text:\n\n0000c000 &lt;int::tim0&gt;:\n    c000:       00 13           reti\n</code></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"abi_ptx\"><a class=\"header\" href=\"#abi_ptx\"><code>abi_ptx</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/38788\">#38788</a></p>\n<hr>\n<p>When emitting PTX code, all vanilla Rust functions (<code class=\"hljs\">fn</code>) get translated to\n\"device\" functions. These functions are <em>not</em> callable from the host via the\nCUDA API so a crate with only device functions is not too useful!</p>\n<p>OTOH, \"global\" functions <em>can</em> be called by the host; you can think of them\nas the real public API of your crate. To produce a global function use the\n<code class=\"hljs\">\"ptx-kernel\"</code> ABI.</p>\n<!-- NOTE(ignore) this example is specific to the nvptx targets -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-meta\">#![feature(abi_ptx)]</span>\n<span class=\"hljs-meta\">#![no_std]</span>\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">unsafe</span> <span class=\"hljs-keyword\">extern</span> <span class=\"hljs-string\">\"ptx-kernel\"</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">global_function</span></span>() {\n    device_function();\n}\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">device_function</span></span>() {\n    <span class=\"hljs-comment\">// ..</span>\n}</code></pre>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">$ xargo rustc --target nvptx64-nvidia-cuda --release -- --emit=asm\n\n$ cat $(find -name '*.s')\n//\n// Generated by LLVM NVPTX Back-End\n//\n\n.version 3.2\n.target sm_20\n.address_size 64\n\n        // .globl       _ZN6kernel15global_function17h46111ebe6516b382E\n\n.visible .entry _ZN6kernel15global_function17h46111ebe6516b382E()\n{\n\n\n        ret;\n}\n\n        // .globl       _ZN6kernel15device_function17hd6a0e4993bbf3f78E\n.visible .func _ZN6kernel15device_function17hd6a0e4993bbf3f78E()\n{\n\n\n        ret;\n}\n</code></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"abi_riscv_interrupt\"><a class=\"header\" href=\"#abi_riscv_interrupt\"><code>abi_riscv_interrupt</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/111889\">#111889</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"abi_unadjusted\"><a class=\"header\" href=\"#abi_unadjusted\"><code>abi_unadjusted</code></a></h1>\n<p>This feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"abi_vectorcall\"><a class=\"header\" href=\"#abi_vectorcall\"><code>abi_vectorcall</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/124485\">#124485</a></p>\n<hr>\n<p>Adds support for the Windows <code class=\"hljs\">\"vectorcall\"</code> ABI, the equivalent of <code class=\"hljs\">__vectorcall</code> in MSVC.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore (only-windows-or-x86-or-x86-64) hljs\"><span class=\"hljs-keyword\">extern</span> <span class=\"hljs-string\">\"vectorcall\"</span> {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">add_f64s</span></span>(x: <span class=\"hljs-built_in\">f64</span>, y: <span class=\"hljs-built_in\">f64</span>) -&gt; <span class=\"hljs-built_in\">f64</span>;\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{}\"</span>, add_f64s(<span class=\"hljs-number\">2.0</span>, <span class=\"hljs-number\">4.0</span>));\n}</code></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"abi_x86_interrupt\"><a class=\"header\" href=\"#abi_x86_interrupt\"><code>abi_x86_interrupt</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/40180\">#40180</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"adt_const_params\"><a class=\"header\" href=\"#adt_const_params\"><code>adt_const_params</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/95174\">#95174</a></p>\n<hr>\n<p>Allows for using more complex types for const parameters, such as structs or enums.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"hljs-meta\">#![feature(adt_const_params)]</span>\n<span class=\"hljs-meta\">#![allow(incomplete_features)]</span>\n\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">use</span> std::marker::ConstParamTy;\n\n<span class=\"hljs-meta\">#[derive(ConstParamTy, PartialEq, Eq)]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">Foo</span></span> {\n    A,\n    B,\n    C,\n}\n\n<span class=\"hljs-meta\">#[derive(ConstParamTy, PartialEq, Eq)]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Bar</span></span> {\n    flag: <span class=\"hljs-built_in\">bool</span>,\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">is_foo_a_and_bar_true</span></span>&lt;<span class=\"hljs-keyword\">const</span> F: Foo, <span class=\"hljs-keyword\">const</span> B: Bar&gt;() -&gt; <span class=\"hljs-built_in\">bool</span> {\n    <span class=\"hljs-keyword\">match</span> (F, B.flag) {\n        (Foo::A, <span class=\"hljs-literal\">true</span>) =&gt; <span class=\"hljs-literal\">true</span>,\n        _ =&gt; <span class=\"hljs-literal\">false</span>,\n    }\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"alloc_error_handler\"><a class=\"header\" href=\"#alloc_error_handler\"><code>alloc_error_handler</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/51540\">#51540</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"allocator_internals\"><a class=\"header\" href=\"#allocator_internals\"><code>allocator_internals</code></a></h1>\n<p>This feature does not have a tracking issue, it is an unstable implementation\ndetail of the <code class=\"hljs\">global_allocator</code> feature not intended for use outside the\ncompiler.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"allow_internal_unsafe\"><a class=\"header\" href=\"#allow_internal_unsafe\"><code>allow_internal_unsafe</code></a></h1>\n<p>This feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"allow_internal_unstable\"><a class=\"header\" href=\"#allow_internal_unstable\"><code>allow_internal_unstable</code></a></h1>\n<p>This feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"anonymous_lifetime_in_impl_trait\"><a class=\"header\" href=\"#anonymous_lifetime_in_impl_trait\"><code>anonymous_lifetime_in_impl_trait</code></a></h1>\n<p>This feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"arbitrary_self_types\"><a class=\"header\" href=\"#arbitrary_self_types\"><code>arbitrary_self_types</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/44874\">#44874</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"arm_target_feature\"><a class=\"header\" href=\"#arm_target_feature\"><code>arm_target_feature</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/44839\">#44839</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"asm_const\"><a class=\"header\" href=\"#asm_const\"><code>asm_const</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/93332\">#93332</a></p>\n<hr>\n<p>This feature adds a <code class=\"hljs\">const &lt;expr&gt;</code> operand type to <code class=\"hljs\">asm!</code> and <code class=\"hljs\">global_asm!</code>.</p>\n<ul>\n<li><code class=\"hljs\">&lt;expr&gt;</code> must be an integer constant expression.</li>\n<li>The value of the expression is formatted as a string and substituted directly into the asm template string.</li>\n</ul>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"asm_experimental_arch\"><a class=\"header\" href=\"#asm_experimental_arch\"><code>asm_experimental_arch</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/93335\">#93335</a></p>\n<hr>\n<p>This feature tracks <code class=\"hljs\">asm!</code> and <code class=\"hljs\">global_asm!</code> support for the following architectures:</p>\n<ul>\n<li>NVPTX</li>\n<li>PowerPC</li>\n<li>Hexagon</li>\n<li>MIPS32r2 and MIPS64r2</li>\n<li>wasm32</li>\n<li>BPF</li>\n<li>SPIR-V</li>\n<li>AVR</li>\n<li>MSP430</li>\n<li>M68k</li>\n<li>CSKY</li>\n<li>s390x</li>\n<li>Arm64EC</li>\n</ul>\n<h2 id=\"register-classes\"><a class=\"header\" href=\"#register-classes\">Register classes</a></h2>\n<div class=\"table-wrapper\"><table><thead><tr><th>Architecture</th><th>Register class</th><th>Registers</th><th>LLVM constraint code</th></tr></thead><tbody>\n<tr><td>MIPS</td><td><code class=\"hljs\">reg</code></td><td><code class=\"hljs\">$[2-25]</code></td><td><code class=\"hljs\">r</code></td></tr>\n<tr><td>MIPS</td><td><code class=\"hljs\">freg</code></td><td><code class=\"hljs\">$f[0-31]</code></td><td><code class=\"hljs\">f</code></td></tr>\n<tr><td>NVPTX</td><td><code class=\"hljs\">reg16</code></td><td>None*</td><td><code class=\"hljs\">h</code></td></tr>\n<tr><td>NVPTX</td><td><code class=\"hljs\">reg32</code></td><td>None*</td><td><code class=\"hljs\">r</code></td></tr>\n<tr><td>NVPTX</td><td><code class=\"hljs\">reg64</code></td><td>None*</td><td><code class=\"hljs\">l</code></td></tr>\n<tr><td>Hexagon</td><td><code class=\"hljs\">reg</code></td><td><code class=\"hljs\">r[0-28]</code></td><td><code class=\"hljs\">r</code></td></tr>\n<tr><td>PowerPC</td><td><code class=\"hljs\">reg</code></td><td><code class=\"hljs\">r[0-31]</code></td><td><code class=\"hljs\">r</code></td></tr>\n<tr><td>PowerPC</td><td><code class=\"hljs\">reg_nonzero</code></td><td><code class=\"hljs\">r[1-31]</code></td><td><code class=\"hljs\">b</code></td></tr>\n<tr><td>PowerPC</td><td><code class=\"hljs\">freg</code></td><td><code class=\"hljs\">f[0-31]</code></td><td><code class=\"hljs\">f</code></td></tr>\n<tr><td>PowerPC</td><td><code class=\"hljs\">cr</code></td><td><code class=\"hljs\">cr[0-7]</code>, <code class=\"hljs\">cr</code></td><td>Only clobbers</td></tr>\n<tr><td>PowerPC</td><td><code class=\"hljs\">xer</code></td><td><code class=\"hljs\">xer</code></td><td>Only clobbers</td></tr>\n<tr><td>wasm32</td><td><code class=\"hljs\">local</code></td><td>None*</td><td><code class=\"hljs\">r</code></td></tr>\n<tr><td>BPF</td><td><code class=\"hljs\">reg</code></td><td><code class=\"hljs\">r[0-10]</code></td><td><code class=\"hljs\">r</code></td></tr>\n<tr><td>BPF</td><td><code class=\"hljs\">wreg</code></td><td><code class=\"hljs\">w[0-10]</code></td><td><code class=\"hljs\">w</code></td></tr>\n<tr><td>AVR</td><td><code class=\"hljs\">reg</code></td><td><code class=\"hljs\">r[2-25]</code>, <code class=\"hljs\">XH</code>, <code class=\"hljs\">XL</code>, <code class=\"hljs\">ZH</code>, <code class=\"hljs\">ZL</code></td><td><code class=\"hljs\">r</code></td></tr>\n<tr><td>AVR</td><td><code class=\"hljs\">reg_upper</code></td><td><code class=\"hljs\">r[16-25]</code>, <code class=\"hljs\">XH</code>, <code class=\"hljs\">XL</code>, <code class=\"hljs\">ZH</code>, <code class=\"hljs\">ZL</code></td><td><code class=\"hljs\">d</code></td></tr>\n<tr><td>AVR</td><td><code class=\"hljs\">reg_pair</code></td><td><code class=\"hljs\">r3r2</code> .. <code class=\"hljs\">r25r24</code>, <code class=\"hljs\">X</code>, <code class=\"hljs\">Z</code></td><td><code class=\"hljs\">r</code></td></tr>\n<tr><td>AVR</td><td><code class=\"hljs\">reg_iw</code></td><td><code class=\"hljs\">r25r24</code>, <code class=\"hljs\">X</code>, <code class=\"hljs\">Z</code></td><td><code class=\"hljs\">w</code></td></tr>\n<tr><td>AVR</td><td><code class=\"hljs\">reg_ptr</code></td><td><code class=\"hljs\">X</code>, <code class=\"hljs\">Z</code></td><td><code class=\"hljs\">e</code></td></tr>\n<tr><td>MSP430</td><td><code class=\"hljs\">reg</code></td><td><code class=\"hljs\">r[0-15]</code></td><td><code class=\"hljs\">r</code></td></tr>\n<tr><td>M68k</td><td><code class=\"hljs\">reg</code></td><td><code class=\"hljs\">d[0-7]</code>, <code class=\"hljs\">a[0-7]</code></td><td><code class=\"hljs\">r</code></td></tr>\n<tr><td>M68k</td><td><code class=\"hljs\">reg_data</code></td><td><code class=\"hljs\">d[0-7]</code></td><td><code class=\"hljs\">d</code></td></tr>\n<tr><td>M68k</td><td><code class=\"hljs\">reg_addr</code></td><td><code class=\"hljs\">a[0-3]</code></td><td><code class=\"hljs\">a</code></td></tr>\n<tr><td>CSKY</td><td><code class=\"hljs\">reg</code></td><td><code class=\"hljs\">r[0-31]</code></td><td><code class=\"hljs\">r</code></td></tr>\n<tr><td>CSKY</td><td><code class=\"hljs\">freg</code></td><td><code class=\"hljs\">f[0-31]</code></td><td><code class=\"hljs\">f</code></td></tr>\n<tr><td>s390x</td><td><code class=\"hljs\">reg</code></td><td><code class=\"hljs\">r[0-10]</code>, <code class=\"hljs\">r[12-14]</code></td><td><code class=\"hljs\">r</code></td></tr>\n<tr><td>s390x</td><td><code class=\"hljs\">freg</code></td><td><code class=\"hljs\">f[0-15]</code></td><td><code class=\"hljs\">f</code></td></tr>\n<tr><td>Arm64EC</td><td><code class=\"hljs\">reg</code></td><td><code class=\"hljs\">x[0-12]</code>, <code class=\"hljs\">x[15-22]</code>, <code class=\"hljs\">x[25-27]</code>, <code class=\"hljs\">x30</code></td><td><code class=\"hljs\">r</code></td></tr>\n<tr><td>Arm64EC</td><td><code class=\"hljs\">vreg</code></td><td><code class=\"hljs\">v[0-15]</code></td><td><code class=\"hljs\">w</code></td></tr>\n<tr><td>Arm64EC</td><td><code class=\"hljs\">vreg_low16</code></td><td><code class=\"hljs\">v[0-15]</code></td><td><code class=\"hljs\">x</code></td></tr>\n</tbody></table>\n</div>\n<blockquote>\n<p><strong>Notes</strong>:</p>\n<ul>\n<li>\n<p>NVPTX doesn't have a fixed register set, so named registers are not supported.</p>\n</li>\n<li>\n<p>WebAssembly doesn't have registers, so named registers are not supported.</p>\n</li>\n</ul>\n</blockquote>\n<h1 id=\"register-class-supported-types\"><a class=\"header\" href=\"#register-class-supported-types\">Register class supported types</a></h1>\n<div class=\"table-wrapper\"><table><thead><tr><th>Architecture</th><th>Register class</th><th>Target feature</th><th>Allowed types</th></tr></thead><tbody>\n<tr><td>MIPS32</td><td><code class=\"hljs\">reg</code></td><td>None</td><td><code class=\"hljs\">i8</code>, <code class=\"hljs\">i16</code>, <code class=\"hljs\">i32</code>, <code class=\"hljs\">f32</code></td></tr>\n<tr><td>MIPS32</td><td><code class=\"hljs\">freg</code></td><td>None</td><td><code class=\"hljs\">f32</code>, <code class=\"hljs\">f64</code></td></tr>\n<tr><td>MIPS64</td><td><code class=\"hljs\">reg</code></td><td>None</td><td><code class=\"hljs\">i8</code>, <code class=\"hljs\">i16</code>, <code class=\"hljs\">i32</code>, <code class=\"hljs\">i64</code>, <code class=\"hljs\">f32</code>, <code class=\"hljs\">f64</code></td></tr>\n<tr><td>MIPS64</td><td><code class=\"hljs\">freg</code></td><td>None</td><td><code class=\"hljs\">f32</code>, <code class=\"hljs\">f64</code></td></tr>\n<tr><td>NVPTX</td><td><code class=\"hljs\">reg16</code></td><td>None</td><td><code class=\"hljs\">i8</code>, <code class=\"hljs\">i16</code></td></tr>\n<tr><td>NVPTX</td><td><code class=\"hljs\">reg32</code></td><td>None</td><td><code class=\"hljs\">i8</code>, <code class=\"hljs\">i16</code>, <code class=\"hljs\">i32</code>, <code class=\"hljs\">f32</code></td></tr>\n<tr><td>NVPTX</td><td><code class=\"hljs\">reg64</code></td><td>None</td><td><code class=\"hljs\">i8</code>, <code class=\"hljs\">i16</code>, <code class=\"hljs\">i32</code>, <code class=\"hljs\">f32</code>, <code class=\"hljs\">i64</code>, <code class=\"hljs\">f64</code></td></tr>\n<tr><td>Hexagon</td><td><code class=\"hljs\">reg</code></td><td>None</td><td><code class=\"hljs\">i8</code>, <code class=\"hljs\">i16</code>, <code class=\"hljs\">i32</code>, <code class=\"hljs\">f32</code></td></tr>\n<tr><td>PowerPC</td><td><code class=\"hljs\">reg</code></td><td>None</td><td><code class=\"hljs\">i8</code>, <code class=\"hljs\">i16</code>, <code class=\"hljs\">i32</code></td></tr>\n<tr><td>PowerPC</td><td><code class=\"hljs\">reg_nonzero</code></td><td>None</td><td><code class=\"hljs\">i8</code>, <code class=\"hljs\">i16</code>, <code class=\"hljs\">i32</code></td></tr>\n<tr><td>PowerPC</td><td><code class=\"hljs\">freg</code></td><td>None</td><td><code class=\"hljs\">f32</code>, <code class=\"hljs\">f64</code></td></tr>\n<tr><td>PowerPC</td><td><code class=\"hljs\">cr</code></td><td>N/A</td><td>Only clobbers</td></tr>\n<tr><td>PowerPC</td><td><code class=\"hljs\">xer</code></td><td>N/A</td><td>Only clobbers</td></tr>\n<tr><td>wasm32</td><td><code class=\"hljs\">local</code></td><td>None</td><td><code class=\"hljs\">i8</code> <code class=\"hljs\">i16</code> <code class=\"hljs\">i32</code> <code class=\"hljs\">i64</code> <code class=\"hljs\">f32</code> <code class=\"hljs\">f64</code></td></tr>\n<tr><td>BPF</td><td><code class=\"hljs\">reg</code></td><td>None</td><td><code class=\"hljs\">i8</code> <code class=\"hljs\">i16</code> <code class=\"hljs\">i32</code> <code class=\"hljs\">i64</code></td></tr>\n<tr><td>BPF</td><td><code class=\"hljs\">wreg</code></td><td><code class=\"hljs\">alu32</code></td><td><code class=\"hljs\">i8</code> <code class=\"hljs\">i16</code> <code class=\"hljs\">i32</code></td></tr>\n<tr><td>AVR</td><td><code class=\"hljs\">reg</code>, <code class=\"hljs\">reg_upper</code></td><td>None</td><td><code class=\"hljs\">i8</code></td></tr>\n<tr><td>AVR</td><td><code class=\"hljs\">reg_pair</code>, <code class=\"hljs\">reg_iw</code>, <code class=\"hljs\">reg_ptr</code></td><td>None</td><td><code class=\"hljs\">i16</code></td></tr>\n<tr><td>MSP430</td><td><code class=\"hljs\">reg</code></td><td>None</td><td><code class=\"hljs\">i8</code>, <code class=\"hljs\">i16</code></td></tr>\n<tr><td>M68k</td><td><code class=\"hljs\">reg</code>, <code class=\"hljs\">reg_addr</code></td><td>None</td><td><code class=\"hljs\">i16</code>, <code class=\"hljs\">i32</code></td></tr>\n<tr><td>M68k</td><td><code class=\"hljs\">reg_data</code></td><td>None</td><td><code class=\"hljs\">i8</code>, <code class=\"hljs\">i16</code>, <code class=\"hljs\">i32</code></td></tr>\n<tr><td>CSKY</td><td><code class=\"hljs\">reg</code></td><td>None</td><td><code class=\"hljs\">i8</code>, <code class=\"hljs\">i16</code>, <code class=\"hljs\">i32</code></td></tr>\n<tr><td>CSKY</td><td><code class=\"hljs\">freg</code></td><td>None</td><td><code class=\"hljs\">f32</code>,</td></tr>\n<tr><td>s390x</td><td><code class=\"hljs\">reg</code>, <code class=\"hljs\">reg_addr</code></td><td>None</td><td><code class=\"hljs\">i8</code>, <code class=\"hljs\">i16</code>, <code class=\"hljs\">i32</code>, <code class=\"hljs\">i64</code></td></tr>\n<tr><td>s390x</td><td><code class=\"hljs\">freg</code></td><td>None</td><td><code class=\"hljs\">f32</code>, <code class=\"hljs\">f64</code></td></tr>\n<tr><td>Arm64EC</td><td><code class=\"hljs\">reg</code></td><td>None</td><td><code class=\"hljs\">i8</code>, <code class=\"hljs\">i16</code>, <code class=\"hljs\">i32</code>, <code class=\"hljs\">f32</code>, <code class=\"hljs\">i64</code>, <code class=\"hljs\">f64</code></td></tr>\n<tr><td>Arm64EC</td><td><code class=\"hljs\">vreg</code></td><td>None</td><td><code class=\"hljs\">i8</code>, <code class=\"hljs\">i16</code>, <code class=\"hljs\">i32</code>, <code class=\"hljs\">f32</code>, <code class=\"hljs\">i64</code>, <code class=\"hljs\">f64</code>, <br> <code class=\"hljs\">i8x8</code>, <code class=\"hljs\">i16x4</code>, <code class=\"hljs\">i32x2</code>, <code class=\"hljs\">i64x1</code>, <code class=\"hljs\">f32x2</code>, <code class=\"hljs\">f64x1</code>, <br> <code class=\"hljs\">i8x16</code>, <code class=\"hljs\">i16x8</code>, <code class=\"hljs\">i32x4</code>, <code class=\"hljs\">i64x2</code>, <code class=\"hljs\">f32x4</code>, <code class=\"hljs\">f64x2</code></td></tr>\n</tbody></table>\n</div>\n<h2 id=\"register-aliases\"><a class=\"header\" href=\"#register-aliases\">Register aliases</a></h2>\n<div class=\"table-wrapper\"><table><thead><tr><th>Architecture</th><th>Base register</th><th>Aliases</th></tr></thead><tbody>\n<tr><td>Hexagon</td><td><code class=\"hljs\">r29</code></td><td><code class=\"hljs\">sp</code></td></tr>\n<tr><td>Hexagon</td><td><code class=\"hljs\">r30</code></td><td><code class=\"hljs\">fr</code></td></tr>\n<tr><td>Hexagon</td><td><code class=\"hljs\">r31</code></td><td><code class=\"hljs\">lr</code></td></tr>\n<tr><td>BPF</td><td><code class=\"hljs\">r[0-10]</code></td><td><code class=\"hljs\">w[0-10]</code></td></tr>\n<tr><td>AVR</td><td><code class=\"hljs\">XH</code></td><td><code class=\"hljs\">r27</code></td></tr>\n<tr><td>AVR</td><td><code class=\"hljs\">XL</code></td><td><code class=\"hljs\">r26</code></td></tr>\n<tr><td>AVR</td><td><code class=\"hljs\">ZH</code></td><td><code class=\"hljs\">r31</code></td></tr>\n<tr><td>AVR</td><td><code class=\"hljs\">ZL</code></td><td><code class=\"hljs\">r30</code></td></tr>\n<tr><td>MSP430</td><td><code class=\"hljs\">r0</code></td><td><code class=\"hljs\">pc</code></td></tr>\n<tr><td>MSP430</td><td><code class=\"hljs\">r1</code></td><td><code class=\"hljs\">sp</code></td></tr>\n<tr><td>MSP430</td><td><code class=\"hljs\">r2</code></td><td><code class=\"hljs\">sr</code></td></tr>\n<tr><td>MSP430</td><td><code class=\"hljs\">r3</code></td><td><code class=\"hljs\">cg</code></td></tr>\n<tr><td>MSP430</td><td><code class=\"hljs\">r4</code></td><td><code class=\"hljs\">fp</code></td></tr>\n<tr><td>M68k</td><td><code class=\"hljs\">a5</code></td><td><code class=\"hljs\">bp</code></td></tr>\n<tr><td>M68k</td><td><code class=\"hljs\">a6</code></td><td><code class=\"hljs\">fp</code></td></tr>\n<tr><td>M68k</td><td><code class=\"hljs\">a7</code></td><td><code class=\"hljs\">sp</code>, <code class=\"hljs\">usp</code>, <code class=\"hljs\">ssp</code>, <code class=\"hljs\">isp</code></td></tr>\n<tr><td>CSKY</td><td><code class=\"hljs\">r[0-3]</code></td><td><code class=\"hljs\">a[0-3]</code></td></tr>\n<tr><td>CSKY</td><td><code class=\"hljs\">r[4-11]</code></td><td><code class=\"hljs\">l[0-7]</code></td></tr>\n<tr><td>CSKY</td><td><code class=\"hljs\">r[12-13]</code></td><td><code class=\"hljs\">t[0-1]</code></td></tr>\n<tr><td>CSKY</td><td><code class=\"hljs\">r14</code></td><td><code class=\"hljs\">sp</code></td></tr>\n<tr><td>CSKY</td><td><code class=\"hljs\">r15</code></td><td><code class=\"hljs\">lr</code></td></tr>\n<tr><td>CSKY</td><td><code class=\"hljs\">r[16-17]</code></td><td><code class=\"hljs\">l[8-9]</code></td></tr>\n<tr><td>CSKY</td><td><code class=\"hljs\">r[18-25]</code></td><td><code class=\"hljs\">t[2-9]</code></td></tr>\n<tr><td>CSKY</td><td><code class=\"hljs\">r28</code></td><td><code class=\"hljs\">rgb</code></td></tr>\n<tr><td>CSKY</td><td><code class=\"hljs\">r29</code></td><td><code class=\"hljs\">rtb</code></td></tr>\n<tr><td>CSKY</td><td><code class=\"hljs\">r30</code></td><td><code class=\"hljs\">svbr</code></td></tr>\n<tr><td>CSKY</td><td><code class=\"hljs\">r31</code></td><td><code class=\"hljs\">tls</code></td></tr>\n<tr><td>Arm64EC</td><td><code class=\"hljs\">x[0-30]</code></td><td><code class=\"hljs\">w[0-30]</code></td></tr>\n<tr><td>Arm64EC</td><td><code class=\"hljs\">x29</code></td><td><code class=\"hljs\">fp</code></td></tr>\n<tr><td>Arm64EC</td><td><code class=\"hljs\">x30</code></td><td><code class=\"hljs\">lr</code></td></tr>\n<tr><td>Arm64EC</td><td><code class=\"hljs\">sp</code></td><td><code class=\"hljs\">wsp</code></td></tr>\n<tr><td>Arm64EC</td><td><code class=\"hljs\">xzr</code></td><td><code class=\"hljs\">wzr</code></td></tr>\n<tr><td>Arm64EC</td><td><code class=\"hljs\">v[0-15]</code></td><td><code class=\"hljs\">b[0-15]</code>, <code class=\"hljs\">h[0-15]</code>, <code class=\"hljs\">s[0-15]</code>, <code class=\"hljs\">d[0-15]</code>, <code class=\"hljs\">q[0-15]</code></td></tr>\n</tbody></table>\n</div>\n<blockquote>\n<p><strong>Notes</strong>:</p>\n<ul>\n<li>TI does not mandate a frame pointer for MSP430, but toolchains are allowed\nto use one; LLVM uses <code class=\"hljs\">r4</code>.</li>\n</ul>\n</blockquote>\n<h2 id=\"unsupported-registers\"><a class=\"header\" href=\"#unsupported-registers\">Unsupported registers</a></h2>\n<div class=\"table-wrapper\"><table><thead><tr><th>Architecture</th><th>Unsupported register</th><th>Reason</th></tr></thead><tbody>\n<tr><td>All</td><td><code class=\"hljs\">sp</code>, <code class=\"hljs\">r15</code> (s390x)</td><td>The stack pointer must be restored to its original value at the end of an asm code block.</td></tr>\n<tr><td>All</td><td><code class=\"hljs\">fr</code> (Hexagon), <code class=\"hljs\">$fp</code> (MIPS), <code class=\"hljs\">Y</code> (AVR), <code class=\"hljs\">r4</code> (MSP430), <code class=\"hljs\">a6</code> (M68k), <code class=\"hljs\">r11</code> (s390x), <code class=\"hljs\">x29</code> (Arm64EC)</td><td>The frame pointer cannot be used as an input or output.</td></tr>\n<tr><td>All</td><td><code class=\"hljs\">r19</code> (Hexagon), <code class=\"hljs\">x19</code> (Arm64EC)</td><td>This is used internally by LLVM as a \"base pointer\" for functions with complex stack frames.</td></tr>\n<tr><td>MIPS</td><td><code class=\"hljs\">$0</code> or <code class=\"hljs\">$zero</code></td><td>This is a constant zero register which can't be modified.</td></tr>\n<tr><td>MIPS</td><td><code class=\"hljs\">$1</code> or <code class=\"hljs\">$at</code></td><td>Reserved for assembler.</td></tr>\n<tr><td>MIPS</td><td><code class=\"hljs\">$26</code>/<code class=\"hljs\">$k0</code>, <code class=\"hljs\">$27</code>/<code class=\"hljs\">$k1</code></td><td>OS-reserved registers.</td></tr>\n<tr><td>MIPS</td><td><code class=\"hljs\">$28</code>/<code class=\"hljs\">$gp</code></td><td>Global pointer cannot be used as inputs or outputs.</td></tr>\n<tr><td>MIPS</td><td><code class=\"hljs\">$ra</code></td><td>Return address cannot be used as inputs or outputs.</td></tr>\n<tr><td>Hexagon</td><td><code class=\"hljs\">lr</code></td><td>This is the link register which cannot be used as an input or output.</td></tr>\n<tr><td>AVR</td><td><code class=\"hljs\">r0</code>, <code class=\"hljs\">r1</code>, <code class=\"hljs\">r1r0</code></td><td>Due to an issue in LLVM, the <code class=\"hljs\">r0</code> and <code class=\"hljs\">r1</code> registers cannot be used as inputs or outputs.  If modified, they must be restored to their original values before the end of the block.</td></tr>\n<tr><td>MSP430</td><td><code class=\"hljs\">r0</code>, <code class=\"hljs\">r2</code>, <code class=\"hljs\">r3</code></td><td>These are the program counter, status register, and constant generator respectively. Neither the status register nor constant generator can be written to.</td></tr>\n<tr><td>M68k</td><td><code class=\"hljs\">a4</code>, <code class=\"hljs\">a5</code></td><td>Used internally by LLVM for the base pointer and global base pointer.</td></tr>\n<tr><td>CSKY</td><td><code class=\"hljs\">r7</code>, <code class=\"hljs\">r28</code></td><td>Used internally by LLVM for the base pointer and global base pointer.</td></tr>\n<tr><td>CSKY</td><td><code class=\"hljs\">r8</code></td><td>Used internally by LLVM for the frame pointer.</td></tr>\n<tr><td>CSKY</td><td><code class=\"hljs\">r14</code></td><td>Used internally by LLVM for the stack pointer.</td></tr>\n<tr><td>CSKY</td><td><code class=\"hljs\">r15</code></td><td>This is the link register.</td></tr>\n<tr><td>CSKY</td><td><code class=\"hljs\">r[26-30]</code></td><td>Reserved by its ABI.</td></tr>\n<tr><td>CSKY</td><td><code class=\"hljs\">r31</code></td><td>This is the TLS register.</td></tr>\n<tr><td>Arm64EC</td><td><code class=\"hljs\">xzr</code></td><td>This is a constant zero register which can't be modified.</td></tr>\n<tr><td>Arm64EC</td><td><code class=\"hljs\">x18</code></td><td>This is an OS-reserved register.</td></tr>\n<tr><td>Arm64EC</td><td><code class=\"hljs\">x13</code>, <code class=\"hljs\">x14</code>, <code class=\"hljs\">x23</code>, <code class=\"hljs\">x24</code>, <code class=\"hljs\">x28</code>, <code class=\"hljs\">v[16-31]</code></td><td>These are AArch64 registers that are not supported for Arm64EC.</td></tr>\n</tbody></table>\n</div>\n<h2 id=\"template-modifiers\"><a class=\"header\" href=\"#template-modifiers\">Template modifiers</a></h2>\n<div class=\"table-wrapper\"><table><thead><tr><th>Architecture</th><th>Register class</th><th>Modifier</th><th>Example output</th><th>LLVM modifier</th></tr></thead><tbody>\n<tr><td>MIPS</td><td><code class=\"hljs\">reg</code></td><td>None</td><td><code class=\"hljs\">$2</code></td><td>None</td></tr>\n<tr><td>MIPS</td><td><code class=\"hljs\">freg</code></td><td>None</td><td><code class=\"hljs\">$f0</code></td><td>None</td></tr>\n<tr><td>NVPTX</td><td><code class=\"hljs\">reg16</code></td><td>None</td><td><code class=\"hljs\">rs0</code></td><td>None</td></tr>\n<tr><td>NVPTX</td><td><code class=\"hljs\">reg32</code></td><td>None</td><td><code class=\"hljs\">r0</code></td><td>None</td></tr>\n<tr><td>NVPTX</td><td><code class=\"hljs\">reg64</code></td><td>None</td><td><code class=\"hljs\">rd0</code></td><td>None</td></tr>\n<tr><td>Hexagon</td><td><code class=\"hljs\">reg</code></td><td>None</td><td><code class=\"hljs\">r0</code></td><td>None</td></tr>\n<tr><td>PowerPC</td><td><code class=\"hljs\">reg</code></td><td>None</td><td><code class=\"hljs\">0</code></td><td>None</td></tr>\n<tr><td>PowerPC</td><td><code class=\"hljs\">reg_nonzero</code></td><td>None</td><td><code class=\"hljs\">3</code></td><td>None</td></tr>\n<tr><td>PowerPC</td><td><code class=\"hljs\">freg</code></td><td>None</td><td><code class=\"hljs\">0</code></td><td>None</td></tr>\n<tr><td>s390x</td><td><code class=\"hljs\">reg</code></td><td>None</td><td><code class=\"hljs\">%r0</code></td><td>None</td></tr>\n<tr><td>s390x</td><td><code class=\"hljs\">reg_addr</code></td><td>None</td><td><code class=\"hljs\">%r1</code></td><td>None</td></tr>\n<tr><td>s390x</td><td><code class=\"hljs\">freg</code></td><td>None</td><td><code class=\"hljs\">%f0</code></td><td>None</td></tr>\n<tr><td>CSKY</td><td><code class=\"hljs\">reg</code></td><td>None</td><td><code class=\"hljs\">r0</code></td><td>None</td></tr>\n<tr><td>CSKY</td><td><code class=\"hljs\">freg</code></td><td>None</td><td><code class=\"hljs\">f0</code></td><td>None</td></tr>\n<tr><td>Arm64EC</td><td><code class=\"hljs\">reg</code></td><td>None</td><td><code class=\"hljs\">x0</code></td><td><code class=\"hljs\">x</code></td></tr>\n<tr><td>Arm64EC</td><td><code class=\"hljs\">reg</code></td><td><code class=\"hljs\">w</code></td><td><code class=\"hljs\">w0</code></td><td><code class=\"hljs\">w</code></td></tr>\n<tr><td>Arm64EC</td><td><code class=\"hljs\">reg</code></td><td><code class=\"hljs\">x</code></td><td><code class=\"hljs\">x0</code></td><td><code class=\"hljs\">x</code></td></tr>\n<tr><td>Arm64EC</td><td><code class=\"hljs\">vreg</code></td><td>None</td><td><code class=\"hljs\">v0</code></td><td>None</td></tr>\n<tr><td>Arm64EC</td><td><code class=\"hljs\">vreg</code></td><td><code class=\"hljs\">v</code></td><td><code class=\"hljs\">v0</code></td><td>None</td></tr>\n<tr><td>Arm64EC</td><td><code class=\"hljs\">vreg</code></td><td><code class=\"hljs\">b</code></td><td><code class=\"hljs\">b0</code></td><td><code class=\"hljs\">b</code></td></tr>\n<tr><td>Arm64EC</td><td><code class=\"hljs\">vreg</code></td><td><code class=\"hljs\">h</code></td><td><code class=\"hljs\">h0</code></td><td><code class=\"hljs\">h</code></td></tr>\n<tr><td>Arm64EC</td><td><code class=\"hljs\">vreg</code></td><td><code class=\"hljs\">s</code></td><td><code class=\"hljs\">s0</code></td><td><code class=\"hljs\">s</code></td></tr>\n<tr><td>Arm64EC</td><td><code class=\"hljs\">vreg</code></td><td><code class=\"hljs\">d</code></td><td><code class=\"hljs\">d0</code></td><td><code class=\"hljs\">d</code></td></tr>\n<tr><td>Arm64EC</td><td><code class=\"hljs\">vreg</code></td><td><code class=\"hljs\">q</code></td><td><code class=\"hljs\">q0</code></td><td><code class=\"hljs\">q</code></td></tr>\n</tbody></table>\n</div>\n<h1 id=\"flags-covered-by-preserves_flags\"><a class=\"header\" href=\"#flags-covered-by-preserves_flags\">Flags covered by <code>preserves_flags</code></a></h1>\n<p>These flags registers must be restored upon exiting the asm block if the <code class=\"hljs\">preserves_flags</code> option is set:</p>\n<ul>\n<li>AVR\n<ul>\n<li>The status register <code class=\"hljs\">SREG</code>.</li>\n</ul>\n</li>\n<li>MSP430\n<ul>\n<li>The status register <code class=\"hljs\">r2</code>.</li>\n</ul>\n</li>\n<li>M68k\n<ul>\n<li>The condition code register <code class=\"hljs\">ccr</code>.</li>\n</ul>\n</li>\n<li>s390x\n<ul>\n<li>The condition code register <code class=\"hljs\">cc</code>.</li>\n</ul>\n</li>\n<li>Arm64EC\n<ul>\n<li>Condition flags (<code class=\"hljs\">NZCV</code> register).</li>\n<li>Floating-point status (<code class=\"hljs\">FPSR</code> register).</li>\n</ul>\n</li>\n</ul>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"asm_goto\"><a class=\"header\" href=\"#asm_goto\"><code>asm_goto</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/119364\">#119364</a></p>\n<hr>\n<p>This feature adds a <code class=\"hljs\">label &lt;block&gt;</code> operand type to <code class=\"hljs\">asm!</code>.</p>\n<p>Example:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore (partial-example x86-only) hljs\">\n<span class=\"hljs-keyword\">unsafe</span> {\n    asm!(\n        <span class=\"hljs-string\">\"jmp {}\"</span>,\n        label {\n            <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Jumped from asm!\"</span>);\n        }\n    );\n}</code></pre>\n<p>The block must have unit type or diverge.</p>\n<p>When <code class=\"hljs\">label &lt;block&gt;</code> is used together with <code class=\"hljs\">noreturn</code> option, it means that the\nassembly will not fallthrough. It's allowed to jump to a label within the\nassembly. In this case, the entire <code class=\"hljs\">asm!</code> expression will have an unit type as\nopposed to diverging, if not all label blocks diverge. The <code class=\"hljs\">asm!</code> expression\nstill diverges if <code class=\"hljs\">noreturn</code> option is used and all label blocks diverge.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"asm_unwind\"><a class=\"header\" href=\"#asm_unwind\"><code>asm_unwind</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/93334\">#93334</a></p>\n<hr>\n<p>This feature adds a <code class=\"hljs\">may_unwind</code> option to <code class=\"hljs\">asm!</code> which allows an <code class=\"hljs\">asm</code> block to unwind stack and be part of the stack unwinding process. This option is only supported by the LLVM backend right now.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"associated_const_equality\"><a class=\"header\" href=\"#associated_const_equality\"><code>associated_const_equality</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/92827\">#92827</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"associated_type_defaults\"><a class=\"header\" href=\"#associated_type_defaults\"><code>associated_type_defaults</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/29661\">#29661</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"async_closure\"><a class=\"header\" href=\"#async_closure\"><code>async_closure</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/62290\">#62290</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"async_fn_track_caller\"><a class=\"header\" href=\"#async_fn_track_caller\"><code>async_fn_track_caller</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/110011\">#110011</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"async_for_loop\"><a class=\"header\" href=\"#async_for_loop\"><code>async_for_loop</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/118898\">#118898</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"auto_traits\"><a class=\"header\" href=\"#auto_traits\"><code>auto_traits</code></a></h1>\n<p>The tracking issue for this feature is <a href=\"https://github.com/rust-lang/rust/issues/13231\">#13231</a></p>\n<hr>\n<p>The <code class=\"hljs\">auto_traits</code> feature gate allows you to define auto traits.</p>\n<p>Auto traits, like <a href=\"language-features/../../std/marker/trait.Send.html\"><code class=\"hljs\">Send</code></a> or <a href=\"language-features/../../std/marker/trait.Sync.html\"><code class=\"hljs\">Sync</code></a> in the standard library, are marker traits\nthat are automatically implemented for every type, unless the type, or a type it contains,\nhas explicitly opted out via a negative impl. (Negative impls are separately controlled\nby the <code class=\"hljs\">negative_impls</code> feature.)</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore (partial-example) hljs\"><span class=\"hljs-keyword\">impl</span> !Trait <span class=\"hljs-keyword\">for</span> Type {}</code></pre>\n<p>Example:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-meta\">#![feature(negative_impls)]</span>\n<span class=\"hljs-meta\">#![feature(auto_traits)]</span>\n\nauto <span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Valid</span></span> {}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">True</span></span>;\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">False</span></span>;\n\n<span class=\"hljs-keyword\">impl</span> !Valid <span class=\"hljs-keyword\">for</span> False {}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">MaybeValid</span></span>&lt;T&gt;(T);\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">must_be_valid</span></span>&lt;T: Valid&gt;(_t: T) { }\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-comment\">// works</span>\n    must_be_valid( MaybeValid(True) );\n\n    <span class=\"hljs-comment\">// compiler error - trait bound not satisfied</span>\n    <span class=\"hljs-comment\">// must_be_valid( MaybeValid(False) );</span>\n}</code></pre></pre>\n<h2 id=\"automatic-trait-implementations\"><a class=\"header\" href=\"#automatic-trait-implementations\">Automatic trait implementations</a></h2>\n<p>When a type is declared as an <code class=\"hljs\">auto trait</code>, we will automatically\ncreate impls for every struct/enum/union, unless an explicit impl is\nprovided. These automatic impls contain a where clause for each field\nof the form <code class=\"hljs\">T: AutoTrait</code>, where <code class=\"hljs\">T</code> is the type of the field and\n<code class=\"hljs\">AutoTrait</code> is the auto trait in question. As an example, consider the\nstruct <code class=\"hljs\">List</code> and the auto trait <code class=\"hljs\">Send</code>:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">List</span></span>&lt;T&gt; {\n  data: T,\n  next: <span class=\"hljs-built_in\">Option</span>&lt;<span class=\"hljs-built_in\">Box</span>&lt;List&lt;T&gt;&gt;&gt;,\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Presuming that there is no explicit impl of <code class=\"hljs\">Send</code> for <code class=\"hljs\">List</code>, the\ncompiler will supply an automatic impl of the form:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">List</span></span>&lt;T&gt; {\n  data: T,\n  next: <span class=\"hljs-built_in\">Option</span>&lt;<span class=\"hljs-built_in\">Box</span>&lt;List&lt;T&gt;&gt;&gt;,\n}\n\n<span class=\"hljs-keyword\">unsafe</span> <span class=\"hljs-keyword\">impl</span>&lt;T&gt; <span class=\"hljs-built_in\">Send</span> <span class=\"hljs-keyword\">for</span> List&lt;T&gt;\n<span class=\"hljs-keyword\">where</span>\n  T: <span class=\"hljs-built_in\">Send</span>, <span class=\"hljs-comment\">// from the field `data`</span>\n  <span class=\"hljs-built_in\">Option</span>&lt;<span class=\"hljs-built_in\">Box</span>&lt;List&lt;T&gt;&gt;&gt;: <span class=\"hljs-built_in\">Send</span>, <span class=\"hljs-comment\">// from the field `next`</span>\n{ }\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Explicit impls may be either positive or negative. They take the form:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore (partial-example) hljs\"><span class=\"hljs-keyword\">impl</span>&lt;...&gt; AutoTrait <span class=\"hljs-keyword\">for</span> StructName&lt;..&gt; { }\n<span class=\"hljs-keyword\">impl</span>&lt;...&gt; !AutoTrait <span class=\"hljs-keyword\">for</span> StructName&lt;..&gt; { }</code></pre>\n<h2 id=\"coinduction-auto-traits-permit-cyclic-matching\"><a class=\"header\" href=\"#coinduction-auto-traits-permit-cyclic-matching\">Coinduction: Auto traits permit cyclic matching</a></h2>\n<p>Unlike ordinary trait matching, auto traits are <strong>coinductive</strong>. This\nmeans, in short, that cycles which occur in trait matching are\nconsidered ok. As an example, consider the recursive struct <code class=\"hljs\">List</code>\nintroduced in the previous section. In attempting to determine whether\n<code class=\"hljs\">List: Send</code>, we would wind up in a cycle: to apply the impl, we must\nshow that <code class=\"hljs\">Option&lt;Box&lt;List&gt;&gt;: Send</code>, which will in turn require\n<code class=\"hljs\">Box&lt;List&gt;: Send</code> and then finally <code class=\"hljs\">List: Send</code> again. Under ordinary\ntrait matching, this cycle would be an error, but for an auto trait it\nis considered a successful match.</p>\n<h2 id=\"items\"><a class=\"header\" href=\"#items\">Items</a></h2>\n<p>Auto traits cannot have any trait items, such as methods or associated types. This ensures that we can generate default implementations.</p>\n<h2 id=\"supertraits\"><a class=\"header\" href=\"#supertraits\">Supertraits</a></h2>\n<p>Auto traits cannot have supertraits. This is for soundness reasons, as the interaction of coinduction with implied bounds is difficult to reconcile.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"avx512_target_feature\"><a class=\"header\" href=\"#avx512_target_feature\"><code>avx512_target_feature</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/44839\">#44839</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"box_patterns\"><a class=\"header\" href=\"#box_patterns\"><code>box_patterns</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/29641\">#29641</a></p>\n<hr>\n<p>Box patterns let you match on <code class=\"hljs\">Box&lt;T&gt;</code>s:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-meta\">#![feature(box_patterns)]</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> b = <span class=\"hljs-literal\">Some</span>(<span class=\"hljs-built_in\">Box</span>::new(<span class=\"hljs-number\">5</span>));\n    <span class=\"hljs-keyword\">match</span> b {\n        <span class=\"hljs-literal\">Some</span>(<span class=\"hljs-keyword\">box</span> n) <span class=\"hljs-keyword\">if</span> n &lt; <span class=\"hljs-number\">0</span> =&gt; {\n            <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Box contains negative number {n}\"</span>);\n        },\n        <span class=\"hljs-literal\">Some</span>(<span class=\"hljs-keyword\">box</span> n) <span class=\"hljs-keyword\">if</span> n &gt;= <span class=\"hljs-number\">0</span> =&gt; {\n            <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Box contains non-negative number {n}\"</span>);\n        },\n        <span class=\"hljs-literal\">None</span> =&gt; {\n            <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"No box\"</span>);\n        },\n        _ =&gt; <span class=\"hljs-built_in\">unreachable!</span>()\n    }\n}</code></pre></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"bpf_target_feature\"><a class=\"header\" href=\"#bpf_target_feature\"><code>bpf_target_feature</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/44839\">#44839</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"builtin_syntax\"><a class=\"header\" href=\"#builtin_syntax\"><code>builtin_syntax</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/110680\">#110680</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"c_unwind\"><a class=\"header\" href=\"#c_unwind\"><code>c_unwind</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/74990\">#74990</a></p>\n<hr>\n<p>Introduces new ABI strings:</p>\n<ul>\n<li>\"C-unwind\"</li>\n<li>\"cdecl-unwind\"</li>\n<li>\"stdcall-unwind\"</li>\n<li>\"fastcall-unwind\"</li>\n<li>\"vectorcall-unwind\"</li>\n<li>\"thiscall-unwind\"</li>\n<li>\"aapcs-unwind\"</li>\n<li>\"win64-unwind\"</li>\n<li>\"sysv64-unwind\"</li>\n<li>\"system-unwind\"</li>\n</ul>\n<p>These enable unwinding from other languages (such as C++) into Rust frames and\nfrom Rust into other languages.</p>\n<p>See <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/2945-c-unwind-abi.md\">RFC 2945</a> for more information.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"c_variadic\"><a class=\"header\" href=\"#c_variadic\"><code>c_variadic</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/44930\">#44930</a></p>\n<hr>\n<p>The <code class=\"hljs\">c_variadic</code> language feature enables C-variadic functions to be\ndefined in Rust. They may be called both from within Rust and via FFI.</p>\n<h2 id=\"examples-4\"><a class=\"header\" href=\"#examples-4\">Examples</a></h2>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"hljs-meta\">#![feature(c_variadic)]</span>\n\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">unsafe</span> <span class=\"hljs-keyword\">extern</span> <span class=\"hljs-string\">\"C\"</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">add</span></span>(n: <span class=\"hljs-built_in\">usize</span>, <span class=\"hljs-keyword\">mut</span> args: ...) -&gt; <span class=\"hljs-built_in\">usize</span> {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> sum = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..n {\n        sum += args.arg::&lt;<span class=\"hljs-built_in\">usize</span>&gt;();\n    }\n    sum\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"cfg_overflow_checks\"><a class=\"header\" href=\"#cfg_overflow_checks\"><code>cfg_overflow_checks</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/111466\">#111466</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"cfg_relocation_model\"><a class=\"header\" href=\"#cfg_relocation_model\"><code>cfg_relocation_model</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/114929\">#114929</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"cfg_sanitize\"><a class=\"header\" href=\"#cfg_sanitize\"><code>cfg_sanitize</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/39699\">#39699</a></p>\n<hr>\n<p>The <code class=\"hljs\">cfg_sanitize</code> feature makes it possible to execute different code\ndepending on whether a particular sanitizer is enabled or not.</p>\n<h2 id=\"examples-5\"><a class=\"header\" href=\"#examples-5\">Examples</a></h2>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"hljs-meta\">#![feature(cfg_sanitize)]</span>\n\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-meta\">#[cfg(sanitize = <span class=\"hljs-meta-string\">\"thread\"</span>)]</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">a</span></span>() {\n    <span class=\"hljs-comment\">// ...</span>\n}\n\n<span class=\"hljs-meta\">#[cfg(not(sanitize = <span class=\"hljs-meta-string\">\"thread\"</span>))]</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">a</span></span>() {\n    <span class=\"hljs-comment\">// ...</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">b</span></span>() {\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">cfg!</span>(sanitize = <span class=\"hljs-string\">\"leak\"</span>) {\n        <span class=\"hljs-comment\">// ...</span>\n    } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-comment\">// ...</span>\n    }\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"cfg_sanitizer_cfi\"><a class=\"header\" href=\"#cfg_sanitizer_cfi\"><code>cfg_sanitizer_cfi</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/89653\">#89653</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"cfg_target_compact\"><a class=\"header\" href=\"#cfg_target_compact\"><code>cfg_target_compact</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/96901\">#96901</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"cfg_target_has_atomic\"><a class=\"header\" href=\"#cfg_target_has_atomic\"><code>cfg_target_has_atomic</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/94039\">#94039</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"cfg_target_has_atomic_equal_alignment\"><a class=\"header\" href=\"#cfg_target_has_atomic_equal_alignment\"><code>cfg_target_has_atomic_equal_alignment</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/93822\">#93822</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"cfg_target_thread_local\"><a class=\"header\" href=\"#cfg_target_thread_local\"><code>cfg_target_thread_local</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/29594\">#29594</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"cfg_ub_checks\"><a class=\"header\" href=\"#cfg_ub_checks\"><code>cfg_ub_checks</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/123499\">#123499</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"cfg_version\"><a class=\"header\" href=\"#cfg_version\"><code>cfg_version</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/64796\">#64796</a></p>\n<hr>\n<p>The <code class=\"hljs\">cfg_version</code> feature makes it possible to execute different code\ndepending on the compiler version. It will return true if the compiler\nversion is greater than or equal to the specified version.</p>\n<h2 id=\"examples-6\"><a class=\"header\" href=\"#examples-6\">Examples</a></h2>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"hljs-meta\">#![feature(cfg_version)]</span>\n\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-meta\">#[cfg(version(<span class=\"hljs-meta-string\">\"1.42\"</span>))]</span> <span class=\"hljs-comment\">// 1.42 and above</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">a</span></span>() {\n    <span class=\"hljs-comment\">// ...</span>\n}\n\n<span class=\"hljs-meta\">#[cfg(not(version(<span class=\"hljs-meta-string\">\"1.42\"</span>)))]</span> <span class=\"hljs-comment\">// 1.41 and below</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">a</span></span>() {\n    <span class=\"hljs-comment\">// ...</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">b</span></span>() {\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">cfg!</span>(version(<span class=\"hljs-string\">\"1.42\"</span>)) {\n        <span class=\"hljs-comment\">// ...</span>\n    } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-comment\">// ...</span>\n    }\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"cfi_encoding\"><a class=\"header\" href=\"#cfi_encoding\"><code>cfi_encoding</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/89653\">#89653</a></p>\n<hr>\n<p>The <code class=\"hljs\">cfi_encoding</code> feature allows the user to define a CFI encoding for a type.\nIt allows the user to use a different names for types that otherwise would be\nrequired to have the same name as used in externally defined C functions.</p>\n<h2 id=\"examples-7\"><a class=\"header\" href=\"#examples-7\">Examples</a></h2>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"hljs-meta\">#![feature(cfi_encoding, extern_types)]</span>\n\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-meta\">#[cfi_encoding = <span class=\"hljs-meta-string\">\"3Foo\"</span>]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Type1</span></span>(<span class=\"hljs-built_in\">i32</span>);\n\n<span class=\"hljs-keyword\">extern</span> {\n    <span class=\"hljs-meta\">#[cfi_encoding = <span class=\"hljs-meta-string\">\"3Bar\"</span>]</span>\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Type2</span></span>;\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"closure_lifetime_binder\"><a class=\"header\" href=\"#closure_lifetime_binder\"><code>closure_lifetime_binder</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/97362\">#97362</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"closure_track_caller\"><a class=\"header\" href=\"#closure_track_caller\"><code>closure_track_caller</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/87417\">#87417</a></p>\n<hr>\n<p>Allows using the <code class=\"hljs\">#[track_caller]</code> attribute on closures and coroutines.\nCalls made to the closure or coroutine will have caller information\navailable through <code class=\"hljs\">std::panic::Location::caller()</code>, just like using\n<code class=\"hljs\">#[track_caller]</code> on a function.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"cmse_nonsecure_entry\"><a class=\"header\" href=\"#cmse_nonsecure_entry\"><code>cmse_nonsecure_entry</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/75835\">#75835</a></p>\n<hr>\n<p>The <a href=\"https://developer.arm.com/documentation/100690/latest/\">TrustZone-M\nfeature</a> is available\nfor targets with the Armv8-M architecture profile (<code class=\"hljs\">thumbv8m</code> in their target\nname).\nLLVM, the Rust compiler and the linker are providing\n<a href=\"https://developer.arm.com/documentation/ecm0359818/latest/\">support</a> for the\nTrustZone-M feature.</p>\n<p>One of the things provided, with this unstable feature, is the\n<code class=\"hljs\">cmse_nonsecure_entry</code> attribute.  This attribute marks a Secure function as an\nentry function (see <a href=\"https://developer.arm.com/documentation/ecm0359818/latest/\">section\n5.4</a> for details).\nWith this attribute, the compiler will do the following:</p>\n<ul>\n<li>add a special symbol on the function which is the <code class=\"hljs\">__acle_se_</code> prefix and the\nstandard function name</li>\n<li>constrain the number of parameters to avoid using the Non-Secure stack</li>\n<li>before returning from the function, clear registers that might contain Secure\ninformation</li>\n<li>use the <code class=\"hljs\">BXNS</code> instruction to return</li>\n</ul>\n<p>Because the stack can not be used to pass parameters, there will be compilation\nerrors if:</p>\n<ul>\n<li>the total size of all parameters is too big (for example more than four 32\nbits integers)</li>\n<li>the entry function is not using a C ABI</li>\n</ul>\n<p>The special symbol <code class=\"hljs\">__acle_se_</code> will be used by the linker to generate a secure\ngateway veneer.</p>\n<!-- NOTE(ignore) this example is specific to thumbv8m targets -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-meta\">#![feature(cmse_nonsecure_entry)]</span>\n\n<span class=\"hljs-meta\">#[no_mangle]</span>\n<span class=\"hljs-meta\">#[cmse_nonsecure_entry]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">extern</span> <span class=\"hljs-string\">\"C\"</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">entry_function</span></span>(input: <span class=\"hljs-built_in\">u32</span>) -&gt; <span class=\"hljs-built_in\">u32</span> {\n    input + <span class=\"hljs-number\">6</span>\n}</code></pre>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">$ rustc --emit obj --crate-type lib --target thumbv8m.main-none-eabi function.rs\n$ arm-none-eabi-objdump -D function.o\n\n00000000 &lt;entry_function&gt;:\n   0:   b580            push    {r7, lr}\n   2:   466f            mov     r7, sp\n   4:   b082            sub     sp, #8\n   6:   9001            str     r0, [sp, #4]\n   8:   1d81            adds    r1, r0, #6\n   a:   460a            mov     r2, r1\n   c:   4281            cmp     r1, r0\n   e:   9200            str     r2, [sp, #0]\n  10:   d30b            bcc.n   2a &lt;entry_function+0x2a&gt;\n  12:   e7ff            b.n     14 &lt;entry_function+0x14&gt;\n  14:   9800            ldr     r0, [sp, #0]\n  16:   b002            add     sp, #8\n  18:   e8bd 4080       ldmia.w sp!, {r7, lr}\n  1c:   4671            mov     r1, lr\n  1e:   4672            mov     r2, lr\n  20:   4673            mov     r3, lr\n  22:   46f4            mov     ip, lr\n  24:   f38e 8800       msr     CPSR_f, lr\n  28:   4774            bxns    lr\n  2a:   f240 0000       movw    r0, #0\n  2e:   f2c0 0000       movt    r0, #0\n  32:   f240 0200       movw    r2, #0\n  36:   f2c0 0200       movt    r2, #0\n  3a:   211c            movs    r1, #28\n  3c:   f7ff fffe       bl      0 &lt;_ZN4core9panicking5panic17h5c028258ca2fb3f5E&gt;\n  40:   defe            udf     #254    ; 0xfe\n</code></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"compiler_builtins\"><a class=\"header\" href=\"#compiler_builtins\"><code>compiler_builtins</code></a></h1>\n<p>This feature is internal to the Rust compiler and is not intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_async_blocks\"><a class=\"header\" href=\"#const_async_blocks\"><code>const_async_blocks</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/85368\">#85368</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_closures\"><a class=\"header\" href=\"#const_closures\"><code>const_closures</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/106003\">#106003</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_extern_fn\"><a class=\"header\" href=\"#const_extern_fn\"><code>const_extern_fn</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/64926\">#64926</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_fn_floating_point_arithmetic\"><a class=\"header\" href=\"#const_fn_floating_point_arithmetic\"><code>const_fn_floating_point_arithmetic</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/57241\">#57241</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_for\"><a class=\"header\" href=\"#const_for\"><code>const_for</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/87575\">#87575</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_mut_refs\"><a class=\"header\" href=\"#const_mut_refs\"><code>const_mut_refs</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/57349\">#57349</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_precise_live_drops\"><a class=\"header\" href=\"#const_precise_live_drops\"><code>const_precise_live_drops</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/73255\">#73255</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_refs_to_cell\"><a class=\"header\" href=\"#const_refs_to_cell\"><code>const_refs_to_cell</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/80384\">#80384</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_refs_to_static\"><a class=\"header\" href=\"#const_refs_to_static\"><code>const_refs_to_static</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/119618\">#119618</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_trait_impl\"><a class=\"header\" href=\"#const_trait_impl\"><code>const_trait_impl</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/67792\">#67792</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_try\"><a class=\"header\" href=\"#const_try\"><code>const_try</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/74935\">#74935</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"coroutine_clone\"><a class=\"header\" href=\"#coroutine_clone\"><code>coroutine_clone</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/95360\">#95360</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"coroutines\"><a class=\"header\" href=\"#coroutines\"><code>coroutines</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/43122\">#43122</a></p>\n<hr>\n<p>The <code class=\"hljs\">coroutines</code> feature gate in Rust allows you to define coroutine or\ncoroutine literals. A coroutine is a \"resumable function\" that syntactically\nresembles a closure but compiles to much different semantics in the compiler\nitself. The primary feature of a coroutine is that it can be suspended during\nexecution to be resumed at a later date. Coroutines use the <code class=\"hljs\">yield</code> keyword to\n\"return\", and then the caller can <code class=\"hljs\">resume</code> a coroutine to resume execution just\nafter the <code class=\"hljs\">yield</code> keyword.</p>\n<p>Coroutines are an extra-unstable feature in the compiler right now. Added in\n<a href=\"https://github.com/rust-lang/rfcs/pull/2033\">RFC 2033</a> they're mostly intended right now as a information/constraint\ngathering phase. The intent is that experimentation can happen on the nightly\ncompiler before actual stabilization. A further RFC will be required to\nstabilize coroutines and will likely contain at least a few small\ntweaks to the overall design.</p>\n<p>A syntactical example of a coroutine is:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-meta\">#![feature(coroutines, coroutine_trait, stmt_expr_attributes)]</span>\n\n<span class=\"hljs-keyword\">use</span> std::ops::{Coroutine, CoroutineState};\n<span class=\"hljs-keyword\">use</span> std::pin::Pin;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> coroutine = <span class=\"hljs-meta\">#[coroutine]</span> || {\n        <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"foo\"</span>\n    };\n\n    <span class=\"hljs-keyword\">match</span> Pin::new(&amp;<span class=\"hljs-keyword\">mut</span> coroutine).resume(()) {\n        CoroutineState::Yielded(<span class=\"hljs-number\">1</span>) =&gt; {}\n        _ =&gt; <span class=\"hljs-built_in\">panic!</span>(<span class=\"hljs-string\">\"unexpected value from resume\"</span>),\n    }\n    <span class=\"hljs-keyword\">match</span> Pin::new(&amp;<span class=\"hljs-keyword\">mut</span> coroutine).resume(()) {\n        CoroutineState::Complete(<span class=\"hljs-string\">\"foo\"</span>) =&gt; {}\n        _ =&gt; <span class=\"hljs-built_in\">panic!</span>(<span class=\"hljs-string\">\"unexpected value from resume\"</span>),\n    }\n}</code></pre></pre>\n<p>Coroutines are closure-like literals which are annotated with <code class=\"hljs\">#[coroutine]</code>\nand can contain a <code class=\"hljs\">yield</code> statement. The\n<code class=\"hljs\">yield</code> statement takes an optional expression of a value to yield out of the\ncoroutine. All coroutine literals implement the <code class=\"hljs\">Coroutine</code> trait in the\n<code class=\"hljs\">std::ops</code> module. The <code class=\"hljs\">Coroutine</code> trait has one main method, <code class=\"hljs\">resume</code>, which\nresumes execution of the coroutine at the previous suspension point.</p>\n<p>An example of the control flow of coroutines is that the following example\nprints all numbers in order:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-meta\">#![feature(coroutines, coroutine_trait, stmt_expr_attributes)]</span>\n\n<span class=\"hljs-keyword\">use</span> std::ops::Coroutine;\n<span class=\"hljs-keyword\">use</span> std::pin::Pin;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> coroutine = <span class=\"hljs-meta\">#[coroutine]</span> || {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"2\"</span>);\n        <span class=\"hljs-keyword\">yield</span>;\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"4\"</span>);\n    };\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"1\"</span>);\n    Pin::new(&amp;<span class=\"hljs-keyword\">mut</span> coroutine).resume(());\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"3\"</span>);\n    Pin::new(&amp;<span class=\"hljs-keyword\">mut</span> coroutine).resume(());\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"5\"</span>);\n}</code></pre></pre>\n<p>At this time the main use case of coroutines is an implementation\nprimitive for <code class=\"hljs\">async</code>/<code class=\"hljs\">await</code> and <code class=\"hljs\">gen</code> syntax, but coroutines\nwill likely be extended to other primitives in the future.\nFeedback on the design and usage is always appreciated!</p>\n<h3 id=\"the-coroutine-trait\"><a class=\"header\" href=\"#the-coroutine-trait\">The <code>Coroutine</code> trait</a></h3>\n<p>The <code class=\"hljs\">Coroutine</code> trait in <code class=\"hljs\">std::ops</code> currently looks like:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-meta\">#![feature(arbitrary_self_types, coroutine_trait)]</span>\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::ops::CoroutineState;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::pin::Pin;\n</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Coroutine</span></span>&lt;R = ()&gt; {\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Yield</span></span>;\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Return</span></span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">resume</span></span>(<span class=\"hljs-keyword\">self</span>: Pin&lt;&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">Self</span>&gt;, resume: R) -&gt; CoroutineState&lt;Self::Yield, Self::Return&gt;;\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>The <code class=\"hljs\">Coroutine::Yield</code> type is the type of values that can be yielded with the\n<code class=\"hljs\">yield</code> statement. The <code class=\"hljs\">Coroutine::Return</code> type is the returned type of the\ncoroutine. This is typically the last expression in a coroutine's definition or\nany value passed to <code class=\"hljs\">return</code> in a coroutine. The <code class=\"hljs\">resume</code> function is the entry\npoint for executing the <code class=\"hljs\">Coroutine</code> itself.</p>\n<p>The return value of <code class=\"hljs\">resume</code>, <code class=\"hljs\">CoroutineState</code>, looks like:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">CoroutineState</span></span>&lt;Y, R&gt; {\n    Yielded(Y),\n    Complete(R),\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>The <code class=\"hljs\">Yielded</code> variant indicates that the coroutine can later be resumed. This\ncorresponds to a <code class=\"hljs\">yield</code> point in a coroutine. The <code class=\"hljs\">Complete</code> variant indicates\nthat the coroutine is complete and cannot be resumed again. Calling <code class=\"hljs\">resume</code>\nafter a coroutine has returned <code class=\"hljs\">Complete</code> will likely result in a panic of the\nprogram.</p>\n<h3 id=\"closure-like-semantics\"><a class=\"header\" href=\"#closure-like-semantics\">Closure-like semantics</a></h3>\n<p>The closure-like syntax for coroutines alludes to the fact that they also have\nclosure-like semantics. Namely:</p>\n<ul>\n<li>\n<p>When created, a coroutine executes no code. A closure literal does not\nactually execute any of the closure's code on construction, and similarly a\ncoroutine literal does not execute any code inside the coroutine when\nconstructed.</p>\n</li>\n<li>\n<p>Coroutines can capture outer variables by reference or by move, and this can\nbe tweaked with the <code class=\"hljs\">move</code> keyword at the beginning of the closure. Like\nclosures all coroutines will have an implicit environment which is inferred by\nthe compiler. Outer variables can be moved into a coroutine for use as the\ncoroutine progresses.</p>\n</li>\n<li>\n<p>Coroutine literals produce a value with a unique type which implements the\n<code class=\"hljs\">std::ops::Coroutine</code> trait. This allows actual execution of the coroutine\nthrough the <code class=\"hljs\">Coroutine::resume</code> method as well as also naming it in return\ntypes and such.</p>\n</li>\n<li>\n<p>Traits like <code class=\"hljs\">Send</code> and <code class=\"hljs\">Sync</code> are automatically implemented for a <code class=\"hljs\">Coroutine</code>\ndepending on the captured variables of the environment. Unlike closures,\ncoroutines also depend on variables live across suspension points. This means\nthat although the ambient environment may be <code class=\"hljs\">Send</code> or <code class=\"hljs\">Sync</code>, the coroutine\nitself may not be due to internal variables live across <code class=\"hljs\">yield</code> points being\nnot-<code class=\"hljs\">Send</code> or not-<code class=\"hljs\">Sync</code>. Note that coroutines do\nnot implement traits like <code class=\"hljs\">Copy</code> or <code class=\"hljs\">Clone</code> automatically.</p>\n</li>\n<li>\n<p>Whenever a coroutine is dropped it will drop all captured environment\nvariables.</p>\n</li>\n</ul>\n<h3 id=\"coroutines-as-state-machines\"><a class=\"header\" href=\"#coroutines-as-state-machines\">Coroutines as state machines</a></h3>\n<p>In the compiler, coroutines are currently compiled as state machines. Each\n<code class=\"hljs\">yield</code> expression will correspond to a different state that stores all live\nvariables over that suspension point. Resumption of a coroutine will dispatch on\nthe current state and then execute internally until a <code class=\"hljs\">yield</code> is reached, at\nwhich point all state is saved off in the coroutine and a value is returned.</p>\n<p>Let's take a look at an example to see what's going on here:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-meta\">#![feature(coroutines, coroutine_trait, stmt_expr_attributes)]</span>\n\n<span class=\"hljs-keyword\">use</span> std::ops::Coroutine;\n<span class=\"hljs-keyword\">use</span> std::pin::Pin;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> ret = <span class=\"hljs-string\">\"foo\"</span>;\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> coroutine = <span class=\"hljs-meta\">#[coroutine]</span> <span class=\"hljs-keyword\">move</span> || {\n        <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-keyword\">return</span> ret\n    };\n\n    Pin::new(&amp;<span class=\"hljs-keyword\">mut</span> coroutine).resume(());\n    Pin::new(&amp;<span class=\"hljs-keyword\">mut</span> coroutine).resume(());\n}</code></pre></pre>\n<p>This coroutine literal will compile down to something similar to:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-meta\">#![feature(arbitrary_self_types, coroutine_trait)]</span>\n\n<span class=\"hljs-keyword\">use</span> std::ops::{Coroutine, CoroutineState};\n<span class=\"hljs-keyword\">use</span> std::pin::Pin;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> ret = <span class=\"hljs-string\">\"foo\"</span>;\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> coroutine = {\n        <span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">__Coroutine</span></span> {\n            Start(&amp;<span class=\"hljs-symbol\">'static</span> <span class=\"hljs-built_in\">str</span>),\n            Yield1(&amp;<span class=\"hljs-symbol\">'static</span> <span class=\"hljs-built_in\">str</span>),\n            Done,\n        }\n\n        <span class=\"hljs-keyword\">impl</span> Coroutine <span class=\"hljs-keyword\">for</span> __Coroutine {\n            <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Yield</span></span> = <span class=\"hljs-built_in\">i32</span>;\n            <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Return</span></span> = &amp;<span class=\"hljs-symbol\">'static</span> <span class=\"hljs-built_in\">str</span>;\n\n            <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">resume</span></span>(<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>: Pin&lt;&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">Self</span>&gt;, resume: ()) -&gt; CoroutineState&lt;<span class=\"hljs-built_in\">i32</span>, &amp;<span class=\"hljs-symbol\">'static</span> <span class=\"hljs-built_in\">str</span>&gt; {\n                <span class=\"hljs-keyword\">use</span> std::mem;\n                <span class=\"hljs-keyword\">match</span> mem::replace(&amp;<span class=\"hljs-keyword\">mut</span> *<span class=\"hljs-keyword\">self</span>, __Coroutine::Done) {\n                    __Coroutine::Start(s) =&gt; {\n                        *<span class=\"hljs-keyword\">self</span> = __Coroutine::Yield1(s);\n                        CoroutineState::Yielded(<span class=\"hljs-number\">1</span>)\n                    }\n\n                    __Coroutine::Yield1(s) =&gt; {\n                        *<span class=\"hljs-keyword\">self</span> = __Coroutine::Done;\n                        CoroutineState::Complete(s)\n                    }\n\n                    __Coroutine::Done =&gt; {\n                        <span class=\"hljs-built_in\">panic!</span>(<span class=\"hljs-string\">\"coroutine resumed after completion\"</span>)\n                    }\n                }\n            }\n        }\n\n        __Coroutine::Start(ret)\n    };\n\n    Pin::new(&amp;<span class=\"hljs-keyword\">mut</span> coroutine).resume(());\n    Pin::new(&amp;<span class=\"hljs-keyword\">mut</span> coroutine).resume(());\n}</code></pre></pre>\n<p>Notably here we can see that the compiler is generating a fresh type,\n<code class=\"hljs\">__Coroutine</code> in this case. This type has a number of states (represented here\nas an <code class=\"hljs\">enum</code>) corresponding to each of the conceptual states of the coroutine.\nAt the beginning we're closing over our outer variable <code class=\"hljs\">foo</code> and then that\nvariable is also live over the <code class=\"hljs\">yield</code> point, so it's stored in both states.</p>\n<p>When the coroutine starts it'll immediately yield 1, but it saves off its state\njust before it does so indicating that it has reached the yield point. Upon\nresuming again we'll execute the <code class=\"hljs\">return ret</code> which returns the <code class=\"hljs\">Complete</code>\nstate.</p>\n<p>Here we can also note that the <code class=\"hljs\">Done</code> state, if resumed, panics immediately as\nit's invalid to resume a completed coroutine. It's also worth noting that this\nis just a rough desugaring, not a normative specification for what the compiler\ndoes.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"coverage_attribute\"><a class=\"header\" href=\"#coverage_attribute\"><code>coverage_attribute</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/84605\">#84605</a></p>\n<hr>\n<p>The <code class=\"hljs\">coverage</code> attribute can be used to selectively disable coverage\ninstrumentation in an annotated function. This might be useful to:</p>\n<ul>\n<li>Avoid instrumentation overhead in a performance critical function</li>\n<li>Avoid generating coverage for a function that is not meant to be executed,\nbut still target 100% coverage for the rest of the program.</li>\n</ul>\n<h2 id=\"example-8\"><a class=\"header\" href=\"#example-8\">Example</a></h2>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"hljs-meta\">#![feature(coverage_attribute)]</span>\n\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">// `foo()` will get coverage instrumentation (by default)</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>() {\n  <span class=\"hljs-comment\">// ...</span>\n}\n\n<span class=\"hljs-meta\">#[coverage(off)]</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">bar</span></span>() {\n  <span class=\"hljs-comment\">// ...</span>\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"csky_target_feature\"><a class=\"header\" href=\"#csky_target_feature\"><code>csky_target_feature</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/44839\">#44839</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"custom_inner_attributes\"><a class=\"header\" href=\"#custom_inner_attributes\"><code>custom_inner_attributes</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/54726\">#54726</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"custom_mir\"><a class=\"header\" href=\"#custom_mir\"><code>custom_mir</code></a></h1>\n<p>This feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"custom_test_frameworks\"><a class=\"header\" href=\"#custom_test_frameworks\"><code>custom_test_frameworks</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/50297\">#50297</a></p>\n<hr>\n<p>The <code class=\"hljs\">custom_test_frameworks</code> feature allows the use of <code class=\"hljs\">#[test_case]</code> and <code class=\"hljs\">#![test_runner]</code>.\nAny function, const, or static can be annotated with <code class=\"hljs\">#[test_case]</code> causing it to be aggregated (like <code class=\"hljs\">#[test]</code>)\nand be passed to the test runner determined by the <code class=\"hljs\">#![test_runner]</code> crate attribute.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"hljs-meta\">#![feature(custom_test_frameworks)]</span>\n<span class=\"hljs-meta\">#![test_runner(my_runner)]</span>\n\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">my_runner</span></span>(tests: &amp;[&amp;<span class=\"hljs-built_in\">i32</span>]) {\n    <span class=\"hljs-keyword\">for</span> t <span class=\"hljs-keyword\">in</span> tests {\n        <span class=\"hljs-keyword\">if</span> **t == <span class=\"hljs-number\">0</span> {\n            <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"PASSED\"</span>);\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"FAILED\"</span>);\n        }\n    }\n}\n\n<span class=\"hljs-meta\">#[test_case]</span>\n<span class=\"hljs-keyword\">const</span> WILL_PASS: <span class=\"hljs-built_in\">i32</span> = <span class=\"hljs-number\">0</span>;\n\n<span class=\"hljs-meta\">#[test_case]</span>\n<span class=\"hljs-keyword\">const</span> WILL_FAIL: <span class=\"hljs-built_in\">i32</span> = <span class=\"hljs-number\">4</span>;\n<span class=\"boring\">}</span></code></pre></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"decl_macro\"><a class=\"header\" href=\"#decl_macro\"><code>decl_macro</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/39412\">#39412</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"default_type_parameter_fallback\"><a class=\"header\" href=\"#default_type_parameter_fallback\"><code>default_type_parameter_fallback</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/27336\">#27336</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"deprecated_safe\"><a class=\"header\" href=\"#deprecated_safe\"><code>deprecated_safe</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/94978\">#94978</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"deprecated_suggestion\"><a class=\"header\" href=\"#deprecated_suggestion\"><code>deprecated_suggestion</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/94785\">#94785</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"deref_patterns\"><a class=\"header\" href=\"#deref_patterns\"><code>deref_patterns</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/87121\">#87121</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"do_not_recommend\"><a class=\"header\" href=\"#do_not_recommend\"><code>do_not_recommend</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/51992\">#51992</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"doc_auto_cfg\"><a class=\"header\" href=\"#doc_auto_cfg\"><code>doc_auto_cfg</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/43781\">#43781</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"doc_cfg\"><a class=\"header\" href=\"#doc_cfg\"><code>doc_cfg</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/43781\">#43781</a></p>\n<hr>\n<p>The <code class=\"hljs\">doc_cfg</code> feature allows an API be documented as only available in some specific platforms.\nThis attribute has two effects:</p>\n<ol>\n<li>\n<p>In the annotated item's documentation, there will be a message saying \"Available on\n(platform) only\".</p>\n</li>\n<li>\n<p>The item's doc-tests will only run on the specific platform.</p>\n</li>\n</ol>\n<p>In addition to allowing the use of the <code class=\"hljs\">#[doc(cfg)]</code> attribute, this feature enables the use of a\nspecial conditional compilation flag, <code class=\"hljs\">#[cfg(doc)]</code>, set whenever building documentation on your\ncrate.</p>\n<p>This feature was introduced as part of PR <a href=\"https://github.com/rust-lang/rust/issues/43348\">#43348</a> to allow the platform-specific parts of the\nstandard library be documented.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"hljs-meta\">#![feature(doc_cfg)]</span>\n\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-meta\">#[cfg(any(windows, doc))]</span>\n<span class=\"hljs-meta\">#[doc(cfg(windows))]</span>\n<span class=\"hljs-comment\">/// The application's icon in the notification area (a.k.a. system tray).</span>\n<span class=\"hljs-comment\">///</span>\n<span class=\"hljs-comment\">/// # Examples</span>\n<span class=\"hljs-comment\">///</span>\n<span class=\"hljs-comment\">/// ```no_run</span>\n<span class=\"hljs-comment\">/// extern crate my_awesome_ui_library;</span>\n<span class=\"hljs-comment\">/// use my_awesome_ui_library::current_app;</span>\n<span class=\"hljs-comment\">/// use my_awesome_ui_library::windows::notification;</span>\n<span class=\"hljs-comment\">///</span>\n<span class=\"hljs-comment\">/// let icon = current_app().get::&lt;notification::Icon&gt;();</span>\n<span class=\"hljs-comment\">/// icon.show();</span>\n<span class=\"hljs-comment\">/// icon.show_message(\"Hello\");</span>\n<span class=\"hljs-comment\">/// ```</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Icon</span></span> {\n    <span class=\"hljs-comment\">// ...</span>\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"doc_cfg_hide\"><a class=\"header\" href=\"#doc_cfg_hide\"><code>doc_cfg_hide</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/43781\">#43781</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"doc_masked\"><a class=\"header\" href=\"#doc_masked\"><code>doc_masked</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/pull/44027\">#44027</a></p>\n<hr>\n<p>The <code class=\"hljs\">doc_masked</code> feature allows a crate to exclude types from a given crate from appearing in lists\nof trait implementations. The specifics of the feature are as follows:</p>\n<ol>\n<li>\n<p>When rustdoc encounters an <code class=\"hljs\">extern crate</code> statement annotated with a <code class=\"hljs\">#[doc(masked)]</code> attribute,\nit marks the crate as being masked.</p>\n</li>\n<li>\n<p>When listing traits a given type implements, rustdoc ensures that traits from masked crates are\nnot emitted into the documentation.</p>\n</li>\n<li>\n<p>When listing types that implement a given trait, rustdoc ensures that types from masked crates\nare not emitted into the documentation.</p>\n</li>\n</ol>\n<p>This feature was introduced in PR <a href=\"https://github.com/rust-lang/rust/pull/44026\">#44026</a> to ensure that compiler-internal and\nimplementation-specific types and traits were not included in the standard library's documentation.\nSuch types would introduce broken links into the documentation.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"doc_notable_trait\"><a class=\"header\" href=\"#doc_notable_trait\"><code>doc_notable_trait</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/45040\">#45040</a></p>\n<p>The <code class=\"hljs\">doc_notable_trait</code> feature allows the use of the <code class=\"hljs\">#[doc(notable_trait)]</code>\nattribute, which will display the trait in a \"Notable traits\" dialog for\nfunctions returning types that implement the trait. For example, this attribute\nis applied to the <code class=\"hljs\">Iterator</code>, <code class=\"hljs\">Future</code>, <code class=\"hljs\">io::Read</code>, and <code class=\"hljs\">io::Write</code> traits in\nthe standard library.</p>\n<p>You can do this on your own traits like so:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">#![feature(doc_notable_trait)]\n\n#[doc(notable_trait)]\npub trait MyTrait {}\n\npub struct MyStruct;\nimpl MyTrait for MyStruct {}\n\n/// The docs for this function will have a button that displays a dialog about\n/// `MyStruct` implementing `MyTrait`.\npub fn my_fn() -&gt; MyStruct { MyStruct }\n</code></pre>\n<p>This feature was originally implemented in PR <a href=\"https://github.com/rust-lang/rust/pull/45039\">#45039</a>.</p>\n<p>See also its documentation in <a href=\"language-features/../../rustdoc/unstable-features.html#adding-your-trait-to-the-notable-traits-dialog\">the rustdoc book</a>.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"dropck_eyepatch\"><a class=\"header\" href=\"#dropck_eyepatch\"><code>dropck_eyepatch</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/34761\">#34761</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"dyn_star\"><a class=\"header\" href=\"#dyn_star\"><code>dyn_star</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/102425\">#102425</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"effects\"><a class=\"header\" href=\"#effects\"><code>effects</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/102090\">#102090</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"ermsb_target_feature\"><a class=\"header\" href=\"#ermsb_target_feature\"><code>ermsb_target_feature</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/44839\">#44839</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"exhaustive_patterns\"><a class=\"header\" href=\"#exhaustive_patterns\"><code>exhaustive_patterns</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/51085\">#51085</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"explicit_tail_calls\"><a class=\"header\" href=\"#explicit_tail_calls\"><code>explicit_tail_calls</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/112788\">#112788</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"expr_fragment_specifier_2024\"><a class=\"header\" href=\"#expr_fragment_specifier_2024\"><code>expr_fragment_specifier_2024</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/123742\">#123742</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"extended_varargs_abi_support\"><a class=\"header\" href=\"#extended_varargs_abi_support\"><code>extended_varargs_abi_support</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/100189\">#100189</a></p>\n<hr>\n<p>This feature adds the possibility of using <code class=\"hljs\">sysv64</code>, <code class=\"hljs\">win64</code> or <code class=\"hljs\">efiapi</code> calling\nconventions on functions with varargs.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"extern_types\"><a class=\"header\" href=\"#extern_types\"><code>extern_types</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/43467\">#43467</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"f128\"><a class=\"header\" href=\"#f128\"><code>f128</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/116909\">#116909</a></p>\n<hr>\n<p>Enable the <code class=\"hljs\">f128</code> type for  IEEE 128-bit floating numbers (quad precision).</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"f16\"><a class=\"header\" href=\"#f16\"><code>f16</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/116909\">#116909</a></p>\n<hr>\n<p>Enable the <code class=\"hljs\">f16</code> type for  IEEE 16-bit floating numbers (half precision).</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"ffi_const\"><a class=\"header\" href=\"#ffi_const\"><code>ffi_const</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/58328\">#58328</a></p>\n<hr>\n<p>The <code class=\"hljs\">#[ffi_const]</code> attribute applies clang's <code class=\"hljs\">const</code> attribute to foreign\nfunctions declarations.</p>\n<p>That is, <code class=\"hljs\">#[ffi_const]</code> functions shall have no effects except for its return\nvalue, which can only depend on the values of the function parameters, and is\nnot affected by changes to the observable state of the program.</p>\n<p>Applying the <code class=\"hljs\">#[ffi_const]</code> attribute to a function that violates these\nrequirements is undefined behaviour.</p>\n<p>This attribute enables Rust to perform common optimizations, like sub-expression\nelimination, and it can avoid emitting some calls in repeated invocations of the\nfunction with the same argument values regardless of other operations being\nperformed in between these functions calls (as opposed to <code class=\"hljs\">#[ffi_pure]</code>\nfunctions).</p>\n<h2 id=\"pitfalls\"><a class=\"header\" href=\"#pitfalls\">Pitfalls</a></h2>\n<p>A <code class=\"hljs\">#[ffi_const]</code> function can only read global memory that would not affect\nits return value for the whole execution of the program (e.g. immutable global\nmemory). <code class=\"hljs\">#[ffi_const]</code> functions are referentially-transparent and therefore\nmore strict than <code class=\"hljs\">#[ffi_pure]</code> functions.</p>\n<p>A common pitfall involves applying the <code class=\"hljs\">#[ffi_const]</code> attribute to a\nfunction that reads memory through pointer arguments which do not necessarily\npoint to immutable global memory.</p>\n<p>A <code class=\"hljs\">#[ffi_const]</code> function that returns unit has no effect on the abstract\nmachine's state, and a <code class=\"hljs\">#[ffi_const]</code> function cannot be <code class=\"hljs\">#[ffi_pure]</code>.</p>\n<p>A <code class=\"hljs\">#[ffi_const]</code> function must not diverge, neither via a side effect (e.g. a\ncall to <code class=\"hljs\">abort</code>) nor by infinite loops.</p>\n<p>When translating C headers to Rust FFI, it is worth verifying for which targets\nthe <code class=\"hljs\">const</code> attribute is enabled in those headers, and using the appropriate\n<code class=\"hljs\">cfg</code> macros in the Rust side to match those definitions. While the semantics of\n<code class=\"hljs\">const</code> are implemented identically by many C and C++ compilers, e.g., clang,\n<a href=\"https://gcc.gnu.org/onlinedocs/gcc/Common-Function-Attributes.html#index-const-function-attribute\">GCC</a>, <a href=\"http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0491c/Cacgigch.html\">ARM C/C++ compiler</a>, <a href=\"https://www.ibm.com/support/knowledgecenter/fr/ssw_ibm_i_71/rzarg/fn_attrib_const.htm\">IBM ILE C/C++</a>, etc. they are not necessarily\nimplemented in this way on all of them. It is therefore also worth verifying\nthat the semantics of the C toolchain used to compile the binary being linked\nagainst are compatible with those of the <code class=\"hljs\">#[ffi_const]</code>.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"ffi_pure\"><a class=\"header\" href=\"#ffi_pure\"><code>ffi_pure</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/58329\">#58329</a></p>\n<hr>\n<p>The <code class=\"hljs\">#[ffi_pure]</code> attribute applies clang's <code class=\"hljs\">pure</code> attribute to foreign\nfunctions declarations.</p>\n<p>That is, <code class=\"hljs\">#[ffi_pure]</code> functions shall have no effects except for its return\nvalue, which shall not change across two consecutive function calls with\nthe same parameters.</p>\n<p>Applying the <code class=\"hljs\">#[ffi_pure]</code> attribute to a function that violates these\nrequirements is undefined behavior.</p>\n<p>This attribute enables Rust to perform common optimizations, like sub-expression\nelimination and loop optimizations. Some common examples of pure functions are\n<code class=\"hljs\">strlen</code> or <code class=\"hljs\">memcmp</code>.</p>\n<p>These optimizations are only applicable when the compiler can prove that no\nprogram state observable by the <code class=\"hljs\">#[ffi_pure]</code> function has changed between calls\nof the function, which could alter the result. See also the <code class=\"hljs\">#[ffi_const]</code>\nattribute, which provides stronger guarantees regarding the allowable behavior\nof a function, enabling further optimization.</p>\n<h2 id=\"pitfalls-1\"><a class=\"header\" href=\"#pitfalls-1\">Pitfalls</a></h2>\n<p>A <code class=\"hljs\">#[ffi_pure]</code> function can read global memory through the function\nparameters (e.g. pointers), globals, etc. <code class=\"hljs\">#[ffi_pure]</code> functions are not\nreferentially-transparent, and are therefore more relaxed than <code class=\"hljs\">#[ffi_const]</code>\nfunctions.</p>\n<p>However, accessing global memory through volatile or atomic reads can violate the\nrequirement that two consecutive function calls shall return the same value.</p>\n<p>A <code class=\"hljs\">pure</code> function that returns unit has no effect on the abstract machine's\nstate.</p>\n<p>A <code class=\"hljs\">#[ffi_pure]</code> function must not diverge, neither via a side effect (e.g. a\ncall to <code class=\"hljs\">abort</code>) nor by infinite loops.</p>\n<p>When translating C headers to Rust FFI, it is worth verifying for which targets\nthe <code class=\"hljs\">pure</code> attribute is enabled in those headers, and using the appropriate\n<code class=\"hljs\">cfg</code> macros in the Rust side to match those definitions. While the semantics of\n<code class=\"hljs\">pure</code> are implemented identically by many C and C++ compilers, e.g., clang,\n<a href=\"https://gcc.gnu.org/onlinedocs/gcc/Common-Function-Attributes.html#index-pure-function-attribute\">GCC</a>, <a href=\"http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0491c/Cacigdac.html\">ARM C/C++ compiler</a>, <a href=\"https://www.ibm.com/support/knowledgecenter/fr/ssw_ibm_i_71/rzarg/fn_attrib_pure.htm\">IBM ILE C/C++</a>, etc. they are not necessarily\nimplemented in this way on all of them. It is therefore also worth verifying\nthat the semantics of the C toolchain used to compile the binary being linked\nagainst are compatible with those of the <code class=\"hljs\">#[ffi_pure]</code>.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"fn_align\"><a class=\"header\" href=\"#fn_align\"><code>fn_align</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/82232\">#82232</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"fn_delegation\"><a class=\"header\" href=\"#fn_delegation\"><code>fn_delegation</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/118212\">#118212</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"freeze_impls\"><a class=\"header\" href=\"#freeze_impls\"><code>freeze_impls</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/121675\">#121675</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"fundamental\"><a class=\"header\" href=\"#fundamental\"><code>fundamental</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/29635\">#29635</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"gen_blocks\"><a class=\"header\" href=\"#gen_blocks\"><code>gen_blocks</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/117078\">#117078</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"generic_arg_infer\"><a class=\"header\" href=\"#generic_arg_infer\"><code>generic_arg_infer</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/85077\">#85077</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"generic_assert\"><a class=\"header\" href=\"#generic_assert\"><code>generic_assert</code></a></h1>\n<p>This feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"generic_associated_types_extended\"><a class=\"header\" href=\"#generic_associated_types_extended\"><code>generic_associated_types_extended</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/95451\">#95451</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"generic_const_exprs\"><a class=\"header\" href=\"#generic_const_exprs\"><code>generic_const_exprs</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/76560\">#76560</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"generic_const_items\"><a class=\"header\" href=\"#generic_const_items\"><code>generic_const_items</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/113521\">#113521</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"global_registration\"><a class=\"header\" href=\"#global_registration\"><code>global_registration</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/125119\">#125119</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"half_open_range_patterns_in_slices\"><a class=\"header\" href=\"#half_open_range_patterns_in_slices\"><code>half_open_range_patterns_in_slices</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/67264\">#67264</a>\nIt is a future part of the <code class=\"hljs\">exclusive_range_pattern</code> feature,\ntracked at <a href=\"https://github.com/rust-lang/rust/issues/37854\">#37854</a>.</p>\n<hr>\n<p>This feature allow using top-level half-open range patterns in slices.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-meta\">#![feature(half_open_range_patterns_in_slices)]</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> xs = [<span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">21</span>, <span class=\"hljs-number\">8</span>];\n    <span class=\"hljs-keyword\">let</span> [a @ <span class=\"hljs-number\">3</span>.., b @ ..<span class=\"hljs-number\">3</span>, c @ <span class=\"hljs-number\">4</span>..<span class=\"hljs-number\">6</span>, ..] = xs <span class=\"hljs-keyword\">else</span> { <span class=\"hljs-keyword\">return</span>; };\n}</code></pre></pre>\n<p>Note that this feature is not required if the patterns are wrapped between parenthesis.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> xs = [<span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">1</span>];\n    <span class=\"hljs-keyword\">let</span> [(a @ <span class=\"hljs-number\">3</span>..), c] = xs <span class=\"hljs-keyword\">else</span> { <span class=\"hljs-keyword\">return</span>; };\n}</code></pre></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"hexagon_target_feature\"><a class=\"header\" href=\"#hexagon_target_feature\"><code>hexagon_target_feature</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/44839\">#44839</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"if_let_guard\"><a class=\"header\" href=\"#if_let_guard\"><code>if_let_guard</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/51114\">#51114</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"impl_trait_in_assoc_type\"><a class=\"header\" href=\"#impl_trait_in_assoc_type\"><code>impl_trait_in_assoc_type</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/63063\">#63063</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"impl_trait_in_fn_trait_return\"><a class=\"header\" href=\"#impl_trait_in_fn_trait_return\"><code>impl_trait_in_fn_trait_return</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/99697\">#99697</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"inherent_associated_types\"><a class=\"header\" href=\"#inherent_associated_types\"><code>inherent_associated_types</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/8995\">#8995</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"inline_const_pat\"><a class=\"header\" href=\"#inline_const_pat\"><code>inline_const_pat</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/76001\">#76001</a></p>\n<hr>\n<p>This feature allows you to use inline constant expressions in pattern position:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"hljs-meta\">#![feature(inline_const_pat)]</span>\n\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">const</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">one</span></span>() -&gt; <span class=\"hljs-built_in\">i32</span> { <span class=\"hljs-number\">1</span> }\n\n<span class=\"hljs-keyword\">let</span> some_int = <span class=\"hljs-number\">3</span>;\n<span class=\"hljs-keyword\">match</span> some_int {\n    <span class=\"hljs-keyword\">const</span> { <span class=\"hljs-number\">1</span> + <span class=\"hljs-number\">2</span> } =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Matched 1 + 2\"</span>),\n    <span class=\"hljs-keyword\">const</span> { one() } =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Matched const fn returning 1\"</span>),\n    _ =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Didn't match anything :(\"</span>),\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"intra-doc-pointers\"><a class=\"header\" href=\"#intra-doc-pointers\"><code>intra-doc-pointers</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/80896\">#80896</a></p>\n<hr>\n<p>Rustdoc does not currently allow disambiguating between <code class=\"hljs\">*const</code> and <code class=\"hljs\">*mut</code>, and\nraw pointers in intra-doc links are unstable until it does.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"hljs-meta\">#![feature(intra_doc_pointers)]</span>\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">//! [pointer::add]</span>\n<span class=\"boring\">}</span></code></pre></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"intrinsics\"><a class=\"header\" href=\"#intrinsics\"><code>intrinsics</code></a></h1>\n<p>The tracking issue for this feature is: None.</p>\n<p>Intrinsics are rarely intended to be stable directly, but are usually\nexported in some sort of stable manner. Prefer using the stable interfaces to\nthe intrinsic directly when you can.</p>\n<hr>\n<h2 id=\"intrinsics-with-fallback-logic\"><a class=\"header\" href=\"#intrinsics-with-fallback-logic\">Intrinsics with fallback logic</a></h2>\n<p>Many intrinsics can be written in pure rust, albeit inefficiently or without supporting\nsome features that only exist on some backends. Backends can simply not implement those\nintrinsics without causing any code miscompilations or failures to compile.\nAll intrinsic fallback bodies are automatically made cross-crate inlineable (like <code class=\"hljs\">#[inline]</code>)\nby the codegen backend, but not the MIR inliner.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"hljs-meta\">#![feature(rustc_attrs, effects)]</span>\n<span class=\"hljs-meta\">#![allow(internal_features)]</span>\n\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-meta\">#[rustc_intrinsic]</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">unsafe</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">const_deallocate</span></span>(_ptr: *<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-built_in\">u8</span>, _size: <span class=\"hljs-built_in\">usize</span>, _align: <span class=\"hljs-built_in\">usize</span>) {}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Since these are just regular functions, it is perfectly ok to create the intrinsic twice:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"hljs-meta\">#![feature(rustc_attrs, effects)]</span>\n<span class=\"hljs-meta\">#![allow(internal_features)]</span>\n\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-meta\">#[rustc_intrinsic]</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">unsafe</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">const_deallocate</span></span>(_ptr: *<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-built_in\">u8</span>, _size: <span class=\"hljs-built_in\">usize</span>, _align: <span class=\"hljs-built_in\">usize</span>) {}\n\n<span class=\"hljs-keyword\">mod</span> foo {\n    <span class=\"hljs-meta\">#[rustc_intrinsic]</span>\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">unsafe</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">const_deallocate</span></span>(_ptr: *<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-built_in\">u8</span>, _size: <span class=\"hljs-built_in\">usize</span>, _align: <span class=\"hljs-built_in\">usize</span>) {\n        <span class=\"hljs-built_in\">panic!</span>(<span class=\"hljs-string\">\"noisy const dealloc\"</span>)\n    }\n}\n\n<span class=\"boring\">}</span></code></pre></pre>\n<p>The behaviour on backends that override the intrinsic is exactly the same. On other\nbackends, the intrinsic behaviour depends on which implementation is called, just like\nwith any regular function.</p>\n<h2 id=\"intrinsics-lowered-to-mir-instructions\"><a class=\"header\" href=\"#intrinsics-lowered-to-mir-instructions\">Intrinsics lowered to MIR instructions</a></h2>\n<p>Various intrinsics have native MIR operations that they correspond to. Instead of requiring\nbackends to implement both the intrinsic and the MIR operation, the <code class=\"hljs\">lower_intrinsics</code> pass\nwill convert the calls to the MIR operation. Backends do not need to know about these intrinsics\nat all. These intrinsics only make sense without a body, and can either be declared as a \"rust-intrinsic\"\nor as a <code class=\"hljs\">#[rustc_intrinsic]</code>. The body is never used, as calls to the intrinsic do not exist\nanymore after MIR analyses.</p>\n<h2 id=\"intrinsics-without-fallback-logic\"><a class=\"header\" href=\"#intrinsics-without-fallback-logic\">Intrinsics without fallback logic</a></h2>\n<p>These must be implemented by all backends.</p>\n<h3 id=\"rustc_intrinsic-declarations\"><a class=\"header\" href=\"#rustc_intrinsic-declarations\"><code>#[rustc_intrinsic]</code> declarations</a></h3>\n<p>These are written like intrinsics with fallback bodies, but the body is irrelevant.\nUse <code class=\"hljs\">loop {}</code> for the body or call the intrinsic recursively and add\n<code class=\"hljs\">#[rustc_intrinsic_must_be_overridden]</code> to the function to ensure that backends don't\ninvoke the body.</p>\n<h3 id=\"legacy-extern-abi-based-intrinsics\"><a class=\"header\" href=\"#legacy-extern-abi-based-intrinsics\">Legacy extern ABI based intrinsics</a></h3>\n<p>These are imported as if they were FFI functions, with the special\n<code class=\"hljs\">rust-intrinsic</code> ABI. For example, if one was in a freestanding\ncontext, but wished to be able to <code class=\"hljs\">transmute</code> between types, and\nperform efficient pointer arithmetic, one would import those functions\nvia a declaration like</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"hljs-meta\">#![feature(intrinsics)]</span>\n<span class=\"hljs-meta\">#![allow(internal_features)]</span>\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {}\n</span>\n<span class=\"hljs-keyword\">extern</span> <span class=\"hljs-string\">\"rust-intrinsic\"</span> {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">transmute</span></span>&lt;T, U&gt;(x: T) -&gt; U;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">arith_offset</span></span>&lt;T&gt;(dst: *<span class=\"hljs-keyword\">const</span> T, offset: <span class=\"hljs-built_in\">isize</span>) -&gt; *<span class=\"hljs-keyword\">const</span> T;\n}</code></pre></pre>\n<p>As with any other FFI functions, these are by default always <code class=\"hljs\">unsafe</code> to call.\nYou can add <code class=\"hljs\">#[rustc_safe_intrinsic]</code> to the intrinsic to make it safe to call.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"lahfsahf_target_feature\"><a class=\"header\" href=\"#lahfsahf_target_feature\"><code>lahfsahf_target_feature</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/44839\">#44839</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"lang_items\"><a class=\"header\" href=\"#lang_items\"><code>lang_items</code></a></h1>\n<p>The tracking issue for this feature is: None.</p>\n<hr>\n<p>The <code class=\"hljs\">rustc</code> compiler has certain pluggable operations, that is,\nfunctionality that isn't hard-coded into the language, but is\nimplemented in libraries, with a special marker to tell the compiler\nit exists. The marker is the attribute <code class=\"hljs\">#[lang = \"...\"]</code> and there are\nvarious different values of <code class=\"hljs\">...</code>, i.e. various different 'lang\nitems'. Most of them can only be defined once.</p>\n<p>Lang items are loaded lazily by the compiler; e.g. if one never uses <code class=\"hljs\">Box</code>\nthen there is no need to define a function for <code class=\"hljs\">exchange_malloc</code>.\n<code class=\"hljs\">rustc</code> will emit an error when an item is needed but not found in the current\ncrate or any that it depends on.</p>\n<p>Some features provided by lang items:</p>\n<ul>\n<li>overloadable operators via traits: the traits corresponding to the\n<code class=\"hljs\">==</code>, <code class=\"hljs\">&lt;</code>, dereferencing (<code class=\"hljs\">*</code>) and <code class=\"hljs\">+</code> (etc.) operators are all\nmarked with lang items; those specific four are <code class=\"hljs\">eq</code>, <code class=\"hljs\">partial_ord</code>,\n<code class=\"hljs\">deref</code>/<code class=\"hljs\">deref_mut</code>, and <code class=\"hljs\">add</code> respectively.</li>\n<li>panicking: the <code class=\"hljs\">panic</code> and <code class=\"hljs\">panic_impl</code> lang items, among others.</li>\n<li>stack unwinding: the lang item <code class=\"hljs\">eh_personality</code> is a function used by the\nfailure mechanisms of the compiler. This is often mapped to GCC's personality\nfunction (see the <a href=\"https://github.com/rust-lang/rust/blob/master/library/std/src/sys/personality/gcc.rs\"><code class=\"hljs\">std</code> implementation</a> for more information),\nbut programs which don't trigger a panic can be assured that this function is\nnever called. Additionally, a <code class=\"hljs\">eh_catch_typeinfo</code> static is needed for certain\ntargets which implement Rust panics on top of C++ exceptions.</li>\n<li>the traits in <code class=\"hljs\">core::marker</code> used to indicate types of\nvarious kinds; e.g. lang items <code class=\"hljs\">sized</code>, <code class=\"hljs\">sync</code> and <code class=\"hljs\">copy</code>.</li>\n<li>memory allocation, see below.</li>\n</ul>\n<p>Most lang items are defined by <code class=\"hljs\">core</code>, but if you're trying to build\nan executable without the <code class=\"hljs\">std</code> crate, you might run into the need\nfor lang item definitions.</p>\n<h2 id=\"example-implementing-a-box\"><a class=\"header\" href=\"#example-implementing-a-box\">Example: Implementing a <code>Box</code></a></h2>\n<p><code class=\"hljs\">Box</code> pointers require two lang items: one for the type itself and one for\nallocation. A freestanding program that uses the <code class=\"hljs\">Box</code> sugar for dynamic\nallocations via <code class=\"hljs\">malloc</code> and <code class=\"hljs\">free</code>:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore (libc-is-finicky) hljs\"><span class=\"hljs-meta\">#![feature(lang_items, start, core_intrinsics, rustc_private, panic_unwind, rustc_attrs)]</span>\n<span class=\"hljs-meta\">#![allow(internal_features)]</span>\n<span class=\"hljs-meta\">#![no_std]</span>\n\n<span class=\"hljs-keyword\">extern</span> <span class=\"hljs-keyword\">crate</span> libc;\n<span class=\"hljs-keyword\">extern</span> <span class=\"hljs-keyword\">crate</span> unwind;\n\n<span class=\"hljs-keyword\">use</span> core::ffi::c_void;\n<span class=\"hljs-keyword\">use</span> core::intrinsics;\n<span class=\"hljs-keyword\">use</span> core::panic::PanicInfo;\n<span class=\"hljs-keyword\">use</span> core::ptr::NonNull;\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Global</span></span>; <span class=\"hljs-comment\">// the global allocator</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Unique</span></span>&lt;T&gt;(NonNull&lt;T&gt;);\n\n<span class=\"hljs-meta\">#[lang = <span class=\"hljs-meta-string\">\"owned_box\"</span>]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Box</span></span>&lt;T, A = Global&gt;(Unique&lt;T&gt;, A);\n\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; <span class=\"hljs-built_in\">Box</span>&lt;T&gt; {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>(x: T) -&gt; <span class=\"hljs-keyword\">Self</span> {\n        <span class=\"hljs-meta\">#[rustc_box]</span>\n        <span class=\"hljs-built_in\">Box</span>::new(x)\n    }\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;T, A&gt; <span class=\"hljs-built_in\">Drop</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">Box</span>&lt;T, A&gt; {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">drop</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) {\n        <span class=\"hljs-keyword\">unsafe</span> {\n            libc::free(<span class=\"hljs-keyword\">self</span>.<span class=\"hljs-number\">0.0</span>.as_ptr() <span class=\"hljs-keyword\">as</span> *<span class=\"hljs-keyword\">mut</span> c_void);\n        }\n    }\n}\n\n<span class=\"hljs-meta\">#[lang = <span class=\"hljs-meta-string\">\"exchange_malloc\"</span>]</span>\n<span class=\"hljs-keyword\">unsafe</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">allocate</span></span>(size: <span class=\"hljs-built_in\">usize</span>, _align: <span class=\"hljs-built_in\">usize</span>) -&gt; *<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-built_in\">u8</span> {\n    <span class=\"hljs-keyword\">let</span> p = libc::malloc(size) <span class=\"hljs-keyword\">as</span> *<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-built_in\">u8</span>;\n\n    <span class=\"hljs-comment\">// Check if `malloc` failed:</span>\n    <span class=\"hljs-keyword\">if</span> p.is_null() {\n        intrinsics::abort();\n    }\n\n    p\n}\n\n<span class=\"hljs-meta\">#[start]</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>(_argc: <span class=\"hljs-built_in\">isize</span>, _argv: *<span class=\"hljs-keyword\">const</span> *<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">u8</span>) -&gt; <span class=\"hljs-built_in\">isize</span> {\n    <span class=\"hljs-keyword\">let</span> _x = <span class=\"hljs-built_in\">Box</span>::new(<span class=\"hljs-number\">1</span>);\n\n    <span class=\"hljs-number\">0</span>\n}\n\n<span class=\"hljs-meta\">#[lang = <span class=\"hljs-meta-string\">\"eh_personality\"</span>]</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">rust_eh_personality</span></span>() {}\n\n<span class=\"hljs-meta\">#[panic_handler]</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">panic_handler</span></span>(_info: &amp;PanicInfo) -&gt; ! { intrinsics::abort() }</code></pre>\n<p>Note the use of <code class=\"hljs\">abort</code>: the <code class=\"hljs\">exchange_malloc</code> lang item is assumed to\nreturn a valid pointer, and so needs to do the check internally.</p>\n<h2 id=\"list-of-all-language-items\"><a class=\"header\" href=\"#list-of-all-language-items\">List of all language items</a></h2>\n<p>An up-to-date list of all language items can be found <a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_hir/src/lang_items.rs\">here</a> in the compiler code.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"large_assignments\"><a class=\"header\" href=\"#large_assignments\"><code>large_assignments</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/83518\">#83518</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"lazy_type_alias\"><a class=\"header\" href=\"#lazy_type_alias\"><code>lazy_type_alias</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/112792\">#112792</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"let_chains\"><a class=\"header\" href=\"#let_chains\"><code>let_chains</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/53667\">#53667</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"lifetime_capture_rules_2024\"><a class=\"header\" href=\"#lifetime_capture_rules_2024\"><code>lifetime_capture_rules_2024</code></a></h1>\n<p>This feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"link_arg_attribute\"><a class=\"header\" href=\"#link_arg_attribute\"><code>link_arg_attribute</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/99427\">#99427</a></p>\n<hr>\n<p>The <code class=\"hljs\">link_arg_attribute</code> feature allows passing arguments into the linker\nfrom inside of the source code. Order is preserved for link attributes as\nthey were defined on a single extern block:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust no_run hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"hljs-meta\">#![feature(link_arg_attribute)]</span>\n\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-meta\">#[link(kind = <span class=\"hljs-meta-string\">\"link-arg\"</span>, name = <span class=\"hljs-meta-string\">\"--start-group\"</span>)]</span>\n<span class=\"hljs-meta\">#[link(kind = <span class=\"hljs-meta-string\">\"static\"</span>, name = <span class=\"hljs-meta-string\">\"c\"</span>)]</span>\n<span class=\"hljs-meta\">#[link(kind = <span class=\"hljs-meta-string\">\"static\"</span>, name = <span class=\"hljs-meta-string\">\"gcc\"</span>)]</span>\n<span class=\"hljs-meta\">#[link(kind = <span class=\"hljs-meta-string\">\"link-arg\"</span>, name = <span class=\"hljs-meta-string\">\"--end-group\"</span>)]</span>\n<span class=\"hljs-keyword\">extern</span> <span class=\"hljs-string\">\"C\"</span> {}\n<span class=\"boring\">}</span></code></pre></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"link_cfg\"><a class=\"header\" href=\"#link_cfg\"><code>link_cfg</code></a></h1>\n<p>This feature is internal to the Rust compiler and is not intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"link_llvm_intrinsics\"><a class=\"header\" href=\"#link_llvm_intrinsics\"><code>link_llvm_intrinsics</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/29602\">#29602</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"linkage\"><a class=\"header\" href=\"#linkage\"><code>linkage</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/29603\">#29603</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"lint_reasons\"><a class=\"header\" href=\"#lint_reasons\"><code>lint_reasons</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/54503\">#54503</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"loongarch_target_feature\"><a class=\"header\" href=\"#loongarch_target_feature\"><code>loongarch_target_feature</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/44839\">#44839</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"macro_metavar_expr\"><a class=\"header\" href=\"#macro_metavar_expr\"><code>macro_metavar_expr</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/83527\">#83527</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"marker_trait_attr\"><a class=\"header\" href=\"#marker_trait_attr\"><code>marker_trait_attr</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/29864\">#29864</a></p>\n<hr>\n<p>Normally, Rust keeps you from adding trait implementations that could\noverlap with each other, as it would be ambiguous which to use.  This\nfeature, however, carves out an exception to that rule: a trait can\nopt-in to having overlapping implementations, at the cost that those\nimplementations are not allowed to override anything (and thus the\ntrait itself cannot have any associated items, as they're pointless\nwhen they'd need to do the same thing for every type anyway).</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"hljs-meta\">#![feature(marker_trait_attr)]</span>\n\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-meta\">#[marker]</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">CheapToClone</span></span>: <span class=\"hljs-built_in\">Clone</span> {}\n\n<span class=\"hljs-keyword\">impl</span>&lt;T: <span class=\"hljs-built_in\">Copy</span>&gt; CheapToClone <span class=\"hljs-keyword\">for</span> T {}\n\n<span class=\"hljs-comment\">// These could potentially overlap with the blanket implementation above,</span>\n<span class=\"hljs-comment\">// so are only allowed because CheapToClone is a marker trait.</span>\n<span class=\"hljs-keyword\">impl</span>&lt;T: CheapToClone, U: CheapToClone&gt; CheapToClone <span class=\"hljs-keyword\">for</span> (T, U) {}\n<span class=\"hljs-keyword\">impl</span>&lt;T: CheapToClone&gt; CheapToClone <span class=\"hljs-keyword\">for</span> std::ops::Range&lt;T&gt; {}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">cheap_clone</span></span>&lt;T: CheapToClone&gt;(t: T) -&gt; T {\n    t.clone()\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>This is expected to replace the unstable <code class=\"hljs\">overlapping_marker_traits</code>\nfeature, which applied to all empty traits (without needing an opt-in).</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"min_exhaustive_patterns\"><a class=\"header\" href=\"#min_exhaustive_patterns\"><code>min_exhaustive_patterns</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/119612\">#119612</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"min_specialization\"><a class=\"header\" href=\"#min_specialization\"><code>min_specialization</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/31844\">#31844</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"mips_target_feature\"><a class=\"header\" href=\"#mips_target_feature\"><code>mips_target_feature</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/44839\">#44839</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"more_qualified_paths\"><a class=\"header\" href=\"#more_qualified_paths\"><code>more_qualified_paths</code></a></h1>\n<p>The <code class=\"hljs\">more_qualified_paths</code> feature can be used in order to enable the\nuse of qualified paths in patterns.</p>\n<h2 id=\"example-9\"><a class=\"header\" href=\"#example-9\">Example</a></h2>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-meta\">#![feature(more_qualified_paths)]</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-comment\">// destructure through a qualified path</span>\n    <span class=\"hljs-keyword\">let</span> &lt;Foo <span class=\"hljs-keyword\">as</span> A&gt;::Assoc { br } = StructStruct { br: <span class=\"hljs-number\">2</span> };\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">StructStruct</span></span> {\n    br: <span class=\"hljs-built_in\">i8</span>,\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Foo</span></span>;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">A</span></span> {\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Assoc</span></span>;\n}\n\n<span class=\"hljs-keyword\">impl</span> A <span class=\"hljs-keyword\">for</span> Foo {\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Assoc</span></span> = StructStruct;\n}</code></pre></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"multiple_supertrait_upcastable\"><a class=\"header\" href=\"#multiple_supertrait_upcastable\"><code>multiple_supertrait_upcastable</code></a></h1>\n<p>This feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"must_not_suspend\"><a class=\"header\" href=\"#must_not_suspend\"><code>must_not_suspend</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/83310\">#83310</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"mut_ref\"><a class=\"header\" href=\"#mut_ref\"><code>mut_ref</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/123076\">#123076</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"naked_functions\"><a class=\"header\" href=\"#naked_functions\"><code>naked_functions</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/90957\">#90957</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"native_link_modifiers_as_needed\"><a class=\"header\" href=\"#native_link_modifiers_as_needed\"><code>native_link_modifiers_as_needed</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/81490\">#81490</a></p>\n<hr>\n<p>The <code class=\"hljs\">native_link_modifiers_as_needed</code> feature allows you to use the <code class=\"hljs\">as-needed</code> modifier.</p>\n<p><code class=\"hljs\">as-needed</code> is only compatible with the <code class=\"hljs\">dynamic</code> and <code class=\"hljs\">framework</code> linking kinds. Using any other kind will result in a compiler error.</p>\n<p><code class=\"hljs\">+as-needed</code> means that the library will be actually linked only if it satisfies some undefined symbols at the point at which it is specified on the command line, making it similar to static libraries in this regard.</p>\n<p>This modifier translates to <code class=\"hljs\">--as-needed</code> for ld-like linkers, and to <code class=\"hljs\">-dead_strip_dylibs</code> / <code class=\"hljs\">-needed_library</code> / <code class=\"hljs\">-needed_framework</code> for ld64.\nThe modifier does nothing for linkers that don't support it (e.g. <code class=\"hljs\">link.exe</code>).</p>\n<p>The default for this modifier is unclear, some targets currently specify it as <code class=\"hljs\">+as-needed</code>, some do not. We may want to try making <code class=\"hljs\">+as-needed</code> a default for all targets.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"needs_panic_runtime\"><a class=\"header\" href=\"#needs_panic_runtime\"><code>needs_panic_runtime</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/32837\">#32837</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"negative_bounds\"><a class=\"header\" href=\"#negative_bounds\"><code>negative_bounds</code></a></h1>\n<p>This feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"negative_impls\"><a class=\"header\" href=\"#negative_impls\"><code>negative_impls</code></a></h1>\n<p>The tracking issue for this feature is <a href=\"https://github.com/rust-lang/rust/issues/68318\">#68318</a>.</p>\n<hr>\n<p>With the feature gate <code class=\"hljs\">negative_impls</code>, you can write negative impls as well as positive ones:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"hljs-meta\">#![feature(negative_impls)]</span>\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">DerefMut</span></span> { }\n<span class=\"hljs-keyword\">impl</span>&lt;T: ?<span class=\"hljs-built_in\">Sized</span>&gt; !DerefMut <span class=\"hljs-keyword\">for</span> &amp;T { }\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Negative impls indicate a semver guarantee that the given trait will not be implemented for the given types. Negative impls play an additional purpose for auto traits, described below.</p>\n<p>Negative impls have the following characteristics:</p>\n<ul>\n<li>They do not have any items.</li>\n<li>They must obey the orphan rules as if they were a positive impl.</li>\n<li>They cannot \"overlap\" with any positive impls.</li>\n</ul>\n<h2 id=\"semver-interaction\"><a class=\"header\" href=\"#semver-interaction\">Semver interaction</a></h2>\n<p>It is a breaking change to remove a negative impl. Negative impls are a commitment not to implement the given trait for the named types.</p>\n<h2 id=\"orphan-and-overlap-rules\"><a class=\"header\" href=\"#orphan-and-overlap-rules\">Orphan and overlap rules</a></h2>\n<p>Negative impls must obey the same orphan rules as a positive impl. This implies you cannot add a negative impl for types defined in upstream crates and so forth.</p>\n<p>Similarly, negative impls cannot overlap with positive impls, again using the same \"overlap\" check that we ordinarily use to determine if two impls overlap. (Note that positive impls typically cannot overlap with one another either, except as permitted by specialization.)</p>\n<h2 id=\"interaction-with-auto-traits\"><a class=\"header\" href=\"#interaction-with-auto-traits\">Interaction with auto traits</a></h2>\n<p>Declaring a negative impl <code class=\"hljs\">impl !SomeAutoTrait for SomeType</code> for an\nauto-trait serves two purposes:</p>\n<ul>\n<li>as with any trait, it declares that <code class=\"hljs\">SomeType</code> will never implement <code class=\"hljs\">SomeAutoTrait</code>;</li>\n<li>it disables the automatic <code class=\"hljs\">SomeType: SomeAutoTrait</code> impl that would otherwise have been generated.</li>\n</ul>\n<p>Note that, at present, there is no way to indicate that a given type\ndoes not implement an auto trait <em>but that it may do so in the\nfuture</em>. For ordinary types, this is done by simply not declaring any\nimpl at all, but that is not an option for auto traits. A workaround\nis that one could embed a marker type as one of the fields, where the\nmarker type is <code class=\"hljs\">!AutoTrait</code>.</p>\n<h2 id=\"immediate-uses\"><a class=\"header\" href=\"#immediate-uses\">Immediate uses</a></h2>\n<p>Negative impls are used to declare that <code class=\"hljs\">&amp;T: !DerefMut</code>  and <code class=\"hljs\">&amp;mut T: !Clone</code>, as required to fix the soundness of <code class=\"hljs\">Pin</code> described in <a href=\"https://github.com/rust-lang/rust/issues/66544\">#66544</a>.</p>\n<p>This serves two purposes:</p>\n<ul>\n<li>For proving the correctness of unsafe code, we can use that impl as evidence that no <code class=\"hljs\">DerefMut</code> or <code class=\"hljs\">Clone</code> impl exists.</li>\n<li>It prevents downstream crates from creating such impls.</li>\n</ul>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"never_patterns\"><a class=\"header\" href=\"#never_patterns\"><code>never_patterns</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/118155\">#118155</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"never_type\"><a class=\"header\" href=\"#never_type\"><code>never_type</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/35121\">#35121</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"never_type_fallback\"><a class=\"header\" href=\"#never_type_fallback\"><code>never_type_fallback</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/65992\">#65992</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"no_core\"><a class=\"header\" href=\"#no_core\"><code>no_core</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/29639\">#29639</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"no_sanitize\"><a class=\"header\" href=\"#no_sanitize\"><code>no_sanitize</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/39699\">#39699</a></p>\n<hr>\n<p>The <code class=\"hljs\">no_sanitize</code> attribute can be used to selectively disable sanitizer\ninstrumentation in an annotated function. This might be useful to: avoid\ninstrumentation overhead in a performance critical function, or avoid\ninstrumenting code that contains constructs unsupported by given sanitizer.</p>\n<p>The precise effect of this annotation depends on particular sanitizer in use.\nFor example, with <code class=\"hljs\">no_sanitize(thread)</code>, the thread sanitizer will no longer\ninstrument non-atomic store / load operations, but it will instrument atomic\noperations to avoid reporting false positives and provide meaning full stack\ntraces.</p>\n<h2 id=\"examples-8\"><a class=\"header\" href=\"#examples-8\">Examples</a></h2>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"hljs-meta\">#![feature(no_sanitize)]</span>\n\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-meta\">#[no_sanitize(address)]</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>() {\n  <span class=\"hljs-comment\">// ...</span>\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"non_exhaustive_omitted_patterns_lint\"><a class=\"header\" href=\"#non_exhaustive_omitted_patterns_lint\"><code>non_exhaustive_omitted_patterns_lint</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/89554\">#89554</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"non_lifetime_binders\"><a class=\"header\" href=\"#non_lifetime_binders\"><code>non_lifetime_binders</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/108185\">#108185</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"object_safe_for_dispatch\"><a class=\"header\" href=\"#object_safe_for_dispatch\"><code>object_safe_for_dispatch</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/43561\">#43561</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"offset_of_enum\"><a class=\"header\" href=\"#offset_of_enum\"><code>offset_of_enum</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/120141\">#120141</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"offset_of_nested\"><a class=\"header\" href=\"#offset_of_nested\"><code>offset_of_nested</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/120140\">#120140</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"omit_gdb_pretty_printer_section\"><a class=\"header\" href=\"#omit_gdb_pretty_printer_section\"><code>omit_gdb_pretty_printer_section</code></a></h1>\n<p>This feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"optimize_attribute\"><a class=\"header\" href=\"#optimize_attribute\"><code>optimize_attribute</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/54882\">#54882</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"panic_runtime\"><a class=\"header\" href=\"#panic_runtime\"><code>panic_runtime</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/32837\">#32837</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"pattern_complexity\"><a class=\"header\" href=\"#pattern_complexity\"><code>pattern_complexity</code></a></h1>\n<p>This feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"pattern_types\"><a class=\"header\" href=\"#pattern_types\"><code>pattern_types</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/123646\">#123646</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"postfix-match\"><a class=\"header\" href=\"#postfix-match\"><code>postfix-match</code></a></h1>\n<p><code class=\"hljs\">postfix-match</code> adds the feature for matching upon values postfix\nthe expressions that generate the values.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"hljs-meta\">#![feature(postfix_match)]</span>\n\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">Foo</span></span> {\n    Bar,\n    Baz\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">get_foo</span></span>() -&gt; Foo {\n    Foo::Bar\n}\n\nget_foo().<span class=\"hljs-keyword\">match</span> {\n    Foo::Bar =&gt; {},\n    Foo::Baz =&gt; <span class=\"hljs-built_in\">panic!</span>(),\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"powerpc_target_feature\"><a class=\"header\" href=\"#powerpc_target_feature\"><code>powerpc_target_feature</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/44839\">#44839</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"precise_capturing\"><a class=\"header\" href=\"#precise_capturing\"><code>precise_capturing</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/123432\">#123432</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"prelude_import\"><a class=\"header\" href=\"#prelude_import\"><code>prelude_import</code></a></h1>\n<p>This feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"prfchw_target_feature\"><a class=\"header\" href=\"#prfchw_target_feature\"><code>prfchw_target_feature</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/44839\">#44839</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"proc_macro_hygiene\"><a class=\"header\" href=\"#proc_macro_hygiene\"><code>proc_macro_hygiene</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/54727\">#54727</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"profiler_runtime\"><a class=\"header\" href=\"#profiler_runtime\"><code>profiler_runtime</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/42524\">#42524</a>.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"raw_ref_op\"><a class=\"header\" href=\"#raw_ref_op\"><code>raw_ref_op</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/64490\">#64490</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"ref_pat_eat_one_layer_2024\"><a class=\"header\" href=\"#ref_pat_eat_one_layer_2024\"><code>ref_pat_eat_one_layer_2024</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/123076\">#123076</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"register_tool\"><a class=\"header\" href=\"#register_tool\"><code>register_tool</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/66079\">#66079</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"repr_simd\"><a class=\"header\" href=\"#repr_simd\"><code>repr_simd</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/27731\">#27731</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"repr128\"><a class=\"header\" href=\"#repr128\"><code>repr128</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/56071\">#56071</a></p>\n<hr>\n<p>The <code class=\"hljs\">repr128</code> feature adds support for <code class=\"hljs\">#[repr(u128)]</code> on <code class=\"hljs\">enum</code>s.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"hljs-meta\">#![feature(repr128)]</span>\n\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-meta\">#[repr(u128)]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">Foo</span></span> {\n    Bar(<span class=\"hljs-built_in\">u64</span>),\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"result_ffi_guarantees\"><a class=\"header\" href=\"#result_ffi_guarantees\"><code>result_ffi_guarantees</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/110503\">#110503</a></p>\n<hr>\n<p>This feature adds the possibility of using <code class=\"hljs\">Result&lt;T, E&gt;</code> in FFI if T's niche\nvalue can be used to describe E or vise-versa.</p>\n<p>See <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/3391-result_ffi_guarantees.md\">RFC 3391</a> for more information.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"return_type_notation\"><a class=\"header\" href=\"#return_type_notation\"><code>return_type_notation</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/109417\">#109417</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"riscv_target_feature\"><a class=\"header\" href=\"#riscv_target_feature\"><code>riscv_target_feature</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/44839\">#44839</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"rtm_target_feature\"><a class=\"header\" href=\"#rtm_target_feature\"><code>rtm_target_feature</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/44839\">#44839</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"rust_cold_cc\"><a class=\"header\" href=\"#rust_cold_cc\"><code>rust_cold_cc</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/97544\">#97544</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"rustc_allow_const_fn_unstable\"><a class=\"header\" href=\"#rustc_allow_const_fn_unstable\"><code>rustc_allow_const_fn_unstable</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/69399\">#69399</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"rustc_attrs\"><a class=\"header\" href=\"#rustc_attrs\"><code>rustc_attrs</code></a></h1>\n<p>This feature has no tracking issue, and is therefore internal to\nthe compiler, not being intended for general use.</p>\n<p>Note: <code class=\"hljs\">rustc_attrs</code> enables many rustc-internal attributes and this page\nonly discuss a few of them.</p>\n<hr>\n<p>The <code class=\"hljs\">rustc_attrs</code> feature allows debugging rustc type layouts by using\n<code class=\"hljs\">#[rustc_layout(...)]</code> to debug layout at compile time (it even works\nwith <code class=\"hljs\">cargo check</code>) as an alternative to <code class=\"hljs\">rustc -Z print-type-sizes</code>\nthat is way more verbose.</p>\n<p>Options provided by <code class=\"hljs\">#[rustc_layout(...)]</code> are <code class=\"hljs\">debug</code>, <code class=\"hljs\">size</code>, <code class=\"hljs\">align</code>,\n<code class=\"hljs\">abi</code>. Note that it only works on sized types without generics.</p>\n<h2 id=\"examples-9\"><a class=\"header\" href=\"#examples-9\">Examples</a></h2>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust compile_fail hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"hljs-meta\">#![feature(rustc_attrs)]</span>\n\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-meta\">#[rustc_layout(abi, size)]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">X</span></span> {\n    Y(<span class=\"hljs-built_in\">u8</span>, <span class=\"hljs-built_in\">u8</span>, <span class=\"hljs-built_in\">u8</span>),\n    Z(<span class=\"hljs-built_in\">isize</span>),\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>When that is compiled, the compiler will error with something like</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">error: abi: Aggregate { sized: true }\n --&gt; src/lib.rs:4:1\n  |\n4 | / pub enum T {\n5 | |     Y(u8, u8, u8),\n6 | |     Z(isize),\n7 | | }\n  | |_^\n\nerror: size: Size { raw: 16 }\n --&gt; src/lib.rs:4:1\n  |\n4 | / pub enum T {\n5 | |     Y(u8, u8, u8),\n6 | |     Z(isize),\n7 | | }\n  | |_^\n\nerror: aborting due to 2 previous errors\n</code></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"rustc_private\"><a class=\"header\" href=\"#rustc_private\"><code>rustc_private</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/27812\">#27812</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"rustdoc_internals\"><a class=\"header\" href=\"#rustdoc_internals\"><code>rustdoc_internals</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/90418\">#90418</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"rustdoc_missing_doc_code_examples\"><a class=\"header\" href=\"#rustdoc_missing_doc_code_examples\"><code>rustdoc_missing_doc_code_examples</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/101730\">#101730</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"simd_ffi\"><a class=\"header\" href=\"#simd_ffi\"><code>simd_ffi</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/27731\">#27731</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"specialization\"><a class=\"header\" href=\"#specialization\"><code>specialization</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/31844\">#31844</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"sse4a_target_feature\"><a class=\"header\" href=\"#sse4a_target_feature\"><code>sse4a_target_feature</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/44839\">#44839</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"staged_api\"><a class=\"header\" href=\"#staged_api\"><code>staged_api</code></a></h1>\n<p>This feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"start\"><a class=\"header\" href=\"#start\"><code>start</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/29633\">#29633</a></p>\n<hr>\n<p>Allows you to mark a function as the entry point of the executable, which is\nnecessary in <code class=\"hljs\">#![no_std]</code> environments.</p>\n<p>The function marked <code class=\"hljs\">#[start]</code> is passed the command line parameters in the same\nformat as the C main function (aside from the integer types being used).\nIt has to be non-generic and have the following signature:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore (only-for-syntax-highlight) hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">let</span> _:\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span></span>(<span class=\"hljs-built_in\">isize</span>, *<span class=\"hljs-keyword\">const</span> *<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">u8</span>) -&gt; <span class=\"hljs-built_in\">isize</span>\n<span class=\"boring\">;</span></code></pre>\n<p>This feature should not be confused with the <code class=\"hljs\">start</code> <em>lang item</em> which is\ndefined by the <code class=\"hljs\">std</code> crate and is written <code class=\"hljs\">#[lang = \"start\"]</code>.</p>\n<h2 id=\"usage-together-with-the-std-crate\"><a class=\"header\" href=\"#usage-together-with-the-std-crate\">Usage together with the <code>std</code> crate</a></h2>\n<p><code class=\"hljs\">#[start]</code> can be used in combination with the <code class=\"hljs\">std</code> crate, in which case the\nnormal <code class=\"hljs\">main</code> function (which would get called from the <code class=\"hljs\">std</code> crate) won't be\nused as an entry point.\nThe initialization code in <code class=\"hljs\">std</code> will be skipped this way.</p>\n<p>Example:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"hljs-meta\">#![feature(start)]</span>\n\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-meta\">#[start]</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">start</span></span>(_argc: <span class=\"hljs-built_in\">isize</span>, _argv: *<span class=\"hljs-keyword\">const</span> *<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">u8</span>) -&gt; <span class=\"hljs-built_in\">isize</span> {\n    <span class=\"hljs-number\">0</span>\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Unwinding the stack past the <code class=\"hljs\">#[start]</code> function is currently considered\nUndefined Behavior (for any unwinding implementation):</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore (UB) hljs\"><span class=\"hljs-meta\">#![feature(start)]</span>\n\n<span class=\"hljs-meta\">#[start]</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">start</span></span>(_argc: <span class=\"hljs-built_in\">isize</span>, _argv: *<span class=\"hljs-keyword\">const</span> *<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">u8</span>) -&gt; <span class=\"hljs-built_in\">isize</span> {\n    std::panic::catch_unwind(|| {\n        <span class=\"hljs-built_in\">panic!</span>(); <span class=\"hljs-comment\">// panic safely gets caught or safely aborts execution</span>\n    });\n\n    <span class=\"hljs-built_in\">panic!</span>(); <span class=\"hljs-comment\">// UB!</span>\n\n    <span class=\"hljs-number\">0</span>\n}</code></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"stmt_expr_attributes\"><a class=\"header\" href=\"#stmt_expr_attributes\"><code>stmt_expr_attributes</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/15701\">#15701</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"strict_provenance\"><a class=\"header\" href=\"#strict_provenance\"><code>strict_provenance</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/95228\">#95228</a></p>\n<hr>\n<p>The <code class=\"hljs\">strict_provenance</code> feature allows to enable the <code class=\"hljs\">fuzzy_provenance_casts</code> and <code class=\"hljs\">lossy_provenance_casts</code> lints.\nThese lint on casts between integers and pointers, that are recommended against or invalid in the strict provenance model.\nThe same feature gate is also used for the experimental strict provenance API in <code class=\"hljs\">std</code> (actually <code class=\"hljs\">core</code>).</p>\n<h2 id=\"example-10\"><a class=\"header\" href=\"#example-10\">Example</a></h2>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-meta\">#![feature(strict_provenance)]</span>\n<span class=\"hljs-meta\">#![warn(fuzzy_provenance_casts)]</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> _dangling = <span class=\"hljs-number\">16_usize</span> <span class=\"hljs-keyword\">as</span> *<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">u8</span>;\n    <span class=\"hljs-comment\">//~^ WARNING: strict provenance disallows casting integer `usize` to pointer `*const u8`</span>\n}</code></pre></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"string_deref_patterns\"><a class=\"header\" href=\"#string_deref_patterns\"><code>string_deref_patterns</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/87121\">#87121</a></p>\n<hr>\n<p>This feature permits pattern matching <code class=\"hljs\">String</code> to <code class=\"hljs\">&amp;str</code> through <a href=\"https://doc.rust-lang.org/std/string/struct.String.html#impl-Deref-for-String\">its <code class=\"hljs\">Deref</code> implementation</a>.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"hljs-meta\">#![feature(string_deref_patterns)]</span>\n\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">Value</span></span> {\n    <span class=\"hljs-built_in\">String</span>(<span class=\"hljs-built_in\">String</span>),\n    Number(<span class=\"hljs-built_in\">u32</span>),\n}\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">is_it_the_answer</span></span>(value: Value) -&gt; <span class=\"hljs-built_in\">bool</span> {\n    <span class=\"hljs-keyword\">match</span> value {\n        Value::<span class=\"hljs-built_in\">String</span>(<span class=\"hljs-string\">\"42\"</span>) =&gt; <span class=\"hljs-literal\">true</span>,\n        Value::Number(<span class=\"hljs-number\">42</span>) =&gt; <span class=\"hljs-literal\">true</span>,\n        _ =&gt; <span class=\"hljs-literal\">false</span>,\n    }\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Without this feature other constructs such as match guards have to be used.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">Value</span></span> {\n</span><span class=\"boring\">   <span class=\"hljs-built_in\">String</span>(<span class=\"hljs-built_in\">String</span>),\n</span><span class=\"boring\">   Number(<span class=\"hljs-built_in\">u32</span>),\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">is_it_the_answer</span></span>(value: Value) -&gt; <span class=\"hljs-built_in\">bool</span> {\n    <span class=\"hljs-keyword\">match</span> value {\n        Value::<span class=\"hljs-built_in\">String</span>(s) <span class=\"hljs-keyword\">if</span> s == <span class=\"hljs-string\">\"42\"</span> =&gt; <span class=\"hljs-literal\">true</span>,\n        Value::Number(<span class=\"hljs-number\">42</span>) =&gt; <span class=\"hljs-literal\">true</span>,\n        _ =&gt; <span class=\"hljs-literal\">false</span>,\n    }\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"structural_match\"><a class=\"header\" href=\"#structural_match\"><code>structural_match</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/31434\">#31434</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"target_feature_11\"><a class=\"header\" href=\"#target_feature_11\"><code>target_feature_11</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/69098\">#69098</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"tbm_target_feature\"><a class=\"header\" href=\"#tbm_target_feature\"><code>tbm_target_feature</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/44839\">#44839</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"test_unstable_lint\"><a class=\"header\" href=\"#test_unstable_lint\"><code>test_unstable_lint</code></a></h1>\n<p>This feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"thread_local\"><a class=\"header\" href=\"#thread_local\"><code>thread_local</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/29594\">#29594</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"trait_alias\"><a class=\"header\" href=\"#trait_alias\"><code>trait_alias</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/41517\">#41517</a></p>\n<hr>\n<p>The <code class=\"hljs\">trait_alias</code> feature adds support for trait aliases. These allow aliases\nto be created for one or more traits (currently just a single regular trait plus\nany number of auto-traits), and used wherever traits would normally be used as\neither bounds or trait objects.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-meta\">#![feature(trait_alias)]</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Foo</span></span> = std::fmt::<span class=\"hljs-built_in\">Debug</span> + <span class=\"hljs-built_in\">Send</span>;\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Bar</span></span> = Foo + <span class=\"hljs-built_in\">Sync</span>;\n\n<span class=\"hljs-comment\">// Use trait alias as bound on type parameter.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>&lt;T: Foo&gt;(v: &amp;T) {\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{:?}\"</span>, v);\n}\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    foo(&amp;<span class=\"hljs-number\">1</span>);\n\n    <span class=\"hljs-comment\">// Use trait alias for trait objects.</span>\n    <span class=\"hljs-keyword\">let</span> a: &amp;Bar = &amp;<span class=\"hljs-number\">123</span>;\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{:?}\"</span>, a);\n    <span class=\"hljs-keyword\">let</span> b = <span class=\"hljs-built_in\">Box</span>::new(<span class=\"hljs-number\">456</span>) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> Foo&gt;;\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{:?}\"</span>, b);\n}</code></pre></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"trait_upcasting\"><a class=\"header\" href=\"#trait_upcasting\"><code>trait_upcasting</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/65991\">#65991</a></p>\n<hr>\n<p>The <code class=\"hljs\">trait_upcasting</code> feature adds support for trait upcasting coercion. This allows a\ntrait object of type <code class=\"hljs\">dyn Bar</code> to be cast to a trait object of type <code class=\"hljs\">dyn Foo</code>\nso long as <code class=\"hljs\">Bar: Foo</code>.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2018 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"hljs-meta\">#![feature(trait_upcasting)]</span>\n<span class=\"hljs-meta\">#![allow(incomplete_features)]</span>\n\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Foo</span></span> {}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Bar</span></span>: Foo {}\n\n<span class=\"hljs-keyword\">impl</span> Foo <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">i32</span> {}\n\n<span class=\"hljs-keyword\">impl</span>&lt;T: Foo + ?<span class=\"hljs-built_in\">Sized</span>&gt; Bar <span class=\"hljs-keyword\">for</span> T {}\n\n<span class=\"hljs-keyword\">let</span> bar: &amp;<span class=\"hljs-keyword\">dyn</span> Bar = &amp;<span class=\"hljs-number\">123</span>;\n<span class=\"hljs-keyword\">let</span> foo: &amp;<span class=\"hljs-keyword\">dyn</span> Foo = bar;\n<span class=\"boring\">}</span></code></pre></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"transmute_generic_consts\"><a class=\"header\" href=\"#transmute_generic_consts\"><code>transmute_generic_consts</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/109929\">#109929</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"transparent_unions\"><a class=\"header\" href=\"#transparent_unions\"><code>transparent_unions</code></a></h1>\n<p>The tracking issue for this feature is <a href=\"https://github.com/rust-lang/rust/issues/60405\">#60405</a></p>\n<hr>\n<p>The <code class=\"hljs\">transparent_unions</code> feature allows you mark <code class=\"hljs\">union</code>s as\n<code class=\"hljs\">#[repr(transparent)]</code>. A <code class=\"hljs\">union</code> may be <code class=\"hljs\">#[repr(transparent)]</code> in exactly the\nsame conditions in which a <code class=\"hljs\">struct</code> may be <code class=\"hljs\">#[repr(transparent)]</code> (generally,\nthis means the <code class=\"hljs\">union</code> must have exactly one non-zero-sized field). Some\nconcrete illustrations follow.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"hljs-meta\">#![feature(transparent_unions)]</span>\n\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">// This union has the same representation as `f32`.</span>\n<span class=\"hljs-meta\">#[repr(transparent)]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">union</span> <span class=\"hljs-title\">SingleFieldUnion</span></span> {\n    field: <span class=\"hljs-built_in\">f32</span>,\n}\n\n<span class=\"hljs-comment\">// This union has the same representation as `usize`.</span>\n<span class=\"hljs-meta\">#[repr(transparent)]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">union</span> <span class=\"hljs-title\">MultiFieldUnion</span></span> {\n    field: <span class=\"hljs-built_in\">usize</span>,\n    nothing: (),\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>For consistency with transparent <code class=\"hljs\">struct</code>s, <code class=\"hljs\">union</code>s must have exactly one\nnon-zero-sized field. If all fields are zero-sized, the <code class=\"hljs\">union</code> must not be\n<code class=\"hljs\">#[repr(transparent)]</code>:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"hljs-meta\">#![feature(transparent_unions)]</span>\n\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">// This (non-transparent) union is already valid in stable Rust:</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">union</span> <span class=\"hljs-title\">GoodUnion</span></span> {\n    <span class=\"hljs-keyword\">pub</span> nothing: (),\n}\n\n<span class=\"hljs-comment\">// Error: transparent union needs exactly one non-zero-sized field, but has 0</span>\n<span class=\"hljs-comment\">// #[repr(transparent)]</span>\n<span class=\"hljs-comment\">// pub union BadUnion {</span>\n<span class=\"hljs-comment\">//     pub nothing: (),</span>\n<span class=\"hljs-comment\">// }</span>\n<span class=\"boring\">}</span></code></pre></pre>\n<p>The one exception is if the <code class=\"hljs\">union</code> is generic over <code class=\"hljs\">T</code> and has a field of type\n<code class=\"hljs\">T</code>, it may be <code class=\"hljs\">#[repr(transparent)]</code> even if <code class=\"hljs\">T</code> is a zero-sized type:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"hljs-meta\">#![feature(transparent_unions)]</span>\n\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">// This union has the same representation as `T`.</span>\n<span class=\"hljs-meta\">#[repr(transparent)]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">union</span> <span class=\"hljs-title\">GenericUnion</span></span>&lt;T: <span class=\"hljs-built_in\">Copy</span>&gt; { <span class=\"hljs-comment\">// Unions with non-`Copy` fields are unstable.</span>\n    <span class=\"hljs-keyword\">pub</span> field: T,\n    <span class=\"hljs-keyword\">pub</span> nothing: (),\n}\n\n<span class=\"hljs-comment\">// This is okay even though `()` is a zero-sized type.</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">const</span> THIS_IS_OKAY: GenericUnion&lt;()&gt; = GenericUnion { field: () };\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Like transparent <code class=\"hljs\">struct</code>s, a transparent <code class=\"hljs\">union</code> of type <code class=\"hljs\">U</code> has the same\nlayout, size, and ABI as its single non-ZST field. If it is generic over a type\n<code class=\"hljs\">T</code>, and all its fields are ZSTs except for exactly one field of type <code class=\"hljs\">T</code>, then\nit has the same layout and ABI as <code class=\"hljs\">T</code> (even if <code class=\"hljs\">T</code> is a ZST when monomorphized).</p>\n<p>Like transparent <code class=\"hljs\">struct</code>s, transparent <code class=\"hljs\">union</code>s are FFI-safe if and only if\ntheir underlying representation type is also FFI-safe.</p>\n<p>A <code class=\"hljs\">union</code> may not be eligible for the same nonnull-style optimizations that a\n<code class=\"hljs\">struct</code> or <code class=\"hljs\">enum</code> (with the same fields) are eligible for. Adding\n<code class=\"hljs\">#[repr(transparent)]</code> to  <code class=\"hljs\">union</code> does not change this. To give a more concrete\nexample, it is unspecified whether <code class=\"hljs\">size_of::&lt;T&gt;()</code> is equal to\n<code class=\"hljs\">size_of::&lt;Option&lt;T&gt;&gt;()</code>, where <code class=\"hljs\">T</code> is a <code class=\"hljs\">union</code> (regardless of whether or not\nit is transparent). The Rust compiler is free to perform this optimization if\npossible, but is not required to, and different compiler versions may differ in\ntheir application of these optimizations.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"trivial_bounds\"><a class=\"header\" href=\"#trivial_bounds\"><code>trivial_bounds</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/48214\">#48214</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"try_blocks\"><a class=\"header\" href=\"#try_blocks\"><code>try_blocks</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/31436\">#31436</a></p>\n<hr>\n<p>The <code class=\"hljs\">try_blocks</code> feature adds support for <code class=\"hljs\">try</code> blocks. A <code class=\"hljs\">try</code>\nblock creates a new scope one can use the <code class=\"hljs\">?</code> operator in.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2018 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"hljs-meta\">#![feature(try_blocks)]</span>\n\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">use</span> std::num::ParseIntError;\n\n<span class=\"hljs-keyword\">let</span> result: <span class=\"hljs-built_in\">Result</span>&lt;<span class=\"hljs-built_in\">i32</span>, ParseIntError&gt; = <span class=\"hljs-keyword\">try</span> {\n    <span class=\"hljs-string\">\"1\"</span>.parse::&lt;<span class=\"hljs-built_in\">i32</span>&gt;()?\n        + <span class=\"hljs-string\">\"2\"</span>.parse::&lt;<span class=\"hljs-built_in\">i32</span>&gt;()?\n        + <span class=\"hljs-string\">\"3\"</span>.parse::&lt;<span class=\"hljs-built_in\">i32</span>&gt;()?\n};\n<span class=\"hljs-built_in\">assert_eq!</span>(result, <span class=\"hljs-literal\">Ok</span>(<span class=\"hljs-number\">6</span>));\n\n<span class=\"hljs-keyword\">let</span> result: <span class=\"hljs-built_in\">Result</span>&lt;<span class=\"hljs-built_in\">i32</span>, ParseIntError&gt; = <span class=\"hljs-keyword\">try</span> {\n    <span class=\"hljs-string\">\"1\"</span>.parse::&lt;<span class=\"hljs-built_in\">i32</span>&gt;()?\n        + <span class=\"hljs-string\">\"foo\"</span>.parse::&lt;<span class=\"hljs-built_in\">i32</span>&gt;()?\n        + <span class=\"hljs-string\">\"3\"</span>.parse::&lt;<span class=\"hljs-built_in\">i32</span>&gt;()?\n};\n<span class=\"hljs-built_in\">assert!</span>(result.is_err());\n<span class=\"boring\">}</span></code></pre></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"type_alias_impl_trait\"><a class=\"header\" href=\"#type_alias_impl_trait\"><code>type_alias_impl_trait</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/63063\">#63063</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"type_ascription\"><a class=\"header\" href=\"#type_ascription\"><code>type_ascription</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/23416\">#23416</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"type_changing_struct_update\"><a class=\"header\" href=\"#type_changing_struct_update\"><code>type_changing_struct_update</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/86555\">#86555</a></p>\n<hr>\n<p>This implements <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/2528-type-changing-struct-update-syntax.md\">RFC2528</a>. When turned on, you can create instances of the same struct\nthat have different generic type or lifetime parameters.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-meta\">#![allow(unused_variables, dead_code)]</span>\n<span class=\"hljs-meta\">#![feature(type_changing_struct_update)]</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span> </span>() {\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Foo</span></span>&lt;T, U&gt; {\n        field1: T,\n        field2: U,\n    }\n\n    <span class=\"hljs-keyword\">let</span> base: Foo&lt;<span class=\"hljs-built_in\">String</span>, <span class=\"hljs-built_in\">i32</span>&gt; = Foo {\n        field1: <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"hello\"</span>),\n        field2: <span class=\"hljs-number\">1234</span>,\n    };\n    <span class=\"hljs-keyword\">let</span> updated: Foo&lt;<span class=\"hljs-built_in\">f64</span>, <span class=\"hljs-built_in\">i32</span>&gt; = Foo {\n        field1: <span class=\"hljs-number\">3.14</span>,\n        ..base\n    };\n}</code></pre></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"unboxed_closures\"><a class=\"header\" href=\"#unboxed_closures\"><code>unboxed_closures</code></a></h1>\n<p>The tracking issue for this feature is <a href=\"https://github.com/rust-lang/rust/issues/29625\">#29625</a></p>\n<p>See Also: <a href=\"language-features/../library-features/fn-traits.html\"><code class=\"hljs\">fn_traits</code></a></p>\n<hr>\n<p>The <code class=\"hljs\">unboxed_closures</code> feature allows you to write functions using the <code class=\"hljs\">\"rust-call\"</code> ABI,\nrequired for implementing the <a href=\"language-features/../../std/ops/trait.Fn.html\"><code class=\"hljs\">Fn*</code></a> family of traits. <code class=\"hljs\">\"rust-call\"</code> functions must have\nexactly one (non self) argument, a tuple representing the argument list.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-meta\">#![feature(unboxed_closures)]</span>\n\n<span class=\"hljs-keyword\">extern</span> <span class=\"hljs-string\">\"rust-call\"</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">add_args</span></span>(args: (<span class=\"hljs-built_in\">u32</span>, <span class=\"hljs-built_in\">u32</span>)) -&gt; <span class=\"hljs-built_in\">u32</span> {\n    args.<span class=\"hljs-number\">0</span> + args.<span class=\"hljs-number\">1</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {}</code></pre></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"unnamed_fields\"><a class=\"header\" href=\"#unnamed_fields\"><code>unnamed_fields</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/49804\">#49804</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"unsafe_attributes\"><a class=\"header\" href=\"#unsafe_attributes\"><code>unsafe_attributes</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/123757\">#123757</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"unsafe_extern_blocks\"><a class=\"header\" href=\"#unsafe_extern_blocks\"><code>unsafe_extern_blocks</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/123743\">#123743</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"unsized_fn_params\"><a class=\"header\" href=\"#unsized_fn_params\"><code>unsized_fn_params</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/48055\">#48055</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"unsized_locals\"><a class=\"header\" href=\"#unsized_locals\"><code>unsized_locals</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/48055\">#48055</a></p>\n<hr>\n<p>This implements <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1909-unsized-rvalues.md\">RFC1909</a>. When turned on, you can have unsized arguments and locals:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-meta\">#![allow(incomplete_features)]</span>\n<span class=\"hljs-meta\">#![feature(unsized_locals, unsized_fn_params)]</span>\n\n<span class=\"hljs-keyword\">use</span> std::any::Any;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> x: <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> Any&gt; = <span class=\"hljs-built_in\">Box</span>::new(<span class=\"hljs-number\">42</span>);\n    <span class=\"hljs-keyword\">let</span> x: <span class=\"hljs-keyword\">dyn</span> Any = *x;\n    <span class=\"hljs-comment\">//  ^ unsized local variable</span>\n    <span class=\"hljs-comment\">//               ^^ unsized temporary</span>\n    foo(x);\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>(_: <span class=\"hljs-keyword\">dyn</span> Any) {}\n<span class=\"hljs-comment\">//     ^^^^^^ unsized argument</span></code></pre></pre>\n<p>The RFC still forbids the following unsized expressions:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust compile_fail hljs\"><span class=\"hljs-meta\">#![feature(unsized_locals)]</span>\n\n<span class=\"hljs-keyword\">use</span> std::any::Any;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">MyStruct</span></span>&lt;T: ?<span class=\"hljs-built_in\">Sized</span>&gt; {\n    content: T,\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">MyTupleStruct</span></span>&lt;T: ?<span class=\"hljs-built_in\">Sized</span>&gt;(T);\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">answer</span></span>() -&gt; <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> Any&gt; {\n    <span class=\"hljs-built_in\">Box</span>::new(<span class=\"hljs-number\">42</span>)\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-comment\">// You CANNOT have unsized statics.</span>\n    <span class=\"hljs-keyword\">static</span> X: <span class=\"hljs-keyword\">dyn</span> Any = *answer();  <span class=\"hljs-comment\">// ERROR</span>\n    <span class=\"hljs-keyword\">const</span> Y: <span class=\"hljs-keyword\">dyn</span> Any = *answer();  <span class=\"hljs-comment\">// ERROR</span>\n\n    <span class=\"hljs-comment\">// You CANNOT have struct initialized unsized.</span>\n    MyStruct { content: *answer() };  <span class=\"hljs-comment\">// ERROR</span>\n    MyTupleStruct(*answer());  <span class=\"hljs-comment\">// ERROR</span>\n    (<span class=\"hljs-number\">42</span>, *answer());  <span class=\"hljs-comment\">// ERROR</span>\n\n    <span class=\"hljs-comment\">// You CANNOT have unsized return types.</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">my_function</span></span>() -&gt; <span class=\"hljs-keyword\">dyn</span> Any { *answer() }  <span class=\"hljs-comment\">// ERROR</span>\n\n    <span class=\"hljs-comment\">// You CAN have unsized local variables...</span>\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> x: <span class=\"hljs-keyword\">dyn</span> Any = *answer();  <span class=\"hljs-comment\">// OK</span>\n    <span class=\"hljs-comment\">// ...but you CANNOT reassign to them.</span>\n    x = *answer();  <span class=\"hljs-comment\">// ERROR</span>\n\n    <span class=\"hljs-comment\">// You CANNOT even initialize them separately.</span>\n    <span class=\"hljs-keyword\">let</span> y: <span class=\"hljs-keyword\">dyn</span> Any;  <span class=\"hljs-comment\">// OK</span>\n    y = *answer();  <span class=\"hljs-comment\">// ERROR</span>\n\n    <span class=\"hljs-comment\">// Not mentioned in the RFC, but by-move captured variables are also Sized.</span>\n    <span class=\"hljs-keyword\">let</span> x: <span class=\"hljs-keyword\">dyn</span> Any = *answer();\n    (<span class=\"hljs-keyword\">move</span> || {  <span class=\"hljs-comment\">// ERROR</span>\n        <span class=\"hljs-keyword\">let</span> y = x;\n    })();\n\n    <span class=\"hljs-comment\">// You CAN create a closure with unsized arguments,</span>\n    <span class=\"hljs-comment\">// but you CANNOT call it.</span>\n    <span class=\"hljs-comment\">// This is an implementation detail and may be changed in the future.</span>\n    <span class=\"hljs-keyword\">let</span> f = |x: <span class=\"hljs-keyword\">dyn</span> Any| {};\n    f(*answer());  <span class=\"hljs-comment\">// ERROR</span>\n}</code></pre></pre>\n<h2 id=\"by-value-trait-objects\"><a class=\"header\" href=\"#by-value-trait-objects\">By-value trait objects</a></h2>\n<p>With this feature, you can have by-value <code class=\"hljs\">self</code> arguments without <code class=\"hljs\">Self: Sized</code> bounds.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-meta\">#![feature(unsized_fn_params)]</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Foo</span></span> {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>(<span class=\"hljs-keyword\">self</span>) {}\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;T: ?<span class=\"hljs-built_in\">Sized</span>&gt; Foo <span class=\"hljs-keyword\">for</span> T {}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> slice: <span class=\"hljs-built_in\">Box</span>&lt;[<span class=\"hljs-built_in\">i32</span>]&gt; = <span class=\"hljs-built_in\">Box</span>::new([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]);\n    &lt;[<span class=\"hljs-built_in\">i32</span>] <span class=\"hljs-keyword\">as</span> Foo&gt;::foo(*slice);\n}</code></pre></pre>\n<p>And <code class=\"hljs\">Foo</code> will also be object-safe.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-meta\">#![feature(unsized_fn_params)]</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Foo</span></span> {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>(<span class=\"hljs-keyword\">self</span>) {}\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;T: ?<span class=\"hljs-built_in\">Sized</span>&gt; Foo <span class=\"hljs-keyword\">for</span> T {}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span> </span>() {\n    <span class=\"hljs-keyword\">let</span> slice: <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> Foo&gt; = <span class=\"hljs-built_in\">Box</span>::new([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]);\n    <span class=\"hljs-comment\">// doesn't compile yet</span>\n    &lt;<span class=\"hljs-keyword\">dyn</span> Foo <span class=\"hljs-keyword\">as</span> Foo&gt;::foo(*slice);\n}</code></pre></pre>\n<p>One of the objectives of this feature is to allow <code class=\"hljs\">Box&lt;dyn FnOnce&gt;</code>.</p>\n<h2 id=\"variable-length-arrays\"><a class=\"header\" href=\"#variable-length-arrays\">Variable length arrays</a></h2>\n<p>The RFC also describes an extension to the array literal syntax: <code class=\"hljs\">[e; dyn n]</code>. In the syntax, <code class=\"hljs\">n</code> isn't necessarily a constant expression. The array is dynamically allocated on the stack and has the type of <code class=\"hljs\">[T]</code>, instead of <code class=\"hljs\">[T; n]</code>.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore (not-yet-implemented) hljs\"><span class=\"hljs-meta\">#![feature(unsized_locals)]</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">mergesort</span></span>&lt;T: <span class=\"hljs-built_in\">Ord</span>&gt;(a: &amp;<span class=\"hljs-keyword\">mut</span> [T]) {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> tmp = [T; <span class=\"hljs-keyword\">dyn</span> a.len()];\n    <span class=\"hljs-comment\">// ...</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> a = [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>];\n    mergesort(&amp;<span class=\"hljs-keyword\">mut</span> a);\n    <span class=\"hljs-built_in\">assert_eq!</span>(a, [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>]);\n}</code></pre>\n<p>VLAs are not implemented yet. The syntax isn't final, either. We may need an alternative syntax for Rust 2015 because, in Rust 2015, expressions like <code class=\"hljs\">[e; dyn(1)]</code> would be ambiguous. One possible alternative proposed in the RFC is <code class=\"hljs\">[e; n]</code>: if <code class=\"hljs\">n</code> captures one or more local variables, then it is considered as <code class=\"hljs\">[e; dyn n]</code>.</p>\n<h2 id=\"advisory-on-stack-usage\"><a class=\"header\" href=\"#advisory-on-stack-usage\">Advisory on stack usage</a></h2>\n<p>It's advised not to casually use the <code class=\"hljs\">#![feature(unsized_locals)]</code> feature. Typical use-cases are:</p>\n<ul>\n<li>When you need a by-value trait objects.</li>\n<li>When you really need a fast allocation of small temporary arrays.</li>\n</ul>\n<p>Another pitfall is repetitive allocation and temporaries. Currently the compiler simply extends the stack frame every time it encounters an unsized assignment. So for example, the code</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-meta\">#![feature(unsized_locals)]</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> x: <span class=\"hljs-built_in\">Box</span>&lt;[<span class=\"hljs-built_in\">i32</span>]&gt; = <span class=\"hljs-built_in\">Box</span>::new([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]);\n    <span class=\"hljs-keyword\">let</span> _x = {{{{{{{{{{*x}}}}}}}}}};\n}</code></pre></pre>\n<p>and the code</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-meta\">#![feature(unsized_locals)]</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..<span class=\"hljs-number\">10</span> {\n        <span class=\"hljs-keyword\">let</span> x: <span class=\"hljs-built_in\">Box</span>&lt;[<span class=\"hljs-built_in\">i32</span>]&gt; = <span class=\"hljs-built_in\">Box</span>::new([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]);\n        <span class=\"hljs-keyword\">let</span> _x = *x;\n    }\n}</code></pre></pre>\n<p>will unnecessarily extend the stack frame.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"unsized_tuple_coercion\"><a class=\"header\" href=\"#unsized_tuple_coercion\"><code>unsized_tuple_coercion</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/42877\">#42877</a></p>\n<hr>\n<p>This is a part of <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0401-coercions.md\">RFC0401</a>. According to the RFC, there should be an implementation like this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore (partial-example) hljs\"><span class=\"hljs-keyword\">impl</span>&lt;..., T, U: ?<span class=\"hljs-built_in\">Sized</span>&gt; Unsized&lt;(..., U)&gt; <span class=\"hljs-keyword\">for</span> (..., T) <span class=\"hljs-keyword\">where</span> T: Unsized&lt;U&gt; {}</code></pre>\n<p>This implementation is currently gated behind <code class=\"hljs\">#[feature(unsized_tuple_coercion)]</code> to avoid insta-stability. Therefore you can use it like this:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-meta\">#![feature(unsized_tuple_coercion)]</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> x : ([<span class=\"hljs-built_in\">i32</span>; <span class=\"hljs-number\">3</span>], [<span class=\"hljs-built_in\">i32</span>; <span class=\"hljs-number\">3</span>]) = ([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>], [<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>]);\n    <span class=\"hljs-keyword\">let</span> y : &amp;([<span class=\"hljs-built_in\">i32</span>; <span class=\"hljs-number\">3</span>], [<span class=\"hljs-built_in\">i32</span>]) = &amp;x;\n    <span class=\"hljs-built_in\">assert_eq!</span>(y.<span class=\"hljs-number\">1</span>[<span class=\"hljs-number\">0</span>], <span class=\"hljs-number\">4</span>);\n}</code></pre></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"used_with_arg\"><a class=\"header\" href=\"#used_with_arg\"><code>used_with_arg</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/93798\">#93798</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"wasm_abi\"><a class=\"header\" href=\"#wasm_abi\"><code>wasm_abi</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/83788\">#83788</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"wasm_target_feature\"><a class=\"header\" href=\"#wasm_target_feature\"><code>wasm_target_feature</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/44839\">#44839</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"with_negative_coherence\"><a class=\"header\" href=\"#with_negative_coherence\"><code>with_negative_coherence</code></a></h1>\n<p>This feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"yeet_expr\"><a class=\"header\" href=\"#yeet_expr\"><code>yeet_expr</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/96373\">#96373</a></p>\n<hr>\n<p>The <code class=\"hljs\">yeet_expr</code> feature adds support for <code class=\"hljs\">do yeet</code> expressions,\nwhich can be used to early-exit from a function or <code class=\"hljs\">try</code> block.</p>\n<p>These are highly experimental, thus the placeholder syntax.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"hljs-meta\">#![feature(yeet_expr)]</span>\n\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>() -&gt; <span class=\"hljs-built_in\">Result</span>&lt;<span class=\"hljs-built_in\">String</span>, <span class=\"hljs-built_in\">i32</span>&gt; {\n    <span class=\"hljs-keyword\">do</span> yeet <span class=\"hljs-number\">4</span>;\n}\n<span class=\"hljs-built_in\">assert_eq!</span>(foo(), <span class=\"hljs-literal\">Err</span>(<span class=\"hljs-number\">4</span>));\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">bar</span></span>() -&gt; <span class=\"hljs-built_in\">Option</span>&lt;<span class=\"hljs-built_in\">String</span>&gt; {\n    <span class=\"hljs-keyword\">do</span> yeet;\n}\n<span class=\"hljs-built_in\">assert_eq!</span>(bar(), <span class=\"hljs-literal\">None</span>);\n<span class=\"boring\">}</span></code></pre></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"library-features\"><a class=\"header\" href=\"#library-features\">Library Features</a></h1>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"acceptfilter\"><a class=\"header\" href=\"#acceptfilter\"><code>acceptfilter</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/121891\">#121891</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"addr_parse_ascii\"><a class=\"header\" href=\"#addr_parse_ascii\"><code>addr_parse_ascii</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/101035\">#101035</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"alloc_error_hook\"><a class=\"header\" href=\"#alloc_error_hook\"><code>alloc_error_hook</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/51245\">#51245</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"alloc_internals\"><a class=\"header\" href=\"#alloc_internals\"><code>alloc_internals</code></a></h1>\n<p>This feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"alloc_layout_extra\"><a class=\"header\" href=\"#alloc_layout_extra\"><code>alloc_layout_extra</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/55724\">#55724</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"allocator_api\"><a class=\"header\" href=\"#allocator_api\"><code>allocator_api</code></a></h1>\n<p>The tracking issue for this feature is <a href=\"https://github.com/rust-lang/rust/issues/32838\">#32838</a></p>\n<hr>\n<p>Sometimes you want the memory for one collection to use a different\nallocator than the memory for another collection. In this case,\nreplacing the global allocator is not a workable option. Instead,\nyou need to pass in an instance of an <code class=\"hljs\">AllocRef</code> to each collection\nfor which you want a custom allocator.</p>\n<p>TBD</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"array_chunks\"><a class=\"header\" href=\"#array_chunks\"><code>array_chunks</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/74985\">#74985</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"array_into_iter_constructors\"><a class=\"header\" href=\"#array_into_iter_constructors\"><code>array_into_iter_constructors</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/91583\">#91583</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"array_ptr_get\"><a class=\"header\" href=\"#array_ptr_get\"><code>array_ptr_get</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/119834\">#119834</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"array_try_from_fn\"><a class=\"header\" href=\"#array_try_from_fn\"><code>array_try_from_fn</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/89379\">#89379</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"array_try_map\"><a class=\"header\" href=\"#array_try_map\"><code>array_try_map</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/79711\">#79711</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"array_windows\"><a class=\"header\" href=\"#array_windows\"><code>array_windows</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/75027\">#75027</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"as_array_of_cells\"><a class=\"header\" href=\"#as_array_of_cells\"><code>as_array_of_cells</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/88248\">#88248</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"ascii_char\"><a class=\"header\" href=\"#ascii_char\"><code>ascii_char</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"ascii_char_variants\"><a class=\"header\" href=\"#ascii_char_variants\"><code>ascii_char_variants</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"assert_matches\"><a class=\"header\" href=\"#assert_matches\"><code>assert_matches</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/82775\">#82775</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"async_drop\"><a class=\"header\" href=\"#async_drop\"><code>async_drop</code></a></h1>\n<p>This feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"async_fn_traits\"><a class=\"header\" href=\"#async_fn_traits\"><code>async_fn_traits</code></a></h1>\n<p>See Also: <a href=\"library-features/../library-features/fn-traits.html\"><code class=\"hljs\">fn_traits</code></a></p>\n<hr>\n<p>The <code class=\"hljs\">async_fn_traits</code> feature allows for implementation of the <a href=\"library-features/../../std/ops/trait.AsyncFn.html\"><code class=\"hljs\">AsyncFn*</code></a> traits\nfor creating custom closure-like types that return futures.</p>\n<p>The main difference to the <code class=\"hljs\">Fn*</code> family of traits is that <code class=\"hljs\">AsyncFn</code> can return a future\nthat borrows from itself (<code class=\"hljs\">FnOnce::Output</code> has no lifetime parameters, while <code class=\"hljs\">AsyncFnMut::CallRefFuture</code> does).</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"async_gen_internals\"><a class=\"header\" href=\"#async_gen_internals\"><code>async_gen_internals</code></a></h1>\n<p>This feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"async_iter_from_iter\"><a class=\"header\" href=\"#async_iter_from_iter\"><code>async_iter_from_iter</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/81798\">#81798</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"async_iterator\"><a class=\"header\" href=\"#async_iterator\"><code>async_iterator</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/79024\">#79024</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"atomic_bool_fetch_not\"><a class=\"header\" href=\"#atomic_bool_fetch_not\"><code>atomic_bool_fetch_not</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/98485\">#98485</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"atomic_from_mut\"><a class=\"header\" href=\"#atomic_from_mut\"><code>atomic_from_mut</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/76314\">#76314</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"backtrace_frames\"><a class=\"header\" href=\"#backtrace_frames\"><code>backtrace_frames</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/79676\">#79676</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"bigint_helper_methods\"><a class=\"header\" href=\"#bigint_helper_methods\"><code>bigint_helper_methods</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/85532\">#85532</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"binary_heap_drain_sorted\"><a class=\"header\" href=\"#binary_heap_drain_sorted\"><code>binary_heap_drain_sorted</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/59278\">#59278</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"binary_heap_into_iter_sorted\"><a class=\"header\" href=\"#binary_heap_into_iter_sorted\"><code>binary_heap_into_iter_sorted</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/59278\">#59278</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"bound_as_ref\"><a class=\"header\" href=\"#bound_as_ref\"><code>bound_as_ref</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/80996\">#80996</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"box_into_boxed_slice\"><a class=\"header\" href=\"#box_into_boxed_slice\"><code>box_into_boxed_slice</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/71582\">#71582</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"box_into_inner\"><a class=\"header\" href=\"#box_into_inner\"><code>box_into_inner</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/80437\">#80437</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"btree_cursors\"><a class=\"header\" href=\"#btree_cursors\"><code>btree_cursors</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/107540\">#107540</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"btree_extract_if\"><a class=\"header\" href=\"#btree_extract_if\"><code>btree_extract_if</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/70530\">#70530</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"btreemap_alloc\"><a class=\"header\" href=\"#btreemap_alloc\"><code>btreemap_alloc</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/32838\">#32838</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"buf_read_has_data_left\"><a class=\"header\" href=\"#buf_read_has_data_left\"><code>buf_read_has_data_left</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/86423\">#86423</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"bufread_skip_until\"><a class=\"header\" href=\"#bufread_skip_until\"><code>bufread_skip_until</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/111735\">#111735</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"build_hasher_default_const_new\"><a class=\"header\" href=\"#build_hasher_default_const_new\"><code>build_hasher_default_const_new</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/123197\">#123197</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"c_size_t\"><a class=\"header\" href=\"#c_size_t\"><code>c_size_t</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/88345\">#88345</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"c_str_module\"><a class=\"header\" href=\"#c_str_module\"><code>c_str_module</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/112134\">#112134</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"c_void_variant\"><a class=\"header\" href=\"#c_void_variant\"><code>c_void_variant</code></a></h1>\n<p>This feature is internal to the Rust compiler and is not intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"can_vector\"><a class=\"header\" href=\"#can_vector\"><code>can_vector</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/69941\">#69941</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"cell_leak\"><a class=\"header\" href=\"#cell_leak\"><code>cell_leak</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/69099\">#69099</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"cell_update\"><a class=\"header\" href=\"#cell_update\"><code>cell_update</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/50186\">#50186</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"cfg_accessible\"><a class=\"header\" href=\"#cfg_accessible\"><code>cfg_accessible</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/64797\">#64797</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"cfg_eval\"><a class=\"header\" href=\"#cfg_eval\"><code>cfg_eval</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/82679\">#82679</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"cfg_match\"><a class=\"header\" href=\"#cfg_match\"><code>cfg_match</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/115585\">#115585</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"char_indices_offset\"><a class=\"header\" href=\"#char_indices_offset\"><code>char_indices_offset</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/83871\">#83871</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"char_internals\"><a class=\"header\" href=\"#char_internals\"><code>char_internals</code></a></h1>\n<p>This feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"char_min\"><a class=\"header\" href=\"#char_min\"><code>char_min</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/114298\">#114298</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"cmp_minmax\"><a class=\"header\" href=\"#cmp_minmax\"><code>cmp_minmax</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/115939\">#115939</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"coerce_unsized\"><a class=\"header\" href=\"#coerce_unsized\"><code>coerce_unsized</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/18598\">#18598</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"concat_bytes\"><a class=\"header\" href=\"#concat_bytes\"><code>concat_bytes</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/87555\">#87555</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"concat_idents\"><a class=\"header\" href=\"#concat_idents\"><code>concat_idents</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/29599\">#29599</a></p>\n<hr>\n<p>The <code class=\"hljs\">concat_idents</code> feature adds a macro for concatenating multiple identifiers\ninto one identifier.</p>\n<h2 id=\"examples-10\"><a class=\"header\" href=\"#examples-10\">Examples</a></h2>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-meta\">#![feature(concat_idents)]</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foobar</span></span>() -&gt; <span class=\"hljs-built_in\">u32</span> { <span class=\"hljs-number\">23</span> }\n    <span class=\"hljs-keyword\">let</span> f = <span class=\"hljs-built_in\">concat_idents!</span>(foo, bar);\n    <span class=\"hljs-built_in\">assert_eq!</span>(f(), <span class=\"hljs-number\">23</span>);\n}</code></pre></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_align_of_val\"><a class=\"header\" href=\"#const_align_of_val\"><code>const_align_of_val</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/46571\">#46571</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_align_of_val_raw\"><a class=\"header\" href=\"#const_align_of_val_raw\"><code>const_align_of_val_raw</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/46571\">#46571</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_align_offset\"><a class=\"header\" href=\"#const_align_offset\"><code>const_align_offset</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/90962\">#90962</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_alloc_error\"><a class=\"header\" href=\"#const_alloc_error\"><code>const_alloc_error</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/92523\">#92523</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_alloc_layout\"><a class=\"header\" href=\"#const_alloc_layout\"><code>const_alloc_layout</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/67521\">#67521</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_arguments_as_str\"><a class=\"header\" href=\"#const_arguments_as_str\"><code>const_arguments_as_str</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/103900\">#103900</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_array_from_ref\"><a class=\"header\" href=\"#const_array_from_ref\"><code>const_array_from_ref</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/90206\">#90206</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_array_into_iter_constructors\"><a class=\"header\" href=\"#const_array_into_iter_constructors\"><code>const_array_into_iter_constructors</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/91583\">#91583</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_atomic_from_ptr\"><a class=\"header\" href=\"#const_atomic_from_ptr\"><code>const_atomic_from_ptr</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/108652\">#108652</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_bigint_helper_methods\"><a class=\"header\" href=\"#const_bigint_helper_methods\"><code>const_bigint_helper_methods</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/85532\">#85532</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_binary_heap_new_in\"><a class=\"header\" href=\"#const_binary_heap_new_in\"><code>const_binary_heap_new_in</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/112353\">#112353</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_black_box\"><a class=\"header\" href=\"#const_black_box\"><code>const_black_box</code></a></h1>\n<p>This feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_box\"><a class=\"header\" href=\"#const_box\"><code>const_box</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/92521\">#92521</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_btree_len\"><a class=\"header\" href=\"#const_btree_len\"><code>const_btree_len</code></a></h1>\n<p>This feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_cell_into_inner\"><a class=\"header\" href=\"#const_cell_into_inner\"><code>const_cell_into_inner</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/78729\">#78729</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_char_from_u32_unchecked\"><a class=\"header\" href=\"#const_char_from_u32_unchecked\"><code>const_char_from_u32_unchecked</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/89259\">#89259</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_cmp\"><a class=\"header\" href=\"#const_cmp\"><code>const_cmp</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/92391\">#92391</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_collections_with_hasher\"><a class=\"header\" href=\"#const_collections_with_hasher\"><code>const_collections_with_hasher</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/102575\">#102575</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_cow_is_borrowed\"><a class=\"header\" href=\"#const_cow_is_borrowed\"><code>const_cow_is_borrowed</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/65143\">#65143</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_cstr_from_ptr\"><a class=\"header\" href=\"#const_cstr_from_ptr\"><code>const_cstr_from_ptr</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/113219\">#113219</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_eval_select\"><a class=\"header\" href=\"#const_eval_select\"><code>const_eval_select</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/124625\">#124625</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_exact_div\"><a class=\"header\" href=\"#const_exact_div\"><code>const_exact_div</code></a></h1>\n<p>This feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_float_bits_conv\"><a class=\"header\" href=\"#const_float_bits_conv\"><code>const_float_bits_conv</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/72447\">#72447</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_float_classify\"><a class=\"header\" href=\"#const_float_classify\"><code>const_float_classify</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/72505\">#72505</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_fmt_arguments_new\"><a class=\"header\" href=\"#const_fmt_arguments_new\"><code>const_fmt_arguments_new</code></a></h1>\n<p>This feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_format_args\"><a class=\"header\" href=\"#const_format_args\"><code>const_format_args</code></a></h1>\n<p>This feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_hash\"><a class=\"header\" href=\"#const_hash\"><code>const_hash</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/104061\">#104061</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_heap\"><a class=\"header\" href=\"#const_heap\"><code>const_heap</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/79597\">#79597</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_hint_assert_unchecked\"><a class=\"header\" href=\"#const_hint_assert_unchecked\"><code>const_hint_assert_unchecked</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/119131\">#119131</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_index_range_slice_index\"><a class=\"header\" href=\"#const_index_range_slice_index\"><code>const_index_range_slice_index</code></a></h1>\n<p>This feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_int_from_str\"><a class=\"header\" href=\"#const_int_from_str\"><code>const_int_from_str</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/59133\">#59133</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_intoiterator_identity\"><a class=\"header\" href=\"#const_intoiterator_identity\"><code>const_intoiterator_identity</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/90603\">#90603</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_intrinsic_compare_bytes\"><a class=\"header\" href=\"#const_intrinsic_compare_bytes\"><code>const_intrinsic_compare_bytes</code></a></h1>\n<p>This feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_intrinsic_copy\"><a class=\"header\" href=\"#const_intrinsic_copy\"><code>const_intrinsic_copy</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/80697\">#80697</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_intrinsic_forget\"><a class=\"header\" href=\"#const_intrinsic_forget\"><code>const_intrinsic_forget</code></a></h1>\n<p>This feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_intrinsic_raw_eq\"><a class=\"header\" href=\"#const_intrinsic_raw_eq\"><code>const_intrinsic_raw_eq</code></a></h1>\n<p>This feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_ip\"><a class=\"header\" href=\"#const_ip\"><code>const_ip</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/76205\">#76205</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_ipv4\"><a class=\"header\" href=\"#const_ipv4\"><code>const_ipv4</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/76205\">#76205</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_ipv6\"><a class=\"header\" href=\"#const_ipv6\"><code>const_ipv6</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/76205\">#76205</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_likely\"><a class=\"header\" href=\"#const_likely\"><code>const_likely</code></a></h1>\n<p>This feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_maybe_uninit_array_assume_init\"><a class=\"header\" href=\"#const_maybe_uninit_array_assume_init\"><code>const_maybe_uninit_array_assume_init</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/96097\">#96097</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_maybe_uninit_as_mut_ptr\"><a class=\"header\" href=\"#const_maybe_uninit_as_mut_ptr\"><code>const_maybe_uninit_as_mut_ptr</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/75251\">#75251</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_maybe_uninit_assume_init\"><a class=\"header\" href=\"#const_maybe_uninit_assume_init\"><code>const_maybe_uninit_assume_init</code></a></h1>\n<p>This feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_maybe_uninit_uninit_array\"><a class=\"header\" href=\"#const_maybe_uninit_uninit_array\"><code>const_maybe_uninit_uninit_array</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/96097\">#96097</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_maybe_uninit_write\"><a class=\"header\" href=\"#const_maybe_uninit_write\"><code>const_maybe_uninit_write</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/63567\">#63567</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_nonnull_new\"><a class=\"header\" href=\"#const_nonnull_new\"><code>const_nonnull_new</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/93235\">#93235</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_num_midpoint\"><a class=\"header\" href=\"#const_num_midpoint\"><code>const_num_midpoint</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/110840\">#110840</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_ops\"><a class=\"header\" href=\"#const_ops\"><code>const_ops</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/90080\">#90080</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_option\"><a class=\"header\" href=\"#const_option\"><code>const_option</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/67441\">#67441</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_option_ext\"><a class=\"header\" href=\"#const_option_ext\"><code>const_option_ext</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/91930\">#91930</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_pin\"><a class=\"header\" href=\"#const_pin\"><code>const_pin</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/76654\">#76654</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_pointer_is_aligned\"><a class=\"header\" href=\"#const_pointer_is_aligned\"><code>const_pointer_is_aligned</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/104203\">#104203</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_pref_align_of\"><a class=\"header\" href=\"#const_pref_align_of\"><code>const_pref_align_of</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/91971\">#91971</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_ptr_as_ref\"><a class=\"header\" href=\"#const_ptr_as_ref\"><code>const_ptr_as_ref</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/91822\">#91822</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_ptr_is_null\"><a class=\"header\" href=\"#const_ptr_is_null\"><code>const_ptr_is_null</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/74939\">#74939</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_ptr_sub_ptr\"><a class=\"header\" href=\"#const_ptr_sub_ptr\"><code>const_ptr_sub_ptr</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/95892\">#95892</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_ptr_write\"><a class=\"header\" href=\"#const_ptr_write\"><code>const_ptr_write</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/86302\">#86302</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_range_bounds\"><a class=\"header\" href=\"#const_range_bounds\"><code>const_range_bounds</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/108082\">#108082</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_raw_ptr_comparison\"><a class=\"header\" href=\"#const_raw_ptr_comparison\"><code>const_raw_ptr_comparison</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/53020\">#53020</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_replace\"><a class=\"header\" href=\"#const_replace\"><code>const_replace</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/83164\">#83164</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_result\"><a class=\"header\" href=\"#const_result\"><code>const_result</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/82814\">#82814</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_size_of_val\"><a class=\"header\" href=\"#const_size_of_val\"><code>const_size_of_val</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/46571\">#46571</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_size_of_val_raw\"><a class=\"header\" href=\"#const_size_of_val_raw\"><code>const_size_of_val_raw</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/46571\">#46571</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_slice_first_last\"><a class=\"header\" href=\"#const_slice_first_last\"><code>const_slice_first_last</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/83570\">#83570</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_slice_first_last_chunk\"><a class=\"header\" href=\"#const_slice_first_last_chunk\"><code>const_slice_first_last_chunk</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/111774\">#111774</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_slice_flatten\"><a class=\"header\" href=\"#const_slice_flatten\"><code>const_slice_flatten</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/95629\">#95629</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_slice_from_mut_ptr_range\"><a class=\"header\" href=\"#const_slice_from_mut_ptr_range\"><code>const_slice_from_mut_ptr_range</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/89792\">#89792</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_slice_from_ptr_range\"><a class=\"header\" href=\"#const_slice_from_ptr_range\"><code>const_slice_from_ptr_range</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/89792\">#89792</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_slice_from_raw_parts_mut\"><a class=\"header\" href=\"#const_slice_from_raw_parts_mut\"><code>const_slice_from_raw_parts_mut</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/67456\">#67456</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_slice_from_ref\"><a class=\"header\" href=\"#const_slice_from_ref\"><code>const_slice_from_ref</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/90206\">#90206</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_slice_index\"><a class=\"header\" href=\"#const_slice_index\"><code>const_slice_index</code></a></h1>\n<p>This feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_slice_split_at_mut\"><a class=\"header\" href=\"#const_slice_split_at_mut\"><code>const_slice_split_at_mut</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/101804\">#101804</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_str_from_raw_parts_mut\"><a class=\"header\" href=\"#const_str_from_raw_parts_mut\"><code>const_str_from_raw_parts_mut</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/119206\">#119206</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_str_from_utf8\"><a class=\"header\" href=\"#const_str_from_utf8\"><code>const_str_from_utf8</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/91006\">#91006</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_str_from_utf8_unchecked_mut\"><a class=\"header\" href=\"#const_str_from_utf8_unchecked_mut\"><code>const_str_from_utf8_unchecked_mut</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/91005\">#91005</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_strict_overflow_ops\"><a class=\"header\" href=\"#const_strict_overflow_ops\"><code>const_strict_overflow_ops</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/118260\">#118260</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_swap\"><a class=\"header\" href=\"#const_swap\"><code>const_swap</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/83163\">#83163</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_three_way_compare\"><a class=\"header\" href=\"#const_three_way_compare\"><code>const_three_way_compare</code></a></h1>\n<p>This feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_type_id\"><a class=\"header\" href=\"#const_type_id\"><code>const_type_id</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/77125\">#77125</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_type_name\"><a class=\"header\" href=\"#const_type_name\"><code>const_type_name</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/63084\">#63084</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_typed_swap\"><a class=\"header\" href=\"#const_typed_swap\"><code>const_typed_swap</code></a></h1>\n<p>This feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_ub_checks\"><a class=\"header\" href=\"#const_ub_checks\"><code>const_ub_checks</code></a></h1>\n<p>This feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_unicode_case_lookup\"><a class=\"header\" href=\"#const_unicode_case_lookup\"><code>const_unicode_case_lookup</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/101400\">#101400</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_unsafecell_get_mut\"><a class=\"header\" href=\"#const_unsafecell_get_mut\"><code>const_unsafecell_get_mut</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/88836\">#88836</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"const_waker\"><a class=\"header\" href=\"#const_waker\"><code>const_waker</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/102012\">#102012</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"container_error_extra\"><a class=\"header\" href=\"#container_error_extra\"><code>container_error_extra</code></a></h1>\n<p>This feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"context_ext\"><a class=\"header\" href=\"#context_ext\"><code>context_ext</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/123392\">#123392</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"control_flow_enum\"><a class=\"header\" href=\"#control_flow_enum\"><code>control_flow_enum</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/75744\">#75744</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"convert_float_to_int\"><a class=\"header\" href=\"#convert_float_to_int\"><code>convert_float_to_int</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/67057\">#67057</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"core_intrinsics\"><a class=\"header\" href=\"#core_intrinsics\"><code>core_intrinsics</code></a></h1>\n<p>This feature is internal to the Rust compiler and is not intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"core_io_borrowed_buf\"><a class=\"header\" href=\"#core_io_borrowed_buf\"><code>core_io_borrowed_buf</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/117693\">#117693</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"core_pattern_type\"><a class=\"header\" href=\"#core_pattern_type\"><code>core_pattern_type</code></a></h1>\n<p>This feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"core_pattern_types\"><a class=\"header\" href=\"#core_pattern_types\"><code>core_pattern_types</code></a></h1>\n<p>This feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"core_private_bignum\"><a class=\"header\" href=\"#core_private_bignum\"><code>core_private_bignum</code></a></h1>\n<p>This feature is internal to the Rust compiler and is not intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"core_private_diy_float\"><a class=\"header\" href=\"#core_private_diy_float\"><code>core_private_diy_float</code></a></h1>\n<p>This feature is internal to the Rust compiler and is not intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"coroutine_trait\"><a class=\"header\" href=\"#coroutine_trait\"><code>coroutine_trait</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/43122\">#43122</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"cow_is_borrowed\"><a class=\"header\" href=\"#cow_is_borrowed\"><code>cow_is_borrowed</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/65143\">#65143</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"cstr_bytes\"><a class=\"header\" href=\"#cstr_bytes\"><code>cstr_bytes</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/112115\">#112115</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"cursor_remaining\"><a class=\"header\" href=\"#cursor_remaining\"><code>cursor_remaining</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/86369\">#86369</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"deadline_api\"><a class=\"header\" href=\"#deadline_api\"><code>deadline_api</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/46316\">#46316</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"debug_closure_helpers\"><a class=\"header\" href=\"#debug_closure_helpers\"><code>debug_closure_helpers</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/117729\">#117729</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"dec2flt\"><a class=\"header\" href=\"#dec2flt\"><code>dec2flt</code></a></h1>\n<p>This feature is internal to the Rust compiler and is not intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"deref_pure_trait\"><a class=\"header\" href=\"#deref_pure_trait\"><code>deref_pure_trait</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/87121\">#87121</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"derive_clone_copy\"><a class=\"header\" href=\"#derive_clone_copy\"><code>derive_clone_copy</code></a></h1>\n<p>This feature is internal to the Rust compiler and is not intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"derive_const\"><a class=\"header\" href=\"#derive_const\"><code>derive_const</code></a></h1>\n<p>This feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"derive_eq\"><a class=\"header\" href=\"#derive_eq\"><code>derive_eq</code></a></h1>\n<p>This feature is internal to the Rust compiler and is not intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"dir_entry_ext2\"><a class=\"header\" href=\"#dir_entry_ext2\"><code>dir_entry_ext2</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/85573\">#85573</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"discriminant_kind\"><a class=\"header\" href=\"#discriminant_kind\"><code>discriminant_kind</code></a></h1>\n<p>This feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"dispatch_from_dyn\"><a class=\"header\" href=\"#dispatch_from_dyn\"><code>dispatch_from_dyn</code></a></h1>\n<p>This feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"downcast_unchecked\"><a class=\"header\" href=\"#downcast_unchecked\"><code>downcast_unchecked</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/90850\">#90850</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"drain_keep_rest\"><a class=\"header\" href=\"#drain_keep_rest\"><code>drain_keep_rest</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/101122\">#101122</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"duration_abs_diff\"><a class=\"header\" href=\"#duration_abs_diff\"><code>duration_abs_diff</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/117618\">#117618</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"duration_constants\"><a class=\"header\" href=\"#duration_constants\"><code>duration_constants</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/57391\">#57391</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"duration_constructors\"><a class=\"header\" href=\"#duration_constructors\"><code>duration_constructors</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/120301\">#120301</a></p>\n<hr>\n<p>Add the methods <code class=\"hljs\">from_mins</code>, <code class=\"hljs\">from_hours</code> and <code class=\"hljs\">from_days</code> to <code class=\"hljs\">Duration</code>.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"duration_consts_float\"><a class=\"header\" href=\"#duration_consts_float\"><code>duration_consts_float</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/72440\">#72440</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"duration_millis_float\"><a class=\"header\" href=\"#duration_millis_float\"><code>duration_millis_float</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/122451\">#122451</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"duration_units\"><a class=\"header\" href=\"#duration_units\"><code>duration_units</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/120301\">#120301</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"edition_panic\"><a class=\"header\" href=\"#edition_panic\"><code>edition_panic</code></a></h1>\n<p>This feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"entry_insert\"><a class=\"header\" href=\"#entry_insert\"><code>entry_insert</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/65225\">#65225</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"error_generic_member_access\"><a class=\"header\" href=\"#error_generic_member_access\"><code>error_generic_member_access</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/99301\">#99301</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"error_in_core\"><a class=\"header\" href=\"#error_in_core\"><code>error_in_core</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/103765\">#103765</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"error_iter\"><a class=\"header\" href=\"#error_iter\"><code>error_iter</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/58520\">#58520</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"error_reporter\"><a class=\"header\" href=\"#error_reporter\"><code>error_reporter</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/90172\">#90172</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"error_type_id\"><a class=\"header\" href=\"#error_type_id\"><code>error_type_id</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/60784\">#60784</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"exact_size_is_empty\"><a class=\"header\" href=\"#exact_size_is_empty\"><code>exact_size_is_empty</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/35428\">#35428</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"exclusive_wrapper\"><a class=\"header\" href=\"#exclusive_wrapper\"><code>exclusive_wrapper</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/98407\">#98407</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"exit_status_error\"><a class=\"header\" href=\"#exit_status_error\"><code>exit_status_error</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/84908\">#84908</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"exitcode_exit_method\"><a class=\"header\" href=\"#exitcode_exit_method\"><code>exitcode_exit_method</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/97100\">#97100</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"exposed_provenance\"><a class=\"header\" href=\"#exposed_provenance\"><code>exposed_provenance</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/95228\">#95228</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"extend_one\"><a class=\"header\" href=\"#extend_one\"><code>extend_one</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/72631\">#72631</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"extract_if\"><a class=\"header\" href=\"#extract_if\"><code>extract_if</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/43244\">#43244</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"fd\"><a class=\"header\" href=\"#fd\"><code>fd</code></a></h1>\n<p>This feature is internal to the Rust compiler and is not intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"fd_read\"><a class=\"header\" href=\"#fd_read\"><code>fd_read</code></a></h1>\n<p>This feature is internal to the Rust compiler and is not intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"float_gamma\"><a class=\"header\" href=\"#float_gamma\"><code>float_gamma</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/99842\">#99842</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"float_minimum_maximum\"><a class=\"header\" href=\"#float_minimum_maximum\"><code>float_minimum_maximum</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/91079\">#91079</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"float_next_up_down\"><a class=\"header\" href=\"#float_next_up_down\"><code>float_next_up_down</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/91399\">#91399</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"flt2dec\"><a class=\"header\" href=\"#flt2dec\"><code>flt2dec</code></a></h1>\n<p>This feature is internal to the Rust compiler and is not intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"fmt_helpers_for_derive\"><a class=\"header\" href=\"#fmt_helpers_for_derive\"><code>fmt_helpers_for_derive</code></a></h1>\n<p>This feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"fmt_internals\"><a class=\"header\" href=\"#fmt_internals\"><code>fmt_internals</code></a></h1>\n<p>This feature is internal to the Rust compiler and is not intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"fn_ptr_trait\"><a class=\"header\" href=\"#fn_ptr_trait\"><code>fn_ptr_trait</code></a></h1>\n<p>This feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"fn_traits\"><a class=\"header\" href=\"#fn_traits\"><code>fn_traits</code></a></h1>\n<p>The tracking issue for this feature is <a href=\"https://github.com/rust-lang/rust/issues/29625\">#29625</a></p>\n<p>See Also: <a href=\"library-features/../language-features/unboxed-closures.html\"><code class=\"hljs\">unboxed_closures</code></a></p>\n<hr>\n<p>The <code class=\"hljs\">fn_traits</code> feature allows for implementation of the <a href=\"library-features/../../std/ops/trait.Fn.html\"><code class=\"hljs\">Fn*</code></a> traits\nfor creating custom closure-like types.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-meta\">#![feature(unboxed_closures)]</span>\n<span class=\"hljs-meta\">#![feature(fn_traits)]</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Adder</span></span> {\n    a: <span class=\"hljs-built_in\">u32</span>\n}\n\n<span class=\"hljs-keyword\">impl</span> <span class=\"hljs-built_in\">FnOnce</span>&lt;(<span class=\"hljs-built_in\">u32</span>, )&gt; <span class=\"hljs-keyword\">for</span> Adder {\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Output</span></span> = <span class=\"hljs-built_in\">u32</span>;\n    <span class=\"hljs-keyword\">extern</span> <span class=\"hljs-string\">\"rust-call\"</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">call_once</span></span>(<span class=\"hljs-keyword\">self</span>, b: (<span class=\"hljs-built_in\">u32</span>, )) -&gt; Self::Output {\n        <span class=\"hljs-keyword\">self</span>.a + b.<span class=\"hljs-number\">0</span>\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> adder = Adder { a: <span class=\"hljs-number\">3</span> };\n    <span class=\"hljs-built_in\">assert_eq!</span>(adder(<span class=\"hljs-number\">2</span>), <span class=\"hljs-number\">5</span>);\n}</code></pre></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"forget_unsized\"><a class=\"header\" href=\"#forget_unsized\"><code>forget_unsized</code></a></h1>\n<p>This feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"format_args_nl\"><a class=\"header\" href=\"#format_args_nl\"><code>format_args_nl</code></a></h1>\n<p>This feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"freeze\"><a class=\"header\" href=\"#freeze\"><code>freeze</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/121675\">#121675</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"fs_try_exists\"><a class=\"header\" href=\"#fs_try_exists\"><code>fs_try_exists</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/83186\">#83186</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"future_join\"><a class=\"header\" href=\"#future_join\"><code>future_join</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/91642\">#91642</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"gen_future\"><a class=\"header\" href=\"#gen_future\"><code>gen_future</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/50547\">#50547</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"generic_assert_internals\"><a class=\"header\" href=\"#generic_assert_internals\"><code>generic_assert_internals</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/44838\">#44838</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"get_many_mut\"><a class=\"header\" href=\"#get_many_mut\"><code>get_many_mut</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/104642\">#104642</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"get_mut_unchecked\"><a class=\"header\" href=\"#get_mut_unchecked\"><code>get_mut_unchecked</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/63292\">#63292</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"hash_extract_if\"><a class=\"header\" href=\"#hash_extract_if\"><code>hash_extract_if</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/59618\">#59618</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"hash_raw_entry\"><a class=\"header\" href=\"#hash_raw_entry\"><code>hash_raw_entry</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/56167\">#56167</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"hash_set_entry\"><a class=\"header\" href=\"#hash_set_entry\"><code>hash_set_entry</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/60896\">#60896</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"hasher_prefixfree_extras\"><a class=\"header\" href=\"#hasher_prefixfree_extras\"><code>hasher_prefixfree_extras</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/96762\">#96762</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"hashmap_internals\"><a class=\"header\" href=\"#hashmap_internals\"><code>hashmap_internals</code></a></h1>\n<p>This feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"hint_assert_unchecked\"><a class=\"header\" href=\"#hint_assert_unchecked\"><code>hint_assert_unchecked</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/119131\">#119131</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"hint_must_use\"><a class=\"header\" href=\"#hint_must_use\"><code>hint_must_use</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/94745\">#94745</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"inplace_iteration\"><a class=\"header\" href=\"#inplace_iteration\"><code>inplace_iteration</code></a></h1>\n<p>This feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"int_roundings\"><a class=\"header\" href=\"#int_roundings\"><code>int_roundings</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/88581\">#88581</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"integer_atomics\"><a class=\"header\" href=\"#integer_atomics\"><code>integer_atomics</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/99069\">#99069</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"integer_sign_cast\"><a class=\"header\" href=\"#integer_sign_cast\"><code>integer_sign_cast</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/125882\">#125882</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"internal_impls_macro\"><a class=\"header\" href=\"#internal_impls_macro\"><code>internal_impls_macro</code></a></h1>\n<p>This feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"internal_output_capture\"><a class=\"header\" href=\"#internal_output_capture\"><code>internal_output_capture</code></a></h1>\n<p>This feature is internal to the Rust compiler and is not intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"io_error_more\"><a class=\"header\" href=\"#io_error_more\"><code>io_error_more</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/86442\">#86442</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"io_error_uncategorized\"><a class=\"header\" href=\"#io_error_uncategorized\"><code>io_error_uncategorized</code></a></h1>\n<p>This feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"io_slice_advance\"><a class=\"header\" href=\"#io_slice_advance\"><code>io_slice_advance</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/62726\">#62726</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"ip\"><a class=\"header\" href=\"#ip\"><code>ip</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/27709\">#27709</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"is_ascii_octdigit\"><a class=\"header\" href=\"#is_ascii_octdigit\"><code>is_ascii_octdigit</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/101288\">#101288</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"is_riscv_feature_detected\"><a class=\"header\" href=\"#is_riscv_feature_detected\"><code>is_riscv_feature_detected</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/111192\">#111192</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"is_sorted\"><a class=\"header\" href=\"#is_sorted\"><code>is_sorted</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/53485\">#53485</a></p>\n<hr>\n<p>Add the methods <code class=\"hljs\">is_sorted</code>, <code class=\"hljs\">is_sorted_by</code> and <code class=\"hljs\">is_sorted_by_key</code> to <code class=\"hljs\">[T]</code>;\nadd the methods <code class=\"hljs\">is_sorted</code>, <code class=\"hljs\">is_sorted_by</code> and <code class=\"hljs\">is_sorted_by_key</code> to\n<code class=\"hljs\">Iterator</code>.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"is_val_statically_known\"><a class=\"header\" href=\"#is_val_statically_known\"><code>is_val_statically_known</code></a></h1>\n<p>This feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"isqrt\"><a class=\"header\" href=\"#isqrt\"><code>isqrt</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/116226\">#116226</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"iter_advance_by\"><a class=\"header\" href=\"#iter_advance_by\"><code>iter_advance_by</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/77404\">#77404</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"iter_array_chunks\"><a class=\"header\" href=\"#iter_array_chunks\"><code>iter_array_chunks</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/100450\">#100450</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"iter_chain\"><a class=\"header\" href=\"#iter_chain\"><code>iter_chain</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/125964\">#125964</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"iter_collect_into\"><a class=\"header\" href=\"#iter_collect_into\"><code>iter_collect_into</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/94780\">#94780</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"iter_from_coroutine\"><a class=\"header\" href=\"#iter_from_coroutine\"><code>iter_from_coroutine</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/43122\">#43122</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"iter_intersperse\"><a class=\"header\" href=\"#iter_intersperse\"><code>iter_intersperse</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/79524\">#79524</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"iter_is_partitioned\"><a class=\"header\" href=\"#iter_is_partitioned\"><code>iter_is_partitioned</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/62544\">#62544</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"iter_map_windows\"><a class=\"header\" href=\"#iter_map_windows\"><code>iter_map_windows</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/87155\">#87155</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"iter_next_chunk\"><a class=\"header\" href=\"#iter_next_chunk\"><code>iter_next_chunk</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/98326\">#98326</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"iter_order_by\"><a class=\"header\" href=\"#iter_order_by\"><code>iter_order_by</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/64295\">#64295</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"iter_partition_in_place\"><a class=\"header\" href=\"#iter_partition_in_place\"><code>iter_partition_in_place</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/62543\">#62543</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"iter_repeat_n\"><a class=\"header\" href=\"#iter_repeat_n\"><code>iter_repeat_n</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/104434\">#104434</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"iterator_try_collect\"><a class=\"header\" href=\"#iterator_try_collect\"><code>iterator_try_collect</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/94047\">#94047</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"iterator_try_reduce\"><a class=\"header\" href=\"#iterator_try_reduce\"><code>iterator_try_reduce</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/87053\">#87053</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"junction_point\"><a class=\"header\" href=\"#junction_point\"><code>junction_point</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/121709\">#121709</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"layout_for_ptr\"><a class=\"header\" href=\"#layout_for_ptr\"><code>layout_for_ptr</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/69835\">#69835</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"lazy_cell_consume\"><a class=\"header\" href=\"#lazy_cell_consume\"><code>lazy_cell_consume</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/125623\">#125623</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"liballoc_internals\"><a class=\"header\" href=\"#liballoc_internals\"><code>liballoc_internals</code></a></h1>\n<p>This feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"libstd_sys_internals\"><a class=\"header\" href=\"#libstd_sys_internals\"><code>libstd_sys_internals</code></a></h1>\n<p>This feature is internal to the Rust compiler and is not intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"linked_list_cursors\"><a class=\"header\" href=\"#linked_list_cursors\"><code>linked_list_cursors</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/58533\">#58533</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"linked_list_remove\"><a class=\"header\" href=\"#linked_list_remove\"><code>linked_list_remove</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/69210\">#69210</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"linked_list_retain\"><a class=\"header\" href=\"#linked_list_retain\"><code>linked_list_retain</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/114135\">#114135</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"linux_pidfd\"><a class=\"header\" href=\"#linux_pidfd\"><code>linux_pidfd</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/82971\">#82971</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"local_waker\"><a class=\"header\" href=\"#local_waker\"><code>local_waker</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/118959\">#118959</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"log_syntax\"><a class=\"header\" href=\"#log_syntax\"><code>log_syntax</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/29598\">#29598</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"map_entry_replace\"><a class=\"header\" href=\"#map_entry_replace\"><code>map_entry_replace</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/44286\">#44286</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"map_many_mut\"><a class=\"header\" href=\"#map_many_mut\"><code>map_many_mut</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/97601\">#97601</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"map_try_insert\"><a class=\"header\" href=\"#map_try_insert\"><code>map_try_insert</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/82766\">#82766</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"mapped_lock_guards\"><a class=\"header\" href=\"#mapped_lock_guards\"><code>mapped_lock_guards</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/117108\">#117108</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"maybe_uninit_array_assume_init\"><a class=\"header\" href=\"#maybe_uninit_array_assume_init\"><code>maybe_uninit_array_assume_init</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/96097\">#96097</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"maybe_uninit_as_bytes\"><a class=\"header\" href=\"#maybe_uninit_as_bytes\"><code>maybe_uninit_as_bytes</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/93092\">#93092</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"maybe_uninit_fill\"><a class=\"header\" href=\"#maybe_uninit_fill\"><code>maybe_uninit_fill</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/117428\">#117428</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"maybe_uninit_slice\"><a class=\"header\" href=\"#maybe_uninit_slice\"><code>maybe_uninit_slice</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/63569\">#63569</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"maybe_uninit_uninit_array\"><a class=\"header\" href=\"#maybe_uninit_uninit_array\"><code>maybe_uninit_uninit_array</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/96097\">#96097</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"maybe_uninit_uninit_array_transpose\"><a class=\"header\" href=\"#maybe_uninit_uninit_array_transpose\"><code>maybe_uninit_uninit_array_transpose</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/96097\">#96097</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"maybe_uninit_write_slice\"><a class=\"header\" href=\"#maybe_uninit_write_slice\"><code>maybe_uninit_write_slice</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/79995\">#79995</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"mem_copy_fn\"><a class=\"header\" href=\"#mem_copy_fn\"><code>mem_copy_fn</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/98262\">#98262</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"more_float_constants\"><a class=\"header\" href=\"#more_float_constants\"><code>more_float_constants</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/103883\">#103883</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"new_uninit\"><a class=\"header\" href=\"#new_uninit\"><code>new_uninit</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/63291\">#63291</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"non_zero_count_ones\"><a class=\"header\" href=\"#non_zero_count_ones\"><code>non_zero_count_ones</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/120287\">#120287</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"nonzero_from_mut\"><a class=\"header\" href=\"#nonzero_from_mut\"><code>nonzero_from_mut</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/106290\">#106290</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"nonzero_internals\"><a class=\"header\" href=\"#nonzero_internals\"><code>nonzero_internals</code></a></h1>\n<p>This feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"nonzero_ops\"><a class=\"header\" href=\"#nonzero_ops\"><code>nonzero_ops</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/84186\">#84186</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"noop_waker\"><a class=\"header\" href=\"#noop_waker\"><code>noop_waker</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/98286\">#98286</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"num_midpoint\"><a class=\"header\" href=\"#num_midpoint\"><code>num_midpoint</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/110840\">#110840</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"numfmt\"><a class=\"header\" href=\"#numfmt\"><code>numfmt</code></a></h1>\n<p>This feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"once_cell_get_mut\"><a class=\"header\" href=\"#once_cell_get_mut\"><code>once_cell_get_mut</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/121641\">#121641</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"once_cell_try\"><a class=\"header\" href=\"#once_cell_try\"><code>once_cell_try</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/109737\">#109737</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"once_cell_try_insert\"><a class=\"header\" href=\"#once_cell_try_insert\"><code>once_cell_try_insert</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/116693\">#116693</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"one_sided_range\"><a class=\"header\" href=\"#one_sided_range\"><code>one_sided_range</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/69780\">#69780</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"option_get_or_insert_default\"><a class=\"header\" href=\"#option_get_or_insert_default\"><code>option_get_or_insert_default</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/82901\">#82901</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"option_zip\"><a class=\"header\" href=\"#option_zip\"><code>option_zip</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/70086\">#70086</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"os_str_display\"><a class=\"header\" href=\"#os_str_display\"><code>os_str_display</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/120048\">#120048</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"os_str_slice\"><a class=\"header\" href=\"#os_str_slice\"><code>os_str_slice</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/118485\">#118485</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"panic_abort\"><a class=\"header\" href=\"#panic_abort\"><code>panic_abort</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/32837\">#32837</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"panic_always_abort\"><a class=\"header\" href=\"#panic_always_abort\"><code>panic_always_abort</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/84438\">#84438</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"panic_backtrace_config\"><a class=\"header\" href=\"#panic_backtrace_config\"><code>panic_backtrace_config</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/93346\">#93346</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"panic_can_unwind\"><a class=\"header\" href=\"#panic_can_unwind\"><code>panic_can_unwind</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/92988\">#92988</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"panic_info_message\"><a class=\"header\" href=\"#panic_info_message\"><code>panic_info_message</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/66745\">#66745</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"panic_internals\"><a class=\"header\" href=\"#panic_internals\"><code>panic_internals</code></a></h1>\n<p>This feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"panic_unwind\"><a class=\"header\" href=\"#panic_unwind\"><code>panic_unwind</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/32837\">#32837</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"panic_update_hook\"><a class=\"header\" href=\"#panic_update_hook\"><code>panic_update_hook</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/92649\">#92649</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"path_file_prefix\"><a class=\"header\" href=\"#path_file_prefix\"><code>path_file_prefix</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/86319\">#86319</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"pattern\"><a class=\"header\" href=\"#pattern\"><code>pattern</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/27721\">#27721</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"peer_credentials_unix_socket\"><a class=\"header\" href=\"#peer_credentials_unix_socket\"><code>peer_credentials_unix_socket</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/42839\">#42839</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"pin_deref_mut\"><a class=\"header\" href=\"#pin_deref_mut\"><code>pin_deref_mut</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/86918\">#86918</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"pointer_is_aligned_to\"><a class=\"header\" href=\"#pointer_is_aligned_to\"><code>pointer_is_aligned_to</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/96284\">#96284</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"pointer_like_trait\"><a class=\"header\" href=\"#pointer_like_trait\"><code>pointer_like_trait</code></a></h1>\n<p>This feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"portable_simd\"><a class=\"header\" href=\"#portable_simd\"><code>portable_simd</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"prelude_2024\"><a class=\"header\" href=\"#prelude_2024\"><code>prelude_2024</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/121042\">#121042</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"print_internals\"><a class=\"header\" href=\"#print_internals\"><code>print_internals</code></a></h1>\n<p>This feature is internal to the Rust compiler and is not intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"proc_macro_def_site\"><a class=\"header\" href=\"#proc_macro_def_site\"><code>proc_macro_def_site</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/54724\">#54724</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"proc_macro_diagnostic\"><a class=\"header\" href=\"#proc_macro_diagnostic\"><code>proc_macro_diagnostic</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/54140\">#54140</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"proc_macro_expand\"><a class=\"header\" href=\"#proc_macro_expand\"><code>proc_macro_expand</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/90765\">#90765</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"proc_macro_internals\"><a class=\"header\" href=\"#proc_macro_internals\"><code>proc_macro_internals</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/27812\">#27812</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"proc_macro_quote\"><a class=\"header\" href=\"#proc_macro_quote\"><code>proc_macro_quote</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/54722\">#54722</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"proc_macro_span\"><a class=\"header\" href=\"#proc_macro_span\"><code>proc_macro_span</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/54725\">#54725</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"proc_macro_tracked_env\"><a class=\"header\" href=\"#proc_macro_tracked_env\"><code>proc_macro_tracked_env</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/99515\">#99515</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"process_exitcode_internals\"><a class=\"header\" href=\"#process_exitcode_internals\"><code>process_exitcode_internals</code></a></h1>\n<p>This feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"process_internals\"><a class=\"header\" href=\"#process_internals\"><code>process_internals</code></a></h1>\n<p>This feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"profiler_runtime_lib\"><a class=\"header\" href=\"#profiler_runtime_lib\"><code>profiler_runtime_lib</code></a></h1>\n<p>This feature is internal to the Rust compiler and is not intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"ptr_alignment_type\"><a class=\"header\" href=\"#ptr_alignment_type\"><code>ptr_alignment_type</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/102070\">#102070</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"ptr_as_ref_unchecked\"><a class=\"header\" href=\"#ptr_as_ref_unchecked\"><code>ptr_as_ref_unchecked</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/122034\">#122034</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"ptr_as_uninit\"><a class=\"header\" href=\"#ptr_as_uninit\"><code>ptr_as_uninit</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/75402\">#75402</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"ptr_internals\"><a class=\"header\" href=\"#ptr_internals\"><code>ptr_internals</code></a></h1>\n<p>This feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"ptr_mask\"><a class=\"header\" href=\"#ptr_mask\"><code>ptr_mask</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/98290\">#98290</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"ptr_metadata\"><a class=\"header\" href=\"#ptr_metadata\"><code>ptr_metadata</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/81513\">#81513</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"ptr_sub_ptr\"><a class=\"header\" href=\"#ptr_sub_ptr\"><code>ptr_sub_ptr</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/95892\">#95892</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"ptr_to_from_bits\"><a class=\"header\" href=\"#ptr_to_from_bits\"><code>ptr_to_from_bits</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/91126\">#91126</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"pub_crate_should_not_need_unstable_attr\"><a class=\"header\" href=\"#pub_crate_should_not_need_unstable_attr\"><code>pub_crate_should_not_need_unstable_attr</code></a></h1>\n<p>This feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"raw_os_error_ty\"><a class=\"header\" href=\"#raw_os_error_ty\"><code>raw_os_error_ty</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/107792\">#107792</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"raw_slice_split\"><a class=\"header\" href=\"#raw_slice_split\"><code>raw_slice_split</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/95595\">#95595</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"raw_vec_internals\"><a class=\"header\" href=\"#raw_vec_internals\"><code>raw_vec_internals</code></a></h1>\n<p>This feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"read_buf\"><a class=\"header\" href=\"#read_buf\"><code>read_buf</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/78485\">#78485</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"ready_into_inner\"><a class=\"header\" href=\"#ready_into_inner\"><code>ready_into_inner</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/101196\">#101196</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"receiver_trait\"><a class=\"header\" href=\"#receiver_trait\"><code>receiver_trait</code></a></h1>\n<p>This feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"reentrant_lock\"><a class=\"header\" href=\"#reentrant_lock\"><code>reentrant_lock</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/121440\">#121440</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"restricted_std\"><a class=\"header\" href=\"#restricted_std\"><code>restricted_std</code></a></h1>\n<p>This feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"result_flattening\"><a class=\"header\" href=\"#result_flattening\"><code>result_flattening</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/70142\">#70142</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"round_char_boundary\"><a class=\"header\" href=\"#round_char_boundary\"><code>round_char_boundary</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/93743\">#93743</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"rt\"><a class=\"header\" href=\"#rt\"><code>rt</code></a></h1>\n<p>This feature is internal to the Rust compiler and is not intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"rustc_encodable_decodable\"><a class=\"header\" href=\"#rustc_encodable_decodable\"><code>rustc_encodable_decodable</code></a></h1>\n<p>This feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"sealed\"><a class=\"header\" href=\"#sealed\"><code>sealed</code></a></h1>\n<p>This feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"seek_stream_len\"><a class=\"header\" href=\"#seek_stream_len\"><code>seek_stream_len</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/59359\">#59359</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"set_ptr_value\"><a class=\"header\" href=\"#set_ptr_value\"><code>set_ptr_value</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/75091\">#75091</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"setgroups\"><a class=\"header\" href=\"#setgroups\"><code>setgroups</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/90747\">#90747</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"sgx_platform\"><a class=\"header\" href=\"#sgx_platform\"><code>sgx_platform</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/56975\">#56975</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"sized_type_properties\"><a class=\"header\" href=\"#sized_type_properties\"><code>sized_type_properties</code></a></h1>\n<p>This feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"slice_as_chunks\"><a class=\"header\" href=\"#slice_as_chunks\"><code>slice_as_chunks</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/74985\">#74985</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"slice_concat_ext\"><a class=\"header\" href=\"#slice_concat_ext\"><code>slice_concat_ext</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/27747\">#27747</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"slice_concat_trait\"><a class=\"header\" href=\"#slice_concat_trait\"><code>slice_concat_trait</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/27747\">#27747</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"slice_from_ptr_range\"><a class=\"header\" href=\"#slice_from_ptr_range\"><code>slice_from_ptr_range</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/89792\">#89792</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"slice_index_methods\"><a class=\"header\" href=\"#slice_index_methods\"><code>slice_index_methods</code></a></h1>\n<p>This feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"slice_internals\"><a class=\"header\" href=\"#slice_internals\"><code>slice_internals</code></a></h1>\n<p>This feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"slice_iter_mut_as_mut_slice\"><a class=\"header\" href=\"#slice_iter_mut_as_mut_slice\"><code>slice_iter_mut_as_mut_slice</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/93079\">#93079</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"slice_partition_dedup\"><a class=\"header\" href=\"#slice_partition_dedup\"><code>slice_partition_dedup</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/54279\">#54279</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"slice_pattern\"><a class=\"header\" href=\"#slice_pattern\"><code>slice_pattern</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/56345\">#56345</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"slice_ptr_get\"><a class=\"header\" href=\"#slice_ptr_get\"><code>slice_ptr_get</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/74265\">#74265</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"slice_range\"><a class=\"header\" href=\"#slice_range\"><code>slice_range</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/76393\">#76393</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"slice_split_once\"><a class=\"header\" href=\"#slice_split_once\"><code>slice_split_once</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/112811\">#112811</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"slice_swap_unchecked\"><a class=\"header\" href=\"#slice_swap_unchecked\"><code>slice_swap_unchecked</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/88539\">#88539</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"slice_take\"><a class=\"header\" href=\"#slice_take\"><code>slice_take</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/62280\">#62280</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"solid_ext\"><a class=\"header\" href=\"#solid_ext\"><code>solid_ext</code></a></h1>\n<p>This feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"sort_floats\"><a class=\"header\" href=\"#sort_floats\"><code>sort_floats</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/93396\">#93396</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"sort_internals\"><a class=\"header\" href=\"#sort_internals\"><code>sort_internals</code></a></h1>\n<p>This feature is internal to the Rust compiler and is not intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"split_array\"><a class=\"header\" href=\"#split_array\"><code>split_array</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/90091\">#90091</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"split_as_slice\"><a class=\"header\" href=\"#split_as_slice\"><code>split_as_slice</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/96137\">#96137</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"std_internals\"><a class=\"header\" href=\"#std_internals\"><code>std_internals</code></a></h1>\n<p>This feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"stdarch_arm_feature_detection\"><a class=\"header\" href=\"#stdarch_arm_feature_detection\"><code>stdarch_arm_feature_detection</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/111190\">#111190</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"stdarch_mips_feature_detection\"><a class=\"header\" href=\"#stdarch_mips_feature_detection\"><code>stdarch_mips_feature_detection</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/111188\">#111188</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"stdarch_powerpc_feature_detection\"><a class=\"header\" href=\"#stdarch_powerpc_feature_detection\"><code>stdarch_powerpc_feature_detection</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/111191\">#111191</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"stdio_makes_pipe\"><a class=\"header\" href=\"#stdio_makes_pipe\"><code>stdio_makes_pipe</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/98288\">#98288</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"step_trait\"><a class=\"header\" href=\"#step_trait\"><code>step_trait</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"str_from_raw_parts\"><a class=\"header\" href=\"#str_from_raw_parts\"><code>str_from_raw_parts</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/119206\">#119206</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"str_from_utf16_endian\"><a class=\"header\" href=\"#str_from_utf16_endian\"><code>str_from_utf16_endian</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/116258\">#116258</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"str_internals\"><a class=\"header\" href=\"#str_internals\"><code>str_internals</code></a></h1>\n<p>This feature is internal to the Rust compiler and is not intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"str_lines_remainder\"><a class=\"header\" href=\"#str_lines_remainder\"><code>str_lines_remainder</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/77998\">#77998</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"str_split_inclusive_remainder\"><a class=\"header\" href=\"#str_split_inclusive_remainder\"><code>str_split_inclusive_remainder</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/77998\">#77998</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"str_split_remainder\"><a class=\"header\" href=\"#str_split_remainder\"><code>str_split_remainder</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/77998\">#77998</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"str_split_whitespace_remainder\"><a class=\"header\" href=\"#str_split_whitespace_remainder\"><code>str_split_whitespace_remainder</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/77998\">#77998</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"strict_overflow_ops\"><a class=\"header\" href=\"#strict_overflow_ops\"><code>strict_overflow_ops</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/118260\">#118260</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"strict_provenance_atomic_ptr\"><a class=\"header\" href=\"#strict_provenance_atomic_ptr\"><code>strict_provenance_atomic_ptr</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/99108\">#99108</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"string_extend_from_within\"><a class=\"header\" href=\"#string_extend_from_within\"><code>string_extend_from_within</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/103806\">#103806</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"string_remove_matches\"><a class=\"header\" href=\"#string_remove_matches\"><code>string_remove_matches</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/72826\">#72826</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"sync_unsafe_cell\"><a class=\"header\" href=\"#sync_unsafe_cell\"><code>sync_unsafe_cell</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/95439\">#95439</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"tcp_deferaccept\"><a class=\"header\" href=\"#tcp_deferaccept\"><code>tcp_deferaccept</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/119639\">#119639</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"tcp_linger\"><a class=\"header\" href=\"#tcp_linger\"><code>tcp_linger</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/88494\">#88494</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"tcp_quickack\"><a class=\"header\" href=\"#tcp_quickack\"><code>tcp_quickack</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/96256\">#96256</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"tcplistener_into_incoming\"><a class=\"header\" href=\"#tcplistener_into_incoming\"><code>tcplistener_into_incoming</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/88339\">#88339</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"test\"><a class=\"header\" href=\"#test\"><code>test</code></a></h1>\n<p>The tracking issue for this feature is: None.</p>\n<hr>\n<p>The internals of the <code class=\"hljs\">test</code> crate are unstable, behind the <code class=\"hljs\">test</code> flag.  The\nmost widely used part of the <code class=\"hljs\">test</code> crate are benchmark tests, which can test\nthe performance of your code.  Let's make our <code class=\"hljs\">src/lib.rs</code> look like this\n(comments elided):</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust no_run hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"hljs-meta\">#![feature(test)]</span>\n\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">extern</span> <span class=\"hljs-keyword\">crate</span> test;\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">add_two</span></span>(a: <span class=\"hljs-built_in\">i32</span>) -&gt; <span class=\"hljs-built_in\">i32</span> {\n    a + <span class=\"hljs-number\">2</span>\n}\n\n<span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> tests {\n    <span class=\"hljs-keyword\">use</span> super::*;\n    <span class=\"hljs-keyword\">use</span> test::Bencher;\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">it_works</span></span>() {\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">4</span>, add_two(<span class=\"hljs-number\">2</span>));\n    }\n\n    <span class=\"hljs-meta\">#[bench]</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">bench_add_two</span></span>(b: &amp;<span class=\"hljs-keyword\">mut</span> Bencher) {\n        b.iter(|| add_two(<span class=\"hljs-number\">2</span>));\n    }\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Note the <code class=\"hljs\">test</code> feature gate, which enables this unstable feature.</p>\n<p>We've imported the <code class=\"hljs\">test</code> crate, which contains our benchmarking support.\nWe have a new function as well, with the <code class=\"hljs\">bench</code> attribute. Unlike regular\ntests, which take no arguments, benchmark tests take a <code class=\"hljs\">&amp;mut Bencher</code>. This\n<code class=\"hljs\">Bencher</code> provides an <code class=\"hljs\">iter</code> method, which takes a closure. This closure\ncontains the code we'd like to benchmark.</p>\n<p>We can run benchmark tests with <code class=\"hljs\">cargo bench</code>:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-bash hljs\">$ cargo bench\n   Compiling adder v0.0.1 (file:///home/steve/tmp/adder)\n     Running target/release/adder-91b3e234d4ed382a\n\nrunning 2 tests\n<span class=\"hljs-built_in\">test</span> tests::it_works ... ignored\n<span class=\"hljs-built_in\">test</span> tests::bench_add_two ... bench:         1 ns/iter (+/- 0)\n\n<span class=\"hljs-built_in\">test</span> result: ok. 0 passed; 0 failed; 1 ignored; 1 measured\n</code></pre>\n<p>Our non-benchmark test was ignored. You may have noticed that <code class=\"hljs\">cargo bench</code>\ntakes a bit longer than <code class=\"hljs\">cargo test</code>. This is because Rust runs our benchmark\na number of times, and then takes the average. Because we're doing so little\nwork in this example, we have a <code class=\"hljs\">1 ns/iter (+/- 0)</code>, but this would show\nthe variance if there was one.</p>\n<p>Advice on writing benchmarks:</p>\n<ul>\n<li>Move setup code outside the <code class=\"hljs\">iter</code> loop; only put the part you want to measure inside</li>\n<li>Make the code do \"the same thing\" on each iteration; do not accumulate or change state</li>\n<li>Make the outer function idempotent too; the benchmark runner is likely to run\nit many times</li>\n<li>Make the inner <code class=\"hljs\">iter</code> loop short and fast so benchmark runs are fast and the\ncalibrator can adjust the run-length at fine resolution</li>\n<li>Make the code in the <code class=\"hljs\">iter</code> loop do something simple, to assist in pinpointing\nperformance improvements (or regressions)</li>\n</ul>\n<h2 id=\"gotcha-optimizations\"><a class=\"header\" href=\"#gotcha-optimizations\">Gotcha: optimizations</a></h2>\n<p>There's another tricky part to writing benchmarks: benchmarks compiled with\noptimizations activated can be dramatically changed by the optimizer so that\nthe benchmark is no longer benchmarking what one expects. For example, the\ncompiler might recognize that some calculation has no external effects and\nremove it entirely.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust no_run hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"hljs-meta\">#![feature(test)]</span>\n\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">extern</span> <span class=\"hljs-keyword\">crate</span> test;\n<span class=\"hljs-keyword\">use</span> test::Bencher;\n\n<span class=\"hljs-meta\">#[bench]</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">bench_xor_1000_ints</span></span>(b: &amp;<span class=\"hljs-keyword\">mut</span> Bencher) {\n    b.iter(|| {\n        (<span class=\"hljs-number\">0</span>..<span class=\"hljs-number\">1000</span>).fold(<span class=\"hljs-number\">0</span>, |old, new| old ^ new);\n    });\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>gives the following results</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">running 1 test\ntest bench_xor_1000_ints ... bench:         0 ns/iter (+/- 0)\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 1 measured\n</code></pre>\n<p>The benchmarking runner offers two ways to avoid this. Either, the closure that\nthe <code class=\"hljs\">iter</code> method receives can return an arbitrary value which forces the\noptimizer to consider the result used and ensures it cannot remove the\ncomputation entirely. This could be done for the example above by adjusting the\n<code class=\"hljs\">b.iter</code> call to</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">X</span></span>;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> X { <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">iter</span></span>&lt;T, F&gt;(&amp;<span class=\"hljs-keyword\">self</span>, _: F) <span class=\"hljs-keyword\">where</span> F: <span class=\"hljs-built_in\">FnMut</span>() -&gt; T {} } <span class=\"hljs-keyword\">let</span> b = X;\n</span>b.iter(|| {\n    <span class=\"hljs-comment\">// Note lack of `;` (could also use an explicit `return`).</span>\n    (<span class=\"hljs-number\">0</span>..<span class=\"hljs-number\">1000</span>).fold(<span class=\"hljs-number\">0</span>, |old, new| old ^ new)\n});\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Or, the other option is to call the generic <code class=\"hljs\">test::black_box</code> function, which\nis an opaque \"black box\" to the optimizer and so forces it to consider any\nargument as used.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"hljs-meta\">#![feature(test)]</span>\n\n<span class=\"hljs-keyword\">extern</span> <span class=\"hljs-keyword\">crate</span> test;\n\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">X</span></span>;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> X { <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">iter</span></span>&lt;T, F&gt;(&amp;<span class=\"hljs-keyword\">self</span>, _: F) <span class=\"hljs-keyword\">where</span> F: <span class=\"hljs-built_in\">FnMut</span>() -&gt; T {} } <span class=\"hljs-keyword\">let</span> b = X;\n</span>b.iter(|| {\n    <span class=\"hljs-keyword\">let</span> n = test::black_box(<span class=\"hljs-number\">1000</span>);\n\n    (<span class=\"hljs-number\">0</span>..n).fold(<span class=\"hljs-number\">0</span>, |a, b| a ^ b)\n})\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Neither of these read or modify the value, and are very cheap for small values.\nLarger values can be passed indirectly to reduce overhead (e.g.\n<code class=\"hljs\">black_box(&amp;huge_struct)</code>).</p>\n<p>Performing either of the above changes gives the following benchmarking results</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">running 1 test\ntest bench_xor_1000_ints ... bench:       131 ns/iter (+/- 3)\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 1 measured\n</code></pre>\n<p>However, the optimizer can still modify a testcase in an undesirable manner\neven when using either of the above.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"thin_box\"><a class=\"header\" href=\"#thin_box\"><code>thin_box</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/92791\">#92791</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"thread_id_value\"><a class=\"header\" href=\"#thread_id_value\"><code>thread_id_value</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/67939\">#67939</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"thread_local_internals\"><a class=\"header\" href=\"#thread_local_internals\"><code>thread_local_internals</code></a></h1>\n<p>This feature is internal to the Rust compiler and is not intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"thread_sleep_until\"><a class=\"header\" href=\"#thread_sleep_until\"><code>thread_sleep_until</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/113752\">#113752</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"thread_spawn_unchecked\"><a class=\"header\" href=\"#thread_spawn_unchecked\"><code>thread_spawn_unchecked</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/55132\">#55132</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"trace_macros\"><a class=\"header\" href=\"#trace_macros\"><code>trace_macros</code></a></h1>\n<p>The tracking issue for this feature is <a href=\"https://github.com/rust-lang/rust/issues/29598\">#29598</a>.</p>\n<hr>\n<p>With <code class=\"hljs\">trace_macros</code> you can trace the expansion of macros in your code.</p>\n<h2 id=\"examples-11\"><a class=\"header\" href=\"#examples-11\">Examples</a></h2>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-meta\">#![feature(trace_macros)]</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    trace_macros!(<span class=\"hljs-literal\">true</span>);\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Hello, Rust!\"</span>);\n    trace_macros!(<span class=\"hljs-literal\">false</span>);\n}</code></pre></pre>\n<p>The <code class=\"hljs\">cargo build</code> output:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-txt hljs plaintext\">note: trace_macro\n --&gt; src/main.rs:5:5\n  |\n5 |     println!(\"Hello, Rust!\");\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n  |\n  = note: expanding `println! { \"Hello, Rust!\" }`\n  = note: to `print ! ( concat ! ( \"Hello, Rust!\" , \"\\n\" ) )`\n  = note: expanding `print! { concat ! ( \"Hello, Rust!\" , \"\\n\" ) }`\n  = note: to `$crate :: io :: _print ( format_args ! ( concat ! ( \"Hello, Rust!\" , \"\\n\" ) )\n          )`\n\n    Finished dev [unoptimized + debuginfo] target(s) in 0.60 secs\n</code></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"track_path\"><a class=\"header\" href=\"#track_path\"><code>track_path</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/99515\">#99515</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"transmutability\"><a class=\"header\" href=\"#transmutability\"><code>transmutability</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/99571\">#99571</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"trusted_fused\"><a class=\"header\" href=\"#trusted_fused\"><code>trusted_fused</code></a></h1>\n<p>This feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"trusted_len\"><a class=\"header\" href=\"#trusted_len\"><code>trusted_len</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/37572\">#37572</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"trusted_len_next_unchecked\"><a class=\"header\" href=\"#trusted_len_next_unchecked\"><code>trusted_len_next_unchecked</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/37572\">#37572</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"trusted_random_access\"><a class=\"header\" href=\"#trusted_random_access\"><code>trusted_random_access</code></a></h1>\n<p>This feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"trusted_step\"><a class=\"header\" href=\"#trusted_step\"><code>trusted_step</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/85731\">#85731</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"try_find\"><a class=\"header\" href=\"#try_find\"><code>try_find</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/63178\">#63178</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"try_reserve_kind\"><a class=\"header\" href=\"#try_reserve_kind\"><code>try_reserve_kind</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/48043\">#48043</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"try_trait_v2\"><a class=\"header\" href=\"#try_trait_v2\"><code>try_trait_v2</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/84277\">#84277</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"try_trait_v2_residual\"><a class=\"header\" href=\"#try_trait_v2_residual\"><code>try_trait_v2_residual</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/91285\">#91285</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"try_trait_v2_yeet\"><a class=\"header\" href=\"#try_trait_v2_yeet\"><code>try_trait_v2_yeet</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/96374\">#96374</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"try_with_capacity\"><a class=\"header\" href=\"#try_with_capacity\"><code>try_with_capacity</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/91913\">#91913</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"tuple_trait\"><a class=\"header\" href=\"#tuple_trait\"><code>tuple_trait</code></a></h1>\n<p>This feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"ub_checks\"><a class=\"header\" href=\"#ub_checks\"><code>ub_checks</code></a></h1>\n<p>This feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"uefi_std\"><a class=\"header\" href=\"#uefi_std\"><code>uefi_std</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/100499\">#100499</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"unchecked_neg\"><a class=\"header\" href=\"#unchecked_neg\"><code>unchecked_neg</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/85122\">#85122</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"unchecked_shifts\"><a class=\"header\" href=\"#unchecked_shifts\"><code>unchecked_shifts</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/85122\">#85122</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"unicode_internals\"><a class=\"header\" href=\"#unicode_internals\"><code>unicode_internals</code></a></h1>\n<p>This feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"unique_rc_arc\"><a class=\"header\" href=\"#unique_rc_arc\"><code>unique_rc_arc</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/112566\">#112566</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"unix_file_vectored_at\"><a class=\"header\" href=\"#unix_file_vectored_at\"><code>unix_file_vectored_at</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/89517\">#89517</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"unix_set_mark\"><a class=\"header\" href=\"#unix_set_mark\"><code>unix_set_mark</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/96467\">#96467</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"unix_socket_ancillary_data\"><a class=\"header\" href=\"#unix_socket_ancillary_data\"><code>unix_socket_ancillary_data</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/76915\">#76915</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"unix_socket_peek\"><a class=\"header\" href=\"#unix_socket_peek\"><code>unix_socket_peek</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/76923\">#76923</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"unsafe_cell_from_mut\"><a class=\"header\" href=\"#unsafe_cell_from_mut\"><code>unsafe_cell_from_mut</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/111645\">#111645</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"unsafe_pin_internals\"><a class=\"header\" href=\"#unsafe_pin_internals\"><code>unsafe_pin_internals</code></a></h1>\n<p>This feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"unsize\"><a class=\"header\" href=\"#unsize\"><code>unsize</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/18598\">#18598</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"unwrap_infallible\"><a class=\"header\" href=\"#unwrap_infallible\"><code>unwrap_infallible</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/61695\">#61695</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"update_panic_count\"><a class=\"header\" href=\"#update_panic_count\"><code>update_panic_count</code></a></h1>\n<p>This feature is internal to the Rust compiler and is not intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"utf16_extra\"><a class=\"header\" href=\"#utf16_extra\"><code>utf16_extra</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/94919\">#94919</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"utf16_extra_const\"><a class=\"header\" href=\"#utf16_extra_const\"><code>utf16_extra_const</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/94919\">#94919</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"variant_count\"><a class=\"header\" href=\"#variant_count\"><code>variant_count</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/73662\">#73662</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"vec_into_raw_parts\"><a class=\"header\" href=\"#vec_into_raw_parts\"><code>vec_into_raw_parts</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/65816\">#65816</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"vec_pop_if\"><a class=\"header\" href=\"#vec_pop_if\"><code>vec_pop_if</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/122741\">#122741</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"vec_push_within_capacity\"><a class=\"header\" href=\"#vec_push_within_capacity\"><code>vec_push_within_capacity</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/100486\">#100486</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"vec_split_at_spare\"><a class=\"header\" href=\"#vec_split_at_spare\"><code>vec_split_at_spare</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/81944\">#81944</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"waker_getters\"><a class=\"header\" href=\"#waker_getters\"><code>waker_getters</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/96992\">#96992</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"wasi_ext\"><a class=\"header\" href=\"#wasi_ext\"><code>wasi_ext</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/71213\">#71213</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"windows_by_handle\"><a class=\"header\" href=\"#windows_by_handle\"><code>windows_by_handle</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/63010\">#63010</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"windows_c\"><a class=\"header\" href=\"#windows_c\"><code>windows_c</code></a></h1>\n<p>This feature is internal to the Rust compiler and is not intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"windows_handle\"><a class=\"header\" href=\"#windows_handle\"><code>windows_handle</code></a></h1>\n<p>This feature is internal to the Rust compiler and is not intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"windows_net\"><a class=\"header\" href=\"#windows_net\"><code>windows_net</code></a></h1>\n<p>This feature is internal to the Rust compiler and is not intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"windows_process_exit_code_from\"><a class=\"header\" href=\"#windows_process_exit_code_from\"><code>windows_process_exit_code_from</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/111688\">#111688</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"windows_process_extensions_async_pipes\"><a class=\"header\" href=\"#windows_process_extensions_async_pipes\"><code>windows_process_extensions_async_pipes</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/98289\">#98289</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"windows_process_extensions_force_quotes\"><a class=\"header\" href=\"#windows_process_extensions_force_quotes\"><code>windows_process_extensions_force_quotes</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/82227\">#82227</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"windows_process_extensions_main_thread_handle\"><a class=\"header\" href=\"#windows_process_extensions_main_thread_handle\"><code>windows_process_extensions_main_thread_handle</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/96723\">#96723</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"windows_process_extensions_raw_attribute\"><a class=\"header\" href=\"#windows_process_extensions_raw_attribute\"><code>windows_process_extensions_raw_attribute</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/114854\">#114854</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"windows_stdio\"><a class=\"header\" href=\"#windows_stdio\"><code>windows_stdio</code></a></h1>\n<p>This feature is internal to the Rust compiler and is not intended for general use.</p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"wrapping_int_impl\"><a class=\"header\" href=\"#wrapping_int_impl\"><code>wrapping_int_impl</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/32463\">#32463</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"wrapping_next_power_of_two\"><a class=\"header\" href=\"#wrapping_next_power_of_two\"><code>wrapping_next_power_of_two</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/32463\">#32463</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"write_all_vectored\"><a class=\"header\" href=\"#write_all_vectored\"><code>write_all_vectored</code></a></h1>\n<p>The tracking issue for this feature is: <a href=\"https://github.com/rust-lang/rust/issues/70436\">#70436</a></p>\n<hr>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"yeet_desugar_details\"><a class=\"header\" href=\"#yeet_desugar_details\"><code>yeet_desugar_details</code></a></h1>\n<p>This feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.</p>\n<hr>\n\n                    </main>\n\n                    <nav class=\"nav-wrapper\" aria-label=\"Page navigation\">\n                        <!-- Mobile navigation buttons -->\n\n\n                        <div style=\"clear: both\"></div>\n                    </nav>\n                </div>\n            </div>\n\n            <nav class=\"nav-wide-wrapper\" aria-label=\"Page navigation\">\n\n            </nav>\n\n        </div>\n\n\n\n\n        <script>\n            window.playground_copyable = true;\n        </script>\n\n\n        <script src=\"elasticlunr.min.js\"></script>\n        <script src=\"mark.min.js\"></script>\n        <script src=\"searcher.js\"></script>\n\n        <script src=\"clipboard.min.js\"></script>\n        <script src=\"highlight.js\"></script>\n        <script src=\"book.js\"></script>\n\n        <!-- Custom JS scripts -->\n\n        <script>\n        window.addEventListener('load', function() {\n            window.setTimeout(window.print, 100);\n        });\n        </script>\n\n    </div>\n    \n\n</body></html>",
	"crawlDate": "2024-07-28T05:20:22.993Z"
}