{
	"title": "BuildHasher in std::hash - Rust",
	"url": "https://doc.rust-lang.org/stable/std/hash/trait.BuildHasher.html",
	"markdown": "# BuildHasher in std::hash - Rust\n\n```\npub trait BuildHasher {\n    type Hasher: Hasher;\n\n    // Required method\n    fn build_hasher(&self) -> Self::Hasher;\n\n    // Provided method\n    fn hash_one<T>(&self, x: T) -> u64\n       where T: Hash,\n             Self: Sized,\n             Self::Hasher: Hasher { ... }\n}\n```\n\nExpand description\n\nA trait for creating instances of [`Hasher`](trait.Hasher.html \"trait std::hash::Hasher\").\n\nA `BuildHasher` is typically used (e.g., by [`HashMap`](../../std/collections/struct.HashMap.html)) to create [`Hasher`](trait.Hasher.html \"trait std::hash::Hasher\")s for each key such that they are hashed independently of one another, since [`Hasher`](trait.Hasher.html \"trait std::hash::Hasher\")s contain state.\n\nFor each instance of `BuildHasher`, the [`Hasher`](trait.Hasher.html \"trait std::hash::Hasher\")s created by [`build_hasher`](about:blank/trait.BuildHasher.html#tymethod.build_hasher \"method std::hash::BuildHasher::build_hasher\") should be identical. That is, if the same stream of bytes is fed into each hasher, the same output will also be generated.\n\n## [§](#examples)Examples\n\n```\nuse std::hash::{BuildHasher, Hasher, RandomState};\n\nlet s = RandomState::new();\nlet mut hasher_1 = s.build_hasher();\nlet mut hasher_2 = s.build_hasher();\n\nhasher_1.write_u32(8128);\nhasher_2.write_u32(8128);\n\nassert_eq!(hasher_1.finish(), hasher_2.finish());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::hash::%7BBuildHasher,+Hasher,+RandomState%7D;%0A++++%0A++++let+s+=+RandomState::new();%0A++++let+mut+hasher_1+=+s.build_hasher();%0A++++let+mut+hasher_2+=+s.build_hasher();%0A++++%0A++++hasher_1.write_u32(8128);%0A++++hasher_2.write_u32(8128);%0A++++%0A++++assert_eq!(hasher_1.finish(),+hasher_2.finish());%0A%7D&edition=2021)\n\n1.7.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#642)\n\nType of the hasher that will be created.\n\n1.7.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#658)\n\nCreates a new hasher.\n\nEach call to `build_hasher` on the same instance should produce identical [`Hasher`](trait.Hasher.html \"trait std::hash::Hasher\")s.\n\n##### [§](#examples-1)Examples\n\n```\nuse std::hash::{BuildHasher, RandomState};\n\nlet s = RandomState::new();\nlet new_s = s.build_hasher();\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::hash::%7BBuildHasher,+RandomState%7D;%0A++++%0A++++let+s+=+RandomState::new();%0A++++let+new_s+=+s.build_hasher();%0A%7D&edition=2021)\n\n1.71.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#696-699)\n\nCalculates the hash of a single value.\n\nThis is intended as a convenience for code which _consumes_ hashes, such as the implementation of a hash table or in unit tests that check whether a custom [`Hash`](trait.Hash.html \"trait std::hash::Hash\") implementation behaves as expected.\n\nThis must not be used in any code which _creates_ hashes, such as in an implementation of [`Hash`](trait.Hash.html \"trait std::hash::Hash\"). The way to create a combined hash of multiple values is to call [`Hash::hash`](about:blank/trait.Hash.html#tymethod.hash \"method std::hash::Hash::hash\") multiple times using the same [`Hasher`](trait.Hasher.html \"trait std::hash::Hasher\"), not to call this method repeatedly and combine the results.\n\n##### [§](#example)Example\n\n```\nuse std::cmp::{max, min};\nuse std::hash::{BuildHasher, Hash, Hasher};\nstruct OrderAmbivalentPair<T: Ord>(T, T);\nimpl<T: Ord + Hash> Hash for OrderAmbivalentPair<T> {\n    fn hash<H: Hasher>(&self, hasher: &mut H) {\n        min(&self.0, &self.1).hash(hasher);\n        max(&self.0, &self.1).hash(hasher);\n    }\n}\n\n// Then later, in a `#[test]` for the type...\nlet bh = std::hash::RandomState::new();\nassert_eq!(\n    bh.hash_one(OrderAmbivalentPair(1, 2)),\n    bh.hash_one(OrderAmbivalentPair(2, 1))\n);\nassert_eq!(\n    bh.hash_one(OrderAmbivalentPair(10, 2)),\n    bh.hash_one(&OrderAmbivalentPair(2, 10))\n);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cmp::%7Bmax,+min%7D;%0A++++use+std::hash::%7BBuildHasher,+Hash,+Hasher%7D;%0A++++struct+OrderAmbivalentPair%3CT:+Ord%3E(T,+T);%0A++++impl%3CT:+Ord+%2B+Hash%3E+Hash+for+OrderAmbivalentPair%3CT%3E+%7B%0A++++++++fn+hash%3CH:+Hasher%3E(%26self,+hasher:+%26mut+H)+%7B%0A++++++++++++min(%26self.0,+%26self.1).hash(hasher);%0A++++++++++++max(%26self.0,+%26self.1).hash(hasher);%0A++++++++%7D%0A++++%7D%0A++++%0A++++//+Then+later,+in+a+%60%23%5Btest%5D%60+for+the+type...%0A++++let+bh+=+std::hash::RandomState::new();%0A++++assert_eq!(%0A++++++++bh.hash_one(OrderAmbivalentPair(1,+2)),%0A++++++++bh.hash_one(OrderAmbivalentPair(2,+1))%0A++++);%0A++++assert_eq!(%0A++++++++bh.hash_one(OrderAmbivalentPair(10,+2)),%0A++++++++bh.hash_one(%26OrderAmbivalentPair(2,+10))%0A++++);%0A%7D&edition=2021)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"A trait for creating instances of `Hasher`.\"><title>BuildHasher in std::hash - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc trait\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">BuildHasher</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">BuildHasher</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#required-associated-types\">Required Associated Types</a></h3><ul class=\"block\"><li><a href=\"#associatedtype.Hasher\">Hasher</a></li></ul><h3><a href=\"#required-methods\">Required Methods</a></h3><ul class=\"block\"><li><a href=\"#tymethod.build_hasher\">build_hasher</a></li></ul><h3><a href=\"#provided-methods\">Provided Methods</a></h3><ul class=\"block\"><li><a href=\"#method.hash_one\">hash_one</a></li></ul><h3><a href=\"#implementors\">Implementors</a></h3></section><h2><a href=\"index.html\">In std::hash</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.BuildHasherDefault.html\">BuildHasherDefault</a></li><li><a href=\"struct.DefaultHasher.html\">DefaultHasher</a></li><li><a href=\"struct.RandomState.html\">RandomState</a></li><li><a href=\"struct.SipHasher.html\">SipHasher</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.BuildHasher.html\">BuildHasher</a></li><li><a href=\"trait.Hash.html\">Hash</a></li><li><a href=\"trait.Hasher.html\">Hasher</a></li></ul><h3><a href=\"index.html#derives\">Derive Macros</a></h3><ul class=\"block derive\"><li><a href=\"derive.Hash.html\">Hash</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Trait <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">hash</a>::<wbr><a class=\"trait\" href=\"#\">BuildHasher</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.7.0\">1.7.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#639\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub trait BuildHasher {\n    type <a href=\"#associatedtype.Hasher\" class=\"associatedtype\">Hasher</a>: <a class=\"trait\" href=\"trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>;\n\n    // Required method\n    fn <a href=\"#tymethod.build_hasher\" class=\"fn\">build_hasher</a>(&amp;self) -&gt; Self::<a class=\"associatedtype\" href=\"trait.BuildHasher.html#associatedtype.Hasher\" title=\"type std::hash::BuildHasher::Hasher\">Hasher</a>;\n\n    // Provided method\n    fn <a href=\"#method.hash_one\" class=\"fn\">hash_one</a>&lt;T&gt;(&amp;self, x: T) -&gt; <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>\n       <span class=\"where\">where T: <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a>,\n             Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n             Self::<a class=\"associatedtype\" href=\"trait.BuildHasher.html#associatedtype.Hasher\" title=\"type std::hash::BuildHasher::Hasher\">Hasher</a>: <a class=\"trait\" href=\"trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a></span> { ... }\n}</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>A trait for creating instances of <a href=\"trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>.</p>\n<p>A <code>BuildHasher</code> is typically used (e.g., by <a href=\"../../std/collections/struct.HashMap.html\"><code>HashMap</code></a>) to create\n<a href=\"trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>s for each key such that they are hashed independently of one\nanother, since <a href=\"trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>s contain state.</p>\n<p>For each instance of <code>BuildHasher</code>, the <a href=\"trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>s created by\n<a href=\"trait.BuildHasher.html#tymethod.build_hasher\" title=\"method std::hash::BuildHasher::build_hasher\"><code>build_hasher</code></a> should be identical. That is, if the same stream of bytes\nis fed into each hasher, the same output will also be generated.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::hash::{BuildHasher, Hasher, RandomState};\n\n<span class=\"kw\">let </span>s = RandomState::new();\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>hasher_1 = s.build_hasher();\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>hasher_2 = s.build_hasher();\n\nhasher_1.write_u32(<span class=\"number\">8128</span>);\nhasher_2.write_u32(<span class=\"number\">8128</span>);\n\n<span class=\"macro\">assert_eq!</span>(hasher_1.finish(), hasher_2.finish());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::hash::%7BBuildHasher,+Hasher,+RandomState%7D;%0A++++%0A++++let+s+=+RandomState::new();%0A++++let+mut+hasher_1+=+s.build_hasher();%0A++++let+mut+hasher_2+=+s.build_hasher();%0A++++%0A++++hasher_1.write_u32(8128);%0A++++hasher_2.write_u32(8128);%0A++++%0A++++assert_eq!(hasher_1.finish(),+hasher_2.finish());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><h2 id=\"required-associated-types\" class=\"section-header\">Required Associated Types<a href=\"#required-associated-types\" class=\"anchor\">§</a></h2><div class=\"methods\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Hasher\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0\">1.7.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#642\">source</a></span><h4 class=\"code-header\">type <a href=\"#associatedtype.Hasher\" class=\"associatedtype\">Hasher</a>: <a class=\"trait\" href=\"trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a></h4></section></summary><div class=\"docblock\"><p>Type of the hasher that will be created.</p>\n</div></details></div><h2 id=\"required-methods\" class=\"section-header\">Required Methods<a href=\"#required-methods\" class=\"anchor\">§</a></h2><div class=\"methods\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.build_hasher\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0\">1.7.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#658\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.build_hasher\" class=\"fn\">build_hasher</a>(&amp;self) -&gt; Self::<a class=\"associatedtype\" href=\"trait.BuildHasher.html#associatedtype.Hasher\" title=\"type std::hash::BuildHasher::Hasher\">Hasher</a></h4></section></summary><div class=\"docblock\"><p>Creates a new hasher.</p>\n<p>Each call to <code>build_hasher</code> on the same instance should produce identical\n<a href=\"trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>s.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::hash::{BuildHasher, RandomState};\n\n<span class=\"kw\">let </span>s = RandomState::new();\n<span class=\"kw\">let </span>new_s = s.build_hasher();</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::hash::%7BBuildHasher,+RandomState%7D;%0A++++%0A++++let+s+=+RandomState::new();%0A++++let+new_s+=+s.build_hasher();%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div><h2 id=\"provided-methods\" class=\"section-header\">Provided Methods<a href=\"#provided-methods\" class=\"anchor\">§</a></h2><div class=\"methods\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.hash_one\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0\">1.71.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#696-699\">source</a></span><h4 class=\"code-header\">fn <a href=\"#method.hash_one\" class=\"fn\">hash_one</a>&lt;T&gt;(&amp;self, x: T) -&gt; <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a>,\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    Self::<a class=\"associatedtype\" href=\"trait.BuildHasher.html#associatedtype.Hasher\" title=\"type std::hash::BuildHasher::Hasher\">Hasher</a>: <a class=\"trait\" href=\"trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class=\"docblock\"><p>Calculates the hash of a single value.</p>\n<p>This is intended as a convenience for code which <em>consumes</em> hashes, such\nas the implementation of a hash table or in unit tests that check\nwhether a custom <a href=\"trait.Hash.html\" title=\"trait std::hash::Hash\"><code>Hash</code></a> implementation behaves as expected.</p>\n<p>This must not be used in any code which <em>creates</em> hashes, such as in an\nimplementation of <a href=\"trait.Hash.html\" title=\"trait std::hash::Hash\"><code>Hash</code></a>.  The way to create a combined hash of\nmultiple values is to call <a href=\"trait.Hash.html#tymethod.hash\" title=\"method std::hash::Hash::hash\"><code>Hash::hash</code></a> multiple times using the same\n<a href=\"trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>, not to call this method repeatedly and combine the results.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cmp::{max, min};\n<span class=\"kw\">use </span>std::hash::{BuildHasher, Hash, Hasher};\n<span class=\"kw\">struct </span>OrderAmbivalentPair&lt;T: Ord&gt;(T, T);\n<span class=\"kw\">impl</span>&lt;T: Ord + Hash&gt; Hash <span class=\"kw\">for </span>OrderAmbivalentPair&lt;T&gt; {\n    <span class=\"kw\">fn </span>hash&lt;H: Hasher&gt;(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, hasher: <span class=\"kw-2\">&amp;mut </span>H) {\n        min(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.<span class=\"number\">0</span>, <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.<span class=\"number\">1</span>).hash(hasher);\n        max(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.<span class=\"number\">0</span>, <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.<span class=\"number\">1</span>).hash(hasher);\n    }\n}\n\n<span class=\"comment\">// Then later, in a `#[test]` for the type...\n</span><span class=\"kw\">let </span>bh = std::hash::RandomState::new();\n<span class=\"macro\">assert_eq!</span>(\n    bh.hash_one(OrderAmbivalentPair(<span class=\"number\">1</span>, <span class=\"number\">2</span>)),\n    bh.hash_one(OrderAmbivalentPair(<span class=\"number\">2</span>, <span class=\"number\">1</span>))\n);\n<span class=\"macro\">assert_eq!</span>(\n    bh.hash_one(OrderAmbivalentPair(<span class=\"number\">10</span>, <span class=\"number\">2</span>)),\n    bh.hash_one(<span class=\"kw-2\">&amp;</span>OrderAmbivalentPair(<span class=\"number\">2</span>, <span class=\"number\">10</span>))\n);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cmp::%7Bmax,+min%7D;%0A++++use+std::hash::%7BBuildHasher,+Hash,+Hasher%7D;%0A++++struct+OrderAmbivalentPair%3CT:+Ord%3E(T,+T);%0A++++impl%3CT:+Ord+%2B+Hash%3E+Hash+for+OrderAmbivalentPair%3CT%3E+%7B%0A++++++++fn+hash%3CH:+Hasher%3E(%26self,+hasher:+%26mut+H)+%7B%0A++++++++++++min(%26self.0,+%26self.1).hash(hasher);%0A++++++++++++max(%26self.0,+%26self.1).hash(hasher);%0A++++++++%7D%0A++++%7D%0A++++%0A++++//+Then+later,+in+a+%60%23%5Btest%5D%60+for+the+type...%0A++++let+bh+=+std::hash::RandomState::new();%0A++++assert_eq!(%0A++++++++bh.hash_one(OrderAmbivalentPair(1,+2)),%0A++++++++bh.hash_one(OrderAmbivalentPair(2,+1))%0A++++);%0A++++assert_eq!(%0A++++++++bh.hash_one(OrderAmbivalentPair(10,+2)),%0A++++++++bh.hash_one(%26OrderAmbivalentPair(2,+10))%0A++++);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div><h2 id=\"implementors\" class=\"section-header\">Implementors<a href=\"#implementors\" class=\"anchor\">§</a></h2><div id=\"implementors-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BuildHasher-for-RandomState\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0\">1.7.0</span> · <a class=\"src\" href=\"../../src/std/hash/random.rs.html#80-87\">source</a></span><a href=\"#impl-BuildHasher-for-RandomState\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.BuildHasher.html\" title=\"trait std::hash::BuildHasher\">BuildHasher</a> for <a class=\"struct\" href=\"../collections/hash_map/struct.RandomState.html\" title=\"struct std::collections::hash_map::RandomState\">RandomState</a></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Hasher-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Hasher-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Hasher\" class=\"associatedtype\">Hasher</a> = <a class=\"struct\" href=\"../collections/hash_map/struct.DefaultHasher.html\" title=\"struct std::collections::hash_map::DefaultHasher\">DefaultHasher</a></h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BuildHasher-for-BuildHasherDefault%3CH%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0\">1.7.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#775\">source</a></span><a href=\"#impl-BuildHasher-for-BuildHasherDefault%3CH%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;H&gt; <a class=\"trait\" href=\"trait.BuildHasher.html\" title=\"trait std::hash::BuildHasher\">BuildHasher</a> for <a class=\"struct\" href=\"struct.BuildHasherDefault.html\" title=\"struct std::hash::BuildHasherDefault\">BuildHasherDefault</a>&lt;H&gt;<div class=\"where\">where\n    H: <a class=\"trait\" href=\"../default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> + <a class=\"trait\" href=\"trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Hasher-2\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Hasher-2\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Hasher\" class=\"associatedtype\">Hasher</a> = H</h4></section></div></details></div><script src=\"../../trait.impl/core/hash/trait.BuildHasher.js\" data-ignore-extern-crates=\"core\" async=\"\"></script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:21:42.086Z"
}