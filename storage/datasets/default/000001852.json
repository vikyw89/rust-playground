{
	"title": "Code generation - The Rust Reference",
	"url": "https://doc.rust-lang.org/reference/attributes/codegen.html#the-target_feature-attribute",
	"markdown": "# Code generation - The Rust Reference\n\n## [Code generation attributes](#code-generation-attributes)\n\nThe following [attributes](../attributes.html) are used for controlling code generation.\n\n## [Optimization hints](#optimization-hints)\n\nThe `cold` and `inline` [attributes](../attributes.html) give suggestions to generate code in a way that may be faster than what it would do without the hint. The attributes are only hints, and may be ignored.\n\nBoth attributes can be used on [functions](../items/functions.html). When applied to a function in a [trait](../items/traits.html), they apply only to that function when used as a default function for a trait implementation and not to all trait implementations. The attributes have no effect on a trait function without a body.\n\n### [The `inline` attribute](#the-inline-attribute)\n\nThe _`inline` [attribute](../attributes.html)_ suggests that a copy of the attributed function should be placed in the caller, rather than generating code to call the function where it is defined.\n\n> _**Note**_: The `rustc` compiler automatically inlines functions based on internal heuristics. Incorrectly inlining functions can make the program slower, so this attribute should be used with care.\n\nThere are three ways to use the inline attribute:\n\n-   `#[inline]` _suggests_ performing an inline expansion.\n-   `#[inline(always)]` _suggests_ that an inline expansion should always be performed.\n-   `#[inline(never)]` _suggests_ that an inline expansion should never be performed.\n\n> _**Note**_: `#[inline]` in every form is a hint, with no _requirements_ on the language to place a copy of the attributed function in the caller.\n\n### [The `cold` attribute](#the-cold-attribute)\n\nThe _`cold` [attribute](../attributes.html)_ suggests that the attributed function is unlikely to be called.\n\n## [The `no_builtins` attribute](#the-no_builtins-attribute)\n\nThe _`no_builtins` [attribute](../attributes.html)_ may be applied at the crate level to disable optimizing certain code patterns to invocations of library functions that are assumed to exist.\n\n## [The `target_feature` attribute](#the-target_feature-attribute)\n\nThe _`target_feature` [attribute](../attributes.html)_ may be applied to a function to enable code generation of that function for specific platform architecture features. It uses the [_MetaListNameValueStr_](about:blank/attributes.html#meta-item-attribute-syntax) syntax with a single key of `enable` whose value is a string of comma-separated feature names to enable.\n\n```rust\n#![allow(unused)]\nfn main() {\n#[cfg(target_feature = \"avx2\")]\n#[target_feature(enable = \"avx2\")]\nunsafe fn foo_avx2() {}\n}\n```\n\nEach [target architecture](about:blank/conditional-compilation.html#target_arch) has a set of features that may be enabled. It is an error to specify a feature for a target architecture that the crate is not being compiled for.\n\nIt is [undefined behavior](../behavior-considered-undefined.html) to call a function that is compiled with a feature that is not supported on the current platform the code is running on, _except_ if the platform explicitly documents this to be safe.\n\nFunctions marked with `target_feature` are not inlined into a context that does not support the given features. The `#[inline(always)]` attribute may not be used with a `target_feature` attribute.\n\n### [Available features](#available-features)\n\nThe following is a list of the available feature names.\n\n#### [`x86` or `x86_64`](#x86-or-x86_64)\n\nExecuting code with unsupported features is undefined behavior on this platform. Hence this platform requires that `#[target_feature]` is only applied to [`unsafe` functions](../unsafe-keyword.html).\n\n| Feature | Implicitly Enables | Description |\n| --- | --- | --- |\n| `adx` |  | [ADX](https://en.wikipedia.org/wiki/Intel_ADX) — Multi-Precision Add-Carry Instruction Extensions |\n| `aes` | `sse2` | [AES](https://en.wikipedia.org/wiki/AES_instruction_set) — Advanced Encryption Standard |\n| `avx` | `sse4.2` | [AVX](https://en.wikipedia.org/wiki/Advanced_Vector_Extensions) — Advanced Vector Extensions |\n| `avx2` | `avx` | [AVX2](https://en.wikipedia.org/wiki/Advanced_Vector_Extensions#AVX2) — Advanced Vector Extensions 2 |\n| `bmi1` |  | [BMI1](https://en.wikipedia.org/wiki/Bit_Manipulation_Instruction_Sets) — Bit Manipulation Instruction Sets |\n| `bmi2` |  | [BMI2](https://en.wikipedia.org/wiki/Bit_Manipulation_Instruction_Sets#BMI2) — Bit Manipulation Instruction Sets 2 |\n| `cmpxchg16b` |  | [`cmpxchg16b`](https://www.felixcloutier.com/x86/cmpxchg8b:cmpxchg16b) - Compares and exchange 16 bytes (128 bits) of data atomically |\n| `f16c` | `avx` | [F16C](https://en.wikipedia.org/wiki/F16C) — 16-bit floating point conversion instructions |\n| `fma` | `avx` | [FMA3](https://en.wikipedia.org/wiki/FMA_instruction_set) — Three-operand fused multiply-add |\n| `fxsr` |  | [`fxsave`](https://www.felixcloutier.com/x86/fxsave) and [`fxrstor`](https://www.felixcloutier.com/x86/fxrstor) — Save and restore x87 FPU, MMX Technology, and SSE State |\n| `lzcnt` |  | [`lzcnt`](https://www.felixcloutier.com/x86/lzcnt) — Leading zeros count |\n| `movbe` |  | [`movbe`](https://www.felixcloutier.com/x86/movbe) - Move data after swapping bytes |\n| `pclmulqdq` | `sse2` | [`pclmulqdq`](https://www.felixcloutier.com/x86/pclmulqdq) — Packed carry-less multiplication quadword |\n| `popcnt` |  | [`popcnt`](https://www.felixcloutier.com/x86/popcnt) — Count of bits set to 1 |\n| `rdrand` |  | [`rdrand`](https://en.wikipedia.org/wiki/RdRand) — Read random number |\n| `rdseed` |  | [`rdseed`](https://en.wikipedia.org/wiki/RdRand) — Read random seed |\n| `sha` | `sse2` | [SHA](https://en.wikipedia.org/wiki/Intel_SHA_extensions) — Secure Hash Algorithm |\n| `sse` |  | [SSE](https://en.wikipedia.org/wiki/Streaming_SIMD_Extensions) — Streaming SIMD Extensions |\n| `sse2` | `sse` | [SSE2](https://en.wikipedia.org/wiki/SSE2) — Streaming SIMD Extensions 2 |\n| `sse3` | `sse2` | [SSE3](https://en.wikipedia.org/wiki/SSE3) — Streaming SIMD Extensions 3 |\n| `sse4.1` | `ssse3` | [SSE4.1](https://en.wikipedia.org/wiki/SSE4#SSE4.1) — Streaming SIMD Extensions 4.1 |\n| `sse4.2` | `sse4.1` | [SSE4.2](https://en.wikipedia.org/wiki/SSE4#SSE4.2) — Streaming SIMD Extensions 4.2 |\n| `ssse3` | `sse3` | [SSSE3](https://en.wikipedia.org/wiki/SSSE3) — Supplemental Streaming SIMD Extensions 3 |\n| `xsave` |  | [`xsave`](https://www.felixcloutier.com/x86/xsave) — Save processor extended states |\n| `xsavec` |  | [`xsavec`](https://www.felixcloutier.com/x86/xsavec) — Save processor extended states with compaction |\n| `xsaveopt` |  | [`xsaveopt`](https://www.felixcloutier.com/x86/xsaveopt) — Save processor extended states optimized |\n| `xsaves` |  | [`xsaves`](https://www.felixcloutier.com/x86/xsaves) — Save processor extended states supervisor |\n\n#### [`aarch64`](#aarch64)\n\nThis platform requires that `#[target_feature]` is only applied to [`unsafe` functions](../unsafe-keyword.html).\n\nFurther documentation on these features can be found in the [ARM Architecture Reference Manual](https://developer.arm.com/documentation/ddi0487/latest), or elsewhere on [developer.arm.com](https://developer.arm.com/).\n\n> _**Note**_: The following pairs of features should both be marked as enabled or disabled together if used:\n> \n> -   `paca` and `pacg`, which LLVM currently implements as one feature.\n\n| Feature | Implicitly Enables | Feature Name |\n| --- | --- | --- |\n| `aes` | `neon` | FEAT\\_AES & FEAT\\_PMULL - Advanced SIMD AES & PMULL instructions |\n| `bf16` |  | FEAT\\_BF16 - BFloat16 instructions |\n| `bti` |  | FEAT\\_BTI - Branch Target Identification |\n| `crc` |  | FEAT\\_CRC - CRC32 checksum instructions |\n| `dit` |  | FEAT\\_DIT - Data Independent Timing instructions |\n| `dotprod` |  | FEAT\\_DotProd - Advanced SIMD Int8 dot product instructions |\n| `dpb` |  | FEAT\\_DPB - Data cache clean to point of persistence |\n| `dpb2` |  | FEAT\\_DPB2 - Data cache clean to point of deep persistence |\n| `f32mm` | `sve` | FEAT\\_F32MM - SVE single-precision FP matrix multiply instruction |\n| `f64mm` | `sve` | FEAT\\_F64MM - SVE double-precision FP matrix multiply instruction |\n| `fcma` | `neon` | FEAT\\_FCMA - Floating point complex number support |\n| `fhm` | `fp16` | FEAT\\_FHM - Half-precision FP FMLAL instructions |\n| `flagm` |  | FEAT\\_FlagM - Conditional flag manipulation |\n| `fp16` | `neon` | FEAT\\_FP16 - Half-precision FP data processing |\n| `frintts` |  | FEAT\\_FRINTTS - Floating-point to int helper instructions |\n| `i8mm` |  | FEAT\\_I8MM - Int8 Matrix Multiplication |\n| `jsconv` | `neon` | FEAT\\_JSCVT - JavaScript conversion instruction |\n| `lse` |  | FEAT\\_LSE - Large System Extension |\n| `lor` |  | FEAT\\_LOR - Limited Ordering Regions extension |\n| `mte` |  | FEAT\\_MTE & FEAT\\_MTE2 - Memory Tagging Extension |\n| `neon` |  | FEAT\\_FP & FEAT\\_AdvSIMD - Floating Point and Advanced SIMD extension |\n| `pan` |  | FEAT\\_PAN - Privileged Access-Never extension |\n| `paca` |  | FEAT\\_PAuth - Pointer Authentication (address authentication) |\n| `pacg` |  | FEAT\\_PAuth - Pointer Authentication (generic authentication) |\n| `pmuv3` |  | FEAT\\_PMUv3 - Performance Monitors extension (v3) |\n| `rand` |  | FEAT\\_RNG - Random Number Generator |\n| `ras` |  | FEAT\\_RAS & FEAT\\_RASv1p1 - Reliability, Availability and Serviceability extension |\n| `rcpc` |  | FEAT\\_LRCPC - Release consistent Processor Consistent |\n| `rcpc2` | `rcpc` | FEAT\\_LRCPC2 - RcPc with immediate offsets |\n| `rdm` |  | FEAT\\_RDM - Rounding Double Multiply accumulate |\n| `sb` |  | FEAT\\_SB - Speculation Barrier |\n| `sha2` | `neon` | FEAT\\_SHA1 & FEAT\\_SHA256 - Advanced SIMD SHA instructions |\n| `sha3` | `sha2` | FEAT\\_SHA512 & FEAT\\_SHA3 - Advanced SIMD SHA instructions |\n| `sm4` | `neon` | FEAT\\_SM3 & FEAT\\_SM4 - Advanced SIMD SM3/4 instructions |\n| `spe` |  | FEAT\\_SPE - Statistical Profiling Extension |\n| `ssbs` |  | FEAT\\_SSBS & FEAT\\_SSBS2 - Speculative Store Bypass Safe |\n| `sve` | `fp16` | FEAT\\_SVE - Scalable Vector Extension |\n| `sve2` | `sve` | FEAT\\_SVE2 - Scalable Vector Extension 2 |\n| `sve2-aes` | `sve2`, `aes` | FEAT\\_SVE\\_AES - SVE AES instructions |\n| `sve2-sm4` | `sve2`, `sm4` | FEAT\\_SVE\\_SM4 - SVE SM4 instructions |\n| `sve2-sha3` | `sve2`, `sha3` | FEAT\\_SVE\\_SHA3 - SVE SHA3 instructions |\n| `sve2-bitperm` | `sve2` | FEAT\\_SVE\\_BitPerm - SVE Bit Permute |\n| `tme` |  | FEAT\\_TME - Transactional Memory Extension |\n| `vh` |  | FEAT\\_VHE - Virtualization Host Extensions |\n\n#### [`riscv32` or `riscv64`](#riscv32-or-riscv64)\n\nThis platform requires that `#[target_feature]` is only applied to [`unsafe` functions](../unsafe-keyword.html).\n\nFurther documentation on these features can be found in their respective specification. Many specifications are described in the [RISC-V ISA Manual](https://github.com/riscv/riscv-isa-manual) or in another manual hosted on the [RISC-V GitHub Account](https://github.com/riscv).\n\n| Feature | Implicitly Enables | Description |\n| --- | --- | --- |\n| `a` |  | [A](https://github.com/riscv/riscv-isa-manual/blob/de46343a245c6ee1f7b1a40c92fe1a86bd4f4978/src/a-st-ext.adoc) — Atomic instructions |\n| `c` |  | [C](https://github.com/riscv/riscv-isa-manual/blob/de46343a245c6ee1f7b1a40c92fe1a86bd4f4978/src/c-st-ext.adoc) — Compressed instructions |\n| `m` |  | [M](https://github.com/riscv/riscv-isa-manual/blob/de46343a245c6ee1f7b1a40c92fe1a86bd4f4978/src/m-st-ext.adoc) — Integer Multiplication and Division instructions |\n| `zb` | `zba`, `zbc`, `zbs` | [Zb](https://github.com/riscv/riscv-bitmanip) — Bit Manipulation instructions |\n| `zba` |  | [Zba](https://github.com/riscv/riscv-bitmanip/blob/main/bitmanip/zba.adoc) — Address Generation instructions |\n| `zbb` |  | [Zbb](https://github.com/riscv/riscv-bitmanip/blob/main/bitmanip/zbb.adoc) — Basic bit-manipulation |\n| `zbc` |  | [Zbc](https://github.com/riscv/riscv-bitmanip/blob/main/bitmanip/zbc.adoc) — Carry-less multiplication |\n| `zbkb` |  | [Zbkb](https://github.com/riscv/riscv-bitmanip/blob/main/bitmanip/zbkb.adoc) — Bit Manipulation Instructions for Cryptography |\n| `zbkc` |  | [Zbkc](https://github.com/riscv/riscv-bitmanip/blob/main/bitmanip/zbc.adoc) — Carry-less multiplication for Cryptography |\n| `zbkx` |  | [Zbkx](https://github.com/riscv/riscv-bitmanip/blob/main/bitmanip/zbkx.adoc) — Crossbar permutations |\n| `zbs` |  | [Zbs](https://github.com/riscv/riscv-bitmanip/blob/main/bitmanip/zbs.adoc) — Single-bit instructions |\n| `zk` | `zkn`, `zkr`, `zks`, `zkt`, `zbkb`, `zbkc`, `zkbx` | [Zk](https://github.com/riscv/riscv-crypto/blob/e2dd7d98b7f34d477e38cb5fd7a3af4379525189/doc/scalar/riscv-crypto-scalar-zk.adoc) — Scalar Cryptography |\n| `zkn` | `zknd`, `zkne`, `zknh`, `zbkb`, `zbkc`, `zkbx` | [Zkn](https://github.com/riscv/riscv-crypto/blob/e2dd7d98b7f34d477e38cb5fd7a3af4379525189/doc/scalar/riscv-crypto-scalar-zkn.adoc) — NIST Algorithm suite extension |\n| `zknd` |  | [Zknd](https://github.com/riscv/riscv-crypto/blob/e2dd7d98b7f34d477e38cb5fd7a3af4379525189/doc/scalar/riscv-crypto-scalar-zknd.adoc) — NIST Suite: AES Decryption |\n| `zkne` |  | [Zkne](https://github.com/riscv/riscv-crypto/blob/e2dd7d98b7f34d477e38cb5fd7a3af4379525189/doc/scalar/riscv-crypto-scalar-zkne.adoc) — NIST Suite: AES Encryption |\n| `zknh` |  | [Zknh](https://github.com/riscv/riscv-crypto/blob/e2dd7d98b7f34d477e38cb5fd7a3af4379525189/doc/scalar/riscv-crypto-scalar-zknh.adoc) — NIST Suite: Hash Function Instructions |\n| `zkr` |  | [Zkr](https://github.com/riscv/riscv-crypto/blob/e2dd7d98b7f34d477e38cb5fd7a3af4379525189/doc/scalar/riscv-crypto-scalar-zkr.adoc) — Entropy Source Extension |\n| `zks` | `zksed`, `zksh`, `zbkb`, `zbkc`, `zkbx` | [Zks](https://github.com/riscv/riscv-crypto/blob/e2dd7d98b7f34d477e38cb5fd7a3af4379525189/doc/scalar/riscv-crypto-scalar-zks.adoc) — ShangMi Algorithm Suite |\n| `zksed` |  | [Zksed](https://github.com/riscv/riscv-crypto/blob/e2dd7d98b7f34d477e38cb5fd7a3af4379525189/doc/scalar/riscv-crypto-scalar-zksed.adoc) — ShangMi Suite: SM4 Block Cipher Instructions |\n| `zksh` |  | [Zksh](https://github.com/riscv/riscv-crypto/blob/e2dd7d98b7f34d477e38cb5fd7a3af4379525189/doc/scalar/riscv-crypto-scalar-zksh.adoc) — ShangMi Suite: SM3 Hash Function Instructions |\n| `zkt` |  | [Zkt](https://github.com/riscv/riscv-crypto/blob/e2dd7d98b7f34d477e38cb5fd7a3af4379525189/doc/scalar/riscv-crypto-scalar-zkt.adoc) — Data Independent Execution Latency Subset |\n\n#### [`wasm32` or `wasm64`](#wasm32-or-wasm64)\n\n`#[target_feature]` may be used with both safe and [`unsafe` functions](../unsafe-keyword.html) on Wasm platforms. It is impossible to cause undefined behavior via the `#[target_feature]` attribute because attempting to use instructions unsupported by the Wasm engine will fail at load time without the risk of being interpreted in a way different from what the compiler expected.\n\n### [Additional information](#additional-information)\n\nSee the [`target_feature` conditional compilation option](about:blank/conditional-compilation.html#target_feature) for selectively enabling or disabling compilation of code based on compile-time settings. Note that this option is not affected by the `target_feature` attribute, and is only driven by the features enabled for the entire crate.\n\nSee the [`is_x86_feature_detected`](../../std/arch/macro.is_x86_feature_detected.html) or [`is_aarch64_feature_detected`](../../std/arch/macro.is_aarch64_feature_detected.html) macros in the standard library for runtime feature detection on these platforms.\n\n> Note: `rustc` has a default set of features enabled for each target and CPU. The CPU may be chosen with the [`-C target-cpu`](about:blank/rustc/codegen-options/index.html#target-cpu) flag. Individual features may be enabled or disabled for an entire crate with the [`-C target-feature`](about:blank/rustc/codegen-options/index.html#target-feature) flag.\n\n## [The `track_caller` attribute](#the-track_caller-attribute)\n\nThe `track_caller` attribute may be applied to any function with [`\"Rust\"` ABI](about:blank/items/external-blocks.html#abi) with the exception of the entry point `fn main`. When applied to functions and methods in trait declarations, the attribute applies to all implementations. If the trait provides a default implementation with the attribute, then the attribute also applies to override implementations.\n\nWhen applied to a function in an `extern` block the attribute must also be applied to any linked implementations, otherwise undefined behavior results. When applied to a function which is made available to an `extern` block, the declaration in the `extern` block must also have the attribute, otherwise undefined behavior results.\n\n### [Behavior](#behavior)\n\nApplying the attribute to a function `f` allows code within `f` to get a hint of the [`Location`](../../core/panic/struct.Location.html) of the \"topmost\" tracked call that led to `f`'s invocation. At the point of observation, an implementation behaves as if it walks up the stack from `f`'s frame to find the nearest frame of an _unattributed_ function `outer`, and it returns the [`Location`](../../core/panic/struct.Location.html) of the tracked call in `outer`.\n\n```rust\n#![allow(unused)]\nfn main() {\n#[track_caller]\nfn f() {\n    println!(\"{}\", std::panic::Location::caller());\n}\n}\n```\n\n> Note: `core` provides [`core::panic::Location::caller`](about:blank/core/panic/struct.Location.html#method.caller) for observing caller locations. It wraps the [`core::intrinsics::caller_location`](../../core/intrinsics/fn.caller_location.html) intrinsic implemented by `rustc`.\n\n> Note: because the resulting `Location` is a hint, an implementation may halt its walk up the stack early. See [Limitations](#limitations) for important caveats.\n\n#### [Examples](#examples)\n\nWhen `f` is called directly by `calls_f`, code in `f` observes its callsite within `calls_f`:\n\n```rust\n#![allow(unused)]\nfn main() {\n#[track_caller]\nfn f() {\n    println!(\"{}\", std::panic::Location::caller());\n}\nfn calls_f() {\n    f(); // <-- f() prints this location\n}\n}\n```\n\nWhen `f` is called by another attributed function `g` which is in turn called by `calls_g`, code in both `f` and `g` observes `g`'s callsite within `calls_g`:\n\n```rust\n#![allow(unused)]\nfn main() {\n#[track_caller]\nfn f() {\n    println!(\"{}\", std::panic::Location::caller());\n}\n#[track_caller]\nfn g() {\n    println!(\"{}\", std::panic::Location::caller());\n    f();\n}\n\nfn calls_g() {\n    g(); // <-- g() prints this location twice, once itself and once from f()\n}\n}\n```\n\nWhen `g` is called by another attributed function `h` which is in turn called by `calls_h`, all code in `f`, `g`, and `h` observes `h`'s callsite within `calls_h`:\n\n```rust\n#![allow(unused)]\nfn main() {\n#[track_caller]\nfn f() {\n    println!(\"{}\", std::panic::Location::caller());\n}\n#[track_caller]\nfn g() {\n    println!(\"{}\", std::panic::Location::caller());\n    f();\n}\n#[track_caller]\nfn h() {\n    println!(\"{}\", std::panic::Location::caller());\n    g();\n}\n\nfn calls_h() {\n    h(); // <-- prints this location three times, once itself, once from g(), once from f()\n}\n}\n```\n\nAnd so on.\n\n### [Limitations](#limitations)\n\nThis information is a hint and implementations are not required to preserve it.\n\nIn particular, coercing a function with `#[track_caller]` to a function pointer creates a shim which appears to observers to have been called at the attributed function's definition site, losing actual caller information across virtual calls. A common example of this coercion is the creation of a trait object whose methods are attributed.\n\n> Note: The aforementioned shim for function pointers is necessary because `rustc` implements `track_caller` in a codegen context by appending an implicit parameter to the function ABI, but this would be unsound for an indirect call because the parameter is not a part of the function's type and a given function pointer type may or may not refer to a function with the attribute. The creation of a shim hides the implicit parameter from callers of the function pointer, preserving soundness.\n\n## [The `instruction_set` attribute](#the-instruction_set-attribute)\n\nThe _`instruction_set` [attribute](../attributes.html)_ may be applied to a function to control which instruction set the function will be generated for. This allows mixing more than one instruction set in a single program on CPU architectures that support it. It uses the [_MetaListPath_](about:blank/attributes.html#meta-item-attribute-syntax) syntax, and a path comprised of the architecture family name and instruction set name.\n\nIt is a compilation error to use the `instruction_set` attribute on a target that does not support it.\n\n### [On ARM](#on-arm)\n\nFor the `ARMv4T` and `ARMv5te` architectures, the following are supported:\n\n-   `arm::a32` - Generate the function as A32 \"ARM\" code.\n-   `arm::t32` - Generate the function as T32 \"Thumb\" code.\n\n```rust\n#[instruction_set(arm::a32)]\nfn foo_arm_code() {}\n\n#[instruction_set(arm::t32)]\nfn bar_thumb_code() {}\n```\n\nUsing the `instruction_set` attribute has the following effects:\n\n-   If the address of the function is taken as a function pointer, the low bit of the address will be set to 0 (arm) or 1 (thumb) depending on the instruction set.\n-   Any inline assembly in the function must use the specified instruction set instead of the target default.",
	"html": "<!DOCTYPE html><html lang=\"en\" class=\"light\" dir=\"ltr\"><head>\n        <!-- Book generated using mdBook -->\n        <meta charset=\"UTF-8\">\n        <title>Code generation - The Rust Reference</title>\n\n\n        <!-- Custom HTML head -->\n        \n        <meta name=\"description\" content=\"\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <meta name=\"theme-color\" content=\"rgb(255, 255, 255)\">\n\n        <link rel=\"icon\" href=\"../favicon.svg\">\n        <link rel=\"shortcut icon\" href=\"../favicon.png\">\n        <link rel=\"stylesheet\" href=\"../css/variables.css\">\n        <link rel=\"stylesheet\" href=\"../css/general.css\">\n        <link rel=\"stylesheet\" href=\"../css/chrome.css\">\n        <link rel=\"stylesheet\" href=\"../css/print.css\" media=\"print\">\n\n        <!-- Fonts -->\n        <link rel=\"stylesheet\" href=\"../FontAwesome/css/font-awesome.css\">\n        <link rel=\"stylesheet\" href=\"../fonts/fonts.css\">\n\n        <!-- Highlight.js Stylesheets -->\n        <link rel=\"stylesheet\" href=\"../highlight.css\">\n        <link rel=\"stylesheet\" href=\"../tomorrow-night.css\" disabled=\"\">\n        <link rel=\"stylesheet\" href=\"../ayu-highlight.css\" disabled=\"\">\n\n        <!-- Custom theme stylesheets -->\n        <link rel=\"stylesheet\" href=\"../theme/reference.css\">\n\n    </head>\n    <body class=\"js sidebar-visible\">\n    <div id=\"body-container\">\n        <!-- Provide site root to javascript -->\n        <script>\n            var path_to_root = \"../\";\n            var default_theme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"navy\" : \"light\";\n        </script>\n\n        <!-- Work around some values being stored in localStorage wrapped in quotes -->\n        <script>\n            try {\n                var theme = localStorage.getItem('mdbook-theme');\n                var sidebar = localStorage.getItem('mdbook-sidebar');\n\n                if (theme.startsWith('\"') && theme.endsWith('\"')) {\n                    localStorage.setItem('mdbook-theme', theme.slice(1, theme.length - 1));\n                }\n\n                if (sidebar.startsWith('\"') && sidebar.endsWith('\"')) {\n                    localStorage.setItem('mdbook-sidebar', sidebar.slice(1, sidebar.length - 1));\n                }\n            } catch (e) { }\n        </script>\n\n        <!-- Set the theme before any content is loaded, prevents flash -->\n        <script>\n            var theme;\n            try { theme = localStorage.getItem('mdbook-theme'); } catch(e) { }\n            if (theme === null || theme === undefined) { theme = default_theme; }\n            var html = document.querySelector('html');\n            html.classList.remove('light')\n            html.classList.add(theme);\n            var body = document.querySelector('body');\n            body.classList.remove('no-js')\n            body.classList.add('js');\n        </script>\n\n        <input type=\"checkbox\" id=\"sidebar-toggle-anchor\" class=\"hidden\">\n\n        <!-- Hide / unhide sidebar before it is displayed -->\n        <script>\n            var body = document.querySelector('body');\n            var sidebar = null;\n            var sidebar_toggle = document.getElementById(\"sidebar-toggle-anchor\");\n            if (document.body.clientWidth >= 1080) {\n                try { sidebar = localStorage.getItem('mdbook-sidebar'); } catch(e) { }\n                sidebar = sidebar || 'visible';\n            } else {\n                sidebar = 'hidden';\n            }\n            sidebar_toggle.checked = sidebar === 'visible';\n            body.classList.remove('sidebar-visible');\n            body.classList.add(\"sidebar-\" + sidebar);\n        </script>\n\n        <nav id=\"sidebar\" class=\"sidebar\" aria-label=\"Table of contents\" aria-hidden=\"false\">\n            <div class=\"sidebar-scrollbox\">\n                <ol class=\"chapter\"><li class=\"chapter-item expanded affix \"><a href=\"../introduction.html\" tabindex=\"0\">Introduction</a></li><li class=\"chapter-item expanded \"><a href=\"../notation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.</strong> Notation</a></li><li class=\"chapter-item expanded \"><a href=\"../lexical-structure.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.</strong> Lexical structure</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../input-format.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.1.</strong> Input format</a></li><li class=\"chapter-item expanded \"><a href=\"../keywords.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.2.</strong> Keywords</a></li><li class=\"chapter-item expanded \"><a href=\"../identifiers.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.3.</strong> Identifiers</a></li><li class=\"chapter-item expanded \"><a href=\"../comments.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.4.</strong> Comments</a></li><li class=\"chapter-item expanded \"><a href=\"../whitespace.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.5.</strong> Whitespace</a></li><li class=\"chapter-item expanded \"><a href=\"../tokens.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.6.</strong> Tokens</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../macros.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.</strong> Macros</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../macros-by-example.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.1.</strong> Macros By Example</a></li><li class=\"chapter-item expanded \"><a href=\"../procedural-macros.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.2.</strong> Procedural Macros</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../crates-and-source-files.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.</strong> Crates and source files</a></li><li class=\"chapter-item expanded \"><a href=\"../conditional-compilation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.</strong> Conditional compilation</a></li><li class=\"chapter-item expanded \"><a href=\"../items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.</strong> Items</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../items/modules.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.1.</strong> Modules</a></li><li class=\"chapter-item expanded \"><a href=\"../items/extern-crates.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.2.</strong> Extern crates</a></li><li class=\"chapter-item expanded \"><a href=\"../items/use-declarations.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.3.</strong> Use declarations</a></li><li class=\"chapter-item expanded \"><a href=\"../items/functions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.4.</strong> Functions</a></li><li class=\"chapter-item expanded \"><a href=\"../items/type-aliases.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.5.</strong> Type aliases</a></li><li class=\"chapter-item expanded \"><a href=\"../items/structs.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.6.</strong> Structs</a></li><li class=\"chapter-item expanded \"><a href=\"../items/enumerations.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.7.</strong> Enumerations</a></li><li class=\"chapter-item expanded \"><a href=\"../items/unions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.8.</strong> Unions</a></li><li class=\"chapter-item expanded \"><a href=\"../items/constant-items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.9.</strong> Constant items</a></li><li class=\"chapter-item expanded \"><a href=\"../items/static-items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.10.</strong> Static items</a></li><li class=\"chapter-item expanded \"><a href=\"../items/traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.11.</strong> Traits</a></li><li class=\"chapter-item expanded \"><a href=\"../items/implementations.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.12.</strong> Implementations</a></li><li class=\"chapter-item expanded \"><a href=\"../items/external-blocks.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.13.</strong> External blocks</a></li><li class=\"chapter-item expanded \"><a href=\"../items/generics.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.14.</strong> Generic parameters</a></li><li class=\"chapter-item expanded \"><a href=\"../items/associated-items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.15.</strong> Associated Items</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../attributes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.</strong> Attributes</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../attributes/testing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.1.</strong> Testing</a></li><li class=\"chapter-item expanded \"><a href=\"../attributes/derive.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.2.</strong> Derive</a></li><li class=\"chapter-item expanded \"><a href=\"../attributes/diagnostics.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.3.</strong> Diagnostics</a></li><li class=\"chapter-item expanded \"><a href=\"../attributes/codegen.html\" class=\"active\" tabindex=\"0\"><strong aria-hidden=\"true\">7.4.</strong> Code generation</a></li><li class=\"chapter-item expanded \"><a href=\"../attributes/limits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.5.</strong> Limits</a></li><li class=\"chapter-item expanded \"><a href=\"../attributes/type_system.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.6.</strong> Type System</a></li><li class=\"chapter-item expanded \"><a href=\"../attributes/debugger.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.7.</strong> Debugger</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../statements-and-expressions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.</strong> Statements and expressions</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../statements.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.1.</strong> Statements</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.</strong> Expressions</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../expressions/literal-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.1.</strong> Literal expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/path-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.2.</strong> Path expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/block-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.3.</strong> Block expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/operator-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.4.</strong> Operator expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/grouped-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.5.</strong> Grouped expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/array-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.6.</strong> Array and index expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/tuple-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.7.</strong> Tuple and index expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/struct-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.8.</strong> Struct expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/call-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.9.</strong> Call expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/method-call-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.10.</strong> Method call expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/field-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.11.</strong> Field access expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/closure-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.12.</strong> Closure expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/loop-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.13.</strong> Loop expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/range-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.14.</strong> Range expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/if-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.15.</strong> If and if let expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/match-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.16.</strong> Match expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/return-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.17.</strong> Return expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/await-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.18.</strong> Await expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/underscore-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.19.</strong> Underscore expressions</a></li></ol></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../patterns.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.</strong> Patterns</a></li><li class=\"chapter-item expanded \"><a href=\"../type-system.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.</strong> Type system</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../types.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.</strong> Types</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../types/boolean.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.1.</strong> Boolean type</a></li><li class=\"chapter-item expanded \"><a href=\"../types/numeric.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.2.</strong> Numeric types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/textual.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.3.</strong> Textual types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/never.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.4.</strong> Never type</a></li><li class=\"chapter-item expanded \"><a href=\"../types/tuple.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.5.</strong> Tuple types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/array.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.6.</strong> Array types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/slice.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.7.</strong> Slice types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/struct.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.8.</strong> Struct types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/enum.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.9.</strong> Enumerated types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/union.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.10.</strong> Union types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/function-item.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.11.</strong> Function item types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/closure.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.12.</strong> Closure types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/pointer.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.13.</strong> Pointer types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/function-pointer.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.14.</strong> Function pointer types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/trait-object.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.15.</strong> Trait object types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/impl-trait.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.16.</strong> Impl trait type</a></li><li class=\"chapter-item expanded \"><a href=\"../types/parameters.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.17.</strong> Type parameters</a></li><li class=\"chapter-item expanded \"><a href=\"../types/inferred.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.18.</strong> Inferred type</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../dynamically-sized-types.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.2.</strong> Dynamically Sized Types</a></li><li class=\"chapter-item expanded \"><a href=\"../type-layout.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.3.</strong> Type layout</a></li><li class=\"chapter-item expanded \"><a href=\"../interior-mutability.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.4.</strong> Interior mutability</a></li><li class=\"chapter-item expanded \"><a href=\"../subtyping.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.5.</strong> Subtyping and Variance</a></li><li class=\"chapter-item expanded \"><a href=\"../trait-bounds.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.6.</strong> Trait and lifetime bounds</a></li><li class=\"chapter-item expanded \"><a href=\"../type-coercions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.7.</strong> Type coercions</a></li><li class=\"chapter-item expanded \"><a href=\"../destructors.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.8.</strong> Destructors</a></li><li class=\"chapter-item expanded \"><a href=\"../lifetime-elision.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.9.</strong> Lifetime elision</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../special-types-and-traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.</strong> Special types and traits</a></li><li class=\"chapter-item expanded \"><a href=\"../names.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.</strong> Names</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../names/namespaces.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.1.</strong> Namespaces</a></li><li class=\"chapter-item expanded \"><a href=\"../names/scopes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.2.</strong> Scopes</a></li><li class=\"chapter-item expanded \"><a href=\"../names/preludes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.3.</strong> Preludes</a></li><li class=\"chapter-item expanded \"><a href=\"../paths.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.4.</strong> Paths</a></li><li class=\"chapter-item expanded \"><a href=\"../names/name-resolution.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.5.</strong> Name resolution</a></li><li class=\"chapter-item expanded \"><a href=\"../visibility-and-privacy.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.6.</strong> Visibility and privacy</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../memory-model.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.</strong> Memory model</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../memory-allocation-and-lifetime.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.1.</strong> Memory allocation and lifetime</a></li><li class=\"chapter-item expanded \"><a href=\"../variables.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.2.</strong> Variables</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../linkage.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.</strong> Linkage</a></li><li class=\"chapter-item expanded \"><a href=\"../inline-assembly.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.</strong> Inline assembly</a></li><li class=\"chapter-item expanded \"><a href=\"../unsafety.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.</strong> Unsafety</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../unsafe-keyword.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.1.</strong> The unsafe keyword</a></li><li class=\"chapter-item expanded \"><a href=\"../behavior-considered-undefined.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.2.</strong> Behavior considered undefined</a></li><li class=\"chapter-item expanded \"><a href=\"../behavior-not-considered-unsafe.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.3.</strong> Behavior not considered unsafe</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../const_eval.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.</strong> Constant Evaluation</a></li><li class=\"chapter-item expanded \"><a href=\"../abi.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.</strong> Application Binary Interface</a></li><li class=\"chapter-item expanded \"><a href=\"../runtime.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.</strong> The Rust runtime</a></li><li class=\"chapter-item expanded \"><a href=\"../appendices.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.</strong> Appendices</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../macro-ambiguity.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.1.</strong> Macro Follow-Set Ambiguity Formal Specification</a></li><li class=\"chapter-item expanded \"><a href=\"../influences.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.2.</strong> Influences</a></li><li class=\"chapter-item expanded \"><a href=\"../glossary.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.3.</strong> Glossary</a></li></ol></li></ol>\n            </div>\n            <div id=\"sidebar-resize-handle\" class=\"sidebar-resize-handle\">\n                <div class=\"sidebar-resize-indicator\"></div>\n            </div>\n        </nav>\n\n        <!-- Track and set sidebar scroll position -->\n        <script>\n            var sidebarScrollbox = document.querySelector('#sidebar .sidebar-scrollbox');\n            sidebarScrollbox.addEventListener('click', function(e) {\n                if (e.target.tagName === 'A') {\n                    sessionStorage.setItem('sidebar-scroll', sidebarScrollbox.scrollTop);\n                }\n            }, { passive: true });\n            var sidebarScrollTop = sessionStorage.getItem('sidebar-scroll');\n            sessionStorage.removeItem('sidebar-scroll');\n            if (sidebarScrollTop) {\n                // preserve sidebar scroll position when navigating via links within sidebar\n                sidebarScrollbox.scrollTop = sidebarScrollTop;\n            } else {\n                // scroll sidebar to current active section when navigating via \"next/previous chapter\" buttons\n                var activeSection = document.querySelector('#sidebar .active');\n                if (activeSection) {\n                    activeSection.scrollIntoView({ block: 'center' });\n                }\n            }\n        </script>\n\n        <div id=\"page-wrapper\" class=\"page-wrapper\">\n\n            <div class=\"page\">\n                                <div id=\"menu-bar-hover-placeholder\"></div>\n                <div id=\"menu-bar\" class=\"menu-bar bordered\" style=\"top: 0px;\">\n                    <div class=\"left-buttons\">\n                        <label id=\"sidebar-toggle\" class=\"icon-button\" for=\"sidebar-toggle-anchor\" title=\"Toggle Table of Contents\" aria-label=\"Toggle Table of Contents\" aria-controls=\"sidebar\" aria-expanded=\"true\">\n                            <i class=\"fa fa-bars\"></i>\n                        </label>\n                        <button id=\"theme-toggle\" class=\"icon-button\" type=\"button\" title=\"Change theme\" aria-label=\"Change theme\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-controls=\"theme-list\">\n                            <i class=\"fa fa-paint-brush\"></i>\n                        </button>\n                        <ul id=\"theme-list\" class=\"theme-popup\" aria-label=\"Themes\" role=\"menu\">\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme theme-selected\" id=\"light\">Light</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"rust\">Rust</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"coal\">Coal</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"navy\">Navy</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"ayu\">Ayu</button></li>\n                        </ul>\n                        <button id=\"search-toggle\" class=\"icon-button\" type=\"button\" title=\"Search. (Shortkey: s)\" aria-label=\"Toggle Searchbar\" aria-expanded=\"false\" aria-keyshortcuts=\"S\" aria-controls=\"searchbar\">\n                            <i class=\"fa fa-search\"></i>\n                        </button>\n                    </div>\n\n                    <h1 class=\"menu-title\">The Rust Reference</h1>\n\n                    <div class=\"right-buttons\">\n                        <a href=\"../print.html\" title=\"Print this book\" aria-label=\"Print this book\">\n                            <i id=\"print-button\" class=\"fa fa-print\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/reference/\" title=\"Git repository\" aria-label=\"Git repository\">\n                            <i id=\"git-repository-button\" class=\"fa fa-github\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/reference/edit/master/src/attributes/codegen.md\" title=\"Suggest an edit\" aria-label=\"Suggest an edit\">\n                            <i id=\"git-edit-button\" class=\"fa fa-edit\"></i>\n                        </a>\n\n                    </div>\n                </div>\n\n                <div id=\"search-wrapper\" class=\"hidden\">\n                    <form id=\"searchbar-outer\" class=\"searchbar-outer\">\n                        <input type=\"search\" id=\"searchbar\" name=\"searchbar\" placeholder=\"Search this book ...\" aria-controls=\"searchresults-outer\" aria-describedby=\"searchresults-header\">\n                    </form>\n                    <div id=\"searchresults-outer\" class=\"searchresults-outer hidden\">\n                        <div id=\"searchresults-header\" class=\"searchresults-header\"></div>\n                        <ul id=\"searchresults\">\n                        </ul>\n                    </div>\n                </div>\n\n                <!-- Apply ARIA attributes after the sidebar and the sidebar toggle button are added to the DOM -->\n                <script>\n                    document.getElementById('sidebar-toggle').setAttribute('aria-expanded', sidebar === 'visible');\n                    document.getElementById('sidebar').setAttribute('aria-hidden', sidebar !== 'visible');\n                    Array.from(document.querySelectorAll('#sidebar a')).forEach(function(link) {\n                        link.setAttribute('tabIndex', sidebar === 'visible' ? 0 : -1);\n                    });\n                </script>\n\n                <div id=\"content\" class=\"content\">\n                    <main>\n                        <h1 id=\"code-generation-attributes\"><a class=\"header\" href=\"#code-generation-attributes\">Code generation attributes</a></h1>\n<p>The following <a href=\"../attributes.html\">attributes</a> are used for controlling code generation.</p>\n<h2 id=\"optimization-hints\"><a class=\"header\" href=\"#optimization-hints\">Optimization hints</a></h2>\n<p>The <code class=\"hljs\">cold</code> and <code class=\"hljs\">inline</code> <a href=\"../attributes.html\">attributes</a> give suggestions to generate code in a\nway that may be faster than what it would do without the hint. The attributes\nare only hints, and may be ignored.</p>\n<p>Both attributes can be used on <a href=\"../items/functions.html\">functions</a>. When applied to a function in a\n<a href=\"../items/traits.html\">trait</a>, they apply only to that function when used as a default function for\na trait implementation and not to all trait implementations. The attributes\nhave no effect on a trait function without a body.</p>\n<h3 id=\"the-inline-attribute\"><a class=\"header\" href=\"#the-inline-attribute\">The <code>inline</code> attribute</a></h3>\n<p>The <em><code class=\"hljs\">inline</code> <a href=\"../attributes.html\">attribute</a></em> suggests that a copy of the attributed function\nshould be placed in the caller, rather than generating code to call the\nfunction where it is defined.</p>\n<blockquote>\n<p><em><strong>Note</strong></em>: The <code class=\"hljs\">rustc</code> compiler automatically inlines functions based on\ninternal heuristics. Incorrectly inlining functions can make the program\nslower, so this attribute should be used with care.</p>\n</blockquote>\n<p>There are three ways to use the inline attribute:</p>\n<ul>\n<li><code class=\"hljs\">#[inline]</code> <em>suggests</em> performing an inline expansion.</li>\n<li><code class=\"hljs\">#[inline(always)]</code> <em>suggests</em> that an inline expansion should always be\nperformed.</li>\n<li><code class=\"hljs\">#[inline(never)]</code> <em>suggests</em> that an inline expansion should never be\nperformed.</li>\n</ul>\n<blockquote>\n<p><em><strong>Note</strong></em>: <code class=\"hljs\">#[inline]</code> in every form is a hint, with no <em>requirements</em>\non the language to place a copy of the attributed function in the caller.</p>\n</blockquote>\n<h3 id=\"the-cold-attribute\"><a class=\"header\" href=\"#the-cold-attribute\">The <code>cold</code> attribute</a></h3>\n<p>The <em><code class=\"hljs\">cold</code> <a href=\"../attributes.html\">attribute</a></em> suggests that the attributed function is unlikely to\nbe called.</p>\n<h2 id=\"the-no_builtins-attribute\"><a class=\"header\" href=\"#the-no_builtins-attribute\">The <code>no_builtins</code> attribute</a></h2>\n<p>The <em><code class=\"hljs\">no_builtins</code> <a href=\"../attributes.html\">attribute</a></em> may be applied at the crate level to disable\noptimizing certain code patterns to invocations of library functions that are\nassumed to exist.</p>\n<h2 id=\"the-target_feature-attribute\"><a class=\"header\" href=\"#the-target_feature-attribute\">The <code>target_feature</code> attribute</a></h2>\n<p>The <em><code class=\"hljs\">target_feature</code> <a href=\"../attributes.html\">attribute</a></em> may be applied to a function to\nenable code generation of that function for specific platform architecture\nfeatures. It uses the <a href=\"../attributes.html#meta-item-attribute-syntax\"><em>MetaListNameValueStr</em></a> syntax with a single key of\n<code class=\"hljs\">enable</code> whose value is a string of comma-separated feature names to enable.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-meta\">#[cfg(target_feature = <span class=\"hljs-meta-string\">\"avx2\"</span>)]</span>\n</span><span class=\"hljs-meta\">#[target_feature(enable = <span class=\"hljs-meta-string\">\"avx2\"</span>)]</span>\n<span class=\"hljs-keyword\">unsafe</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo_avx2</span></span>() {}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Each <a href=\"../conditional-compilation.html#target_arch\">target architecture</a> has a set of features that may be enabled. It is an\nerror to specify a feature for a target architecture that the crate is not\nbeing compiled for.</p>\n<p>It is <a href=\"../behavior-considered-undefined.html\">undefined behavior</a> to call a function that is compiled with a feature\nthat is not supported on the current platform the code is running on, <em>except</em>\nif the platform explicitly documents this to be safe.</p>\n<p>Functions marked with <code class=\"hljs\">target_feature</code> are not inlined into a context that\ndoes not support the given features. The <code class=\"hljs\">#[inline(always)]</code> attribute may not\nbe used with a <code class=\"hljs\">target_feature</code> attribute.</p>\n<h3 id=\"available-features\"><a class=\"header\" href=\"#available-features\">Available features</a></h3>\n<p>The following is a list of the available feature names.</p>\n<h4 id=\"x86-or-x86_64\"><a class=\"header\" href=\"#x86-or-x86_64\"><code>x86</code> or <code>x86_64</code></a></h4>\n<p>Executing code with unsupported features is undefined behavior on this platform.\nHence this platform requires that <code class=\"hljs\">#[target_feature]</code> is only applied to <a href=\"../unsafe-keyword.html\"><code class=\"hljs\">unsafe</code>\nfunctions</a>.</p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Feature</th><th>Implicitly Enables</th><th>Description</th></tr></thead><tbody>\n<tr><td><code class=\"hljs\">adx</code></td><td></td><td><a href=\"https://en.wikipedia.org/wiki/Intel_ADX\">ADX</a> —&nbsp;Multi-Precision Add-Carry Instruction Extensions</td></tr>\n<tr><td><code class=\"hljs\">aes</code></td><td><code class=\"hljs\">sse2</code></td><td><a href=\"https://en.wikipedia.org/wiki/AES_instruction_set\">AES</a> —&nbsp;Advanced Encryption Standard</td></tr>\n<tr><td><code class=\"hljs\">avx</code></td><td><code class=\"hljs\">sse4.2</code></td><td><a href=\"https://en.wikipedia.org/wiki/Advanced_Vector_Extensions\">AVX</a> —&nbsp;Advanced Vector Extensions</td></tr>\n<tr><td><code class=\"hljs\">avx2</code></td><td><code class=\"hljs\">avx</code></td><td><a href=\"https://en.wikipedia.org/wiki/Advanced_Vector_Extensions#AVX2\">AVX2</a> —&nbsp;Advanced Vector Extensions 2</td></tr>\n<tr><td><code class=\"hljs\">bmi1</code></td><td></td><td><a href=\"https://en.wikipedia.org/wiki/Bit_Manipulation_Instruction_Sets\">BMI1</a> —&nbsp;Bit Manipulation Instruction Sets</td></tr>\n<tr><td><code class=\"hljs\">bmi2</code></td><td></td><td><a href=\"https://en.wikipedia.org/wiki/Bit_Manipulation_Instruction_Sets#BMI2\">BMI2</a> —&nbsp;Bit Manipulation Instruction Sets 2</td></tr>\n<tr><td><code class=\"hljs\">cmpxchg16b</code></td><td></td><td><a href=\"https://www.felixcloutier.com/x86/cmpxchg8b:cmpxchg16b\"><code class=\"hljs\">cmpxchg16b</code></a> - Compares and exchange 16 bytes (128 bits) of data atomically</td></tr>\n<tr><td><code class=\"hljs\">f16c</code></td><td><code class=\"hljs\">avx</code></td><td><a href=\"https://en.wikipedia.org/wiki/F16C\">F16C</a> — 16-bit floating point conversion instructions</td></tr>\n<tr><td><code class=\"hljs\">fma</code></td><td><code class=\"hljs\">avx</code></td><td><a href=\"https://en.wikipedia.org/wiki/FMA_instruction_set\">FMA3</a> —&nbsp;Three-operand fused multiply-add</td></tr>\n<tr><td><code class=\"hljs\">fxsr</code></td><td></td><td><a href=\"https://www.felixcloutier.com/x86/fxsave\"><code class=\"hljs\">fxsave</code></a> and <a href=\"https://www.felixcloutier.com/x86/fxrstor\"><code class=\"hljs\">fxrstor</code></a> —&nbsp;Save and restore x87 FPU, MMX Technology, and SSE State</td></tr>\n<tr><td><code class=\"hljs\">lzcnt</code></td><td></td><td><a href=\"https://www.felixcloutier.com/x86/lzcnt\"><code class=\"hljs\">lzcnt</code></a> —&nbsp;Leading zeros count</td></tr>\n<tr><td><code class=\"hljs\">movbe</code></td><td></td><td><a href=\"https://www.felixcloutier.com/x86/movbe\"><code class=\"hljs\">movbe</code></a> - Move data after swapping bytes</td></tr>\n<tr><td><code class=\"hljs\">pclmulqdq</code></td><td><code class=\"hljs\">sse2</code></td><td><a href=\"https://www.felixcloutier.com/x86/pclmulqdq\"><code class=\"hljs\">pclmulqdq</code></a> — Packed carry-less multiplication quadword</td></tr>\n<tr><td><code class=\"hljs\">popcnt</code></td><td></td><td><a href=\"https://www.felixcloutier.com/x86/popcnt\"><code class=\"hljs\">popcnt</code></a> —&nbsp;Count of bits set to 1</td></tr>\n<tr><td><code class=\"hljs\">rdrand</code></td><td></td><td><a href=\"https://en.wikipedia.org/wiki/RdRand\"><code class=\"hljs\">rdrand</code></a> —&nbsp;Read random number</td></tr>\n<tr><td><code class=\"hljs\">rdseed</code></td><td></td><td><a href=\"https://en.wikipedia.org/wiki/RdRand\"><code class=\"hljs\">rdseed</code></a> —&nbsp;Read random seed</td></tr>\n<tr><td><code class=\"hljs\">sha</code></td><td><code class=\"hljs\">sse2</code></td><td><a href=\"https://en.wikipedia.org/wiki/Intel_SHA_extensions\">SHA</a> —&nbsp;Secure Hash Algorithm</td></tr>\n<tr><td><code class=\"hljs\">sse</code></td><td></td><td><a href=\"https://en.wikipedia.org/wiki/Streaming_SIMD_Extensions\">SSE</a> —&nbsp;Streaming <abbr title=\"Single Instruction Multiple Data\">SIMD</abbr> Extensions</td></tr>\n<tr><td><code class=\"hljs\">sse2</code></td><td><code class=\"hljs\">sse</code></td><td><a href=\"https://en.wikipedia.org/wiki/SSE2\">SSE2</a> —&nbsp;Streaming SIMD Extensions 2</td></tr>\n<tr><td><code class=\"hljs\">sse3</code></td><td><code class=\"hljs\">sse2</code></td><td><a href=\"https://en.wikipedia.org/wiki/SSE3\">SSE3</a> —&nbsp;Streaming SIMD Extensions 3</td></tr>\n<tr><td><code class=\"hljs\">sse4.1</code></td><td><code class=\"hljs\">ssse3</code></td><td><a href=\"https://en.wikipedia.org/wiki/SSE4#SSE4.1\">SSE4.1</a> —&nbsp;Streaming SIMD Extensions 4.1</td></tr>\n<tr><td><code class=\"hljs\">sse4.2</code></td><td><code class=\"hljs\">sse4.1</code></td><td><a href=\"https://en.wikipedia.org/wiki/SSE4#SSE4.2\">SSE4.2</a> —&nbsp;Streaming SIMD Extensions 4.2</td></tr>\n<tr><td><code class=\"hljs\">ssse3</code></td><td><code class=\"hljs\">sse3</code></td><td><a href=\"https://en.wikipedia.org/wiki/SSSE3\">SSSE3</a> —&nbsp;Supplemental Streaming SIMD Extensions 3</td></tr>\n<tr><td><code class=\"hljs\">xsave</code></td><td></td><td><a href=\"https://www.felixcloutier.com/x86/xsave\"><code class=\"hljs\">xsave</code></a> —&nbsp;Save processor extended states</td></tr>\n<tr><td><code class=\"hljs\">xsavec</code></td><td></td><td><a href=\"https://www.felixcloutier.com/x86/xsavec\"><code class=\"hljs\">xsavec</code></a> —&nbsp;Save processor extended states with compaction</td></tr>\n<tr><td><code class=\"hljs\">xsaveopt</code></td><td></td><td><a href=\"https://www.felixcloutier.com/x86/xsaveopt\"><code class=\"hljs\">xsaveopt</code></a> —&nbsp;Save processor extended states optimized</td></tr>\n<tr><td><code class=\"hljs\">xsaves</code></td><td></td><td><a href=\"https://www.felixcloutier.com/x86/xsaves\"><code class=\"hljs\">xsaves</code></a> —&nbsp;Save processor extended states supervisor</td></tr>\n</tbody></table>\n</div><!-- Keep links near each table to make it easier to move and update. -->\n<h4 id=\"aarch64\"><a class=\"header\" href=\"#aarch64\"><code>aarch64</code></a></h4>\n<p>This platform requires that <code class=\"hljs\">#[target_feature]</code> is only applied to <a href=\"../unsafe-keyword.html\"><code class=\"hljs\">unsafe</code>\nfunctions</a>.</p>\n<p>Further documentation on these features can be found in the <a href=\"https://developer.arm.com/documentation/ddi0487/latest\">ARM Architecture\nReference Manual</a>, or elsewhere on <a href=\"https://developer.arm.com\">developer.arm.com</a>.</p>\n<blockquote>\n<p><em><strong>Note</strong></em>: The following pairs of features should both be marked as enabled\nor disabled together if used:</p>\n<ul>\n<li><code class=\"hljs\">paca</code> and <code class=\"hljs\">pacg</code>, which LLVM currently implements as one feature.</li>\n</ul>\n</blockquote>\n<div class=\"table-wrapper\"><table><thead><tr><th>Feature</th><th>Implicitly Enables</th><th>Feature Name</th></tr></thead><tbody>\n<tr><td><code class=\"hljs\">aes</code></td><td><code class=\"hljs\">neon</code></td><td>FEAT_AES &amp; FEAT_PMULL - Advanced <abbr title=\"Single Instruction Multiple Data\">SIMD</abbr> AES &amp; PMULL instructions</td></tr>\n<tr><td><code class=\"hljs\">bf16</code></td><td></td><td>FEAT_BF16 - BFloat16 instructions</td></tr>\n<tr><td><code class=\"hljs\">bti</code></td><td></td><td>FEAT_BTI - Branch Target Identification</td></tr>\n<tr><td><code class=\"hljs\">crc</code></td><td></td><td>FEAT_CRC - CRC32 checksum instructions</td></tr>\n<tr><td><code class=\"hljs\">dit</code></td><td></td><td>FEAT_DIT - Data Independent Timing instructions</td></tr>\n<tr><td><code class=\"hljs\">dotprod</code></td><td></td><td>FEAT_DotProd - Advanced SIMD Int8 dot product instructions</td></tr>\n<tr><td><code class=\"hljs\">dpb</code></td><td></td><td>FEAT_DPB - Data cache clean to point of persistence</td></tr>\n<tr><td><code class=\"hljs\">dpb2</code></td><td></td><td>FEAT_DPB2 - Data cache clean to point of deep persistence</td></tr>\n<tr><td><code class=\"hljs\">f32mm</code></td><td><code class=\"hljs\">sve</code></td><td>FEAT_F32MM - SVE single-precision FP matrix multiply instruction</td></tr>\n<tr><td><code class=\"hljs\">f64mm</code></td><td><code class=\"hljs\">sve</code></td><td>FEAT_F64MM - SVE double-precision FP matrix multiply instruction</td></tr>\n<tr><td><code class=\"hljs\">fcma</code></td><td><code class=\"hljs\">neon</code></td><td>FEAT_FCMA - Floating point complex number support</td></tr>\n<tr><td><code class=\"hljs\">fhm</code></td><td><code class=\"hljs\">fp16</code></td><td>FEAT_FHM - Half-precision FP FMLAL instructions</td></tr>\n<tr><td><code class=\"hljs\">flagm</code></td><td></td><td>FEAT_FlagM - Conditional flag manipulation</td></tr>\n<tr><td><code class=\"hljs\">fp16</code></td><td><code class=\"hljs\">neon</code></td><td>FEAT_FP16 - Half-precision FP data processing</td></tr>\n<tr><td><code class=\"hljs\">frintts</code></td><td></td><td>FEAT_FRINTTS - Floating-point to int helper instructions</td></tr>\n<tr><td><code class=\"hljs\">i8mm</code></td><td></td><td>FEAT_I8MM - Int8 Matrix Multiplication</td></tr>\n<tr><td><code class=\"hljs\">jsconv</code></td><td><code class=\"hljs\">neon</code></td><td>FEAT_JSCVT - JavaScript conversion instruction</td></tr>\n<tr><td><code class=\"hljs\">lse</code></td><td></td><td>FEAT_LSE - Large System Extension</td></tr>\n<tr><td><code class=\"hljs\">lor</code></td><td></td><td>FEAT_LOR - Limited Ordering Regions extension</td></tr>\n<tr><td><code class=\"hljs\">mte</code></td><td></td><td>FEAT_MTE &amp; FEAT_MTE2 - Memory Tagging Extension</td></tr>\n<tr><td><code class=\"hljs\">neon</code></td><td></td><td>FEAT_FP &amp; FEAT_AdvSIMD - Floating Point and Advanced SIMD extension</td></tr>\n<tr><td><code class=\"hljs\">pan</code></td><td></td><td>FEAT_PAN - Privileged Access-Never extension</td></tr>\n<tr><td><code class=\"hljs\">paca</code></td><td></td><td>FEAT_PAuth - Pointer Authentication (address authentication)</td></tr>\n<tr><td><code class=\"hljs\">pacg</code></td><td></td><td>FEAT_PAuth - Pointer Authentication (generic authentication)</td></tr>\n<tr><td><code class=\"hljs\">pmuv3</code></td><td></td><td>FEAT_PMUv3 - Performance Monitors extension (v3)</td></tr>\n<tr><td><code class=\"hljs\">rand</code></td><td></td><td>FEAT_RNG - Random Number Generator</td></tr>\n<tr><td><code class=\"hljs\">ras</code></td><td></td><td>FEAT_RAS &amp; FEAT_RASv1p1 - Reliability, Availability and Serviceability extension</td></tr>\n<tr><td><code class=\"hljs\">rcpc</code></td><td></td><td>FEAT_LRCPC - Release consistent Processor Consistent</td></tr>\n<tr><td><code class=\"hljs\">rcpc2</code></td><td><code class=\"hljs\">rcpc</code></td><td>FEAT_LRCPC2 - RcPc with immediate offsets</td></tr>\n<tr><td><code class=\"hljs\">rdm</code></td><td></td><td>FEAT_RDM - Rounding Double Multiply accumulate</td></tr>\n<tr><td><code class=\"hljs\">sb</code></td><td></td><td>FEAT_SB - Speculation Barrier</td></tr>\n<tr><td><code class=\"hljs\">sha2</code></td><td><code class=\"hljs\">neon</code></td><td>FEAT_SHA1 &amp; FEAT_SHA256 - Advanced SIMD SHA instructions</td></tr>\n<tr><td><code class=\"hljs\">sha3</code></td><td><code class=\"hljs\">sha2</code></td><td>FEAT_SHA512 &amp; FEAT_SHA3 - Advanced SIMD SHA instructions</td></tr>\n<tr><td><code class=\"hljs\">sm4</code></td><td><code class=\"hljs\">neon</code></td><td>FEAT_SM3 &amp; FEAT_SM4 - Advanced SIMD SM3/4 instructions</td></tr>\n<tr><td><code class=\"hljs\">spe</code></td><td></td><td>FEAT_SPE - Statistical Profiling Extension</td></tr>\n<tr><td><code class=\"hljs\">ssbs</code></td><td></td><td>FEAT_SSBS &amp; FEAT_SSBS2 - Speculative Store Bypass Safe</td></tr>\n<tr><td><code class=\"hljs\">sve</code></td><td><code class=\"hljs\">fp16</code></td><td>FEAT_SVE - Scalable Vector Extension</td></tr>\n<tr><td><code class=\"hljs\">sve2</code></td><td><code class=\"hljs\">sve</code></td><td>FEAT_SVE2 - Scalable Vector Extension 2</td></tr>\n<tr><td><code class=\"hljs\">sve2-aes</code></td><td><code class=\"hljs\">sve2</code>, <code class=\"hljs\">aes</code></td><td>FEAT_SVE_AES - SVE AES instructions</td></tr>\n<tr><td><code class=\"hljs\">sve2-sm4</code></td><td><code class=\"hljs\">sve2</code>, <code class=\"hljs\">sm4</code></td><td>FEAT_SVE_SM4 - SVE SM4 instructions</td></tr>\n<tr><td><code class=\"hljs\">sve2-sha3</code></td><td><code class=\"hljs\">sve2</code>, <code class=\"hljs\">sha3</code></td><td>FEAT_SVE_SHA3 - SVE SHA3 instructions</td></tr>\n<tr><td><code class=\"hljs\">sve2-bitperm</code></td><td><code class=\"hljs\">sve2</code></td><td>FEAT_SVE_BitPerm - SVE Bit Permute</td></tr>\n<tr><td><code class=\"hljs\">tme</code></td><td></td><td>FEAT_TME - Transactional Memory Extension</td></tr>\n<tr><td><code class=\"hljs\">vh</code></td><td></td><td>FEAT_VHE - Virtualization Host Extensions</td></tr>\n</tbody></table>\n</div>\n<h4 id=\"riscv32-or-riscv64\"><a class=\"header\" href=\"#riscv32-or-riscv64\"><code>riscv32</code> or <code>riscv64</code></a></h4>\n<p>This platform requires that <code class=\"hljs\">#[target_feature]</code> is only applied to <a href=\"../unsafe-keyword.html\"><code class=\"hljs\">unsafe</code>\nfunctions</a>.</p>\n<p>Further documentation on these features can be found in their respective\nspecification. Many specifications are described in the <a href=\"https://github.com/riscv/riscv-isa-manual\">RISC-V ISA Manual</a> or\nin another manual hosted on the <a href=\"https://github.com/riscv\">RISC-V GitHub Account</a>.</p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Feature</th><th>Implicitly Enables</th><th>Description</th></tr></thead><tbody>\n<tr><td><code class=\"hljs\">a</code></td><td></td><td><a href=\"https://github.com/riscv/riscv-isa-manual/blob/de46343a245c6ee1f7b1a40c92fe1a86bd4f4978/src/a-st-ext.adoc\">A</a> —&nbsp;Atomic instructions</td></tr>\n<tr><td><code class=\"hljs\">c</code></td><td></td><td><a href=\"https://github.com/riscv/riscv-isa-manual/blob/de46343a245c6ee1f7b1a40c92fe1a86bd4f4978/src/c-st-ext.adoc\">C</a> —&nbsp;Compressed instructions</td></tr>\n<tr><td><code class=\"hljs\">m</code></td><td></td><td><a href=\"https://github.com/riscv/riscv-isa-manual/blob/de46343a245c6ee1f7b1a40c92fe1a86bd4f4978/src/m-st-ext.adoc\">M</a> —&nbsp;Integer Multiplication and Division instructions</td></tr>\n<tr><td><code class=\"hljs\">zb</code></td><td><code class=\"hljs\">zba</code>, <code class=\"hljs\">zbc</code>, <code class=\"hljs\">zbs</code></td><td><a href=\"https://github.com/riscv/riscv-bitmanip\">Zb</a> —&nbsp;Bit Manipulation instructions</td></tr>\n<tr><td><code class=\"hljs\">zba</code></td><td></td><td><a href=\"https://github.com/riscv/riscv-bitmanip/blob/main/bitmanip/zba.adoc\">Zba</a> —&nbsp;Address Generation instructions</td></tr>\n<tr><td><code class=\"hljs\">zbb</code></td><td></td><td><a href=\"https://github.com/riscv/riscv-bitmanip/blob/main/bitmanip/zbb.adoc\">Zbb</a> — Basic bit-manipulation</td></tr>\n<tr><td><code class=\"hljs\">zbc</code></td><td></td><td><a href=\"https://github.com/riscv/riscv-bitmanip/blob/main/bitmanip/zbc.adoc\">Zbc</a> —&nbsp;Carry-less multiplication</td></tr>\n<tr><td><code class=\"hljs\">zbkb</code></td><td></td><td><a href=\"https://github.com/riscv/riscv-bitmanip/blob/main/bitmanip/zbkb.adoc\">Zbkb</a> —&nbsp;Bit Manipulation Instructions for Cryptography</td></tr>\n<tr><td><code class=\"hljs\">zbkc</code></td><td></td><td><a href=\"https://github.com/riscv/riscv-bitmanip/blob/main/bitmanip/zbc.adoc\">Zbkc</a> —&nbsp;Carry-less multiplication for Cryptography</td></tr>\n<tr><td><code class=\"hljs\">zbkx</code></td><td></td><td><a href=\"https://github.com/riscv/riscv-bitmanip/blob/main/bitmanip/zbkx.adoc\">Zbkx</a> —&nbsp;Crossbar permutations</td></tr>\n<tr><td><code class=\"hljs\">zbs</code></td><td></td><td><a href=\"https://github.com/riscv/riscv-bitmanip/blob/main/bitmanip/zbs.adoc\">Zbs</a> — Single-bit instructions</td></tr>\n<tr><td><code class=\"hljs\">zk</code></td><td><code class=\"hljs\">zkn</code>, <code class=\"hljs\">zkr</code>, <code class=\"hljs\">zks</code>, <code class=\"hljs\">zkt</code>, <code class=\"hljs\">zbkb</code>, <code class=\"hljs\">zbkc</code>, <code class=\"hljs\">zkbx</code></td><td><a href=\"https://github.com/riscv/riscv-crypto/blob/e2dd7d98b7f34d477e38cb5fd7a3af4379525189/doc/scalar/riscv-crypto-scalar-zk.adoc\">Zk</a> —&nbsp;Scalar Cryptography</td></tr>\n<tr><td><code class=\"hljs\">zkn</code></td><td><code class=\"hljs\">zknd</code>, <code class=\"hljs\">zkne</code>, <code class=\"hljs\">zknh</code>, <code class=\"hljs\">zbkb</code>, <code class=\"hljs\">zbkc</code>, <code class=\"hljs\">zkbx</code></td><td><a href=\"https://github.com/riscv/riscv-crypto/blob/e2dd7d98b7f34d477e38cb5fd7a3af4379525189/doc/scalar/riscv-crypto-scalar-zkn.adoc\">Zkn</a> —&nbsp;NIST Algorithm suite extension</td></tr>\n<tr><td><code class=\"hljs\">zknd</code></td><td></td><td><a href=\"https://github.com/riscv/riscv-crypto/blob/e2dd7d98b7f34d477e38cb5fd7a3af4379525189/doc/scalar/riscv-crypto-scalar-zknd.adoc\">Zknd</a> —&nbsp;NIST Suite: AES Decryption</td></tr>\n<tr><td><code class=\"hljs\">zkne</code></td><td></td><td><a href=\"https://github.com/riscv/riscv-crypto/blob/e2dd7d98b7f34d477e38cb5fd7a3af4379525189/doc/scalar/riscv-crypto-scalar-zkne.adoc\">Zkne</a> —&nbsp;NIST Suite: AES Encryption</td></tr>\n<tr><td><code class=\"hljs\">zknh</code></td><td></td><td><a href=\"https://github.com/riscv/riscv-crypto/blob/e2dd7d98b7f34d477e38cb5fd7a3af4379525189/doc/scalar/riscv-crypto-scalar-zknh.adoc\">Zknh</a> —&nbsp;NIST Suite: Hash Function Instructions</td></tr>\n<tr><td><code class=\"hljs\">zkr</code></td><td></td><td><a href=\"https://github.com/riscv/riscv-crypto/blob/e2dd7d98b7f34d477e38cb5fd7a3af4379525189/doc/scalar/riscv-crypto-scalar-zkr.adoc\">Zkr</a> —&nbsp;Entropy Source Extension</td></tr>\n<tr><td><code class=\"hljs\">zks</code></td><td><code class=\"hljs\">zksed</code>, <code class=\"hljs\">zksh</code>, <code class=\"hljs\">zbkb</code>, <code class=\"hljs\">zbkc</code>, <code class=\"hljs\">zkbx</code></td><td><a href=\"https://github.com/riscv/riscv-crypto/blob/e2dd7d98b7f34d477e38cb5fd7a3af4379525189/doc/scalar/riscv-crypto-scalar-zks.adoc\">Zks</a> —&nbsp;ShangMi Algorithm Suite</td></tr>\n<tr><td><code class=\"hljs\">zksed</code></td><td></td><td><a href=\"https://github.com/riscv/riscv-crypto/blob/e2dd7d98b7f34d477e38cb5fd7a3af4379525189/doc/scalar/riscv-crypto-scalar-zksed.adoc\">Zksed</a> —&nbsp;ShangMi Suite: SM4 Block Cipher Instructions</td></tr>\n<tr><td><code class=\"hljs\">zksh</code></td><td></td><td><a href=\"https://github.com/riscv/riscv-crypto/blob/e2dd7d98b7f34d477e38cb5fd7a3af4379525189/doc/scalar/riscv-crypto-scalar-zksh.adoc\">Zksh</a> —&nbsp;ShangMi Suite: SM3 Hash Function Instructions</td></tr>\n<tr><td><code class=\"hljs\">zkt</code></td><td></td><td><a href=\"https://github.com/riscv/riscv-crypto/blob/e2dd7d98b7f34d477e38cb5fd7a3af4379525189/doc/scalar/riscv-crypto-scalar-zkt.adoc\">Zkt</a> —&nbsp;Data Independent Execution Latency Subset</td></tr>\n</tbody></table>\n</div><!-- Keep links near each table to make it easier to move and update. -->\n<h4 id=\"wasm32-or-wasm64\"><a class=\"header\" href=\"#wasm32-or-wasm64\"><code>wasm32</code> or <code>wasm64</code></a></h4>\n<p><code class=\"hljs\">#[target_feature]</code> may be used with both safe and\n<a href=\"../unsafe-keyword.html\"><code class=\"hljs\">unsafe</code> functions</a> on Wasm platforms. It is impossible to\ncause undefined behavior via the <code class=\"hljs\">#[target_feature]</code> attribute because\nattempting to use instructions unsupported by the Wasm engine will fail at load\ntime without the risk of being interpreted in a way different from what the\ncompiler expected.</p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Feature</th><th>Description</th></tr></thead><tbody>\n<tr><td><code class=\"hljs\">bulk-memory</code></td><td><a href=\"https://github.com/WebAssembly/bulk-memory-operations\">WebAssembly bulk memory operations proposal</a></td></tr>\n<tr><td><code class=\"hljs\">extended-const</code></td><td><a href=\"https://github.com/WebAssembly/extended-const\">WebAssembly extended const expressions proposal</a></td></tr>\n<tr><td><code class=\"hljs\">mutable-globals</code></td><td><a href=\"https://github.com/WebAssembly/mutable-global\">WebAssembly mutable global proposal</a></td></tr>\n<tr><td><code class=\"hljs\">nontrapping-fptoint</code></td><td><a href=\"https://github.com/WebAssembly/nontrapping-float-to-int-conversions\">WebAssembly non-trapping float-to-int conversion proposal</a></td></tr>\n<tr><td><code class=\"hljs\">sign-ext</code></td><td><a href=\"https://github.com/WebAssembly/sign-extension-ops\">WebAssembly sign extension operators Proposal</a></td></tr>\n<tr><td><code class=\"hljs\">simd128</code></td><td><a href=\"https://github.com/webassembly/simd\">WebAssembly simd proposal</a></td></tr>\n</tbody></table>\n</div>\n<h3 id=\"additional-information\"><a class=\"header\" href=\"#additional-information\">Additional information</a></h3>\n<p>See the <a href=\"../conditional-compilation.html#target_feature\"><code class=\"hljs\">target_feature</code> conditional compilation option</a> for selectively\nenabling or disabling compilation of code based on compile-time settings. Note\nthat this option is not affected by the <code class=\"hljs\">target_feature</code> attribute, and is\nonly driven by the features enabled for the entire crate.</p>\n<p>See the <a href=\"../../std/arch/macro.is_x86_feature_detected.html\"><code class=\"hljs\">is_x86_feature_detected</code></a> or <a href=\"../../std/arch/macro.is_aarch64_feature_detected.html\"><code class=\"hljs\">is_aarch64_feature_detected</code></a> macros\nin the standard library for runtime feature detection on these platforms.</p>\n<blockquote>\n<p>Note: <code class=\"hljs\">rustc</code> has a default set of features enabled for each target and CPU.\nThe CPU may be chosen with the <a href=\"../../rustc/codegen-options/index.html#target-cpu\"><code class=\"hljs\">-C target-cpu</code></a> flag. Individual features\nmay be enabled or disabled for an entire crate with the\n<a href=\"../../rustc/codegen-options/index.html#target-feature\"><code class=\"hljs\">-C target-feature</code></a> flag.</p>\n</blockquote>\n<h2 id=\"the-track_caller-attribute\"><a class=\"header\" href=\"#the-track_caller-attribute\">The <code>track_caller</code> attribute</a></h2>\n<p>The <code class=\"hljs\">track_caller</code> attribute may be applied to any function with <a href=\"../items/external-blocks.html#abi\"><code class=\"hljs\">\"Rust\"</code> ABI</a>\nwith the exception of the entry point <code class=\"hljs\">fn main</code>. When applied to functions and methods in\ntrait declarations, the attribute applies to all implementations. If the trait provides a\ndefault implementation with the attribute, then the attribute also applies to override implementations.</p>\n<p>When applied to a function in an <code class=\"hljs\">extern</code> block the attribute must also be applied to any linked\nimplementations, otherwise undefined behavior results. When applied to a function which is made\navailable to an <code class=\"hljs\">extern</code> block, the declaration in the <code class=\"hljs\">extern</code> block must also have the attribute,\notherwise undefined behavior results.</p>\n<h3 id=\"behavior\"><a class=\"header\" href=\"#behavior\">Behavior</a></h3>\n<p>Applying the attribute to a function <code class=\"hljs\">f</code> allows code within <code class=\"hljs\">f</code> to get a hint of the <a href=\"../../core/panic/struct.Location.html\"><code class=\"hljs\">Location</code></a> of\nthe \"topmost\" tracked call that led to <code class=\"hljs\">f</code>'s invocation. At the point of observation, an\nimplementation behaves as if it walks up the stack from <code class=\"hljs\">f</code>'s frame to find the nearest frame of an\n<em>unattributed</em> function <code class=\"hljs\">outer</code>, and it returns the <a href=\"../../core/panic/struct.Location.html\"><code class=\"hljs\">Location</code></a> of the tracked call in <code class=\"hljs\">outer</code>.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-meta\">#[track_caller]</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">f</span></span>() {\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{}\"</span>, std::panic::Location::caller());\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<blockquote>\n<p>Note: <code class=\"hljs\">core</code> provides <a href=\"../../core/panic/struct.Location.html#method.caller\"><code class=\"hljs\">core::panic::Location::caller</code></a> for observing caller locations. It wraps\nthe <a href=\"../../core/intrinsics/fn.caller_location.html\"><code class=\"hljs\">core::intrinsics::caller_location</code></a> intrinsic implemented by <code class=\"hljs\">rustc</code>.</p>\n</blockquote>\n<blockquote>\n<p>Note: because the resulting <code class=\"hljs\">Location</code> is a hint, an implementation may halt its walk up the stack\nearly. See <a href=\"#limitations\">Limitations</a> for important caveats.</p>\n</blockquote>\n<h4 id=\"examples\"><a class=\"header\" href=\"#examples\">Examples</a></h4>\n<p>When <code class=\"hljs\">f</code> is called directly by <code class=\"hljs\">calls_f</code>, code in <code class=\"hljs\">f</code> observes its callsite within <code class=\"hljs\">calls_f</code>:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-meta\">#[track_caller]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">f</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{}\"</span>, std::panic::Location::caller());\n</span><span class=\"boring\">}\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">calls_f</span></span>() {\n    f(); <span class=\"hljs-comment\">// &lt;-- f() prints this location</span>\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>When <code class=\"hljs\">f</code> is called by another attributed function <code class=\"hljs\">g</code> which is in turn called by <code class=\"hljs\">calls_g</code>, code in\nboth <code class=\"hljs\">f</code> and <code class=\"hljs\">g</code> observes <code class=\"hljs\">g</code>'s callsite within <code class=\"hljs\">calls_g</code>:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-meta\">#[track_caller]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">f</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{}\"</span>, std::panic::Location::caller());\n</span><span class=\"boring\">}\n</span><span class=\"hljs-meta\">#[track_caller]</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">g</span></span>() {\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{}\"</span>, std::panic::Location::caller());\n    f();\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">calls_g</span></span>() {\n    g(); <span class=\"hljs-comment\">// &lt;-- g() prints this location twice, once itself and once from f()</span>\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>When <code class=\"hljs\">g</code> is called by another attributed function <code class=\"hljs\">h</code> which is in turn called by <code class=\"hljs\">calls_h</code>, all code\nin <code class=\"hljs\">f</code>, <code class=\"hljs\">g</code>, and <code class=\"hljs\">h</code> observes <code class=\"hljs\">h</code>'s callsite within <code class=\"hljs\">calls_h</code>:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-meta\">#[track_caller]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">f</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{}\"</span>, std::panic::Location::caller());\n</span><span class=\"boring\">}\n</span><span class=\"boring\"><span class=\"hljs-meta\">#[track_caller]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">g</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{}\"</span>, std::panic::Location::caller());\n</span><span class=\"boring\">    f();\n</span><span class=\"boring\">}\n</span><span class=\"hljs-meta\">#[track_caller]</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">h</span></span>() {\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{}\"</span>, std::panic::Location::caller());\n    g();\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">calls_h</span></span>() {\n    h(); <span class=\"hljs-comment\">// &lt;-- prints this location three times, once itself, once from g(), once from f()</span>\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>And so on.</p>\n<h3 id=\"limitations\"><a class=\"header\" href=\"#limitations\">Limitations</a></h3>\n<p>This information is a hint and implementations are not required to preserve it.</p>\n<p>In particular, coercing a function with <code class=\"hljs\">#[track_caller]</code> to a function pointer creates a shim which\nappears to observers to have been called at the attributed function's definition site, losing actual\ncaller information across virtual calls. A common example of this coercion is the creation of a\ntrait object whose methods are attributed.</p>\n<blockquote>\n<p>Note: The aforementioned shim for function pointers is necessary because <code class=\"hljs\">rustc</code> implements\n<code class=\"hljs\">track_caller</code> in a codegen context by appending an implicit parameter to the function ABI, but\nthis would be unsound for an indirect call because the parameter is not a part of the function's\ntype and a given function pointer type may or may not refer to a function with the attribute. The\ncreation of a shim hides the implicit parameter from callers of the function pointer, preserving\nsoundness.</p>\n</blockquote>\n<h2 id=\"the-instruction_set-attribute\"><a class=\"header\" href=\"#the-instruction_set-attribute\">The <code>instruction_set</code> attribute</a></h2>\n<p>The <em><code class=\"hljs\">instruction_set</code> <a href=\"../attributes.html\">attribute</a></em> may be applied to a function to control which instruction set the function will be generated for.\nThis allows mixing more than one instruction set in a single program on CPU architectures that support it.\nIt uses the <a href=\"../attributes.html#meta-item-attribute-syntax\"><em>MetaListPath</em></a> syntax, and a path comprised of the architecture family name and instruction set name.</p>\n<p>It is a compilation error to use the <code class=\"hljs\">instruction_set</code> attribute on a target that does not support it.</p>\n<h3 id=\"on-arm\"><a class=\"header\" href=\"#on-arm\">On ARM</a></h3>\n<p>For the <code class=\"hljs\">ARMv4T</code> and <code class=\"hljs\">ARMv5te</code> architectures, the following are supported:</p>\n<ul>\n<li><code class=\"hljs\">arm::a32</code> - Generate the function as A32 \"ARM\" code.</li>\n<li><code class=\"hljs\">arm::t32</code> - Generate the function as T32 \"Thumb\" code.</li>\n</ul>\n<!-- ignore: arm-only -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-meta\">#[instruction_set(arm::a32)]</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo_arm_code</span></span>() {}\n\n<span class=\"hljs-meta\">#[instruction_set(arm::t32)]</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">bar_thumb_code</span></span>() {}</code></pre>\n<p>Using the <code class=\"hljs\">instruction_set</code> attribute has the following effects:</p>\n<ul>\n<li>If the address of the function is taken as a function pointer, the low bit of the address will be set to 0 (arm) or 1 (thumb) depending on the instruction set.</li>\n<li>Any inline assembly in the function must use the specified instruction set instead of the target default.</li>\n</ul>\n\n                    </main>\n\n                    <nav class=\"nav-wrapper\" aria-label=\"Page navigation\">\n                        <!-- Mobile navigation buttons -->\n                            <a rel=\"prev\" href=\"../attributes/diagnostics.html\" class=\"mobile-nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                                <i class=\"fa fa-angle-left\"></i>\n                            </a>\n\n                            <a rel=\"next prefetch\" href=\"../attributes/limits.html\" class=\"mobile-nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                                <i class=\"fa fa-angle-right\"></i>\n                            </a>\n\n                        <div style=\"clear: both\"></div>\n                    </nav>\n                </div>\n            </div>\n\n            <nav class=\"nav-wide-wrapper\" aria-label=\"Page navigation\">\n                    <a rel=\"prev\" href=\"../attributes/diagnostics.html\" class=\"nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                        <i class=\"fa fa-angle-left\"></i>\n                    </a>\n\n                    <a rel=\"next prefetch\" href=\"../attributes/limits.html\" class=\"nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                        <i class=\"fa fa-angle-right\"></i>\n                    </a>\n            </nav>\n\n        </div>\n\n\n\n\n        <script>\n            window.playground_copyable = true;\n        </script>\n\n\n        <script src=\"../elasticlunr.min.js\"></script>\n        <script src=\"../mark.min.js\"></script>\n        <script src=\"../searcher.js\"></script>\n\n        <script src=\"../clipboard.min.js\"></script>\n        <script src=\"../highlight.js\"></script>\n        <script src=\"../book.js\"></script>\n\n        <!-- Custom JS scripts -->\n\n\n    </div>\n    \n\n</body></html>",
	"crawlDate": "2024-07-28T05:20:46.453Z"
}