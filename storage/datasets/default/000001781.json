{
	"title": "Default Cargo feature resolver - The Rust Edition Guide",
	"url": "https://doc.rust-lang.org/stable/edition-guide/rust-2021/default-cargo-resolver.html",
	"markdown": "# Default Cargo feature resolver - The Rust Edition Guide\n\n## [Summary](#summary)\n\n-   `edition = \"2021\"` implies `resolver = \"2\"` in `Cargo.toml`.\n\n## [Details](#details)\n\nSince Rust 1.51.0, Cargo has opt-in support for a [new feature resolver](about:blank/cargo/reference/resolver.html#feature-resolver-version-2) which can be activated with `resolver = \"2\"` in `Cargo.toml`.\n\nStarting in Rust 2021, this will be the default. That is, writing `edition = \"2021\"` in `Cargo.toml` will imply `resolver = \"2\"`.\n\nThe resolver is a global setting for a [workspace](../../cargo/reference/workspaces.html), and the setting is ignored in dependencies. The setting is only honored for the top-level package of the workspace. If you are using a [virtual workspace](about:blank/cargo/reference/workspaces.html#virtual-workspace), you will still need to explicitly set the [`resolver` field](about:blank/cargo/reference/resolver.html#resolver-versions) in the `[workspace]` definition if you want to opt-in to the new resolver.\n\nThe new feature resolver no longer merges all requested features for crates that are depended on in multiple ways. See [the announcement of Rust 1.51](https://blog.rust-lang.org/2021/03/25/Rust-1.51.0.html#cargos-new-feature-resolver) for details.\n\n## [Migration](#migration)\n\nThere are no automated migration tools for updating for the new resolver. For most projects, there are usually few or no changes as a result of updating.\n\nWhen updating with `cargo fix --edition`, Cargo will display a report if the new resolver will build dependencies with different features. It may look something like this:\n\n> note: Switching to Edition 2021 will enable the use of the version 2 feature resolver in Cargo. This may cause some dependencies to be built with fewer features enabled than previously. More information about the resolver changes may be found at [https://doc.rust-lang.org/nightly/edition-guide/rust-2021/default-cargo-resolver.html](https://doc.rust-lang.org/nightly/edition-guide/rust-2021/default-cargo-resolver.html)  \n> When building the following dependencies, the given features will no longer be used:\n> \n> ```text\n>   bstr v0.2.16: default, lazy_static, regex-automata, unicode\n>   libz-sys v1.1.3 (as host dependency): libc\n> \n> ```\n\nThis lets you know that certain dependencies will no longer be built with the given features.\n\n### [Build failures](#build-failures)\n\nThere may be some circumstances where your project may not build correctly after the change. If a dependency declaration in one package assumes that certain features are enabled in another, and those features are now disabled, it may fail to compile.\n\nFor example, let's say we have a dependency like this:\n\n```toml\n# Cargo.toml\n\n[dependencies]\nbstr = { version = \"0.2.16\", default-features = false }\n# ...\n\n```\n\nAnd somewhere in our dependency tree, another package has this:\n\n```toml\n# Another package's Cargo.toml\n\n[build-dependencies]\nbstr = \"0.2.16\"\n\n```\n\nIn our package, we've been using the [`words_with_breaks`](https://docs.rs/bstr/0.2.16/bstr/trait.ByteSlice.html#method.words_with_breaks) method from `bstr`, which requires `bstr`'s \"unicode\" feature to be enabled. This has historically worked because Cargo unified the features of `bstr` between the two packages. However, after updating to Rust 2021, the new resolver will build `bstr` twice, once with the default features (as a build dependency), and once with no features (as our normal dependency). Since `bstr` is now being built without the \"unicode\" feature, the `words_with_breaks` method doesn't exist, and the build will fail with an error that the method is missing.\n\nThe solution here is to ensure that the dependency is declared with the features you are actually using. For example:\n\n```toml\n[dependencies]\nbstr = { version = \"0.2.16\", default-features = false, features = [\"unicode\"] }\n\n```\n\nIn some cases, this may be a problem with a third-party dependency that you don't have direct control over. You can consider submitting a patch to that project to try to declare the correct set of features for the problematic dependency. Alternatively, you can add features to any dependency from within your own `Cargo.toml` file. For example, if the `bstr` example given above was declared in some third-party dependency, you can just copy the correct dependency declaration into your own project. The features will be unified, as long as they match the unification rules of the new resolver. Those are:\n\n-   Features enabled on platform-specific dependencies for targets not currently being built are ignored.\n-   Build-dependencies and proc-macros do not share features with normal dependencies.\n-   Dev-dependencies do not activate features unless building a target that needs them (like tests or examples).\n\nA real-world example is using [`diesel`](https://crates.io/crates/diesel) and [`diesel_migrations`](https://crates.io/crates/diesel_migrations). These packages provide database support, and the database is selected using a feature, like this:\n\n```toml\n[dependencies]\ndiesel = { version = \"1.4.7\", features = [\"postgres\"] }\ndiesel_migrations = \"1.4.0\"\n\n```\n\nThe problem is that `diesel_migrations` has an internal proc-macro which itself depends on `diesel`, and the proc-macro assumes its own copy of `diesel` has the same features enabled as the rest of the dependency graph. After updating to the new resolver, it fails to build because now there are two copies of `diesel`, and the one built for the proc-macro is missing the \"postgres\" feature.\n\nA solution here is to add `diesel` as a build-dependency with the required features, for example:\n\n```toml\n[build-dependencies]\ndiesel = { version = \"1.4.7\", features = [\"postgres\"] }\n\n```\n\nThis causes Cargo to add \"postgres\" as a feature for host dependencies (proc-macros and build-dependencies). Now, the `diesel_migrations` proc-macro will get the \"postgres\" feature enabled, and it will build correctly.\n\nThe 2.0 release of `diesel` (currently in development) does not have this problem as it has been restructured to not have this dependency requirement.\n\n### [Exploring features](#exploring-features)\n\nThe [`cargo tree`](../../cargo/commands/cargo-tree.html) command has had substantial improvements to help with the migration to the new resolver. `cargo tree` can be used to explore the dependency graph, and to see which features are being enabled, and importantly _why_ they are being enabled.\n\nOne option is to use the `--duplicates` flag (`-d` for short), which will tell you when a package is being built multiple times. Taking the `bstr` example from earlier, we might see:\n\n```console\n> cargo tree -d\nbstr v0.2.16\n└── foo v0.1.0 (/MyProjects/foo)\n\nbstr v0.2.16\n[build-dependencies]\n└── bar v0.1.0\n    └── foo v0.1.0 (/MyProjects/foo)\n\n\n```\n\nThis output tells us that `bstr` is built twice, and shows the chain of dependencies that led to its inclusion in both cases.\n\nYou can print which features each package is using with the `-f` flag, like this:\n\n```console\ncargo tree -f '{p} {f}'\n\n```\n\nThis tells Cargo to change the \"format\" of the output, where it will print both the package and the enabled features.\n\nYou can also use the `-e` flag to tell it which \"edges\" to display. For example, `cargo tree -e features` will show in-between each dependency which features are being added by each dependency. This option becomes more useful with the `-i` flag which can be used to \"invert\" the tree. This allows you to see how features _flow_ into a given dependency. For example, let's say the dependency graph is large, and we're not quite sure who is depending on `bstr`, the following command will show that:\n\n```console\n> cargo tree -e features -i bstr\nbstr v0.2.16\n├── bstr feature \"default\"\n│   [build-dependencies]\n│   └── bar v0.1.0\n│       └── bar feature \"default\"\n│           └── foo v0.1.0 (/MyProjects/foo)\n├── bstr feature \"lazy_static\"\n│   └── bstr feature \"unicode\"\n│       └── bstr feature \"default\" (*)\n├── bstr feature \"regex-automata\"\n│   └── bstr feature \"unicode\" (*)\n├── bstr feature \"std\"\n│   └── bstr feature \"default\" (*)\n└── bstr feature \"unicode\" (*)\n\n```\n\nThis snippet of output shows that the project `foo` depends on `bar` with the \"default\" feature. Then, `bar` depends on `bstr` as a build-dependency with the \"default\" feature. We can further see that `bstr`'s \"default\" feature enables \"unicode\" (among other features).",
	"html": "<!DOCTYPE html><html lang=\"en\" class=\"light\" dir=\"ltr\"><head>\n        <!-- Book generated using mdBook -->\n        <meta charset=\"UTF-8\">\n        <title>Default Cargo feature resolver - The Rust Edition Guide</title>\n\n\n        <!-- Custom HTML head -->\n        \n        <meta name=\"description\" content=\"\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <meta name=\"theme-color\" content=\"rgb(255, 255, 255)\">\n\n        <link rel=\"icon\" href=\"../favicon.svg\">\n        <link rel=\"shortcut icon\" href=\"../favicon.png\">\n        <link rel=\"stylesheet\" href=\"../css/variables.css\">\n        <link rel=\"stylesheet\" href=\"../css/general.css\">\n        <link rel=\"stylesheet\" href=\"../css/chrome.css\">\n        <link rel=\"stylesheet\" href=\"../css/print.css\" media=\"print\">\n\n        <!-- Fonts -->\n        <link rel=\"stylesheet\" href=\"../FontAwesome/css/font-awesome.css\">\n        <link rel=\"stylesheet\" href=\"../fonts/fonts.css\">\n\n        <!-- Highlight.js Stylesheets -->\n        <link rel=\"stylesheet\" href=\"../highlight.css\">\n        <link rel=\"stylesheet\" href=\"../tomorrow-night.css\" disabled=\"\">\n        <link rel=\"stylesheet\" href=\"../ayu-highlight.css\" disabled=\"\">\n\n        <!-- Custom theme stylesheets -->\n\n    </head>\n    <body class=\"js sidebar-visible\">\n    <div id=\"body-container\">\n        <!-- Provide site root to javascript -->\n        <script>\n            var path_to_root = \"../\";\n            var default_theme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"navy\" : \"light\";\n        </script>\n\n        <!-- Work around some values being stored in localStorage wrapped in quotes -->\n        <script>\n            try {\n                var theme = localStorage.getItem('mdbook-theme');\n                var sidebar = localStorage.getItem('mdbook-sidebar');\n\n                if (theme.startsWith('\"') && theme.endsWith('\"')) {\n                    localStorage.setItem('mdbook-theme', theme.slice(1, theme.length - 1));\n                }\n\n                if (sidebar.startsWith('\"') && sidebar.endsWith('\"')) {\n                    localStorage.setItem('mdbook-sidebar', sidebar.slice(1, sidebar.length - 1));\n                }\n            } catch (e) { }\n        </script>\n\n        <!-- Set the theme before any content is loaded, prevents flash -->\n        <script>\n            var theme;\n            try { theme = localStorage.getItem('mdbook-theme'); } catch(e) { }\n            if (theme === null || theme === undefined) { theme = default_theme; }\n            var html = document.querySelector('html');\n            html.classList.remove('light')\n            html.classList.add(theme);\n            var body = document.querySelector('body');\n            body.classList.remove('no-js')\n            body.classList.add('js');\n        </script>\n\n        <input type=\"checkbox\" id=\"sidebar-toggle-anchor\" class=\"hidden\">\n\n        <!-- Hide / unhide sidebar before it is displayed -->\n        <script>\n            var body = document.querySelector('body');\n            var sidebar = null;\n            var sidebar_toggle = document.getElementById(\"sidebar-toggle-anchor\");\n            if (document.body.clientWidth >= 1080) {\n                try { sidebar = localStorage.getItem('mdbook-sidebar'); } catch(e) { }\n                sidebar = sidebar || 'visible';\n            } else {\n                sidebar = 'hidden';\n            }\n            sidebar_toggle.checked = sidebar === 'visible';\n            body.classList.remove('sidebar-visible');\n            body.classList.add(\"sidebar-\" + sidebar);\n        </script>\n\n        <nav id=\"sidebar\" class=\"sidebar\" aria-label=\"Table of contents\" aria-hidden=\"false\">\n            <div class=\"sidebar-scrollbox\">\n                <ol class=\"chapter\"><li class=\"chapter-item expanded affix \"><a href=\"../introduction.html\" tabindex=\"0\">Introduction</a></li><li class=\"chapter-item expanded \"><a href=\"../editions/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.</strong> What are editions?</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../editions/creating-a-new-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.1.</strong> Creating a new project</a></li><li class=\"chapter-item expanded \"><a href=\"../editions/transitioning-an-existing-project-to-a-new-edition.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.2.</strong> Transitioning an existing project to a new edition</a></li><li class=\"chapter-item expanded \"><a href=\"../editions/advanced-migrations.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.3.</strong> Advanced migrations</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../rust-2015/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.</strong> Rust 2015</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2018/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.</strong> Rust 2018</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../rust-2018/path-changes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.1.</strong> Path and module system changes</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2018/trait-fn-parameters.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.2.</strong> Anonymous trait function parameters deprecated</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2018/new-keywords.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.3.</strong> New keywords</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2018/tyvar-behind-raw-pointer.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.4.</strong> Method dispatch for raw pointers to inference variables</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2018/cargo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.5.</strong> Cargo changes</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../rust-2021/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.</strong> Rust 2021</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../rust-2021/prelude.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.</strong> Additions to the prelude</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2021/default-cargo-resolver.html\" class=\"active\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.</strong> Default Cargo feature resolver</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2021/IntoIterator-for-arrays.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.</strong> IntoIterator for arrays</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2021/disjoint-capture-in-closures.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.</strong> Disjoint capture in closures</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2021/panic-macro-consistency.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.</strong> Panic macro consistency</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2021/reserving-syntax.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.6.</strong> Reserving syntax</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2021/warnings-promoted-to-error.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.7.</strong> Warnings promoted to errors</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2021/or-patterns-macro-rules.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.8.</strong> Or patterns in macro-rules</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2021/c-string-literals.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.9.</strong> C-string literals</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../rust-2024/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.</strong> Rust 2024 🚧</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../rust-2024/prelude.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.1.</strong> Additions to the prelude</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2024/unsafe-op-in-unsafe-fn.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.2.</strong> unsafe_op_in_unsafe_fn warning</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2024/rpit-lifetime-capture.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.3.</strong> RPIT lifetime capture</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2024/static-mut-reference.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.4.</strong> Disallow references to static mut</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2024/public-private-dependencies.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.5.</strong> Public/private dependencies</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2024/cargo-remove-implicit-features.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.6.</strong> Cargo: Remove implicit features</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2024/cargo-table-key-names.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.7.</strong> Cargo: Table and key name consistency</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2024/cargo-inherited-default-features.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.8.</strong> Cargo: Reject unused inherited default-features</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2024/rustfmt-overflow-delimited-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.9.</strong> Rustfmt: Combine all delimited exprs as last argument</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2024/gen-keyword.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.10.</strong> gen keyword</a></li></ol></li></ol>\n            </div>\n            <div id=\"sidebar-resize-handle\" class=\"sidebar-resize-handle\">\n                <div class=\"sidebar-resize-indicator\"></div>\n            </div>\n        </nav>\n\n        <!-- Track and set sidebar scroll position -->\n        <script>\n            var sidebarScrollbox = document.querySelector('#sidebar .sidebar-scrollbox');\n            sidebarScrollbox.addEventListener('click', function(e) {\n                if (e.target.tagName === 'A') {\n                    sessionStorage.setItem('sidebar-scroll', sidebarScrollbox.scrollTop);\n                }\n            }, { passive: true });\n            var sidebarScrollTop = sessionStorage.getItem('sidebar-scroll');\n            sessionStorage.removeItem('sidebar-scroll');\n            if (sidebarScrollTop) {\n                // preserve sidebar scroll position when navigating via links within sidebar\n                sidebarScrollbox.scrollTop = sidebarScrollTop;\n            } else {\n                // scroll sidebar to current active section when navigating via \"next/previous chapter\" buttons\n                var activeSection = document.querySelector('#sidebar .active');\n                if (activeSection) {\n                    activeSection.scrollIntoView({ block: 'center' });\n                }\n            }\n        </script>\n\n        <div id=\"page-wrapper\" class=\"page-wrapper\">\n\n            <div class=\"page\">\n                                <div id=\"menu-bar-hover-placeholder\"></div>\n                <div id=\"menu-bar\" class=\"menu-bar\" style=\"top: 0px;\">\n                    <div class=\"left-buttons\">\n                        <label id=\"sidebar-toggle\" class=\"icon-button\" for=\"sidebar-toggle-anchor\" title=\"Toggle Table of Contents\" aria-label=\"Toggle Table of Contents\" aria-controls=\"sidebar\" aria-expanded=\"true\">\n                            <i class=\"fa fa-bars\"></i>\n                        </label>\n                        <button id=\"theme-toggle\" class=\"icon-button\" type=\"button\" title=\"Change theme\" aria-label=\"Change theme\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-controls=\"theme-list\">\n                            <i class=\"fa fa-paint-brush\"></i>\n                        </button>\n                        <ul id=\"theme-list\" class=\"theme-popup\" aria-label=\"Themes\" role=\"menu\">\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme theme-selected\" id=\"light\">Light</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"rust\">Rust</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"coal\">Coal</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"navy\">Navy</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"ayu\">Ayu</button></li>\n                        </ul>\n                        <button id=\"search-toggle\" class=\"icon-button\" type=\"button\" title=\"Search. (Shortkey: s)\" aria-label=\"Toggle Searchbar\" aria-expanded=\"false\" aria-keyshortcuts=\"S\" aria-controls=\"searchbar\">\n                            <i class=\"fa fa-search\"></i>\n                        </button>\n                    </div>\n\n                    <h1 class=\"menu-title\">The Rust Edition Guide</h1>\n\n                    <div class=\"right-buttons\">\n                        <a href=\"../print.html\" title=\"Print this book\" aria-label=\"Print this book\">\n                            <i id=\"print-button\" class=\"fa fa-print\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/edition-guide\" title=\"Git repository\" aria-label=\"Git repository\">\n                            <i id=\"git-repository-button\" class=\"fa fa-github\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/edition-guide/edit/master/src/rust-2021/default-cargo-resolver.md\" title=\"Suggest an edit\" aria-label=\"Suggest an edit\">\n                            <i id=\"git-edit-button\" class=\"fa fa-edit\"></i>\n                        </a>\n\n                    </div>\n                </div>\n\n                <div id=\"search-wrapper\" class=\"hidden\">\n                    <form id=\"searchbar-outer\" class=\"searchbar-outer\">\n                        <input type=\"search\" id=\"searchbar\" name=\"searchbar\" placeholder=\"Search this book ...\" aria-controls=\"searchresults-outer\" aria-describedby=\"searchresults-header\">\n                    </form>\n                    <div id=\"searchresults-outer\" class=\"searchresults-outer hidden\">\n                        <div id=\"searchresults-header\" class=\"searchresults-header\"></div>\n                        <ul id=\"searchresults\">\n                        </ul>\n                    </div>\n                </div>\n\n                <!-- Apply ARIA attributes after the sidebar and the sidebar toggle button are added to the DOM -->\n                <script>\n                    document.getElementById('sidebar-toggle').setAttribute('aria-expanded', sidebar === 'visible');\n                    document.getElementById('sidebar').setAttribute('aria-hidden', sidebar !== 'visible');\n                    Array.from(document.querySelectorAll('#sidebar a')).forEach(function(link) {\n                        link.setAttribute('tabIndex', sidebar === 'visible' ? 0 : -1);\n                    });\n                </script>\n\n                <div id=\"content\" class=\"content\">\n                    <main>\n                        <h1 id=\"default-cargo-feature-resolver\"><a class=\"header\" href=\"#default-cargo-feature-resolver\">Default Cargo feature resolver</a></h1>\n<h2 id=\"summary\"><a class=\"header\" href=\"#summary\">Summary</a></h2>\n<ul>\n<li><code class=\"hljs\">edition = \"2021\"</code> implies <code class=\"hljs\">resolver = \"2\"</code> in <code class=\"hljs\">Cargo.toml</code>.</li>\n</ul>\n<h2 id=\"details\"><a class=\"header\" href=\"#details\">Details</a></h2>\n<p>Since Rust 1.51.0, Cargo has opt-in support for a <a href=\"../../cargo/reference/resolver.html#feature-resolver-version-2\">new feature resolver</a>\nwhich can be activated with <code class=\"hljs\">resolver = \"2\"</code> in <code class=\"hljs\">Cargo.toml</code>.</p>\n<p>Starting in Rust 2021, this will be the default.\nThat is, writing <code class=\"hljs\">edition = \"2021\"</code> in <code class=\"hljs\">Cargo.toml</code> will imply <code class=\"hljs\">resolver = \"2\"</code>.</p>\n<p>The resolver is a global setting for a <a href=\"../../cargo/reference/workspaces.html\">workspace</a>, and the setting is ignored in dependencies.\nThe setting is only honored for the top-level package of the workspace.\nIf you are using a <a href=\"../../cargo/reference/workspaces.html#virtual-workspace\">virtual workspace</a>, you will still need to explicitly set the <a href=\"../../cargo/reference/resolver.html#resolver-versions\"><code class=\"hljs\">resolver</code> field</a>\nin the <code class=\"hljs\">[workspace]</code> definition if you want to opt-in to the new resolver.</p>\n<p>The new feature resolver no longer merges all requested features for\ncrates that are depended on in multiple ways.\nSee <a href=\"https://blog.rust-lang.org/2021/03/25/Rust-1.51.0.html#cargos-new-feature-resolver\">the announcement of Rust 1.51</a> for details.</p>\n<h2 id=\"migration\"><a class=\"header\" href=\"#migration\">Migration</a></h2>\n<p>There are no automated migration tools for updating for the new resolver.\nFor most projects, there are usually few or no changes as a result of updating.</p>\n<p>When updating with <code class=\"hljs\">cargo fix --edition</code>, Cargo will display a report if the new resolver will build dependencies with different features.\nIt may look something like this:</p>\n<blockquote>\n<p>note: Switching to Edition 2021 will enable the use of the version 2 feature resolver in Cargo.\nThis may cause some dependencies to be built with fewer features enabled than previously.\nMore information about the resolver changes may be found at <a href=\"https://doc.rust-lang.org/nightly/edition-guide/rust-2021/default-cargo-resolver.html\">https://doc.rust-lang.org/nightly/edition-guide/rust-2021/default-cargo-resolver.html</a><br>\nWhen building the following dependencies, the given features will no longer be used:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">  bstr v0.2.16: default, lazy_static, regex-automata, unicode\n  libz-sys v1.1.3 (as host dependency): libc\n</code></pre>\n</blockquote>\n<p>This lets you know that certain dependencies will no longer be built with the given features.</p>\n<h3 id=\"build-failures\"><a class=\"header\" href=\"#build-failures\">Build failures</a></h3>\n<p>There may be some circumstances where your project may not build correctly after the change.\nIf a dependency declaration in one package assumes that certain features are enabled in another, and those features are now disabled, it may fail to compile.</p>\n<p>For example, let's say we have a dependency like this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-comment\"># Cargo.toml</span>\n\n<span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">bstr</span> = { version = <span class=\"hljs-string\">\"0.2.16\"</span>, default-features = <span class=\"hljs-literal\">false</span> }\n<span class=\"hljs-comment\"># ...</span>\n</code></pre>\n<p>And somewhere in our dependency tree, another package has this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-comment\"># Another package's Cargo.toml</span>\n\n<span class=\"hljs-section\">[build-dependencies]</span>\n<span class=\"hljs-attr\">bstr</span> = <span class=\"hljs-string\">\"0.2.16\"</span>\n</code></pre>\n<p>In our package, we've been using the <a href=\"https://docs.rs/bstr/0.2.16/bstr/trait.ByteSlice.html#method.words_with_breaks\"><code class=\"hljs\">words_with_breaks</code></a> method from <code class=\"hljs\">bstr</code>, which requires <code class=\"hljs\">bstr</code>'s  \"unicode\" feature to be enabled.\nThis has historically worked because Cargo unified the features of <code class=\"hljs\">bstr</code> between the two packages.\nHowever, after updating to Rust 2021, the new resolver will build <code class=\"hljs\">bstr</code> twice, once with the default features (as a build dependency), and once with no features (as our normal dependency).\nSince <code class=\"hljs\">bstr</code> is now being built without the \"unicode\" feature, the <code class=\"hljs\">words_with_breaks</code> method doesn't exist, and the build will fail with an error that the method is missing.</p>\n<p>The solution here is to ensure that the dependency is declared with the features you are actually using.\nFor example:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">bstr</span> = { version = <span class=\"hljs-string\">\"0.2.16\"</span>, default-features = <span class=\"hljs-literal\">false</span>, features = [<span class=\"hljs-string\">\"unicode\"</span>] }\n</code></pre>\n<p>In some cases, this may be a problem with a third-party dependency that you don't have direct control over.\nYou can consider submitting a patch to that project to try to declare the correct set of features for the problematic dependency.\nAlternatively, you can add features to any dependency from within your own <code class=\"hljs\">Cargo.toml</code> file.\nFor example, if the <code class=\"hljs\">bstr</code> example given above was declared in some third-party dependency, you can just copy the correct dependency declaration into your own project.\nThe features will be unified, as long as they match the unification rules of the new resolver. Those are:</p>\n<ul>\n<li>Features enabled on platform-specific dependencies for targets not currently being built are ignored.</li>\n<li>Build-dependencies and proc-macros do not share features with normal dependencies.</li>\n<li>Dev-dependencies do not activate features unless building a target that needs them (like tests or examples).</li>\n</ul>\n<p>A real-world example is using <a href=\"https://crates.io/crates/diesel\"><code class=\"hljs\">diesel</code></a> and <a href=\"https://crates.io/crates/diesel_migrations\"><code class=\"hljs\">diesel_migrations</code></a>.\nThese packages provide database support, and the database is selected using a feature, like this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">diesel</span> = { version = <span class=\"hljs-string\">\"1.4.7\"</span>, features = [<span class=\"hljs-string\">\"postgres\"</span>] }\n<span class=\"hljs-attr\">diesel_migrations</span> = <span class=\"hljs-string\">\"1.4.0\"</span>\n</code></pre>\n<p>The problem is that <code class=\"hljs\">diesel_migrations</code> has an internal proc-macro which itself depends on <code class=\"hljs\">diesel</code>, and the proc-macro assumes its own copy of <code class=\"hljs\">diesel</code> has the same features enabled as the rest of the dependency graph.\nAfter updating to the new resolver, it fails to build because now there are two copies of <code class=\"hljs\">diesel</code>, and the one built for the proc-macro is missing the \"postgres\" feature.</p>\n<p>A solution here is to add <code class=\"hljs\">diesel</code> as a build-dependency with the required features, for example:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[build-dependencies]</span>\n<span class=\"hljs-attr\">diesel</span> = { version = <span class=\"hljs-string\">\"1.4.7\"</span>, features = [<span class=\"hljs-string\">\"postgres\"</span>] }\n</code></pre>\n<p>This causes Cargo to add \"postgres\" as a feature for host dependencies (proc-macros and build-dependencies).\nNow, the <code class=\"hljs\">diesel_migrations</code> proc-macro will get the \"postgres\" feature enabled, and it will build correctly.</p>\n<p>The 2.0 release of <code class=\"hljs\">diesel</code> (currently in development) does not have this problem as it has been restructured to not have this dependency requirement.</p>\n<h3 id=\"exploring-features\"><a class=\"header\" href=\"#exploring-features\">Exploring features</a></h3>\n<p>The <a href=\"../../cargo/commands/cargo-tree.html\"><code class=\"hljs\">cargo tree</code></a> command has had substantial improvements to help with the migration to the new resolver.\n<code class=\"hljs\">cargo tree</code> can be used to explore the dependency graph, and to see which features are being enabled, and importantly <em>why</em> they are being enabled.</p>\n<p>One option is to use the <code class=\"hljs\">--duplicates</code> flag (<code class=\"hljs\">-d</code> for short), which will tell you when a package is being built multiple times.\nTaking the <code class=\"hljs\">bstr</code> example from earlier, we might see:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">&gt;</span><span class=\"bash\"> cargo tree -d</span>\nbstr v0.2.16\n└── foo v0.1.0 (/MyProjects/foo)\n\nbstr v0.2.16\n[build-dependencies]\n└── bar v0.1.0\n    └── foo v0.1.0 (/MyProjects/foo)\n\n</code></pre>\n<p>This output tells us that <code class=\"hljs\">bstr</code> is built twice, and shows the chain of dependencies that led to its inclusion in both cases.</p>\n<p>You can print which features each package is using with the <code class=\"hljs\">-f</code> flag, like this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\">cargo tree -f '{p} {f}'\n</code></pre>\n<p>This tells Cargo to change the \"format\" of the output, where it will print both the package and the enabled features.</p>\n<p>You can also use the <code class=\"hljs\">-e</code> flag to tell it which \"edges\" to display.\nFor example, <code class=\"hljs\">cargo tree -e features</code> will show in-between each dependency which features are being added by each dependency.\nThis option becomes more useful with the <code class=\"hljs\">-i</code> flag which can be used to \"invert\" the tree.\nThis allows you to see how features <em>flow</em> into a given dependency.\nFor example, let's say the dependency graph is large, and we're not quite sure who is depending on <code class=\"hljs\">bstr</code>, the following command will show that:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">&gt;</span><span class=\"bash\"> cargo tree -e features -i bstr</span>\nbstr v0.2.16\n├── bstr feature \"default\"\n│   [build-dependencies]\n│   └── bar v0.1.0\n│       └── bar feature \"default\"\n│           └── foo v0.1.0 (/MyProjects/foo)\n├── bstr feature \"lazy_static\"\n│   └── bstr feature \"unicode\"\n│       └── bstr feature \"default\" (*)\n├── bstr feature \"regex-automata\"\n│   └── bstr feature \"unicode\" (*)\n├── bstr feature \"std\"\n│   └── bstr feature \"default\" (*)\n└── bstr feature \"unicode\" (*)\n</code></pre>\n<p>This snippet of output shows that the project <code class=\"hljs\">foo</code> depends on <code class=\"hljs\">bar</code> with the \"default\" feature.\nThen, <code class=\"hljs\">bar</code> depends on <code class=\"hljs\">bstr</code> as a build-dependency with the \"default\" feature.\nWe can further see that <code class=\"hljs\">bstr</code>'s  \"default\" feature enables \"unicode\" (among other features).</p>\n\n                    </main>\n\n                    <nav class=\"nav-wrapper\" aria-label=\"Page navigation\">\n                        <!-- Mobile navigation buttons -->\n                            <a rel=\"prev\" href=\"../rust-2021/prelude.html\" class=\"mobile-nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                                <i class=\"fa fa-angle-left\"></i>\n                            </a>\n\n                            <a rel=\"next prefetch\" href=\"../rust-2021/IntoIterator-for-arrays.html\" class=\"mobile-nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                                <i class=\"fa fa-angle-right\"></i>\n                            </a>\n\n                        <div style=\"clear: both\"></div>\n                    </nav>\n                </div>\n            </div>\n\n            <nav class=\"nav-wide-wrapper\" aria-label=\"Page navigation\">\n                    <a rel=\"prev\" href=\"../rust-2021/prelude.html\" class=\"nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                        <i class=\"fa fa-angle-left\"></i>\n                    </a>\n\n                    <a rel=\"next prefetch\" href=\"../rust-2021/IntoIterator-for-arrays.html\" class=\"nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                        <i class=\"fa fa-angle-right\"></i>\n                    </a>\n            </nav>\n\n        </div>\n\n\n\n\n        <script>\n            window.playground_copyable = true;\n        </script>\n\n\n        <script src=\"../elasticlunr.min.js\"></script>\n        <script src=\"../mark.min.js\"></script>\n        <script src=\"../searcher.js\"></script>\n\n        <script src=\"../clipboard.min.js\"></script>\n        <script src=\"../highlight.js\"></script>\n        <script src=\"../book.js\"></script>\n\n        <!-- Custom JS scripts -->\n\n\n    </div>\n    \n\n</body></html>",
	"crawlDate": "2024-07-28T05:20:31.561Z"
}