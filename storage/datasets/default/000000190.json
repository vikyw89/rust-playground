{
	"title": "cargo test - The Cargo Book",
	"url": "https://doc.rust-lang.org/cargo/commands/cargo-test.html",
	"markdown": "# cargo test - The Cargo Book\n\n## [NAME](#name)\n\ncargo-test — Execute unit and integration tests of a package\n\n## [SYNOPSIS](#synopsis)\n\n`cargo test` \\[_options_\\] \\[_testname_\\] \\[`--` _test-options_\\]\n\n## [DESCRIPTION](#description)\n\nCompile and execute unit, integration, and documentation tests.\n\nThe test filtering argument `TESTNAME` and all the arguments following the two dashes (`--`) are passed to the test binaries and thus to _libtest_ (rustc’s built in unit-test and micro-benchmarking framework). If you’re passing arguments to both Cargo and the binary, the ones after `--` go to the binary, the ones before go to Cargo. For details about libtest’s arguments see the output of `cargo test -- --help` and check out the rustc book’s chapter on how tests work at [https://doc.rust-lang.org/rustc/tests/index.html](https://doc.rust-lang.org/rustc/tests/index.html).\n\nAs an example, this will filter for tests with `foo` in their name and run them on 3 threads in parallel:\n\n```\ncargo test foo -- --test-threads 3\n\n```\n\nTests are built with the `--test` option to `rustc` which creates a special executable by linking your code with libtest. The executable automatically runs all functions annotated with the `#[test]` attribute in multiple threads. `#[bench]` annotated functions will also be run with one iteration to verify that they are functional.\n\nIf the package contains multiple test targets, each target compiles to a special executable as aforementioned, and then is run serially.\n\nThe libtest harness may be disabled by setting `harness = false` in the target manifest settings, in which case your code will need to provide its own `main` function to handle running tests.\n\n### [Documentation tests](#documentation-tests)\n\nDocumentation tests are also run by default, which is handled by `rustdoc`. It extracts code samples from documentation comments of the library target, and then executes them.\n\nDifferent from normal test targets, each code block compiles to a doctest executable on the fly with `rustc`. These executables run in parallel in separate processes. The compilation of a code block is in fact a part of test function controlled by libtest, so some options such as `--jobs` might not take effect. Note that this execution model of doctests is not guaranteed and may change in the future; beware of depending on it.\n\nSee the [rustdoc book](https://doc.rust-lang.org/rustdoc/) for more information on writing doc tests.\n\n### [Working directory of tests](#working-directory-of-tests)\n\nThe working directory when running each unit and integration test is set to the root directory of the package the test belongs to. Setting the working directory of tests to the package’s root directory makes it possible for tests to reliably access the package’s files using relative paths, regardless from where `cargo test` was executed from.\n\nFor documentation tests, the working directory when invoking `rustdoc` is set to the workspace root directory, and is also the directory `rustdoc` uses as the compilation directory of each documentation test. The working directory when running each documentation test is set to the root directory of the package the test belongs to, and is controlled via `rustdoc`’s `--test-run-directory` option.\n\n## [OPTIONS](#options)\n\n### [Test Options](#test-options)\n\n`--no-run`\n\nCompile, but don’t run tests.\n\n`--no-fail-fast`\n\nRun all tests regardless of failure. Without this flag, Cargo will exit after the first executable fails. The Rust test harness will run all tests within the executable to completion, this flag only applies to the executable as a whole.\n\n### [Package Selection](#package-selection)\n\nBy default, when no package selection options are given, the packages selected depend on the selected manifest file (based on the current working directory if `--manifest-path` is not given). If the manifest is the root of a workspace then the workspaces default members are selected, otherwise only the package defined by the manifest will be selected.\n\nThe default members of a workspace can be set explicitly with the `workspace.default-members` key in the root manifest. If this is not set, a virtual workspace will include all workspace members (equivalent to passing `--workspace`), and a non-virtual workspace will include only the root crate itself.\n\n`-p` _spec_…\n\n`--package` _spec_…\n\nTest only the specified packages. See [cargo-pkgid(1)](cargo-pkgid.html) for the SPEC format. This flag may be specified multiple times and supports common Unix glob patterns like `*`, `?` and `[]`. However, to avoid your shell accidentally expanding glob patterns before Cargo handles them, you must use single quotes or double quotes around each pattern.\n\n`--workspace`\n\nTest all members in the workspace.\n\n`--all`\n\nDeprecated alias for `--workspace`.\n\n`--exclude` _SPEC_…\n\nExclude the specified packages. Must be used in conjunction with the `--workspace` flag. This flag may be specified multiple times and supports common Unix glob patterns like `*`, `?` and `[]`. However, to avoid your shell accidentally expanding glob patterns before Cargo handles them, you must use single quotes or double quotes around each pattern.\n\n### [Target Selection](#target-selection)\n\nWhen no target selection options are given, `cargo test` will build the following targets of the selected packages:\n\n-   lib — used to link with binaries, examples, integration tests, and doc tests\n-   bins (only if integration tests are built and required features are available)\n-   examples — to ensure they compile\n-   lib as a unit test\n-   bins as unit tests\n-   integration tests\n-   doc tests for the lib target\n\nThe default behavior can be changed by setting the `test` flag for the target in the manifest settings. Setting examples to `test = true` will build and run the example as a test, replacing the example’s `main` function with the libtest harness. If you don’t want the `main` function replaced, also include `harness = false`, in which case the example will be built and executed as-is.\n\nSetting targets to `test = false` will stop them from being tested by default. Target selection options that take a target by name (such as `--example foo`) ignore the `test` flag and will always test the given target.\n\nDoc tests for libraries may be disabled by setting `doctest = false` for the library in the manifest.\n\nSee [Configuring a target](about:blank/reference/cargo-targets.html#configuring-a-target) for more information on per-target settings.\n\nBinary targets are automatically built if there is an integration test or benchmark being selected to test. This allows an integration test to execute the binary to exercise and test its behavior. The `CARGO_BIN_EXE_<name>` [environment variable](about:blank/reference/environment-variables.html#environment-variables-cargo-sets-for-crates) is set when the integration test is built so that it can use the [`env` macro](https://doc.rust-lang.org/std/macro.env.html) to locate the executable.\n\nPassing target selection flags will test only the specified targets.\n\nNote that `--bin`, `--example`, `--test` and `--bench` flags also support common Unix glob patterns like `*`, `?` and `[]`. However, to avoid your shell accidentally expanding glob patterns before Cargo handles them, you must use single quotes or double quotes around each glob pattern.\n\n`--lib`\n\nTest the package’s library.\n\n`--bin` _name_…\n\nTest the specified binary. This flag may be specified multiple times and supports common Unix glob patterns.\n\n`--bins`\n\nTest all binary targets.\n\n`--example` _name_…\n\nTest the specified example. This flag may be specified multiple times and supports common Unix glob patterns.\n\n`--examples`\n\nTest all example targets.\n\n`--test` _name_…\n\nTest the specified integration test. This flag may be specified multiple times and supports common Unix glob patterns.\n\n`--tests`\n\nTest all targets in test mode that have the `test = true` manifest flag set. By default this includes the library and binaries built as unittests, and integration tests. Be aware that this will also build any required dependencies, so the lib target may be built twice (once as a unittest, and once as a dependency for binaries, integration tests, etc.). Targets may be enabled or disabled by setting the `test` flag in the manifest settings for the target.\n\n`--bench` _name_…\n\nTest the specified benchmark. This flag may be specified multiple times and supports common Unix glob patterns.\n\n`--benches`\n\nTest all targets in benchmark mode that have the `bench = true` manifest flag set. By default this includes the library and binaries built as benchmarks, and bench targets. Be aware that this will also build any required dependencies, so the lib target may be built twice (once as a benchmark, and once as a dependency for binaries, benchmarks, etc.). Targets may be enabled or disabled by setting the `bench` flag in the manifest settings for the target.\n\n`--all-targets`\n\nTest all targets. This is equivalent to specifying `--lib --bins --tests --benches --examples`.\n\n`--doc`\n\nTest only the library’s documentation. This cannot be mixed with other target options.\n\n### [Feature Selection](#feature-selection)\n\nThe feature flags allow you to control which features are enabled. When no feature options are given, the `default` feature is activated for every selected package.\n\nSee [the features documentation](about:blank/reference/features.html#command-line-feature-options) for more details.\n\n`-F` _features_\n\n`--features` _features_\n\nSpace or comma separated list of features to activate. Features of workspace members may be enabled with `package-name/feature-name` syntax. This flag may be specified multiple times, which enables all specified features.\n\n`--all-features`\n\nActivate all available features of all selected packages.\n\n`--no-default-features`\n\nDo not activate the `default` feature of the selected packages.\n\n### [Compilation Options](#compilation-options)\n\n`--target` _triple_\n\nTest for the given architecture. The default is the host architecture. The general format of the triple is `<arch><sub>-<vendor>-<sys>-<abi>`. Run `rustc --print target-list` for a list of supported targets. This flag may be specified multiple times.\n\nThis may also be specified with the `build.target` [config value](../reference/config.html).\n\nNote that specifying this flag makes Cargo run in a different mode where the target artifacts are placed in a separate directory. See the [build cache](../guide/build-cache.html) documentation for more details.\n\n`-r`\n\n`--release`\n\nTest optimized artifacts with the `release` profile. See also the `--profile` option for choosing a specific profile by name.\n\n`--profile` _name_\n\nTest with the given profile. See [the reference](../reference/profiles.html) for more details on profiles.\n\n`--timings=`_fmts_\n\nOutput information how long each compilation takes, and track concurrency information over time. Accepts an optional comma-separated list of output formats; `--timings` without an argument will default to `--timings=html`. Specifying an output format (rather than the default) is unstable and requires `-Zunstable-options`. Valid output formats:\n\n-   `html` (unstable, requires `-Zunstable-options`): Write a human-readable file `cargo-timing.html` to the `target/cargo-timings` directory with a report of the compilation. Also write a report to the same directory with a timestamp in the filename if you want to look at older runs. HTML output is suitable for human consumption only, and does not provide machine-readable timing data.\n-   `json` (unstable, requires `-Zunstable-options`): Emit machine-readable JSON information about timing information.\n\n### [Output Options](#output-options)\n\n`--target-dir` _directory_\n\nDirectory for all generated artifacts and intermediate files. May also be specified with the `CARGO_TARGET_DIR` environment variable, or the `build.target-dir` [config value](../reference/config.html). Defaults to `target` in the root of the workspace.\n\n### [Display Options](#display-options)\n\nBy default the Rust test harness hides output from test execution to keep results readable. Test output can be recovered (e.g., for debugging) by passing `--nocapture` to the test binaries:\n\n```\ncargo test -- --nocapture\n\n```\n\n`-v`\n\n`--verbose`\n\nUse verbose output. May be specified twice for “very verbose” output which includes extra output such as dependency warnings and build script output. May also be specified with the `term.verbose` [config value](../reference/config.html).\n\n`-q`\n\n`--quiet`\n\nDo not print cargo log messages. May also be specified with the `term.quiet` [config value](../reference/config.html).\n\n`--color` _when_\n\nControl when colored output is used. Valid values:\n\n-   `auto` (default): Automatically detect if color support is available on the terminal.\n-   `always`: Always display colors.\n-   `never`: Never display colors.\n\nMay also be specified with the `term.color` [config value](../reference/config.html).\n\n`--message-format` _fmt_\n\nThe output format for diagnostic messages. Can be specified multiple times and consists of comma-separated values. Valid values:\n\n-   `human` (default): Display in a human-readable text format. Conflicts with `short` and `json`.\n-   `short`: Emit shorter, human-readable text messages. Conflicts with `human` and `json`.\n-   `json`: Emit JSON messages to stdout. See [the reference](about:blank/reference/external-tools.html#json-messages) for more details. Conflicts with `human` and `short`.\n-   `json-diagnostic-short`: Ensure the `rendered` field of JSON messages contains the “short” rendering from rustc. Cannot be used with `human` or `short`.\n-   `json-diagnostic-rendered-ansi`: Ensure the `rendered` field of JSON messages contains embedded ANSI color codes for respecting rustc’s default color scheme. Cannot be used with `human` or `short`.\n-   `json-render-diagnostics`: Instruct Cargo to not include rustc diagnostics in JSON messages printed, but instead Cargo itself should render the JSON diagnostics coming from rustc. Cargo’s own JSON diagnostics and others coming from rustc are still emitted. Cannot be used with `human` or `short`.\n\n### [Manifest Options](#manifest-options)\n\n`--manifest-path` _path_\n\nPath to the `Cargo.toml` file. By default, Cargo searches for the `Cargo.toml` file in the current directory or any parent directory.\n\n`--ignore-rust-version`\n\nIgnore `rust-version` specification in packages.\n\n`--locked`\n\nAsserts that the exact same dependencies and versions are used as when the existing `Cargo.lock` file was originally generated. Cargo will exit with an error when either of the following scenarios arises:\n\n-   The lock file is missing.\n-   Cargo attempted to change the lock file due to a different dependency resolution.\n\nIt may be used in environments where deterministic builds are desired, such as in CI pipelines.\n\n`--offline`\n\nPrevents Cargo from accessing the network for any reason. Without this flag, Cargo will stop with an error if it needs to access the network and the network is not available. With this flag, Cargo will attempt to proceed without the network if possible.\n\nBeware that this may result in different dependency resolution than online mode. Cargo will restrict itself to crates that are downloaded locally, even if there might be a newer version as indicated in the local copy of the index. See the [cargo-fetch(1)](cargo-fetch.html) command to download dependencies before going offline.\n\nMay also be specified with the `net.offline` [config value](../reference/config.html).\n\n`--frozen`\n\nEquivalent to specifying both `--locked` and `--offline`.\n\n### [Common Options](#common-options)\n\n`+`_toolchain_\n\nIf Cargo has been installed with rustup, and the first argument to `cargo` begins with `+`, it will be interpreted as a rustup toolchain name (such as `+stable` or `+nightly`). See the [rustup documentation](https://rust-lang.github.io/rustup/overrides.html) for more information about how toolchain overrides work.\n\n`--config` _KEY=VALUE_ or _PATH_\n\nOverrides a Cargo configuration value. The argument should be in TOML syntax of `KEY=VALUE`, or provided as a path to an extra configuration file. This flag may be specified multiple times. See the [command-line overrides section](about:blank/reference/config.html#command-line-overrides) for more information.\n\n`-C` _PATH_\n\nChanges the current working directory before executing any specified operations. This affects things like where cargo looks by default for the project manifest (`Cargo.toml`), as well as the directories searched for discovering `.cargo/config.toml`, for example. This option must appear before the command name, for example `cargo -C path/to/my-project build`.\n\nThis option is only available on the [nightly channel](https://doc.rust-lang.org/book/appendix-07-nightly-rust.html) and requires the `-Z unstable-options` flag to enable (see [#10098](https://github.com/rust-lang/cargo/issues/10098)).\n\n`-h`\n\n`--help`\n\nPrints help information.\n\n`-Z` _flag_\n\nUnstable (nightly-only) flags to Cargo. Run `cargo -Z help` for details.\n\n### [Miscellaneous Options](#miscellaneous-options)\n\nThe `--jobs` argument affects the building of the test executable but does not affect how many threads are used when running the tests. The Rust test harness includes an option to control the number of threads used:\n\n```\ncargo test -j 2 -- --test-threads=2\n\n```\n\n`-j` _N_\n\n`--jobs` _N_\n\nNumber of parallel jobs to run. May also be specified with the `build.jobs` [config value](../reference/config.html). Defaults to the number of logical CPUs. If negative, it sets the maximum number of parallel jobs to the number of logical CPUs plus provided value. If a string `default` is provided, it sets the value back to defaults. Should not be 0.\n\n`--future-incompat-report`\n\nDisplays a future-incompat report for any future-incompatible warnings produced during execution of this command\n\nSee [cargo-report(1)](cargo-report.html)\n\nWhile `cargo test` involves compilation, it does not provide a `--keep-going` flag. Use `--no-fail-fast` to run as many tests as possible without stopping at the first failure. To “compile” as many tests as possible, use `--tests` to build test binaries separately. For example:\n\n```\ncargo build --tests --keep-going\ncargo test --tests --no-fail-fast\n\n```\n\n## [ENVIRONMENT](#environment)\n\nSee [the reference](../reference/environment-variables.html) for details on environment variables that Cargo reads.\n\n## [EXIT STATUS](#exit-status)\n\n-   `0`: Cargo succeeded.\n-   `101`: Cargo failed to complete.\n\n## [EXAMPLES](#examples)\n\n1.  Execute all the unit and integration tests of the current package:\n    \n    ```\n    cargo test\n    \n    ```\n    \n2.  Run only tests whose names match against a filter string:\n    \n    ```\n    cargo test name_filter\n    \n    ```\n    \n3.  Run only a specific test within a specific integration test:\n    \n    ```\n    cargo test --test int_test_name -- modname::test_name\n    \n    ```\n    \n\n## [SEE ALSO](#see-also)\n\n[cargo(1)](cargo.html), [cargo-bench(1)](cargo-bench.html), [types of tests](about:blank/reference/cargo-targets.html#tests), [how to write tests](https://doc.rust-lang.org/rustc/tests/index.html)",
	"html": "<!DOCTYPE html><html lang=\"en\" class=\"light\" dir=\"ltr\"><head>\n        <!-- Book generated using mdBook -->\n        <meta charset=\"UTF-8\">\n        <title>cargo test - The Cargo Book</title>\n\n\n        <!-- Custom HTML head -->\n        <style>\n            dd {\n                margin-bottom: 1em;\n            }\n        </style>\n\n        <meta name=\"description\" content=\"\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <meta name=\"theme-color\" content=\"rgb(255, 255, 255)\">\n\n        <link rel=\"shortcut icon\" href=\"../favicon.png\">\n        <link rel=\"stylesheet\" href=\"../css/variables.css\">\n        <link rel=\"stylesheet\" href=\"../css/general.css\">\n        <link rel=\"stylesheet\" href=\"../css/chrome.css\">\n        <link rel=\"stylesheet\" href=\"../css/print.css\" media=\"print\">\n\n        <!-- Fonts -->\n        <link rel=\"stylesheet\" href=\"../FontAwesome/css/font-awesome.css\">\n        <link rel=\"stylesheet\" href=\"../fonts/fonts.css\">\n\n        <!-- Highlight.js Stylesheets -->\n        <link rel=\"stylesheet\" href=\"../highlight.css\">\n        <link rel=\"stylesheet\" href=\"../tomorrow-night.css\" disabled=\"\">\n        <link rel=\"stylesheet\" href=\"../ayu-highlight.css\" disabled=\"\">\n\n        <!-- Custom theme stylesheets -->\n\n    </head>\n    <body class=\"js sidebar-visible\">\n    <div id=\"body-container\">\n        <!-- Provide site root to javascript -->\n        <script>\n            var path_to_root = \"../\";\n            var default_theme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"navy\" : \"light\";\n        </script>\n\n        <!-- Work around some values being stored in localStorage wrapped in quotes -->\n        <script>\n            try {\n                var theme = localStorage.getItem('mdbook-theme');\n                var sidebar = localStorage.getItem('mdbook-sidebar');\n\n                if (theme.startsWith('\"') && theme.endsWith('\"')) {\n                    localStorage.setItem('mdbook-theme', theme.slice(1, theme.length - 1));\n                }\n\n                if (sidebar.startsWith('\"') && sidebar.endsWith('\"')) {\n                    localStorage.setItem('mdbook-sidebar', sidebar.slice(1, sidebar.length - 1));\n                }\n            } catch (e) { }\n        </script>\n\n        <!-- Set the theme before any content is loaded, prevents flash -->\n        <script>\n            var theme;\n            try { theme = localStorage.getItem('mdbook-theme'); } catch(e) { }\n            if (theme === null || theme === undefined) { theme = default_theme; }\n            var html = document.querySelector('html');\n            html.classList.remove('light')\n            html.classList.add(theme);\n            var body = document.querySelector('body');\n            body.classList.remove('no-js')\n            body.classList.add('js');\n        </script>\n\n        <input type=\"checkbox\" id=\"sidebar-toggle-anchor\" class=\"hidden\">\n\n        <!-- Hide / unhide sidebar before it is displayed -->\n        <script>\n            var body = document.querySelector('body');\n            var sidebar = null;\n            var sidebar_toggle = document.getElementById(\"sidebar-toggle-anchor\");\n            if (document.body.clientWidth >= 1080) {\n                try { sidebar = localStorage.getItem('mdbook-sidebar'); } catch(e) { }\n                sidebar = sidebar || 'visible';\n            } else {\n                sidebar = 'hidden';\n            }\n            sidebar_toggle.checked = sidebar === 'visible';\n            body.classList.remove('sidebar-visible');\n            body.classList.add(\"sidebar-\" + sidebar);\n        </script>\n\n        <nav id=\"sidebar\" class=\"sidebar\" aria-label=\"Table of contents\" aria-hidden=\"false\">\n            <div class=\"sidebar-scrollbox\">\n                <ol class=\"chapter\"><li class=\"chapter-item expanded affix \"><a href=\"../index.html\" tabindex=\"0\">Introduction</a></li><li class=\"chapter-item expanded \"><a href=\"../getting-started/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.</strong> Getting Started</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../getting-started/installation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.1.</strong> Installation</a></li><li class=\"chapter-item expanded \"><a href=\"../getting-started/first-steps.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.2.</strong> First Steps with Cargo</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../guide/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.</strong> Cargo Guide</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../guide/why-cargo-exists.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.1.</strong> Why Cargo Exists</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/creating-a-new-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.2.</strong> Creating a New Package</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/working-on-an-existing-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.3.</strong> Working on an Existing Package</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/dependencies.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.4.</strong> Dependencies</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/project-layout.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.5.</strong> Package Layout</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/cargo-toml-vs-cargo-lock.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.6.</strong> Cargo.toml vs Cargo.lock</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/tests.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.7.</strong> Tests</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/continuous-integration.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.8.</strong> Continuous Integration</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/cargo-home.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.9.</strong> Cargo Home</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/build-cache.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.10.</strong> Build Cache</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.</strong> Cargo Reference</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/specifying-dependencies.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.1.</strong> Specifying Dependencies</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/overriding-dependencies.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.1.1.</strong> Overriding Dependencies</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/manifest.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.2.</strong> The Manifest Format</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/cargo-targets.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.2.1.</strong> Cargo Targets</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/workspaces.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.3.</strong> Workspaces</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/features.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.4.</strong> Features</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/features-examples.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.4.1.</strong> Features Examples</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/profiles.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.5.</strong> Profiles</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/config.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.6.</strong> Configuration</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/environment-variables.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.7.</strong> Environment Variables</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/build-scripts.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.8.</strong> Build Scripts</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/build-script-examples.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.8.1.</strong> Build Script Examples</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/publishing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.9.</strong> Publishing on crates.io</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/pkgid-spec.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.10.</strong> Package ID Specifications</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/source-replacement.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.11.</strong> Source Replacement</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/external-tools.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.12.</strong> External Tools</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/registries.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.</strong> Registries</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/registry-authentication.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.1.</strong> Registry Authentication</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/credential-provider-protocol.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.1.1.</strong> Credential Provider Protocol</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/running-a-registry.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.2.</strong> Running a Registry</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/registry-index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.2.1.</strong> Registry Index</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/registry-web-api.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.2.2.</strong> Registry Web API</a></li></ol></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/resolver.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.14.</strong> Dependency Resolution</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/semver.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.15.</strong> SemVer Compatibility</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/future-incompat-report.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.16.</strong> Future incompat report</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/timings.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.17.</strong> Reporting build timings</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/unstable.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.18.</strong> Unstable Features</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../commands/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.</strong> Cargo Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../commands/general-commands.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.</strong> General Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../commands/cargo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.1.</strong> cargo</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-help.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.2.</strong> cargo help</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-version.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.3.</strong> cargo version</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../commands/build-commands.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.</strong> Build Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-bench.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.1.</strong> cargo bench</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-build.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.2.</strong> cargo build</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-check.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.3.</strong> cargo check</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-clean.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.4.</strong> cargo clean</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-doc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.5.</strong> cargo doc</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-fetch.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.6.</strong> cargo fetch</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-fix.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.7.</strong> cargo fix</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-run.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.8.</strong> cargo run</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-rustc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.9.</strong> cargo rustc</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-rustdoc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.10.</strong> cargo rustdoc</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-test.html\" class=\"active\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.11.</strong> cargo test</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-report.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.12.</strong> cargo report</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../commands/manifest-commands.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.</strong> Manifest Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-add.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.1.</strong> cargo add</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-generate-lockfile.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.2.</strong> cargo generate-lockfile</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-locate-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.3.</strong> cargo locate-project</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-metadata.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.4.</strong> cargo metadata</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-pkgid.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.5.</strong> cargo pkgid</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-remove.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.6.</strong> cargo remove</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-tree.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.7.</strong> cargo tree</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-update.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.8.</strong> cargo update</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-vendor.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.9.</strong> cargo vendor</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-verify-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.10.</strong> cargo verify-project</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../commands/package-commands.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.</strong> Package Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-init.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.1.</strong> cargo init</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-install.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.2.</strong> cargo install</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-new.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.3.</strong> cargo new</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-search.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.4.</strong> cargo search</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-uninstall.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.5.</strong> cargo uninstall</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../commands/publishing-commands.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.</strong> Publishing Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-login.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.1.</strong> cargo login</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-logout.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.2.</strong> cargo logout</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-owner.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.3.</strong> cargo owner</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-package.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.4.</strong> cargo package</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-publish.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.5.</strong> cargo publish</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-yank.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.6.</strong> cargo yank</a></li></ol></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../faq.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.</strong> FAQ</a></li><li class=\"chapter-item expanded \"><a href=\"../appendix/glossary.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.</strong> Appendix: Glossary</a></li><li class=\"chapter-item expanded \"><a href=\"../appendix/git-authentication.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.</strong> Appendix: Git Authentication</a></li></ol>\n            </div>\n            <div id=\"sidebar-resize-handle\" class=\"sidebar-resize-handle\">\n                <div class=\"sidebar-resize-indicator\"></div>\n            </div>\n        </nav>\n\n        <!-- Track and set sidebar scroll position -->\n        <script>\n            var sidebarScrollbox = document.querySelector('#sidebar .sidebar-scrollbox');\n            sidebarScrollbox.addEventListener('click', function(e) {\n                if (e.target.tagName === 'A') {\n                    sessionStorage.setItem('sidebar-scroll', sidebarScrollbox.scrollTop);\n                }\n            }, { passive: true });\n            var sidebarScrollTop = sessionStorage.getItem('sidebar-scroll');\n            sessionStorage.removeItem('sidebar-scroll');\n            if (sidebarScrollTop) {\n                // preserve sidebar scroll position when navigating via links within sidebar\n                sidebarScrollbox.scrollTop = sidebarScrollTop;\n            } else {\n                // scroll sidebar to current active section when navigating via \"next/previous chapter\" buttons\n                var activeSection = document.querySelector('#sidebar .active');\n                if (activeSection) {\n                    activeSection.scrollIntoView({ block: 'center' });\n                }\n            }\n        </script>\n\n        <div id=\"page-wrapper\" class=\"page-wrapper\">\n\n            <div class=\"page\">\n                                <div id=\"menu-bar-hover-placeholder\"></div>\n                <div id=\"menu-bar\" class=\"menu-bar\" style=\"top: 0px;\">\n                    <div class=\"left-buttons\">\n                        <label id=\"sidebar-toggle\" class=\"icon-button\" for=\"sidebar-toggle-anchor\" title=\"Toggle Table of Contents\" aria-label=\"Toggle Table of Contents\" aria-controls=\"sidebar\" aria-expanded=\"true\">\n                            <i class=\"fa fa-bars\"></i>\n                        </label>\n                        <button id=\"theme-toggle\" class=\"icon-button\" type=\"button\" title=\"Change theme\" aria-label=\"Change theme\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-controls=\"theme-list\">\n                            <i class=\"fa fa-paint-brush\"></i>\n                        </button>\n                        <ul id=\"theme-list\" class=\"theme-popup\" aria-label=\"Themes\" role=\"menu\">\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme theme-selected\" id=\"light\">Light</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"rust\">Rust</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"coal\">Coal</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"navy\">Navy</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"ayu\">Ayu</button></li>\n                        </ul>\n                        <button id=\"search-toggle\" class=\"icon-button\" type=\"button\" title=\"Search. (Shortkey: s)\" aria-label=\"Toggle Searchbar\" aria-expanded=\"false\" aria-keyshortcuts=\"S\" aria-controls=\"searchbar\">\n                            <i class=\"fa fa-search\"></i>\n                        </button>\n                    </div>\n\n                    <h1 class=\"menu-title\">The Cargo Book</h1>\n\n                    <div class=\"right-buttons\">\n                        <a href=\"../print.html\" title=\"Print this book\" aria-label=\"Print this book\">\n                            <i id=\"print-button\" class=\"fa fa-print\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/cargo/tree/master/src/doc/src\" title=\"Git repository\" aria-label=\"Git repository\">\n                            <i id=\"git-repository-button\" class=\"fa fa-github\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/cargo/edit/master/src/doc/src/commands/cargo-test.md\" title=\"Suggest an edit\" aria-label=\"Suggest an edit\">\n                            <i id=\"git-edit-button\" class=\"fa fa-edit\"></i>\n                        </a>\n\n                    </div>\n                </div>\n\n                <div id=\"search-wrapper\" class=\"hidden\">\n                    <form id=\"searchbar-outer\" class=\"searchbar-outer\">\n                        <input type=\"search\" id=\"searchbar\" name=\"searchbar\" placeholder=\"Search this book ...\" aria-controls=\"searchresults-outer\" aria-describedby=\"searchresults-header\">\n                    </form>\n                    <div id=\"searchresults-outer\" class=\"searchresults-outer hidden\">\n                        <div id=\"searchresults-header\" class=\"searchresults-header\"></div>\n                        <ul id=\"searchresults\">\n                        </ul>\n                    </div>\n                </div>\n\n                <!-- Apply ARIA attributes after the sidebar and the sidebar toggle button are added to the DOM -->\n                <script>\n                    document.getElementById('sidebar-toggle').setAttribute('aria-expanded', sidebar === 'visible');\n                    document.getElementById('sidebar').setAttribute('aria-hidden', sidebar !== 'visible');\n                    Array.from(document.querySelectorAll('#sidebar a')).forEach(function(link) {\n                        link.setAttribute('tabIndex', sidebar === 'visible' ? 0 : -1);\n                    });\n                </script>\n\n                <div id=\"content\" class=\"content\">\n                    <main>\n                        <h1 id=\"cargo-test1\"><a class=\"header\" href=\"#cargo-test1\">cargo-test(1)</a></h1>\n<h2 id=\"name\"><a class=\"header\" href=\"#name\">NAME</a></h2>\n<p>cargo-test — Execute unit and integration tests of a package</p>\n<h2 id=\"synopsis\"><a class=\"header\" href=\"#synopsis\">SYNOPSIS</a></h2>\n<p><code class=\"hljs\">cargo test</code> [<em>options</em>] [<em>testname</em>] [<code class=\"hljs\">--</code> <em>test-options</em>]</p>\n<h2 id=\"description\"><a class=\"header\" href=\"#description\">DESCRIPTION</a></h2>\n<p>Compile and execute unit, integration, and documentation tests.</p>\n<p>The test filtering argument <code class=\"hljs\">TESTNAME</code> and all the arguments following the two\ndashes (<code class=\"hljs\">--</code>) are passed to the test binaries and thus to <em>libtest</em> (rustc’s\nbuilt in unit-test and micro-benchmarking framework).  If you’re passing\narguments to both Cargo and the binary, the ones after <code class=\"hljs\">--</code> go to the binary,\nthe ones before go to Cargo.  For details about libtest’s arguments see the\noutput of <code class=\"hljs\">cargo test -- --help</code> and check out the rustc book’s chapter on\nhow tests work at <a href=\"https://doc.rust-lang.org/rustc/tests/index.html\">https://doc.rust-lang.org/rustc/tests/index.html</a>.</p>\n<p>As an example, this will filter for tests with <code class=\"hljs\">foo</code> in their name and run them\non 3 threads in parallel:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo test foo -- --test-threads 3\n</code></pre>\n<p>Tests are built with the <code class=\"hljs\">--test</code> option to <code class=\"hljs\">rustc</code> which creates a special\nexecutable by linking your code with libtest. The executable automatically\nruns all functions annotated with the <code class=\"hljs\">#[test]</code> attribute in multiple threads.\n<code class=\"hljs\">#[bench]</code> annotated functions will also be run with one iteration to verify\nthat they are functional.</p>\n<p>If the package contains multiple test targets, each target compiles to a\nspecial executable as aforementioned, and then is run serially.</p>\n<p>The libtest harness may be disabled by setting <code class=\"hljs\">harness = false</code> in the target\nmanifest settings, in which case your code will need to provide its own <code class=\"hljs\">main</code>\nfunction to handle running tests.</p>\n<h3 id=\"documentation-tests\"><a class=\"header\" href=\"#documentation-tests\">Documentation tests</a></h3>\n<p>Documentation tests are also run by default, which is handled by <code class=\"hljs\">rustdoc</code>. It\nextracts code samples from documentation comments of the library target, and\nthen executes them.</p>\n<p>Different from normal test targets, each code block compiles to a doctest\nexecutable on the fly with <code class=\"hljs\">rustc</code>. These executables run in parallel in\nseparate processes. The compilation of a code block is in fact a part of test\nfunction controlled by libtest, so some options such as <code class=\"hljs\">--jobs</code> might not\ntake effect. Note that this execution model of doctests is not guaranteed\nand may change in the future; beware of depending on it.</p>\n<p>See the <a href=\"https://doc.rust-lang.org/rustdoc/\">rustdoc book</a> for more information\non writing doc tests.</p>\n<h3 id=\"working-directory-of-tests\"><a class=\"header\" href=\"#working-directory-of-tests\">Working directory of tests</a></h3>\n<p>The working directory when running each unit and integration test is set to the\nroot directory of the package the test belongs to.\nSetting the working directory of tests to the package’s root directory makes it\npossible for tests to reliably access the package’s files using relative paths,\nregardless from where <code class=\"hljs\">cargo test</code> was executed from.</p>\n<p>For documentation tests, the working directory when invoking <code class=\"hljs\">rustdoc</code> is set to\nthe workspace root directory, and is also the directory <code class=\"hljs\">rustdoc</code> uses as the\ncompilation directory of each documentation test.\nThe working directory when running each documentation test is set to the root\ndirectory of the package the test belongs to, and is controlled via <code class=\"hljs\">rustdoc</code>’s\n<code class=\"hljs\">--test-run-directory</code> option.</p>\n<h2 id=\"options\"><a class=\"header\" href=\"#options\">OPTIONS</a></h2>\n<h3 id=\"test-options\"><a class=\"header\" href=\"#test-options\">Test Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-test---no-run\"><a class=\"option-anchor\" href=\"#option-cargo-test---no-run\"></a><code class=\"hljs\">--no-run</code></dt>\n<dd class=\"option-desc\">Compile, but don’t run tests.</dd>\n<dt class=\"option-term\" id=\"option-cargo-test---no-fail-fast\"><a class=\"option-anchor\" href=\"#option-cargo-test---no-fail-fast\"></a><code class=\"hljs\">--no-fail-fast</code></dt>\n<dd class=\"option-desc\">Run all tests regardless of failure. Without this flag, Cargo will exit\nafter the first executable fails. The Rust test harness will run all tests\nwithin the executable to completion, this flag only applies to the executable\nas a whole.</dd>\n</dl>\n<h3 id=\"package-selection\"><a class=\"header\" href=\"#package-selection\">Package Selection</a></h3>\n<p>By default, when no package selection options are given, the packages selected\ndepend on the selected manifest file (based on the current working directory if\n<code class=\"hljs\">--manifest-path</code> is not given). If the manifest is the root of a workspace then\nthe workspaces default members are selected, otherwise only the package defined\nby the manifest will be selected.</p>\n<p>The default members of a workspace can be set explicitly with the\n<code class=\"hljs\">workspace.default-members</code> key in the root manifest. If this is not set, a\nvirtual workspace will include all workspace members (equivalent to passing\n<code class=\"hljs\">--workspace</code>), and a non-virtual workspace will include only the root crate itself.</p>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-test--p\"><a class=\"option-anchor\" href=\"#option-cargo-test--p\"></a><code class=\"hljs\">-p</code> <em>spec</em>…</dt>\n<dt class=\"option-term\" id=\"option-cargo-test---package\"><a class=\"option-anchor\" href=\"#option-cargo-test---package\"></a><code class=\"hljs\">--package</code> <em>spec</em>…</dt>\n<dd class=\"option-desc\">Test only the specified packages. See <a href=\"cargo-pkgid.html\">cargo-pkgid(1)</a> for the\nSPEC format. This flag may be specified multiple times and supports common Unix\nglob patterns like <code class=\"hljs\">*</code>, <code class=\"hljs\">?</code> and <code class=\"hljs\">[]</code>. However, to avoid your shell accidentally\nexpanding glob patterns before Cargo handles them, you must use single quotes or\ndouble quotes around each pattern.</dd>\n<dt class=\"option-term\" id=\"option-cargo-test---workspace\"><a class=\"option-anchor\" href=\"#option-cargo-test---workspace\"></a><code class=\"hljs\">--workspace</code></dt>\n<dd class=\"option-desc\">Test all members in the workspace.</dd>\n<dt class=\"option-term\" id=\"option-cargo-test---all\"><a class=\"option-anchor\" href=\"#option-cargo-test---all\"></a><code class=\"hljs\">--all</code></dt>\n<dd class=\"option-desc\">Deprecated alias for <code class=\"hljs\">--workspace</code>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-test---exclude\"><a class=\"option-anchor\" href=\"#option-cargo-test---exclude\"></a><code class=\"hljs\">--exclude</code> <em>SPEC</em>…</dt>\n<dd class=\"option-desc\">Exclude the specified packages. Must be used in conjunction with the\n<code class=\"hljs\">--workspace</code> flag. This flag may be specified multiple times and supports\ncommon Unix glob patterns like <code class=\"hljs\">*</code>, <code class=\"hljs\">?</code> and <code class=\"hljs\">[]</code>. However, to avoid your shell\naccidentally expanding glob patterns before Cargo handles them, you must use\nsingle quotes or double quotes around each pattern.</dd>\n</dl>\n<h3 id=\"target-selection\"><a class=\"header\" href=\"#target-selection\">Target Selection</a></h3>\n<p>When no target selection options are given, <code class=\"hljs\">cargo test</code> will build the\nfollowing targets of the selected packages:</p>\n<ul>\n<li>lib — used to link with binaries, examples, integration tests, and doc tests</li>\n<li>bins (only if integration tests are built and required features are\navailable)</li>\n<li>examples — to ensure they compile</li>\n<li>lib as a unit test</li>\n<li>bins as unit tests</li>\n<li>integration tests</li>\n<li>doc tests for the lib target</li>\n</ul>\n<p>The default behavior can be changed by setting the <code class=\"hljs\">test</code> flag for the target\nin the manifest settings. Setting examples to <code class=\"hljs\">test = true</code> will build and run\nthe example as a test, replacing the example’s <code class=\"hljs\">main</code> function with the\nlibtest harness. If you don’t want the <code class=\"hljs\">main</code> function replaced, also include\n<code class=\"hljs\">harness = false</code>, in which case the example will be built and executed as-is.</p>\n<p>Setting targets to <code class=\"hljs\">test = false</code> will stop them from being tested by default.\nTarget selection options that take a target by name (such as <code class=\"hljs\">--example foo</code>)\nignore the <code class=\"hljs\">test</code> flag and will always test the given target.</p>\n<p>Doc tests for libraries may be disabled by setting <code class=\"hljs\">doctest = false</code> for the\nlibrary in the manifest.</p>\n<p>See <a href=\"../reference/cargo-targets.html#configuring-a-target\">Configuring a target</a>\nfor more information on per-target settings.</p>\n<p>Binary targets are automatically built if there is an integration test or\nbenchmark being selected to test. This allows an integration\ntest to execute the binary to exercise and test its behavior.\nThe <code class=\"hljs\">CARGO_BIN_EXE_&lt;name&gt;</code>\n<a href=\"../reference/environment-variables.html#environment-variables-cargo-sets-for-crates\">environment variable</a>\nis set when the integration test is built so that it can use the\n<a href=\"https://doc.rust-lang.org/std/macro.env.html\"><code class=\"hljs\">env</code> macro</a> to locate the\nexecutable.</p>\n<p>Passing target selection flags will test only the specified\ntargets.</p>\n<p>Note that <code class=\"hljs\">--bin</code>, <code class=\"hljs\">--example</code>, <code class=\"hljs\">--test</code> and <code class=\"hljs\">--bench</code> flags also\nsupport common Unix glob patterns like <code class=\"hljs\">*</code>, <code class=\"hljs\">?</code> and <code class=\"hljs\">[]</code>. However, to avoid your\nshell accidentally expanding glob patterns before Cargo handles them, you must\nuse single quotes or double quotes around each glob pattern.</p>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-test---lib\"><a class=\"option-anchor\" href=\"#option-cargo-test---lib\"></a><code class=\"hljs\">--lib</code></dt>\n<dd class=\"option-desc\">Test the package’s library.</dd>\n<dt class=\"option-term\" id=\"option-cargo-test---bin\"><a class=\"option-anchor\" href=\"#option-cargo-test---bin\"></a><code class=\"hljs\">--bin</code> <em>name</em>…</dt>\n<dd class=\"option-desc\">Test the specified binary. This flag may be specified multiple times\nand supports common Unix glob patterns.</dd>\n<dt class=\"option-term\" id=\"option-cargo-test---bins\"><a class=\"option-anchor\" href=\"#option-cargo-test---bins\"></a><code class=\"hljs\">--bins</code></dt>\n<dd class=\"option-desc\">Test all binary targets.</dd>\n<dt class=\"option-term\" id=\"option-cargo-test---example\"><a class=\"option-anchor\" href=\"#option-cargo-test---example\"></a><code class=\"hljs\">--example</code> <em>name</em>…</dt>\n<dd class=\"option-desc\">Test the specified example. This flag may be specified multiple times\nand supports common Unix glob patterns.</dd>\n<dt class=\"option-term\" id=\"option-cargo-test---examples\"><a class=\"option-anchor\" href=\"#option-cargo-test---examples\"></a><code class=\"hljs\">--examples</code></dt>\n<dd class=\"option-desc\">Test all example targets.</dd>\n<dt class=\"option-term\" id=\"option-cargo-test---test\"><a class=\"option-anchor\" href=\"#option-cargo-test---test\"></a><code class=\"hljs\">--test</code> <em>name</em>…</dt>\n<dd class=\"option-desc\">Test the specified integration test. This flag may be specified\nmultiple times and supports common Unix glob patterns.</dd>\n<dt class=\"option-term\" id=\"option-cargo-test---tests\"><a class=\"option-anchor\" href=\"#option-cargo-test---tests\"></a><code class=\"hljs\">--tests</code></dt>\n<dd class=\"option-desc\">Test all targets in test mode that have the <code class=\"hljs\">test = true</code> manifest\nflag set. By default this includes the library and binaries built as\nunittests, and integration tests. Be aware that this will also build any\nrequired dependencies, so the lib target may be built twice (once as a\nunittest, and once as a dependency for binaries, integration tests, etc.).\nTargets may be enabled or disabled by setting the <code class=\"hljs\">test</code> flag in the\nmanifest settings for the target.</dd>\n<dt class=\"option-term\" id=\"option-cargo-test---bench\"><a class=\"option-anchor\" href=\"#option-cargo-test---bench\"></a><code class=\"hljs\">--bench</code> <em>name</em>…</dt>\n<dd class=\"option-desc\">Test the specified benchmark. This flag may be specified multiple\ntimes and supports common Unix glob patterns.</dd>\n<dt class=\"option-term\" id=\"option-cargo-test---benches\"><a class=\"option-anchor\" href=\"#option-cargo-test---benches\"></a><code class=\"hljs\">--benches</code></dt>\n<dd class=\"option-desc\">Test all targets in benchmark mode that have the <code class=\"hljs\">bench = true</code>\nmanifest flag set. By default this includes the library and binaries built\nas benchmarks, and bench targets. Be aware that this will also build any\nrequired dependencies, so the lib target may be built twice (once as a\nbenchmark, and once as a dependency for binaries, benchmarks, etc.).\nTargets may be enabled or disabled by setting the <code class=\"hljs\">bench</code> flag in the\nmanifest settings for the target.</dd>\n<dt class=\"option-term\" id=\"option-cargo-test---all-targets\"><a class=\"option-anchor\" href=\"#option-cargo-test---all-targets\"></a><code class=\"hljs\">--all-targets</code></dt>\n<dd class=\"option-desc\">Test all targets. This is equivalent to specifying <code class=\"hljs\">--lib --bins --tests --benches --examples</code>.</dd>\n</dl>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-test---doc\"><a class=\"option-anchor\" href=\"#option-cargo-test---doc\"></a><code class=\"hljs\">--doc</code></dt>\n<dd class=\"option-desc\">Test only the library’s documentation. This cannot be mixed with other\ntarget options.</dd>\n</dl>\n<h3 id=\"feature-selection\"><a class=\"header\" href=\"#feature-selection\">Feature Selection</a></h3>\n<p>The feature flags allow you to control which features are enabled. When no\nfeature options are given, the <code class=\"hljs\">default</code> feature is activated for every\nselected package.</p>\n<p>See <a href=\"../reference/features.html#command-line-feature-options\">the features documentation</a>\nfor more details.</p>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-test--F\"><a class=\"option-anchor\" href=\"#option-cargo-test--F\"></a><code class=\"hljs\">-F</code> <em>features</em></dt>\n<dt class=\"option-term\" id=\"option-cargo-test---features\"><a class=\"option-anchor\" href=\"#option-cargo-test---features\"></a><code class=\"hljs\">--features</code> <em>features</em></dt>\n<dd class=\"option-desc\">Space or comma separated list of features to activate. Features of workspace\nmembers may be enabled with <code class=\"hljs\">package-name/feature-name</code> syntax. This flag may\nbe specified multiple times, which enables all specified features.</dd>\n<dt class=\"option-term\" id=\"option-cargo-test---all-features\"><a class=\"option-anchor\" href=\"#option-cargo-test---all-features\"></a><code class=\"hljs\">--all-features</code></dt>\n<dd class=\"option-desc\">Activate all available features of all selected packages.</dd>\n<dt class=\"option-term\" id=\"option-cargo-test---no-default-features\"><a class=\"option-anchor\" href=\"#option-cargo-test---no-default-features\"></a><code class=\"hljs\">--no-default-features</code></dt>\n<dd class=\"option-desc\">Do not activate the <code class=\"hljs\">default</code> feature of the selected packages.</dd>\n</dl>\n<h3 id=\"compilation-options\"><a class=\"header\" href=\"#compilation-options\">Compilation Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-test---target\"><a class=\"option-anchor\" href=\"#option-cargo-test---target\"></a><code class=\"hljs\">--target</code> <em>triple</em></dt>\n<dd class=\"option-desc\">Test for the given architecture. The default is the host architecture. The general format of the triple is\n<code class=\"hljs\">&lt;arch&gt;&lt;sub&gt;-&lt;vendor&gt;-&lt;sys&gt;-&lt;abi&gt;</code>. Run <code class=\"hljs\">rustc --print target-list</code> for a\nlist of supported targets. This flag may be specified multiple times.<p></p>\n<p>This may also be specified with the <code class=\"hljs\">build.target</code>\n<a href=\"../reference/config.html\">config value</a>.</p>\n<p>Note that specifying this flag makes Cargo run in a different mode where the\ntarget artifacts are placed in a separate directory. See the\n<a href=\"../guide/build-cache.html\">build cache</a> documentation for more details.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-test--r\"><a class=\"option-anchor\" href=\"#option-cargo-test--r\"></a><code class=\"hljs\">-r</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-test---release\"><a class=\"option-anchor\" href=\"#option-cargo-test---release\"></a><code class=\"hljs\">--release</code></dt>\n<dd class=\"option-desc\">Test optimized artifacts with the <code class=\"hljs\">release</code> profile.\nSee also the <code class=\"hljs\">--profile</code> option for choosing a specific profile by name.</dd>\n<dt class=\"option-term\" id=\"option-cargo-test---profile\"><a class=\"option-anchor\" href=\"#option-cargo-test---profile\"></a><code class=\"hljs\">--profile</code> <em>name</em></dt>\n<dd class=\"option-desc\">Test with the given profile.\nSee <a href=\"../reference/profiles.html\">the reference</a> for more details on profiles.</dd>\n<dt class=\"option-term\" id=\"option-cargo-test---timings=fmts\"><a class=\"option-anchor\" href=\"#option-cargo-test---timings=fmts\"></a><code class=\"hljs\">--timings=</code><em>fmts</em></dt>\n<dd class=\"option-desc\">Output information how long each compilation takes, and track concurrency\ninformation over time. Accepts an optional comma-separated list of output\nformats; <code class=\"hljs\">--timings</code> without an argument will default to <code class=\"hljs\">--timings=html</code>.\nSpecifying an output format (rather than the default) is unstable and requires\n<code class=\"hljs\">-Zunstable-options</code>. Valid output formats:<p></p>\n<ul>\n<li><code class=\"hljs\">html</code> (unstable, requires <code class=\"hljs\">-Zunstable-options</code>): Write a human-readable file <code class=\"hljs\">cargo-timing.html</code> to the\n<code class=\"hljs\">target/cargo-timings</code> directory with a report of the compilation. Also write\na report to the same directory with a timestamp in the filename if you want\nto look at older runs. HTML output is suitable for human consumption only,\nand does not provide machine-readable timing data.</li>\n<li><code class=\"hljs\">json</code> (unstable, requires <code class=\"hljs\">-Zunstable-options</code>): Emit machine-readable JSON\ninformation about timing information.</li>\n</ul></dd>\n</dl>\n<h3 id=\"output-options\"><a class=\"header\" href=\"#output-options\">Output Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-test---target-dir\"><a class=\"option-anchor\" href=\"#option-cargo-test---target-dir\"></a><code class=\"hljs\">--target-dir</code> <em>directory</em></dt>\n<dd class=\"option-desc\">Directory for all generated artifacts and intermediate files. May also be\nspecified with the <code class=\"hljs\">CARGO_TARGET_DIR</code> environment variable, or the\n<code class=\"hljs\">build.target-dir</code> <a href=\"../reference/config.html\">config value</a>.\nDefaults to <code class=\"hljs\">target</code> in the root of the workspace.</dd>\n</dl>\n<h3 id=\"display-options\"><a class=\"header\" href=\"#display-options\">Display Options</a></h3>\n<p>By default the Rust test harness hides output from test execution to keep\nresults readable. Test output can be recovered (e.g., for debugging) by passing\n<code class=\"hljs\">--nocapture</code> to the test binaries:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo test -- --nocapture\n</code></pre>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-test--v\"><a class=\"option-anchor\" href=\"#option-cargo-test--v\"></a><code class=\"hljs\">-v</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-test---verbose\"><a class=\"option-anchor\" href=\"#option-cargo-test---verbose\"></a><code class=\"hljs\">--verbose</code></dt>\n<dd class=\"option-desc\">Use verbose output. May be specified twice for “very verbose” output which\nincludes extra output such as dependency warnings and build script output.\nMay also be specified with the <code class=\"hljs\">term.verbose</code>\n<a href=\"../reference/config.html\">config value</a>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-test--q\"><a class=\"option-anchor\" href=\"#option-cargo-test--q\"></a><code class=\"hljs\">-q</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-test---quiet\"><a class=\"option-anchor\" href=\"#option-cargo-test---quiet\"></a><code class=\"hljs\">--quiet</code></dt>\n<dd class=\"option-desc\">Do not print cargo log messages.\nMay also be specified with the <code class=\"hljs\">term.quiet</code>\n<a href=\"../reference/config.html\">config value</a>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-test---color\"><a class=\"option-anchor\" href=\"#option-cargo-test---color\"></a><code class=\"hljs\">--color</code> <em>when</em></dt>\n<dd class=\"option-desc\">Control when colored output is used. Valid values:<p></p>\n<ul>\n<li><code class=\"hljs\">auto</code> (default): Automatically detect if color support is available on the\nterminal.</li>\n<li><code class=\"hljs\">always</code>: Always display colors.</li>\n<li><code class=\"hljs\">never</code>: Never display colors.</li>\n</ul>\n<p>May also be specified with the <code class=\"hljs\">term.color</code>\n<a href=\"../reference/config.html\">config value</a>.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-test---message-format\"><a class=\"option-anchor\" href=\"#option-cargo-test---message-format\"></a><code class=\"hljs\">--message-format</code> <em>fmt</em></dt>\n<dd class=\"option-desc\">The output format for diagnostic messages. Can be specified multiple times\nand consists of comma-separated values. Valid values:<p></p>\n<ul>\n<li><code class=\"hljs\">human</code> (default): Display in a human-readable text format. Conflicts with\n<code class=\"hljs\">short</code> and <code class=\"hljs\">json</code>.</li>\n<li><code class=\"hljs\">short</code>: Emit shorter, human-readable text messages. Conflicts with <code class=\"hljs\">human</code>\nand <code class=\"hljs\">json</code>.</li>\n<li><code class=\"hljs\">json</code>: Emit JSON messages to stdout. See\n<a href=\"../reference/external-tools.html#json-messages\">the reference</a>\nfor more details. Conflicts with <code class=\"hljs\">human</code> and <code class=\"hljs\">short</code>.</li>\n<li><code class=\"hljs\">json-diagnostic-short</code>: Ensure the <code class=\"hljs\">rendered</code> field of JSON messages contains\nthe “short” rendering from rustc. Cannot be used with <code class=\"hljs\">human</code> or <code class=\"hljs\">short</code>.</li>\n<li><code class=\"hljs\">json-diagnostic-rendered-ansi</code>: Ensure the <code class=\"hljs\">rendered</code> field of JSON messages\ncontains embedded ANSI color codes for respecting rustc’s default color\nscheme. Cannot be used with <code class=\"hljs\">human</code> or <code class=\"hljs\">short</code>.</li>\n<li><code class=\"hljs\">json-render-diagnostics</code>: Instruct Cargo to not include rustc diagnostics\nin JSON messages printed, but instead Cargo itself should render the\nJSON diagnostics coming from rustc. Cargo’s own JSON diagnostics and others\ncoming from rustc are still emitted. Cannot be used with <code class=\"hljs\">human</code> or <code class=\"hljs\">short</code>.</li>\n</ul></dd>\n</dl>\n<h3 id=\"manifest-options\"><a class=\"header\" href=\"#manifest-options\">Manifest Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-test---manifest-path\"><a class=\"option-anchor\" href=\"#option-cargo-test---manifest-path\"></a><code class=\"hljs\">--manifest-path</code> <em>path</em></dt>\n<dd class=\"option-desc\">Path to the <code class=\"hljs\">Cargo.toml</code> file. By default, Cargo searches for the\n<code class=\"hljs\">Cargo.toml</code> file in the current directory or any parent directory.</dd>\n<dt class=\"option-term\" id=\"option-cargo-test---ignore-rust-version\"><a class=\"option-anchor\" href=\"#option-cargo-test---ignore-rust-version\"></a><code class=\"hljs\">--ignore-rust-version</code></dt>\n<dd class=\"option-desc\">Ignore <code class=\"hljs\">rust-version</code> specification in packages.</dd>\n<dt class=\"option-term\" id=\"option-cargo-test---locked\"><a class=\"option-anchor\" href=\"#option-cargo-test---locked\"></a><code class=\"hljs\">--locked</code></dt>\n<dd class=\"option-desc\">Asserts that the exact same dependencies and versions are used as when the\nexisting <code class=\"hljs\">Cargo.lock</code> file was originally generated. Cargo will exit with an\nerror when either of the following scenarios arises:<p></p>\n<ul>\n<li>The lock file is missing.</li>\n<li>Cargo attempted to change the lock file due to a different dependency resolution.</li>\n</ul>\n<p>It may be used in environments where deterministic builds are desired,\nsuch as in CI pipelines.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-test---offline\"><a class=\"option-anchor\" href=\"#option-cargo-test---offline\"></a><code class=\"hljs\">--offline</code></dt>\n<dd class=\"option-desc\">Prevents Cargo from accessing the network for any reason. Without this\nflag, Cargo will stop with an error if it needs to access the network and\nthe network is not available. With this flag, Cargo will attempt to\nproceed without the network if possible.<p></p>\n<p>Beware that this may result in different dependency resolution than online\nmode. Cargo will restrict itself to crates that are downloaded locally, even\nif there might be a newer version as indicated in the local copy of the index.\nSee the <a href=\"cargo-fetch.html\">cargo-fetch(1)</a> command to download dependencies before going\noffline.</p>\n<p>May also be specified with the <code class=\"hljs\">net.offline</code> <a href=\"../reference/config.html\">config value</a>.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-test---frozen\"><a class=\"option-anchor\" href=\"#option-cargo-test---frozen\"></a><code class=\"hljs\">--frozen</code></dt>\n<dd class=\"option-desc\">Equivalent to specifying both <code class=\"hljs\">--locked</code> and <code class=\"hljs\">--offline</code>.</dd>\n</dl>\n<h3 id=\"common-options\"><a class=\"header\" href=\"#common-options\">Common Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-test-+toolchain\"><a class=\"option-anchor\" href=\"#option-cargo-test-+toolchain\"></a><code class=\"hljs\">+</code><em>toolchain</em></dt>\n<dd class=\"option-desc\">If Cargo has been installed with rustup, and the first argument to <code class=\"hljs\">cargo</code>\nbegins with <code class=\"hljs\">+</code>, it will be interpreted as a rustup toolchain name (such\nas <code class=\"hljs\">+stable</code> or <code class=\"hljs\">+nightly</code>).\nSee the <a href=\"https://rust-lang.github.io/rustup/overrides.html\">rustup documentation</a>\nfor more information about how toolchain overrides work.</dd>\n<dt class=\"option-term\" id=\"option-cargo-test---config\"><a class=\"option-anchor\" href=\"#option-cargo-test---config\"></a><code class=\"hljs\">--config</code> <em>KEY=VALUE</em> or <em>PATH</em></dt>\n<dd class=\"option-desc\">Overrides a Cargo configuration value. The argument should be in TOML syntax of <code class=\"hljs\">KEY=VALUE</code>,\nor provided as a path to an extra configuration file. This flag may be specified multiple times.\nSee the <a href=\"../reference/config.html#command-line-overrides\">command-line overrides section</a> for more information.</dd>\n<dt class=\"option-term\" id=\"option-cargo-test--C\"><a class=\"option-anchor\" href=\"#option-cargo-test--C\"></a><code class=\"hljs\">-C</code> <em>PATH</em></dt>\n<dd class=\"option-desc\">Changes the current working directory before executing any specified operations. This affects\nthings like where cargo looks by default for the project manifest (<code class=\"hljs\">Cargo.toml</code>), as well as\nthe directories searched for discovering <code class=\"hljs\">.cargo/config.toml</code>, for example. This option must\nappear before the command name, for example <code class=\"hljs\">cargo -C path/to/my-project build</code>.<p></p>\n<p>This option is only available on the <a href=\"https://doc.rust-lang.org/book/appendix-07-nightly-rust.html\">nightly\nchannel</a> and\nrequires the <code class=\"hljs\">-Z unstable-options</code> flag to enable (see\n<a href=\"https://github.com/rust-lang/cargo/issues/10098\">#10098</a>).</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-test--h\"><a class=\"option-anchor\" href=\"#option-cargo-test--h\"></a><code class=\"hljs\">-h</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-test---help\"><a class=\"option-anchor\" href=\"#option-cargo-test---help\"></a><code class=\"hljs\">--help</code></dt>\n<dd class=\"option-desc\">Prints help information.</dd>\n<dt class=\"option-term\" id=\"option-cargo-test--Z\"><a class=\"option-anchor\" href=\"#option-cargo-test--Z\"></a><code class=\"hljs\">-Z</code> <em>flag</em></dt>\n<dd class=\"option-desc\">Unstable (nightly-only) flags to Cargo. Run <code class=\"hljs\">cargo -Z help</code> for details.</dd>\n</dl>\n<h3 id=\"miscellaneous-options\"><a class=\"header\" href=\"#miscellaneous-options\">Miscellaneous Options</a></h3>\n<p>The <code class=\"hljs\">--jobs</code> argument affects the building of the test executable but does not\naffect how many threads are used when running the tests. The Rust test harness\nincludes an option to control the number of threads used:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo test -j 2 -- --test-threads=2\n</code></pre>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-test--j\"><a class=\"option-anchor\" href=\"#option-cargo-test--j\"></a><code class=\"hljs\">-j</code> <em>N</em></dt>\n<dt class=\"option-term\" id=\"option-cargo-test---jobs\"><a class=\"option-anchor\" href=\"#option-cargo-test---jobs\"></a><code class=\"hljs\">--jobs</code> <em>N</em></dt>\n<dd class=\"option-desc\">Number of parallel jobs to run. May also be specified with the\n<code class=\"hljs\">build.jobs</code> <a href=\"../reference/config.html\">config value</a>. Defaults to\nthe number of logical CPUs. If negative, it sets the maximum number of\nparallel jobs to the number of logical CPUs plus provided value. If\na string <code class=\"hljs\">default</code> is provided, it sets the value back to defaults.\nShould not be 0.</dd>\n<dt class=\"option-term\" id=\"option-cargo-test---future-incompat-report\"><a class=\"option-anchor\" href=\"#option-cargo-test---future-incompat-report\"></a><code class=\"hljs\">--future-incompat-report</code></dt>\n<dd class=\"option-desc\">Displays a future-incompat report for any future-incompatible warnings\nproduced during execution of this command<p></p>\n<p>See <a href=\"cargo-report.html\">cargo-report(1)</a></p></dd>\n</dl>\n<p>While <code class=\"hljs\">cargo test</code> involves compilation, it does not provide a <code class=\"hljs\">--keep-going</code>\nflag. Use <code class=\"hljs\">--no-fail-fast</code> to run as many tests as possible without stopping at\nthe first failure. To “compile” as many tests as possible, use <code class=\"hljs\">--tests</code> to\nbuild test binaries separately. For example:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo build --tests --keep-going\ncargo test --tests --no-fail-fast\n</code></pre>\n<h2 id=\"environment\"><a class=\"header\" href=\"#environment\">ENVIRONMENT</a></h2>\n<p>See <a href=\"../reference/environment-variables.html\">the reference</a> for\ndetails on environment variables that Cargo reads.</p>\n<h2 id=\"exit-status\"><a class=\"header\" href=\"#exit-status\">EXIT STATUS</a></h2>\n<ul>\n<li><code class=\"hljs\">0</code>: Cargo succeeded.</li>\n<li><code class=\"hljs\">101</code>: Cargo failed to complete.</li>\n</ul>\n<h2 id=\"examples\"><a class=\"header\" href=\"#examples\">EXAMPLES</a></h2>\n<ol>\n<li>\n<p>Execute all the unit and integration tests of the current package:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo test\n</code></pre>\n</li>\n<li>\n<p>Run only tests whose names match against a filter string:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo test name_filter\n</code></pre>\n</li>\n<li>\n<p>Run only a specific test within a specific integration test:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo test --test int_test_name -- modname::test_name\n</code></pre>\n</li>\n</ol>\n<h2 id=\"see-also\"><a class=\"header\" href=\"#see-also\">SEE ALSO</a></h2>\n<p><a href=\"cargo.html\">cargo(1)</a>, <a href=\"cargo-bench.html\">cargo-bench(1)</a>, <a href=\"../reference/cargo-targets.html#tests\">types of tests</a>, <a href=\"https://doc.rust-lang.org/rustc/tests/index.html\">how to write tests</a></p>\n\n                    </main>\n\n                    <nav class=\"nav-wrapper\" aria-label=\"Page navigation\">\n                        <!-- Mobile navigation buttons -->\n                            <a rel=\"prev\" href=\"../commands/cargo-rustdoc.html\" class=\"mobile-nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                                <i class=\"fa fa-angle-left\"></i>\n                            </a>\n\n                            <a rel=\"next prefetch\" href=\"../commands/cargo-report.html\" class=\"mobile-nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                                <i class=\"fa fa-angle-right\"></i>\n                            </a>\n\n                        <div style=\"clear: both\"></div>\n                    </nav>\n                </div>\n            </div>\n\n            <nav class=\"nav-wide-wrapper\" aria-label=\"Page navigation\">\n                    <a rel=\"prev\" href=\"../commands/cargo-rustdoc.html\" class=\"nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                        <i class=\"fa fa-angle-left\"></i>\n                    </a>\n\n                    <a rel=\"next prefetch\" href=\"../commands/cargo-report.html\" class=\"nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                        <i class=\"fa fa-angle-right\"></i>\n                    </a>\n            </nav>\n\n        </div>\n\n\n\n\n        <script>\n            window.playground_copyable = true;\n        </script>\n\n\n        <script src=\"../elasticlunr.min.js\"></script>\n        <script src=\"../mark.min.js\"></script>\n        <script src=\"../searcher.js\"></script>\n\n        <script src=\"../clipboard.min.js\"></script>\n        <script src=\"../highlight.js\"></script>\n        <script src=\"../book.js\"></script>\n\n        <!-- Custom JS scripts -->\n\n\n    </div>\n    \n\n</body></html>",
	"crawlDate": "2024-07-28T05:09:28.038Z"
}