{
	"title": "Cell in std::cell - Rust",
	"url": "https://doc.rust-lang.org/stable/std/cell/struct.Cell.html#method.as_slice_of_cells",
	"markdown": "# Cell in std::cell - Rust\n\n## Struct [std](../index.html)::[cell](index.html)::[Cell](#)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#308) ¬∑\n\n```\npub struct Cell<T>where\n    T: ?Sized,{ /* private fields */ }\n```\n\nExpand description\n\nA mutable memory location.\n\n## [¬ß](#memory-layout)Memory layout\n\n`Cell<T>` has the same [memory layout and caveats as `UnsafeCell<T>`](about:blank/struct.UnsafeCell.html#memory-layout \"struct std::cell::UnsafeCell\"). In particular, this means that `Cell<T>` has the same in-memory representation as its inner type `T`.\n\n## [¬ß](#examples)Examples\n\nIn this example, you can see that `Cell<T>` enables mutation inside an immutable struct. In other words, it enables ‚Äúinterior mutability‚Äù.\n\n```\nuse std::cell::Cell;\n\nstruct SomeStruct {\n    regular_field: u8,\n    special_field: Cell<u8>,\n}\n\nlet my_struct = SomeStruct {\n    regular_field: 0,\n    special_field: Cell::new(1),\n};\n\nlet new_value = 100;\n\n// ERROR: `my_struct` is immutable\n// my_struct.regular_field = new_value;\n\n// WORKS: although `my_struct` is immutable, `special_field` is a `Cell`,\n// which can always be mutated\nmy_struct.special_field.set(new_value);\nassert_eq!(my_struct.special_field.get(), new_value);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::Cell;%0A++++%0A++++struct+SomeStruct+%7B%0A++++++++regular_field:+u8,%0A++++++++special_field:+Cell%3Cu8%3E,%0A++++%7D%0A++++%0A++++let+my_struct+=+SomeStruct+%7B%0A++++++++regular_field:+0,%0A++++++++special_field:+Cell::new(1),%0A++++%7D;%0A++++%0A++++let+new_value+=+100;%0A++++%0A++++//+ERROR:+%60my_struct%60+is+immutable%0A++++//+my_struct.regular_field+=+new_value;%0A++++%0A++++//+WORKS:+although+%60my_struct%60+is+immutable,+%60special_field%60+is+a+%60Cell%60,%0A++++//+which+can+always+be+mutated%0A++++my_struct.special_field.set(new_value);%0A++++assert_eq!(my_struct.special_field.get(),+new_value);%0A%7D&edition=2021)\n\nSee the [module-level documentation](index.html \"mod std::cell\") for more.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#395)[¬ß](#impl-Cell%3CT%3E)\n\n1.0.0 (const: 1.24.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#408)\n\nCreates a new `Cell` containing the given value.\n\n##### [¬ß](#examples-1)Examples\n\n```\nuse std::cell::Cell;\n\nlet c = Cell::new(5);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::Cell;%0A++++%0A++++let+c+=+Cell::new(5);%0A%7D&edition=2021)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#425)\n\nSets the contained value.\n\n##### [¬ß](#examples-2)Examples\n\n```\nuse std::cell::Cell;\n\nlet c = Cell::new(5);\n\nc.set(10);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::Cell;%0A++++%0A++++let+c+=+Cell::new(5);%0A++++%0A++++c.set(10);%0A%7D&edition=2021)\n\n1.17.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#451)\n\nSwaps the values of two `Cell`s. Difference with `std::mem::swap` is that this function doesn‚Äôt require `&mut` reference.\n\n##### [¬ß](#panics)Panics\n\nThis function will panic if `self` and `other` are different `Cell`s that partially overlap. (Using just standard library methods, it is impossible to create such partially overlapping `Cell`s. However, unsafe code is allowed to e.g. create two `&Cell<[i32; 2]>` that partially overlap.)\n\n##### [¬ß](#examples-3)Examples\n\n```\nuse std::cell::Cell;\n\nlet c1 = Cell::new(5i32);\nlet c2 = Cell::new(10i32);\nc1.swap(&c2);\nassert_eq!(10, c1.get());\nassert_eq!(5, c2.get());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::Cell;%0A++++%0A++++let+c1+=+Cell::new(5i32);%0A++++let+c2+=+Cell::new(10i32);%0A++++c1.swap(%26c2);%0A++++assert_eq!(10,+c1.get());%0A++++assert_eq!(5,+c2.get());%0A%7D&edition=2021)\n\n1.17.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#494)\n\nReplaces the contained value with `val`, and returns the old contained value.\n\n##### [¬ß](#examples-4)Examples\n\n```\nuse std::cell::Cell;\n\nlet cell = Cell::new(5);\nassert_eq!(cell.get(), 5);\nassert_eq!(cell.replace(10), 5);\nassert_eq!(cell.get(), 10);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::Cell;%0A++++%0A++++let+cell+=+Cell::new(5);%0A++++assert_eq!(cell.get(),+5);%0A++++assert_eq!(cell.replace(10),+5);%0A++++assert_eq!(cell.get(),+10);%0A%7D&edition=2021)\n\n1.17.0 (const: [unstable](https://github.com/rust-lang/rust/issues/78729 \"Tracking issue for const_cell_into_inner\")) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#514)\n\nUnwraps the value, consuming the cell.\n\n##### [¬ß](#examples-5)Examples\n\n```\nuse std::cell::Cell;\n\nlet c = Cell::new(5);\nlet five = c.into_inner();\n\nassert_eq!(five, 5);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::Cell;%0A++++%0A++++let+c+=+Cell::new(5);%0A++++let+five+=+c.into_inner();%0A++++%0A++++assert_eq!(five,+5);%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#519)[¬ß](#impl-Cell%3CT%3E-1)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#533)\n\nReturns a copy of the contained value.\n\n##### [¬ß](#examples-6)Examples\n\n```\nuse std::cell::Cell;\n\nlet c = Cell::new(5);\n\nlet five = c.get();\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::Cell;%0A++++%0A++++let+c+=+Cell::new(5);%0A++++%0A++++let+five+=+c.get();%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#556-558)\n\nüî¨This is a nightly-only experimental API. (`cell_update`¬†[#50186](https://github.com/rust-lang/rust/issues/50186))\n\nUpdates the contained value using a function and returns the new value.\n\n##### [¬ß](#examples-7)Examples\n\n```\n#![feature(cell_update)]\n\nuse std::cell::Cell;\n\nlet c = Cell::new(5);\nlet new = c.update(|x| x + 1);\n\nassert_eq!(new, 6);\nassert_eq!(c.get(), 6);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(cell_update)%5D%0A%0Afn+main()+%7B%0A++++use+std::cell::Cell;%0A++++%0A++++let+c+=+Cell::new(5);%0A++++let+new+=+c.update(%7Cx%7C+x+%2B+1);%0A++++%0A++++assert_eq!(new,+6);%0A++++assert_eq!(c.get(),+6);%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#567)[¬ß](#impl-Cell%3CT%3E-2)\n\n1.12.0 (const: 1.32.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#583)\n\nReturns a raw pointer to the underlying data in this cell.\n\n##### [¬ß](#examples-8)Examples\n\n```\nuse std::cell::Cell;\n\nlet c = Cell::new(5);\n\nlet ptr = c.as_ptr();\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::Cell;%0A++++%0A++++let+c+=+Cell::new(5);%0A++++%0A++++let+ptr+=+c.as_ptr();%0A%7D&edition=2021)\n\n1.11.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#611)\n\nReturns a mutable reference to the underlying data.\n\nThis call borrows `Cell` mutably (at compile-time) which guarantees that we possess the only reference.\n\nHowever be cautious: this method expects `self` to be mutable, which is generally not the case when using a `Cell`. If you require interior mutability by reference, consider using `RefCell` which provides run-time checked mutable borrows through its [`borrow_mut`](about:blank/struct.RefCell.html#method.borrow_mut \"method std::cell::RefCell::borrow_mut\") method.\n\n##### [¬ß](#examples-9)Examples\n\n```\nuse std::cell::Cell;\n\nlet mut c = Cell::new(5);\n*c.get_mut() += 1;\n\nassert_eq!(c.get(), 6);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::Cell;%0A++++%0A++++let+mut+c+=+Cell::new(5);%0A++++*c.get_mut()+%2B=+1;%0A++++%0A++++assert_eq!(c.get(),+6);%0A%7D&edition=2021)\n\n1.37.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#630)\n\nReturns a `&Cell<T>` from a `&mut T`\n\n##### [¬ß](#examples-10)Examples\n\n```\nuse std::cell::Cell;\n\nlet slice: &mut [i32] = &mut [1, 2, 3];\nlet cell_slice: &Cell<[i32]> = Cell::from_mut(slice);\nlet slice_cell: &[Cell<i32>] = cell_slice.as_slice_of_cells();\n\nassert_eq!(slice_cell.len(), 3);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::Cell;%0A++++%0A++++let+slice:+%26mut+%5Bi32%5D+=+%26mut+%5B1,+2,+3%5D;%0A++++let+cell_slice:+%26Cell%3C%5Bi32%5D%3E+=+Cell::from_mut(slice);%0A++++let+slice_cell:+%26%5BCell%3Ci32%3E%5D+=+cell_slice.as_slice_of_cells();%0A++++%0A++++assert_eq!(slice_cell.len(),+3);%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#636)[¬ß](#impl-Cell%3CT%3E-3)\n\n1.17.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#651)\n\nTakes the value of the cell, leaving `Default::default()` in its place.\n\n##### [¬ß](#examples-11)Examples\n\n```\nuse std::cell::Cell;\n\nlet c = Cell::new(5);\nlet five = c.take();\n\nassert_eq!(five, 5);\nassert_eq!(c.into_inner(), 0);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::Cell;%0A++++%0A++++let+c+=+Cell::new(5);%0A++++let+five+=+c.take();%0A++++%0A++++assert_eq!(five,+5);%0A++++assert_eq!(c.into_inner(),+0);%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#669)[¬ß](#impl-Cell%3C%5BT%5D%3E)\n\n1.37.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#684)\n\nReturns a `&[Cell<T>]` from a `&Cell<[T]>`\n\n##### [¬ß](#examples-12)Examples\n\n```\nuse std::cell::Cell;\n\nlet slice: &mut [i32] = &mut [1, 2, 3];\nlet cell_slice: &Cell<[i32]> = Cell::from_mut(slice);\nlet slice_cell: &[Cell<i32>] = cell_slice.as_slice_of_cells();\n\nassert_eq!(slice_cell.len(), 3);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::Cell;%0A++++%0A++++let+slice:+%26mut+%5Bi32%5D+=+%26mut+%5B1,+2,+3%5D;%0A++++let+cell_slice:+%26Cell%3C%5Bi32%5D%3E+=+Cell::from_mut(slice);%0A++++let+slice_cell:+%26%5BCell%3Ci32%3E%5D+=+cell_slice.as_slice_of_cells();%0A++++%0A++++assert_eq!(slice_cell.len(),+3);%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#690)[¬ß](#impl-Cell%3C%5BT;+N%5D%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#704)\n\nüî¨This is a nightly-only experimental API. (`as_array_of_cells`¬†[#88248](https://github.com/rust-lang/rust/issues/88248))\n\nReturns a `&[Cell<T>; N]` from a `&Cell<[T; N]>`\n\n##### [¬ß](#examples-13)Examples\n\n```\n#![feature(as_array_of_cells)]\nuse std::cell::Cell;\n\nlet mut array: [i32; 3] = [1, 2, 3];\nlet cell_array: &Cell<[i32; 3]> = Cell::from_mut(&mut array);\nlet array_cell: &[Cell<i32>; 3] = cell_array.as_array_of_cells();\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(as_array_of_cells)%5D%0Afn+main()+%7B%0A++++use+std::cell::Cell;%0A++++%0A++++let+mut+array:+%5Bi32;+3%5D+=+%5B1,+2,+3%5D;%0A++++let+cell_array:+%26Cell%3C%5Bi32;+3%5D%3E+=+Cell::from_mut(%26mut+array);%0A++++let+array_cell:+%26%5BCell%3Ci32%3E;+3%5D+=+cell_array.as_array_of_cells();%0A%7D&version=nightly&edition=2021)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#324)[¬ß](#impl-Clone-for-Cell%3CT%3E)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#2624)[¬ß](#impl-Debug-for-Cell%3CT%3E)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#332)[¬ß](#impl-Default-for-Cell%3CT%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#335)[¬ß](#method.default)\n\nCreates a `Cell<T>`, with the `Default` value for T.\n\n1.12.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#388)[¬ß](#impl-From%3CT%3E-for-Cell%3CT%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#390)[¬ß](#method.from)\n\nCreates a new `Cell<T>` containing the given value.\n\n1.10.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#380)[¬ß](#impl-Ord-for-Cell%3CT%3E)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#341)[¬ß](#impl-PartialEq-for-Cell%3CT%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#343)[¬ß](#method.eq)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[¬ß](#method.ne)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.10.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#352)[¬ß](#impl-PartialOrd-for-Cell%3CT%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#354)[¬ß](#method.partial_cmp)\n\nThis method returns an ordering between `self` and `other` values if one exists. [Read more](about:blank/cmp/trait.PartialOrd.html#tymethod.partial_cmp)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#359)[¬ß](#method.lt)\n\nThis method tests less than (for `self` and `other`) and is used by the `<` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.lt)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#364)[¬ß](#method.le)\n\nThis method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.le)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#369)[¬ß](#method.gt)\n\nThis method tests greater than (for `self` and `other`) and is used by the `>` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.gt)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#374)[¬ß](#method.ge)\n\nThis method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.ge)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#657)[¬ß](#impl-CoerceUnsized%3CCell%3CU%3E%3E-for-Cell%3CT%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#667)[¬ß](#impl-DispatchFromDyn%3CCell%3CU%3E%3E-for-Cell%3CT%3E)\n\n1.2.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#349)[¬ß](#impl-Eq-for-Cell%3CT%3E)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#313)[¬ß](#impl-Send-for-Cell%3CT%3E)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#321)[¬ß](#impl-Sync-for-Cell%3CT%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140)[¬ß](#impl-Any-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208)[¬ß](#impl-Borrow%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216)[¬ß](#impl-BorrowMut%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#782)[¬ß](#impl-From%3C!%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#783)[¬ß](#method.from-1)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765)[¬ß](#impl-From%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768)[¬ß](#method.from-2)\n\nReturns the argument unchanged.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750)[¬ß](#impl-Into%3CU%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758)[¬ß](#method.into)\n\nCalls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of `[From](../convert/trait.From.html \"trait std::convert::From\")<T> for U` chooses to do.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85)[¬ß](#impl-ToOwned-for-T)\n\n[¬ß](#associatedtype.Owned)\n\nThe resulting type after obtaining ownership.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88)[¬ß](#method.to_owned)\n\nCreates owned data from borrowed data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#tymethod.to_owned)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92)[¬ß](#method.clone_into)\n\nUses borrowed data to replace owned data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#method.clone_into)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807)[¬ß](#impl-TryFrom%3CU%3E-for-T)\n\n[¬ß](#associatedtype.Error-1)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812)[¬ß](#method.try_from)\n\nPerforms the conversion.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792)[¬ß](#impl-TryInto%3CU%3E-for-T)\n\n[¬ß](#associatedtype.Error)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797)[¬ß](#method.try_into)\n\nPerforms the conversion.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"A mutable memory location.\"><title>Cell in std::cell - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc struct\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">Cell</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">Cell</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#implementations\">Methods</a></h3><ul class=\"block method\"><li><a href=\"#method.as_array_of_cells\">as_array_of_cells</a></li><li><a href=\"#method.as_ptr\">as_ptr</a></li><li><a href=\"#method.as_slice_of_cells\">as_slice_of_cells</a></li><li><a href=\"#method.from_mut\">from_mut</a></li><li><a href=\"#method.get\">get</a></li><li><a href=\"#method.get_mut\">get_mut</a></li><li><a href=\"#method.into_inner\">into_inner</a></li><li><a href=\"#method.new\">new</a></li><li><a href=\"#method.replace\">replace</a></li><li><a href=\"#method.set\">set</a></li><li><a href=\"#method.swap\">swap</a></li><li><a href=\"#method.take\">take</a></li><li><a href=\"#method.update\">update</a></li></ul><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-Sync-for-Cell%3CT%3E\">!Sync</a></li><li><a href=\"#impl-Clone-for-Cell%3CT%3E\">Clone</a></li><li><a href=\"#impl-CoerceUnsized%3CCell%3CU%3E%3E-for-Cell%3CT%3E\">CoerceUnsized&lt;Cell&lt;U&gt;&gt;</a></li><li><a href=\"#impl-Debug-for-Cell%3CT%3E\">Debug</a></li><li><a href=\"#impl-Default-for-Cell%3CT%3E\">Default</a></li><li><a href=\"#impl-DispatchFromDyn%3CCell%3CU%3E%3E-for-Cell%3CT%3E\">DispatchFromDyn&lt;Cell&lt;U&gt;&gt;</a></li><li><a href=\"#impl-Eq-for-Cell%3CT%3E\">Eq</a></li><li><a href=\"#impl-From%3CT%3E-for-Cell%3CT%3E\">From&lt;T&gt;</a></li><li><a href=\"#impl-Ord-for-Cell%3CT%3E\">Ord</a></li><li><a href=\"#impl-PartialEq-for-Cell%3CT%3E\">PartialEq</a></li><li><a href=\"#impl-PartialOrd-for-Cell%3CT%3E\">PartialOrd</a></li><li><a href=\"#impl-Send-for-Cell%3CT%3E\">Send</a></li></ul><h3><a href=\"#synthetic-implementations\">Auto Trait Implementations</a></h3><ul class=\"block synthetic-implementation\"><li><a href=\"#impl-Freeze-for-Cell%3CT%3E\">!Freeze</a></li><li><a href=\"#impl-RefUnwindSafe-for-Cell%3CT%3E\">!RefUnwindSafe</a></li><li><a href=\"#impl-Unpin-for-Cell%3CT%3E\">Unpin</a></li><li><a href=\"#impl-UnwindSafe-for-Cell%3CT%3E\">UnwindSafe</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-Any-for-T\">Any</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-T\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-T\">BorrowMut&lt;T&gt;</a></li><li><a href=\"#impl-From%3C!%3E-for-T\">From&lt;!&gt;</a></li><li><a href=\"#impl-From%3CT%3E-for-T\">From&lt;T&gt;</a></li><li><a href=\"#impl-Into%3CU%3E-for-T\">Into&lt;U&gt;</a></li><li><a href=\"#impl-ToOwned-for-T\">ToOwned</a></li><li><a href=\"#impl-TryFrom%3CU%3E-for-T\">TryFrom&lt;U&gt;</a></li><li><a href=\"#impl-TryInto%3CU%3E-for-T\">TryInto&lt;U&gt;</a></li></ul></section><h2><a href=\"index.html\">In std::cell</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.BorrowError.html\">BorrowError</a></li><li><a href=\"struct.BorrowMutError.html\">BorrowMutError</a></li><li><a href=\"struct.Cell.html\">Cell</a></li><li><a href=\"struct.LazyCell.html\">LazyCell</a></li><li><a href=\"struct.OnceCell.html\">OnceCell</a></li><li><a href=\"struct.Ref.html\">Ref</a></li><li><a href=\"struct.RefCell.html\">RefCell</a></li><li><a href=\"struct.RefMut.html\">RefMut</a></li><li><a href=\"struct.SyncUnsafeCell.html\">SyncUnsafeCell</a></li><li><a href=\"struct.UnsafeCell.html\">UnsafeCell</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‚ÄòS‚Äô or ‚Äò/‚Äô to search, ‚Äò?‚Äô for more options‚Ä¶\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Struct <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">cell</a>::<wbr><a class=\"struct\" href=\"#\">Cell</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#308\">source</a> ¬∑ <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>‚àí</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub struct Cell&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div>{ <span class=\"comment\">/* private fields */</span> }</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>A mutable memory location.</p>\n<h2 id=\"memory-layout\"><a class=\"doc-anchor\" href=\"#memory-layout\">¬ß</a>Memory layout</h2>\n<p><code>Cell&lt;T&gt;</code> has the same <a href=\"struct.UnsafeCell.html#memory-layout\" title=\"struct std::cell::UnsafeCell\">memory layout and caveats as\n<code>UnsafeCell&lt;T&gt;</code></a>. In particular, this means that\n<code>Cell&lt;T&gt;</code> has the same in-memory representation as its inner type <code>T</code>.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">¬ß</a>Examples</h2>\n<p>In this example, you can see that <code>Cell&lt;T&gt;</code> enables mutation inside an\nimmutable struct. In other words, it enables ‚Äúinterior mutability‚Äù.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::Cell;\n\n<span class=\"kw\">struct </span>SomeStruct {\n    regular_field: u8,\n    special_field: Cell&lt;u8&gt;,\n}\n\n<span class=\"kw\">let </span>my_struct = SomeStruct {\n    regular_field: <span class=\"number\">0</span>,\n    special_field: Cell::new(<span class=\"number\">1</span>),\n};\n\n<span class=\"kw\">let </span>new_value = <span class=\"number\">100</span>;\n\n<span class=\"comment\">// ERROR: `my_struct` is immutable\n// my_struct.regular_field = new_value;\n\n// WORKS: although `my_struct` is immutable, `special_field` is a `Cell`,\n// which can always be mutated\n</span>my_struct.special_field.set(new_value);\n<span class=\"macro\">assert_eq!</span>(my_struct.special_field.get(), new_value);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::Cell;%0A++++%0A++++struct+SomeStruct+%7B%0A++++++++regular_field:+u8,%0A++++++++special_field:+Cell%3Cu8%3E,%0A++++%7D%0A++++%0A++++let+my_struct+=+SomeStruct+%7B%0A++++++++regular_field:+0,%0A++++++++special_field:+Cell::new(1),%0A++++%7D;%0A++++%0A++++let+new_value+=+100;%0A++++%0A++++//+ERROR:+%60my_struct%60+is+immutable%0A++++//+my_struct.regular_field+=+new_value;%0A++++%0A++++//+WORKS:+although+%60my_struct%60+is+immutable,+%60special_field%60+is+a+%60Cell%60,%0A++++//+which+can+always+be+mutated%0A++++my_struct.special_field.set(new_value);%0A++++assert_eq!(my_struct.special_field.get(),+new_value);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>See the <a href=\"index.html\" title=\"mod std::cell\">module-level documentation</a> for more.</p>\n</div></details><h2 id=\"implementations\" class=\"section-header\">Implementations<a href=\"#implementations\" class=\"anchor\">¬ß</a></h2><div id=\"implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Cell%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#395\">source</a><a href=\"#impl-Cell%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"struct.Cell.html\" title=\"struct std::cell::Cell\">Cell</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.new\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.24.0\">1.0.0 (const: 1.24.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#408\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.new\" class=\"fn\">new</a>(value: T) -&gt; <a class=\"struct\" href=\"struct.Cell.html\" title=\"struct std::cell::Cell\">Cell</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new <code>Cell</code> containing the given value.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::Cell;\n\n<span class=\"kw\">let </span>c = Cell::new(<span class=\"number\">5</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::Cell;%0A++++%0A++++let+c+=+Cell::new(5);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.set\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#425\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.set\" class=\"fn\">set</a>(&amp;self, val: T)</h4></section></summary><div class=\"docblock\"><p>Sets the contained value.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::Cell;\n\n<span class=\"kw\">let </span>c = Cell::new(<span class=\"number\">5</span>);\n\nc.set(<span class=\"number\">10</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::Cell;%0A++++%0A++++let+c+=+Cell::new(5);%0A++++%0A++++c.set(10);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.swap\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.17.0\">1.17.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#451\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.swap\" class=\"fn\">swap</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.Cell.html\" title=\"struct std::cell::Cell\">Cell</a>&lt;T&gt;)</h4></section></summary><div class=\"docblock\"><p>Swaps the values of two <code>Cell</code>s.\nDifference with <code>std::mem::swap</code> is that this function doesn‚Äôt require <code>&amp;mut</code> reference.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">¬ß</a>Panics</h5>\n<p>This function will panic if <code>self</code> and <code>other</code> are different <code>Cell</code>s that partially overlap.\n(Using just standard library methods, it is impossible to create such partially overlapping <code>Cell</code>s.\nHowever, unsafe code is allowed to e.g. create two <code>&amp;Cell&lt;[i32; 2]&gt;</code> that partially overlap.)</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::Cell;\n\n<span class=\"kw\">let </span>c1 = Cell::new(<span class=\"number\">5i32</span>);\n<span class=\"kw\">let </span>c2 = Cell::new(<span class=\"number\">10i32</span>);\nc1.swap(<span class=\"kw-2\">&amp;</span>c2);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">10</span>, c1.get());\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">5</span>, c2.get());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::Cell;%0A++++%0A++++let+c1+=+Cell::new(5i32);%0A++++let+c2+=+Cell::new(10i32);%0A++++c1.swap(%26c2);%0A++++assert_eq!(10,+c1.get());%0A++++assert_eq!(5,+c2.get());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.replace\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.17.0\">1.17.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#494\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.replace\" class=\"fn\">replace</a>(&amp;self, val: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Replaces the contained value with <code>val</code>, and returns the old contained value.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::Cell;\n\n<span class=\"kw\">let </span>cell = Cell::new(<span class=\"number\">5</span>);\n<span class=\"macro\">assert_eq!</span>(cell.get(), <span class=\"number\">5</span>);\n<span class=\"macro\">assert_eq!</span>(cell.replace(<span class=\"number\">10</span>), <span class=\"number\">5</span>);\n<span class=\"macro\">assert_eq!</span>(cell.get(), <span class=\"number\">10</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::Cell;%0A++++%0A++++let+cell+=+Cell::new(5);%0A++++assert_eq!(cell.get(),+5);%0A++++assert_eq!(cell.replace(10),+5);%0A++++assert_eq!(cell.get(),+10);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_inner\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.17.0, const unstable\">1.17.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/78729\" title=\"Tracking issue for const_cell_into_inner\">unstable</a>)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#514\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.into_inner\" class=\"fn\">into_inner</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Unwraps the value, consuming the cell.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::Cell;\n\n<span class=\"kw\">let </span>c = Cell::new(<span class=\"number\">5</span>);\n<span class=\"kw\">let </span>five = c.into_inner();\n\n<span class=\"macro\">assert_eq!</span>(five, <span class=\"number\">5</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::Cell;%0A++++%0A++++let+c+=+Cell::new(5);%0A++++let+five+=+c.into_inner();%0A++++%0A++++assert_eq!(five,+5);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Cell%3CT%3E-1\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#519\">source</a><a href=\"#impl-Cell%3CT%3E-1\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"struct.Cell.html\" title=\"struct std::cell::Cell\">Cell</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#533\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.get\" class=\"fn\">get</a>(&amp;self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns a copy of the contained value.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::Cell;\n\n<span class=\"kw\">let </span>c = Cell::new(<span class=\"number\">5</span>);\n\n<span class=\"kw\">let </span>five = c.get();</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::Cell;%0A++++%0A++++let+c+=+Cell::new(5);%0A++++%0A++++let+five+=+c.get();%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.update\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#556-558\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.update\" class=\"fn\">update</a>&lt;F&gt;(&amp;self, f: F) -&gt; T<div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnOnce.html\" title=\"trait std::ops::FnOnce\">FnOnce</a>(T) -&gt; T,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>cell_update</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/50186\">#50186</a>)</span></div></span></summary><div class=\"docblock\"><p>Updates the contained value using a function and returns the new value.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(cell_update)]\n\n</span><span class=\"kw\">use </span>std::cell::Cell;\n\n<span class=\"kw\">let </span>c = Cell::new(<span class=\"number\">5</span>);\n<span class=\"kw\">let </span>new = c.update(|x| x + <span class=\"number\">1</span>);\n\n<span class=\"macro\">assert_eq!</span>(new, <span class=\"number\">6</span>);\n<span class=\"macro\">assert_eq!</span>(c.get(), <span class=\"number\">6</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(cell_update)%5D%0A%0Afn+main()+%7B%0A++++use+std::cell::Cell;%0A++++%0A++++let+c+=+Cell::new(5);%0A++++let+new+=+c.update(%7Cx%7C+x+%2B+1);%0A++++%0A++++assert_eq!(new,+6);%0A++++assert_eq!(c.get(),+6);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Cell%3CT%3E-2\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#567\">source</a><a href=\"#impl-Cell%3CT%3E-2\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"struct.Cell.html\" title=\"struct std::cell::Cell\">Cell</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_ptr\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0, const since 1.32.0\">1.12.0 (const: 1.32.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#583\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.as_ptr\" class=\"fn\">as_ptr</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.pointer.html\">*mut T</a></h4></section></summary><div class=\"docblock\"><p>Returns a raw pointer to the underlying data in this cell.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::Cell;\n\n<span class=\"kw\">let </span>c = Cell::new(<span class=\"number\">5</span>);\n\n<span class=\"kw\">let </span>ptr = c.as_ptr();</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::Cell;%0A++++%0A++++let+c+=+Cell::new(5);%0A++++%0A++++let+ptr+=+c.as_ptr();%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.11.0\">1.11.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#611\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.get_mut\" class=\"fn\">get_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\"><p>Returns a mutable reference to the underlying data.</p>\n<p>This call borrows <code>Cell</code> mutably (at compile-time) which guarantees\nthat we possess the only reference.</p>\n<p>However be cautious: this method expects <code>self</code> to be mutable, which is\ngenerally not the case when using a <code>Cell</code>. If you require interior\nmutability by reference, consider using <code>RefCell</code> which provides\nrun-time checked mutable borrows through its <a href=\"struct.RefCell.html#method.borrow_mut\" title=\"method std::cell::RefCell::borrow_mut\"><code>borrow_mut</code></a> method.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::Cell;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>c = Cell::new(<span class=\"number\">5</span>);\n<span class=\"kw-2\">*</span>c.get_mut() += <span class=\"number\">1</span>;\n\n<span class=\"macro\">assert_eq!</span>(c.get(), <span class=\"number\">6</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::Cell;%0A++++%0A++++let+mut+c+=+Cell::new(5);%0A++++*c.get_mut()+%2B=+1;%0A++++%0A++++assert_eq!(c.get(),+6);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0\">1.37.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#630\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.from_mut\" class=\"fn\">from_mut</a>(t: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>) -&gt; &amp;<a class=\"struct\" href=\"struct.Cell.html\" title=\"struct std::cell::Cell\">Cell</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a <code>&amp;Cell&lt;T&gt;</code> from a <code>&amp;mut T</code></p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::Cell;\n\n<span class=\"kw\">let </span>slice: <span class=\"kw-2\">&amp;mut </span>[i32] = <span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"kw\">let </span>cell_slice: <span class=\"kw-2\">&amp;</span>Cell&lt;[i32]&gt; = Cell::from_mut(slice);\n<span class=\"kw\">let </span>slice_cell: <span class=\"kw-2\">&amp;</span>[Cell&lt;i32&gt;] = cell_slice.as_slice_of_cells();\n\n<span class=\"macro\">assert_eq!</span>(slice_cell.len(), <span class=\"number\">3</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::Cell;%0A++++%0A++++let+slice:+%26mut+%5Bi32%5D+=+%26mut+%5B1,+2,+3%5D;%0A++++let+cell_slice:+%26Cell%3C%5Bi32%5D%3E+=+Cell::from_mut(slice);%0A++++let+slice_cell:+%26%5BCell%3Ci32%3E%5D+=+cell_slice.as_slice_of_cells();%0A++++%0A++++assert_eq!(slice_cell.len(),+3);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Cell%3CT%3E-3\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#636\">source</a><a href=\"#impl-Cell%3CT%3E-3\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"struct.Cell.html\" title=\"struct std::cell::Cell\">Cell</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../default/trait.Default.html\" title=\"trait std::default::Default\">Default</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.take\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.17.0\">1.17.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#651\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.take\" class=\"fn\">take</a>(&amp;self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Takes the value of the cell, leaving <code>Default::default()</code> in its place.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::Cell;\n\n<span class=\"kw\">let </span>c = Cell::new(<span class=\"number\">5</span>);\n<span class=\"kw\">let </span>five = c.take();\n\n<span class=\"macro\">assert_eq!</span>(five, <span class=\"number\">5</span>);\n<span class=\"macro\">assert_eq!</span>(c.into_inner(), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::Cell;%0A++++%0A++++let+c+=+Cell::new(5);%0A++++let+five+=+c.take();%0A++++%0A++++assert_eq!(five,+5);%0A++++assert_eq!(c.into_inner(),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Cell%3C%5BT%5D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#669\">source</a><a href=\"#impl-Cell%3C%5BT%5D%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"struct.Cell.html\" title=\"struct std::cell::Cell\">Cell</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_slice_of_cells\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0\">1.37.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#684\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.as_slice_of_cells\" class=\"fn\">as_slice_of_cells</a>(&amp;self) -&gt; &amp;[<a class=\"struct\" href=\"struct.Cell.html\" title=\"struct std::cell::Cell\">Cell</a>&lt;T&gt;]</h4></section></summary><div class=\"docblock\"><p>Returns a <code>&amp;[Cell&lt;T&gt;]</code> from a <code>&amp;Cell&lt;[T]&gt;</code></p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::Cell;\n\n<span class=\"kw\">let </span>slice: <span class=\"kw-2\">&amp;mut </span>[i32] = <span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"kw\">let </span>cell_slice: <span class=\"kw-2\">&amp;</span>Cell&lt;[i32]&gt; = Cell::from_mut(slice);\n<span class=\"kw\">let </span>slice_cell: <span class=\"kw-2\">&amp;</span>[Cell&lt;i32&gt;] = cell_slice.as_slice_of_cells();\n\n<span class=\"macro\">assert_eq!</span>(slice_cell.len(), <span class=\"number\">3</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::Cell;%0A++++%0A++++let+slice:+%26mut+%5Bi32%5D+=+%26mut+%5B1,+2,+3%5D;%0A++++let+cell_slice:+%26Cell%3C%5Bi32%5D%3E+=+Cell::from_mut(slice);%0A++++let+slice_cell:+%26%5BCell%3Ci32%3E%5D+=+cell_slice.as_slice_of_cells();%0A++++%0A++++assert_eq!(slice_cell.len(),+3);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Cell%3C%5BT;+N%5D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#690\">source</a><a href=\"#impl-Cell%3C%5BT;+N%5D%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"struct\" href=\"struct.Cell.html\" title=\"struct std::cell::Cell\">Cell</a>&lt;<a class=\"primitive\" href=\"../primitive.array.html\">[T; N]</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_array_of_cells\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#704\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.as_array_of_cells\" class=\"fn\">as_array_of_cells</a>(&amp;self) -&gt; &amp;[<a class=\"struct\" href=\"struct.Cell.html\" title=\"struct std::cell::Cell\">Cell</a>&lt;T&gt;; <a class=\"primitive\" href=\"../primitive.array.html\">N</a>]</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>as_array_of_cells</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/88248\">#88248</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns a <code>&amp;[Cell&lt;T&gt;; N]</code> from a <code>&amp;Cell&lt;[T; N]&gt;</code></p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(as_array_of_cells)]\n</span><span class=\"kw\">use </span>std::cell::Cell;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>array: [i32; <span class=\"number\">3</span>] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"kw\">let </span>cell_array: <span class=\"kw-2\">&amp;</span>Cell&lt;[i32; <span class=\"number\">3</span>]&gt; = Cell::from_mut(<span class=\"kw-2\">&amp;mut </span>array);\n<span class=\"kw\">let </span>array_cell: <span class=\"kw-2\">&amp;</span>[Cell&lt;i32&gt;; <span class=\"number\">3</span>] = cell_array.as_array_of_cells();</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(as_array_of_cells)%5D%0Afn+main()+%7B%0A++++use+std::cell::Cell;%0A++++%0A++++let+mut+array:+%5Bi32;+3%5D+=+%5B1,+2,+3%5D;%0A++++let+cell_array:+%26Cell%3C%5Bi32;+3%5D%3E+=+Cell::from_mut(%26mut+array);%0A++++let+array_cell:+%26%5BCell%3Ci32%3E;+3%5D+=+cell_array.as_array_of_cells();%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details></div></details></div><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">¬ß</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Clone-for-Cell%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#324\">source</a></span><a href=\"#impl-Clone-for-Cell%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"struct.Cell.html\" title=\"struct std::cell::Cell\">Cell</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#326\">source</a><a href=\"#method.clone\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"struct.Cell.html\" title=\"struct std::cell::Cell\">Cell</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\">Returns a copy of the value. <a href=\"../clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class=\"docblock\">Performs copy-assignment from <code>source</code>. <a href=\"../clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-Cell%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#2624\">source</a></span><a href=\"#impl-Debug-for-Cell%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"struct.Cell.html\" title=\"struct std::cell::Cell\">Cell</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a> + <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#2625\">source</a><a href=\"#method.fmt\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"../fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Default-for-Cell%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#332\">source</a></span><a href=\"#impl-Default-for-Cell%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for <a class=\"struct\" href=\"struct.Cell.html\" title=\"struct std::cell::Cell\">Cell</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../default/trait.Default.html\" title=\"trait std::default::Default\">Default</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#335\">source</a><a href=\"#method.default\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"struct\" href=\"struct.Cell.html\" title=\"struct std::cell::Cell\">Cell</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a <code>Cell&lt;T&gt;</code>, with the <code>Default</code> value for T.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CT%3E-for-Cell%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#388\">source</a></span><a href=\"#impl-From%3CT%3E-for-Cell%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for <a class=\"struct\" href=\"struct.Cell.html\" title=\"struct std::cell::Cell\">Cell</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#390\">source</a><a href=\"#method.from\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; <a class=\"struct\" href=\"struct.Cell.html\" title=\"struct std::cell::Cell\">Cell</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new <code>Cell&lt;T&gt;</code> containing the given value.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Ord-for-Cell%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#380\">source</a></span><a href=\"#impl-Ord-for-Cell%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"struct.Cell.html\" title=\"struct std::cell::Cell\">Cell</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> + <a class=\"trait\" href=\"../marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#382\">source</a><a href=\"#method.cmp\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.Cell.html\" title=\"struct std::cell::Cell\">Cell</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a></h4></section></summary><div class=\"docblock\">This method returns an <a href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"../cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#856-858\">source</a></span><a href=\"#method.max\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Compares and returns the maximum of two values. <a href=\"../cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#877-879\">source</a></span><a href=\"#method.min\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Compares and returns the minimum of two values. <a href=\"../cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#903-906\">source</a></span><a href=\"#method.clamp\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>,</div></h4></section></summary><div class=\"docblock\">Restrict a value to a certain interval. <a href=\"../cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq-for-Cell%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#341\">source</a></span><a href=\"#impl-PartialEq-for-Cell%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"struct.Cell.html\" title=\"struct std::cell::Cell\">Cell</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a> + <a class=\"trait\" href=\"../marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#343\">source</a><a href=\"#method.eq\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.Cell.html\" title=\"struct std::cell::Cell\">Cell</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialOrd-for-Cell%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#352\">source</a></span><a href=\"#impl-PartialOrd-for-Cell%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a> for <a class=\"struct\" href=\"struct.Cell.html\" title=\"struct std::cell::Cell\">Cell</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a> + <a class=\"trait\" href=\"../marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#354\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.Cell.html\" title=\"struct std::cell::Cell\">Cell</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\">This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"../cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#359\">source</a><a href=\"#method.lt\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.Cell.html\" title=\"struct std::cell::Cell\">Cell</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"../cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.le\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#364\">source</a><a href=\"#method.le\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.Cell.html\" title=\"struct std::cell::Cell\">Cell</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"../cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#369\">source</a><a href=\"#method.gt\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.Cell.html\" title=\"struct std::cell::Cell\">Cell</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"../cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ge\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#374\">source</a><a href=\"#method.ge\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.Cell.html\" title=\"struct std::cell::Cell\">Cell</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"../cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details><section id=\"impl-CoerceUnsized%3CCell%3CU%3E%3E-for-Cell%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#657\">source</a><a href=\"#impl-CoerceUnsized%3CCell%3CU%3E%3E-for-Cell%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../ops/trait.CoerceUnsized.html\" title=\"trait std::ops::CoerceUnsized\">CoerceUnsized</a>&lt;<a class=\"struct\" href=\"struct.Cell.html\" title=\"struct std::cell::Cell\">Cell</a>&lt;U&gt;&gt; for <a class=\"struct\" href=\"struct.Cell.html\" title=\"struct std::cell::Cell\">Cell</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../ops/trait.CoerceUnsized.html\" title=\"trait std::ops::CoerceUnsized\">CoerceUnsized</a>&lt;U&gt;,</div></h3></section><section id=\"impl-DispatchFromDyn%3CCell%3CU%3E%3E-for-Cell%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#667\">source</a><a href=\"#impl-DispatchFromDyn%3CCell%3CU%3E%3E-for-Cell%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../ops/trait.DispatchFromDyn.html\" title=\"trait std::ops::DispatchFromDyn\">DispatchFromDyn</a>&lt;<a class=\"struct\" href=\"struct.Cell.html\" title=\"struct std::cell::Cell\">Cell</a>&lt;U&gt;&gt; for <a class=\"struct\" href=\"struct.Cell.html\" title=\"struct std::cell::Cell\">Cell</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../ops/trait.DispatchFromDyn.html\" title=\"trait std::ops::DispatchFromDyn\">DispatchFromDyn</a>&lt;U&gt;,</div></h3></section><section id=\"impl-Eq-for-Cell%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0\">1.2.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#349\">source</a></span><a href=\"#impl-Eq-for-Cell%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"struct.Cell.html\" title=\"struct std::cell::Cell\">Cell</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"../marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a>,</div></h3></section><section id=\"impl-Send-for-Cell%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#313\">source</a></span><a href=\"#impl-Send-for-Cell%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"struct\" href=\"struct.Cell.html\" title=\"struct std::cell::Cell\">Cell</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-Sync-for-Cell%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#321\">source</a></span><a href=\"#impl-Sync-for-Cell%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; !<a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"struct.Cell.html\" title=\"struct std::cell::Cell\">Cell</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></div><h2 id=\"synthetic-implementations\" class=\"section-header\">Auto Trait Implementations<a href=\"#synthetic-implementations\" class=\"anchor\">¬ß</a></h2><div id=\"synthetic-implementations-list\"><section id=\"impl-Freeze-for-Cell%3CT%3E\" class=\"impl\"><a href=\"#impl-Freeze-for-Cell%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; !<a class=\"trait\" href=\"../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"struct\" href=\"struct.Cell.html\" title=\"struct std::cell::Cell\">Cell</a>&lt;T&gt;</h3></section><section id=\"impl-RefUnwindSafe-for-Cell%3CT%3E\" class=\"impl\"><a href=\"#impl-RefUnwindSafe-for-Cell%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; !<a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"struct\" href=\"struct.Cell.html\" title=\"struct std::cell::Cell\">Cell</a>&lt;T&gt;</h3></section><section id=\"impl-Unpin-for-Cell%3CT%3E\" class=\"impl\"><a href=\"#impl-Unpin-for-Cell%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"struct\" href=\"struct.Cell.html\" title=\"struct std::cell::Cell\">Cell</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-UnwindSafe-for-Cell%3CT%3E\" class=\"impl\"><a href=\"#impl-UnwindSafe-for-Cell%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"struct.Cell.html\" title=\"struct std::cell::Cell\">Cell</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">¬ß</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Any-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a><a href=\"#impl-Any-for-T\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#141\">source</a><a href=\"#method.type_id\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../any/trait.Any.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\">Gets the <code>TypeId</code> of <code>self</code>. <a href=\"../any/trait.Any.html#tymethod.type_id\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Borrow%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208\">source</a><a href=\"#impl-Borrow%3CT%3E-for-T\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#210\">source</a><a href=\"#method.borrow\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216\">source</a><a href=\"#impl-BorrowMut%3CT%3E-for-T\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#217\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3C!%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#782\">source</a><a href=\"#impl-From%3C!%3E-for-T\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"../primitive.never.html\">!</a>&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#783\">source</a><a href=\"#method.from-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: <a class=\"primitive\" href=\"../primitive.never.html\">!</a>) -&gt; T</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765\">source</a><a href=\"#impl-From%3CT%3E-for-T\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768\">source</a><a href=\"#method.from-2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the argument unchanged.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Into%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750\">source</a><a href=\"#impl-Into%3CU%3E-for-T\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758\">source</a><a href=\"#method.into\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; U</h4></section></summary><div class=\"docblock\"><p>Calls <code>U::from(self)</code>.</p>\n<p>That is, this conversion is whatever the implementation of\n<code><a href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for U</code> chooses to do.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-ToOwned-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85\">source</a><a href=\"#impl-ToOwned-for-T\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.ToOwned.html\" title=\"trait std::borrow::ToOwned\">ToOwned</a> for T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Owned\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Owned\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../borrow/trait.ToOwned.html#associatedtype.Owned\" class=\"associatedtype\">Owned</a> = T</h4></section></summary><div class=\"docblock\">The resulting type after obtaining ownership.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_owned\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88\">source</a><a href=\"#method.to_owned\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.ToOwned.html#tymethod.to_owned\" class=\"fn\">to_owned</a>(&amp;self) -&gt; T</h4></section></summary><div class=\"docblock\">Creates owned data from borrowed data, usually by cloning. <a href=\"../borrow/trait.ToOwned.html#tymethod.to_owned\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92\">source</a><a href=\"#method.clone_into\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.ToOwned.html#method.clone_into\" class=\"fn\">clone_into</a>(&amp;self, target: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>)</h4></section></summary><div class=\"docblock\">Uses borrowed data to replace owned data, usually by cloning. <a href=\"../borrow/trait.ToOwned.html#method.clone_into\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryFrom%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807\">source</a><a href=\"#impl-TryFrom%3CU%3E-for-T\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812\">source</a><a href=\"#method.try_from\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: U) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, &lt;T as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryInto%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792\">source</a><a href=\"#impl-TryInto%3CU%3E-for-T\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryInto.html\" title=\"trait std::convert::TryInto\">TryInto</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryInto.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797\">source</a><a href=\"#method.try_into\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryInto.html#tymethod.try_into\" class=\"fn\">try_into</a>(self) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;U, &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details></div></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:14:20.986Z"
}