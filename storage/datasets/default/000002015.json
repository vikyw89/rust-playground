{
	"title": "handle_alloc_error in std::alloc - Rust",
	"url": "https://doc.rust-lang.org/stable/std/alloc/fn.handle_alloc_error.html",
	"markdown": "# handle\\_alloc\\_error in std::alloc - Rust\n\n```\npub fn handle_alloc_error(layout: Layout) -> !\n```\n\nExpand description\n\nSignal a memory allocation error.\n\nCallers of memory allocation APIs wishing to cease execution in response to an allocation error are encouraged to call this function, rather than directly invoking [`panic!`](https://doc.rust-lang.org/1.80.0/core/macro.panic.html \"macro core::panic\") or similar.\n\nThis function is guaranteed to diverge (not return normally with a value), but depending on global configuration, it may either panic (resulting in unwinding or aborting as per configuration for all panics), or abort the process (with no unwinding).\n\nThe default behavior is:\n\n-   If the binary links against `std` (typically the case), then print a message to standard error and abort the process. This behavior can be replaced with [`set_alloc_error_hook`](../../std/alloc/fn.set_alloc_error_hook.html) and [`take_alloc_error_hook`](../../std/alloc/fn.take_alloc_error_hook.html). Future versions of Rust may panic by default instead.\n    \n-   If the binary does not link against `std` (all of its crates are marked [`#![no_std]`](https://doc.rust-lang.org/reference/names/preludes.html#the-no_std-attribute)), then call [`panic!`](https://doc.rust-lang.org/1.80.0/core/macro.panic.html \"macro core::panic\") with a message. [The panic handler](https://doc.rust-lang.org/reference/runtime.html#the-panic_handler-attribute) applies as to any panic.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Signal a memory allocation error.\"><title>handle_alloc_error in std::alloc - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc fn\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><div class=\"sidebar-elems\"><h2><a href=\"index.html\">In std::alloc</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.AllocError.html\">AllocError</a></li><li><a href=\"struct.Global.html\">Global</a></li><li><a href=\"struct.Layout.html\">Layout</a></li><li><a href=\"struct.LayoutError.html\">LayoutError</a></li><li><a href=\"struct.System.html\">System</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.Allocator.html\">Allocator</a></li><li><a href=\"trait.GlobalAlloc.html\">GlobalAlloc</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.alloc.html\">alloc</a></li><li><a href=\"fn.alloc_zeroed.html\">alloc_zeroed</a></li><li><a href=\"fn.dealloc.html\">dealloc</a></li><li><a href=\"fn.handle_alloc_error.html\">handle_alloc_error</a></li><li><a href=\"fn.realloc.html\">realloc</a></li><li><a href=\"fn.set_alloc_error_hook.html\">set_alloc_error_hook</a></li><li><a href=\"fn.take_alloc_error_hook.html\">take_alloc_error_hook</a></li></ul><h3><a href=\"index.html#types\">Type Aliases</a></h3><ul class=\"block type\"><li><a href=\"type.LayoutErr.html\">LayoutErr</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Function <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">alloc</a>::<wbr><a class=\"fn\" href=\"#\">handle_alloc_error</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.28.0, const unstable\">1.28.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/92523\" title=\"Tracking issue for const_alloc_error\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/alloc.rs.html#377\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub fn handle_alloc_error(layout: <a class=\"struct\" href=\"struct.Layout.html\" title=\"struct std::alloc::Layout\">Layout</a>) -&gt; <a class=\"primitive\" href=\"../primitive.never.html\">!</a></code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Signal a memory allocation error.</p>\n<p>Callers of memory allocation APIs wishing to cease execution\nin response to an allocation error are encouraged to call this function,\nrather than directly invoking <a href=\"https://doc.rust-lang.org/1.80.0/core/macro.panic.html\" title=\"macro core::panic\"><code>panic!</code></a> or similar.</p>\n<p>This function is guaranteed to diverge (not return normally with a value), but depending on\nglobal configuration, it may either panic (resulting in unwinding or aborting as per\nconfiguration for all panics), or abort the process (with no unwinding).</p>\n<p>The default behavior is:</p>\n<ul>\n<li>\n<p>If the binary links against <code>std</code> (typically the case), then\nprint a message to standard error and abort the process.\nThis behavior can be replaced with <a href=\"../../std/alloc/fn.set_alloc_error_hook.html\"><code>set_alloc_error_hook</code></a> and <a href=\"../../std/alloc/fn.take_alloc_error_hook.html\"><code>take_alloc_error_hook</code></a>.\nFuture versions of Rust may panic by default instead.</p>\n</li>\n<li>\n<p>If the binary does not link against <code>std</code> (all of its crates are marked\n<a href=\"https://doc.rust-lang.org/reference/names/preludes.html#the-no_std-attribute\"><code>#![no_std]</code></a>), then call <a href=\"https://doc.rust-lang.org/1.80.0/core/macro.panic.html\" title=\"macro core::panic\"><code>panic!</code></a> with a message.\n<a href=\"https://doc.rust-lang.org/reference/runtime.html#the-panic_handler-attribute\">The panic handler</a> applies as to any panic.</p>\n</li>\n</ul>\n</div></details></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:21:58.265Z"
}