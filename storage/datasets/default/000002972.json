{
	"title": "SimdUint in std::simd::prelude - Rust",
	"url": "https://doc.rust-lang.org/stable/std/simd/prelude/trait.SimdUint.html",
	"markdown": "# SimdUint in std::simd::prelude - Rust\n\n```\npub trait SimdUint: Copy + Sealed {\n    type Scalar;\n    type Cast<T: SimdElement>;\n\nShow 17 methods    // Required methods\n    fn cast<T>(self) -> Self::Cast<T>\n       where T: SimdCast;\n    fn wrapping_neg(self) -> Self;\n    fn saturating_add(self, second: Self) -> Self;\n    fn saturating_sub(self, second: Self) -> Self;\n    fn reduce_sum(self) -> Self::Scalar;\n    fn reduce_product(self) -> Self::Scalar;\n    fn reduce_max(self) -> Self::Scalar;\n    fn reduce_min(self) -> Self::Scalar;\n    fn reduce_and(self) -> Self::Scalar;\n    fn reduce_or(self) -> Self::Scalar;\n    fn reduce_xor(self) -> Self::Scalar;\n    fn swap_bytes(self) -> Self;\n    fn reverse_bits(self) -> Self;\n    fn leading_zeros(self) -> Self;\n    fn trailing_zeros(self) -> Self;\n    fn leading_ones(self) -> Self;\n    fn trailing_ones(self) -> Self;\n}\n```\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nExpand description\n\nOperations on SIMD vectors of unsigned integers.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#7)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nScalar type contained by this SIMD vector type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#10)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nA SIMD vector with a different element type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#17)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nPerforms elementwise conversion of this vector’s elements to another SIMD-valid type.\n\nThis follows the semantics of Rust’s `as` conversion for casting integers (wrapping to other integer types, and saturating to float types).\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#23)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nWrapping negation.\n\nLike [`u32::wrapping_neg`](about:blank/primitive.u32.html#method.wrapping_neg \"method u32::wrapping_neg\"), all applications of this function will wrap, with the exception of `-0`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#41)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nLanewise saturating add.\n\n##### [§](#examples)Examples\n\n```\nuse core::u32::MAX;\nlet x = Simd::from_array([2, 1, 0, MAX]);\nlet max = Simd::splat(MAX);\nlet unsat = x + max;\nlet sat = x.saturating_add(max);\nassert_eq!(unsat, Simd::from_array([1, 0, MAX, MAX - 1]));\nassert_eq!(sat, max);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::prelude::*;%0A++++use+core::u32::MAX;%0A++++let+x+=+Simd::from_array(%5B2,+1,+0,+MAX%5D);%0A++++let+max+=+Simd::splat(MAX);%0A++++let+unsat+=+x+%2B+max;%0A++++let+sat+=+x.saturating_add(max);%0A++++assert_eq!(unsat,+Simd::from_array(%5B1,+0,+MAX,+MAX+-+1%5D));%0A++++assert_eq!(sat,+max);%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#58)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nLanewise saturating subtract.\n\n##### [§](#examples-1)Examples\n\n```\nuse core::u32::MAX;\nlet x = Simd::from_array([2, 1, 0, MAX]);\nlet max = Simd::splat(MAX);\nlet unsat = x - max;\nlet sat = x.saturating_sub(max);\nassert_eq!(unsat, Simd::from_array([3, 2, 1, 0]));\nassert_eq!(sat, Simd::splat(0));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::prelude::*;%0A++++use+core::u32::MAX;%0A++++let+x+=+Simd::from_array(%5B2,+1,+0,+MAX%5D);%0A++++let+max+=+Simd::splat(MAX);%0A++++let+unsat+=+x+-+max;%0A++++let+sat+=+x.saturating_sub(max);%0A++++assert_eq!(unsat,+Simd::from_array(%5B3,+2,+1,+0%5D));%0A++++assert_eq!(sat,+Simd::splat(0));%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#61)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the sum of the elements of the vector, with wrapping addition.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#64)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the product of the elements of the vector, with wrapping multiplication.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#67)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the maximum element in the vector.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#70)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the minimum element in the vector.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#73)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the cumulative bitwise “and” across the elements of the vector.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#76)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the cumulative bitwise “or” across the elements of the vector.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#79)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the cumulative bitwise “xor” across the elements of the vector.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#82)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReverses the byte order of each element.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#86)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReverses the order of bits in each elemnent. The least significant bit becomes the most significant bit, second least-significant bit becomes second most-significant bit, etc.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#89)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the number of leading zeros in the binary representation of each element.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#92)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the number of trailing zeros in the binary representation of each element.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#95)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the number of leading ones in the binary representation of each element.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#98)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the number of trailing ones in the binary representation of each element.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Operations on SIMD vectors of unsigned integers.\"><title>SimdUint in std::simd::prelude - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../../\" data-static-root-path=\"../../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc trait\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">SimdUint</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">SimdUint</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#required-associated-types\">Required Associated Types</a></h3><ul class=\"block\"><li><a href=\"#associatedtype.Cast\">Cast</a></li><li><a href=\"#associatedtype.Scalar\">Scalar</a></li></ul><h3><a href=\"#required-methods\">Required Methods</a></h3><ul class=\"block\"><li><a href=\"#tymethod.cast\">cast</a></li><li><a href=\"#tymethod.leading_ones\">leading_ones</a></li><li><a href=\"#tymethod.leading_zeros\">leading_zeros</a></li><li><a href=\"#tymethod.reduce_and\">reduce_and</a></li><li><a href=\"#tymethod.reduce_max\">reduce_max</a></li><li><a href=\"#tymethod.reduce_min\">reduce_min</a></li><li><a href=\"#tymethod.reduce_or\">reduce_or</a></li><li><a href=\"#tymethod.reduce_product\">reduce_product</a></li><li><a href=\"#tymethod.reduce_sum\">reduce_sum</a></li><li><a href=\"#tymethod.reduce_xor\">reduce_xor</a></li><li><a href=\"#tymethod.reverse_bits\">reverse_bits</a></li><li><a href=\"#tymethod.saturating_add\">saturating_add</a></li><li><a href=\"#tymethod.saturating_sub\">saturating_sub</a></li><li><a href=\"#tymethod.swap_bytes\">swap_bytes</a></li><li><a href=\"#tymethod.trailing_ones\">trailing_ones</a></li><li><a href=\"#tymethod.trailing_zeros\">trailing_zeros</a></li><li><a href=\"#tymethod.wrapping_neg\">wrapping_neg</a></li></ul><h3><a href=\"#object-safety\">Object Safety</a></h3><h3><a href=\"#implementors\">Implementors</a></h3></section><h2><a href=\"index.html\">In std::simd::prelude</a></h2><h3><a href=\"index.html#macros\">Macros</a></h3><ul class=\"block macro\"><li><a href=\"macro.simd_swizzle.html\">simd_swizzle</a></li></ul><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.Mask.html\">Mask</a></li><li><a href=\"struct.Simd.html\">Simd</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.SimdConstPtr.html\">SimdConstPtr</a></li><li><a href=\"trait.SimdFloat.html\">SimdFloat</a></li><li><a href=\"trait.SimdInt.html\">SimdInt</a></li><li><a href=\"trait.SimdMutPtr.html\">SimdMutPtr</a></li><li><a href=\"trait.SimdOrd.html\">SimdOrd</a></li><li><a href=\"trait.SimdPartialEq.html\">SimdPartialEq</a></li><li><a href=\"trait.SimdPartialOrd.html\">SimdPartialOrd</a></li><li><a href=\"trait.SimdUint.html\">SimdUint</a></li></ul><h3><a href=\"index.html#types\">Type Aliases</a></h3><ul class=\"block type\"><li><a href=\"type.f32x1.html\">f32x1</a></li><li><a href=\"type.f32x16.html\">f32x16</a></li><li><a href=\"type.f32x2.html\">f32x2</a></li><li><a href=\"type.f32x32.html\">f32x32</a></li><li><a href=\"type.f32x4.html\">f32x4</a></li><li><a href=\"type.f32x64.html\">f32x64</a></li><li><a href=\"type.f32x8.html\">f32x8</a></li><li><a href=\"type.f64x1.html\">f64x1</a></li><li><a href=\"type.f64x16.html\">f64x16</a></li><li><a href=\"type.f64x2.html\">f64x2</a></li><li><a href=\"type.f64x32.html\">f64x32</a></li><li><a href=\"type.f64x4.html\">f64x4</a></li><li><a href=\"type.f64x64.html\">f64x64</a></li><li><a href=\"type.f64x8.html\">f64x8</a></li><li><a href=\"type.i16x1.html\">i16x1</a></li><li><a href=\"type.i16x16.html\">i16x16</a></li><li><a href=\"type.i16x2.html\">i16x2</a></li><li><a href=\"type.i16x32.html\">i16x32</a></li><li><a href=\"type.i16x4.html\">i16x4</a></li><li><a href=\"type.i16x64.html\">i16x64</a></li><li><a href=\"type.i16x8.html\">i16x8</a></li><li><a href=\"type.i32x1.html\">i32x1</a></li><li><a href=\"type.i32x16.html\">i32x16</a></li><li><a href=\"type.i32x2.html\">i32x2</a></li><li><a href=\"type.i32x32.html\">i32x32</a></li><li><a href=\"type.i32x4.html\">i32x4</a></li><li><a href=\"type.i32x64.html\">i32x64</a></li><li><a href=\"type.i32x8.html\">i32x8</a></li><li><a href=\"type.i64x1.html\">i64x1</a></li><li><a href=\"type.i64x16.html\">i64x16</a></li><li><a href=\"type.i64x2.html\">i64x2</a></li><li><a href=\"type.i64x32.html\">i64x32</a></li><li><a href=\"type.i64x4.html\">i64x4</a></li><li><a href=\"type.i64x64.html\">i64x64</a></li><li><a href=\"type.i64x8.html\">i64x8</a></li><li><a href=\"type.i8x1.html\">i8x1</a></li><li><a href=\"type.i8x16.html\">i8x16</a></li><li><a href=\"type.i8x2.html\">i8x2</a></li><li><a href=\"type.i8x32.html\">i8x32</a></li><li><a href=\"type.i8x4.html\">i8x4</a></li><li><a href=\"type.i8x64.html\">i8x64</a></li><li><a href=\"type.i8x8.html\">i8x8</a></li><li><a href=\"type.isizex1.html\">isizex1</a></li><li><a href=\"type.isizex16.html\">isizex16</a></li><li><a href=\"type.isizex2.html\">isizex2</a></li><li><a href=\"type.isizex32.html\">isizex32</a></li><li><a href=\"type.isizex4.html\">isizex4</a></li><li><a href=\"type.isizex64.html\">isizex64</a></li><li><a href=\"type.isizex8.html\">isizex8</a></li><li><a href=\"type.mask16x1.html\">mask16x1</a></li><li><a href=\"type.mask16x16.html\">mask16x16</a></li><li><a href=\"type.mask16x2.html\">mask16x2</a></li><li><a href=\"type.mask16x32.html\">mask16x32</a></li><li><a href=\"type.mask16x4.html\">mask16x4</a></li><li><a href=\"type.mask16x64.html\">mask16x64</a></li><li><a href=\"type.mask16x8.html\">mask16x8</a></li><li><a href=\"type.mask32x1.html\">mask32x1</a></li><li><a href=\"type.mask32x16.html\">mask32x16</a></li><li><a href=\"type.mask32x2.html\">mask32x2</a></li><li><a href=\"type.mask32x32.html\">mask32x32</a></li><li><a href=\"type.mask32x4.html\">mask32x4</a></li><li><a href=\"type.mask32x64.html\">mask32x64</a></li><li><a href=\"type.mask32x8.html\">mask32x8</a></li><li><a href=\"type.mask64x1.html\">mask64x1</a></li><li><a href=\"type.mask64x16.html\">mask64x16</a></li><li><a href=\"type.mask64x2.html\">mask64x2</a></li><li><a href=\"type.mask64x32.html\">mask64x32</a></li><li><a href=\"type.mask64x4.html\">mask64x4</a></li><li><a href=\"type.mask64x64.html\">mask64x64</a></li><li><a href=\"type.mask64x8.html\">mask64x8</a></li><li><a href=\"type.mask8x1.html\">mask8x1</a></li><li><a href=\"type.mask8x16.html\">mask8x16</a></li><li><a href=\"type.mask8x2.html\">mask8x2</a></li><li><a href=\"type.mask8x32.html\">mask8x32</a></li><li><a href=\"type.mask8x4.html\">mask8x4</a></li><li><a href=\"type.mask8x64.html\">mask8x64</a></li><li><a href=\"type.mask8x8.html\">mask8x8</a></li><li><a href=\"type.masksizex1.html\">masksizex1</a></li><li><a href=\"type.masksizex16.html\">masksizex16</a></li><li><a href=\"type.masksizex2.html\">masksizex2</a></li><li><a href=\"type.masksizex32.html\">masksizex32</a></li><li><a href=\"type.masksizex4.html\">masksizex4</a></li><li><a href=\"type.masksizex64.html\">masksizex64</a></li><li><a href=\"type.masksizex8.html\">masksizex8</a></li><li><a href=\"type.u16x1.html\">u16x1</a></li><li><a href=\"type.u16x16.html\">u16x16</a></li><li><a href=\"type.u16x2.html\">u16x2</a></li><li><a href=\"type.u16x32.html\">u16x32</a></li><li><a href=\"type.u16x4.html\">u16x4</a></li><li><a href=\"type.u16x64.html\">u16x64</a></li><li><a href=\"type.u16x8.html\">u16x8</a></li><li><a href=\"type.u32x1.html\">u32x1</a></li><li><a href=\"type.u32x16.html\">u32x16</a></li><li><a href=\"type.u32x2.html\">u32x2</a></li><li><a href=\"type.u32x32.html\">u32x32</a></li><li><a href=\"type.u32x4.html\">u32x4</a></li><li><a href=\"type.u32x64.html\">u32x64</a></li><li><a href=\"type.u32x8.html\">u32x8</a></li><li><a href=\"type.u64x1.html\">u64x1</a></li><li><a href=\"type.u64x16.html\">u64x16</a></li><li><a href=\"type.u64x2.html\">u64x2</a></li><li><a href=\"type.u64x32.html\">u64x32</a></li><li><a href=\"type.u64x4.html\">u64x4</a></li><li><a href=\"type.u64x64.html\">u64x64</a></li><li><a href=\"type.u64x8.html\">u64x8</a></li><li><a href=\"type.u8x1.html\">u8x1</a></li><li><a href=\"type.u8x16.html\">u8x16</a></li><li><a href=\"type.u8x2.html\">u8x2</a></li><li><a href=\"type.u8x32.html\">u8x32</a></li><li><a href=\"type.u8x4.html\">u8x4</a></li><li><a href=\"type.u8x64.html\">u8x64</a></li><li><a href=\"type.u8x8.html\">u8x8</a></li><li><a href=\"type.usizex1.html\">usizex1</a></li><li><a href=\"type.usizex16.html\">usizex16</a></li><li><a href=\"type.usizex2.html\">usizex2</a></li><li><a href=\"type.usizex32.html\">usizex32</a></li><li><a href=\"type.usizex4.html\">usizex4</a></li><li><a href=\"type.usizex64.html\">usizex64</a></li><li><a href=\"type.usizex8.html\">usizex8</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Trait <a href=\"../../index.html\">std</a>::<wbr><a href=\"../index.html\">simd</a>::<wbr><a href=\"index.html\">prelude</a>::<wbr><a class=\"trait\" href=\"#\">SimdUint</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#5\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub trait SimdUint: <a class=\"trait\" href=\"../../marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a> + Sealed {\n    type <a href=\"#associatedtype.Scalar\" class=\"associatedtype\">Scalar</a>;\n    type <a href=\"#associatedtype.Cast\" class=\"associatedtype\">Cast</a>&lt;T: <a class=\"trait\" href=\"../trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>&gt;;\n\n<details class=\"toggle type-contents-toggle\"><summary class=\"hideme\"><span>Show 17 methods</span></summary>    // Required methods\n    fn <a href=\"#tymethod.cast\" class=\"fn\">cast</a>&lt;T&gt;(self) -&gt; Self::<a class=\"associatedtype\" href=\"trait.SimdUint.html#associatedtype.Cast\" title=\"type std::simd::prelude::SimdUint::Cast\">Cast</a>&lt;T&gt;\n       <span class=\"where\">where T: <a class=\"trait\" href=\"../trait.SimdCast.html\" title=\"trait std::simd::SimdCast\">SimdCast</a></span>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.wrapping_neg\" class=\"fn\">wrapping_neg</a>(self) -&gt; Self;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.saturating_add\" class=\"fn\">saturating_add</a>(self, second: Self) -&gt; Self;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.saturating_sub\" class=\"fn\">saturating_sub</a>(self, second: Self) -&gt; Self;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.reduce_sum\" class=\"fn\">reduce_sum</a>(self) -&gt; Self::<a class=\"associatedtype\" href=\"trait.SimdUint.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdUint::Scalar\">Scalar</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.reduce_product\" class=\"fn\">reduce_product</a>(self) -&gt; Self::<a class=\"associatedtype\" href=\"trait.SimdUint.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdUint::Scalar\">Scalar</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.reduce_max\" class=\"fn\">reduce_max</a>(self) -&gt; Self::<a class=\"associatedtype\" href=\"trait.SimdUint.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdUint::Scalar\">Scalar</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.reduce_min\" class=\"fn\">reduce_min</a>(self) -&gt; Self::<a class=\"associatedtype\" href=\"trait.SimdUint.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdUint::Scalar\">Scalar</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.reduce_and\" class=\"fn\">reduce_and</a>(self) -&gt; Self::<a class=\"associatedtype\" href=\"trait.SimdUint.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdUint::Scalar\">Scalar</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.reduce_or\" class=\"fn\">reduce_or</a>(self) -&gt; Self::<a class=\"associatedtype\" href=\"trait.SimdUint.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdUint::Scalar\">Scalar</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.reduce_xor\" class=\"fn\">reduce_xor</a>(self) -&gt; Self::<a class=\"associatedtype\" href=\"trait.SimdUint.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdUint::Scalar\">Scalar</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.swap_bytes\" class=\"fn\">swap_bytes</a>(self) -&gt; Self;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.reverse_bits\" class=\"fn\">reverse_bits</a>(self) -&gt; Self;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.leading_zeros\" class=\"fn\">leading_zeros</a>(self) -&gt; Self;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.trailing_zeros\" class=\"fn\">trailing_zeros</a>(self) -&gt; Self;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.leading_ones\" class=\"fn\">leading_ones</a>(self) -&gt; Self;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.trailing_ones\" class=\"fn\">trailing_ones</a>(self) -&gt; Self;\n</details>}</code></pre><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Operations on SIMD vectors of unsigned integers.</p>\n</div></details><h2 id=\"required-associated-types\" class=\"section-header\">Required Associated Types<a href=\"#required-associated-types\" class=\"anchor\">§</a></h2><div class=\"methods\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Scalar\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#7\">source</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Scalar\" class=\"associatedtype\">Scalar</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Scalar type contained by this SIMD vector type.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Cast\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#10\">source</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Cast\" class=\"associatedtype\">Cast</a>&lt;T: <a class=\"trait\" href=\"../trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>A SIMD vector with a different element type.</p>\n</div></details></div><h2 id=\"required-methods\" class=\"section-header\">Required Methods<a href=\"#required-methods\" class=\"anchor\">§</a></h2><div class=\"methods\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.cast\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#17\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.cast\" class=\"fn\">cast</a>&lt;T&gt;(self) -&gt; Self::<a class=\"associatedtype\" href=\"trait.SimdUint.html#associatedtype.Cast\" title=\"type std::simd::prelude::SimdUint::Cast\">Cast</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../trait.SimdCast.html\" title=\"trait std::simd::SimdCast\">SimdCast</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Performs elementwise conversion of this vector’s elements to another SIMD-valid type.</p>\n<p>This follows the semantics of Rust’s <code>as</code> conversion for casting integers (wrapping to\nother integer types, and saturating to float types).</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.wrapping_neg\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#23\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.wrapping_neg\" class=\"fn\">wrapping_neg</a>(self) -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Wrapping negation.</p>\n<p>Like <a href=\"../../primitive.u32.html#method.wrapping_neg\" title=\"method u32::wrapping_neg\"><code>u32::wrapping_neg</code></a>, all applications of this function will wrap, with the exception\nof <code>-0</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.saturating_add\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#41\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.saturating_add\" class=\"fn\">saturating_add</a>(self, second: Self) -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Lanewise saturating add.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>core::u32::MAX;\n<span class=\"kw\">let </span>x = Simd::from_array([<span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, MAX]);\n<span class=\"kw\">let </span>max = Simd::splat(MAX);\n<span class=\"kw\">let </span>unsat = x + max;\n<span class=\"kw\">let </span>sat = x.saturating_add(max);\n<span class=\"macro\">assert_eq!</span>(unsat, Simd::from_array([<span class=\"number\">1</span>, <span class=\"number\">0</span>, MAX, MAX - <span class=\"number\">1</span>]));\n<span class=\"macro\">assert_eq!</span>(sat, max);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::prelude::*;%0A++++use+core::u32::MAX;%0A++++let+x+=+Simd::from_array(%5B2,+1,+0,+MAX%5D);%0A++++let+max+=+Simd::splat(MAX);%0A++++let+unsat+=+x+%2B+max;%0A++++let+sat+=+x.saturating_add(max);%0A++++assert_eq!(unsat,+Simd::from_array(%5B1,+0,+MAX,+MAX+-+1%5D));%0A++++assert_eq!(sat,+max);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.saturating_sub\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#58\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.saturating_sub\" class=\"fn\">saturating_sub</a>(self, second: Self) -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Lanewise saturating subtract.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>core::u32::MAX;\n<span class=\"kw\">let </span>x = Simd::from_array([<span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, MAX]);\n<span class=\"kw\">let </span>max = Simd::splat(MAX);\n<span class=\"kw\">let </span>unsat = x - max;\n<span class=\"kw\">let </span>sat = x.saturating_sub(max);\n<span class=\"macro\">assert_eq!</span>(unsat, Simd::from_array([<span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>]));\n<span class=\"macro\">assert_eq!</span>(sat, Simd::splat(<span class=\"number\">0</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::prelude::*;%0A++++use+core::u32::MAX;%0A++++let+x+=+Simd::from_array(%5B2,+1,+0,+MAX%5D);%0A++++let+max+=+Simd::splat(MAX);%0A++++let+unsat+=+x+-+max;%0A++++let+sat+=+x.saturating_sub(max);%0A++++assert_eq!(unsat,+Simd::from_array(%5B3,+2,+1,+0%5D));%0A++++assert_eq!(sat,+Simd::splat(0));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.reduce_sum\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#61\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.reduce_sum\" class=\"fn\">reduce_sum</a>(self) -&gt; Self::<a class=\"associatedtype\" href=\"trait.SimdUint.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdUint::Scalar\">Scalar</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the sum of the elements of the vector, with wrapping addition.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.reduce_product\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#64\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.reduce_product\" class=\"fn\">reduce_product</a>(self) -&gt; Self::<a class=\"associatedtype\" href=\"trait.SimdUint.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdUint::Scalar\">Scalar</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the product of the elements of the vector, with wrapping multiplication.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.reduce_max\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#67\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.reduce_max\" class=\"fn\">reduce_max</a>(self) -&gt; Self::<a class=\"associatedtype\" href=\"trait.SimdUint.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdUint::Scalar\">Scalar</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the maximum element in the vector.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.reduce_min\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#70\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.reduce_min\" class=\"fn\">reduce_min</a>(self) -&gt; Self::<a class=\"associatedtype\" href=\"trait.SimdUint.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdUint::Scalar\">Scalar</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the minimum element in the vector.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.reduce_and\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#73\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.reduce_and\" class=\"fn\">reduce_and</a>(self) -&gt; Self::<a class=\"associatedtype\" href=\"trait.SimdUint.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdUint::Scalar\">Scalar</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the cumulative bitwise “and” across the elements of the vector.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.reduce_or\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#76\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.reduce_or\" class=\"fn\">reduce_or</a>(self) -&gt; Self::<a class=\"associatedtype\" href=\"trait.SimdUint.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdUint::Scalar\">Scalar</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the cumulative bitwise “or” across the elements of the vector.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.reduce_xor\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#79\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.reduce_xor\" class=\"fn\">reduce_xor</a>(self) -&gt; Self::<a class=\"associatedtype\" href=\"trait.SimdUint.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdUint::Scalar\">Scalar</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the cumulative bitwise “xor” across the elements of the vector.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.swap_bytes\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#82\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.swap_bytes\" class=\"fn\">swap_bytes</a>(self) -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Reverses the byte order of each element.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.reverse_bits\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#86\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.reverse_bits\" class=\"fn\">reverse_bits</a>(self) -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Reverses the order of bits in each elemnent.\nThe least significant bit becomes the most significant bit, second least-significant bit becomes second most-significant bit, etc.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.leading_zeros\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#89\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.leading_zeros\" class=\"fn\">leading_zeros</a>(self) -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the number of leading zeros in the binary representation of each element.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.trailing_zeros\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#92\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.trailing_zeros\" class=\"fn\">trailing_zeros</a>(self) -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the number of trailing zeros in the binary representation of each element.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.leading_ones\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#95\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.leading_ones\" class=\"fn\">leading_ones</a>(self) -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the number of leading ones in the binary representation of each element.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.trailing_ones\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#98\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.trailing_ones\" class=\"fn\">trailing_ones</a>(self) -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the number of trailing ones in the binary representation of each element.</p>\n</div></details></div><h2 id=\"object-safety\" class=\"section-header\">Object Safety<a href=\"#object-safety\" class=\"anchor\">§</a></h2><div class=\"object-safety-info\">This trait is <b>not</b> <a href=\"https://doc.rust-lang.org/1.80.0/reference/items/traits.html#object-safety\">object safe</a>.</div><h2 id=\"implementors\" class=\"section-header\">Implementors<a href=\"#implementors\" class=\"anchor\">§</a></h2><div id=\"implementors-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-SimdUint-for-Simd%3Cu8,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#impl-SimdUint-for-Simd%3Cu8,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"trait.SimdUint.html\" title=\"trait std::simd::prelude::SimdUint\">SimdUint</a> for <a class=\"struct\" href=\"struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../primitive.u8.html\">u8</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"../struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Scalar-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Scalar-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Scalar\" class=\"associatedtype\">Scalar</a> = <a class=\"primitive\" href=\"../../primitive.u8.html\">u8</a></h4></section><section id=\"associatedtype.Cast-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Cast-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Cast\" class=\"associatedtype\">Cast</a>&lt;T: <a class=\"trait\" href=\"../trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>&gt; = <a class=\"struct\" href=\"struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-SimdUint-for-Simd%3Cu16,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#impl-SimdUint-for-Simd%3Cu16,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"trait.SimdUint.html\" title=\"trait std::simd::prelude::SimdUint\">SimdUint</a> for <a class=\"struct\" href=\"struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../primitive.u16.html\">u16</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"../struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Scalar-2\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Scalar-2\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Scalar\" class=\"associatedtype\">Scalar</a> = <a class=\"primitive\" href=\"../../primitive.u16.html\">u16</a></h4></section><section id=\"associatedtype.Cast-2\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Cast-2\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Cast\" class=\"associatedtype\">Cast</a>&lt;T: <a class=\"trait\" href=\"../trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>&gt; = <a class=\"struct\" href=\"struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-SimdUint-for-Simd%3Cu32,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#impl-SimdUint-for-Simd%3Cu32,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"trait.SimdUint.html\" title=\"trait std::simd::prelude::SimdUint\">SimdUint</a> for <a class=\"struct\" href=\"struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../primitive.u32.html\">u32</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"../struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Scalar-3\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Scalar-3\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Scalar\" class=\"associatedtype\">Scalar</a> = <a class=\"primitive\" href=\"../../primitive.u32.html\">u32</a></h4></section><section id=\"associatedtype.Cast-3\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Cast-3\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Cast\" class=\"associatedtype\">Cast</a>&lt;T: <a class=\"trait\" href=\"../trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>&gt; = <a class=\"struct\" href=\"struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-SimdUint-for-Simd%3Cu64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#impl-SimdUint-for-Simd%3Cu64,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"trait.SimdUint.html\" title=\"trait std::simd::prelude::SimdUint\">SimdUint</a> for <a class=\"struct\" href=\"struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../primitive.u64.html\">u64</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"../struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Scalar-4\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Scalar-4\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Scalar\" class=\"associatedtype\">Scalar</a> = <a class=\"primitive\" href=\"../../primitive.u64.html\">u64</a></h4></section><section id=\"associatedtype.Cast-4\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Cast-4\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Cast\" class=\"associatedtype\">Cast</a>&lt;T: <a class=\"trait\" href=\"../trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>&gt; = <a class=\"struct\" href=\"struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-SimdUint-for-Simd%3Cusize,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#impl-SimdUint-for-Simd%3Cusize,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"trait.SimdUint.html\" title=\"trait std::simd::prelude::SimdUint\">SimdUint</a> for <a class=\"struct\" href=\"struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"../struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Scalar-5\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Scalar-5\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Scalar\" class=\"associatedtype\">Scalar</a> = <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a></h4></section><section id=\"associatedtype.Cast-5\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Cast-5\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Cast\" class=\"associatedtype\">Cast</a>&lt;T: <a class=\"trait\" href=\"../trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>&gt; = <a class=\"struct\" href=\"struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section></div></details></div><script src=\"../../../trait.impl/core/core_simd/simd/num/uint/trait.SimdUint.js\" data-ignore-extern-crates=\"core\" async=\"\"></script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:26:35.728Z"
}