{
	"title": "TcpStreamExt in std::os::linux::net - Rust",
	"url": "https://doc.rust-lang.org/stable/std/os/linux/net/trait.TcpStreamExt.html",
	"markdown": "# TcpStreamExt in std::os::linux::net - Rust\n\n```\npub trait TcpStreamExt: Sealed {\n    // Required methods\n    fn set_quickack(&self, quickack: bool) -> Result<()>;\n    fn quickack(&self) -> Result<bool>;\n    fn set_deferaccept(&self, accept: u32) -> Result<()>;\n    fn deferaccept(&self) -> Result<u32>;\n}\n```\n\nðŸ”¬This is a nightly-only experimental API. (`tcp_quickack`Â [#96256](https://github.com/rust-lang/rust/issues/96256))\n\nAvailable on **Linux and (Linux or Android)** only.\n\nExpand description\n\n[source](about:blank/src/std/os/net/linux_ext/tcp.rs.html#36)\n\nðŸ”¬This is a nightly-only experimental API. (`tcp_quickack`Â [#96256](https://github.com/rust-lang/rust/issues/96256))\n\nEnable or disable `TCP_QUICKACK`.\n\nThis flag causes Linux to eagerly send ACKs rather than delaying them. Linux may reset this flag after further operations on the socket.\n\nSee [`man 7 tcp`](https://man7.org/linux/man-pages/man7/tcp.7.html) and [TCP delayed acknowledgement](https://en.wikipedia.org/wiki/TCP_delayed_acknowledgment) for more information.\n\n##### [Â§](#examples)Examples\n\n```\n#![feature(tcp_quickack)]\nuse std::net::TcpStream;\nuse std::os::linux::net::TcpStreamExt;\n\nlet stream = TcpStream::connect(\"127.0.0.1:8080\")\n        .expect(\"Couldn't connect to the server...\");\nstream.set_quickack(true).expect(\"set_quickack call failed\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(tcp_quickack)%5D%0Afn+main()+%7B%0A++++use+std::net::TcpStream;%0A++++use+std::os::linux::net::TcpStreamExt;%0A++++%0A++++let+stream+=+TcpStream::connect(%22127.0.0.1:8080%22)%0A++++++++++++.expect(%22Couldn%27t+connect+to+the+server...%22);%0A++++stream.set_quickack(true).expect(%22set_quickack+call+failed%22);%0A%7D&version=nightly&edition=2021)\n\n[source](about:blank/src/std/os/net/linux_ext/tcp.rs.html#55)\n\nðŸ”¬This is a nightly-only experimental API. (`tcp_quickack`Â [#96256](https://github.com/rust-lang/rust/issues/96256))\n\nGets the value of the `TCP_QUICKACK` option on this socket.\n\nFor more information about this option, see [`TcpStreamExt::set_quickack`](about:blank/trait.TcpStreamExt.html#tymethod.set_quickack \"method std::os::linux::net::TcpStreamExt::set_quickack\").\n\n##### [Â§](#examples-1)Examples\n\n```\n#![feature(tcp_quickack)]\nuse std::net::TcpStream;\nuse std::os::linux::net::TcpStreamExt;\n\nlet stream = TcpStream::connect(\"127.0.0.1:8080\")\n        .expect(\"Couldn't connect to the server...\");\nstream.set_quickack(true).expect(\"set_quickack call failed\");\nassert_eq!(stream.quickack().unwrap_or(false), true);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(tcp_quickack)%5D%0Afn+main()+%7B%0A++++use+std::net::TcpStream;%0A++++use+std::os::linux::net::TcpStreamExt;%0A++++%0A++++let+stream+=+TcpStream::connect(%22127.0.0.1:8080%22)%0A++++++++++++.expect(%22Couldn%27t+connect+to+the+server...%22);%0A++++stream.set_quickack(true).expect(%22set_quickack+call+failed%22);%0A++++assert_eq!(stream.quickack().unwrap_or(false),+true);%0A%7D&version=nightly&edition=2021)\n\n[source](about:blank/src/std/os/net/linux_ext/tcp.rs.html#80)\n\nðŸ”¬This is a nightly-only experimental API. (`tcp_deferaccept`Â [#119639](https://github.com/rust-lang/rust/issues/119639))\n\nA socket listener will be awakened solely when data arrives.\n\nThe `accept` argument set the delay in seconds until the data is available to read, reducing the number of short lived connections without data to process. Contrary to other platforms `SO_ACCEPTFILTER` feature equivalent, there is no necessity to set it after the `listen` call.\n\nSee [`man 7 tcp`](https://man7.org/linux/man-pages/man7/tcp.7.html)\n\n##### [Â§](#examples-2)Examples\n\n```no\n#![feature(tcp_deferaccept)]\nuse std::net::TcpStream;\nuse std::os::linux::net::TcpStreamExt;\n\nlet stream = TcpStream::connect(\"127.0.0.1:8080\")\n        .expect(\"Couldn't connect to the server...\");\nstream.set_deferaccept(1).expect(\"set_deferaccept call failed\");\n\n``` \n\n[source](about:blank/src/std/os/net/linux_ext/tcp.rs.html#100)\n\nðŸ”¬This is a nightly-only experimental API. (`tcp_deferaccept`Â [#119639](https://github.com/rust-lang/rust/issues/119639))\n\nGets the accept delay value (in seconds) of the `TCP_DEFER_ACCEPT` option.\n\nFor more information about this option, see [`TcpStreamExt::set_deferaccept`](about:blank/trait.TcpStreamExt.html#tymethod.set_deferaccept \"method std::os::linux::net::TcpStreamExt::set_deferaccept\").\n\n##### [Â§](#examples-3)Examples\n\n```\n#![feature(tcp_deferaccept)]\nuse std::net::TcpStream;\nuse std::os::linux::net::TcpStreamExt;\n\nlet stream = TcpStream::connect(\"127.0.0.1:8080\")\n        .expect(\"Couldn't connect to the server...\");\nstream.set_deferaccept(1).expect(\"set_deferaccept call failed\");\nassert_eq!(stream.deferaccept().unwrap_or(0), 1);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(tcp_deferaccept)%5D%0Afn+main()+%7B%0A++++use+std::net::TcpStream;%0A++++use+std::os::linux::net::TcpStreamExt;%0A++++%0A++++let+stream+=+TcpStream::connect(%22127.0.0.1:8080%22)%0A++++++++++++.expect(%22Couldn%27t+connect+to+the+server...%22);%0A++++stream.set_deferaccept(1).expect(%22set_deferaccept+call+failed%22);%0A++++assert_eq!(stream.deferaccept().unwrap_or(0),+1);%0A%7D&version=nightly&edition=2021)\n\n[source](about:blank/src/std/os/net/linux_ext/tcp.rs.html#107-125)[Â§](#impl-TcpStreamExt-for-TcpStream)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Os-specific extensions for `TcpStream`\"><title>TcpStreamExt in std::os::linux::net - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../../../\" data-static-root-path=\"../../../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc trait\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">TcpStreamExt</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">TcpStreamExt</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#required-methods\">Required Methods</a></h3><ul class=\"block\"><li><a href=\"#tymethod.deferaccept\">deferaccept</a></li><li><a href=\"#tymethod.quickack\">quickack</a></li><li><a href=\"#tymethod.set_deferaccept\">set_deferaccept</a></li><li><a href=\"#tymethod.set_quickack\">set_quickack</a></li></ul><h3><a href=\"#implementors\">Implementors</a></h3></section><h2><a href=\"index.html\">In std::os::linux::net</a></h2><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.SocketAddrExt.html\">SocketAddrExt</a></li><li><a href=\"trait.TcpStreamExt.html\">TcpStreamExt</a></li><li><a href=\"trait.UnixSocketExt.html\">UnixSocketExt</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type â€˜Sâ€™ or â€˜/â€™ to search, â€˜?â€™ for more optionsâ€¦\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Trait <a href=\"../../../index.html\">std</a>::<wbr><a href=\"../../index.html\">os</a>::<wbr><a href=\"../index.html\">linux</a>::<wbr><a href=\"index.html\">net</a>::<wbr><a class=\"trait\" href=\"#\">TcpStreamExt</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><a class=\"src\" href=\"../../../../src/std/os/net/linux_ext/tcp.rs.html#14-101\">source</a> Â· <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>âˆ’</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub trait TcpStreamExt: Sealed {\n    // Required methods\n    fn <a href=\"#tymethod.set_quickack\" class=\"fn\">set_quickack</a>(&amp;self, quickack: <a class=\"primitive\" href=\"../../../primitive.bool.html\">bool</a>) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../../primitive.unit.html\">()</a>&gt;;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.quickack\" class=\"fn\">quickack</a>(&amp;self) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../../primitive.bool.html\">bool</a>&gt;;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.set_deferaccept\" class=\"fn\">set_deferaccept</a>(&amp;self, accept: <a class=\"primitive\" href=\"../../../primitive.u32.html\">u32</a>) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../../primitive.unit.html\">()</a>&gt;;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.deferaccept\" class=\"fn\">deferaccept</a>(&amp;self) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../../primitive.u32.html\">u32</a>&gt;;\n}</code></pre><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>tcp_quickack</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/96256\">#96256</a>)</span></div><div class=\"stab portability\">Available on <strong>Linux and (Linux or Android)</strong> only.</div></span><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Os-specific extensions for <a href=\"../../../net/struct.TcpStream.html\" title=\"struct std::net::TcpStream\"><code>TcpStream</code></a></p>\n</div></details><h2 id=\"required-methods\" class=\"section-header\">Required Methods<a href=\"#required-methods\" class=\"anchor\">Â§</a></h2><div class=\"methods\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.set_quickack\" class=\"method\"><a class=\"src rightside\" href=\"../../../../src/std/os/net/linux_ext/tcp.rs.html#36\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.set_quickack\" class=\"fn\">set_quickack</a>(&amp;self, quickack: <a class=\"primitive\" href=\"../../../primitive.bool.html\">bool</a>) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../../primitive.unit.html\">()</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>tcp_quickack</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/96256\">#96256</a>)</span></div></span></summary><div class=\"docblock\"><p>Enable or disable <code>TCP_QUICKACK</code>.</p>\n<p>This flag causes Linux to eagerly send ACKs rather than delaying them.\nLinux may reset this flag after further operations on the socket.</p>\n<p>See <a href=\"https://man7.org/linux/man-pages/man7/tcp.7.html\"><code>man 7 tcp</code></a> and\n<a href=\"https://en.wikipedia.org/wiki/TCP_delayed_acknowledgment\">TCP delayed acknowledgement</a>\nfor more information.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(tcp_quickack)]\n</span><span class=\"kw\">use </span>std::net::TcpStream;\n<span class=\"kw\">use </span>std::os::linux::net::TcpStreamExt;\n\n<span class=\"kw\">let </span>stream = TcpStream::connect(<span class=\"string\">\"127.0.0.1:8080\"</span>)\n        .expect(<span class=\"string\">\"Couldn't connect to the server...\"</span>);\nstream.set_quickack(<span class=\"bool-val\">true</span>).expect(<span class=\"string\">\"set_quickack call failed\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(tcp_quickack)%5D%0Afn+main()+%7B%0A++++use+std::net::TcpStream;%0A++++use+std::os::linux::net::TcpStreamExt;%0A++++%0A++++let+stream+=+TcpStream::connect(%22127.0.0.1:8080%22)%0A++++++++++++.expect(%22Couldn't+connect+to+the+server...%22);%0A++++stream.set_quickack(true).expect(%22set_quickack+call+failed%22);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.quickack\" class=\"method\"><a class=\"src rightside\" href=\"../../../../src/std/os/net/linux_ext/tcp.rs.html#55\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.quickack\" class=\"fn\">quickack</a>(&amp;self) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../../primitive.bool.html\">bool</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>tcp_quickack</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/96256\">#96256</a>)</span></div></span></summary><div class=\"docblock\"><p>Gets the value of the <code>TCP_QUICKACK</code> option on this socket.</p>\n<p>For more information about this option, see <a href=\"trait.TcpStreamExt.html#tymethod.set_quickack\" title=\"method std::os::linux::net::TcpStreamExt::set_quickack\"><code>TcpStreamExt::set_quickack</code></a>.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(tcp_quickack)]\n</span><span class=\"kw\">use </span>std::net::TcpStream;\n<span class=\"kw\">use </span>std::os::linux::net::TcpStreamExt;\n\n<span class=\"kw\">let </span>stream = TcpStream::connect(<span class=\"string\">\"127.0.0.1:8080\"</span>)\n        .expect(<span class=\"string\">\"Couldn't connect to the server...\"</span>);\nstream.set_quickack(<span class=\"bool-val\">true</span>).expect(<span class=\"string\">\"set_quickack call failed\"</span>);\n<span class=\"macro\">assert_eq!</span>(stream.quickack().unwrap_or(<span class=\"bool-val\">false</span>), <span class=\"bool-val\">true</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(tcp_quickack)%5D%0Afn+main()+%7B%0A++++use+std::net::TcpStream;%0A++++use+std::os::linux::net::TcpStreamExt;%0A++++%0A++++let+stream+=+TcpStream::connect(%22127.0.0.1:8080%22)%0A++++++++++++.expect(%22Couldn't+connect+to+the+server...%22);%0A++++stream.set_quickack(true).expect(%22set_quickack+call+failed%22);%0A++++assert_eq!(stream.quickack().unwrap_or(false),+true);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.set_deferaccept\" class=\"method\"><a class=\"src rightside\" href=\"../../../../src/std/os/net/linux_ext/tcp.rs.html#80\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.set_deferaccept\" class=\"fn\">set_deferaccept</a>(&amp;self, accept: <a class=\"primitive\" href=\"../../../primitive.u32.html\">u32</a>) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../../primitive.unit.html\">()</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>tcp_deferaccept</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/119639\">#119639</a>)</span></div></span></summary><div class=\"docblock\"><p>A socket listener will be awakened solely when data arrives.</p>\n<p>The <code>accept</code> argument set the delay in seconds until the\ndata is available to read, reducing the number of short lived\nconnections without data to process.\nContrary to other platforms <code>SO_ACCEPTFILTER</code> feature equivalent, there is\nno necessity to set it after the <code>listen</code> call.</p>\n<p>See <a href=\"https://man7.org/linux/man-pages/man7/tcp.7.html\"><code>man 7 tcp</code></a></p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">Â§</a>Examples</h5><div class=\"example-wrap\"><pre class=\"language-no\"><code>#![feature(tcp_deferaccept)]\nuse std::net::TcpStream;\nuse std::os::linux::net::TcpStreamExt;\n\nlet stream = TcpStream::connect(\"127.0.0.1:8080\")\n        .expect(\"Couldn't connect to the server...\");\nstream.set_deferaccept(1).expect(\"set_deferaccept call failed\");\n</code></pre></div></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.deferaccept\" class=\"method\"><a class=\"src rightside\" href=\"../../../../src/std/os/net/linux_ext/tcp.rs.html#100\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.deferaccept\" class=\"fn\">deferaccept</a>(&amp;self) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../../primitive.u32.html\">u32</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>tcp_deferaccept</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/119639\">#119639</a>)</span></div></span></summary><div class=\"docblock\"><p>Gets the accept delay value (in seconds) of the <code>TCP_DEFER_ACCEPT</code> option.</p>\n<p>For more information about this option, see <a href=\"trait.TcpStreamExt.html#tymethod.set_deferaccept\" title=\"method std::os::linux::net::TcpStreamExt::set_deferaccept\"><code>TcpStreamExt::set_deferaccept</code></a>.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(tcp_deferaccept)]\n</span><span class=\"kw\">use </span>std::net::TcpStream;\n<span class=\"kw\">use </span>std::os::linux::net::TcpStreamExt;\n\n<span class=\"kw\">let </span>stream = TcpStream::connect(<span class=\"string\">\"127.0.0.1:8080\"</span>)\n        .expect(<span class=\"string\">\"Couldn't connect to the server...\"</span>);\nstream.set_deferaccept(<span class=\"number\">1</span>).expect(<span class=\"string\">\"set_deferaccept call failed\"</span>);\n<span class=\"macro\">assert_eq!</span>(stream.deferaccept().unwrap_or(<span class=\"number\">0</span>), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(tcp_deferaccept)%5D%0Afn+main()+%7B%0A++++use+std::net::TcpStream;%0A++++use+std::os::linux::net::TcpStreamExt;%0A++++%0A++++let+stream+=+TcpStream::connect(%22127.0.0.1:8080%22)%0A++++++++++++.expect(%22Couldn't+connect+to+the+server...%22);%0A++++stream.set_deferaccept(1).expect(%22set_deferaccept+call+failed%22);%0A++++assert_eq!(stream.deferaccept().unwrap_or(0),+1);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details></div><h2 id=\"implementors\" class=\"section-header\">Implementors<a href=\"#implementors\" class=\"anchor\">Â§</a></h2><div id=\"implementors-list\"><section id=\"impl-TcpStreamExt-for-TcpStream\" class=\"impl\"><a class=\"src rightside\" href=\"../../../../src/std/os/net/linux_ext/tcp.rs.html#107-125\">source</a><a href=\"#impl-TcpStreamExt-for-TcpStream\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.TcpStreamExt.html\" title=\"trait std::os::linux::net::TcpStreamExt\">TcpStreamExt</a> for <a class=\"struct\" href=\"../../../net/struct.TcpStream.html\" title=\"struct std::net::TcpStream\">TcpStream</a></h3></section></div><script src=\"../../../../trait.impl/std/os/net/linux_ext/tcp/trait.TcpStreamExt.js\" async=\"\"></script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:26:24.828Z"
}