{
	"title": "core::arch::wasm32 - Rust",
	"url": "https://doc.rust-lang.org/stable/core/arch/wasm32/index.html",
	"markdown": "# core::arch::wasm32 - Rust\n\n-   [f32x4](fn.f32x4.html \"fn core::arch::wasm32::f32x4\")`target_family=\"wasm\"`\n    \n    Materializes a SIMD value from the provided operands.\n    \n-   [f32x4\\_abs](fn.f32x4_abs.html \"fn core::arch::wasm32::f32x4_abs\")`target_family=\"wasm\"` and `simd128`\n    \n    Calculates the absolute value of each lane of a 128-bit vector interpreted as four 32-bit floating point numbers.\n    \n-   [f32x4\\_add](fn.f32x4_add.html \"fn core::arch::wasm32::f32x4_add\")`target_family=\"wasm\"` and `simd128`\n    \n    Lane-wise addition of two 128-bit vectors interpreted as four 32-bit floating point numbers.\n    \n-   [f32x4\\_ceil](fn.f32x4_ceil.html \"fn core::arch::wasm32::f32x4_ceil\")`target_family=\"wasm\"` and `simd128`\n    \n    Lane-wise rounding to the nearest integral value not smaller than the input.\n    \n-   Converts a 128-bit vector interpreted as four 32-bit signed integers into a 128-bit vector of four 32-bit floating point numbers.\n    \n-   Converts a 128-bit vector interpreted as four 32-bit unsigned integers into a 128-bit vector of four 32-bit floating point numbers.\n    \n-   Conversion of the two double-precision floating point lanes to two lower single-precision lanes of the result. The two higher lanes of the result are initialized to zero. If the conversion result is not representable as a single-precision floating point number, it is rounded to the nearest-even representable number.\n    \n-   [f32x4\\_div](fn.f32x4_div.html \"fn core::arch::wasm32::f32x4_div\")`target_family=\"wasm\"` and `simd128`\n    \n    Lane-wise division of two 128-bit vectors interpreted as four 32-bit floating point numbers.\n    \n-   [f32x4\\_eq](fn.f32x4_eq.html \"fn core::arch::wasm32::f32x4_eq\")`target_family=\"wasm\"` and `simd128`\n    \n    Compares two 128-bit vectors as if they were two vectors of 4 thirty-two-bit floating point numbers.\n    \n-   Extracts a lane from a 128-bit vector interpreted as 4 packed f32 numbers.\n    \n-   Lane-wise rounding to the nearest integral value not greater than the input.\n    \n-   [f32x4\\_ge](fn.f32x4_ge.html \"fn core::arch::wasm32::f32x4_ge\")`target_family=\"wasm\"` and `simd128`\n    \n    Compares two 128-bit vectors as if they were two vectors of 4 thirty-two-bit floating point numbers.\n    \n-   [f32x4\\_gt](fn.f32x4_gt.html \"fn core::arch::wasm32::f32x4_gt\")`target_family=\"wasm\"` and `simd128`\n    \n    Compares two 128-bit vectors as if they were two vectors of 4 thirty-two-bit floating point numbers.\n    \n-   [f32x4\\_le](fn.f32x4_le.html \"fn core::arch::wasm32::f32x4_le\")`target_family=\"wasm\"` and `simd128`\n    \n    Compares two 128-bit vectors as if they were two vectors of 4 thirty-two-bit floating point numbers.\n    \n-   [f32x4\\_lt](fn.f32x4_lt.html \"fn core::arch::wasm32::f32x4_lt\")`target_family=\"wasm\"` and `simd128`\n    \n    Compares two 128-bit vectors as if they were two vectors of 4 thirty-two-bit floating point numbers.\n    \n-   [f32x4\\_max](fn.f32x4_max.html \"fn core::arch::wasm32::f32x4_max\")`target_family=\"wasm\"` and `simd128`\n    \n    Calculates the lane-wise minimum of two 128-bit vectors interpreted as four 32-bit floating point numbers.\n    \n-   [f32x4\\_min](fn.f32x4_min.html \"fn core::arch::wasm32::f32x4_min\")`target_family=\"wasm\"` and `simd128`\n    \n    Calculates the lane-wise minimum of two 128-bit vectors interpreted as four 32-bit floating point numbers.\n    \n-   [f32x4\\_mul](fn.f32x4_mul.html \"fn core::arch::wasm32::f32x4_mul\")`target_family=\"wasm\"` and `simd128`\n    \n    Lane-wise multiplication of two 128-bit vectors interpreted as four 32-bit floating point numbers.\n    \n-   [f32x4\\_ne](fn.f32x4_ne.html \"fn core::arch::wasm32::f32x4_ne\")`target_family=\"wasm\"` and `simd128`\n    \n    Compares two 128-bit vectors as if they were two vectors of 4 thirty-two-bit floating point numbers.\n    \n-   Lane-wise rounding to the nearest integral value; if two values are equally near, rounds to the even one.\n    \n-   [f32x4\\_neg](fn.f32x4_neg.html \"fn core::arch::wasm32::f32x4_neg\")`target_family=\"wasm\"` and `simd128`\n    \n    Negates each lane of a 128-bit vector interpreted as four 32-bit floating point numbers.\n    \n-   [f32x4\\_pmax](fn.f32x4_pmax.html \"fn core::arch::wasm32::f32x4_pmax\")`target_family=\"wasm\"` and `simd128`\n    \n    Lane-wise maximum value, defined as `a < b ? b : a`\n    \n-   [f32x4\\_pmin](fn.f32x4_pmin.html \"fn core::arch::wasm32::f32x4_pmin\")`target_family=\"wasm\"` and `simd128`\n    \n    Lane-wise minimum value, defined as `b < a ? b : a`\n    \n-   Replaces a lane from a 128-bit vector interpreted as 4 packed f32 numbers.\n    \n-   Creates a vector with identical lanes.\n    \n-   [f32x4\\_sqrt](fn.f32x4_sqrt.html \"fn core::arch::wasm32::f32x4_sqrt\")`target_family=\"wasm\"` and `simd128`\n    \n    Calculates the square root of each lane of a 128-bit vector interpreted as four 32-bit floating point numbers.\n    \n-   [f32x4\\_sub](fn.f32x4_sub.html \"fn core::arch::wasm32::f32x4_sub\")`target_family=\"wasm\"` and `simd128`\n    \n    Lane-wise subtraction of two 128-bit vectors interpreted as four 32-bit floating point numbers.\n    \n-   Lane-wise rounding to the nearest integral value with the magnitude not larger than the input.\n    \n-   [f64x2](fn.f64x2.html \"fn core::arch::wasm32::f64x2\")`target_family=\"wasm\"`\n    \n    Materializes a SIMD value from the provided operands.\n    \n-   [f64x2\\_abs](fn.f64x2_abs.html \"fn core::arch::wasm32::f64x2_abs\")`target_family=\"wasm\"` and `simd128`\n    \n    Calculates the absolute value of each lane of a 128-bit vector interpreted as two 64-bit floating point numbers.\n    \n-   [f64x2\\_add](fn.f64x2_add.html \"fn core::arch::wasm32::f64x2_add\")`target_family=\"wasm\"` and `simd128`\n    \n    Lane-wise add of two 128-bit vectors interpreted as two 64-bit floating point numbers.\n    \n-   [f64x2\\_ceil](fn.f64x2_ceil.html \"fn core::arch::wasm32::f64x2_ceil\")`target_family=\"wasm\"` and `simd128`\n    \n    Lane-wise rounding to the nearest integral value not smaller than the input.\n    \n-   Lane-wise conversion from integer to floating point.\n    \n-   Lane-wise conversion from integer to floating point.\n    \n-   [f64x2\\_div](fn.f64x2_div.html \"fn core::arch::wasm32::f64x2_div\")`target_family=\"wasm\"` and `simd128`\n    \n    Lane-wise divide of two 128-bit vectors interpreted as two 64-bit floating point numbers.\n    \n-   [f64x2\\_eq](fn.f64x2_eq.html \"fn core::arch::wasm32::f64x2_eq\")`target_family=\"wasm\"` and `simd128`\n    \n    Compares two 128-bit vectors as if they were two vectors of 2 sixty-four-bit floating point numbers.\n    \n-   Extracts a lane from a 128-bit vector interpreted as 2 packed f64 numbers.\n    \n-   Lane-wise rounding to the nearest integral value not greater than the input.\n    \n-   [f64x2\\_ge](fn.f64x2_ge.html \"fn core::arch::wasm32::f64x2_ge\")`target_family=\"wasm\"` and `simd128`\n    \n    Compares two 128-bit vectors as if they were two vectors of 2 sixty-four-bit floating point numbers.\n    \n-   [f64x2\\_gt](fn.f64x2_gt.html \"fn core::arch::wasm32::f64x2_gt\")`target_family=\"wasm\"` and `simd128`\n    \n    Compares two 128-bit vectors as if they were two vectors of 2 sixty-four-bit floating point numbers.\n    \n-   [f64x2\\_le](fn.f64x2_le.html \"fn core::arch::wasm32::f64x2_le\")`target_family=\"wasm\"` and `simd128`\n    \n    Compares two 128-bit vectors as if they were two vectors of 2 sixty-four-bit floating point numbers.\n    \n-   [f64x2\\_lt](fn.f64x2_lt.html \"fn core::arch::wasm32::f64x2_lt\")`target_family=\"wasm\"` and `simd128`\n    \n    Compares two 128-bit vectors as if they were two vectors of 2 sixty-four-bit floating point numbers.\n    \n-   [f64x2\\_max](fn.f64x2_max.html \"fn core::arch::wasm32::f64x2_max\")`target_family=\"wasm\"` and `simd128`\n    \n    Calculates the lane-wise maximum of two 128-bit vectors interpreted as two 64-bit floating point numbers.\n    \n-   [f64x2\\_min](fn.f64x2_min.html \"fn core::arch::wasm32::f64x2_min\")`target_family=\"wasm\"` and `simd128`\n    \n    Calculates the lane-wise minimum of two 128-bit vectors interpreted as two 64-bit floating point numbers.\n    \n-   [f64x2\\_mul](fn.f64x2_mul.html \"fn core::arch::wasm32::f64x2_mul\")`target_family=\"wasm\"` and `simd128`\n    \n    Lane-wise multiply of two 128-bit vectors interpreted as two 64-bit floating point numbers.\n    \n-   [f64x2\\_ne](fn.f64x2_ne.html \"fn core::arch::wasm32::f64x2_ne\")`target_family=\"wasm\"` and `simd128`\n    \n    Compares two 128-bit vectors as if they were two vectors of 2 sixty-four-bit floating point numbers.\n    \n-   Lane-wise rounding to the nearest integral value; if two values are equally near, rounds to the even one.\n    \n-   [f64x2\\_neg](fn.f64x2_neg.html \"fn core::arch::wasm32::f64x2_neg\")`target_family=\"wasm\"` and `simd128`\n    \n    Negates each lane of a 128-bit vector interpreted as two 64-bit floating point numbers.\n    \n-   [f64x2\\_pmax](fn.f64x2_pmax.html \"fn core::arch::wasm32::f64x2_pmax\")`target_family=\"wasm\"` and `simd128`\n    \n    Lane-wise maximum value, defined as `a < b ? b : a`\n    \n-   [f64x2\\_pmin](fn.f64x2_pmin.html \"fn core::arch::wasm32::f64x2_pmin\")`target_family=\"wasm\"` and `simd128`\n    \n    Lane-wise minimum value, defined as `b < a ? b : a`\n    \n-   Conversion of the two lower single-precision floating point lanes to the two double-precision lanes of the result.\n    \n-   Replaces a lane from a 128-bit vector interpreted as 2 packed f64 numbers.\n    \n-   Creates a vector with identical lanes.\n    \n-   [f64x2\\_sqrt](fn.f64x2_sqrt.html \"fn core::arch::wasm32::f64x2_sqrt\")`target_family=\"wasm\"` and `simd128`\n    \n    Calculates the square root of each lane of a 128-bit vector interpreted as two 64-bit floating point numbers.\n    \n-   [f64x2\\_sub](fn.f64x2_sub.html \"fn core::arch::wasm32::f64x2_sub\")`target_family=\"wasm\"` and `simd128`\n    \n    Lane-wise subtract of two 128-bit vectors interpreted as two 64-bit floating point numbers.\n    \n-   Lane-wise rounding to the nearest integral value with the magnitude not larger than the input.\n    \n-   [i8x16](fn.i8x16.html \"fn core::arch::wasm32::i8x16\")`target_family=\"wasm\"`\n    \n    Materializes a SIMD value from the provided operands.\n    \n-   [i8x16\\_abs](fn.i8x16_abs.html \"fn core::arch::wasm32::i8x16_abs\")`target_family=\"wasm\"` and `simd128`\n    \n    Lane-wise wrapping absolute value.\n    \n-   [i8x16\\_add](fn.i8x16_add.html \"fn core::arch::wasm32::i8x16_add\")`target_family=\"wasm\"` and `simd128`\n    \n    Adds two 128-bit vectors as if they were two packed sixteen 8-bit integers.\n    \n-   Adds two 128-bit vectors as if they were two packed sixteen 8-bit signed integers, saturating on overflow to `i8::MAX`.\n    \n-   Returns true if all lanes are non-zero, false otherwise.\n    \n-   Extracts the high bit for each lane in `a` and produce a scalar mask with all bits concatenated.\n    \n-   [i8x16\\_eq](fn.i8x16_eq.html \"fn core::arch::wasm32::i8x16_eq\")`target_family=\"wasm\"` and `simd128`\n    \n    Compares two 128-bit vectors as if they were two vectors of 16 eight-bit integers.\n    \n-   Extracts a lane from a 128-bit vector interpreted as 16 packed i8 numbers.\n    \n-   [i8x16\\_ge](fn.i8x16_ge.html \"fn core::arch::wasm32::i8x16_ge\")`target_family=\"wasm\"` and `simd128`\n    \n    Compares two 128-bit vectors as if they were two vectors of 16 eight-bit signed integers.\n    \n-   [i8x16\\_gt](fn.i8x16_gt.html \"fn core::arch::wasm32::i8x16_gt\")`target_family=\"wasm\"` and `simd128`\n    \n    Compares two 128-bit vectors as if they were two vectors of 16 eight-bit signed integers.\n    \n-   [i8x16\\_le](fn.i8x16_le.html \"fn core::arch::wasm32::i8x16_le\")`target_family=\"wasm\"` and `simd128`\n    \n    Compares two 128-bit vectors as if they were two vectors of 16 eight-bit signed integers.\n    \n-   [i8x16\\_lt](fn.i8x16_lt.html \"fn core::arch::wasm32::i8x16_lt\")`target_family=\"wasm\"` and `simd128`\n    \n    Compares two 128-bit vectors as if they were two vectors of 16 eight-bit signed integers.\n    \n-   [i8x16\\_max](fn.i8x16_max.html \"fn core::arch::wasm32::i8x16_max\")`target_family=\"wasm\"` and `simd128`\n    \n    Compares lane-wise signed integers, and returns the maximum of each pair.\n    \n-   [i8x16\\_min](fn.i8x16_min.html \"fn core::arch::wasm32::i8x16_min\")`target_family=\"wasm\"` and `simd128`\n    \n    Compares lane-wise signed integers, and returns the minimum of each pair.\n    \n-   Converts two input vectors into a smaller lane vector by narrowing each lane.\n    \n-   [i8x16\\_ne](fn.i8x16_ne.html \"fn core::arch::wasm32::i8x16_ne\")`target_family=\"wasm\"` and `simd128`\n    \n    Compares two 128-bit vectors as if they were two vectors of 16 eight-bit integers.\n    \n-   [i8x16\\_neg](fn.i8x16_neg.html \"fn core::arch::wasm32::i8x16_neg\")`target_family=\"wasm\"` and `simd128`\n    \n    Negates a 128-bit vectors interpreted as sixteen 8-bit signed integers\n    \n-   Count the number of bits set to one within each lane.\n    \n-   Replaces a lane from a 128-bit vector interpreted as 16 packed i8 numbers.\n    \n-   [i8x16\\_shl](fn.i8x16_shl.html \"fn core::arch::wasm32::i8x16_shl\")`target_family=\"wasm\"` and `simd128`\n    \n    Shifts each lane to the left by the specified number of bits.\n    \n-   [i8x16\\_shr](fn.i8x16_shr.html \"fn core::arch::wasm32::i8x16_shr\")`target_family=\"wasm\"` and `simd128`\n    \n    Shifts each lane to the right by the specified number of bits, sign extending.\n    \n-   Returns a new vector with lanes selected from the lanes of the two input vectors `$a` and `$b` specified in the 16 immediate operands.\n    \n-   Creates a vector with identical lanes.\n    \n-   [i8x16\\_sub](fn.i8x16_sub.html \"fn core::arch::wasm32::i8x16_sub\")`target_family=\"wasm\"` and `simd128`\n    \n    Subtracts two 128-bit vectors as if they were two packed sixteen 8-bit integers.\n    \n-   Subtracts two 128-bit vectors as if they were two packed sixteen 8-bit signed integers, saturating on overflow to `i8::MIN`.\n    \n-   Returns a new vector with lanes selected from the lanes of the first input vector `a` specified in the second input vector `s`.\n    \n-   [i16x8](fn.i16x8.html \"fn core::arch::wasm32::i16x8\")`target_family=\"wasm\"`\n    \n    Materializes a SIMD value from the provided operands.\n    \n-   [i16x8\\_abs](fn.i16x8_abs.html \"fn core::arch::wasm32::i16x8_abs\")`target_family=\"wasm\"` and `simd128`\n    \n    Lane-wise wrapping absolute value.\n    \n-   [i16x8\\_add](fn.i16x8_add.html \"fn core::arch::wasm32::i16x8_add\")`target_family=\"wasm\"` and `simd128`\n    \n    Adds two 128-bit vectors as if they were two packed eight 16-bit integers.\n    \n-   Adds two 128-bit vectors as if they were two packed eight 16-bit signed integers, saturating on overflow to `i16::MAX`.\n    \n-   Returns true if all lanes are non-zero, false otherwise.\n    \n-   Extracts the high bit for each lane in `a` and produce a scalar mask with all bits concatenated.\n    \n-   [i16x8\\_eq](fn.i16x8_eq.html \"fn core::arch::wasm32::i16x8_eq\")`target_family=\"wasm\"` and `simd128`\n    \n    Compares two 128-bit vectors as if they were two vectors of 8 sixteen-bit integers.\n    \n-   Integer extended pairwise addition producing extended results (twice wider results than the inputs).\n    \n-   Integer extended pairwise addition producing extended results (twice wider results than the inputs).\n    \n-   Converts high half of the smaller lane vector to a larger lane vector, sign extended.\n    \n-   Converts high half of the smaller lane vector to a larger lane vector, zero extended.\n    \n-   Converts low half of the smaller lane vector to a larger lane vector, sign extended.\n    \n-   Converts low half of the smaller lane vector to a larger lane vector, zero extended.\n    \n-   Lane-wise integer extended multiplication producing twice wider result than the inputs.\n    \n-   Lane-wise integer extended multiplication producing twice wider result than the inputs.\n    \n-   Lane-wise integer extended multiplication producing twice wider result than the inputs.\n    \n-   Lane-wise integer extended multiplication producing twice wider result than the inputs.\n    \n-   Extracts a lane from a 128-bit vector interpreted as 8 packed i16 numbers.\n    \n-   [i16x8\\_ge](fn.i16x8_ge.html \"fn core::arch::wasm32::i16x8_ge\")`target_family=\"wasm\"` and `simd128`\n    \n    Compares two 128-bit vectors as if they were two vectors of 8 sixteen-bit signed integers.\n    \n-   [i16x8\\_gt](fn.i16x8_gt.html \"fn core::arch::wasm32::i16x8_gt\")`target_family=\"wasm\"` and `simd128`\n    \n    Compares two 128-bit vectors as if they were two vectors of 8 sixteen-bit signed integers.\n    \n-   [i16x8\\_le](fn.i16x8_le.html \"fn core::arch::wasm32::i16x8_le\")`target_family=\"wasm\"` and `simd128`\n    \n    Compares two 128-bit vectors as if they were two vectors of 8 sixteen-bit signed integers.\n    \n-   Load eight 8-bit integers and sign extend each one to a 16-bit lane\n    \n-   Load eight 8-bit integers and zero extend each one to a 16-bit lane\n    \n-   [i16x8\\_lt](fn.i16x8_lt.html \"fn core::arch::wasm32::i16x8_lt\")`target_family=\"wasm\"` and `simd128`\n    \n    Compares two 128-bit vectors as if they were two vectors of 8 sixteen-bit signed integers.\n    \n-   [i16x8\\_max](fn.i16x8_max.html \"fn core::arch::wasm32::i16x8_max\")`target_family=\"wasm\"` and `simd128`\n    \n    Compares lane-wise signed integers, and returns the maximum of each pair.\n    \n-   [i16x8\\_min](fn.i16x8_min.html \"fn core::arch::wasm32::i16x8_min\")`target_family=\"wasm\"` and `simd128`\n    \n    Compares lane-wise signed integers, and returns the minimum of each pair.\n    \n-   [i16x8\\_mul](fn.i16x8_mul.html \"fn core::arch::wasm32::i16x8_mul\")`target_family=\"wasm\"` and `simd128`\n    \n    Multiplies two 128-bit vectors as if they were two packed eight 16-bit signed integers.\n    \n-   Converts two input vectors into a smaller lane vector by narrowing each lane.\n    \n-   [i16x8\\_ne](fn.i16x8_ne.html \"fn core::arch::wasm32::i16x8_ne\")`target_family=\"wasm\"` and `simd128`\n    \n    Compares two 128-bit vectors as if they were two vectors of 8 sixteen-bit integers.\n    \n-   [i16x8\\_neg](fn.i16x8_neg.html \"fn core::arch::wasm32::i16x8_neg\")`target_family=\"wasm\"` and `simd128`\n    \n    Negates a 128-bit vectors interpreted as eight 16-bit signed integers\n    \n-   Lane-wise saturating rounding multiplication in Q15 format.\n    \n-   Replaces a lane from a 128-bit vector interpreted as 8 packed i16 numbers.\n    \n-   [i16x8\\_shl](fn.i16x8_shl.html \"fn core::arch::wasm32::i16x8_shl\")`target_family=\"wasm\"` and `simd128`\n    \n    Shifts each lane to the left by the specified number of bits.\n    \n-   [i16x8\\_shr](fn.i16x8_shr.html \"fn core::arch::wasm32::i16x8_shr\")`target_family=\"wasm\"` and `simd128`\n    \n    Shifts each lane to the right by the specified number of bits, sign extending.\n    \n-   Same as [`i8x16_shuffle`](fn.i8x16_shuffle.html \"fn core::arch::wasm32::i8x16_shuffle\"), except operates as if the inputs were eight 16-bit integers, only taking 8 indices to shuffle.\n    \n-   Creates a vector with identical lanes.\n    \n-   [i16x8\\_sub](fn.i16x8_sub.html \"fn core::arch::wasm32::i16x8_sub\")`target_family=\"wasm\"` and `simd128`\n    \n    Subtracts two 128-bit vectors as if they were two packed eight 16-bit integers.\n    \n-   Subtracts two 128-bit vectors as if they were two packed eight 16-bit signed integers, saturating on overflow to `i16::MIN`.\n    \n-   [i32x4](fn.i32x4.html \"fn core::arch::wasm32::i32x4\")`target_family=\"wasm\"`\n    \n    Materializes a SIMD value from the provided operands.\n    \n-   [i32x4\\_abs](fn.i32x4_abs.html \"fn core::arch::wasm32::i32x4_abs\")`target_family=\"wasm\"` and `simd128`\n    \n    Lane-wise wrapping absolute value.\n    \n-   [i32x4\\_add](fn.i32x4_add.html \"fn core::arch::wasm32::i32x4_add\")`target_family=\"wasm\"` and `simd128`\n    \n    Adds two 128-bit vectors as if they were two packed four 32-bit integers.\n    \n-   Returns true if all lanes are non-zero, false otherwise.\n    \n-   Extracts the high bit for each lane in `a` and produce a scalar mask with all bits concatenated.\n    \n-   Lane-wise multiply signed 16-bit integers in the two input vectors and add adjacent pairs of the full 32-bit results.\n    \n-   [i32x4\\_eq](fn.i32x4_eq.html \"fn core::arch::wasm32::i32x4_eq\")`target_family=\"wasm\"` and `simd128`\n    \n    Compares two 128-bit vectors as if they were two vectors of 4 thirty-two-bit integers.\n    \n-   Integer extended pairwise addition producing extended results (twice wider results than the inputs).\n    \n-   Integer extended pairwise addition producing extended results (twice wider results than the inputs).\n    \n-   Converts high half of the smaller lane vector to a larger lane vector, sign extended.\n    \n-   Converts high half of the smaller lane vector to a larger lane vector, zero extended.\n    \n-   Converts low half of the smaller lane vector to a larger lane vector, sign extended.\n    \n-   Converts low half of the smaller lane vector to a larger lane vector, zero extended.\n    \n-   Lane-wise integer extended multiplication producing twice wider result than the inputs.\n    \n-   Lane-wise integer extended multiplication producing twice wider result than the inputs.\n    \n-   Lane-wise integer extended multiplication producing twice wider result than the inputs.\n    \n-   Lane-wise integer extended multiplication producing twice wider result than the inputs.\n    \n-   Extracts a lane from a 128-bit vector interpreted as 4 packed i32 numbers.\n    \n-   [i32x4\\_ge](fn.i32x4_ge.html \"fn core::arch::wasm32::i32x4_ge\")`target_family=\"wasm\"` and `simd128`\n    \n    Compares two 128-bit vectors as if they were two vectors of 4 thirty-two-bit signed integers.\n    \n-   [i32x4\\_gt](fn.i32x4_gt.html \"fn core::arch::wasm32::i32x4_gt\")`target_family=\"wasm\"` and `simd128`\n    \n    Compares two 128-bit vectors as if they were two vectors of 4 thirty-two-bit signed integers.\n    \n-   [i32x4\\_le](fn.i32x4_le.html \"fn core::arch::wasm32::i32x4_le\")`target_family=\"wasm\"` and `simd128`\n    \n    Compares two 128-bit vectors as if they were two vectors of 4 thirty-two-bit signed integers.\n    \n-   Load four 16-bit integers and sign extend each one to a 32-bit lane\n    \n-   Load four 16-bit integers and zero extend each one to a 32-bit lane\n    \n-   [i32x4\\_lt](fn.i32x4_lt.html \"fn core::arch::wasm32::i32x4_lt\")`target_family=\"wasm\"` and `simd128`\n    \n    Compares two 128-bit vectors as if they were two vectors of 4 thirty-two-bit signed integers.\n    \n-   [i32x4\\_max](fn.i32x4_max.html \"fn core::arch::wasm32::i32x4_max\")`target_family=\"wasm\"` and `simd128`\n    \n    Compares lane-wise signed integers, and returns the maximum of each pair.\n    \n-   [i32x4\\_min](fn.i32x4_min.html \"fn core::arch::wasm32::i32x4_min\")`target_family=\"wasm\"` and `simd128`\n    \n    Compares lane-wise signed integers, and returns the minimum of each pair.\n    \n-   [i32x4\\_mul](fn.i32x4_mul.html \"fn core::arch::wasm32::i32x4_mul\")`target_family=\"wasm\"` and `simd128`\n    \n    Multiplies two 128-bit vectors as if they were two packed four 32-bit signed integers.\n    \n-   [i32x4\\_ne](fn.i32x4_ne.html \"fn core::arch::wasm32::i32x4_ne\")`target_family=\"wasm\"` and `simd128`\n    \n    Compares two 128-bit vectors as if they were two vectors of 4 thirty-two-bit integers.\n    \n-   [i32x4\\_neg](fn.i32x4_neg.html \"fn core::arch::wasm32::i32x4_neg\")`target_family=\"wasm\"` and `simd128`\n    \n    Negates a 128-bit vectors interpreted as four 32-bit signed integers\n    \n-   Replaces a lane from a 128-bit vector interpreted as 4 packed i32 numbers.\n    \n-   [i32x4\\_shl](fn.i32x4_shl.html \"fn core::arch::wasm32::i32x4_shl\")`target_family=\"wasm\"` and `simd128`\n    \n    Shifts each lane to the left by the specified number of bits.\n    \n-   [i32x4\\_shr](fn.i32x4_shr.html \"fn core::arch::wasm32::i32x4_shr\")`target_family=\"wasm\"` and `simd128`\n    \n    Shifts each lane to the right by the specified number of bits, sign extending.\n    \n-   Same as [`i8x16_shuffle`](fn.i8x16_shuffle.html \"fn core::arch::wasm32::i8x16_shuffle\"), except operates as if the inputs were four 32-bit integers, only taking 4 indices to shuffle.\n    \n-   Creates a vector with identical lanes.\n    \n-   [i32x4\\_sub](fn.i32x4_sub.html \"fn core::arch::wasm32::i32x4_sub\")`target_family=\"wasm\"` and `simd128`\n    \n    Subtracts two 128-bit vectors as if they were two packed four 32-bit integers.\n    \n-   Converts a 128-bit vector interpreted as four 32-bit floating point numbers into a 128-bit vector of four 32-bit signed integers.\n    \n-   Saturating conversion of the two double-precision floating point lanes to two lower integer lanes using the IEEE `convertToIntegerTowardZero` function.\n    \n-   [i64x2](fn.i64x2.html \"fn core::arch::wasm32::i64x2\")`target_family=\"wasm\"`\n    \n    Materializes a SIMD value from the provided operands.\n    \n-   [i64x2\\_abs](fn.i64x2_abs.html \"fn core::arch::wasm32::i64x2_abs\")`target_family=\"wasm\"` and `simd128`\n    \n    Lane-wise wrapping absolute value.\n    \n-   [i64x2\\_add](fn.i64x2_add.html \"fn core::arch::wasm32::i64x2_add\")`target_family=\"wasm\"` and `simd128`\n    \n    Adds two 128-bit vectors as if they were two packed two 64-bit integers.\n    \n-   Returns true if all lanes are non-zero, false otherwise.\n    \n-   Extracts the high bit for each lane in `a` and produce a scalar mask with all bits concatenated.\n    \n-   [i64x2\\_eq](fn.i64x2_eq.html \"fn core::arch::wasm32::i64x2_eq\")`target_family=\"wasm\"` and `simd128`\n    \n    Compares two 128-bit vectors as if they were two vectors of 2 sixty-four-bit integers.\n    \n-   Converts high half of the smaller lane vector to a larger lane vector, sign extended.\n    \n-   Converts high half of the smaller lane vector to a larger lane vector, zero extended.\n    \n-   Converts low half of the smaller lane vector to a larger lane vector, sign extended.\n    \n-   Converts low half of the smaller lane vector to a larger lane vector, zero extended.\n    \n-   Lane-wise integer extended multiplication producing twice wider result than the inputs.\n    \n-   Lane-wise integer extended multiplication producing twice wider result than the inputs.\n    \n-   Lane-wise integer extended multiplication producing twice wider result than the inputs.\n    \n-   Lane-wise integer extended multiplication producing twice wider result than the inputs.\n    \n-   Extracts a lane from a 128-bit vector interpreted as 2 packed i64 numbers.\n    \n-   [i64x2\\_ge](fn.i64x2_ge.html \"fn core::arch::wasm32::i64x2_ge\")`target_family=\"wasm\"` and `simd128`\n    \n    Compares two 128-bit vectors as if they were two vectors of 2 sixty-four-bit signed integers.\n    \n-   [i64x2\\_gt](fn.i64x2_gt.html \"fn core::arch::wasm32::i64x2_gt\")`target_family=\"wasm\"` and `simd128`\n    \n    Compares two 128-bit vectors as if they were two vectors of 2 sixty-four-bit signed integers.\n    \n-   [i64x2\\_le](fn.i64x2_le.html \"fn core::arch::wasm32::i64x2_le\")`target_family=\"wasm\"` and `simd128`\n    \n    Compares two 128-bit vectors as if they were two vectors of 2 sixty-four-bit signed integers.\n    \n-   Load two 32-bit integers and sign extend each one to a 64-bit lane\n    \n-   Load two 32-bit integers and zero extend each one to a 64-bit lane\n    \n-   [i64x2\\_lt](fn.i64x2_lt.html \"fn core::arch::wasm32::i64x2_lt\")`target_family=\"wasm\"` and `simd128`\n    \n    Compares two 128-bit vectors as if they were two vectors of 2 sixty-four-bit signed integers.\n    \n-   [i64x2\\_mul](fn.i64x2_mul.html \"fn core::arch::wasm32::i64x2_mul\")`target_family=\"wasm\"` and `simd128`\n    \n    Multiplies two 128-bit vectors as if they were two packed two 64-bit integers.\n    \n-   [i64x2\\_ne](fn.i64x2_ne.html \"fn core::arch::wasm32::i64x2_ne\")`target_family=\"wasm\"` and `simd128`\n    \n    Compares two 128-bit vectors as if they were two vectors of 2 sixty-four-bit integers.\n    \n-   [i64x2\\_neg](fn.i64x2_neg.html \"fn core::arch::wasm32::i64x2_neg\")`target_family=\"wasm\"` and `simd128`\n    \n    Negates a 128-bit vectors interpreted as two 64-bit signed integers\n    \n-   Replaces a lane from a 128-bit vector interpreted as 2 packed i64 numbers.\n    \n-   [i64x2\\_shl](fn.i64x2_shl.html \"fn core::arch::wasm32::i64x2_shl\")`target_family=\"wasm\"` and `simd128`\n    \n    Shifts each lane to the left by the specified number of bits.\n    \n-   [i64x2\\_shr](fn.i64x2_shr.html \"fn core::arch::wasm32::i64x2_shr\")`target_family=\"wasm\"` and `simd128`\n    \n    Shifts each lane to the right by the specified number of bits, sign extending.\n    \n-   Same as [`i8x16_shuffle`](fn.i8x16_shuffle.html \"fn core::arch::wasm32::i8x16_shuffle\"), except operates as if the inputs were two 64-bit integers, only taking 2 indices to shuffle.\n    \n-   Creates a vector with identical lanes.\n    \n-   [i64x2\\_sub](fn.i64x2_sub.html \"fn core::arch::wasm32::i64x2_sub\")`target_family=\"wasm\"` and `simd128`\n    \n    Subtracts two 128-bit vectors as if they were two packed two 64-bit integers.\n    \n\n-   [u8x16](fn.u8x16.html \"fn core::arch::wasm32::u8x16\")`target_family=\"wasm\"`\n    \n    Materializes a SIMD value from the provided operands.\n    \n-   [u8x16\\_add](fn.u8x16_add.html \"fn core::arch::wasm32::u8x16_add\")`target_family=\"wasm\"` and `simd128`\n    \n    Adds two 128-bit vectors as if they were two packed sixteen 8-bit integers.\n    \n-   Adds two 128-bit vectors as if they were two packed sixteen 8-bit unsigned integers, saturating on overflow to `u8::MAX`.\n    \n-   Returns true if all lanes are non-zero, false otherwise.\n    \n-   [u8x16\\_avgr](fn.u8x16_avgr.html \"fn core::arch::wasm32::u8x16_avgr\")`target_family=\"wasm\"` and `simd128`\n    \n    Lane-wise rounding average.\n    \n-   Extracts the high bit for each lane in `a` and produce a scalar mask with all bits concatenated.\n    \n-   [u8x16\\_eq](fn.u8x16_eq.html \"fn core::arch::wasm32::u8x16_eq\")`target_family=\"wasm\"` and `simd128`\n    \n    Compares two 128-bit vectors as if they were two vectors of 16 eight-bit integers.\n    \n-   Extracts a lane from a 128-bit vector interpreted as 16 packed u8 numbers.\n    \n-   [u8x16\\_ge](fn.u8x16_ge.html \"fn core::arch::wasm32::u8x16_ge\")`target_family=\"wasm\"` and `simd128`\n    \n    Compares two 128-bit vectors as if they were two vectors of 16 eight-bit unsigned integers.\n    \n-   [u8x16\\_gt](fn.u8x16_gt.html \"fn core::arch::wasm32::u8x16_gt\")`target_family=\"wasm\"` and `simd128`\n    \n    Compares two 128-bit vectors as if they were two vectors of 16 eight-bit unsigned integers.\n    \n-   [u8x16\\_le](fn.u8x16_le.html \"fn core::arch::wasm32::u8x16_le\")`target_family=\"wasm\"` and `simd128`\n    \n    Compares two 128-bit vectors as if they were two vectors of 16 eight-bit unsigned integers.\n    \n-   [u8x16\\_lt](fn.u8x16_lt.html \"fn core::arch::wasm32::u8x16_lt\")`target_family=\"wasm\"` and `simd128`\n    \n    Compares two 128-bit vectors as if they were two vectors of 16 eight-bit unsigned integers.\n    \n-   [u8x16\\_max](fn.u8x16_max.html \"fn core::arch::wasm32::u8x16_max\")`target_family=\"wasm\"` and `simd128`\n    \n    Compares lane-wise unsigned integers, and returns the maximum of each pair.\n    \n-   [u8x16\\_min](fn.u8x16_min.html \"fn core::arch::wasm32::u8x16_min\")`target_family=\"wasm\"` and `simd128`\n    \n    Compares lane-wise unsigned integers, and returns the minimum of each pair.\n    \n-   Converts two input vectors into a smaller lane vector by narrowing each lane.\n    \n-   [u8x16\\_ne](fn.u8x16_ne.html \"fn core::arch::wasm32::u8x16_ne\")`target_family=\"wasm\"` and `simd128`\n    \n    Compares two 128-bit vectors as if they were two vectors of 16 eight-bit integers.\n    \n-   Count the number of bits set to one within each lane.\n    \n-   Replaces a lane from a 128-bit vector interpreted as 16 packed u8 numbers.\n    \n-   [u8x16\\_shl](fn.u8x16_shl.html \"fn core::arch::wasm32::u8x16_shl\")`target_family=\"wasm\"` and `simd128`\n    \n    Shifts each lane to the left by the specified number of bits.\n    \n-   [u8x16\\_shr](fn.u8x16_shr.html \"fn core::arch::wasm32::u8x16_shr\")`target_family=\"wasm\"` and `simd128`\n    \n    Shifts each lane to the right by the specified number of bits, shifting in zeros.\n    \n-   Returns a new vector with lanes selected from the lanes of the two input vectors `$a` and `$b` specified in the 16 immediate operands.\n    \n-   Creates a vector with identical lanes.\n    \n-   [u8x16\\_sub](fn.u8x16_sub.html \"fn core::arch::wasm32::u8x16_sub\")`target_family=\"wasm\"` and `simd128`\n    \n    Subtracts two 128-bit vectors as if they were two packed sixteen 8-bit integers.\n    \n-   Subtracts two 128-bit vectors as if they were two packed sixteen 8-bit unsigned integers, saturating on overflow to 0.\n    \n-   Returns a new vector with lanes selected from the lanes of the first input vector `a` specified in the second input vector `s`.\n    \n-   [u16x8](fn.u16x8.html \"fn core::arch::wasm32::u16x8\")`target_family=\"wasm\"`\n    \n    Materializes a SIMD value from the provided operands.\n    \n-   [u16x8\\_add](fn.u16x8_add.html \"fn core::arch::wasm32::u16x8_add\")`target_family=\"wasm\"` and `simd128`\n    \n    Adds two 128-bit vectors as if they were two packed eight 16-bit integers.\n    \n-   Adds two 128-bit vectors as if they were two packed eight 16-bit unsigned integers, saturating on overflow to `u16::MAX`.\n    \n-   Returns true if all lanes are non-zero, false otherwise.\n    \n-   [u16x8\\_avgr](fn.u16x8_avgr.html \"fn core::arch::wasm32::u16x8_avgr\")`target_family=\"wasm\"` and `simd128`\n    \n    Lane-wise rounding average.\n    \n-   Extracts the high bit for each lane in `a` and produce a scalar mask with all bits concatenated.\n    \n-   [u16x8\\_eq](fn.u16x8_eq.html \"fn core::arch::wasm32::u16x8_eq\")`target_family=\"wasm\"` and `simd128`\n    \n    Compares two 128-bit vectors as if they were two vectors of 8 sixteen-bit integers.\n    \n-   Integer extended pairwise addition producing extended results (twice wider results than the inputs).\n    \n-   Converts high half of the smaller lane vector to a larger lane vector, zero extended.\n    \n-   Converts low half of the smaller lane vector to a larger lane vector, zero extended.\n    \n-   Lane-wise integer extended multiplication producing twice wider result than the inputs.\n    \n-   Lane-wise integer extended multiplication producing twice wider result than the inputs.\n    \n-   Extracts a lane from a 128-bit vector interpreted as 8 packed u16 numbers.\n    \n-   [u16x8\\_ge](fn.u16x8_ge.html \"fn core::arch::wasm32::u16x8_ge\")`target_family=\"wasm\"` and `simd128`\n    \n    Compares two 128-bit vectors as if they were two vectors of 8 sixteen-bit unsigned integers.\n    \n-   [u16x8\\_gt](fn.u16x8_gt.html \"fn core::arch::wasm32::u16x8_gt\")`target_family=\"wasm\"` and `simd128`\n    \n    Compares two 128-bit vectors as if they were two vectors of 8 sixteen-bit unsigned integers.\n    \n-   [u16x8\\_le](fn.u16x8_le.html \"fn core::arch::wasm32::u16x8_le\")`target_family=\"wasm\"` and `simd128`\n    \n    Compares two 128-bit vectors as if they were two vectors of 8 sixteen-bit unsigned integers.\n    \n-   Load eight 8-bit integers and zero extend each one to a 16-bit lane\n    \n-   [u16x8\\_lt](fn.u16x8_lt.html \"fn core::arch::wasm32::u16x8_lt\")`target_family=\"wasm\"` and `simd128`\n    \n    Compares two 128-bit vectors as if they were two vectors of 8 sixteen-bit unsigned integers.\n    \n-   [u16x8\\_max](fn.u16x8_max.html \"fn core::arch::wasm32::u16x8_max\")`target_family=\"wasm\"` and `simd128`\n    \n    Compares lane-wise unsigned integers, and returns the maximum of each pair.\n    \n-   [u16x8\\_min](fn.u16x8_min.html \"fn core::arch::wasm32::u16x8_min\")`target_family=\"wasm\"` and `simd128`\n    \n    Compares lane-wise unsigned integers, and returns the minimum of each pair.\n    \n-   [u16x8\\_mul](fn.u16x8_mul.html \"fn core::arch::wasm32::u16x8_mul\")`target_family=\"wasm\"` and `simd128`\n    \n    Multiplies two 128-bit vectors as if they were two packed eight 16-bit signed integers.\n    \n-   Converts two input vectors into a smaller lane vector by narrowing each lane.\n    \n-   [u16x8\\_ne](fn.u16x8_ne.html \"fn core::arch::wasm32::u16x8_ne\")`target_family=\"wasm\"` and `simd128`\n    \n    Compares two 128-bit vectors as if they were two vectors of 8 sixteen-bit integers.\n    \n-   Replaces a lane from a 128-bit vector interpreted as 8 packed u16 numbers.\n    \n-   [u16x8\\_shl](fn.u16x8_shl.html \"fn core::arch::wasm32::u16x8_shl\")`target_family=\"wasm\"` and `simd128`\n    \n    Shifts each lane to the left by the specified number of bits.\n    \n-   [u16x8\\_shr](fn.u16x8_shr.html \"fn core::arch::wasm32::u16x8_shr\")`target_family=\"wasm\"` and `simd128`\n    \n    Shifts each lane to the right by the specified number of bits, shifting in zeros.\n    \n-   Same as [`i8x16_shuffle`](fn.i8x16_shuffle.html \"fn core::arch::wasm32::i8x16_shuffle\"), except operates as if the inputs were eight 16-bit integers, only taking 8 indices to shuffle.\n    \n-   Creates a vector with identical lanes.\n    \n-   [u16x8\\_sub](fn.u16x8_sub.html \"fn core::arch::wasm32::u16x8_sub\")`target_family=\"wasm\"` and `simd128`\n    \n    Subtracts two 128-bit vectors as if they were two packed eight 16-bit integers.\n    \n-   Subtracts two 128-bit vectors as if they were two packed eight 16-bit unsigned integers, saturating on overflow to 0.\n    \n-   [u32x4](fn.u32x4.html \"fn core::arch::wasm32::u32x4\")`target_family=\"wasm\"`\n    \n    Materializes a SIMD value from the provided operands.\n    \n-   [u32x4\\_add](fn.u32x4_add.html \"fn core::arch::wasm32::u32x4_add\")`target_family=\"wasm\"` and `simd128`\n    \n    Adds two 128-bit vectors as if they were two packed four 32-bit integers.\n    \n-   Returns true if all lanes are non-zero, false otherwise.\n    \n-   Extracts the high bit for each lane in `a` and produce a scalar mask with all bits concatenated.\n    \n-   [u32x4\\_eq](fn.u32x4_eq.html \"fn core::arch::wasm32::u32x4_eq\")`target_family=\"wasm\"` and `simd128`\n    \n    Compares two 128-bit vectors as if they were two vectors of 4 thirty-two-bit integers.\n    \n-   Integer extended pairwise addition producing extended results (twice wider results than the inputs).\n    \n-   Converts high half of the smaller lane vector to a larger lane vector, zero extended.\n    \n-   Converts low half of the smaller lane vector to a larger lane vector, zero extended.\n    \n-   Lane-wise integer extended multiplication producing twice wider result than the inputs.\n    \n-   Lane-wise integer extended multiplication producing twice wider result than the inputs.\n    \n-   Extracts a lane from a 128-bit vector interpreted as 4 packed u32 numbers.\n    \n-   [u32x4\\_ge](fn.u32x4_ge.html \"fn core::arch::wasm32::u32x4_ge\")`target_family=\"wasm\"` and `simd128`\n    \n    Compares two 128-bit vectors as if they were two vectors of 4 thirty-two-bit unsigned integers.\n    \n-   [u32x4\\_gt](fn.u32x4_gt.html \"fn core::arch::wasm32::u32x4_gt\")`target_family=\"wasm\"` and `simd128`\n    \n    Compares two 128-bit vectors as if they were two vectors of 4 thirty-two-bit unsigned integers.\n    \n-   [u32x4\\_le](fn.u32x4_le.html \"fn core::arch::wasm32::u32x4_le\")`target_family=\"wasm\"` and `simd128`\n    \n    Compares two 128-bit vectors as if they were two vectors of 4 thirty-two-bit unsigned integers.\n    \n-   Load four 16-bit integers and zero extend each one to a 32-bit lane\n    \n-   [u32x4\\_lt](fn.u32x4_lt.html \"fn core::arch::wasm32::u32x4_lt\")`target_family=\"wasm\"` and `simd128`\n    \n    Compares two 128-bit vectors as if they were two vectors of 4 thirty-two-bit unsigned integers.\n    \n-   [u32x4\\_max](fn.u32x4_max.html \"fn core::arch::wasm32::u32x4_max\")`target_family=\"wasm\"` and `simd128`\n    \n    Compares lane-wise unsigned integers, and returns the maximum of each pair.\n    \n-   [u32x4\\_min](fn.u32x4_min.html \"fn core::arch::wasm32::u32x4_min\")`target_family=\"wasm\"` and `simd128`\n    \n    Compares lane-wise unsigned integers, and returns the minimum of each pair.\n    \n-   [u32x4\\_mul](fn.u32x4_mul.html \"fn core::arch::wasm32::u32x4_mul\")`target_family=\"wasm\"` and `simd128`\n    \n    Multiplies two 128-bit vectors as if they were two packed four 32-bit signed integers.\n    \n-   [u32x4\\_ne](fn.u32x4_ne.html \"fn core::arch::wasm32::u32x4_ne\")`target_family=\"wasm\"` and `simd128`\n    \n    Compares two 128-bit vectors as if they were two vectors of 4 thirty-two-bit integers.\n    \n-   Replaces a lane from a 128-bit vector interpreted as 4 packed u32 numbers.\n    \n-   [u32x4\\_shl](fn.u32x4_shl.html \"fn core::arch::wasm32::u32x4_shl\")`target_family=\"wasm\"` and `simd128`\n    \n    Shifts each lane to the left by the specified number of bits.\n    \n-   [u32x4\\_shr](fn.u32x4_shr.html \"fn core::arch::wasm32::u32x4_shr\")`target_family=\"wasm\"` and `simd128`\n    \n    Shifts each lane to the right by the specified number of bits, shifting in zeros.\n    \n-   Same as [`i8x16_shuffle`](fn.i8x16_shuffle.html \"fn core::arch::wasm32::i8x16_shuffle\"), except operates as if the inputs were four 32-bit integers, only taking 4 indices to shuffle.\n    \n-   Creates a vector with identical lanes.\n    \n-   [u32x4\\_sub](fn.u32x4_sub.html \"fn core::arch::wasm32::u32x4_sub\")`target_family=\"wasm\"` and `simd128`\n    \n    Subtracts two 128-bit vectors as if they were two packed four 32-bit integers.\n    \n-   Converts a 128-bit vector interpreted as four 32-bit floating point numbers into a 128-bit vector of four 32-bit unsigned integers.\n    \n-   Saturating conversion of the two double-precision floating point lanes to two lower integer lanes using the IEEE `convertToIntegerTowardZero` function.\n    \n-   [u64x2](fn.u64x2.html \"fn core::arch::wasm32::u64x2\")`target_family=\"wasm\"`\n    \n    Materializes a SIMD value from the provided operands.\n    \n-   [u64x2\\_add](fn.u64x2_add.html \"fn core::arch::wasm32::u64x2_add\")`target_family=\"wasm\"` and `simd128`\n    \n    Adds two 128-bit vectors as if they were two packed two 64-bit integers.\n    \n-   Returns true if all lanes are non-zero, false otherwise.\n    \n-   Extracts the high bit for each lane in `a` and produce a scalar mask with all bits concatenated.\n    \n-   [u64x2\\_eq](fn.u64x2_eq.html \"fn core::arch::wasm32::u64x2_eq\")`target_family=\"wasm\"` and `simd128`\n    \n    Compares two 128-bit vectors as if they were two vectors of 2 sixty-four-bit integers.\n    \n-   Converts high half of the smaller lane vector to a larger lane vector, zero extended.\n    \n-   Converts low half of the smaller lane vector to a larger lane vector, zero extended.\n    \n-   Lane-wise integer extended multiplication producing twice wider result than the inputs.\n    \n-   Lane-wise integer extended multiplication producing twice wider result than the inputs.\n    \n-   Extracts a lane from a 128-bit vector interpreted as 2 packed u64 numbers.\n    \n-   Load two 32-bit integers and zero extend each one to a 64-bit lane\n    \n-   [u64x2\\_mul](fn.u64x2_mul.html \"fn core::arch::wasm32::u64x2_mul\")`target_family=\"wasm\"` and `simd128`\n    \n    Multiplies two 128-bit vectors as if they were two packed two 64-bit integers.\n    \n-   [u64x2\\_ne](fn.u64x2_ne.html \"fn core::arch::wasm32::u64x2_ne\")`target_family=\"wasm\"` and `simd128`\n    \n    Compares two 128-bit vectors as if they were two vectors of 2 sixty-four-bit integers.\n    \n-   Replaces a lane from a 128-bit vector interpreted as 2 packed u64 numbers.\n    \n-   [u64x2\\_shl](fn.u64x2_shl.html \"fn core::arch::wasm32::u64x2_shl\")`target_family=\"wasm\"` and `simd128`\n    \n    Shifts each lane to the left by the specified number of bits.\n    \n-   [u64x2\\_shr](fn.u64x2_shr.html \"fn core::arch::wasm32::u64x2_shr\")`target_family=\"wasm\"` and `simd128`\n    \n    Shifts each lane to the right by the specified number of bits, shifting in zeros.\n    \n-   Same as [`i8x16_shuffle`](fn.i8x16_shuffle.html \"fn core::arch::wasm32::i8x16_shuffle\"), except operates as if the inputs were two 64-bit integers, only taking 2 indices to shuffle.\n    \n-   Creates a vector with identical lanes.\n    \n-   [u64x2\\_sub](fn.u64x2_sub.html \"fn core::arch::wasm32::u64x2_sub\")`target_family=\"wasm\"` and `simd128`\n    \n    Subtracts two 128-bit vectors as if they were two packed two 64-bit integers.\n    \n-   Generates the [`unreachable`](https://webassembly.github.io/spec/core/syntax/instructions.html#syntax-instr-control) instruction, which causes an unconditional [trap](https://webassembly.github.io/spec/core/intro/overview.html#trap).\n    \n-   [v128\\_and](fn.v128_and.html \"fn core::arch::wasm32::v128_and\")`target_family=\"wasm\"` and `simd128`\n    \n    Performs a bitwise and of the two input 128-bit vectors, returning the resulting vector.\n    \n-   Bitwise AND of bits of `a` and the logical inverse of bits of `b`.\n    \n-   Returns `true` if any bit in `a` is set, or `false` otherwise.\n    \n-   Use the bitmask in `c` to select bits from `v1` when 1 and `v2` when 0.\n    \n-   [v128\\_load](fn.v128_load.html \"fn core::arch::wasm32::v128_load\")⚠`target_family=\"wasm\"` and `simd128`\n    \n    Loads a `v128` vector from the given heap address.\n    \n-   Loads an 8-bit value from `m` and sets lane `L` of `v` to that value.\n    \n-   Load a single element and splat to all lanes of a v128 vector.\n    \n-   Loads a 16-bit value from `m` and sets lane `L` of `v` to that value.\n    \n-   Load a single element and splat to all lanes of a v128 vector.\n    \n-   Loads a 32-bit value from `m` and sets lane `L` of `v` to that value.\n    \n-   Load a single element and splat to all lanes of a v128 vector.\n    \n-   Load a 32-bit element into the low bits of the vector and sets all other bits to zero.\n    \n-   Loads a 64-bit value from `m` and sets lane `L` of `v` to that value.\n    \n-   Load a single element and splat to all lanes of a v128 vector.\n    \n-   Load a 64-bit element into the low bits of the vector and sets all other bits to zero.\n    \n-   [v128\\_not](fn.v128_not.html \"fn core::arch::wasm32::v128_not\")`target_family=\"wasm\"` and `simd128`\n    \n    Flips each bit of the 128-bit input vector.\n    \n-   [v128\\_or](fn.v128_or.html \"fn core::arch::wasm32::v128_or\")`target_family=\"wasm\"` and `simd128`\n    \n    Performs a bitwise or of the two input 128-bit vectors, returning the resulting vector.\n    \n-   [v128\\_store](fn.v128_store.html \"fn core::arch::wasm32::v128_store\")⚠`target_family=\"wasm\"` and `simd128`\n    \n    Stores a `v128` vector to the given heap address.\n    \n-   Stores the 8-bit value from lane `L` of `v` into `m`\n    \n-   Stores the 16-bit value from lane `L` of `v` into `m`\n    \n-   Stores the 32-bit value from lane `L` of `v` into `m`\n    \n-   Stores the 64-bit value from lane `L` of `v` into `m`\n    \n-   [v128\\_xor](fn.v128_xor.html \"fn core::arch::wasm32::v128_xor\")`target_family=\"wasm\"` and `simd128`\n    \n    Performs a bitwise xor of the two input 128-bit vectors, returning the resulting vector.\n    \n-   Computes `a * b + c` with either one rounding or two roundings.\n    \n-   A relaxed version of `f32x4_max` which is either `f32x4_max` or `f32x4_pmax`.\n    \n-   A relaxed version of `f32x4_min` which is either `f32x4_min` or `f32x4_pmin`.\n    \n-   Computes `-a * b + c` with either one rounding or two roundings.\n    \n-   Computes `a * b + c` with either one rounding or two roundings.\n    \n-   A relaxed version of `f64x2_max` which is either `f64x2_max` or `f64x2_pmax`.\n    \n-   A relaxed version of `f64x2_min` which is either `f64x2_min` or `f64x2_pmin`.\n    \n-   Computes `-a * b + c` with either one rounding or two roundings.\n    \n-   A relaxed version of `v128_bitselect` where this either behaves the same as `v128_bitselect` or the high bit of each lane `m` is inspected and the corresponding lane of `a` is chosen if the bit is 1 or the lane of `b` is chosen if it’s zero.\n    \n-   A relaxed version of `i8x16_swizzle(a, s)` which selects lanes from `a` using indices in `s`.\n    \n-   A relaxed dot-product instruction.\n    \n-   A relaxed version of `v128_bitselect` where this either behaves the same as `v128_bitselect` or the high bit of each lane `m` is inspected and the corresponding lane of `a` is chosen if the bit is 1 or the lane of `b` is chosen if it’s zero.\n    \n-   A relaxed version of `i16x8_relaxed_q15mulr` where if both lanes are `i16::MIN` then the result is either `i16::MIN` or `i16::MAX`.\n    \n-   Similar to [`i16x8_relaxed_dot_i8x16_i7x16`](fn.i16x8_relaxed_dot_i8x16_i7x16.html \"fn core::arch::wasm32::i16x8_relaxed_dot_i8x16_i7x16\") except that the intermediate `i16x8` result is fed into `i32x4_extadd_pairwise_i16x8` followed by `i32x4_add` to add the value `c` to the result.\n    \n-   A relaxed version of `v128_bitselect` where this either behaves the same as `v128_bitselect` or the high bit of each lane `m` is inspected and the corresponding lane of `a` is chosen if the bit is 1 or the lane of `b` is chosen if it’s zero.\n    \n-   A relaxed version of `i32x4_trunc_sat_f32x4(a)` converts the `f32` lanes of `a` to signed 32-bit integers.\n    \n-   A relaxed version of `i32x4_trunc_sat_f64x2_zero(a)` converts the `f64` lanes of `a` to signed 32-bit integers and the upper two lanes are zero.\n    \n-   A relaxed version of `v128_bitselect` where this either behaves the same as `v128_bitselect` or the high bit of each lane `m` is inspected and the corresponding lane of `a` is chosen if the bit is 1 or the lane of `b` is chosen if it’s zero.\n    \n\n-   [throw](fn.throw.html \"fn core::arch::wasm32::throw\")⚠Experimental`target_family=\"wasm\"`\n    \n-   A relaxed version of `u32x4_trunc_sat_f32x4(a)` converts the `f32` lanes of `a` to unsigned 32-bit integers.\n    \n-   A relaxed version of `u32x4_trunc_sat_f64x2_zero(a)` converts the `f64` lanes of `a` to unsigned 32-bit integers and the upper two lanes are zero.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Platform-specific intrinsics for the `wasm32` platform.\"><title>core::arch::wasm32 - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../../\" data-static-root-path=\"../../../static.files/\" data-current-crate=\"core\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"../sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc mod\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../../core/index.html\"><img class=\"rust-logo\" src=\"../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">Module wasm32</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../../core/index.html\"><img class=\"rust-logo\" src=\"../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../../core/index.html\">core</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">Module wasm32</a></h2><div class=\"sidebar-elems\"><section><ul class=\"block\"><li><a href=\"#structs\">Structs</a></li><li><a href=\"#functions\">Functions</a></li></ul></section><h2><a href=\"../index.html\">In core::arch</a></h2><h3><a href=\"../index.html#modules\">Modules</a></h3><ul class=\"block mod\"><li><a href=\"../aarch64/index.html\">aarch64</a></li><li><a href=\"../arm/index.html\">arm</a></li><li><a href=\"../loongarch64/index.html\">loongarch64</a></li><li><a href=\"../mips/index.html\">mips</a></li><li><a href=\"../mips64/index.html\">mips64</a></li><li><a href=\"../nvptx/index.html\">nvptx</a></li><li><a href=\"../powerpc/index.html\">powerpc</a></li><li><a href=\"../powerpc64/index.html\">powerpc64</a></li><li><a href=\"../riscv32/index.html\">riscv32</a></li><li><a href=\"../riscv64/index.html\">riscv64</a></li><li><a href=\"../wasm/index.html\">wasm</a></li><li><a href=\"../wasm32/index.html\">wasm32</a></li><li><a href=\"../wasm64/index.html\">wasm64</a></li><li><a href=\"../x86/index.html\">x86</a></li><li><a href=\"../x86_64/index.html\">x86_64</a></li></ul><h3><a href=\"../index.html#macros\">Macros</a></h3><ul class=\"block macro\"><li><a href=\"../macro.asm.html\">asm</a></li><li><a href=\"../macro.global_asm.html\">global_asm</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../../core/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Module <a href=\"../../index.html\">core</a>::<wbr><a href=\"../index.html\">arch</a>::<wbr><a class=\"mod\" href=\"#\">wasm32</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.33.0\">1.33.0</span> · <a class=\"src\" href=\"../../../src/core/stdarch/crates/core_arch/src/mod.rs.html#195\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>WebAssembly</strong> only.</div></span><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Platform-specific intrinsics for the <code>wasm32</code> platform.</p>\n<p>This module provides intrinsics specific to the WebAssembly\narchitecture. Here you’ll find intrinsics specific to WebAssembly that\naren’t otherwise surfaced somewhere in a cross-platform abstraction of\n<code>std</code>, and you’ll also find functions for leveraging WebAssembly\nproposals such as <a href=\"https://github.com/webassembly/threads\">atomics</a> and <a href=\"https://github.com/webassembly/simd\">simd</a>.</p>\n<p>Intrinsics in the <code>wasm32</code> module are modeled after the WebAssembly\ninstructions that they represent. Most functions are named after the\ninstruction they intend to correspond to, and the arguments/results\ncorrespond to the type signature of the instruction itself. Stable\nWebAssembly instructions are <a href=\"https://webassembly.github.io/spec/core/valid/instructions.html\">documented online</a>.</p>\n<p>If a proposal is not yet stable in WebAssembly itself then the functions\nwithin this function may be unstable and require the nightly channel of\nRust to use. As the proposal itself stabilizes the intrinsics in this\nmodule should stabilize as well.</p>\n<p>See the <a href=\"../index.html\">module documentation</a> for general information\nabout the <code>arch</code> module and platform intrinsics.</p>\n<h3 id=\"atomics\"><a class=\"doc-anchor\" href=\"#atomics\">§</a>Atomics</h3>\n<p>The <a href=\"https://github.com/webassembly/threads\">threads proposal</a> for WebAssembly adds a number of\ninstructions for dealing with multithreaded programs. Most instructions\nadded in the <a href=\"https://github.com/webassembly/threads\">atomics</a> proposal are exposed in Rust through the\n<code>std::sync::atomic</code> module. Some instructions, however, don’t have\ndirect equivalents in Rust so they’re exposed here instead.</p>\n<p>Note that the instructions added in the <a href=\"https://github.com/webassembly/threads\">atomics</a> proposal can work in\neither a context with a shared wasm memory and without. These intrinsics\nare always available in the standard library, but you likely won’t be\nable to use them too productively unless you recompile the standard\nlibrary (and all your code) with <code>-Ctarget-feature=+atomics</code>.</p>\n<p>It’s also worth pointing out that multi-threaded WebAssembly and its\nstory in Rust is still in a somewhat “early days” phase as of the time\nof this writing. Pieces should mostly work but it generally requires a\ngood deal of manual setup. At this time it’s not as simple as “just call\n<code>std::thread::spawn</code>”, but it will hopefully get there one day!</p>\n<h3 id=\"simd\"><a class=\"doc-anchor\" href=\"#simd\">§</a>SIMD</h3>\n<p>The <a href=\"https://github.com/webassembly/simd\">simd proposal</a> for WebAssembly added a new <code>v128</code> type for a\n128-bit SIMD register. It also added a large array of instructions to\noperate on the <code>v128</code> type to perform data processing. Using SIMD on\nwasm is intended to be similar to as you would on <code>x86_64</code>, for example.\nYou’d write a function such as:</p>\n\n<div class=\"example-wrap ignore\"><a href=\"#\" class=\"tooltip\" title=\"This example is not tested\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#[cfg(target_arch = <span class=\"string\">\"wasm32\"</span>)]\n#[target_feature(enable = <span class=\"string\">\"simd128\"</span>)]\n</span><span class=\"kw\">unsafe fn </span>uses_simd() {\n    <span class=\"kw\">use </span>std::arch::wasm32::<span class=\"kw-2\">*</span>;\n    <span class=\"comment\">// ...\n</span>}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(target_arch+=+%22wasm32%22)%5D%0A++++%23%5Btarget_feature(enable+=+%22simd128%22)%5D%0A++++unsafe+fn+uses_simd()+%7B%0A++++++++use+std::arch::wasm32::*;%0A++++++++//+...%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Unlike <code>x86_64</code>, however, WebAssembly does not currently have dynamic\ndetection at runtime as to whether SIMD is supported (this is one of the\nmotivators for the <a href=\"https://github.com/webassembly/conditional-sections\">conditional sections</a> and <a href=\"https://github.com/WebAssembly/feature-detection\">feature\ndetection</a> proposals, but that is still pretty early days). This means\nthat your binary will either have SIMD and can only run on engines\nwhich support SIMD, or it will not have SIMD at all. For compatibility\nthe standard library itself does not use any SIMD internally.\nDetermining how best to ship your WebAssembly binary with SIMD is\nlargely left up to you as it can be pretty nuanced depending on\nyour situation.</p>\n<p>To enable SIMD support at compile time you need to do one of two things:</p>\n<ul>\n<li>\n<p>First you can annotate functions with <code>#[target_feature(enable = \"simd128\")]</code>. This causes just that one function to have SIMD support\navailable to it, and intrinsics will get inlined as usual in this\nsituation.</p>\n</li>\n<li>\n<p>Second you can compile your program with <code>-Ctarget-feature=+simd128</code>.\nThis compilation flag blanket enables SIMD support for your entire\ncompilation. Note that this does not include the standard library\nunless you <a href=\"https://doc.rust-lang.org/nightly/cargo/reference/unstable.html#build-std\">recompile the standard library</a>.</p>\n</li>\n</ul>\n<p>If you enable SIMD via either of these routes then you’ll have a\nWebAssembly binary that uses SIMD instructions, and you’ll need to ship\nthat accordingly. Also note that if you call SIMD intrinsics but don’t\nenable SIMD via either of these mechanisms, you’ll still have SIMD\ngenerated in your program. This means to generate a binary without SIMD\nyou’ll need to avoid both options above plus calling into any intrinsics\nin this module.</p>\n</div></details><h2 id=\"structs\" class=\"section-header\">Structs<a href=\"#structs\" class=\"anchor\">§</a></h2><ul class=\"item-table\"><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.v128.html\" title=\"struct core::arch::wasm32::v128\">v128</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` only\"><code>target_family=\"wasm\"</code></span></div><div class=\"desc docblock-short\">WASM-specific 128-bit wide SIMD vector type.</div></li></ul><h2 id=\"functions\" class=\"section-header\">Functions<a href=\"#functions\" class=\"anchor\">§</a></h2><ul class=\"item-table\"><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.f32x4.html\" title=\"fn core::arch::wasm32::f32x4\">f32x4</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` only\"><code>target_family=\"wasm\"</code></span></div><div class=\"desc docblock-short\">Materializes a SIMD value from the provided operands.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.f32x4_abs.html\" title=\"fn core::arch::wasm32::f32x4_abs\">f32x4_abs</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Calculates the absolute value of each lane of a 128-bit vector interpreted\nas four 32-bit floating point numbers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.f32x4_add.html\" title=\"fn core::arch::wasm32::f32x4_add\">f32x4_add</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Lane-wise addition of two 128-bit vectors interpreted as four 32-bit\nfloating point numbers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.f32x4_ceil.html\" title=\"fn core::arch::wasm32::f32x4_ceil\">f32x4_ceil</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Lane-wise rounding to the nearest integral value not smaller than the input.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.f32x4_convert_i32x4.html\" title=\"fn core::arch::wasm32::f32x4_convert_i32x4\">f32x4_convert_i32x4</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Converts a 128-bit vector interpreted as four 32-bit signed integers into a\n128-bit vector of four 32-bit floating point numbers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.f32x4_convert_u32x4.html\" title=\"fn core::arch::wasm32::f32x4_convert_u32x4\">f32x4_convert_u32x4</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Converts a 128-bit vector interpreted as four 32-bit unsigned integers into a\n128-bit vector of four 32-bit floating point numbers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.f32x4_demote_f64x2_zero.html\" title=\"fn core::arch::wasm32::f32x4_demote_f64x2_zero\">f32x4_demote_f64x2_zero</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Conversion of the two double-precision floating point lanes to two lower\nsingle-precision lanes of the result. The two higher lanes of the result are\ninitialized to zero. If the conversion result is not representable as a\nsingle-precision floating point number, it is rounded to the nearest-even\nrepresentable number.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.f32x4_div.html\" title=\"fn core::arch::wasm32::f32x4_div\">f32x4_div</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Lane-wise division of two 128-bit vectors interpreted as four 32-bit\nfloating point numbers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.f32x4_eq.html\" title=\"fn core::arch::wasm32::f32x4_eq\">f32x4_eq</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Compares two 128-bit vectors as if they were two vectors of 4 thirty-two-bit\nfloating point numbers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.f32x4_extract_lane.html\" title=\"fn core::arch::wasm32::f32x4_extract_lane\">f32x4_extract_lane</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Extracts a lane from a 128-bit vector interpreted as 4 packed f32 numbers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.f32x4_floor.html\" title=\"fn core::arch::wasm32::f32x4_floor\">f32x4_floor</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Lane-wise rounding to the nearest integral value not greater than the input.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.f32x4_ge.html\" title=\"fn core::arch::wasm32::f32x4_ge\">f32x4_ge</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Compares two 128-bit vectors as if they were two vectors of 4 thirty-two-bit\nfloating point numbers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.f32x4_gt.html\" title=\"fn core::arch::wasm32::f32x4_gt\">f32x4_gt</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Compares two 128-bit vectors as if they were two vectors of 4 thirty-two-bit\nfloating point numbers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.f32x4_le.html\" title=\"fn core::arch::wasm32::f32x4_le\">f32x4_le</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Compares two 128-bit vectors as if they were two vectors of 4 thirty-two-bit\nfloating point numbers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.f32x4_lt.html\" title=\"fn core::arch::wasm32::f32x4_lt\">f32x4_lt</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Compares two 128-bit vectors as if they were two vectors of 4 thirty-two-bit\nfloating point numbers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.f32x4_max.html\" title=\"fn core::arch::wasm32::f32x4_max\">f32x4_max</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Calculates the lane-wise minimum of two 128-bit vectors interpreted\nas four 32-bit floating point numbers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.f32x4_min.html\" title=\"fn core::arch::wasm32::f32x4_min\">f32x4_min</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Calculates the lane-wise minimum of two 128-bit vectors interpreted\nas four 32-bit floating point numbers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.f32x4_mul.html\" title=\"fn core::arch::wasm32::f32x4_mul\">f32x4_mul</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Lane-wise multiplication of two 128-bit vectors interpreted as four 32-bit\nfloating point numbers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.f32x4_ne.html\" title=\"fn core::arch::wasm32::f32x4_ne\">f32x4_ne</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Compares two 128-bit vectors as if they were two vectors of 4 thirty-two-bit\nfloating point numbers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.f32x4_nearest.html\" title=\"fn core::arch::wasm32::f32x4_nearest\">f32x4_nearest</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Lane-wise rounding to the nearest integral value; if two values are equally\nnear, rounds to the even one.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.f32x4_neg.html\" title=\"fn core::arch::wasm32::f32x4_neg\">f32x4_neg</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Negates each lane of a 128-bit vector interpreted as four 32-bit floating\npoint numbers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.f32x4_pmax.html\" title=\"fn core::arch::wasm32::f32x4_pmax\">f32x4_pmax</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Lane-wise maximum value, defined as <code>a &lt; b ? b : a</code></div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.f32x4_pmin.html\" title=\"fn core::arch::wasm32::f32x4_pmin\">f32x4_pmin</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Lane-wise minimum value, defined as <code>b &lt; a ? b : a</code></div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.f32x4_replace_lane.html\" title=\"fn core::arch::wasm32::f32x4_replace_lane\">f32x4_replace_lane</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Replaces a lane from a 128-bit vector interpreted as 4 packed f32 numbers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.f32x4_splat.html\" title=\"fn core::arch::wasm32::f32x4_splat\">f32x4_splat</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Creates a vector with identical lanes.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.f32x4_sqrt.html\" title=\"fn core::arch::wasm32::f32x4_sqrt\">f32x4_sqrt</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Calculates the square root of each lane of a 128-bit vector interpreted as\nfour 32-bit floating point numbers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.f32x4_sub.html\" title=\"fn core::arch::wasm32::f32x4_sub\">f32x4_sub</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Lane-wise subtraction of two 128-bit vectors interpreted as four 32-bit\nfloating point numbers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.f32x4_trunc.html\" title=\"fn core::arch::wasm32::f32x4_trunc\">f32x4_trunc</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Lane-wise rounding to the nearest integral value with the magnitude not\nlarger than the input.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.f64x2.html\" title=\"fn core::arch::wasm32::f64x2\">f64x2</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` only\"><code>target_family=\"wasm\"</code></span></div><div class=\"desc docblock-short\">Materializes a SIMD value from the provided operands.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.f64x2_abs.html\" title=\"fn core::arch::wasm32::f64x2_abs\">f64x2_abs</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Calculates the absolute value of each lane of a 128-bit vector interpreted\nas two 64-bit floating point numbers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.f64x2_add.html\" title=\"fn core::arch::wasm32::f64x2_add\">f64x2_add</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Lane-wise add of two 128-bit vectors interpreted as two 64-bit\nfloating point numbers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.f64x2_ceil.html\" title=\"fn core::arch::wasm32::f64x2_ceil\">f64x2_ceil</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Lane-wise rounding to the nearest integral value not smaller than the input.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.f64x2_convert_low_i32x4.html\" title=\"fn core::arch::wasm32::f64x2_convert_low_i32x4\">f64x2_convert_low_i32x4</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Lane-wise conversion from integer to floating point.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.f64x2_convert_low_u32x4.html\" title=\"fn core::arch::wasm32::f64x2_convert_low_u32x4\">f64x2_convert_low_u32x4</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Lane-wise conversion from integer to floating point.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.f64x2_div.html\" title=\"fn core::arch::wasm32::f64x2_div\">f64x2_div</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Lane-wise divide of two 128-bit vectors interpreted as two 64-bit\nfloating point numbers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.f64x2_eq.html\" title=\"fn core::arch::wasm32::f64x2_eq\">f64x2_eq</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Compares two 128-bit vectors as if they were two vectors of 2 sixty-four-bit\nfloating point numbers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.f64x2_extract_lane.html\" title=\"fn core::arch::wasm32::f64x2_extract_lane\">f64x2_extract_lane</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Extracts a lane from a 128-bit vector interpreted as 2 packed f64 numbers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.f64x2_floor.html\" title=\"fn core::arch::wasm32::f64x2_floor\">f64x2_floor</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Lane-wise rounding to the nearest integral value not greater than the input.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.f64x2_ge.html\" title=\"fn core::arch::wasm32::f64x2_ge\">f64x2_ge</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Compares two 128-bit vectors as if they were two vectors of 2 sixty-four-bit\nfloating point numbers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.f64x2_gt.html\" title=\"fn core::arch::wasm32::f64x2_gt\">f64x2_gt</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Compares two 128-bit vectors as if they were two vectors of 2 sixty-four-bit\nfloating point numbers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.f64x2_le.html\" title=\"fn core::arch::wasm32::f64x2_le\">f64x2_le</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Compares two 128-bit vectors as if they were two vectors of 2 sixty-four-bit\nfloating point numbers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.f64x2_lt.html\" title=\"fn core::arch::wasm32::f64x2_lt\">f64x2_lt</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Compares two 128-bit vectors as if they were two vectors of 2 sixty-four-bit\nfloating point numbers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.f64x2_max.html\" title=\"fn core::arch::wasm32::f64x2_max\">f64x2_max</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Calculates the lane-wise maximum of two 128-bit vectors interpreted\nas two 64-bit floating point numbers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.f64x2_min.html\" title=\"fn core::arch::wasm32::f64x2_min\">f64x2_min</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Calculates the lane-wise minimum of two 128-bit vectors interpreted\nas two 64-bit floating point numbers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.f64x2_mul.html\" title=\"fn core::arch::wasm32::f64x2_mul\">f64x2_mul</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Lane-wise multiply of two 128-bit vectors interpreted as two 64-bit\nfloating point numbers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.f64x2_ne.html\" title=\"fn core::arch::wasm32::f64x2_ne\">f64x2_ne</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Compares two 128-bit vectors as if they were two vectors of 2 sixty-four-bit\nfloating point numbers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.f64x2_nearest.html\" title=\"fn core::arch::wasm32::f64x2_nearest\">f64x2_nearest</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Lane-wise rounding to the nearest integral value; if two values are equally\nnear, rounds to the even one.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.f64x2_neg.html\" title=\"fn core::arch::wasm32::f64x2_neg\">f64x2_neg</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Negates each lane of a 128-bit vector interpreted as two 64-bit floating\npoint numbers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.f64x2_pmax.html\" title=\"fn core::arch::wasm32::f64x2_pmax\">f64x2_pmax</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Lane-wise maximum value, defined as <code>a &lt; b ? b : a</code></div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.f64x2_pmin.html\" title=\"fn core::arch::wasm32::f64x2_pmin\">f64x2_pmin</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Lane-wise minimum value, defined as <code>b &lt; a ? b : a</code></div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.f64x2_promote_low_f32x4.html\" title=\"fn core::arch::wasm32::f64x2_promote_low_f32x4\">f64x2_promote_low_f32x4</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Conversion of the two lower single-precision floating point lanes to the two\ndouble-precision lanes of the result.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.f64x2_replace_lane.html\" title=\"fn core::arch::wasm32::f64x2_replace_lane\">f64x2_replace_lane</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Replaces a lane from a 128-bit vector interpreted as 2 packed f64 numbers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.f64x2_splat.html\" title=\"fn core::arch::wasm32::f64x2_splat\">f64x2_splat</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Creates a vector with identical lanes.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.f64x2_sqrt.html\" title=\"fn core::arch::wasm32::f64x2_sqrt\">f64x2_sqrt</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Calculates the square root of each lane of a 128-bit vector interpreted as\ntwo 64-bit floating point numbers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.f64x2_sub.html\" title=\"fn core::arch::wasm32::f64x2_sub\">f64x2_sub</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Lane-wise subtract of two 128-bit vectors interpreted as two 64-bit\nfloating point numbers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.f64x2_trunc.html\" title=\"fn core::arch::wasm32::f64x2_trunc\">f64x2_trunc</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Lane-wise rounding to the nearest integral value with the magnitude not\nlarger than the input.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i8x16.html\" title=\"fn core::arch::wasm32::i8x16\">i8x16</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` only\"><code>target_family=\"wasm\"</code></span></div><div class=\"desc docblock-short\">Materializes a SIMD value from the provided operands.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i8x16_abs.html\" title=\"fn core::arch::wasm32::i8x16_abs\">i8x16_abs</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Lane-wise wrapping absolute value.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i8x16_add.html\" title=\"fn core::arch::wasm32::i8x16_add\">i8x16_add</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Adds two 128-bit vectors as if they were two packed sixteen 8-bit integers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i8x16_add_sat.html\" title=\"fn core::arch::wasm32::i8x16_add_sat\">i8x16_add_sat</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Adds two 128-bit vectors as if they were two packed sixteen 8-bit signed\nintegers, saturating on overflow to <code>i8::MAX</code>.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i8x16_all_true.html\" title=\"fn core::arch::wasm32::i8x16_all_true\">i8x16_all_true</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Returns true if all lanes are non-zero, false otherwise.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i8x16_bitmask.html\" title=\"fn core::arch::wasm32::i8x16_bitmask\">i8x16_bitmask</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Extracts the high bit for each lane in <code>a</code> and produce a scalar mask with\nall bits concatenated.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i8x16_eq.html\" title=\"fn core::arch::wasm32::i8x16_eq\">i8x16_eq</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Compares two 128-bit vectors as if they were two vectors of 16 eight-bit\nintegers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i8x16_extract_lane.html\" title=\"fn core::arch::wasm32::i8x16_extract_lane\">i8x16_extract_lane</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Extracts a lane from a 128-bit vector interpreted as 16 packed i8 numbers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i8x16_ge.html\" title=\"fn core::arch::wasm32::i8x16_ge\">i8x16_ge</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Compares two 128-bit vectors as if they were two vectors of 16 eight-bit\nsigned integers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i8x16_gt.html\" title=\"fn core::arch::wasm32::i8x16_gt\">i8x16_gt</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Compares two 128-bit vectors as if they were two vectors of 16 eight-bit\nsigned integers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i8x16_le.html\" title=\"fn core::arch::wasm32::i8x16_le\">i8x16_le</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Compares two 128-bit vectors as if they were two vectors of 16 eight-bit\nsigned integers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i8x16_lt.html\" title=\"fn core::arch::wasm32::i8x16_lt\">i8x16_lt</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Compares two 128-bit vectors as if they were two vectors of 16 eight-bit\nsigned integers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i8x16_max.html\" title=\"fn core::arch::wasm32::i8x16_max\">i8x16_max</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Compares lane-wise signed integers, and returns the maximum of\neach pair.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i8x16_min.html\" title=\"fn core::arch::wasm32::i8x16_min\">i8x16_min</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Compares lane-wise signed integers, and returns the minimum of\neach pair.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i8x16_narrow_i16x8.html\" title=\"fn core::arch::wasm32::i8x16_narrow_i16x8\">i8x16_narrow_i16x8</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Converts two input vectors into a smaller lane vector by narrowing each\nlane.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i8x16_ne.html\" title=\"fn core::arch::wasm32::i8x16_ne\">i8x16_ne</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Compares two 128-bit vectors as if they were two vectors of 16 eight-bit\nintegers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i8x16_neg.html\" title=\"fn core::arch::wasm32::i8x16_neg\">i8x16_neg</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Negates a 128-bit vectors interpreted as sixteen 8-bit signed integers</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i8x16_popcnt.html\" title=\"fn core::arch::wasm32::i8x16_popcnt\">i8x16_popcnt</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Count the number of bits set to one within each lane.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i8x16_replace_lane.html\" title=\"fn core::arch::wasm32::i8x16_replace_lane\">i8x16_replace_lane</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Replaces a lane from a 128-bit vector interpreted as 16 packed i8 numbers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i8x16_shl.html\" title=\"fn core::arch::wasm32::i8x16_shl\">i8x16_shl</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Shifts each lane to the left by the specified number of bits.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i8x16_shr.html\" title=\"fn core::arch::wasm32::i8x16_shr\">i8x16_shr</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Shifts each lane to the right by the specified number of bits, sign\nextending.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i8x16_shuffle.html\" title=\"fn core::arch::wasm32::i8x16_shuffle\">i8x16_shuffle</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Returns a new vector with lanes selected from the lanes of the two input\nvectors <code>$a</code> and <code>$b</code> specified in the 16 immediate operands.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i8x16_splat.html\" title=\"fn core::arch::wasm32::i8x16_splat\">i8x16_splat</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Creates a vector with identical lanes.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i8x16_sub.html\" title=\"fn core::arch::wasm32::i8x16_sub\">i8x16_sub</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Subtracts two 128-bit vectors as if they were two packed sixteen 8-bit integers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i8x16_sub_sat.html\" title=\"fn core::arch::wasm32::i8x16_sub_sat\">i8x16_sub_sat</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Subtracts two 128-bit vectors as if they were two packed sixteen 8-bit\nsigned integers, saturating on overflow to <code>i8::MIN</code>.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i8x16_swizzle.html\" title=\"fn core::arch::wasm32::i8x16_swizzle\">i8x16_swizzle</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Returns a new vector with lanes selected from the lanes of the first input\nvector <code>a</code> specified in the second input vector <code>s</code>.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i16x8.html\" title=\"fn core::arch::wasm32::i16x8\">i16x8</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` only\"><code>target_family=\"wasm\"</code></span></div><div class=\"desc docblock-short\">Materializes a SIMD value from the provided operands.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i16x8_abs.html\" title=\"fn core::arch::wasm32::i16x8_abs\">i16x8_abs</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Lane-wise wrapping absolute value.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i16x8_add.html\" title=\"fn core::arch::wasm32::i16x8_add\">i16x8_add</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Adds two 128-bit vectors as if they were two packed eight 16-bit integers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i16x8_add_sat.html\" title=\"fn core::arch::wasm32::i16x8_add_sat\">i16x8_add_sat</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Adds two 128-bit vectors as if they were two packed eight 16-bit signed\nintegers, saturating on overflow to <code>i16::MAX</code>.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i16x8_all_true.html\" title=\"fn core::arch::wasm32::i16x8_all_true\">i16x8_all_true</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Returns true if all lanes are non-zero, false otherwise.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i16x8_bitmask.html\" title=\"fn core::arch::wasm32::i16x8_bitmask\">i16x8_bitmask</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Extracts the high bit for each lane in <code>a</code> and produce a scalar mask with\nall bits concatenated.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i16x8_eq.html\" title=\"fn core::arch::wasm32::i16x8_eq\">i16x8_eq</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Compares two 128-bit vectors as if they were two vectors of 8 sixteen-bit\nintegers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i16x8_extadd_pairwise_i8x16.html\" title=\"fn core::arch::wasm32::i16x8_extadd_pairwise_i8x16\">i16x8_extadd_pairwise_i8x16</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Integer extended pairwise addition producing extended results\n(twice wider results than the inputs).</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i16x8_extadd_pairwise_u8x16.html\" title=\"fn core::arch::wasm32::i16x8_extadd_pairwise_u8x16\">i16x8_extadd_pairwise_u8x16</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Integer extended pairwise addition producing extended results\n(twice wider results than the inputs).</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i16x8_extend_high_i8x16.html\" title=\"fn core::arch::wasm32::i16x8_extend_high_i8x16\">i16x8_extend_high_i8x16</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Converts high half of the smaller lane vector to a larger lane\nvector, sign extended.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i16x8_extend_high_u8x16.html\" title=\"fn core::arch::wasm32::i16x8_extend_high_u8x16\">i16x8_extend_high_u8x16</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Converts high half of the smaller lane vector to a larger lane\nvector, zero extended.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i16x8_extend_low_i8x16.html\" title=\"fn core::arch::wasm32::i16x8_extend_low_i8x16\">i16x8_extend_low_i8x16</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Converts low half of the smaller lane vector to a larger lane\nvector, sign extended.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i16x8_extend_low_u8x16.html\" title=\"fn core::arch::wasm32::i16x8_extend_low_u8x16\">i16x8_extend_low_u8x16</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Converts low half of the smaller lane vector to a larger lane\nvector, zero extended.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i16x8_extmul_high_i8x16.html\" title=\"fn core::arch::wasm32::i16x8_extmul_high_i8x16\">i16x8_extmul_high_i8x16</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Lane-wise integer extended multiplication producing twice wider result than\nthe inputs.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i16x8_extmul_high_u8x16.html\" title=\"fn core::arch::wasm32::i16x8_extmul_high_u8x16\">i16x8_extmul_high_u8x16</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Lane-wise integer extended multiplication producing twice wider result than\nthe inputs.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i16x8_extmul_low_i8x16.html\" title=\"fn core::arch::wasm32::i16x8_extmul_low_i8x16\">i16x8_extmul_low_i8x16</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Lane-wise integer extended multiplication producing twice wider result than\nthe inputs.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i16x8_extmul_low_u8x16.html\" title=\"fn core::arch::wasm32::i16x8_extmul_low_u8x16\">i16x8_extmul_low_u8x16</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Lane-wise integer extended multiplication producing twice wider result than\nthe inputs.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i16x8_extract_lane.html\" title=\"fn core::arch::wasm32::i16x8_extract_lane\">i16x8_extract_lane</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Extracts a lane from a 128-bit vector interpreted as 8 packed i16 numbers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i16x8_ge.html\" title=\"fn core::arch::wasm32::i16x8_ge\">i16x8_ge</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Compares two 128-bit vectors as if they were two vectors of 8 sixteen-bit\nsigned integers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i16x8_gt.html\" title=\"fn core::arch::wasm32::i16x8_gt\">i16x8_gt</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Compares two 128-bit vectors as if they were two vectors of 8 sixteen-bit\nsigned integers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i16x8_le.html\" title=\"fn core::arch::wasm32::i16x8_le\">i16x8_le</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Compares two 128-bit vectors as if they were two vectors of 8 sixteen-bit\nsigned integers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i16x8_load_extend_i8x8.html\" title=\"fn core::arch::wasm32::i16x8_load_extend_i8x8\">i16x8_load_extend_i8x8</a><sup title=\"unsafe function\">⚠</sup><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Load eight 8-bit integers and sign extend each one to a 16-bit lane</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i16x8_load_extend_u8x8.html\" title=\"fn core::arch::wasm32::i16x8_load_extend_u8x8\">i16x8_load_extend_u8x8</a><sup title=\"unsafe function\">⚠</sup><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Load eight 8-bit integers and zero extend each one to a 16-bit lane</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i16x8_lt.html\" title=\"fn core::arch::wasm32::i16x8_lt\">i16x8_lt</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Compares two 128-bit vectors as if they were two vectors of 8 sixteen-bit\nsigned integers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i16x8_max.html\" title=\"fn core::arch::wasm32::i16x8_max\">i16x8_max</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Compares lane-wise signed integers, and returns the maximum of\neach pair.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i16x8_min.html\" title=\"fn core::arch::wasm32::i16x8_min\">i16x8_min</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Compares lane-wise signed integers, and returns the minimum of\neach pair.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i16x8_mul.html\" title=\"fn core::arch::wasm32::i16x8_mul\">i16x8_mul</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Multiplies two 128-bit vectors as if they were two packed eight 16-bit\nsigned integers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i16x8_narrow_i32x4.html\" title=\"fn core::arch::wasm32::i16x8_narrow_i32x4\">i16x8_narrow_i32x4</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Converts two input vectors into a smaller lane vector by narrowing each\nlane.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i16x8_ne.html\" title=\"fn core::arch::wasm32::i16x8_ne\">i16x8_ne</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Compares two 128-bit vectors as if they were two vectors of 8 sixteen-bit\nintegers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i16x8_neg.html\" title=\"fn core::arch::wasm32::i16x8_neg\">i16x8_neg</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Negates a 128-bit vectors interpreted as eight 16-bit signed integers</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i16x8_q15mulr_sat.html\" title=\"fn core::arch::wasm32::i16x8_q15mulr_sat\">i16x8_q15mulr_sat</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Lane-wise saturating rounding multiplication in Q15 format.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i16x8_replace_lane.html\" title=\"fn core::arch::wasm32::i16x8_replace_lane\">i16x8_replace_lane</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Replaces a lane from a 128-bit vector interpreted as 8 packed i16 numbers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i16x8_shl.html\" title=\"fn core::arch::wasm32::i16x8_shl\">i16x8_shl</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Shifts each lane to the left by the specified number of bits.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i16x8_shr.html\" title=\"fn core::arch::wasm32::i16x8_shr\">i16x8_shr</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Shifts each lane to the right by the specified number of bits, sign\nextending.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i16x8_shuffle.html\" title=\"fn core::arch::wasm32::i16x8_shuffle\">i16x8_shuffle</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Same as <a href=\"fn.i8x16_shuffle.html\" title=\"fn core::arch::wasm32::i8x16_shuffle\"><code>i8x16_shuffle</code></a>, except operates as if the inputs were eight\n16-bit integers, only taking 8 indices to shuffle.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i16x8_splat.html\" title=\"fn core::arch::wasm32::i16x8_splat\">i16x8_splat</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Creates a vector with identical lanes.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i16x8_sub.html\" title=\"fn core::arch::wasm32::i16x8_sub\">i16x8_sub</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Subtracts two 128-bit vectors as if they were two packed eight 16-bit integers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i16x8_sub_sat.html\" title=\"fn core::arch::wasm32::i16x8_sub_sat\">i16x8_sub_sat</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Subtracts two 128-bit vectors as if they were two packed eight 16-bit\nsigned integers, saturating on overflow to <code>i16::MIN</code>.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i32x4.html\" title=\"fn core::arch::wasm32::i32x4\">i32x4</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` only\"><code>target_family=\"wasm\"</code></span></div><div class=\"desc docblock-short\">Materializes a SIMD value from the provided operands.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i32x4_abs.html\" title=\"fn core::arch::wasm32::i32x4_abs\">i32x4_abs</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Lane-wise wrapping absolute value.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i32x4_add.html\" title=\"fn core::arch::wasm32::i32x4_add\">i32x4_add</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Adds two 128-bit vectors as if they were two packed four 32-bit integers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i32x4_all_true.html\" title=\"fn core::arch::wasm32::i32x4_all_true\">i32x4_all_true</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Returns true if all lanes are non-zero, false otherwise.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i32x4_bitmask.html\" title=\"fn core::arch::wasm32::i32x4_bitmask\">i32x4_bitmask</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Extracts the high bit for each lane in <code>a</code> and produce a scalar mask with\nall bits concatenated.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i32x4_dot_i16x8.html\" title=\"fn core::arch::wasm32::i32x4_dot_i16x8\">i32x4_dot_i16x8</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Lane-wise multiply signed 16-bit integers in the two input vectors and add\nadjacent pairs of the full 32-bit results.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i32x4_eq.html\" title=\"fn core::arch::wasm32::i32x4_eq\">i32x4_eq</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Compares two 128-bit vectors as if they were two vectors of 4 thirty-two-bit\nintegers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i32x4_extadd_pairwise_i16x8.html\" title=\"fn core::arch::wasm32::i32x4_extadd_pairwise_i16x8\">i32x4_extadd_pairwise_i16x8</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Integer extended pairwise addition producing extended results\n(twice wider results than the inputs).</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i32x4_extadd_pairwise_u16x8.html\" title=\"fn core::arch::wasm32::i32x4_extadd_pairwise_u16x8\">i32x4_extadd_pairwise_u16x8</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Integer extended pairwise addition producing extended results\n(twice wider results than the inputs).</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i32x4_extend_high_i16x8.html\" title=\"fn core::arch::wasm32::i32x4_extend_high_i16x8\">i32x4_extend_high_i16x8</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Converts high half of the smaller lane vector to a larger lane\nvector, sign extended.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i32x4_extend_high_u16x8.html\" title=\"fn core::arch::wasm32::i32x4_extend_high_u16x8\">i32x4_extend_high_u16x8</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Converts high half of the smaller lane vector to a larger lane\nvector, zero extended.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i32x4_extend_low_i16x8.html\" title=\"fn core::arch::wasm32::i32x4_extend_low_i16x8\">i32x4_extend_low_i16x8</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Converts low half of the smaller lane vector to a larger lane\nvector, sign extended.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i32x4_extend_low_u16x8.html\" title=\"fn core::arch::wasm32::i32x4_extend_low_u16x8\">i32x4_extend_low_u16x8</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Converts low half of the smaller lane vector to a larger lane\nvector, zero extended.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i32x4_extmul_high_i16x8.html\" title=\"fn core::arch::wasm32::i32x4_extmul_high_i16x8\">i32x4_extmul_high_i16x8</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Lane-wise integer extended multiplication producing twice wider result than\nthe inputs.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i32x4_extmul_high_u16x8.html\" title=\"fn core::arch::wasm32::i32x4_extmul_high_u16x8\">i32x4_extmul_high_u16x8</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Lane-wise integer extended multiplication producing twice wider result than\nthe inputs.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i32x4_extmul_low_i16x8.html\" title=\"fn core::arch::wasm32::i32x4_extmul_low_i16x8\">i32x4_extmul_low_i16x8</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Lane-wise integer extended multiplication producing twice wider result than\nthe inputs.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i32x4_extmul_low_u16x8.html\" title=\"fn core::arch::wasm32::i32x4_extmul_low_u16x8\">i32x4_extmul_low_u16x8</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Lane-wise integer extended multiplication producing twice wider result than\nthe inputs.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i32x4_extract_lane.html\" title=\"fn core::arch::wasm32::i32x4_extract_lane\">i32x4_extract_lane</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Extracts a lane from a 128-bit vector interpreted as 4 packed i32 numbers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i32x4_ge.html\" title=\"fn core::arch::wasm32::i32x4_ge\">i32x4_ge</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Compares two 128-bit vectors as if they were two vectors of 4 thirty-two-bit\nsigned integers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i32x4_gt.html\" title=\"fn core::arch::wasm32::i32x4_gt\">i32x4_gt</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Compares two 128-bit vectors as if they were two vectors of 4 thirty-two-bit\nsigned integers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i32x4_le.html\" title=\"fn core::arch::wasm32::i32x4_le\">i32x4_le</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Compares two 128-bit vectors as if they were two vectors of 4 thirty-two-bit\nsigned integers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i32x4_load_extend_i16x4.html\" title=\"fn core::arch::wasm32::i32x4_load_extend_i16x4\">i32x4_load_extend_i16x4</a><sup title=\"unsafe function\">⚠</sup><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Load four 16-bit integers and sign extend each one to a 32-bit lane</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i32x4_load_extend_u16x4.html\" title=\"fn core::arch::wasm32::i32x4_load_extend_u16x4\">i32x4_load_extend_u16x4</a><sup title=\"unsafe function\">⚠</sup><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Load four 16-bit integers and zero extend each one to a 32-bit lane</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i32x4_lt.html\" title=\"fn core::arch::wasm32::i32x4_lt\">i32x4_lt</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Compares two 128-bit vectors as if they were two vectors of 4 thirty-two-bit\nsigned integers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i32x4_max.html\" title=\"fn core::arch::wasm32::i32x4_max\">i32x4_max</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Compares lane-wise signed integers, and returns the maximum of\neach pair.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i32x4_min.html\" title=\"fn core::arch::wasm32::i32x4_min\">i32x4_min</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Compares lane-wise signed integers, and returns the minimum of\neach pair.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i32x4_mul.html\" title=\"fn core::arch::wasm32::i32x4_mul\">i32x4_mul</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Multiplies two 128-bit vectors as if they were two packed four 32-bit\nsigned integers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i32x4_ne.html\" title=\"fn core::arch::wasm32::i32x4_ne\">i32x4_ne</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Compares two 128-bit vectors as if they were two vectors of 4 thirty-two-bit\nintegers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i32x4_neg.html\" title=\"fn core::arch::wasm32::i32x4_neg\">i32x4_neg</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Negates a 128-bit vectors interpreted as four 32-bit signed integers</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i32x4_replace_lane.html\" title=\"fn core::arch::wasm32::i32x4_replace_lane\">i32x4_replace_lane</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Replaces a lane from a 128-bit vector interpreted as 4 packed i32 numbers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i32x4_shl.html\" title=\"fn core::arch::wasm32::i32x4_shl\">i32x4_shl</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Shifts each lane to the left by the specified number of bits.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i32x4_shr.html\" title=\"fn core::arch::wasm32::i32x4_shr\">i32x4_shr</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Shifts each lane to the right by the specified number of bits, sign\nextending.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i32x4_shuffle.html\" title=\"fn core::arch::wasm32::i32x4_shuffle\">i32x4_shuffle</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Same as <a href=\"fn.i8x16_shuffle.html\" title=\"fn core::arch::wasm32::i8x16_shuffle\"><code>i8x16_shuffle</code></a>, except operates as if the inputs were four\n32-bit integers, only taking 4 indices to shuffle.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i32x4_splat.html\" title=\"fn core::arch::wasm32::i32x4_splat\">i32x4_splat</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Creates a vector with identical lanes.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i32x4_sub.html\" title=\"fn core::arch::wasm32::i32x4_sub\">i32x4_sub</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Subtracts two 128-bit vectors as if they were two packed four 32-bit integers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i32x4_trunc_sat_f32x4.html\" title=\"fn core::arch::wasm32::i32x4_trunc_sat_f32x4\">i32x4_trunc_sat_f32x4</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Converts a 128-bit vector interpreted as four 32-bit floating point numbers\ninto a 128-bit vector of four 32-bit signed integers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i32x4_trunc_sat_f64x2_zero.html\" title=\"fn core::arch::wasm32::i32x4_trunc_sat_f64x2_zero\">i32x4_trunc_sat_f64x2_zero</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Saturating conversion of the two double-precision floating point lanes to\ntwo lower integer lanes using the IEEE <code>convertToIntegerTowardZero</code>\nfunction.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i64x2.html\" title=\"fn core::arch::wasm32::i64x2\">i64x2</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` only\"><code>target_family=\"wasm\"</code></span></div><div class=\"desc docblock-short\">Materializes a SIMD value from the provided operands.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i64x2_abs.html\" title=\"fn core::arch::wasm32::i64x2_abs\">i64x2_abs</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Lane-wise wrapping absolute value.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i64x2_add.html\" title=\"fn core::arch::wasm32::i64x2_add\">i64x2_add</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Adds two 128-bit vectors as if they were two packed two 64-bit integers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i64x2_all_true.html\" title=\"fn core::arch::wasm32::i64x2_all_true\">i64x2_all_true</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Returns true if all lanes are non-zero, false otherwise.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i64x2_bitmask.html\" title=\"fn core::arch::wasm32::i64x2_bitmask\">i64x2_bitmask</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Extracts the high bit for each lane in <code>a</code> and produce a scalar mask with\nall bits concatenated.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i64x2_eq.html\" title=\"fn core::arch::wasm32::i64x2_eq\">i64x2_eq</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Compares two 128-bit vectors as if they were two vectors of 2 sixty-four-bit\nintegers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i64x2_extend_high_i32x4.html\" title=\"fn core::arch::wasm32::i64x2_extend_high_i32x4\">i64x2_extend_high_i32x4</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Converts high half of the smaller lane vector to a larger lane\nvector, sign extended.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i64x2_extend_high_u32x4.html\" title=\"fn core::arch::wasm32::i64x2_extend_high_u32x4\">i64x2_extend_high_u32x4</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Converts high half of the smaller lane vector to a larger lane\nvector, zero extended.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i64x2_extend_low_i32x4.html\" title=\"fn core::arch::wasm32::i64x2_extend_low_i32x4\">i64x2_extend_low_i32x4</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Converts low half of the smaller lane vector to a larger lane\nvector, sign extended.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i64x2_extend_low_u32x4.html\" title=\"fn core::arch::wasm32::i64x2_extend_low_u32x4\">i64x2_extend_low_u32x4</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Converts low half of the smaller lane vector to a larger lane\nvector, zero extended.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i64x2_extmul_high_i32x4.html\" title=\"fn core::arch::wasm32::i64x2_extmul_high_i32x4\">i64x2_extmul_high_i32x4</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Lane-wise integer extended multiplication producing twice wider result than\nthe inputs.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i64x2_extmul_high_u32x4.html\" title=\"fn core::arch::wasm32::i64x2_extmul_high_u32x4\">i64x2_extmul_high_u32x4</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Lane-wise integer extended multiplication producing twice wider result than\nthe inputs.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i64x2_extmul_low_i32x4.html\" title=\"fn core::arch::wasm32::i64x2_extmul_low_i32x4\">i64x2_extmul_low_i32x4</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Lane-wise integer extended multiplication producing twice wider result than\nthe inputs.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i64x2_extmul_low_u32x4.html\" title=\"fn core::arch::wasm32::i64x2_extmul_low_u32x4\">i64x2_extmul_low_u32x4</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Lane-wise integer extended multiplication producing twice wider result than\nthe inputs.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i64x2_extract_lane.html\" title=\"fn core::arch::wasm32::i64x2_extract_lane\">i64x2_extract_lane</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Extracts a lane from a 128-bit vector interpreted as 2 packed i64 numbers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i64x2_ge.html\" title=\"fn core::arch::wasm32::i64x2_ge\">i64x2_ge</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Compares two 128-bit vectors as if they were two vectors of 2 sixty-four-bit\nsigned integers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i64x2_gt.html\" title=\"fn core::arch::wasm32::i64x2_gt\">i64x2_gt</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Compares two 128-bit vectors as if they were two vectors of 2 sixty-four-bit\nsigned integers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i64x2_le.html\" title=\"fn core::arch::wasm32::i64x2_le\">i64x2_le</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Compares two 128-bit vectors as if they were two vectors of 2 sixty-four-bit\nsigned integers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i64x2_load_extend_i32x2.html\" title=\"fn core::arch::wasm32::i64x2_load_extend_i32x2\">i64x2_load_extend_i32x2</a><sup title=\"unsafe function\">⚠</sup><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Load two 32-bit integers and sign extend each one to a 64-bit lane</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i64x2_load_extend_u32x2.html\" title=\"fn core::arch::wasm32::i64x2_load_extend_u32x2\">i64x2_load_extend_u32x2</a><sup title=\"unsafe function\">⚠</sup><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Load two 32-bit integers and zero extend each one to a 64-bit lane</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i64x2_lt.html\" title=\"fn core::arch::wasm32::i64x2_lt\">i64x2_lt</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Compares two 128-bit vectors as if they were two vectors of 2 sixty-four-bit\nsigned integers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i64x2_mul.html\" title=\"fn core::arch::wasm32::i64x2_mul\">i64x2_mul</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Multiplies two 128-bit vectors as if they were two packed two 64-bit integers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i64x2_ne.html\" title=\"fn core::arch::wasm32::i64x2_ne\">i64x2_ne</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Compares two 128-bit vectors as if they were two vectors of 2 sixty-four-bit\nintegers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i64x2_neg.html\" title=\"fn core::arch::wasm32::i64x2_neg\">i64x2_neg</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Negates a 128-bit vectors interpreted as two 64-bit signed integers</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i64x2_replace_lane.html\" title=\"fn core::arch::wasm32::i64x2_replace_lane\">i64x2_replace_lane</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Replaces a lane from a 128-bit vector interpreted as 2 packed i64 numbers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i64x2_shl.html\" title=\"fn core::arch::wasm32::i64x2_shl\">i64x2_shl</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Shifts each lane to the left by the specified number of bits.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i64x2_shr.html\" title=\"fn core::arch::wasm32::i64x2_shr\">i64x2_shr</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Shifts each lane to the right by the specified number of bits, sign\nextending.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i64x2_shuffle.html\" title=\"fn core::arch::wasm32::i64x2_shuffle\">i64x2_shuffle</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Same as <a href=\"fn.i8x16_shuffle.html\" title=\"fn core::arch::wasm32::i8x16_shuffle\"><code>i8x16_shuffle</code></a>, except operates as if the inputs were two\n64-bit integers, only taking 2 indices to shuffle.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i64x2_splat.html\" title=\"fn core::arch::wasm32::i64x2_splat\">i64x2_splat</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Creates a vector with identical lanes.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i64x2_sub.html\" title=\"fn core::arch::wasm32::i64x2_sub\">i64x2_sub</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Subtracts two 128-bit vectors as if they were two packed two 64-bit integers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.memory_grow.html\" title=\"fn core::arch::wasm32::memory_grow\">memory_grow</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` only\"><code>target_family=\"wasm\"</code></span></div><div class=\"desc docblock-short\">Corresponding intrinsic to wasm’s <a href=\"http://webassembly.github.io/spec/core/exec/instructions.html#exec-memory-grow\"><code>memory.grow</code> instruction</a></div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.memory_size.html\" title=\"fn core::arch::wasm32::memory_size\">memory_size</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` only\"><code>target_family=\"wasm\"</code></span></div><div class=\"desc docblock-short\">Corresponding intrinsic to wasm’s <a href=\"http://webassembly.github.io/spec/core/exec/instructions.html#exec-memory-size\"><code>memory.size</code> instruction</a></div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u8x16.html\" title=\"fn core::arch::wasm32::u8x16\">u8x16</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` only\"><code>target_family=\"wasm\"</code></span></div><div class=\"desc docblock-short\">Materializes a SIMD value from the provided operands.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u8x16_add.html\" title=\"fn core::arch::wasm32::u8x16_add\">u8x16_add</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Adds two 128-bit vectors as if they were two packed sixteen 8-bit integers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u8x16_add_sat.html\" title=\"fn core::arch::wasm32::u8x16_add_sat\">u8x16_add_sat</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Adds two 128-bit vectors as if they were two packed sixteen 8-bit unsigned\nintegers, saturating on overflow to <code>u8::MAX</code>.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u8x16_all_true.html\" title=\"fn core::arch::wasm32::u8x16_all_true\">u8x16_all_true</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Returns true if all lanes are non-zero, false otherwise.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u8x16_avgr.html\" title=\"fn core::arch::wasm32::u8x16_avgr\">u8x16_avgr</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Lane-wise rounding average.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u8x16_bitmask.html\" title=\"fn core::arch::wasm32::u8x16_bitmask\">u8x16_bitmask</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Extracts the high bit for each lane in <code>a</code> and produce a scalar mask with\nall bits concatenated.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u8x16_eq.html\" title=\"fn core::arch::wasm32::u8x16_eq\">u8x16_eq</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Compares two 128-bit vectors as if they were two vectors of 16 eight-bit\nintegers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u8x16_extract_lane.html\" title=\"fn core::arch::wasm32::u8x16_extract_lane\">u8x16_extract_lane</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Extracts a lane from a 128-bit vector interpreted as 16 packed u8 numbers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u8x16_ge.html\" title=\"fn core::arch::wasm32::u8x16_ge\">u8x16_ge</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Compares two 128-bit vectors as if they were two vectors of 16 eight-bit\nunsigned integers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u8x16_gt.html\" title=\"fn core::arch::wasm32::u8x16_gt\">u8x16_gt</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Compares two 128-bit vectors as if they were two vectors of 16 eight-bit\nunsigned integers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u8x16_le.html\" title=\"fn core::arch::wasm32::u8x16_le\">u8x16_le</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Compares two 128-bit vectors as if they were two vectors of 16 eight-bit\nunsigned integers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u8x16_lt.html\" title=\"fn core::arch::wasm32::u8x16_lt\">u8x16_lt</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Compares two 128-bit vectors as if they were two vectors of 16 eight-bit\nunsigned integers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u8x16_max.html\" title=\"fn core::arch::wasm32::u8x16_max\">u8x16_max</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Compares lane-wise unsigned integers, and returns the maximum of\neach pair.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u8x16_min.html\" title=\"fn core::arch::wasm32::u8x16_min\">u8x16_min</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Compares lane-wise unsigned integers, and returns the minimum of\neach pair.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u8x16_narrow_i16x8.html\" title=\"fn core::arch::wasm32::u8x16_narrow_i16x8\">u8x16_narrow_i16x8</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Converts two input vectors into a smaller lane vector by narrowing each\nlane.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u8x16_ne.html\" title=\"fn core::arch::wasm32::u8x16_ne\">u8x16_ne</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Compares two 128-bit vectors as if they were two vectors of 16 eight-bit\nintegers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u8x16_popcnt.html\" title=\"fn core::arch::wasm32::u8x16_popcnt\">u8x16_popcnt</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Count the number of bits set to one within each lane.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u8x16_replace_lane.html\" title=\"fn core::arch::wasm32::u8x16_replace_lane\">u8x16_replace_lane</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Replaces a lane from a 128-bit vector interpreted as 16 packed u8 numbers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u8x16_shl.html\" title=\"fn core::arch::wasm32::u8x16_shl\">u8x16_shl</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Shifts each lane to the left by the specified number of bits.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u8x16_shr.html\" title=\"fn core::arch::wasm32::u8x16_shr\">u8x16_shr</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Shifts each lane to the right by the specified number of bits, shifting in\nzeros.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u8x16_shuffle.html\" title=\"fn core::arch::wasm32::u8x16_shuffle\">u8x16_shuffle</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Returns a new vector with lanes selected from the lanes of the two input\nvectors <code>$a</code> and <code>$b</code> specified in the 16 immediate operands.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u8x16_splat.html\" title=\"fn core::arch::wasm32::u8x16_splat\">u8x16_splat</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Creates a vector with identical lanes.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u8x16_sub.html\" title=\"fn core::arch::wasm32::u8x16_sub\">u8x16_sub</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Subtracts two 128-bit vectors as if they were two packed sixteen 8-bit integers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u8x16_sub_sat.html\" title=\"fn core::arch::wasm32::u8x16_sub_sat\">u8x16_sub_sat</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Subtracts two 128-bit vectors as if they were two packed sixteen 8-bit\nunsigned integers, saturating on overflow to 0.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u8x16_swizzle.html\" title=\"fn core::arch::wasm32::u8x16_swizzle\">u8x16_swizzle</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Returns a new vector with lanes selected from the lanes of the first input\nvector <code>a</code> specified in the second input vector <code>s</code>.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u16x8.html\" title=\"fn core::arch::wasm32::u16x8\">u16x8</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` only\"><code>target_family=\"wasm\"</code></span></div><div class=\"desc docblock-short\">Materializes a SIMD value from the provided operands.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u16x8_add.html\" title=\"fn core::arch::wasm32::u16x8_add\">u16x8_add</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Adds two 128-bit vectors as if they were two packed eight 16-bit integers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u16x8_add_sat.html\" title=\"fn core::arch::wasm32::u16x8_add_sat\">u16x8_add_sat</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Adds two 128-bit vectors as if they were two packed eight 16-bit unsigned\nintegers, saturating on overflow to <code>u16::MAX</code>.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u16x8_all_true.html\" title=\"fn core::arch::wasm32::u16x8_all_true\">u16x8_all_true</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Returns true if all lanes are non-zero, false otherwise.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u16x8_avgr.html\" title=\"fn core::arch::wasm32::u16x8_avgr\">u16x8_avgr</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Lane-wise rounding average.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u16x8_bitmask.html\" title=\"fn core::arch::wasm32::u16x8_bitmask\">u16x8_bitmask</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Extracts the high bit for each lane in <code>a</code> and produce a scalar mask with\nall bits concatenated.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u16x8_eq.html\" title=\"fn core::arch::wasm32::u16x8_eq\">u16x8_eq</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Compares two 128-bit vectors as if they were two vectors of 8 sixteen-bit\nintegers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u16x8_extadd_pairwise_u8x16.html\" title=\"fn core::arch::wasm32::u16x8_extadd_pairwise_u8x16\">u16x8_extadd_pairwise_u8x16</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Integer extended pairwise addition producing extended results\n(twice wider results than the inputs).</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u16x8_extend_high_u8x16.html\" title=\"fn core::arch::wasm32::u16x8_extend_high_u8x16\">u16x8_extend_high_u8x16</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Converts high half of the smaller lane vector to a larger lane\nvector, zero extended.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u16x8_extend_low_u8x16.html\" title=\"fn core::arch::wasm32::u16x8_extend_low_u8x16\">u16x8_extend_low_u8x16</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Converts low half of the smaller lane vector to a larger lane\nvector, zero extended.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u16x8_extmul_high_u8x16.html\" title=\"fn core::arch::wasm32::u16x8_extmul_high_u8x16\">u16x8_extmul_high_u8x16</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Lane-wise integer extended multiplication producing twice wider result than\nthe inputs.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u16x8_extmul_low_u8x16.html\" title=\"fn core::arch::wasm32::u16x8_extmul_low_u8x16\">u16x8_extmul_low_u8x16</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Lane-wise integer extended multiplication producing twice wider result than\nthe inputs.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u16x8_extract_lane.html\" title=\"fn core::arch::wasm32::u16x8_extract_lane\">u16x8_extract_lane</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Extracts a lane from a 128-bit vector interpreted as 8 packed u16 numbers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u16x8_ge.html\" title=\"fn core::arch::wasm32::u16x8_ge\">u16x8_ge</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Compares two 128-bit vectors as if they were two vectors of 8 sixteen-bit\nunsigned integers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u16x8_gt.html\" title=\"fn core::arch::wasm32::u16x8_gt\">u16x8_gt</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Compares two 128-bit vectors as if they were two vectors of 8 sixteen-bit\nunsigned integers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u16x8_le.html\" title=\"fn core::arch::wasm32::u16x8_le\">u16x8_le</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Compares two 128-bit vectors as if they were two vectors of 8 sixteen-bit\nunsigned integers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u16x8_load_extend_u8x8.html\" title=\"fn core::arch::wasm32::u16x8_load_extend_u8x8\">u16x8_load_extend_u8x8</a><sup title=\"unsafe function\">⚠</sup><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Load eight 8-bit integers and zero extend each one to a 16-bit lane</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u16x8_lt.html\" title=\"fn core::arch::wasm32::u16x8_lt\">u16x8_lt</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Compares two 128-bit vectors as if they were two vectors of 8 sixteen-bit\nunsigned integers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u16x8_max.html\" title=\"fn core::arch::wasm32::u16x8_max\">u16x8_max</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Compares lane-wise unsigned integers, and returns the maximum of\neach pair.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u16x8_min.html\" title=\"fn core::arch::wasm32::u16x8_min\">u16x8_min</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Compares lane-wise unsigned integers, and returns the minimum of\neach pair.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u16x8_mul.html\" title=\"fn core::arch::wasm32::u16x8_mul\">u16x8_mul</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Multiplies two 128-bit vectors as if they were two packed eight 16-bit\nsigned integers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u16x8_narrow_i32x4.html\" title=\"fn core::arch::wasm32::u16x8_narrow_i32x4\">u16x8_narrow_i32x4</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Converts two input vectors into a smaller lane vector by narrowing each\nlane.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u16x8_ne.html\" title=\"fn core::arch::wasm32::u16x8_ne\">u16x8_ne</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Compares two 128-bit vectors as if they were two vectors of 8 sixteen-bit\nintegers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u16x8_replace_lane.html\" title=\"fn core::arch::wasm32::u16x8_replace_lane\">u16x8_replace_lane</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Replaces a lane from a 128-bit vector interpreted as 8 packed u16 numbers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u16x8_shl.html\" title=\"fn core::arch::wasm32::u16x8_shl\">u16x8_shl</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Shifts each lane to the left by the specified number of bits.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u16x8_shr.html\" title=\"fn core::arch::wasm32::u16x8_shr\">u16x8_shr</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Shifts each lane to the right by the specified number of bits, shifting in\nzeros.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u16x8_shuffle.html\" title=\"fn core::arch::wasm32::u16x8_shuffle\">u16x8_shuffle</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Same as <a href=\"fn.i8x16_shuffle.html\" title=\"fn core::arch::wasm32::i8x16_shuffle\"><code>i8x16_shuffle</code></a>, except operates as if the inputs were eight\n16-bit integers, only taking 8 indices to shuffle.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u16x8_splat.html\" title=\"fn core::arch::wasm32::u16x8_splat\">u16x8_splat</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Creates a vector with identical lanes.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u16x8_sub.html\" title=\"fn core::arch::wasm32::u16x8_sub\">u16x8_sub</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Subtracts two 128-bit vectors as if they were two packed eight 16-bit integers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u16x8_sub_sat.html\" title=\"fn core::arch::wasm32::u16x8_sub_sat\">u16x8_sub_sat</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Subtracts two 128-bit vectors as if they were two packed eight 16-bit\nunsigned integers, saturating on overflow to 0.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u32x4.html\" title=\"fn core::arch::wasm32::u32x4\">u32x4</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` only\"><code>target_family=\"wasm\"</code></span></div><div class=\"desc docblock-short\">Materializes a SIMD value from the provided operands.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u32x4_add.html\" title=\"fn core::arch::wasm32::u32x4_add\">u32x4_add</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Adds two 128-bit vectors as if they were two packed four 32-bit integers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u32x4_all_true.html\" title=\"fn core::arch::wasm32::u32x4_all_true\">u32x4_all_true</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Returns true if all lanes are non-zero, false otherwise.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u32x4_bitmask.html\" title=\"fn core::arch::wasm32::u32x4_bitmask\">u32x4_bitmask</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Extracts the high bit for each lane in <code>a</code> and produce a scalar mask with\nall bits concatenated.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u32x4_eq.html\" title=\"fn core::arch::wasm32::u32x4_eq\">u32x4_eq</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Compares two 128-bit vectors as if they were two vectors of 4 thirty-two-bit\nintegers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u32x4_extadd_pairwise_u16x8.html\" title=\"fn core::arch::wasm32::u32x4_extadd_pairwise_u16x8\">u32x4_extadd_pairwise_u16x8</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Integer extended pairwise addition producing extended results\n(twice wider results than the inputs).</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u32x4_extend_high_u16x8.html\" title=\"fn core::arch::wasm32::u32x4_extend_high_u16x8\">u32x4_extend_high_u16x8</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Converts high half of the smaller lane vector to a larger lane\nvector, zero extended.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u32x4_extend_low_u16x8.html\" title=\"fn core::arch::wasm32::u32x4_extend_low_u16x8\">u32x4_extend_low_u16x8</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Converts low half of the smaller lane vector to a larger lane\nvector, zero extended.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u32x4_extmul_high_u16x8.html\" title=\"fn core::arch::wasm32::u32x4_extmul_high_u16x8\">u32x4_extmul_high_u16x8</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Lane-wise integer extended multiplication producing twice wider result than\nthe inputs.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u32x4_extmul_low_u16x8.html\" title=\"fn core::arch::wasm32::u32x4_extmul_low_u16x8\">u32x4_extmul_low_u16x8</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Lane-wise integer extended multiplication producing twice wider result than\nthe inputs.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u32x4_extract_lane.html\" title=\"fn core::arch::wasm32::u32x4_extract_lane\">u32x4_extract_lane</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Extracts a lane from a 128-bit vector interpreted as 4 packed u32 numbers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u32x4_ge.html\" title=\"fn core::arch::wasm32::u32x4_ge\">u32x4_ge</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Compares two 128-bit vectors as if they were two vectors of 4 thirty-two-bit\nunsigned integers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u32x4_gt.html\" title=\"fn core::arch::wasm32::u32x4_gt\">u32x4_gt</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Compares two 128-bit vectors as if they were two vectors of 4 thirty-two-bit\nunsigned integers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u32x4_le.html\" title=\"fn core::arch::wasm32::u32x4_le\">u32x4_le</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Compares two 128-bit vectors as if they were two vectors of 4 thirty-two-bit\nunsigned integers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u32x4_load_extend_u16x4.html\" title=\"fn core::arch::wasm32::u32x4_load_extend_u16x4\">u32x4_load_extend_u16x4</a><sup title=\"unsafe function\">⚠</sup><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Load four 16-bit integers and zero extend each one to a 32-bit lane</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u32x4_lt.html\" title=\"fn core::arch::wasm32::u32x4_lt\">u32x4_lt</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Compares two 128-bit vectors as if they were two vectors of 4 thirty-two-bit\nunsigned integers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u32x4_max.html\" title=\"fn core::arch::wasm32::u32x4_max\">u32x4_max</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Compares lane-wise unsigned integers, and returns the maximum of\neach pair.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u32x4_min.html\" title=\"fn core::arch::wasm32::u32x4_min\">u32x4_min</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Compares lane-wise unsigned integers, and returns the minimum of\neach pair.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u32x4_mul.html\" title=\"fn core::arch::wasm32::u32x4_mul\">u32x4_mul</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Multiplies two 128-bit vectors as if they were two packed four 32-bit\nsigned integers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u32x4_ne.html\" title=\"fn core::arch::wasm32::u32x4_ne\">u32x4_ne</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Compares two 128-bit vectors as if they were two vectors of 4 thirty-two-bit\nintegers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u32x4_replace_lane.html\" title=\"fn core::arch::wasm32::u32x4_replace_lane\">u32x4_replace_lane</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Replaces a lane from a 128-bit vector interpreted as 4 packed u32 numbers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u32x4_shl.html\" title=\"fn core::arch::wasm32::u32x4_shl\">u32x4_shl</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Shifts each lane to the left by the specified number of bits.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u32x4_shr.html\" title=\"fn core::arch::wasm32::u32x4_shr\">u32x4_shr</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Shifts each lane to the right by the specified number of bits, shifting in\nzeros.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u32x4_shuffle.html\" title=\"fn core::arch::wasm32::u32x4_shuffle\">u32x4_shuffle</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Same as <a href=\"fn.i8x16_shuffle.html\" title=\"fn core::arch::wasm32::i8x16_shuffle\"><code>i8x16_shuffle</code></a>, except operates as if the inputs were four\n32-bit integers, only taking 4 indices to shuffle.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u32x4_splat.html\" title=\"fn core::arch::wasm32::u32x4_splat\">u32x4_splat</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Creates a vector with identical lanes.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u32x4_sub.html\" title=\"fn core::arch::wasm32::u32x4_sub\">u32x4_sub</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Subtracts two 128-bit vectors as if they were two packed four 32-bit integers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u32x4_trunc_sat_f32x4.html\" title=\"fn core::arch::wasm32::u32x4_trunc_sat_f32x4\">u32x4_trunc_sat_f32x4</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Converts a 128-bit vector interpreted as four 32-bit floating point numbers\ninto a 128-bit vector of four 32-bit unsigned integers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u32x4_trunc_sat_f64x2_zero.html\" title=\"fn core::arch::wasm32::u32x4_trunc_sat_f64x2_zero\">u32x4_trunc_sat_f64x2_zero</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Saturating conversion of the two double-precision floating point lanes to\ntwo lower integer lanes using the IEEE <code>convertToIntegerTowardZero</code>\nfunction.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u64x2.html\" title=\"fn core::arch::wasm32::u64x2\">u64x2</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` only\"><code>target_family=\"wasm\"</code></span></div><div class=\"desc docblock-short\">Materializes a SIMD value from the provided operands.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u64x2_add.html\" title=\"fn core::arch::wasm32::u64x2_add\">u64x2_add</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Adds two 128-bit vectors as if they were two packed two 64-bit integers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u64x2_all_true.html\" title=\"fn core::arch::wasm32::u64x2_all_true\">u64x2_all_true</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Returns true if all lanes are non-zero, false otherwise.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u64x2_bitmask.html\" title=\"fn core::arch::wasm32::u64x2_bitmask\">u64x2_bitmask</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Extracts the high bit for each lane in <code>a</code> and produce a scalar mask with\nall bits concatenated.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u64x2_eq.html\" title=\"fn core::arch::wasm32::u64x2_eq\">u64x2_eq</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Compares two 128-bit vectors as if they were two vectors of 2 sixty-four-bit\nintegers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u64x2_extend_high_u32x4.html\" title=\"fn core::arch::wasm32::u64x2_extend_high_u32x4\">u64x2_extend_high_u32x4</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Converts high half of the smaller lane vector to a larger lane\nvector, zero extended.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u64x2_extend_low_u32x4.html\" title=\"fn core::arch::wasm32::u64x2_extend_low_u32x4\">u64x2_extend_low_u32x4</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Converts low half of the smaller lane vector to a larger lane\nvector, zero extended.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u64x2_extmul_high_u32x4.html\" title=\"fn core::arch::wasm32::u64x2_extmul_high_u32x4\">u64x2_extmul_high_u32x4</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Lane-wise integer extended multiplication producing twice wider result than\nthe inputs.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u64x2_extmul_low_u32x4.html\" title=\"fn core::arch::wasm32::u64x2_extmul_low_u32x4\">u64x2_extmul_low_u32x4</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Lane-wise integer extended multiplication producing twice wider result than\nthe inputs.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u64x2_extract_lane.html\" title=\"fn core::arch::wasm32::u64x2_extract_lane\">u64x2_extract_lane</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Extracts a lane from a 128-bit vector interpreted as 2 packed u64 numbers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u64x2_load_extend_u32x2.html\" title=\"fn core::arch::wasm32::u64x2_load_extend_u32x2\">u64x2_load_extend_u32x2</a><sup title=\"unsafe function\">⚠</sup><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Load two 32-bit integers and zero extend each one to a 64-bit lane</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u64x2_mul.html\" title=\"fn core::arch::wasm32::u64x2_mul\">u64x2_mul</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Multiplies two 128-bit vectors as if they were two packed two 64-bit integers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u64x2_ne.html\" title=\"fn core::arch::wasm32::u64x2_ne\">u64x2_ne</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Compares two 128-bit vectors as if they were two vectors of 2 sixty-four-bit\nintegers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u64x2_replace_lane.html\" title=\"fn core::arch::wasm32::u64x2_replace_lane\">u64x2_replace_lane</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Replaces a lane from a 128-bit vector interpreted as 2 packed u64 numbers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u64x2_shl.html\" title=\"fn core::arch::wasm32::u64x2_shl\">u64x2_shl</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Shifts each lane to the left by the specified number of bits.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u64x2_shr.html\" title=\"fn core::arch::wasm32::u64x2_shr\">u64x2_shr</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Shifts each lane to the right by the specified number of bits, shifting in\nzeros.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u64x2_shuffle.html\" title=\"fn core::arch::wasm32::u64x2_shuffle\">u64x2_shuffle</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Same as <a href=\"fn.i8x16_shuffle.html\" title=\"fn core::arch::wasm32::i8x16_shuffle\"><code>i8x16_shuffle</code></a>, except operates as if the inputs were two\n64-bit integers, only taking 2 indices to shuffle.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u64x2_splat.html\" title=\"fn core::arch::wasm32::u64x2_splat\">u64x2_splat</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Creates a vector with identical lanes.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u64x2_sub.html\" title=\"fn core::arch::wasm32::u64x2_sub\">u64x2_sub</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Subtracts two 128-bit vectors as if they were two packed two 64-bit integers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.unreachable.html\" title=\"fn core::arch::wasm32::unreachable\">unreachable</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` only\"><code>target_family=\"wasm\"</code></span></div><div class=\"desc docblock-short\">Generates the <a href=\"https://webassembly.github.io/spec/core/syntax/instructions.html#syntax-instr-control\"><code>unreachable</code></a> instruction, which causes an unconditional <a href=\"https://webassembly.github.io/spec/core/intro/overview.html#trap\">trap</a>.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.v128_and.html\" title=\"fn core::arch::wasm32::v128_and\">v128_and</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Performs a bitwise and of the two input 128-bit vectors, returning the\nresulting vector.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.v128_andnot.html\" title=\"fn core::arch::wasm32::v128_andnot\">v128_andnot</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Bitwise AND of bits of <code>a</code> and the logical inverse of bits of <code>b</code>.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.v128_any_true.html\" title=\"fn core::arch::wasm32::v128_any_true\">v128_any_true</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Returns <code>true</code> if any bit in <code>a</code> is set, or <code>false</code> otherwise.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.v128_bitselect.html\" title=\"fn core::arch::wasm32::v128_bitselect\">v128_bitselect</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Use the bitmask in <code>c</code> to select bits from <code>v1</code> when 1 and <code>v2</code> when 0.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.v128_load.html\" title=\"fn core::arch::wasm32::v128_load\">v128_load</a><sup title=\"unsafe function\">⚠</sup><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Loads a <code>v128</code> vector from the given heap address.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.v128_load8_lane.html\" title=\"fn core::arch::wasm32::v128_load8_lane\">v128_load8_lane</a><sup title=\"unsafe function\">⚠</sup><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Loads an 8-bit value from <code>m</code> and sets lane <code>L</code> of <code>v</code> to that value.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.v128_load8_splat.html\" title=\"fn core::arch::wasm32::v128_load8_splat\">v128_load8_splat</a><sup title=\"unsafe function\">⚠</sup><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Load a single element and splat to all lanes of a v128 vector.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.v128_load16_lane.html\" title=\"fn core::arch::wasm32::v128_load16_lane\">v128_load16_lane</a><sup title=\"unsafe function\">⚠</sup><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Loads a 16-bit value from <code>m</code> and sets lane <code>L</code> of <code>v</code> to that value.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.v128_load16_splat.html\" title=\"fn core::arch::wasm32::v128_load16_splat\">v128_load16_splat</a><sup title=\"unsafe function\">⚠</sup><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Load a single element and splat to all lanes of a v128 vector.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.v128_load32_lane.html\" title=\"fn core::arch::wasm32::v128_load32_lane\">v128_load32_lane</a><sup title=\"unsafe function\">⚠</sup><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Loads a 32-bit value from <code>m</code> and sets lane <code>L</code> of <code>v</code> to that value.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.v128_load32_splat.html\" title=\"fn core::arch::wasm32::v128_load32_splat\">v128_load32_splat</a><sup title=\"unsafe function\">⚠</sup><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Load a single element and splat to all lanes of a v128 vector.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.v128_load32_zero.html\" title=\"fn core::arch::wasm32::v128_load32_zero\">v128_load32_zero</a><sup title=\"unsafe function\">⚠</sup><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Load a 32-bit element into the low bits of the vector and sets all other\nbits to zero.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.v128_load64_lane.html\" title=\"fn core::arch::wasm32::v128_load64_lane\">v128_load64_lane</a><sup title=\"unsafe function\">⚠</sup><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Loads a 64-bit value from <code>m</code> and sets lane <code>L</code> of <code>v</code> to that value.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.v128_load64_splat.html\" title=\"fn core::arch::wasm32::v128_load64_splat\">v128_load64_splat</a><sup title=\"unsafe function\">⚠</sup><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Load a single element and splat to all lanes of a v128 vector.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.v128_load64_zero.html\" title=\"fn core::arch::wasm32::v128_load64_zero\">v128_load64_zero</a><sup title=\"unsafe function\">⚠</sup><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Load a 64-bit element into the low bits of the vector and sets all other\nbits to zero.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.v128_not.html\" title=\"fn core::arch::wasm32::v128_not\">v128_not</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Flips each bit of the 128-bit input vector.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.v128_or.html\" title=\"fn core::arch::wasm32::v128_or\">v128_or</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Performs a bitwise or of the two input 128-bit vectors, returning the\nresulting vector.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.v128_store.html\" title=\"fn core::arch::wasm32::v128_store\">v128_store</a><sup title=\"unsafe function\">⚠</sup><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Stores a <code>v128</code> vector to the given heap address.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.v128_store8_lane.html\" title=\"fn core::arch::wasm32::v128_store8_lane\">v128_store8_lane</a><sup title=\"unsafe function\">⚠</sup><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Stores the 8-bit value from lane <code>L</code> of <code>v</code> into <code>m</code></div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.v128_store16_lane.html\" title=\"fn core::arch::wasm32::v128_store16_lane\">v128_store16_lane</a><sup title=\"unsafe function\">⚠</sup><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Stores the 16-bit value from lane <code>L</code> of <code>v</code> into <code>m</code></div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.v128_store32_lane.html\" title=\"fn core::arch::wasm32::v128_store32_lane\">v128_store32_lane</a><sup title=\"unsafe function\">⚠</sup><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Stores the 32-bit value from lane <code>L</code> of <code>v</code> into <code>m</code></div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.v128_store64_lane.html\" title=\"fn core::arch::wasm32::v128_store64_lane\">v128_store64_lane</a><sup title=\"unsafe function\">⚠</sup><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Stores the 64-bit value from lane <code>L</code> of <code>v</code> into <code>m</code></div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.v128_xor.html\" title=\"fn core::arch::wasm32::v128_xor\">v128_xor</a><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `simd128` only\"><code>target_family=\"wasm\"</code> and <code>simd128</code></span></div><div class=\"desc docblock-short\">Performs a bitwise xor of the two input 128-bit vectors, returning the\nresulting vector.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.f32x4_relaxed_madd.html\" title=\"fn core::arch::wasm32::f32x4_relaxed_madd\">f32x4_relaxed_madd</a><span class=\"stab unstable\" title=\"\">Experimental</span><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `relaxed-simd` only\"><code>target_family=\"wasm\"</code> and <code>relaxed-simd</code></span></div><div class=\"desc docblock-short\">Computes <code>a * b + c</code> with either one rounding or two roundings.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.f32x4_relaxed_max.html\" title=\"fn core::arch::wasm32::f32x4_relaxed_max\">f32x4_relaxed_max</a><span class=\"stab unstable\" title=\"\">Experimental</span><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `relaxed-simd` only\"><code>target_family=\"wasm\"</code> and <code>relaxed-simd</code></span></div><div class=\"desc docblock-short\">A relaxed version of <code>f32x4_max</code> which is either <code>f32x4_max</code> or\n<code>f32x4_pmax</code>.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.f32x4_relaxed_min.html\" title=\"fn core::arch::wasm32::f32x4_relaxed_min\">f32x4_relaxed_min</a><span class=\"stab unstable\" title=\"\">Experimental</span><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `relaxed-simd` only\"><code>target_family=\"wasm\"</code> and <code>relaxed-simd</code></span></div><div class=\"desc docblock-short\">A relaxed version of <code>f32x4_min</code> which is either <code>f32x4_min</code> or\n<code>f32x4_pmin</code>.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.f32x4_relaxed_nmadd.html\" title=\"fn core::arch::wasm32::f32x4_relaxed_nmadd\">f32x4_relaxed_nmadd</a><span class=\"stab unstable\" title=\"\">Experimental</span><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `relaxed-simd` only\"><code>target_family=\"wasm\"</code> and <code>relaxed-simd</code></span></div><div class=\"desc docblock-short\">Computes <code>-a * b + c</code> with either one rounding or two roundings.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.f64x2_relaxed_madd.html\" title=\"fn core::arch::wasm32::f64x2_relaxed_madd\">f64x2_relaxed_madd</a><span class=\"stab unstable\" title=\"\">Experimental</span><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `relaxed-simd` only\"><code>target_family=\"wasm\"</code> and <code>relaxed-simd</code></span></div><div class=\"desc docblock-short\">Computes <code>a * b + c</code> with either one rounding or two roundings.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.f64x2_relaxed_max.html\" title=\"fn core::arch::wasm32::f64x2_relaxed_max\">f64x2_relaxed_max</a><span class=\"stab unstable\" title=\"\">Experimental</span><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `relaxed-simd` only\"><code>target_family=\"wasm\"</code> and <code>relaxed-simd</code></span></div><div class=\"desc docblock-short\">A relaxed version of <code>f64x2_max</code> which is either <code>f64x2_max</code> or\n<code>f64x2_pmax</code>.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.f64x2_relaxed_min.html\" title=\"fn core::arch::wasm32::f64x2_relaxed_min\">f64x2_relaxed_min</a><span class=\"stab unstable\" title=\"\">Experimental</span><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `relaxed-simd` only\"><code>target_family=\"wasm\"</code> and <code>relaxed-simd</code></span></div><div class=\"desc docblock-short\">A relaxed version of <code>f64x2_min</code> which is either <code>f64x2_min</code> or\n<code>f64x2_pmin</code>.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.f64x2_relaxed_nmadd.html\" title=\"fn core::arch::wasm32::f64x2_relaxed_nmadd\">f64x2_relaxed_nmadd</a><span class=\"stab unstable\" title=\"\">Experimental</span><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `relaxed-simd` only\"><code>target_family=\"wasm\"</code> and <code>relaxed-simd</code></span></div><div class=\"desc docblock-short\">Computes <code>-a * b + c</code> with either one rounding or two roundings.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i8x16_relaxed_laneselect.html\" title=\"fn core::arch::wasm32::i8x16_relaxed_laneselect\">i8x16_relaxed_laneselect</a><span class=\"stab unstable\" title=\"\">Experimental</span><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `relaxed-simd` only\"><code>target_family=\"wasm\"</code> and <code>relaxed-simd</code></span></div><div class=\"desc docblock-short\">A relaxed version of <code>v128_bitselect</code> where this either behaves the same as\n<code>v128_bitselect</code> or the high bit of each lane <code>m</code> is inspected and the\ncorresponding lane of <code>a</code> is chosen if the bit is 1 or the lane of <code>b</code> is\nchosen if it’s zero.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i8x16_relaxed_swizzle.html\" title=\"fn core::arch::wasm32::i8x16_relaxed_swizzle\">i8x16_relaxed_swizzle</a><span class=\"stab unstable\" title=\"\">Experimental</span><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `relaxed-simd` only\"><code>target_family=\"wasm\"</code> and <code>relaxed-simd</code></span></div><div class=\"desc docblock-short\">A relaxed version of <code>i8x16_swizzle(a, s)</code> which selects lanes from <code>a</code>\nusing indices in <code>s</code>.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i16x8_relaxed_dot_i8x16_i7x16.html\" title=\"fn core::arch::wasm32::i16x8_relaxed_dot_i8x16_i7x16\">i16x8_relaxed_dot_i8x16_i7x16</a><span class=\"stab unstable\" title=\"\">Experimental</span><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `relaxed-simd` only\"><code>target_family=\"wasm\"</code> and <code>relaxed-simd</code></span></div><div class=\"desc docblock-short\">A relaxed dot-product instruction.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i16x8_relaxed_laneselect.html\" title=\"fn core::arch::wasm32::i16x8_relaxed_laneselect\">i16x8_relaxed_laneselect</a><span class=\"stab unstable\" title=\"\">Experimental</span><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `relaxed-simd` only\"><code>target_family=\"wasm\"</code> and <code>relaxed-simd</code></span></div><div class=\"desc docblock-short\">A relaxed version of <code>v128_bitselect</code> where this either behaves the same as\n<code>v128_bitselect</code> or the high bit of each lane <code>m</code> is inspected and the\ncorresponding lane of <code>a</code> is chosen if the bit is 1 or the lane of <code>b</code> is\nchosen if it’s zero.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i16x8_relaxed_q15mulr.html\" title=\"fn core::arch::wasm32::i16x8_relaxed_q15mulr\">i16x8_relaxed_q15mulr</a><span class=\"stab unstable\" title=\"\">Experimental</span><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `relaxed-simd` only\"><code>target_family=\"wasm\"</code> and <code>relaxed-simd</code></span></div><div class=\"desc docblock-short\">A relaxed version of <code>i16x8_relaxed_q15mulr</code> where if both lanes are\n<code>i16::MIN</code> then the result is either <code>i16::MIN</code> or <code>i16::MAX</code>.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i32x4_relaxed_dot_i8x16_i7x16_add.html\" title=\"fn core::arch::wasm32::i32x4_relaxed_dot_i8x16_i7x16_add\">i32x4_relaxed_dot_i8x16_i7x16_add</a><span class=\"stab unstable\" title=\"\">Experimental</span><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `relaxed-simd` only\"><code>target_family=\"wasm\"</code> and <code>relaxed-simd</code></span></div><div class=\"desc docblock-short\">Similar to <a href=\"fn.i16x8_relaxed_dot_i8x16_i7x16.html\" title=\"fn core::arch::wasm32::i16x8_relaxed_dot_i8x16_i7x16\"><code>i16x8_relaxed_dot_i8x16_i7x16</code></a> except that the intermediate\n<code>i16x8</code> result is fed into <code>i32x4_extadd_pairwise_i16x8</code> followed by\n<code>i32x4_add</code> to add the value <code>c</code> to the result.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i32x4_relaxed_laneselect.html\" title=\"fn core::arch::wasm32::i32x4_relaxed_laneselect\">i32x4_relaxed_laneselect</a><span class=\"stab unstable\" title=\"\">Experimental</span><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `relaxed-simd` only\"><code>target_family=\"wasm\"</code> and <code>relaxed-simd</code></span></div><div class=\"desc docblock-short\">A relaxed version of <code>v128_bitselect</code> where this either behaves the same as\n<code>v128_bitselect</code> or the high bit of each lane <code>m</code> is inspected and the\ncorresponding lane of <code>a</code> is chosen if the bit is 1 or the lane of <code>b</code> is\nchosen if it’s zero.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i32x4_relaxed_trunc_f32x4.html\" title=\"fn core::arch::wasm32::i32x4_relaxed_trunc_f32x4\">i32x4_relaxed_trunc_f32x4</a><span class=\"stab unstable\" title=\"\">Experimental</span><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `relaxed-simd` only\"><code>target_family=\"wasm\"</code> and <code>relaxed-simd</code></span></div><div class=\"desc docblock-short\">A relaxed version of <code>i32x4_trunc_sat_f32x4(a)</code> converts the <code>f32</code> lanes\nof <code>a</code> to signed 32-bit integers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i32x4_relaxed_trunc_f64x2_zero.html\" title=\"fn core::arch::wasm32::i32x4_relaxed_trunc_f64x2_zero\">i32x4_relaxed_trunc_f64x2_zero</a><span class=\"stab unstable\" title=\"\">Experimental</span><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `relaxed-simd` only\"><code>target_family=\"wasm\"</code> and <code>relaxed-simd</code></span></div><div class=\"desc docblock-short\">A relaxed version of <code>i32x4_trunc_sat_f64x2_zero(a)</code> converts the <code>f64</code>\nlanes of <code>a</code> to signed 32-bit integers and the upper two lanes are zero.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.i64x2_relaxed_laneselect.html\" title=\"fn core::arch::wasm32::i64x2_relaxed_laneselect\">i64x2_relaxed_laneselect</a><span class=\"stab unstable\" title=\"\">Experimental</span><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `relaxed-simd` only\"><code>target_family=\"wasm\"</code> and <code>relaxed-simd</code></span></div><div class=\"desc docblock-short\">A relaxed version of <code>v128_bitselect</code> where this either behaves the same as\n<code>v128_bitselect</code> or the high bit of each lane <code>m</code> is inspected and the\ncorresponding lane of <code>a</code> is chosen if the bit is 1 or the lane of <code>b</code> is\nchosen if it’s zero.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.memory_atomic_notify.html\" title=\"fn core::arch::wasm32::memory_atomic_notify\">memory_atomic_notify</a><sup title=\"unsafe function\">⚠</sup><span class=\"stab unstable\" title=\"\">Experimental</span><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `atomics` only\"><code>target_family=\"wasm\"</code> and <code>atomics</code></span></div><div class=\"desc docblock-short\">Corresponding intrinsic to wasm’s <a href=\"https://webassembly.github.io/threads/core/syntax/instructions.html#syntax-instr-atomic-memory\"><code>memory.atomic.notify</code> instruction</a></div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.memory_atomic_wait32.html\" title=\"fn core::arch::wasm32::memory_atomic_wait32\">memory_atomic_wait32</a><sup title=\"unsafe function\">⚠</sup><span class=\"stab unstable\" title=\"\">Experimental</span><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `atomics` only\"><code>target_family=\"wasm\"</code> and <code>atomics</code></span></div><div class=\"desc docblock-short\">Corresponding intrinsic to wasm’s <a href=\"https://webassembly.github.io/threads/core/syntax/instructions.html#syntax-instr-atomic-memory\"><code>memory.atomic.wait32</code> instruction</a></div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.memory_atomic_wait64.html\" title=\"fn core::arch::wasm32::memory_atomic_wait64\">memory_atomic_wait64</a><sup title=\"unsafe function\">⚠</sup><span class=\"stab unstable\" title=\"\">Experimental</span><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `atomics` only\"><code>target_family=\"wasm\"</code> and <code>atomics</code></span></div><div class=\"desc docblock-short\">Corresponding intrinsic to wasm’s <a href=\"https://webassembly.github.io/threads/core/syntax/instructions.html#syntax-instr-atomic-memory\"><code>memory.atomic.wait64</code> instruction</a></div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.throw.html\" title=\"fn core::arch::wasm32::throw\">throw</a><sup title=\"unsafe function\">⚠</sup><span class=\"stab unstable\" title=\"\">Experimental</span><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` only\"><code>target_family=\"wasm\"</code></span></div><div class=\"desc docblock-short\">Generates the <a href=\"https://webassembly.github.io/exception-handling/core/syntax/instructions.html#syntax-instr-control\"><code>throw</code></a> instruction from the <a href=\"https://github.com/WebAssembly/exception-handling\">exception-handling proposal</a> for WASM.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u32x4_relaxed_trunc_f32x4.html\" title=\"fn core::arch::wasm32::u32x4_relaxed_trunc_f32x4\">u32x4_relaxed_trunc_f32x4</a><span class=\"stab unstable\" title=\"\">Experimental</span><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `relaxed-simd` only\"><code>target_family=\"wasm\"</code> and <code>relaxed-simd</code></span></div><div class=\"desc docblock-short\">A relaxed version of <code>u32x4_trunc_sat_f32x4(a)</code> converts the <code>f32</code> lanes\nof <code>a</code> to unsigned 32-bit integers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.u32x4_relaxed_trunc_f64x2_zero.html\" title=\"fn core::arch::wasm32::u32x4_relaxed_trunc_f64x2_zero\">u32x4_relaxed_trunc_f64x2_zero</a><span class=\"stab unstable\" title=\"\">Experimental</span><span class=\"stab portability\" title=\"Available on `target_family=&quot;wasm&quot;` and target feature `relaxed-simd` only\"><code>target_family=\"wasm\"</code> and <code>relaxed-simd</code></span></div><div class=\"desc docblock-short\">A relaxed version of <code>u32x4_trunc_sat_f64x2_zero(a)</code> converts the <code>f64</code>\nlanes of <code>a</code> to unsigned 32-bit integers and the upper two lanes are zero.</div></li></ul></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:22:45.853Z"
}