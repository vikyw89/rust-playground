{
	"title": "Control Flow - The Rust Programming Language",
	"url": "https://doc.rust-lang.org/stable/book/ch03-05-control-flow.html",
	"markdown": "# Control Flow - The Rust Programming Language\n\nThe ability to run some code depending on whether a condition is `true` and to run some code repeatedly while a condition is `true` are basic building blocks in most programming languages. The most common constructs that let you control the flow of execution of Rust code are `if` expressions and loops.\n\n### [`if` Expressions](#if-expressions)\n\nAn `if` expression allows you to branch your code depending on conditions. You provide a condition and then state, “If this condition is met, run this block of code. If the condition is not met, do not run this block of code.”\n\nCreate a new project called _branches_ in your _projects_ directory to explore the `if` expression. In the _src/main.rs_ file, input the following:\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let number = 3;\n\n    if number < 5 {\n        println!(\"condition was true\");\n    } else {\n        println!(\"condition was false\");\n    }\n}\n```\n\nAll `if` expressions start with the keyword `if`, followed by a condition. In this case, the condition checks whether or not the variable `number` has a value less than 5. We place the block of code to execute if the condition is `true` immediately after the condition inside curly brackets. Blocks of code associated with the conditions in `if` expressions are sometimes called _arms_, just like the arms in `match` expressions that we discussed in the [“Comparing the Guess to the Secret Number”](about:blank/ch02-00-guessing-game-tutorial.html#comparing-the-guess-to-the-secret-number) section of Chapter 2.\n\nOptionally, we can also include an `else` expression, which we chose to do here, to give the program an alternative block of code to execute should the condition evaluate to `false`. If you don’t provide an `else` expression and the condition is `false`, the program will just skip the `if` block and move on to the next bit of code.\n\nTry running this code; you should see the following output:\n\n```console\n$ cargo run\n   Compiling branches v0.1.0 (file:///projects/branches)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.31s\n     Running `target/debug/branches`\ncondition was true\n\n```\n\nLet’s try changing the value of `number` to a value that makes the condition `false` to see what happens:\n\n```rust\nfn main() {\n    let number = 7;\n\n    if number < 5 {\n        println!(\"condition was true\");\n    } else {\n        println!(\"condition was false\");\n    }\n}\n```\n\nRun the program again, and look at the output:\n\n```console\n$ cargo run\n   Compiling branches v0.1.0 (file:///projects/branches)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.31s\n     Running `target/debug/branches`\ncondition was false\n\n```\n\nIt’s also worth noting that the condition in this code _must_ be a `bool`. If the condition isn’t a `bool`, we’ll get an error. For example, try running the following code:\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let number = 3;\n\n    if number {\n        println!(\"number was three\");\n    }\n}\n```\n\nThe `if` condition evaluates to a value of `3` this time, and Rust throws an error:\n\n```console\n$ cargo run\n   Compiling branches v0.1.0 (file:///projects/branches)\nerror[E0308]: mismatched types\n --> src/main.rs:4:8\n  |\n4 |     if number {\n  |        ^^^^^^ expected `bool`, found integer\n\nFor more information about this error, try `rustc --explain E0308`.\nerror: could not compile `branches` (bin \"branches\") due to 1 previous error\n\n```\n\nThe error indicates that Rust expected a `bool` but got an integer. Unlike languages such as Ruby and JavaScript, Rust will not automatically try to convert non-Boolean types to a Boolean. You must be explicit and always provide `if` with a Boolean as its condition. If we want the `if` code block to run only when a number is not equal to `0`, for example, we can change the `if` expression to the following:\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let number = 3;\n\n    if number != 0 {\n        println!(\"number was something other than zero\");\n    }\n}\n```\n\nRunning this code will print `number was something other than zero`.\n\n#### [Handling Multiple Conditions with `else if`](#handling-multiple-conditions-with-else-if)\n\nYou can use multiple conditions by combining `if` and `else` in an `else if` expression. For example:\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let number = 6;\n\n    if number % 4 == 0 {\n        println!(\"number is divisible by 4\");\n    } else if number % 3 == 0 {\n        println!(\"number is divisible by 3\");\n    } else if number % 2 == 0 {\n        println!(\"number is divisible by 2\");\n    } else {\n        println!(\"number is not divisible by 4, 3, or 2\");\n    }\n}\n```\n\nThis program has four possible paths it can take. After running it, you should see the following output:\n\n```console\n$ cargo run\n   Compiling branches v0.1.0 (file:///projects/branches)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.31s\n     Running `target/debug/branches`\nnumber is divisible by 3\n\n```\n\nWhen this program executes, it checks each `if` expression in turn and executes the first body for which the condition evaluates to `true`. Note that even though 6 is divisible by 2, we don’t see the output `number is divisible by 2`, nor do we see the `number is not divisible by 4, 3, or 2` text from the `else` block. That’s because Rust only executes the block for the first `true` condition, and once it finds one, it doesn’t even check the rest.\n\nUsing too many `else if` expressions can clutter your code, so if you have more than one, you might want to refactor your code. Chapter 6 describes a powerful Rust branching construct called `match` for these cases.\n\n#### [Using `if` in a `let` Statement](#using-if-in-a-let-statement)\n\nBecause `if` is an expression, we can use it on the right side of a `let` statement to assign the outcome to a variable, as in Listing 3-2.\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let condition = true;\n    let number = if condition { 5 } else { 6 };\n\n    println!(\"The value of number is: {number}\");\n}\n```\n\nListing 3-2: Assigning the result of an `if` expression to a variable\n\nThe `number` variable will be bound to a value based on the outcome of the `if` expression. Run this code to see what happens:\n\n```console\n$ cargo run\n   Compiling branches v0.1.0 (file:///projects/branches)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.30s\n     Running `target/debug/branches`\nThe value of number is: 5\n\n```\n\nRemember that blocks of code evaluate to the last expression in them, and numbers by themselves are also expressions. In this case, the value of the whole `if` expression depends on which block of code executes. This means the values that have the potential to be results from each arm of the `if` must be the same type; in Listing 3-2, the results of both the `if` arm and the `else` arm were `i32` integers. If the types are mismatched, as in the following example, we’ll get an error:\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let condition = true;\n\n    let number = if condition { 5 } else { \"six\" };\n\n    println!(\"The value of number is: {number}\");\n}\n```\n\nWhen we try to compile this code, we’ll get an error. The `if` and `else` arms have value types that are incompatible, and Rust indicates exactly where to find the problem in the program:\n\n```console\n$ cargo run\n   Compiling branches v0.1.0 (file:///projects/branches)\nerror[E0308]: `if` and `else` have incompatible types\n --> src/main.rs:4:44\n  |\n4 |     let number = if condition { 5 } else { \"six\" };\n  |                                 -          ^^^^^ expected integer, found `&str`\n  |                                 |\n  |                                 expected because of this\n\nFor more information about this error, try `rustc --explain E0308`.\nerror: could not compile `branches` (bin \"branches\") due to 1 previous error\n\n```\n\nThe expression in the `if` block evaluates to an integer, and the expression in the `else` block evaluates to a string. This won’t work because variables must have a single type, and Rust needs to know at compile time what type the `number` variable is, definitively. Knowing the type of `number` lets the compiler verify the type is valid everywhere we use `number`. Rust wouldn’t be able to do that if the type of `number` was only determined at runtime; the compiler would be more complex and would make fewer guarantees about the code if it had to keep track of multiple hypothetical types for any variable.\n\n### [Repetition with Loops](#repetition-with-loops)\n\nIt’s often useful to execute a block of code more than once. For this task, Rust provides several _loops_, which will run through the code inside the loop body to the end and then start immediately back at the beginning. To experiment with loops, let’s make a new project called _loops_.\n\nRust has three kinds of loops: `loop`, `while`, and `for`. Let’s try each one.\n\n#### [Repeating Code with `loop`](#repeating-code-with-loop)\n\nThe `loop` keyword tells Rust to execute a block of code over and over again forever or until you explicitly tell it to stop.\n\nAs an example, change the _src/main.rs_ file in your _loops_ directory to look like this:\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    loop {\n        println!(\"again!\");\n    }\n}\n```\n\nWhen we run this program, we’ll see `again!` printed over and over continuously until we stop the program manually. Most terminals support the keyboard shortcut ctrl\\-c to interrupt a program that is stuck in a continual loop. Give it a try:\n\n```console\n$ cargo run\n   Compiling loops v0.1.0 (file:///projects/loops)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.29s\n     Running `target/debug/loops`\nagain!\nagain!\nagain!\nagain!\n^Cagain!\n\n```\n\nThe symbol `^C` represents where you pressed ctrl\\-c. You may or may not see the word `again!` printed after the `^C`, depending on where the code was in the loop when it received the interrupt signal.\n\nFortunately, Rust also provides a way to break out of a loop using code. You can place the `break` keyword within the loop to tell the program when to stop executing the loop. Recall that we did this in the guessing game in the [“Quitting After a Correct Guess”](about:blank/ch02-00-guessing-game-tutorial.html#quitting-after-a-correct-guess) section of Chapter 2 to exit the program when the user won the game by guessing the correct number.\n\nWe also used `continue` in the guessing game, which in a loop tells the program to skip over any remaining code in this iteration of the loop and go to the next iteration.\n\n#### [Returning Values from Loops](#returning-values-from-loops)\n\nOne of the uses of a `loop` is to retry an operation you know might fail, such as checking whether a thread has completed its job. You might also need to pass the result of that operation out of the loop to the rest of your code. To do this, you can add the value you want returned after the `break` expression you use to stop the loop; that value will be returned out of the loop so you can use it, as shown here:\n\n```rust\nfn main() {\n    let mut counter = 0;\n\n    let result = loop {\n        counter += 1;\n\n        if counter == 10 {\n            break counter * 2;\n        }\n    };\n\n    println!(\"The result is {result}\");\n}\n```\n\nBefore the loop, we declare a variable named `counter` and initialize it to `0`. Then we declare a variable named `result` to hold the value returned from the loop. On every iteration of the loop, we add `1` to the `counter` variable, and then check whether the `counter` is equal to `10`. When it is, we use the `break` keyword with the value `counter * 2`. After the loop, we use a semicolon to end the statement that assigns the value to `result`. Finally, we print the value in `result`, which in this case is `20`.\n\nYou can also `return` from inside a loop. While `break` only exits the current loop, `return` always exits the current function.\n\n#### [Loop Labels to Disambiguate Between Multiple Loops](#loop-labels-to-disambiguate-between-multiple-loops)\n\nIf you have loops within loops, `break` and `continue` apply to the innermost loop at that point. You can optionally specify a _loop label_ on a loop that you can then use with `break` or `continue` to specify that those keywords apply to the labeled loop instead of the innermost loop. Loop labels must begin with a single quote. Here’s an example with two nested loops:\n\n```rust\nfn main() {\n    let mut count = 0;\n    'counting_up: loop {\n        println!(\"count = {count}\");\n        let mut remaining = 10;\n\n        loop {\n            println!(\"remaining = {remaining}\");\n            if remaining == 9 {\n                break;\n            }\n            if count == 2 {\n                break 'counting_up;\n            }\n            remaining -= 1;\n        }\n\n        count += 1;\n    }\n    println!(\"End count = {count}\");\n}\n```\n\nThe outer loop has the label `'counting_up`, and it will count up from 0 to 2. The inner loop without a label counts down from 10 to 9. The first `break` that doesn’t specify a label will exit the inner loop only. The `break 'counting_up;` statement will exit the outer loop. This code prints:\n\n```console\n$ cargo run\n   Compiling loops v0.1.0 (file:///projects/loops)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.58s\n     Running `target/debug/loops`\ncount = 0\nremaining = 10\nremaining = 9\ncount = 1\nremaining = 10\nremaining = 9\ncount = 2\nremaining = 10\nEnd count = 2\n\n```\n\n#### [Conditional Loops with `while`](#conditional-loops-with-while)\n\nA program will often need to evaluate a condition within a loop. While the condition is `true`, the loop runs. When the condition ceases to be `true`, the program calls `break`, stopping the loop. It’s possible to implement behavior like this using a combination of `loop`, `if`, `else`, and `break`; you could try that now in a program, if you’d like. However, this pattern is so common that Rust has a built-in language construct for it, called a `while` loop. In Listing 3-3, we use `while` to loop the program three times, counting down each time, and then, after the loop, print a message and exit.\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let mut number = 3;\n\n    while number != 0 {\n        println!(\"{number}!\");\n\n        number -= 1;\n    }\n\n    println!(\"LIFTOFF!!!\");\n}\n```\n\nListing 3-3: Using a `while` loop to run code while a condition holds true\n\nThis construct eliminates a lot of nesting that would be necessary if you used `loop`, `if`, `else`, and `break`, and it’s clearer. While a condition evaluates to `true`, the code runs; otherwise, it exits the loop.\n\n#### [Looping Through a Collection with `for`](#looping-through-a-collection-with-for)\n\nYou can also use the `while` construct to loop over the elements of a collection, such as an array. For example, the loop in Listing 3-4 prints each element in the array `a`.\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let a = [10, 20, 30, 40, 50];\n    let mut index = 0;\n\n    while index < 5 {\n        println!(\"the value is: {}\", a[index]);\n\n        index += 1;\n    }\n}\n```\n\nListing 3-4: Looping through each element of a collection using a `while` loop\n\nHere, the code counts up through the elements in the array. It starts at index `0`, and then loops until it reaches the final index in the array (that is, when `index < 5` is no longer `true`). Running this code will print every element in the array:\n\n```console\n$ cargo run\n   Compiling loops v0.1.0 (file:///projects/loops)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.32s\n     Running `target/debug/loops`\nthe value is: 10\nthe value is: 20\nthe value is: 30\nthe value is: 40\nthe value is: 50\n\n```\n\nAll five array values appear in the terminal, as expected. Even though `index` will reach a value of `5` at some point, the loop stops executing before trying to fetch a sixth value from the array.\n\nHowever, this approach is error prone; we could cause the program to panic if the index value or test condition is incorrect. For example, if you changed the definition of the `a` array to have four elements but forgot to update the condition to `while index < 4`, the code would panic. It’s also slow, because the compiler adds runtime code to perform the conditional check of whether the index is within the bounds of the array on every iteration through the loop.\n\nAs a more concise alternative, you can use a `for` loop and execute some code for each item in a collection. A `for` loop looks like the code in Listing 3-5.\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let a = [10, 20, 30, 40, 50];\n\n    for element in a {\n        println!(\"the value is: {element}\");\n    }\n}\n```\n\nListing 3-5: Looping through each element of a collection using a `for` loop\n\nWhen we run this code, we’ll see the same output as in Listing 3-4. More importantly, we’ve now increased the safety of the code and eliminated the chance of bugs that might result from going beyond the end of the array or not going far enough and missing some items.\n\nUsing the `for` loop, you wouldn’t need to remember to change any other code if you changed the number of values in the array, as you would with the method used in Listing 3-4.\n\nThe safety and conciseness of `for` loops make them the most commonly used loop construct in Rust. Even in situations in which you want to run some code a certain number of times, as in the countdown example that used a `while` loop in Listing 3-3, most Rustaceans would use a `for` loop. The way to do that would be to use a `Range`, provided by the standard library, which generates all numbers in sequence starting from one number and ending before another number.\n\nHere’s what the countdown would look like using a `for` loop and another method we’ve not yet talked about, `rev`, to reverse the range:\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    for number in (1..4).rev() {\n        println!(\"{number}!\");\n    }\n    println!(\"LIFTOFF!!!\");\n}\n```\n\nThis code is a bit nicer, isn’t it?\n\n## [Summary](#summary)\n\nYou made it! This was a sizable chapter: you learned about variables, scalar and compound data types, functions, comments, `if` expressions, and loops! To practice with the concepts discussed in this chapter, try building programs to do the following:\n\n-   Convert temperatures between Fahrenheit and Celsius.\n-   Generate the _n_th Fibonacci number.\n-   Print the lyrics to the Christmas carol “The Twelve Days of Christmas,” taking advantage of the repetition in the song.\n\nWhen you’re ready to move on, we’ll talk about a concept in Rust that _doesn’t_ commonly exist in other programming languages: ownership.",
	"html": "<!DOCTYPE html><html lang=\"en\" class=\"light\" dir=\"ltr\"><head>\n        <!-- Book generated using mdBook -->\n        <meta charset=\"UTF-8\">\n        <title>Control Flow - The Rust Programming Language</title>\n\n\n        <!-- Custom HTML head -->\n        \n        <meta name=\"description\" content=\"\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <meta name=\"theme-color\" content=\"rgb(255, 255, 255)\">\n\n        <link rel=\"icon\" href=\"favicon.svg\">\n        <link rel=\"shortcut icon\" href=\"favicon.png\">\n        <link rel=\"stylesheet\" href=\"css/variables.css\">\n        <link rel=\"stylesheet\" href=\"css/general.css\">\n        <link rel=\"stylesheet\" href=\"css/chrome.css\">\n        <link rel=\"stylesheet\" href=\"css/print.css\" media=\"print\">\n\n        <!-- Fonts -->\n        <link rel=\"stylesheet\" href=\"FontAwesome/css/font-awesome.css\">\n        <link rel=\"stylesheet\" href=\"fonts/fonts.css\">\n\n        <!-- Highlight.js Stylesheets -->\n        <link rel=\"stylesheet\" href=\"highlight.css\">\n        <link rel=\"stylesheet\" href=\"tomorrow-night.css\" disabled=\"\">\n        <link rel=\"stylesheet\" href=\"ayu-highlight.css\" disabled=\"\">\n\n        <!-- Custom theme stylesheets -->\n        <link rel=\"stylesheet\" href=\"ferris.css\">\n        <link rel=\"stylesheet\" href=\"theme/2018-edition.css\">\n        <link rel=\"stylesheet\" href=\"theme/semantic-notes.css\">\n        <link rel=\"stylesheet\" href=\"theme/listing.css\">\n\n    </head>\n    <body class=\"js sidebar-visible\">\n    <div id=\"body-container\">\n        <!-- Provide site root to javascript -->\n        <script>\n            var path_to_root = \"\";\n            var default_theme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"navy\" : \"light\";\n        </script>\n\n        <!-- Work around some values being stored in localStorage wrapped in quotes -->\n        <script>\n            try {\n                var theme = localStorage.getItem('mdbook-theme');\n                var sidebar = localStorage.getItem('mdbook-sidebar');\n\n                if (theme.startsWith('\"') && theme.endsWith('\"')) {\n                    localStorage.setItem('mdbook-theme', theme.slice(1, theme.length - 1));\n                }\n\n                if (sidebar.startsWith('\"') && sidebar.endsWith('\"')) {\n                    localStorage.setItem('mdbook-sidebar', sidebar.slice(1, sidebar.length - 1));\n                }\n            } catch (e) { }\n        </script>\n\n        <!-- Set the theme before any content is loaded, prevents flash -->\n        <script>\n            var theme;\n            try { theme = localStorage.getItem('mdbook-theme'); } catch(e) { }\n            if (theme === null || theme === undefined) { theme = default_theme; }\n            var html = document.querySelector('html');\n            html.classList.remove('light')\n            html.classList.add(theme);\n            var body = document.querySelector('body');\n            body.classList.remove('no-js')\n            body.classList.add('js');\n        </script>\n\n        <input type=\"checkbox\" id=\"sidebar-toggle-anchor\" class=\"hidden\">\n\n        <!-- Hide / unhide sidebar before it is displayed -->\n        <script>\n            var body = document.querySelector('body');\n            var sidebar = null;\n            var sidebar_toggle = document.getElementById(\"sidebar-toggle-anchor\");\n            if (document.body.clientWidth >= 1080) {\n                try { sidebar = localStorage.getItem('mdbook-sidebar'); } catch(e) { }\n                sidebar = sidebar || 'visible';\n            } else {\n                sidebar = 'hidden';\n            }\n            sidebar_toggle.checked = sidebar === 'visible';\n            body.classList.remove('sidebar-visible');\n            body.classList.add(\"sidebar-\" + sidebar);\n        </script>\n\n        <nav id=\"sidebar\" class=\"sidebar\" aria-label=\"Table of contents\" aria-hidden=\"false\">\n            <div class=\"sidebar-scrollbox\">\n                <ol class=\"chapter\"><li class=\"chapter-item expanded affix \"><a href=\"title-page.html\" tabindex=\"0\">The Rust Programming Language</a></li><li class=\"chapter-item expanded affix \"><a href=\"foreword.html\" tabindex=\"0\">Foreword</a></li><li class=\"chapter-item expanded affix \"><a href=\"ch00-00-introduction.html\" tabindex=\"0\">Introduction</a></li><li class=\"chapter-item expanded \"><a href=\"ch01-00-getting-started.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.</strong> Getting Started</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch01-01-installation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.1.</strong> Installation</a></li><li class=\"chapter-item expanded \"><a href=\"ch01-02-hello-world.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.2.</strong> Hello, World!</a></li><li class=\"chapter-item expanded \"><a href=\"ch01-03-hello-cargo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.3.</strong> Hello, Cargo!</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch02-00-guessing-game-tutorial.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.</strong> Programming a Guessing Game</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-00-common-programming-concepts.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.</strong> Common Programming Concepts</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch03-01-variables-and-mutability.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.1.</strong> Variables and Mutability</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-02-data-types.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.2.</strong> Data Types</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-03-how-functions-work.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.3.</strong> Functions</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-04-comments.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.4.</strong> Comments</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-05-control-flow.html\" class=\"active\" tabindex=\"0\"><strong aria-hidden=\"true\">3.5.</strong> Control Flow</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch04-00-understanding-ownership.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.</strong> Understanding Ownership</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch04-01-what-is-ownership.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.</strong> What is Ownership?</a></li><li class=\"chapter-item expanded \"><a href=\"ch04-02-references-and-borrowing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.</strong> References and Borrowing</a></li><li class=\"chapter-item expanded \"><a href=\"ch04-03-slices.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.</strong> The Slice Type</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch05-00-structs.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.</strong> Using Structs to Structure Related Data</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch05-01-defining-structs.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.1.</strong> Defining and Instantiating Structs</a></li><li class=\"chapter-item expanded \"><a href=\"ch05-02-example-structs.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.2.</strong> An Example Program Using Structs</a></li><li class=\"chapter-item expanded \"><a href=\"ch05-03-method-syntax.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.3.</strong> Method Syntax</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch06-00-enums.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.</strong> Enums and Pattern Matching</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch06-01-defining-an-enum.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.1.</strong> Defining an Enum</a></li><li class=\"chapter-item expanded \"><a href=\"ch06-02-match.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.2.</strong> The match Control Flow Construct</a></li><li class=\"chapter-item expanded \"><a href=\"ch06-03-if-let.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.3.</strong> Concise Control Flow with if let</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch07-00-managing-growing-projects-with-packages-crates-and-modules.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.</strong> Managing Growing Projects with Packages, Crates, and Modules</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch07-01-packages-and-crates.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.1.</strong> Packages and Crates</a></li><li class=\"chapter-item expanded \"><a href=\"ch07-02-defining-modules-to-control-scope-and-privacy.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.2.</strong> Defining Modules to Control Scope and Privacy</a></li><li class=\"chapter-item expanded \"><a href=\"ch07-03-paths-for-referring-to-an-item-in-the-module-tree.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.3.</strong> Paths for Referring to an Item in the Module Tree</a></li><li class=\"chapter-item expanded \"><a href=\"ch07-04-bringing-paths-into-scope-with-the-use-keyword.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.4.</strong> Bringing Paths Into Scope with the use Keyword</a></li><li class=\"chapter-item expanded \"><a href=\"ch07-05-separating-modules-into-different-files.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.5.</strong> Separating Modules into Different Files</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch08-00-common-collections.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.</strong> Common Collections</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch08-01-vectors.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.1.</strong> Storing Lists of Values with Vectors</a></li><li class=\"chapter-item expanded \"><a href=\"ch08-02-strings.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.</strong> Storing UTF-8 Encoded Text with Strings</a></li><li class=\"chapter-item expanded \"><a href=\"ch08-03-hash-maps.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.3.</strong> Storing Keys with Associated Values in Hash Maps</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch09-00-error-handling.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.</strong> Error Handling</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch09-01-unrecoverable-errors-with-panic.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.1.</strong> Unrecoverable Errors with panic!</a></li><li class=\"chapter-item expanded \"><a href=\"ch09-02-recoverable-errors-with-result.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.2.</strong> Recoverable Errors with Result</a></li><li class=\"chapter-item expanded \"><a href=\"ch09-03-to-panic-or-not-to-panic.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.3.</strong> To panic! or Not to panic!</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch10-00-generics.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.</strong> Generic Types, Traits, and Lifetimes</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch10-01-syntax.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.</strong> Generic Data Types</a></li><li class=\"chapter-item expanded \"><a href=\"ch10-02-traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.2.</strong> Traits: Defining Shared Behavior</a></li><li class=\"chapter-item expanded \"><a href=\"ch10-03-lifetime-syntax.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.3.</strong> Validating References with Lifetimes</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch11-00-testing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.</strong> Writing Automated Tests</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch11-01-writing-tests.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.1.</strong> How to Write Tests</a></li><li class=\"chapter-item expanded \"><a href=\"ch11-02-running-tests.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.2.</strong> Controlling How Tests Are Run</a></li><li class=\"chapter-item expanded \"><a href=\"ch11-03-test-organization.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.3.</strong> Test Organization</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch12-00-an-io-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.</strong> An I/O Project: Building a Command Line Program</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch12-01-accepting-command-line-arguments.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.1.</strong> Accepting Command Line Arguments</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-02-reading-a-file.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.2.</strong> Reading a File</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-03-improving-error-handling-and-modularity.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.3.</strong> Refactoring to Improve Modularity and Error Handling</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-04-testing-the-librarys-functionality.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.4.</strong> Developing the Library’s Functionality with Test Driven Development</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-05-working-with-environment-variables.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.5.</strong> Working with Environment Variables</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-06-writing-to-stderr-instead-of-stdout.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.6.</strong> Writing Error Messages to Standard Error Instead of Standard Output</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch13-00-functional-features.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.</strong> Functional Language Features: Iterators and Closures</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch13-01-closures.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.1.</strong> Closures: Anonymous Functions that Capture Their Environment</a></li><li class=\"chapter-item expanded \"><a href=\"ch13-02-iterators.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.2.</strong> Processing a Series of Items with Iterators</a></li><li class=\"chapter-item expanded \"><a href=\"ch13-03-improving-our-io-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.3.</strong> Improving Our I/O Project</a></li><li class=\"chapter-item expanded \"><a href=\"ch13-04-performance.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.4.</strong> Comparing Performance: Loops vs. Iterators</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch14-00-more-about-cargo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.</strong> More about Cargo and Crates.io</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch14-01-release-profiles.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.1.</strong> Customizing Builds with Release Profiles</a></li><li class=\"chapter-item expanded \"><a href=\"ch14-02-publishing-to-crates-io.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.2.</strong> Publishing a Crate to Crates.io</a></li><li class=\"chapter-item expanded \"><a href=\"ch14-03-cargo-workspaces.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.3.</strong> Cargo Workspaces</a></li><li class=\"chapter-item expanded \"><a href=\"ch14-04-installing-binaries.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.4.</strong> Installing Binaries from Crates.io with cargo install</a></li><li class=\"chapter-item expanded \"><a href=\"ch14-05-extending-cargo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.5.</strong> Extending Cargo with Custom Commands</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch15-00-smart-pointers.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.</strong> Smart Pointers</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch15-01-box.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.1.</strong> Using Box&lt;T&gt; to Point to Data on the Heap</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-02-deref.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.2.</strong> Treating Smart Pointers Like Regular References with the Deref Trait</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-03-drop.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.3.</strong> Running Code on Cleanup with the Drop Trait</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-04-rc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.4.</strong> Rc&lt;T&gt;, the Reference Counted Smart Pointer</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-05-interior-mutability.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.5.</strong> RefCell&lt;T&gt; and the Interior Mutability Pattern</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-06-reference-cycles.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.6.</strong> Reference Cycles Can Leak Memory</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch16-00-concurrency.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.</strong> Fearless Concurrency</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch16-01-threads.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.1.</strong> Using Threads to Run Code Simultaneously</a></li><li class=\"chapter-item expanded \"><a href=\"ch16-02-message-passing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.2.</strong> Using Message Passing to Transfer Data Between Threads</a></li><li class=\"chapter-item expanded \"><a href=\"ch16-03-shared-state.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.3.</strong> Shared-State Concurrency</a></li><li class=\"chapter-item expanded \"><a href=\"ch16-04-extensible-concurrency-sync-and-send.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.4.</strong> Extensible Concurrency with the Sync and Send Traits</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch17-00-oop.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.</strong> Object Oriented Programming Features of Rust</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch17-01-what-is-oo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.1.</strong> Characteristics of Object-Oriented Languages</a></li><li class=\"chapter-item expanded \"><a href=\"ch17-02-trait-objects.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.2.</strong> Using Trait Objects That Allow for Values of Different Types</a></li><li class=\"chapter-item expanded \"><a href=\"ch17-03-oo-design-patterns.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.3.</strong> Implementing an Object-Oriented Design Pattern</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch18-00-patterns.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.</strong> Patterns and Matching</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch18-01-all-the-places-for-patterns.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.1.</strong> All the Places Patterns Can Be Used</a></li><li class=\"chapter-item expanded \"><a href=\"ch18-02-refutability.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.2.</strong> Refutability: Whether a Pattern Might Fail to Match</a></li><li class=\"chapter-item expanded \"><a href=\"ch18-03-pattern-syntax.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.3.</strong> Pattern Syntax</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch19-00-advanced-features.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.</strong> Advanced Features</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch19-01-unsafe-rust.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.1.</strong> Unsafe Rust</a></li><li class=\"chapter-item expanded \"><a href=\"ch19-03-advanced-traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.2.</strong> Advanced Traits</a></li><li class=\"chapter-item expanded \"><a href=\"ch19-04-advanced-types.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.3.</strong> Advanced Types</a></li><li class=\"chapter-item expanded \"><a href=\"ch19-05-advanced-functions-and-closures.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.4.</strong> Advanced Functions and Closures</a></li><li class=\"chapter-item expanded \"><a href=\"ch19-06-macros.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.5.</strong> Macros</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch20-00-final-project-a-web-server.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.</strong> Final Project: Building a Multithreaded Web Server</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch20-01-single-threaded.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.1.</strong> Building a Single-Threaded Web Server</a></li><li class=\"chapter-item expanded \"><a href=\"ch20-02-multithreaded.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.2.</strong> Turning Our Single-Threaded Server into a Multithreaded Server</a></li><li class=\"chapter-item expanded \"><a href=\"ch20-03-graceful-shutdown-and-cleanup.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.3.</strong> Graceful Shutdown and Cleanup</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"appendix-00.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.</strong> Appendix</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"appendix-01-keywords.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.1.</strong> A - Keywords</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-02-operators.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.2.</strong> B - Operators and Symbols</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-03-derivable-traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.3.</strong> C - Derivable Traits</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-04-useful-development-tools.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.4.</strong> D - Useful Development Tools</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-05-editions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.5.</strong> E - Editions</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-06-translation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.6.</strong> F - Translations of the Book</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-07-nightly-rust.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.7.</strong> G - How Rust is Made and “Nightly Rust”</a></li></ol></li></ol>\n            </div>\n            <div id=\"sidebar-resize-handle\" class=\"sidebar-resize-handle\">\n                <div class=\"sidebar-resize-indicator\"></div>\n            </div>\n        </nav>\n\n        <!-- Track and set sidebar scroll position -->\n        <script>\n            var sidebarScrollbox = document.querySelector('#sidebar .sidebar-scrollbox');\n            sidebarScrollbox.addEventListener('click', function(e) {\n                if (e.target.tagName === 'A') {\n                    sessionStorage.setItem('sidebar-scroll', sidebarScrollbox.scrollTop);\n                }\n            }, { passive: true });\n            var sidebarScrollTop = sessionStorage.getItem('sidebar-scroll');\n            sessionStorage.removeItem('sidebar-scroll');\n            if (sidebarScrollTop) {\n                // preserve sidebar scroll position when navigating via links within sidebar\n                sidebarScrollbox.scrollTop = sidebarScrollTop;\n            } else {\n                // scroll sidebar to current active section when navigating via \"next/previous chapter\" buttons\n                var activeSection = document.querySelector('#sidebar .active');\n                if (activeSection) {\n                    activeSection.scrollIntoView({ block: 'center' });\n                }\n            }\n        </script>\n\n        <div id=\"page-wrapper\" class=\"page-wrapper\">\n\n            <div class=\"page\">\n                                <div id=\"menu-bar-hover-placeholder\"></div>\n                <div id=\"menu-bar\" class=\"menu-bar\" style=\"top: 0px;\">\n                    <div class=\"left-buttons\">\n                        <label id=\"sidebar-toggle\" class=\"icon-button\" for=\"sidebar-toggle-anchor\" title=\"Toggle Table of Contents\" aria-label=\"Toggle Table of Contents\" aria-controls=\"sidebar\" aria-expanded=\"true\">\n                            <i class=\"fa fa-bars\"></i>\n                        </label>\n                        <button id=\"theme-toggle\" class=\"icon-button\" type=\"button\" title=\"Change theme\" aria-label=\"Change theme\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-controls=\"theme-list\">\n                            <i class=\"fa fa-paint-brush\"></i>\n                        </button>\n                        <ul id=\"theme-list\" class=\"theme-popup\" aria-label=\"Themes\" role=\"menu\">\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme theme-selected\" id=\"light\">Light</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"rust\">Rust</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"coal\">Coal</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"navy\">Navy</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"ayu\">Ayu</button></li>\n                        </ul>\n                        <button id=\"search-toggle\" class=\"icon-button\" type=\"button\" title=\"Search. (Shortkey: s)\" aria-label=\"Toggle Searchbar\" aria-expanded=\"false\" aria-keyshortcuts=\"S\" aria-controls=\"searchbar\">\n                            <i class=\"fa fa-search\"></i>\n                        </button>\n                    </div>\n\n                    <h1 class=\"menu-title\">The Rust Programming Language</h1>\n\n                    <div class=\"right-buttons\">\n                        <a href=\"print.html\" title=\"Print this book\" aria-label=\"Print this book\">\n                            <i id=\"print-button\" class=\"fa fa-print\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/book\" title=\"Git repository\" aria-label=\"Git repository\">\n                            <i id=\"git-repository-button\" class=\"fa fa-github\"></i>\n                        </a>\n\n                    </div>\n                </div>\n\n                <div id=\"search-wrapper\" class=\"hidden\">\n                    <form id=\"searchbar-outer\" class=\"searchbar-outer\">\n                        <input type=\"search\" id=\"searchbar\" name=\"searchbar\" placeholder=\"Search this book ...\" aria-controls=\"searchresults-outer\" aria-describedby=\"searchresults-header\">\n                    </form>\n                    <div id=\"searchresults-outer\" class=\"searchresults-outer hidden\">\n                        <div id=\"searchresults-header\" class=\"searchresults-header\"></div>\n                        <ul id=\"searchresults\">\n                        </ul>\n                    </div>\n                </div>\n\n                <!-- Apply ARIA attributes after the sidebar and the sidebar toggle button are added to the DOM -->\n                <script>\n                    document.getElementById('sidebar-toggle').setAttribute('aria-expanded', sidebar === 'visible');\n                    document.getElementById('sidebar').setAttribute('aria-hidden', sidebar !== 'visible');\n                    Array.from(document.querySelectorAll('#sidebar a')).forEach(function(link) {\n                        link.setAttribute('tabIndex', sidebar === 'visible' ? 0 : -1);\n                    });\n                </script>\n\n                <div id=\"content\" class=\"content\">\n                    <main>\n                        <h2 id=\"control-flow\"><a class=\"header\" href=\"#control-flow\">Control Flow</a></h2>\n<p>The ability to run some code depending on whether a condition is <code class=\"hljs\">true</code> and to\nrun some code repeatedly while a condition is <code class=\"hljs\">true</code> are basic building blocks\nin most programming languages. The most common constructs that let you control\nthe flow of execution of Rust code are <code class=\"hljs\">if</code> expressions and loops.</p>\n<h3 id=\"if-expressions\"><a class=\"header\" href=\"#if-expressions\"><code>if</code> Expressions</a></h3>\n<p>An <code class=\"hljs\">if</code> expression allows you to branch your code depending on conditions. You\nprovide a condition and then state, “If this condition is met, run this block\nof code. If the condition is not met, do not run this block of code.”</p>\n<p>Create a new project called <em>branches</em> in your <em>projects</em> directory to explore\nthe <code class=\"hljs\">if</code> expression. In the <em>src/main.rs</em> file, input the following:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> number = <span class=\"hljs-number\">3</span>;\n\n    <span class=\"hljs-keyword\">if</span> number &lt; <span class=\"hljs-number\">5</span> {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"condition was true\"</span>);\n    } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"condition was false\"</span>);\n    }\n}</code></pre></pre>\n<p>All <code class=\"hljs\">if</code> expressions start with the keyword <code class=\"hljs\">if</code>, followed by a condition. In\nthis case, the condition checks whether or not the variable <code class=\"hljs\">number</code> has a\nvalue less than 5. We place the block of code to execute if the condition is\n<code class=\"hljs\">true</code> immediately after the condition inside curly brackets. Blocks of code\nassociated with the conditions in <code class=\"hljs\">if</code> expressions are sometimes called <em>arms</em>,\njust like the arms in <code class=\"hljs\">match</code> expressions that we discussed in the <a href=\"ch02-00-guessing-game-tutorial.html#comparing-the-guess-to-the-secret-number\">“Comparing\nthe Guess to the Secret Number”</a><!--\nignore --> section of Chapter 2.</p>\n<p>Optionally, we can also include an <code class=\"hljs\">else</code> expression, which we chose to do\nhere, to give the program an alternative block of code to execute should the\ncondition evaluate to <code class=\"hljs\">false</code>. If you don’t provide an <code class=\"hljs\">else</code> expression and\nthe condition is <code class=\"hljs\">false</code>, the program will just skip the <code class=\"hljs\">if</code> block and move on\nto the next bit of code.</p>\n<p>Try running this code; you should see the following output:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling branches v0.1.0 (file:///projects/branches)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.31s\n     Running `target/debug/branches`\ncondition was true\n</code></pre>\n<p>Let’s try changing the value of <code class=\"hljs\">number</code> to a value that makes the condition\n<code class=\"hljs\">false</code> to see what happens:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">let</span> number = <span class=\"hljs-number\">7</span>;\n<span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">if</span> number &lt; <span class=\"hljs-number\">5</span> {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"condition was true\"</span>);\n</span><span class=\"boring\">    } <span class=\"hljs-keyword\">else</span> {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"condition was false\"</span>);\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}</span></code></pre>\n<p>Run the program again, and look at the output:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling branches v0.1.0 (file:///projects/branches)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.31s\n     Running `target/debug/branches`\ncondition was false\n</code></pre>\n<p>It’s also worth noting that the condition in this code <em>must</em> be a <code class=\"hljs\">bool</code>. If\nthe condition isn’t a <code class=\"hljs\">bool</code>, we’ll get an error. For example, try running the\nfollowing code:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> number = <span class=\"hljs-number\">3</span>;\n\n    <span class=\"hljs-keyword\">if</span> number {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"number was three\"</span>);\n    }\n}</code></pre>\n<p>The <code class=\"hljs\">if</code> condition evaluates to a value of <code class=\"hljs\">3</code> this time, and Rust throws an\nerror:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling branches v0.1.0 (file:///projects/branches)\nerror[E0308]: mismatched types\n<span class=\"hljs-meta\"> --&gt;</span><span class=\"bash\"> src/main.rs:4:8</span>\n  |\n4 |     if number {\n  |        ^^^^^^ expected `bool`, found integer\n\nFor more information about this error, try `rustc --explain E0308`.\nerror: could not compile `branches` (bin \"branches\") due to 1 previous error\n</code></pre>\n<p>The error indicates that Rust expected a <code class=\"hljs\">bool</code> but got an integer. Unlike\nlanguages such as Ruby and JavaScript, Rust will not automatically try to\nconvert non-Boolean types to a Boolean. You must be explicit and always provide\n<code class=\"hljs\">if</code> with a Boolean as its condition. If we want the <code class=\"hljs\">if</code> code block to run\nonly when a number is not equal to <code class=\"hljs\">0</code>, for example, we can change the <code class=\"hljs\">if</code>\nexpression to the following:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> number = <span class=\"hljs-number\">3</span>;\n\n    <span class=\"hljs-keyword\">if</span> number != <span class=\"hljs-number\">0</span> {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"number was something other than zero\"</span>);\n    }\n}</code></pre></pre>\n<p>Running this code will print <code class=\"hljs\">number was something other than zero</code>.</p>\n<h4 id=\"handling-multiple-conditions-with-else-if\"><a class=\"header\" href=\"#handling-multiple-conditions-with-else-if\">Handling Multiple Conditions with <code>else if</code></a></h4>\n<p>You can use multiple conditions by combining <code class=\"hljs\">if</code> and <code class=\"hljs\">else</code> in an <code class=\"hljs\">else if</code>\nexpression. For example:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> number = <span class=\"hljs-number\">6</span>;\n\n    <span class=\"hljs-keyword\">if</span> number % <span class=\"hljs-number\">4</span> == <span class=\"hljs-number\">0</span> {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"number is divisible by 4\"</span>);\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> number % <span class=\"hljs-number\">3</span> == <span class=\"hljs-number\">0</span> {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"number is divisible by 3\"</span>);\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> number % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span> {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"number is divisible by 2\"</span>);\n    } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"number is not divisible by 4, 3, or 2\"</span>);\n    }\n}</code></pre></pre>\n<p>This program has four possible paths it can take. After running it, you should\nsee the following output:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling branches v0.1.0 (file:///projects/branches)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.31s\n     Running `target/debug/branches`\nnumber is divisible by 3\n</code></pre>\n<p>When this program executes, it checks each <code class=\"hljs\">if</code> expression in turn and executes\nthe first body for which the condition evaluates to <code class=\"hljs\">true</code>. Note that even\nthough 6 is divisible by 2, we don’t see the output <code class=\"hljs\">number is divisible by 2</code>,\nnor do we see the <code class=\"hljs\">number is not divisible by 4, 3, or 2</code> text from the <code class=\"hljs\">else</code>\nblock. That’s because Rust only executes the block for the first <code class=\"hljs\">true</code>\ncondition, and once it finds one, it doesn’t even check the rest.</p>\n<p>Using too many <code class=\"hljs\">else if</code> expressions can clutter your code, so if you have more\nthan one, you might want to refactor your code. Chapter 6 describes a powerful\nRust branching construct called <code class=\"hljs\">match</code> for these cases.</p>\n<h4 id=\"using-if-in-a-let-statement\"><a class=\"header\" href=\"#using-if-in-a-let-statement\">Using <code>if</code> in a <code>let</code> Statement</a></h4>\n<p>Because <code class=\"hljs\">if</code> is an expression, we can use it on the right side of a <code class=\"hljs\">let</code>\nstatement to assign the outcome to a variable, as in Listing 3-2.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> condition = <span class=\"hljs-literal\">true</span>;\n    <span class=\"hljs-keyword\">let</span> number = <span class=\"hljs-keyword\">if</span> condition { <span class=\"hljs-number\">5</span> } <span class=\"hljs-keyword\">else</span> { <span class=\"hljs-number\">6</span> };\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The value of number is: {number}\"</span>);\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 3-2: Assigning the result of an <code class=\"hljs\">if</code> expression\nto a variable</span></p>\n<p>The <code class=\"hljs\">number</code> variable will be bound to a value based on the outcome of the <code class=\"hljs\">if</code>\nexpression. Run this code to see what happens:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling branches v0.1.0 (file:///projects/branches)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.30s\n     Running `target/debug/branches`\nThe value of number is: 5\n</code></pre>\n<p>Remember that blocks of code evaluate to the last expression in them, and\nnumbers by themselves are also expressions. In this case, the value of the\nwhole <code class=\"hljs\">if</code> expression depends on which block of code executes. This means the\nvalues that have the potential to be results from each arm of the <code class=\"hljs\">if</code> must be\nthe same type; in Listing 3-2, the results of both the <code class=\"hljs\">if</code> arm and the <code class=\"hljs\">else</code>\narm were <code class=\"hljs\">i32</code> integers. If the types are mismatched, as in the following\nexample, we’ll get an error:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> condition = <span class=\"hljs-literal\">true</span>;\n\n    <span class=\"hljs-keyword\">let</span> number = <span class=\"hljs-keyword\">if</span> condition { <span class=\"hljs-number\">5</span> } <span class=\"hljs-keyword\">else</span> { <span class=\"hljs-string\">\"six\"</span> };\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The value of number is: {number}\"</span>);\n}</code></pre>\n<p>When we try to compile this code, we’ll get an error. The <code class=\"hljs\">if</code> and <code class=\"hljs\">else</code> arms\nhave value types that are incompatible, and Rust indicates exactly where to\nfind the problem in the program:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling branches v0.1.0 (file:///projects/branches)\nerror[E0308]: `if` and `else` have incompatible types\n<span class=\"hljs-meta\"> --&gt;</span><span class=\"bash\"> src/main.rs:4:44</span>\n  |\n4 |     let number = if condition { 5 } else { \"six\" };\n  |                                 -          ^^^^^ expected integer, found `&amp;str`\n  |                                 |\n  |                                 expected because of this\n\nFor more information about this error, try `rustc --explain E0308`.\nerror: could not compile `branches` (bin \"branches\") due to 1 previous error\n</code></pre>\n<p>The expression in the <code class=\"hljs\">if</code> block evaluates to an integer, and the expression in\nthe <code class=\"hljs\">else</code> block evaluates to a string. This won’t work because variables must\nhave a single type, and Rust needs to know at compile time what type the\n<code class=\"hljs\">number</code> variable is, definitively. Knowing the type of <code class=\"hljs\">number</code> lets the\ncompiler verify the type is valid everywhere we use <code class=\"hljs\">number</code>. Rust wouldn’t be\nable to do that if the type of <code class=\"hljs\">number</code> was only determined at runtime; the\ncompiler would be more complex and would make fewer guarantees about the code\nif it had to keep track of multiple hypothetical types for any variable.</p>\n<h3 id=\"repetition-with-loops\"><a class=\"header\" href=\"#repetition-with-loops\">Repetition with Loops</a></h3>\n<p>It’s often useful to execute a block of code more than once. For this task,\nRust provides several <em>loops</em>, which will run through the code inside the loop\nbody to the end and then start immediately back at the beginning. To experiment\nwith loops, let’s make a new project called <em>loops</em>.</p>\n<p>Rust has three kinds of loops: <code class=\"hljs\">loop</code>, <code class=\"hljs\">while</code>, and <code class=\"hljs\">for</code>. Let’s try each one.</p>\n<h4 id=\"repeating-code-with-loop\"><a class=\"header\" href=\"#repeating-code-with-loop\">Repeating Code with <code>loop</code></a></h4>\n<p>The <code class=\"hljs\">loop</code> keyword tells Rust to execute a block of code over and over again\nforever or until you explicitly tell it to stop.</p>\n<p>As an example, change the <em>src/main.rs</em> file in your <em>loops</em> directory to look\nlike this:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">loop</span> {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"again!\"</span>);\n    }\n}</code></pre>\n<p>When we run this program, we’ll see <code class=\"hljs\">again!</code> printed over and over continuously\nuntil we stop the program manually. Most terminals support the keyboard shortcut\n<kbd>ctrl</kbd>-<kdb>c to interrupt a program that is stuck in a continual\nloop. Give it a try:</kdb></p>\n<!-- manual-regeneration\ncd listings/ch03-common-programming-concepts/no-listing-32-loop\ncargo run\nCTRL-C\n-->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling loops v0.1.0 (file:///projects/loops)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.29s\n     Running `target/debug/loops`\nagain!\nagain!\nagain!\nagain!\n^Cagain!\n</code></pre>\n<p>The symbol <code class=\"hljs\">^C</code> represents where you pressed <kbd>ctrl</kbd>-<kbd>c</kbd>. You\nmay or may not see the word <code class=\"hljs\">again!</code> printed after the <code class=\"hljs\">^C</code>, depending on where\nthe code was in the loop when it received the interrupt signal.</p>\n<p>Fortunately, Rust also provides a way to break out of a loop using code. You\ncan place the <code class=\"hljs\">break</code> keyword within the loop to tell the program when to stop\nexecuting the loop. Recall that we did this in the guessing game in the\n<a href=\"ch02-00-guessing-game-tutorial.html#quitting-after-a-correct-guess\">“Quitting After a Correct Guess”</a><!-- ignore\n--> section of Chapter 2 to exit the program when the user won the game by\nguessing the correct number.</p>\n<p>We also used <code class=\"hljs\">continue</code> in the guessing game, which in a loop tells the program\nto skip over any remaining code in this iteration of the loop and go to the\nnext iteration.</p>\n<h4 id=\"returning-values-from-loops\"><a class=\"header\" href=\"#returning-values-from-loops\">Returning Values from Loops</a></h4>\n<p>One of the uses of a <code class=\"hljs\">loop</code> is to retry an operation you know might fail, such\nas checking whether a thread has completed its job. You might also need to pass\nthe result of that operation out of the loop to the rest of your code. To do\nthis, you can add the value you want returned after the <code class=\"hljs\">break</code> expression you\nuse to stop the loop; that value will be returned out of the loop so you can\nuse it, as shown here:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> counter = <span class=\"hljs-number\">0</span>;\n\n    <span class=\"hljs-keyword\">let</span> result = <span class=\"hljs-keyword\">loop</span> {\n        counter += <span class=\"hljs-number\">1</span>;\n\n        <span class=\"hljs-keyword\">if</span> counter == <span class=\"hljs-number\">10</span> {\n            <span class=\"hljs-keyword\">break</span> counter * <span class=\"hljs-number\">2</span>;\n        }\n    };\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The result is {result}\"</span>);\n}</code></pre></pre>\n<p>Before the loop, we declare a variable named <code class=\"hljs\">counter</code> and initialize it to\n<code class=\"hljs\">0</code>. Then we declare a variable named <code class=\"hljs\">result</code> to hold the value returned from\nthe loop. On every iteration of the loop, we add <code class=\"hljs\">1</code> to the <code class=\"hljs\">counter</code> variable,\nand then check whether the <code class=\"hljs\">counter</code> is equal to <code class=\"hljs\">10</code>. When it is, we use the\n<code class=\"hljs\">break</code> keyword with the value <code class=\"hljs\">counter * 2</code>. After the loop, we use a\nsemicolon to end the statement that assigns the value to <code class=\"hljs\">result</code>. Finally, we\nprint the value in <code class=\"hljs\">result</code>, which in this case is <code class=\"hljs\">20</code>.</p>\n<p>You can also <code class=\"hljs\">return</code> from inside a loop. While <code class=\"hljs\">break</code> only exits the current\nloop, <code class=\"hljs\">return</code> always exits the current function.</p>\n<h4 id=\"loop-labels-to-disambiguate-between-multiple-loops\"><a class=\"header\" href=\"#loop-labels-to-disambiguate-between-multiple-loops\">Loop Labels to Disambiguate Between Multiple Loops</a></h4>\n<p>If you have loops within loops, <code class=\"hljs\">break</code> and <code class=\"hljs\">continue</code> apply to the innermost\nloop at that point. You can optionally specify a <em>loop label</em> on a loop that\nyou can then use with <code class=\"hljs\">break</code> or <code class=\"hljs\">continue</code> to specify that those keywords\napply to the labeled loop instead of the innermost loop. Loop labels must begin\nwith a single quote. Here’s an example with two nested loops:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> count = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-symbol\">'counting_up</span>: <span class=\"hljs-keyword\">loop</span> {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"count = {count}\"</span>);\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> remaining = <span class=\"hljs-number\">10</span>;\n\n        <span class=\"hljs-keyword\">loop</span> {\n            <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"remaining = {remaining}\"</span>);\n            <span class=\"hljs-keyword\">if</span> remaining == <span class=\"hljs-number\">9</span> {\n                <span class=\"hljs-keyword\">break</span>;\n            }\n            <span class=\"hljs-keyword\">if</span> count == <span class=\"hljs-number\">2</span> {\n                <span class=\"hljs-keyword\">break</span> <span class=\"hljs-symbol\">'counting_up</span>;\n            }\n            remaining -= <span class=\"hljs-number\">1</span>;\n        }\n\n        count += <span class=\"hljs-number\">1</span>;\n    }\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"End count = {count}\"</span>);\n}</code></pre></pre>\n<p>The outer loop has the label <code class=\"hljs\">'counting_up</code>, and it will count up from 0 to 2.\nThe inner loop without a label counts down from 10 to 9. The first <code class=\"hljs\">break</code> that\ndoesn’t specify a label will exit the inner loop only. The <code class=\"hljs\">break 'counting_up;</code> statement will exit the outer loop. This code prints:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling loops v0.1.0 (file:///projects/loops)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.58s\n     Running `target/debug/loops`\ncount = 0\nremaining = 10\nremaining = 9\ncount = 1\nremaining = 10\nremaining = 9\ncount = 2\nremaining = 10\nEnd count = 2\n</code></pre>\n<h4 id=\"conditional-loops-with-while\"><a class=\"header\" href=\"#conditional-loops-with-while\">Conditional Loops with <code>while</code></a></h4>\n<p>A program will often need to evaluate a condition within a loop. While the\ncondition is <code class=\"hljs\">true</code>, the loop runs. When the condition ceases to be <code class=\"hljs\">true</code>, the\nprogram calls <code class=\"hljs\">break</code>, stopping the loop. It’s possible to implement behavior\nlike this using a combination of <code class=\"hljs\">loop</code>, <code class=\"hljs\">if</code>, <code class=\"hljs\">else</code>, and <code class=\"hljs\">break</code>; you could\ntry that now in a program, if you’d like. However, this pattern is so common\nthat Rust has a built-in language construct for it, called a <code class=\"hljs\">while</code> loop. In\nListing 3-3, we use <code class=\"hljs\">while</code> to loop the program three times, counting down each\ntime, and then, after the loop, print a message and exit.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> number = <span class=\"hljs-number\">3</span>;\n\n    <span class=\"hljs-keyword\">while</span> number != <span class=\"hljs-number\">0</span> {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{number}!\"</span>);\n\n        number -= <span class=\"hljs-number\">1</span>;\n    }\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"LIFTOFF!!!\"</span>);\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 3-3: Using a <code class=\"hljs\">while</code> loop to run code while a\ncondition holds true</span></p>\n<p>This construct eliminates a lot of nesting that would be necessary if you used\n<code class=\"hljs\">loop</code>, <code class=\"hljs\">if</code>, <code class=\"hljs\">else</code>, and <code class=\"hljs\">break</code>, and it’s clearer. While a condition\nevaluates to <code class=\"hljs\">true</code>, the code runs; otherwise, it exits the loop.</p>\n<h4 id=\"looping-through-a-collection-with-for\"><a class=\"header\" href=\"#looping-through-a-collection-with-for\">Looping Through a Collection with <code>for</code></a></h4>\n<p>You can also use the <code class=\"hljs\">while</code> construct to loop over the elements of a\ncollection, such as an array. For example, the loop in Listing 3-4 prints each\nelement in the array <code class=\"hljs\">a</code>.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> a = [<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">40</span>, <span class=\"hljs-number\">50</span>];\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> index = <span class=\"hljs-number\">0</span>;\n\n    <span class=\"hljs-keyword\">while</span> index &lt; <span class=\"hljs-number\">5</span> {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"the value is: {}\"</span>, a[index]);\n\n        index += <span class=\"hljs-number\">1</span>;\n    }\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 3-4: Looping through each element of a collection\nusing a <code class=\"hljs\">while</code> loop</span></p>\n<p>Here, the code counts up through the elements in the array. It starts at index\n<code class=\"hljs\">0</code>, and then loops until it reaches the final index in the array (that is,\nwhen <code class=\"hljs\">index &lt; 5</code> is no longer <code class=\"hljs\">true</code>). Running this code will print every\nelement in the array:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling loops v0.1.0 (file:///projects/loops)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.32s\n     Running `target/debug/loops`\nthe value is: 10\nthe value is: 20\nthe value is: 30\nthe value is: 40\nthe value is: 50\n</code></pre>\n<p>All five array values appear in the terminal, as expected. Even though <code class=\"hljs\">index</code>\nwill reach a value of <code class=\"hljs\">5</code> at some point, the loop stops executing before trying\nto fetch a sixth value from the array.</p>\n<p>However, this approach is error prone; we could cause the program to panic if\nthe index value or test condition is incorrect. For example, if you changed the\ndefinition of the <code class=\"hljs\">a</code> array to have four elements but forgot to update the\ncondition to <code class=\"hljs\">while index &lt; 4</code>, the code would panic. It’s also slow, because\nthe compiler adds runtime code to perform the conditional check of whether the\nindex is within the bounds of the array on every iteration through the loop.</p>\n<p>As a more concise alternative, you can use a <code class=\"hljs\">for</code> loop and execute some code\nfor each item in a collection. A <code class=\"hljs\">for</code> loop looks like the code in Listing 3-5.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> a = [<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">40</span>, <span class=\"hljs-number\">50</span>];\n\n    <span class=\"hljs-keyword\">for</span> element <span class=\"hljs-keyword\">in</span> a {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"the value is: {element}\"</span>);\n    }\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 3-5: Looping through each element of a collection\nusing a <code class=\"hljs\">for</code> loop</span></p>\n<p>When we run this code, we’ll see the same output as in Listing 3-4. More\nimportantly, we’ve now increased the safety of the code and eliminated the\nchance of bugs that might result from going beyond the end of the array or not\ngoing far enough and missing some items.</p>\n<p>Using the <code class=\"hljs\">for</code> loop, you wouldn’t need to remember to change any other code if\nyou changed the number of values in the array, as you would with the method\nused in Listing 3-4.</p>\n<p>The safety and conciseness of <code class=\"hljs\">for</code> loops make them the most commonly used loop\nconstruct in Rust. Even in situations in which you want to run some code a\ncertain number of times, as in the countdown example that used a <code class=\"hljs\">while</code> loop\nin Listing 3-3, most Rustaceans would use a <code class=\"hljs\">for</code> loop. The way to do that\nwould be to use a <code class=\"hljs\">Range</code>, provided by the standard library, which generates\nall numbers in sequence starting from one number and ending before another\nnumber.</p>\n<p>Here’s what the countdown would look like using a <code class=\"hljs\">for</code> loop and another method\nwe’ve not yet talked about, <code class=\"hljs\">rev</code>, to reverse the range:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">for</span> number <span class=\"hljs-keyword\">in</span> (<span class=\"hljs-number\">1</span>..<span class=\"hljs-number\">4</span>).rev() {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{number}!\"</span>);\n    }\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"LIFTOFF!!!\"</span>);\n}</code></pre></pre>\n<p>This code is a bit nicer, isn’t it?</p>\n<h2 id=\"summary\"><a class=\"header\" href=\"#summary\">Summary</a></h2>\n<p>You made it! This was a sizable chapter: you learned about variables, scalar\nand compound data types, functions, comments, <code class=\"hljs\">if</code> expressions, and loops! To\npractice with the concepts discussed in this chapter, try building programs to\ndo the following:</p>\n<ul>\n<li>Convert temperatures between Fahrenheit and Celsius.</li>\n<li>Generate the <em>n</em>th Fibonacci number.</li>\n<li>Print the lyrics to the Christmas carol “The Twelve Days of Christmas,”\ntaking advantage of the repetition in the song.</li>\n</ul>\n<p>When you’re ready to move on, we’ll talk about a concept in Rust that <em>doesn’t</em>\ncommonly exist in other programming languages: ownership.</p>\n\n                    </main>\n\n                    <nav class=\"nav-wrapper\" aria-label=\"Page navigation\">\n                        <!-- Mobile navigation buttons -->\n                            <a rel=\"prev\" href=\"ch03-04-comments.html\" class=\"mobile-nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                                <i class=\"fa fa-angle-left\"></i>\n                            </a>\n\n                            <a rel=\"next prefetch\" href=\"ch04-00-understanding-ownership.html\" class=\"mobile-nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                                <i class=\"fa fa-angle-right\"></i>\n                            </a>\n\n                        <div style=\"clear: both\"></div>\n                    </nav>\n                </div>\n            </div>\n\n            <nav class=\"nav-wide-wrapper\" aria-label=\"Page navigation\">\n                    <a rel=\"prev\" href=\"ch03-04-comments.html\" class=\"nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                        <i class=\"fa fa-angle-left\"></i>\n                    </a>\n\n                    <a rel=\"next prefetch\" href=\"ch04-00-understanding-ownership.html\" class=\"nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                        <i class=\"fa fa-angle-right\"></i>\n                    </a>\n            </nav>\n\n        </div>\n\n\n\n\n        <script>\n            window.playground_copyable = true;\n        </script>\n\n\n        <script src=\"elasticlunr.min.js\"></script>\n        <script src=\"mark.min.js\"></script>\n        <script src=\"searcher.js\"></script>\n\n        <script src=\"clipboard.min.js\"></script>\n        <script src=\"highlight.js\"></script>\n        <script src=\"book.js\"></script>\n\n        <!-- Custom JS scripts -->\n        <script src=\"ferris.js\"></script>\n\n\n    </div>\n    \n\n</body></html>",
	"crawlDate": "2024-07-28T05:08:14.052Z"
}