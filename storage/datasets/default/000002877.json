{
	"title": "CString in std::ffi::c_str - Rust",
	"url": "https://doc.rust-lang.org/stable/std/ffi/c_str/struct.CString.html",
	"markdown": "# CString in std::ffi::c\\_str - Rust\n\n## Struct [std](../../index.html)::[ffi](../index.html)::[c\\_str](index.html)::[CString](#)\n\n1.64.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#115) ·\n\n```\npub struct CString { /* private fields */ }\n```\n\nExpand description\n\nA type representing an owned, C-compatible, nul-terminated string with no nul bytes in the middle.\n\nThis type serves the purpose of being able to safely generate a C-compatible string from a Rust byte slice or vector. An instance of this type is a static guarantee that the underlying bytes contain no interior 0 bytes (“nul characters”) and that the final byte is 0 (“nul terminator”).\n\n`CString` is to `&[CStr](../struct.CStr.html \"struct std::ffi::CStr\")` as [`String`](../../string/struct.String.html \"struct std::string::String\") is to `&[str](../../primitive.str.html \"str\")`: the former in each pair are owned strings; the latter are borrowed references.\n\n## [§](#creating-a-cstring)Creating a `CString`\n\nA `CString` is created from either a byte slice or a byte vector, or anything that implements `[Into](../../convert/trait.Into.html \"trait std::convert::Into\")<[Vec](../../vec/struct.Vec.html \"struct std::vec::Vec\")<[u8](../../primitive.u8.html \"primitive u8\")>>` (for example, you can build a `CString` straight out of a [`String`](../../string/struct.String.html \"struct std::string::String\") or a `&[str](../../primitive.str.html \"str\")`, since both implement that trait). You can create a `CString` from a literal with `CString::from(c\"Text\")`.\n\nThe [`CString::new`](about:blank/struct.CString.html#method.new \"associated function std::ffi::CString::new\") method will actually check that the provided `&[[u8](../../primitive.u8.html \"primitive u8\")]` does not have 0 bytes in the middle, and return an error if it finds one.\n\n`CString` implements an [`as_ptr`](about:blank/struct.CStr.html#method.as_ptr \"method std::ffi::CStr::as_ptr\") method through the [`Deref`](../../ops/trait.Deref.html \"trait std::ops::Deref\") trait. This method will give you a `*const c_char` which you can feed directly to extern functions that expect a nul-terminated string, like C’s `strdup()`. Notice that [`as_ptr`](about:blank/struct.CStr.html#method.as_ptr \"method std::ffi::CStr::as_ptr\") returns a read-only pointer; if the C code writes to it, that causes undefined behavior.\n\nAlternatively, you can obtain a `&[[u8](../../primitive.u8.html \"primitive u8\")]` slice from a `CString` with the [`CString::as_bytes`](about:blank/struct.CString.html#method.as_bytes \"method std::ffi::CString::as_bytes\") method. Slices produced in this way do _not_ contain the trailing nul terminator. This is useful when you will be calling an extern function that takes a `*const u8` argument which is not necessarily nul-terminated, plus another argument with the length of the string — like C’s `strndup()`. You can of course get the slice’s length with its [`len`](about:blank/primitive.slice.html#method.len \"method slice::len\") method.\n\nIf you need a `&[[u8](../../primitive.u8.html \"primitive u8\")]` slice _with_ the nul terminator, you can use [`CString::as_bytes_with_nul`](about:blank/struct.CString.html#method.as_bytes_with_nul \"method std::ffi::CString::as_bytes_with_nul\") instead.\n\nOnce you have the kind of slice you need (with or without a nul terminator), you can call the slice’s own [`as_ptr`](about:blank/primitive.slice.html#method.as_ptr \"method slice::as_ptr\") method to get a read-only raw pointer to pass to extern functions. See the documentation for that function for a discussion on ensuring the lifetime of the raw pointer.\n\n## [§](#examples)Examples\n\n[ⓘ](# \"This example is not tested\")\n\n```\nuse std::ffi::CString;\nuse std::os::raw::c_char;\n\nextern \"C\" {\n    fn my_printer(s: *const c_char);\n}\n\n// We are certain that our string doesn't have 0 bytes in the middle,\n// so we can .expect()\nlet c_to_print = CString::new(\"Hello, world!\").expect(\"CString::new failed\");\nunsafe {\n    my_printer(c_to_print.as_ptr());\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Ause+std::ffi::CString;%0Ause+std::os::raw::c_char;%0A%0Aextern+%22C%22+%7B%0A++++fn+my_printer(s:+*const+c_char);%0A%7D%0A%0A//+We+are+certain+that+our+string+doesn%27t+have+0+bytes+in+the+middle,%0A//+so+we+can+.expect()%0Alet+c_to_print+=+CString::new(%22Hello,+world!%22).expect(%22CString::new+failed%22);%0Aunsafe+%7B%0A++++my_printer(c_to_print.as_ptr());%0A%7D%0A%7D&edition=2021)\n\n## [§](#safety)Safety\n\n`CString` is intended for working with traditional C-style strings (a sequence of non-nul bytes terminated by a single nul byte); the primary use case for these kinds of strings is interoperating with C-like code. Often you will need to transfer ownership to/from that external code. It is strongly recommended that you thoroughly read through the documentation of `CString` before use, as improper ownership management of `CString` instances can lead to invalid memory accesses, memory leaks, and other memory errors.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#235)[§](#impl-CString)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#264)\n\nCreates a new C-compatible string from a container of bytes.\n\nThis function will consume the provided data and use the underlying bytes to construct a new string, ensuring that there is a trailing 0 byte. This trailing 0 byte will be appended by this function; the provided data should _not_ contain any 0 bytes in it.\n\n##### [§](#examples-1)Examples\n\n[ⓘ](# \"This example is not tested\")\n\n```\nuse std::ffi::CString;\nuse std::os::raw::c_char;\n\nextern \"C\" { fn puts(s: *const c_char); }\n\nlet to_print = CString::new(\"Hello!\").expect(\"CString::new failed\");\nunsafe {\n    puts(to_print.as_ptr());\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::CString;%0A++++use+std::os::raw::c_char;%0A++++%0A++++extern+%22C%22+%7B+fn+puts(s:+*const+c_char);+%7D%0A++++%0A++++let+to_print+=+CString::new(%22Hello!%22).expect(%22CString::new+failed%22);%0A++++unsafe+%7B%0A++++++++puts(to_print.as_ptr());%0A++++%7D%0A%7D&edition=2021)\n\n##### [§](#errors)Errors\n\nThis function will return an error if the supplied bytes contain an internal 0 byte. The [`NulError`](struct.NulError.html \"struct std::ffi::c_str::NulError\") returned will contain the bytes as well as the position of the nul byte.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#343)\n\nCreates a C-compatible string by consuming a byte vector, without checking for interior 0 bytes.\n\nTrailing 0 byte will be appended by this function.\n\nThis method is equivalent to [`CString::new`](about:blank/struct.CString.html#method.new \"associated function std::ffi::CString::new\") except that no runtime assertion is made that `v` contains no 0 bytes, and it requires an actual byte vector, not anything that can be converted to one with Into.\n\n##### [§](#examples-2)Examples\n\n```\nuse std::ffi::CString;\n\nlet raw = b\"foo\".to_vec();\nunsafe {\n    let c_string = CString::from_vec_unchecked(raw);\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::CString;%0A++++%0A++++let+raw+=+b%22foo%22.to_vec();%0A++++unsafe+%7B%0A++++++++let+c_string+=+CString::from_vec_unchecked(raw);%0A++++%7D%0A%7D&edition=2021)\n\n1.4.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#400)\n\nRetakes ownership of a `CString` that was transferred to C via [`CString::into_raw`](about:blank/struct.CString.html#method.into_raw \"method std::ffi::CString::into_raw\").\n\nAdditionally, the length of the string will be recalculated from the pointer.\n\n##### [§](#safety-1)Safety\n\nThis should only ever be called with a pointer that was earlier obtained by calling [`CString::into_raw`](about:blank/struct.CString.html#method.into_raw \"method std::ffi::CString::into_raw\"). Other usage (e.g., trying to take ownership of a string that was allocated by foreign code) is likely to lead to undefined behavior or allocator corruption.\n\nIt should be noted that the length isn’t just “recomputed,” but that the recomputed length must match the original length from the [`CString::into_raw`](about:blank/struct.CString.html#method.into_raw \"method std::ffi::CString::into_raw\") call. This means the [`CString::into_raw`](about:blank/struct.CString.html#method.into_raw \"method std::ffi::CString::into_raw\")/`from_raw` methods should not be used when passing the string to C functions that can modify the string’s length.\n\n> **Note:** If you need to borrow a string that was allocated by foreign code, use [`CStr`](../struct.CStr.html \"struct std::ffi::CStr\"). If you need to take ownership of a string that was allocated by foreign code, you will need to make your own provisions for freeing it appropriately, likely with the foreign code’s API to do that.\n\n##### [§](#examples-3)Examples\n\nCreates a `CString`, pass ownership to an `extern` function (via raw pointer), then retake ownership with `from_raw`:\n\n[ⓘ](# \"This example is not tested\")\n\n```\nuse std::ffi::CString;\nuse std::os::raw::c_char;\n\nextern \"C\" {\n    fn some_extern_function(s: *mut c_char);\n}\n\nlet c_string = CString::new(\"Hello!\").expect(\"CString::new failed\");\nlet raw = c_string.into_raw();\nunsafe {\n    some_extern_function(raw);\n    let c_string = CString::from_raw(raw);\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::CString;%0A++++use+std::os::raw::c_char;%0A++++%0A++++extern+%22C%22+%7B%0A++++++++fn+some_extern_function(s:+*mut+c_char);%0A++++%7D%0A++++%0A++++let+c_string+=+CString::new(%22Hello!%22).expect(%22CString::new+failed%22);%0A++++let+raw+=+c_string.into_raw();%0A++++unsafe+%7B%0A++++++++some_extern_function(raw);%0A++++++++let+c_string+=+CString::from_raw(raw);%0A++++%7D%0A%7D&edition=2021)\n\n1.4.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#453)\n\nConsumes the `CString` and transfers ownership of the string to a C caller.\n\nThe pointer which this function returns must be returned to Rust and reconstituted using [`CString::from_raw`](about:blank/struct.CString.html#method.from_raw \"associated function std::ffi::CString::from_raw\") to be properly deallocated. Specifically, one should _not_ use the standard C `free()` function to deallocate this string.\n\nFailure to call [`CString::from_raw`](about:blank/struct.CString.html#method.from_raw \"associated function std::ffi::CString::from_raw\") will lead to a memory leak.\n\nThe C side must **not** modify the length of the string (by writing a nul byte somewhere inside the string or removing the final one) before it makes it back into Rust using [`CString::from_raw`](about:blank/struct.CString.html#method.from_raw \"associated function std::ffi::CString::from_raw\"). See the safety section in [`CString::from_raw`](about:blank/struct.CString.html#method.from_raw \"associated function std::ffi::CString::from_raw\").\n\n##### [§](#examples-4)Examples\n\n```\nuse std::ffi::CString;\n\nlet c_string = CString::new(\"foo\").expect(\"CString::new failed\");\n\nlet ptr = c_string.into_raw();\n\nunsafe {\n    assert_eq!(b'f', *ptr as u8);\n    assert_eq!(b'o', *ptr.add(1) as u8);\n    assert_eq!(b'o', *ptr.add(2) as u8);\n    assert_eq!(b'\\0', *ptr.add(3) as u8);\n\n    // retake pointer to free memory\n    let _ = CString::from_raw(ptr);\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::CString;%0A++++%0A++++let+c_string+=+CString::new(%22foo%22).expect(%22CString::new+failed%22);%0A++++%0A++++let+ptr+=+c_string.into_raw();%0A++++%0A++++unsafe+%7B%0A++++++++assert_eq!(b%27f%27,+*ptr+as+u8);%0A++++++++assert_eq!(b%27o%27,+*ptr.add(1)+as+u8);%0A++++++++assert_eq!(b%27o%27,+*ptr.add(2)+as+u8);%0A++++++++assert_eq!(b%27%5C0%27,+*ptr.add(3)+as+u8);%0A++++%0A++++++++//+retake+pointer+to+free+memory%0A++++++++let+_+=+CString::from_raw(ptr);%0A++++%7D%0A%7D&edition=2021)\n\n1.7.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#476)\n\nConverts the `CString` into a [`String`](../../string/struct.String.html \"struct std::string::String\") if it contains valid UTF-8 data.\n\nOn failure, ownership of the original `CString` is returned.\n\n##### [§](#examples-5)Examples\n\n```\nuse std::ffi::CString;\n\nlet valid_utf8 = vec![b'f', b'o', b'o'];\nlet cstring = CString::new(valid_utf8).expect(\"CString::new failed\");\nassert_eq!(cstring.into_string().expect(\"into_string() call failed\"), \"foo\");\n\nlet invalid_utf8 = vec![b'f', 0xff, b'o', b'o'];\nlet cstring = CString::new(invalid_utf8).expect(\"CString::new failed\");\nlet err = cstring.into_string().err().expect(\"into_string().err() failed\");\nassert_eq!(err.utf8_error().valid_up_to(), 1);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::CString;%0A++++%0A++++let+valid_utf8+=+vec!%5Bb%27f%27,+b%27o%27,+b%27o%27%5D;%0A++++let+cstring+=+CString::new(valid_utf8).expect(%22CString::new+failed%22);%0A++++assert_eq!(cstring.into_string().expect(%22into_string()+call+failed%22),+%22foo%22);%0A++++%0A++++let+invalid_utf8+=+vec!%5Bb%27f%27,+0xff,+b%27o%27,+b%27o%27%5D;%0A++++let+cstring+=+CString::new(invalid_utf8).expect(%22CString::new+failed%22);%0A++++let+err+=+cstring.into_string().err().expect(%22into_string().err()+failed%22);%0A++++assert_eq!(err.utf8_error().valid_up_to(),+1);%0A%7D&edition=2021)\n\n1.7.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#500)\n\nConsumes the `CString` and returns the underlying byte buffer.\n\nThe returned buffer does **not** contain the trailing nul terminator, and it is guaranteed to not have any interior nul bytes.\n\n##### [§](#examples-6)Examples\n\n```\nuse std::ffi::CString;\n\nlet c_string = CString::new(\"foo\").expect(\"CString::new failed\");\nlet bytes = c_string.into_bytes();\nassert_eq!(bytes, vec![b'f', b'o', b'o']);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::CString;%0A++++%0A++++let+c_string+=+CString::new(%22foo%22).expect(%22CString::new+failed%22);%0A++++let+bytes+=+c_string.into_bytes();%0A++++assert_eq!(bytes,+vec!%5Bb%27f%27,+b%27o%27,+b%27o%27%5D);%0A%7D&edition=2021)\n\n1.7.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#521)\n\nEquivalent to [`CString::into_bytes()`](about:blank/struct.CString.html#method.into_bytes \"method std::ffi::CString::into_bytes\") except that the returned vector includes the trailing nul terminator.\n\n##### [§](#examples-7)Examples\n\n```\nuse std::ffi::CString;\n\nlet c_string = CString::new(\"foo\").expect(\"CString::new failed\");\nlet bytes = c_string.into_bytes_with_nul();\nassert_eq!(bytes, vec![b'f', b'o', b'o', b'\\0']);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::CString;%0A++++%0A++++let+c_string+=+CString::new(%22foo%22).expect(%22CString::new+failed%22);%0A++++let+bytes+=+c_string.into_bytes_with_nul();%0A++++assert_eq!(bytes,+vec!%5Bb%27f%27,+b%27o%27,+b%27o%27,+b%27%5C0%27%5D);%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#544)\n\nReturns the contents of this `CString` as a slice of bytes.\n\nThe returned slice does **not** contain the trailing nul terminator, and it is guaranteed to not have any interior nul bytes. If you need the nul terminator, use [`CString::as_bytes_with_nul`](about:blank/struct.CString.html#method.as_bytes_with_nul \"method std::ffi::CString::as_bytes_with_nul\") instead.\n\n##### [§](#examples-8)Examples\n\n```\nuse std::ffi::CString;\n\nlet c_string = CString::new(\"foo\").expect(\"CString::new failed\");\nlet bytes = c_string.as_bytes();\nassert_eq!(bytes, &[b'f', b'o', b'o']);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::CString;%0A++++%0A++++let+c_string+=+CString::new(%22foo%22).expect(%22CString::new+failed%22);%0A++++let+bytes+=+c_string.as_bytes();%0A++++assert_eq!(bytes,+%26%5Bb%27f%27,+b%27o%27,+b%27o%27%5D);%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#564)\n\nEquivalent to [`CString::as_bytes()`](about:blank/struct.CString.html#method.as_bytes \"method std::ffi::CString::as_bytes\") except that the returned slice includes the trailing nul terminator.\n\n##### [§](#examples-9)Examples\n\n```\nuse std::ffi::CString;\n\nlet c_string = CString::new(\"foo\").expect(\"CString::new failed\");\nlet bytes = c_string.as_bytes_with_nul();\nassert_eq!(bytes, &[b'f', b'o', b'o', b'\\0']);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::CString;%0A++++%0A++++let+c_string+=+CString::new(%22foo%22).expect(%22CString::new+failed%22);%0A++++let+bytes+=+c_string.as_bytes_with_nul();%0A++++assert_eq!(bytes,+%26%5Bb%27f%27,+b%27o%27,+b%27o%27,+b%27%5C0%27%5D);%0A%7D&edition=2021)\n\n1.20.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#583)\n\nExtracts a [`CStr`](../struct.CStr.html \"struct std::ffi::CStr\") slice containing the entire string.\n\n##### [§](#examples-10)Examples\n\n```\nuse std::ffi::{CString, CStr};\n\nlet c_string = CString::new(b\"foo\".to_vec()).expect(\"CString::new failed\");\nlet cstr = c_string.as_c_str();\nassert_eq!(cstr,\n           CStr::from_bytes_with_nul(b\"foo\\0\").expect(\"CStr::from_bytes_with_nul failed\"));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::%7BCString,+CStr%7D;%0A++++%0A++++let+c_string+=+CString::new(b%22foo%22.to_vec()).expect(%22CString::new+failed%22);%0A++++let+cstr+=+c_string.as_c_str();%0A++++assert_eq!(cstr,%0A+++++++++++++++CStr::from_bytes_with_nul(b%22foo%5C0%22).expect(%22CStr::from_bytes_with_nul+failed%22));%0A%7D&edition=2021)\n\n1.20.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#601)\n\nConverts this `CString` into a boxed [`CStr`](../struct.CStr.html \"struct std::ffi::CStr\").\n\n##### [§](#examples-11)Examples\n\n```\nuse std::ffi::{CString, CStr};\n\nlet c_string = CString::new(b\"foo\".to_vec()).expect(\"CString::new failed\");\nlet boxed = c_string.into_boxed_c_str();\nassert_eq!(&*boxed,\n           CStr::from_bytes_with_nul(b\"foo\\0\").expect(\"CStr::from_bytes_with_nul failed\"));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::%7BCString,+CStr%7D;%0A++++%0A++++let+c_string+=+CString::new(b%22foo%22.to_vec()).expect(%22CString::new+failed%22);%0A++++let+boxed+=+c_string.into_boxed_c_str();%0A++++assert_eq!(%26*boxed,%0A+++++++++++++++CStr::from_bytes_with_nul(b%22foo%5C0%22).expect(%22CStr::from_bytes_with_nul+failed%22));%0A%7D&edition=2021)\n\n1.58.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#635)\n\nConverts a `[Vec](../../vec/struct.Vec.html \"struct std::vec::Vec\")<[u8](../../primitive.u8.html \"primitive u8\")>` to a [`CString`](../struct.CString.html \"struct std::ffi::CString\") without checking the invariants on the given [`Vec`](../../vec/struct.Vec.html \"struct std::vec::Vec\").\n\n##### [§](#safety-2)Safety\n\nThe given [`Vec`](../../vec/struct.Vec.html \"struct std::vec::Vec\") **must** have one nul byte as its last element. This means it cannot be empty nor have any other nul byte anywhere else.\n\n##### [§](#example)Example\n\n```\nuse std::ffi::CString;\nassert_eq!(\n    unsafe { CString::from_vec_with_nul_unchecked(b\"abc\\0\".to_vec()) },\n    unsafe { CString::from_vec_unchecked(b\"abc\".to_vec()) }\n);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::CString;%0A++++assert_eq!(%0A++++++++unsafe+%7B+CString::from_vec_with_nul_unchecked(b%22abc%5C0%22.to_vec())+%7D,%0A++++++++unsafe+%7B+CString::from_vec_unchecked(b%22abc%22.to_vec())+%7D%0A++++);%0A%7D&edition=2021)\n\n1.58.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#678)\n\nAttempts to converts a `[Vec](../../vec/struct.Vec.html \"struct std::vec::Vec\")<[u8](../../primitive.u8.html \"primitive u8\")>` to a [`CString`](../struct.CString.html \"struct std::ffi::CString\").\n\nRuntime checks are present to ensure there is only one nul byte in the [`Vec`](../../vec/struct.Vec.html \"struct std::vec::Vec\"), its last element.\n\n##### [§](#errors-1)Errors\n\nIf a nul byte is present and not the last element or no nul bytes is present, an error will be returned.\n\n##### [§](#examples-12)Examples\n\nA successful conversion will produce the same result as [`CString::new`](about:blank/struct.CString.html#method.new \"associated function std::ffi::CString::new\") when called without the ending nul byte.\n\n```\nuse std::ffi::CString;\nassert_eq!(\n    CString::from_vec_with_nul(b\"abc\\0\".to_vec())\n        .expect(\"CString::from_vec_with_nul failed\"),\n    CString::new(b\"abc\".to_vec()).expect(\"CString::new failed\")\n);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::CString;%0A++++assert_eq!(%0A++++++++CString::from_vec_with_nul(b%22abc%5C0%22.to_vec())%0A++++++++++++.expect(%22CString::from_vec_with_nul+failed%22),%0A++++++++CString::new(b%22abc%22.to_vec()).expect(%22CString::new+failed%22)%0A++++);%0A%7D&edition=2021)\n\nAn incorrectly formatted [`Vec`](../../vec/struct.Vec.html \"struct std::vec::Vec\") will produce an error.\n\n```\nuse std::ffi::{CString, FromVecWithNulError};\n// Interior nul byte\nlet _: FromVecWithNulError = CString::from_vec_with_nul(b\"a\\0bc\".to_vec()).unwrap_err();\n// No nul byte\nlet _: FromVecWithNulError = CString::from_vec_with_nul(b\"abc\".to_vec()).unwrap_err();\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::%7BCString,+FromVecWithNulError%7D;%0A++++//+Interior+nul+byte%0A++++let+_:+FromVecWithNulError+=+CString::from_vec_with_nul(b%22a%5C0bc%22.to_vec()).unwrap_err();%0A++++//+No+nul+byte%0A++++let+_:+FromVecWithNulError+=+CString::from_vec_with_nul(b%22abc%22.to_vec()).unwrap_err();%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/ffi/c_str.rs.html#510)\n\nReturns the inner pointer to this C string.\n\nThe returned pointer will be valid for as long as `self` is, and points to a contiguous region of memory terminated with a 0 byte to represent the end of the string.\n\nThe type of the returned pointer is [`*const c_char`](../type.c_char.html \"type std::ffi::c_char\"), and whether it’s an alias for `*const i8` or `*const u8` is platform-specific.\n\n**WARNING**\n\nThe returned pointer is read-only; writing to it (including passing it to C code that writes to it) causes undefined behavior.\n\nIt is your responsibility to make sure that the underlying memory is not freed too early. For example, the following code will cause undefined behavior when `ptr` is used inside the `unsafe` block:\n\n```\nuse std::ffi::CString;\n\n// Do not do this:\nlet ptr = CString::new(\"Hello\").expect(\"CString::new failed\").as_ptr();\nunsafe {\n    // `ptr` is dangling\n    *ptr;\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Ballow(unused_must_use)%5D+%23!%5Ballow(temporary_cstring_as_ptr)%5D%0Afn+main()+%7B%0A++++use+std::ffi::CString;%0A++++%0A++++//+Do+not+do+this:%0A++++let+ptr+=+CString::new(%22Hello%22).expect(%22CString::new+failed%22).as_ptr();%0A++++unsafe+%7B%0A++++++++//+%60ptr%60+is+dangling%0A++++++++*ptr;%0A++++%7D%0A%7D&edition=2021)\n\nThis happens because the pointer returned by `as_ptr` does not carry any lifetime information and the `CString` is deallocated immediately after the `CString::new(\"Hello\").expect(\"CString::new failed\").as_ptr()` expression is evaluated. To fix the problem, bind the `CString` to a local variable:\n\n```\nuse std::ffi::CString;\n\nlet hello = CString::new(\"Hello\").expect(\"CString::new failed\");\nlet ptr = hello.as_ptr();\nunsafe {\n    // `ptr` is valid because `hello` is in scope\n    *ptr;\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Ballow(unused_must_use)%5D%0Afn+main()+%7B%0A++++use+std::ffi::CString;%0A++++%0A++++let+hello+=+CString::new(%22Hello%22).expect(%22CString::new+failed%22);%0A++++let+ptr+=+hello.as_ptr();%0A++++unsafe+%7B%0A++++++++//+%60ptr%60+is+valid+because+%60hello%60+is+in+scope%0A++++++++*ptr;%0A++++%7D%0A%7D&edition=2021)\n\nThis way, the lifetime of the `CString` in `hello` encompasses the lifetime of `ptr` and the `unsafe` block.\n\n1.79.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/ffi/c_str.rs.html#543)\n\nReturns the length of `self`. Like C’s `strlen`, this does not include the nul terminator.\n\n> **Note**: This method is currently implemented as a constant-time cast, but it is planned to alter its definition in the future to perform the length calculation whenever this method is called.\n\n##### [§](#examples-13)Examples\n\n```\nuse std::ffi::CStr;\n\nlet cstr = CStr::from_bytes_with_nul(b\"foo\\0\").unwrap();\nassert_eq!(cstr.count_bytes(), 3);\n\nlet cstr = CStr::from_bytes_with_nul(b\"\\0\").unwrap();\nassert_eq!(cstr.count_bytes(), 0);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::CStr;%0A++++%0A++++let+cstr+=+CStr::from_bytes_with_nul(b%22foo%5C0%22).unwrap();%0A++++assert_eq!(cstr.count_bytes(),+3);%0A++++%0A++++let+cstr+=+CStr::from_bytes_with_nul(b%22%5C0%22).unwrap();%0A++++assert_eq!(cstr.count_bytes(),+0);%0A%7D&edition=2021)\n\n1.71.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/ffi/c_str.rs.html#569)\n\nReturns `true` if `self.to_bytes()` has a length of 0.\n\n##### [§](#examples-14)Examples\n\n```\nuse std::ffi::CStr;\n\nlet cstr = CStr::from_bytes_with_nul(b\"foo\\0\")?;\nassert!(!cstr.is_empty());\n\nlet empty_cstr = CStr::from_bytes_with_nul(b\"\\0\")?;\nassert!(empty_cstr.is_empty());\nassert!(c\"\".is_empty());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::ffi::CStr;%0Ause+std::ffi::FromBytesWithNulError;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Result%3C(),+FromBytesWithNulError%3E+%7B%0Alet+cstr+=+CStr::from_bytes_with_nul(b%22foo%5C0%22)?;%0Aassert!(!cstr.is_empty());%0A%0Alet+empty_cstr+=+CStr::from_bytes_with_nul(b%22%5C0%22)?;%0Aassert!(empty_cstr.is_empty());%0Aassert!(c%22%22.is_empty());%0AOk(())%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/ffi/c_str.rs.html#598)\n\nConverts this C string to a byte slice.\n\nThe returned slice will **not** contain the trailing nul terminator that this C string has.\n\n> **Note**: This method is currently implemented as a constant-time cast, but it is planned to alter its definition in the future to perform the length calculation whenever this method is called.\n\n##### [§](#examples-15)Examples\n\n```\nuse std::ffi::CStr;\n\nlet cstr = CStr::from_bytes_with_nul(b\"foo\\0\").expect(\"CStr::from_bytes_with_nul failed\");\nassert_eq!(cstr.to_bytes(), b\"foo\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::CStr;%0A++++%0A++++let+cstr+=+CStr::from_bytes_with_nul(b%22foo%5C0%22).expect(%22CStr::from_bytes_with_nul+failed%22);%0A++++assert_eq!(cstr.to_bytes(),+b%22foo%22);%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/ffi/c_str.rs.html#627)\n\nConverts this C string to a byte slice containing the trailing 0 byte.\n\nThis function is the equivalent of [`CStr::to_bytes`](about:blank/struct.CStr.html#method.to_bytes \"method std::ffi::CStr::to_bytes\") except that it will retain the trailing nul terminator instead of chopping it off.\n\n> **Note**: This method is currently implemented as a 0-cost cast, but it is planned to alter its definition in the future to perform the length calculation whenever this method is called.\n\n##### [§](#examples-16)Examples\n\n```\nuse std::ffi::CStr;\n\nlet cstr = CStr::from_bytes_with_nul(b\"foo\\0\").expect(\"CStr::from_bytes_with_nul failed\");\nassert_eq!(cstr.to_bytes_with_nul(), b\"foo\\0\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::CStr;%0A++++%0A++++let+cstr+=+CStr::from_bytes_with_nul(b%22foo%5C0%22).expect(%22CStr::from_bytes_with_nul+failed%22);%0A++++assert_eq!(cstr.to_bytes_with_nul(),+b%22foo%5C0%22);%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ffi/c_str.rs.html#649)\n\n🔬This is a nightly-only experimental API. (`cstr_bytes` [#112115](https://github.com/rust-lang/rust/issues/112115))\n\nIterates over the bytes in this C string.\n\nThe returned iterator will **not** contain the trailing nul terminator that this C string has.\n\n##### [§](#examples-17)Examples\n\n```\n#![feature(cstr_bytes)]\nuse std::ffi::CStr;\n\nlet cstr = CStr::from_bytes_with_nul(b\"foo\\0\").expect(\"CStr::from_bytes_with_nul failed\");\nassert!(cstr.bytes().eq(*b\"foo\"));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(cstr_bytes)%5D%0Afn+main()+%7B%0A++++use+std::ffi::CStr;%0A++++%0A++++let+cstr+=+CStr::from_bytes_with_nul(b%22foo%5C0%22).expect(%22CStr::from_bytes_with_nul+failed%22);%0A++++assert!(cstr.bytes().eq(*b%22foo%22));%0A%7D&version=nightly&edition=2021)\n\n1.4.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/ffi/c_str.rs.html#671)\n\nYields a `&[str](../../primitive.str.html \"str\")` slice if the `CStr` contains valid UTF-8.\n\nIf the contents of the `CStr` are valid UTF-8 data, this function will return the corresponding `&[str](../../primitive.str.html \"str\")` slice. Otherwise, it will return an error with details of where UTF-8 validation failed.\n\n##### [§](#examples-18)Examples\n\n```\nuse std::ffi::CStr;\n\nlet cstr = CStr::from_bytes_with_nul(b\"foo\\0\").expect(\"CStr::from_bytes_with_nul failed\");\nassert_eq!(cstr.to_str(), Ok(\"foo\"));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::CStr;%0A++++%0A++++let+cstr+=+CStr::from_bytes_with_nul(b%22foo%5C0%22).expect(%22CStr::from_bytes_with_nul+failed%22);%0A++++assert_eq!(cstr.to_str(),+Ok(%22foo%22));%0A%7D&edition=2021)\n\n1.4.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#1109)\n\nConverts a `CStr` into a `[Cow](../../borrow/enum.Cow.html \"enum std::borrow::Cow\")<[str](../../primitive.str.html \"str\")>`.\n\nIf the contents of the `CStr` are valid UTF-8 data, this function will return a `[Cow](../../borrow/enum.Cow.html \"enum std::borrow::Cow\")::[Borrowed](about:blank/borrow/enum.Cow.html#variant.Borrowed \"variant std::borrow::Cow::Borrowed\")(&[str](../../primitive.str.html \"str\"))` with the corresponding `&[str](../../primitive.str.html \"str\")` slice. Otherwise, it will replace any invalid UTF-8 sequences with [`U+FFFD REPLACEMENT CHARACTER`](../../char/constant.REPLACEMENT_CHARACTER.html \"std::char::REPLACEMENT_CHARACTER\") and return a `[Cow](../../borrow/enum.Cow.html \"enum std::borrow::Cow\")::[Owned](about:blank/borrow/enum.Cow.html#variant.Owned \"variant std::borrow::Cow::Owned\")(&[str](../../primitive.str.html \"str\"))` with the result.\n\n##### [§](#examples-19)Examples\n\nCalling `to_string_lossy` on a `CStr` containing valid UTF-8. The leading `c` on the string literal denotes a `CStr`.\n\n```\nuse std::borrow::Cow;\n\nassert_eq!(c\"Hello World\".to_string_lossy(), Cow::Borrowed(\"Hello World\"));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::borrow::Cow;%0A++++%0A++++assert_eq!(c%22Hello+World%22.to_string_lossy(),+Cow::Borrowed(%22Hello+World%22));%0A%7D&edition=2021)\n\nCalling `to_string_lossy` on a `CStr` containing invalid UTF-8:\n\n```\nuse std::borrow::Cow;\n\nassert_eq!(\n    c\"Hello \\xF0\\x90\\x80World\".to_string_lossy(),\n    Cow::Owned(String::from(\"Hello �World\")) as Cow<'_, str>\n);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::borrow::Cow;%0A++++%0A++++assert_eq!(%0A++++++++c%22Hello+%5CxF0%5Cx90%5Cx80World%22.to_string_lossy(),%0A++++++++Cow::Owned(String::from(%22Hello+%EF%BF%BDWorld%22))+as+Cow%3C%27_,+str%3E%0A++++);%0A%7D&edition=2021)\n\n1.7.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#1061)[§](#impl-AsRef%3CCStr%3E-for-CString)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#1063)[§](#method.as_ref)\n\nConverts this type into a shared reference of the (usually inferred) input type.\n\n1.3.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#749)[§](#impl-Borrow%3CCStr%3E-for-CString)\n\n1.64.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#112)[§](#impl-Clone-for-CString)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#722)[§](#impl-Debug-for-CString)\n\n1.10.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#740)[§](#impl-Default-for-CString)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#742)[§](#method.default)\n\nCreates an empty `CString`.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#712)[§](#impl-Deref-for-CString)\n\n[§](#associatedtype.Target)\n\nThe resulting type after dereferencing.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#716)[§](#method.deref)\n\nDereferences the value.\n\n1.13.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#702)[§](#impl-Drop-for-CString)\n\n1.7.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#1042)[§](#impl-From%3C%26CStr%3E-for-CString)\n\n1.28.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#859)[§](#impl-From%3C%26CString%3E-for-Cow%3C'a,+CStr%3E)\n\n1.18.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#791)[§](#impl-From%3CBox%3CCStr%3E%3E-for-CString)\n\n1.24.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#869)[§](#impl-From%3CCString%3E-for-Arc%3CCStr%3E)\n\n1.20.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#832)[§](#impl-From%3CCString%3E-for-Box%3CCStr%3E)\n\n1.28.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#841)[§](#impl-From%3CCString%3E-for-Cow%3C'a,+CStr%3E)\n\n1.24.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#892)[§](#impl-From%3CCString%3E-for-Rc%3CCStr%3E)\n\n1.7.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#729)[§](#impl-From%3CCString%3E-for-Vec%3Cu8%3E)\n\n1.28.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#757)[§](#impl-From%3CCow%3C'a,+CStr%3E%3E-for-CString)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#761)[§](#method.from-3)\n\nConverts a `Cow<'a, CStr>` into a `CString`, by copying the contents if they are borrowed.\n\n1.43.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#801)[§](#impl-From%3CVec%3CNonZero%3Cu8%3E%3E%3E-for-CString)\n\n1.64.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#112)[§](#impl-Hash-for-CString)\n\n1.7.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#1051)[§](#impl-Index%3CRangeFull%3E-for-CString)\n\n[§](#associatedtype.Output)\n\nThe returned type after indexing.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#1055)[§](#method.index)\n\nPerforms the indexing (`container[index]`) operation. [Read more](about:blank/ops/trait.Index.html#tymethod.index)\n\n1.64.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#112)[§](#impl-Ord-for-CString)\n\n1.64.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#112)[§](#impl-PartialEq-for-CString)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#112)[§](#method.eq)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[§](#method.ne)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.64.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#112)[§](#impl-PartialOrd-for-CString)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#112)[§](#method.partial_cmp)\n\nThis method returns an ordering between `self` and `other` values if one exists. [Read more](about:blank/cmp/trait.PartialOrd.html#tymethod.partial_cmp)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180)[§](#method.lt)\n\nThis method tests less than (for `self` and `other`) and is used by the `<` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.lt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198)[§](#method.le)\n\nThis method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.le)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215)[§](#method.gt)\n\nThis method tests greater than (for `self` and `other`) and is used by the `>` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.gt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233)[§](#method.ge)\n\nThis method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.ge)\n\n1.64.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#112)[§](#impl-Eq-for-CString)\n\n1.64.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#112)[§](#impl-StructuralPartialEq-for-CString)\n\n[§](#impl-Freeze-for-CString)\n\n[§](#impl-RefUnwindSafe-for-CString)\n\n[§](#impl-Send-for-CString)\n\n[§](#impl-Sync-for-CString)\n\n[§](#impl-Unpin-for-CString)\n\n[§](#impl-UnwindSafe-for-CString)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140)[§](#impl-Any-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208)[§](#impl-Borrow%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216)[§](#impl-BorrowMut%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765)[§](#impl-From%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768)[§](#method.from-10)\n\nReturns the argument unchanged.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750)[§](#impl-Into%3CU%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758)[§](#method.into)\n\nCalls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of `[From](../../convert/trait.From.html \"trait std::convert::From\")<T> for U` chooses to do.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85)[§](#impl-ToOwned-for-T)\n\n[§](#associatedtype.Owned)\n\nThe resulting type after obtaining ownership.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88)[§](#method.to_owned)\n\nCreates owned data from borrowed data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#tymethod.to_owned)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92)[§](#method.clone_into)\n\nUses borrowed data to replace owned data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#method.clone_into)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807)[§](#impl-TryFrom%3CU%3E-for-T)\n\n[§](#associatedtype.Error-1)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812)[§](#method.try_from)\n\nPerforms the conversion.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792)[§](#impl-TryInto%3CU%3E-for-T)\n\n[§](#associatedtype.Error)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797)[§](#method.try_into)\n\nPerforms the conversion.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"A type representing an owned, C-compatible, nul-terminated string with no nul bytes in the middle.\"><title>CString in std::ffi::c_str - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../../\" data-static-root-path=\"../../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc struct\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">CString</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">CString</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#implementations\">Methods</a></h3><ul class=\"block method\"><li><a href=\"#method.as_bytes\">as_bytes</a></li><li><a href=\"#method.as_bytes_with_nul\">as_bytes_with_nul</a></li><li><a href=\"#method.as_c_str\">as_c_str</a></li><li><a href=\"#method.from_raw\">from_raw</a></li><li><a href=\"#method.from_vec_unchecked\">from_vec_unchecked</a></li><li><a href=\"#method.from_vec_with_nul\">from_vec_with_nul</a></li><li><a href=\"#method.from_vec_with_nul_unchecked\">from_vec_with_nul_unchecked</a></li><li><a href=\"#method.into_boxed_c_str\">into_boxed_c_str</a></li><li><a href=\"#method.into_bytes\">into_bytes</a></li><li><a href=\"#method.into_bytes_with_nul\">into_bytes_with_nul</a></li><li><a href=\"#method.into_raw\">into_raw</a></li><li><a href=\"#method.into_string\">into_string</a></li><li><a href=\"#method.new\">new</a></li></ul><h3><a href=\"#deref-methods-CStr\">Methods from Deref&lt;Target=CStr&gt;</a></h3><ul class=\"block deref-methods\"><li><a href=\"#method.as_ptr\">as_ptr</a></li><li><a href=\"#method.bytes\">bytes</a></li><li><a href=\"#method.count_bytes\">count_bytes</a></li><li><a href=\"#method.is_empty\">is_empty</a></li><li><a href=\"#method.to_bytes\">to_bytes</a></li><li><a href=\"#method.to_bytes_with_nul\">to_bytes_with_nul</a></li><li><a href=\"#method.to_str\">to_str</a></li><li><a href=\"#method.to_string_lossy\">to_string_lossy</a></li></ul><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-AsRef%3CCStr%3E-for-CString\">AsRef&lt;CStr&gt;</a></li><li><a href=\"#impl-Borrow%3CCStr%3E-for-CString\">Borrow&lt;CStr&gt;</a></li><li><a href=\"#impl-Clone-for-CString\">Clone</a></li><li><a href=\"#impl-Debug-for-CString\">Debug</a></li><li><a href=\"#impl-Default-for-CString\">Default</a></li><li><a href=\"#impl-Deref-for-CString\">Deref</a></li><li><a href=\"#impl-Drop-for-CString\">Drop</a></li><li><a href=\"#impl-Eq-for-CString\">Eq</a></li><li><a href=\"#impl-From%3C%26CString%3E-for-Cow%3C'a,+CStr%3E\">From&lt;&amp;'a CString&gt;</a></li><li><a href=\"#impl-From%3C%26CStr%3E-for-CString\">From&lt;&amp;CStr&gt;</a></li><li><a href=\"#impl-From%3CBox%3CCStr%3E%3E-for-CString\">From&lt;Box&lt;CStr&gt;&gt;</a></li><li><a href=\"#impl-From%3CCString%3E-for-Arc%3CCStr%3E\">From&lt;CString&gt;</a></li><li><a href=\"#impl-From%3CCString%3E-for-Box%3CCStr%3E\">From&lt;CString&gt;</a></li><li><a href=\"#impl-From%3CCString%3E-for-Cow%3C'a,+CStr%3E\">From&lt;CString&gt;</a></li><li><a href=\"#impl-From%3CCString%3E-for-Rc%3CCStr%3E\">From&lt;CString&gt;</a></li><li><a href=\"#impl-From%3CCString%3E-for-Vec%3Cu8%3E\">From&lt;CString&gt;</a></li><li><a href=\"#impl-From%3CCow%3C'a,+CStr%3E%3E-for-CString\">From&lt;Cow&lt;'a, CStr&gt;&gt;</a></li><li><a href=\"#impl-From%3CVec%3CNonZero%3Cu8%3E%3E%3E-for-CString\">From&lt;Vec&lt;NonZero&lt;u8&gt;&gt;&gt;</a></li><li><a href=\"#impl-Hash-for-CString\">Hash</a></li><li><a href=\"#impl-Index%3CRangeFull%3E-for-CString\">Index&lt;RangeFull&gt;</a></li><li><a href=\"#impl-Ord-for-CString\">Ord</a></li><li><a href=\"#impl-PartialEq-for-CString\">PartialEq</a></li><li><a href=\"#impl-PartialOrd-for-CString\">PartialOrd</a></li><li><a href=\"#impl-StructuralPartialEq-for-CString\">StructuralPartialEq</a></li></ul><h3><a href=\"#synthetic-implementations\">Auto Trait Implementations</a></h3><ul class=\"block synthetic-implementation\"><li><a href=\"#impl-Freeze-for-CString\">Freeze</a></li><li><a href=\"#impl-RefUnwindSafe-for-CString\">RefUnwindSafe</a></li><li><a href=\"#impl-Send-for-CString\">Send</a></li><li><a href=\"#impl-Sync-for-CString\">Sync</a></li><li><a href=\"#impl-Unpin-for-CString\">Unpin</a></li><li><a href=\"#impl-UnwindSafe-for-CString\">UnwindSafe</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-Any-for-T\">Any</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-T\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-T\">BorrowMut&lt;T&gt;</a></li><li><a href=\"#impl-From%3CT%3E-for-T\">From&lt;T&gt;</a></li><li><a href=\"#impl-Into%3CU%3E-for-T\">Into&lt;U&gt;</a></li><li><a href=\"#impl-ToOwned-for-T\">ToOwned</a></li><li><a href=\"#impl-TryFrom%3CU%3E-for-T\">TryFrom&lt;U&gt;</a></li><li><a href=\"#impl-TryInto%3CU%3E-for-T\">TryInto&lt;U&gt;</a></li></ul></section><h2><a href=\"index.html\">In std::ffi::c_str</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.CStr.html\">CStr</a></li><li><a href=\"struct.CString.html\">CString</a></li><li><a href=\"struct.FromBytesUntilNulError.html\">FromBytesUntilNulError</a></li><li><a href=\"struct.FromBytesWithNulError.html\">FromBytesWithNulError</a></li><li><a href=\"struct.FromVecWithNulError.html\">FromVecWithNulError</a></li><li><a href=\"struct.IntoStringError.html\">IntoStringError</a></li><li><a href=\"struct.NulError.html\">NulError</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Struct <a href=\"../../index.html\">std</a>::<wbr><a href=\"../index.html\">ffi</a>::<wbr><a href=\"index.html\">c_str</a>::<wbr><a class=\"struct\" href=\"#\">CString</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.64.0\">1.64.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#115\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub struct CString { <span class=\"comment\">/* private fields */</span> }</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>A type representing an owned, C-compatible, nul-terminated string with no nul bytes in the\nmiddle.</p>\n<p>This type serves the purpose of being able to safely generate a\nC-compatible string from a Rust byte slice or vector. An instance of this\ntype is a static guarantee that the underlying bytes contain no interior 0\nbytes (“nul characters”) and that the final byte is 0 (“nul terminator”).</p>\n<p><code>CString</code> is to <code>&amp;<a href=\"../struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a></code> as <a href=\"../../string/struct.String.html\" title=\"struct std::string::String\"><code>String</code></a> is to <code>&amp;<a href=\"../../primitive.str.html\" title=\"str\">str</a></code>: the former\nin each pair are owned strings; the latter are borrowed\nreferences.</p>\n<h2 id=\"creating-a-cstring\"><a class=\"doc-anchor\" href=\"#creating-a-cstring\">§</a>Creating a <code>CString</code></h2>\n<p>A <code>CString</code> is created from either a byte slice or a byte vector,\nor anything that implements <code><a href=\"../../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;<a href=\"../../vec/struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;<a href=\"../../primitive.u8.html\" title=\"primitive u8\">u8</a>&gt;&gt;</code> (for\nexample, you can build a <code>CString</code> straight out of a <a href=\"../../string/struct.String.html\" title=\"struct std::string::String\"><code>String</code></a> or\na <code>&amp;<a href=\"../../primitive.str.html\" title=\"str\">str</a></code>, since both implement that trait).\nYou can create a <code>CString</code> from a literal with <code>CString::from(c\"Text\")</code>.</p>\n<p>The <a href=\"../struct.CString.html#method.new\" title=\"associated function std::ffi::CString::new\"><code>CString::new</code></a> method will actually check that the provided <code>&amp;[<a href=\"../../primitive.u8.html\" title=\"primitive u8\">u8</a>]</code>\ndoes not have 0 bytes in the middle, and return an error if it\nfinds one.</p>\n<h2 id=\"extracting-a-raw-pointer-to-the-whole-c-string\"><a class=\"doc-anchor\" href=\"#extracting-a-raw-pointer-to-the-whole-c-string\">§</a>Extracting a raw pointer to the whole C string</h2>\n<p><code>CString</code> implements an <a href=\"../struct.CStr.html#method.as_ptr\" title=\"method std::ffi::CStr::as_ptr\"><code>as_ptr</code></a> method through the <a href=\"../../ops/trait.Deref.html\" title=\"trait std::ops::Deref\"><code>Deref</code></a>\ntrait. This method will give you a <code>*const c_char</code> which you can\nfeed directly to extern functions that expect a nul-terminated\nstring, like C’s <code>strdup()</code>. Notice that <a href=\"../struct.CStr.html#method.as_ptr\" title=\"method std::ffi::CStr::as_ptr\"><code>as_ptr</code></a> returns a\nread-only pointer; if the C code writes to it, that causes\nundefined behavior.</p>\n<h2 id=\"extracting-a-slice-of-the-whole-c-string\"><a class=\"doc-anchor\" href=\"#extracting-a-slice-of-the-whole-c-string\">§</a>Extracting a slice of the whole C string</h2>\n<p>Alternatively, you can obtain a <code>&amp;[<a href=\"../../primitive.u8.html\" title=\"primitive u8\">u8</a>]</code> slice from a\n<code>CString</code> with the <a href=\"../struct.CString.html#method.as_bytes\" title=\"method std::ffi::CString::as_bytes\"><code>CString::as_bytes</code></a> method. Slices produced in this\nway do <em>not</em> contain the trailing nul terminator. This is useful\nwhen you will be calling an extern function that takes a <code>*const u8</code> argument which is not necessarily nul-terminated, plus another\nargument with the length of the string — like C’s <code>strndup()</code>.\nYou can of course get the slice’s length with its\n<a href=\"../../primitive.slice.html#method.len\" title=\"method slice::len\"><code>len</code></a> method.</p>\n<p>If you need a <code>&amp;[<a href=\"../../primitive.u8.html\" title=\"primitive u8\">u8</a>]</code> slice <em>with</em> the nul terminator, you\ncan use <a href=\"../struct.CString.html#method.as_bytes_with_nul\" title=\"method std::ffi::CString::as_bytes_with_nul\"><code>CString::as_bytes_with_nul</code></a> instead.</p>\n<p>Once you have the kind of slice you need (with or without a nul\nterminator), you can call the slice’s own\n<a href=\"../../primitive.slice.html#method.as_ptr\" title=\"method slice::as_ptr\"><code>as_ptr</code></a> method to get a read-only raw pointer to pass to\nextern functions. See the documentation for that function for a\ndiscussion on ensuring the lifetime of the raw pointer.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<div class=\"example-wrap ignore\"><a href=\"#\" class=\"tooltip\" title=\"This example is not tested\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ffi::CString;\n<span class=\"kw\">use </span>std::os::raw::c_char;\n\n<span class=\"kw\">extern </span><span class=\"string\">\"C\" </span>{\n    <span class=\"kw\">fn </span>my_printer(s: <span class=\"kw-2\">*const </span>c_char);\n}\n\n<span class=\"comment\">// We are certain that our string doesn't have 0 bytes in the middle,\n// so we can .expect()\n</span><span class=\"kw\">let </span>c_to_print = CString::new(<span class=\"string\">\"Hello, world!\"</span>).expect(<span class=\"string\">\"CString::new failed\"</span>);\n<span class=\"kw\">unsafe </span>{\n    my_printer(c_to_print.as_ptr());\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Ause+std::ffi::CString;%0Ause+std::os::raw::c_char;%0A%0Aextern+%22C%22+%7B%0A++++fn+my_printer(s:+*const+c_char);%0A%7D%0A%0A//+We+are+certain+that+our+string+doesn't+have+0+bytes+in+the+middle,%0A//+so+we+can+.expect()%0Alet+c_to_print+=+CString::new(%22Hello,+world!%22).expect(%22CString::new+failed%22);%0Aunsafe+%7B%0A++++my_printer(c_to_print.as_ptr());%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<h2 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h2>\n<p><code>CString</code> is intended for working with traditional C-style strings\n(a sequence of non-nul bytes terminated by a single nul byte); the\nprimary use case for these kinds of strings is interoperating with C-like\ncode. Often you will need to transfer ownership to/from that external\ncode. It is strongly recommended that you thoroughly read through the\ndocumentation of <code>CString</code> before use, as improper ownership management\nof <code>CString</code> instances can lead to invalid memory accesses, memory leaks,\nand other memory errors.</p>\n</div></details><h2 id=\"implementations\" class=\"section-header\">Implementations<a href=\"#implementations\" class=\"anchor\">§</a></h2><div id=\"implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-CString\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#235\">source</a><a href=\"#impl-CString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"../struct.CString.html\" title=\"struct std::ffi::CString\">CString</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.new\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#264\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.new\" class=\"fn\">new</a>&lt;T&gt;(t: T) -&gt; <a class=\"enum\" href=\"../../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"../struct.CString.html\" title=\"struct std::ffi::CString\">CString</a>, <a class=\"struct\" href=\"struct.NulError.html\" title=\"struct std::ffi::c_str::NulError\">NulError</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"../../vec/struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"../../primitive.u8.html\">u8</a>&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Creates a new C-compatible string from a container of bytes.</p>\n<p>This function will consume the provided data and use the\nunderlying bytes to construct a new string, ensuring that\nthere is a trailing 0 byte. This trailing 0 byte will be\nappended by this function; the provided data should <em>not</em>\ncontain any 0 bytes in it.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap ignore\"><a href=\"#\" class=\"tooltip\" title=\"This example is not tested\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ffi::CString;\n<span class=\"kw\">use </span>std::os::raw::c_char;\n\n<span class=\"kw\">extern </span><span class=\"string\">\"C\" </span>{ <span class=\"kw\">fn </span>puts(s: <span class=\"kw-2\">*const </span>c_char); }\n\n<span class=\"kw\">let </span>to_print = CString::new(<span class=\"string\">\"Hello!\"</span>).expect(<span class=\"string\">\"CString::new failed\"</span>);\n<span class=\"kw\">unsafe </span>{\n    puts(to_print.as_ptr());\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::CString;%0A++++use+std::os::raw::c_char;%0A++++%0A++++extern+%22C%22+%7B+fn+puts(s:+*const+c_char);+%7D%0A++++%0A++++let+to_print+=+CString::new(%22Hello!%22).expect(%22CString::new+failed%22);%0A++++unsafe+%7B%0A++++++++puts(to_print.as_ptr());%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h5>\n<p>This function will return an error if the supplied bytes contain an\ninternal 0 byte. The <a href=\"struct.NulError.html\" title=\"struct std::ffi::c_str::NulError\"><code>NulError</code></a> returned will contain the bytes as well as\nthe position of the nul byte.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_vec_unchecked\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#343\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.from_vec_unchecked\" class=\"fn\">from_vec_unchecked</a>(v: <a class=\"struct\" href=\"../../vec/struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"../../primitive.u8.html\">u8</a>&gt;) -&gt; <a class=\"struct\" href=\"../struct.CString.html\" title=\"struct std::ffi::CString\">CString</a></h4></section></summary><div class=\"docblock\"><p>Creates a C-compatible string by consuming a byte vector,\nwithout checking for interior 0 bytes.</p>\n<p>Trailing 0 byte will be appended by this function.</p>\n<p>This method is equivalent to <a href=\"../struct.CString.html#method.new\" title=\"associated function std::ffi::CString::new\"><code>CString::new</code></a> except that no runtime\nassertion is made that <code>v</code> contains no 0 bytes, and it requires an\nactual byte vector, not anything that can be converted to one with Into.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ffi::CString;\n\n<span class=\"kw\">let </span>raw = <span class=\"string\">b\"foo\"</span>.to_vec();\n<span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">let </span>c_string = CString::from_vec_unchecked(raw);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::CString;%0A++++%0A++++let+raw+=+b%22foo%22.to_vec();%0A++++unsafe+%7B%0A++++++++let+c_string+=+CString::from_vec_unchecked(raw);%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_raw\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#400\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.from_raw\" class=\"fn\">from_raw</a>(ptr: <a class=\"primitive\" href=\"../../primitive.pointer.html\">*mut </a><a class=\"primitive\" href=\"../../primitive.i8.html\">i8</a>) -&gt; <a class=\"struct\" href=\"../struct.CString.html\" title=\"struct std::ffi::CString\">CString</a></h4></section></summary><div class=\"docblock\"><p>Retakes ownership of a <code>CString</code> that was transferred to C via\n<a href=\"../struct.CString.html#method.into_raw\" title=\"method std::ffi::CString::into_raw\"><code>CString::into_raw</code></a>.</p>\n<p>Additionally, the length of the string will be recalculated from the pointer.</p>\n<h5 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">§</a>Safety</h5>\n<p>This should only ever be called with a pointer that was earlier\nobtained by calling <a href=\"../struct.CString.html#method.into_raw\" title=\"method std::ffi::CString::into_raw\"><code>CString::into_raw</code></a>. Other usage (e.g., trying to take\nownership of a string that was allocated by foreign code) is likely to lead\nto undefined behavior or allocator corruption.</p>\n<p>It should be noted that the length isn’t just “recomputed,” but that\nthe recomputed length must match the original length from the\n<a href=\"../struct.CString.html#method.into_raw\" title=\"method std::ffi::CString::into_raw\"><code>CString::into_raw</code></a> call. This means the <a href=\"../struct.CString.html#method.into_raw\" title=\"method std::ffi::CString::into_raw\"><code>CString::into_raw</code></a>/<code>from_raw</code>\nmethods should not be used when passing the string to C functions that can\nmodify the string’s length.</p>\n<blockquote>\n<p><strong>Note:</strong> If you need to borrow a string that was allocated by\nforeign code, use <a href=\"../struct.CStr.html\" title=\"struct std::ffi::CStr\"><code>CStr</code></a>. If you need to take ownership of\na string that was allocated by foreign code, you will need to\nmake your own provisions for freeing it appropriately, likely\nwith the foreign code’s API to do that.</p>\n</blockquote>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<p>Creates a <code>CString</code>, pass ownership to an <code>extern</code> function (via raw pointer), then retake\nownership with <code>from_raw</code>:</p>\n\n<div class=\"example-wrap ignore\"><a href=\"#\" class=\"tooltip\" title=\"This example is not tested\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ffi::CString;\n<span class=\"kw\">use </span>std::os::raw::c_char;\n\n<span class=\"kw\">extern </span><span class=\"string\">\"C\" </span>{\n    <span class=\"kw\">fn </span>some_extern_function(s: <span class=\"kw-2\">*mut </span>c_char);\n}\n\n<span class=\"kw\">let </span>c_string = CString::new(<span class=\"string\">\"Hello!\"</span>).expect(<span class=\"string\">\"CString::new failed\"</span>);\n<span class=\"kw\">let </span>raw = c_string.into_raw();\n<span class=\"kw\">unsafe </span>{\n    some_extern_function(raw);\n    <span class=\"kw\">let </span>c_string = CString::from_raw(raw);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::CString;%0A++++use+std::os::raw::c_char;%0A++++%0A++++extern+%22C%22+%7B%0A++++++++fn+some_extern_function(s:+*mut+c_char);%0A++++%7D%0A++++%0A++++let+c_string+=+CString::new(%22Hello!%22).expect(%22CString::new+failed%22);%0A++++let+raw+=+c_string.into_raw();%0A++++unsafe+%7B%0A++++++++some_extern_function(raw);%0A++++++++let+c_string+=+CString::from_raw(raw);%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_raw\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#453\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.into_raw\" class=\"fn\">into_raw</a>(self) -&gt; <a class=\"primitive\" href=\"../../primitive.pointer.html\">*mut </a><a class=\"primitive\" href=\"../../primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Consumes the <code>CString</code> and transfers ownership of the string to a C caller.</p>\n<p>The pointer which this function returns must be returned to Rust and reconstituted using\n<a href=\"../struct.CString.html#method.from_raw\" title=\"associated function std::ffi::CString::from_raw\"><code>CString::from_raw</code></a> to be properly deallocated. Specifically, one\nshould <em>not</em> use the standard C <code>free()</code> function to deallocate\nthis string.</p>\n<p>Failure to call <a href=\"../struct.CString.html#method.from_raw\" title=\"associated function std::ffi::CString::from_raw\"><code>CString::from_raw</code></a> will lead to a memory leak.</p>\n<p>The C side must <strong>not</strong> modify the length of the string (by writing a\nnul byte somewhere inside the string or removing the final one) before\nit makes it back into Rust using <a href=\"../struct.CString.html#method.from_raw\" title=\"associated function std::ffi::CString::from_raw\"><code>CString::from_raw</code></a>. See the safety section\nin <a href=\"../struct.CString.html#method.from_raw\" title=\"associated function std::ffi::CString::from_raw\"><code>CString::from_raw</code></a>.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ffi::CString;\n\n<span class=\"kw\">let </span>c_string = CString::new(<span class=\"string\">\"foo\"</span>).expect(<span class=\"string\">\"CString::new failed\"</span>);\n\n<span class=\"kw\">let </span>ptr = c_string.into_raw();\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"macro\">assert_eq!</span>(<span class=\"string\">b'f'</span>, <span class=\"kw-2\">*</span>ptr <span class=\"kw\">as </span>u8);\n    <span class=\"macro\">assert_eq!</span>(<span class=\"string\">b'o'</span>, <span class=\"kw-2\">*</span>ptr.add(<span class=\"number\">1</span>) <span class=\"kw\">as </span>u8);\n    <span class=\"macro\">assert_eq!</span>(<span class=\"string\">b'o'</span>, <span class=\"kw-2\">*</span>ptr.add(<span class=\"number\">2</span>) <span class=\"kw\">as </span>u8);\n    <span class=\"macro\">assert_eq!</span>(<span class=\"string\">b'\\0'</span>, <span class=\"kw-2\">*</span>ptr.add(<span class=\"number\">3</span>) <span class=\"kw\">as </span>u8);\n\n    <span class=\"comment\">// retake pointer to free memory\n    </span><span class=\"kw\">let _ </span>= CString::from_raw(ptr);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::CString;%0A++++%0A++++let+c_string+=+CString::new(%22foo%22).expect(%22CString::new+failed%22);%0A++++%0A++++let+ptr+=+c_string.into_raw();%0A++++%0A++++unsafe+%7B%0A++++++++assert_eq!(b'f',+*ptr+as+u8);%0A++++++++assert_eq!(b'o',+*ptr.add(1)+as+u8);%0A++++++++assert_eq!(b'o',+*ptr.add(2)+as+u8);%0A++++++++assert_eq!(b'%5C0',+*ptr.add(3)+as+u8);%0A++++%0A++++++++//+retake+pointer+to+free+memory%0A++++++++let+_+=+CString::from_raw(ptr);%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_string\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0\">1.7.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#476\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.into_string\" class=\"fn\">into_string</a>(self) -&gt; <a class=\"enum\" href=\"../../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"../../string/struct.String.html\" title=\"struct std::string::String\">String</a>, <a class=\"struct\" href=\"struct.IntoStringError.html\" title=\"struct std::ffi::c_str::IntoStringError\">IntoStringError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts the <code>CString</code> into a <a href=\"../../string/struct.String.html\" title=\"struct std::string::String\"><code>String</code></a> if it contains valid UTF-8 data.</p>\n<p>On failure, ownership of the original <code>CString</code> is returned.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ffi::CString;\n\n<span class=\"kw\">let </span>valid_utf8 = <span class=\"macro\">vec!</span>[<span class=\"string\">b'f'</span>, <span class=\"string\">b'o'</span>, <span class=\"string\">b'o'</span>];\n<span class=\"kw\">let </span>cstring = CString::new(valid_utf8).expect(<span class=\"string\">\"CString::new failed\"</span>);\n<span class=\"macro\">assert_eq!</span>(cstring.into_string().expect(<span class=\"string\">\"into_string() call failed\"</span>), <span class=\"string\">\"foo\"</span>);\n\n<span class=\"kw\">let </span>invalid_utf8 = <span class=\"macro\">vec!</span>[<span class=\"string\">b'f'</span>, <span class=\"number\">0xff</span>, <span class=\"string\">b'o'</span>, <span class=\"string\">b'o'</span>];\n<span class=\"kw\">let </span>cstring = CString::new(invalid_utf8).expect(<span class=\"string\">\"CString::new failed\"</span>);\n<span class=\"kw\">let </span>err = cstring.into_string().err().expect(<span class=\"string\">\"into_string().err() failed\"</span>);\n<span class=\"macro\">assert_eq!</span>(err.utf8_error().valid_up_to(), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::CString;%0A++++%0A++++let+valid_utf8+=+vec!%5Bb'f',+b'o',+b'o'%5D;%0A++++let+cstring+=+CString::new(valid_utf8).expect(%22CString::new+failed%22);%0A++++assert_eq!(cstring.into_string().expect(%22into_string()+call+failed%22),+%22foo%22);%0A++++%0A++++let+invalid_utf8+=+vec!%5Bb'f',+0xff,+b'o',+b'o'%5D;%0A++++let+cstring+=+CString::new(invalid_utf8).expect(%22CString::new+failed%22);%0A++++let+err+=+cstring.into_string().err().expect(%22into_string().err()+failed%22);%0A++++assert_eq!(err.utf8_error().valid_up_to(),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_bytes\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0\">1.7.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#500\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.into_bytes\" class=\"fn\">into_bytes</a>(self) -&gt; <a class=\"struct\" href=\"../../vec/struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"../../primitive.u8.html\">u8</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec<u8>\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Consumes the <code>CString</code> and returns the underlying byte buffer.</p>\n<p>The returned buffer does <strong>not</strong> contain the trailing nul\nterminator, and it is guaranteed to not have any interior nul\nbytes.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ffi::CString;\n\n<span class=\"kw\">let </span>c_string = CString::new(<span class=\"string\">\"foo\"</span>).expect(<span class=\"string\">\"CString::new failed\"</span>);\n<span class=\"kw\">let </span>bytes = c_string.into_bytes();\n<span class=\"macro\">assert_eq!</span>(bytes, <span class=\"macro\">vec!</span>[<span class=\"string\">b'f'</span>, <span class=\"string\">b'o'</span>, <span class=\"string\">b'o'</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::CString;%0A++++%0A++++let+c_string+=+CString::new(%22foo%22).expect(%22CString::new+failed%22);%0A++++let+bytes+=+c_string.into_bytes();%0A++++assert_eq!(bytes,+vec!%5Bb'f',+b'o',+b'o'%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_bytes_with_nul\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0\">1.7.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#521\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.into_bytes_with_nul\" class=\"fn\">into_bytes_with_nul</a>(self) -&gt; <a class=\"struct\" href=\"../../vec/struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"../../primitive.u8.html\">u8</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec<u8>\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Equivalent to <a href=\"../struct.CString.html#method.into_bytes\" title=\"method std::ffi::CString::into_bytes\"><code>CString::into_bytes()</code></a> except that the\nreturned vector includes the trailing nul terminator.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ffi::CString;\n\n<span class=\"kw\">let </span>c_string = CString::new(<span class=\"string\">\"foo\"</span>).expect(<span class=\"string\">\"CString::new failed\"</span>);\n<span class=\"kw\">let </span>bytes = c_string.into_bytes_with_nul();\n<span class=\"macro\">assert_eq!</span>(bytes, <span class=\"macro\">vec!</span>[<span class=\"string\">b'f'</span>, <span class=\"string\">b'o'</span>, <span class=\"string\">b'o'</span>, <span class=\"string\">b'\\0'</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::CString;%0A++++%0A++++let+c_string+=+CString::new(%22foo%22).expect(%22CString::new+failed%22);%0A++++let+bytes+=+c_string.into_bytes_with_nul();%0A++++assert_eq!(bytes,+vec!%5Bb'f',+b'o',+b'o',+b'%5C0'%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_bytes\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#544\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.as_bytes\" class=\"fn\">as_bytes</a>(&amp;self) -&gt; &amp;[<a class=\"primitive\" href=\"../../primitive.u8.html\">u8</a>] <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;[u8]\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns the contents of this <code>CString</code> as a slice of bytes.</p>\n<p>The returned slice does <strong>not</strong> contain the trailing nul\nterminator, and it is guaranteed to not have any interior nul\nbytes. If you need the nul terminator, use\n<a href=\"../struct.CString.html#method.as_bytes_with_nul\" title=\"method std::ffi::CString::as_bytes_with_nul\"><code>CString::as_bytes_with_nul</code></a> instead.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ffi::CString;\n\n<span class=\"kw\">let </span>c_string = CString::new(<span class=\"string\">\"foo\"</span>).expect(<span class=\"string\">\"CString::new failed\"</span>);\n<span class=\"kw\">let </span>bytes = c_string.as_bytes();\n<span class=\"macro\">assert_eq!</span>(bytes, <span class=\"kw-2\">&amp;</span>[<span class=\"string\">b'f'</span>, <span class=\"string\">b'o'</span>, <span class=\"string\">b'o'</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::CString;%0A++++%0A++++let+c_string+=+CString::new(%22foo%22).expect(%22CString::new+failed%22);%0A++++let+bytes+=+c_string.as_bytes();%0A++++assert_eq!(bytes,+%26%5Bb'f',+b'o',+b'o'%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_bytes_with_nul\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#564\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.as_bytes_with_nul\" class=\"fn\">as_bytes_with_nul</a>(&amp;self) -&gt; &amp;[<a class=\"primitive\" href=\"../../primitive.u8.html\">u8</a>] <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;[u8]\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Equivalent to <a href=\"../struct.CString.html#method.as_bytes\" title=\"method std::ffi::CString::as_bytes\"><code>CString::as_bytes()</code></a> except that the\nreturned slice includes the trailing nul terminator.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ffi::CString;\n\n<span class=\"kw\">let </span>c_string = CString::new(<span class=\"string\">\"foo\"</span>).expect(<span class=\"string\">\"CString::new failed\"</span>);\n<span class=\"kw\">let </span>bytes = c_string.as_bytes_with_nul();\n<span class=\"macro\">assert_eq!</span>(bytes, <span class=\"kw-2\">&amp;</span>[<span class=\"string\">b'f'</span>, <span class=\"string\">b'o'</span>, <span class=\"string\">b'o'</span>, <span class=\"string\">b'\\0'</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::CString;%0A++++%0A++++let+c_string+=+CString::new(%22foo%22).expect(%22CString::new+failed%22);%0A++++let+bytes+=+c_string.as_bytes_with_nul();%0A++++assert_eq!(bytes,+%26%5Bb'f',+b'o',+b'o',+b'%5C0'%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_c_str\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#583\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.as_c_str\" class=\"fn\">as_c_str</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"../struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a></h4></section></summary><div class=\"docblock\"><p>Extracts a <a href=\"../struct.CStr.html\" title=\"struct std::ffi::CStr\"><code>CStr</code></a> slice containing the entire string.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ffi::{CString, CStr};\n\n<span class=\"kw\">let </span>c_string = CString::new(<span class=\"string\">b\"foo\"</span>.to_vec()).expect(<span class=\"string\">\"CString::new failed\"</span>);\n<span class=\"kw\">let </span>cstr = c_string.as_c_str();\n<span class=\"macro\">assert_eq!</span>(cstr,\n           CStr::from_bytes_with_nul(<span class=\"string\">b\"foo\\0\"</span>).expect(<span class=\"string\">\"CStr::from_bytes_with_nul failed\"</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::%7BCString,+CStr%7D;%0A++++%0A++++let+c_string+=+CString::new(b%22foo%22.to_vec()).expect(%22CString::new+failed%22);%0A++++let+cstr+=+c_string.as_c_str();%0A++++assert_eq!(cstr,%0A+++++++++++++++CStr::from_bytes_with_nul(b%22foo%5C0%22).expect(%22CStr::from_bytes_with_nul+failed%22));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_boxed_c_str\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#601\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.into_boxed_c_str\" class=\"fn\">into_boxed_c_str</a>(self) -&gt; <a class=\"struct\" href=\"../../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"struct\" href=\"../struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts this <code>CString</code> into a boxed <a href=\"../struct.CStr.html\" title=\"struct std::ffi::CStr\"><code>CStr</code></a>.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ffi::{CString, CStr};\n\n<span class=\"kw\">let </span>c_string = CString::new(<span class=\"string\">b\"foo\"</span>.to_vec()).expect(<span class=\"string\">\"CString::new failed\"</span>);\n<span class=\"kw\">let </span>boxed = c_string.into_boxed_c_str();\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;*</span>boxed,\n           CStr::from_bytes_with_nul(<span class=\"string\">b\"foo\\0\"</span>).expect(<span class=\"string\">\"CStr::from_bytes_with_nul failed\"</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::%7BCString,+CStr%7D;%0A++++%0A++++let+c_string+=+CString::new(b%22foo%22.to_vec()).expect(%22CString::new+failed%22);%0A++++let+boxed+=+c_string.into_boxed_c_str();%0A++++assert_eq!(%26*boxed,%0A+++++++++++++++CStr::from_bytes_with_nul(b%22foo%5C0%22).expect(%22CStr::from_bytes_with_nul+failed%22));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_vec_with_nul_unchecked\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.58.0\">1.58.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#635\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.from_vec_with_nul_unchecked\" class=\"fn\">from_vec_with_nul_unchecked</a>(v: <a class=\"struct\" href=\"../../vec/struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"../../primitive.u8.html\">u8</a>&gt;) -&gt; <a class=\"struct\" href=\"../struct.CString.html\" title=\"struct std::ffi::CString\">CString</a></h4></section></summary><div class=\"docblock\"><p>Converts a <code><a href=\"../../vec/struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;<a href=\"../../primitive.u8.html\" title=\"primitive u8\">u8</a>&gt;</code> to a <a href=\"../struct.CString.html\" title=\"struct std::ffi::CString\"><code>CString</code></a> without checking the\ninvariants on the given <a href=\"../../vec/struct.Vec.html\" title=\"struct std::vec::Vec\"><code>Vec</code></a>.</p>\n<h5 id=\"safety-2\"><a class=\"doc-anchor\" href=\"#safety-2\">§</a>Safety</h5>\n<p>The given <a href=\"../../vec/struct.Vec.html\" title=\"struct std::vec::Vec\"><code>Vec</code></a> <strong>must</strong> have one nul byte as its last element.\nThis means it cannot be empty nor have any other nul byte anywhere else.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ffi::CString;\n<span class=\"macro\">assert_eq!</span>(\n    <span class=\"kw\">unsafe </span>{ CString::from_vec_with_nul_unchecked(<span class=\"string\">b\"abc\\0\"</span>.to_vec()) },\n    <span class=\"kw\">unsafe </span>{ CString::from_vec_unchecked(<span class=\"string\">b\"abc\"</span>.to_vec()) }\n);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::CString;%0A++++assert_eq!(%0A++++++++unsafe+%7B+CString::from_vec_with_nul_unchecked(b%22abc%5C0%22.to_vec())+%7D,%0A++++++++unsafe+%7B+CString::from_vec_unchecked(b%22abc%22.to_vec())+%7D%0A++++);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_vec_with_nul\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.58.0\">1.58.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#678\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.from_vec_with_nul\" class=\"fn\">from_vec_with_nul</a>(v: <a class=\"struct\" href=\"../../vec/struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"../../primitive.u8.html\">u8</a>&gt;) -&gt; <a class=\"enum\" href=\"../../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"../struct.CString.html\" title=\"struct std::ffi::CString\">CString</a>, <a class=\"struct\" href=\"struct.FromVecWithNulError.html\" title=\"struct std::ffi::c_str::FromVecWithNulError\">FromVecWithNulError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to converts a <code><a href=\"../../vec/struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;<a href=\"../../primitive.u8.html\" title=\"primitive u8\">u8</a>&gt;</code> to a <a href=\"../struct.CString.html\" title=\"struct std::ffi::CString\"><code>CString</code></a>.</p>\n<p>Runtime checks are present to ensure there is only one nul byte in the\n<a href=\"../../vec/struct.Vec.html\" title=\"struct std::vec::Vec\"><code>Vec</code></a>, its last element.</p>\n<h5 id=\"errors-1\"><a class=\"doc-anchor\" href=\"#errors-1\">§</a>Errors</h5>\n<p>If a nul byte is present and not the last element or no nul bytes\nis present, an error will be returned.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<p>A successful conversion will produce the same result as <a href=\"../struct.CString.html#method.new\" title=\"associated function std::ffi::CString::new\"><code>CString::new</code></a>\nwhen called without the ending nul byte.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ffi::CString;\n<span class=\"macro\">assert_eq!</span>(\n    CString::from_vec_with_nul(<span class=\"string\">b\"abc\\0\"</span>.to_vec())\n        .expect(<span class=\"string\">\"CString::from_vec_with_nul failed\"</span>),\n    CString::new(<span class=\"string\">b\"abc\"</span>.to_vec()).expect(<span class=\"string\">\"CString::new failed\"</span>)\n);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::CString;%0A++++assert_eq!(%0A++++++++CString::from_vec_with_nul(b%22abc%5C0%22.to_vec())%0A++++++++++++.expect(%22CString::from_vec_with_nul+failed%22),%0A++++++++CString::new(b%22abc%22.to_vec()).expect(%22CString::new+failed%22)%0A++++);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>An incorrectly formatted <a href=\"../../vec/struct.Vec.html\" title=\"struct std::vec::Vec\"><code>Vec</code></a> will produce an error.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ffi::{CString, FromVecWithNulError};\n<span class=\"comment\">// Interior nul byte\n</span><span class=\"kw\">let _</span>: FromVecWithNulError = CString::from_vec_with_nul(<span class=\"string\">b\"a\\0bc\"</span>.to_vec()).unwrap_err();\n<span class=\"comment\">// No nul byte\n</span><span class=\"kw\">let _</span>: FromVecWithNulError = CString::from_vec_with_nul(<span class=\"string\">b\"abc\"</span>.to_vec()).unwrap_err();</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::%7BCString,+FromVecWithNulError%7D;%0A++++//+Interior+nul+byte%0A++++let+_:+FromVecWithNulError+=+CString::from_vec_with_nul(b%22a%5C0bc%22.to_vec()).unwrap_err();%0A++++//+No+nul+byte%0A++++let+_:+FromVecWithNulError+=+CString::from_vec_with_nul(b%22abc%22.to_vec()).unwrap_err();%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details></div><h2 id=\"deref-methods-CStr\" class=\"section-header\"><span>Methods from <a class=\"trait\" href=\"../../ops/trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a>&lt;Target = <a class=\"struct\" href=\"../struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a>&gt;</span><a href=\"#deref-methods-CStr\" class=\"anchor\">§</a></h2><div id=\"deref-methods-CStr-1\" class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_ptr\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ffi/c_str.rs.html#510\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.as_ptr\" class=\"fn\">as_ptr</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../primitive.pointer.html\">*const </a><a class=\"primitive\" href=\"../../primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Returns the inner pointer to this C string.</p>\n<p>The returned pointer will be valid for as long as <code>self</code> is, and points\nto a contiguous region of memory terminated with a 0 byte to represent\nthe end of the string.</p>\n<p>The type of the returned pointer is\n<a href=\"../type.c_char.html\" title=\"type std::ffi::c_char\"><code>*const c_char</code></a>, and whether it’s\nan alias for <code>*const i8</code> or <code>*const u8</code> is platform-specific.</p>\n<p><strong>WARNING</strong></p>\n<p>The returned pointer is read-only; writing to it (including passing it\nto C code that writes to it) causes undefined behavior.</p>\n<p>It is your responsibility to make sure that the underlying memory is not\nfreed too early. For example, the following code will cause undefined\nbehavior when <code>ptr</code> is used inside the <code>unsafe</code> block:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ffi::CString;\n\n<span class=\"comment\">// Do not do this:\n</span><span class=\"kw\">let </span>ptr = CString::new(<span class=\"string\">\"Hello\"</span>).expect(<span class=\"string\">\"CString::new failed\"</span>).as_ptr();\n<span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// `ptr` is dangling\n    </span><span class=\"kw-2\">*</span>ptr;\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Ballow(unused_must_use)%5D+%23!%5Ballow(temporary_cstring_as_ptr)%5D%0Afn+main()+%7B%0A++++use+std::ffi::CString;%0A++++%0A++++//+Do+not+do+this:%0A++++let+ptr+=+CString::new(%22Hello%22).expect(%22CString::new+failed%22).as_ptr();%0A++++unsafe+%7B%0A++++++++//+%60ptr%60+is+dangling%0A++++++++*ptr;%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<p>This happens because the pointer returned by <code>as_ptr</code> does not carry any\nlifetime information and the <code>CString</code> is deallocated immediately after\nthe <code>CString::new(\"Hello\").expect(\"CString::new failed\").as_ptr()</code>\nexpression is evaluated.\nTo fix the problem, bind the <code>CString</code> to a local variable:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ffi::CString;\n\n<span class=\"kw\">let </span>hello = CString::new(<span class=\"string\">\"Hello\"</span>).expect(<span class=\"string\">\"CString::new failed\"</span>);\n<span class=\"kw\">let </span>ptr = hello.as_ptr();\n<span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// `ptr` is valid because `hello` is in scope\n    </span><span class=\"kw-2\">*</span>ptr;\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Ballow(unused_must_use)%5D%0Afn+main()+%7B%0A++++use+std::ffi::CString;%0A++++%0A++++let+hello+=+CString::new(%22Hello%22).expect(%22CString::new+failed%22);%0A++++let+ptr+=+hello.as_ptr();%0A++++unsafe+%7B%0A++++++++//+%60ptr%60+is+valid+because+%60hello%60+is+in+scope%0A++++++++*ptr;%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<p>This way, the lifetime of the <code>CString</code> in <code>hello</code> encompasses\nthe lifetime of <code>ptr</code> and the <code>unsafe</code> block.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.count_bytes\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.79.0\">1.79.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ffi/c_str.rs.html#543\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.count_bytes\" class=\"fn\">count_bytes</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the length of <code>self</code>. Like C’s <code>strlen</code>, this does not include the nul terminator.</p>\n<blockquote>\n<p><strong>Note</strong>: This method is currently implemented as a constant-time\ncast, but it is planned to alter its definition in the future to\nperform the length calculation whenever this method is called.</p>\n</blockquote>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ffi::CStr;\n\n<span class=\"kw\">let </span>cstr = CStr::from_bytes_with_nul(<span class=\"string\">b\"foo\\0\"</span>).unwrap();\n<span class=\"macro\">assert_eq!</span>(cstr.count_bytes(), <span class=\"number\">3</span>);\n\n<span class=\"kw\">let </span>cstr = CStr::from_bytes_with_nul(<span class=\"string\">b\"\\0\"</span>).unwrap();\n<span class=\"macro\">assert_eq!</span>(cstr.count_bytes(), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::CStr;%0A++++%0A++++let+cstr+=+CStr::from_bytes_with_nul(b%22foo%5C0%22).unwrap();%0A++++assert_eq!(cstr.count_bytes(),+3);%0A++++%0A++++let+cstr+=+CStr::from_bytes_with_nul(b%22%5C0%22).unwrap();%0A++++assert_eq!(cstr.count_bytes(),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_empty\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0\">1.71.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ffi/c_str.rs.html#569\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.is_empty\" class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if <code>self.to_bytes()</code> has a length of 0.</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ffi::CStr;\n\n<span class=\"kw\">let </span>cstr = CStr::from_bytes_with_nul(<span class=\"string\">b\"foo\\0\"</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert!</span>(!cstr.is_empty());\n\n<span class=\"kw\">let </span>empty_cstr = CStr::from_bytes_with_nul(<span class=\"string\">b\"\\0\"</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert!</span>(empty_cstr.is_empty());\n<span class=\"macro\">assert!</span>(<span class=\"string\">c\"\"</span>.is_empty());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::ffi::CStr;%0Ause+std::ffi::FromBytesWithNulError;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Result%3C(),+FromBytesWithNulError%3E+%7B%0Alet+cstr+=+CStr::from_bytes_with_nul(b%22foo%5C0%22)?;%0Aassert!(!cstr.is_empty());%0A%0Alet+empty_cstr+=+CStr::from_bytes_with_nul(b%22%5C0%22)?;%0Aassert!(empty_cstr.is_empty());%0Aassert!(c%22%22.is_empty());%0AOk(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_bytes\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ffi/c_str.rs.html#598\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.to_bytes\" class=\"fn\">to_bytes</a>(&amp;self) -&gt; &amp;[<a class=\"primitive\" href=\"../../primitive.u8.html\">u8</a>] <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;[u8]\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Converts this C string to a byte slice.</p>\n<p>The returned slice will <strong>not</strong> contain the trailing nul terminator that this C\nstring has.</p>\n<blockquote>\n<p><strong>Note</strong>: This method is currently implemented as a constant-time\ncast, but it is planned to alter its definition in the future to\nperform the length calculation whenever this method is called.</p>\n</blockquote>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ffi::CStr;\n\n<span class=\"kw\">let </span>cstr = CStr::from_bytes_with_nul(<span class=\"string\">b\"foo\\0\"</span>).expect(<span class=\"string\">\"CStr::from_bytes_with_nul failed\"</span>);\n<span class=\"macro\">assert_eq!</span>(cstr.to_bytes(), <span class=\"string\">b\"foo\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::CStr;%0A++++%0A++++let+cstr+=+CStr::from_bytes_with_nul(b%22foo%5C0%22).expect(%22CStr::from_bytes_with_nul+failed%22);%0A++++assert_eq!(cstr.to_bytes(),+b%22foo%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_bytes_with_nul\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ffi/c_str.rs.html#627\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.to_bytes_with_nul\" class=\"fn\">to_bytes_with_nul</a>(&amp;self) -&gt; &amp;[<a class=\"primitive\" href=\"../../primitive.u8.html\">u8</a>] <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;[u8]\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Converts this C string to a byte slice containing the trailing 0 byte.</p>\n<p>This function is the equivalent of <a href=\"../struct.CStr.html#method.to_bytes\" title=\"method std::ffi::CStr::to_bytes\"><code>CStr::to_bytes</code></a> except that it\nwill retain the trailing nul terminator instead of chopping it off.</p>\n<blockquote>\n<p><strong>Note</strong>: This method is currently implemented as a 0-cost cast, but\nit is planned to alter its definition in the future to perform the\nlength calculation whenever this method is called.</p>\n</blockquote>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ffi::CStr;\n\n<span class=\"kw\">let </span>cstr = CStr::from_bytes_with_nul(<span class=\"string\">b\"foo\\0\"</span>).expect(<span class=\"string\">\"CStr::from_bytes_with_nul failed\"</span>);\n<span class=\"macro\">assert_eq!</span>(cstr.to_bytes_with_nul(), <span class=\"string\">b\"foo\\0\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::CStr;%0A++++%0A++++let+cstr+=+CStr::from_bytes_with_nul(b%22foo%5C0%22).expect(%22CStr::from_bytes_with_nul+failed%22);%0A++++assert_eq!(cstr.to_bytes_with_nul(),+b%22foo%5C0%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bytes\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ffi/c_str.rs.html#649\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.bytes\" class=\"fn\">bytes</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/ffi/c_str/struct.Bytes.html\" title=\"struct core::ffi::c_str::Bytes\">Bytes</a>&lt;'_&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Bytes<'_>\">ⓘ</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>cstr_bytes</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/112115\">#112115</a>)</span></div></span></summary><div class=\"docblock\"><p>Iterates over the bytes in this C string.</p>\n<p>The returned iterator will <strong>not</strong> contain the trailing nul terminator\nthat this C string has.</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(cstr_bytes)]\n</span><span class=\"kw\">use </span>std::ffi::CStr;\n\n<span class=\"kw\">let </span>cstr = CStr::from_bytes_with_nul(<span class=\"string\">b\"foo\\0\"</span>).expect(<span class=\"string\">\"CStr::from_bytes_with_nul failed\"</span>);\n<span class=\"macro\">assert!</span>(cstr.bytes().eq(<span class=\"kw-2\">*</span><span class=\"string\">b\"foo\"</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(cstr_bytes)%5D%0Afn+main()+%7B%0A++++use+std::ffi::CStr;%0A++++%0A++++let+cstr+=+CStr::from_bytes_with_nul(b%22foo%5C0%22).expect(%22CStr::from_bytes_with_nul+failed%22);%0A++++assert!(cstr.bytes().eq(*b%22foo%22));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_str\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ffi/c_str.rs.html#671\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.to_str\" class=\"fn\">to_str</a>(&amp;self) -&gt; <a class=\"enum\" href=\"../../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;&amp;<a class=\"primitive\" href=\"../../primitive.str.html\">str</a>, <a class=\"struct\" href=\"../../str/struct.Utf8Error.html\" title=\"struct std::str::Utf8Error\">Utf8Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Yields a <code>&amp;<a href=\"../../primitive.str.html\" title=\"str\">str</a></code> slice if the <code>CStr</code> contains valid UTF-8.</p>\n<p>If the contents of the <code>CStr</code> are valid UTF-8 data, this\nfunction will return the corresponding <code>&amp;<a href=\"../../primitive.str.html\" title=\"str\">str</a></code> slice. Otherwise,\nit will return an error with details of where UTF-8 validation failed.</p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ffi::CStr;\n\n<span class=\"kw\">let </span>cstr = CStr::from_bytes_with_nul(<span class=\"string\">b\"foo\\0\"</span>).expect(<span class=\"string\">\"CStr::from_bytes_with_nul failed\"</span>);\n<span class=\"macro\">assert_eq!</span>(cstr.to_str(), <span class=\"prelude-val\">Ok</span>(<span class=\"string\">\"foo\"</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::CStr;%0A++++%0A++++let+cstr+=+CStr::from_bytes_with_nul(b%22foo%5C0%22).expect(%22CStr::from_bytes_with_nul+failed%22);%0A++++assert_eq!(cstr.to_str(),+Ok(%22foo%22));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_string_lossy\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#1109\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.to_string_lossy\" class=\"fn\">to_string_lossy</a>(&amp;self) -&gt; <a class=\"enum\" href=\"../../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'_, <a class=\"primitive\" href=\"../../primitive.str.html\">str</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <code>CStr</code> into a <code><a href=\"../../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;<a href=\"../../primitive.str.html\" title=\"str\">str</a>&gt;</code>.</p>\n<p>If the contents of the <code>CStr</code> are valid UTF-8 data, this\nfunction will return a <code><a href=\"../../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>::<a href=\"../../borrow/enum.Cow.html#variant.Borrowed\" title=\"variant std::borrow::Cow::Borrowed\">Borrowed</a>(&amp;<a href=\"../../primitive.str.html\" title=\"str\">str</a>)</code>\nwith the corresponding <code>&amp;<a href=\"../../primitive.str.html\" title=\"str\">str</a></code> slice. Otherwise, it will\nreplace any invalid UTF-8 sequences with\n<a href=\"../../char/constant.REPLACEMENT_CHARACTER.html\" title=\"std::char::REPLACEMENT_CHARACTER\"><code>U+FFFD REPLACEMENT CHARACTER</code></a> and return a\n<code><a href=\"../../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>::<a href=\"../../borrow/enum.Cow.html#variant.Owned\" title=\"variant std::borrow::Cow::Owned\">Owned</a>(&amp;<a href=\"../../primitive.str.html\" title=\"str\">str</a>)</code> with the result.</p>\n<h5 id=\"examples-19\"><a class=\"doc-anchor\" href=\"#examples-19\">§</a>Examples</h5>\n<p>Calling <code>to_string_lossy</code> on a <code>CStr</code> containing valid UTF-8. The leading\n<code>c</code> on the string literal denotes a <code>CStr</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::borrow::Cow;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">c\"Hello World\"</span>.to_string_lossy(), Cow::Borrowed(<span class=\"string\">\"Hello World\"</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::borrow::Cow;%0A++++%0A++++assert_eq!(c%22Hello+World%22.to_string_lossy(),+Cow::Borrowed(%22Hello+World%22));%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Calling <code>to_string_lossy</code> on a <code>CStr</code> containing invalid UTF-8:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::borrow::Cow;\n\n<span class=\"macro\">assert_eq!</span>(\n    <span class=\"string\">c\"Hello \\xF0\\x90\\x80World\"</span>.to_string_lossy(),\n    Cow::Owned(String::from(<span class=\"string\">\"Hello �World\"</span>)) <span class=\"kw\">as </span>Cow&lt;<span class=\"lifetime\">'_</span>, str&gt;\n);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::borrow::Cow;%0A++++%0A++++assert_eq!(%0A++++++++c%22Hello+%5CxF0%5Cx90%5Cx80World%22.to_string_lossy(),%0A++++++++Cow::Owned(String::from(%22Hello+%EF%BF%BDWorld%22))+as+Cow%3C'_,+str%3E%0A++++);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">§</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AsRef%3CCStr%3E-for-CString\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0\">1.7.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#1061\">source</a></span><a href=\"#impl-AsRef%3CCStr%3E-for-CString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a>&gt; for <a class=\"struct\" href=\"../struct.CString.html\" title=\"struct std::ffi::CString\">CString</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#1063\">source</a><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"../struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a></h4></section></summary><div class=\"docblock\">Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Borrow%3CCStr%3E-for-CString\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#749\">source</a></span><a href=\"#impl-Borrow%3CCStr%3E-for-CString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;<a class=\"struct\" href=\"../struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a>&gt; for <a class=\"struct\" href=\"../struct.CString.html\" title=\"struct std::ffi::CString\">CString</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#751\">source</a><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"../struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"../../borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Clone-for-CString\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0\">1.64.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#112\">source</a></span><a href=\"#impl-Clone-for-CString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"../struct.CString.html\" title=\"struct std::ffi::CString\">CString</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#112\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../struct.CString.html\" title=\"struct std::ffi::CString\">CString</a></h4></section></summary><div class=\"docblock\">Returns a copy of the value. <a href=\"../../clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class=\"docblock\">Performs copy-assignment from <code>source</code>. <a href=\"../../clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-CString\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#722\">source</a></span><a href=\"#impl-Debug-for-CString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"../struct.CString.html\" title=\"struct std::ffi::CString\">CString</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#723\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"../../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"../../fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../../fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Default-for-CString\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#740\">source</a></span><a href=\"#impl-Default-for-CString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for <a class=\"struct\" href=\"../struct.CString.html\" title=\"struct std::ffi::CString\">CString</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#742\">source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"struct\" href=\"../struct.CString.html\" title=\"struct std::ffi::CString\">CString</a></h4></section></summary><div class=\"docblock\"><p>Creates an empty <code>CString</code>.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Deref-for-CString\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#712\">source</a></span><a href=\"#impl-Deref-for-CString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../ops/trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a> for <a class=\"struct\" href=\"../struct.CString.html\" title=\"struct std::ffi::CString\">CString</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Target\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Target\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../../ops/trait.Deref.html#associatedtype.Target\" class=\"associatedtype\">Target</a> = <a class=\"struct\" href=\"../struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a></h4></section></summary><div class=\"docblock\">The resulting type after dereferencing.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.deref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#716\">source</a><a href=\"#method.deref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../ops/trait.Deref.html#tymethod.deref\" class=\"fn\">deref</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"../struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a></h4></section></summary><div class=\"docblock\">Dereferences the value.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Drop-for-CString\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.13.0\">1.13.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#702\">source</a></span><a href=\"#impl-Drop-for-CString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../ops/trait.Drop.html\" title=\"trait std::ops::Drop\">Drop</a> for <a class=\"struct\" href=\"../struct.CString.html\" title=\"struct std::ffi::CString\">CString</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.drop\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#704\">source</a><a href=\"#method.drop\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../ops/trait.Drop.html#tymethod.drop\" class=\"fn\">drop</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\">Executes the destructor for this type. <a href=\"../../ops/trait.Drop.html#tymethod.drop\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%26CStr%3E-for-CString\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0\">1.7.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#1042\">source</a></span><a href=\"#impl-From%3C%26CStr%3E-for-CString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;&amp;<a class=\"struct\" href=\"../struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a>&gt; for <a class=\"struct\" href=\"../struct.CString.html\" title=\"struct std::ffi::CString\">CString</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#1045\">source</a><a href=\"#method.from-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: &amp;<a class=\"struct\" href=\"../struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a>) -&gt; <a class=\"struct\" href=\"../struct.CString.html\" title=\"struct std::ffi::CString\">CString</a></h4></section></summary><div class=\"docblock\"><p>Converts a <code>&amp;<a href=\"../struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a></code> into a <a href=\"../struct.CString.html\" title=\"struct std::ffi::CString\"><code>CString</code></a>\nby copying the contents into a new allocation.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%26CString%3E-for-Cow%3C'a,+CStr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#859\">source</a></span><a href=\"#impl-From%3C%26CString%3E-for-Cow%3C'a,+CStr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;&amp;'a <a class=\"struct\" href=\"../struct.CString.html\" title=\"struct std::ffi::CString\">CString</a>&gt; for <a class=\"enum\" href=\"../../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"struct\" href=\"../struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#862\">source</a><a href=\"#method.from-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: &amp;'a <a class=\"struct\" href=\"../struct.CString.html\" title=\"struct std::ffi::CString\">CString</a>) -&gt; <a class=\"enum\" href=\"../../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"struct\" href=\"../struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <code>&amp;</code><a href=\"../struct.CString.html\" title=\"struct std::ffi::CString\"><code>CString</code></a> into a borrowed <a href=\"../../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\"><code>Cow</code></a> without copying or allocating.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CBox%3CCStr%3E%3E-for-CString\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.18.0\">1.18.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#791\">source</a></span><a href=\"#impl-From%3CBox%3CCStr%3E%3E-for-CString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"../../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"struct\" href=\"../struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a>&gt;&gt; for <a class=\"struct\" href=\"../struct.CString.html\" title=\"struct std::ffi::CString\">CString</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-9\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#794\">source</a><a href=\"#method.from-9\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: <a class=\"struct\" href=\"../../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"struct\" href=\"../struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a>&gt;) -&gt; <a class=\"struct\" href=\"../struct.CString.html\" title=\"struct std::ffi::CString\">CString</a></h4></section></summary><div class=\"docblock\"><p>Converts a <code><a href=\"../../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a href=\"../struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a>&gt;</code> into a <a href=\"../struct.CString.html\" title=\"struct std::ffi::CString\"><code>CString</code></a> without copying or allocating.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CCString%3E-for-Arc%3CCStr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.24.0\">1.24.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#869\">source</a></span><a href=\"#impl-From%3CCString%3E-for-Arc%3CCStr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"../struct.CString.html\" title=\"struct std::ffi::CString\">CString</a>&gt; for <a class=\"struct\" href=\"../../sync/struct.Arc.html\" title=\"struct std::sync::Arc\">Arc</a>&lt;<a class=\"struct\" href=\"../struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#873\">source</a><a href=\"#method.from-5\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: <a class=\"struct\" href=\"../struct.CString.html\" title=\"struct std::ffi::CString\">CString</a>) -&gt; <a class=\"struct\" href=\"../../sync/struct.Arc.html\" title=\"struct std::sync::Arc\">Arc</a>&lt;<a class=\"struct\" href=\"../struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <a href=\"../struct.CString.html\" title=\"struct std::ffi::CString\"><code>CString</code></a> into an <code><a href=\"../../sync/struct.Arc.html\" title=\"struct std::sync::Arc\">Arc</a>&lt;<a href=\"../struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a>&gt;</code> by moving the <a href=\"../struct.CString.html\" title=\"struct std::ffi::CString\"><code>CString</code></a>\ndata into a new <a href=\"../../sync/struct.Arc.html\" title=\"struct std::sync::Arc\"><code>Arc</code></a> buffer.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CCString%3E-for-Box%3CCStr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#832\">source</a></span><a href=\"#impl-From%3CCString%3E-for-Box%3CCStr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"../struct.CString.html\" title=\"struct std::ffi::CString\">CString</a>&gt; for <a class=\"struct\" href=\"../../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"struct\" href=\"../struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#835\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: <a class=\"struct\" href=\"../struct.CString.html\" title=\"struct std::ffi::CString\">CString</a>) -&gt; <a class=\"struct\" href=\"../../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"struct\" href=\"../struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <a href=\"../struct.CString.html\" title=\"struct std::ffi::CString\"><code>CString</code></a> into a <code><a href=\"../../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a href=\"../struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a>&gt;</code> without copying or allocating.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CCString%3E-for-Cow%3C'a,+CStr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#841\">source</a></span><a href=\"#impl-From%3CCString%3E-for-Cow%3C'a,+CStr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"../struct.CString.html\" title=\"struct std::ffi::CString\">CString</a>&gt; for <a class=\"enum\" href=\"../../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"struct\" href=\"../struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#844\">source</a><a href=\"#method.from-7\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: <a class=\"struct\" href=\"../struct.CString.html\" title=\"struct std::ffi::CString\">CString</a>) -&gt; <a class=\"enum\" href=\"../../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"struct\" href=\"../struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <a href=\"../struct.CString.html\" title=\"struct std::ffi::CString\"><code>CString</code></a> into an owned <a href=\"../../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\"><code>Cow</code></a> without copying or allocating.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CCString%3E-for-Rc%3CCStr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.24.0\">1.24.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#892\">source</a></span><a href=\"#impl-From%3CCString%3E-for-Rc%3CCStr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"../struct.CString.html\" title=\"struct std::ffi::CString\">CString</a>&gt; for <a class=\"struct\" href=\"../../rc/struct.Rc.html\" title=\"struct std::rc::Rc\">Rc</a>&lt;<a class=\"struct\" href=\"../struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#896\">source</a><a href=\"#method.from-6\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: <a class=\"struct\" href=\"../struct.CString.html\" title=\"struct std::ffi::CString\">CString</a>) -&gt; <a class=\"struct\" href=\"../../rc/struct.Rc.html\" title=\"struct std::rc::Rc\">Rc</a>&lt;<a class=\"struct\" href=\"../struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <a href=\"../struct.CString.html\" title=\"struct std::ffi::CString\"><code>CString</code></a> into an <code><a href=\"../../rc/struct.Rc.html\" title=\"struct std::rc::Rc\">Rc</a>&lt;<a href=\"../struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a>&gt;</code> by moving the <a href=\"../struct.CString.html\" title=\"struct std::ffi::CString\"><code>CString</code></a>\ndata into a new <a href=\"../../rc/struct.Rc.html\" title=\"struct std::rc::Rc\"><code>Rc</code></a> buffer.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CCString%3E-for-Vec%3Cu8%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0\">1.7.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#729\">source</a></span><a href=\"#impl-From%3CCString%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"../struct.CString.html\" title=\"struct std::ffi::CString\">CString</a>&gt; for <a class=\"struct\" href=\"../../vec/struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"../../primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#734\">source</a><a href=\"#method.from-8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: <a class=\"struct\" href=\"../struct.CString.html\" title=\"struct std::ffi::CString\">CString</a>) -&gt; <a class=\"struct\" href=\"../../vec/struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"../../primitive.u8.html\">u8</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec<u8>\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Converts a <a href=\"../struct.CString.html\" title=\"struct std::ffi::CString\"><code>CString</code></a> into a <code><a href=\"../../vec/struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;<a href=\"../../primitive.u8.html\" title=\"primitive u8\">u8</a>&gt;</code>.</p>\n<p>The conversion consumes the <a href=\"../struct.CString.html\" title=\"struct std::ffi::CString\"><code>CString</code></a>, and removes the terminating NUL byte.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CCow%3C'a,+CStr%3E%3E-for-CString\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#757\">source</a></span><a href=\"#impl-From%3CCow%3C'a,+CStr%3E%3E-for-CString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"enum\" href=\"../../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"struct\" href=\"../struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a>&gt;&gt; for <a class=\"struct\" href=\"../struct.CString.html\" title=\"struct std::ffi::CString\">CString</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#761\">source</a><a href=\"#method.from-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: <a class=\"enum\" href=\"../../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"struct\" href=\"../struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a>&gt;) -&gt; <a class=\"struct\" href=\"../struct.CString.html\" title=\"struct std::ffi::CString\">CString</a></h4></section></summary><div class=\"docblock\"><p>Converts a <code>Cow&lt;'a, CStr&gt;</code> into a <code>CString</code>, by copying the contents if they are\nborrowed.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CVec%3CNonZero%3Cu8%3E%3E%3E-for-CString\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.43.0\">1.43.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#801\">source</a></span><a href=\"#impl-From%3CVec%3CNonZero%3Cu8%3E%3E%3E-for-CString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"../../vec/struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;<a class=\"struct\" href=\"../../num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../primitive.u8.html\">u8</a>&gt;&gt;&gt; for <a class=\"struct\" href=\"../struct.CString.html\" title=\"struct std::ffi::CString\">CString</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#805\">source</a><a href=\"#method.from-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(v: <a class=\"struct\" href=\"../../vec/struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;<a class=\"struct\" href=\"../../num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../primitive.u8.html\">u8</a>&gt;&gt;) -&gt; <a class=\"struct\" href=\"../struct.CString.html\" title=\"struct std::ffi::CString\">CString</a></h4></section></summary><div class=\"docblock\"><p>Converts a <code><a href=\"../../vec/struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;<a href=\"../../num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../../primitive.u8.html\" title=\"primitive u8\">u8</a>&gt;&gt;</code> into a <a href=\"../struct.CString.html\" title=\"struct std::ffi::CString\"><code>CString</code></a> without\ncopying nor checking for inner nul bytes.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Hash-for-CString\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0\">1.64.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#112\">source</a></span><a href=\"#impl-Hash-for-CString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"../struct.CString.html\" title=\"struct std::ffi::CString\">CString</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#112\">source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;__H&gt;(&amp;self, state: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;mut __H</a>)<div class=\"where\">where\n    __H: <a class=\"trait\" href=\"../../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class=\"docblock\">Feeds this value into the given <a href=\"../../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"../../hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#238-240\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"../../primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"../../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"../../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Feeds a slice of this type into the given <a href=\"../../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"../../hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Index%3CRangeFull%3E-for-CString\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0\">1.7.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#1051\">source</a></span><a href=\"#impl-Index%3CRangeFull%3E-for-CString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../ops/trait.Index.html\" title=\"trait std::ops::Index\">Index</a>&lt;<a class=\"struct\" href=\"../../ops/struct.RangeFull.html\" title=\"struct std::ops::RangeFull\">RangeFull</a>&gt; for <a class=\"struct\" href=\"../struct.CString.html\" title=\"struct std::ffi::CString\">CString</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../../ops/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"../struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a></h4></section></summary><div class=\"docblock\">The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.index\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#1055\">source</a><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../ops/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, _index: <a class=\"struct\" href=\"../../ops/struct.RangeFull.html\" title=\"struct std::ops::RangeFull\">RangeFull</a>) -&gt; &amp;<a class=\"struct\" href=\"../struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a></h4></section></summary><div class=\"docblock\">Performs the indexing (<code>container[index]</code>) operation. <a href=\"../../ops/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Ord-for-CString\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0\">1.64.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#112\">source</a></span><a href=\"#impl-Ord-for-CString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"../struct.CString.html\" title=\"struct std::ffi::CString\">CString</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#112\">source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"../struct.CString.html\" title=\"struct std::ffi::CString\">CString</a>) -&gt; <a class=\"enum\" href=\"../../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a></h4></section></summary><div class=\"docblock\">This method returns an <a href=\"../../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"../../cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#856-858\">source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Compares and returns the maximum of two values. <a href=\"../../cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#877-879\">source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Compares and returns the minimum of two values. <a href=\"../../cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#903-906\">source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"../../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>,</div></h4></section></summary><div class=\"docblock\">Restrict a value to a certain interval. <a href=\"../../cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq-for-CString\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0\">1.64.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#112\">source</a></span><a href=\"#impl-PartialEq-for-CString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"../struct.CString.html\" title=\"struct std::ffi::CString\">CString</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#112\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"../struct.CString.html\" title=\"struct std::ffi::CString\">CString</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialOrd-for-CString\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0\">1.64.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#112\">source</a></span><a href=\"#impl-PartialOrd-for-CString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a> for <a class=\"struct\" href=\"../struct.CString.html\" title=\"struct std::ffi::CString\">CString</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#112\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"../struct.CString.html\" title=\"struct std::ffi::CString\">CString</a>) -&gt; <a class=\"enum\" href=\"../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\">This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"../../cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180\">source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"../../cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198\">source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"../../cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215\">source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"../../cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233\">source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"../../cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details><section id=\"impl-Eq-for-CString\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0\">1.64.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#112\">source</a></span><a href=\"#impl-Eq-for-CString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"../struct.CString.html\" title=\"struct std::ffi::CString\">CString</a></h3></section><section id=\"impl-StructuralPartialEq-for-CString\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0\">1.64.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#112\">source</a></span><a href=\"#impl-StructuralPartialEq-for-CString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../marker/trait.StructuralPartialEq.html\" title=\"trait std::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"struct\" href=\"../struct.CString.html\" title=\"struct std::ffi::CString\">CString</a></h3></section></div><h2 id=\"synthetic-implementations\" class=\"section-header\">Auto Trait Implementations<a href=\"#synthetic-implementations\" class=\"anchor\">§</a></h2><div id=\"synthetic-implementations-list\"><section id=\"impl-Freeze-for-CString\" class=\"impl\"><a href=\"#impl-Freeze-for-CString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"struct\" href=\"../struct.CString.html\" title=\"struct std::ffi::CString\">CString</a></h3></section><section id=\"impl-RefUnwindSafe-for-CString\" class=\"impl\"><a href=\"#impl-RefUnwindSafe-for-CString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"struct\" href=\"../struct.CString.html\" title=\"struct std::ffi::CString\">CString</a></h3></section><section id=\"impl-Send-for-CString\" class=\"impl\"><a href=\"#impl-Send-for-CString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"struct\" href=\"../struct.CString.html\" title=\"struct std::ffi::CString\">CString</a></h3></section><section id=\"impl-Sync-for-CString\" class=\"impl\"><a href=\"#impl-Sync-for-CString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"../struct.CString.html\" title=\"struct std::ffi::CString\">CString</a></h3></section><section id=\"impl-Unpin-for-CString\" class=\"impl\"><a href=\"#impl-Unpin-for-CString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"struct\" href=\"../struct.CString.html\" title=\"struct std::ffi::CString\">CString</a></h3></section><section id=\"impl-UnwindSafe-for-CString\" class=\"impl\"><a href=\"#impl-UnwindSafe-for-CString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"../struct.CString.html\" title=\"struct std::ffi::CString\">CString</a></h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">§</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Any-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a><a href=\"#impl-Any-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"../../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#141\">source</a><a href=\"#method.type_id\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../any/trait.Any.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../../any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\">Gets the <code>TypeId</code> of <code>self</code>. <a href=\"../../any/trait.Any.html#tymethod.type_id\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Borrow%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208\">source</a><a href=\"#impl-Borrow%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#210\">source</a><a href=\"#method.borrow-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"../../borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216\">source</a><a href=\"#impl-BorrowMut%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#217\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"../../borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765\">source</a><a href=\"#impl-From%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-10\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768\">source</a><a href=\"#method.from-10\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the argument unchanged.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Into%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750\">source</a><a href=\"#impl-Into%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758\">source</a><a href=\"#method.into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; U</h4></section></summary><div class=\"docblock\"><p>Calls <code>U::from(self)</code>.</p>\n<p>That is, this conversion is whatever the implementation of\n<code><a href=\"../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for U</code> chooses to do.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-ToOwned-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85\">source</a><a href=\"#impl-ToOwned-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../borrow/trait.ToOwned.html\" title=\"trait std::borrow::ToOwned\">ToOwned</a> for T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Owned\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Owned\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../../borrow/trait.ToOwned.html#associatedtype.Owned\" class=\"associatedtype\">Owned</a> = T</h4></section></summary><div class=\"docblock\">The resulting type after obtaining ownership.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_owned\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88\">source</a><a href=\"#method.to_owned\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../borrow/trait.ToOwned.html#tymethod.to_owned\" class=\"fn\">to_owned</a>(&amp;self) -&gt; T</h4></section></summary><div class=\"docblock\">Creates owned data from borrowed data, usually by cloning. <a href=\"../../borrow/trait.ToOwned.html#tymethod.to_owned\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92\">source</a><a href=\"#method.clone_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../borrow/trait.ToOwned.html#method.clone_into\" class=\"fn\">clone_into</a>(&amp;self, target: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;mut T</a>)</h4></section></summary><div class=\"docblock\">Uses borrowed data to replace owned data, usually by cloning. <a href=\"../../borrow/trait.ToOwned.html#method.clone_into\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryFrom%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807\">source</a><a href=\"#impl-TryFrom%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"../../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812\">source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: U) -&gt; <a class=\"enum\" href=\"../../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, &lt;T as <a class=\"trait\" href=\"../../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt;&gt;::<a class=\"associatedtype\" href=\"../../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryInto%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792\">source</a><a href=\"#impl-TryInto%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../../convert/trait.TryInto.html\" title=\"trait std::convert::TryInto\">TryInto</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../../convert/trait.TryInto.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = &lt;U as <a class=\"trait\" href=\"../../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797\">source</a><a href=\"#method.try_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.TryInto.html#tymethod.try_into\" class=\"fn\">try_into</a>(self) -&gt; <a class=\"enum\" href=\"../../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;U, &lt;U as <a class=\"trait\" href=\"../../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details></div><script type=\"text/json\" id=\"notable-traits-data\">{\"&[u8]\":\"<h3>Notable traits for <code>&amp;[<a class=\\\"primitive\\\" href=\\\"../../primitive.u8.html\\\">u8</a>]</code></h3><pre><code><div class=\\\"where\\\">impl <a class=\\\"trait\\\" href=\\\"../../io/trait.Read.html\\\" title=\\\"trait std::io::Read\\\">Read</a> for &amp;[<a class=\\\"primitive\\\" href=\\\"../../primitive.u8.html\\\">u8</a>]</div>\",\"Bytes<'_>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"https://doc.rust-lang.org/1.80.0/core/ffi/c_str/struct.Bytes.html\\\" title=\\\"struct core::ffi::c_str::Bytes\\\">Bytes</a>&lt;'_&gt;</code></h3><pre><code><div class=\\\"where\\\">impl <a class=\\\"trait\\\" href=\\\"../../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"https://doc.rust-lang.org/1.80.0/core/ffi/c_str/struct.Bytes.html\\\" title=\\\"struct core::ffi::c_str::Bytes\\\">Bytes</a>&lt;'_&gt;</div><div class=\\\"where\\\">    type <a href=\\\"../../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = <a class=\\\"primitive\\\" href=\\\"../../primitive.u8.html\\\">u8</a>;</div>\",\"Vec<u8>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"../../vec/struct.Vec.html\\\" title=\\\"struct std::vec::Vec\\\">Vec</a>&lt;<a class=\\\"primitive\\\" href=\\\"../../primitive.u8.html\\\">u8</a>, A&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;A: <a class=\\\"trait\\\" href=\\\"../../alloc/trait.Allocator.html\\\" title=\\\"trait std::alloc::Allocator\\\">Allocator</a>&gt; <a class=\\\"trait\\\" href=\\\"../../io/trait.Write.html\\\" title=\\\"trait std::io::Write\\\">Write</a> for <a class=\\\"struct\\\" href=\\\"../../vec/struct.Vec.html\\\" title=\\\"struct std::vec::Vec\\\">Vec</a>&lt;<a class=\\\"primitive\\\" href=\\\"../../primitive.u8.html\\\">u8</a>, A&gt;</div>\"}</script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:26:14.718Z"
}