{
	"title": "Trait and lifetime bounds - The Rust Reference",
	"url": "https://doc.rust-lang.org/stable/reference/trait-bounds.html",
	"markdown": "# Trait and lifetime bounds - The Rust Reference\n\n> **Syntax**  \n> _TypeParamBounds_ :  \n>    _TypeParamBound_ ( `+` _TypeParamBound_ )\\* `+`?\n> \n> _TypeParamBound_ :  \n>       _Lifetime_ | _TraitBound_\n> \n> _TraitBound_ :  \n>       `?`? [_ForLifetimes_](#higher-ranked-trait-bounds)? [_TypePath_](about:blank/paths.html#paths-in-types)  \n>    | `(` `?`? [_ForLifetimes_](#higher-ranked-trait-bounds)? [_TypePath_](about:blank/paths.html#paths-in-types) `)`\n> \n> _LifetimeBounds_ :  \n>    ( _Lifetime_ `+` )\\* _Lifetime_?\n> \n> _Lifetime_ :  \n>       [LIFETIME\\_OR\\_LABEL](about:blank/tokens.html#lifetimes-and-loop-labels)  \n>    | `'static`  \n>    | `'_`\n\n[Trait](about:blank/items/traits.html#trait-bounds) and lifetime bounds provide a way for [generic items](items/generics.html) to restrict which types and lifetimes are used as their parameters. Bounds can be provided on any type in a [where clause](about:blank/items/generics.html#where-clauses). There are also shorter forms for certain common cases:\n\n-   Bounds written after declaring a [generic parameter](items/generics.html): `fn f<A: Copy>() {}` is the same as `fn f<A>() where A: Copy {}`.\n-   In trait declarations as [supertraits](about:blank/items/traits.html#supertraits): `trait Circle : Shape {}` is equivalent to `trait Circle where Self : Shape {}`.\n-   In trait declarations as bounds on [associated types](about:blank/items/associated-items.html#associated-types): `trait A { type B: Copy; }` is equivalent to `trait A where Self::B: Copy { type B; }`.\n\nBounds on an item must be satisfied when using the item. When type checking and borrow checking a generic item, the bounds can be used to determine that a trait is implemented for a type. For example, given `Ty: Trait`\n\n-   In the body of a generic function, methods from `Trait` can be called on `Ty` values. Likewise associated constants on the `Trait` can be used.\n-   Associated types from `Trait` can be used.\n-   Generic functions and types with a `T: Trait` bounds can be used with `Ty` being used for `T`.\n\n```rust\n#![allow(unused)]\nfn main() {\ntype Surface = i32;\ntrait Shape {\n    fn draw(&self, surface: Surface);\n    fn name() -> &'static str;\n}\n\nfn draw_twice<T: Shape>(surface: Surface, sh: T) {\n    sh.draw(surface);           // Can call method because T: Shape\n    sh.draw(surface);\n}\n\nfn copy_and_draw_twice<T: Copy>(surface: Surface, sh: T) where T: Shape {\n    let shape_copy = sh;        // doesn't move sh because T: Copy\n    draw_twice(surface, sh);    // Can use generic function because T: Shape\n}\n\nstruct Figure<S: Shape>(S, S);\n\nfn name_figure<U: Shape>(\n    figure: Figure<U>,          // Type Figure<U> is well-formed because U: Shape\n) {\n    println!(\n        \"Figure of two {}\",\n        U::name(),              // Can use associated function\n    );\n}\n}\n```\n\nBounds that don't use the item's parameters or [higher-ranked lifetimes](#higher-ranked-trait-bounds) are checked when the item is defined. It is an error for such a bound to be false.\n\n[`Copy`](about:blank/special-types-and-traits.html#copy), [`Clone`](about:blank/special-types-and-traits.html#clone), and [`Sized`](about:blank/special-types-and-traits.html#sized) bounds are also checked for certain generic types when using the item, even if the use does not provide a concrete type. It is an error to have `Copy` or `Clone` as a bound on a mutable reference, [trait object](types/trait-object.html), or [slice](types/slice.html). It is an error to have `Sized` as a bound on a trait object or slice.\n\n```rust\n#![allow(unused)]\nfn main() {\nstruct A<'a, T>\nwhere\n    i32: Default,           // Allowed, but not useful\n    i32: Iterator,          // Error: `i32` is not an iterator\n    &'a mut T: Copy,        // (at use) Error: the trait bound is not satisfied\n    [T]: Sized,             // (at use) Error: size cannot be known at compilation\n{\n    f: &'a T,\n}\nstruct UsesA<'a, T>(A<'a, T>);\n}\n```\n\nTrait and lifetime bounds are also used to name [trait objects](types/trait-object.html).\n\n## [`?Sized`](#sized)\n\n`?` is only used to relax the implicit [`Sized`](about:blank/special-types-and-traits.html#sized) trait bound for [type parameters](types/parameters.html) or [associated types](about:blank/items/associated-items.html#associated-types). `?Sized` may not be used as a bound for other types.\n\n## [Lifetime bounds](#lifetime-bounds)\n\nLifetime bounds can be applied to types or to other lifetimes. The bound `'a: 'b` is usually read as `'a` _outlives_ `'b`. `'a: 'b` means that `'a` lasts at least as long as `'b`, so a reference `&'a ()` is valid whenever `&'b ()` is valid.\n\n```rust\n#![allow(unused)]\nfn main() {\nfn f<'a, 'b>(x: &'a i32, mut y: &'b i32) where 'a: 'b {\n    y = x;                      // &'a i32 is a subtype of &'b i32 because 'a: 'b\n    let r: &'b &'a i32 = &&0;   // &'b &'a i32 is well formed because 'a: 'b\n}\n}\n```\n\n`T: 'a` means that all lifetime parameters of `T` outlive `'a`. For example, if `'a` is an unconstrained lifetime parameter, then `i32: 'static` and `&'static str: 'a` are satisfied, but `Vec<&'a ()>: 'static` is not.\n\n## [Higher-ranked trait bounds](#higher-ranked-trait-bounds)\n\n> _ForLifetimes_ :  \n>    `for` [_GenericParams_](items/generics.html)\n\nTrait bounds may be _higher ranked_ over lifetimes. These bounds specify a bound that is true _for all_ lifetimes. For example, a bound such as `for<'a> &'a T: PartialEq<i32>` would require an implementation like\n\n```rust\n#![allow(unused)]\nfn main() {\nstruct T;\nimpl<'a> PartialEq<i32> for &'a T {\n    // ...\n   fn eq(&self, other: &i32) -> bool {true}\n}\n}\n```\n\nand could then be used to compare a `&'a T` with any lifetime to an `i32`.\n\nOnly a higher-ranked bound can be used here, because the lifetime of the reference is shorter than any possible lifetime parameter on the function:\n\n```rust\n#![allow(unused)]\nfn main() {\nfn call_on_ref_zero<F>(f: F) where for<'a> F: Fn(&'a i32) {\n    let zero = 0;\n    f(&zero);\n}\n}\n```\n\nHigher-ranked lifetimes may also be specified just before the trait: the only difference is the [scope](about:blank/names/scopes.html#higher-ranked-trait-bound-scopes) of the lifetime parameter, which extends only to the end of the following trait instead of the whole bound. This function is equivalent to the last one.\n\n```rust\n#![allow(unused)]\nfn main() {\nfn call_on_ref_zero<F>(f: F) where F: for<'a> Fn(&'a i32) {\n    let zero = 0;\n    f(&zero);\n}\n}\n```\n\n## [Implied bounds](#implied-bounds)\n\nLifetime bounds required for types to be well-formed are sometimes inferred.\n\n```rust\n#![allow(unused)]\nfn main() {\nfn requires_t_outlives_a<'a, T>(x: &'a T) {}\n}\n```\n\nThe type parameter `T` is required to outlive `'a` for the type `&'a T` to be well-formed. This is inferred because the function signature contains the type `&'a T` which is only valid if `T: 'a` holds.\n\nImplied bounds are added for all parameters and outputs of functions. Inside of `requires_t_outlives_a` you can assume `T: 'a` to hold even if you don't explicitly specify this:\n\n```rust\n#![allow(unused)]\nfn main() {\nfn requires_t_outlives_a_not_implied<'a, T: 'a>() {}\n\nfn requires_t_outlives_a<'a, T>(x: &'a T) {\n    // This compiles, because `T: 'a` is implied by\n    // the reference type `&'a T`.\n    requires_t_outlives_a_not_implied::<'a, T>();\n}\n}\n```\n\n```rust\n#![allow(unused)]\nfn main() {\nfn requires_t_outlives_a_not_implied<'a, T: 'a>() {}\nfn not_implied<'a, T>() {\n    // This errors, because `T: 'a` is not implied by\n    // the function signature.\n    requires_t_outlives_a_not_implied::<'a, T>();\n}\n}\n```\n\nOnly lifetime bounds are implied, trait bounds still have to be explicitly added. The following example therefore causes an error:\n\n```rust\n#![allow(unused)]\nfn main() {\nuse std::fmt::Debug;\nstruct IsDebug<T: Debug>(T);\n// error[E0277]: `T` doesn't implement `Debug`\nfn doesnt_specify_t_debug<T>(x: IsDebug<T>) {}\n}\n```\n\nLifetime bounds are also inferred for type definitions and impl blocks for any type:\n\n```rust\n#![allow(unused)]\nfn main() {\nstruct Struct<'a, T> {\n    // This requires `T: 'a` to be well-formed\n    // which is inferred by the compiler.\n    field: &'a T,\n}\n\nenum Enum<'a, T> {\n    // This requires `T: 'a` to be well-formed,\n    // which is inferred by the compiler.\n    //\n    // Note that `T: 'a` is required even when only\n    // using `Enum::OtherVariant`.\n    SomeVariant(&'a T),\n    OtherVariant,\n}\n\ntrait Trait<'a, T: 'a> {}\n\n// This would error because `T: 'a` is not implied by any type\n// in the impl header.\n//     impl<'a, T> Trait<'a, T> for () {}\n\n// This compiles as `T: 'a` is implied by the self type `&'a T`.\nimpl<'a, T> Trait<'a, T> for &'a T {}\n}\n```",
	"html": "<!DOCTYPE html><html lang=\"en\" class=\"light\" dir=\"ltr\"><head>\n        <!-- Book generated using mdBook -->\n        <meta charset=\"UTF-8\">\n        <title>Trait and lifetime bounds - The Rust Reference</title>\n\n\n        <!-- Custom HTML head -->\n        \n        <meta name=\"description\" content=\"\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <meta name=\"theme-color\" content=\"rgb(255, 255, 255)\">\n\n        <link rel=\"icon\" href=\"favicon.svg\">\n        <link rel=\"shortcut icon\" href=\"favicon.png\">\n        <link rel=\"stylesheet\" href=\"css/variables.css\">\n        <link rel=\"stylesheet\" href=\"css/general.css\">\n        <link rel=\"stylesheet\" href=\"css/chrome.css\">\n        <link rel=\"stylesheet\" href=\"css/print.css\" media=\"print\">\n\n        <!-- Fonts -->\n        <link rel=\"stylesheet\" href=\"FontAwesome/css/font-awesome.css\">\n        <link rel=\"stylesheet\" href=\"fonts/fonts.css\">\n\n        <!-- Highlight.js Stylesheets -->\n        <link rel=\"stylesheet\" href=\"highlight.css\">\n        <link rel=\"stylesheet\" href=\"tomorrow-night.css\" disabled=\"\">\n        <link rel=\"stylesheet\" href=\"ayu-highlight.css\" disabled=\"\">\n\n        <!-- Custom theme stylesheets -->\n        <link rel=\"stylesheet\" href=\"theme/reference.css\">\n\n    </head>\n    <body class=\"js sidebar-visible\">\n    <div id=\"body-container\">\n        <!-- Provide site root to javascript -->\n        <script>\n            var path_to_root = \"\";\n            var default_theme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"navy\" : \"light\";\n        </script>\n\n        <!-- Work around some values being stored in localStorage wrapped in quotes -->\n        <script>\n            try {\n                var theme = localStorage.getItem('mdbook-theme');\n                var sidebar = localStorage.getItem('mdbook-sidebar');\n\n                if (theme.startsWith('\"') && theme.endsWith('\"')) {\n                    localStorage.setItem('mdbook-theme', theme.slice(1, theme.length - 1));\n                }\n\n                if (sidebar.startsWith('\"') && sidebar.endsWith('\"')) {\n                    localStorage.setItem('mdbook-sidebar', sidebar.slice(1, sidebar.length - 1));\n                }\n            } catch (e) { }\n        </script>\n\n        <!-- Set the theme before any content is loaded, prevents flash -->\n        <script>\n            var theme;\n            try { theme = localStorage.getItem('mdbook-theme'); } catch(e) { }\n            if (theme === null || theme === undefined) { theme = default_theme; }\n            var html = document.querySelector('html');\n            html.classList.remove('light')\n            html.classList.add(theme);\n            var body = document.querySelector('body');\n            body.classList.remove('no-js')\n            body.classList.add('js');\n        </script>\n\n        <input type=\"checkbox\" id=\"sidebar-toggle-anchor\" class=\"hidden\">\n\n        <!-- Hide / unhide sidebar before it is displayed -->\n        <script>\n            var body = document.querySelector('body');\n            var sidebar = null;\n            var sidebar_toggle = document.getElementById(\"sidebar-toggle-anchor\");\n            if (document.body.clientWidth >= 1080) {\n                try { sidebar = localStorage.getItem('mdbook-sidebar'); } catch(e) { }\n                sidebar = sidebar || 'visible';\n            } else {\n                sidebar = 'hidden';\n            }\n            sidebar_toggle.checked = sidebar === 'visible';\n            body.classList.remove('sidebar-visible');\n            body.classList.add(\"sidebar-\" + sidebar);\n        </script>\n\n        <nav id=\"sidebar\" class=\"sidebar\" aria-label=\"Table of contents\" aria-hidden=\"false\">\n            <div class=\"sidebar-scrollbox\">\n                <ol class=\"chapter\"><li class=\"chapter-item expanded affix \"><a href=\"introduction.html\" tabindex=\"0\">Introduction</a></li><li class=\"chapter-item expanded \"><a href=\"notation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.</strong> Notation</a></li><li class=\"chapter-item expanded \"><a href=\"lexical-structure.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.</strong> Lexical structure</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"input-format.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.1.</strong> Input format</a></li><li class=\"chapter-item expanded \"><a href=\"keywords.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.2.</strong> Keywords</a></li><li class=\"chapter-item expanded \"><a href=\"identifiers.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.3.</strong> Identifiers</a></li><li class=\"chapter-item expanded \"><a href=\"comments.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.4.</strong> Comments</a></li><li class=\"chapter-item expanded \"><a href=\"whitespace.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.5.</strong> Whitespace</a></li><li class=\"chapter-item expanded \"><a href=\"tokens.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.6.</strong> Tokens</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"macros.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.</strong> Macros</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"macros-by-example.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.1.</strong> Macros By Example</a></li><li class=\"chapter-item expanded \"><a href=\"procedural-macros.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.2.</strong> Procedural Macros</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"crates-and-source-files.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.</strong> Crates and source files</a></li><li class=\"chapter-item expanded \"><a href=\"conditional-compilation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.</strong> Conditional compilation</a></li><li class=\"chapter-item expanded \"><a href=\"items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.</strong> Items</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"items/modules.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.1.</strong> Modules</a></li><li class=\"chapter-item expanded \"><a href=\"items/extern-crates.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.2.</strong> Extern crates</a></li><li class=\"chapter-item expanded \"><a href=\"items/use-declarations.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.3.</strong> Use declarations</a></li><li class=\"chapter-item expanded \"><a href=\"items/functions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.4.</strong> Functions</a></li><li class=\"chapter-item expanded \"><a href=\"items/type-aliases.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.5.</strong> Type aliases</a></li><li class=\"chapter-item expanded \"><a href=\"items/structs.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.6.</strong> Structs</a></li><li class=\"chapter-item expanded \"><a href=\"items/enumerations.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.7.</strong> Enumerations</a></li><li class=\"chapter-item expanded \"><a href=\"items/unions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.8.</strong> Unions</a></li><li class=\"chapter-item expanded \"><a href=\"items/constant-items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.9.</strong> Constant items</a></li><li class=\"chapter-item expanded \"><a href=\"items/static-items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.10.</strong> Static items</a></li><li class=\"chapter-item expanded \"><a href=\"items/traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.11.</strong> Traits</a></li><li class=\"chapter-item expanded \"><a href=\"items/implementations.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.12.</strong> Implementations</a></li><li class=\"chapter-item expanded \"><a href=\"items/external-blocks.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.13.</strong> External blocks</a></li><li class=\"chapter-item expanded \"><a href=\"items/generics.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.14.</strong> Generic parameters</a></li><li class=\"chapter-item expanded \"><a href=\"items/associated-items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.15.</strong> Associated Items</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"attributes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.</strong> Attributes</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"attributes/testing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.1.</strong> Testing</a></li><li class=\"chapter-item expanded \"><a href=\"attributes/derive.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.2.</strong> Derive</a></li><li class=\"chapter-item expanded \"><a href=\"attributes/diagnostics.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.3.</strong> Diagnostics</a></li><li class=\"chapter-item expanded \"><a href=\"attributes/codegen.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.4.</strong> Code generation</a></li><li class=\"chapter-item expanded \"><a href=\"attributes/limits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.5.</strong> Limits</a></li><li class=\"chapter-item expanded \"><a href=\"attributes/type_system.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.6.</strong> Type System</a></li><li class=\"chapter-item expanded \"><a href=\"attributes/debugger.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.7.</strong> Debugger</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"statements-and-expressions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.</strong> Statements and expressions</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"statements.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.1.</strong> Statements</a></li><li class=\"chapter-item expanded \"><a href=\"expressions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.</strong> Expressions</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"expressions/literal-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.1.</strong> Literal expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/path-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.2.</strong> Path expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/block-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.3.</strong> Block expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/operator-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.4.</strong> Operator expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/grouped-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.5.</strong> Grouped expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/array-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.6.</strong> Array and index expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/tuple-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.7.</strong> Tuple and index expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/struct-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.8.</strong> Struct expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/call-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.9.</strong> Call expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/method-call-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.10.</strong> Method call expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/field-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.11.</strong> Field access expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/closure-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.12.</strong> Closure expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/loop-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.13.</strong> Loop expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/range-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.14.</strong> Range expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/if-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.15.</strong> If and if let expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/match-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.16.</strong> Match expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/return-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.17.</strong> Return expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/await-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.18.</strong> Await expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/underscore-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.19.</strong> Underscore expressions</a></li></ol></li></ol></li><li class=\"chapter-item expanded \"><a href=\"patterns.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.</strong> Patterns</a></li><li class=\"chapter-item expanded \"><a href=\"type-system.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.</strong> Type system</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"types.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.</strong> Types</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"types/boolean.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.1.</strong> Boolean type</a></li><li class=\"chapter-item expanded \"><a href=\"types/numeric.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.2.</strong> Numeric types</a></li><li class=\"chapter-item expanded \"><a href=\"types/textual.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.3.</strong> Textual types</a></li><li class=\"chapter-item expanded \"><a href=\"types/never.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.4.</strong> Never type</a></li><li class=\"chapter-item expanded \"><a href=\"types/tuple.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.5.</strong> Tuple types</a></li><li class=\"chapter-item expanded \"><a href=\"types/array.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.6.</strong> Array types</a></li><li class=\"chapter-item expanded \"><a href=\"types/slice.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.7.</strong> Slice types</a></li><li class=\"chapter-item expanded \"><a href=\"types/struct.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.8.</strong> Struct types</a></li><li class=\"chapter-item expanded \"><a href=\"types/enum.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.9.</strong> Enumerated types</a></li><li class=\"chapter-item expanded \"><a href=\"types/union.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.10.</strong> Union types</a></li><li class=\"chapter-item expanded \"><a href=\"types/function-item.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.11.</strong> Function item types</a></li><li class=\"chapter-item expanded \"><a href=\"types/closure.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.12.</strong> Closure types</a></li><li class=\"chapter-item expanded \"><a href=\"types/pointer.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.13.</strong> Pointer types</a></li><li class=\"chapter-item expanded \"><a href=\"types/function-pointer.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.14.</strong> Function pointer types</a></li><li class=\"chapter-item expanded \"><a href=\"types/trait-object.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.15.</strong> Trait object types</a></li><li class=\"chapter-item expanded \"><a href=\"types/impl-trait.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.16.</strong> Impl trait type</a></li><li class=\"chapter-item expanded \"><a href=\"types/parameters.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.17.</strong> Type parameters</a></li><li class=\"chapter-item expanded \"><a href=\"types/inferred.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.18.</strong> Inferred type</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"dynamically-sized-types.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.2.</strong> Dynamically Sized Types</a></li><li class=\"chapter-item expanded \"><a href=\"type-layout.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.3.</strong> Type layout</a></li><li class=\"chapter-item expanded \"><a href=\"interior-mutability.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.4.</strong> Interior mutability</a></li><li class=\"chapter-item expanded \"><a href=\"subtyping.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.5.</strong> Subtyping and Variance</a></li><li class=\"chapter-item expanded \"><a href=\"trait-bounds.html\" class=\"active\" tabindex=\"0\"><strong aria-hidden=\"true\">10.6.</strong> Trait and lifetime bounds</a></li><li class=\"chapter-item expanded \"><a href=\"type-coercions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.7.</strong> Type coercions</a></li><li class=\"chapter-item expanded \"><a href=\"destructors.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.8.</strong> Destructors</a></li><li class=\"chapter-item expanded \"><a href=\"lifetime-elision.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.9.</strong> Lifetime elision</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"special-types-and-traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.</strong> Special types and traits</a></li><li class=\"chapter-item expanded \"><a href=\"names.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.</strong> Names</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"names/namespaces.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.1.</strong> Namespaces</a></li><li class=\"chapter-item expanded \"><a href=\"names/scopes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.2.</strong> Scopes</a></li><li class=\"chapter-item expanded \"><a href=\"names/preludes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.3.</strong> Preludes</a></li><li class=\"chapter-item expanded \"><a href=\"paths.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.4.</strong> Paths</a></li><li class=\"chapter-item expanded \"><a href=\"names/name-resolution.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.5.</strong> Name resolution</a></li><li class=\"chapter-item expanded \"><a href=\"visibility-and-privacy.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.6.</strong> Visibility and privacy</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"memory-model.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.</strong> Memory model</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"memory-allocation-and-lifetime.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.1.</strong> Memory allocation and lifetime</a></li><li class=\"chapter-item expanded \"><a href=\"variables.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.2.</strong> Variables</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"linkage.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.</strong> Linkage</a></li><li class=\"chapter-item expanded \"><a href=\"inline-assembly.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.</strong> Inline assembly</a></li><li class=\"chapter-item expanded \"><a href=\"unsafety.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.</strong> Unsafety</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"unsafe-keyword.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.1.</strong> The unsafe keyword</a></li><li class=\"chapter-item expanded \"><a href=\"behavior-considered-undefined.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.2.</strong> Behavior considered undefined</a></li><li class=\"chapter-item expanded \"><a href=\"behavior-not-considered-unsafe.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.3.</strong> Behavior not considered unsafe</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"const_eval.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.</strong> Constant Evaluation</a></li><li class=\"chapter-item expanded \"><a href=\"abi.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.</strong> Application Binary Interface</a></li><li class=\"chapter-item expanded \"><a href=\"runtime.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.</strong> The Rust runtime</a></li><li class=\"chapter-item expanded \"><a href=\"appendices.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.</strong> Appendices</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"macro-ambiguity.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.1.</strong> Macro Follow-Set Ambiguity Formal Specification</a></li><li class=\"chapter-item expanded \"><a href=\"influences.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.2.</strong> Influences</a></li><li class=\"chapter-item expanded \"><a href=\"glossary.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.3.</strong> Glossary</a></li></ol></li></ol>\n            </div>\n            <div id=\"sidebar-resize-handle\" class=\"sidebar-resize-handle\">\n                <div class=\"sidebar-resize-indicator\"></div>\n            </div>\n        </nav>\n\n        <!-- Track and set sidebar scroll position -->\n        <script>\n            var sidebarScrollbox = document.querySelector('#sidebar .sidebar-scrollbox');\n            sidebarScrollbox.addEventListener('click', function(e) {\n                if (e.target.tagName === 'A') {\n                    sessionStorage.setItem('sidebar-scroll', sidebarScrollbox.scrollTop);\n                }\n            }, { passive: true });\n            var sidebarScrollTop = sessionStorage.getItem('sidebar-scroll');\n            sessionStorage.removeItem('sidebar-scroll');\n            if (sidebarScrollTop) {\n                // preserve sidebar scroll position when navigating via links within sidebar\n                sidebarScrollbox.scrollTop = sidebarScrollTop;\n            } else {\n                // scroll sidebar to current active section when navigating via \"next/previous chapter\" buttons\n                var activeSection = document.querySelector('#sidebar .active');\n                if (activeSection) {\n                    activeSection.scrollIntoView({ block: 'center' });\n                }\n            }\n        </script>\n\n        <div id=\"page-wrapper\" class=\"page-wrapper\">\n\n            <div class=\"page\">\n                                <div id=\"menu-bar-hover-placeholder\"></div>\n                <div id=\"menu-bar\" class=\"menu-bar\" style=\"top: 0px;\">\n                    <div class=\"left-buttons\">\n                        <label id=\"sidebar-toggle\" class=\"icon-button\" for=\"sidebar-toggle-anchor\" title=\"Toggle Table of Contents\" aria-label=\"Toggle Table of Contents\" aria-controls=\"sidebar\" aria-expanded=\"true\">\n                            <i class=\"fa fa-bars\"></i>\n                        </label>\n                        <button id=\"theme-toggle\" class=\"icon-button\" type=\"button\" title=\"Change theme\" aria-label=\"Change theme\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-controls=\"theme-list\">\n                            <i class=\"fa fa-paint-brush\"></i>\n                        </button>\n                        <ul id=\"theme-list\" class=\"theme-popup\" aria-label=\"Themes\" role=\"menu\">\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme theme-selected\" id=\"light\">Light</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"rust\">Rust</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"coal\">Coal</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"navy\">Navy</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"ayu\">Ayu</button></li>\n                        </ul>\n                        <button id=\"search-toggle\" class=\"icon-button\" type=\"button\" title=\"Search. (Shortkey: s)\" aria-label=\"Toggle Searchbar\" aria-expanded=\"false\" aria-keyshortcuts=\"S\" aria-controls=\"searchbar\">\n                            <i class=\"fa fa-search\"></i>\n                        </button>\n                    </div>\n\n                    <h1 class=\"menu-title\">The Rust Reference</h1>\n\n                    <div class=\"right-buttons\">\n                        <a href=\"print.html\" title=\"Print this book\" aria-label=\"Print this book\">\n                            <i id=\"print-button\" class=\"fa fa-print\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/reference/\" title=\"Git repository\" aria-label=\"Git repository\">\n                            <i id=\"git-repository-button\" class=\"fa fa-github\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/reference/edit/master/src/trait-bounds.md\" title=\"Suggest an edit\" aria-label=\"Suggest an edit\">\n                            <i id=\"git-edit-button\" class=\"fa fa-edit\"></i>\n                        </a>\n\n                    </div>\n                </div>\n\n                <div id=\"search-wrapper\" class=\"hidden\">\n                    <form id=\"searchbar-outer\" class=\"searchbar-outer\">\n                        <input type=\"search\" id=\"searchbar\" name=\"searchbar\" placeholder=\"Search this book ...\" aria-controls=\"searchresults-outer\" aria-describedby=\"searchresults-header\">\n                    </form>\n                    <div id=\"searchresults-outer\" class=\"searchresults-outer hidden\">\n                        <div id=\"searchresults-header\" class=\"searchresults-header\"></div>\n                        <ul id=\"searchresults\">\n                        </ul>\n                    </div>\n                </div>\n\n                <!-- Apply ARIA attributes after the sidebar and the sidebar toggle button are added to the DOM -->\n                <script>\n                    document.getElementById('sidebar-toggle').setAttribute('aria-expanded', sidebar === 'visible');\n                    document.getElementById('sidebar').setAttribute('aria-hidden', sidebar !== 'visible');\n                    Array.from(document.querySelectorAll('#sidebar a')).forEach(function(link) {\n                        link.setAttribute('tabIndex', sidebar === 'visible' ? 0 : -1);\n                    });\n                </script>\n\n                <div id=\"content\" class=\"content\">\n                    <main>\n                        <h1 id=\"trait-and-lifetime-bounds\"><a class=\"header\" href=\"#trait-and-lifetime-bounds\">Trait and lifetime bounds</a></h1>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>TypeParamBounds</em> :<br>\n&nbsp;&nbsp; <em>TypeParamBound</em> ( <code class=\"hljs\">+</code> <em>TypeParamBound</em> )<sup>*</sup> <code class=\"hljs\">+</code><sup>?</sup></p>\n<p><em>TypeParamBound</em> :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; <em>Lifetime</em> | <em>TraitBound</em></p>\n<p><em>TraitBound</em> :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; <code class=\"hljs\">?</code><sup>?</sup>\n<a href=\"#higher-ranked-trait-bounds\"><em>ForLifetimes</em></a><sup>?</sup> <a href=\"paths.html#paths-in-types\"><em>TypePath</em></a><br>\n&nbsp;&nbsp; | <code class=\"hljs\">(</code> <code class=\"hljs\">?</code><sup>?</sup>\n<a href=\"#higher-ranked-trait-bounds\"><em>ForLifetimes</em></a><sup>?</sup> <a href=\"paths.html#paths-in-types\"><em>TypePath</em></a> <code class=\"hljs\">)</code></p>\n<p><em>LifetimeBounds</em> :<br>\n&nbsp;&nbsp; ( <em>Lifetime</em> <code class=\"hljs\">+</code> )<sup>*</sup> <em>Lifetime</em><sup>?</sup></p>\n<p><em>Lifetime</em> :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; <a href=\"tokens.html#lifetimes-and-loop-labels\">LIFETIME_OR_LABEL</a><br>\n&nbsp;&nbsp; | <code class=\"hljs\">'static</code><br>\n&nbsp;&nbsp; | <code class=\"hljs\">'_</code></p>\n</blockquote>\n<p><a href=\"items/traits.html#trait-bounds\">Trait</a> and lifetime bounds provide a way for <a href=\"items/generics.html\">generic items</a> to\nrestrict which types and lifetimes are used as their parameters. Bounds can be\nprovided on any type in a <a href=\"items/generics.html#where-clauses\">where clause</a>. There are also shorter forms for\ncertain common cases:</p>\n<ul>\n<li>Bounds written after declaring a <a href=\"items/generics.html\">generic parameter</a>:\n<code class=\"hljs\">fn f&lt;A: Copy&gt;() {}</code> is the same as <code class=\"hljs\">fn f&lt;A&gt;() where A: Copy {}</code>.</li>\n<li>In trait declarations as <a href=\"items/traits.html#supertraits\">supertraits</a>: <code class=\"hljs\">trait Circle : Shape {}</code> is\nequivalent to <code class=\"hljs\">trait Circle where Self : Shape {}</code>.</li>\n<li>In trait declarations as bounds on <a href=\"items/associated-items.html#associated-types\">associated types</a>:\n<code class=\"hljs\">trait A { type B: Copy; }</code> is equivalent to\n<code class=\"hljs\">trait A where Self::B: Copy { type B; }</code>.</li>\n</ul>\n<p>Bounds on an item must be satisfied when using the item. When type checking and\nborrow checking a generic item, the bounds can be used to determine that a\ntrait is implemented for a type. For example, given <code class=\"hljs\">Ty: Trait</code></p>\n<ul>\n<li>In the body of a generic function, methods from <code class=\"hljs\">Trait</code> can be called on <code class=\"hljs\">Ty</code>\nvalues. Likewise associated constants on the <code class=\"hljs\">Trait</code> can be used.</li>\n<li>Associated types from <code class=\"hljs\">Trait</code> can be used.</li>\n<li>Generic functions and types with a <code class=\"hljs\">T: Trait</code> bounds can be used with <code class=\"hljs\">Ty</code>\nbeing used for <code class=\"hljs\">T</code>.</li>\n</ul>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Surface</span></span> = <span class=\"hljs-built_in\">i32</span>;\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Shape</span></span> {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">draw</span></span>(&amp;<span class=\"hljs-keyword\">self</span>, surface: Surface);\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">name</span></span>() -&gt; &amp;<span class=\"hljs-symbol\">'static</span> <span class=\"hljs-built_in\">str</span>;\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">draw_twice</span></span>&lt;T: Shape&gt;(surface: Surface, sh: T) {\n    sh.draw(surface);           <span class=\"hljs-comment\">// Can call method because T: Shape</span>\n    sh.draw(surface);\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">copy_and_draw_twice</span></span>&lt;T: <span class=\"hljs-built_in\">Copy</span>&gt;(surface: Surface, sh: T) <span class=\"hljs-keyword\">where</span> T: Shape {\n    <span class=\"hljs-keyword\">let</span> shape_copy = sh;        <span class=\"hljs-comment\">// doesn't move sh because T: Copy</span>\n    draw_twice(surface, sh);    <span class=\"hljs-comment\">// Can use generic function because T: Shape</span>\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Figure</span></span>&lt;S: Shape&gt;(S, S);\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">name_figure</span></span>&lt;U: Shape&gt;(\n    figure: Figure&lt;U&gt;,          <span class=\"hljs-comment\">// Type Figure&lt;U&gt; is well-formed because U: Shape</span>\n) {\n    <span class=\"hljs-built_in\">println!</span>(\n        <span class=\"hljs-string\">\"Figure of two {}\"</span>,\n        U::name(),              <span class=\"hljs-comment\">// Can use associated function</span>\n    );\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Bounds that don't use the item's parameters or <a href=\"#higher-ranked-trait-bounds\">higher-ranked lifetimes</a> are checked when the item is defined.\nIt is an error for such a bound to be false.</p>\n<p><a href=\"special-types-and-traits.html#copy\"><code class=\"hljs\">Copy</code></a>, <a href=\"special-types-and-traits.html#clone\"><code class=\"hljs\">Clone</code></a>, and <a href=\"special-types-and-traits.html#sized\"><code class=\"hljs\">Sized</code></a> bounds are also checked for certain generic types when using the item, even if the use does not provide a concrete type.\nIt is an error to have <code class=\"hljs\">Copy</code> or <code class=\"hljs\">Clone</code> as a bound on a mutable reference, <a href=\"types/trait-object.html\">trait object</a>, or <a href=\"types/slice.html\">slice</a>.\nIt is an error to have <code class=\"hljs\">Sized</code> as a bound on a trait object or slice.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust compile_fail edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">A</span></span>&lt;<span class=\"hljs-symbol\">'a</span>, T&gt;\n<span class=\"hljs-keyword\">where</span>\n    <span class=\"hljs-built_in\">i32</span>: <span class=\"hljs-built_in\">Default</span>,           <span class=\"hljs-comment\">// Allowed, but not useful</span>\n    <span class=\"hljs-built_in\">i32</span>: <span class=\"hljs-built_in\">Iterator</span>,          <span class=\"hljs-comment\">// Error: `i32` is not an iterator</span>\n    &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-keyword\">mut</span> T: <span class=\"hljs-built_in\">Copy</span>,        <span class=\"hljs-comment\">// (at use) Error: the trait bound is not satisfied</span>\n    [T]: <span class=\"hljs-built_in\">Sized</span>,             <span class=\"hljs-comment\">// (at use) Error: size cannot be known at compilation</span>\n{\n    f: &amp;<span class=\"hljs-symbol\">'a</span> T,\n}\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">UsesA</span></span>&lt;<span class=\"hljs-symbol\">'a</span>, T&gt;(A&lt;<span class=\"hljs-symbol\">'a</span>, T&gt;);\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Trait and lifetime bounds are also used to name <a href=\"types/trait-object.html\">trait objects</a>.</p>\n<h2 id=\"sized\"><a class=\"header\" href=\"#sized\"><code>?Sized</code></a></h2>\n<p><code class=\"hljs\">?</code> is only used to relax the implicit <a href=\"special-types-and-traits.html#sized\"><code class=\"hljs\">Sized</code></a> trait bound for <a href=\"types/parameters.html\">type parameters</a> or <a href=\"items/associated-items.html#associated-types\">associated types</a>.\n<code class=\"hljs\">?Sized</code> may not be used as a bound for other types.</p>\n<h2 id=\"lifetime-bounds\"><a class=\"header\" href=\"#lifetime-bounds\">Lifetime bounds</a></h2>\n<p>Lifetime bounds can be applied to types or to other lifetimes.\nThe bound <code class=\"hljs\">'a: 'b</code> is usually read as <code class=\"hljs\">'a</code> <em>outlives</em> <code class=\"hljs\">'b</code>.\n<code class=\"hljs\">'a: 'b</code> means that <code class=\"hljs\">'a</code> lasts at least as long as <code class=\"hljs\">'b</code>, so a reference <code class=\"hljs\">&amp;'a ()</code> is valid whenever <code class=\"hljs\">&amp;'b ()</code> is valid.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">f</span></span>&lt;<span class=\"hljs-symbol\">'a</span>, <span class=\"hljs-symbol\">'b</span>&gt;(x: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">i32</span>, <span class=\"hljs-keyword\">mut</span> y: &amp;<span class=\"hljs-symbol\">'b</span> <span class=\"hljs-built_in\">i32</span>) <span class=\"hljs-keyword\">where</span> <span class=\"hljs-symbol\">'a</span>: <span class=\"hljs-symbol\">'b</span> {\n    y = x;                      <span class=\"hljs-comment\">// &amp;'a i32 is a subtype of &amp;'b i32 because 'a: 'b</span>\n    <span class=\"hljs-keyword\">let</span> r: &amp;<span class=\"hljs-symbol\">'b</span> &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">i32</span> = &amp;&amp;<span class=\"hljs-number\">0</span>;   <span class=\"hljs-comment\">// &amp;'b &amp;'a i32 is well formed because 'a: 'b</span>\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p><code class=\"hljs\">T: 'a</code> means that all lifetime parameters of <code class=\"hljs\">T</code> outlive <code class=\"hljs\">'a</code>.\nFor example, if <code class=\"hljs\">'a</code> is an unconstrained lifetime parameter, then <code class=\"hljs\">i32: 'static</code> and <code class=\"hljs\">&amp;'static str: 'a</code> are satisfied, but <code class=\"hljs\">Vec&lt;&amp;'a ()&gt;: 'static</code> is not.</p>\n<h2 id=\"higher-ranked-trait-bounds\"><a class=\"header\" href=\"#higher-ranked-trait-bounds\">Higher-ranked trait bounds</a></h2>\n<blockquote>\n<p><em>ForLifetimes</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">for</code> <a href=\"items/generics.html\"><em>GenericParams</em></a></p>\n</blockquote>\n<p>Trait bounds may be <em>higher ranked</em> over lifetimes. These bounds specify a bound\nthat is true <em>for all</em> lifetimes. For example, a bound such as <code class=\"hljs\">for&lt;'a&gt; &amp;'a T: PartialEq&lt;i32&gt;</code> would require an implementation like</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">T</span></span>;\n</span><span class=\"hljs-keyword\">impl</span>&lt;<span class=\"hljs-symbol\">'a</span>&gt; <span class=\"hljs-built_in\">PartialEq</span>&lt;<span class=\"hljs-built_in\">i32</span>&gt; <span class=\"hljs-keyword\">for</span> &amp;<span class=\"hljs-symbol\">'a</span> T {\n    <span class=\"hljs-comment\">// ...</span>\n<span class=\"boring\">   <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">eq</span></span>(&amp;<span class=\"hljs-keyword\">self</span>, other: &amp;<span class=\"hljs-built_in\">i32</span>) -&gt; <span class=\"hljs-built_in\">bool</span> {<span class=\"hljs-literal\">true</span>}\n</span>}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>and could then be used to compare a <code class=\"hljs\">&amp;'a T</code> with any lifetime to an <code class=\"hljs\">i32</code>.</p>\n<p>Only a higher-ranked bound can be used here, because the lifetime of the reference is shorter than any possible lifetime parameter on the function:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">call_on_ref_zero</span></span>&lt;F&gt;(f: F) <span class=\"hljs-keyword\">where</span> <span class=\"hljs-keyword\">for</span>&lt;<span class=\"hljs-symbol\">'a</span>&gt; F: <span class=\"hljs-built_in\">Fn</span>(&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">i32</span>) {\n    <span class=\"hljs-keyword\">let</span> zero = <span class=\"hljs-number\">0</span>;\n    f(&amp;zero);\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Higher-ranked lifetimes may also be specified just before the trait: the only\ndifference is the <a href=\"names/scopes.html#higher-ranked-trait-bound-scopes\">scope</a> of the lifetime parameter, which extends only to the\nend of the following trait instead of the whole bound. This function is\nequivalent to the last one.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">call_on_ref_zero</span></span>&lt;F&gt;(f: F) <span class=\"hljs-keyword\">where</span> F: <span class=\"hljs-keyword\">for</span>&lt;<span class=\"hljs-symbol\">'a</span>&gt; <span class=\"hljs-built_in\">Fn</span>(&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">i32</span>) {\n    <span class=\"hljs-keyword\">let</span> zero = <span class=\"hljs-number\">0</span>;\n    f(&amp;zero);\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"implied-bounds\"><a class=\"header\" href=\"#implied-bounds\">Implied bounds</a></h2>\n<p>Lifetime bounds required for types to be well-formed are sometimes inferred.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">requires_t_outlives_a</span></span>&lt;<span class=\"hljs-symbol\">'a</span>, T&gt;(x: &amp;<span class=\"hljs-symbol\">'a</span> T) {}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>The type parameter <code class=\"hljs\">T</code> is required to outlive <code class=\"hljs\">'a</code> for the type <code class=\"hljs\">&amp;'a T</code> to be well-formed.\nThis is inferred because the function signature contains the type <code class=\"hljs\">&amp;'a T</code> which is\nonly valid if <code class=\"hljs\">T: 'a</code> holds.</p>\n<p>Implied bounds are added for all parameters and outputs of functions. Inside of <code class=\"hljs\">requires_t_outlives_a</code>\nyou can assume <code class=\"hljs\">T: 'a</code> to hold even if you don't explicitly specify this:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">requires_t_outlives_a_not_implied</span></span>&lt;<span class=\"hljs-symbol\">'a</span>, T: <span class=\"hljs-symbol\">'a</span>&gt;() {}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">requires_t_outlives_a</span></span>&lt;<span class=\"hljs-symbol\">'a</span>, T&gt;(x: &amp;<span class=\"hljs-symbol\">'a</span> T) {\n    <span class=\"hljs-comment\">// This compiles, because `T: 'a` is implied by</span>\n    <span class=\"hljs-comment\">// the reference type `&amp;'a T`.</span>\n    requires_t_outlives_a_not_implied::&lt;<span class=\"hljs-symbol\">'a</span>, T&gt;();\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust compile_fail E0309 edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">requires_t_outlives_a_not_implied</span></span>&lt;<span class=\"hljs-symbol\">'a</span>, T: <span class=\"hljs-symbol\">'a</span>&gt;() {}\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">not_implied</span></span>&lt;<span class=\"hljs-symbol\">'a</span>, T&gt;() {\n    <span class=\"hljs-comment\">// This errors, because `T: 'a` is not implied by</span>\n    <span class=\"hljs-comment\">// the function signature.</span>\n    requires_t_outlives_a_not_implied::&lt;<span class=\"hljs-symbol\">'a</span>, T&gt;();\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Only lifetime bounds are implied, trait bounds still have to be explicitly added.\nThe following example therefore causes an error:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust compile_fail E0277 edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">use</span> std::fmt::<span class=\"hljs-built_in\">Debug</span>;\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">IsDebug</span></span>&lt;T: <span class=\"hljs-built_in\">Debug</span>&gt;(T);\n<span class=\"hljs-comment\">// error[E0277]: `T` doesn't implement `Debug`</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">doesnt_specify_t_debug</span></span>&lt;T&gt;(x: IsDebug&lt;T&gt;) {}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Lifetime bounds are also inferred for type definitions and impl blocks for any type:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Struct</span></span>&lt;<span class=\"hljs-symbol\">'a</span>, T&gt; {\n    <span class=\"hljs-comment\">// This requires `T: 'a` to be well-formed</span>\n    <span class=\"hljs-comment\">// which is inferred by the compiler.</span>\n    field: &amp;<span class=\"hljs-symbol\">'a</span> T,\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">Enum</span></span>&lt;<span class=\"hljs-symbol\">'a</span>, T&gt; {\n    <span class=\"hljs-comment\">// This requires `T: 'a` to be well-formed,</span>\n    <span class=\"hljs-comment\">// which is inferred by the compiler.</span>\n    <span class=\"hljs-comment\">//</span>\n    <span class=\"hljs-comment\">// Note that `T: 'a` is required even when only</span>\n    <span class=\"hljs-comment\">// using `Enum::OtherVariant`.</span>\n    SomeVariant(&amp;<span class=\"hljs-symbol\">'a</span> T),\n    OtherVariant,\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Trait</span></span>&lt;<span class=\"hljs-symbol\">'a</span>, T: <span class=\"hljs-symbol\">'a</span>&gt; {}\n\n<span class=\"hljs-comment\">// This would error because `T: 'a` is not implied by any type</span>\n<span class=\"hljs-comment\">// in the impl header.</span>\n<span class=\"hljs-comment\">//     impl&lt;'a, T&gt; Trait&lt;'a, T&gt; for () {}</span>\n\n<span class=\"hljs-comment\">// This compiles as `T: 'a` is implied by the self type `&amp;'a T`.</span>\n<span class=\"hljs-keyword\">impl</span>&lt;<span class=\"hljs-symbol\">'a</span>, T&gt; Trait&lt;<span class=\"hljs-symbol\">'a</span>, T&gt; <span class=\"hljs-keyword\">for</span> &amp;<span class=\"hljs-symbol\">'a</span> T {}\n<span class=\"boring\">}</span></code></pre></pre>\n\n                    </main>\n\n                    <nav class=\"nav-wrapper\" aria-label=\"Page navigation\">\n                        <!-- Mobile navigation buttons -->\n                            <a rel=\"prev\" href=\"subtyping.html\" class=\"mobile-nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                                <i class=\"fa fa-angle-left\"></i>\n                            </a>\n\n                            <a rel=\"next prefetch\" href=\"type-coercions.html\" class=\"mobile-nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                                <i class=\"fa fa-angle-right\"></i>\n                            </a>\n\n                        <div style=\"clear: both\"></div>\n                    </nav>\n                </div>\n            </div>\n\n            <nav class=\"nav-wide-wrapper\" aria-label=\"Page navigation\">\n                    <a rel=\"prev\" href=\"subtyping.html\" class=\"nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                        <i class=\"fa fa-angle-left\"></i>\n                    </a>\n\n                    <a rel=\"next prefetch\" href=\"type-coercions.html\" class=\"nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                        <i class=\"fa fa-angle-right\"></i>\n                    </a>\n            </nav>\n\n        </div>\n\n\n\n\n        <script>\n            window.playground_copyable = true;\n        </script>\n\n\n        <script src=\"elasticlunr.min.js\"></script>\n        <script src=\"mark.min.js\"></script>\n        <script src=\"searcher.js\"></script>\n\n        <script src=\"clipboard.min.js\"></script>\n        <script src=\"highlight.js\"></script>\n        <script src=\"book.js\"></script>\n\n        <!-- Custom JS scripts -->\n\n\n    </div>\n    \n\n</body></html>",
	"crawlDate": "2024-07-28T05:13:28.718Z"
}