{
	"title": "SystemTime in std::time - Rust",
	"url": "https://doc.rust-lang.org/stable/std/time/struct.SystemTime.html",
	"markdown": "# SystemTime in std::time - Rust\n\n```\npub struct SystemTime(/* private fields */);\n```\n\nExpand description\n\nA measurement of the system clock, useful for talking to external entities like the file system or other processes.\n\nDistinct from the [`Instant`](struct.Instant.html \"struct std::time::Instant\") type, this time measurement **is not monotonic**. This means that you can save a file to the file system, then save another file to the file system, **and the second file has a `SystemTime` measurement earlier than the first**. In other words, an operation that happens after another operation in real time may have an earlier `SystemTime`!\n\nConsequently, comparing two `SystemTime` instances to learn about the duration between them returns a [`Result`](../result/enum.Result.html \"enum std::result::Result\") instead of an infallible [`Duration`](struct.Duration.html \"struct std::time::Duration\") to indicate that this sort of time drift may happen and needs to be handled.\n\nAlthough a `SystemTime` cannot be directly inspected, the [`UNIX_EPOCH`](constant.UNIX_EPOCH.html \"constant std::time::UNIX_EPOCH\") constant is provided in this module as an anchor in time to learn information about a `SystemTime`. By calculating the duration from this fixed point in time, a `SystemTime` can be converted to a human-readable time, or perhaps some other string representation.\n\nThe size of a `SystemTime` struct may vary depending on the target operating system.\n\nA `SystemTime` does not count leap seconds. `SystemTime::now()`’s behaviour around a leap second is the same as the operating system’s wall clock. The precise behaviour near a leap second (e.g. whether the clock appears to run slow or fast, or stop, or jump) depends on platform and configuration, so should not be relied on.\n\nExample:\n\n```\nuse std::time::{Duration, SystemTime};\nuse std::thread::sleep;\n\nfn main() {\n   let now = SystemTime::now();\n\n   // we sleep for 2 seconds\n   sleep(Duration::new(2, 0));\n   match now.elapsed() {\n       Ok(elapsed) => {\n           // it prints '2'\n           println!(\"{}\", elapsed.as_secs());\n       }\n       Err(e) => {\n           // an error occurred!\n           println!(\"Error: {e:?}\");\n       }\n   }\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::time::%7BDuration,+SystemTime%7D;%0Ause+std::thread::sleep;%0A%0Afn+main()+%7B%0A+++let+now+=+SystemTime::now();%0A%0A+++//+we+sleep+for+2+seconds%0A+++sleep(Duration::new(2,+0));%0A+++match+now.elapsed()+%7B%0A+++++++Ok(elapsed)+=%3E+%7B%0A+++++++++++//+it+prints+%272%27%0A+++++++++++println!(%22%7B%7D%22,+elapsed.as_secs());%0A+++++++%7D%0A+++++++Err(e)+=%3E+%7B%0A+++++++++++//+an+error+occurred!%0A+++++++++++println!(%22Error:+%7Be:?%7D%22);%0A+++++++%7D%0A+++%7D%0A%7D&edition=2021)\n\n## [§](#platform-specific-behavior)Platform-specific behavior\n\nThe precision of `SystemTime` can depend on the underlying OS-specific time format. For example, on Windows the time is represented in 100 nanosecond intervals whereas Linux can represent nanosecond intervals.\n\nThe following system calls are [currently](about:blank/io/index.html#platform-specific-behavior \"mod std::io\") being used by `now()` to find out the current time:\n\n**Disclaimer:** These system calls might change over time.\n\n> Note: mathematical operations like [`add`](about:blank/struct.SystemTime.html#method.add \"method std::time::SystemTime::add\") may panic if the underlying structure cannot represent the new point in time.\n\n[source](about:blank/src/std/time.rs.html#470-590)[§](#impl-SystemTime)\n\n1.28.0 · [source](about:blank/src/std/time.rs.html#499)\n\nAn anchor in time which can be used to create new `SystemTime` instances or learn about where in time a `SystemTime` lies.\n\nThis constant is defined to be “1970-01-01 00:00:00 UTC” on all systems with respect to the system clock. Using `duration_since` on an existing `SystemTime` instance can tell how far away from this point in time a measurement lies, and using `UNIX_EPOCH + duration` can be used to create a `SystemTime` instance to represent another fixed point in time.\n\n`duration_since(UNIX_EPOCH).unwrap().as_secs()` returns the number of non-leap seconds since the start of 1970 UTC. This is a POSIX `time_t` (as a `u64`), and is the same time representation as used in many Internet protocols.\n\n##### [§](#examples)Examples\n\n```\nuse std::time::SystemTime;\n\nmatch SystemTime::now().duration_since(SystemTime::UNIX_EPOCH) {\n    Ok(n) => println!(\"1970-01-01 00:00:00 UTC was {} seconds ago!\", n.as_secs()),\n    Err(_) => panic!(\"SystemTime before UNIX EPOCH!\"),\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::time::SystemTime;%0A++++%0A++++match+SystemTime::now().duration_since(SystemTime::UNIX_EPOCH)+%7B%0A++++++++Ok(n)+=%3E+println!(%221970-01-01+00:00:00+UTC+was+%7B%7D+seconds+ago!%22,+n.as_secs()),%0A++++++++Err(_)+=%3E+panic!(%22SystemTime+before+UNIX+EPOCH!%22),%0A++++%7D%0A%7D&edition=2021)\n\n1.8.0 · [source](about:blank/src/std/time.rs.html#512-514)\n\nReturns the system time corresponding to “now”.\n\n##### [§](#examples-1)Examples\n\n```\nuse std::time::SystemTime;\n\nlet sys_time = SystemTime::now();\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::time::SystemTime;%0A++++%0A++++let+sys_time+=+SystemTime::now();%0A%7D&edition=2021)\n\n1.8.0 · [source](about:blank/src/std/time.rs.html#541-543)\n\nReturns the amount of time elapsed from an earlier point in time.\n\nThis function may fail because measurements taken earlier are not guaranteed to always be before later measurements (due to anomalies such as the system clock being adjusted either forwards or backwards). [`Instant`](struct.Instant.html \"struct std::time::Instant\") can be used to measure elapsed time without this risk of failure.\n\nIf successful, `[Ok](about:blank/result/enum.Result.html#variant.Ok \"variant std::result::Result::Ok\")([Duration](struct.Duration.html \"struct std::time::Duration\"))` is returned where the duration represents the amount of time elapsed from the specified measurement to this one.\n\nReturns an [`Err`](about:blank/result/enum.Result.html#variant.Err \"variant std::result::Result::Err\") if `earlier` is later than `self`, and the error contains how far from `self` the time is.\n\n##### [§](#examples-2)Examples\n\n```\nuse std::time::SystemTime;\n\nlet sys_time = SystemTime::now();\nlet new_sys_time = SystemTime::now();\nlet difference = new_sys_time.duration_since(sys_time)\n    .expect(\"Clock may have gone backwards\");\nprintln!(\"{difference:?}\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::time::SystemTime;%0A++++%0A++++let+sys_time+=+SystemTime::now();%0A++++let+new_sys_time+=+SystemTime::now();%0A++++let+difference+=+new_sys_time.duration_since(sys_time)%0A++++++++.expect(%22Clock+may+have+gone+backwards%22);%0A++++println!(%22%7Bdifference:?%7D%22);%0A%7D&edition=2021)\n\n1.8.0 · [source](about:blank/src/std/time.rs.html#571-573)\n\nReturns the difference from this system time to the current clock time.\n\nThis function may fail as the underlying system clock is susceptible to drift and updates (e.g., the system clock could go backwards), so this function might not always succeed. If successful, `[Ok](about:blank/result/enum.Result.html#variant.Ok \"variant std::result::Result::Ok\")([Duration](struct.Duration.html \"struct std::time::Duration\"))` is returned where the duration represents the amount of time elapsed from this time measurement to the current time.\n\nTo measure elapsed time reliably, use [`Instant`](struct.Instant.html \"struct std::time::Instant\") instead.\n\nReturns an [`Err`](about:blank/result/enum.Result.html#variant.Err \"variant std::result::Result::Err\") if `self` is later than the current system time, and the error contains how far from the current system time `self` is.\n\n##### [§](#examples-3)Examples\n\n```\nuse std::thread::sleep;\nuse std::time::{Duration, SystemTime};\n\nlet sys_time = SystemTime::now();\nlet one_sec = Duration::from_secs(1);\nsleep(one_sec);\nassert!(sys_time.elapsed().unwrap() >= one_sec);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::thread::sleep;%0A++++use+std::time::%7BDuration,+SystemTime%7D;%0A++++%0A++++let+sys_time+=+SystemTime::now();%0A++++let+one_sec+=+Duration::from_secs(1);%0A++++sleep(one_sec);%0A++++assert!(sys_time.elapsed().unwrap()+%3E=+one_sec);%0A%7D&edition=2021)\n\n1.34.0 · [source](about:blank/src/std/time.rs.html#579-581)\n\nReturns `Some(t)` where `t` is the time `self + duration` if `t` can be represented as `SystemTime` (which means it’s inside the bounds of the underlying data structure), `None` otherwise.\n\n1.34.0 · [source](about:blank/src/std/time.rs.html#587-589)\n\nReturns `Some(t)` where `t` is the time `self - duration` if `t` can be represented as `SystemTime` (which means it’s inside the bounds of the underlying data structure), `None` otherwise.\n\n1.8.0 · [source](about:blank/src/std/time.rs.html#593-603)[§](#impl-Add%3CDuration%3E-for-SystemTime)\n\n[source](about:blank/src/std/time.rs.html#600-602)[§](#method.add)\n\n##### [§](#panics)Panics\n\nThis function may panic if the resulting point in time cannot be represented by the underlying data structure. See [`SystemTime::checked_add`](about:blank/struct.SystemTime.html#method.checked_add \"method std::time::SystemTime::checked_add\") for a version without panic.\n\n[§](#associatedtype.Output)\n\nThe resulting type after applying the `+` operator.\n\n1.9.0 · [source](about:blank/src/std/time.rs.html#606-610)[§](#impl-AddAssign%3CDuration%3E-for-SystemTime)\n\n1.8.0 · [source](about:blank/src/std/time.rs.html#246)[§](#impl-Clone-for-SystemTime)\n\n1.8.0 · [source](about:blank/src/std/time.rs.html#629-633)[§](#impl-Debug-for-SystemTime)\n\n1.8.0 · [source](about:blank/src/std/time.rs.html#246)[§](#impl-Hash-for-SystemTime)\n\n1.8.0 · [source](about:blank/src/std/time.rs.html#246)[§](#impl-Ord-for-SystemTime)\n\n1.8.0 · [source](about:blank/src/std/time.rs.html#246)[§](#impl-PartialEq-for-SystemTime)\n\n[source](about:blank/src/std/time.rs.html#246)[§](#method.eq)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[§](#method.ne)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.8.0 · [source](about:blank/src/std/time.rs.html#246)[§](#impl-PartialOrd-for-SystemTime)\n\n[source](about:blank/src/std/time.rs.html#246)[§](#method.partial_cmp)\n\nThis method returns an ordering between `self` and `other` values if one exists. [Read more](about:blank/cmp/trait.PartialOrd.html#tymethod.partial_cmp)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180)[§](#method.lt)\n\nThis method tests less than (for `self` and `other`) and is used by the `<` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.lt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198)[§](#method.le)\n\nThis method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.le)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215)[§](#method.gt)\n\nThis method tests greater than (for `self` and `other`) and is used by the `>` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.gt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233)[§](#method.ge)\n\nThis method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.ge)\n\n1.8.0 · [source](about:blank/src/std/time.rs.html#613-619)[§](#impl-Sub%3CDuration%3E-for-SystemTime)\n\n[§](#associatedtype.Output-1)\n\nThe resulting type after applying the `-` operator.\n\n[source](about:blank/src/std/time.rs.html#616-618)[§](#method.sub)\n\n1.9.0 · [source](about:blank/src/std/time.rs.html#622-626)[§](#impl-SubAssign%3CDuration%3E-for-SystemTime)\n\n1.8.0 · [source](about:blank/src/std/time.rs.html#246)[§](#impl-Copy-for-SystemTime)\n\n1.8.0 · [source](about:blank/src/std/time.rs.html#246)[§](#impl-Eq-for-SystemTime)\n\n1.8.0 · [source](about:blank/src/std/time.rs.html#246)[§](#impl-StructuralPartialEq-for-SystemTime)\n\n[§](#impl-Freeze-for-SystemTime)\n\n[§](#impl-RefUnwindSafe-for-SystemTime)\n\n[§](#impl-Send-for-SystemTime)\n\n[§](#impl-Sync-for-SystemTime)\n\n[§](#impl-Unpin-for-SystemTime)\n\n[§](#impl-UnwindSafe-for-SystemTime)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140)[§](#impl-Any-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208)[§](#impl-Borrow%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216)[§](#impl-BorrowMut%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765)[§](#impl-From%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768)[§](#method.from)\n\nReturns the argument unchanged.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750)[§](#impl-Into%3CU%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758)[§](#method.into)\n\nCalls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of `[From](../convert/trait.From.html \"trait std::convert::From\")<T> for U` chooses to do.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85)[§](#impl-ToOwned-for-T)\n\n[§](#associatedtype.Owned)\n\nThe resulting type after obtaining ownership.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88)[§](#method.to_owned)\n\nCreates owned data from borrowed data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#tymethod.to_owned)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92)[§](#method.clone_into)\n\nUses borrowed data to replace owned data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#method.clone_into)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807)[§](#impl-TryFrom%3CU%3E-for-T)\n\n[§](#associatedtype.Error-1)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812)[§](#method.try_from)\n\nPerforms the conversion.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792)[§](#impl-TryInto%3CU%3E-for-T)\n\n[§](#associatedtype.Error)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797)[§](#method.try_into)\n\nPerforms the conversion.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"A measurement of the system clock, useful for talking to external entities like the file system or other processes.\"><title>SystemTime in std::time - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc struct\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">SystemTime</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">SystemTime</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#implementations\">Associated Constants</a></h3><ul class=\"block associatedconstant\"><li><a href=\"#associatedconstant.UNIX_EPOCH\">UNIX_EPOCH</a></li></ul><h3><a href=\"#implementations\">Methods</a></h3><ul class=\"block method\"><li><a href=\"#method.checked_add\">checked_add</a></li><li><a href=\"#method.checked_sub\">checked_sub</a></li><li><a href=\"#method.duration_since\">duration_since</a></li><li><a href=\"#method.elapsed\">elapsed</a></li><li><a href=\"#method.now\">now</a></li></ul><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-Add%3CDuration%3E-for-SystemTime\">Add&lt;Duration&gt;</a></li><li><a href=\"#impl-AddAssign%3CDuration%3E-for-SystemTime\">AddAssign&lt;Duration&gt;</a></li><li><a href=\"#impl-Clone-for-SystemTime\">Clone</a></li><li><a href=\"#impl-Copy-for-SystemTime\">Copy</a></li><li><a href=\"#impl-Debug-for-SystemTime\">Debug</a></li><li><a href=\"#impl-Eq-for-SystemTime\">Eq</a></li><li><a href=\"#impl-Hash-for-SystemTime\">Hash</a></li><li><a href=\"#impl-Ord-for-SystemTime\">Ord</a></li><li><a href=\"#impl-PartialEq-for-SystemTime\">PartialEq</a></li><li><a href=\"#impl-PartialOrd-for-SystemTime\">PartialOrd</a></li><li><a href=\"#impl-StructuralPartialEq-for-SystemTime\">StructuralPartialEq</a></li><li><a href=\"#impl-Sub%3CDuration%3E-for-SystemTime\">Sub&lt;Duration&gt;</a></li><li><a href=\"#impl-SubAssign%3CDuration%3E-for-SystemTime\">SubAssign&lt;Duration&gt;</a></li></ul><h3><a href=\"#synthetic-implementations\">Auto Trait Implementations</a></h3><ul class=\"block synthetic-implementation\"><li><a href=\"#impl-Freeze-for-SystemTime\">Freeze</a></li><li><a href=\"#impl-RefUnwindSafe-for-SystemTime\">RefUnwindSafe</a></li><li><a href=\"#impl-Send-for-SystemTime\">Send</a></li><li><a href=\"#impl-Sync-for-SystemTime\">Sync</a></li><li><a href=\"#impl-Unpin-for-SystemTime\">Unpin</a></li><li><a href=\"#impl-UnwindSafe-for-SystemTime\">UnwindSafe</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-Any-for-T\">Any</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-T\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-T\">BorrowMut&lt;T&gt;</a></li><li><a href=\"#impl-From%3CT%3E-for-T\">From&lt;T&gt;</a></li><li><a href=\"#impl-Into%3CU%3E-for-T\">Into&lt;U&gt;</a></li><li><a href=\"#impl-ToOwned-for-T\">ToOwned</a></li><li><a href=\"#impl-TryFrom%3CU%3E-for-T\">TryFrom&lt;U&gt;</a></li><li><a href=\"#impl-TryInto%3CU%3E-for-T\">TryInto&lt;U&gt;</a></li></ul></section><h2><a href=\"index.html\">In std::time</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.Duration.html\">Duration</a></li><li><a href=\"struct.Instant.html\">Instant</a></li><li><a href=\"struct.SystemTime.html\">SystemTime</a></li><li><a href=\"struct.SystemTimeError.html\">SystemTimeError</a></li><li><a href=\"struct.TryFromFloatSecsError.html\">TryFromFloatSecsError</a></li></ul><h3><a href=\"index.html#constants\">Constants</a></h3><ul class=\"block constant\"><li><a href=\"constant.UNIX_EPOCH.html\">UNIX_EPOCH</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Struct <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">time</a>::<wbr><a class=\"struct\" href=\"#\">SystemTime</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../src/std/time.rs.html#248\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub struct SystemTime(<span class=\"comment\">/* private fields */</span>);</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>A measurement of the system clock, useful for talking to\nexternal entities like the file system or other processes.</p>\n<p>Distinct from the <a href=\"struct.Instant.html\" title=\"struct std::time::Instant\"><code>Instant</code></a> type, this time measurement <strong>is not\nmonotonic</strong>. This means that you can save a file to the file system, then\nsave another file to the file system, <strong>and the second file has a\n<code>SystemTime</code> measurement earlier than the first</strong>. In other words, an\noperation that happens after another operation in real time may have an\nearlier <code>SystemTime</code>!</p>\n<p>Consequently, comparing two <code>SystemTime</code> instances to learn about the\nduration between them returns a <a href=\"../result/enum.Result.html\" title=\"enum std::result::Result\"><code>Result</code></a> instead of an infallible <a href=\"struct.Duration.html\" title=\"struct std::time::Duration\"><code>Duration</code></a>\nto indicate that this sort of time drift may happen and needs to be handled.</p>\n<p>Although a <code>SystemTime</code> cannot be directly inspected, the <a href=\"constant.UNIX_EPOCH.html\" title=\"constant std::time::UNIX_EPOCH\"><code>UNIX_EPOCH</code></a>\nconstant is provided in this module as an anchor in time to learn\ninformation about a <code>SystemTime</code>. By calculating the duration from this\nfixed point in time, a <code>SystemTime</code> can be converted to a human-readable time,\nor perhaps some other string representation.</p>\n<p>The size of a <code>SystemTime</code> struct may vary depending on the target operating\nsystem.</p>\n<p>A <code>SystemTime</code> does not count leap seconds.\n<code>SystemTime::now()</code>’s behaviour around a leap second\nis the same as the operating system’s wall clock.\nThe precise behaviour near a leap second\n(e.g. whether the clock appears to run slow or fast, or stop, or jump)\ndepends on platform and configuration,\nso should not be relied on.</p>\n<p>Example:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::time::{Duration, SystemTime};\n<span class=\"kw\">use </span>std::thread::sleep;\n\n<span class=\"kw\">fn </span>main() {\n   <span class=\"kw\">let </span>now = SystemTime::now();\n\n   <span class=\"comment\">// we sleep for 2 seconds\n   </span>sleep(Duration::new(<span class=\"number\">2</span>, <span class=\"number\">0</span>));\n   <span class=\"kw\">match </span>now.elapsed() {\n       <span class=\"prelude-val\">Ok</span>(elapsed) =&gt; {\n           <span class=\"comment\">// it prints '2'\n           </span><span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, elapsed.as_secs());\n       }\n       <span class=\"prelude-val\">Err</span>(e) =&gt; {\n           <span class=\"comment\">// an error occurred!\n           </span><span class=\"macro\">println!</span>(<span class=\"string\">\"Error: {e:?}\"</span>);\n       }\n   }\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::time::%7BDuration,+SystemTime%7D;%0Ause+std::thread::sleep;%0A%0Afn+main()+%7B%0A+++let+now+=+SystemTime::now();%0A%0A+++//+we+sleep+for+2+seconds%0A+++sleep(Duration::new(2,+0));%0A+++match+now.elapsed()+%7B%0A+++++++Ok(elapsed)+=%3E+%7B%0A+++++++++++//+it+prints+'2'%0A+++++++++++println!(%22%7B%7D%22,+elapsed.as_secs());%0A+++++++%7D%0A+++++++Err(e)+=%3E+%7B%0A+++++++++++//+an+error+occurred!%0A+++++++++++println!(%22Error:+%7Be:?%7D%22);%0A+++++++%7D%0A+++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<h2 id=\"platform-specific-behavior\"><a class=\"doc-anchor\" href=\"#platform-specific-behavior\">§</a>Platform-specific behavior</h2>\n<p>The precision of <code>SystemTime</code> can depend on the underlying OS-specific time format.\nFor example, on Windows the time is represented in 100 nanosecond intervals whereas Linux\ncan represent nanosecond intervals.</p>\n<p>The following system calls are <a href=\"../io/index.html#platform-specific-behavior\" title=\"mod std::io\">currently</a> being used by <code>now()</code> to find out\nthe current time:</p>\n<div><table><thead><tr><th>Platform</th><th>System call</th></tr></thead><tbody>\n<tr><td>SGX</td><td><a href=\"https://edp.fortanix.com/docs/api/fortanix_sgx_abi/struct.Usercalls.html#method.insecure_time\"><code>insecure_time</code> usercall</a>. More information on <a href=\"https://edp.fortanix.com/docs/concepts/rust-std/#codestdtimecode\">timekeeping in SGX</a></td></tr>\n<tr><td>UNIX</td><td><a href=\"https://linux.die.net/man/3/clock_gettime\">clock_gettime (Realtime Clock)</a></td></tr>\n<tr><td>Darwin</td><td><a href=\"https://linux.die.net/man/3/clock_gettime\">clock_gettime (Realtime Clock)</a></td></tr>\n<tr><td>VXWorks</td><td><a href=\"https://linux.die.net/man/3/clock_gettime\">clock_gettime (Realtime Clock)</a></td></tr>\n<tr><td>SOLID</td><td><code>SOLID_RTC_ReadTime</code></td></tr>\n<tr><td>WASI</td><td><a href=\"https://github.com/WebAssembly/WASI/blob/main/legacy/preview1/docs.md#clock_time_get\">__wasi_clock_time_get (Realtime Clock)</a></td></tr>\n<tr><td>Windows</td><td><a href=\"https://docs.microsoft.com/en-us/windows/win32/api/sysinfoapi/nf-sysinfoapi-getsystemtimepreciseasfiletime\">GetSystemTimePreciseAsFileTime</a> / <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/sysinfoapi/nf-sysinfoapi-getsystemtimeasfiletime\">GetSystemTimeAsFileTime</a></td></tr>\n</tbody></table>\n</div>\n<p><strong>Disclaimer:</strong> These system calls might change over time.</p>\n<blockquote>\n<p>Note: mathematical operations like <a href=\"struct.SystemTime.html#method.add\" title=\"method std::time::SystemTime::add\"><code>add</code></a> may panic if the underlying\nstructure cannot represent the new point in time.</p>\n</blockquote>\n</div></details><h2 id=\"implementations\" class=\"section-header\">Implementations<a href=\"#implementations\" class=\"anchor\">§</a></h2><div id=\"implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SystemTime\" class=\"impl\"><a class=\"src rightside\" href=\"../../src/std/time.rs.html#470-590\">source</a><a href=\"#impl-SystemTime\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"struct.SystemTime.html\" title=\"struct std::time::SystemTime\">SystemTime</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedconstant.UNIX_EPOCH\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> · <a class=\"src\" href=\"../../src/std/time.rs.html#499\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.UNIX_EPOCH\" class=\"constant\">UNIX_EPOCH</a>: <a class=\"struct\" href=\"struct.SystemTime.html\" title=\"struct std::time::SystemTime\">SystemTime</a> = UNIX_EPOCH</h4></section></summary><div class=\"docblock\"><p>An anchor in time which can be used to create new <code>SystemTime</code> instances or\nlearn about where in time a <code>SystemTime</code> lies.</p>\n<p>This constant is defined to be “1970-01-01 00:00:00 UTC” on all systems with\nrespect to the system clock. Using <code>duration_since</code> on an existing\n<code>SystemTime</code> instance can tell how far away from this point in time a\nmeasurement lies, and using <code>UNIX_EPOCH + duration</code> can be used to create a\n<code>SystemTime</code> instance to represent another fixed point in time.</p>\n<p><code>duration_since(UNIX_EPOCH).unwrap().as_secs()</code> returns\nthe number of non-leap seconds since the start of 1970 UTC.\nThis is a POSIX <code>time_t</code> (as a <code>u64</code>),\nand is the same time representation as used in many Internet protocols.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::time::SystemTime;\n\n<span class=\"kw\">match </span>SystemTime::now().duration_since(SystemTime::UNIX_EPOCH) {\n    <span class=\"prelude-val\">Ok</span>(n) =&gt; <span class=\"macro\">println!</span>(<span class=\"string\">\"1970-01-01 00:00:00 UTC was {} seconds ago!\"</span>, n.as_secs()),\n    <span class=\"prelude-val\">Err</span>(<span class=\"kw\">_</span>) =&gt; <span class=\"macro\">panic!</span>(<span class=\"string\">\"SystemTime before UNIX EPOCH!\"</span>),\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::time::SystemTime;%0A++++%0A++++match+SystemTime::now().duration_since(SystemTime::UNIX_EPOCH)+%7B%0A++++++++Ok(n)+=%3E+println!(%221970-01-01+00:00:00+UTC+was+%7B%7D+seconds+ago!%22,+n.as_secs()),%0A++++++++Err(_)+=%3E+panic!(%22SystemTime+before+UNIX+EPOCH!%22),%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.now\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../src/std/time.rs.html#512-514\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.now\" class=\"fn\">now</a>() -&gt; <a class=\"struct\" href=\"struct.SystemTime.html\" title=\"struct std::time::SystemTime\">SystemTime</a></h4></section></summary><div class=\"docblock\"><p>Returns the system time corresponding to “now”.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::time::SystemTime;\n\n<span class=\"kw\">let </span>sys_time = SystemTime::now();</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::time::SystemTime;%0A++++%0A++++let+sys_time+=+SystemTime::now();%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.duration_since\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../src/std/time.rs.html#541-543\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.duration_since\" class=\"fn\">duration_since</a>(\n    &amp;self,\n    earlier: <a class=\"struct\" href=\"struct.SystemTime.html\" title=\"struct std::time::SystemTime\">SystemTime</a>,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>, <a class=\"struct\" href=\"struct.SystemTimeError.html\" title=\"struct std::time::SystemTimeError\">SystemTimeError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the amount of time elapsed from an earlier point in time.</p>\n<p>This function may fail because measurements taken earlier are not\nguaranteed to always be before later measurements (due to anomalies such\nas the system clock being adjusted either forwards or backwards).\n<a href=\"struct.Instant.html\" title=\"struct std::time::Instant\"><code>Instant</code></a> can be used to measure elapsed time without this risk of failure.</p>\n<p>If successful, <code><a href=\"../result/enum.Result.html#variant.Ok\" title=\"variant std::result::Result::Ok\">Ok</a>(<a href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>)</code> is returned where the duration represents\nthe amount of time elapsed from the specified measurement to this one.</p>\n<p>Returns an <a href=\"../result/enum.Result.html#variant.Err\" title=\"variant std::result::Result::Err\"><code>Err</code></a> if <code>earlier</code> is later than <code>self</code>, and the error\ncontains how far from <code>self</code> the time is.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::time::SystemTime;\n\n<span class=\"kw\">let </span>sys_time = SystemTime::now();\n<span class=\"kw\">let </span>new_sys_time = SystemTime::now();\n<span class=\"kw\">let </span>difference = new_sys_time.duration_since(sys_time)\n    .expect(<span class=\"string\">\"Clock may have gone backwards\"</span>);\n<span class=\"macro\">println!</span>(<span class=\"string\">\"{difference:?}\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::time::SystemTime;%0A++++%0A++++let+sys_time+=+SystemTime::now();%0A++++let+new_sys_time+=+SystemTime::now();%0A++++let+difference+=+new_sys_time.duration_since(sys_time)%0A++++++++.expect(%22Clock+may+have+gone+backwards%22);%0A++++println!(%22%7Bdifference:?%7D%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.elapsed\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../src/std/time.rs.html#571-573\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.elapsed\" class=\"fn\">elapsed</a>(&amp;self) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>, <a class=\"struct\" href=\"struct.SystemTimeError.html\" title=\"struct std::time::SystemTimeError\">SystemTimeError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the difference from this system time to the\ncurrent clock time.</p>\n<p>This function may fail as the underlying system clock is susceptible to\ndrift and updates (e.g., the system clock could go backwards), so this\nfunction might not always succeed. If successful, <code><a href=\"../result/enum.Result.html#variant.Ok\" title=\"variant std::result::Result::Ok\">Ok</a>(<a href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>)</code> is\nreturned where the duration represents the amount of time elapsed from\nthis time measurement to the current time.</p>\n<p>To measure elapsed time reliably, use <a href=\"struct.Instant.html\" title=\"struct std::time::Instant\"><code>Instant</code></a> instead.</p>\n<p>Returns an <a href=\"../result/enum.Result.html#variant.Err\" title=\"variant std::result::Result::Err\"><code>Err</code></a> if <code>self</code> is later than the current system time, and\nthe error contains how far from the current system time <code>self</code> is.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::thread::sleep;\n<span class=\"kw\">use </span>std::time::{Duration, SystemTime};\n\n<span class=\"kw\">let </span>sys_time = SystemTime::now();\n<span class=\"kw\">let </span>one_sec = Duration::from_secs(<span class=\"number\">1</span>);\nsleep(one_sec);\n<span class=\"macro\">assert!</span>(sys_time.elapsed().unwrap() &gt;= one_sec);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::thread::sleep;%0A++++use+std::time::%7BDuration,+SystemTime%7D;%0A++++%0A++++let+sys_time+=+SystemTime::now();%0A++++let+one_sec+=+Duration::from_secs(1);%0A++++sleep(one_sec);%0A++++assert!(sys_time.elapsed().unwrap()+%3E=+one_sec);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.checked_add\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"../../src/std/time.rs.html#579-581\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.checked_add\" class=\"fn\">checked_add</a>(&amp;self, duration: <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"struct.SystemTime.html\" title=\"struct std::time::SystemTime\">SystemTime</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns <code>Some(t)</code> where <code>t</code> is the time <code>self + duration</code> if <code>t</code> can be represented as\n<code>SystemTime</code> (which means it’s inside the bounds of the underlying data structure), <code>None</code>\notherwise.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.checked_sub\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"../../src/std/time.rs.html#587-589\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.checked_sub\" class=\"fn\">checked_sub</a>(&amp;self, duration: <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"struct.SystemTime.html\" title=\"struct std::time::SystemTime\">SystemTime</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns <code>Some(t)</code> where <code>t</code> is the time <code>self - duration</code> if <code>t</code> can be represented as\n<code>SystemTime</code> (which means it’s inside the bounds of the underlying data structure), <code>None</code>\notherwise.</p>\n</div></details></div></details></div><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">§</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Add%3CDuration%3E-for-SystemTime\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../src/std/time.rs.html#593-603\">source</a></span><a href=\"#impl-Add%3CDuration%3E-for-SystemTime\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a>&lt;<a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>&gt; for <a class=\"struct\" href=\"struct.SystemTime.html\" title=\"struct std::time::SystemTime\">SystemTime</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/time.rs.html#600-602\">source</a><a href=\"#method.add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, dur: <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>) -&gt; <a class=\"struct\" href=\"struct.SystemTime.html\" title=\"struct std::time::SystemTime\">SystemTime</a></h4></section></summary><div class=\"docblock\"><h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>This function may panic if the resulting point in time cannot be represented by the\nunderlying data structure. See <a href=\"struct.SystemTime.html#method.checked_add\" title=\"method std::time::SystemTime::checked_add\"><code>SystemTime::checked_add</code></a> for a version without panic.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"struct.SystemTime.html\" title=\"struct std::time::SystemTime\">SystemTime</a></h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>+</code> operator.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AddAssign%3CDuration%3E-for-SystemTime\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.9.0\">1.9.0</span> · <a class=\"src\" href=\"../../src/std/time.rs.html#606-610\">source</a></span><a href=\"#impl-AddAssign%3CDuration%3E-for-SystemTime\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../ops/trait.AddAssign.html\" title=\"trait std::ops::AddAssign\">AddAssign</a>&lt;<a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>&gt; for <a class=\"struct\" href=\"struct.SystemTime.html\" title=\"struct std::time::SystemTime\">SystemTime</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.add_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/time.rs.html#607-609\">source</a><a href=\"#method.add_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.AddAssign.html#tymethod.add_assign\" class=\"fn\">add_assign</a>(&amp;mut self, other: <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>)</h4></section></summary><div class=\"docblock\">Performs the <code>+=</code> operation. <a href=\"../ops/trait.AddAssign.html#tymethod.add_assign\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Clone-for-SystemTime\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../src/std/time.rs.html#246\">source</a></span><a href=\"#impl-Clone-for-SystemTime\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"struct.SystemTime.html\" title=\"struct std::time::SystemTime\">SystemTime</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/time.rs.html#246\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"struct.SystemTime.html\" title=\"struct std::time::SystemTime\">SystemTime</a></h4></section></summary><div class=\"docblock\">Returns a copy of the value. <a href=\"../clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class=\"docblock\">Performs copy-assignment from <code>source</code>. <a href=\"../clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-SystemTime\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../src/std/time.rs.html#629-633\">source</a></span><a href=\"#impl-Debug-for-SystemTime\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"struct.SystemTime.html\" title=\"struct std::time::SystemTime\">SystemTime</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/time.rs.html#630-632\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"../fmt/type.Result.html\" title=\"type std::fmt::Result\">Result</a></h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Hash-for-SystemTime\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../src/std/time.rs.html#246\">source</a></span><a href=\"#impl-Hash-for-SystemTime\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"struct.SystemTime.html\" title=\"struct std::time::SystemTime\">SystemTime</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/time.rs.html#246\">source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;__H: <a class=\"trait\" href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>&gt;(&amp;self, state: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut __H</a>)</h4></section></summary><div class=\"docblock\">Feeds this value into the given <a href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"../hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#238-240\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Feeds a slice of this type into the given <a href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"../hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Ord-for-SystemTime\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../src/std/time.rs.html#246\">source</a></span><a href=\"#impl-Ord-for-SystemTime\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"struct.SystemTime.html\" title=\"struct std::time::SystemTime\">SystemTime</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/time.rs.html#246\">source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.SystemTime.html\" title=\"struct std::time::SystemTime\">SystemTime</a>) -&gt; <a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a></h4></section></summary><div class=\"docblock\">This method returns an <a href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"../cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#856-858\">source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Compares and returns the maximum of two values. <a href=\"../cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#877-879\">source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Compares and returns the minimum of two values. <a href=\"../cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#903-906\">source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>,</div></h4></section></summary><div class=\"docblock\">Restrict a value to a certain interval. <a href=\"../cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq-for-SystemTime\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../src/std/time.rs.html#246\">source</a></span><a href=\"#impl-PartialEq-for-SystemTime\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"struct.SystemTime.html\" title=\"struct std::time::SystemTime\">SystemTime</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/time.rs.html#246\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.SystemTime.html\" title=\"struct std::time::SystemTime\">SystemTime</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialOrd-for-SystemTime\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../src/std/time.rs.html#246\">source</a></span><a href=\"#impl-PartialOrd-for-SystemTime\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a> for <a class=\"struct\" href=\"struct.SystemTime.html\" title=\"struct std::time::SystemTime\">SystemTime</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/time.rs.html#246\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.SystemTime.html\" title=\"struct std::time::SystemTime\">SystemTime</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\">This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"../cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180\">source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"../cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198\">source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"../cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215\">source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"../cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233\">source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"../cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Sub%3CDuration%3E-for-SystemTime\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../src/std/time.rs.html#613-619\">source</a></span><a href=\"#impl-Sub%3CDuration%3E-for-SystemTime\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a>&lt;<a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>&gt; for <a class=\"struct\" href=\"struct.SystemTime.html\" title=\"struct std::time::SystemTime\">SystemTime</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"struct.SystemTime.html\" title=\"struct std::time::SystemTime\">SystemTime</a></h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sub\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/time.rs.html#616-618\">source</a><a href=\"#method.sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, dur: <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>) -&gt; <a class=\"struct\" href=\"struct.SystemTime.html\" title=\"struct std::time::SystemTime\">SystemTime</a></h4></section></summary><div class=\"docblock\">Performs the <code>-</code> operation. <a href=\"../ops/trait.Sub.html#tymethod.sub\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SubAssign%3CDuration%3E-for-SystemTime\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.9.0\">1.9.0</span> · <a class=\"src\" href=\"../../src/std/time.rs.html#622-626\">source</a></span><a href=\"#impl-SubAssign%3CDuration%3E-for-SystemTime\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../ops/trait.SubAssign.html\" title=\"trait std::ops::SubAssign\">SubAssign</a>&lt;<a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>&gt; for <a class=\"struct\" href=\"struct.SystemTime.html\" title=\"struct std::time::SystemTime\">SystemTime</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sub_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/time.rs.html#623-625\">source</a><a href=\"#method.sub_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.SubAssign.html#tymethod.sub_assign\" class=\"fn\">sub_assign</a>(&amp;mut self, other: <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>)</h4></section></summary><div class=\"docblock\">Performs the <code>-=</code> operation. <a href=\"../ops/trait.SubAssign.html#tymethod.sub_assign\">Read more</a></div></details></div></details><section id=\"impl-Copy-for-SystemTime\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../src/std/time.rs.html#246\">source</a></span><a href=\"#impl-Copy-for-SystemTime\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a> for <a class=\"struct\" href=\"struct.SystemTime.html\" title=\"struct std::time::SystemTime\">SystemTime</a></h3></section><section id=\"impl-Eq-for-SystemTime\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../src/std/time.rs.html#246\">source</a></span><a href=\"#impl-Eq-for-SystemTime\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"struct.SystemTime.html\" title=\"struct std::time::SystemTime\">SystemTime</a></h3></section><section id=\"impl-StructuralPartialEq-for-SystemTime\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../src/std/time.rs.html#246\">source</a></span><a href=\"#impl-StructuralPartialEq-for-SystemTime\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.StructuralPartialEq.html\" title=\"trait std::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"struct\" href=\"struct.SystemTime.html\" title=\"struct std::time::SystemTime\">SystemTime</a></h3></section></div><h2 id=\"synthetic-implementations\" class=\"section-header\">Auto Trait Implementations<a href=\"#synthetic-implementations\" class=\"anchor\">§</a></h2><div id=\"synthetic-implementations-list\"><section id=\"impl-Freeze-for-SystemTime\" class=\"impl\"><a href=\"#impl-Freeze-for-SystemTime\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"struct\" href=\"struct.SystemTime.html\" title=\"struct std::time::SystemTime\">SystemTime</a></h3></section><section id=\"impl-RefUnwindSafe-for-SystemTime\" class=\"impl\"><a href=\"#impl-RefUnwindSafe-for-SystemTime\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"struct\" href=\"struct.SystemTime.html\" title=\"struct std::time::SystemTime\">SystemTime</a></h3></section><section id=\"impl-Send-for-SystemTime\" class=\"impl\"><a href=\"#impl-Send-for-SystemTime\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"struct\" href=\"struct.SystemTime.html\" title=\"struct std::time::SystemTime\">SystemTime</a></h3></section><section id=\"impl-Sync-for-SystemTime\" class=\"impl\"><a href=\"#impl-Sync-for-SystemTime\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"struct.SystemTime.html\" title=\"struct std::time::SystemTime\">SystemTime</a></h3></section><section id=\"impl-Unpin-for-SystemTime\" class=\"impl\"><a href=\"#impl-Unpin-for-SystemTime\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"struct\" href=\"struct.SystemTime.html\" title=\"struct std::time::SystemTime\">SystemTime</a></h3></section><section id=\"impl-UnwindSafe-for-SystemTime\" class=\"impl\"><a href=\"#impl-UnwindSafe-for-SystemTime\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"struct.SystemTime.html\" title=\"struct std::time::SystemTime\">SystemTime</a></h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">§</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Any-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a><a href=\"#impl-Any-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#141\">source</a><a href=\"#method.type_id\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../any/trait.Any.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\">Gets the <code>TypeId</code> of <code>self</code>. <a href=\"../any/trait.Any.html#tymethod.type_id\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Borrow%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208\">source</a><a href=\"#impl-Borrow%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#210\">source</a><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216\">source</a><a href=\"#impl-BorrowMut%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#217\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765\">source</a><a href=\"#impl-From%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the argument unchanged.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Into%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750\">source</a><a href=\"#impl-Into%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758\">source</a><a href=\"#method.into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; U</h4></section></summary><div class=\"docblock\"><p>Calls <code>U::from(self)</code>.</p>\n<p>That is, this conversion is whatever the implementation of\n<code><a href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for U</code> chooses to do.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-ToOwned-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85\">source</a><a href=\"#impl-ToOwned-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.ToOwned.html\" title=\"trait std::borrow::ToOwned\">ToOwned</a> for T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Owned\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Owned\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../borrow/trait.ToOwned.html#associatedtype.Owned\" class=\"associatedtype\">Owned</a> = T</h4></section></summary><div class=\"docblock\">The resulting type after obtaining ownership.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_owned\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88\">source</a><a href=\"#method.to_owned\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.ToOwned.html#tymethod.to_owned\" class=\"fn\">to_owned</a>(&amp;self) -&gt; T</h4></section></summary><div class=\"docblock\">Creates owned data from borrowed data, usually by cloning. <a href=\"../borrow/trait.ToOwned.html#tymethod.to_owned\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92\">source</a><a href=\"#method.clone_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.ToOwned.html#method.clone_into\" class=\"fn\">clone_into</a>(&amp;self, target: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>)</h4></section></summary><div class=\"docblock\">Uses borrowed data to replace owned data, usually by cloning. <a href=\"../borrow/trait.ToOwned.html#method.clone_into\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryFrom%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807\">source</a><a href=\"#impl-TryFrom%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812\">source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: U) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, &lt;T as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryInto%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792\">source</a><a href=\"#impl-TryInto%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryInto.html\" title=\"trait std::convert::TryInto\">TryInto</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryInto.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797\">source</a><a href=\"#method.try_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryInto.html#tymethod.try_into\" class=\"fn\">try_into</a>(self) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;U, &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details></div></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:25:49.461Z"
}