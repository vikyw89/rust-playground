{
	"title": "poll_fn in std::future - Rust",
	"url": "https://doc.rust-lang.org/stable/std/future/fn.poll_fn.html",
	"markdown": "# poll\\_fn in std::future - Rust\n\n## Function [std](../index.html)::[future](index.html)::[poll\\_fn](#)\n\n1.64.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/future/poll_fn.rs.html#115-117) ·\n\n```\npub fn poll_fn<T, F>(f: F) -> PollFn<F> ⓘwhere\n    F: FnMut(&mut Context<'_>) -> Poll<T>,\n```\n\nExpand description\n\nCreates a future that wraps a function returning [`Poll`](../task/enum.Poll.html \"enum std::task::Poll\").\n\nPolling the future delegates to the wrapped function. If the returned future is pinned, then the captured environment of the wrapped function is also pinned in-place, so as long as the closure does not move out of its captures it can soundly create pinned references to them.\n\n## [§](#examples)Examples\n\n```\nuse core::future::poll_fn;\nuse std::task::{Context, Poll};\n\nfn read_line(_cx: &mut Context<'_>) -> Poll<String> {\n    Poll::Ready(\"Hello, World!\".into())\n}\n\nlet read_future = poll_fn(read_line);\nassert_eq!(read_future.await, \"Hello, World!\".to_owned());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++async+fn+run()+%7B%0A++++use+core::future::poll_fn;%0A++++use+std::task::%7BContext,+Poll%7D;%0A++++%0A++++fn+read_line(_cx:+%26mut+Context%3C%27_%3E)+-%3E+Poll%3CString%3E+%7B%0A++++++++Poll::Ready(%22Hello,+World!%22.into())%0A++++%7D%0A++++%0A++++let+read_future+=+poll_fn(read_line);%0A++++assert_eq!(read_future.await,+%22Hello,+World!%22.to_owned());%0A++++%7D%0A%7D&edition=2021)\n\n### [§](#capturing-a-pinned-state)Capturing a pinned state\n\nExample of a closure wrapping inner futures:\n\n```\nuse core::future::{self, Future};\nuse core::task::Poll;\n\n/// Resolves to the first future that completes. In the event of a tie, `a` wins.\nfn naive_select<T>(\n    a: impl Future<Output = T>,\n    b: impl Future<Output = T>,\n) -> impl Future<Output = T>\n{\n    let (mut a, mut b) = (Box::pin(a), Box::pin(b));\n    future::poll_fn(move |cx| {\n        if let Poll::Ready(r) = a.as_mut().poll(cx) {\n            Poll::Ready(r)\n        } else if let Poll::Ready(r) = b.as_mut().poll(cx) {\n            Poll::Ready(r)\n        } else {\n            Poll::Pending\n        }\n    })\n}\n\nlet a = async { 42 };\nlet b = future::pending();\nlet v = naive_select(a, b).await;\nassert_eq!(v, 42);\n\nlet a = future::pending();\nlet b = async { 27 };\nlet v = naive_select(a, b).await;\nassert_eq!(v, 27);\n\nlet a = async { 42 };\nlet b = async { 27 };\nlet v = naive_select(a, b).await;\nassert_eq!(v, 42); // biased towards `a` in case of tie!\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++async+fn+run()+%7B%0A++++use+core::future::%7Bself,+Future%7D;%0A++++use+core::task::Poll;%0A++++%0A++++///+Resolves+to+the+first+future+that+completes.+In+the+event+of+a+tie,+%60a%60+wins.%0A++++fn+naive_select%3CT%3E(%0A++++++++a:+impl+Future%3COutput+=+T%3E,%0A++++++++b:+impl+Future%3COutput+=+T%3E,%0A++++)+-%3E+impl+Future%3COutput+=+T%3E%0A++++%7B%0A++++++++let+(mut+a,+mut+b)+=+(Box::pin(a),+Box::pin(b));%0A++++++++future::poll_fn(move+%7Ccx%7C+%7B%0A++++++++++++if+let+Poll::Ready(r)+=+a.as_mut().poll(cx)+%7B%0A++++++++++++++++Poll::Ready(r)%0A++++++++++++%7D+else+if+let+Poll::Ready(r)+=+b.as_mut().poll(cx)+%7B%0A++++++++++++++++Poll::Ready(r)%0A++++++++++++%7D+else+%7B%0A++++++++++++++++Poll::Pending%0A++++++++++++%7D%0A++++++++%7D)%0A++++%7D%0A++++%0A++++let+a+=+async+%7B+42+%7D;%0A++++let+b+=+future::pending();%0A++++let+v+=+naive_select(a,+b).await;%0A++++assert_eq!(v,+42);%0A++++%0A++++let+a+=+future::pending();%0A++++let+b+=+async+%7B+27+%7D;%0A++++let+v+=+naive_select(a,+b).await;%0A++++assert_eq!(v,+27);%0A++++%0A++++let+a+=+async+%7B+42+%7D;%0A++++let+b+=+async+%7B+27+%7D;%0A++++let+v+=+naive_select(a,+b).await;%0A++++assert_eq!(v,+42);+//+biased+towards+%60a%60+in+case+of+tie!%0A++++%7D%0A%7D&edition=2021)\n\nThis time without [`Box::pin`](about:blank/std/boxed/struct.Box.html#method.pin)ning:\n\n```\nuse core::future::{self, Future};\nuse core::pin::pin;\nuse core::task::Poll;\n\n/// Resolves to the first future that completes. In the event of a tie, `a` wins.\nfn naive_select<T>(\n    a: impl Future<Output = T>,\n    b: impl Future<Output = T>,\n) -> impl Future<Output = T>\n{\n    async {\n        let (mut a, mut b) = (pin!(a), pin!(b));\n        future::poll_fn(move |cx| {\n            if let Poll::Ready(r) = a.as_mut().poll(cx) {\n                Poll::Ready(r)\n            } else if let Poll::Ready(r) = b.as_mut().poll(cx) {\n                Poll::Ready(r)\n            } else {\n                Poll::Pending\n            }\n        }).await\n    }\n}\n\nlet a = async { 42 };\nlet b = future::pending();\nlet v = naive_select(a, b).await;\nassert_eq!(v, 42);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++async+fn+run()+%7B%0A++++use+core::future::%7Bself,+Future%7D;%0A++++use+core::pin::pin;%0A++++use+core::task::Poll;%0A++++%0A++++///+Resolves+to+the+first+future+that+completes.+In+the+event+of+a+tie,+%60a%60+wins.%0A++++fn+naive_select%3CT%3E(%0A++++++++a:+impl+Future%3COutput+=+T%3E,%0A++++++++b:+impl+Future%3COutput+=+T%3E,%0A++++)+-%3E+impl+Future%3COutput+=+T%3E%0A++++%7B%0A++++++++async+%7B%0A++++++++++++let+(mut+a,+mut+b)+=+(pin!(a),+pin!(b));%0A++++++++++++future::poll_fn(move+%7Ccx%7C+%7B%0A++++++++++++++++if+let+Poll::Ready(r)+=+a.as_mut().poll(cx)+%7B%0A++++++++++++++++++++Poll::Ready(r)%0A++++++++++++++++%7D+else+if+let+Poll::Ready(r)+=+b.as_mut().poll(cx)+%7B%0A++++++++++++++++++++Poll::Ready(r)%0A++++++++++++++++%7D+else+%7B%0A++++++++++++++++++++Poll::Pending%0A++++++++++++++++%7D%0A++++++++++++%7D).await%0A++++++++%7D%0A++++%7D%0A++++%0A++++let+a+=+async+%7B+42+%7D;%0A++++let+b+=+future::pending();%0A++++let+v+=+naive_select(a,+b).await;%0A++++assert_eq!(v,+42);%0A++++%7D%0A%7D&edition=2021)\n\n-   Notice how, by virtue of being in an `async` context, we have been able to make the [`pin!`](../pin/macro.pin.html \"macro std::pin::pin\") macro work, thereby avoiding any need for the `unsafe` `[Pin::new_unchecked](about:blank/pin/struct.Pin.html#method.new_unchecked \"associated function std::pin::Pin::new_unchecked\")(&mut fut)` constructor.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Creates a future that wraps a function returning `Poll`.\"><title>poll_fn in std::future - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc fn\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><div class=\"sidebar-elems\"><h2><a href=\"index.html\">In std::future</a></h2><h3><a href=\"index.html#macros\">Macros</a></h3><ul class=\"block macro\"><li><a href=\"macro.join.html\">join</a></li></ul><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.AsyncDropInPlace.html\">AsyncDropInPlace</a></li><li><a href=\"struct.Pending.html\">Pending</a></li><li><a href=\"struct.PollFn.html\">PollFn</a></li><li><a href=\"struct.Ready.html\">Ready</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.AsyncDrop.html\">AsyncDrop</a></li><li><a href=\"trait.Future.html\">Future</a></li><li><a href=\"trait.IntoFuture.html\">IntoFuture</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.async_drop.html\">async_drop</a></li><li><a href=\"fn.async_drop_in_place.html\">async_drop_in_place</a></li><li><a href=\"fn.pending.html\">pending</a></li><li><a href=\"fn.poll_fn.html\">poll_fn</a></li><li><a href=\"fn.ready.html\">ready</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Function <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">future</a>::<wbr><a class=\"fn\" href=\"#\">poll_fn</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.64.0\">1.64.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/future/poll_fn.rs.html#115-117\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub fn poll_fn&lt;T, F&gt;(f: F) -&gt; <a class=\"struct\" href=\"struct.PollFn.html\" title=\"struct std::future::PollFn\">PollFn</a>&lt;F&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"PollFn<F>\">ⓘ</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(&amp;mut <a class=\"struct\" href=\"../task/struct.Context.html\" title=\"struct std::task::Context\">Context</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"../task/enum.Poll.html\" title=\"enum std::task::Poll\">Poll</a>&lt;T&gt;,</div></code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Creates a future that wraps a function returning <a href=\"../task/enum.Poll.html\" title=\"enum std::task::Poll\"><code>Poll</code></a>.</p>\n<p>Polling the future delegates to the wrapped function. If the returned future is pinned, then the\ncaptured environment of the wrapped function is also pinned in-place, so as long as the closure\ndoes not move out of its captures it can soundly create pinned references to them.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>core::future::poll_fn;\n<span class=\"kw\">use </span>std::task::{Context, Poll};\n\n<span class=\"kw\">fn </span>read_line(_cx: <span class=\"kw-2\">&amp;mut </span>Context&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; Poll&lt;String&gt; {\n    Poll::Ready(<span class=\"string\">\"Hello, World!\"</span>.into())\n}\n\n<span class=\"kw\">let </span>read_future = poll_fn(read_line);\n<span class=\"macro\">assert_eq!</span>(read_future.<span class=\"kw\">await</span>, <span class=\"string\">\"Hello, World!\"</span>.to_owned());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++async+fn+run()+%7B%0A++++use+core::future::poll_fn;%0A++++use+std::task::%7BContext,+Poll%7D;%0A++++%0A++++fn+read_line(_cx:+%26mut+Context%3C'_%3E)+-%3E+Poll%3CString%3E+%7B%0A++++++++Poll::Ready(%22Hello,+World!%22.into())%0A++++%7D%0A++++%0A++++let+read_future+=+poll_fn(read_line);%0A++++assert_eq!(read_future.await,+%22Hello,+World!%22.to_owned());%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<h3 id=\"capturing-a-pinned-state\"><a class=\"doc-anchor\" href=\"#capturing-a-pinned-state\">§</a>Capturing a pinned state</h3>\n<p>Example of a closure wrapping inner futures:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>core::future::{<span class=\"self\">self</span>, Future};\n<span class=\"kw\">use </span>core::task::Poll;\n\n<span class=\"doccomment\">/// Resolves to the first future that completes. In the event of a tie, `a` wins.\n</span><span class=\"kw\">fn </span>naive_select&lt;T&gt;(\n    a: <span class=\"kw\">impl </span>Future&lt;Output = T&gt;,\n    b: <span class=\"kw\">impl </span>Future&lt;Output = T&gt;,\n) -&gt; <span class=\"kw\">impl </span>Future&lt;Output = T&gt;\n{\n    <span class=\"kw\">let </span>(<span class=\"kw-2\">mut </span>a, <span class=\"kw-2\">mut </span>b) = (Box::pin(a), Box::pin(b));\n    future::poll_fn(<span class=\"kw\">move </span>|cx| {\n        <span class=\"kw\">if let </span>Poll::Ready(r) = a.as_mut().poll(cx) {\n            Poll::Ready(r)\n        } <span class=\"kw\">else if let </span>Poll::Ready(r) = b.as_mut().poll(cx) {\n            Poll::Ready(r)\n        } <span class=\"kw\">else </span>{\n            Poll::Pending\n        }\n    })\n}\n\n<span class=\"kw\">let </span>a = <span class=\"kw\">async </span>{ <span class=\"number\">42 </span>};\n<span class=\"kw\">let </span>b = future::pending();\n<span class=\"kw\">let </span>v = naive_select(a, b).<span class=\"kw\">await</span>;\n<span class=\"macro\">assert_eq!</span>(v, <span class=\"number\">42</span>);\n\n<span class=\"kw\">let </span>a = future::pending();\n<span class=\"kw\">let </span>b = <span class=\"kw\">async </span>{ <span class=\"number\">27 </span>};\n<span class=\"kw\">let </span>v = naive_select(a, b).<span class=\"kw\">await</span>;\n<span class=\"macro\">assert_eq!</span>(v, <span class=\"number\">27</span>);\n\n<span class=\"kw\">let </span>a = <span class=\"kw\">async </span>{ <span class=\"number\">42 </span>};\n<span class=\"kw\">let </span>b = <span class=\"kw\">async </span>{ <span class=\"number\">27 </span>};\n<span class=\"kw\">let </span>v = naive_select(a, b).<span class=\"kw\">await</span>;\n<span class=\"macro\">assert_eq!</span>(v, <span class=\"number\">42</span>); <span class=\"comment\">// biased towards `a` in case of tie!</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++async+fn+run()+%7B%0A++++use+core::future::%7Bself,+Future%7D;%0A++++use+core::task::Poll;%0A++++%0A++++///+Resolves+to+the+first+future+that+completes.+In+the+event+of+a+tie,+%60a%60+wins.%0A++++fn+naive_select%3CT%3E(%0A++++++++a:+impl+Future%3COutput+=+T%3E,%0A++++++++b:+impl+Future%3COutput+=+T%3E,%0A++++)+-%3E+impl+Future%3COutput+=+T%3E%0A++++%7B%0A++++++++let+(mut+a,+mut+b)+=+(Box::pin(a),+Box::pin(b));%0A++++++++future::poll_fn(move+%7Ccx%7C+%7B%0A++++++++++++if+let+Poll::Ready(r)+=+a.as_mut().poll(cx)+%7B%0A++++++++++++++++Poll::Ready(r)%0A++++++++++++%7D+else+if+let+Poll::Ready(r)+=+b.as_mut().poll(cx)+%7B%0A++++++++++++++++Poll::Ready(r)%0A++++++++++++%7D+else+%7B%0A++++++++++++++++Poll::Pending%0A++++++++++++%7D%0A++++++++%7D)%0A++++%7D%0A++++%0A++++let+a+=+async+%7B+42+%7D;%0A++++let+b+=+future::pending();%0A++++let+v+=+naive_select(a,+b).await;%0A++++assert_eq!(v,+42);%0A++++%0A++++let+a+=+future::pending();%0A++++let+b+=+async+%7B+27+%7D;%0A++++let+v+=+naive_select(a,+b).await;%0A++++assert_eq!(v,+27);%0A++++%0A++++let+a+=+async+%7B+42+%7D;%0A++++let+b+=+async+%7B+27+%7D;%0A++++let+v+=+naive_select(a,+b).await;%0A++++assert_eq!(v,+42);+//+biased+towards+%60a%60+in+case+of+tie!%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<p>This time without <a href=\"../../std/boxed/struct.Box.html#method.pin\"><code>Box::pin</code></a>ning:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>core::future::{<span class=\"self\">self</span>, Future};\n<span class=\"kw\">use </span>core::pin::pin;\n<span class=\"kw\">use </span>core::task::Poll;\n\n<span class=\"doccomment\">/// Resolves to the first future that completes. In the event of a tie, `a` wins.\n</span><span class=\"kw\">fn </span>naive_select&lt;T&gt;(\n    a: <span class=\"kw\">impl </span>Future&lt;Output = T&gt;,\n    b: <span class=\"kw\">impl </span>Future&lt;Output = T&gt;,\n) -&gt; <span class=\"kw\">impl </span>Future&lt;Output = T&gt;\n{\n    <span class=\"kw\">async </span>{\n        <span class=\"kw\">let </span>(<span class=\"kw-2\">mut </span>a, <span class=\"kw-2\">mut </span>b) = (<span class=\"macro\">pin!</span>(a), <span class=\"macro\">pin!</span>(b));\n        future::poll_fn(<span class=\"kw\">move </span>|cx| {\n            <span class=\"kw\">if let </span>Poll::Ready(r) = a.as_mut().poll(cx) {\n                Poll::Ready(r)\n            } <span class=\"kw\">else if let </span>Poll::Ready(r) = b.as_mut().poll(cx) {\n                Poll::Ready(r)\n            } <span class=\"kw\">else </span>{\n                Poll::Pending\n            }\n        }).<span class=\"kw\">await\n    </span>}\n}\n\n<span class=\"kw\">let </span>a = <span class=\"kw\">async </span>{ <span class=\"number\">42 </span>};\n<span class=\"kw\">let </span>b = future::pending();\n<span class=\"kw\">let </span>v = naive_select(a, b).<span class=\"kw\">await</span>;\n<span class=\"macro\">assert_eq!</span>(v, <span class=\"number\">42</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++async+fn+run()+%7B%0A++++use+core::future::%7Bself,+Future%7D;%0A++++use+core::pin::pin;%0A++++use+core::task::Poll;%0A++++%0A++++///+Resolves+to+the+first+future+that+completes.+In+the+event+of+a+tie,+%60a%60+wins.%0A++++fn+naive_select%3CT%3E(%0A++++++++a:+impl+Future%3COutput+=+T%3E,%0A++++++++b:+impl+Future%3COutput+=+T%3E,%0A++++)+-%3E+impl+Future%3COutput+=+T%3E%0A++++%7B%0A++++++++async+%7B%0A++++++++++++let+(mut+a,+mut+b)+=+(pin!(a),+pin!(b));%0A++++++++++++future::poll_fn(move+%7Ccx%7C+%7B%0A++++++++++++++++if+let+Poll::Ready(r)+=+a.as_mut().poll(cx)+%7B%0A++++++++++++++++++++Poll::Ready(r)%0A++++++++++++++++%7D+else+if+let+Poll::Ready(r)+=+b.as_mut().poll(cx)+%7B%0A++++++++++++++++++++Poll::Ready(r)%0A++++++++++++++++%7D+else+%7B%0A++++++++++++++++++++Poll::Pending%0A++++++++++++++++%7D%0A++++++++++++%7D).await%0A++++++++%7D%0A++++%7D%0A++++%0A++++let+a+=+async+%7B+42+%7D;%0A++++let+b+=+future::pending();%0A++++let+v+=+naive_select(a,+b).await;%0A++++assert_eq!(v,+42);%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<ul>\n<li>Notice how, by virtue of being in an <code>async</code> context, we have been able to make the <a href=\"../pin/macro.pin.html\" title=\"macro std::pin::pin\"><code>pin!</code></a>\nmacro work, thereby avoiding any need for the <code>unsafe</code>\n<code><a href=\"../pin/struct.Pin.html#method.new_unchecked\" title=\"associated function std::pin::Pin::new_unchecked\">Pin::new_unchecked</a>(&amp;mut fut)</code> constructor.</li>\n</ul>\n</div></details><script type=\"text/json\" id=\"notable-traits-data\">{\"PollFn<F>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"struct.PollFn.html\\\" title=\\\"struct std::future::PollFn\\\">PollFn</a>&lt;F&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;T, F&gt; <a class=\\\"trait\\\" href=\\\"trait.Future.html\\\" title=\\\"trait std::future::Future\\\">Future</a> for <a class=\\\"struct\\\" href=\\\"struct.PollFn.html\\\" title=\\\"struct std::future::PollFn\\\">PollFn</a>&lt;F&gt;<div class=\\\"where\\\">where\\n    F: <a class=\\\"trait\\\" href=\\\"../ops/trait.FnMut.html\\\" title=\\\"trait std::ops::FnMut\\\">FnMut</a>(&amp;mut <a class=\\\"struct\\\" href=\\\"../task/struct.Context.html\\\" title=\\\"struct std::task::Context\\\">Context</a>&lt;'_&gt;) -&gt; <a class=\\\"enum\\\" href=\\\"../task/enum.Poll.html\\\" title=\\\"enum std::task::Poll\\\">Poll</a>&lt;T&gt;,</div></div><div class=\\\"where\\\">    type <a href=\\\"trait.Future.html#associatedtype.Output\\\" class=\\\"associatedtype\\\">Output</a> = T;</div>\"}</script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:23:16.420Z"
}