{
	"title": "Char in std::ascii - Rust",
	"url": "https://doc.rust-lang.org/stable/std/ascii/enum.Char.html",
	"markdown": "# Char in std::ascii - Rust\n\n```\n#[repr(u8)]pub enum Char {\nShow 128 variants    Null = 0,\n    StartOfHeading = 1,\n    StartOfText = 2,\n    EndOfText = 3,\n    EndOfTransmission = 4,\n    Enquiry = 5,\n    Acknowledge = 6,\n    Bell = 7,\n    Backspace = 8,\n    CharacterTabulation = 9,\n    LineFeed = 10,\n    LineTabulation = 11,\n    FormFeed = 12,\n    CarriageReturn = 13,\n    ShiftOut = 14,\n    ShiftIn = 15,\n    DataLinkEscape = 16,\n    DeviceControlOne = 17,\n    DeviceControlTwo = 18,\n    DeviceControlThree = 19,\n    DeviceControlFour = 20,\n    NegativeAcknowledge = 21,\n    SynchronousIdle = 22,\n    EndOfTransmissionBlock = 23,\n    Cancel = 24,\n    EndOfMedium = 25,\n    Substitute = 26,\n    Escape = 27,\n    InformationSeparatorFour = 28,\n    InformationSeparatorThree = 29,\n    InformationSeparatorTwo = 30,\n    InformationSeparatorOne = 31,\n    Space = 32,\n    ExclamationMark = 33,\n    QuotationMark = 34,\n    NumberSign = 35,\n    DollarSign = 36,\n    PercentSign = 37,\n    Ampersand = 38,\n    Apostrophe = 39,\n    LeftParenthesis = 40,\n    RightParenthesis = 41,\n    Asterisk = 42,\n    PlusSign = 43,\n    Comma = 44,\n    HyphenMinus = 45,\n    FullStop = 46,\n    Solidus = 47,\n    Digit0 = 48,\n    Digit1 = 49,\n    Digit2 = 50,\n    Digit3 = 51,\n    Digit4 = 52,\n    Digit5 = 53,\n    Digit6 = 54,\n    Digit7 = 55,\n    Digit8 = 56,\n    Digit9 = 57,\n    Colon = 58,\n    Semicolon = 59,\n    LessThanSign = 60,\n    EqualsSign = 61,\n    GreaterThanSign = 62,\n    QuestionMark = 63,\n    CommercialAt = 64,\n    CapitalA = 65,\n    CapitalB = 66,\n    CapitalC = 67,\n    CapitalD = 68,\n    CapitalE = 69,\n    CapitalF = 70,\n    CapitalG = 71,\n    CapitalH = 72,\n    CapitalI = 73,\n    CapitalJ = 74,\n    CapitalK = 75,\n    CapitalL = 76,\n    CapitalM = 77,\n    CapitalN = 78,\n    CapitalO = 79,\n    CapitalP = 80,\n    CapitalQ = 81,\n    CapitalR = 82,\n    CapitalS = 83,\n    CapitalT = 84,\n    CapitalU = 85,\n    CapitalV = 86,\n    CapitalW = 87,\n    CapitalX = 88,\n    CapitalY = 89,\n    CapitalZ = 90,\n    LeftSquareBracket = 91,\n    ReverseSolidus = 92,\n    RightSquareBracket = 93,\n    CircumflexAccent = 94,\n    LowLine = 95,\n    GraveAccent = 96,\n    SmallA = 97,\n    SmallB = 98,\n    SmallC = 99,\n    SmallD = 100,\n    SmallE = 101,\n    SmallF = 102,\n    SmallG = 103,\n    SmallH = 104,\n    SmallI = 105,\n    SmallJ = 106,\n    SmallK = 107,\n    SmallL = 108,\n    SmallM = 109,\n    SmallN = 110,\n    SmallO = 111,\n    SmallP = 112,\n    SmallQ = 113,\n    SmallR = 114,\n    SmallS = 115,\n    SmallT = 116,\n    SmallU = 117,\n    SmallV = 118,\n    SmallW = 119,\n    SmallX = 120,\n    SmallY = 121,\n    SmallZ = 122,\n    LeftCurlyBracket = 123,\n    VerticalLine = 124,\n    RightCurlyBracket = 125,\n    Tilde = 126,\n    Delete = 127,\n}\n```\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nExpand description\n\nOne of the 128 Unicode characters from U+0000 through U+007F, often known as the [ASCII](https://www.unicode.org/glossary/index.html#ASCII) subset.\n\nOfficially, this is the first [block](https://www.unicode.org/glossary/index.html#block) in Unicode, _Basic Latin_. For details, see the [_C0 Controls and Basic Latin_](https://www.unicode.org/charts/PDF/U0000.pdf) code chart.\n\nThis block was based on older 7-bit character code standards such as ANSI X3.4-1977, ISO 646-1973, and [NIST FIPS 1-2](https://nvlpubs.nist.gov/nistpubs/Legacy/FIPS/fipspub1-2-1977.pdf).\n\n## [Â§](#when-to-use-this)When to use this\n\nThe main advantage of this subset is that itâ€™s always valid UTF-8. As such, the `&[ascii::Char]` -> `&str` conversion function (as well as other related ones) are O(1): _no_ runtime checks are needed.\n\nIf youâ€™re consuming strings, you should usually handle Unicode and thus accept `str`s, not limit yourself to `ascii::Char`s.\n\nHowever, certain formats are intentionally designed to produce ASCII-only output in order to be 8-bit-clean. In those cases, it can be simpler and faster to generate `ascii::Char`s instead of dealing with the variable width properties of general UTF-8 encoded strings, while still allowing the result to be used freely with other Rust things that deal in general `str`s.\n\nFor example, a UUID library might offer a way to produce the string representation of a UUID as an `[ascii::Char; 36]` to avoid memory allocation yet still allow it to be used as UTF-8 via `as_str` without paying for validation (or needing `unsafe` code) the way it would if it were provided as a `[u8; 36]`.\n\n## [Â§](#layout-1)Layout\n\nThis type is guaranteed to have a size and alignment of 1 byte.\n\n## [Â§](#names)Names\n\nThe variants on this type are [Unicode names](https://www.unicode.org/Public/15.0.0/ucd/NamesList.txt) of the characters in upper camel case, with a few tweaks:\n\n-   For `<control>` characters, the primary alias name is used.\n-   `LATIN` is dropped, as this block has no non-latin letters.\n-   `LETTER` is dropped, as `CAPITAL`/`SMALL` suffices in this block.\n-   `DIGIT`s use a single digit rather than writing out `ZERO`, `ONE`, etc.\n\n[Â§](#variant.Null)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+0000 (The default variant)\n\n[Â§](#variant.StartOfHeading)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+0001\n\n[Â§](#variant.StartOfText)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+0002\n\n[Â§](#variant.EndOfText)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+0003\n\n[Â§](#variant.EndOfTransmission)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+0004\n\n[Â§](#variant.Enquiry)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+0005\n\n[Â§](#variant.Acknowledge)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+0006\n\n[Â§](#variant.Bell)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+0007\n\n[Â§](#variant.Backspace)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+0008\n\n[Â§](#variant.CharacterTabulation)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+0009\n\n[Â§](#variant.LineFeed)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+000A\n\n[Â§](#variant.LineTabulation)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+000B\n\n[Â§](#variant.FormFeed)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+000C\n\n[Â§](#variant.CarriageReturn)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+000D\n\n[Â§](#variant.ShiftOut)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+000E\n\n[Â§](#variant.ShiftIn)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+000F\n\n[Â§](#variant.DataLinkEscape)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+0010\n\n[Â§](#variant.DeviceControlOne)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+0011\n\n[Â§](#variant.DeviceControlTwo)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+0012\n\n[Â§](#variant.DeviceControlThree)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+0013\n\n[Â§](#variant.DeviceControlFour)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+0014\n\n[Â§](#variant.NegativeAcknowledge)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+0015\n\n[Â§](#variant.SynchronousIdle)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+0016\n\n[Â§](#variant.EndOfTransmissionBlock)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+0017\n\n[Â§](#variant.Cancel)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+0018\n\n[Â§](#variant.EndOfMedium)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+0019\n\n[Â§](#variant.Substitute)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+001A\n\n[Â§](#variant.Escape)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+001B\n\n[Â§](#variant.InformationSeparatorFour)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+001C\n\n[Â§](#variant.InformationSeparatorThree)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+001D\n\n[Â§](#variant.InformationSeparatorTwo)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+001E\n\n[Â§](#variant.InformationSeparatorOne)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+001F\n\n[Â§](#variant.Space)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+0020\n\n[Â§](#variant.ExclamationMark)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+0021\n\n[Â§](#variant.QuotationMark)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+0022\n\n[Â§](#variant.NumberSign)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+0023\n\n[Â§](#variant.DollarSign)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+0024\n\n[Â§](#variant.PercentSign)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+0025\n\n[Â§](#variant.Ampersand)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+0026\n\n[Â§](#variant.Apostrophe)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+0027\n\n[Â§](#variant.LeftParenthesis)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+0028\n\n[Â§](#variant.RightParenthesis)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+0029\n\n[Â§](#variant.Asterisk)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+002A\n\n[Â§](#variant.PlusSign)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+002B\n\n[Â§](#variant.Comma)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+002C\n\n[Â§](#variant.HyphenMinus)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+002D\n\n[Â§](#variant.FullStop)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+002E\n\n[Â§](#variant.Solidus)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+002F\n\n[Â§](#variant.Digit0)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+0030\n\n[Â§](#variant.Digit1)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+0031\n\n[Â§](#variant.Digit2)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+0032\n\n[Â§](#variant.Digit3)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+0033\n\n[Â§](#variant.Digit4)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+0034\n\n[Â§](#variant.Digit5)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+0035\n\n[Â§](#variant.Digit6)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+0036\n\n[Â§](#variant.Digit7)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+0037\n\n[Â§](#variant.Digit8)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+0038\n\n[Â§](#variant.Digit9)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+0039\n\n[Â§](#variant.Colon)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+003A\n\n[Â§](#variant.Semicolon)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+003B\n\n[Â§](#variant.LessThanSign)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+003C\n\n[Â§](#variant.EqualsSign)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+003D\n\n[Â§](#variant.GreaterThanSign)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+003E\n\n[Â§](#variant.QuestionMark)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+003F\n\n[Â§](#variant.CommercialAt)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+0040\n\n[Â§](#variant.CapitalA)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+0041\n\n[Â§](#variant.CapitalB)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+0042\n\n[Â§](#variant.CapitalC)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+0043\n\n[Â§](#variant.CapitalD)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+0044\n\n[Â§](#variant.CapitalE)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+0045\n\n[Â§](#variant.CapitalF)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+0046\n\n[Â§](#variant.CapitalG)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+0047\n\n[Â§](#variant.CapitalH)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+0048\n\n[Â§](#variant.CapitalI)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+0049\n\n[Â§](#variant.CapitalJ)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+004A\n\n[Â§](#variant.CapitalK)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+004B\n\n[Â§](#variant.CapitalL)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+004C\n\n[Â§](#variant.CapitalM)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+004D\n\n[Â§](#variant.CapitalN)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+004E\n\n[Â§](#variant.CapitalO)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+004F\n\n[Â§](#variant.CapitalP)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+0050\n\n[Â§](#variant.CapitalQ)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+0051\n\n[Â§](#variant.CapitalR)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+0052\n\n[Â§](#variant.CapitalS)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+0053\n\n[Â§](#variant.CapitalT)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+0054\n\n[Â§](#variant.CapitalU)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+0055\n\n[Â§](#variant.CapitalV)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+0056\n\n[Â§](#variant.CapitalW)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+0057\n\n[Â§](#variant.CapitalX)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+0058\n\n[Â§](#variant.CapitalY)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+0059\n\n[Â§](#variant.CapitalZ)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+005A\n\n[Â§](#variant.LeftSquareBracket)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+005B\n\n[Â§](#variant.ReverseSolidus)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+005C\n\n[Â§](#variant.RightSquareBracket)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+005D\n\n[Â§](#variant.CircumflexAccent)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+005E\n\n[Â§](#variant.LowLine)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+005F\n\n[Â§](#variant.GraveAccent)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+0060\n\n[Â§](#variant.SmallA)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+0061\n\n[Â§](#variant.SmallB)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+0062\n\n[Â§](#variant.SmallC)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+0063\n\n[Â§](#variant.SmallD)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+0064\n\n[Â§](#variant.SmallE)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+0065\n\n[Â§](#variant.SmallF)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+0066\n\n[Â§](#variant.SmallG)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+0067\n\n[Â§](#variant.SmallH)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+0068\n\n[Â§](#variant.SmallI)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+0069\n\n[Â§](#variant.SmallJ)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+006A\n\n[Â§](#variant.SmallK)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+006B\n\n[Â§](#variant.SmallL)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+006C\n\n[Â§](#variant.SmallM)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+006D\n\n[Â§](#variant.SmallN)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+006E\n\n[Â§](#variant.SmallO)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+006F\n\n[Â§](#variant.SmallP)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+0070\n\n[Â§](#variant.SmallQ)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+0071\n\n[Â§](#variant.SmallR)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+0072\n\n[Â§](#variant.SmallS)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+0073\n\n[Â§](#variant.SmallT)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+0074\n\n[Â§](#variant.SmallU)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+0075\n\n[Â§](#variant.SmallV)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+0076\n\n[Â§](#variant.SmallW)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+0077\n\n[Â§](#variant.SmallX)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+0078\n\n[Â§](#variant.SmallY)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+0079\n\n[Â§](#variant.SmallZ)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+007A\n\n[Â§](#variant.LeftCurlyBracket)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+007B\n\n[Â§](#variant.VerticalLine)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+007C\n\n[Â§](#variant.RightCurlyBracket)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+007D\n\n[Â§](#variant.Tilde)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+007E\n\n[Â§](#variant.Delete)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char_variants`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nU+007F\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ascii/ascii_char.rs.html#447)[Â§](#impl-Char)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ascii/ascii_char.rs.html#452)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nCreates an ascii character from the byte `b`, or returns `None` if itâ€™s too large.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ascii/ascii_char.rs.html#469)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nCreates an ASCII character from the byte `b`, without checking whether itâ€™s valid.\n\n##### [Â§](#safety)Safety\n\n`b` must be in `0..=127`, or else this is UB.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ascii/ascii_char.rs.html#480)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nWhen passed the _number_ `0`, `1`, â€¦, `9`, returns the _character_ `'0'`, `'1'`, â€¦, `'9'` respectively.\n\nIf `d >= 10`, returns `None`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ascii/ascii_char.rs.html#506)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nWhen passed the _number_ `0`, `1`, â€¦, `9`, returns the _character_ `'0'`, `'1'`, â€¦, `'9'` respectively, without checking that itâ€™s in-range.\n\n##### [Â§](#safety-1)Safety\n\nThis is immediate UB if called with `d > 64`.\n\nIf `d >= 10` and `d <= 64`, this is allowed to return any value or panic. Notably, it should not be expected to return hex digits, or any other reasonable extension of the decimal digits.\n\n(This lose safety condition is intended to simplify soundness proofs when writing code using this method, since the implementation doesnâ€™t need something really specific, not to make those other arguments do something useful. It might be tightened before stabilization.)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ascii/ascii_char.rs.html#521)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nGets this ASCII character as a byte.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ascii/ascii_char.rs.html#528)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nGets this ASCII character as a `char` Unicode Scalar Value.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ascii/ascii_char.rs.html#535)\n\nðŸ”¬This is a nightly-only experimental API. (`ascii_char`Â [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nViews this ASCII character as a one-code-unit UTF-8 `str`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ascii/ascii_char.rs.html#57)[Â§](#impl-Clone-for-Char)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ascii/ascii_char.rs.html#584)[Â§](#impl-Debug-for-Char)\n\n1.0.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/default.rs.html#165)[Â§](#impl-Default-for-Char)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/default.rs.html#165)[Â§](#method.default)\n\nReturns the default value of `Null`\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ascii/ascii_char.rs.html#577)[Â§](#impl-Display-for-Char)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ascii/ascii_char.rs.html#554)[Â§](#impl-From%3CChar%3E-for-char)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ascii/ascii_char.rs.html#554)[Â§](#method.from)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ascii/ascii_char.rs.html#554)[Â§](#impl-From%3CChar%3E-for-u128)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ascii/ascii_char.rs.html#554)[Â§](#method.from-5)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ascii/ascii_char.rs.html#554)[Â§](#impl-From%3CChar%3E-for-u16)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ascii/ascii_char.rs.html#554)[Â§](#method.from-4)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ascii/ascii_char.rs.html#554)[Â§](#impl-From%3CChar%3E-for-u32)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ascii/ascii_char.rs.html#554)[Â§](#method.from-3)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ascii/ascii_char.rs.html#554)[Â§](#impl-From%3CChar%3E-for-u64)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ascii/ascii_char.rs.html#554)[Â§](#method.from-2)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ascii/ascii_char.rs.html#554)[Â§](#impl-From%3CChar%3E-for-u8)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ascii/ascii_char.rs.html#554)[Â§](#method.from-1)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ascii/ascii_char.rs.html#57)[Â§](#impl-Hash-for-Char)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ascii/ascii_char.rs.html#57)[Â§](#impl-Ord-for-Char)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ascii/ascii_char.rs.html#57)[Â§](#impl-PartialEq-for-Char)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ascii/ascii_char.rs.html#57)[Â§](#method.eq)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[Â§](#method.ne)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ascii/ascii_char.rs.html#57)[Â§](#impl-PartialOrd-for-Char)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ascii/ascii_char.rs.html#57)[Â§](#method.partial_cmp)\n\nThis method returns an ordering between `self` and `other` values if one exists. [Read more](about:blank/cmp/trait.PartialOrd.html#tymethod.partial_cmp)\n\n1.0.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180)[Â§](#method.lt)\n\nThis method tests less than (for `self` and `other`) and is used by the `<` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.lt)\n\n1.0.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198)[Â§](#method.le)\n\nThis method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.le)\n\n1.0.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215)[Â§](#method.gt)\n\nThis method tests greater than (for `self` and `other`) and is used by the `>` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.gt)\n\n1.0.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233)[Â§](#method.ge)\n\nThis method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.ge)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#514)[Â§](#impl-Step-for-Char)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#516)[Â§](#method.steps_between)\n\nðŸ”¬This is a nightly-only experimental API. (`step_trait`Â [#42168](https://github.com/rust-lang/rust/issues/42168))\n\nReturns the number of _successor_ steps required to get from `start` to `end`. [Read more](about:blank/iter/trait.Step.html#tymethod.steps_between)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#521)[Â§](#method.forward_checked)\n\nðŸ”¬This is a nightly-only experimental API. (`step_trait`Â [#42168](https://github.com/rust-lang/rust/issues/42168))\n\nReturns the value that would be obtained by taking the _successor_ of `self` `count` times. [Read more](about:blank/iter/trait.Step.html#tymethod.forward_checked)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#527)[Â§](#method.backward_checked)\n\nðŸ”¬This is a nightly-only experimental API. (`step_trait`Â [#42168](https://github.com/rust-lang/rust/issues/42168))\n\nReturns the value that would be obtained by taking the _predecessor_ of `self` `count` times. [Read more](about:blank/iter/trait.Step.html#tymethod.backward_checked)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#535)[Â§](#method.forward_unchecked)\n\nðŸ”¬This is a nightly-only experimental API. (`step_trait`Â [#42168](https://github.com/rust-lang/rust/issues/42168))\n\nReturns the value that would be obtained by taking the _successor_ of `self` `count` times. [Read more](about:blank/iter/trait.Step.html#method.forward_unchecked)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#545)[Â§](#method.backward_unchecked)\n\nðŸ”¬This is a nightly-only experimental API. (`step_trait`Â [#42168](https://github.com/rust-lang/rust/issues/42168))\n\nReturns the value that would be obtained by taking the _predecessor_ of `self` `count` times. [Read more](about:blank/iter/trait.Step.html#method.backward_unchecked)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#85)[Â§](#method.forward)\n\nðŸ”¬This is a nightly-only experimental API. (`step_trait`Â [#42168](https://github.com/rust-lang/rust/issues/42168))\n\nReturns the value that would be obtained by taking the _successor_ of `self` `count` times. [Read more](about:blank/iter/trait.Step.html#method.forward)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#155)[Â§](#method.backward)\n\nðŸ”¬This is a nightly-only experimental API. (`step_trait`Â [#42168](https://github.com/rust-lang/rust/issues/42168))\n\nReturns the value that would be obtained by taking the _predecessor_ of `self` `count` times. [Read more](about:blank/iter/trait.Step.html#method.backward)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ascii/ascii_char.rs.html#57)[Â§](#impl-Copy-for-Char)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ascii/ascii_char.rs.html#57)[Â§](#impl-Eq-for-Char)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ascii/ascii_char.rs.html#57)[Â§](#impl-StructuralPartialEq-for-Char)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#18)[Â§](#impl-TrustedStep-for-Char)\n\n[Â§](#impl-Freeze-for-Char)\n\n[Â§](#impl-RefUnwindSafe-for-Char)\n\n[Â§](#impl-Send-for-Char)\n\n[Â§](#impl-Sync-for-Char)\n\n[Â§](#impl-Unpin-for-Char)\n\n[Â§](#impl-UnwindSafe-for-Char)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"One of the 128 Unicode characters from U+0000 through U+007F, often known as the ASCII subset.\"><title>Char in std::ascii - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc enum\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">Char</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">Char</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#variants\">Variants</a></h3><ul class=\"block variant\"><li><a href=\"#variant.Acknowledge\">Acknowledge</a></li><li><a href=\"#variant.Ampersand\">Ampersand</a></li><li><a href=\"#variant.Apostrophe\">Apostrophe</a></li><li><a href=\"#variant.Asterisk\">Asterisk</a></li><li><a href=\"#variant.Backspace\">Backspace</a></li><li><a href=\"#variant.Bell\">Bell</a></li><li><a href=\"#variant.Cancel\">Cancel</a></li><li><a href=\"#variant.CapitalA\">CapitalA</a></li><li><a href=\"#variant.CapitalB\">CapitalB</a></li><li><a href=\"#variant.CapitalC\">CapitalC</a></li><li><a href=\"#variant.CapitalD\">CapitalD</a></li><li><a href=\"#variant.CapitalE\">CapitalE</a></li><li><a href=\"#variant.CapitalF\">CapitalF</a></li><li><a href=\"#variant.CapitalG\">CapitalG</a></li><li><a href=\"#variant.CapitalH\">CapitalH</a></li><li><a href=\"#variant.CapitalI\">CapitalI</a></li><li><a href=\"#variant.CapitalJ\">CapitalJ</a></li><li><a href=\"#variant.CapitalK\">CapitalK</a></li><li><a href=\"#variant.CapitalL\">CapitalL</a></li><li><a href=\"#variant.CapitalM\">CapitalM</a></li><li><a href=\"#variant.CapitalN\">CapitalN</a></li><li><a href=\"#variant.CapitalO\">CapitalO</a></li><li><a href=\"#variant.CapitalP\">CapitalP</a></li><li><a href=\"#variant.CapitalQ\">CapitalQ</a></li><li><a href=\"#variant.CapitalR\">CapitalR</a></li><li><a href=\"#variant.CapitalS\">CapitalS</a></li><li><a href=\"#variant.CapitalT\">CapitalT</a></li><li><a href=\"#variant.CapitalU\">CapitalU</a></li><li><a href=\"#variant.CapitalV\">CapitalV</a></li><li><a href=\"#variant.CapitalW\">CapitalW</a></li><li><a href=\"#variant.CapitalX\">CapitalX</a></li><li><a href=\"#variant.CapitalY\">CapitalY</a></li><li><a href=\"#variant.CapitalZ\">CapitalZ</a></li><li><a href=\"#variant.CarriageReturn\">CarriageReturn</a></li><li><a href=\"#variant.CharacterTabulation\">CharacterTabulation</a></li><li><a href=\"#variant.CircumflexAccent\">CircumflexAccent</a></li><li><a href=\"#variant.Colon\">Colon</a></li><li><a href=\"#variant.Comma\">Comma</a></li><li><a href=\"#variant.CommercialAt\">CommercialAt</a></li><li><a href=\"#variant.DataLinkEscape\">DataLinkEscape</a></li><li><a href=\"#variant.Delete\">Delete</a></li><li><a href=\"#variant.DeviceControlFour\">DeviceControlFour</a></li><li><a href=\"#variant.DeviceControlOne\">DeviceControlOne</a></li><li><a href=\"#variant.DeviceControlThree\">DeviceControlThree</a></li><li><a href=\"#variant.DeviceControlTwo\">DeviceControlTwo</a></li><li><a href=\"#variant.Digit0\">Digit0</a></li><li><a href=\"#variant.Digit1\">Digit1</a></li><li><a href=\"#variant.Digit2\">Digit2</a></li><li><a href=\"#variant.Digit3\">Digit3</a></li><li><a href=\"#variant.Digit4\">Digit4</a></li><li><a href=\"#variant.Digit5\">Digit5</a></li><li><a href=\"#variant.Digit6\">Digit6</a></li><li><a href=\"#variant.Digit7\">Digit7</a></li><li><a href=\"#variant.Digit8\">Digit8</a></li><li><a href=\"#variant.Digit9\">Digit9</a></li><li><a href=\"#variant.DollarSign\">DollarSign</a></li><li><a href=\"#variant.EndOfMedium\">EndOfMedium</a></li><li><a href=\"#variant.EndOfText\">EndOfText</a></li><li><a href=\"#variant.EndOfTransmission\">EndOfTransmission</a></li><li><a href=\"#variant.EndOfTransmissionBlock\">EndOfTransmissionBlock</a></li><li><a href=\"#variant.Enquiry\">Enquiry</a></li><li><a href=\"#variant.EqualsSign\">EqualsSign</a></li><li><a href=\"#variant.Escape\">Escape</a></li><li><a href=\"#variant.ExclamationMark\">ExclamationMark</a></li><li><a href=\"#variant.FormFeed\">FormFeed</a></li><li><a href=\"#variant.FullStop\">FullStop</a></li><li><a href=\"#variant.GraveAccent\">GraveAccent</a></li><li><a href=\"#variant.GreaterThanSign\">GreaterThanSign</a></li><li><a href=\"#variant.HyphenMinus\">HyphenMinus</a></li><li><a href=\"#variant.InformationSeparatorFour\">InformationSeparatorFour</a></li><li><a href=\"#variant.InformationSeparatorOne\">InformationSeparatorOne</a></li><li><a href=\"#variant.InformationSeparatorThree\">InformationSeparatorThree</a></li><li><a href=\"#variant.InformationSeparatorTwo\">InformationSeparatorTwo</a></li><li><a href=\"#variant.LeftCurlyBracket\">LeftCurlyBracket</a></li><li><a href=\"#variant.LeftParenthesis\">LeftParenthesis</a></li><li><a href=\"#variant.LeftSquareBracket\">LeftSquareBracket</a></li><li><a href=\"#variant.LessThanSign\">LessThanSign</a></li><li><a href=\"#variant.LineFeed\">LineFeed</a></li><li><a href=\"#variant.LineTabulation\">LineTabulation</a></li><li><a href=\"#variant.LowLine\">LowLine</a></li><li><a href=\"#variant.NegativeAcknowledge\">NegativeAcknowledge</a></li><li><a href=\"#variant.Null\">Null</a></li><li><a href=\"#variant.NumberSign\">NumberSign</a></li><li><a href=\"#variant.PercentSign\">PercentSign</a></li><li><a href=\"#variant.PlusSign\">PlusSign</a></li><li><a href=\"#variant.QuestionMark\">QuestionMark</a></li><li><a href=\"#variant.QuotationMark\">QuotationMark</a></li><li><a href=\"#variant.ReverseSolidus\">ReverseSolidus</a></li><li><a href=\"#variant.RightCurlyBracket\">RightCurlyBracket</a></li><li><a href=\"#variant.RightParenthesis\">RightParenthesis</a></li><li><a href=\"#variant.RightSquareBracket\">RightSquareBracket</a></li><li><a href=\"#variant.Semicolon\">Semicolon</a></li><li><a href=\"#variant.ShiftIn\">ShiftIn</a></li><li><a href=\"#variant.ShiftOut\">ShiftOut</a></li><li><a href=\"#variant.SmallA\">SmallA</a></li><li><a href=\"#variant.SmallB\">SmallB</a></li><li><a href=\"#variant.SmallC\">SmallC</a></li><li><a href=\"#variant.SmallD\">SmallD</a></li><li><a href=\"#variant.SmallE\">SmallE</a></li><li><a href=\"#variant.SmallF\">SmallF</a></li><li><a href=\"#variant.SmallG\">SmallG</a></li><li><a href=\"#variant.SmallH\">SmallH</a></li><li><a href=\"#variant.SmallI\">SmallI</a></li><li><a href=\"#variant.SmallJ\">SmallJ</a></li><li><a href=\"#variant.SmallK\">SmallK</a></li><li><a href=\"#variant.SmallL\">SmallL</a></li><li><a href=\"#variant.SmallM\">SmallM</a></li><li><a href=\"#variant.SmallN\">SmallN</a></li><li><a href=\"#variant.SmallO\">SmallO</a></li><li><a href=\"#variant.SmallP\">SmallP</a></li><li><a href=\"#variant.SmallQ\">SmallQ</a></li><li><a href=\"#variant.SmallR\">SmallR</a></li><li><a href=\"#variant.SmallS\">SmallS</a></li><li><a href=\"#variant.SmallT\">SmallT</a></li><li><a href=\"#variant.SmallU\">SmallU</a></li><li><a href=\"#variant.SmallV\">SmallV</a></li><li><a href=\"#variant.SmallW\">SmallW</a></li><li><a href=\"#variant.SmallX\">SmallX</a></li><li><a href=\"#variant.SmallY\">SmallY</a></li><li><a href=\"#variant.SmallZ\">SmallZ</a></li><li><a href=\"#variant.Solidus\">Solidus</a></li><li><a href=\"#variant.Space\">Space</a></li><li><a href=\"#variant.StartOfHeading\">StartOfHeading</a></li><li><a href=\"#variant.StartOfText\">StartOfText</a></li><li><a href=\"#variant.Substitute\">Substitute</a></li><li><a href=\"#variant.SynchronousIdle\">SynchronousIdle</a></li><li><a href=\"#variant.Tilde\">Tilde</a></li><li><a href=\"#variant.VerticalLine\">VerticalLine</a></li></ul><h3><a href=\"#implementations\">Methods</a></h3><ul class=\"block method\"><li><a href=\"#method.as_str\">as_str</a></li><li><a href=\"#method.digit\">digit</a></li><li><a href=\"#method.digit_unchecked\">digit_unchecked</a></li><li><a href=\"#method.from_u8\">from_u8</a></li><li><a href=\"#method.from_u8_unchecked\">from_u8_unchecked</a></li><li><a href=\"#method.to_char\">to_char</a></li><li><a href=\"#method.to_u8\">to_u8</a></li></ul><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-Clone-for-Char\">Clone</a></li><li><a href=\"#impl-Copy-for-Char\">Copy</a></li><li><a href=\"#impl-Debug-for-Char\">Debug</a></li><li><a href=\"#impl-Default-for-Char\">Default</a></li><li><a href=\"#impl-Display-for-Char\">Display</a></li><li><a href=\"#impl-Eq-for-Char\">Eq</a></li><li><a href=\"#impl-From%3CChar%3E-for-char\">From&lt;AsciiChar&gt;</a></li><li><a href=\"#impl-From%3CChar%3E-for-u128\">From&lt;AsciiChar&gt;</a></li><li><a href=\"#impl-From%3CChar%3E-for-u16\">From&lt;AsciiChar&gt;</a></li><li><a href=\"#impl-From%3CChar%3E-for-u32\">From&lt;AsciiChar&gt;</a></li><li><a href=\"#impl-From%3CChar%3E-for-u64\">From&lt;AsciiChar&gt;</a></li><li><a href=\"#impl-From%3CChar%3E-for-u8\">From&lt;AsciiChar&gt;</a></li><li><a href=\"#impl-Hash-for-Char\">Hash</a></li><li><a href=\"#impl-Ord-for-Char\">Ord</a></li><li><a href=\"#impl-PartialEq-for-Char\">PartialEq</a></li><li><a href=\"#impl-PartialOrd-for-Char\">PartialOrd</a></li><li><a href=\"#impl-Step-for-Char\">Step</a></li><li><a href=\"#impl-StructuralPartialEq-for-Char\">StructuralPartialEq</a></li><li><a href=\"#impl-TrustedStep-for-Char\">TrustedStep</a></li></ul><h3><a href=\"#synthetic-implementations\">Auto Trait Implementations</a></h3><ul class=\"block synthetic-implementation\"><li><a href=\"#impl-Freeze-for-Char\">Freeze</a></li><li><a href=\"#impl-RefUnwindSafe-for-Char\">RefUnwindSafe</a></li><li><a href=\"#impl-Send-for-Char\">Send</a></li><li><a href=\"#impl-Sync-for-Char\">Sync</a></li><li><a href=\"#impl-Unpin-for-Char\">Unpin</a></li><li><a href=\"#impl-UnwindSafe-for-Char\">UnwindSafe</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-Any-for-T\">Any</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-T\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-T\">BorrowMut&lt;T&gt;</a></li><li><a href=\"#impl-From%3CT%3E-for-T\">From&lt;T&gt;</a></li><li><a href=\"#impl-Into%3CU%3E-for-T\">Into&lt;U&gt;</a></li><li><a href=\"#impl-ToOwned-for-T\">ToOwned</a></li><li><a href=\"#impl-ToString-for-T\">ToString</a></li><li><a href=\"#impl-TryFrom%3CU%3E-for-T\">TryFrom&lt;U&gt;</a></li><li><a href=\"#impl-TryInto%3CU%3E-for-T\">TryInto&lt;U&gt;</a></li></ul></section><h2><a href=\"index.html\">In std::ascii</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.EscapeDefault.html\">EscapeDefault</a></li></ul><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.Char.html\">Char</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.AsciiExt.html\">AsciiExt</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.escape_default.html\">escape_default</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type â€˜Sâ€™ or â€˜/â€™ to search, â€˜?â€™ for more optionsâ€¦\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Enum <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">ascii</a>::<wbr><a class=\"enum\" href=\"#\">Char</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ascii/ascii_char.rs.html#60\">source</a> Â· <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>âˆ’</span>]</button></span></div><pre class=\"rust item-decl\"><code><div class=\"code-attribute\">#[repr(u8)]</div>pub enum Char {\n<details class=\"toggle type-contents-toggle\"><summary class=\"hideme\"><span>Show 128 variants</span></summary>    Null = 0,\n    StartOfHeading = 1,\n    StartOfText = 2,\n    EndOfText = 3,\n    EndOfTransmission = 4,\n    Enquiry = 5,\n    Acknowledge = 6,\n    Bell = 7,\n    Backspace = 8,\n    CharacterTabulation = 9,\n    LineFeed = 10,\n    LineTabulation = 11,\n    FormFeed = 12,\n    CarriageReturn = 13,\n    ShiftOut = 14,\n    ShiftIn = 15,\n    DataLinkEscape = 16,\n    DeviceControlOne = 17,\n    DeviceControlTwo = 18,\n    DeviceControlThree = 19,\n    DeviceControlFour = 20,\n    NegativeAcknowledge = 21,\n    SynchronousIdle = 22,\n    EndOfTransmissionBlock = 23,\n    Cancel = 24,\n    EndOfMedium = 25,\n    Substitute = 26,\n    Escape = 27,\n    InformationSeparatorFour = 28,\n    InformationSeparatorThree = 29,\n    InformationSeparatorTwo = 30,\n    InformationSeparatorOne = 31,\n    Space = 32,\n    ExclamationMark = 33,\n    QuotationMark = 34,\n    NumberSign = 35,\n    DollarSign = 36,\n    PercentSign = 37,\n    Ampersand = 38,\n    Apostrophe = 39,\n    LeftParenthesis = 40,\n    RightParenthesis = 41,\n    Asterisk = 42,\n    PlusSign = 43,\n    Comma = 44,\n    HyphenMinus = 45,\n    FullStop = 46,\n    Solidus = 47,\n    Digit0 = 48,\n    Digit1 = 49,\n    Digit2 = 50,\n    Digit3 = 51,\n    Digit4 = 52,\n    Digit5 = 53,\n    Digit6 = 54,\n    Digit7 = 55,\n    Digit8 = 56,\n    Digit9 = 57,\n    Colon = 58,\n    Semicolon = 59,\n    LessThanSign = 60,\n    EqualsSign = 61,\n    GreaterThanSign = 62,\n    QuestionMark = 63,\n    CommercialAt = 64,\n    CapitalA = 65,\n    CapitalB = 66,\n    CapitalC = 67,\n    CapitalD = 68,\n    CapitalE = 69,\n    CapitalF = 70,\n    CapitalG = 71,\n    CapitalH = 72,\n    CapitalI = 73,\n    CapitalJ = 74,\n    CapitalK = 75,\n    CapitalL = 76,\n    CapitalM = 77,\n    CapitalN = 78,\n    CapitalO = 79,\n    CapitalP = 80,\n    CapitalQ = 81,\n    CapitalR = 82,\n    CapitalS = 83,\n    CapitalT = 84,\n    CapitalU = 85,\n    CapitalV = 86,\n    CapitalW = 87,\n    CapitalX = 88,\n    CapitalY = 89,\n    CapitalZ = 90,\n    LeftSquareBracket = 91,\n    ReverseSolidus = 92,\n    RightSquareBracket = 93,\n    CircumflexAccent = 94,\n    LowLine = 95,\n    GraveAccent = 96,\n    SmallA = 97,\n    SmallB = 98,\n    SmallC = 99,\n    SmallD = 100,\n    SmallE = 101,\n    SmallF = 102,\n    SmallG = 103,\n    SmallH = 104,\n    SmallI = 105,\n    SmallJ = 106,\n    SmallK = 107,\n    SmallL = 108,\n    SmallM = 109,\n    SmallN = 110,\n    SmallO = 111,\n    SmallP = 112,\n    SmallQ = 113,\n    SmallR = 114,\n    SmallS = 115,\n    SmallT = 116,\n    SmallU = 117,\n    SmallV = 118,\n    SmallW = 119,\n    SmallX = 120,\n    SmallY = 121,\n    SmallZ = 122,\n    LeftCurlyBracket = 123,\n    VerticalLine = 124,\n    RightCurlyBracket = 125,\n    Tilde = 126,\n    Delete = 127,\n</details>}</code></pre><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>One of the 128 Unicode characters from U+0000 through U+007F,\noften known as the <a href=\"https://www.unicode.org/glossary/index.html#ASCII\">ASCII</a> subset.</p>\n<p>Officially, this is the first <a href=\"https://www.unicode.org/glossary/index.html#block\">block</a> in Unicode, <em>Basic Latin</em>.\nFor details, see the <a href=\"https://www.unicode.org/charts/PDF/U0000.pdf\"><em>C0 Controls and Basic Latin</em></a> code chart.</p>\n<p>This block was based on older 7-bit character code standards such as\nANSI X3.4-1977, ISO 646-1973, and <a href=\"https://nvlpubs.nist.gov/nistpubs/Legacy/FIPS/fipspub1-2-1977.pdf\">NIST FIPS 1-2</a>.</p>\n<h2 id=\"when-to-use-this\"><a class=\"doc-anchor\" href=\"#when-to-use-this\">Â§</a>When to use this</h2>\n<p>The main advantage of this subset is that itâ€™s always valid UTF-8.  As such,\nthe <code>&amp;[ascii::Char]</code> -&gt; <code>&amp;str</code> conversion function (as well as other related\nones) are O(1): <em>no</em> runtime checks are needed.</p>\n<p>If youâ€™re consuming strings, you should usually handle Unicode and thus\naccept <code>str</code>s, not limit yourself to <code>ascii::Char</code>s.</p>\n<p>However, certain formats are intentionally designed to produce ASCII-only\noutput in order to be 8-bit-clean.  In those cases, it can be simpler and\nfaster to generate <code>ascii::Char</code>s instead of dealing with the variable width\nproperties of general UTF-8 encoded strings, while still allowing the result\nto be used freely with other Rust things that deal in general <code>str</code>s.</p>\n<p>For example, a UUID library might offer a way to produce the string\nrepresentation of a UUID as an <code>[ascii::Char; 36]</code> to avoid memory\nallocation yet still allow it to be used as UTF-8 via <code>as_str</code> without\npaying for validation (or needing <code>unsafe</code> code) the way it would if it\nwere provided as a <code>[u8; 36]</code>.</p>\n<h2 id=\"layout-1\"><a class=\"doc-anchor\" href=\"#layout-1\">Â§</a>Layout</h2>\n<p>This type is guaranteed to have a size and alignment of 1 byte.</p>\n<h2 id=\"names\"><a class=\"doc-anchor\" href=\"#names\">Â§</a>Names</h2>\n<p>The variants on this type are <a href=\"https://www.unicode.org/Public/15.0.0/ucd/NamesList.txt\">Unicode names</a> of the characters\nin upper camel case, with a few tweaks:</p>\n<ul>\n<li>For <code>&lt;control&gt;</code> characters, the primary alias name is used.</li>\n<li><code>LATIN</code> is dropped, as this block has no non-latin letters.</li>\n<li><code>LETTER</code> is dropped, as <code>CAPITAL</code>/<code>SMALL</code> suffices in this block.</li>\n<li><code>DIGIT</code>s use a single digit rather than writing out <code>ZERO</code>, <code>ONE</code>, etc.</li>\n</ul>\n</div></details><h2 id=\"variants\" class=\"variants section-header\">Variants<a href=\"#variants\" class=\"anchor\">Â§</a></h2><div class=\"variants\"><section id=\"variant.Null\" class=\"variant\"><a href=\"#variant.Null\" class=\"anchor\">Â§</a><h3 class=\"code-header\">Null = 0</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+0000 (The default variant)</p>\n</div><section id=\"variant.StartOfHeading\" class=\"variant\"><a href=\"#variant.StartOfHeading\" class=\"anchor\">Â§</a><h3 class=\"code-header\">StartOfHeading = 1</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+0001</p>\n</div><section id=\"variant.StartOfText\" class=\"variant\"><a href=\"#variant.StartOfText\" class=\"anchor\">Â§</a><h3 class=\"code-header\">StartOfText = 2</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+0002</p>\n</div><section id=\"variant.EndOfText\" class=\"variant\"><a href=\"#variant.EndOfText\" class=\"anchor\">Â§</a><h3 class=\"code-header\">EndOfText = 3</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+0003</p>\n</div><section id=\"variant.EndOfTransmission\" class=\"variant\"><a href=\"#variant.EndOfTransmission\" class=\"anchor\">Â§</a><h3 class=\"code-header\">EndOfTransmission = 4</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+0004</p>\n</div><section id=\"variant.Enquiry\" class=\"variant\"><a href=\"#variant.Enquiry\" class=\"anchor\">Â§</a><h3 class=\"code-header\">Enquiry = 5</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+0005</p>\n</div><section id=\"variant.Acknowledge\" class=\"variant\"><a href=\"#variant.Acknowledge\" class=\"anchor\">Â§</a><h3 class=\"code-header\">Acknowledge = 6</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+0006</p>\n</div><section id=\"variant.Bell\" class=\"variant\"><a href=\"#variant.Bell\" class=\"anchor\">Â§</a><h3 class=\"code-header\">Bell = 7</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+0007</p>\n</div><section id=\"variant.Backspace\" class=\"variant\"><a href=\"#variant.Backspace\" class=\"anchor\">Â§</a><h3 class=\"code-header\">Backspace = 8</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+0008</p>\n</div><section id=\"variant.CharacterTabulation\" class=\"variant\"><a href=\"#variant.CharacterTabulation\" class=\"anchor\">Â§</a><h3 class=\"code-header\">CharacterTabulation = 9</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+0009</p>\n</div><section id=\"variant.LineFeed\" class=\"variant\"><a href=\"#variant.LineFeed\" class=\"anchor\">Â§</a><h3 class=\"code-header\">LineFeed = 10</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+000A</p>\n</div><section id=\"variant.LineTabulation\" class=\"variant\"><a href=\"#variant.LineTabulation\" class=\"anchor\">Â§</a><h3 class=\"code-header\">LineTabulation = 11</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+000B</p>\n</div><section id=\"variant.FormFeed\" class=\"variant\"><a href=\"#variant.FormFeed\" class=\"anchor\">Â§</a><h3 class=\"code-header\">FormFeed = 12</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+000C</p>\n</div><section id=\"variant.CarriageReturn\" class=\"variant\"><a href=\"#variant.CarriageReturn\" class=\"anchor\">Â§</a><h3 class=\"code-header\">CarriageReturn = 13</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+000D</p>\n</div><section id=\"variant.ShiftOut\" class=\"variant\"><a href=\"#variant.ShiftOut\" class=\"anchor\">Â§</a><h3 class=\"code-header\">ShiftOut = 14</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+000E</p>\n</div><section id=\"variant.ShiftIn\" class=\"variant\"><a href=\"#variant.ShiftIn\" class=\"anchor\">Â§</a><h3 class=\"code-header\">ShiftIn = 15</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+000F</p>\n</div><section id=\"variant.DataLinkEscape\" class=\"variant\"><a href=\"#variant.DataLinkEscape\" class=\"anchor\">Â§</a><h3 class=\"code-header\">DataLinkEscape = 16</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+0010</p>\n</div><section id=\"variant.DeviceControlOne\" class=\"variant\"><a href=\"#variant.DeviceControlOne\" class=\"anchor\">Â§</a><h3 class=\"code-header\">DeviceControlOne = 17</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+0011</p>\n</div><section id=\"variant.DeviceControlTwo\" class=\"variant\"><a href=\"#variant.DeviceControlTwo\" class=\"anchor\">Â§</a><h3 class=\"code-header\">DeviceControlTwo = 18</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+0012</p>\n</div><section id=\"variant.DeviceControlThree\" class=\"variant\"><a href=\"#variant.DeviceControlThree\" class=\"anchor\">Â§</a><h3 class=\"code-header\">DeviceControlThree = 19</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+0013</p>\n</div><section id=\"variant.DeviceControlFour\" class=\"variant\"><a href=\"#variant.DeviceControlFour\" class=\"anchor\">Â§</a><h3 class=\"code-header\">DeviceControlFour = 20</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+0014</p>\n</div><section id=\"variant.NegativeAcknowledge\" class=\"variant\"><a href=\"#variant.NegativeAcknowledge\" class=\"anchor\">Â§</a><h3 class=\"code-header\">NegativeAcknowledge = 21</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+0015</p>\n</div><section id=\"variant.SynchronousIdle\" class=\"variant\"><a href=\"#variant.SynchronousIdle\" class=\"anchor\">Â§</a><h3 class=\"code-header\">SynchronousIdle = 22</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+0016</p>\n</div><section id=\"variant.EndOfTransmissionBlock\" class=\"variant\"><a href=\"#variant.EndOfTransmissionBlock\" class=\"anchor\">Â§</a><h3 class=\"code-header\">EndOfTransmissionBlock = 23</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+0017</p>\n</div><section id=\"variant.Cancel\" class=\"variant\"><a href=\"#variant.Cancel\" class=\"anchor\">Â§</a><h3 class=\"code-header\">Cancel = 24</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+0018</p>\n</div><section id=\"variant.EndOfMedium\" class=\"variant\"><a href=\"#variant.EndOfMedium\" class=\"anchor\">Â§</a><h3 class=\"code-header\">EndOfMedium = 25</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+0019</p>\n</div><section id=\"variant.Substitute\" class=\"variant\"><a href=\"#variant.Substitute\" class=\"anchor\">Â§</a><h3 class=\"code-header\">Substitute = 26</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+001A</p>\n</div><section id=\"variant.Escape\" class=\"variant\"><a href=\"#variant.Escape\" class=\"anchor\">Â§</a><h3 class=\"code-header\">Escape = 27</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+001B</p>\n</div><section id=\"variant.InformationSeparatorFour\" class=\"variant\"><a href=\"#variant.InformationSeparatorFour\" class=\"anchor\">Â§</a><h3 class=\"code-header\">InformationSeparatorFour = 28</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+001C</p>\n</div><section id=\"variant.InformationSeparatorThree\" class=\"variant\"><a href=\"#variant.InformationSeparatorThree\" class=\"anchor\">Â§</a><h3 class=\"code-header\">InformationSeparatorThree = 29</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+001D</p>\n</div><section id=\"variant.InformationSeparatorTwo\" class=\"variant\"><a href=\"#variant.InformationSeparatorTwo\" class=\"anchor\">Â§</a><h3 class=\"code-header\">InformationSeparatorTwo = 30</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+001E</p>\n</div><section id=\"variant.InformationSeparatorOne\" class=\"variant\"><a href=\"#variant.InformationSeparatorOne\" class=\"anchor\">Â§</a><h3 class=\"code-header\">InformationSeparatorOne = 31</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+001F</p>\n</div><section id=\"variant.Space\" class=\"variant\"><a href=\"#variant.Space\" class=\"anchor\">Â§</a><h3 class=\"code-header\">Space = 32</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+0020</p>\n</div><section id=\"variant.ExclamationMark\" class=\"variant\"><a href=\"#variant.ExclamationMark\" class=\"anchor\">Â§</a><h3 class=\"code-header\">ExclamationMark = 33</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+0021</p>\n</div><section id=\"variant.QuotationMark\" class=\"variant\"><a href=\"#variant.QuotationMark\" class=\"anchor\">Â§</a><h3 class=\"code-header\">QuotationMark = 34</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+0022</p>\n</div><section id=\"variant.NumberSign\" class=\"variant\"><a href=\"#variant.NumberSign\" class=\"anchor\">Â§</a><h3 class=\"code-header\">NumberSign = 35</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+0023</p>\n</div><section id=\"variant.DollarSign\" class=\"variant\"><a href=\"#variant.DollarSign\" class=\"anchor\">Â§</a><h3 class=\"code-header\">DollarSign = 36</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+0024</p>\n</div><section id=\"variant.PercentSign\" class=\"variant\"><a href=\"#variant.PercentSign\" class=\"anchor\">Â§</a><h3 class=\"code-header\">PercentSign = 37</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+0025</p>\n</div><section id=\"variant.Ampersand\" class=\"variant\"><a href=\"#variant.Ampersand\" class=\"anchor\">Â§</a><h3 class=\"code-header\">Ampersand = 38</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+0026</p>\n</div><section id=\"variant.Apostrophe\" class=\"variant\"><a href=\"#variant.Apostrophe\" class=\"anchor\">Â§</a><h3 class=\"code-header\">Apostrophe = 39</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+0027</p>\n</div><section id=\"variant.LeftParenthesis\" class=\"variant\"><a href=\"#variant.LeftParenthesis\" class=\"anchor\">Â§</a><h3 class=\"code-header\">LeftParenthesis = 40</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+0028</p>\n</div><section id=\"variant.RightParenthesis\" class=\"variant\"><a href=\"#variant.RightParenthesis\" class=\"anchor\">Â§</a><h3 class=\"code-header\">RightParenthesis = 41</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+0029</p>\n</div><section id=\"variant.Asterisk\" class=\"variant\"><a href=\"#variant.Asterisk\" class=\"anchor\">Â§</a><h3 class=\"code-header\">Asterisk = 42</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+002A</p>\n</div><section id=\"variant.PlusSign\" class=\"variant\"><a href=\"#variant.PlusSign\" class=\"anchor\">Â§</a><h3 class=\"code-header\">PlusSign = 43</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+002B</p>\n</div><section id=\"variant.Comma\" class=\"variant\"><a href=\"#variant.Comma\" class=\"anchor\">Â§</a><h3 class=\"code-header\">Comma = 44</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+002C</p>\n</div><section id=\"variant.HyphenMinus\" class=\"variant\"><a href=\"#variant.HyphenMinus\" class=\"anchor\">Â§</a><h3 class=\"code-header\">HyphenMinus = 45</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+002D</p>\n</div><section id=\"variant.FullStop\" class=\"variant\"><a href=\"#variant.FullStop\" class=\"anchor\">Â§</a><h3 class=\"code-header\">FullStop = 46</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+002E</p>\n</div><section id=\"variant.Solidus\" class=\"variant\"><a href=\"#variant.Solidus\" class=\"anchor\">Â§</a><h3 class=\"code-header\">Solidus = 47</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+002F</p>\n</div><section id=\"variant.Digit0\" class=\"variant\"><a href=\"#variant.Digit0\" class=\"anchor\">Â§</a><h3 class=\"code-header\">Digit0 = 48</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+0030</p>\n</div><section id=\"variant.Digit1\" class=\"variant\"><a href=\"#variant.Digit1\" class=\"anchor\">Â§</a><h3 class=\"code-header\">Digit1 = 49</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+0031</p>\n</div><section id=\"variant.Digit2\" class=\"variant\"><a href=\"#variant.Digit2\" class=\"anchor\">Â§</a><h3 class=\"code-header\">Digit2 = 50</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+0032</p>\n</div><section id=\"variant.Digit3\" class=\"variant\"><a href=\"#variant.Digit3\" class=\"anchor\">Â§</a><h3 class=\"code-header\">Digit3 = 51</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+0033</p>\n</div><section id=\"variant.Digit4\" class=\"variant\"><a href=\"#variant.Digit4\" class=\"anchor\">Â§</a><h3 class=\"code-header\">Digit4 = 52</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+0034</p>\n</div><section id=\"variant.Digit5\" class=\"variant\"><a href=\"#variant.Digit5\" class=\"anchor\">Â§</a><h3 class=\"code-header\">Digit5 = 53</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+0035</p>\n</div><section id=\"variant.Digit6\" class=\"variant\"><a href=\"#variant.Digit6\" class=\"anchor\">Â§</a><h3 class=\"code-header\">Digit6 = 54</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+0036</p>\n</div><section id=\"variant.Digit7\" class=\"variant\"><a href=\"#variant.Digit7\" class=\"anchor\">Â§</a><h3 class=\"code-header\">Digit7 = 55</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+0037</p>\n</div><section id=\"variant.Digit8\" class=\"variant\"><a href=\"#variant.Digit8\" class=\"anchor\">Â§</a><h3 class=\"code-header\">Digit8 = 56</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+0038</p>\n</div><section id=\"variant.Digit9\" class=\"variant\"><a href=\"#variant.Digit9\" class=\"anchor\">Â§</a><h3 class=\"code-header\">Digit9 = 57</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+0039</p>\n</div><section id=\"variant.Colon\" class=\"variant\"><a href=\"#variant.Colon\" class=\"anchor\">Â§</a><h3 class=\"code-header\">Colon = 58</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+003A</p>\n</div><section id=\"variant.Semicolon\" class=\"variant\"><a href=\"#variant.Semicolon\" class=\"anchor\">Â§</a><h3 class=\"code-header\">Semicolon = 59</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+003B</p>\n</div><section id=\"variant.LessThanSign\" class=\"variant\"><a href=\"#variant.LessThanSign\" class=\"anchor\">Â§</a><h3 class=\"code-header\">LessThanSign = 60</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+003C</p>\n</div><section id=\"variant.EqualsSign\" class=\"variant\"><a href=\"#variant.EqualsSign\" class=\"anchor\">Â§</a><h3 class=\"code-header\">EqualsSign = 61</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+003D</p>\n</div><section id=\"variant.GreaterThanSign\" class=\"variant\"><a href=\"#variant.GreaterThanSign\" class=\"anchor\">Â§</a><h3 class=\"code-header\">GreaterThanSign = 62</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+003E</p>\n</div><section id=\"variant.QuestionMark\" class=\"variant\"><a href=\"#variant.QuestionMark\" class=\"anchor\">Â§</a><h3 class=\"code-header\">QuestionMark = 63</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+003F</p>\n</div><section id=\"variant.CommercialAt\" class=\"variant\"><a href=\"#variant.CommercialAt\" class=\"anchor\">Â§</a><h3 class=\"code-header\">CommercialAt = 64</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+0040</p>\n</div><section id=\"variant.CapitalA\" class=\"variant\"><a href=\"#variant.CapitalA\" class=\"anchor\">Â§</a><h3 class=\"code-header\">CapitalA = 65</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+0041</p>\n</div><section id=\"variant.CapitalB\" class=\"variant\"><a href=\"#variant.CapitalB\" class=\"anchor\">Â§</a><h3 class=\"code-header\">CapitalB = 66</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+0042</p>\n</div><section id=\"variant.CapitalC\" class=\"variant\"><a href=\"#variant.CapitalC\" class=\"anchor\">Â§</a><h3 class=\"code-header\">CapitalC = 67</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+0043</p>\n</div><section id=\"variant.CapitalD\" class=\"variant\"><a href=\"#variant.CapitalD\" class=\"anchor\">Â§</a><h3 class=\"code-header\">CapitalD = 68</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+0044</p>\n</div><section id=\"variant.CapitalE\" class=\"variant\"><a href=\"#variant.CapitalE\" class=\"anchor\">Â§</a><h3 class=\"code-header\">CapitalE = 69</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+0045</p>\n</div><section id=\"variant.CapitalF\" class=\"variant\"><a href=\"#variant.CapitalF\" class=\"anchor\">Â§</a><h3 class=\"code-header\">CapitalF = 70</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+0046</p>\n</div><section id=\"variant.CapitalG\" class=\"variant\"><a href=\"#variant.CapitalG\" class=\"anchor\">Â§</a><h3 class=\"code-header\">CapitalG = 71</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+0047</p>\n</div><section id=\"variant.CapitalH\" class=\"variant\"><a href=\"#variant.CapitalH\" class=\"anchor\">Â§</a><h3 class=\"code-header\">CapitalH = 72</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+0048</p>\n</div><section id=\"variant.CapitalI\" class=\"variant\"><a href=\"#variant.CapitalI\" class=\"anchor\">Â§</a><h3 class=\"code-header\">CapitalI = 73</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+0049</p>\n</div><section id=\"variant.CapitalJ\" class=\"variant\"><a href=\"#variant.CapitalJ\" class=\"anchor\">Â§</a><h3 class=\"code-header\">CapitalJ = 74</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+004A</p>\n</div><section id=\"variant.CapitalK\" class=\"variant\"><a href=\"#variant.CapitalK\" class=\"anchor\">Â§</a><h3 class=\"code-header\">CapitalK = 75</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+004B</p>\n</div><section id=\"variant.CapitalL\" class=\"variant\"><a href=\"#variant.CapitalL\" class=\"anchor\">Â§</a><h3 class=\"code-header\">CapitalL = 76</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+004C</p>\n</div><section id=\"variant.CapitalM\" class=\"variant\"><a href=\"#variant.CapitalM\" class=\"anchor\">Â§</a><h3 class=\"code-header\">CapitalM = 77</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+004D</p>\n</div><section id=\"variant.CapitalN\" class=\"variant\"><a href=\"#variant.CapitalN\" class=\"anchor\">Â§</a><h3 class=\"code-header\">CapitalN = 78</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+004E</p>\n</div><section id=\"variant.CapitalO\" class=\"variant\"><a href=\"#variant.CapitalO\" class=\"anchor\">Â§</a><h3 class=\"code-header\">CapitalO = 79</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+004F</p>\n</div><section id=\"variant.CapitalP\" class=\"variant\"><a href=\"#variant.CapitalP\" class=\"anchor\">Â§</a><h3 class=\"code-header\">CapitalP = 80</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+0050</p>\n</div><section id=\"variant.CapitalQ\" class=\"variant\"><a href=\"#variant.CapitalQ\" class=\"anchor\">Â§</a><h3 class=\"code-header\">CapitalQ = 81</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+0051</p>\n</div><section id=\"variant.CapitalR\" class=\"variant\"><a href=\"#variant.CapitalR\" class=\"anchor\">Â§</a><h3 class=\"code-header\">CapitalR = 82</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+0052</p>\n</div><section id=\"variant.CapitalS\" class=\"variant\"><a href=\"#variant.CapitalS\" class=\"anchor\">Â§</a><h3 class=\"code-header\">CapitalS = 83</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+0053</p>\n</div><section id=\"variant.CapitalT\" class=\"variant\"><a href=\"#variant.CapitalT\" class=\"anchor\">Â§</a><h3 class=\"code-header\">CapitalT = 84</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+0054</p>\n</div><section id=\"variant.CapitalU\" class=\"variant\"><a href=\"#variant.CapitalU\" class=\"anchor\">Â§</a><h3 class=\"code-header\">CapitalU = 85</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+0055</p>\n</div><section id=\"variant.CapitalV\" class=\"variant\"><a href=\"#variant.CapitalV\" class=\"anchor\">Â§</a><h3 class=\"code-header\">CapitalV = 86</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+0056</p>\n</div><section id=\"variant.CapitalW\" class=\"variant\"><a href=\"#variant.CapitalW\" class=\"anchor\">Â§</a><h3 class=\"code-header\">CapitalW = 87</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+0057</p>\n</div><section id=\"variant.CapitalX\" class=\"variant\"><a href=\"#variant.CapitalX\" class=\"anchor\">Â§</a><h3 class=\"code-header\">CapitalX = 88</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+0058</p>\n</div><section id=\"variant.CapitalY\" class=\"variant\"><a href=\"#variant.CapitalY\" class=\"anchor\">Â§</a><h3 class=\"code-header\">CapitalY = 89</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+0059</p>\n</div><section id=\"variant.CapitalZ\" class=\"variant\"><a href=\"#variant.CapitalZ\" class=\"anchor\">Â§</a><h3 class=\"code-header\">CapitalZ = 90</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+005A</p>\n</div><section id=\"variant.LeftSquareBracket\" class=\"variant\"><a href=\"#variant.LeftSquareBracket\" class=\"anchor\">Â§</a><h3 class=\"code-header\">LeftSquareBracket = 91</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+005B</p>\n</div><section id=\"variant.ReverseSolidus\" class=\"variant\"><a href=\"#variant.ReverseSolidus\" class=\"anchor\">Â§</a><h3 class=\"code-header\">ReverseSolidus = 92</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+005C</p>\n</div><section id=\"variant.RightSquareBracket\" class=\"variant\"><a href=\"#variant.RightSquareBracket\" class=\"anchor\">Â§</a><h3 class=\"code-header\">RightSquareBracket = 93</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+005D</p>\n</div><section id=\"variant.CircumflexAccent\" class=\"variant\"><a href=\"#variant.CircumflexAccent\" class=\"anchor\">Â§</a><h3 class=\"code-header\">CircumflexAccent = 94</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+005E</p>\n</div><section id=\"variant.LowLine\" class=\"variant\"><a href=\"#variant.LowLine\" class=\"anchor\">Â§</a><h3 class=\"code-header\">LowLine = 95</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+005F</p>\n</div><section id=\"variant.GraveAccent\" class=\"variant\"><a href=\"#variant.GraveAccent\" class=\"anchor\">Â§</a><h3 class=\"code-header\">GraveAccent = 96</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+0060</p>\n</div><section id=\"variant.SmallA\" class=\"variant\"><a href=\"#variant.SmallA\" class=\"anchor\">Â§</a><h3 class=\"code-header\">SmallA = 97</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+0061</p>\n</div><section id=\"variant.SmallB\" class=\"variant\"><a href=\"#variant.SmallB\" class=\"anchor\">Â§</a><h3 class=\"code-header\">SmallB = 98</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+0062</p>\n</div><section id=\"variant.SmallC\" class=\"variant\"><a href=\"#variant.SmallC\" class=\"anchor\">Â§</a><h3 class=\"code-header\">SmallC = 99</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+0063</p>\n</div><section id=\"variant.SmallD\" class=\"variant\"><a href=\"#variant.SmallD\" class=\"anchor\">Â§</a><h3 class=\"code-header\">SmallD = 100</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+0064</p>\n</div><section id=\"variant.SmallE\" class=\"variant\"><a href=\"#variant.SmallE\" class=\"anchor\">Â§</a><h3 class=\"code-header\">SmallE = 101</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+0065</p>\n</div><section id=\"variant.SmallF\" class=\"variant\"><a href=\"#variant.SmallF\" class=\"anchor\">Â§</a><h3 class=\"code-header\">SmallF = 102</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+0066</p>\n</div><section id=\"variant.SmallG\" class=\"variant\"><a href=\"#variant.SmallG\" class=\"anchor\">Â§</a><h3 class=\"code-header\">SmallG = 103</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+0067</p>\n</div><section id=\"variant.SmallH\" class=\"variant\"><a href=\"#variant.SmallH\" class=\"anchor\">Â§</a><h3 class=\"code-header\">SmallH = 104</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+0068</p>\n</div><section id=\"variant.SmallI\" class=\"variant\"><a href=\"#variant.SmallI\" class=\"anchor\">Â§</a><h3 class=\"code-header\">SmallI = 105</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+0069</p>\n</div><section id=\"variant.SmallJ\" class=\"variant\"><a href=\"#variant.SmallJ\" class=\"anchor\">Â§</a><h3 class=\"code-header\">SmallJ = 106</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+006A</p>\n</div><section id=\"variant.SmallK\" class=\"variant\"><a href=\"#variant.SmallK\" class=\"anchor\">Â§</a><h3 class=\"code-header\">SmallK = 107</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+006B</p>\n</div><section id=\"variant.SmallL\" class=\"variant\"><a href=\"#variant.SmallL\" class=\"anchor\">Â§</a><h3 class=\"code-header\">SmallL = 108</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+006C</p>\n</div><section id=\"variant.SmallM\" class=\"variant\"><a href=\"#variant.SmallM\" class=\"anchor\">Â§</a><h3 class=\"code-header\">SmallM = 109</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+006D</p>\n</div><section id=\"variant.SmallN\" class=\"variant\"><a href=\"#variant.SmallN\" class=\"anchor\">Â§</a><h3 class=\"code-header\">SmallN = 110</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+006E</p>\n</div><section id=\"variant.SmallO\" class=\"variant\"><a href=\"#variant.SmallO\" class=\"anchor\">Â§</a><h3 class=\"code-header\">SmallO = 111</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+006F</p>\n</div><section id=\"variant.SmallP\" class=\"variant\"><a href=\"#variant.SmallP\" class=\"anchor\">Â§</a><h3 class=\"code-header\">SmallP = 112</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+0070</p>\n</div><section id=\"variant.SmallQ\" class=\"variant\"><a href=\"#variant.SmallQ\" class=\"anchor\">Â§</a><h3 class=\"code-header\">SmallQ = 113</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+0071</p>\n</div><section id=\"variant.SmallR\" class=\"variant\"><a href=\"#variant.SmallR\" class=\"anchor\">Â§</a><h3 class=\"code-header\">SmallR = 114</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+0072</p>\n</div><section id=\"variant.SmallS\" class=\"variant\"><a href=\"#variant.SmallS\" class=\"anchor\">Â§</a><h3 class=\"code-header\">SmallS = 115</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+0073</p>\n</div><section id=\"variant.SmallT\" class=\"variant\"><a href=\"#variant.SmallT\" class=\"anchor\">Â§</a><h3 class=\"code-header\">SmallT = 116</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+0074</p>\n</div><section id=\"variant.SmallU\" class=\"variant\"><a href=\"#variant.SmallU\" class=\"anchor\">Â§</a><h3 class=\"code-header\">SmallU = 117</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+0075</p>\n</div><section id=\"variant.SmallV\" class=\"variant\"><a href=\"#variant.SmallV\" class=\"anchor\">Â§</a><h3 class=\"code-header\">SmallV = 118</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+0076</p>\n</div><section id=\"variant.SmallW\" class=\"variant\"><a href=\"#variant.SmallW\" class=\"anchor\">Â§</a><h3 class=\"code-header\">SmallW = 119</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+0077</p>\n</div><section id=\"variant.SmallX\" class=\"variant\"><a href=\"#variant.SmallX\" class=\"anchor\">Â§</a><h3 class=\"code-header\">SmallX = 120</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+0078</p>\n</div><section id=\"variant.SmallY\" class=\"variant\"><a href=\"#variant.SmallY\" class=\"anchor\">Â§</a><h3 class=\"code-header\">SmallY = 121</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+0079</p>\n</div><section id=\"variant.SmallZ\" class=\"variant\"><a href=\"#variant.SmallZ\" class=\"anchor\">Â§</a><h3 class=\"code-header\">SmallZ = 122</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+007A</p>\n</div><section id=\"variant.LeftCurlyBracket\" class=\"variant\"><a href=\"#variant.LeftCurlyBracket\" class=\"anchor\">Â§</a><h3 class=\"code-header\">LeftCurlyBracket = 123</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+007B</p>\n</div><section id=\"variant.VerticalLine\" class=\"variant\"><a href=\"#variant.VerticalLine\" class=\"anchor\">Â§</a><h3 class=\"code-header\">VerticalLine = 124</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+007C</p>\n</div><section id=\"variant.RightCurlyBracket\" class=\"variant\"><a href=\"#variant.RightCurlyBracket\" class=\"anchor\">Â§</a><h3 class=\"code-header\">RightCurlyBracket = 125</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+007D</p>\n</div><section id=\"variant.Tilde\" class=\"variant\"><a href=\"#variant.Tilde\" class=\"anchor\">Â§</a><h3 class=\"code-header\">Tilde = 126</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+007E</p>\n</div><section id=\"variant.Delete\" class=\"variant\"><a href=\"#variant.Delete\" class=\"anchor\">Â§</a><h3 class=\"code-header\">Delete = 127</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char_variants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span><div class=\"docblock\"><p>U+007F</p>\n</div></div><h2 id=\"implementations\" class=\"section-header\">Implementations<a href=\"#implementations\" class=\"anchor\">Â§</a></h2><div id=\"implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Char\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ascii/ascii_char.rs.html#447\">source</a><a href=\"#impl-Char\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"enum\" href=\"enum.Char.html\" title=\"enum std::ascii::Char\">AsciiChar</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_u8\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ascii/ascii_char.rs.html#452\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.from_u8\" class=\"fn\">from_u8</a>(b: <a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"enum.Char.html\" title=\"enum std::ascii::Char\">AsciiChar</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span></summary><div class=\"docblock\"><p>Creates an ascii character from the byte <code>b</code>,\nor returns <code>None</code> if itâ€™s too large.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_u8_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ascii/ascii_char.rs.html#469\">source</a><h4 class=\"code-header\">pub const unsafe fn <a href=\"#method.from_u8_unchecked\" class=\"fn\">from_u8_unchecked</a>(b: <a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>) -&gt; <a class=\"enum\" href=\"enum.Char.html\" title=\"enum std::ascii::Char\">AsciiChar</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span></summary><div class=\"docblock\"><p>Creates an ASCII character from the byte <code>b</code>,\nwithout checking whether itâ€™s valid.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">Â§</a>Safety</h5>\n<p><code>b</code> must be in <code>0..=127</code>, or else this is UB.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.digit\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ascii/ascii_char.rs.html#480\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.digit\" class=\"fn\">digit</a>(d: <a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"enum.Char.html\" title=\"enum std::ascii::Char\">AsciiChar</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span></summary><div class=\"docblock\"><p>When passed the <em>number</em> <code>0</code>, <code>1</code>, â€¦, <code>9</code>, returns the <em>character</em>\n<code>'0'</code>, <code>'1'</code>, â€¦, <code>'9'</code> respectively.</p>\n<p>If <code>d &gt;= 10</code>, returns <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.digit_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ascii/ascii_char.rs.html#506\">source</a><h4 class=\"code-header\">pub const unsafe fn <a href=\"#method.digit_unchecked\" class=\"fn\">digit_unchecked</a>(d: <a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>) -&gt; <a class=\"enum\" href=\"enum.Char.html\" title=\"enum std::ascii::Char\">AsciiChar</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span></summary><div class=\"docblock\"><p>When passed the <em>number</em> <code>0</code>, <code>1</code>, â€¦, <code>9</code>, returns the <em>character</em>\n<code>'0'</code>, <code>'1'</code>, â€¦, <code>'9'</code> respectively, without checking that itâ€™s in-range.</p>\n<h5 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">Â§</a>Safety</h5>\n<p>This is immediate UB if called with <code>d &gt; 64</code>.</p>\n<p>If <code>d &gt;= 10</code> and <code>d &lt;= 64</code>, this is allowed to return any value or panic.\nNotably, it should not be expected to return hex digits, or any other\nreasonable extension of the decimal digits.</p>\n<p>(This lose safety condition is intended to simplify soundness proofs\nwhen writing code using this method, since the implementation doesnâ€™t\nneed something really specific, not to make those other arguments do\nsomething useful. It might be tightened before stabilization.)</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_u8\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ascii/ascii_char.rs.html#521\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.to_u8\" class=\"fn\">to_u8</a>(self) -&gt; <a class=\"primitive\" href=\"../primitive.u8.html\">u8</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span></summary><div class=\"docblock\"><p>Gets this ASCII character as a byte.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_char\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ascii/ascii_char.rs.html#528\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.to_char\" class=\"fn\">to_char</a>(self) -&gt; <a class=\"primitive\" href=\"../primitive.char.html\">char</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span></summary><div class=\"docblock\"><p>Gets this ASCII character as a <code>char</code> Unicode Scalar Value.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_str\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ascii/ascii_char.rs.html#535\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.as_str\" class=\"fn\">as_str</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"../primitive.str.html\">str</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>ascii_char</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span></summary><div class=\"docblock\"><p>Views this ASCII character as a one-code-unit UTF-8 <code>str</code>.</p>\n</div></details></div></details></div><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">Â§</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Clone-for-Char\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ascii/ascii_char.rs.html#57\">source</a><a href=\"#impl-Clone-for-Char\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a> for <a class=\"enum\" href=\"enum.Char.html\" title=\"enum std::ascii::Char\">AsciiChar</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ascii/ascii_char.rs.html#57\">source</a><a href=\"#method.clone\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"enum\" href=\"enum.Char.html\" title=\"enum std::ascii::Char\">AsciiChar</a></h4></section></summary><div class=\"docblock\">Returns a copy of the value. <a href=\"../clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class=\"docblock\">Performs copy-assignment from <code>source</code>. <a href=\"../clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-Char\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ascii/ascii_char.rs.html#584\">source</a><a href=\"#impl-Debug-for-Char\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"enum\" href=\"enum.Char.html\" title=\"enum std::ascii::Char\">AsciiChar</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ascii/ascii_char.rs.html#585\">source</a><a href=\"#method.fmt-1\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"../fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Default-for-Char\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/default.rs.html#165\">source</a></span><a href=\"#impl-Default-for-Char\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for <a class=\"enum\" href=\"enum.Char.html\" title=\"enum std::ascii::Char\">AsciiChar</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/default.rs.html#165\">source</a><a href=\"#method.default\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"enum\" href=\"enum.Char.html\" title=\"enum std::ascii::Char\">AsciiChar</a></h4></section></summary><div class=\"docblock\"><p>Returns the default value of <code>Null</code></p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Display-for-Char\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ascii/ascii_char.rs.html#577\">source</a><a href=\"#impl-Display-for-Char\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../fmt/trait.Display.html\" title=\"trait std::fmt::Display\">Display</a> for <a class=\"enum\" href=\"enum.Char.html\" title=\"enum std::ascii::Char\">AsciiChar</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ascii/ascii_char.rs.html#578\">source</a><a href=\"#method.fmt\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../fmt/trait.Display.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"../fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../fmt/trait.Display.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CChar%3E-for-char\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ascii/ascii_char.rs.html#554\">source</a><a href=\"#impl-From%3CChar%3E-for-char\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"enum\" href=\"enum.Char.html\" title=\"enum std::ascii::Char\">AsciiChar</a>&gt; for <a class=\"primitive\" href=\"../primitive.char.html\">char</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ascii/ascii_char.rs.html#554\">source</a><a href=\"#method.from\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(chr: <a class=\"enum\" href=\"enum.Char.html\" title=\"enum std::ascii::Char\">AsciiChar</a>) -&gt; <a class=\"primitive\" href=\"../primitive.char.html\">char</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CChar%3E-for-u128\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ascii/ascii_char.rs.html#554\">source</a><a href=\"#impl-From%3CChar%3E-for-u128\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"enum\" href=\"enum.Char.html\" title=\"enum std::ascii::Char\">AsciiChar</a>&gt; for <a class=\"primitive\" href=\"../primitive.u128.html\">u128</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ascii/ascii_char.rs.html#554\">source</a><a href=\"#method.from-5\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(chr: <a class=\"enum\" href=\"enum.Char.html\" title=\"enum std::ascii::Char\">AsciiChar</a>) -&gt; <a class=\"primitive\" href=\"../primitive.u128.html\">u128</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CChar%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ascii/ascii_char.rs.html#554\">source</a><a href=\"#impl-From%3CChar%3E-for-u16\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"enum\" href=\"enum.Char.html\" title=\"enum std::ascii::Char\">AsciiChar</a>&gt; for <a class=\"primitive\" href=\"../primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ascii/ascii_char.rs.html#554\">source</a><a href=\"#method.from-4\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(chr: <a class=\"enum\" href=\"enum.Char.html\" title=\"enum std::ascii::Char\">AsciiChar</a>) -&gt; <a class=\"primitive\" href=\"../primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CChar%3E-for-u32\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ascii/ascii_char.rs.html#554\">source</a><a href=\"#impl-From%3CChar%3E-for-u32\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"enum\" href=\"enum.Char.html\" title=\"enum std::ascii::Char\">AsciiChar</a>&gt; for <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ascii/ascii_char.rs.html#554\">source</a><a href=\"#method.from-3\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(chr: <a class=\"enum\" href=\"enum.Char.html\" title=\"enum std::ascii::Char\">AsciiChar</a>) -&gt; <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CChar%3E-for-u64\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ascii/ascii_char.rs.html#554\">source</a><a href=\"#impl-From%3CChar%3E-for-u64\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"enum\" href=\"enum.Char.html\" title=\"enum std::ascii::Char\">AsciiChar</a>&gt; for <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ascii/ascii_char.rs.html#554\">source</a><a href=\"#method.from-2\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(chr: <a class=\"enum\" href=\"enum.Char.html\" title=\"enum std::ascii::Char\">AsciiChar</a>) -&gt; <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CChar%3E-for-u8\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ascii/ascii_char.rs.html#554\">source</a><a href=\"#impl-From%3CChar%3E-for-u8\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"enum\" href=\"enum.Char.html\" title=\"enum std::ascii::Char\">AsciiChar</a>&gt; for <a class=\"primitive\" href=\"../primitive.u8.html\">u8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ascii/ascii_char.rs.html#554\">source</a><a href=\"#method.from-1\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(chr: <a class=\"enum\" href=\"enum.Char.html\" title=\"enum std::ascii::Char\">AsciiChar</a>) -&gt; <a class=\"primitive\" href=\"../primitive.u8.html\">u8</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Hash-for-Char\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ascii/ascii_char.rs.html#57\">source</a><a href=\"#impl-Hash-for-Char\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"enum\" href=\"enum.Char.html\" title=\"enum std::ascii::Char\">AsciiChar</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ascii/ascii_char.rs.html#57\">source</a><a href=\"#method.hash\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;__H&gt;(&amp;self, state: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut __H</a>)<div class=\"where\">where\n    __H: <a class=\"trait\" href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class=\"docblock\">Feeds this value into the given <a href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"../hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#238-240\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Feeds a slice of this type into the given <a href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"../hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Ord-for-Char\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ascii/ascii_char.rs.html#57\">source</a><a href=\"#impl-Ord-for-Char\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"enum\" href=\"enum.Char.html\" title=\"enum std::ascii::Char\">AsciiChar</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ascii/ascii_char.rs.html#57\">source</a><a href=\"#method.cmp\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"enum.Char.html\" title=\"enum std::ascii::Char\">AsciiChar</a>) -&gt; <a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a></h4></section></summary><div class=\"docblock\">This method returns an <a href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"../cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#856-858\">source</a></span><a href=\"#method.max\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Compares and returns the maximum of two values. <a href=\"../cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#877-879\">source</a></span><a href=\"#method.min\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Compares and returns the minimum of two values. <a href=\"../cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#903-906\">source</a></span><a href=\"#method.clamp\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>,</div></h4></section></summary><div class=\"docblock\">Restrict a value to a certain interval. <a href=\"../cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq-for-Char\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ascii/ascii_char.rs.html#57\">source</a><a href=\"#impl-PartialEq-for-Char\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a> for <a class=\"enum\" href=\"enum.Char.html\" title=\"enum std::ascii::Char\">AsciiChar</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ascii/ascii_char.rs.html#57\">source</a><a href=\"#method.eq\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"enum.Char.html\" title=\"enum std::ascii::Char\">AsciiChar</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialOrd-for-Char\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ascii/ascii_char.rs.html#57\">source</a><a href=\"#impl-PartialOrd-for-Char\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a> for <a class=\"enum\" href=\"enum.Char.html\" title=\"enum std::ascii::Char\">AsciiChar</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ascii/ascii_char.rs.html#57\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"enum.Char.html\" title=\"enum std::ascii::Char\">AsciiChar</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\">This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"../cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180\">source</a></span><a href=\"#method.lt\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"../cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198\">source</a></span><a href=\"#method.le\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"../cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215\">source</a></span><a href=\"#method.gt\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"../cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233\">source</a></span><a href=\"#method.ge\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"../cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Step-for-Char\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#514\">source</a><a href=\"#impl-Step-for-Char\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../iter/trait.Step.html\" title=\"trait std::iter::Step\">Step</a> for <a class=\"enum\" href=\"enum.Char.html\" title=\"enum std::ascii::Char\">AsciiChar</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.steps_between\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#516\">source</a><a href=\"#method.steps_between\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Step.html#tymethod.steps_between\" class=\"fn\">steps_between</a>(_: &amp;<a class=\"enum\" href=\"enum.Char.html\" title=\"enum std::ascii::Char\">AsciiChar</a>, _: &amp;<a class=\"enum\" href=\"enum.Char.html\" title=\"enum std::ascii::Char\">AsciiChar</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class=\"docblock\">Returns the number of <em>successor</em> steps required to get from <code>start</code> to <code>end</code>. <a href=\"../iter/trait.Step.html#tymethod.steps_between\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.forward_checked\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#521\">source</a><a href=\"#method.forward_checked\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Step.html#tymethod.forward_checked\" class=\"fn\">forward_checked</a>(start: <a class=\"enum\" href=\"enum.Char.html\" title=\"enum std::ascii::Char\">AsciiChar</a>, count: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"enum.Char.html\" title=\"enum std::ascii::Char\">AsciiChar</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class=\"docblock\">Returns the value that would be obtained by taking the <em>successor</em>\nof <code>self</code> <code>count</code> times. <a href=\"../iter/trait.Step.html#tymethod.forward_checked\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.backward_checked\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#527\">source</a><a href=\"#method.backward_checked\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Step.html#tymethod.backward_checked\" class=\"fn\">backward_checked</a>(start: <a class=\"enum\" href=\"enum.Char.html\" title=\"enum std::ascii::Char\">AsciiChar</a>, count: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"enum.Char.html\" title=\"enum std::ascii::Char\">AsciiChar</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class=\"docblock\">Returns the value that would be obtained by taking the <em>predecessor</em>\nof <code>self</code> <code>count</code> times. <a href=\"../iter/trait.Step.html#tymethod.backward_checked\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.forward_unchecked\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#535\">source</a><a href=\"#method.forward_unchecked\" class=\"anchor\">Â§</a><h4 class=\"code-header\">unsafe fn <a href=\"../iter/trait.Step.html#method.forward_unchecked\" class=\"fn\">forward_unchecked</a>(start: <a class=\"enum\" href=\"enum.Char.html\" title=\"enum std::ascii::Char\">AsciiChar</a>, count: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"enum.Char.html\" title=\"enum std::ascii::Char\">AsciiChar</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class=\"docblock\">Returns the value that would be obtained by taking the <em>successor</em>\nof <code>self</code> <code>count</code> times. <a href=\"../iter/trait.Step.html#method.forward_unchecked\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.backward_unchecked\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#545\">source</a><a href=\"#method.backward_unchecked\" class=\"anchor\">Â§</a><h4 class=\"code-header\">unsafe fn <a href=\"../iter/trait.Step.html#method.backward_unchecked\" class=\"fn\">backward_unchecked</a>(start: <a class=\"enum\" href=\"enum.Char.html\" title=\"enum std::ascii::Char\">AsciiChar</a>, count: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"enum.Char.html\" title=\"enum std::ascii::Char\">AsciiChar</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class=\"docblock\">Returns the value that would be obtained by taking the <em>predecessor</em>\nof <code>self</code> <code>count</code> times. <a href=\"../iter/trait.Step.html#method.backward_unchecked\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.forward\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#85\">source</a><a href=\"#method.forward\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Step.html#method.forward\" class=\"fn\">forward</a>(start: Self, count: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; Self</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class=\"docblock\">Returns the value that would be obtained by taking the <em>successor</em>\nof <code>self</code> <code>count</code> times. <a href=\"../iter/trait.Step.html#method.forward\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.backward\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#155\">source</a><a href=\"#method.backward\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Step.html#method.backward\" class=\"fn\">backward</a>(start: Self, count: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; Self</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class=\"docblock\">Returns the value that would be obtained by taking the <em>predecessor</em>\nof <code>self</code> <code>count</code> times. <a href=\"../iter/trait.Step.html#method.backward\">Read more</a></div></details></div></details><section id=\"impl-Copy-for-Char\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ascii/ascii_char.rs.html#57\">source</a><a href=\"#impl-Copy-for-Char\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a> for <a class=\"enum\" href=\"enum.Char.html\" title=\"enum std::ascii::Char\">AsciiChar</a></h3></section><section id=\"impl-Eq-for-Char\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ascii/ascii_char.rs.html#57\">source</a><a href=\"#impl-Eq-for-Char\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> for <a class=\"enum\" href=\"enum.Char.html\" title=\"enum std::ascii::Char\">AsciiChar</a></h3></section><section id=\"impl-StructuralPartialEq-for-Char\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ascii/ascii_char.rs.html#57\">source</a><a href=\"#impl-StructuralPartialEq-for-Char\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.StructuralPartialEq.html\" title=\"trait std::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"enum\" href=\"enum.Char.html\" title=\"enum std::ascii::Char\">AsciiChar</a></h3></section><section id=\"impl-TrustedStep-for-Char\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#18\">source</a><a href=\"#impl-TrustedStep-for-Char\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../iter/trait.TrustedStep.html\" title=\"trait std::iter::TrustedStep\">TrustedStep</a> for <a class=\"enum\" href=\"enum.Char.html\" title=\"enum std::ascii::Char\">AsciiChar</a></h3></section></div><h2 id=\"synthetic-implementations\" class=\"section-header\">Auto Trait Implementations<a href=\"#synthetic-implementations\" class=\"anchor\">Â§</a></h2><div id=\"synthetic-implementations-list\"><section id=\"impl-Freeze-for-Char\" class=\"impl\"><a href=\"#impl-Freeze-for-Char\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"enum\" href=\"enum.Char.html\" title=\"enum std::ascii::Char\">AsciiChar</a></h3></section><section id=\"impl-RefUnwindSafe-for-Char\" class=\"impl\"><a href=\"#impl-RefUnwindSafe-for-Char\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"enum\" href=\"enum.Char.html\" title=\"enum std::ascii::Char\">AsciiChar</a></h3></section><section id=\"impl-Send-for-Char\" class=\"impl\"><a href=\"#impl-Send-for-Char\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"enum\" href=\"enum.Char.html\" title=\"enum std::ascii::Char\">AsciiChar</a></h3></section><section id=\"impl-Sync-for-Char\" class=\"impl\"><a href=\"#impl-Sync-for-Char\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"enum\" href=\"enum.Char.html\" title=\"enum std::ascii::Char\">AsciiChar</a></h3></section><section id=\"impl-Unpin-for-Char\" class=\"impl\"><a href=\"#impl-Unpin-for-Char\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"enum\" href=\"enum.Char.html\" title=\"enum std::ascii::Char\">AsciiChar</a></h3></section><section id=\"impl-UnwindSafe-for-Char\" class=\"impl\"><a href=\"#impl-UnwindSafe-for-Char\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"enum\" href=\"enum.Char.html\" title=\"enum std::ascii::Char\">AsciiChar</a></h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">Â§</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Any-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a><a href=\"#impl-Any-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#141\">source</a><a href=\"#method.type_id\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../any/trait.Any.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\">Gets the <code>TypeId</code> of <code>self</code>. <a href=\"../any/trait.Any.html#tymethod.type_id\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Borrow%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208\">source</a><a href=\"#impl-Borrow%3CT%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#210\">source</a><a href=\"#method.borrow\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216\">source</a><a href=\"#impl-BorrowMut%3CT%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#217\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765\">source</a><a href=\"#impl-From%3CT%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768\">source</a><a href=\"#method.from-6\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the argument unchanged.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Into%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750\">source</a><a href=\"#impl-Into%3CU%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758\">source</a><a href=\"#method.into\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; U</h4></section></summary><div class=\"docblock\"><p>Calls <code>U::from(self)</code>.</p>\n<p>That is, this conversion is whatever the implementation of\n<code><a href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for U</code> chooses to do.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-ToOwned-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85\">source</a><a href=\"#impl-ToOwned-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.ToOwned.html\" title=\"trait std::borrow::ToOwned\">ToOwned</a> for T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Owned\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Owned\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"../borrow/trait.ToOwned.html#associatedtype.Owned\" class=\"associatedtype\">Owned</a> = T</h4></section></summary><div class=\"docblock\">The resulting type after obtaining ownership.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_owned\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88\">source</a><a href=\"#method.to_owned\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.ToOwned.html#tymethod.to_owned\" class=\"fn\">to_owned</a>(&amp;self) -&gt; T</h4></section></summary><div class=\"docblock\">Creates owned data from borrowed data, usually by cloning. <a href=\"../borrow/trait.ToOwned.html#tymethod.to_owned\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92\">source</a><a href=\"#method.clone_into\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.ToOwned.html#method.clone_into\" class=\"fn\">clone_into</a>(&amp;self, target: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>)</h4></section></summary><div class=\"docblock\">Uses borrowed data to replace owned data, usually by cloning. <a href=\"../borrow/trait.ToOwned.html#method.clone_into\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-ToString-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2552\">source</a><a href=\"#impl-ToString-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../string/trait.ToString.html\" title=\"trait std::string::ToString\">ToString</a> for T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../fmt/trait.Display.html\" title=\"trait std::fmt::Display\">Display</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_string\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2558\">source</a><a href=\"#method.to_string\" class=\"anchor\">Â§</a><h4 class=\"code-header\">default fn <a href=\"../string/trait.ToString.html#tymethod.to_string\" class=\"fn\">to_string</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../string/struct.String.html\" title=\"struct std::string::String\">String</a></h4></section></summary><div class=\"docblock\">Converts the given value to a <code>String</code>. <a href=\"../string/trait.ToString.html#tymethod.to_string\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryFrom%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807\">source</a><a href=\"#impl-TryFrom%3CU%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812\">source</a><a href=\"#method.try_from\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: U) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, &lt;T as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryInto%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792\">source</a><a href=\"#impl-TryInto%3CU%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryInto.html\" title=\"trait std::convert::TryInto\">TryInto</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryInto.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797\">source</a><a href=\"#method.try_into\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryInto.html#tymethod.try_into\" class=\"fn\">try_into</a>(self) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;U, &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details></div></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:12:11.503Z"
}