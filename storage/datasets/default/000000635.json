{
	"title": "AsyncFnOnce in std::ops - Rust",
	"url": "https://doc.rust-lang.org/stable/std/ops/trait.AsyncFnOnce.html",
	"markdown": "# AsyncFnOnce in std::ops - Rust\n\n```\npub trait AsyncFnOnce<Args>where\n    Args: Tuple,{\n    type CallOnceFuture: Future<Output = Self::Output>;\n    type Output;\n\n    // Required method\n    extern \"rust-call\" fn async_call_once(\n        self,\n        args: Args,\n    ) -> Self::CallOnceFuture;\n}\n```\n\nðŸ”¬This is a nightly-only experimental API. (`async_fn_traits`)\n\nExpand description\n\nAn async-aware version of the [`FnOnce`](trait.FnOnce.html \"trait std::ops::FnOnce\") trait.\n\nAll `async fn` and functions returning futures implement this trait.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ops/async_function.rs.html#51)\n\nðŸ”¬This is a nightly-only experimental API. (`async_fn_traits`)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ops/async_function.rs.html#56)\n\nðŸ”¬This is a nightly-only experimental API. (`async_fn_traits`)\n\nOutput type of the called closureâ€™s future.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ops/async_function.rs.html#60)\n\nðŸ”¬This is a nightly-only experimental API. (`async_fn_traits`)\n\nCall the [`AsyncFnOnce`](trait.AsyncFnOnce.html \"trait std::ops::AsyncFnOnce\"), returning a future which may move out of the called closure.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"An async-aware version of the `FnOnce` trait.\"><title>AsyncFnOnce in std::ops - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc trait\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">AsyncFnOnce</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">AsyncFnOnce</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#required-associated-types\">Required Associated Types</a></h3><ul class=\"block\"><li><a href=\"#associatedtype.CallOnceFuture\">CallOnceFuture</a></li><li><a href=\"#associatedtype.Output\">Output</a></li></ul><h3><a href=\"#required-methods\">Required Methods</a></h3><ul class=\"block\"><li><a href=\"#tymethod.async_call_once\">async_call_once</a></li></ul><h3><a href=\"#implementors\">Implementors</a></h3></section><h2><a href=\"index.html\">In std::ops</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.Range.html\">Range</a></li><li><a href=\"struct.RangeFrom.html\">RangeFrom</a></li><li><a href=\"struct.RangeFull.html\">RangeFull</a></li><li><a href=\"struct.RangeInclusive.html\">RangeInclusive</a></li><li><a href=\"struct.RangeTo.html\">RangeTo</a></li><li><a href=\"struct.RangeToInclusive.html\">RangeToInclusive</a></li><li><a href=\"struct.Yeet.html\">Yeet</a></li></ul><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.Bound.html\">Bound</a></li><li><a href=\"enum.ControlFlow.html\">ControlFlow</a></li><li><a href=\"enum.CoroutineState.html\">CoroutineState</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.Add.html\">Add</a></li><li><a href=\"trait.AddAssign.html\">AddAssign</a></li><li><a href=\"trait.AsyncFn.html\">AsyncFn</a></li><li><a href=\"trait.AsyncFnMut.html\">AsyncFnMut</a></li><li><a href=\"trait.AsyncFnOnce.html\">AsyncFnOnce</a></li><li><a href=\"trait.BitAnd.html\">BitAnd</a></li><li><a href=\"trait.BitAndAssign.html\">BitAndAssign</a></li><li><a href=\"trait.BitOr.html\">BitOr</a></li><li><a href=\"trait.BitOrAssign.html\">BitOrAssign</a></li><li><a href=\"trait.BitXor.html\">BitXor</a></li><li><a href=\"trait.BitXorAssign.html\">BitXorAssign</a></li><li><a href=\"trait.CoerceUnsized.html\">CoerceUnsized</a></li><li><a href=\"trait.Coroutine.html\">Coroutine</a></li><li><a href=\"trait.Deref.html\">Deref</a></li><li><a href=\"trait.DerefMut.html\">DerefMut</a></li><li><a href=\"trait.DerefPure.html\">DerefPure</a></li><li><a href=\"trait.DispatchFromDyn.html\">DispatchFromDyn</a></li><li><a href=\"trait.Div.html\">Div</a></li><li><a href=\"trait.DivAssign.html\">DivAssign</a></li><li><a href=\"trait.Drop.html\">Drop</a></li><li><a href=\"trait.Fn.html\">Fn</a></li><li><a href=\"trait.FnMut.html\">FnMut</a></li><li><a href=\"trait.FnOnce.html\">FnOnce</a></li><li><a href=\"trait.FromResidual.html\">FromResidual</a></li><li><a href=\"trait.Index.html\">Index</a></li><li><a href=\"trait.IndexMut.html\">IndexMut</a></li><li><a href=\"trait.Mul.html\">Mul</a></li><li><a href=\"trait.MulAssign.html\">MulAssign</a></li><li><a href=\"trait.Neg.html\">Neg</a></li><li><a href=\"trait.Not.html\">Not</a></li><li><a href=\"trait.OneSidedRange.html\">OneSidedRange</a></li><li><a href=\"trait.RangeBounds.html\">RangeBounds</a></li><li><a href=\"trait.Rem.html\">Rem</a></li><li><a href=\"trait.RemAssign.html\">RemAssign</a></li><li><a href=\"trait.Residual.html\">Residual</a></li><li><a href=\"trait.Shl.html\">Shl</a></li><li><a href=\"trait.ShlAssign.html\">ShlAssign</a></li><li><a href=\"trait.Shr.html\">Shr</a></li><li><a href=\"trait.ShrAssign.html\">ShrAssign</a></li><li><a href=\"trait.Sub.html\">Sub</a></li><li><a href=\"trait.SubAssign.html\">SubAssign</a></li><li><a href=\"trait.Try.html\">Try</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type â€˜Sâ€™ or â€˜/â€™ to search, â€˜?â€™ for more optionsâ€¦\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Trait <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">ops</a>::<wbr><a class=\"trait\" href=\"#\">AsyncFnOnce</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/async_function.rs.html#47\">source</a> Â· <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>âˆ’</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub trait AsyncFnOnce&lt;Args&gt;<div class=\"where\">where\n    Args: <a class=\"trait\" href=\"../marker/trait.Tuple.html\" title=\"trait std::marker::Tuple\">Tuple</a>,</div>{\n    type <a href=\"#associatedtype.CallOnceFuture\" class=\"associatedtype\">CallOnceFuture</a>: <a class=\"trait\" href=\"../future/trait.Future.html\" title=\"trait std::future::Future\">Future</a>&lt;Output = Self::<a class=\"associatedtype\" href=\"trait.AsyncFnOnce.html#associatedtype.Output\" title=\"type std::ops::AsyncFnOnce::Output\">Output</a>&gt;;\n    type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a>;\n\n    // Required method\n    extern \"rust-call\" fn <a href=\"#tymethod.async_call_once\" class=\"fn\">async_call_once</a>(\n        self,\n        args: Args,\n    ) -&gt; Self::<a class=\"associatedtype\" href=\"trait.AsyncFnOnce.html#associatedtype.CallOnceFuture\" title=\"type std::ops::AsyncFnOnce::CallOnceFuture\">CallOnceFuture</a>;\n}</code></pre><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>async_fn_traits</code>)</span></div></span><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>An async-aware version of the <a href=\"trait.FnOnce.html\" title=\"trait std::ops::FnOnce\"><code>FnOnce</code></a> trait.</p>\n<p>All <code>async fn</code> and functions returning futures implement this trait.</p>\n</div></details><h2 id=\"required-associated-types\" class=\"section-header\">Required Associated Types<a href=\"#required-associated-types\" class=\"anchor\">Â§</a></h2><div class=\"methods\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.CallOnceFuture\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/async_function.rs.html#51\">source</a><h4 class=\"code-header\">type <a href=\"#associatedtype.CallOnceFuture\" class=\"associatedtype\">CallOnceFuture</a>: <a class=\"trait\" href=\"../future/trait.Future.html\" title=\"trait std::future::Future\">Future</a>&lt;Output = Self::<a class=\"associatedtype\" href=\"trait.AsyncFnOnce.html#associatedtype.Output\" title=\"type std::ops::AsyncFnOnce::Output\">Output</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>async_fn_traits</code>)</span></div></span></summary><div class=\"docblock\"><p>Future returned by <a href=\"trait.AsyncFnOnce.html#tymethod.async_call_once\" title=\"method std::ops::AsyncFnOnce::async_call_once\"><code>AsyncFnOnce::async_call_once</code></a>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/async_function.rs.html#56\">source</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>async_fn_traits</code>)</span></div></span></summary><div class=\"docblock\"><p>Output type of the called closureâ€™s future.</p>\n</div></details></div><h2 id=\"required-methods\" class=\"section-header\">Required Methods<a href=\"#required-methods\" class=\"anchor\">Â§</a></h2><div class=\"methods\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.async_call_once\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/async_function.rs.html#60\">source</a><h4 class=\"code-header\">extern \"rust-call\" fn <a href=\"#tymethod.async_call_once\" class=\"fn\">async_call_once</a>(\n    self,\n    args: Args,\n) -&gt; Self::<a class=\"associatedtype\" href=\"trait.AsyncFnOnce.html#associatedtype.CallOnceFuture\" title=\"type std::ops::AsyncFnOnce::CallOnceFuture\">CallOnceFuture</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>async_fn_traits</code>)</span></div></span></summary><div class=\"docblock\"><p>Call the <a href=\"trait.AsyncFnOnce.html\" title=\"trait std::ops::AsyncFnOnce\"><code>AsyncFnOnce</code></a>, returning a future which may move out of the called closure.</p>\n</div></details></div><h2 id=\"implementors\" class=\"section-header\">Implementors<a href=\"#implementors\" class=\"anchor\">Â§</a></h2><div id=\"implementors-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-AsyncFnOnce%3CA%3E-for-%26F\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/async_function.rs.html#90-92\">source</a><a href=\"#impl-AsyncFnOnce%3CA%3E-for-%26F\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, A, F&gt; <a class=\"trait\" href=\"trait.AsyncFnOnce.html\" title=\"trait std::ops::AsyncFnOnce\">AsyncFnOnce</a>&lt;A&gt; for <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;'a F</a><div class=\"where\">where\n    A: <a class=\"trait\" href=\"../marker/trait.Tuple.html\" title=\"trait std::marker::Tuple\">Tuple</a>,\n    F: <a class=\"trait\" href=\"trait.AsyncFn.html\" title=\"trait std::ops::AsyncFn\">AsyncFn</a>&lt;A&gt; + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Output-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;F as <a class=\"trait\" href=\"trait.AsyncFnOnce.html\" title=\"trait std::ops::AsyncFnOnce\">AsyncFnOnce</a>&lt;A&gt;&gt;::<a class=\"associatedtype\" href=\"trait.AsyncFnOnce.html#associatedtype.Output\" title=\"type std::ops::AsyncFnOnce::Output\">Output</a></h4></section><section id=\"associatedtype.CallOnceFuture-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.CallOnceFuture-1\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.CallOnceFuture\" class=\"associatedtype\">CallOnceFuture</a> = &lt;F as <a class=\"trait\" href=\"trait.AsyncFnMut.html\" title=\"trait std::ops::AsyncFnMut\">AsyncFnMut</a>&lt;A&gt;&gt;::<a class=\"associatedtype\" href=\"trait.AsyncFnMut.html#associatedtype.CallRefFuture\" title=\"type std::ops::AsyncFnMut::CallRefFuture\">CallRefFuture</a>&lt;'a&gt;</h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-AsyncFnOnce%3CA%3E-for-%26mut+F\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/async_function.rs.html#115-117\">source</a><a href=\"#impl-AsyncFnOnce%3CA%3E-for-%26mut+F\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, A, F&gt; <a class=\"trait\" href=\"trait.AsyncFnOnce.html\" title=\"trait std::ops::AsyncFnOnce\">AsyncFnOnce</a>&lt;A&gt; for <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;'a mut F</a><div class=\"where\">where\n    A: <a class=\"trait\" href=\"../marker/trait.Tuple.html\" title=\"trait std::marker::Tuple\">Tuple</a>,\n    F: <a class=\"trait\" href=\"trait.AsyncFnMut.html\" title=\"trait std::ops::AsyncFnMut\">AsyncFnMut</a>&lt;A&gt; + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Output-2\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-2\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;F as <a class=\"trait\" href=\"trait.AsyncFnOnce.html\" title=\"trait std::ops::AsyncFnOnce\">AsyncFnOnce</a>&lt;A&gt;&gt;::<a class=\"associatedtype\" href=\"trait.AsyncFnOnce.html#associatedtype.Output\" title=\"type std::ops::AsyncFnOnce::Output\">Output</a></h4></section><section id=\"associatedtype.CallOnceFuture-2\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.CallOnceFuture-2\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.CallOnceFuture\" class=\"associatedtype\">CallOnceFuture</a> = &lt;F as <a class=\"trait\" href=\"trait.AsyncFnMut.html\" title=\"trait std::ops::AsyncFnMut\">AsyncFnMut</a>&lt;A&gt;&gt;::<a class=\"associatedtype\" href=\"trait.AsyncFnMut.html#associatedtype.CallRefFuture\" title=\"type std::ops::AsyncFnMut::CallRefFuture\">CallRefFuture</a>&lt;'a&gt;</h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-AsyncFnOnce%3CArgs%3E-for-Box%3CF,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2082\">source</a><a href=\"#impl-AsyncFnOnce%3CArgs%3E-for-Box%3CF,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;Args, F, A&gt; <a class=\"trait\" href=\"trait.AsyncFnOnce.html\" title=\"trait std::ops::AsyncFnOnce\">AsyncFnOnce</a>&lt;Args&gt; for <a class=\"struct\" href=\"../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;F, A&gt;<div class=\"where\">where\n    Args: <a class=\"trait\" href=\"../marker/trait.Tuple.html\" title=\"trait std::marker::Tuple\">Tuple</a>,\n    F: <a class=\"trait\" href=\"trait.AsyncFnOnce.html\" title=\"trait std::ops::AsyncFnOnce\">AsyncFnOnce</a>&lt;Args&gt; + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Output-3\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-3\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;F as <a class=\"trait\" href=\"trait.AsyncFnOnce.html\" title=\"trait std::ops::AsyncFnOnce\">AsyncFnOnce</a>&lt;Args&gt;&gt;::<a class=\"associatedtype\" href=\"trait.AsyncFnOnce.html#associatedtype.Output\" title=\"type std::ops::AsyncFnOnce::Output\">Output</a></h4></section><section id=\"associatedtype.CallOnceFuture-3\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.CallOnceFuture-3\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.CallOnceFuture\" class=\"associatedtype\">CallOnceFuture</a> = &lt;F as <a class=\"trait\" href=\"trait.AsyncFnOnce.html\" title=\"trait std::ops::AsyncFnOnce\">AsyncFnOnce</a>&lt;Args&gt;&gt;::<a class=\"associatedtype\" href=\"trait.AsyncFnOnce.html#associatedtype.CallOnceFuture\" title=\"type std::ops::AsyncFnOnce::CallOnceFuture\">CallOnceFuture</a></h4></section></div></details></div><script src=\"../../trait.impl/core/ops/async_function/trait.AsyncFnOnce.js\" data-ignore-extern-crates=\"alloc\" async=\"\"></script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:12:47.999Z"
}