{
	"title": "reference - Rust",
	"url": "https://doc.rust-lang.org/stable/std/primitive.reference.html",
	"markdown": "# reference - Rust\n\n## Primitive Type [reference](#)\n\n1.0.0 ·\n\nExpand description\n\nReferences, `&T` and `&mut T`.\n\nA reference represents a borrow of some owned value. You can get one by using the `&` or `&mut` operators on a value, or by using a [`ref`](../std/keyword.ref.html) or `[ref](../std/keyword.ref.html) [mut](../std/keyword.mut.html)` pattern.\n\nFor those familiar with pointers, a reference is just a pointer that is assumed to be aligned, not null, and pointing to memory containing a valid value of `T` - for example, `&[bool](primitive.bool.html \"primitive bool\")` can only point to an allocation containing the integer values `1` ([`true`](../std/keyword.true.html)) or `0` ([`false`](../std/keyword.false.html)), but creating a `&[bool](primitive.bool.html \"primitive bool\")` that points to an allocation containing the value `3` causes undefined behaviour. In fact, `[Option](option/enum.Option.html \"enum std::option::Option\")<&T>` has the same memory representation as a nullable but aligned pointer, and can be passed across FFI boundaries as such.\n\nIn most cases, references can be used much like the original value. Field access, method calling, and indexing work the same (save for mutability rules, of course). In addition, the comparison operators transparently defer to the referent’s implementation, allowing references to be compared the same as owned values.\n\nReferences have a lifetime attached to them, which represents the scope for which the borrow is valid. A lifetime is said to “outlive” another one if its representative scope is as long or longer than the other. The `'static` lifetime is the longest lifetime, which represents the total life of the program. For example, string literals have a `'static` lifetime because the text data is embedded into the binary of the program, rather than in an allocation that needs to be dynamically managed.\n\n`&mut T` references can be freely coerced into `&T` references with the same referent type, and references with longer lifetimes can be freely coerced into references with shorter ones.\n\nReference equality by address, instead of comparing the values pointed to, is accomplished via implicit reference-pointer coercion and raw pointer equality via [`ptr::eq`](ptr/fn.eq.html \"fn std::ptr::eq\"), while [`PartialEq`](cmp/trait.PartialEq.html \"trait std::cmp::PartialEq\") compares values.\n\n```\nuse std::ptr;\n\nlet five = 5;\nlet other_five = 5;\nlet five_ref = &five;\nlet same_five_ref = &five;\nlet other_five_ref = &other_five;\n\nassert!(five_ref == same_five_ref);\nassert!(five_ref == other_five_ref);\n\nassert!(ptr::eq(five_ref, same_five_ref));\nassert!(!ptr::eq(five_ref, other_five_ref));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ptr;%0A++++%0A++++let+five+=+5;%0A++++let+other_five+=+5;%0A++++let+five_ref+=+%26five;%0A++++let+same_five_ref+=+%26five;%0A++++let+other_five_ref+=+%26other_five;%0A++++%0A++++assert!(five_ref+==+same_five_ref);%0A++++assert!(five_ref+==+other_five_ref);%0A++++%0A++++assert!(ptr::eq(five_ref,+same_five_ref));%0A++++assert!(!ptr::eq(five_ref,+other_five_ref));%0A%7D&edition=2021)\n\nFor more information on how to use references, see [the book’s section on “References and Borrowing”](../book/ch04-02-references-and-borrowing.html).\n\n## [§](#trait-implementations-1)Trait implementations\n\nThe following traits are implemented for all `&T`, regardless of the type of its referent:\n\n-   [`Copy`](marker/trait.Copy.html \"trait std::marker::Copy\")\n-   [`Clone`](clone/trait.Clone.html \"trait std::clone::Clone\") (Note that this will not defer to `T`’s `Clone` implementation if it exists!)\n-   [`Deref`](ops/trait.Deref.html \"trait std::ops::Deref\")\n-   [`Borrow`](borrow/trait.Borrow.html \"trait std::borrow::Borrow\")\n-   [`fmt::Pointer`](fmt/trait.Pointer.html \"trait std::fmt::Pointer\")\n\n`&mut T` references get all of the above except `Copy` and `Clone` (to prevent creating multiple simultaneous mutable borrows), plus the following, regardless of the type of its referent:\n\n-   [`DerefMut`](ops/trait.DerefMut.html \"trait std::ops::DerefMut\")\n-   [`BorrowMut`](borrow/trait.BorrowMut.html \"trait std::borrow::BorrowMut\")\n\nThe following traits are implemented on `&T` references if the underlying `T` also implements that trait:\n\n-   All the traits in [`std::fmt`](fmt/index.html \"mod std::fmt\") except [`fmt::Pointer`](fmt/trait.Pointer.html \"trait std::fmt::Pointer\") (which is implemented regardless of the type of its referent) and [`fmt::Write`](fmt/trait.Write.html \"trait std::fmt::Write\")\n-   [`PartialOrd`](cmp/trait.PartialOrd.html \"trait std::cmp::PartialOrd\")\n-   [`Ord`](cmp/trait.Ord.html \"trait std::cmp::Ord\")\n-   [`PartialEq`](cmp/trait.PartialEq.html \"trait std::cmp::PartialEq\")\n-   [`Eq`](cmp/trait.Eq.html \"trait std::cmp::Eq\")\n-   [`AsRef`](convert/trait.AsRef.html \"trait std::convert::AsRef\")\n-   [`Fn`](ops/trait.Fn.html \"trait std::ops::Fn\") (in addition, `&T` references get [`FnMut`](ops/trait.FnMut.html \"trait std::ops::FnMut\") and [`FnOnce`](ops/trait.FnOnce.html \"trait std::ops::FnOnce\") if `T: Fn`)\n-   [`Hash`](hash/trait.Hash.html \"trait std::hash::Hash\")\n-   [`ToSocketAddrs`](../std/net/trait.ToSocketAddrs.html)\n-   [`Sync`](marker/trait.Sync.html \"trait std::marker::Sync\")\n\n`&mut T` references get all of the above except `ToSocketAddrs`, plus the following, if `T` implements that trait:\n\n-   [`AsMut`](convert/trait.AsMut.html \"trait std::convert::AsMut\")\n-   [`FnMut`](ops/trait.FnMut.html \"trait std::ops::FnMut\") (in addition, `&mut T` references get [`FnOnce`](ops/trait.FnOnce.html \"trait std::ops::FnOnce\") if `T: FnMut`)\n-   [`fmt::Write`](fmt/trait.Write.html \"trait std::fmt::Write\")\n-   [`Iterator`](iter/trait.Iterator.html \"trait std::iter::Iterator\")\n-   [`DoubleEndedIterator`](iter/trait.DoubleEndedIterator.html \"trait std::iter::DoubleEndedIterator\")\n-   [`ExactSizeIterator`](iter/trait.ExactSizeIterator.html \"trait std::iter::ExactSizeIterator\")\n-   [`FusedIterator`](iter/trait.FusedIterator.html \"trait std::iter::FusedIterator\")\n-   [`TrustedLen`](iter/trait.TrustedLen.html \"trait std::iter::TrustedLen\")\n-   [`Send`](marker/trait.Send.html \"trait std::marker::Send\")\n-   [`io::Write`](../std/io/trait.Write.html)\n-   [`Read`](../std/io/trait.Read.html)\n-   [`Seek`](../std/io/trait.Seek.html)\n-   [`BufRead`](../std/io/trait.BufRead.html)\n\nIn addition, `&T` references implement [`Send`](marker/trait.Send.html \"trait std::marker::Send\") if and only if `T` implements [`Sync`](marker/trait.Sync.html \"trait std::marker::Sync\").\n\nNote that due to method call deref coercion, simply calling a trait method will act like they work on references as well as they do on owned values! The implementations described here are meant for generic contexts, where the final type `T` is a type parameter or otherwise not locally known.\n\n## [§](#safety)Safety\n\nFor all types, `T: ?Sized`, and for all `t: &T` or `t: &mut T`, when such values cross an API boundary, the following invariants must generally be upheld:\n\n-   `t` is non-null\n-   `t` is aligned to `align_of_val(t)`\n-   if `size_of_val(t) > 0`, then `t` is dereferenceable for `size_of_val(t)` many bytes\n\nIf `t` points at address `a`, being “dereferenceable” for N bytes means that the memory range `[a, a + N)` is all contained within a single [allocated object](about:blank/ptr/index.html#allocated-object \"mod std::ptr\").\n\nFor instance, this means that unsafe code in a safe function may assume these invariants are ensured of arguments passed by the caller, and it may assume that these invariants are ensured of return values from any safe functions it calls.\n\nFor the other direction, things are more complicated: when unsafe code passes arguments to safe functions or returns values from safe functions, they generally must _at least_ not violate these invariants. The full requirements are stronger, as the reference generally must point to data that is safe to use at type `T`.\n\nIt is not decided yet whether unsafe code may violate these invariants temporarily on internal data. As a consequence, unsafe code which violates these invariants temporarily on internal data may be unsound or become unsound in future versions of Rust depending on how this question is decided.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1657-1659)[§](#impl-PartialEq%3C%26B%3E-for-%26A)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1662)[§](#method.eq-2)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1666)[§](#method.ne-2)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1780-1782)[§](#impl-PartialEq%3C%26B%3E-for-%26mut+A)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1785)[§](#method.eq-3)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1789)[§](#method.ne-3)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1765-1767)[§](#impl-PartialEq%3C%26mut+B%3E-for-%26A)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1770)[§](#method.eq-1)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1774)[§](#method.ne-1)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1712-1714)[§](#impl-PartialEq%3C%26mut+B%3E-for-%26mut+A)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1717)[§](#method.eq)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1721)[§](#method.ne)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1671-1673)[§](#impl-PartialOrd%3C%26B%3E-for-%26A)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1676)[§](#method.partial_cmp)\n\nThis method returns an ordering between `self` and `other` values if one exists. [Read more](about:blank/cmp/trait.PartialOrd.html#tymethod.partial_cmp)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1680)[§](#method.lt)\n\nThis method tests less than (for `self` and `other`) and is used by the `<` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.lt)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1684)[§](#method.le)\n\nThis method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.le)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1688)[§](#method.gt)\n\nThis method tests greater than (for `self` and `other`) and is used by the `>` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.gt)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1692)[§](#method.ge)\n\nThis method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.ge)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1726-1728)[§](#impl-PartialOrd%3C%26mut+B%3E-for-%26mut+A)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1731)[§](#method.partial_cmp-1)\n\nThis method returns an ordering between `self` and `other` values if one exists. [Read more](about:blank/cmp/trait.PartialOrd.html#tymethod.partial_cmp)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1735)[§](#method.lt-1)\n\nThis method tests less than (for `self` and `other`) and is used by the `<` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.lt)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1739)[§](#method.le-1)\n\nThis method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.le)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1743)[§](#method.gt-1)\n\nThis method tests greater than (for `self` and `other`) and is used by the `>` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.gt)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1747)[§](#method.ge-1)\n\nThis method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.ge)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ops/unsize.rs.html#55)[§](#impl-CoerceUnsized%3C%26U%3E-for-%26T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ops/unsize.rs.html#45)[§](#impl-CoerceUnsized%3C%26U%3E-for-%26mut+T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ops/unsize.rs.html#42)[§](#impl-CoerceUnsized%3C%26mut+U%3E-for-%26mut+T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ops/unsize.rs.html#123)[§](#impl-DispatchFromDyn%3C%26U%3E-for-%26T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ops/unsize.rs.html#126)[§](#impl-DispatchFromDyn%3C%26mut+U%3E-for-%26mut+T)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"References, `&amp;T` and `&amp;mut T`.\"><title>reference - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../\" data-static-root-path=\"../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc primitive\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../std/index.html\"><img class=\"rust-logo\" src=\"../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">reference</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../std/index.html\"><img class=\"rust-logo\" src=\"../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">reference</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-CoerceUnsized%3C%26U%3E-for-%26T\">CoerceUnsized&lt;&amp;'a U&gt;</a></li><li><a href=\"#impl-CoerceUnsized%3C%26U%3E-for-%26mut+T\">CoerceUnsized&lt;&amp;'a U&gt;</a></li><li><a href=\"#impl-CoerceUnsized%3C%26mut+U%3E-for-%26mut+T\">CoerceUnsized&lt;&amp;'a mut U&gt;</a></li><li><a href=\"#impl-DispatchFromDyn%3C%26U%3E-for-%26T\">DispatchFromDyn&lt;&amp;'a U&gt;</a></li><li><a href=\"#impl-DispatchFromDyn%3C%26mut+U%3E-for-%26mut+T\">DispatchFromDyn&lt;&amp;'a mut U&gt;</a></li><li><a href=\"#impl-PartialEq%3C%26B%3E-for-%26A\">PartialEq&lt;&amp;B&gt;</a></li><li><a href=\"#impl-PartialEq%3C%26B%3E-for-%26mut+A\">PartialEq&lt;&amp;B&gt;</a></li><li><a href=\"#impl-PartialEq%3C%26mut+B%3E-for-%26A\">PartialEq&lt;&amp;mut B&gt;</a></li><li><a href=\"#impl-PartialEq%3C%26mut+B%3E-for-%26mut+A\">PartialEq&lt;&amp;mut B&gt;</a></li><li><a href=\"#impl-PartialOrd%3C%26B%3E-for-%26A\">PartialOrd&lt;&amp;B&gt;</a></li><li><a href=\"#impl-PartialOrd%3C%26mut+B%3E-for-%26mut+A\">PartialOrd&lt;&amp;mut B&gt;</a></li></ul></section><h2><a href=\"index.html\">In crate std</a></h2><h3><a href=\"index.html#primitives\">Primitive Types</a></h3><ul class=\"block primitive\"><li><a href=\"primitive.array.html\">array</a></li><li><a href=\"primitive.bool.html\">bool</a></li><li><a href=\"primitive.char.html\">char</a></li><li><a href=\"primitive.f128.html\">f128</a></li><li><a href=\"primitive.f16.html\">f16</a></li><li><a href=\"primitive.f32.html\">f32</a></li><li><a href=\"primitive.f64.html\">f64</a></li><li><a href=\"primitive.fn.html\">fn</a></li><li><a href=\"primitive.i128.html\">i128</a></li><li><a href=\"primitive.i16.html\">i16</a></li><li><a href=\"primitive.i32.html\">i32</a></li><li><a href=\"primitive.i64.html\">i64</a></li><li><a href=\"primitive.i8.html\">i8</a></li><li><a href=\"primitive.isize.html\">isize</a></li><li><a href=\"primitive.never.html\">never</a></li><li><a href=\"primitive.pointer.html\">pointer</a></li><li><a href=\"primitive.reference.html\">reference</a></li><li><a href=\"primitive.slice.html\">slice</a></li><li><a href=\"primitive.str.html\">str</a></li><li><a href=\"primitive.tuple.html\">tuple</a></li><li><a href=\"primitive.u128.html\">u128</a></li><li><a href=\"primitive.u16.html\">u16</a></li><li><a href=\"primitive.u32.html\">u32</a></li><li><a href=\"primitive.u64.html\">u64</a></li><li><a href=\"primitive.u8.html\">u8</a></li><li><a href=\"primitive.unit.html\">unit</a></li><li><a href=\"primitive.usize.html\">usize</a></li></ul><h3><a href=\"index.html#modules\">Modules</a></h3><ul class=\"block mod\"><li><a href=\"alloc/index.html\">alloc</a></li><li><a href=\"any/index.html\">any</a></li><li><a href=\"arch/index.html\">arch</a></li><li><a href=\"array/index.html\">array</a></li><li><a href=\"ascii/index.html\">ascii</a></li><li><a href=\"assert_matches/index.html\">assert_matches</a></li><li><a href=\"async_iter/index.html\">async_iter</a></li><li><a href=\"backtrace/index.html\">backtrace</a></li><li><a href=\"borrow/index.html\">borrow</a></li><li><a href=\"boxed/index.html\">boxed</a></li><li><a href=\"cell/index.html\">cell</a></li><li><a href=\"char/index.html\">char</a></li><li><a href=\"clone/index.html\">clone</a></li><li><a href=\"cmp/index.html\">cmp</a></li><li><a href=\"collections/index.html\">collections</a></li><li><a href=\"convert/index.html\">convert</a></li><li><a href=\"default/index.html\">default</a></li><li><a href=\"env/index.html\">env</a></li><li><a href=\"error/index.html\">error</a></li><li><a href=\"f128/index.html\">f128</a></li><li><a href=\"f16/index.html\">f16</a></li><li><a href=\"f32/index.html\">f32</a></li><li><a href=\"f64/index.html\">f64</a></li><li><a href=\"ffi/index.html\">ffi</a></li><li><a href=\"fmt/index.html\">fmt</a></li><li><a href=\"fs/index.html\">fs</a></li><li><a href=\"future/index.html\">future</a></li><li><a href=\"hash/index.html\">hash</a></li><li><a href=\"hint/index.html\">hint</a></li><li><a href=\"i128/index.html\">i128</a></li><li><a href=\"i16/index.html\">i16</a></li><li><a href=\"i32/index.html\">i32</a></li><li><a href=\"i64/index.html\">i64</a></li><li><a href=\"i8/index.html\">i8</a></li><li><a href=\"intrinsics/index.html\">intrinsics</a></li><li><a href=\"io/index.html\">io</a></li><li><a href=\"isize/index.html\">isize</a></li><li><a href=\"iter/index.html\">iter</a></li><li><a href=\"marker/index.html\">marker</a></li><li><a href=\"mem/index.html\">mem</a></li><li><a href=\"net/index.html\">net</a></li><li><a href=\"num/index.html\">num</a></li><li><a href=\"ops/index.html\">ops</a></li><li><a href=\"option/index.html\">option</a></li><li><a href=\"os/index.html\">os</a></li><li><a href=\"panic/index.html\">panic</a></li><li><a href=\"pat/index.html\">pat</a></li><li><a href=\"path/index.html\">path</a></li><li><a href=\"pin/index.html\">pin</a></li><li><a href=\"prelude/index.html\">prelude</a></li><li><a href=\"primitive/index.html\">primitive</a></li><li><a href=\"process/index.html\">process</a></li><li><a href=\"ptr/index.html\">ptr</a></li><li><a href=\"rc/index.html\">rc</a></li><li><a href=\"result/index.html\">result</a></li><li><a href=\"simd/index.html\">simd</a></li><li><a href=\"slice/index.html\">slice</a></li><li><a href=\"str/index.html\">str</a></li><li><a href=\"string/index.html\">string</a></li><li><a href=\"sync/index.html\">sync</a></li><li><a href=\"task/index.html\">task</a></li><li><a href=\"thread/index.html\">thread</a></li><li><a href=\"time/index.html\">time</a></li><li><a href=\"u128/index.html\">u128</a></li><li><a href=\"u16/index.html\">u16</a></li><li><a href=\"u32/index.html\">u32</a></li><li><a href=\"u64/index.html\">u64</a></li><li><a href=\"u8/index.html\">u8</a></li><li><a href=\"usize/index.html\">usize</a></li><li><a href=\"vec/index.html\">vec</a></li></ul><h3><a href=\"index.html#macros\">Macros</a></h3><ul class=\"block macro\"><li><a href=\"macro.assert.html\">assert</a></li><li><a href=\"macro.assert_eq.html\">assert_eq</a></li><li><a href=\"macro.assert_ne.html\">assert_ne</a></li><li><a href=\"macro.cfg.html\">cfg</a></li><li><a href=\"macro.cfg_match.html\">cfg_match</a></li><li><a href=\"macro.column.html\">column</a></li><li><a href=\"macro.compile_error.html\">compile_error</a></li><li><a href=\"macro.concat.html\">concat</a></li><li><a href=\"macro.concat_bytes.html\">concat_bytes</a></li><li><a href=\"macro.concat_idents.html\">concat_idents</a></li><li><a href=\"macro.const_format_args.html\">const_format_args</a></li><li><a href=\"macro.dbg.html\">dbg</a></li><li><a href=\"macro.debug_assert.html\">debug_assert</a></li><li><a href=\"macro.debug_assert_eq.html\">debug_assert_eq</a></li><li><a href=\"macro.debug_assert_ne.html\">debug_assert_ne</a></li><li><a href=\"macro.env.html\">env</a></li><li><a href=\"macro.eprint.html\">eprint</a></li><li><a href=\"macro.eprintln.html\">eprintln</a></li><li><a href=\"macro.file.html\">file</a></li><li><a href=\"macro.format.html\">format</a></li><li><a href=\"macro.format_args.html\">format_args</a></li><li><a href=\"macro.format_args_nl.html\">format_args_nl</a></li><li><a href=\"macro.include.html\">include</a></li><li><a href=\"macro.include_bytes.html\">include_bytes</a></li><li><a href=\"macro.include_str.html\">include_str</a></li><li><a href=\"macro.is_x86_feature_detected.html\">is_x86_feature_detected</a></li><li><a href=\"macro.line.html\">line</a></li><li><a href=\"macro.log_syntax.html\">log_syntax</a></li><li><a href=\"macro.matches.html\">matches</a></li><li><a href=\"macro.module_path.html\">module_path</a></li><li><a href=\"macro.option_env.html\">option_env</a></li><li><a href=\"macro.panic.html\">panic</a></li><li><a href=\"macro.print.html\">print</a></li><li><a href=\"macro.println.html\">println</a></li><li><a href=\"macro.stringify.html\">stringify</a></li><li><a href=\"macro.thread_local.html\">thread_local</a></li><li><a href=\"macro.todo.html\">todo</a></li><li><a href=\"macro.trace_macros.html\">trace_macros</a></li><li><a href=\"macro.try.html\">try</a></li><li><a href=\"macro.unimplemented.html\">unimplemented</a></li><li><a href=\"macro.unreachable.html\">unreachable</a></li><li><a href=\"macro.vec.html\">vec</a></li><li><a href=\"macro.write.html\">write</a></li><li><a href=\"macro.writeln.html\">writeln</a></li></ul><h3><a href=\"index.html#keywords\">Keywords</a></h3><ul class=\"block keyword\"><li><a href=\"keyword.SelfTy.html\">SelfTy</a></li><li><a href=\"keyword.as.html\">as</a></li><li><a href=\"keyword.async.html\">async</a></li><li><a href=\"keyword.await.html\">await</a></li><li><a href=\"keyword.break.html\">break</a></li><li><a href=\"keyword.const.html\">const</a></li><li><a href=\"keyword.continue.html\">continue</a></li><li><a href=\"keyword.crate.html\">crate</a></li><li><a href=\"keyword.dyn.html\">dyn</a></li><li><a href=\"keyword.else.html\">else</a></li><li><a href=\"keyword.enum.html\">enum</a></li><li><a href=\"keyword.extern.html\">extern</a></li><li><a href=\"keyword.false.html\">false</a></li><li><a href=\"keyword.fn.html\">fn</a></li><li><a href=\"keyword.for.html\">for</a></li><li><a href=\"keyword.if.html\">if</a></li><li><a href=\"keyword.impl.html\">impl</a></li><li><a href=\"keyword.in.html\">in</a></li><li><a href=\"keyword.let.html\">let</a></li><li><a href=\"keyword.loop.html\">loop</a></li><li><a href=\"keyword.match.html\">match</a></li><li><a href=\"keyword.mod.html\">mod</a></li><li><a href=\"keyword.move.html\">move</a></li><li><a href=\"keyword.mut.html\">mut</a></li><li><a href=\"keyword.pub.html\">pub</a></li><li><a href=\"keyword.ref.html\">ref</a></li><li><a href=\"keyword.return.html\">return</a></li><li><a href=\"keyword.self.html\">self</a></li><li><a href=\"keyword.static.html\">static</a></li><li><a href=\"keyword.struct.html\">struct</a></li><li><a href=\"keyword.super.html\">super</a></li><li><a href=\"keyword.trait.html\">trait</a></li><li><a href=\"keyword.true.html\">true</a></li><li><a href=\"keyword.type.html\">type</a></li><li><a href=\"keyword.union.html\">union</a></li><li><a href=\"keyword.unsafe.html\">unsafe</a></li><li><a href=\"keyword.use.html\">use</a></li><li><a href=\"keyword.where.html\">where</a></li><li><a href=\"keyword.while.html\">while</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Primitive Type <a class=\"primitive\" href=\"#\">reference</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>References, <code>&amp;T</code> and <code>&amp;mut T</code>.</p>\n<p>A reference represents a borrow of some owned value. You can get one by using the <code>&amp;</code> or <code>&amp;mut</code>\noperators on a value, or by using a <a href=\"../std/keyword.ref.html\"><code>ref</code></a> or\n<code><a href=\"../std/keyword.ref.html\">ref</a> <a href=\"../std/keyword.mut.html\">mut</a></code> pattern.</p>\n<p>For those familiar with pointers, a reference is just a pointer that is assumed to be\naligned, not null, and pointing to memory containing a valid value of <code>T</code> - for example,\n<code>&amp;<a href=\"primitive.bool.html\" title=\"primitive bool\">bool</a></code> can only point to an allocation containing the integer values <code>1</code>\n(<a href=\"../std/keyword.true.html\"><code>true</code></a>) or <code>0</code> (<a href=\"../std/keyword.false.html\"><code>false</code></a>), but\ncreating a <code>&amp;<a href=\"primitive.bool.html\" title=\"primitive bool\">bool</a></code> that points to an allocation containing\nthe value <code>3</code> causes undefined behaviour.\nIn fact, <code><a href=\"option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;T&gt;</code> has the same memory representation as a\nnullable but aligned pointer, and can be passed across FFI boundaries as such.</p>\n<p>In most cases, references can be used much like the original value. Field access, method\ncalling, and indexing work the same (save for mutability rules, of course). In addition, the\ncomparison operators transparently defer to the referent’s implementation, allowing references\nto be compared the same as owned values.</p>\n<p>References have a lifetime attached to them, which represents the scope for which the borrow is\nvalid. A lifetime is said to “outlive” another one if its representative scope is as long or\nlonger than the other. The <code>'static</code> lifetime is the longest lifetime, which represents the\ntotal life of the program. For example, string literals have a <code>'static</code> lifetime because the\ntext data is embedded into the binary of the program, rather than in an allocation that needs\nto be dynamically managed.</p>\n<p><code>&amp;mut T</code> references can be freely coerced into <code>&amp;T</code> references with the same referent type, and\nreferences with longer lifetimes can be freely coerced into references with shorter ones.</p>\n<p>Reference equality by address, instead of comparing the values pointed to, is accomplished via\nimplicit reference-pointer coercion and raw pointer equality via <a href=\"ptr/fn.eq.html\" title=\"fn std::ptr::eq\"><code>ptr::eq</code></a>, while\n<a href=\"cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\"><code>PartialEq</code></a> compares values.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ptr;\n\n<span class=\"kw\">let </span>five = <span class=\"number\">5</span>;\n<span class=\"kw\">let </span>other_five = <span class=\"number\">5</span>;\n<span class=\"kw\">let </span>five_ref = <span class=\"kw-2\">&amp;</span>five;\n<span class=\"kw\">let </span>same_five_ref = <span class=\"kw-2\">&amp;</span>five;\n<span class=\"kw\">let </span>other_five_ref = <span class=\"kw-2\">&amp;</span>other_five;\n\n<span class=\"macro\">assert!</span>(five_ref == same_five_ref);\n<span class=\"macro\">assert!</span>(five_ref == other_five_ref);\n\n<span class=\"macro\">assert!</span>(ptr::eq(five_ref, same_five_ref));\n<span class=\"macro\">assert!</span>(!ptr::eq(five_ref, other_five_ref));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ptr;%0A++++%0A++++let+five+=+5;%0A++++let+other_five+=+5;%0A++++let+five_ref+=+%26five;%0A++++let+same_five_ref+=+%26five;%0A++++let+other_five_ref+=+%26other_five;%0A++++%0A++++assert!(five_ref+==+same_five_ref);%0A++++assert!(five_ref+==+other_five_ref);%0A++++%0A++++assert!(ptr::eq(five_ref,+same_five_ref));%0A++++assert!(!ptr::eq(five_ref,+other_five_ref));%0A%7D&amp;edition=2021\">Run</a></div>\n<p>For more information on how to use references, see <a href=\"../book/ch04-02-references-and-borrowing.html\">the book’s section on “References and\nBorrowing”</a>.</p>\n<h2 id=\"trait-implementations-1\"><a class=\"doc-anchor\" href=\"#trait-implementations-1\">§</a>Trait implementations</h2>\n<p>The following traits are implemented for all <code>&amp;T</code>, regardless of the type of its referent:</p>\n<ul>\n<li><a href=\"marker/trait.Copy.html\" title=\"trait std::marker::Copy\"><code>Copy</code></a></li>\n<li><a href=\"clone/trait.Clone.html\" title=\"trait std::clone::Clone\"><code>Clone</code></a> (Note that this will not defer to <code>T</code>’s <code>Clone</code> implementation if it exists!)</li>\n<li><a href=\"ops/trait.Deref.html\" title=\"trait std::ops::Deref\"><code>Deref</code></a></li>\n<li><a href=\"borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\"><code>Borrow</code></a></li>\n<li><a href=\"fmt/trait.Pointer.html\" title=\"trait std::fmt::Pointer\"><code>fmt::Pointer</code></a></li>\n</ul>\n<p><code>&amp;mut T</code> references get all of the above except <code>Copy</code> and <code>Clone</code> (to prevent creating\nmultiple simultaneous mutable borrows), plus the following, regardless of the type of its\nreferent:</p>\n<ul>\n<li><a href=\"ops/trait.DerefMut.html\" title=\"trait std::ops::DerefMut\"><code>DerefMut</code></a></li>\n<li><a href=\"borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\"><code>BorrowMut</code></a></li>\n</ul>\n<p>The following traits are implemented on <code>&amp;T</code> references if the underlying <code>T</code> also implements\nthat trait:</p>\n<ul>\n<li>All the traits in <a href=\"fmt/index.html\" title=\"mod std::fmt\"><code>std::fmt</code></a> except <a href=\"fmt/trait.Pointer.html\" title=\"trait std::fmt::Pointer\"><code>fmt::Pointer</code></a> (which is implemented regardless of the type of its referent) and <a href=\"fmt/trait.Write.html\" title=\"trait std::fmt::Write\"><code>fmt::Write</code></a></li>\n<li><a href=\"cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\"><code>PartialOrd</code></a></li>\n<li><a href=\"cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\"><code>Ord</code></a></li>\n<li><a href=\"cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\"><code>PartialEq</code></a></li>\n<li><a href=\"cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\"><code>Eq</code></a></li>\n<li><a href=\"convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\"><code>AsRef</code></a></li>\n<li><a href=\"ops/trait.Fn.html\" title=\"trait std::ops::Fn\"><code>Fn</code></a> (in addition, <code>&amp;T</code> references get <a href=\"ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\"><code>FnMut</code></a> and <a href=\"ops/trait.FnOnce.html\" title=\"trait std::ops::FnOnce\"><code>FnOnce</code></a> if <code>T: Fn</code>)</li>\n<li><a href=\"hash/trait.Hash.html\" title=\"trait std::hash::Hash\"><code>Hash</code></a></li>\n<li><a href=\"../std/net/trait.ToSocketAddrs.html\"><code>ToSocketAddrs</code></a></li>\n<li><a href=\"marker/trait.Sync.html\" title=\"trait std::marker::Sync\"><code>Sync</code></a></li>\n</ul>\n<p><code>&amp;mut T</code> references get all of the above except <code>ToSocketAddrs</code>, plus the following, if <code>T</code>\nimplements that trait:</p>\n<ul>\n<li><a href=\"convert/trait.AsMut.html\" title=\"trait std::convert::AsMut\"><code>AsMut</code></a></li>\n<li><a href=\"ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\"><code>FnMut</code></a> (in addition, <code>&amp;mut T</code> references get <a href=\"ops/trait.FnOnce.html\" title=\"trait std::ops::FnOnce\"><code>FnOnce</code></a> if <code>T: FnMut</code>)</li>\n<li><a href=\"fmt/trait.Write.html\" title=\"trait std::fmt::Write\"><code>fmt::Write</code></a></li>\n<li><a href=\"iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\"><code>Iterator</code></a></li>\n<li><a href=\"iter/trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\"><code>DoubleEndedIterator</code></a></li>\n<li><a href=\"iter/trait.ExactSizeIterator.html\" title=\"trait std::iter::ExactSizeIterator\"><code>ExactSizeIterator</code></a></li>\n<li><a href=\"iter/trait.FusedIterator.html\" title=\"trait std::iter::FusedIterator\"><code>FusedIterator</code></a></li>\n<li><a href=\"iter/trait.TrustedLen.html\" title=\"trait std::iter::TrustedLen\"><code>TrustedLen</code></a></li>\n<li><a href=\"marker/trait.Send.html\" title=\"trait std::marker::Send\"><code>Send</code></a></li>\n<li><a href=\"../std/io/trait.Write.html\"><code>io::Write</code></a></li>\n<li><a href=\"../std/io/trait.Read.html\"><code>Read</code></a></li>\n<li><a href=\"../std/io/trait.Seek.html\"><code>Seek</code></a></li>\n<li><a href=\"../std/io/trait.BufRead.html\"><code>BufRead</code></a></li>\n</ul>\n<p>In addition, <code>&amp;T</code> references implement <a href=\"marker/trait.Send.html\" title=\"trait std::marker::Send\"><code>Send</code></a> if and only if <code>T</code> implements <a href=\"marker/trait.Sync.html\" title=\"trait std::marker::Sync\"><code>Sync</code></a>.</p>\n<p>Note that due to method call deref coercion, simply calling a trait method will act like they\nwork on references as well as they do on owned values! The implementations described here are\nmeant for generic contexts, where the final type <code>T</code> is a type parameter or otherwise not\nlocally known.</p>\n<h2 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h2>\n<p>For all types, <code>T: ?Sized</code>, and for all <code>t: &amp;T</code> or <code>t: &amp;mut T</code>, when such values cross an API\nboundary, the following invariants must generally be upheld:</p>\n<ul>\n<li><code>t</code> is non-null</li>\n<li><code>t</code> is aligned to <code>align_of_val(t)</code></li>\n<li>if <code>size_of_val(t) &gt; 0</code>, then <code>t</code> is dereferenceable for <code>size_of_val(t)</code> many bytes</li>\n</ul>\n<p>If <code>t</code> points at address <code>a</code>, being “dereferenceable” for N bytes means that the memory range\n<code>[a, a + N)</code> is all contained within a single <a href=\"ptr/index.html#allocated-object\" title=\"mod std::ptr\">allocated object</a>.</p>\n<p>For instance, this means that unsafe code in a safe function may assume these invariants are\nensured of arguments passed by the caller, and it may assume that these invariants are ensured\nof return values from any safe functions it calls.</p>\n<p>For the other direction, things are more complicated: when unsafe code passes arguments\nto safe functions or returns values from safe functions, they generally must <em>at least</em>\nnot violate these invariants. The full requirements are stronger, as the reference generally\nmust point to data that is safe to use at type <code>T</code>.</p>\n<p>It is not decided yet whether unsafe code may violate these invariants temporarily on internal\ndata. As a consequence, unsafe code which violates these invariants temporarily on internal data\nmay be unsound or become unsound in future versions of Rust depending on how this question is\ndecided.</p>\n</div></details><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">§</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3C%26B%3E-for-%26A\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1657-1659\">source</a></span><a href=\"#impl-PartialEq%3C%26B%3E-for-%26A\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B&gt; <a class=\"trait\" href=\"cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"primitive.reference.html\">&amp;B</a>&gt; for <a class=\"primitive\" href=\"primitive.reference.html\">&amp;A</a><div class=\"where\">where\n    A: <a class=\"trait\" href=\"cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;B&gt; + ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    B: ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1662\">source</a><a href=\"#method.eq-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.reference.html\">&amp;B</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1666\">source</a><a href=\"#method.ne-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.reference.html\">&amp;B</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3C%26B%3E-for-%26mut+A\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1780-1782\">source</a></span><a href=\"#impl-PartialEq%3C%26B%3E-for-%26mut+A\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B&gt; <a class=\"trait\" href=\"cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"primitive.reference.html\">&amp;B</a>&gt; for <a class=\"primitive\" href=\"primitive.reference.html\">&amp;mut A</a><div class=\"where\">where\n    A: <a class=\"trait\" href=\"cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;B&gt; + ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    B: ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1785\">source</a><a href=\"#method.eq-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.reference.html\">&amp;B</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1789\">source</a><a href=\"#method.ne-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.reference.html\">&amp;B</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3C%26mut+B%3E-for-%26A\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1765-1767\">source</a></span><a href=\"#impl-PartialEq%3C%26mut+B%3E-for-%26A\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B&gt; <a class=\"trait\" href=\"cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"primitive.reference.html\">&amp;mut B</a>&gt; for <a class=\"primitive\" href=\"primitive.reference.html\">&amp;A</a><div class=\"where\">where\n    A: <a class=\"trait\" href=\"cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;B&gt; + ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    B: ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1770\">source</a><a href=\"#method.eq-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.reference.html\">&amp;mut B</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1774\">source</a><a href=\"#method.ne-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.reference.html\">&amp;mut B</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3C%26mut+B%3E-for-%26mut+A\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1712-1714\">source</a></span><a href=\"#impl-PartialEq%3C%26mut+B%3E-for-%26mut+A\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B&gt; <a class=\"trait\" href=\"cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"primitive.reference.html\">&amp;mut B</a>&gt; for <a class=\"primitive\" href=\"primitive.reference.html\">&amp;mut A</a><div class=\"where\">where\n    A: <a class=\"trait\" href=\"cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;B&gt; + ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    B: ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1717\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.reference.html\">&amp;mut B</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1721\">source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.reference.html\">&amp;mut B</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialOrd%3C%26B%3E-for-%26A\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1671-1673\">source</a></span><a href=\"#impl-PartialOrd%3C%26B%3E-for-%26A\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B&gt; <a class=\"trait\" href=\"cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"primitive\" href=\"primitive.reference.html\">&amp;B</a>&gt; for <a class=\"primitive\" href=\"primitive.reference.html\">&amp;A</a><div class=\"where\">where\n    A: <a class=\"trait\" href=\"cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;B&gt; + ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    B: ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1676\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.reference.html\">&amp;B</a>) -&gt; <a class=\"enum\" href=\"option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\">This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1680\">source</a><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.reference.html\">&amp;B</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.le\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1684\">source</a><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.reference.html\">&amp;B</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1688\">source</a><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.reference.html\">&amp;B</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ge\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1692\">source</a><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.reference.html\">&amp;B</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialOrd%3C%26mut+B%3E-for-%26mut+A\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1726-1728\">source</a></span><a href=\"#impl-PartialOrd%3C%26mut+B%3E-for-%26mut+A\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B&gt; <a class=\"trait\" href=\"cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"primitive\" href=\"primitive.reference.html\">&amp;mut B</a>&gt; for <a class=\"primitive\" href=\"primitive.reference.html\">&amp;mut A</a><div class=\"where\">where\n    A: <a class=\"trait\" href=\"cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;B&gt; + ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    B: ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1731\">source</a><a href=\"#method.partial_cmp-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.reference.html\">&amp;mut B</a>) -&gt; <a class=\"enum\" href=\"option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\">This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lt-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1735\">source</a><a href=\"#method.lt-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.reference.html\">&amp;mut B</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.le-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1739\">source</a><a href=\"#method.le-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.reference.html\">&amp;mut B</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gt-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1743\">source</a><a href=\"#method.gt-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.reference.html\">&amp;mut B</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ge-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1747\">source</a><a href=\"#method.ge-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.reference.html\">&amp;mut B</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details><section id=\"impl-CoerceUnsized%3C%26U%3E-for-%26T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/unsize.rs.html#55\">source</a><a href=\"#impl-CoerceUnsized%3C%26U%3E-for-%26T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b, T, U&gt; <a class=\"trait\" href=\"ops/trait.CoerceUnsized.html\" title=\"trait std::ops::CoerceUnsized\">CoerceUnsized</a>&lt;<a class=\"primitive\" href=\"primitive.reference.html\">&amp;'a U</a>&gt; for <a class=\"primitive\" href=\"primitive.reference.html\">&amp;'b T</a><div class=\"where\">where\n    'b: 'a,\n    T: <a class=\"trait\" href=\"marker/trait.Unsize.html\" title=\"trait std::marker::Unsize\">Unsize</a>&lt;U&gt; + ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    U: ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-CoerceUnsized%3C%26U%3E-for-%26mut+T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/unsize.rs.html#45\">source</a><a href=\"#impl-CoerceUnsized%3C%26U%3E-for-%26mut+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b, T, U&gt; <a class=\"trait\" href=\"ops/trait.CoerceUnsized.html\" title=\"trait std::ops::CoerceUnsized\">CoerceUnsized</a>&lt;<a class=\"primitive\" href=\"primitive.reference.html\">&amp;'a U</a>&gt; for <a class=\"primitive\" href=\"primitive.reference.html\">&amp;'b mut T</a><div class=\"where\">where\n    'b: 'a,\n    T: <a class=\"trait\" href=\"marker/trait.Unsize.html\" title=\"trait std::marker::Unsize\">Unsize</a>&lt;U&gt; + ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    U: ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-CoerceUnsized%3C%26mut+U%3E-for-%26mut+T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/unsize.rs.html#42\">source</a><a href=\"#impl-CoerceUnsized%3C%26mut+U%3E-for-%26mut+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T, U&gt; <a class=\"trait\" href=\"ops/trait.CoerceUnsized.html\" title=\"trait std::ops::CoerceUnsized\">CoerceUnsized</a>&lt;<a class=\"primitive\" href=\"primitive.reference.html\">&amp;'a mut U</a>&gt; for <a class=\"primitive\" href=\"primitive.reference.html\">&amp;'a mut T</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"marker/trait.Unsize.html\" title=\"trait std::marker::Unsize\">Unsize</a>&lt;U&gt; + ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    U: ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-DispatchFromDyn%3C%26U%3E-for-%26T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/unsize.rs.html#123\">source</a><a href=\"#impl-DispatchFromDyn%3C%26U%3E-for-%26T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T, U&gt; <a class=\"trait\" href=\"ops/trait.DispatchFromDyn.html\" title=\"trait std::ops::DispatchFromDyn\">DispatchFromDyn</a>&lt;<a class=\"primitive\" href=\"primitive.reference.html\">&amp;'a U</a>&gt; for <a class=\"primitive\" href=\"primitive.reference.html\">&amp;'a T</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"marker/trait.Unsize.html\" title=\"trait std::marker::Unsize\">Unsize</a>&lt;U&gt; + ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    U: ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-DispatchFromDyn%3C%26mut+U%3E-for-%26mut+T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/unsize.rs.html#126\">source</a><a href=\"#impl-DispatchFromDyn%3C%26mut+U%3E-for-%26mut+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T, U&gt; <a class=\"trait\" href=\"ops/trait.DispatchFromDyn.html\" title=\"trait std::ops::DispatchFromDyn\">DispatchFromDyn</a>&lt;<a class=\"primitive\" href=\"primitive.reference.html\">&amp;'a mut U</a>&gt; for <a class=\"primitive\" href=\"primitive.reference.html\">&amp;'a mut T</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"marker/trait.Unsize.html\" title=\"trait std::marker::Unsize\">Unsize</a>&lt;U&gt; + ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    U: ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></div></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:10:16.434Z"
}