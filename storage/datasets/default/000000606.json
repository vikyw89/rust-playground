{
	"title": "Try in std::ops - Rust",
	"url": "https://doc.rust-lang.org/stable/std/ops/trait.Try.html",
	"markdown": "# Try in std::ops - Rust\n\n```\npub trait Try: FromResidual {\n    type Output;\n    type Residual;\n\n    // Required methods\n    fn from_output(output: Self::Output) -> Self;\n    fn branch(self) -> ControlFlow<Self::Residual, Self::Output>;\n}\n```\n\nüî¨This is a nightly-only experimental API. (`try_trait_v2`¬†[#84277](https://github.com/rust-lang/rust/issues/84277))\n\nExpand description\n\nThe `?` operator and `try {}` blocks.\n\n`try_*` methods typically involve a type implementing this trait. For example, the closures passed to [`Iterator::try_fold`](about:blank/iter/trait.Iterator.html#method.try_fold \"method std::iter::Iterator::try_fold\") and [`Iterator::try_for_each`](about:blank/iter/trait.Iterator.html#method.try_for_each \"method std::iter::Iterator::try_for_each\") must return such a type.\n\n`Try` types are typically those containing two or more categories of values, some subset of which are so commonly handled via early returns that it‚Äôs worth providing a terse (but still visible) syntax to make that easy.\n\nThis is most often seen for error handling with [`Result`](../result/enum.Result.html \"enum std::result::Result\") and [`Option`](../option/enum.Option.html \"enum std::option::Option\"). The quintessential implementation of this trait is on [`ControlFlow`](enum.ControlFlow.html \"enum std::ops::ControlFlow\").\n\n## [¬ß](#using-try-in-generic-code)Using `Try` in Generic Code\n\n`Iterator::try_fold` was stabilized to call back in Rust 1.27, but this trait is much newer. To illustrate the various associated types and methods, let‚Äôs implement our own version.\n\nAs a reminder, an infallible version of a fold looks something like this:\n\n```\nfn simple_fold<A, T>(\n    iter: impl Iterator<Item = T>,\n    mut accum: A,\n    mut f: impl FnMut(A, T) -> A,\n) -> A {\n    for x in iter {\n        accum = f(accum, x);\n    }\n    accum\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++fn+simple_fold%3CA,+T%3E(%0A++++++++iter:+impl+Iterator%3CItem+=+T%3E,%0A++++++++mut+accum:+A,%0A++++++++mut+f:+impl+FnMut(A,+T)+-%3E+A,%0A++++)+-%3E+A+%7B%0A++++++++for+x+in+iter+%7B%0A++++++++++++accum+=+f(accum,+x);%0A++++++++%7D%0A++++++++accum%0A++++%7D%0A%7D&edition=2021)\n\nSo instead of `f` returning just an `A`, we‚Äôll need it to return some other type that produces an `A` in the ‚Äúdon‚Äôt short circuit‚Äù path. Conveniently, that‚Äôs also the type we need to return from the function.\n\nLet‚Äôs add a new generic parameter `R` for that type, and bound it to the output type that we want:\n\n```\nfn simple_try_fold_1<A, T, R: Try<Output = A>>(\n    iter: impl Iterator<Item = T>,\n    mut accum: A,\n    mut f: impl FnMut(A, T) -> R,\n) -> R {\n    todo!()\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(try_trait_v2)%5D%0Afn+main()+%7B%0A++++use+std::ops::Try;%0A++++fn+simple_try_fold_1%3CA,+T,+R:+Try%3COutput+=+A%3E%3E(%0A++++++++iter:+impl+Iterator%3CItem+=+T%3E,%0A++++++++mut+accum:+A,%0A++++++++mut+f:+impl+FnMut(A,+T)+-%3E+R,%0A++++)+-%3E+R+%7B%0A++++++++todo!()%0A++++%7D%0A%7D&version=nightly&edition=2021)\n\nIf we get through the entire iterator, we need to wrap up the accumulator into the return type using [`Try::from_output`](about:blank/trait.Try.html#tymethod.from_output \"associated function std::ops::Try::from_output\"):\n\n```\nfn simple_try_fold_2<A, T, R: Try<Output = A>>(\n    iter: impl Iterator<Item = T>,\n    mut accum: A,\n    mut f: impl FnMut(A, T) -> R,\n) -> R {\n    for x in iter {\n        let cf = f(accum, x).branch();\n        match cf {\n            ControlFlow::Continue(a) => accum = a,\n            ControlFlow::Break(_) => todo!(),\n        }\n    }\n    R::from_output(accum)\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(try_trait_v2)%5D%0Afn+main()+%7B%0A++++use+std::ops::%7BControlFlow,+Try%7D;%0A++++fn+simple_try_fold_2%3CA,+T,+R:+Try%3COutput+=+A%3E%3E(%0A++++++++iter:+impl+Iterator%3CItem+=+T%3E,%0A++++++++mut+accum:+A,%0A++++++++mut+f:+impl+FnMut(A,+T)+-%3E+R,%0A++++)+-%3E+R+%7B%0A++++++++for+x+in+iter+%7B%0A++++++++++++let+cf+=+f(accum,+x).branch();%0A++++++++++++match+cf+%7B%0A++++++++++++++++ControlFlow::Continue(a)+=%3E+accum+=+a,%0A++++++++++++++++ControlFlow::Break(_)+=%3E+todo!(),%0A++++++++++++%7D%0A++++++++%7D%0A++++++++R::from_output(accum)%0A++++%7D%0A%7D&version=nightly&edition=2021)\n\nWe‚Äôll also need [`FromResidual::from_residual`](about:blank/trait.FromResidual.html#tymethod.from_residual \"associated function std::ops::FromResidual::from_residual\") to turn the residual back into the original type. But because it‚Äôs a supertrait of `Try`, we don‚Äôt need to mention it in the bounds. All types which implement `Try` can be recreated from their corresponding residual, so we‚Äôll just call it:\n\n```\npub fn simple_try_fold_3<A, T, R: Try<Output = A>>(\n    iter: impl Iterator<Item = T>,\n    mut accum: A,\n    mut f: impl FnMut(A, T) -> R,\n) -> R {\n    for x in iter {\n        let cf = f(accum, x).branch();\n        match cf {\n            ControlFlow::Continue(a) => accum = a,\n            ControlFlow::Break(r) => return R::from_residual(r),\n        }\n    }\n    R::from_output(accum)\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(try_trait_v2)%5D%0Afn+main()+%7B%0A++++use+std::ops::%7BControlFlow,+Try%7D;%0A++++pub+fn+simple_try_fold_3%3CA,+T,+R:+Try%3COutput+=+A%3E%3E(%0A++++++++iter:+impl+Iterator%3CItem+=+T%3E,%0A++++++++mut+accum:+A,%0A++++++++mut+f:+impl+FnMut(A,+T)+-%3E+R,%0A++++)+-%3E+R+%7B%0A++++++++for+x+in+iter+%7B%0A++++++++++++let+cf+=+f(accum,+x).branch();%0A++++++++++++match+cf+%7B%0A++++++++++++++++ControlFlow::Continue(a)+=%3E+accum+=+a,%0A++++++++++++++++ControlFlow::Break(r)+=%3E+return+R::from_residual(r),%0A++++++++++++%7D%0A++++++++%7D%0A++++++++R::from_output(accum)%0A++++%7D%0A%7D&version=nightly&edition=2021)\n\nBut this ‚Äúcall `branch`, then `match` on it, and `return` if it was a `Break`‚Äù is exactly what happens inside the `?` operator. So rather than do all this manually, we can just use `?` instead:\n\n```\nfn simple_try_fold<A, T, R: Try<Output = A>>(\n    iter: impl Iterator<Item = T>,\n    mut accum: A,\n    mut f: impl FnMut(A, T) -> R,\n) -> R {\n    for x in iter {\n        accum = f(accum, x)?;\n    }\n    R::from_output(accum)\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(try_trait_v2)%5D%0Afn+main()+%7B%0A++++use+std::ops::Try;%0A++++fn+simple_try_fold%3CA,+T,+R:+Try%3COutput+=+A%3E%3E(%0A++++++++iter:+impl+Iterator%3CItem+=+T%3E,%0A++++++++mut+accum:+A,%0A++++++++mut+f:+impl+FnMut(A,+T)+-%3E+R,%0A++++)+-%3E+R+%7B%0A++++++++for+x+in+iter+%7B%0A++++++++++++accum+=+f(accum,+x)?;%0A++++++++%7D%0A++++++++R::from_output(accum)%0A++++%7D%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ops/try_trait.rs.html#134)\n\nüî¨This is a nightly-only experimental API. (`try_trait_v2`¬†[#84277](https://github.com/rust-lang/rust/issues/84277))\n\nThe type of the value produced by `?` when _not_ short-circuiting.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ops/try_trait.rs.html#158)\n\nüî¨This is a nightly-only experimental API. (`try_trait_v2`¬†[#84277](https://github.com/rust-lang/rust/issues/84277))\n\nThe type of the value passed to [`FromResidual::from_residual`](about:blank/trait.FromResidual.html#tymethod.from_residual \"associated function std::ops::FromResidual::from_residual\") as part of `?` when short-circuiting.\n\nThis represents the possible values of the `Self` type which are _not_ represented by the `Output` type.\n\n##### [¬ß](#note-to-implementors)Note to Implementors\n\nThe choice of this type is critical to interconversion. Unlike the `Output` type, which will often be a raw generic type, this type is typically a newtype of some sort to ‚Äúcolor‚Äù the type so that it‚Äôs distinguishable from the residuals of other types.\n\nThis is why `Result<T, E>::Residual` is not `E`, but `Result<Infallible, E>`. That way it‚Äôs distinct from `ControlFlow<E>::Residual`, for example, and thus `?` on `ControlFlow` cannot be used in a method returning `Result`.\n\nIf you‚Äôre making a generic type `Foo<T>` that implements `Try<Output = T>`, then typically you can use `Foo<std::convert::Infallible>` as its `Residual` type: that type will have a ‚Äúhole‚Äù in the correct place, and will maintain the ‚Äúfoo-ness‚Äù of the residual so other types need to opt-in to interconversion.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ops/try_trait.rs.html#190)\n\nüî¨This is a nightly-only experimental API. (`try_trait_v2`¬†[#84277](https://github.com/rust-lang/rust/issues/84277))\n\nConstructs the type from its `Output` type.\n\nThis should be implemented consistently with the `branch` method such that applying the `?` operator will get back the original value: `Try::from_output(x).branch() --> ControlFlow::Continue(x)`.\n\n##### [¬ß](#examples)Examples\n\n```\n#![feature(try_trait_v2)]\nuse std::ops::Try;\n\nassert_eq!(<Result<_, String> as Try>::from_output(3), Ok(3));\nassert_eq!(<Option<_> as Try>::from_output(4), Some(4));\nassert_eq!(\n    <std::ops::ControlFlow<String, _> as Try>::from_output(5),\n    std::ops::ControlFlow::Continue(5),\n);\n\nassert_eq!(Option::from_output(4)?, 4);\n\n// This is used, for example, on the accumulator in `try_fold`:\nlet r = std::iter::empty().try_fold(4, |_, ()| -> Option<_> { unreachable!() });\nassert_eq!(r, Some(4));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(try_trait_v2)%5D%0Afn+main()+%7B%0A++++use+std::ops::Try;%0A++++%0A++++assert_eq!(%3CResult%3C_,+String%3E+as+Try%3E::from_output(3),+Ok(3));%0A++++assert_eq!(%3COption%3C_%3E+as+Try%3E::from_output(4),+Some(4));%0A++++assert_eq!(%0A++++++++%3Cstd::ops::ControlFlow%3CString,+_%3E+as+Try%3E::from_output(5),%0A++++++++std::ops::ControlFlow::Continue(5),%0A++++);%0A++++%0A++++fn+make_question_mark_work()+-%3E+Option%3C()%3E+%7B%0A++++assert_eq!(Option::from_output(4)?,+4);%0A++++None+%7D%0A++++make_question_mark_work();%0A++++%0A++++//+This+is+used,+for+example,+on+the+accumulator+in+%60try_fold%60:%0A++++let+r+=+std::iter::empty().try_fold(4,+%7C_,+()%7C+-%3E+Option%3C_%3E+%7B+unreachable!()+%7D);%0A++++assert_eq!(r,+Some(4));%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ops/try_trait.rs.html#217)\n\nüî¨This is a nightly-only experimental API. (`try_trait_v2`¬†[#84277](https://github.com/rust-lang/rust/issues/84277))\n\nUsed in `?` to decide whether the operator should produce a value (because this returned [`ControlFlow::Continue`](about:blank/enum.ControlFlow.html#variant.Continue \"variant std::ops::ControlFlow::Continue\")) or propagate a value back to the caller (because this returned [`ControlFlow::Break`](about:blank/enum.ControlFlow.html#variant.Break \"variant std::ops::ControlFlow::Break\")).\n\n##### [¬ß](#examples-1)Examples\n\n```\n#![feature(try_trait_v2)]\nuse std::ops::{ControlFlow, Try};\n\nassert_eq!(Ok::<_, String>(3).branch(), ControlFlow::Continue(3));\nassert_eq!(Err::<String, _>(3).branch(), ControlFlow::Break(Err(3)));\n\nassert_eq!(Some(3).branch(), ControlFlow::Continue(3));\nassert_eq!(None::<String>.branch(), ControlFlow::Break(None));\n\nassert_eq!(ControlFlow::<String, _>::Continue(3).branch(), ControlFlow::Continue(3));\nassert_eq!(\n    ControlFlow::<_, String>::Break(3).branch(),\n    ControlFlow::Break(ControlFlow::Break(3)),\n);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(try_trait_v2)%5D%0Afn+main()+%7B%0A++++use+std::ops::%7BControlFlow,+Try%7D;%0A++++%0A++++assert_eq!(Ok::%3C_,+String%3E(3).branch(),+ControlFlow::Continue(3));%0A++++assert_eq!(Err::%3CString,+_%3E(3).branch(),+ControlFlow::Break(Err(3)));%0A++++%0A++++assert_eq!(Some(3).branch(),+ControlFlow::Continue(3));%0A++++assert_eq!(None::%3CString%3E.branch(),+ControlFlow::Break(None));%0A++++%0A++++assert_eq!(ControlFlow::%3CString,+_%3E::Continue(3).branch(),+ControlFlow::Continue(3));%0A++++assert_eq!(%0A++++++++ControlFlow::%3C_,+String%3E::Break(3).branch(),%0A++++++++ControlFlow::Break(ControlFlow::Break(3)),%0A++++);%0A%7D&version=nightly&edition=2021)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"The `?` operator and `try {}` blocks.\"><title>Try in std::ops - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc trait\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">Try</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">Try</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#required-associated-types\">Required Associated Types</a></h3><ul class=\"block\"><li><a href=\"#associatedtype.Output\">Output</a></li><li><a href=\"#associatedtype.Residual\">Residual</a></li></ul><h3><a href=\"#required-methods\">Required Methods</a></h3><ul class=\"block\"><li><a href=\"#tymethod.branch\">branch</a></li><li><a href=\"#tymethod.from_output\">from_output</a></li></ul><h3><a href=\"#object-safety\">Object Safety</a></h3><h3><a href=\"#implementors\">Implementors</a></h3></section><h2><a href=\"index.html\">In std::ops</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.Range.html\">Range</a></li><li><a href=\"struct.RangeFrom.html\">RangeFrom</a></li><li><a href=\"struct.RangeFull.html\">RangeFull</a></li><li><a href=\"struct.RangeInclusive.html\">RangeInclusive</a></li><li><a href=\"struct.RangeTo.html\">RangeTo</a></li><li><a href=\"struct.RangeToInclusive.html\">RangeToInclusive</a></li><li><a href=\"struct.Yeet.html\">Yeet</a></li></ul><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.Bound.html\">Bound</a></li><li><a href=\"enum.ControlFlow.html\">ControlFlow</a></li><li><a href=\"enum.CoroutineState.html\">CoroutineState</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.Add.html\">Add</a></li><li><a href=\"trait.AddAssign.html\">AddAssign</a></li><li><a href=\"trait.AsyncFn.html\">AsyncFn</a></li><li><a href=\"trait.AsyncFnMut.html\">AsyncFnMut</a></li><li><a href=\"trait.AsyncFnOnce.html\">AsyncFnOnce</a></li><li><a href=\"trait.BitAnd.html\">BitAnd</a></li><li><a href=\"trait.BitAndAssign.html\">BitAndAssign</a></li><li><a href=\"trait.BitOr.html\">BitOr</a></li><li><a href=\"trait.BitOrAssign.html\">BitOrAssign</a></li><li><a href=\"trait.BitXor.html\">BitXor</a></li><li><a href=\"trait.BitXorAssign.html\">BitXorAssign</a></li><li><a href=\"trait.CoerceUnsized.html\">CoerceUnsized</a></li><li><a href=\"trait.Coroutine.html\">Coroutine</a></li><li><a href=\"trait.Deref.html\">Deref</a></li><li><a href=\"trait.DerefMut.html\">DerefMut</a></li><li><a href=\"trait.DerefPure.html\">DerefPure</a></li><li><a href=\"trait.DispatchFromDyn.html\">DispatchFromDyn</a></li><li><a href=\"trait.Div.html\">Div</a></li><li><a href=\"trait.DivAssign.html\">DivAssign</a></li><li><a href=\"trait.Drop.html\">Drop</a></li><li><a href=\"trait.Fn.html\">Fn</a></li><li><a href=\"trait.FnMut.html\">FnMut</a></li><li><a href=\"trait.FnOnce.html\">FnOnce</a></li><li><a href=\"trait.FromResidual.html\">FromResidual</a></li><li><a href=\"trait.Index.html\">Index</a></li><li><a href=\"trait.IndexMut.html\">IndexMut</a></li><li><a href=\"trait.Mul.html\">Mul</a></li><li><a href=\"trait.MulAssign.html\">MulAssign</a></li><li><a href=\"trait.Neg.html\">Neg</a></li><li><a href=\"trait.Not.html\">Not</a></li><li><a href=\"trait.OneSidedRange.html\">OneSidedRange</a></li><li><a href=\"trait.RangeBounds.html\">RangeBounds</a></li><li><a href=\"trait.Rem.html\">Rem</a></li><li><a href=\"trait.RemAssign.html\">RemAssign</a></li><li><a href=\"trait.Residual.html\">Residual</a></li><li><a href=\"trait.Shl.html\">Shl</a></li><li><a href=\"trait.ShlAssign.html\">ShlAssign</a></li><li><a href=\"trait.Shr.html\">Shr</a></li><li><a href=\"trait.ShrAssign.html\">ShrAssign</a></li><li><a href=\"trait.Sub.html\">Sub</a></li><li><a href=\"trait.SubAssign.html\">SubAssign</a></li><li><a href=\"trait.Try.html\">Try</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‚ÄòS‚Äô or ‚Äò/‚Äô to search, ‚Äò?‚Äô for more options‚Ä¶\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Trait <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">ops</a>::<wbr><a class=\"trait\" href=\"#\">Try</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/try_trait.rs.html#131\">source</a> ¬∑ <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>‚àí</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub trait Try: <a class=\"trait\" href=\"trait.FromResidual.html\" title=\"trait std::ops::FromResidual\">FromResidual</a> {\n    type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a>;\n    type <a href=\"#associatedtype.Residual\" class=\"associatedtype\">Residual</a>;\n\n    // Required methods\n    fn <a href=\"#tymethod.from_output\" class=\"fn\">from_output</a>(output: Self::<a class=\"associatedtype\" href=\"trait.Try.html#associatedtype.Output\" title=\"type std::ops::Try::Output\">Output</a>) -&gt; Self;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.branch\" class=\"fn\">branch</a>(self) -&gt; <a class=\"enum\" href=\"enum.ControlFlow.html\" title=\"enum std::ops::ControlFlow\">ControlFlow</a>&lt;Self::<a class=\"associatedtype\" href=\"trait.Try.html#associatedtype.Residual\" title=\"type std::ops::Try::Residual\">Residual</a>, Self::<a class=\"associatedtype\" href=\"trait.Try.html#associatedtype.Output\" title=\"type std::ops::Try::Output\">Output</a>&gt;;\n}</code></pre><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/84277\">#84277</a>)</span></div></span><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>The <code>?</code> operator and <code>try {}</code> blocks.</p>\n<p><code>try_*</code> methods typically involve a type implementing this trait.  For\nexample, the closures passed to <a href=\"../iter/trait.Iterator.html#method.try_fold\" title=\"method std::iter::Iterator::try_fold\"><code>Iterator::try_fold</code></a> and\n<a href=\"../iter/trait.Iterator.html#method.try_for_each\" title=\"method std::iter::Iterator::try_for_each\"><code>Iterator::try_for_each</code></a> must return such a type.</p>\n<p><code>Try</code> types are typically those containing two or more categories of values,\nsome subset of which are so commonly handled via early returns that it‚Äôs\nworth providing a terse (but still visible) syntax to make that easy.</p>\n<p>This is most often seen for error handling with <a href=\"../result/enum.Result.html\" title=\"enum std::result::Result\"><code>Result</code></a> and <a href=\"../option/enum.Option.html\" title=\"enum std::option::Option\"><code>Option</code></a>.\nThe quintessential implementation of this trait is on <a href=\"enum.ControlFlow.html\" title=\"enum std::ops::ControlFlow\"><code>ControlFlow</code></a>.</p>\n<h2 id=\"using-try-in-generic-code\"><a class=\"doc-anchor\" href=\"#using-try-in-generic-code\">¬ß</a>Using <code>Try</code> in Generic Code</h2>\n<p><code>Iterator::try_fold</code> was stabilized to call back in Rust 1.27, but\nthis trait is much newer.  To illustrate the various associated types and\nmethods, let‚Äôs implement our own version.</p>\n<p>As a reminder, an infallible version of a fold looks something like this:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>simple_fold&lt;A, T&gt;(\n    iter: <span class=\"kw\">impl </span>Iterator&lt;Item = T&gt;,\n    <span class=\"kw-2\">mut </span>accum: A,\n    <span class=\"kw-2\">mut </span>f: <span class=\"kw\">impl </span>FnMut(A, T) -&gt; A,\n) -&gt; A {\n    <span class=\"kw\">for </span>x <span class=\"kw\">in </span>iter {\n        accum = f(accum, x);\n    }\n    accum\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++fn+simple_fold%3CA,+T%3E(%0A++++++++iter:+impl+Iterator%3CItem+=+T%3E,%0A++++++++mut+accum:+A,%0A++++++++mut+f:+impl+FnMut(A,+T)+-%3E+A,%0A++++)+-%3E+A+%7B%0A++++++++for+x+in+iter+%7B%0A++++++++++++accum+=+f(accum,+x);%0A++++++++%7D%0A++++++++accum%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<p>So instead of <code>f</code> returning just an <code>A</code>, we‚Äôll need it to return some other\ntype that produces an <code>A</code> in the ‚Äúdon‚Äôt short circuit‚Äù path.  Conveniently,\nthat‚Äôs also the type we need to return from the function.</p>\n<p>Let‚Äôs add a new generic parameter <code>R</code> for that type, and bound it to the\noutput type that we want:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>simple_try_fold_1&lt;A, T, R: Try&lt;Output = A&gt;&gt;(\n    iter: <span class=\"kw\">impl </span>Iterator&lt;Item = T&gt;,\n    <span class=\"kw-2\">mut </span>accum: A,\n    <span class=\"kw-2\">mut </span>f: <span class=\"kw\">impl </span>FnMut(A, T) -&gt; R,\n) -&gt; R {\n    <span class=\"macro\">todo!</span>()\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(try_trait_v2)%5D%0Afn+main()+%7B%0A++++use+std::ops::Try;%0A++++fn+simple_try_fold_1%3CA,+T,+R:+Try%3COutput+=+A%3E%3E(%0A++++++++iter:+impl+Iterator%3CItem+=+T%3E,%0A++++++++mut+accum:+A,%0A++++++++mut+f:+impl+FnMut(A,+T)+-%3E+R,%0A++++)+-%3E+R+%7B%0A++++++++todo!()%0A++++%7D%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<p>If we get through the entire iterator, we need to wrap up the accumulator\ninto the return type using <a href=\"trait.Try.html#tymethod.from_output\" title=\"associated function std::ops::Try::from_output\"><code>Try::from_output</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>simple_try_fold_2&lt;A, T, R: Try&lt;Output = A&gt;&gt;(\n    iter: <span class=\"kw\">impl </span>Iterator&lt;Item = T&gt;,\n    <span class=\"kw-2\">mut </span>accum: A,\n    <span class=\"kw-2\">mut </span>f: <span class=\"kw\">impl </span>FnMut(A, T) -&gt; R,\n) -&gt; R {\n    <span class=\"kw\">for </span>x <span class=\"kw\">in </span>iter {\n        <span class=\"kw\">let </span>cf = f(accum, x).branch();\n        <span class=\"kw\">match </span>cf {\n            ControlFlow::Continue(a) =&gt; accum = a,\n            ControlFlow::Break(<span class=\"kw\">_</span>) =&gt; <span class=\"macro\">todo!</span>(),\n        }\n    }\n    R::from_output(accum)\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(try_trait_v2)%5D%0Afn+main()+%7B%0A++++use+std::ops::%7BControlFlow,+Try%7D;%0A++++fn+simple_try_fold_2%3CA,+T,+R:+Try%3COutput+=+A%3E%3E(%0A++++++++iter:+impl+Iterator%3CItem+=+T%3E,%0A++++++++mut+accum:+A,%0A++++++++mut+f:+impl+FnMut(A,+T)+-%3E+R,%0A++++)+-%3E+R+%7B%0A++++++++for+x+in+iter+%7B%0A++++++++++++let+cf+=+f(accum,+x).branch();%0A++++++++++++match+cf+%7B%0A++++++++++++++++ControlFlow::Continue(a)+=%3E+accum+=+a,%0A++++++++++++++++ControlFlow::Break(_)+=%3E+todo!(),%0A++++++++++++%7D%0A++++++++%7D%0A++++++++R::from_output(accum)%0A++++%7D%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<p>We‚Äôll also need <a href=\"trait.FromResidual.html#tymethod.from_residual\" title=\"associated function std::ops::FromResidual::from_residual\"><code>FromResidual::from_residual</code></a> to turn the residual back\ninto the original type.  But because it‚Äôs a supertrait of <code>Try</code>, we don‚Äôt\nneed to mention it in the bounds.  All types which implement <code>Try</code> can be\nrecreated from their corresponding residual, so we‚Äôll just call it:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">pub fn </span>simple_try_fold_3&lt;A, T, R: Try&lt;Output = A&gt;&gt;(\n    iter: <span class=\"kw\">impl </span>Iterator&lt;Item = T&gt;,\n    <span class=\"kw-2\">mut </span>accum: A,\n    <span class=\"kw-2\">mut </span>f: <span class=\"kw\">impl </span>FnMut(A, T) -&gt; R,\n) -&gt; R {\n    <span class=\"kw\">for </span>x <span class=\"kw\">in </span>iter {\n        <span class=\"kw\">let </span>cf = f(accum, x).branch();\n        <span class=\"kw\">match </span>cf {\n            ControlFlow::Continue(a) =&gt; accum = a,\n            ControlFlow::Break(r) =&gt; <span class=\"kw\">return </span>R::from_residual(r),\n        }\n    }\n    R::from_output(accum)\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(try_trait_v2)%5D%0Afn+main()+%7B%0A++++use+std::ops::%7BControlFlow,+Try%7D;%0A++++pub+fn+simple_try_fold_3%3CA,+T,+R:+Try%3COutput+=+A%3E%3E(%0A++++++++iter:+impl+Iterator%3CItem+=+T%3E,%0A++++++++mut+accum:+A,%0A++++++++mut+f:+impl+FnMut(A,+T)+-%3E+R,%0A++++)+-%3E+R+%7B%0A++++++++for+x+in+iter+%7B%0A++++++++++++let+cf+=+f(accum,+x).branch();%0A++++++++++++match+cf+%7B%0A++++++++++++++++ControlFlow::Continue(a)+=%3E+accum+=+a,%0A++++++++++++++++ControlFlow::Break(r)+=%3E+return+R::from_residual(r),%0A++++++++++++%7D%0A++++++++%7D%0A++++++++R::from_output(accum)%0A++++%7D%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<p>But this ‚Äúcall <code>branch</code>, then <code>match</code> on it, and <code>return</code> if it was a\n<code>Break</code>‚Äù is exactly what happens inside the <code>?</code> operator.  So rather than\ndo all this manually, we can just use <code>?</code> instead:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>simple_try_fold&lt;A, T, R: Try&lt;Output = A&gt;&gt;(\n    iter: <span class=\"kw\">impl </span>Iterator&lt;Item = T&gt;,\n    <span class=\"kw-2\">mut </span>accum: A,\n    <span class=\"kw-2\">mut </span>f: <span class=\"kw\">impl </span>FnMut(A, T) -&gt; R,\n) -&gt; R {\n    <span class=\"kw\">for </span>x <span class=\"kw\">in </span>iter {\n        accum = f(accum, x)<span class=\"question-mark\">?</span>;\n    }\n    R::from_output(accum)\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(try_trait_v2)%5D%0Afn+main()+%7B%0A++++use+std::ops::Try;%0A++++fn+simple_try_fold%3CA,+T,+R:+Try%3COutput+=+A%3E%3E(%0A++++++++iter:+impl+Iterator%3CItem+=+T%3E,%0A++++++++mut+accum:+A,%0A++++++++mut+f:+impl+FnMut(A,+T)+-%3E+R,%0A++++)+-%3E+R+%7B%0A++++++++for+x+in+iter+%7B%0A++++++++++++accum+=+f(accum,+x)?;%0A++++++++%7D%0A++++++++R::from_output(accum)%0A++++%7D%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><h2 id=\"required-associated-types\" class=\"section-header\">Required Associated Types<a href=\"#required-associated-types\" class=\"anchor\">¬ß</a></h2><div class=\"methods\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/try_trait.rs.html#134\">source</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/84277\">#84277</a>)</span></div></span></summary><div class=\"docblock\"><p>The type of the value produced by <code>?</code> when <em>not</em> short-circuiting.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Residual\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/try_trait.rs.html#158\">source</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Residual\" class=\"associatedtype\">Residual</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/84277\">#84277</a>)</span></div></span></summary><div class=\"docblock\"><p>The type of the value passed to <a href=\"trait.FromResidual.html#tymethod.from_residual\" title=\"associated function std::ops::FromResidual::from_residual\"><code>FromResidual::from_residual</code></a>\nas part of <code>?</code> when short-circuiting.</p>\n<p>This represents the possible values of the <code>Self</code> type which are <em>not</em>\nrepresented by the <code>Output</code> type.</p>\n<h5 id=\"note-to-implementors\"><a class=\"doc-anchor\" href=\"#note-to-implementors\">¬ß</a>Note to Implementors</h5>\n<p>The choice of this type is critical to interconversion.\nUnlike the <code>Output</code> type, which will often be a raw generic type,\nthis type is typically a newtype of some sort to ‚Äúcolor‚Äù the type\nso that it‚Äôs distinguishable from the residuals of other types.</p>\n<p>This is why <code>Result&lt;T, E&gt;::Residual</code> is not <code>E</code>, but <code>Result&lt;Infallible, E&gt;</code>.\nThat way it‚Äôs distinct from <code>ControlFlow&lt;E&gt;::Residual</code>, for example,\nand thus <code>?</code> on <code>ControlFlow</code> cannot be used in a method returning <code>Result</code>.</p>\n<p>If you‚Äôre making a generic type <code>Foo&lt;T&gt;</code> that implements <code>Try&lt;Output = T&gt;</code>,\nthen typically you can use <code>Foo&lt;std::convert::Infallible&gt;</code> as its <code>Residual</code>\ntype: that type will have a ‚Äúhole‚Äù in the correct place, and will maintain the\n‚Äúfoo-ness‚Äù of the residual so other types need to opt-in to interconversion.</p>\n</div></details></div><h2 id=\"required-methods\" class=\"section-header\">Required Methods<a href=\"#required-methods\" class=\"anchor\">¬ß</a></h2><div class=\"methods\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.from_output\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/try_trait.rs.html#190\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from_output\" class=\"fn\">from_output</a>(output: Self::<a class=\"associatedtype\" href=\"trait.Try.html#associatedtype.Output\" title=\"type std::ops::Try::Output\">Output</a>) -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/84277\">#84277</a>)</span></div></span></summary><div class=\"docblock\"><p>Constructs the type from its <code>Output</code> type.</p>\n<p>This should be implemented consistently with the <code>branch</code> method\nsuch that applying the <code>?</code> operator will get back the original value:\n<code>Try::from_output(x).branch() --&gt; ControlFlow::Continue(x)</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(try_trait_v2)]\n</span><span class=\"kw\">use </span>std::ops::Try;\n\n<span class=\"macro\">assert_eq!</span>(&lt;<span class=\"prelude-ty\">Result</span>&lt;<span class=\"kw\">_</span>, String&gt; <span class=\"kw\">as </span>Try&gt;::from_output(<span class=\"number\">3</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(&lt;<span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw\">_</span>&gt; <span class=\"kw\">as </span>Try&gt;::from_output(<span class=\"number\">4</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>));\n<span class=\"macro\">assert_eq!</span>(\n    &lt;std::ops::ControlFlow&lt;String, <span class=\"kw\">_</span>&gt; <span class=\"kw\">as </span>Try&gt;::from_output(<span class=\"number\">5</span>),\n    std::ops::ControlFlow::Continue(<span class=\"number\">5</span>),\n);\n\n<span class=\"macro\">assert_eq!</span>(Option::from_output(<span class=\"number\">4</span>)<span class=\"question-mark\">?</span>, <span class=\"number\">4</span>);\n\n<span class=\"comment\">// This is used, for example, on the accumulator in `try_fold`:\n</span><span class=\"kw\">let </span>r = std::iter::empty().try_fold(<span class=\"number\">4</span>, |<span class=\"kw\">_</span>, ()| -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw\">_</span>&gt; { <span class=\"macro\">unreachable!</span>() });\n<span class=\"macro\">assert_eq!</span>(r, <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(try_trait_v2)%5D%0Afn+main()+%7B%0A++++use+std::ops::Try;%0A++++%0A++++assert_eq!(%3CResult%3C_,+String%3E+as+Try%3E::from_output(3),+Ok(3));%0A++++assert_eq!(%3COption%3C_%3E+as+Try%3E::from_output(4),+Some(4));%0A++++assert_eq!(%0A++++++++%3Cstd::ops::ControlFlow%3CString,+_%3E+as+Try%3E::from_output(5),%0A++++++++std::ops::ControlFlow::Continue(5),%0A++++);%0A++++%0A++++fn+make_question_mark_work()+-%3E+Option%3C()%3E+%7B%0A++++assert_eq!(Option::from_output(4)?,+4);%0A++++None+%7D%0A++++make_question_mark_work();%0A++++%0A++++//+This+is+used,+for+example,+on+the+accumulator+in+%60try_fold%60:%0A++++let+r+=+std::iter::empty().try_fold(4,+%7C_,+()%7C+-%3E+Option%3C_%3E+%7B+unreachable!()+%7D);%0A++++assert_eq!(r,+Some(4));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.branch\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/try_trait.rs.html#217\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.branch\" class=\"fn\">branch</a>(self) -&gt; <a class=\"enum\" href=\"enum.ControlFlow.html\" title=\"enum std::ops::ControlFlow\">ControlFlow</a>&lt;Self::<a class=\"associatedtype\" href=\"trait.Try.html#associatedtype.Residual\" title=\"type std::ops::Try::Residual\">Residual</a>, Self::<a class=\"associatedtype\" href=\"trait.Try.html#associatedtype.Output\" title=\"type std::ops::Try::Output\">Output</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/84277\">#84277</a>)</span></div></span></summary><div class=\"docblock\"><p>Used in <code>?</code> to decide whether the operator should produce a value\n(because this returned <a href=\"enum.ControlFlow.html#variant.Continue\" title=\"variant std::ops::ControlFlow::Continue\"><code>ControlFlow::Continue</code></a>)\nor propagate a value back to the caller\n(because this returned <a href=\"enum.ControlFlow.html#variant.Break\" title=\"variant std::ops::ControlFlow::Break\"><code>ControlFlow::Break</code></a>).</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(try_trait_v2)]\n</span><span class=\"kw\">use </span>std::ops::{ControlFlow, Try};\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Ok</span>::&lt;<span class=\"kw\">_</span>, String&gt;(<span class=\"number\">3</span>).branch(), ControlFlow::Continue(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Err</span>::&lt;String, <span class=\"kw\">_</span>&gt;(<span class=\"number\">3</span>).branch(), ControlFlow::Break(<span class=\"prelude-val\">Err</span>(<span class=\"number\">3</span>)));\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>).branch(), ControlFlow::Continue(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>::&lt;String&gt;.branch(), ControlFlow::Break(<span class=\"prelude-val\">None</span>));\n\n<span class=\"macro\">assert_eq!</span>(ControlFlow::&lt;String, <span class=\"kw\">_</span>&gt;::Continue(<span class=\"number\">3</span>).branch(), ControlFlow::Continue(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(\n    ControlFlow::&lt;<span class=\"kw\">_</span>, String&gt;::Break(<span class=\"number\">3</span>).branch(),\n    ControlFlow::Break(ControlFlow::Break(<span class=\"number\">3</span>)),\n);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(try_trait_v2)%5D%0Afn+main()+%7B%0A++++use+std::ops::%7BControlFlow,+Try%7D;%0A++++%0A++++assert_eq!(Ok::%3C_,+String%3E(3).branch(),+ControlFlow::Continue(3));%0A++++assert_eq!(Err::%3CString,+_%3E(3).branch(),+ControlFlow::Break(Err(3)));%0A++++%0A++++assert_eq!(Some(3).branch(),+ControlFlow::Continue(3));%0A++++assert_eq!(None::%3CString%3E.branch(),+ControlFlow::Break(None));%0A++++%0A++++assert_eq!(ControlFlow::%3CString,+_%3E::Continue(3).branch(),+ControlFlow::Continue(3));%0A++++assert_eq!(%0A++++++++ControlFlow::%3C_,+String%3E::Break(3).branch(),%0A++++++++ControlFlow::Break(ControlFlow::Break(3)),%0A++++);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details></div><h2 id=\"object-safety\" class=\"section-header\">Object Safety<a href=\"#object-safety\" class=\"anchor\">¬ß</a></h2><div class=\"object-safety-info\">This trait is <b>not</b> <a href=\"https://doc.rust-lang.org/1.80.0/reference/items/traits.html#object-safety\">object safe</a>.</div><h2 id=\"implementors\" class=\"section-header\">Implementors<a href=\"#implementors\" class=\"anchor\">¬ß</a></h2><div id=\"implementors-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Try-for-ControlFlow%3CB,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/control_flow.rs.html#100\">source</a><a href=\"#impl-Try-for-ControlFlow%3CB,+C%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;B, C&gt; <a class=\"trait\" href=\"trait.Try.html\" title=\"trait std::ops::Try\">Try</a> for <a class=\"enum\" href=\"enum.ControlFlow.html\" title=\"enum std::ops::ControlFlow\">ControlFlow</a>&lt;B, C&gt;</h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Output-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = C</h4></section><section id=\"associatedtype.Residual-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Residual-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Residual\" class=\"associatedtype\">Residual</a> = <a class=\"enum\" href=\"enum.ControlFlow.html\" title=\"enum std::ops::ControlFlow\">ControlFlow</a>&lt;B, <a class=\"enum\" href=\"../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a>&gt;</h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Try-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#2444\">source</a><a href=\"#impl-Try-for-Option%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.Try.html\" title=\"trait std::ops::Try\">Try</a> for <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Output-2\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = T</h4></section><section id=\"associatedtype.Residual-2\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Residual-2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Residual\" class=\"associatedtype\">Residual</a> = <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a>&gt;</h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Try-for-Result%3CT,+E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/result.rs.html#1965\">source</a><a href=\"#impl-Try-for-Result%3CT,+E%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, E&gt; <a class=\"trait\" href=\"trait.Try.html\" title=\"trait std::ops::Try\">Try</a> for <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, E&gt;</h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Output-3\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-3\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = T</h4></section><section id=\"associatedtype.Residual-3\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Residual-3\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Residual\" class=\"associatedtype\">Residual</a> = <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a>, E&gt;</h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Try-for-Poll%3COption%3CResult%3CT,+E%3E%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/poll.rs.html#261\">source</a><a href=\"#impl-Try-for-Poll%3COption%3CResult%3CT,+E%3E%3E%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, E&gt; <a class=\"trait\" href=\"trait.Try.html\" title=\"trait std::ops::Try\">Try</a> for <a class=\"enum\" href=\"../task/enum.Poll.html\" title=\"enum std::task::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, E&gt;&gt;&gt;</h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Output-4\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-4\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"enum\" href=\"../task/enum.Poll.html\" title=\"enum std::task::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;&gt;</h4></section><section id=\"associatedtype.Residual-4\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Residual-4\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Residual\" class=\"associatedtype\">Residual</a> = <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a>, E&gt;</h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Try-for-Poll%3CResult%3CT,+E%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/poll.rs.html#231\">source</a><a href=\"#impl-Try-for-Poll%3CResult%3CT,+E%3E%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, E&gt; <a class=\"trait\" href=\"trait.Try.html\" title=\"trait std::ops::Try\">Try</a> for <a class=\"enum\" href=\"../task/enum.Poll.html\" title=\"enum std::task::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, E&gt;&gt;</h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Output-5\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-5\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"enum\" href=\"../task/enum.Poll.html\" title=\"enum std::task::Poll\">Poll</a>&lt;T&gt;</h4></section><section id=\"associatedtype.Residual-5\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Residual-5\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Residual\" class=\"associatedtype\">Residual</a> = <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a>, E&gt;</h4></section></div></details></div><script src=\"../../trait.impl/core/ops/try_trait/trait.Try.js\" data-ignore-extern-crates=\"core\" async=\"\"></script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:12:39.676Z"
}