{
	"title": "copy_nonoverlapping in std::intrinsics - Rust",
	"url": "https://doc.rust-lang.org/stable/std/intrinsics/fn.copy_nonoverlapping.html",
	"markdown": "# copy\\_nonoverlapping in std::intrinsics - Rust\n\n```\npub unsafe fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize)\n```\n\nExpand description\n\nCopies `count * size_of::<T>()` bytes from `src` to `dst`. The source and destination must _not_ overlap.\n\nFor regions of memory which might overlap, use [`copy`](../ptr/fn.copy.html \"fn std::ptr::copy\") instead.\n\n`copy_nonoverlapping` is semantically equivalent to C’s [`memcpy`](https://en.cppreference.com/w/c/string/byte/memcpy), but with the argument order swapped.\n\nThe copy is “untyped” in the sense that data may be uninitialized or otherwise violate the requirements of `T`. The initialization state is preserved exactly.\n\n## [§](#safety)Safety\n\nBehavior is undefined if any of the following conditions are violated:\n\n-   `src` must be [valid](about:blank/ptr/index.html#safety \"mod std::ptr\") for reads of `count * size_of::<T>()` bytes.\n    \n-   `dst` must be [valid](about:blank/ptr/index.html#safety \"mod std::ptr\") for writes of `count * size_of::<T>()` bytes.\n    \n-   Both `src` and `dst` must be properly aligned.\n    \n-   The region of memory beginning at `src` with a size of `count * size_of::<T>()` bytes must _not_ overlap with the region of memory beginning at `dst` with the same size.\n    \n\nLike [`read`](../ptr/fn.read.html \"fn std::ptr::read\"), `copy_nonoverlapping` creates a bitwise copy of `T`, regardless of whether `T` is [`Copy`](../marker/trait.Copy.html \"trait std::marker::Copy\"). If `T` is not [`Copy`](../marker/trait.Copy.html \"trait std::marker::Copy\"), using _both_ the values in the region beginning at `*src` and the region beginning at `*dst` can [violate memory safety](about:blank/ptr/fn.read.html#ownership-of-the-returned-value \"fn std::ptr::read\").\n\nNote that even if the effectively copied size (`count * size_of::<T>()`) is `0`, the pointers must be non-null and properly aligned.\n\n## [§](#examples)Examples\n\nManually implement [`Vec::append`](about:blank/std/vec/struct.Vec.html#method.append):\n\n```\nuse std::ptr;\n\n/// Moves all the elements of `src` into `dst`, leaving `src` empty.\nfn append<T>(dst: &mut Vec<T>, src: &mut Vec<T>) {\n    let src_len = src.len();\n    let dst_len = dst.len();\n\n    // Ensure that `dst` has enough capacity to hold all of `src`.\n    dst.reserve(src_len);\n\n    unsafe {\n        // The call to add is always safe because `Vec` will never\n        // allocate more than `isize::MAX` bytes.\n        let dst_ptr = dst.as_mut_ptr().add(dst_len);\n        let src_ptr = src.as_ptr();\n\n        // Truncate `src` without dropping its contents. We do this first,\n        // to avoid problems in case something further down panics.\n        src.set_len(0);\n\n        // The two regions cannot overlap because mutable references do\n        // not alias, and two different vectors cannot own the same\n        // memory.\n        ptr::copy_nonoverlapping(src_ptr, dst_ptr, src_len);\n\n        // Notify `dst` that it now holds the contents of `src`.\n        dst.set_len(dst_len + src_len);\n    }\n}\n\nlet mut a = vec!['r'];\nlet mut b = vec!['u', 's', 't'];\n\nappend(&mut a, &mut b);\n\nassert_eq!(a, &['r', 'u', 's', 't']);\nassert!(b.is_empty());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ptr;%0A++++%0A++++///+Moves+all+the+elements+of+%60src%60+into+%60dst%60,+leaving+%60src%60+empty.%0A++++fn+append%3CT%3E(dst:+%26mut+Vec%3CT%3E,+src:+%26mut+Vec%3CT%3E)+%7B%0A++++++++let+src_len+=+src.len();%0A++++++++let+dst_len+=+dst.len();%0A++++%0A++++++++//+Ensure+that+%60dst%60+has+enough+capacity+to+hold+all+of+%60src%60.%0A++++++++dst.reserve(src_len);%0A++++%0A++++++++unsafe+%7B%0A++++++++++++//+The+call+to+add+is+always+safe+because+%60Vec%60+will+never%0A++++++++++++//+allocate+more+than+%60isize::MAX%60+bytes.%0A++++++++++++let+dst_ptr+=+dst.as_mut_ptr().add(dst_len);%0A++++++++++++let+src_ptr+=+src.as_ptr();%0A++++%0A++++++++++++//+Truncate+%60src%60+without+dropping+its+contents.+We+do+this+first,%0A++++++++++++//+to+avoid+problems+in+case+something+further+down+panics.%0A++++++++++++src.set_len(0);%0A++++%0A++++++++++++//+The+two+regions+cannot+overlap+because+mutable+references+do%0A++++++++++++//+not+alias,+and+two+different+vectors+cannot+own+the+same%0A++++++++++++//+memory.%0A++++++++++++ptr::copy_nonoverlapping(src_ptr,+dst_ptr,+src_len);%0A++++%0A++++++++++++//+Notify+%60dst%60+that+it+now+holds+the+contents+of+%60src%60.%0A++++++++++++dst.set_len(dst_len+%2B+src_len);%0A++++++++%7D%0A++++%7D%0A++++%0A++++let+mut+a+=+vec!%5B%27r%27%5D;%0A++++let+mut+b+=+vec!%5B%27u%27,+%27s%27,+%27t%27%5D;%0A++++%0A++++append(%26mut+a,+%26mut+b);%0A++++%0A++++assert_eq!(a,+%26%5B%27r%27,+%27u%27,+%27s%27,+%27t%27%5D);%0A++++assert!(b.is_empty());%0A%7D&edition=2021)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Copies `count * size_of::<T>()` bytes from `src` to `dst`. The source and destination must not overlap.\"><title>copy_nonoverlapping in std::intrinsics - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc fn\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><div class=\"sidebar-elems\"><h2><a href=\"index.html\">In std::intrinsics</a></h2><h3><a href=\"index.html#modules\">Modules</a></h3><ul class=\"block mod\"><li><a href=\"mir/index.html\">mir</a></li><li><a href=\"simd/index.html\">simd</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.AggregateRawPtr.html\">AggregateRawPtr</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.abort.html\">abort</a></li><li><a href=\"fn.add_with_overflow.html\">add_with_overflow</a></li><li><a href=\"fn.aggregate_raw_ptr.html\">aggregate_raw_ptr</a></li><li><a href=\"fn.arith_offset.html\">arith_offset</a></li><li><a href=\"fn.assert_inhabited.html\">assert_inhabited</a></li><li><a href=\"fn.assert_mem_uninitialized_valid.html\">assert_mem_uninitialized_valid</a></li><li><a href=\"fn.assert_zero_valid.html\">assert_zero_valid</a></li><li><a href=\"fn.assume.html\">assume</a></li><li><a href=\"fn.atomic_and_acqrel.html\">atomic_and_acqrel</a></li><li><a href=\"fn.atomic_and_acquire.html\">atomic_and_acquire</a></li><li><a href=\"fn.atomic_and_relaxed.html\">atomic_and_relaxed</a></li><li><a href=\"fn.atomic_and_release.html\">atomic_and_release</a></li><li><a href=\"fn.atomic_and_seqcst.html\">atomic_and_seqcst</a></li><li><a href=\"fn.atomic_cxchg_acqrel_acquire.html\">atomic_cxchg_acqrel_acquire</a></li><li><a href=\"fn.atomic_cxchg_acqrel_relaxed.html\">atomic_cxchg_acqrel_relaxed</a></li><li><a href=\"fn.atomic_cxchg_acqrel_seqcst.html\">atomic_cxchg_acqrel_seqcst</a></li><li><a href=\"fn.atomic_cxchg_acquire_acquire.html\">atomic_cxchg_acquire_acquire</a></li><li><a href=\"fn.atomic_cxchg_acquire_relaxed.html\">atomic_cxchg_acquire_relaxed</a></li><li><a href=\"fn.atomic_cxchg_acquire_seqcst.html\">atomic_cxchg_acquire_seqcst</a></li><li><a href=\"fn.atomic_cxchg_relaxed_acquire.html\">atomic_cxchg_relaxed_acquire</a></li><li><a href=\"fn.atomic_cxchg_relaxed_relaxed.html\">atomic_cxchg_relaxed_relaxed</a></li><li><a href=\"fn.atomic_cxchg_relaxed_seqcst.html\">atomic_cxchg_relaxed_seqcst</a></li><li><a href=\"fn.atomic_cxchg_release_acquire.html\">atomic_cxchg_release_acquire</a></li><li><a href=\"fn.atomic_cxchg_release_relaxed.html\">atomic_cxchg_release_relaxed</a></li><li><a href=\"fn.atomic_cxchg_release_seqcst.html\">atomic_cxchg_release_seqcst</a></li><li><a href=\"fn.atomic_cxchg_seqcst_acquire.html\">atomic_cxchg_seqcst_acquire</a></li><li><a href=\"fn.atomic_cxchg_seqcst_relaxed.html\">atomic_cxchg_seqcst_relaxed</a></li><li><a href=\"fn.atomic_cxchg_seqcst_seqcst.html\">atomic_cxchg_seqcst_seqcst</a></li><li><a href=\"fn.atomic_cxchgweak_acqrel_acquire.html\">atomic_cxchgweak_acqrel_acquire</a></li><li><a href=\"fn.atomic_cxchgweak_acqrel_relaxed.html\">atomic_cxchgweak_acqrel_relaxed</a></li><li><a href=\"fn.atomic_cxchgweak_acqrel_seqcst.html\">atomic_cxchgweak_acqrel_seqcst</a></li><li><a href=\"fn.atomic_cxchgweak_acquire_acquire.html\">atomic_cxchgweak_acquire_acquire</a></li><li><a href=\"fn.atomic_cxchgweak_acquire_relaxed.html\">atomic_cxchgweak_acquire_relaxed</a></li><li><a href=\"fn.atomic_cxchgweak_acquire_seqcst.html\">atomic_cxchgweak_acquire_seqcst</a></li><li><a href=\"fn.atomic_cxchgweak_relaxed_acquire.html\">atomic_cxchgweak_relaxed_acquire</a></li><li><a href=\"fn.atomic_cxchgweak_relaxed_relaxed.html\">atomic_cxchgweak_relaxed_relaxed</a></li><li><a href=\"fn.atomic_cxchgweak_relaxed_seqcst.html\">atomic_cxchgweak_relaxed_seqcst</a></li><li><a href=\"fn.atomic_cxchgweak_release_acquire.html\">atomic_cxchgweak_release_acquire</a></li><li><a href=\"fn.atomic_cxchgweak_release_relaxed.html\">atomic_cxchgweak_release_relaxed</a></li><li><a href=\"fn.atomic_cxchgweak_release_seqcst.html\">atomic_cxchgweak_release_seqcst</a></li><li><a href=\"fn.atomic_cxchgweak_seqcst_acquire.html\">atomic_cxchgweak_seqcst_acquire</a></li><li><a href=\"fn.atomic_cxchgweak_seqcst_relaxed.html\">atomic_cxchgweak_seqcst_relaxed</a></li><li><a href=\"fn.atomic_cxchgweak_seqcst_seqcst.html\">atomic_cxchgweak_seqcst_seqcst</a></li><li><a href=\"fn.atomic_fence_acqrel.html\">atomic_fence_acqrel</a></li><li><a href=\"fn.atomic_fence_acquire.html\">atomic_fence_acquire</a></li><li><a href=\"fn.atomic_fence_release.html\">atomic_fence_release</a></li><li><a href=\"fn.atomic_fence_seqcst.html\">atomic_fence_seqcst</a></li><li><a href=\"fn.atomic_load_acquire.html\">atomic_load_acquire</a></li><li><a href=\"fn.atomic_load_relaxed.html\">atomic_load_relaxed</a></li><li><a href=\"fn.atomic_load_seqcst.html\">atomic_load_seqcst</a></li><li><a href=\"fn.atomic_load_unordered.html\">atomic_load_unordered</a></li><li><a href=\"fn.atomic_max_acqrel.html\">atomic_max_acqrel</a></li><li><a href=\"fn.atomic_max_acquire.html\">atomic_max_acquire</a></li><li><a href=\"fn.atomic_max_relaxed.html\">atomic_max_relaxed</a></li><li><a href=\"fn.atomic_max_release.html\">atomic_max_release</a></li><li><a href=\"fn.atomic_max_seqcst.html\">atomic_max_seqcst</a></li><li><a href=\"fn.atomic_min_acqrel.html\">atomic_min_acqrel</a></li><li><a href=\"fn.atomic_min_acquire.html\">atomic_min_acquire</a></li><li><a href=\"fn.atomic_min_relaxed.html\">atomic_min_relaxed</a></li><li><a href=\"fn.atomic_min_release.html\">atomic_min_release</a></li><li><a href=\"fn.atomic_min_seqcst.html\">atomic_min_seqcst</a></li><li><a href=\"fn.atomic_nand_acqrel.html\">atomic_nand_acqrel</a></li><li><a href=\"fn.atomic_nand_acquire.html\">atomic_nand_acquire</a></li><li><a href=\"fn.atomic_nand_relaxed.html\">atomic_nand_relaxed</a></li><li><a href=\"fn.atomic_nand_release.html\">atomic_nand_release</a></li><li><a href=\"fn.atomic_nand_seqcst.html\">atomic_nand_seqcst</a></li><li><a href=\"fn.atomic_or_acqrel.html\">atomic_or_acqrel</a></li><li><a href=\"fn.atomic_or_acquire.html\">atomic_or_acquire</a></li><li><a href=\"fn.atomic_or_relaxed.html\">atomic_or_relaxed</a></li><li><a href=\"fn.atomic_or_release.html\">atomic_or_release</a></li><li><a href=\"fn.atomic_or_seqcst.html\">atomic_or_seqcst</a></li><li><a href=\"fn.atomic_singlethreadfence_acqrel.html\">atomic_singlethreadfence_acqrel</a></li><li><a href=\"fn.atomic_singlethreadfence_acquire.html\">atomic_singlethreadfence_acquire</a></li><li><a href=\"fn.atomic_singlethreadfence_release.html\">atomic_singlethreadfence_release</a></li><li><a href=\"fn.atomic_singlethreadfence_seqcst.html\">atomic_singlethreadfence_seqcst</a></li><li><a href=\"fn.atomic_store_relaxed.html\">atomic_store_relaxed</a></li><li><a href=\"fn.atomic_store_release.html\">atomic_store_release</a></li><li><a href=\"fn.atomic_store_seqcst.html\">atomic_store_seqcst</a></li><li><a href=\"fn.atomic_store_unordered.html\">atomic_store_unordered</a></li><li><a href=\"fn.atomic_umax_acqrel.html\">atomic_umax_acqrel</a></li><li><a href=\"fn.atomic_umax_acquire.html\">atomic_umax_acquire</a></li><li><a href=\"fn.atomic_umax_relaxed.html\">atomic_umax_relaxed</a></li><li><a href=\"fn.atomic_umax_release.html\">atomic_umax_release</a></li><li><a href=\"fn.atomic_umax_seqcst.html\">atomic_umax_seqcst</a></li><li><a href=\"fn.atomic_umin_acqrel.html\">atomic_umin_acqrel</a></li><li><a href=\"fn.atomic_umin_acquire.html\">atomic_umin_acquire</a></li><li><a href=\"fn.atomic_umin_relaxed.html\">atomic_umin_relaxed</a></li><li><a href=\"fn.atomic_umin_release.html\">atomic_umin_release</a></li><li><a href=\"fn.atomic_umin_seqcst.html\">atomic_umin_seqcst</a></li><li><a href=\"fn.atomic_xadd_acqrel.html\">atomic_xadd_acqrel</a></li><li><a href=\"fn.atomic_xadd_acquire.html\">atomic_xadd_acquire</a></li><li><a href=\"fn.atomic_xadd_relaxed.html\">atomic_xadd_relaxed</a></li><li><a href=\"fn.atomic_xadd_release.html\">atomic_xadd_release</a></li><li><a href=\"fn.atomic_xadd_seqcst.html\">atomic_xadd_seqcst</a></li><li><a href=\"fn.atomic_xchg_acqrel.html\">atomic_xchg_acqrel</a></li><li><a href=\"fn.atomic_xchg_acquire.html\">atomic_xchg_acquire</a></li><li><a href=\"fn.atomic_xchg_relaxed.html\">atomic_xchg_relaxed</a></li><li><a href=\"fn.atomic_xchg_release.html\">atomic_xchg_release</a></li><li><a href=\"fn.atomic_xchg_seqcst.html\">atomic_xchg_seqcst</a></li><li><a href=\"fn.atomic_xor_acqrel.html\">atomic_xor_acqrel</a></li><li><a href=\"fn.atomic_xor_acquire.html\">atomic_xor_acquire</a></li><li><a href=\"fn.atomic_xor_relaxed.html\">atomic_xor_relaxed</a></li><li><a href=\"fn.atomic_xor_release.html\">atomic_xor_release</a></li><li><a href=\"fn.atomic_xor_seqcst.html\">atomic_xor_seqcst</a></li><li><a href=\"fn.atomic_xsub_acqrel.html\">atomic_xsub_acqrel</a></li><li><a href=\"fn.atomic_xsub_acquire.html\">atomic_xsub_acquire</a></li><li><a href=\"fn.atomic_xsub_relaxed.html\">atomic_xsub_relaxed</a></li><li><a href=\"fn.atomic_xsub_release.html\">atomic_xsub_release</a></li><li><a href=\"fn.atomic_xsub_seqcst.html\">atomic_xsub_seqcst</a></li><li><a href=\"fn.bitreverse.html\">bitreverse</a></li><li><a href=\"fn.black_box.html\">black_box</a></li><li><a href=\"fn.breakpoint.html\">breakpoint</a></li><li><a href=\"fn.bswap.html\">bswap</a></li><li><a href=\"fn.caller_location.html\">caller_location</a></li><li><a href=\"fn.catch_unwind.html\">catch_unwind</a></li><li><a href=\"fn.ceilf32.html\">ceilf32</a></li><li><a href=\"fn.ceilf64.html\">ceilf64</a></li><li><a href=\"fn.compare_bytes.html\">compare_bytes</a></li><li><a href=\"fn.const_allocate.html\">const_allocate</a></li><li><a href=\"fn.const_deallocate.html\">const_deallocate</a></li><li><a href=\"fn.const_eval_select.html\">const_eval_select</a></li><li><a href=\"fn.copy.html\">copy</a></li><li><a href=\"fn.copy_nonoverlapping.html\">copy_nonoverlapping</a></li><li><a href=\"fn.copysignf32.html\">copysignf32</a></li><li><a href=\"fn.copysignf64.html\">copysignf64</a></li><li><a href=\"fn.cosf32.html\">cosf32</a></li><li><a href=\"fn.cosf64.html\">cosf64</a></li><li><a href=\"fn.ctlz.html\">ctlz</a></li><li><a href=\"fn.ctlz_nonzero.html\">ctlz_nonzero</a></li><li><a href=\"fn.ctpop.html\">ctpop</a></li><li><a href=\"fn.cttz.html\">cttz</a></li><li><a href=\"fn.cttz_nonzero.html\">cttz_nonzero</a></li><li><a href=\"fn.discriminant_value.html\">discriminant_value</a></li><li><a href=\"fn.drop_in_place.html\">drop_in_place</a></li><li><a href=\"fn.exact_div.html\">exact_div</a></li><li><a href=\"fn.exp2f32.html\">exp2f32</a></li><li><a href=\"fn.exp2f64.html\">exp2f64</a></li><li><a href=\"fn.expf32.html\">expf32</a></li><li><a href=\"fn.expf64.html\">expf64</a></li><li><a href=\"fn.fabsf32.html\">fabsf32</a></li><li><a href=\"fn.fabsf64.html\">fabsf64</a></li><li><a href=\"fn.fadd_algebraic.html\">fadd_algebraic</a></li><li><a href=\"fn.fadd_fast.html\">fadd_fast</a></li><li><a href=\"fn.fdiv_algebraic.html\">fdiv_algebraic</a></li><li><a href=\"fn.fdiv_fast.html\">fdiv_fast</a></li><li><a href=\"fn.float_to_int_unchecked.html\">float_to_int_unchecked</a></li><li><a href=\"fn.floorf32.html\">floorf32</a></li><li><a href=\"fn.floorf64.html\">floorf64</a></li><li><a href=\"fn.fmaf32.html\">fmaf32</a></li><li><a href=\"fn.fmaf64.html\">fmaf64</a></li><li><a href=\"fn.fmul_algebraic.html\">fmul_algebraic</a></li><li><a href=\"fn.fmul_fast.html\">fmul_fast</a></li><li><a href=\"fn.forget.html\">forget</a></li><li><a href=\"fn.frem_algebraic.html\">frem_algebraic</a></li><li><a href=\"fn.frem_fast.html\">frem_fast</a></li><li><a href=\"fn.fsub_algebraic.html\">fsub_algebraic</a></li><li><a href=\"fn.fsub_fast.html\">fsub_fast</a></li><li><a href=\"fn.is_val_statically_known.html\">is_val_statically_known</a></li><li><a href=\"fn.likely.html\">likely</a></li><li><a href=\"fn.log10f32.html\">log10f32</a></li><li><a href=\"fn.log10f64.html\">log10f64</a></li><li><a href=\"fn.log2f32.html\">log2f32</a></li><li><a href=\"fn.log2f64.html\">log2f64</a></li><li><a href=\"fn.logf32.html\">logf32</a></li><li><a href=\"fn.logf64.html\">logf64</a></li><li><a href=\"fn.maxnumf32.html\">maxnumf32</a></li><li><a href=\"fn.maxnumf64.html\">maxnumf64</a></li><li><a href=\"fn.min_align_of.html\">min_align_of</a></li><li><a href=\"fn.min_align_of_val.html\">min_align_of_val</a></li><li><a href=\"fn.minnumf32.html\">minnumf32</a></li><li><a href=\"fn.minnumf64.html\">minnumf64</a></li><li><a href=\"fn.mul_with_overflow.html\">mul_with_overflow</a></li><li><a href=\"fn.nearbyintf32.html\">nearbyintf32</a></li><li><a href=\"fn.nearbyintf64.html\">nearbyintf64</a></li><li><a href=\"fn.needs_drop.html\">needs_drop</a></li><li><a href=\"fn.nontemporal_store.html\">nontemporal_store</a></li><li><a href=\"fn.offset.html\">offset</a></li><li><a href=\"fn.powf32.html\">powf32</a></li><li><a href=\"fn.powf64.html\">powf64</a></li><li><a href=\"fn.powif128.html\">powif128</a></li><li><a href=\"fn.powif16.html\">powif16</a></li><li><a href=\"fn.powif32.html\">powif32</a></li><li><a href=\"fn.powif64.html\">powif64</a></li><li><a href=\"fn.pref_align_of.html\">pref_align_of</a></li><li><a href=\"fn.prefetch_read_data.html\">prefetch_read_data</a></li><li><a href=\"fn.prefetch_read_instruction.html\">prefetch_read_instruction</a></li><li><a href=\"fn.prefetch_write_data.html\">prefetch_write_data</a></li><li><a href=\"fn.prefetch_write_instruction.html\">prefetch_write_instruction</a></li><li><a href=\"fn.ptr_guaranteed_cmp.html\">ptr_guaranteed_cmp</a></li><li><a href=\"fn.ptr_mask.html\">ptr_mask</a></li><li><a href=\"fn.ptr_metadata.html\">ptr_metadata</a></li><li><a href=\"fn.ptr_offset_from.html\">ptr_offset_from</a></li><li><a href=\"fn.ptr_offset_from_unsigned.html\">ptr_offset_from_unsigned</a></li><li><a href=\"fn.raw_eq.html\">raw_eq</a></li><li><a href=\"fn.read_via_copy.html\">read_via_copy</a></li><li><a href=\"fn.rintf32.html\">rintf32</a></li><li><a href=\"fn.rintf64.html\">rintf64</a></li><li><a href=\"fn.rotate_left.html\">rotate_left</a></li><li><a href=\"fn.rotate_right.html\">rotate_right</a></li><li><a href=\"fn.roundevenf32.html\">roundevenf32</a></li><li><a href=\"fn.roundevenf64.html\">roundevenf64</a></li><li><a href=\"fn.roundf32.html\">roundf32</a></li><li><a href=\"fn.roundf64.html\">roundf64</a></li><li><a href=\"fn.rustc_peek.html\">rustc_peek</a></li><li><a href=\"fn.saturating_add.html\">saturating_add</a></li><li><a href=\"fn.saturating_sub.html\">saturating_sub</a></li><li><a href=\"fn.sinf32.html\">sinf32</a></li><li><a href=\"fn.sinf64.html\">sinf64</a></li><li><a href=\"fn.size_of.html\">size_of</a></li><li><a href=\"fn.size_of_val.html\">size_of_val</a></li><li><a href=\"fn.sqrtf32.html\">sqrtf32</a></li><li><a href=\"fn.sqrtf64.html\">sqrtf64</a></li><li><a href=\"fn.sub_with_overflow.html\">sub_with_overflow</a></li><li><a href=\"fn.three_way_compare.html\">three_way_compare</a></li><li><a href=\"fn.transmute.html\">transmute</a></li><li><a href=\"fn.transmute_unchecked.html\">transmute_unchecked</a></li><li><a href=\"fn.truncf32.html\">truncf32</a></li><li><a href=\"fn.truncf64.html\">truncf64</a></li><li><a href=\"fn.type_id.html\">type_id</a></li><li><a href=\"fn.type_name.html\">type_name</a></li><li><a href=\"fn.typed_swap.html\">typed_swap</a></li><li><a href=\"fn.ub_checks.html\">ub_checks</a></li><li><a href=\"fn.unaligned_volatile_load.html\">unaligned_volatile_load</a></li><li><a href=\"fn.unaligned_volatile_store.html\">unaligned_volatile_store</a></li><li><a href=\"fn.unchecked_add.html\">unchecked_add</a></li><li><a href=\"fn.unchecked_div.html\">unchecked_div</a></li><li><a href=\"fn.unchecked_mul.html\">unchecked_mul</a></li><li><a href=\"fn.unchecked_rem.html\">unchecked_rem</a></li><li><a href=\"fn.unchecked_shl.html\">unchecked_shl</a></li><li><a href=\"fn.unchecked_shr.html\">unchecked_shr</a></li><li><a href=\"fn.unchecked_sub.html\">unchecked_sub</a></li><li><a href=\"fn.unlikely.html\">unlikely</a></li><li><a href=\"fn.unreachable.html\">unreachable</a></li><li><a href=\"fn.variant_count.html\">variant_count</a></li><li><a href=\"fn.volatile_copy_memory.html\">volatile_copy_memory</a></li><li><a href=\"fn.volatile_copy_nonoverlapping_memory.html\">volatile_copy_nonoverlapping_memory</a></li><li><a href=\"fn.volatile_load.html\">volatile_load</a></li><li><a href=\"fn.volatile_set_memory.html\">volatile_set_memory</a></li><li><a href=\"fn.volatile_store.html\">volatile_store</a></li><li><a href=\"fn.vtable_align.html\">vtable_align</a></li><li><a href=\"fn.vtable_size.html\">vtable_size</a></li><li><a href=\"fn.wrapping_add.html\">wrapping_add</a></li><li><a href=\"fn.wrapping_mul.html\">wrapping_mul</a></li><li><a href=\"fn.wrapping_sub.html\">wrapping_sub</a></li><li><a href=\"fn.write_bytes.html\">write_bytes</a></li><li><a href=\"fn.write_via_move.html\">write_via_move</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Function <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">intrinsics</a>::<wbr><a class=\"fn\" href=\"#\">copy_nonoverlapping</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/80697\" title=\"Tracking issue for const_intrinsic_copy\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/intrinsics.rs.html#2934\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub unsafe fn copy_nonoverlapping&lt;T&gt;(src: <a class=\"primitive\" href=\"../primitive.pointer.html\">*const T</a>, dst: <a class=\"primitive\" href=\"../primitive.pointer.html\">*mut T</a>, count: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>)</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Copies <code>count * size_of::&lt;T&gt;()</code> bytes from <code>src</code> to <code>dst</code>. The source\nand destination must <em>not</em> overlap.</p>\n<p>For regions of memory which might overlap, use <a href=\"../ptr/fn.copy.html\" title=\"fn std::ptr::copy\"><code>copy</code></a> instead.</p>\n<p><code>copy_nonoverlapping</code> is semantically equivalent to C’s <a href=\"https://en.cppreference.com/w/c/string/byte/memcpy\"><code>memcpy</code></a>, but\nwith the argument order swapped.</p>\n<p>The copy is “untyped” in the sense that data may be uninitialized or otherwise violate the\nrequirements of <code>T</code>. The initialization state is preserved exactly.</p>\n<h2 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h2>\n<p>Behavior is undefined if any of the following conditions are violated:</p>\n<ul>\n<li>\n<p><code>src</code> must be <a href=\"../ptr/index.html#safety\" title=\"mod std::ptr\">valid</a> for reads of <code>count * size_of::&lt;T&gt;()</code> bytes.</p>\n</li>\n<li>\n<p><code>dst</code> must be <a href=\"../ptr/index.html#safety\" title=\"mod std::ptr\">valid</a> for writes of <code>count * size_of::&lt;T&gt;()</code> bytes.</p>\n</li>\n<li>\n<p>Both <code>src</code> and <code>dst</code> must be properly aligned.</p>\n</li>\n<li>\n<p>The region of memory beginning at <code>src</code> with a size of <code>count * size_of::&lt;T&gt;()</code> bytes must <em>not</em> overlap with the region of memory\nbeginning at <code>dst</code> with the same size.</p>\n</li>\n</ul>\n<p>Like <a href=\"../ptr/fn.read.html\" title=\"fn std::ptr::read\"><code>read</code></a>, <code>copy_nonoverlapping</code> creates a bitwise copy of <code>T</code>, regardless of\nwhether <code>T</code> is <a href=\"../marker/trait.Copy.html\" title=\"trait std::marker::Copy\"><code>Copy</code></a>. If <code>T</code> is not <a href=\"../marker/trait.Copy.html\" title=\"trait std::marker::Copy\"><code>Copy</code></a>, using <em>both</em> the values\nin the region beginning at <code>*src</code> and the region beginning at <code>*dst</code> can\n<a href=\"../ptr/fn.read.html#ownership-of-the-returned-value\" title=\"fn std::ptr::read\">violate memory safety</a>.</p>\n<p>Note that even if the effectively copied size (<code>count * size_of::&lt;T&gt;()</code>) is\n<code>0</code>, the pointers must be non-null and properly aligned.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<p>Manually implement <a href=\"../../std/vec/struct.Vec.html#method.append\"><code>Vec::append</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ptr;\n\n<span class=\"doccomment\">/// Moves all the elements of `src` into `dst`, leaving `src` empty.\n</span><span class=\"kw\">fn </span>append&lt;T&gt;(dst: <span class=\"kw-2\">&amp;mut </span>Vec&lt;T&gt;, src: <span class=\"kw-2\">&amp;mut </span>Vec&lt;T&gt;) {\n    <span class=\"kw\">let </span>src_len = src.len();\n    <span class=\"kw\">let </span>dst_len = dst.len();\n\n    <span class=\"comment\">// Ensure that `dst` has enough capacity to hold all of `src`.\n    </span>dst.reserve(src_len);\n\n    <span class=\"kw\">unsafe </span>{\n        <span class=\"comment\">// The call to add is always safe because `Vec` will never\n        // allocate more than `isize::MAX` bytes.\n        </span><span class=\"kw\">let </span>dst_ptr = dst.as_mut_ptr().add(dst_len);\n        <span class=\"kw\">let </span>src_ptr = src.as_ptr();\n\n        <span class=\"comment\">// Truncate `src` without dropping its contents. We do this first,\n        // to avoid problems in case something further down panics.\n        </span>src.set_len(<span class=\"number\">0</span>);\n\n        <span class=\"comment\">// The two regions cannot overlap because mutable references do\n        // not alias, and two different vectors cannot own the same\n        // memory.\n        </span>ptr::copy_nonoverlapping(src_ptr, dst_ptr, src_len);\n\n        <span class=\"comment\">// Notify `dst` that it now holds the contents of `src`.\n        </span>dst.set_len(dst_len + src_len);\n    }\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>a = <span class=\"macro\">vec!</span>[<span class=\"string\">'r'</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>b = <span class=\"macro\">vec!</span>[<span class=\"string\">'u'</span>, <span class=\"string\">'s'</span>, <span class=\"string\">'t'</span>];\n\nappend(<span class=\"kw-2\">&amp;mut </span>a, <span class=\"kw-2\">&amp;mut </span>b);\n\n<span class=\"macro\">assert_eq!</span>(a, <span class=\"kw-2\">&amp;</span>[<span class=\"string\">'r'</span>, <span class=\"string\">'u'</span>, <span class=\"string\">'s'</span>, <span class=\"string\">'t'</span>]);\n<span class=\"macro\">assert!</span>(b.is_empty());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ptr;%0A++++%0A++++///+Moves+all+the+elements+of+%60src%60+into+%60dst%60,+leaving+%60src%60+empty.%0A++++fn+append%3CT%3E(dst:+%26mut+Vec%3CT%3E,+src:+%26mut+Vec%3CT%3E)+%7B%0A++++++++let+src_len+=+src.len();%0A++++++++let+dst_len+=+dst.len();%0A++++%0A++++++++//+Ensure+that+%60dst%60+has+enough+capacity+to+hold+all+of+%60src%60.%0A++++++++dst.reserve(src_len);%0A++++%0A++++++++unsafe+%7B%0A++++++++++++//+The+call+to+add+is+always+safe+because+%60Vec%60+will+never%0A++++++++++++//+allocate+more+than+%60isize::MAX%60+bytes.%0A++++++++++++let+dst_ptr+=+dst.as_mut_ptr().add(dst_len);%0A++++++++++++let+src_ptr+=+src.as_ptr();%0A++++%0A++++++++++++//+Truncate+%60src%60+without+dropping+its+contents.+We+do+this+first,%0A++++++++++++//+to+avoid+problems+in+case+something+further+down+panics.%0A++++++++++++src.set_len(0);%0A++++%0A++++++++++++//+The+two+regions+cannot+overlap+because+mutable+references+do%0A++++++++++++//+not+alias,+and+two+different+vectors+cannot+own+the+same%0A++++++++++++//+memory.%0A++++++++++++ptr::copy_nonoverlapping(src_ptr,+dst_ptr,+src_len);%0A++++%0A++++++++++++//+Notify+%60dst%60+that+it+now+holds+the+contents+of+%60src%60.%0A++++++++++++dst.set_len(dst_len+%2B+src_len);%0A++++++++%7D%0A++++%7D%0A++++%0A++++let+mut+a+=+vec!%5B'r'%5D;%0A++++let+mut+b+=+vec!%5B'u',+'s',+'t'%5D;%0A++++%0A++++append(%26mut+a,+%26mut+b);%0A++++%0A++++assert_eq!(a,+%26%5B'r',+'u',+'s',+'t'%5D);%0A++++assert!(b.is_empty());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:23:19.736Z"
}