{
	"title": "How to write documentation - The rustdoc book",
	"url": "https://doc.rust-lang.org/rustdoc/how-to-write-documentation.html",
	"markdown": "# How to write documentation - The rustdoc book\n\nGood documentation is not natural. There are opposing goals that make writing good documentation difficult. It requires expertise in the subject but also writing to a novice perspective. Documentation therefore often glazes over implementation detail, or leaves readers with unanswered questions.\n\nThere are a few tenets to Rust documentation that can help guide anyone through the process of documenting libraries so that everyone has an ample opportunity to use the code.\n\nThis chapter covers not only how to write documentation but specifically how to write **good** documentation. It is important to be as clear as you can, and as complete as possible. As a rule of thumb: the more documentation you write for your crate the better. If an item is public then it should be documented.\n\n## [Getting Started](#getting-started)\n\nDocumenting a crate should begin with front-page documentation. As an example, the [`hashbrown`](https://docs.rs/hashbrown/0.8.2/hashbrown/) crate level documentation summarizes the role of the crate, provides links to explain technical details, and explains why you would want to use the crate.\n\nAfter introducing the crate, it is important that the front-page gives an example of how to use the crate in a real world setting. Stick to the library's role in the example, but do so without shortcuts to benefit users who may copy and paste the example to get started.\n\n[`futures`](https://docs.rs/futures/0.3.5/futures/) uses inline comments to explain line by line the complexities of using a [`Future`](https://doc.rust-lang.org/std/future/trait.Future.html), because a person's first exposure to rust's [`Future`](https://doc.rust-lang.org/std/future/trait.Future.html) may be this example.\n\nThe [`backtrace`](https://docs.rs/backtrace/0.3.50/backtrace/) documentation walks through the whole process, explaining changes made to the `Cargo.toml` file, passing command line arguments to the compiler, and shows a quick example of backtrace in the wild.\n\nFinally, the front-page can eventually become a comprehensive reference how to use a crate, like [`regex`](https://docs.rs/regex/1.3.9/regex/). In this front page, all requirements are outlined, the edge cases shown, and practical examples provided. The front page goes on to show how to use regular expressions then concludes with crate features.\n\nDon't worry about comparing your crate, which is just beginning, to other more developed crates. To get the documentation to something more polished, start incrementally and put in an introduction, example, and features. Rome was not built in a day!\n\nThe first lines within the `lib.rs` will compose the front-page, and they use a different convention than the rest of the rustdocs. Lines should start with `//!` which indicate module-level or crate-level documentation. Here's a quick example of the difference:\n\n```rust\n#![allow(unused)]\nfn main() {\n//! Fast and easy queue abstraction.\n//!\n//! Provides an abstraction over a queue.  When the abstraction is used\n//! there are these advantages:\n//! - Fast\n//! - [`Easy`]\n//!\n//! [`Easy`]: http://thatwaseasy.example.com\n\n/// This module makes it easy.\npub mod easy {\n\n    /// Use the abstraction function to do this specific thing.\n    pub fn abstraction() {}\n\n}\n}\n```\n\nIdeally, this first line of documentation is a sentence without highly technical details, but with a good description of where this crate fits within the rust ecosystem. Users should know whether this crate meets their use case after reading this line.\n\n## [Documenting components](#documenting-components)\n\nWhether it is modules, structs, functions, or macros: the public API of all code should have documentation. Rarely does anyone complain about too much documentation!\n\nIt is recommended that each item's documentation follows this basic structure:\n\n```text\n[short sentence explaining what it is]\n\n[more detailed explanation]\n\n[at least one code example that users can copy/paste to try it]\n\n[even more advanced explanations if necessary]\n\n```\n\nThis basic structure should be straightforward to follow when writing your documentation; while you might think that a code example is trivial, the examples are really important because they can help users understand what an item is, how it is used, and for what purpose it exists.\n\nLet's see an example coming from the [standard library](https://doc.rust-lang.org/stable/std/index.html) by taking a look at the [`std::env::args()`](https://doc.rust-lang.org/stable/std/env/fn.args.html) function:\n\n```markdown\nReturns the arguments which this program was started with (normally passed\nvia the command line).\n\nThe first element is traditionally the path of the executable, but it can be\nset to arbitrary text, and may not even exist. This means this property should\nnot be relied upon for security purposes.\n\nOn Unix systems shell usually expands unquoted arguments with glob patterns\n(such as `*` and `?`). On Windows this is not done, and such arguments are\npassed as-is.\n\n# Panics\n\nThe returned iterator will panic during iteration if any argument to the\nprocess is not valid unicode. If this is not desired,\nuse the [`args_os`] function instead.\n\n# Examples\n\n```\nuse std::env;\n\n// Prints each argument on a separate line\nfor argument in env::args() {\n    println!(\"{argument}\");\n}\n```\n\n[`args_os`]: ./fn.args_os.html\n\n```\n\nEverything before the first empty line will be reused to describe the component in searches and module overviews. For example, the function `std::env::args()` above will be shown on the [`std::env`](https://doc.rust-lang.org/stable/std/env/index.html#functions) module documentation. It is good practice to keep the summary to one line: concise writing is a goal of good documentation.\n\nBecause the type system does a good job of defining what types a function passes and returns, there is no benefit of explicitly writing it into the documentation, especially since `rustdoc` adds hyper links to all types in the function signature.\n\nIn the example above, a 'Panics' section explains when the code might abruptly exit, which can help the reader prevent reaching a panic. A panic section is recommended every time edge cases in your code can be reached if known.\n\nAs you can see, it follows the structure detailed above: it starts with a short sentence explaining what the functions does, then it provides more information and finally provides a code example.\n\n## [Markdown](#markdown)\n\n`rustdoc` uses the [CommonMark Markdown specification](https://commonmark.org/). You might be interested in taking a look at their website to see what's possible:\n\n-   [CommonMark quick reference](https://commonmark.org/help/)\n-   [current spec](https://spec.commonmark.org/current/)\n\nIn addition to the standard CommonMark syntax, `rustdoc` supports several extensions:\n\n### [Strikethrough](#strikethrough)\n\nText may be rendered with a horizontal line through the center by wrapping the text with one or two tilde characters on each side:\n\n```text\nAn example of ~~strikethrough text~~. You can also use ~single tildes~.\n\n```\n\nThis example will render as:\n\n> An example of ~strikethrough text~. You can also use ~single tildes~.\n\nThis follows the [GitHub Strikethrough extension](https://github.github.com/gfm/#strikethrough-extension-).\n\n### [Footnotes](#footnotes)\n\nA footnote generates a small numbered link in the text which when clicked takes the reader to the footnote text at the bottom of the item. The footnote label is written similarly to a link reference with a caret at the front. The footnote text is written like a link reference definition, with the text following the label. Example:\n\n```text\nThis is an example of a footnote[^note].\n\n[^note]: This text is the contents of the footnote, which will be rendered\n    towards the bottom.\n\n```\n\nThis example will render as:\n\n> This is an example of a footnote[1](#note).\n\nThe footnotes are automatically numbered based on the order the footnotes are written.\n\n### [Tables](#tables)\n\nTables can be written using pipes and dashes to draw the rows and columns of the table. These will be translated to HTML table matching the shape. Example:\n\n```text\n| Header1 | Header2 |\n|---------|---------|\n| abc     | def     |\n\n```\n\nThis example will render similarly to this:\n\nSee the specification for the [GitHub Tables extension](https://github.github.com/gfm/#tables-extension-) for more details on the exact syntax supported.\n\n### [Task lists](#task-lists)\n\nTask lists can be used as a checklist of items that have been completed. Example:\n\n```md\n- [x] Complete task\n- [ ] Incomplete task\n\n```\n\nThis will render as:\n\n> -   Complete task\n> -   Incomplete task\n\nSee the specification for the [task list extension](https://github.github.com/gfm/#task-list-items-extension-) for more details.\n\n### [Smart punctuation](#smart-punctuation)\n\nSome ASCII punctuation sequences will be automatically turned into fancy Unicode characters:\n\n| ASCII sequence | Unicode |\n| --- | --- |\n| `--` | – |\n| `---` | — |\n| `...` | … |\n| `\"` | “ or ”, depending on context |\n| `'` | ‘ or ’, depending on context |\n\nSo, no need to manually enter those Unicode characters!\n\n### [Adding a warning block](#adding-a-warning-block)\n\nIf you want to make a warning or similar note stand out in the documentation, you can wrap it like this:\n\n```md\n/// documentation\n///\n/// <div class=\"warning\">A big warning!</div>\n///\n/// more documentation\n\n```\n\nPlease note that if you want to put markdown in the HTML tag and for it to be interpreted as such, you need to have an empty line between the HTML tags and your markdown content. For example if you want to use a link:\n\n```md\n/// documentation\n///\n/// <div class=\"warning\">\n///\n/// Go to [this link](https://rust-lang.org)!\n///\n/// </div>\n///\n/// more documentation\n\n```",
	"html": "<!DOCTYPE html><html lang=\"en\" class=\"light\" dir=\"ltr\"><head>\n        <!-- Book generated using mdBook -->\n        <meta charset=\"UTF-8\">\n        <title>How to write documentation - The rustdoc book</title>\n\n\n        <!-- Custom HTML head -->\n        \n        <meta name=\"description\" content=\"\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <meta name=\"theme-color\" content=\"rgb(255, 255, 255)\">\n\n        <link rel=\"icon\" href=\"favicon.svg\">\n        <link rel=\"shortcut icon\" href=\"favicon.png\">\n        <link rel=\"stylesheet\" href=\"css/variables.css\">\n        <link rel=\"stylesheet\" href=\"css/general.css\">\n        <link rel=\"stylesheet\" href=\"css/chrome.css\">\n        <link rel=\"stylesheet\" href=\"css/print.css\" media=\"print\">\n\n        <!-- Fonts -->\n        <link rel=\"stylesheet\" href=\"FontAwesome/css/font-awesome.css\">\n        <link rel=\"stylesheet\" href=\"fonts/fonts.css\">\n\n        <!-- Highlight.js Stylesheets -->\n        <link rel=\"stylesheet\" href=\"highlight.css\">\n        <link rel=\"stylesheet\" href=\"tomorrow-night.css\" disabled=\"\">\n        <link rel=\"stylesheet\" href=\"ayu-highlight.css\" disabled=\"\">\n\n        <!-- Custom theme stylesheets -->\n\n    </head>\n    <body class=\"js sidebar-visible\">\n    <div id=\"body-container\">\n        <!-- Provide site root to javascript -->\n        <script>\n            var path_to_root = \"\";\n            var default_theme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"navy\" : \"light\";\n        </script>\n\n        <!-- Work around some values being stored in localStorage wrapped in quotes -->\n        <script>\n            try {\n                var theme = localStorage.getItem('mdbook-theme');\n                var sidebar = localStorage.getItem('mdbook-sidebar');\n\n                if (theme.startsWith('\"') && theme.endsWith('\"')) {\n                    localStorage.setItem('mdbook-theme', theme.slice(1, theme.length - 1));\n                }\n\n                if (sidebar.startsWith('\"') && sidebar.endsWith('\"')) {\n                    localStorage.setItem('mdbook-sidebar', sidebar.slice(1, sidebar.length - 1));\n                }\n            } catch (e) { }\n        </script>\n\n        <!-- Set the theme before any content is loaded, prevents flash -->\n        <script>\n            var theme;\n            try { theme = localStorage.getItem('mdbook-theme'); } catch(e) { }\n            if (theme === null || theme === undefined) { theme = default_theme; }\n            var html = document.querySelector('html');\n            html.classList.remove('light')\n            html.classList.add(theme);\n            var body = document.querySelector('body');\n            body.classList.remove('no-js')\n            body.classList.add('js');\n        </script>\n\n        <input type=\"checkbox\" id=\"sidebar-toggle-anchor\" class=\"hidden\">\n\n        <!-- Hide / unhide sidebar before it is displayed -->\n        <script>\n            var body = document.querySelector('body');\n            var sidebar = null;\n            var sidebar_toggle = document.getElementById(\"sidebar-toggle-anchor\");\n            if (document.body.clientWidth >= 1080) {\n                try { sidebar = localStorage.getItem('mdbook-sidebar'); } catch(e) { }\n                sidebar = sidebar || 'visible';\n            } else {\n                sidebar = 'hidden';\n            }\n            sidebar_toggle.checked = sidebar === 'visible';\n            body.classList.remove('sidebar-visible');\n            body.classList.add(\"sidebar-\" + sidebar);\n        </script>\n\n        <nav id=\"sidebar\" class=\"sidebar\" aria-label=\"Table of contents\" aria-hidden=\"false\">\n            <div class=\"sidebar-scrollbox\">\n                <ol class=\"chapter\"><li class=\"chapter-item expanded \"><a href=\"what-is-rustdoc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.</strong> What is rustdoc?</a></li><li class=\"chapter-item expanded \"><a href=\"command-line-arguments.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.</strong> Command-line arguments</a></li><li class=\"chapter-item expanded \"><a href=\"how-to-read-rustdoc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.</strong> How to read rustdoc output</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"read-documentation/in-doc-settings.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.1.</strong> In-doc settings</a></li><li class=\"chapter-item expanded \"><a href=\"read-documentation/search.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.2.</strong> Search</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"how-to-write-documentation.html\" class=\"active\" tabindex=\"0\"><strong aria-hidden=\"true\">4.</strong> How to write documentation</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"write-documentation/what-to-include.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.</strong> What to include (and exclude)</a></li><li class=\"chapter-item expanded \"><a href=\"write-documentation/the-doc-attribute.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.</strong> The #[doc] attribute</a></li><li class=\"chapter-item expanded \"><a href=\"write-documentation/re-exports.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.</strong> Re-exports</a></li><li class=\"chapter-item expanded \"><a href=\"write-documentation/linking-to-items-by-name.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.</strong> Linking to items by name</a></li><li class=\"chapter-item expanded \"><a href=\"write-documentation/documentation-tests.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.</strong> Documentation tests</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"lints.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.</strong> Rustdoc-specific lints</a></li><li class=\"chapter-item expanded \"><a href=\"scraped-examples.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.</strong> Scraped examples</a></li><li class=\"chapter-item expanded \"><a href=\"advanced-features.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.</strong> Advanced features</a></li><li class=\"chapter-item expanded \"><a href=\"unstable-features.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.</strong> Unstable features</a></li><li class=\"chapter-item expanded \"><a href=\"deprecated-features.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.</strong> Deprecated features</a></li><li class=\"chapter-item expanded \"><a href=\"references.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.</strong> References</a></li></ol>\n            </div>\n            <div id=\"sidebar-resize-handle\" class=\"sidebar-resize-handle\">\n                <div class=\"sidebar-resize-indicator\"></div>\n            </div>\n        </nav>\n\n        <!-- Track and set sidebar scroll position -->\n        <script>\n            var sidebarScrollbox = document.querySelector('#sidebar .sidebar-scrollbox');\n            sidebarScrollbox.addEventListener('click', function(e) {\n                if (e.target.tagName === 'A') {\n                    sessionStorage.setItem('sidebar-scroll', sidebarScrollbox.scrollTop);\n                }\n            }, { passive: true });\n            var sidebarScrollTop = sessionStorage.getItem('sidebar-scroll');\n            sessionStorage.removeItem('sidebar-scroll');\n            if (sidebarScrollTop) {\n                // preserve sidebar scroll position when navigating via links within sidebar\n                sidebarScrollbox.scrollTop = sidebarScrollTop;\n            } else {\n                // scroll sidebar to current active section when navigating via \"next/previous chapter\" buttons\n                var activeSection = document.querySelector('#sidebar .active');\n                if (activeSection) {\n                    activeSection.scrollIntoView({ block: 'center' });\n                }\n            }\n        </script>\n\n        <div id=\"page-wrapper\" class=\"page-wrapper\">\n\n            <div class=\"page\">\n                                <div id=\"menu-bar-hover-placeholder\"></div>\n                <div id=\"menu-bar\" class=\"menu-bar\" style=\"top: 0px;\">\n                    <div class=\"left-buttons\">\n                        <label id=\"sidebar-toggle\" class=\"icon-button\" for=\"sidebar-toggle-anchor\" title=\"Toggle Table of Contents\" aria-label=\"Toggle Table of Contents\" aria-controls=\"sidebar\" aria-expanded=\"true\">\n                            <i class=\"fa fa-bars\"></i>\n                        </label>\n                        <button id=\"theme-toggle\" class=\"icon-button\" type=\"button\" title=\"Change theme\" aria-label=\"Change theme\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-controls=\"theme-list\">\n                            <i class=\"fa fa-paint-brush\"></i>\n                        </button>\n                        <ul id=\"theme-list\" class=\"theme-popup\" aria-label=\"Themes\" role=\"menu\">\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme theme-selected\" id=\"light\">Light</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"rust\">Rust</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"coal\">Coal</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"navy\">Navy</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"ayu\">Ayu</button></li>\n                        </ul>\n                        <button id=\"search-toggle\" class=\"icon-button\" type=\"button\" title=\"Search. (Shortkey: s)\" aria-label=\"Toggle Searchbar\" aria-expanded=\"false\" aria-keyshortcuts=\"S\" aria-controls=\"searchbar\">\n                            <i class=\"fa fa-search\"></i>\n                        </button>\n                    </div>\n\n                    <h1 class=\"menu-title\">The rustdoc book</h1>\n\n                    <div class=\"right-buttons\">\n                        <a href=\"print.html\" title=\"Print this book\" aria-label=\"Print this book\">\n                            <i id=\"print-button\" class=\"fa fa-print\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/rust/tree/master/src/doc/rustdoc\" title=\"Git repository\" aria-label=\"Git repository\">\n                            <i id=\"git-repository-button\" class=\"fa fa-github\"></i>\n                        </a>\n\n                    </div>\n                </div>\n\n                <div id=\"search-wrapper\" class=\"hidden\">\n                    <form id=\"searchbar-outer\" class=\"searchbar-outer\">\n                        <input type=\"search\" id=\"searchbar\" name=\"searchbar\" placeholder=\"Search this book ...\" aria-controls=\"searchresults-outer\" aria-describedby=\"searchresults-header\">\n                    </form>\n                    <div id=\"searchresults-outer\" class=\"searchresults-outer hidden\">\n                        <div id=\"searchresults-header\" class=\"searchresults-header\"></div>\n                        <ul id=\"searchresults\">\n                        </ul>\n                    </div>\n                </div>\n\n                <!-- Apply ARIA attributes after the sidebar and the sidebar toggle button are added to the DOM -->\n                <script>\n                    document.getElementById('sidebar-toggle').setAttribute('aria-expanded', sidebar === 'visible');\n                    document.getElementById('sidebar').setAttribute('aria-hidden', sidebar !== 'visible');\n                    Array.from(document.querySelectorAll('#sidebar a')).forEach(function(link) {\n                        link.setAttribute('tabIndex', sidebar === 'visible' ? 0 : -1);\n                    });\n                </script>\n\n                <div id=\"content\" class=\"content\">\n                    <main>\n                        <h1 id=\"how-to-write-documentation\"><a class=\"header\" href=\"#how-to-write-documentation\">How to write documentation</a></h1>\n<p>Good documentation is not natural.  There are opposing goals that make writing\ngood documentation difficult.  It requires expertise in the subject but also\nwriting to a novice perspective.  Documentation therefore often glazes over\nimplementation detail, or leaves readers with unanswered questions.</p>\n<p>There are a few tenets to Rust documentation that can help guide anyone through\nthe process of documenting libraries so that everyone has an ample opportunity\nto use the code.</p>\n<p>This chapter covers not only how to write documentation but specifically\nhow to write <strong>good</strong> documentation.  It is important to be as clear\nas you can, and as complete as possible.  As a rule of thumb: the more\ndocumentation you write for your crate the better.  If an item is public\nthen it should be documented.</p>\n<h2 id=\"getting-started\"><a class=\"header\" href=\"#getting-started\">Getting Started</a></h2>\n<p>Documenting a crate should begin with front-page documentation.  As an\nexample, the <a href=\"https://docs.rs/hashbrown/0.8.2/hashbrown/\"><code class=\"hljs\">hashbrown</code></a> crate level documentation summarizes the role of\nthe crate, provides links to explain technical details, and explains why you\nwould want to use the crate.</p>\n<p>After introducing the crate, it is important that the front-page gives\nan example of how to use the crate in a real world setting.  Stick to the\nlibrary's role in the example, but do so without shortcuts to benefit users who\nmay copy and paste the example to get started.</p>\n<p><a href=\"https://docs.rs/futures/0.3.5/futures/\"><code class=\"hljs\">futures</code></a> uses inline comments to explain line by line\nthe complexities of using a <a href=\"https://doc.rust-lang.org/std/future/trait.Future.html\"><code class=\"hljs\">Future</code></a>, because a person's first exposure to\nrust's <a href=\"https://doc.rust-lang.org/std/future/trait.Future.html\"><code class=\"hljs\">Future</code></a> may be this example.</p>\n<p>The <a href=\"https://docs.rs/backtrace/0.3.50/backtrace/\"><code class=\"hljs\">backtrace</code></a> documentation walks through the whole process, explaining\nchanges made to the <code class=\"hljs\">Cargo.toml</code> file, passing command line arguments to the\ncompiler, and shows a quick example of backtrace in the wild.</p>\n<p>Finally, the front-page can eventually become a comprehensive reference\nhow to use a crate, like <a href=\"https://docs.rs/regex/1.3.9/regex/\"><code class=\"hljs\">regex</code></a>.  In this front page, all\nrequirements are outlined, the edge cases shown, and practical examples\nprovided.  The front page goes on to show how to use regular expressions\nthen concludes with crate features.</p>\n<p>Don't worry about comparing your crate, which is just beginning, to other more\ndeveloped crates.  To get the documentation to something more polished, start\nincrementally and put in an introduction, example, and features.  Rome was not\nbuilt in a day!</p>\n<p>The first lines within the <code class=\"hljs\">lib.rs</code> will compose the front-page, and they\nuse a different convention than the rest of the rustdocs.  Lines should\nstart with <code class=\"hljs\">//!</code> which indicate module-level or crate-level documentation.\nHere's a quick example of the difference:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust no_run hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">//! Fast and easy queue abstraction.</span>\n<span class=\"hljs-comment\">//!</span>\n<span class=\"hljs-comment\">//! Provides an abstraction over a queue.  When the abstraction is used</span>\n<span class=\"hljs-comment\">//! there are these advantages:</span>\n<span class=\"hljs-comment\">//! - Fast</span>\n<span class=\"hljs-comment\">//! - [`Easy`]</span>\n<span class=\"hljs-comment\">//!</span>\n<span class=\"hljs-comment\">//! [`Easy`]: http://thatwaseasy.example.com</span>\n\n<span class=\"hljs-comment\">/// This module makes it easy.</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">mod</span> easy {\n\n    <span class=\"hljs-comment\">/// Use the abstraction function to do this specific thing.</span>\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">abstraction</span></span>() {}\n\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Ideally, this first line of documentation is a sentence without highly\ntechnical details, but with a good description of where this crate fits\nwithin the rust ecosystem.  Users should know whether this crate meets their use\ncase after reading this line.</p>\n<h2 id=\"documenting-components\"><a class=\"header\" href=\"#documenting-components\">Documenting components</a></h2>\n<p>Whether it is modules, structs, functions, or macros: the public\nAPI of all code should have documentation. Rarely does anyone\ncomplain about too much documentation!</p>\n<p>It is recommended that each item's documentation follows this basic structure:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">[short sentence explaining what it is]\n\n[more detailed explanation]\n\n[at least one code example that users can copy/paste to try it]\n\n[even more advanced explanations if necessary]\n</code></pre>\n<p>This basic structure should be straightforward to follow when writing your\ndocumentation; while you might think that a code example is trivial,\nthe examples are really important because they can help users understand\nwhat an item is, how it is used, and for what purpose it exists.</p>\n<p>Let's see an example coming from the <a href=\"https://doc.rust-lang.org/stable/std/index.html\">standard library</a> by taking a look at the\n<a href=\"https://doc.rust-lang.org/stable/std/env/fn.args.html\"><code class=\"hljs\">std::env::args()</code></a> function:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-markdown hljs\">Returns the arguments which this program was started with (normally passed\nvia the command line).\n\nThe first element is traditionally the path of the executable, but it can be\nset to arbitrary text, and may not even exist. This means this property should\nnot be relied upon for security purposes.\n\nOn Unix systems shell usually expands unquoted arguments with glob patterns\n(such as <span class=\"hljs-code\">`*`</span> and <span class=\"hljs-code\">`?`</span>). On Windows this is not done, and such arguments are\npassed as-is.\n\n<span class=\"hljs-section\"># Panics</span>\n\nThe returned iterator will panic during iteration if any argument to the\nprocess is not valid unicode. If this is not desired,\nuse the [<span class=\"hljs-code\">`args_os`</span>] function instead.\n\n<span class=\"hljs-section\"># Examples</span>\n\n<span class=\"hljs-code\">```\nuse std::env;\n\n// Prints each argument on a separate line\nfor argument in env::args() {\n    println!(\"{argument}\");\n}\n```</span>\n\n[<span class=\"hljs-symbol\">`args_os`</span>]: <span class=\"hljs-link\">./fn.args_os.html</span>\n</code></pre>\n<p>Everything before the first empty line will be reused to describe the component\nin searches and module overviews.  For example, the function <code class=\"hljs\">std::env::args()</code>\nabove will be shown on the <a href=\"https://doc.rust-lang.org/stable/std/env/index.html#functions\"><code class=\"hljs\">std::env</code></a> module documentation. It is good\npractice to keep the summary to one line: concise writing is a goal of good\ndocumentation.</p>\n<p>Because the type system does a good job of defining what types a function\npasses and returns, there is no benefit of explicitly writing it\ninto the documentation, especially since <code class=\"hljs\">rustdoc</code> adds hyper links to all types in the function signature.</p>\n<p>In the example above, a 'Panics' section explains when the code might abruptly exit,\nwhich can help the reader prevent reaching a panic.  A panic section is recommended\nevery time edge cases in your code can be reached if known.</p>\n<p>As you can see, it follows the structure detailed above: it starts with a short\nsentence explaining what the functions does, then it provides more information\nand finally provides a code example.</p>\n<h2 id=\"markdown\"><a class=\"header\" href=\"#markdown\">Markdown</a></h2>\n<p><code class=\"hljs\">rustdoc</code> uses the <a href=\"https://commonmark.org/\">CommonMark Markdown specification</a>. You might be\ninterested in taking a look at their website to see what's possible:</p>\n<ul>\n<li><a href=\"https://commonmark.org/help/\">CommonMark quick reference</a></li>\n<li><a href=\"https://spec.commonmark.org/current/\">current spec</a></li>\n</ul>\n<p>In addition to the standard CommonMark syntax, <code class=\"hljs\">rustdoc</code> supports several\nextensions:</p>\n<h3 id=\"strikethrough\"><a class=\"header\" href=\"#strikethrough\">Strikethrough</a></h3>\n<p>Text may be rendered with a horizontal line through the center by wrapping the\ntext with one or two tilde characters on each side:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">An example of ~~strikethrough text~~. You can also use ~single tildes~.\n</code></pre>\n<p>This example will render as:</p>\n<blockquote>\n<p>An example of <del>strikethrough text</del>. You can also use <del>single tildes</del>.</p>\n</blockquote>\n<p>This follows the <a href=\"https://github.github.com/gfm/#strikethrough-extension-\">GitHub Strikethrough extension</a>.</p>\n<h3 id=\"footnotes\"><a class=\"header\" href=\"#footnotes\">Footnotes</a></h3>\n<p>A footnote generates a small numbered link in the text which when clicked\ntakes the reader to the footnote text at the bottom of the item. The footnote\nlabel is written similarly to a link reference with a caret at the front. The\nfootnote text is written like a link reference definition, with the text\nfollowing the label. Example:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">This is an example of a footnote[^note].\n\n[^note]: This text is the contents of the footnote, which will be rendered\n    towards the bottom.\n</code></pre>\n<p>This example will render as:</p>\n<blockquote>\n<p>This is an example of a footnote<sup class=\"footnote-reference\"><a href=\"#note\">1</a></sup>.</p>\n<div class=\"footnote-definition\" id=\"note\"><sup class=\"footnote-definition-label\">1</sup>\n<p>This text is the contents of the footnote, which will be rendered\ntowards the bottom.</p>\n</div>\n</blockquote>\n<p>The footnotes are automatically numbered based on the order the footnotes are\nwritten.</p>\n<h3 id=\"tables\"><a class=\"header\" href=\"#tables\">Tables</a></h3>\n<p>Tables can be written using pipes and dashes to draw the rows and columns of\nthe table. These will be translated to HTML table matching the shape. Example:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">| Header1 | Header2 |\n|---------|---------|\n| abc     | def     |\n</code></pre>\n<p>This example will render similarly to this:</p>\n<blockquote>\n<div class=\"table-wrapper\"><table><thead><tr><th>Header1</th><th>Header2</th></tr></thead><tbody>\n<tr><td>abc</td><td>def</td></tr>\n</tbody></table>\n</div></blockquote>\n<p>See the specification for the <a href=\"https://github.github.com/gfm/#tables-extension-\">GitHub Tables extension</a> for more\ndetails on the exact syntax supported.</p>\n<h3 id=\"task-lists\"><a class=\"header\" href=\"#task-lists\">Task lists</a></h3>\n<p>Task lists can be used as a checklist of items that have been completed.\nExample:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-md hljs markdown\"><span class=\"hljs-bullet\">-</span> [x] Complete task\n<span class=\"hljs-bullet\">-</span> [ ] Incomplete task\n</code></pre>\n<p>This will render as:</p>\n<blockquote>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\" checked=\"\">\nComplete task</li>\n<li><input disabled=\"\" type=\"checkbox\">\nIncomplete task</li>\n</ul>\n</blockquote>\n<p>See the specification for the <a href=\"https://github.github.com/gfm/#task-list-items-extension-\">task list extension</a> for more details.</p>\n<h3 id=\"smart-punctuation\"><a class=\"header\" href=\"#smart-punctuation\">Smart punctuation</a></h3>\n<p>Some ASCII punctuation sequences will be automatically turned into fancy Unicode\ncharacters:</p>\n<div class=\"table-wrapper\"><table><thead><tr><th>ASCII sequence</th><th>Unicode</th></tr></thead><tbody>\n<tr><td><code class=\"hljs\">--</code></td><td>–</td></tr>\n<tr><td><code class=\"hljs\">---</code></td><td>—</td></tr>\n<tr><td><code class=\"hljs\">...</code></td><td>…</td></tr>\n<tr><td><code class=\"hljs\">\"</code></td><td>“ or ”, depending on context</td></tr>\n<tr><td><code class=\"hljs\">'</code></td><td>‘ or ’, depending on context</td></tr>\n</tbody></table>\n</div>\n<p>So, no need to manually enter those Unicode characters!</p>\n<h3 id=\"adding-a-warning-block\"><a class=\"header\" href=\"#adding-a-warning-block\">Adding a warning block</a></h3>\n<p>If you want to make a warning or similar note stand out in the documentation,\nyou can wrap it like this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-md hljs markdown\">/// documentation\n///\n/// <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"warning\"</span>&gt;</span></span>A big warning!<span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n///\n/// more documentation\n</code></pre>\n<p>Please note that if you want to put markdown in the HTML tag and for it to\nbe interpreted as such, you need to have an empty line between the HTML tags\nand your markdown content. For example if you want to use a link:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-md hljs markdown\">/// documentation\n///\n/// <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"warning\"</span>&gt;</span></span>\n///\n/// Go to [<span class=\"hljs-string\">this link</span>](<span class=\"hljs-link\">https://rust-lang.org</span>)!\n///\n/// <span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n///\n/// more documentation\n</code></pre>\n\n                    </main>\n\n                    <nav class=\"nav-wrapper\" aria-label=\"Page navigation\">\n                        <!-- Mobile navigation buttons -->\n                            <a rel=\"prev\" href=\"read-documentation/search.html\" class=\"mobile-nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                                <i class=\"fa fa-angle-left\"></i>\n                            </a>\n\n                            <a rel=\"next prefetch\" href=\"write-documentation/what-to-include.html\" class=\"mobile-nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                                <i class=\"fa fa-angle-right\"></i>\n                            </a>\n\n                        <div style=\"clear: both\"></div>\n                    </nav>\n                </div>\n            </div>\n\n            <nav class=\"nav-wide-wrapper\" aria-label=\"Page navigation\">\n                    <a rel=\"prev\" href=\"read-documentation/search.html\" class=\"nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                        <i class=\"fa fa-angle-left\"></i>\n                    </a>\n\n                    <a rel=\"next prefetch\" href=\"write-documentation/what-to-include.html\" class=\"nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                        <i class=\"fa fa-angle-right\"></i>\n                    </a>\n            </nav>\n\n        </div>\n\n\n\n\n        <script>\n            window.playground_copyable = true;\n        </script>\n\n\n        <script src=\"elasticlunr.min.js\"></script>\n        <script src=\"mark.min.js\"></script>\n        <script src=\"searcher.js\"></script>\n\n        <script src=\"clipboard.min.js\"></script>\n        <script src=\"highlight.js\"></script>\n        <script src=\"book.js\"></script>\n\n        <!-- Custom JS scripts -->\n\n\n    </div>\n    \n\n</body></html>",
	"crawlDate": "2024-07-28T05:20:36.632Z"
}