{
	"title": "std::any - Rust",
	"url": "https://doc.rust-lang.org/stable/std/any/index.html",
	"markdown": "# std::any - Rust\n\n## Module [std](../index.html)::[any](#)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/lib.rs.html#387) ·\n\nExpand description\n\nUtilities for dynamic typing or type reflection.\n\n## [§](#any-and-typeid)`Any` and `TypeId`\n\n`Any` itself can be used to get a `TypeId`, and has more features when used as a trait object. As `&dyn Any` (a borrowed trait object), it has the `is` and `downcast_ref` methods, to test if the contained value is of a given type, and to get a reference to the inner value as a type. As `&mut dyn Any`, there is also the `downcast_mut` method, for getting a mutable reference to the inner value. `Box<dyn Any>` adds the `downcast` method, which attempts to convert to a `Box<T>`. See the [`Box`](../../std/boxed/struct.Box.html) documentation for the full details.\n\nNote that `&dyn Any` is limited to testing whether a value is of a specified concrete type, and cannot be used to test whether a type implements a trait.\n\n## [§](#smart-pointers-and-dyn-any)Smart pointers and `dyn Any`\n\nOne piece of behavior to keep in mind when using `Any` as a trait object, especially with types like `Box<dyn Any>` or `Arc<dyn Any>`, is that simply calling `.type_id()` on the value will produce the `TypeId` of the _container_, not the underlying trait object. This can be avoided by converting the smart pointer into a `&dyn Any` instead, which will return the object’s `TypeId`. For example:\n\n```\nuse std::any::{Any, TypeId};\n\nlet boxed: Box<dyn Any> = Box::new(3_i32);\n\n// You're more likely to want this:\nlet actual_id = (&*boxed).type_id();\n// ... than this:\nlet boxed_id = boxed.type_id();\n\nassert_eq!(actual_id, TypeId::of::<i32>());\nassert_eq!(boxed_id, TypeId::of::<Box<dyn Any>>());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::any::%7BAny,+TypeId%7D;%0A++++%0A++++let+boxed:+Box%3Cdyn+Any%3E+=+Box::new(3_i32);%0A++++%0A++++//+You%27re+more+likely+to+want+this:%0A++++let+actual_id+=+(%26*boxed).type_id();%0A++++//+...+than+this:%0A++++let+boxed_id+=+boxed.type_id();%0A++++%0A++++assert_eq!(actual_id,+TypeId::of::%3Ci32%3E());%0A++++assert_eq!(boxed_id,+TypeId::of::%3CBox%3Cdyn+Any%3E%3E());%0A%7D&edition=2021)\n\n### [§](#examples)Examples\n\nConsider a situation where we want to log a value passed to a function. We know the value we’re working on implements `Debug`, but we don’t know its concrete type. We want to give special treatment to certain types: in this case printing out the length of `String` values prior to their value. We don’t know the concrete type of our value at compile time, so we need to use runtime reflection instead.\n\n```\nuse std::fmt::Debug;\nuse std::any::Any;\n\n// Logger function for any type that implements `Debug`.\nfn log<T: Any + Debug>(value: &T) {\n    let value_any = value as &dyn Any;\n\n    // Try to convert our value to a `String`. If successful, we want to\n    // output the `String`'s length as well as its value. If not, it's a\n    // different type: just print it out unadorned.\n    match value_any.downcast_ref::<String>() {\n        Some(as_string) => {\n            println!(\"String ({}): {}\", as_string.len(), as_string);\n        }\n        None => {\n            println!(\"{value:?}\");\n        }\n    }\n}\n\n// This function wants to log its parameter out prior to doing work with it.\nfn do_work<T: Any + Debug>(value: &T) {\n    log(value);\n    // ...do some other work\n}\n\nfn main() {\n    let my_string = \"Hello World\".to_string();\n    do_work(&my_string);\n\n    let my_i8: i8 = 100;\n    do_work(&my_i8);\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fmt::Debug;%0Ause+std::any::Any;%0A%0A//+Logger+function+for+any+type+that+implements+%60Debug%60.%0Afn+log%3CT:+Any+%2B+Debug%3E(value:+%26T)+%7B%0A++++let+value_any+=+value+as+%26dyn+Any;%0A%0A++++//+Try+to+convert+our+value+to+a+%60String%60.+If+successful,+we+want+to%0A++++//+output+the+%60String%60%27s+length+as+well+as+its+value.+If+not,+it%27s+a%0A++++//+different+type:+just+print+it+out+unadorned.%0A++++match+value_any.downcast_ref::%3CString%3E()+%7B%0A++++++++Some(as_string)+=%3E+%7B%0A++++++++++++println!(%22String+(%7B%7D):+%7B%7D%22,+as_string.len(),+as_string);%0A++++++++%7D%0A++++++++None+=%3E+%7B%0A++++++++++++println!(%22%7Bvalue:?%7D%22);%0A++++++++%7D%0A++++%7D%0A%7D%0A%0A//+This+function+wants+to+log+its+parameter+out+prior+to+doing+work+with+it.%0Afn+do_work%3CT:+Any+%2B+Debug%3E(value:+%26T)+%7B%0A++++log(value);%0A++++//+...do+some+other+work%0A%7D%0A%0Afn+main()+%7B%0A++++let+my_string+=+%22Hello+World%22.to_string();%0A++++do_work(%26my_string);%0A%0A++++let+my_i8:+i8+=+100;%0A++++do_work(%26my_i8);%0A%7D&edition=2021)\n\n-   A `TypeId` represents a globally unique identifier for a type.\n    \n\n-   A trait to emulate dynamic typing.\n    \n\n-   Returns the name of a type as a string slice.\n    \n-   Returns the type name of the pointed-to value as a string slice.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Utilities for dynamic typing or type reflection.\"><title>std::any - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"../sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc mod\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">Module any</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">Module any</a></h2><div class=\"sidebar-elems\"><section><ul class=\"block\"><li><a href=\"#structs\">Structs</a></li><li><a href=\"#traits\">Traits</a></li><li><a href=\"#functions\">Functions</a></li></ul></section><h2><a href=\"../index.html\">In crate std</a></h2><h3><a href=\"../index.html#primitives\">Primitive Types</a></h3><ul class=\"block primitive\"><li><a href=\"../primitive.array.html\">array</a></li><li><a href=\"../primitive.bool.html\">bool</a></li><li><a href=\"../primitive.char.html\">char</a></li><li><a href=\"../primitive.f128.html\">f128</a></li><li><a href=\"../primitive.f16.html\">f16</a></li><li><a href=\"../primitive.f32.html\">f32</a></li><li><a href=\"../primitive.f64.html\">f64</a></li><li><a href=\"../primitive.fn.html\">fn</a></li><li><a href=\"../primitive.i128.html\">i128</a></li><li><a href=\"../primitive.i16.html\">i16</a></li><li><a href=\"../primitive.i32.html\">i32</a></li><li><a href=\"../primitive.i64.html\">i64</a></li><li><a href=\"../primitive.i8.html\">i8</a></li><li><a href=\"../primitive.isize.html\">isize</a></li><li><a href=\"../primitive.never.html\">never</a></li><li><a href=\"../primitive.pointer.html\">pointer</a></li><li><a href=\"../primitive.reference.html\">reference</a></li><li><a href=\"../primitive.slice.html\">slice</a></li><li><a href=\"../primitive.str.html\">str</a></li><li><a href=\"../primitive.tuple.html\">tuple</a></li><li><a href=\"../primitive.u128.html\">u128</a></li><li><a href=\"../primitive.u16.html\">u16</a></li><li><a href=\"../primitive.u32.html\">u32</a></li><li><a href=\"../primitive.u64.html\">u64</a></li><li><a href=\"../primitive.u8.html\">u8</a></li><li><a href=\"../primitive.unit.html\">unit</a></li><li><a href=\"../primitive.usize.html\">usize</a></li></ul><h3><a href=\"../index.html#modules\">Modules</a></h3><ul class=\"block mod\"><li><a href=\"../alloc/index.html\">alloc</a></li><li><a href=\"../any/index.html\">any</a></li><li><a href=\"../arch/index.html\">arch</a></li><li><a href=\"../array/index.html\">array</a></li><li><a href=\"../ascii/index.html\">ascii</a></li><li><a href=\"../assert_matches/index.html\">assert_matches</a></li><li><a href=\"../async_iter/index.html\">async_iter</a></li><li><a href=\"../backtrace/index.html\">backtrace</a></li><li><a href=\"../borrow/index.html\">borrow</a></li><li><a href=\"../boxed/index.html\">boxed</a></li><li><a href=\"../cell/index.html\">cell</a></li><li><a href=\"../char/index.html\">char</a></li><li><a href=\"../clone/index.html\">clone</a></li><li><a href=\"../cmp/index.html\">cmp</a></li><li><a href=\"../collections/index.html\">collections</a></li><li><a href=\"../convert/index.html\">convert</a></li><li><a href=\"../default/index.html\">default</a></li><li><a href=\"../env/index.html\">env</a></li><li><a href=\"../error/index.html\">error</a></li><li><a href=\"../f128/index.html\">f128</a></li><li><a href=\"../f16/index.html\">f16</a></li><li><a href=\"../f32/index.html\">f32</a></li><li><a href=\"../f64/index.html\">f64</a></li><li><a href=\"../ffi/index.html\">ffi</a></li><li><a href=\"../fmt/index.html\">fmt</a></li><li><a href=\"../fs/index.html\">fs</a></li><li><a href=\"../future/index.html\">future</a></li><li><a href=\"../hash/index.html\">hash</a></li><li><a href=\"../hint/index.html\">hint</a></li><li><a href=\"../i128/index.html\">i128</a></li><li><a href=\"../i16/index.html\">i16</a></li><li><a href=\"../i32/index.html\">i32</a></li><li><a href=\"../i64/index.html\">i64</a></li><li><a href=\"../i8/index.html\">i8</a></li><li><a href=\"../intrinsics/index.html\">intrinsics</a></li><li><a href=\"../io/index.html\">io</a></li><li><a href=\"../isize/index.html\">isize</a></li><li><a href=\"../iter/index.html\">iter</a></li><li><a href=\"../marker/index.html\">marker</a></li><li><a href=\"../mem/index.html\">mem</a></li><li><a href=\"../net/index.html\">net</a></li><li><a href=\"../num/index.html\">num</a></li><li><a href=\"../ops/index.html\">ops</a></li><li><a href=\"../option/index.html\">option</a></li><li><a href=\"../os/index.html\">os</a></li><li><a href=\"../panic/index.html\">panic</a></li><li><a href=\"../pat/index.html\">pat</a></li><li><a href=\"../path/index.html\">path</a></li><li><a href=\"../pin/index.html\">pin</a></li><li><a href=\"../prelude/index.html\">prelude</a></li><li><a href=\"../primitive/index.html\">primitive</a></li><li><a href=\"../process/index.html\">process</a></li><li><a href=\"../ptr/index.html\">ptr</a></li><li><a href=\"../rc/index.html\">rc</a></li><li><a href=\"../result/index.html\">result</a></li><li><a href=\"../simd/index.html\">simd</a></li><li><a href=\"../slice/index.html\">slice</a></li><li><a href=\"../str/index.html\">str</a></li><li><a href=\"../string/index.html\">string</a></li><li><a href=\"../sync/index.html\">sync</a></li><li><a href=\"../task/index.html\">task</a></li><li><a href=\"../thread/index.html\">thread</a></li><li><a href=\"../time/index.html\">time</a></li><li><a href=\"../u128/index.html\">u128</a></li><li><a href=\"../u16/index.html\">u16</a></li><li><a href=\"../u32/index.html\">u32</a></li><li><a href=\"../u64/index.html\">u64</a></li><li><a href=\"../u8/index.html\">u8</a></li><li><a href=\"../usize/index.html\">usize</a></li><li><a href=\"../vec/index.html\">vec</a></li></ul><h3><a href=\"../index.html#macros\">Macros</a></h3><ul class=\"block macro\"><li><a href=\"../macro.assert.html\">assert</a></li><li><a href=\"../macro.assert_eq.html\">assert_eq</a></li><li><a href=\"../macro.assert_ne.html\">assert_ne</a></li><li><a href=\"../macro.cfg.html\">cfg</a></li><li><a href=\"../macro.cfg_match.html\">cfg_match</a></li><li><a href=\"../macro.column.html\">column</a></li><li><a href=\"../macro.compile_error.html\">compile_error</a></li><li><a href=\"../macro.concat.html\">concat</a></li><li><a href=\"../macro.concat_bytes.html\">concat_bytes</a></li><li><a href=\"../macro.concat_idents.html\">concat_idents</a></li><li><a href=\"../macro.const_format_args.html\">const_format_args</a></li><li><a href=\"../macro.dbg.html\">dbg</a></li><li><a href=\"../macro.debug_assert.html\">debug_assert</a></li><li><a href=\"../macro.debug_assert_eq.html\">debug_assert_eq</a></li><li><a href=\"../macro.debug_assert_ne.html\">debug_assert_ne</a></li><li><a href=\"../macro.env.html\">env</a></li><li><a href=\"../macro.eprint.html\">eprint</a></li><li><a href=\"../macro.eprintln.html\">eprintln</a></li><li><a href=\"../macro.file.html\">file</a></li><li><a href=\"../macro.format.html\">format</a></li><li><a href=\"../macro.format_args.html\">format_args</a></li><li><a href=\"../macro.format_args_nl.html\">format_args_nl</a></li><li><a href=\"../macro.include.html\">include</a></li><li><a href=\"../macro.include_bytes.html\">include_bytes</a></li><li><a href=\"../macro.include_str.html\">include_str</a></li><li><a href=\"../macro.is_x86_feature_detected.html\">is_x86_feature_detected</a></li><li><a href=\"../macro.line.html\">line</a></li><li><a href=\"../macro.log_syntax.html\">log_syntax</a></li><li><a href=\"../macro.matches.html\">matches</a></li><li><a href=\"../macro.module_path.html\">module_path</a></li><li><a href=\"../macro.option_env.html\">option_env</a></li><li><a href=\"../macro.panic.html\">panic</a></li><li><a href=\"../macro.print.html\">print</a></li><li><a href=\"../macro.println.html\">println</a></li><li><a href=\"../macro.stringify.html\">stringify</a></li><li><a href=\"../macro.thread_local.html\">thread_local</a></li><li><a href=\"../macro.todo.html\">todo</a></li><li><a href=\"../macro.trace_macros.html\">trace_macros</a></li><li><a href=\"../macro.try.html\">try</a></li><li><a href=\"../macro.unimplemented.html\">unimplemented</a></li><li><a href=\"../macro.unreachable.html\">unreachable</a></li><li><a href=\"../macro.vec.html\">vec</a></li><li><a href=\"../macro.write.html\">write</a></li><li><a href=\"../macro.writeln.html\">writeln</a></li></ul><h3><a href=\"../index.html#keywords\">Keywords</a></h3><ul class=\"block keyword\"><li><a href=\"../keyword.SelfTy.html\">SelfTy</a></li><li><a href=\"../keyword.as.html\">as</a></li><li><a href=\"../keyword.async.html\">async</a></li><li><a href=\"../keyword.await.html\">await</a></li><li><a href=\"../keyword.break.html\">break</a></li><li><a href=\"../keyword.const.html\">const</a></li><li><a href=\"../keyword.continue.html\">continue</a></li><li><a href=\"../keyword.crate.html\">crate</a></li><li><a href=\"../keyword.dyn.html\">dyn</a></li><li><a href=\"../keyword.else.html\">else</a></li><li><a href=\"../keyword.enum.html\">enum</a></li><li><a href=\"../keyword.extern.html\">extern</a></li><li><a href=\"../keyword.false.html\">false</a></li><li><a href=\"../keyword.fn.html\">fn</a></li><li><a href=\"../keyword.for.html\">for</a></li><li><a href=\"../keyword.if.html\">if</a></li><li><a href=\"../keyword.impl.html\">impl</a></li><li><a href=\"../keyword.in.html\">in</a></li><li><a href=\"../keyword.let.html\">let</a></li><li><a href=\"../keyword.loop.html\">loop</a></li><li><a href=\"../keyword.match.html\">match</a></li><li><a href=\"../keyword.mod.html\">mod</a></li><li><a href=\"../keyword.move.html\">move</a></li><li><a href=\"../keyword.mut.html\">mut</a></li><li><a href=\"../keyword.pub.html\">pub</a></li><li><a href=\"../keyword.ref.html\">ref</a></li><li><a href=\"../keyword.return.html\">return</a></li><li><a href=\"../keyword.self.html\">self</a></li><li><a href=\"../keyword.static.html\">static</a></li><li><a href=\"../keyword.struct.html\">struct</a></li><li><a href=\"../keyword.super.html\">super</a></li><li><a href=\"../keyword.trait.html\">trait</a></li><li><a href=\"../keyword.true.html\">true</a></li><li><a href=\"../keyword.type.html\">type</a></li><li><a href=\"../keyword.union.html\">union</a></li><li><a href=\"../keyword.unsafe.html\">unsafe</a></li><li><a href=\"../keyword.use.html\">use</a></li><li><a href=\"../keyword.where.html\">where</a></li><li><a href=\"../keyword.while.html\">while</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Module <a href=\"../index.html\">std</a>::<wbr><a class=\"mod\" href=\"#\">any</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/lib.rs.html#387\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Utilities for dynamic typing or type reflection.</p>\n<h2 id=\"any-and-typeid\"><a class=\"doc-anchor\" href=\"#any-and-typeid\">§</a><code>Any</code> and <code>TypeId</code></h2>\n<p><code>Any</code> itself can be used to get a <code>TypeId</code>, and has more features when used\nas a trait object. As <code>&amp;dyn Any</code> (a borrowed trait object), it has the <code>is</code>\nand <code>downcast_ref</code> methods, to test if the contained value is of a given type,\nand to get a reference to the inner value as a type. As <code>&amp;mut dyn Any</code>, there\nis also the <code>downcast_mut</code> method, for getting a mutable reference to the\ninner value. <code>Box&lt;dyn Any&gt;</code> adds the <code>downcast</code> method, which attempts to\nconvert to a <code>Box&lt;T&gt;</code>. See the <a href=\"../../std/boxed/struct.Box.html\"><code>Box</code></a> documentation for the full details.</p>\n<p>Note that <code>&amp;dyn Any</code> is limited to testing whether a value is of a specified\nconcrete type, and cannot be used to test whether a type implements a trait.</p>\n<h2 id=\"smart-pointers-and-dyn-any\"><a class=\"doc-anchor\" href=\"#smart-pointers-and-dyn-any\">§</a>Smart pointers and <code>dyn Any</code></h2>\n<p>One piece of behavior to keep in mind when using <code>Any</code> as a trait object,\nespecially with types like <code>Box&lt;dyn Any&gt;</code> or <code>Arc&lt;dyn Any&gt;</code>, is that simply\ncalling <code>.type_id()</code> on the value will produce the <code>TypeId</code> of the\n<em>container</em>, not the underlying trait object. This can be avoided by\nconverting the smart pointer into a <code>&amp;dyn Any</code> instead, which will return\nthe object’s <code>TypeId</code>. For example:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::any::{Any, TypeId};\n\n<span class=\"kw\">let </span>boxed: Box&lt;<span class=\"kw\">dyn </span>Any&gt; = Box::new(<span class=\"number\">3_i32</span>);\n\n<span class=\"comment\">// You're more likely to want this:\n</span><span class=\"kw\">let </span>actual_id = (<span class=\"kw-2\">&amp;*</span>boxed).type_id();\n<span class=\"comment\">// ... than this:\n</span><span class=\"kw\">let </span>boxed_id = boxed.type_id();\n\n<span class=\"macro\">assert_eq!</span>(actual_id, TypeId::of::&lt;i32&gt;());\n<span class=\"macro\">assert_eq!</span>(boxed_id, TypeId::of::&lt;Box&lt;<span class=\"kw\">dyn </span>Any&gt;&gt;());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::any::%7BAny,+TypeId%7D;%0A++++%0A++++let+boxed:+Box%3Cdyn+Any%3E+=+Box::new(3_i32);%0A++++%0A++++//+You're+more+likely+to+want+this:%0A++++let+actual_id+=+(%26*boxed).type_id();%0A++++//+...+than+this:%0A++++let+boxed_id+=+boxed.type_id();%0A++++%0A++++assert_eq!(actual_id,+TypeId::of::%3Ci32%3E());%0A++++assert_eq!(boxed_id,+TypeId::of::%3CBox%3Cdyn+Any%3E%3E());%0A%7D&amp;edition=2021\">Run</a></div>\n<h3 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h3>\n<p>Consider a situation where we want to log a value passed to a function.\nWe know the value we’re working on implements <code>Debug</code>, but we don’t know its\nconcrete type. We want to give special treatment to certain types: in this\ncase printing out the length of <code>String</code> values prior to their value.\nWe don’t know the concrete type of our value at compile time, so we need to\nuse runtime reflection instead.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fmt::Debug;\n<span class=\"kw\">use </span>std::any::Any;\n\n<span class=\"comment\">// Logger function for any type that implements `Debug`.\n</span><span class=\"kw\">fn </span>log&lt;T: Any + Debug&gt;(value: <span class=\"kw-2\">&amp;</span>T) {\n    <span class=\"kw\">let </span>value_any = value <span class=\"kw\">as </span><span class=\"kw-2\">&amp;</span><span class=\"kw\">dyn </span>Any;\n\n    <span class=\"comment\">// Try to convert our value to a `String`. If successful, we want to\n    // output the `String`'s length as well as its value. If not, it's a\n    // different type: just print it out unadorned.\n    </span><span class=\"kw\">match </span>value_any.downcast_ref::&lt;String&gt;() {\n        <span class=\"prelude-val\">Some</span>(as_string) =&gt; {\n            <span class=\"macro\">println!</span>(<span class=\"string\">\"String ({}): {}\"</span>, as_string.len(), as_string);\n        }\n        <span class=\"prelude-val\">None </span>=&gt; {\n            <span class=\"macro\">println!</span>(<span class=\"string\">\"{value:?}\"</span>);\n        }\n    }\n}\n\n<span class=\"comment\">// This function wants to log its parameter out prior to doing work with it.\n</span><span class=\"kw\">fn </span>do_work&lt;T: Any + Debug&gt;(value: <span class=\"kw-2\">&amp;</span>T) {\n    log(value);\n    <span class=\"comment\">// ...do some other work\n</span>}\n\n<span class=\"kw\">fn </span>main() {\n    <span class=\"kw\">let </span>my_string = <span class=\"string\">\"Hello World\"</span>.to_string();\n    do_work(<span class=\"kw-2\">&amp;</span>my_string);\n\n    <span class=\"kw\">let </span>my_i8: i8 = <span class=\"number\">100</span>;\n    do_work(<span class=\"kw-2\">&amp;</span>my_i8);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fmt::Debug;%0Ause+std::any::Any;%0A%0A//+Logger+function+for+any+type+that+implements+%60Debug%60.%0Afn+log%3CT:+Any+%2B+Debug%3E(value:+%26T)+%7B%0A++++let+value_any+=+value+as+%26dyn+Any;%0A%0A++++//+Try+to+convert+our+value+to+a+%60String%60.+If+successful,+we+want+to%0A++++//+output+the+%60String%60's+length+as+well+as+its+value.+If+not,+it's+a%0A++++//+different+type:+just+print+it+out+unadorned.%0A++++match+value_any.downcast_ref::%3CString%3E()+%7B%0A++++++++Some(as_string)+=%3E+%7B%0A++++++++++++println!(%22String+(%7B%7D):+%7B%7D%22,+as_string.len(),+as_string);%0A++++++++%7D%0A++++++++None+=%3E+%7B%0A++++++++++++println!(%22%7Bvalue:?%7D%22);%0A++++++++%7D%0A++++%7D%0A%7D%0A%0A//+This+function+wants+to+log+its+parameter+out+prior+to+doing+work+with+it.%0Afn+do_work%3CT:+Any+%2B+Debug%3E(value:+%26T)+%7B%0A++++log(value);%0A++++//+...do+some+other+work%0A%7D%0A%0Afn+main()+%7B%0A++++let+my_string+=+%22Hello+World%22.to_string();%0A++++do_work(%26my_string);%0A%0A++++let+my_i8:+i8+=+100;%0A++++do_work(%26my_i8);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><h2 id=\"structs\" class=\"section-header\">Structs<a href=\"#structs\" class=\"anchor\">§</a></h2><ul class=\"item-table\"><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></div><div class=\"desc docblock-short\">A <code>TypeId</code> represents a globally unique identifier for a type.</div></li></ul><h2 id=\"traits\" class=\"section-header\">Traits<a href=\"#traits\" class=\"anchor\">§</a></h2><ul class=\"item-table\"><li><div class=\"item-name\"><a class=\"trait\" href=\"trait.Any.html\" title=\"trait std::any::Any\">Any</a></div><div class=\"desc docblock-short\">A trait to emulate dynamic typing.</div></li></ul><h2 id=\"functions\" class=\"section-header\">Functions<a href=\"#functions\" class=\"anchor\">§</a></h2><ul class=\"item-table\"><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.type_name.html\" title=\"fn std::any::type_name\">type_name</a></div><div class=\"desc docblock-short\">Returns the name of a type as a string slice.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.type_name_of_val.html\" title=\"fn std::any::type_name_of_val\">type_name_of_val</a></div><div class=\"desc docblock-short\">Returns the type name of the pointed-to value as a string slice.</div></li></ul></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:10:43.723Z"
}