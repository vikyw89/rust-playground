{
	"title": "PhantomData - The Rustonomicon",
	"url": "https://doc.rust-lang.org/stable/nomicon/phantom-data.html#an-exception-the-special-case-of-the-standard-library-and-its-unstable-may_dangle",
	"markdown": "# PhantomData - The Rustonomicon\n\nWhen working with unsafe code, we can often end up in a situation where types or lifetimes are logically associated with a struct, but not actually part of a field. This most commonly occurs with lifetimes. For instance, the `Iter` for `&'a [T]` is (approximately) defined as follows:\n\n```rust\n#![allow(unused)]\nfn main() {\nstruct Iter<'a, T: 'a> {\n    ptr: *const T,\n    end: *const T,\n}\n}\n```\n\nHowever because `'a` is unused within the struct's body, it's _unbounded_. [Because of the troubles this has historically caused](https://rust-lang.github.io/rfcs/0738-variance.html#the-corner-case-unused-parameters-and-parameters-that-are-only-used-unsafely), unbounded lifetimes and types are _forbidden_ in struct definitions. Therefore we must somehow refer to these types in the body. Correctly doing this is necessary to have correct variance and drop checking.\n\nWe do this using `PhantomData`, which is a special marker type. `PhantomData` consumes no space, but simulates a field of the given type for the purpose of static analysis. This was deemed to be less error-prone than explicitly telling the type-system the kind of variance that you want, while also providing other useful things such as auto traits and the information needed by drop check.\n\nIter logically contains a bunch of `&'a T`s, so this is exactly what we tell the `PhantomData` to simulate:\n\n```rust\n#![allow(unused)]\nfn main() {\nuse std::marker;\n\nstruct Iter<'a, T: 'a> {\n    ptr: *const T,\n    end: *const T,\n    _marker: marker::PhantomData<&'a T>,\n}\n}\n```\n\nand that's it. The lifetime will be bounded, and your iterator will be covariant over `'a` and `T`. Everything Just Works.\n\n## [Generic parameters and drop-checking](#generic-parameters-and-drop-checking)\n\nIn the past, there used to be another thing to take into consideration.\n\nThis very documentation used to say:\n\n> Another important example is Vec, which is (approximately) defined as follows:\n> \n> ```rust\n> #![allow(unused)]\n> fn main() {\n> struct Vec<T> {\n>     data: *const T, // *const for variance!\n>     len: usize,\n>     cap: usize,\n> }\n> }\n> ```\n> \n> Unlike the previous example, it _appears_ that everything is exactly as we want. Every generic argument to Vec shows up in at least one field. Good to go!\n> \n> Nope.\n> \n> The drop checker will generously determine that `Vec<T>` does not own any values of type T. This will in turn make it conclude that it doesn't need to worry about Vec dropping any T's in its destructor for determining drop check soundness. This will in turn allow people to create unsoundness using Vec's destructor.\n> \n> In order to tell the drop checker that we _do_ own values of type T, and therefore may drop some T's when _we_ drop, we must add an extra `PhantomData` saying exactly that:\n> \n> ```rust\n> #![allow(unused)]\n> fn main() {\n> use std::marker;\n> \n> struct Vec<T> {\n>     data: *const T, // *const for variance!\n>     len: usize,\n>     cap: usize,\n>     _owns_T: marker::PhantomData<T>,\n> }\n> }\n> ```\n\nBut ever since [RFC 1238](https://rust-lang.github.io/rfcs/1238-nonparametric-dropck.html), **this is no longer true nor necessary**.\n\nIf you were to write:\n\n```rust\n#![allow(unused)]\nfn main() {\nstruct Vec<T> {\n    data: *const T, // `*const` for variance!\n    len: usize,\n    cap: usize,\n}\n\n#[cfg(any())]\nimpl<T> Drop for Vec<T> { /* … */ }\n}\n```\n\nthen the existence of that `impl<T> Drop for Vec<T>` makes it so Rust will consider that that `Vec<T>` _owns_ values of type `T` (more precisely: may use values of type `T` in its `Drop` implementation), and Rust will thus not allow them to _dangle_ should a `Vec<T>` be dropped.\n\nWhen a type already has a `Drop impl`, **adding an extra `_owns_T: PhantomData<T>` field is thus _superfluous_ and accomplishes nothing**, dropck-wise (it still affects variance and auto-traits).\n\n-   (advanced edge case: if the type containing the `PhantomData` has no `Drop` impl at all, but still has drop glue (by having _another_ field with drop glue), then the dropck/`#[may_dangle]` considerations mentioned herein do apply as well: a `PhantomData<T>` field will then require `T` to be droppable whenever the containing type goes out of scope).\n\n---\n\nBut this situation can sometimes lead to overly restrictive code. That's why the standard library uses an unstable and `unsafe` attribute to opt back into the old \"unchecked\" drop-checking behavior, that this very documentation warned about: the `#[may_dangle]` attribute.\n\n### [An exception: the special case of the standard library and its unstable `#[may_dangle]`](#an-exception-the-special-case-of-the-standard-library-and-its-unstable-may_dangle)\n\nThis section can be skipped if you are only writing your own library code; but if you are curious about what the standard library does with the actual `Vec` definition, you'll notice that it still needs to use a `_owns_T: PhantomData<T>` field for soundness.\n\nClick here to see why\n\nConsider the following example:\n\n```rust\nfn main() {\n    let mut v: Vec<&str> = Vec::new();\n    let s: String = \"Short-lived\".into();\n    v.push(&s);\n    drop(s);\n} // <- `v` is dropped here\n```\n\nwith a classical `impl<T> Drop for Vec<T> {` definition, the above [is denied](https://rust.godbolt.org/z/ans15Kqz3).\n\nIndeed, in this case we have a `Vec</* T = */ &'s str>` vector of `'s`\\-lived references to `str`ings, but in the case of `let s: String`, it is dropped before the `Vec` is, and thus `'s` **is expired** by the time the `Vec` is dropped, and the `impl<'s> Drop for Vec<&'s str> {` is used.\n\nThis means that if such `Drop` were to be used, it would be dealing with an _expired_, or _dangling_ lifetime `'s`. But this is contrary to Rust principles, where by default all Rust references involved in a function signature are non-dangling and valid to dereference.\n\nHence why Rust has to conservatively deny this snippet.\n\nAnd yet, in the case of the real `Vec`, the `Drop` impl does not care about `&'s str`, _since it has no drop glue of its own_: it only wants to deallocate the backing buffer.\n\nIn other words, it would be nice if the above snippet was somehow accepted, by special casing `Vec`, or by relying on some special property of `Vec`: `Vec` could try to _promise not to use the `&'s str`s it holds when being dropped_.\n\nThis is the kind of `unsafe` promise that can be expressed with `#[may_dangle]`:\n\n```rust\nunsafe impl<#[may_dangle] 's> Drop for Vec<&'s str> { /* … */ }\n```\n\nor, more generally:\n\n```rust\nunsafe impl<#[may_dangle] T> Drop for Vec<T> { /* … */ }\n```\n\nis the `unsafe` way to opt out of this conservative assumption that Rust's drop checker makes about type parameters of a dropped instance not being allowed to dangle.\n\nAnd when this is done, such as in the standard library, we need to be careful in the case where `T` has drop glue of its own. In this instance, imagine replacing the `&'s str`s with a `struct PrintOnDrop<'s> /* = */ (&'s str);` which would have a `Drop` impl wherein the inner `&'s str` would be dereferenced and printed to the screen.\n\nIndeed, `Drop for Vec<T> {`, before deallocating the backing buffer, does have to transitively drop each `T` item when it has drop glue; in the case of `PrintOnDrop<'s>`, it means that `Drop for Vec<PrintOnDrop<'s>>` has to transitively drop the `PrintOnDrop<'s>`s elements before deallocating the backing buffer.\n\nSo when we said that `'s` `#[may_dangle]`, it was an excessively loose statement. We'd rather want to say: \"`'s` may dangle provided it not be involved in some transitive drop glue\". Or, more generally, \"`T` may dangle provided it not be involved in some transitive drop glue\". This \"exception to the exception\" is a pervasive situation whenever **we own a `T`**. That's why Rust's `#[may_dangle]` is smart enough to know of this opt-out, and will thus be disabled _when the generic parameter is held in an owned fashion_ by the fields of the struct.\n\nHence why the standard library ends up with:\n\n```rust\n#![allow(unused)]\nfn main() {\n#[cfg(any())]\n// we pinky-swear not to use `T` when dropping a `Vec`…\nunsafe impl<#[may_dangle] T> Drop for Vec<T> {\n    fn drop(&mut self) {\n        unsafe {\n            if mem::needs_drop::<T>() {\n                /* … except here, that is, … */\n                ptr::drop_in_place::<[T]>(/* … */);\n            }\n            // …\n            dealloc(/* … */)\n            // …\n        }\n    }\n}\n\nstruct Vec<T> {\n    // … except for the fact that a `Vec` owns `T` items and\n    // may thus be dropping `T` items on drop!\n    _owns_T: core::marker::PhantomData<T>,\n\n    ptr: *const T, // `*const` for variance (but this does not express ownership of a `T` *per se*)\n    len: usize,\n    cap: usize,\n}\n}\n```\n\n---\n\nRaw pointers that own an allocation is such a pervasive pattern that the standard library made a utility for itself called `Unique<T>` which:\n\n-   wraps a `*const T` for variance\n-   includes a `PhantomData<T>`\n-   auto-derives `Send`/`Sync` as if T was contained\n-   marks the pointer as `NonZero` for the null-pointer optimization\n\n## [Table of `PhantomData` patterns](#table-of-phantomdata-patterns)\n\nHere’s a table of all the wonderful ways `PhantomData` could be used:\n\n| Phantom type | variance of `'a` | variance of `T` | `Send`/`Sync`  \n(or lack thereof) | dangling `'a` or `T` in drop glue  \n(_e.g._, `#[may_dangle] Drop`) |\n| --- | --- | --- | --- | --- |\n| `PhantomData<T>` | \\- | **cov**ariant | inherited | disallowed (\"owns `T`\") |\n| `PhantomData<&'a T>` | **cov**ariant | **cov**ariant | `Send + Sync`  \nrequires  \n`T : Sync` | allowed |\n| `PhantomData<&'a mut T>` | **cov**ariant | **inv**ariant | inherited | allowed |\n| `PhantomData<*const T>` | \\- | **cov**ariant | `!Send + !Sync` | allowed |\n| `PhantomData<*mut T>` | \\- | **inv**ariant | `!Send + !Sync` | allowed |\n| `PhantomData<fn(T)>` | \\- | **contra**variant | `Send + Sync` | allowed |\n| `PhantomData<fn() -> T>` | \\- | **cov**ariant | `Send + Sync` | allowed |\n| `PhantomData<fn(T) -> T>` | \\- | **inv**ariant | `Send + Sync` | allowed |\n| `PhantomData<Cell<&'a ()>>` | **inv**ariant | \\- | `Send + !Sync` | allowed |\n\n-   Note: opting out of the `Unpin` auto-trait requires the dedicated [`PhantomPinned`](../core/marker/struct.PhantomPinned.html) type instead.",
	"html": "<!DOCTYPE html><html lang=\"en\" class=\"light\" dir=\"ltr\"><head>\n        <!-- Book generated using mdBook -->\n        <meta charset=\"UTF-8\">\n        <title>PhantomData - The Rustonomicon</title>\n\n\n        <!-- Custom HTML head -->\n        \n        <meta name=\"description\" content=\"The Dark Arts of Advanced and Unsafe Rust Programming\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <meta name=\"theme-color\" content=\"rgb(255, 255, 255)\">\n\n        <link rel=\"icon\" href=\"favicon.svg\">\n        <link rel=\"shortcut icon\" href=\"favicon.png\">\n        <link rel=\"stylesheet\" href=\"css/variables.css\">\n        <link rel=\"stylesheet\" href=\"css/general.css\">\n        <link rel=\"stylesheet\" href=\"css/chrome.css\">\n        <link rel=\"stylesheet\" href=\"css/print.css\" media=\"print\">\n\n        <!-- Fonts -->\n        <link rel=\"stylesheet\" href=\"FontAwesome/css/font-awesome.css\">\n        <link rel=\"stylesheet\" href=\"fonts/fonts.css\">\n\n        <!-- Highlight.js Stylesheets -->\n        <link rel=\"stylesheet\" href=\"highlight.css\">\n        <link rel=\"stylesheet\" href=\"tomorrow-night.css\" disabled=\"\">\n        <link rel=\"stylesheet\" href=\"ayu-highlight.css\" disabled=\"\">\n\n        <!-- Custom theme stylesheets -->\n        <link rel=\"stylesheet\" href=\"theme/nomicon.css\">\n\n    </head>\n    <body class=\"js sidebar-visible\">\n    <div id=\"body-container\">\n        <!-- Provide site root to javascript -->\n        <script>\n            var path_to_root = \"\";\n            var default_theme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"navy\" : \"light\";\n        </script>\n\n        <!-- Work around some values being stored in localStorage wrapped in quotes -->\n        <script>\n            try {\n                var theme = localStorage.getItem('mdbook-theme');\n                var sidebar = localStorage.getItem('mdbook-sidebar');\n\n                if (theme.startsWith('\"') && theme.endsWith('\"')) {\n                    localStorage.setItem('mdbook-theme', theme.slice(1, theme.length - 1));\n                }\n\n                if (sidebar.startsWith('\"') && sidebar.endsWith('\"')) {\n                    localStorage.setItem('mdbook-sidebar', sidebar.slice(1, sidebar.length - 1));\n                }\n            } catch (e) { }\n        </script>\n\n        <!-- Set the theme before any content is loaded, prevents flash -->\n        <script>\n            var theme;\n            try { theme = localStorage.getItem('mdbook-theme'); } catch(e) { }\n            if (theme === null || theme === undefined) { theme = default_theme; }\n            var html = document.querySelector('html');\n            html.classList.remove('light')\n            html.classList.add(theme);\n            var body = document.querySelector('body');\n            body.classList.remove('no-js')\n            body.classList.add('js');\n        </script>\n\n        <input type=\"checkbox\" id=\"sidebar-toggle-anchor\" class=\"hidden\">\n\n        <!-- Hide / unhide sidebar before it is displayed -->\n        <script>\n            var body = document.querySelector('body');\n            var sidebar = null;\n            var sidebar_toggle = document.getElementById(\"sidebar-toggle-anchor\");\n            if (document.body.clientWidth >= 1080) {\n                try { sidebar = localStorage.getItem('mdbook-sidebar'); } catch(e) { }\n                sidebar = sidebar || 'visible';\n            } else {\n                sidebar = 'hidden';\n            }\n            sidebar_toggle.checked = sidebar === 'visible';\n            body.classList.remove('sidebar-visible');\n            body.classList.add(\"sidebar-\" + sidebar);\n        </script>\n\n        <nav id=\"sidebar\" class=\"sidebar\" aria-label=\"Table of contents\" aria-hidden=\"false\">\n            <div class=\"sidebar-scrollbox\">\n                <ol class=\"chapter\"><li class=\"chapter-item expanded affix \"><a href=\"intro.html\" tabindex=\"0\">Introduction</a></li><li class=\"chapter-item expanded \"><a href=\"meet-safe-and-unsafe.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.</strong> Meet Safe and Unsafe</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"safe-unsafe-meaning.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.1.</strong> How Safe and Unsafe Interact</a></li><li class=\"chapter-item expanded \"><a href=\"what-unsafe-does.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.2.</strong> What Unsafe Can Do</a></li><li class=\"chapter-item expanded \"><a href=\"working-with-unsafe.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.3.</strong> Working with Unsafe</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"data.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.</strong> Data Layout</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"repr-rust.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.1.</strong> repr(Rust)</a></li><li class=\"chapter-item expanded \"><a href=\"exotic-sizes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.2.</strong> Exotically Sized Types</a></li><li class=\"chapter-item expanded \"><a href=\"other-reprs.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.3.</strong> Other reprs</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ownership.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.</strong> Ownership</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"references.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.1.</strong> References</a></li><li class=\"chapter-item expanded \"><a href=\"aliasing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.2.</strong> Aliasing</a></li><li class=\"chapter-item expanded \"><a href=\"lifetimes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.3.</strong> Lifetimes</a></li><li class=\"chapter-item expanded \"><a href=\"lifetime-mismatch.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.4.</strong> Limits of Lifetimes</a></li><li class=\"chapter-item expanded \"><a href=\"lifetime-elision.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.5.</strong> Lifetime Elision</a></li><li class=\"chapter-item expanded \"><a href=\"unbounded-lifetimes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.6.</strong> Unbounded Lifetimes</a></li><li class=\"chapter-item expanded \"><a href=\"hrtb.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.7.</strong> Higher-Rank Trait Bounds</a></li><li class=\"chapter-item expanded \"><a href=\"subtyping.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.8.</strong> Subtyping and Variance</a></li><li class=\"chapter-item expanded \"><a href=\"dropck.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.9.</strong> Drop Check</a></li><li class=\"chapter-item expanded \"><a href=\"phantom-data.html\" class=\"active\" tabindex=\"0\"><strong aria-hidden=\"true\">3.10.</strong> PhantomData</a></li><li class=\"chapter-item expanded \"><a href=\"borrow-splitting.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.11.</strong> Splitting Borrows</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"conversions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.</strong> Type Conversions</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"coercions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.</strong> Coercions</a></li><li class=\"chapter-item expanded \"><a href=\"dot-operator.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.</strong> The Dot Operator</a></li><li class=\"chapter-item expanded \"><a href=\"casts.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.</strong> Casts</a></li><li class=\"chapter-item expanded \"><a href=\"transmutes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.</strong> Transmutes</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"uninitialized.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.</strong> Uninitialized Memory</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"checked-uninit.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.1.</strong> Checked</a></li><li class=\"chapter-item expanded \"><a href=\"drop-flags.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.2.</strong> Drop Flags</a></li><li class=\"chapter-item expanded \"><a href=\"unchecked-uninit.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.3.</strong> Unchecked</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"obrm.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.</strong> Ownership Based Resource Management</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"constructors.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.1.</strong> Constructors</a></li><li class=\"chapter-item expanded \"><a href=\"destructors.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.2.</strong> Destructors</a></li><li class=\"chapter-item expanded \"><a href=\"leaking.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.3.</strong> Leaking</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"unwinding.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.</strong> Unwinding</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"exception-safety.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.1.</strong> Exception Safety</a></li><li class=\"chapter-item expanded \"><a href=\"poisoning.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.2.</strong> Poisoning</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"concurrency.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.</strong> Concurrency</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"races.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.1.</strong> Races</a></li><li class=\"chapter-item expanded \"><a href=\"send-and-sync.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.</strong> Send and Sync</a></li><li class=\"chapter-item expanded \"><a href=\"atomics.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.3.</strong> Atomics</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"vec/vec.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.</strong> Implementing Vec</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"vec/vec-layout.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.1.</strong> Layout</a></li><li class=\"chapter-item expanded \"><a href=\"vec/vec-alloc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.2.</strong> Allocating</a></li><li class=\"chapter-item expanded \"><a href=\"vec/vec-push-pop.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.3.</strong> Push and Pop</a></li><li class=\"chapter-item expanded \"><a href=\"vec/vec-dealloc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.4.</strong> Deallocating</a></li><li class=\"chapter-item expanded \"><a href=\"vec/vec-deref.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.5.</strong> Deref</a></li><li class=\"chapter-item expanded \"><a href=\"vec/vec-insert-remove.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.6.</strong> Insert and Remove</a></li><li class=\"chapter-item expanded \"><a href=\"vec/vec-into-iter.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.7.</strong> IntoIter</a></li><li class=\"chapter-item expanded \"><a href=\"vec/vec-raw.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.8.</strong> RawVec</a></li><li class=\"chapter-item expanded \"><a href=\"vec/vec-drain.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.9.</strong> Drain</a></li><li class=\"chapter-item expanded \"><a href=\"vec/vec-zsts.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.10.</strong> Handling Zero-Sized Types</a></li><li class=\"chapter-item expanded \"><a href=\"vec/vec-final.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.11.</strong> Final Code</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"arc-mutex/arc-and-mutex.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.</strong> Implementing Arc and Mutex</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"arc-mutex/arc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.</strong> Arc</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"arc-mutex/arc-layout.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.1.</strong> Layout</a></li><li class=\"chapter-item expanded \"><a href=\"arc-mutex/arc-base.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.2.</strong> Base Code</a></li><li class=\"chapter-item expanded \"><a href=\"arc-mutex/arc-clone.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.3.</strong> Cloning</a></li><li class=\"chapter-item expanded \"><a href=\"arc-mutex/arc-drop.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.4.</strong> Dropping</a></li><li class=\"chapter-item expanded \"><a href=\"arc-mutex/arc-final.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.5.</strong> Final Code</a></li></ol></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ffi.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.</strong> FFI</a></li><li class=\"chapter-item expanded \"><a href=\"beneath-std.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.</strong> Beneath std</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"panic-handler.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.1.</strong> #[panic_handler]</a></li></ol></li></ol>\n            </div>\n            <div id=\"sidebar-resize-handle\" class=\"sidebar-resize-handle\">\n                <div class=\"sidebar-resize-indicator\"></div>\n            </div>\n        </nav>\n\n        <!-- Track and set sidebar scroll position -->\n        <script>\n            var sidebarScrollbox = document.querySelector('#sidebar .sidebar-scrollbox');\n            sidebarScrollbox.addEventListener('click', function(e) {\n                if (e.target.tagName === 'A') {\n                    sessionStorage.setItem('sidebar-scroll', sidebarScrollbox.scrollTop);\n                }\n            }, { passive: true });\n            var sidebarScrollTop = sessionStorage.getItem('sidebar-scroll');\n            sessionStorage.removeItem('sidebar-scroll');\n            if (sidebarScrollTop) {\n                // preserve sidebar scroll position when navigating via links within sidebar\n                sidebarScrollbox.scrollTop = sidebarScrollTop;\n            } else {\n                // scroll sidebar to current active section when navigating via \"next/previous chapter\" buttons\n                var activeSection = document.querySelector('#sidebar .active');\n                if (activeSection) {\n                    activeSection.scrollIntoView({ block: 'center' });\n                }\n            }\n        </script>\n\n        <div id=\"page-wrapper\" class=\"page-wrapper\">\n\n            <div class=\"page\">\n                                <div id=\"menu-bar-hover-placeholder\"></div>\n                <div id=\"menu-bar\" class=\"menu-bar bordered\" style=\"top: 0px;\">\n                    <div class=\"left-buttons\">\n                        <label id=\"sidebar-toggle\" class=\"icon-button\" for=\"sidebar-toggle-anchor\" title=\"Toggle Table of Contents\" aria-label=\"Toggle Table of Contents\" aria-controls=\"sidebar\" aria-expanded=\"true\">\n                            <i class=\"fa fa-bars\"></i>\n                        </label>\n                        <button id=\"theme-toggle\" class=\"icon-button\" type=\"button\" title=\"Change theme\" aria-label=\"Change theme\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-controls=\"theme-list\">\n                            <i class=\"fa fa-paint-brush\"></i>\n                        </button>\n                        <ul id=\"theme-list\" class=\"theme-popup\" aria-label=\"Themes\" role=\"menu\">\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme theme-selected\" id=\"light\">Light</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"rust\">Rust</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"coal\">Coal</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"navy\">Navy</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"ayu\">Ayu</button></li>\n                        </ul>\n                        <button id=\"search-toggle\" class=\"icon-button\" type=\"button\" title=\"Search. (Shortkey: s)\" aria-label=\"Toggle Searchbar\" aria-expanded=\"false\" aria-keyshortcuts=\"S\" aria-controls=\"searchbar\">\n                            <i class=\"fa fa-search\"></i>\n                        </button>\n                    </div>\n\n                    <h1 class=\"menu-title\">The Rustonomicon</h1>\n\n                    <div class=\"right-buttons\">\n                        <a href=\"print.html\" title=\"Print this book\" aria-label=\"Print this book\">\n                            <i id=\"print-button\" class=\"fa fa-print\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/nomicon\" title=\"Git repository\" aria-label=\"Git repository\">\n                            <i id=\"git-repository-button\" class=\"fa fa-github\"></i>\n                        </a>\n\n                    </div>\n                </div>\n\n                <div id=\"search-wrapper\" class=\"hidden\">\n                    <form id=\"searchbar-outer\" class=\"searchbar-outer\">\n                        <input type=\"search\" id=\"searchbar\" name=\"searchbar\" placeholder=\"Search this book ...\" aria-controls=\"searchresults-outer\" aria-describedby=\"searchresults-header\">\n                    </form>\n                    <div id=\"searchresults-outer\" class=\"searchresults-outer hidden\">\n                        <div id=\"searchresults-header\" class=\"searchresults-header\"></div>\n                        <ul id=\"searchresults\">\n                        </ul>\n                    </div>\n                </div>\n\n                <!-- Apply ARIA attributes after the sidebar and the sidebar toggle button are added to the DOM -->\n                <script>\n                    document.getElementById('sidebar-toggle').setAttribute('aria-expanded', sidebar === 'visible');\n                    document.getElementById('sidebar').setAttribute('aria-hidden', sidebar !== 'visible');\n                    Array.from(document.querySelectorAll('#sidebar a')).forEach(function(link) {\n                        link.setAttribute('tabIndex', sidebar === 'visible' ? 0 : -1);\n                    });\n                </script>\n\n                <div id=\"content\" class=\"content\">\n                    <main>\n                        <h1 id=\"phantomdata\"><a class=\"header\" href=\"#phantomdata\">PhantomData</a></h1>\n<p>When working with unsafe code, we can often end up in a situation where\ntypes or lifetimes are logically associated with a struct, but not actually\npart of a field. This most commonly occurs with lifetimes. For instance, the\n<code class=\"hljs\">Iter</code> for <code class=\"hljs\">&amp;'a [T]</code> is (approximately) defined as follows:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust compile_fail edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Iter</span></span>&lt;<span class=\"hljs-symbol\">'a</span>, T: <span class=\"hljs-symbol\">'a</span>&gt; {\n    ptr: *<span class=\"hljs-keyword\">const</span> T,\n    end: *<span class=\"hljs-keyword\">const</span> T,\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>However because <code class=\"hljs\">'a</code> is unused within the struct's body, it's <em>unbounded</em>.\n<a href=\"https://rust-lang.github.io/rfcs/0738-variance.html#the-corner-case-unused-parameters-and-parameters-that-are-only-used-unsafely\">Because of the troubles this has historically caused</a>,\nunbounded lifetimes and types are <em>forbidden</em> in struct definitions.\nTherefore we must somehow refer to these types in the body.\nCorrectly doing this is necessary to have correct variance and drop checking.</p>\n<p>We do this using <code class=\"hljs\">PhantomData</code>, which is a special marker type. <code class=\"hljs\">PhantomData</code>\nconsumes no space, but simulates a field of the given type for the purpose of\nstatic analysis. This was deemed to be less error-prone than explicitly telling\nthe type-system the kind of variance that you want, while also providing other\nuseful things such as auto traits and the information needed by drop check.</p>\n<p>Iter logically contains a bunch of <code class=\"hljs\">&amp;'a T</code>s, so this is exactly what we tell\nthe <code class=\"hljs\">PhantomData</code> to simulate:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">use</span> std::marker;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Iter</span></span>&lt;<span class=\"hljs-symbol\">'a</span>, T: <span class=\"hljs-symbol\">'a</span>&gt; {\n    ptr: *<span class=\"hljs-keyword\">const</span> T,\n    end: *<span class=\"hljs-keyword\">const</span> T,\n    _marker: marker::PhantomData&lt;&amp;<span class=\"hljs-symbol\">'a</span> T&gt;,\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>and that's it. The lifetime will be bounded, and your iterator will be covariant\nover <code class=\"hljs\">'a</code> and <code class=\"hljs\">T</code>. Everything Just Works.</p>\n<h2 id=\"generic-parameters-and-drop-checking\"><a class=\"header\" href=\"#generic-parameters-and-drop-checking\">Generic parameters and drop-checking</a></h2>\n<p>In the past, there used to be another thing to take into consideration.</p>\n<p>This very documentation used to say:</p>\n<blockquote>\n<p>Another important example is Vec, which is (approximately) defined as follows:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Vec</span></span>&lt;T&gt; {\n    data: *<span class=\"hljs-keyword\">const</span> T, <span class=\"hljs-comment\">// *const for variance!</span>\n    len: <span class=\"hljs-built_in\">usize</span>,\n    cap: <span class=\"hljs-built_in\">usize</span>,\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Unlike the previous example, it <em>appears</em> that everything is exactly as we\nwant. Every generic argument to Vec shows up in at least one field.\nGood to go!</p>\n<p>Nope.</p>\n<p>The drop checker will generously determine that <code class=\"hljs\">Vec&lt;T&gt;</code> does not own any values\nof type T. This will in turn make it conclude that it doesn't need to worry\nabout Vec dropping any T's in its destructor for determining drop check\nsoundness. This will in turn allow people to create unsoundness using\nVec's destructor.</p>\n<p>In order to tell the drop checker that we <em>do</em> own values of type T, and\ntherefore may drop some T's when <em>we</em> drop, we must add an extra <code class=\"hljs\">PhantomData</code>\nsaying exactly that:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">use</span> std::marker;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Vec</span></span>&lt;T&gt; {\n    data: *<span class=\"hljs-keyword\">const</span> T, <span class=\"hljs-comment\">// *const for variance!</span>\n    len: <span class=\"hljs-built_in\">usize</span>,\n    cap: <span class=\"hljs-built_in\">usize</span>,\n    _owns_T: marker::PhantomData&lt;T&gt;,\n}\n<span class=\"boring\">}</span></code></pre></pre>\n</blockquote>\n<p>But ever since <a href=\"https://rust-lang.github.io/rfcs/1238-nonparametric-dropck.html\">RFC 1238</a>,\n<strong>this is no longer true nor necessary</strong>.</p>\n<p>If you were to write:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Vec</span></span>&lt;T&gt; {\n    data: *<span class=\"hljs-keyword\">const</span> T, <span class=\"hljs-comment\">// `*const` for variance!</span>\n    len: <span class=\"hljs-built_in\">usize</span>,\n    cap: <span class=\"hljs-built_in\">usize</span>,\n}\n\n<span class=\"boring\"><span class=\"hljs-meta\">#[cfg(any())]</span>\n</span><span class=\"hljs-keyword\">impl</span>&lt;T&gt; <span class=\"hljs-built_in\">Drop</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">Vec</span>&lt;T&gt; { <span class=\"hljs-comment\">/* … */</span> }\n<span class=\"boring\">}</span></code></pre></pre>\n<p>then the existence of that <code class=\"hljs\">impl&lt;T&gt; Drop for Vec&lt;T&gt;</code> makes it so Rust will consider\nthat that <code class=\"hljs\">Vec&lt;T&gt;</code> <em>owns</em> values of type <code class=\"hljs\">T</code> (more precisely: may use values of type <code class=\"hljs\">T</code>\nin its <code class=\"hljs\">Drop</code> implementation), and Rust will thus not allow them to <em>dangle</em> should a\n<code class=\"hljs\">Vec&lt;T&gt;</code> be dropped.</p>\n<p>When a type already has a <code class=\"hljs\">Drop impl</code>, <strong>adding an extra <code class=\"hljs\">_owns_T: PhantomData&lt;T&gt;</code> field\nis thus <em>superfluous</em> and accomplishes nothing</strong>, dropck-wise (it still affects variance\nand auto-traits).</p>\n<ul>\n<li>(advanced edge case: if the type containing the <code class=\"hljs\">PhantomData</code> has no <code class=\"hljs\">Drop</code> impl at all,\nbut still has drop glue (by having <em>another</em> field with drop glue), then the\ndropck/<code class=\"hljs\">#[may_dangle]</code> considerations mentioned herein do apply as well: a <code class=\"hljs\">PhantomData&lt;T&gt;</code>\nfield will then require <code class=\"hljs\">T</code> to be droppable whenever the containing type goes out of scope).</li>\n</ul>\n<hr>\n<p>But this situation can sometimes lead to overly restrictive code. That's why the\nstandard library uses an unstable and <code class=\"hljs\">unsafe</code> attribute to opt back into the old\n\"unchecked\" drop-checking behavior, that this very documentation warned about: the\n<code class=\"hljs\">#[may_dangle]</code> attribute.</p>\n<h3 id=\"an-exception-the-special-case-of-the-standard-library-and-its-unstable-may_dangle\"><a class=\"header\" href=\"#an-exception-the-special-case-of-the-standard-library-and-its-unstable-may_dangle\">An exception: the special case of the standard library and its unstable <code>#[may_dangle]</code></a></h3>\n<p>This section can be skipped if you are only writing your own library code; but if you are\ncurious about what the standard library does with the actual <code class=\"hljs\">Vec</code> definition, you'll notice\nthat it still needs to use a <code class=\"hljs\">_owns_T: PhantomData&lt;T&gt;</code> field for soundness.</p>\n<details><summary>Click here to see why</summary>\n<p>Consider the following example:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust edition2021 hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> v: <span class=\"hljs-built_in\">Vec</span>&lt;&amp;<span class=\"hljs-built_in\">str</span>&gt; = <span class=\"hljs-built_in\">Vec</span>::new();\n    <span class=\"hljs-keyword\">let</span> s: <span class=\"hljs-built_in\">String</span> = <span class=\"hljs-string\">\"Short-lived\"</span>.into();\n    v.push(&amp;s);\n    <span class=\"hljs-built_in\">drop</span>(s);\n} <span class=\"hljs-comment\">// &lt;- `v` is dropped here</span></code></pre></pre>\n<p>with a classical <code class=\"hljs\">impl&lt;T&gt; Drop for Vec&lt;T&gt; {</code> definition, the above <a href=\"https://rust.godbolt.org/z/ans15Kqz3\">is denied</a>.</p>\n<p>Indeed, in this case we have a <code class=\"hljs\">Vec&lt;/* T = */ &amp;'s str&gt;</code> vector of <code class=\"hljs\">'s</code>-lived references\nto <code class=\"hljs\">str</code>ings, but in the case of <code class=\"hljs\">let s: String</code>, it is dropped before the <code class=\"hljs\">Vec</code> is, and\nthus <code class=\"hljs\">'s</code> <strong>is expired</strong> by the time the <code class=\"hljs\">Vec</code> is dropped, and the\n<code class=\"hljs\">impl&lt;'s&gt; Drop for Vec&lt;&amp;'s str&gt; {</code> is used.</p>\n<p>This means that if such <code class=\"hljs\">Drop</code> were to be used, it would be dealing with an <em>expired</em>, or\n<em>dangling</em> lifetime <code class=\"hljs\">'s</code>. But this is contrary to Rust principles, where by default all\nRust references involved in a function signature are non-dangling and valid to dereference.</p>\n<p>Hence why Rust has to conservatively deny this snippet.</p>\n<p>And yet, in the case of the real <code class=\"hljs\">Vec</code>, the <code class=\"hljs\">Drop</code> impl does not care about <code class=\"hljs\">&amp;'s str</code>,\n<em>since it has no drop glue of its own</em>: it only wants to deallocate the backing buffer.</p>\n<p>In other words, it would be nice if the above snippet was somehow accepted, by special\ncasing <code class=\"hljs\">Vec</code>, or by relying on some special property of <code class=\"hljs\">Vec</code>: <code class=\"hljs\">Vec</code> could try to\n<em>promise not to use the <code class=\"hljs\">&amp;'s str</code>s it holds when being dropped</em>.</p>\n<p>This is the kind of <code class=\"hljs\">unsafe</code> promise that can be expressed with <code class=\"hljs\">#[may_dangle]</code>:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">unsafe</span> <span class=\"hljs-keyword\">impl</span>&lt;<span class=\"hljs-meta\">#[may_dangle]</span> <span class=\"hljs-symbol\">'s</span>&gt; <span class=\"hljs-built_in\">Drop</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">Vec</span>&lt;&amp;<span class=\"hljs-symbol\">'s</span> <span class=\"hljs-built_in\">str</span>&gt; { <span class=\"hljs-comment\">/* … */</span> }</code></pre>\n<p>or, more generally:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">unsafe</span> <span class=\"hljs-keyword\">impl</span>&lt;<span class=\"hljs-meta\">#[may_dangle]</span> T&gt; <span class=\"hljs-built_in\">Drop</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">Vec</span>&lt;T&gt; { <span class=\"hljs-comment\">/* … */</span> }</code></pre>\n<p>is the <code class=\"hljs\">unsafe</code> way to opt out of this conservative assumption that Rust's drop\nchecker makes about type parameters of a dropped instance not being allowed to dangle.</p>\n<p>And when this is done, such as in the standard library, we need to be careful in the\ncase where <code class=\"hljs\">T</code> has drop glue of its own. In this instance, imagine replacing the\n<code class=\"hljs\">&amp;'s str</code>s with a <code class=\"hljs\">struct PrintOnDrop&lt;'s&gt; /* = */ (&amp;'s str);</code> which would have a\n<code class=\"hljs\">Drop</code> impl wherein the inner <code class=\"hljs\">&amp;'s str</code> would be dereferenced and printed to the screen.</p>\n<p>Indeed, <code class=\"hljs\">Drop for Vec&lt;T&gt; {</code>, before deallocating the backing buffer, does have to transitively\ndrop each <code class=\"hljs\">T</code> item when it has drop glue; in the case of <code class=\"hljs\">PrintOnDrop&lt;'s&gt;</code>, it means that\n<code class=\"hljs\">Drop for Vec&lt;PrintOnDrop&lt;'s&gt;&gt;</code> has to transitively drop the <code class=\"hljs\">PrintOnDrop&lt;'s&gt;</code>s elements before\ndeallocating the backing buffer.</p>\n<p>So when we said that <code class=\"hljs\">'s</code> <code class=\"hljs\">#[may_dangle]</code>, it was an excessively loose statement. We'd rather want\nto say: \"<code class=\"hljs\">'s</code> may dangle provided it not be involved in some transitive drop glue\". Or, more generally,\n\"<code class=\"hljs\">T</code> may dangle provided it not be involved in some transitive drop glue\". This \"exception to the\nexception\" is a pervasive situation whenever <strong>we own a <code class=\"hljs\">T</code></strong>. That's why Rust's <code class=\"hljs\">#[may_dangle]</code> is\nsmart enough to know of this opt-out, and will thus be disabled <em>when the generic parameter is held\nin an owned fashion</em> by the fields of the struct.</p>\n<p>Hence why the standard library ends up with:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-meta\">#[cfg(any())]</span>\n</span><span class=\"hljs-comment\">// we pinky-swear not to use `T` when dropping a `Vec`…</span>\n<span class=\"hljs-keyword\">unsafe</span> <span class=\"hljs-keyword\">impl</span>&lt;<span class=\"hljs-meta\">#[may_dangle]</span> T&gt; <span class=\"hljs-built_in\">Drop</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">Vec</span>&lt;T&gt; {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">drop</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) {\n        <span class=\"hljs-keyword\">unsafe</span> {\n            <span class=\"hljs-keyword\">if</span> mem::needs_drop::&lt;T&gt;() {\n                <span class=\"hljs-comment\">/* … except here, that is, … */</span>\n                ptr::drop_in_place::&lt;[T]&gt;(<span class=\"hljs-comment\">/* … */</span>);\n            }\n            <span class=\"hljs-comment\">// …</span>\n            dealloc(<span class=\"hljs-comment\">/* … */</span>)\n            <span class=\"hljs-comment\">// …</span>\n        }\n    }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Vec</span></span>&lt;T&gt; {\n    <span class=\"hljs-comment\">// … except for the fact that a `Vec` owns `T` items and</span>\n    <span class=\"hljs-comment\">// may thus be dropping `T` items on drop!</span>\n    _owns_T: core::marker::PhantomData&lt;T&gt;,\n\n    ptr: *<span class=\"hljs-keyword\">const</span> T, <span class=\"hljs-comment\">// `*const` for variance (but this does not express ownership of a `T` *per se*)</span>\n    len: <span class=\"hljs-built_in\">usize</span>,\n    cap: <span class=\"hljs-built_in\">usize</span>,\n}\n<span class=\"boring\">}</span></code></pre></pre>\n</details>\n<hr>\n<p>Raw pointers that own an allocation is such a pervasive pattern that the\nstandard library made a utility for itself called <code class=\"hljs\">Unique&lt;T&gt;</code> which:</p>\n<ul>\n<li>wraps a <code class=\"hljs\">*const T</code> for variance</li>\n<li>includes a <code class=\"hljs\">PhantomData&lt;T&gt;</code></li>\n<li>auto-derives <code class=\"hljs\">Send</code>/<code class=\"hljs\">Sync</code> as if T was contained</li>\n<li>marks the pointer as <code class=\"hljs\">NonZero</code> for the null-pointer optimization</li>\n</ul>\n<h2 id=\"table-of-phantomdata-patterns\"><a class=\"header\" href=\"#table-of-phantomdata-patterns\">Table of <code>PhantomData</code> patterns</a></h2>\n<p>Here’s a table of all the wonderful ways <code class=\"hljs\">PhantomData</code> could be used:</p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Phantom type</th><th style=\"text-align: center\">variance of <code class=\"hljs\">'a</code></th><th style=\"text-align: center\">variance of <code class=\"hljs\">T</code></th><th style=\"text-align: center\"><code class=\"hljs\">Send</code>/<code class=\"hljs\">Sync</code><br>(or lack thereof)</th><th style=\"text-align: center\">dangling <code class=\"hljs\">'a</code> or <code class=\"hljs\">T</code> in drop glue<br>(<em>e.g.</em>, <code class=\"hljs\">#[may_dangle] Drop</code>)</th></tr></thead><tbody>\n<tr><td><code class=\"hljs\">PhantomData&lt;T&gt;</code></td><td style=\"text-align: center\">-</td><td style=\"text-align: center\"><strong>cov</strong>ariant</td><td style=\"text-align: center\">inherited</td><td style=\"text-align: center\">disallowed (\"owns <code class=\"hljs\">T</code>\")</td></tr>\n<tr><td><code class=\"hljs\">PhantomData&lt;&amp;'a T&gt;</code></td><td style=\"text-align: center\"><strong>cov</strong>ariant</td><td style=\"text-align: center\"><strong>cov</strong>ariant</td><td style=\"text-align: center\"><code class=\"hljs\">Send + Sync</code><br>requires<br><code class=\"hljs\">T : Sync</code></td><td style=\"text-align: center\">allowed</td></tr>\n<tr><td><code class=\"hljs\">PhantomData&lt;&amp;'a mut T&gt;</code></td><td style=\"text-align: center\"><strong>cov</strong>ariant</td><td style=\"text-align: center\"><strong>inv</strong>ariant</td><td style=\"text-align: center\">inherited</td><td style=\"text-align: center\">allowed</td></tr>\n<tr><td><code class=\"hljs\">PhantomData&lt;*const T&gt;</code></td><td style=\"text-align: center\">-</td><td style=\"text-align: center\"><strong>cov</strong>ariant</td><td style=\"text-align: center\"><code class=\"hljs\">!Send + !Sync</code></td><td style=\"text-align: center\">allowed</td></tr>\n<tr><td><code class=\"hljs\">PhantomData&lt;*mut T&gt;</code></td><td style=\"text-align: center\">-</td><td style=\"text-align: center\"><strong>inv</strong>ariant</td><td style=\"text-align: center\"><code class=\"hljs\">!Send + !Sync</code></td><td style=\"text-align: center\">allowed</td></tr>\n<tr><td><code class=\"hljs\">PhantomData&lt;fn(T)&gt;</code></td><td style=\"text-align: center\">-</td><td style=\"text-align: center\"><strong>contra</strong>variant</td><td style=\"text-align: center\"><code class=\"hljs\">Send + Sync</code></td><td style=\"text-align: center\">allowed</td></tr>\n<tr><td><code class=\"hljs\">PhantomData&lt;fn() -&gt; T&gt;</code></td><td style=\"text-align: center\">-</td><td style=\"text-align: center\"><strong>cov</strong>ariant</td><td style=\"text-align: center\"><code class=\"hljs\">Send + Sync</code></td><td style=\"text-align: center\">allowed</td></tr>\n<tr><td><code class=\"hljs\">PhantomData&lt;fn(T) -&gt; T&gt;</code></td><td style=\"text-align: center\">-</td><td style=\"text-align: center\"><strong>inv</strong>ariant</td><td style=\"text-align: center\"><code class=\"hljs\">Send + Sync</code></td><td style=\"text-align: center\">allowed</td></tr>\n<tr><td><code class=\"hljs\">PhantomData&lt;Cell&lt;&amp;'a ()&gt;&gt;</code></td><td style=\"text-align: center\"><strong>inv</strong>ariant</td><td style=\"text-align: center\">-</td><td style=\"text-align: center\"><code class=\"hljs\">Send + !Sync</code></td><td style=\"text-align: center\">allowed</td></tr>\n</tbody></table>\n</div>\n<ul>\n<li>Note: opting out of the <code class=\"hljs\">Unpin</code> auto-trait requires the dedicated <a href=\"../core/marker/struct.PhantomPinned.html\"><code class=\"hljs\">PhantomPinned</code></a> type instead.</li>\n</ul>\n\n                    </main>\n\n                    <nav class=\"nav-wrapper\" aria-label=\"Page navigation\">\n                        <!-- Mobile navigation buttons -->\n                            <a rel=\"prev\" href=\"dropck.html\" class=\"mobile-nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                                <i class=\"fa fa-angle-left\"></i>\n                            </a>\n\n                            <a rel=\"next prefetch\" href=\"borrow-splitting.html\" class=\"mobile-nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                                <i class=\"fa fa-angle-right\"></i>\n                            </a>\n\n                        <div style=\"clear: both\"></div>\n                    </nav>\n                </div>\n            </div>\n\n            <nav class=\"nav-wide-wrapper\" aria-label=\"Page navigation\">\n                    <a rel=\"prev\" href=\"dropck.html\" class=\"nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                        <i class=\"fa fa-angle-left\"></i>\n                    </a>\n\n                    <a rel=\"next prefetch\" href=\"borrow-splitting.html\" class=\"nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                        <i class=\"fa fa-angle-right\"></i>\n                    </a>\n            </nav>\n\n        </div>\n\n\n\n\n        <script>\n            window.playground_copyable = true;\n        </script>\n\n\n        <script src=\"elasticlunr.min.js\"></script>\n        <script src=\"mark.min.js\"></script>\n        <script src=\"searcher.js\"></script>\n\n        <script src=\"clipboard.min.js\"></script>\n        <script src=\"highlight.js\"></script>\n        <script src=\"book.js\"></script>\n\n        <!-- Custom JS scripts -->\n\n\n    </div>\n    \n\n</body></html>",
	"crawlDate": "2024-07-28T05:13:05.502Z"
}