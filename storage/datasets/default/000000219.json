{
	"title": "Appendix: Glossary - The Cargo Book",
	"url": "https://doc.rust-lang.org/cargo/appendix/glossary.html",
	"markdown": "# Appendix: Glossary - The Cargo Book\n\n## [Artifact](#artifact)\n\nAn _artifact_ is the file or set of files created as a result of the compilation process. This includes linkable libraries, executable binaries, and generated documentation.\n\n## [Cargo](#cargo)\n\n_Cargo_ is the Rust [_package manager_](#package-manager), and the primary topic of this book.\n\n## [Cargo.lock](#cargolock)\n\nSee [_lock file_](#lock-file).\n\n## [Cargo.toml](#cargotoml)\n\nSee [_manifest_](#manifest).\n\n## [Crate](#crate)\n\nA Rust _crate_ is either a library or an executable program, referred to as either a _library crate_ or a _binary crate_, respectively.\n\nEvery [target](#target) defined for a Cargo [package](#package) is a _crate_.\n\nLoosely, the term _crate_ may refer to either the source code of the target or to the compiled artifact that the target produces. It may also refer to a compressed package fetched from a [registry](#registry).\n\nThe source code for a given crate may be subdivided into [_modules_](#module).\n\n## [Edition](#edition)\n\nA _Rust edition_ is a developmental landmark of the Rust language. The [edition of a package](about:blank/reference/manifest.html#the-edition-field) is specified in the `Cargo.toml` [manifest](#manifest), and individual targets can specify which edition they use. See the [Edition Guide](../../edition-guide/index.html) for more information.\n\n## [Feature](#feature)\n\nThe meaning of _feature_ depends on the context:\n\n-   A [_feature_](../reference/features.html) is a named flag which allows for conditional compilation. A feature can refer to an optional dependency, or an arbitrary name defined in a `Cargo.toml` [manifest](#manifest) that can be checked within source code.\n    \n-   Cargo has [_unstable feature flags_](../reference/unstable.html) which can be used to enable experimental behavior of Cargo itself.\n    \n-   The Rust compiler and Rustdoc have their own unstable feature flags (see [The Unstable Book](https://doc.rust-lang.org/nightly/unstable-book/index.html) and [The Rustdoc Book](https://doc.rust-lang.org/nightly/rustdoc/unstable-features.html)).\n    \n-   CPU targets have [_target features_](about:blank/reference/attributes/codegen.html#the-target_feature-attribute) which specify capabilities of a CPU.\n    \n\n## [Index](#index)\n\nThe _index_ is the searchable list of [_crates_](#crate) in a [_registry_](#registry).\n\n## [Lock file](#lock-file)\n\nThe `Cargo.lock` _lock file_ is a file that captures the exact version of every dependency used in a [_workspace_](#workspace) or [_package_](#package). It is automatically generated by Cargo. See [Cargo.toml vs Cargo.lock](../guide/cargo-toml-vs-cargo-lock.html).\n\n## [Manifest](#manifest)\n\nA [_manifest_](../reference/manifest.html) is a description of a [package](#package) or a [workspace](#workspace) in a file named `Cargo.toml`.\n\nA [_virtual manifest_](../reference/workspaces.html) is a `Cargo.toml` file that only describes a workspace, and does not include a package.\n\n## [Member](#member)\n\nA _member_ is a [_package_](#package) that belongs to a [_workspace_](#workspace).\n\n## [Module](#module)\n\nRust’s module system is used to organize code into logical units called _modules_, which provide isolated namespaces within the code.\n\nThe source code for a given [crate](#crate) may be subdivided into one or more separate modules. This is usually done to organize the code into areas of related functionality or to control the visible scope (public/private) of symbols within the source (structs, functions, and so on).\n\nA [`Cargo.toml`](#manifest) file is primarily concerned with the [package](#package) it defines, its crates, and the packages of the crates on which they depend. Nevertheless, you will see the term “module” often when working with Rust, so you should understand its relationship to a given crate.\n\n## [Package](#package)\n\nA _package_ is a collection of source files and a `Cargo.toml` [_manifest_](#manifest) file which describes the package. A package has a name and version which is used for specifying dependencies between packages.\n\nA package contains multiple [_targets_](#target), each of which is a [_crate_](#crate). The `Cargo.toml` file describes the type of the crates (binary or library) within the package, along with some metadata about each one — how each is to be built, what their direct dependencies are, etc., as described throughout this book.\n\nThe _package root_ is the directory where the package’s `Cargo.toml` manifest is located. (Compare with [_workspace root_](#workspace).)\n\nThe [_package ID specification_](../reference/pkgid-spec.html), or _SPEC_, is a string used to uniquely reference a specific version of a package from a specific source.\n\nSmall to medium sized Rust projects will only need a single package, though it is common for them to have multiple crates.\n\nLarger projects may involve multiple packages, in which case Cargo [_workspaces_](#workspace) can be used to manage common dependencies and other related metadata between the packages.\n\n## [Package manager](#package-manager)\n\nBroadly speaking, a _package manager_ is a program (or collection of related programs) in a software ecosystem that automates the process of obtaining, installing, and upgrading artifacts. Within a programming language ecosystem, a package manager is a developer-focused tool whose primary functionality is to download library artifacts and their dependencies from some central repository; this capability is often combined with the ability to perform software builds (by invoking the language-specific compiler).\n\n[_Cargo_](#cargo) is the package manager within the Rust ecosystem. Cargo downloads your Rust [package](#package)’s dependencies ([_artifacts_](#artifact) known as [_crates_](#crate)), compiles your packages, makes distributable packages, and (optionally) uploads them to [crates.io](https://crates.io/), the Rust community’s [_package registry_](#registry).\n\n## [Package registry](#package-registry)\n\nSee [_registry_](#registry).\n\n## [Project](#project)\n\nAnother name for a [package](#package).\n\n## [Registry](#registry)\n\nA _registry_ is a service that contains a collection of downloadable [_crates_](#crate) that can be installed or used as dependencies for a [_package_](#package). The default registry in the Rust ecosystem is [crates.io](https://crates.io/). The registry has an [_index_](#index) which contains a list of all crates, and tells Cargo how to download the crates that are needed.\n\n## [Source](#source)\n\nA _source_ is a provider that contains [_crates_](#crate) that may be included as dependencies for a [_package_](#package). There are several kinds of sources:\n\n-   **Registry source** — See [registry](#registry).\n-   **Local registry source** — A set of crates stored as compressed files on the filesystem. See [Local Registry Sources](about:blank/reference/source-replacement.html#local-registry-sources).\n-   **Directory source** — A set of crates stored as uncompressed files on the filesystem. See [Directory Sources](about:blank/reference/source-replacement.html#directory-sources).\n-   **Path source** — An individual package located on the filesystem (such as a [path dependency](about:blank/reference/specifying-dependencies.html#specifying-path-dependencies)) or a set of multiple packages (such as [path overrides](about:blank/reference/overriding-dependencies.html#paths-overrides)).\n-   **Git source** — Packages located in a git repository (such as a [git dependency](about:blank/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories) or [git source](../reference/source-replacement.html)).\n\nSee [Source Replacement](../reference/source-replacement.html) for more information.\n\n## [Spec](#spec)\n\nSee [package ID specification](#package).\n\n## [Target](#target)\n\nThe meaning of the term _target_ depends on the context:\n\n-   **Cargo Target** — Cargo [_packages_](#package) consist of _targets_ which correspond to [_artifacts_](#artifact) that will be produced. Packages can have library, binary, example, test, and benchmark targets. The [list of targets](about:blank/reference/cargo-targets.html#configuring-a-target) are configured in the `Cargo.toml` [_manifest_](#manifest), often inferred automatically by the [directory layout](../guide/project-layout.html) of the source files.\n    \n-   **Target Directory** — Cargo places all built artifacts and intermediate files in the _target_ directory. By default this is a directory named `target` at the [_workspace_](#workspace) root, or the package root if not using a workspace. The directory may be changed with the `--target-dir` command-line option, the `CARGO_TARGET_DIR` [environment variable](../reference/environment-variables.html), or the `build.target-dir` [config option](../reference/config.html).\n    \n-   **Target Architecture** — The OS and machine architecture for the built artifacts are typically referred to as a _target_.\n    \n-   **Target Triple** — A triple is a specific format for specifying a target architecture. Triples may be referred to as a _target triple_ which is the architecture for the artifact produced, and the _host triple_ which is the architecture that the compiler is running on. The target triple can be specified with the `--target` command-line option or the `build.target` [config option](../reference/config.html). The general format of the triple is `<arch><sub>-<vendor>-<sys>-<abi>` where:\n    \n    -   `arch` = The base CPU architecture, for example `x86_64`, `i686`, `arm`, `thumb`, `mips`, etc.\n    -   `sub` = The CPU sub-architecture, for example `arm` has `v7`, `v7s`, `v5te`, etc.\n    -   `vendor` = The vendor, for example `unknown`, `apple`, `pc`, `nvidia`, etc.\n    -   `sys` = The system name, for example `linux`, `windows`, `darwin`, etc. `none` is typically used for bare-metal without an OS.\n    -   `abi` = The ABI, for example `gnu`, `android`, `eabi`, etc.\n    \n    Some parameters may be omitted. Run `rustc --print target-list` for a list of supported targets.\n    \n\n## [Test Targets](#test-targets)\n\nCargo _test targets_ generate binaries which help verify proper operation and correctness of code. There are two types of test artifacts:\n\n-   **Unit test** — A _unit test_ is an executable binary compiled directly from a library or a binary target. It contains the entire contents of the library or binary code, and runs `#[test]` annotated functions, intended to verify individual units of code.\n-   **Integration test target** — An [_integration test target_](about:blank/reference/cargo-targets.html#integration-tests) is an executable binary compiled from a _test target_ which is a distinct [_crate_](#crate) whose source is located in the `tests` directory or specified by the [`[[test]]` table](about:blank/reference/cargo-targets.html#configuring-a-target) in the `Cargo.toml` [_manifest_](#manifest). It is intended to only test the public API of a library, or execute a binary to verify its operation.\n\n## [Workspace](#workspace)\n\nA [_workspace_](../reference/workspaces.html) is a collection of one or more [_packages_](#package) that share common dependency resolution (with a shared `Cargo.lock` [_lock file_](#lock-file)), output directory, and various settings such as profiles.\n\nA [_virtual workspace_](../reference/workspaces.html) is a workspace where the root `Cargo.toml` [_manifest_](#manifest) does not define a package, and only lists the workspace [_members_](#member).\n\nThe _workspace root_ is the directory where the workspace’s `Cargo.toml` manifest is located. (Compare with [_package root_](#package).)",
	"html": "<!DOCTYPE html><html lang=\"en\" class=\"light\" dir=\"ltr\"><head>\n        <!-- Book generated using mdBook -->\n        <meta charset=\"UTF-8\">\n        <title>Appendix: Glossary - The Cargo Book</title>\n\n\n        <!-- Custom HTML head -->\n        <style>\n            dd {\n                margin-bottom: 1em;\n            }\n        </style>\n\n        <meta name=\"description\" content=\"\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <meta name=\"theme-color\" content=\"rgb(255, 255, 255)\">\n\n        <link rel=\"shortcut icon\" href=\"../favicon.png\">\n        <link rel=\"stylesheet\" href=\"../css/variables.css\">\n        <link rel=\"stylesheet\" href=\"../css/general.css\">\n        <link rel=\"stylesheet\" href=\"../css/chrome.css\">\n        <link rel=\"stylesheet\" href=\"../css/print.css\" media=\"print\">\n\n        <!-- Fonts -->\n        <link rel=\"stylesheet\" href=\"../FontAwesome/css/font-awesome.css\">\n        <link rel=\"stylesheet\" href=\"../fonts/fonts.css\">\n\n        <!-- Highlight.js Stylesheets -->\n        <link rel=\"stylesheet\" href=\"../highlight.css\">\n        <link rel=\"stylesheet\" href=\"../tomorrow-night.css\" disabled=\"\">\n        <link rel=\"stylesheet\" href=\"../ayu-highlight.css\" disabled=\"\">\n\n        <!-- Custom theme stylesheets -->\n\n    </head>\n    <body class=\"js sidebar-visible\">\n    <div id=\"body-container\">\n        <!-- Provide site root to javascript -->\n        <script>\n            var path_to_root = \"../\";\n            var default_theme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"navy\" : \"light\";\n        </script>\n\n        <!-- Work around some values being stored in localStorage wrapped in quotes -->\n        <script>\n            try {\n                var theme = localStorage.getItem('mdbook-theme');\n                var sidebar = localStorage.getItem('mdbook-sidebar');\n\n                if (theme.startsWith('\"') && theme.endsWith('\"')) {\n                    localStorage.setItem('mdbook-theme', theme.slice(1, theme.length - 1));\n                }\n\n                if (sidebar.startsWith('\"') && sidebar.endsWith('\"')) {\n                    localStorage.setItem('mdbook-sidebar', sidebar.slice(1, sidebar.length - 1));\n                }\n            } catch (e) { }\n        </script>\n\n        <!-- Set the theme before any content is loaded, prevents flash -->\n        <script>\n            var theme;\n            try { theme = localStorage.getItem('mdbook-theme'); } catch(e) { }\n            if (theme === null || theme === undefined) { theme = default_theme; }\n            var html = document.querySelector('html');\n            html.classList.remove('light')\n            html.classList.add(theme);\n            var body = document.querySelector('body');\n            body.classList.remove('no-js')\n            body.classList.add('js');\n        </script>\n\n        <input type=\"checkbox\" id=\"sidebar-toggle-anchor\" class=\"hidden\">\n\n        <!-- Hide / unhide sidebar before it is displayed -->\n        <script>\n            var body = document.querySelector('body');\n            var sidebar = null;\n            var sidebar_toggle = document.getElementById(\"sidebar-toggle-anchor\");\n            if (document.body.clientWidth >= 1080) {\n                try { sidebar = localStorage.getItem('mdbook-sidebar'); } catch(e) { }\n                sidebar = sidebar || 'visible';\n            } else {\n                sidebar = 'hidden';\n            }\n            sidebar_toggle.checked = sidebar === 'visible';\n            body.classList.remove('sidebar-visible');\n            body.classList.add(\"sidebar-\" + sidebar);\n        </script>\n\n        <nav id=\"sidebar\" class=\"sidebar\" aria-label=\"Table of contents\" aria-hidden=\"false\">\n            <div class=\"sidebar-scrollbox\">\n                <ol class=\"chapter\"><li class=\"chapter-item expanded affix \"><a href=\"../index.html\" tabindex=\"0\">Introduction</a></li><li class=\"chapter-item expanded \"><a href=\"../getting-started/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.</strong> Getting Started</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../getting-started/installation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.1.</strong> Installation</a></li><li class=\"chapter-item expanded \"><a href=\"../getting-started/first-steps.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.2.</strong> First Steps with Cargo</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../guide/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.</strong> Cargo Guide</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../guide/why-cargo-exists.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.1.</strong> Why Cargo Exists</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/creating-a-new-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.2.</strong> Creating a New Package</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/working-on-an-existing-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.3.</strong> Working on an Existing Package</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/dependencies.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.4.</strong> Dependencies</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/project-layout.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.5.</strong> Package Layout</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/cargo-toml-vs-cargo-lock.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.6.</strong> Cargo.toml vs Cargo.lock</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/tests.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.7.</strong> Tests</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/continuous-integration.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.8.</strong> Continuous Integration</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/cargo-home.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.9.</strong> Cargo Home</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/build-cache.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.10.</strong> Build Cache</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.</strong> Cargo Reference</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/specifying-dependencies.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.1.</strong> Specifying Dependencies</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/overriding-dependencies.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.1.1.</strong> Overriding Dependencies</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/manifest.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.2.</strong> The Manifest Format</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/cargo-targets.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.2.1.</strong> Cargo Targets</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/workspaces.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.3.</strong> Workspaces</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/features.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.4.</strong> Features</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/features-examples.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.4.1.</strong> Features Examples</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/profiles.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.5.</strong> Profiles</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/config.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.6.</strong> Configuration</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/environment-variables.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.7.</strong> Environment Variables</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/build-scripts.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.8.</strong> Build Scripts</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/build-script-examples.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.8.1.</strong> Build Script Examples</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/publishing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.9.</strong> Publishing on crates.io</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/pkgid-spec.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.10.</strong> Package ID Specifications</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/source-replacement.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.11.</strong> Source Replacement</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/external-tools.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.12.</strong> External Tools</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/registries.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.</strong> Registries</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/registry-authentication.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.1.</strong> Registry Authentication</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/credential-provider-protocol.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.1.1.</strong> Credential Provider Protocol</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/running-a-registry.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.2.</strong> Running a Registry</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/registry-index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.2.1.</strong> Registry Index</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/registry-web-api.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.2.2.</strong> Registry Web API</a></li></ol></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/resolver.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.14.</strong> Dependency Resolution</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/semver.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.15.</strong> SemVer Compatibility</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/future-incompat-report.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.16.</strong> Future incompat report</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/timings.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.17.</strong> Reporting build timings</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/unstable.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.18.</strong> Unstable Features</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../commands/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.</strong> Cargo Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../commands/general-commands.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.</strong> General Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../commands/cargo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.1.</strong> cargo</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-help.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.2.</strong> cargo help</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-version.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.3.</strong> cargo version</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../commands/build-commands.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.</strong> Build Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-bench.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.1.</strong> cargo bench</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-build.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.2.</strong> cargo build</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-check.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.3.</strong> cargo check</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-clean.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.4.</strong> cargo clean</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-doc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.5.</strong> cargo doc</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-fetch.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.6.</strong> cargo fetch</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-fix.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.7.</strong> cargo fix</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-run.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.8.</strong> cargo run</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-rustc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.9.</strong> cargo rustc</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-rustdoc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.10.</strong> cargo rustdoc</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-test.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.11.</strong> cargo test</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-report.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.12.</strong> cargo report</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../commands/manifest-commands.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.</strong> Manifest Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-add.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.1.</strong> cargo add</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-generate-lockfile.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.2.</strong> cargo generate-lockfile</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-locate-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.3.</strong> cargo locate-project</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-metadata.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.4.</strong> cargo metadata</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-pkgid.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.5.</strong> cargo pkgid</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-remove.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.6.</strong> cargo remove</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-tree.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.7.</strong> cargo tree</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-update.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.8.</strong> cargo update</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-vendor.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.9.</strong> cargo vendor</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-verify-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.10.</strong> cargo verify-project</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../commands/package-commands.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.</strong> Package Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-init.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.1.</strong> cargo init</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-install.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.2.</strong> cargo install</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-new.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.3.</strong> cargo new</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-search.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.4.</strong> cargo search</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-uninstall.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.5.</strong> cargo uninstall</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../commands/publishing-commands.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.</strong> Publishing Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-login.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.1.</strong> cargo login</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-logout.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.2.</strong> cargo logout</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-owner.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.3.</strong> cargo owner</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-package.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.4.</strong> cargo package</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-publish.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.5.</strong> cargo publish</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-yank.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.6.</strong> cargo yank</a></li></ol></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../faq.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.</strong> FAQ</a></li><li class=\"chapter-item expanded \"><a href=\"../appendix/glossary.html\" class=\"active\" tabindex=\"0\"><strong aria-hidden=\"true\">6.</strong> Appendix: Glossary</a></li><li class=\"chapter-item expanded \"><a href=\"../appendix/git-authentication.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.</strong> Appendix: Git Authentication</a></li></ol>\n            </div>\n            <div id=\"sidebar-resize-handle\" class=\"sidebar-resize-handle\">\n                <div class=\"sidebar-resize-indicator\"></div>\n            </div>\n        </nav>\n\n        <!-- Track and set sidebar scroll position -->\n        <script>\n            var sidebarScrollbox = document.querySelector('#sidebar .sidebar-scrollbox');\n            sidebarScrollbox.addEventListener('click', function(e) {\n                if (e.target.tagName === 'A') {\n                    sessionStorage.setItem('sidebar-scroll', sidebarScrollbox.scrollTop);\n                }\n            }, { passive: true });\n            var sidebarScrollTop = sessionStorage.getItem('sidebar-scroll');\n            sessionStorage.removeItem('sidebar-scroll');\n            if (sidebarScrollTop) {\n                // preserve sidebar scroll position when navigating via links within sidebar\n                sidebarScrollbox.scrollTop = sidebarScrollTop;\n            } else {\n                // scroll sidebar to current active section when navigating via \"next/previous chapter\" buttons\n                var activeSection = document.querySelector('#sidebar .active');\n                if (activeSection) {\n                    activeSection.scrollIntoView({ block: 'center' });\n                }\n            }\n        </script>\n\n        <div id=\"page-wrapper\" class=\"page-wrapper\">\n\n            <div class=\"page\">\n                                <div id=\"menu-bar-hover-placeholder\"></div>\n                <div id=\"menu-bar\" class=\"menu-bar\" style=\"top: 0px;\">\n                    <div class=\"left-buttons\">\n                        <label id=\"sidebar-toggle\" class=\"icon-button\" for=\"sidebar-toggle-anchor\" title=\"Toggle Table of Contents\" aria-label=\"Toggle Table of Contents\" aria-controls=\"sidebar\" aria-expanded=\"true\">\n                            <i class=\"fa fa-bars\"></i>\n                        </label>\n                        <button id=\"theme-toggle\" class=\"icon-button\" type=\"button\" title=\"Change theme\" aria-label=\"Change theme\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-controls=\"theme-list\">\n                            <i class=\"fa fa-paint-brush\"></i>\n                        </button>\n                        <ul id=\"theme-list\" class=\"theme-popup\" aria-label=\"Themes\" role=\"menu\">\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme theme-selected\" id=\"light\">Light</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"rust\">Rust</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"coal\">Coal</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"navy\">Navy</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"ayu\">Ayu</button></li>\n                        </ul>\n                        <button id=\"search-toggle\" class=\"icon-button\" type=\"button\" title=\"Search. (Shortkey: s)\" aria-label=\"Toggle Searchbar\" aria-expanded=\"false\" aria-keyshortcuts=\"S\" aria-controls=\"searchbar\">\n                            <i class=\"fa fa-search\"></i>\n                        </button>\n                    </div>\n\n                    <h1 class=\"menu-title\">The Cargo Book</h1>\n\n                    <div class=\"right-buttons\">\n                        <a href=\"../print.html\" title=\"Print this book\" aria-label=\"Print this book\">\n                            <i id=\"print-button\" class=\"fa fa-print\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/cargo/tree/master/src/doc/src\" title=\"Git repository\" aria-label=\"Git repository\">\n                            <i id=\"git-repository-button\" class=\"fa fa-github\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/cargo/edit/master/src/doc/src/appendix/glossary.md\" title=\"Suggest an edit\" aria-label=\"Suggest an edit\">\n                            <i id=\"git-edit-button\" class=\"fa fa-edit\"></i>\n                        </a>\n\n                    </div>\n                </div>\n\n                <div id=\"search-wrapper\" class=\"hidden\">\n                    <form id=\"searchbar-outer\" class=\"searchbar-outer\">\n                        <input type=\"search\" id=\"searchbar\" name=\"searchbar\" placeholder=\"Search this book ...\" aria-controls=\"searchresults-outer\" aria-describedby=\"searchresults-header\">\n                    </form>\n                    <div id=\"searchresults-outer\" class=\"searchresults-outer hidden\">\n                        <div id=\"searchresults-header\" class=\"searchresults-header\"></div>\n                        <ul id=\"searchresults\">\n                        </ul>\n                    </div>\n                </div>\n\n                <!-- Apply ARIA attributes after the sidebar and the sidebar toggle button are added to the DOM -->\n                <script>\n                    document.getElementById('sidebar-toggle').setAttribute('aria-expanded', sidebar === 'visible');\n                    document.getElementById('sidebar').setAttribute('aria-hidden', sidebar !== 'visible');\n                    Array.from(document.querySelectorAll('#sidebar a')).forEach(function(link) {\n                        link.setAttribute('tabIndex', sidebar === 'visible' ? 0 : -1);\n                    });\n                </script>\n\n                <div id=\"content\" class=\"content\">\n                    <main>\n                        <h1 id=\"glossary\"><a class=\"header\" href=\"#glossary\">Glossary</a></h1>\n<h2 id=\"artifact\"><a class=\"header\" href=\"#artifact\">Artifact</a></h2>\n<p>An <em>artifact</em> is the file or set of files created as a result of the\ncompilation process. This includes linkable libraries, executable binaries,\nand generated documentation.</p>\n<h2 id=\"cargo\"><a class=\"header\" href=\"#cargo\">Cargo</a></h2>\n<p><em>Cargo</em> is the Rust <a href=\"#package-manager\"><em>package manager</em></a>, and the primary\ntopic of this book.</p>\n<h2 id=\"cargolock\"><a class=\"header\" href=\"#cargolock\">Cargo.lock</a></h2>\n<p>See <a href=\"#lock-file\"><em>lock file</em></a>.</p>\n<h2 id=\"cargotoml\"><a class=\"header\" href=\"#cargotoml\">Cargo.toml</a></h2>\n<p>See <a href=\"#manifest\"><em>manifest</em></a>.</p>\n<h2 id=\"crate\"><a class=\"header\" href=\"#crate\">Crate</a></h2>\n<p>A Rust <em>crate</em> is either a library or an executable program, referred to as\neither a <em>library crate</em> or a <em>binary crate</em>, respectively.</p>\n<p>Every <a href=\"#target\">target</a> defined for a Cargo <a href=\"#package\">package</a> is a <em>crate</em>.</p>\n<p>Loosely, the term <em>crate</em> may refer to either the source code of the target or\nto the compiled artifact that the target produces. It may also refer to a\ncompressed package fetched from a <a href=\"#registry\">registry</a>.</p>\n<p>The source code for a given crate may be subdivided into <a href=\"#module\"><em>modules</em></a>.</p>\n<h2 id=\"edition\"><a class=\"header\" href=\"#edition\">Edition</a></h2>\n<p>A <em>Rust edition</em> is a developmental landmark of the Rust language. The\n<a href=\"../reference/manifest.html#the-edition-field\">edition of a package</a> is specified in the <code class=\"hljs\">Cargo.toml</code>\n<a href=\"#manifest\">manifest</a>, and individual targets can specify which edition they\nuse. See the <a href=\"../../edition-guide/index.html\">Edition Guide</a> for more information.</p>\n<h2 id=\"feature\"><a class=\"header\" href=\"#feature\">Feature</a></h2>\n<p>The meaning of <em>feature</em> depends on the context:</p>\n<ul>\n<li>\n<p>A <a href=\"../reference/features.html\"><em>feature</em></a> is a named flag which allows for conditional\ncompilation. A feature can refer to an optional dependency, or an arbitrary\nname defined in a <code class=\"hljs\">Cargo.toml</code> <a href=\"#manifest\">manifest</a> that can be checked\nwithin source code.</p>\n</li>\n<li>\n<p>Cargo has <a href=\"../reference/unstable.html\"><em>unstable feature flags</em></a> which can be used to\nenable experimental behavior of Cargo itself.</p>\n</li>\n<li>\n<p>The Rust compiler and Rustdoc have their own unstable feature flags (see\n<a href=\"https://doc.rust-lang.org/nightly/unstable-book/index.html\">The Unstable Book</a> and <a href=\"https://doc.rust-lang.org/nightly/rustdoc/unstable-features.html\">The Rustdoc\nBook</a>).</p>\n</li>\n<li>\n<p>CPU targets have <a href=\"../../reference/attributes/codegen.html#the-target_feature-attribute\"><em>target features</em></a> which specify\ncapabilities of a CPU.</p>\n</li>\n</ul>\n<h2 id=\"index\"><a class=\"header\" href=\"#index\">Index</a></h2>\n<p>The <em>index</em> is the searchable list of <a href=\"#crate\"><em>crates</em></a> in a\n<a href=\"#registry\"><em>registry</em></a>.</p>\n<h2 id=\"lock-file\"><a class=\"header\" href=\"#lock-file\">Lock file</a></h2>\n<p>The <code class=\"hljs\">Cargo.lock</code> <em>lock file</em> is a file that captures the exact version of\nevery dependency used in a <a href=\"#workspace\"><em>workspace</em></a> or\n<a href=\"#package\"><em>package</em></a>. It is automatically generated by Cargo. See\n<a href=\"../guide/cargo-toml-vs-cargo-lock.html\">Cargo.toml vs Cargo.lock</a>.</p>\n<h2 id=\"manifest\"><a class=\"header\" href=\"#manifest\">Manifest</a></h2>\n<p>A <a href=\"../reference/manifest.html\"><em>manifest</em></a> is a description of a <a href=\"#package\">package</a> or a\n<a href=\"#workspace\">workspace</a> in a file named <code class=\"hljs\">Cargo.toml</code>.</p>\n<p>A <a href=\"../reference/workspaces.html\"><em>virtual manifest</em></a> is a <code class=\"hljs\">Cargo.toml</code> file that only describes a\nworkspace, and does not include a package.</p>\n<h2 id=\"member\"><a class=\"header\" href=\"#member\">Member</a></h2>\n<p>A <em>member</em> is a <a href=\"#package\"><em>package</em></a> that belongs to a\n<a href=\"#workspace\"><em>workspace</em></a>.</p>\n<h2 id=\"module\"><a class=\"header\" href=\"#module\">Module</a></h2>\n<p>Rust’s module system is used to organize code into logical units called\n<em>modules</em>, which provide isolated namespaces within the code.</p>\n<p>The source code for a given <a href=\"#crate\">crate</a> may be subdivided into one or more\nseparate modules. This is usually done to organize the code into areas of\nrelated functionality or to control the visible scope (public/private) of\nsymbols within the source (structs, functions, and so on).</p>\n<p>A <a href=\"#manifest\"><code class=\"hljs\">Cargo.toml</code></a> file is primarily concerned with the\n<a href=\"#package\">package</a> it defines, its crates, and the packages of the crates on\nwhich they depend. Nevertheless, you will see the term “module” often when\nworking with Rust, so you should understand its relationship to a given crate.</p>\n<h2 id=\"package\"><a class=\"header\" href=\"#package\">Package</a></h2>\n<p>A <em>package</em> is a collection of source files and a <code class=\"hljs\">Cargo.toml</code>\n<a href=\"#manifest\"><em>manifest</em></a> file which describes the package. A package has a name\nand version which is used for specifying dependencies between packages.</p>\n<p>A package contains multiple <a href=\"#target\"><em>targets</em></a>, each of which is a\n<a href=\"#crate\"><em>crate</em></a>. The <code class=\"hljs\">Cargo.toml</code> file describes the type of the crates\n(binary or library) within the package, along with some metadata about each\none — how each is to be built, what their direct dependencies are, etc., as\ndescribed throughout this book.</p>\n<p>The <em>package root</em> is the directory where the package’s <code class=\"hljs\">Cargo.toml</code> manifest\nis located. (Compare with <a href=\"#workspace\"><em>workspace root</em></a>.)</p>\n<p>The <a href=\"../reference/pkgid-spec.html\"><em>package ID specification</em></a>, or <em>SPEC</em>, is a string used to\nuniquely reference a specific version of a package from a specific source.</p>\n<p>Small to medium sized Rust projects will only need a single package, though it\nis common for them to have multiple crates.</p>\n<p>Larger projects may involve multiple packages, in which case Cargo\n<a href=\"#workspace\"><em>workspaces</em></a> can be used to manage common dependencies and other\nrelated metadata between the packages.</p>\n<h2 id=\"package-manager\"><a class=\"header\" href=\"#package-manager\">Package manager</a></h2>\n<p>Broadly speaking, a <em>package manager</em> is a program (or collection of related\nprograms) in a software ecosystem that automates the process of obtaining,\ninstalling, and upgrading artifacts. Within a programming language ecosystem,\na package manager is a developer-focused tool whose primary functionality is\nto download library artifacts and their dependencies from some central\nrepository; this capability is often combined with the ability to perform\nsoftware builds (by invoking the language-specific compiler).</p>\n<p><a href=\"#cargo\"><em>Cargo</em></a> is the package manager within the Rust ecosystem. Cargo\ndownloads your Rust <a href=\"#package\">package</a>’s dependencies\n(<a href=\"#artifact\"><em>artifacts</em></a> known as <a href=\"#crate\"><em>crates</em></a>), compiles your\npackages, makes distributable packages, and (optionally) uploads them to\n<a href=\"https://crates.io/\">crates.io</a>, the Rust community’s <a href=\"#registry\"><em>package registry</em></a>.</p>\n<h2 id=\"package-registry\"><a class=\"header\" href=\"#package-registry\">Package registry</a></h2>\n<p>See <a href=\"#registry\"><em>registry</em></a>.</p>\n<h2 id=\"project\"><a class=\"header\" href=\"#project\">Project</a></h2>\n<p>Another name for a <a href=\"#package\">package</a>.</p>\n<h2 id=\"registry\"><a class=\"header\" href=\"#registry\">Registry</a></h2>\n<p>A <em>registry</em> is a service that contains a collection of downloadable\n<a href=\"#crate\"><em>crates</em></a> that can be installed or used as dependencies for a\n<a href=\"#package\"><em>package</em></a>. The default registry in the Rust ecosystem is\n<a href=\"https://crates.io\">crates.io</a>. The registry has an <a href=\"#index\"><em>index</em></a> which\ncontains a list of all crates, and tells Cargo how to download the crates that\nare needed.</p>\n<h2 id=\"source\"><a class=\"header\" href=\"#source\">Source</a></h2>\n<p>A <em>source</em> is a provider that contains <a href=\"#crate\"><em>crates</em></a> that may be included\nas dependencies for a <a href=\"#package\"><em>package</em></a>. There are several kinds of\nsources:</p>\n<ul>\n<li><strong>Registry source</strong> — See <a href=\"#registry\">registry</a>.</li>\n<li><strong>Local registry source</strong> — A set of crates stored as compressed files on\nthe filesystem. See <a href=\"../reference/source-replacement.html#local-registry-sources\">Local Registry Sources</a>.</li>\n<li><strong>Directory source</strong> — A set of crates stored as uncompressed files on the\nfilesystem. See <a href=\"../reference/source-replacement.html#directory-sources\">Directory Sources</a>.</li>\n<li><strong>Path source</strong> — An individual package located on the filesystem (such as a\n<a href=\"../reference/specifying-dependencies.html#specifying-path-dependencies\">path dependency</a>) or a set of multiple packages (such as <a href=\"../reference/overriding-dependencies.html#paths-overrides\">path overrides</a>).</li>\n<li><strong>Git source</strong> — Packages located in a git repository (such as a <a href=\"../reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories\">git\ndependency</a> or <a href=\"../reference/source-replacement.html\">git source</a>).</li>\n</ul>\n<p>See <a href=\"../reference/source-replacement.html\">Source Replacement</a> for more information.</p>\n<h2 id=\"spec\"><a class=\"header\" href=\"#spec\">Spec</a></h2>\n<p>See <a href=\"#package\">package ID specification</a>.</p>\n<h2 id=\"target\"><a class=\"header\" href=\"#target\">Target</a></h2>\n<p>The meaning of the term <em>target</em> depends on the context:</p>\n<ul>\n<li>\n<p><strong>Cargo Target</strong> — Cargo <a href=\"#package\"><em>packages</em></a> consist of <em>targets</em> which\ncorrespond to <a href=\"#artifact\"><em>artifacts</em></a> that will be produced. Packages can\nhave library, binary, example, test, and benchmark targets. The\n<a href=\"../reference/cargo-targets.html#configuring-a-target\">list of targets</a> are configured in the <code class=\"hljs\">Cargo.toml</code>\n<a href=\"#manifest\"><em>manifest</em></a>, often inferred automatically by the <a href=\"../guide/project-layout.html\">directory\nlayout</a> of the source files.</p>\n</li>\n<li>\n<p><strong>Target Directory</strong> — Cargo places all built artifacts and intermediate\nfiles in the <em>target</em> directory. By default this is a directory named\n<code class=\"hljs\">target</code> at the <a href=\"#workspace\"><em>workspace</em></a> root, or the package root if not\nusing a workspace. The directory may be changed with the <code class=\"hljs\">--target-dir</code>\ncommand-line option, the <code class=\"hljs\">CARGO_TARGET_DIR</code> <a href=\"../reference/environment-variables.html\">environment variable</a>, or the\n<code class=\"hljs\">build.target-dir</code> <a href=\"../reference/config.html\">config option</a>.</p>\n</li>\n<li>\n<p><strong>Target Architecture</strong> — The OS and machine architecture for the built\nartifacts are typically referred to as a <em>target</em>.</p>\n</li>\n<li>\n<p><strong>Target Triple</strong> — A triple is a specific format for specifying a target\narchitecture. Triples may be referred to as a <em>target triple</em> which is the\narchitecture for the artifact produced, and the <em>host triple</em> which is the\narchitecture that the compiler is running on. The target triple can be\nspecified with the <code class=\"hljs\">--target</code> command-line option or the <code class=\"hljs\">build.target</code>\n<a href=\"../reference/config.html\">config option</a>. The general format of the triple is\n<code class=\"hljs\">&lt;arch&gt;&lt;sub&gt;-&lt;vendor&gt;-&lt;sys&gt;-&lt;abi&gt;</code> where:</p>\n<ul>\n<li><code class=\"hljs\">arch</code> = The base CPU architecture, for example <code class=\"hljs\">x86_64</code>, <code class=\"hljs\">i686</code>, <code class=\"hljs\">arm</code>,\n<code class=\"hljs\">thumb</code>, <code class=\"hljs\">mips</code>, etc.</li>\n<li><code class=\"hljs\">sub</code> = The CPU sub-architecture, for example <code class=\"hljs\">arm</code> has <code class=\"hljs\">v7</code>, <code class=\"hljs\">v7s</code>,\n<code class=\"hljs\">v5te</code>, etc.</li>\n<li><code class=\"hljs\">vendor</code> = The vendor, for example <code class=\"hljs\">unknown</code>, <code class=\"hljs\">apple</code>, <code class=\"hljs\">pc</code>, <code class=\"hljs\">nvidia</code>, etc.</li>\n<li><code class=\"hljs\">sys</code> = The system name, for example <code class=\"hljs\">linux</code>, <code class=\"hljs\">windows</code>, <code class=\"hljs\">darwin</code>, etc.\n<code class=\"hljs\">none</code> is typically used for bare-metal without an OS.</li>\n<li><code class=\"hljs\">abi</code> = The ABI, for example <code class=\"hljs\">gnu</code>, <code class=\"hljs\">android</code>, <code class=\"hljs\">eabi</code>, etc.</li>\n</ul>\n<p>Some parameters may be omitted. Run <code class=\"hljs\">rustc --print target-list</code> for a list of\nsupported targets.</p>\n</li>\n</ul>\n<h2 id=\"test-targets\"><a class=\"header\" href=\"#test-targets\">Test Targets</a></h2>\n<p>Cargo <em>test targets</em> generate binaries which help verify proper operation and\ncorrectness of code. There are two types of test artifacts:</p>\n<ul>\n<li><strong>Unit test</strong> — A <em>unit test</em> is an executable binary compiled directly from\na library or a binary target. It contains the entire contents of the library\nor binary code, and runs <code class=\"hljs\">#[test]</code> annotated functions, intended to verify\nindividual units of code.</li>\n<li><strong>Integration test target</strong> — An <a href=\"../reference/cargo-targets.html#integration-tests\"><em>integration test\ntarget</em></a> is an executable binary compiled from a <em>test\ntarget</em> which is a distinct <a href=\"#crate\"><em>crate</em></a> whose source is located in the\n<code class=\"hljs\">tests</code> directory or specified by the <a href=\"../reference/cargo-targets.html#configuring-a-target\"><code class=\"hljs\">[[test]]</code> table</a> in the\n<code class=\"hljs\">Cargo.toml</code> <a href=\"#manifest\"><em>manifest</em></a>. It is intended to only test the public\nAPI of a library, or execute a binary to verify its operation.</li>\n</ul>\n<h2 id=\"workspace\"><a class=\"header\" href=\"#workspace\">Workspace</a></h2>\n<p>A <a href=\"../reference/workspaces.html\"><em>workspace</em></a> is a collection of one or more\n<a href=\"#package\"><em>packages</em></a> that share common dependency resolution (with a shared\n<code class=\"hljs\">Cargo.lock</code> <a href=\"#lock-file\"><em>lock file</em></a>), output directory, and various\nsettings such as profiles.</p>\n<p>A <a href=\"../reference/workspaces.html\"><em>virtual workspace</em></a> is a workspace where the root <code class=\"hljs\">Cargo.toml</code>\n<a href=\"#manifest\"><em>manifest</em></a> does not define a package, and only lists the\nworkspace <a href=\"#member\"><em>members</em></a>.</p>\n<p>The <em>workspace root</em> is the directory where the workspace’s <code class=\"hljs\">Cargo.toml</code>\nmanifest is located. (Compare with <a href=\"#package\"><em>package root</em></a>.)</p>\n\n                    </main>\n\n                    <nav class=\"nav-wrapper\" aria-label=\"Page navigation\">\n                        <!-- Mobile navigation buttons -->\n                            <a rel=\"prev\" href=\"../faq.html\" class=\"mobile-nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                                <i class=\"fa fa-angle-left\"></i>\n                            </a>\n\n                            <a rel=\"next prefetch\" href=\"../appendix/git-authentication.html\" class=\"mobile-nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                                <i class=\"fa fa-angle-right\"></i>\n                            </a>\n\n                        <div style=\"clear: both\"></div>\n                    </nav>\n                </div>\n            </div>\n\n            <nav class=\"nav-wide-wrapper\" aria-label=\"Page navigation\">\n                    <a rel=\"prev\" href=\"../faq.html\" class=\"nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                        <i class=\"fa fa-angle-left\"></i>\n                    </a>\n\n                    <a rel=\"next prefetch\" href=\"../appendix/git-authentication.html\" class=\"nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                        <i class=\"fa fa-angle-right\"></i>\n                    </a>\n            </nav>\n\n        </div>\n\n\n\n\n        <script>\n            window.playground_copyable = true;\n        </script>\n\n\n        <script src=\"../elasticlunr.min.js\"></script>\n        <script src=\"../mark.min.js\"></script>\n        <script src=\"../searcher.js\"></script>\n\n        <script src=\"../clipboard.min.js\"></script>\n        <script src=\"../highlight.js\"></script>\n        <script src=\"../book.js\"></script>\n\n        <!-- Custom JS scripts -->\n\n\n    </div>\n    \n\n</body></html>",
	"crawlDate": "2024-07-28T05:09:31.833Z"
}