{
	"title": "AsRef in std::convert - Rust",
	"url": "https://doc.rust-lang.org/stable/std/convert/trait.AsRef.html",
	"markdown": "# AsRef in std::convert - Rust\n\n```\npub trait AsRef<T>where\n    T: ?Sized,{\n    // Required method\n    fn as_ref(&self) -> &T;\n}\n```\n\nExpand description\n\nUsed to do a cheap reference-to-reference conversion.\n\nThis trait is similar to [`AsMut`](trait.AsMut.html \"trait std::convert::AsMut\") which is used for converting between mutable references. If you need to do a costly conversion it is better to implement [`From`](trait.From.html \"trait std::convert::From\") with type `&T` or write a custom function.\n\n## [§](#relation-to-borrow)Relation to `Borrow`\n\n`AsRef` has the same signature as [`Borrow`](../borrow/trait.Borrow.html \"trait std::borrow::Borrow\"), but [`Borrow`](../borrow/trait.Borrow.html \"trait std::borrow::Borrow\") is different in a few aspects:\n\n-   Unlike `AsRef`, [`Borrow`](../borrow/trait.Borrow.html \"trait std::borrow::Borrow\") has a blanket impl for any `T`, and can be used to accept either a reference or a value. (See also note on `AsRef`’s reflexibility below.)\n-   [`Borrow`](../borrow/trait.Borrow.html \"trait std::borrow::Borrow\") also requires that [`Hash`](../hash/trait.Hash.html \"trait std::hash::Hash\"), [`Eq`](../cmp/trait.Eq.html \"trait std::cmp::Eq\") and [`Ord`](../cmp/trait.Ord.html \"trait std::cmp::Ord\") for a borrowed value are equivalent to those of the owned value. For this reason, if you want to borrow only a single field of a struct you can implement `AsRef`, but not [`Borrow`](../borrow/trait.Borrow.html \"trait std::borrow::Borrow\").\n\n**Note: This trait must not fail**. If the conversion can fail, use a dedicated method which returns an [`Option<T>`](../option/enum.Option.html \"enum std::option::Option\") or a [`Result<T, E>`](../result/enum.Result.html \"enum std::result::Result\").\n\n## [§](#generic-implementations)Generic Implementations\n\n`AsRef` auto-dereferences if the inner type is a reference or a mutable reference (e.g.: `foo.as_ref()` will work the same if `foo` has type `&mut Foo` or `&&mut Foo`).\n\nNote that due to historic reasons, the above currently does not hold generally for all [dereferenceable types](../ops/trait.Deref.html \"trait std::ops::Deref\"), e.g. `foo.as_ref()` will _not_ work the same as `Box::new(foo).as_ref()`. Instead, many smart pointers provide an `as_ref` implementation which simply returns a reference to the [pointed-to value](about:blank/ops/trait.Deref.html#associatedtype.Target \"associated type std::ops::Deref::Target\") (but do not perform a cheap reference-to-reference conversion for that value). However, [`AsRef::as_ref`](about:blank/trait.AsRef.html#tymethod.as_ref \"method std::convert::AsRef::as_ref\") should not be used for the sole purpose of dereferencing; instead [‘`Deref` coercion’](about:blank/ops/trait.Deref.html#deref-coercion \"trait std::ops::Deref\") can be used:\n\n```\nlet x = Box::new(5i32);\n// Avoid this:\n// let y: &i32 = x.as_ref();\n// Better just write:\nlet y: &i32 = &x;\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+Box::new(5i32);%0A++++//+Avoid+this:%0A++++//+let+y:+%26i32+=+x.as_ref();%0A++++//+Better+just+write:%0A++++let+y:+%26i32+=+%26x;%0A%7D&edition=2021)\n\nTypes which implement [`Deref`](../ops/trait.Deref.html \"trait std::ops::Deref\") should consider implementing `AsRef<T>` as follows:\n\n```\nimpl<T> AsRef<T> for SomeType\nwhere\n    T: ?Sized,\n    <SomeType as Deref>::Target: AsRef<T>,\n{\n    fn as_ref(&self) -> &T {\n        self.deref().as_ref()\n    }\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+core::ops::Deref;%0A++++struct+SomeType;%0A++++impl+Deref+for+SomeType+%7B%0A++++++++type+Target+=+%5Bu8%5D;%0A++++++++fn+deref(%26self)+-%3E+%26%5Bu8%5D+%7B%0A++++++++++++%26%5B%5D%0A++++++++%7D%0A++++%7D%0A++++impl%3CT%3E+AsRef%3CT%3E+for+SomeType%0A++++where%0A++++++++T:+?Sized,%0A++++++++%3CSomeType+as+Deref%3E::Target:+AsRef%3CT%3E,%0A++++%7B%0A++++++++fn+as_ref(%26self)+-%3E+%26T+%7B%0A++++++++++++self.deref().as_ref()%0A++++++++%7D%0A++++%7D%0A%7D&edition=2021)\n\n## [§](#reflexivity)Reflexivity\n\nIdeally, `AsRef` would be reflexive, i.e. there would be an `impl<T: ?Sized> AsRef<T> for T` with [`as_ref`](about:blank/trait.AsRef.html#tymethod.as_ref \"method std::convert::AsRef::as_ref\") simply returning its argument unchanged. Such a blanket implementation is currently _not_ provided due to technical restrictions of Rust’s type system (it would be overlapping with another existing blanket implementation for `&T where T: AsRef<U>` which allows `AsRef` to auto-dereference, see “Generic Implementations” above).\n\nA trivial implementation of `AsRef<T> for T` must be added explicitly for a particular type `T` where needed or desired. Note, however, that not all types from `std` contain such an implementation, and those cannot be added by external code due to orphan rules.\n\n## [§](#examples)Examples\n\nBy using trait bounds we can accept arguments of different types as long as they can be converted to the specified type `T`.\n\nFor example: By creating a generic function that takes an `AsRef<str>` we express that we want to accept all references that can be converted to [`&str`](../primitive.str.html \"primitive str\") as an argument. Since both [`String`](../../std/string/struct.String.html) and [`&str`](../primitive.str.html \"primitive str\") implement `AsRef<str>` we can accept both as input argument.\n\n```\nfn is_hello<T: AsRef<str>>(s: T) {\n   assert_eq!(\"hello\", s.as_ref());\n}\n\nlet s = \"hello\";\nis_hello(s);\n\nlet s = \"hello\".to_string();\nis_hello(s);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++fn+is_hello%3CT:+AsRef%3Cstr%3E%3E(s:+T)+%7B%0A+++++++assert_eq!(%22hello%22,+s.as_ref());%0A++++%7D%0A++++%0A++++let+s+=+%22hello%22;%0A++++is_hello(s);%0A++++%0A++++let+s+=+%22hello%22.to_string();%0A++++is_hello(s);%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#221)\n\nConverts this type into a shared reference of the (usually inferred) input type.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Used to do a cheap reference-to-reference conversion.\"><title>AsRef in std::convert - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc trait\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">AsRef</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">AsRef</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#required-methods\">Required Methods</a></h3><ul class=\"block\"><li><a href=\"#tymethod.as_ref\">as_ref</a></li></ul><h3><a href=\"#implementors\">Implementors</a></h3></section><h2><a href=\"index.html\">In std::convert</a></h2><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.Infallible.html\">Infallible</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.AsMut.html\">AsMut</a></li><li><a href=\"trait.AsRef.html\">AsRef</a></li><li><a href=\"trait.FloatToInt.html\">FloatToInt</a></li><li><a href=\"trait.From.html\">From</a></li><li><a href=\"trait.Into.html\">Into</a></li><li><a href=\"trait.TryFrom.html\">TryFrom</a></li><li><a href=\"trait.TryInto.html\">TryInto</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.identity.html\">identity</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Trait <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">convert</a>::<wbr><a class=\"trait\" href=\"#\">AsRef</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#218\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub trait AsRef&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div>{\n    // Required method\n    fn <a href=\"#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>;\n}</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Used to do a cheap reference-to-reference conversion.</p>\n<p>This trait is similar to <a href=\"trait.AsMut.html\" title=\"trait std::convert::AsMut\"><code>AsMut</code></a> which is used for converting between mutable references.\nIf you need to do a costly conversion it is better to implement <a href=\"trait.From.html\" title=\"trait std::convert::From\"><code>From</code></a> with type\n<code>&amp;T</code> or write a custom function.</p>\n<h2 id=\"relation-to-borrow\"><a class=\"doc-anchor\" href=\"#relation-to-borrow\">§</a>Relation to <code>Borrow</code></h2>\n<p><code>AsRef</code> has the same signature as <a href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\"><code>Borrow</code></a>, but <a href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\"><code>Borrow</code></a> is different in a few aspects:</p>\n<ul>\n<li>Unlike <code>AsRef</code>, <a href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\"><code>Borrow</code></a> has a blanket impl for any <code>T</code>, and can be used to accept either\na reference or a value. (See also note on <code>AsRef</code>’s reflexibility below.)</li>\n<li><a href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\"><code>Borrow</code></a> also requires that <a href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\"><code>Hash</code></a>, <a href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\"><code>Eq</code></a> and <a href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\"><code>Ord</code></a> for a borrowed value are\nequivalent to those of the owned value. For this reason, if you want to\nborrow only a single field of a struct you can implement <code>AsRef</code>, but not <a href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\"><code>Borrow</code></a>.</li>\n</ul>\n<p><strong>Note: This trait must not fail</strong>. If the conversion can fail, use a\ndedicated method which returns an <a href=\"../option/enum.Option.html\" title=\"enum std::option::Option\"><code>Option&lt;T&gt;</code></a> or a <a href=\"../result/enum.Result.html\" title=\"enum std::result::Result\"><code>Result&lt;T, E&gt;</code></a>.</p>\n<h2 id=\"generic-implementations\"><a class=\"doc-anchor\" href=\"#generic-implementations\">§</a>Generic Implementations</h2>\n<p><code>AsRef</code> auto-dereferences if the inner type is a reference or a mutable reference\n(e.g.: <code>foo.as_ref()</code> will work the same if <code>foo</code> has type <code>&amp;mut Foo</code> or <code>&amp;&amp;mut Foo</code>).</p>\n<p>Note that due to historic reasons, the above currently does not hold generally for all\n<a href=\"../ops/trait.Deref.html\" title=\"trait std::ops::Deref\">dereferenceable types</a>, e.g. <code>foo.as_ref()</code> will <em>not</em> work the same as\n<code>Box::new(foo).as_ref()</code>. Instead, many smart pointers provide an <code>as_ref</code> implementation which\nsimply returns a reference to the <a href=\"../ops/trait.Deref.html#associatedtype.Target\" title=\"associated type std::ops::Deref::Target\">pointed-to value</a> (but do not perform a cheap\nreference-to-reference conversion for that value). However, <a href=\"trait.AsRef.html#tymethod.as_ref\" title=\"method std::convert::AsRef::as_ref\"><code>AsRef::as_ref</code></a> should not be\nused for the sole purpose of dereferencing; instead <a href=\"../ops/trait.Deref.html#deref-coercion\" title=\"trait std::ops::Deref\">‘<code>Deref</code> coercion’</a> can be used:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = Box::new(<span class=\"number\">5i32</span>);\n<span class=\"comment\">// Avoid this:\n// let y: &amp;i32 = x.as_ref();\n// Better just write:\n</span><span class=\"kw\">let </span>y: <span class=\"kw-2\">&amp;</span>i32 = <span class=\"kw-2\">&amp;</span>x;</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+Box::new(5i32);%0A++++//+Avoid+this:%0A++++//+let+y:+%26i32+=+x.as_ref();%0A++++//+Better+just+write:%0A++++let+y:+%26i32+=+%26x;%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Types which implement <a href=\"../ops/trait.Deref.html\" title=\"trait std::ops::Deref\"><code>Deref</code></a> should consider implementing <code>AsRef&lt;T&gt;</code> as follows:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">impl</span>&lt;T&gt; AsRef&lt;T&gt; <span class=\"kw\">for </span>SomeType\n<span class=\"kw\">where\n    </span>T: <span class=\"question-mark\">?</span>Sized,\n    &lt;SomeType <span class=\"kw\">as </span>Deref&gt;::Target: AsRef&lt;T&gt;,\n{\n    <span class=\"kw\">fn </span>as_ref(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; <span class=\"kw-2\">&amp;</span>T {\n        <span class=\"self\">self</span>.deref().as_ref()\n    }\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+core::ops::Deref;%0A++++struct+SomeType;%0A++++impl+Deref+for+SomeType+%7B%0A++++++++type+Target+=+%5Bu8%5D;%0A++++++++fn+deref(%26self)+-%3E+%26%5Bu8%5D+%7B%0A++++++++++++%26%5B%5D%0A++++++++%7D%0A++++%7D%0A++++impl%3CT%3E+AsRef%3CT%3E+for+SomeType%0A++++where%0A++++++++T:+?Sized,%0A++++++++%3CSomeType+as+Deref%3E::Target:+AsRef%3CT%3E,%0A++++%7B%0A++++++++fn+as_ref(%26self)+-%3E+%26T+%7B%0A++++++++++++self.deref().as_ref()%0A++++++++%7D%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<h2 id=\"reflexivity\"><a class=\"doc-anchor\" href=\"#reflexivity\">§</a>Reflexivity</h2>\n<p>Ideally, <code>AsRef</code> would be reflexive, i.e. there would be an <code>impl&lt;T: ?Sized&gt; AsRef&lt;T&gt; for T</code>\nwith <a href=\"trait.AsRef.html#tymethod.as_ref\" title=\"method std::convert::AsRef::as_ref\"><code>as_ref</code></a> simply returning its argument unchanged.\nSuch a blanket implementation is currently <em>not</em> provided due to technical restrictions of\nRust’s type system (it would be overlapping with another existing blanket implementation for\n<code>&amp;T where T: AsRef&lt;U&gt;</code> which allows <code>AsRef</code> to auto-dereference, see “Generic Implementations”\nabove).</p>\n<p>A trivial implementation of <code>AsRef&lt;T&gt; for T</code> must be added explicitly for a particular type <code>T</code>\nwhere needed or desired. Note, however, that not all types from <code>std</code> contain such an\nimplementation, and those cannot be added by external code due to orphan rules.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<p>By using trait bounds we can accept arguments of different types as long as they can be\nconverted to the specified type <code>T</code>.</p>\n<p>For example: By creating a generic function that takes an <code>AsRef&lt;str&gt;</code> we express that we\nwant to accept all references that can be converted to <a href=\"../primitive.str.html\" title=\"primitive str\"><code>&amp;str</code></a> as an argument.\nSince both <a href=\"../../std/string/struct.String.html\"><code>String</code></a> and <a href=\"../primitive.str.html\" title=\"primitive str\"><code>&amp;str</code></a> implement <code>AsRef&lt;str&gt;</code> we can accept both as input argument.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>is_hello&lt;T: AsRef&lt;str&gt;&gt;(s: T) {\n   <span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"hello\"</span>, s.as_ref());\n}\n\n<span class=\"kw\">let </span>s = <span class=\"string\">\"hello\"</span>;\nis_hello(s);\n\n<span class=\"kw\">let </span>s = <span class=\"string\">\"hello\"</span>.to_string();\nis_hello(s);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++fn+is_hello%3CT:+AsRef%3Cstr%3E%3E(s:+T)+%7B%0A+++++++assert_eq!(%22hello%22,+s.as_ref());%0A++++%7D%0A++++%0A++++let+s+=+%22hello%22;%0A++++is_hello(s);%0A++++%0A++++let+s+=+%22hello%22.to_string();%0A++++is_hello(s);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><h2 id=\"required-methods\" class=\"section-header\">Required Methods<a href=\"#required-methods\" class=\"anchor\">§</a></h2><div class=\"methods\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.as_ref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#221\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\"><p>Converts this type into a shared reference of the (usually inferred) input type.</p>\n</div></details></div><h2 id=\"implementors\" class=\"section-header\">Implementors<a href=\"#implementors\" class=\"anchor\">§</a></h2><div id=\"implementors-list\"><section id=\"impl-AsRef%3Cstr%3E-for-str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#838\">source</a></span><a href=\"#impl-AsRef%3Cstr%3E-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>&gt; for <a class=\"primitive\" href=\"../primitive.str.html\">str</a></h3></section><section id=\"impl-AsRef%3Cstr%3E-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2684\">source</a></span><a href=\"#impl-AsRef%3Cstr%3E-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"../string/struct.String.html\" title=\"struct std::string::String\">String</a></h3></section><section id=\"impl-AsRef%3CCStr%3E-for-CStr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0\">1.7.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ffi/c_str.rs.html#728\">source</a></span><a href=\"#impl-AsRef%3CCStr%3E-for-CStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../ffi/struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a>&gt; for <a class=\"struct\" href=\"../ffi/struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a></h3></section><section id=\"impl-AsRef%3CCStr%3E-for-CString\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0\">1.7.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#1061\">source</a></span><a href=\"#impl-AsRef%3CCStr%3E-for-CString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../ffi/struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a>&gt; for <a class=\"struct\" href=\"../ffi/struct.CString.html\" title=\"struct std::ffi::CString\">CString</a></h3></section><section id=\"impl-AsRef%3COsStr%3E-for-Component%3C'_%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#561-566\">source</a></span><a href=\"#impl-AsRef%3COsStr%3E-for-Component%3C'_%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt; for <a class=\"enum\" href=\"../path/enum.Component.html\" title=\"enum std::path::Component\">Component</a>&lt;'_&gt;</h3></section><section id=\"impl-AsRef%3COsStr%3E-for-str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/ffi/os_str.rs.html#1576-1581\">source</a></span><a href=\"#impl-AsRef%3COsStr%3E-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt; for <a class=\"primitive\" href=\"../primitive.str.html\">str</a></h3></section><section id=\"impl-AsRef%3COsStr%3E-for-OsStr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/ffi/os_str.rs.html#1560-1565\">source</a></span><a href=\"#impl-AsRef%3COsStr%3E-for-OsStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt; for <a class=\"struct\" href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a></h3></section><section id=\"impl-AsRef%3COsStr%3E-for-OsString\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/ffi/os_str.rs.html#1568-1573\">source</a></span><a href=\"#impl-AsRef%3COsStr%3E-for-OsString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt; for <a class=\"struct\" href=\"../ffi/struct.OsString.html\" title=\"struct std::ffi::OsString\">OsString</a></h3></section><section id=\"impl-AsRef%3COsStr%3E-for-Components%3C'_%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#805-810\">source</a></span><a href=\"#impl-AsRef%3COsStr%3E-for-Components%3C'_%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt; for <a class=\"struct\" href=\"../path/struct.Components.html\" title=\"struct std::path::Components\">Components</a>&lt;'_&gt;</h3></section><section id=\"impl-AsRef%3COsStr%3E-for-Iter%3C'_%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#858-863\">source</a></span><a href=\"#impl-AsRef%3COsStr%3E-for-Iter%3C'_%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt; for std::path::<a class=\"struct\" href=\"../path/struct.Iter.html\" title=\"struct std::path::Iter\">Iter</a>&lt;'_&gt;</h3></section><section id=\"impl-AsRef%3COsStr%3E-for-Path\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#3010-3015\">source</a></span><a href=\"#impl-AsRef%3COsStr%3E-for-Path\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt; for <a class=\"struct\" href=\"../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a></h3></section><section id=\"impl-AsRef%3COsStr%3E-for-PathBuf\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#1957-1962\">source</a></span><a href=\"#impl-AsRef%3COsStr%3E-for-PathBuf\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt; for <a class=\"struct\" href=\"../path/struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a></h3></section><section id=\"impl-AsRef%3COsStr%3E-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/ffi/os_str.rs.html#1584-1589\">source</a></span><a href=\"#impl-AsRef%3COsStr%3E-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt; for <a class=\"struct\" href=\"../string/struct.String.html\" title=\"struct std::string::String\">String</a></h3></section><section id=\"impl-AsRef%3CPath%3E-for-Cow%3C'_,+OsStr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#3158-3163\">source</a></span><a href=\"#impl-AsRef%3CPath%3E-for-Cow%3C'_,+OsStr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt; for <a class=\"enum\" href=\"../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'_, <a class=\"struct\" href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;</h3></section><section id=\"impl-AsRef%3CPath%3E-for-Component%3C'_%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.25.0\">1.25.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#569-574\">source</a></span><a href=\"#impl-AsRef%3CPath%3E-for-Component%3C'_%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt; for <a class=\"enum\" href=\"../path/enum.Component.html\" title=\"enum std::path::Component\">Component</a>&lt;'_&gt;</h3></section><section id=\"impl-AsRef%3CPath%3E-for-str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#3174-3179\">source</a></span><a href=\"#impl-AsRef%3CPath%3E-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt; for <a class=\"primitive\" href=\"../primitive.str.html\">str</a></h3></section><section id=\"impl-AsRef%3CPath%3E-for-OsStr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#3150-3155\">source</a></span><a href=\"#impl-AsRef%3CPath%3E-for-OsStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt; for <a class=\"struct\" href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a></h3></section><section id=\"impl-AsRef%3CPath%3E-for-OsString\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#3166-3171\">source</a></span><a href=\"#impl-AsRef%3CPath%3E-for-OsString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt; for <a class=\"struct\" href=\"../ffi/struct.OsString.html\" title=\"struct std::ffi::OsString\">OsString</a></h3></section><section id=\"impl-AsRef%3CPath%3E-for-Components%3C'_%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#797-802\">source</a></span><a href=\"#impl-AsRef%3CPath%3E-for-Components%3C'_%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt; for <a class=\"struct\" href=\"../path/struct.Components.html\" title=\"struct std::path::Components\">Components</a>&lt;'_&gt;</h3></section><section id=\"impl-AsRef%3CPath%3E-for-Iter%3C'_%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#850-855\">source</a></span><a href=\"#impl-AsRef%3CPath%3E-for-Iter%3C'_%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt; for std::path::<a class=\"struct\" href=\"../path/struct.Iter.html\" title=\"struct std::path::Iter\">Iter</a>&lt;'_&gt;</h3></section><section id=\"impl-AsRef%3CPath%3E-for-Path\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#3142-3147\">source</a></span><a href=\"#impl-AsRef%3CPath%3E-for-Path\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt; for <a class=\"struct\" href=\"../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a></h3></section><section id=\"impl-AsRef%3CPath%3E-for-PathBuf\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#3190-3195\">source</a></span><a href=\"#impl-AsRef%3CPath%3E-for-PathBuf\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt; for <a class=\"struct\" href=\"../path/struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a></h3></section><section id=\"impl-AsRef%3CPath%3E-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#3182-3187\">source</a></span><a href=\"#impl-AsRef%3CPath%3E-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt; for <a class=\"struct\" href=\"../string/struct.String.html\" title=\"struct std::string::String\">String</a></h3></section><section id=\"impl-AsRef%3CLocalWaker%3E-for-Waker\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#844\">source</a><a href=\"#impl-AsRef%3CLocalWaker%3E-for-Waker\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../task/struct.LocalWaker.html\" title=\"struct std::task::LocalWaker\">LocalWaker</a>&gt; for <a class=\"struct\" href=\"../task/struct.Waker.html\" title=\"struct std::task::Waker\">Waker</a></h3></section><section id=\"impl-AsRef%3C%5Bu8%5D%3E-for-str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#2741\">source</a></span><a href=\"#impl-AsRef%3C%5Bu8%5D%3E-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;[<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>]&gt; for <a class=\"primitive\" href=\"../primitive.str.html\">str</a></h3></section><section id=\"impl-AsRef%3C%5Bu8%5D%3E-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2700\">source</a></span><a href=\"#impl-AsRef%3C%5Bu8%5D%3E-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;[<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>]&gt; for <a class=\"struct\" href=\"../string/struct.String.html\" title=\"struct std::string::String\">String</a></h3></section><section id=\"impl-AsRef%3Cstr%3E-for-Drain%3C'a%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.55.0\">1.55.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2996\">source</a></span><a href=\"#impl-AsRef%3Cstr%3E-for-Drain%3C'a%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>&gt; for std::string::<a class=\"struct\" href=\"../string/struct.Drain.html\" title=\"struct std::string::Drain\">Drain</a>&lt;'a&gt;</h3></section><section id=\"impl-AsRef%3C%5Bu8%5D%3E-for-Drain%3C'a%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.55.0\">1.55.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#3003\">source</a></span><a href=\"#impl-AsRef%3C%5Bu8%5D%3E-for-Drain%3C'a%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;[<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>]&gt; for std::string::<a class=\"struct\" href=\"../string/struct.Drain.html\" title=\"struct std::string::Drain\">Drain</a>&lt;'a&gt;</h3></section><section id=\"impl-AsRef%3C%5BT%5D%3E-for-Drain%3C'a,+T,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0\">1.46.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/drain.rs.html#140\">source</a></span><a href=\"#impl-AsRef%3C%5BT%5D%3E-for-Drain%3C'a,+T,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T, A&gt; <a class=\"trait\" href=\"trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>&gt; for std::vec::<a class=\"struct\" href=\"../vec/struct.Drain.html\" title=\"struct std::vec::Drain\">Drain</a>&lt;'a, T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section><section id=\"impl-AsRef%3C%5BT%5D%3E-for-%5BT%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#822\">source</a></span><a href=\"#impl-AsRef%3C%5BT%5D%3E-for-%5BT%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>&gt; for <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a></h3></section><section id=\"impl-AsRef%3C%5BT%5D%3E-for-Iter%3C'_,+T%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.13.0\">1.13.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/iter.rs.html#155\">source</a></span><a href=\"#impl-AsRef%3C%5BT%5D%3E-for-Iter%3C'_,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>&gt; for std::slice::<a class=\"struct\" href=\"../slice/struct.Iter.html\" title=\"struct std::slice::Iter\">Iter</a>&lt;'_, T&gt;</h3></section><section id=\"impl-AsRef%3C%5BT%5D%3E-for-IterMut%3C'_,+T%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0\">1.53.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/iter.rs.html#356\">source</a></span><a href=\"#impl-AsRef%3C%5BT%5D%3E-for-IterMut%3C'_,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"../slice/struct.IterMut.html\" title=\"struct std::slice::IterMut\">IterMut</a>&lt;'_, T&gt;</h3></section><section id=\"impl-AsRef%3CT%3E-for-Cow%3C'_,+T%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#435\">source</a></span><a href=\"#impl-AsRef%3CT%3E-for-Cow%3C'_,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;T&gt; for <a class=\"enum\" href=\"../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'_, T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../borrow/trait.ToOwned.html\" title=\"trait std::borrow::ToOwned\">ToOwned</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-AsRef%3C%5BT%5D%3E-for-IntoIter%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0\">1.46.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/into_iter.rs.html#186\">source</a></span><a href=\"#impl-AsRef%3C%5BT%5D%3E-for-IntoIter%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"../vec/struct.IntoIter.html\" title=\"struct std::vec::IntoIter\">IntoIter</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section><section id=\"impl-AsRef%3C%5BT%5D%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3319\">source</a></span><a href=\"#impl-AsRef%3C%5BT%5D%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"../vec/struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section><section id=\"impl-AsRef%3CVec%3CT,+A%3E%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3305\">source</a></span><a href=\"#impl-AsRef%3CVec%3CT,+A%3E%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../vec/struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;&gt; for <a class=\"struct\" href=\"../vec/struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section><section id=\"impl-AsRef%3CT%3E-for-Box%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2267\">source</a></span><a href=\"#impl-AsRef%3CT%3E-for-Box%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;T&gt; for <a class=\"struct\" href=\"../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-AsRef%3CT%3E-for-Rc%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/rc.rs.html#3488\">source</a></span><a href=\"#impl-AsRef%3CT%3E-for-Rc%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;T&gt; for <a class=\"struct\" href=\"../rc/struct.Rc.html\" title=\"struct std::rc::Rc\">Rc</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-AsRef%3CT%3E-for-Arc%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/sync.rs.html#3778\">source</a></span><a href=\"#impl-AsRef%3CT%3E-for-Arc%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;T&gt; for <a class=\"struct\" href=\"../sync/struct.Arc.html\" title=\"struct std::sync::Arc\">Arc</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-AsRef%3CU%3E-for-%26T\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#696-698\">source</a></span><a href=\"#impl-AsRef%3CU%3E-for-%26T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;U&gt; for <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;U&gt; + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    U: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-AsRef%3CU%3E-for-%26mut+T\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#708-710\">source</a></span><a href=\"#impl-AsRef%3CU%3E-for-%26mut+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;U&gt; for <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;U&gt; + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    U: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-AsRef%3C%5BT;+N%5D%3E-for-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#973-976\">source</a><a href=\"#impl-AsRef%3C%5BT;+N%5D%3E-for-Simd%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"primitive\" href=\"../primitive.array.html\">[T; N]</a>&gt; for <a class=\"struct\" href=\"../simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"../simd/struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../simd/trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,\n    T: <a class=\"trait\" href=\"../simd/trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,</div></h3></section><section id=\"impl-AsRef%3C%5BT%5D%3E-for-%5BT;+N%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#159\">source</a></span><a href=\"#impl-AsRef%3C%5BT%5D%3E-for-%5BT;+N%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>&gt; for <a class=\"primitive\" href=\"../primitive.array.html\">[T; N]</a></h3></section><section id=\"impl-AsRef%3C%5BT%5D%3E-for-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#996-999\">source</a><a href=\"#impl-AsRef%3C%5BT%5D%3E-for-Simd%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"../simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"../simd/struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../simd/trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,\n    T: <a class=\"trait\" href=\"../simd/trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,</div></h3></section></div><script src=\"../../trait.impl/core/convert/trait.AsRef.js\" data-ignore-extern-crates=\"alloc,core\" async=\"\"></script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:11:53.458Z"
}