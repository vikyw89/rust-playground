{
	"title": "CStr in std::ffi - Rust",
	"url": "https://doc.rust-lang.org/stable/std/ffi/struct.CStr.html",
	"markdown": "# CStr in std::ffi - Rust\n\n## Struct [std](../index.html)::[ffi](index.html)::[CStr](#)\n\n1.64.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/ffi/c_str.rs.html#108) ·\n\n```\npub struct CStr { /* private fields */ }\n```\n\nExpand description\n\nRepresentation of a borrowed C string.\n\nThis type represents a borrowed reference to a nul-terminated array of bytes. It can be constructed safely from a `&[[u8](../primitive.u8.html \"primitive u8\")]` slice, or unsafely from a raw `*const c_char`. It can be expressed as a literal in the form `c\"Hello world\"`.\n\nThe `CStr` can then be converted to a Rust `&[str](../primitive.str.html \"str\")` by performing UTF-8 validation, or into an owned `CString`.\n\n`&CStr` is to `CString` as `&[str](../primitive.str.html \"str\")` is to `String`: the former in each pair are borrowed references; the latter are owned strings.\n\nNote that this structure does **not** have a guaranteed layout (the `repr(transparent)` notwithstanding) and should not be placed in the signatures of FFI functions. Instead, safe wrappers of FFI functions may leverage [`CStr::as_ptr`](about:blank/struct.CStr.html#method.as_ptr \"method std::ffi::CStr::as_ptr\") and the unsafe [`CStr::from_ptr`](about:blank/struct.CStr.html#method.from_ptr \"associated function std::ffi::CStr::from_ptr\") constructor to provide a safe interface to other consumers.\n\n## [§](#examples)Examples\n\nInspecting a foreign C string:\n\n```\nuse std::ffi::CStr;\nuse std::os::raw::c_char;\n\nextern \"C\" { fn my_string() -> *const c_char; }\n\nunsafe {\n    let slice = CStr::from_ptr(my_string());\n    println!(\"string buffer size without nul terminator: {}\", slice.to_bytes().len());\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::CStr;%0A++++use+std::os::raw::c_char;%0A++++%0A++++/*+Extern+functions+are+awkward+in+doc+comments+-+fake+it+instead%0A++++extern+%22C%22+%7B+fn+my_string()+-%3E+*const+c_char;+%7D%0A++++*/+unsafe+extern+%22C%22+fn+my_string()+-%3E+*const+c_char+%7B+c%22hello%22.as_ptr()+%7D%0A++++%0A++++unsafe+%7B%0A++++++++let+slice+=+CStr::from_ptr(my_string());%0A++++++++println!(%22string+buffer+size+without+nul+terminator:+%7B%7D%22,+slice.to_bytes().len());%0A++++%7D%0A%7D&edition=2021)\n\nPassing a Rust-originating C string:\n\n```\nuse std::ffi::{CString, CStr};\nuse std::os::raw::c_char;\n\nfn work(data: &CStr) {\n    extern \"C\" { fn work_with(data: *const c_char); }\n\n    unsafe { work_with(data.as_ptr()) }\n}\n\nlet s = CString::new(\"data data data data\").expect(\"CString::new failed\");\nwork(&s);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::%7BCString,+CStr%7D;%0A++++use+std::os::raw::c_char;%0A++++%0A++++fn+work(data:+%26CStr)+%7B%0A++++++/*+Extern+functions+are+awkward+in+doc+comments+-+fake+it+instead%0A++++++++extern+%22C%22+%7B+fn+work_with(data:+*const+c_char);+%7D%0A++++++*/+unsafe+extern+%22C%22+fn+work_with(s:+*const+c_char)+%7B%7D%0A++++%0A++++++++unsafe+%7B+work_with(data.as_ptr())+%7D%0A++++%7D%0A++++%0A++++let+s+=+CString::new(%22data+data+data+data%22).expect(%22CString::new+failed%22);%0A++++work(%26s);%0A%7D&edition=2021)\n\nConverting a foreign C string into a Rust `String`:\n\n```\nuse std::ffi::CStr;\nuse std::os::raw::c_char;\n\nextern \"C\" { fn my_string() -> *const c_char; }\n\nfn my_string_safe() -> String {\n    let cstr = unsafe { CStr::from_ptr(my_string()) };\n    // Get copy-on-write Cow<'_, str>, then guarantee a freshly-owned String allocation\n    String::from_utf8_lossy(cstr.to_bytes()).to_string()\n}\n\nprintln!(\"string: {}\", my_string_safe());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::CStr;%0A++++use+std::os::raw::c_char;%0A++++%0A++++/*+Extern+functions+are+awkward+in+doc+comments+-+fake+it+instead%0A++++extern+%22C%22+%7B+fn+my_string()+-%3E+*const+c_char;+%7D%0A++++*/+unsafe+extern+%22C%22+fn+my_string()+-%3E+*const+c_char+%7B+c%22hello%22.as_ptr()+%7D%0A++++%0A++++fn+my_string_safe()+-%3E+String+%7B%0A++++++++let+cstr+=+unsafe+%7B+CStr::from_ptr(my_string())+%7D;%0A++++++++//+Get+copy-on-write+Cow%3C%27_,+str%3E,+then+guarantee+a+freshly-owned+String+allocation%0A++++++++String::from_utf8_lossy(cstr.to_bytes()).to_string()%0A++++%7D%0A++++%0A++++println!(%22string:+%7B%7D%22,+my_string_safe());%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ffi/c_str.rs.html#215)[§](#impl-CStr)\n\n1.0.0 (const: [unstable](https://github.com/rust-lang/rust/issues/113219 \"Tracking issue for const_cstr_from_ptr\")) · [source](https://doc.rust-lang.org/1.80.0/src/core/ffi/c_str.rs.html#284)\n\nWraps a raw C string with a safe C string wrapper.\n\nThis function will wrap the provided `ptr` with a `CStr` wrapper, which allows inspection and interoperation of non-owned C strings. The total size of the terminated buffer must be smaller than [`isize::MAX`](about:blank/primitive.isize.html#associatedconstant.MAX \"associated constant isize::MAX\") **bytes** in memory (a restriction from [`slice::from_raw_parts`](../slice/fn.from_raw_parts.html \"fn std::slice::from_raw_parts\")).\n\n##### [§](#safety)Safety\n\n-   The memory pointed to by `ptr` must contain a valid nul terminator at the end of the string.\n    \n-   `ptr` must be [valid](about:blank/ptr/index.html#safety \"mod std::ptr\") for reads of bytes up to and including the nul terminator. This means in particular:\n    \n    -   The entire memory range of this `CStr` must be contained within a single allocated object!\n    -   `ptr` must be non-null even for a zero-length cstr.\n-   The memory referenced by the returned `CStr` must not be mutated for the duration of lifetime `'a`.\n    \n-   The nul terminator must be within `isize::MAX` from `ptr`\n    \n\n> **Note**: This operation is intended to be a 0-cost cast but it is currently implemented with an up-front calculation of the length of the string. This is not guaranteed to always be the case.\n\n##### [§](#caveat)Caveat\n\nThe lifetime for the returned slice is inferred from its usage. To prevent accidental misuse, it’s suggested to tie the lifetime to whichever source lifetime is safe in the context, such as by providing a helper function taking the lifetime of a host value for the slice, or by explicit annotation.\n\n##### [§](#examples-1)Examples\n\n```\nuse std::ffi::{c_char, CStr};\n\nfn my_string() -> *const c_char {\n    c\"hello\".as_ptr()\n}\n\nunsafe {\n    let slice = CStr::from_ptr(my_string());\n    assert_eq!(slice.to_str().unwrap(), \"hello\");\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::%7Bc_char,+CStr%7D;%0A++++%0A++++fn+my_string()+-%3E+*const+c_char+%7B%0A++++++++c%22hello%22.as_ptr()%0A++++%7D%0A++++%0A++++unsafe+%7B%0A++++++++let+slice+=+CStr::from_ptr(my_string());%0A++++++++assert_eq!(slice.to_str().unwrap(),+%22hello%22);%0A++++%7D%0A%7D&edition=2021)\n\n```\n#![feature(const_cstr_from_ptr)]\n\nuse std::ffi::{c_char, CStr};\n\nconst HELLO_PTR: *const c_char = {\n    const BYTES: &[u8] = b\"Hello, world!\\0\";\n    BYTES.as_ptr().cast()\n};\nconst HELLO: &CStr = unsafe { CStr::from_ptr(HELLO_PTR) };\n\nassert_eq!(c\"Hello, world!\", HELLO);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(const_cstr_from_ptr)%5D%0A%0Afn+main()+%7B%0A++++use+std::ffi::%7Bc_char,+CStr%7D;%0A++++%0A++++const+HELLO_PTR:+*const+c_char+=+%7B%0A++++++++const+BYTES:+%26%5Bu8%5D+=+b%22Hello,+world!%5C0%22;%0A++++++++BYTES.as_ptr().cast()%0A++++%7D;%0A++++const+HELLO:+%26CStr+=+unsafe+%7B+CStr::from_ptr(HELLO_PTR)+%7D;%0A++++%0A++++assert_eq!(c%22Hello,+world!%22,+HELLO);%0A%7D&version=nightly&edition=2021)\n\n1.69.0 (const: 1.69.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/ffi/c_str.rs.html#329)\n\nCreates a C string wrapper from a byte slice with any number of nuls.\n\nThis method will create a `CStr` from any byte slice that contains at least one nul byte. Unlike with [`CStr::from_bytes_with_nul`](about:blank/struct.CStr.html#method.from_bytes_with_nul \"associated function std::ffi::CStr::from_bytes_with_nul\"), the caller does not need to know where the nul byte is located.\n\nIf the first byte is a nul character, this method will return an empty `CStr`. If multiple nul characters are present, the `CStr` will end at the first one.\n\nIf the slice only has a single nul byte at the end, this method is equivalent to [`CStr::from_bytes_with_nul`](about:blank/struct.CStr.html#method.from_bytes_with_nul \"associated function std::ffi::CStr::from_bytes_with_nul\").\n\n##### [§](#examples-2)Examples\n\n```\nuse std::ffi::CStr;\n\nlet mut buffer = [0u8; 16];\nunsafe {\n    // Here we might call an unsafe C function that writes a string\n    // into the buffer.\n    let buf_ptr = buffer.as_mut_ptr();\n    buf_ptr.write_bytes(b'A', 8);\n}\n// Attempt to extract a C nul-terminated string from the buffer.\nlet c_str = CStr::from_bytes_until_nul(&buffer[..]).unwrap();\nassert_eq!(c_str.to_str().unwrap(), \"AAAAAAAA\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::CStr;%0A++++%0A++++let+mut+buffer+=+%5B0u8;+16%5D;%0A++++unsafe+%7B%0A++++++++//+Here+we+might+call+an+unsafe+C+function+that+writes+a+string%0A++++++++//+into+the+buffer.%0A++++++++let+buf_ptr+=+buffer.as_mut_ptr();%0A++++++++buf_ptr.write_bytes(b%27A%27,+8);%0A++++%7D%0A++++//+Attempt+to+extract+a+C+nul-terminated+string+from+the+buffer.%0A++++let+c_str+=+CStr::from_bytes_until_nul(%26buffer%5B..%5D).unwrap();%0A++++assert_eq!(c_str.to_str().unwrap(),+%22AAAAAAAA%22);%0A%7D&edition=2021)\n\n1.10.0 (const: 1.72.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/ffi/c_str.rs.html#382)\n\nCreates a C string wrapper from a byte slice with exactly one nul terminator.\n\nThis function will cast the provided `bytes` to a `CStr` wrapper after ensuring that the byte slice is nul-terminated and does not contain any interior nul bytes.\n\nIf the nul byte may not be at the end, [`CStr::from_bytes_until_nul`](about:blank/struct.CStr.html#method.from_bytes_until_nul \"associated function std::ffi::CStr::from_bytes_until_nul\") can be used instead.\n\n##### [§](#examples-3)Examples\n\n```\nuse std::ffi::CStr;\n\nlet cstr = CStr::from_bytes_with_nul(b\"hello\\0\");\nassert!(cstr.is_ok());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::CStr;%0A++++%0A++++let+cstr+=+CStr::from_bytes_with_nul(b%22hello%5C0%22);%0A++++assert!(cstr.is_ok());%0A%7D&edition=2021)\n\nCreating a `CStr` without a trailing nul terminator is an error:\n\n```\nuse std::ffi::CStr;\n\nlet cstr = CStr::from_bytes_with_nul(b\"hello\");\nassert!(cstr.is_err());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::CStr;%0A++++%0A++++let+cstr+=+CStr::from_bytes_with_nul(b%22hello%22);%0A++++assert!(cstr.is_err());%0A%7D&edition=2021)\n\nCreating a `CStr` with an interior nul byte is an error:\n\n```\nuse std::ffi::CStr;\n\nlet cstr = CStr::from_bytes_with_nul(b\"he\\0llo\\0\");\nassert!(cstr.is_err());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::CStr;%0A++++%0A++++let+cstr+=+CStr::from_bytes_with_nul(b%22he%5C0llo%5C0%22);%0A++++assert!(cstr.is_err());%0A%7D&edition=2021)\n\n1.10.0 (const: 1.59.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/ffi/c_str.rs.html#420)\n\nUnsafely creates a C string wrapper from a byte slice.\n\nThis function will cast the provided `bytes` to a `CStr` wrapper without performing any sanity checks.\n\n##### [§](#safety-1)Safety\n\nThe provided slice **must** be nul-terminated and not contain any interior nul bytes.\n\n##### [§](#examples-4)Examples\n\n```\nuse std::ffi::{CStr, CString};\n\nunsafe {\n    let cstring = CString::new(\"hello\").expect(\"CString::new failed\");\n    let cstr = CStr::from_bytes_with_nul_unchecked(cstring.to_bytes_with_nul());\n    assert_eq!(cstr, &*cstring);\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::%7BCStr,+CString%7D;%0A++++%0A++++unsafe+%7B%0A++++++++let+cstring+=+CString::new(%22hello%22).expect(%22CString::new+failed%22);%0A++++++++let+cstr+=+CStr::from_bytes_with_nul_unchecked(cstring.to_bytes_with_nul());%0A++++++++assert_eq!(cstr,+%26*cstring);%0A++++%7D%0A%7D&edition=2021)\n\n1.0.0 (const: 1.32.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/ffi/c_str.rs.html#510)\n\nReturns the inner pointer to this C string.\n\nThe returned pointer will be valid for as long as `self` is, and points to a contiguous region of memory terminated with a 0 byte to represent the end of the string.\n\nThe type of the returned pointer is [`*const c_char`](type.c_char.html \"type std::ffi::c_char\"), and whether it’s an alias for `*const i8` or `*const u8` is platform-specific.\n\n**WARNING**\n\nThe returned pointer is read-only; writing to it (including passing it to C code that writes to it) causes undefined behavior.\n\nIt is your responsibility to make sure that the underlying memory is not freed too early. For example, the following code will cause undefined behavior when `ptr` is used inside the `unsafe` block:\n\n```\nuse std::ffi::CString;\n\n// Do not do this:\nlet ptr = CString::new(\"Hello\").expect(\"CString::new failed\").as_ptr();\nunsafe {\n    // `ptr` is dangling\n    *ptr;\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Ballow(unused_must_use)%5D+%23!%5Ballow(temporary_cstring_as_ptr)%5D%0Afn+main()+%7B%0A++++use+std::ffi::CString;%0A++++%0A++++//+Do+not+do+this:%0A++++let+ptr+=+CString::new(%22Hello%22).expect(%22CString::new+failed%22).as_ptr();%0A++++unsafe+%7B%0A++++++++//+%60ptr%60+is+dangling%0A++++++++*ptr;%0A++++%7D%0A%7D&edition=2021)\n\nThis happens because the pointer returned by `as_ptr` does not carry any lifetime information and the `CString` is deallocated immediately after the `CString::new(\"Hello\").expect(\"CString::new failed\").as_ptr()` expression is evaluated. To fix the problem, bind the `CString` to a local variable:\n\n```\nuse std::ffi::CString;\n\nlet hello = CString::new(\"Hello\").expect(\"CString::new failed\");\nlet ptr = hello.as_ptr();\nunsafe {\n    // `ptr` is valid because `hello` is in scope\n    *ptr;\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Ballow(unused_must_use)%5D%0Afn+main()+%7B%0A++++use+std::ffi::CString;%0A++++%0A++++let+hello+=+CString::new(%22Hello%22).expect(%22CString::new+failed%22);%0A++++let+ptr+=+hello.as_ptr();%0A++++unsafe+%7B%0A++++++++//+%60ptr%60+is+valid+because+%60hello%60+is+in+scope%0A++++++++*ptr;%0A++++%7D%0A%7D&edition=2021)\n\nThis way, the lifetime of the `CString` in `hello` encompasses the lifetime of `ptr` and the `unsafe` block.\n\n1.79.0 (const: [unstable](https://github.com/rust-lang/rust/issues/113219 \"Tracking issue for const_cstr_from_ptr\")) · [source](https://doc.rust-lang.org/1.80.0/src/core/ffi/c_str.rs.html#543)\n\nReturns the length of `self`. Like C’s `strlen`, this does not include the nul terminator.\n\n> **Note**: This method is currently implemented as a constant-time cast, but it is planned to alter its definition in the future to perform the length calculation whenever this method is called.\n\n##### [§](#examples-5)Examples\n\n```\nuse std::ffi::CStr;\n\nlet cstr = CStr::from_bytes_with_nul(b\"foo\\0\").unwrap();\nassert_eq!(cstr.count_bytes(), 3);\n\nlet cstr = CStr::from_bytes_with_nul(b\"\\0\").unwrap();\nassert_eq!(cstr.count_bytes(), 0);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::CStr;%0A++++%0A++++let+cstr+=+CStr::from_bytes_with_nul(b%22foo%5C0%22).unwrap();%0A++++assert_eq!(cstr.count_bytes(),+3);%0A++++%0A++++let+cstr+=+CStr::from_bytes_with_nul(b%22%5C0%22).unwrap();%0A++++assert_eq!(cstr.count_bytes(),+0);%0A%7D&edition=2021)\n\n1.71.0 (const: 1.71.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/ffi/c_str.rs.html#569)\n\nReturns `true` if `self.to_bytes()` has a length of 0.\n\n##### [§](#examples-6)Examples\n\n```\nuse std::ffi::CStr;\n\nlet cstr = CStr::from_bytes_with_nul(b\"foo\\0\")?;\nassert!(!cstr.is_empty());\n\nlet empty_cstr = CStr::from_bytes_with_nul(b\"\\0\")?;\nassert!(empty_cstr.is_empty());\nassert!(c\"\".is_empty());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::ffi::CStr;%0Ause+std::ffi::FromBytesWithNulError;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Result%3C(),+FromBytesWithNulError%3E+%7B%0Alet+cstr+=+CStr::from_bytes_with_nul(b%22foo%5C0%22)?;%0Aassert!(!cstr.is_empty());%0A%0Alet+empty_cstr+=+CStr::from_bytes_with_nul(b%22%5C0%22)?;%0Aassert!(empty_cstr.is_empty());%0Aassert!(c%22%22.is_empty());%0AOk(())%0A%7D&edition=2021)\n\n1.0.0 (const: 1.72.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/ffi/c_str.rs.html#598)\n\nConverts this C string to a byte slice.\n\nThe returned slice will **not** contain the trailing nul terminator that this C string has.\n\n> **Note**: This method is currently implemented as a constant-time cast, but it is planned to alter its definition in the future to perform the length calculation whenever this method is called.\n\n##### [§](#examples-7)Examples\n\n```\nuse std::ffi::CStr;\n\nlet cstr = CStr::from_bytes_with_nul(b\"foo\\0\").expect(\"CStr::from_bytes_with_nul failed\");\nassert_eq!(cstr.to_bytes(), b\"foo\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::CStr;%0A++++%0A++++let+cstr+=+CStr::from_bytes_with_nul(b%22foo%5C0%22).expect(%22CStr::from_bytes_with_nul+failed%22);%0A++++assert_eq!(cstr.to_bytes(),+b%22foo%22);%0A%7D&edition=2021)\n\n1.0.0 (const: 1.72.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/ffi/c_str.rs.html#627)\n\nConverts this C string to a byte slice containing the trailing 0 byte.\n\nThis function is the equivalent of [`CStr::to_bytes`](about:blank/struct.CStr.html#method.to_bytes \"method std::ffi::CStr::to_bytes\") except that it will retain the trailing nul terminator instead of chopping it off.\n\n> **Note**: This method is currently implemented as a 0-cost cast, but it is planned to alter its definition in the future to perform the length calculation whenever this method is called.\n\n##### [§](#examples-8)Examples\n\n```\nuse std::ffi::CStr;\n\nlet cstr = CStr::from_bytes_with_nul(b\"foo\\0\").expect(\"CStr::from_bytes_with_nul failed\");\nassert_eq!(cstr.to_bytes_with_nul(), b\"foo\\0\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::CStr;%0A++++%0A++++let+cstr+=+CStr::from_bytes_with_nul(b%22foo%5C0%22).expect(%22CStr::from_bytes_with_nul+failed%22);%0A++++assert_eq!(cstr.to_bytes_with_nul(),+b%22foo%5C0%22);%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ffi/c_str.rs.html#649)\n\n🔬This is a nightly-only experimental API. (`cstr_bytes` [#112115](https://github.com/rust-lang/rust/issues/112115))\n\nIterates over the bytes in this C string.\n\nThe returned iterator will **not** contain the trailing nul terminator that this C string has.\n\n##### [§](#examples-9)Examples\n\n```\n#![feature(cstr_bytes)]\nuse std::ffi::CStr;\n\nlet cstr = CStr::from_bytes_with_nul(b\"foo\\0\").expect(\"CStr::from_bytes_with_nul failed\");\nassert!(cstr.bytes().eq(*b\"foo\"));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(cstr_bytes)%5D%0Afn+main()+%7B%0A++++use+std::ffi::CStr;%0A++++%0A++++let+cstr+=+CStr::from_bytes_with_nul(b%22foo%5C0%22).expect(%22CStr::from_bytes_with_nul+failed%22);%0A++++assert!(cstr.bytes().eq(*b%22foo%22));%0A%7D&version=nightly&edition=2021)\n\n1.4.0 (const: 1.72.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/ffi/c_str.rs.html#671)\n\nYields a `&[str](../primitive.str.html \"str\")` slice if the `CStr` contains valid UTF-8.\n\nIf the contents of the `CStr` are valid UTF-8 data, this function will return the corresponding `&[str](../primitive.str.html \"str\")` slice. Otherwise, it will return an error with details of where UTF-8 validation failed.\n\n##### [§](#examples-10)Examples\n\n```\nuse std::ffi::CStr;\n\nlet cstr = CStr::from_bytes_with_nul(b\"foo\\0\").expect(\"CStr::from_bytes_with_nul failed\");\nassert_eq!(cstr.to_str(), Ok(\"foo\"));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::CStr;%0A++++%0A++++let+cstr+=+CStr::from_bytes_with_nul(b%22foo%5C0%22).expect(%22CStr::from_bytes_with_nul+failed%22);%0A++++assert_eq!(cstr.to_str(),+Ok(%22foo%22));%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#1069)[§](#impl-CStr-1)\n\n1.4.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#1109)\n\nConverts a `CStr` into a `[Cow](../borrow/enum.Cow.html \"enum std::borrow::Cow\")<[str](../primitive.str.html \"str\")>`.\n\nIf the contents of the `CStr` are valid UTF-8 data, this function will return a `[Cow](../borrow/enum.Cow.html \"enum std::borrow::Cow\")::[Borrowed](about:blank/borrow/enum.Cow.html#variant.Borrowed \"variant std::borrow::Cow::Borrowed\")(&[str](../primitive.str.html \"str\"))` with the corresponding `&[str](../primitive.str.html \"str\")` slice. Otherwise, it will replace any invalid UTF-8 sequences with [`U+FFFD REPLACEMENT CHARACTER`](../char/constant.REPLACEMENT_CHARACTER.html \"std::char::REPLACEMENT_CHARACTER\") and return a `[Cow](../borrow/enum.Cow.html \"enum std::borrow::Cow\")::[Owned](about:blank/borrow/enum.Cow.html#variant.Owned \"variant std::borrow::Cow::Owned\")(&[str](../primitive.str.html \"str\"))` with the result.\n\n##### [§](#examples-11)Examples\n\nCalling `to_string_lossy` on a `CStr` containing valid UTF-8. The leading `c` on the string literal denotes a `CStr`.\n\n```\nuse std::borrow::Cow;\n\nassert_eq!(c\"Hello World\".to_string_lossy(), Cow::Borrowed(\"Hello World\"));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::borrow::Cow;%0A++++%0A++++assert_eq!(c%22Hello+World%22.to_string_lossy(),+Cow::Borrowed(%22Hello+World%22));%0A%7D&edition=2021)\n\nCalling `to_string_lossy` on a `CStr` containing invalid UTF-8:\n\n```\nuse std::borrow::Cow;\n\nassert_eq!(\n    c\"Hello \\xF0\\x90\\x80World\".to_string_lossy(),\n    Cow::Owned(String::from(\"Hello �World\")) as Cow<'_, str>\n);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::borrow::Cow;%0A++++%0A++++assert_eq!(%0A++++++++c%22Hello+%5CxF0%5Cx90%5Cx80World%22.to_string_lossy(),%0A++++++++Cow::Owned(String::from(%22Hello+%EF%BF%BDWorld%22))+as+Cow%3C%27_,+str%3E%0A++++);%0A%7D&edition=2021)\n\n1.20.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#1127)\n\nConverts a `[Box](../boxed/struct.Box.html \"struct std::boxed::Box\")<[CStr](struct.CStr.html \"struct std::ffi::CStr\")>` into a [`CString`](struct.CString.html \"struct std::ffi::CString\") without copying or allocating.\n\n##### [§](#examples-12)Examples\n\n```\nuse std::ffi::CString;\n\nlet c_string = CString::new(b\"foo\".to_vec()).expect(\"CString::new failed\");\nlet boxed = c_string.into_boxed_c_str();\nassert_eq!(boxed.into_c_string(), CString::new(\"foo\").expect(\"CString::new failed\"));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::CString;%0A++++%0A++++let+c_string+=+CString::new(b%22foo%22.to_vec()).expect(%22CString::new+failed%22);%0A++++let+boxed+=+c_string.into_boxed_c_str();%0A++++assert_eq!(boxed.into_c_string(),+CString::new(%22foo%22).expect(%22CString::new+failed%22));%0A%7D&edition=2021)\n\n1.7.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/ffi/c_str.rs.html#728)[§](#impl-AsRef%3CCStr%3E-for-CStr)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ffi/c_str.rs.html#730)[§](#method.as_ref)\n\nConverts this type into a shared reference of the (usually inferred) input type.\n\n1.7.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#1061)[§](#impl-AsRef%3CCStr%3E-for-CString)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#1063)[§](#method.as_ref-1)\n\nConverts this type into a shared reference of the (usually inferred) input type.\n\n1.3.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#749)[§](#impl-Borrow%3CCStr%3E-for-CString)\n\n1.29.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#824)[§](#impl-Clone-for-Box%3CCStr%3E)\n\n1.3.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/ffi/c_str.rs.html#187)[§](#impl-Debug-for-CStr)\n\n1.10.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/ffi/c_str.rs.html#194)[§](#impl-Default-for-%26CStr)\n\n1.17.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#928)[§](#impl-Default-for-Box%3CCStr%3E)\n\n1.24.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#881)[§](#impl-From%3C%26CStr%3E-for-Arc%3CCStr%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#885)[§](#method.from-3)\n\nConverts a `&CStr` into a `Arc<CStr>`, by copying the contents into a newly allocated [`Arc`](../sync/struct.Arc.html \"struct std::sync::Arc\").\n\n1.17.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#768)[§](#impl-From%3C%26CStr%3E-for-Box%3CCStr%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#771)[§](#method.from-1)\n\nConverts a `&CStr` into a `Box<CStr>`, by copying the contents into a newly allocated [`Box`](../boxed/struct.Box.html \"struct std::boxed::Box\").\n\n1.7.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#1042)[§](#impl-From%3C%26CStr%3E-for-CString)\n\n1.28.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#850)[§](#impl-From%3C%26CStr%3E-for-Cow%3C'a,+CStr%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#853)[§](#method.from-4)\n\nConverts a [`CStr`](struct.CStr.html \"struct std::ffi::CStr\") into a borrowed [`Cow`](../borrow/enum.Cow.html \"enum std::borrow::Cow\") without copying or allocating.\n\n1.24.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#903)[§](#impl-From%3C%26CStr%3E-for-Rc%3CCStr%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#907)[§](#method.from-6)\n\nConverts a `&CStr` into a `Rc<CStr>`, by copying the contents into a newly allocated [`Rc`](../rc/struct.Rc.html \"struct std::rc::Rc\").\n\n1.20.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#832)[§](#impl-From%3CCString%3E-for-Box%3CCStr%3E)\n\n1.45.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#778)[§](#impl-From%3CCow%3C'_,+CStr%3E%3E-for-Box%3CCStr%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#782)[§](#method.from-5)\n\nConverts a `Cow<'a, CStr>` into a `Box<CStr>`, by copying the contents if they are borrowed.\n\n1.64.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/ffi/c_str.rs.html#97)[§](#impl-Hash-for-CStr)\n\n1.47.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/ffi/c_str.rs.html#705)[§](#impl-Index%3CRangeFrom%3Cusize%3E%3E-for-CStr)\n\n[§](#associatedtype.Output)\n\nThe returned type after indexing.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ffi/c_str.rs.html#709)[§](#method.index)\n\nPerforms the indexing (`container[index]`) operation. [Read more](about:blank/ops/trait.Index.html#tymethod.index)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/ffi/c_str.rs.html#697)[§](#impl-Ord-for-CStr)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/ffi/c_str.rs.html#681)[§](#impl-PartialEq-for-CStr)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ffi/c_str.rs.html#683)[§](#method.eq)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[§](#method.ne)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/ffi/c_str.rs.html#690)[§](#impl-PartialOrd-for-CStr)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ffi/c_str.rs.html#692)[§](#method.partial_cmp)\n\nThis method returns an ordering between `self` and `other` values if one exists. [Read more](about:blank/cmp/trait.PartialOrd.html#tymethod.partial_cmp)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180)[§](#method.lt)\n\nThis method tests less than (for `self` and `other`) and is used by the `<` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.lt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198)[§](#method.le)\n\nThis method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.le)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215)[§](#method.gt)\n\nThis method tests greater than (for `self` and `other`) and is used by the `>` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.gt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233)[§](#method.ge)\n\nThis method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.ge)\n\n1.3.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#1027)[§](#impl-ToOwned-for-CStr)\n\n[§](#associatedtype.Owned)\n\nThe resulting type after obtaining ownership.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#1030)[§](#method.to_owned)\n\nCreates owned data from borrowed data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#tymethod.to_owned)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#1034)[§](#method.clone_into)\n\nUses borrowed data to replace owned data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#method.clone_into)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/ffi/c_str.rs.html#688)[§](#impl-Eq-for-CStr)\n\n[§](#impl-Freeze-for-CStr)\n\n[§](#impl-RefUnwindSafe-for-CStr)\n\n[§](#impl-Send-for-CStr)\n\n[§](#impl-Sized-for-CStr)\n\n[§](#impl-Sync-for-CStr)\n\n[§](#impl-Unpin-for-CStr)\n\n[§](#impl-UnwindSafe-for-CStr)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Representation of a borrowed C string.\"><title>CStr in std::ffi - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc struct\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">CStr</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">CStr</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#implementations\">Methods</a></h3><ul class=\"block method\"><li><a href=\"#method.as_ptr\">as_ptr</a></li><li><a href=\"#method.bytes\">bytes</a></li><li><a href=\"#method.count_bytes\">count_bytes</a></li><li><a href=\"#method.from_bytes_until_nul\">from_bytes_until_nul</a></li><li><a href=\"#method.from_bytes_with_nul\">from_bytes_with_nul</a></li><li><a href=\"#method.from_bytes_with_nul_unchecked\">from_bytes_with_nul_unchecked</a></li><li><a href=\"#method.from_ptr\">from_ptr</a></li><li><a href=\"#method.into_c_string\">into_c_string</a></li><li><a href=\"#method.is_empty\">is_empty</a></li><li><a href=\"#method.to_bytes\">to_bytes</a></li><li><a href=\"#method.to_bytes_with_nul\">to_bytes_with_nul</a></li><li><a href=\"#method.to_str\">to_str</a></li><li><a href=\"#method.to_string_lossy\">to_string_lossy</a></li></ul><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-AsRef%3CCStr%3E-for-CStr\">AsRef&lt;CStr&gt;</a></li><li><a href=\"#impl-AsRef%3CCStr%3E-for-CString\">AsRef&lt;CStr&gt;</a></li><li><a href=\"#impl-Borrow%3CCStr%3E-for-CString\">Borrow&lt;CStr&gt;</a></li><li><a href=\"#impl-Clone-for-Box%3CCStr%3E\">Clone</a></li><li><a href=\"#impl-Debug-for-CStr\">Debug</a></li><li><a href=\"#impl-Default-for-%26CStr\">Default</a></li><li><a href=\"#impl-Default-for-Box%3CCStr%3E\">Default</a></li><li><a href=\"#impl-Eq-for-CStr\">Eq</a></li><li><a href=\"#impl-From%3C%26CStr%3E-for-Cow%3C'a,+CStr%3E\">From&lt;&amp;'a CStr&gt;</a></li><li><a href=\"#impl-From%3C%26CStr%3E-for-Arc%3CCStr%3E\">From&lt;&amp;CStr&gt;</a></li><li><a href=\"#impl-From%3C%26CStr%3E-for-Box%3CCStr%3E\">From&lt;&amp;CStr&gt;</a></li><li><a href=\"#impl-From%3C%26CStr%3E-for-CString\">From&lt;&amp;CStr&gt;</a></li><li><a href=\"#impl-From%3C%26CStr%3E-for-Rc%3CCStr%3E\">From&lt;&amp;CStr&gt;</a></li><li><a href=\"#impl-From%3CCString%3E-for-Box%3CCStr%3E\">From&lt;CString&gt;</a></li><li><a href=\"#impl-From%3CCow%3C'_,+CStr%3E%3E-for-Box%3CCStr%3E\">From&lt;Cow&lt;'_, CStr&gt;&gt;</a></li><li><a href=\"#impl-Hash-for-CStr\">Hash</a></li><li><a href=\"#impl-Index%3CRangeFrom%3Cusize%3E%3E-for-CStr\">Index&lt;RangeFrom&lt;usize&gt;&gt;</a></li><li><a href=\"#impl-Ord-for-CStr\">Ord</a></li><li><a href=\"#impl-PartialEq-for-CStr\">PartialEq</a></li><li><a href=\"#impl-PartialOrd-for-CStr\">PartialOrd</a></li><li><a href=\"#impl-ToOwned-for-CStr\">ToOwned</a></li></ul><h3><a href=\"#synthetic-implementations\">Auto Trait Implementations</a></h3><ul class=\"block synthetic-implementation\"><li><a href=\"#impl-Sized-for-CStr\">!Sized</a></li><li><a href=\"#impl-Freeze-for-CStr\">Freeze</a></li><li><a href=\"#impl-RefUnwindSafe-for-CStr\">RefUnwindSafe</a></li><li><a href=\"#impl-Send-for-CStr\">Send</a></li><li><a href=\"#impl-Sync-for-CStr\">Sync</a></li><li><a href=\"#impl-Unpin-for-CStr\">Unpin</a></li><li><a href=\"#impl-UnwindSafe-for-CStr\">UnwindSafe</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-Any-for-T\">Any</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-T\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-T\">BorrowMut&lt;T&gt;</a></li></ul></section><h2><a href=\"index.html\">In std::ffi</a></h2><h3><a href=\"index.html#modules\">Modules</a></h3><ul class=\"block mod\"><li><a href=\"c_str/index.html\">c_str</a></li><li><a href=\"os_str/index.html\">os_str</a></li></ul><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.CStr.html\">CStr</a></li><li><a href=\"struct.CString.html\">CString</a></li><li><a href=\"struct.OsStr.html\">OsStr</a></li><li><a href=\"struct.OsString.html\">OsString</a></li><li><a href=\"struct.VaList.html\">VaList</a></li><li><a href=\"struct.VaListImpl.html\">VaListImpl</a></li></ul><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.c_void.html\">c_void</a></li></ul><h3><a href=\"index.html#types\">Type Aliases</a></h3><ul class=\"block type\"><li><a href=\"type.c_char.html\">c_char</a></li><li><a href=\"type.c_double.html\">c_double</a></li><li><a href=\"type.c_float.html\">c_float</a></li><li><a href=\"type.c_int.html\">c_int</a></li><li><a href=\"type.c_long.html\">c_long</a></li><li><a href=\"type.c_longlong.html\">c_longlong</a></li><li><a href=\"type.c_schar.html\">c_schar</a></li><li><a href=\"type.c_short.html\">c_short</a></li><li><a href=\"type.c_uchar.html\">c_uchar</a></li><li><a href=\"type.c_uint.html\">c_uint</a></li><li><a href=\"type.c_ulong.html\">c_ulong</a></li><li><a href=\"type.c_ulonglong.html\">c_ulonglong</a></li><li><a href=\"type.c_ushort.html\">c_ushort</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Struct <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">ffi</a>::<wbr><a class=\"struct\" href=\"#\">CStr</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.64.0\">1.64.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ffi/c_str.rs.html#108\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub struct CStr { <span class=\"comment\">/* private fields */</span> }</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Representation of a borrowed C string.</p>\n<p>This type represents a borrowed reference to a nul-terminated\narray of bytes. It can be constructed safely from a <code>&amp;[<a href=\"../primitive.u8.html\" title=\"primitive u8\">u8</a>]</code>\nslice, or unsafely from a raw <code>*const c_char</code>. It can be expressed as a\nliteral in the form <code>c\"Hello world\"</code>.</p>\n<p>The <code>CStr</code> can then be converted to a Rust <code>&amp;<a href=\"../primitive.str.html\" title=\"str\">str</a></code> by performing\nUTF-8 validation, or into an owned <code>CString</code>.</p>\n<p><code>&amp;CStr</code> is to <code>CString</code> as <code>&amp;<a href=\"../primitive.str.html\" title=\"str\">str</a></code> is to <code>String</code>: the former\nin each pair are borrowed references; the latter are owned\nstrings.</p>\n<p>Note that this structure does <strong>not</strong> have a guaranteed layout (the <code>repr(transparent)</code>\nnotwithstanding) and should not be placed in the signatures of FFI functions.\nInstead, safe wrappers of FFI functions may leverage <a href=\"struct.CStr.html#method.as_ptr\" title=\"method std::ffi::CStr::as_ptr\"><code>CStr::as_ptr</code></a> and the unsafe\n<a href=\"struct.CStr.html#method.from_ptr\" title=\"associated function std::ffi::CStr::from_ptr\"><code>CStr::from_ptr</code></a> constructor to provide a safe interface to other consumers.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<p>Inspecting a foreign C string:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ffi::CStr;\n<span class=\"kw\">use </span>std::os::raw::c_char;\n\n<span class=\"kw\">extern </span><span class=\"string\">\"C\" </span>{ <span class=\"kw\">fn </span>my_string() -&gt; <span class=\"kw-2\">*const </span>c_char; }\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">let </span>slice = CStr::from_ptr(my_string());\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"string buffer size without nul terminator: {}\"</span>, slice.to_bytes().len());\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::CStr;%0A++++use+std::os::raw::c_char;%0A++++%0A++++/*+Extern+functions+are+awkward+in+doc+comments+-+fake+it+instead%0A++++extern+%22C%22+%7B+fn+my_string()+-%3E+*const+c_char;+%7D%0A++++*/+unsafe+extern+%22C%22+fn+my_string()+-%3E+*const+c_char+%7B+c%22hello%22.as_ptr()+%7D%0A++++%0A++++unsafe+%7B%0A++++++++let+slice+=+CStr::from_ptr(my_string());%0A++++++++println!(%22string+buffer+size+without+nul+terminator:+%7B%7D%22,+slice.to_bytes().len());%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Passing a Rust-originating C string:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ffi::{CString, CStr};\n<span class=\"kw\">use </span>std::os::raw::c_char;\n\n<span class=\"kw\">fn </span>work(data: <span class=\"kw-2\">&amp;</span>CStr) {\n    <span class=\"kw\">extern </span><span class=\"string\">\"C\" </span>{ <span class=\"kw\">fn </span>work_with(data: <span class=\"kw-2\">*const </span>c_char); }\n\n    <span class=\"kw\">unsafe </span>{ work_with(data.as_ptr()) }\n}\n\n<span class=\"kw\">let </span>s = CString::new(<span class=\"string\">\"data data data data\"</span>).expect(<span class=\"string\">\"CString::new failed\"</span>);\nwork(<span class=\"kw-2\">&amp;</span>s);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::%7BCString,+CStr%7D;%0A++++use+std::os::raw::c_char;%0A++++%0A++++fn+work(data:+%26CStr)+%7B%0A++++++/*+Extern+functions+are+awkward+in+doc+comments+-+fake+it+instead%0A++++++++extern+%22C%22+%7B+fn+work_with(data:+*const+c_char);+%7D%0A++++++*/+unsafe+extern+%22C%22+fn+work_with(s:+*const+c_char)+%7B%7D%0A++++%0A++++++++unsafe+%7B+work_with(data.as_ptr())+%7D%0A++++%7D%0A++++%0A++++let+s+=+CString::new(%22data+data+data+data%22).expect(%22CString::new+failed%22);%0A++++work(%26s);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Converting a foreign C string into a Rust <code>String</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ffi::CStr;\n<span class=\"kw\">use </span>std::os::raw::c_char;\n\n<span class=\"kw\">extern </span><span class=\"string\">\"C\" </span>{ <span class=\"kw\">fn </span>my_string() -&gt; <span class=\"kw-2\">*const </span>c_char; }\n\n<span class=\"kw\">fn </span>my_string_safe() -&gt; String {\n    <span class=\"kw\">let </span>cstr = <span class=\"kw\">unsafe </span>{ CStr::from_ptr(my_string()) };\n    <span class=\"comment\">// Get copy-on-write Cow&lt;'_, str&gt;, then guarantee a freshly-owned String allocation\n    </span>String::from_utf8_lossy(cstr.to_bytes()).to_string()\n}\n\n<span class=\"macro\">println!</span>(<span class=\"string\">\"string: {}\"</span>, my_string_safe());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::CStr;%0A++++use+std::os::raw::c_char;%0A++++%0A++++/*+Extern+functions+are+awkward+in+doc+comments+-+fake+it+instead%0A++++extern+%22C%22+%7B+fn+my_string()+-%3E+*const+c_char;+%7D%0A++++*/+unsafe+extern+%22C%22+fn+my_string()+-%3E+*const+c_char+%7B+c%22hello%22.as_ptr()+%7D%0A++++%0A++++fn+my_string_safe()+-%3E+String+%7B%0A++++++++let+cstr+=+unsafe+%7B+CStr::from_ptr(my_string())+%7D;%0A++++++++//+Get+copy-on-write+Cow%3C'_,+str%3E,+then+guarantee+a+freshly-owned+String+allocation%0A++++++++String::from_utf8_lossy(cstr.to_bytes()).to_string()%0A++++%7D%0A++++%0A++++println!(%22string:+%7B%7D%22,+my_string_safe());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><h2 id=\"implementations\" class=\"section-header\">Implementations<a href=\"#implementations\" class=\"anchor\">§</a></h2><div id=\"implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-CStr\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ffi/c_str.rs.html#215\">source</a><a href=\"#impl-CStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_ptr\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/113219\" title=\"Tracking issue for const_cstr_from_ptr\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ffi/c_str.rs.html#284\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.from_ptr\" class=\"fn\">from_ptr</a>&lt;'a&gt;(ptr: <a class=\"primitive\" href=\"../primitive.pointer.html\">*const </a><a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>) -&gt; &amp;'a <a class=\"struct\" href=\"struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a></h4></section></summary><div class=\"docblock\"><p>Wraps a raw C string with a safe C string wrapper.</p>\n<p>This function will wrap the provided <code>ptr</code> with a <code>CStr</code> wrapper, which\nallows inspection and interoperation of non-owned C strings. The total\nsize of the terminated buffer must be smaller than <a href=\"../primitive.isize.html#associatedconstant.MAX\" title=\"associated constant isize::MAX\"><code>isize::MAX</code></a> <strong>bytes</strong>\nin memory (a restriction from <a href=\"../slice/fn.from_raw_parts.html\" title=\"fn std::slice::from_raw_parts\"><code>slice::from_raw_parts</code></a>).</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<ul>\n<li>\n<p>The memory pointed to by <code>ptr</code> must contain a valid nul terminator at the\nend of the string.</p>\n</li>\n<li>\n<p><code>ptr</code> must be <a href=\"../ptr/index.html#safety\" title=\"mod std::ptr\">valid</a> for reads of bytes up to and including the nul terminator.\nThis means in particular:</p>\n<ul>\n<li>The entire memory range of this <code>CStr</code> must be contained within a single allocated object!</li>\n<li><code>ptr</code> must be non-null even for a zero-length cstr.</li>\n</ul>\n</li>\n<li>\n<p>The memory referenced by the returned <code>CStr</code> must not be mutated for\nthe duration of lifetime <code>'a</code>.</p>\n</li>\n<li>\n<p>The nul terminator must be within <code>isize::MAX</code> from <code>ptr</code></p>\n</li>\n</ul>\n<blockquote>\n<p><strong>Note</strong>: This operation is intended to be a 0-cost cast but it is\ncurrently implemented with an up-front calculation of the length of\nthe string. This is not guaranteed to always be the case.</p>\n</blockquote>\n<h5 id=\"caveat\"><a class=\"doc-anchor\" href=\"#caveat\">§</a>Caveat</h5>\n<p>The lifetime for the returned slice is inferred from its usage. To prevent accidental misuse,\nit’s suggested to tie the lifetime to whichever source lifetime is safe in the context,\nsuch as by providing a helper function taking the lifetime of a host value for the slice,\nor by explicit annotation.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ffi::{c_char, CStr};\n\n<span class=\"kw\">fn </span>my_string() -&gt; <span class=\"kw-2\">*const </span>c_char {\n    <span class=\"string\">c\"hello\"</span>.as_ptr()\n}\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">let </span>slice = CStr::from_ptr(my_string());\n    <span class=\"macro\">assert_eq!</span>(slice.to_str().unwrap(), <span class=\"string\">\"hello\"</span>);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::%7Bc_char,+CStr%7D;%0A++++%0A++++fn+my_string()+-%3E+*const+c_char+%7B%0A++++++++c%22hello%22.as_ptr()%0A++++%7D%0A++++%0A++++unsafe+%7B%0A++++++++let+slice+=+CStr::from_ptr(my_string());%0A++++++++assert_eq!(slice.to_str().unwrap(),+%22hello%22);%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(const_cstr_from_ptr)]\n\n</span><span class=\"kw\">use </span>std::ffi::{c_char, CStr};\n\n<span class=\"kw\">const </span>HELLO_PTR: <span class=\"kw-2\">*const </span>c_char = {\n    <span class=\"kw\">const </span>BYTES: <span class=\"kw-2\">&amp;</span>[u8] = <span class=\"string\">b\"Hello, world!\\0\"</span>;\n    BYTES.as_ptr().cast()\n};\n<span class=\"kw\">const </span>HELLO: <span class=\"kw-2\">&amp;</span>CStr = <span class=\"kw\">unsafe </span>{ CStr::from_ptr(HELLO_PTR) };\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">c\"Hello, world!\"</span>, HELLO);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(const_cstr_from_ptr)%5D%0A%0Afn+main()+%7B%0A++++use+std::ffi::%7Bc_char,+CStr%7D;%0A++++%0A++++const+HELLO_PTR:+*const+c_char+=+%7B%0A++++++++const+BYTES:+%26%5Bu8%5D+=+b%22Hello,+world!%5C0%22;%0A++++++++BYTES.as_ptr().cast()%0A++++%7D;%0A++++const+HELLO:+%26CStr+=+unsafe+%7B+CStr::from_ptr(HELLO_PTR)+%7D;%0A++++%0A++++assert_eq!(c%22Hello,+world!%22,+HELLO);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_bytes_until_nul\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.69.0, const since 1.69.0\">1.69.0 (const: 1.69.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ffi/c_str.rs.html#329\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.from_bytes_until_nul\" class=\"fn\">from_bytes_until_nul</a>(\n    bytes: &amp;[<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>],\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;&amp;<a class=\"struct\" href=\"struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a>, <a class=\"struct\" href=\"c_str/struct.FromBytesUntilNulError.html\" title=\"struct std::ffi::c_str::FromBytesUntilNulError\">FromBytesUntilNulError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a C string wrapper from a byte slice with any number of nuls.</p>\n<p>This method will create a <code>CStr</code> from any byte slice that contains at\nleast one nul byte. Unlike with <a href=\"struct.CStr.html#method.from_bytes_with_nul\" title=\"associated function std::ffi::CStr::from_bytes_with_nul\"><code>CStr::from_bytes_with_nul</code></a>, the caller\ndoes not need to know where the nul byte is located.</p>\n<p>If the first byte is a nul character, this method will return an\nempty <code>CStr</code>. If multiple nul characters are present, the <code>CStr</code> will\nend at the first one.</p>\n<p>If the slice only has a single nul byte at the end, this method is\nequivalent to <a href=\"struct.CStr.html#method.from_bytes_with_nul\" title=\"associated function std::ffi::CStr::from_bytes_with_nul\"><code>CStr::from_bytes_with_nul</code></a>.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ffi::CStr;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buffer = [<span class=\"number\">0u8</span>; <span class=\"number\">16</span>];\n<span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// Here we might call an unsafe C function that writes a string\n    // into the buffer.\n    </span><span class=\"kw\">let </span>buf_ptr = buffer.as_mut_ptr();\n    buf_ptr.write_bytes(<span class=\"string\">b'A'</span>, <span class=\"number\">8</span>);\n}\n<span class=\"comment\">// Attempt to extract a C nul-terminated string from the buffer.\n</span><span class=\"kw\">let </span>c_str = CStr::from_bytes_until_nul(<span class=\"kw-2\">&amp;</span>buffer[..]).unwrap();\n<span class=\"macro\">assert_eq!</span>(c_str.to_str().unwrap(), <span class=\"string\">\"AAAAAAAA\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::CStr;%0A++++%0A++++let+mut+buffer+=+%5B0u8;+16%5D;%0A++++unsafe+%7B%0A++++++++//+Here+we+might+call+an+unsafe+C+function+that+writes+a+string%0A++++++++//+into+the+buffer.%0A++++++++let+buf_ptr+=+buffer.as_mut_ptr();%0A++++++++buf_ptr.write_bytes(b'A',+8);%0A++++%7D%0A++++//+Attempt+to+extract+a+C+nul-terminated+string+from+the+buffer.%0A++++let+c_str+=+CStr::from_bytes_until_nul(%26buffer%5B..%5D).unwrap();%0A++++assert_eq!(c_str.to_str().unwrap(),+%22AAAAAAAA%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_bytes_with_nul\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0, const since 1.72.0\">1.10.0 (const: 1.72.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ffi/c_str.rs.html#382\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.from_bytes_with_nul\" class=\"fn\">from_bytes_with_nul</a>(\n    bytes: &amp;[<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>],\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;&amp;<a class=\"struct\" href=\"struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a>, <a class=\"struct\" href=\"c_str/struct.FromBytesWithNulError.html\" title=\"struct std::ffi::c_str::FromBytesWithNulError\">FromBytesWithNulError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a C string wrapper from a byte slice with exactly one nul\nterminator.</p>\n<p>This function will cast the provided <code>bytes</code> to a <code>CStr</code>\nwrapper after ensuring that the byte slice is nul-terminated\nand does not contain any interior nul bytes.</p>\n<p>If the nul byte may not be at the end,\n<a href=\"struct.CStr.html#method.from_bytes_until_nul\" title=\"associated function std::ffi::CStr::from_bytes_until_nul\"><code>CStr::from_bytes_until_nul</code></a> can be used instead.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ffi::CStr;\n\n<span class=\"kw\">let </span>cstr = CStr::from_bytes_with_nul(<span class=\"string\">b\"hello\\0\"</span>);\n<span class=\"macro\">assert!</span>(cstr.is_ok());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::CStr;%0A++++%0A++++let+cstr+=+CStr::from_bytes_with_nul(b%22hello%5C0%22);%0A++++assert!(cstr.is_ok());%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Creating a <code>CStr</code> without a trailing nul terminator is an error:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ffi::CStr;\n\n<span class=\"kw\">let </span>cstr = CStr::from_bytes_with_nul(<span class=\"string\">b\"hello\"</span>);\n<span class=\"macro\">assert!</span>(cstr.is_err());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::CStr;%0A++++%0A++++let+cstr+=+CStr::from_bytes_with_nul(b%22hello%22);%0A++++assert!(cstr.is_err());%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Creating a <code>CStr</code> with an interior nul byte is an error:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ffi::CStr;\n\n<span class=\"kw\">let </span>cstr = CStr::from_bytes_with_nul(<span class=\"string\">b\"he\\0llo\\0\"</span>);\n<span class=\"macro\">assert!</span>(cstr.is_err());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::CStr;%0A++++%0A++++let+cstr+=+CStr::from_bytes_with_nul(b%22he%5C0llo%5C0%22);%0A++++assert!(cstr.is_err());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_bytes_with_nul_unchecked\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0, const since 1.59.0\">1.10.0 (const: 1.59.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ffi/c_str.rs.html#420\">source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"#method.from_bytes_with_nul_unchecked\" class=\"fn\">from_bytes_with_nul_unchecked</a>(bytes: &amp;[<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>]) -&gt; &amp;<a class=\"struct\" href=\"struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a></h4></section></summary><div class=\"docblock\"><p>Unsafely creates a C string wrapper from a byte slice.</p>\n<p>This function will cast the provided <code>bytes</code> to a <code>CStr</code> wrapper without\nperforming any sanity checks.</p>\n<h5 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">§</a>Safety</h5>\n<p>The provided slice <strong>must</strong> be nul-terminated and not contain any interior\nnul bytes.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ffi::{CStr, CString};\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">let </span>cstring = CString::new(<span class=\"string\">\"hello\"</span>).expect(<span class=\"string\">\"CString::new failed\"</span>);\n    <span class=\"kw\">let </span>cstr = CStr::from_bytes_with_nul_unchecked(cstring.to_bytes_with_nul());\n    <span class=\"macro\">assert_eq!</span>(cstr, <span class=\"kw-2\">&amp;*</span>cstring);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::%7BCStr,+CString%7D;%0A++++%0A++++unsafe+%7B%0A++++++++let+cstring+=+CString::new(%22hello%22).expect(%22CString::new+failed%22);%0A++++++++let+cstr+=+CStr::from_bytes_with_nul_unchecked(cstring.to_bytes_with_nul());%0A++++++++assert_eq!(cstr,+%26*cstring);%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_ptr\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ffi/c_str.rs.html#510\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.as_ptr\" class=\"fn\">as_ptr</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.pointer.html\">*const </a><a class=\"primitive\" href=\"../primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Returns the inner pointer to this C string.</p>\n<p>The returned pointer will be valid for as long as <code>self</code> is, and points\nto a contiguous region of memory terminated with a 0 byte to represent\nthe end of the string.</p>\n<p>The type of the returned pointer is\n<a href=\"type.c_char.html\" title=\"type std::ffi::c_char\"><code>*const c_char</code></a>, and whether it’s\nan alias for <code>*const i8</code> or <code>*const u8</code> is platform-specific.</p>\n<p><strong>WARNING</strong></p>\n<p>The returned pointer is read-only; writing to it (including passing it\nto C code that writes to it) causes undefined behavior.</p>\n<p>It is your responsibility to make sure that the underlying memory is not\nfreed too early. For example, the following code will cause undefined\nbehavior when <code>ptr</code> is used inside the <code>unsafe</code> block:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ffi::CString;\n\n<span class=\"comment\">// Do not do this:\n</span><span class=\"kw\">let </span>ptr = CString::new(<span class=\"string\">\"Hello\"</span>).expect(<span class=\"string\">\"CString::new failed\"</span>).as_ptr();\n<span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// `ptr` is dangling\n    </span><span class=\"kw-2\">*</span>ptr;\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Ballow(unused_must_use)%5D+%23!%5Ballow(temporary_cstring_as_ptr)%5D%0Afn+main()+%7B%0A++++use+std::ffi::CString;%0A++++%0A++++//+Do+not+do+this:%0A++++let+ptr+=+CString::new(%22Hello%22).expect(%22CString::new+failed%22).as_ptr();%0A++++unsafe+%7B%0A++++++++//+%60ptr%60+is+dangling%0A++++++++*ptr;%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<p>This happens because the pointer returned by <code>as_ptr</code> does not carry any\nlifetime information and the <code>CString</code> is deallocated immediately after\nthe <code>CString::new(\"Hello\").expect(\"CString::new failed\").as_ptr()</code>\nexpression is evaluated.\nTo fix the problem, bind the <code>CString</code> to a local variable:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ffi::CString;\n\n<span class=\"kw\">let </span>hello = CString::new(<span class=\"string\">\"Hello\"</span>).expect(<span class=\"string\">\"CString::new failed\"</span>);\n<span class=\"kw\">let </span>ptr = hello.as_ptr();\n<span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// `ptr` is valid because `hello` is in scope\n    </span><span class=\"kw-2\">*</span>ptr;\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Ballow(unused_must_use)%5D%0Afn+main()+%7B%0A++++use+std::ffi::CString;%0A++++%0A++++let+hello+=+CString::new(%22Hello%22).expect(%22CString::new+failed%22);%0A++++let+ptr+=+hello.as_ptr();%0A++++unsafe+%7B%0A++++++++//+%60ptr%60+is+valid+because+%60hello%60+is+in+scope%0A++++++++*ptr;%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<p>This way, the lifetime of the <code>CString</code> in <code>hello</code> encompasses\nthe lifetime of <code>ptr</code> and the <code>unsafe</code> block.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.count_bytes\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.79.0, const unstable\">1.79.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/113219\" title=\"Tracking issue for const_cstr_from_ptr\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ffi/c_str.rs.html#543\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.count_bytes\" class=\"fn\">count_bytes</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the length of <code>self</code>. Like C’s <code>strlen</code>, this does not include the nul terminator.</p>\n<blockquote>\n<p><strong>Note</strong>: This method is currently implemented as a constant-time\ncast, but it is planned to alter its definition in the future to\nperform the length calculation whenever this method is called.</p>\n</blockquote>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ffi::CStr;\n\n<span class=\"kw\">let </span>cstr = CStr::from_bytes_with_nul(<span class=\"string\">b\"foo\\0\"</span>).unwrap();\n<span class=\"macro\">assert_eq!</span>(cstr.count_bytes(), <span class=\"number\">3</span>);\n\n<span class=\"kw\">let </span>cstr = CStr::from_bytes_with_nul(<span class=\"string\">b\"\\0\"</span>).unwrap();\n<span class=\"macro\">assert_eq!</span>(cstr.count_bytes(), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::CStr;%0A++++%0A++++let+cstr+=+CStr::from_bytes_with_nul(b%22foo%5C0%22).unwrap();%0A++++assert_eq!(cstr.count_bytes(),+3);%0A++++%0A++++let+cstr+=+CStr::from_bytes_with_nul(b%22%5C0%22).unwrap();%0A++++assert_eq!(cstr.count_bytes(),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_empty\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0, const since 1.71.0\">1.71.0 (const: 1.71.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ffi/c_str.rs.html#569\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.is_empty\" class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if <code>self.to_bytes()</code> has a length of 0.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ffi::CStr;\n\n<span class=\"kw\">let </span>cstr = CStr::from_bytes_with_nul(<span class=\"string\">b\"foo\\0\"</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert!</span>(!cstr.is_empty());\n\n<span class=\"kw\">let </span>empty_cstr = CStr::from_bytes_with_nul(<span class=\"string\">b\"\\0\"</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert!</span>(empty_cstr.is_empty());\n<span class=\"macro\">assert!</span>(<span class=\"string\">c\"\"</span>.is_empty());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::ffi::CStr;%0Ause+std::ffi::FromBytesWithNulError;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Result%3C(),+FromBytesWithNulError%3E+%7B%0Alet+cstr+=+CStr::from_bytes_with_nul(b%22foo%5C0%22)?;%0Aassert!(!cstr.is_empty());%0A%0Alet+empty_cstr+=+CStr::from_bytes_with_nul(b%22%5C0%22)?;%0Aassert!(empty_cstr.is_empty());%0Aassert!(c%22%22.is_empty());%0AOk(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_bytes\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.72.0\">1.0.0 (const: 1.72.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ffi/c_str.rs.html#598\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.to_bytes\" class=\"fn\">to_bytes</a>(&amp;self) -&gt; &amp;[<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>] <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;[u8]\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Converts this C string to a byte slice.</p>\n<p>The returned slice will <strong>not</strong> contain the trailing nul terminator that this C\nstring has.</p>\n<blockquote>\n<p><strong>Note</strong>: This method is currently implemented as a constant-time\ncast, but it is planned to alter its definition in the future to\nperform the length calculation whenever this method is called.</p>\n</blockquote>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ffi::CStr;\n\n<span class=\"kw\">let </span>cstr = CStr::from_bytes_with_nul(<span class=\"string\">b\"foo\\0\"</span>).expect(<span class=\"string\">\"CStr::from_bytes_with_nul failed\"</span>);\n<span class=\"macro\">assert_eq!</span>(cstr.to_bytes(), <span class=\"string\">b\"foo\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::CStr;%0A++++%0A++++let+cstr+=+CStr::from_bytes_with_nul(b%22foo%5C0%22).expect(%22CStr::from_bytes_with_nul+failed%22);%0A++++assert_eq!(cstr.to_bytes(),+b%22foo%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_bytes_with_nul\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.72.0\">1.0.0 (const: 1.72.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ffi/c_str.rs.html#627\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.to_bytes_with_nul\" class=\"fn\">to_bytes_with_nul</a>(&amp;self) -&gt; &amp;[<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>] <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;[u8]\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Converts this C string to a byte slice containing the trailing 0 byte.</p>\n<p>This function is the equivalent of <a href=\"struct.CStr.html#method.to_bytes\" title=\"method std::ffi::CStr::to_bytes\"><code>CStr::to_bytes</code></a> except that it\nwill retain the trailing nul terminator instead of chopping it off.</p>\n<blockquote>\n<p><strong>Note</strong>: This method is currently implemented as a 0-cost cast, but\nit is planned to alter its definition in the future to perform the\nlength calculation whenever this method is called.</p>\n</blockquote>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ffi::CStr;\n\n<span class=\"kw\">let </span>cstr = CStr::from_bytes_with_nul(<span class=\"string\">b\"foo\\0\"</span>).expect(<span class=\"string\">\"CStr::from_bytes_with_nul failed\"</span>);\n<span class=\"macro\">assert_eq!</span>(cstr.to_bytes_with_nul(), <span class=\"string\">b\"foo\\0\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::CStr;%0A++++%0A++++let+cstr+=+CStr::from_bytes_with_nul(b%22foo%5C0%22).expect(%22CStr::from_bytes_with_nul+failed%22);%0A++++assert_eq!(cstr.to_bytes_with_nul(),+b%22foo%5C0%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bytes\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ffi/c_str.rs.html#649\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.bytes\" class=\"fn\">bytes</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/ffi/c_str/struct.Bytes.html\" title=\"struct core::ffi::c_str::Bytes\">Bytes</a>&lt;'_&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Bytes<'_>\">ⓘ</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>cstr_bytes</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/112115\">#112115</a>)</span></div></span></summary><div class=\"docblock\"><p>Iterates over the bytes in this C string.</p>\n<p>The returned iterator will <strong>not</strong> contain the trailing nul terminator\nthat this C string has.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(cstr_bytes)]\n</span><span class=\"kw\">use </span>std::ffi::CStr;\n\n<span class=\"kw\">let </span>cstr = CStr::from_bytes_with_nul(<span class=\"string\">b\"foo\\0\"</span>).expect(<span class=\"string\">\"CStr::from_bytes_with_nul failed\"</span>);\n<span class=\"macro\">assert!</span>(cstr.bytes().eq(<span class=\"kw-2\">*</span><span class=\"string\">b\"foo\"</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(cstr_bytes)%5D%0Afn+main()+%7B%0A++++use+std::ffi::CStr;%0A++++%0A++++let+cstr+=+CStr::from_bytes_with_nul(b%22foo%5C0%22).expect(%22CStr::from_bytes_with_nul+failed%22);%0A++++assert!(cstr.bytes().eq(*b%22foo%22));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_str\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0, const since 1.72.0\">1.4.0 (const: 1.72.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ffi/c_str.rs.html#671\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.to_str\" class=\"fn\">to_str</a>(&amp;self) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>, <a class=\"struct\" href=\"../str/struct.Utf8Error.html\" title=\"struct std::str::Utf8Error\">Utf8Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Yields a <code>&amp;<a href=\"../primitive.str.html\" title=\"str\">str</a></code> slice if the <code>CStr</code> contains valid UTF-8.</p>\n<p>If the contents of the <code>CStr</code> are valid UTF-8 data, this\nfunction will return the corresponding <code>&amp;<a href=\"../primitive.str.html\" title=\"str\">str</a></code> slice. Otherwise,\nit will return an error with details of where UTF-8 validation failed.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ffi::CStr;\n\n<span class=\"kw\">let </span>cstr = CStr::from_bytes_with_nul(<span class=\"string\">b\"foo\\0\"</span>).expect(<span class=\"string\">\"CStr::from_bytes_with_nul failed\"</span>);\n<span class=\"macro\">assert_eq!</span>(cstr.to_str(), <span class=\"prelude-val\">Ok</span>(<span class=\"string\">\"foo\"</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::CStr;%0A++++%0A++++let+cstr+=+CStr::from_bytes_with_nul(b%22foo%5C0%22).expect(%22CStr::from_bytes_with_nul+failed%22);%0A++++assert_eq!(cstr.to_str(),+Ok(%22foo%22));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-CStr-1\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#1069\">source</a><a href=\"#impl-CStr-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_string_lossy\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#1109\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.to_string_lossy\" class=\"fn\">to_string_lossy</a>(&amp;self) -&gt; <a class=\"enum\" href=\"../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'_, <a class=\"primitive\" href=\"../primitive.str.html\">str</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <code>CStr</code> into a <code><a href=\"../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;<a href=\"../primitive.str.html\" title=\"str\">str</a>&gt;</code>.</p>\n<p>If the contents of the <code>CStr</code> are valid UTF-8 data, this\nfunction will return a <code><a href=\"../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>::<a href=\"../borrow/enum.Cow.html#variant.Borrowed\" title=\"variant std::borrow::Cow::Borrowed\">Borrowed</a>(&amp;<a href=\"../primitive.str.html\" title=\"str\">str</a>)</code>\nwith the corresponding <code>&amp;<a href=\"../primitive.str.html\" title=\"str\">str</a></code> slice. Otherwise, it will\nreplace any invalid UTF-8 sequences with\n<a href=\"../char/constant.REPLACEMENT_CHARACTER.html\" title=\"std::char::REPLACEMENT_CHARACTER\"><code>U+FFFD REPLACEMENT CHARACTER</code></a> and return a\n<code><a href=\"../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>::<a href=\"../borrow/enum.Cow.html#variant.Owned\" title=\"variant std::borrow::Cow::Owned\">Owned</a>(&amp;<a href=\"../primitive.str.html\" title=\"str\">str</a>)</code> with the result.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<p>Calling <code>to_string_lossy</code> on a <code>CStr</code> containing valid UTF-8. The leading\n<code>c</code> on the string literal denotes a <code>CStr</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::borrow::Cow;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">c\"Hello World\"</span>.to_string_lossy(), Cow::Borrowed(<span class=\"string\">\"Hello World\"</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::borrow::Cow;%0A++++%0A++++assert_eq!(c%22Hello+World%22.to_string_lossy(),+Cow::Borrowed(%22Hello+World%22));%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Calling <code>to_string_lossy</code> on a <code>CStr</code> containing invalid UTF-8:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::borrow::Cow;\n\n<span class=\"macro\">assert_eq!</span>(\n    <span class=\"string\">c\"Hello \\xF0\\x90\\x80World\"</span>.to_string_lossy(),\n    Cow::Owned(String::from(<span class=\"string\">\"Hello �World\"</span>)) <span class=\"kw\">as </span>Cow&lt;<span class=\"lifetime\">'_</span>, str&gt;\n);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::borrow::Cow;%0A++++%0A++++assert_eq!(%0A++++++++c%22Hello+%5CxF0%5Cx90%5Cx80World%22.to_string_lossy(),%0A++++++++Cow::Owned(String::from(%22Hello+%EF%BF%BDWorld%22))+as+Cow%3C'_,+str%3E%0A++++);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_c_string\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#1127\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.into_c_string\" class=\"fn\">into_c_string</a>(self: <a class=\"struct\" href=\"../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"struct\" href=\"struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a>&gt;) -&gt; <a class=\"struct\" href=\"struct.CString.html\" title=\"struct std::ffi::CString\">CString</a></h4></section></summary><div class=\"docblock\"><p>Converts a <code><a href=\"../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a href=\"struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a>&gt;</code> into a <a href=\"struct.CString.html\" title=\"struct std::ffi::CString\"><code>CString</code></a> without copying or allocating.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ffi::CString;\n\n<span class=\"kw\">let </span>c_string = CString::new(<span class=\"string\">b\"foo\"</span>.to_vec()).expect(<span class=\"string\">\"CString::new failed\"</span>);\n<span class=\"kw\">let </span>boxed = c_string.into_boxed_c_str();\n<span class=\"macro\">assert_eq!</span>(boxed.into_c_string(), CString::new(<span class=\"string\">\"foo\"</span>).expect(<span class=\"string\">\"CString::new failed\"</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::CString;%0A++++%0A++++let+c_string+=+CString::new(b%22foo%22.to_vec()).expect(%22CString::new+failed%22);%0A++++let+boxed+=+c_string.into_boxed_c_str();%0A++++assert_eq!(boxed.into_c_string(),+CString::new(%22foo%22).expect(%22CString::new+failed%22));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details></div><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">§</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AsRef%3CCStr%3E-for-CStr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0\">1.7.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ffi/c_str.rs.html#728\">source</a></span><a href=\"#impl-AsRef%3CCStr%3E-for-CStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a>&gt; for <a class=\"struct\" href=\"struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ffi/c_str.rs.html#730\">source</a><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a></h4></section></summary><div class=\"docblock\">Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AsRef%3CCStr%3E-for-CString\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0\">1.7.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#1061\">source</a></span><a href=\"#impl-AsRef%3CCStr%3E-for-CString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a>&gt; for <a class=\"struct\" href=\"struct.CString.html\" title=\"struct std::ffi::CString\">CString</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_ref-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#1063\">source</a><a href=\"#method.as_ref-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a></h4></section></summary><div class=\"docblock\">Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Borrow%3CCStr%3E-for-CString\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#749\">source</a></span><a href=\"#impl-Borrow%3CCStr%3E-for-CString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;<a class=\"struct\" href=\"struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a>&gt; for <a class=\"struct\" href=\"struct.CString.html\" title=\"struct std::ffi::CString\">CString</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#751\">source</a><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Clone-for-Box%3CCStr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.29.0\">1.29.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#824\">source</a></span><a href=\"#impl-Clone-for-Box%3CCStr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"struct\" href=\"struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#826\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"struct\" href=\"struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a>&gt;</h4></section></summary><div class=\"docblock\">Returns a copy of the value. <a href=\"../clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class=\"docblock\">Performs copy-assignment from <code>source</code>. <a href=\"../clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-CStr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ffi/c_str.rs.html#187\">source</a></span><a href=\"#impl-Debug-for-CStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ffi/c_str.rs.html#188\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"../fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Default-for-%26CStr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ffi/c_str.rs.html#194\">source</a></span><a href=\"#impl-Default-for-%26CStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for &amp;<a class=\"struct\" href=\"struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ffi/c_str.rs.html#196\">source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; &amp;<a class=\"struct\" href=\"struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a></h4></section></summary><div class=\"docblock\">Returns the “default value” for a type. <a href=\"../default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Default-for-Box%3CCStr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.17.0\">1.17.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#928\">source</a></span><a href=\"#impl-Default-for-Box%3CCStr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for <a class=\"struct\" href=\"../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"struct\" href=\"struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.default-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#929\">source</a><a href=\"#method.default-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"struct\" href=\"../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"struct\" href=\"struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a>&gt;</h4></section></summary><div class=\"docblock\">Returns the “default value” for a type. <a href=\"../default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%26CStr%3E-for-Arc%3CCStr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.24.0\">1.24.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#881\">source</a></span><a href=\"#impl-From%3C%26CStr%3E-for-Arc%3CCStr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;&amp;<a class=\"struct\" href=\"struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a>&gt; for <a class=\"struct\" href=\"../sync/struct.Arc.html\" title=\"struct std::sync::Arc\">Arc</a>&lt;<a class=\"struct\" href=\"struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#885\">source</a><a href=\"#method.from-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: &amp;<a class=\"struct\" href=\"struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a>) -&gt; <a class=\"struct\" href=\"../sync/struct.Arc.html\" title=\"struct std::sync::Arc\">Arc</a>&lt;<a class=\"struct\" href=\"struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <code>&amp;CStr</code> into a <code>Arc&lt;CStr&gt;</code>,\nby copying the contents into a newly allocated <a href=\"../sync/struct.Arc.html\" title=\"struct std::sync::Arc\"><code>Arc</code></a>.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%26CStr%3E-for-Box%3CCStr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.17.0\">1.17.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#768\">source</a></span><a href=\"#impl-From%3C%26CStr%3E-for-Box%3CCStr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;&amp;<a class=\"struct\" href=\"struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a>&gt; for <a class=\"struct\" href=\"../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"struct\" href=\"struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#771\">source</a><a href=\"#method.from-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: &amp;<a class=\"struct\" href=\"struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a>) -&gt; <a class=\"struct\" href=\"../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"struct\" href=\"struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <code>&amp;CStr</code> into a <code>Box&lt;CStr&gt;</code>,\nby copying the contents into a newly allocated <a href=\"../boxed/struct.Box.html\" title=\"struct std::boxed::Box\"><code>Box</code></a>.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%26CStr%3E-for-CString\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0\">1.7.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#1042\">source</a></span><a href=\"#impl-From%3C%26CStr%3E-for-CString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;&amp;<a class=\"struct\" href=\"struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a>&gt; for <a class=\"struct\" href=\"struct.CString.html\" title=\"struct std::ffi::CString\">CString</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#1045\">source</a><a href=\"#method.from-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: &amp;<a class=\"struct\" href=\"struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a>) -&gt; <a class=\"struct\" href=\"struct.CString.html\" title=\"struct std::ffi::CString\">CString</a></h4></section></summary><div class=\"docblock\"><p>Converts a <code>&amp;<a href=\"struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a></code> into a <a href=\"struct.CString.html\" title=\"struct std::ffi::CString\"><code>CString</code></a>\nby copying the contents into a new allocation.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%26CStr%3E-for-Cow%3C'a,+CStr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#850\">source</a></span><a href=\"#impl-From%3C%26CStr%3E-for-Cow%3C'a,+CStr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;&amp;'a <a class=\"struct\" href=\"struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a>&gt; for <a class=\"enum\" href=\"../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"struct\" href=\"struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#853\">source</a><a href=\"#method.from-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: &amp;'a <a class=\"struct\" href=\"struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a>) -&gt; <a class=\"enum\" href=\"../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"struct\" href=\"struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <a href=\"struct.CStr.html\" title=\"struct std::ffi::CStr\"><code>CStr</code></a> into a borrowed <a href=\"../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\"><code>Cow</code></a> without copying or allocating.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%26CStr%3E-for-Rc%3CCStr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.24.0\">1.24.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#903\">source</a></span><a href=\"#impl-From%3C%26CStr%3E-for-Rc%3CCStr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;&amp;<a class=\"struct\" href=\"struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a>&gt; for <a class=\"struct\" href=\"../rc/struct.Rc.html\" title=\"struct std::rc::Rc\">Rc</a>&lt;<a class=\"struct\" href=\"struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#907\">source</a><a href=\"#method.from-6\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: &amp;<a class=\"struct\" href=\"struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a>) -&gt; <a class=\"struct\" href=\"../rc/struct.Rc.html\" title=\"struct std::rc::Rc\">Rc</a>&lt;<a class=\"struct\" href=\"struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <code>&amp;CStr</code> into a <code>Rc&lt;CStr&gt;</code>,\nby copying the contents into a newly allocated <a href=\"../rc/struct.Rc.html\" title=\"struct std::rc::Rc\"><code>Rc</code></a>.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CCString%3E-for-Box%3CCStr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#832\">source</a></span><a href=\"#impl-From%3CCString%3E-for-Box%3CCStr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.CString.html\" title=\"struct std::ffi::CString\">CString</a>&gt; for <a class=\"struct\" href=\"../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"struct\" href=\"struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#835\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: <a class=\"struct\" href=\"struct.CString.html\" title=\"struct std::ffi::CString\">CString</a>) -&gt; <a class=\"struct\" href=\"../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"struct\" href=\"struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <a href=\"struct.CString.html\" title=\"struct std::ffi::CString\"><code>CString</code></a> into a <code><a href=\"../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a href=\"struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a>&gt;</code> without copying or allocating.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CCow%3C'_,+CStr%3E%3E-for-Box%3CCStr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0\">1.45.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#778\">source</a></span><a href=\"#impl-From%3CCow%3C'_,+CStr%3E%3E-for-Box%3CCStr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"enum\" href=\"../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'_, <a class=\"struct\" href=\"struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a>&gt;&gt; for <a class=\"struct\" href=\"../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"struct\" href=\"struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#782\">source</a><a href=\"#method.from-5\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(cow: <a class=\"enum\" href=\"../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'_, <a class=\"struct\" href=\"struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a>&gt;) -&gt; <a class=\"struct\" href=\"../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"struct\" href=\"struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <code>Cow&lt;'a, CStr&gt;</code> into a <code>Box&lt;CStr&gt;</code>,\nby copying the contents if they are borrowed.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Hash-for-CStr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0\">1.64.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ffi/c_str.rs.html#97\">source</a></span><a href=\"#impl-Hash-for-CStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ffi/c_str.rs.html#97\">source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;__H&gt;(&amp;self, state: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut __H</a>)<div class=\"where\">where\n    __H: <a class=\"trait\" href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class=\"docblock\">Feeds this value into the given <a href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"../hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Index%3CRangeFrom%3Cusize%3E%3E-for-CStr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.47.0\">1.47.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ffi/c_str.rs.html#705\">source</a></span><a href=\"#impl-Index%3CRangeFrom%3Cusize%3E%3E-for-CStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../ops/trait.Index.html\" title=\"trait std::ops::Index\">Index</a>&lt;<a class=\"struct\" href=\"../ops/struct.RangeFrom.html\" title=\"struct std::ops::RangeFrom\">RangeFrom</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;&gt; for <a class=\"struct\" href=\"struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a></h4></section></summary><div class=\"docblock\">The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.index\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ffi/c_str.rs.html#709\">source</a><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: <a class=\"struct\" href=\"../ops/struct.RangeFrom.html\" title=\"struct std::ops::RangeFrom\">RangeFrom</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;) -&gt; &amp;<a class=\"struct\" href=\"struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a></h4></section></summary><div class=\"docblock\">Performs the indexing (<code>container[index]</code>) operation. <a href=\"../ops/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Ord-for-CStr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ffi/c_str.rs.html#697\">source</a></span><a href=\"#impl-Ord-for-CStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ffi/c_str.rs.html#699\">source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a>) -&gt; <a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a></h4></section></summary><div class=\"docblock\">This method returns an <a href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"../cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq-for-CStr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ffi/c_str.rs.html#681\">source</a></span><a href=\"#impl-PartialEq-for-CStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ffi/c_str.rs.html#683\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialOrd-for-CStr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ffi/c_str.rs.html#690\">source</a></span><a href=\"#impl-PartialOrd-for-CStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a> for <a class=\"struct\" href=\"struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ffi/c_str.rs.html#692\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\">This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"../cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180\">source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"../cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198\">source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"../cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215\">source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"../cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233\">source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"../cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-ToOwned-for-CStr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#1027\">source</a></span><a href=\"#impl-ToOwned-for-CStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../borrow/trait.ToOwned.html\" title=\"trait std::borrow::ToOwned\">ToOwned</a> for <a class=\"struct\" href=\"struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Owned\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Owned\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../borrow/trait.ToOwned.html#associatedtype.Owned\" class=\"associatedtype\">Owned</a> = <a class=\"struct\" href=\"struct.CString.html\" title=\"struct std::ffi::CString\">CString</a></h4></section></summary><div class=\"docblock\">The resulting type after obtaining ownership.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_owned\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#1030\">source</a><a href=\"#method.to_owned\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.ToOwned.html#tymethod.to_owned\" class=\"fn\">to_owned</a>(&amp;self) -&gt; <a class=\"struct\" href=\"struct.CString.html\" title=\"struct std::ffi::CString\">CString</a></h4></section></summary><div class=\"docblock\">Creates owned data from borrowed data, usually by cloning. <a href=\"../borrow/trait.ToOwned.html#tymethod.to_owned\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#1034\">source</a><a href=\"#method.clone_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.ToOwned.html#method.clone_into\" class=\"fn\">clone_into</a>(&amp;self, target: &amp;mut <a class=\"struct\" href=\"struct.CString.html\" title=\"struct std::ffi::CString\">CString</a>)</h4></section></summary><div class=\"docblock\">Uses borrowed data to replace owned data, usually by cloning. <a href=\"../borrow/trait.ToOwned.html#method.clone_into\">Read more</a></div></details></div></details><section id=\"impl-Eq-for-CStr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ffi/c_str.rs.html#688\">source</a></span><a href=\"#impl-Eq-for-CStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a></h3></section></div><h2 id=\"synthetic-implementations\" class=\"section-header\">Auto Trait Implementations<a href=\"#synthetic-implementations\" class=\"anchor\">§</a></h2><div id=\"synthetic-implementations-list\"><section id=\"impl-Freeze-for-CStr\" class=\"impl\"><a href=\"#impl-Freeze-for-CStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"struct\" href=\"struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a></h3></section><section id=\"impl-RefUnwindSafe-for-CStr\" class=\"impl\"><a href=\"#impl-RefUnwindSafe-for-CStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"struct\" href=\"struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a></h3></section><section id=\"impl-Send-for-CStr\" class=\"impl\"><a href=\"#impl-Send-for-CStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"struct\" href=\"struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a></h3></section><section id=\"impl-Sized-for-CStr\" class=\"impl\"><a href=\"#impl-Sized-for-CStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl !<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a> for <a class=\"struct\" href=\"struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a></h3></section><section id=\"impl-Sync-for-CStr\" class=\"impl\"><a href=\"#impl-Sync-for-CStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a></h3></section><section id=\"impl-Unpin-for-CStr\" class=\"impl\"><a href=\"#impl-Unpin-for-CStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"struct\" href=\"struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a></h3></section><section id=\"impl-UnwindSafe-for-CStr\" class=\"impl\"><a href=\"#impl-UnwindSafe-for-CStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a></h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">§</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Any-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a><a href=\"#impl-Any-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#141\">source</a><a href=\"#method.type_id\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../any/trait.Any.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\">Gets the <code>TypeId</code> of <code>self</code>. <a href=\"../any/trait.Any.html#tymethod.type_id\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Borrow%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208\">source</a><a href=\"#impl-Borrow%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#210\">source</a><a href=\"#method.borrow-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216\">source</a><a href=\"#impl-BorrowMut%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#217\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details></div><script type=\"text/json\" id=\"notable-traits-data\">{\"&[u8]\":\"<h3>Notable traits for <code>&amp;[<a class=\\\"primitive\\\" href=\\\"../primitive.u8.html\\\">u8</a>]</code></h3><pre><code><div class=\\\"where\\\">impl <a class=\\\"trait\\\" href=\\\"../io/trait.Read.html\\\" title=\\\"trait std::io::Read\\\">Read</a> for &amp;[<a class=\\\"primitive\\\" href=\\\"../primitive.u8.html\\\">u8</a>]</div>\",\"Bytes<'_>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"https://doc.rust-lang.org/1.80.0/core/ffi/c_str/struct.Bytes.html\\\" title=\\\"struct core::ffi::c_str::Bytes\\\">Bytes</a>&lt;'_&gt;</code></h3><pre><code><div class=\\\"where\\\">impl <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"https://doc.rust-lang.org/1.80.0/core/ffi/c_str/struct.Bytes.html\\\" title=\\\"struct core::ffi::c_str::Bytes\\\">Bytes</a>&lt;'_&gt;</div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = <a class=\\\"primitive\\\" href=\\\"../primitive.u8.html\\\">u8</a>;</div>\"}</script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:23:04.577Z"
}