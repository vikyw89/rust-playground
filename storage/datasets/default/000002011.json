{
	"title": "Layout in std::alloc - Rust",
	"url": "https://doc.rust-lang.org/stable/std/alloc/struct.Layout.html",
	"markdown": "# Layout in std::alloc - Rust\n\n## Struct [std](../index.html)::[alloc](index.html)::[Layout](#)\n\n1.28.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/alloc/layout.rs.html#40) ¬∑\n\n```\npub struct Layout { /* private fields */ }\n```\n\nExpand description\n\nLayout of a block of memory.\n\nAn instance of `Layout` describes a particular layout of memory. You build a `Layout` up as an input to give to an allocator.\n\nAll layouts have an associated size and a power-of-two alignment. The size, when rounded up to the nearest multiple of `align`, does not overflow isize (i.e., the rounded value will always be less than or equal to `isize::MAX`).\n\n(Note that layouts are _not_ required to have non-zero size, even though `GlobalAlloc` requires that all memory requests be non-zero in size. A caller must either ensure that conditions like this are met, use specific allocators with looser requirements, or use the more lenient `Allocator` interface.)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/alloc/layout.rs.html#54)[¬ß](#impl-Layout)\n\n1.28.0 (const: 1.50.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/alloc/layout.rs.html#70)\n\nConstructs a `Layout` from a given `size` and `align`, or returns `LayoutError` if any of the following conditions are not met:\n\n-   `align` must not be zero,\n    \n-   `align` must be a power of two,\n    \n-   `size`, when rounded up to the nearest multiple of `align`, must not overflow isize (i.e., the rounded value must be less than or equal to `isize::MAX`).\n    \n\n1.28.0 (const: 1.36.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/alloc/layout.rs.html#120)\n\nCreates a layout, bypassing all checks.\n\n##### [¬ß](#safety)Safety\n\nThis function is unsafe as it does not verify the preconditions from [`Layout::from_size_align`](about:blank/struct.Layout.html#method.from_size_align \"associated function std::alloc::Layout::from_size_align\").\n\n1.28.0 (const: 1.50.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/alloc/layout.rs.html#130)\n\nThe minimum size in bytes for a memory block of this layout.\n\n1.28.0 (const: 1.50.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/alloc/layout.rs.html#143)\n\nThe minimum byte alignment for a memory block of this layout.\n\nThe returned alignment is guaranteed to be a power of two.\n\n1.28.0 (const: 1.42.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/alloc/layout.rs.html#152)\n\nConstructs a `Layout` suitable for holding a value of type `T`.\n\n1.28.0 (const: [unstable](https://github.com/rust-lang/rust/issues/67521 \"Tracking issue for const_alloc_layout\")) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/alloc/layout.rs.html#167)\n\nProduces layout describing a record that could be used to allocate backing structure for `T` (which could be a trait or other unsized type like a slice).\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/alloc/layout.rs.html#201)\n\nüî¨This is a nightly-only experimental API. (`layout_for_ptr`¬†[#69835](https://github.com/rust-lang/rust/issues/69835))\n\nProduces layout describing a record that could be used to allocate backing structure for `T` (which could be a trait or other unsized type like a slice).\n\n##### [¬ß](#safety-1)Safety\n\nThis function is only safe to call if the following conditions hold:\n\n-   If `T` is `Sized`, this function is always safe to call.\n-   If the unsized tail of `T` is:\n    -   a [slice](../primitive.slice.html \"primitive slice\"), then the length of the slice tail must be an initialized integer, and the size of the _entire value_ (dynamic tail length + statically sized prefix) must fit in `isize`.\n    -   a [trait object](../../book/ch17-02-trait-objects.html), then the vtable part of the pointer must point to a valid vtable for the type `T` acquired by an unsizing coercion, and the size of the _entire value_ (dynamic tail length + statically sized prefix) must fit in `isize`.\n    -   an (unstable) [extern type](../../unstable-book/language-features/extern-types.html), then this function is always safe to call, but may panic or otherwise return the wrong value, as the extern type‚Äôs layout is not known. This is the same behavior as [`Layout::for_value`](about:blank/struct.Layout.html#method.for_value \"associated function std::alloc::Layout::for_value\") on a reference to an extern type tail.\n    -   otherwise, it is conservatively not allowed to call this function.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/alloc/layout.rs.html#218)\n\nüî¨This is a nightly-only experimental API. (`alloc_layout_extra`¬†[#55724](https://github.com/rust-lang/rust/issues/55724))\n\nCreates a `NonNull` that is dangling, but well-aligned for this Layout.\n\nNote that the pointer value may potentially represent a valid pointer, which means this must not be used as a ‚Äúnot yet initialized‚Äù sentinel value. Types that lazily allocate must track initialization by some other means.\n\n1.44.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/alloc/layout.rs.html#239)\n\nCreates a layout describing the record that can hold a value of the same layout as `self`, but that also is aligned to alignment `align` (measured in bytes).\n\nIf `self` already meets the prescribed alignment, then returns `self`.\n\nNote that this method does not add any padding to the overall size, regardless of whether the returned layout has a different alignment. In other words, if `K` has size 16, `K.align_to(32)` will _still_ have size 16.\n\nReturns an error if the combination of `self.size()` and the given `align` violates the conditions listed in [`Layout::from_size_align`](about:blank/struct.Layout.html#method.from_size_align \"associated function std::alloc::Layout::from_size_align\").\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/alloc/layout.rs.html#264)\n\nüî¨This is a nightly-only experimental API. (`alloc_layout_extra`¬†[#55724](https://github.com/rust-lang/rust/issues/55724))\n\nReturns the amount of padding we must insert after `self` to ensure that the following address will satisfy `align` (measured in bytes).\n\ne.g., if `self.size()` is 9, then `self.padding_needed_for(4)` returns 3, because that is the minimum number of bytes of padding required to get a 4-aligned address (assuming that the corresponding memory block starts at a 4-aligned address).\n\nThe return value of this function has no meaning if `align` is not a power-of-two.\n\nNote that the utility of the returned value requires `align` to be less than or equal to the alignment of the starting address for the whole allocated block of memory. One way to satisfy this constraint is to ensure `align <= self.align()`.\n\n1.44.0 (const: [unstable](https://github.com/rust-lang/rust/issues/67521 \"Tracking issue for const_alloc_layout\")) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/alloc/layout.rs.html#300)\n\nCreates a layout by rounding the size of this layout up to a multiple of the layout‚Äôs alignment.\n\nThis is equivalent to adding the result of `padding_needed_for` to the layout‚Äôs current size.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/alloc/layout.rs.html#322)\n\nüî¨This is a nightly-only experimental API. (`alloc_layout_extra`¬†[#55724](https://github.com/rust-lang/rust/issues/55724))\n\nCreates a layout describing the record for `n` instances of `self`, with a suitable amount of padding between each to ensure that each instance is given its requested size and alignment. On success, returns `(k, offs)` where `k` is the layout of the array and `offs` is the distance between the start of each element in the array.\n\nOn arithmetic overflow, returns `LayoutError`.\n\n1.44.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/alloc/layout.rs.html#382)\n\nCreates a layout describing the record for `self` followed by `next`, including any necessary padding to ensure that `next` will be properly aligned, but _no trailing padding_.\n\nIn order to match C representation layout `repr(C)`, you should call `pad_to_align` after extending the layout with all fields. (There is no way to match the default Rust representation layout `repr(Rust)`, as it is unspecified.)\n\nNote that the alignment of the resulting layout will be the maximum of those of `self` and `next`, in order to ensure alignment of both parts.\n\nReturns `Ok((k, offset))`, where `k` is layout of the concatenated record and `offset` is the relative location, in bytes, of the start of the `next` embedded within the concatenated record (assuming that the record itself starts at offset 0).\n\nOn arithmetic overflow, returns `LayoutError`.\n\n##### [¬ß](#examples)Examples\n\nTo calculate the layout of a `#[repr(C)]` structure and the offsets of the fields from its fields‚Äô layouts:\n\n```\npub fn repr_c(fields: &[Layout]) -> Result<(Layout, Vec<usize>), LayoutError> {\n    let mut offsets = Vec::new();\n    let mut layout = Layout::from_size_align(0, 1)?;\n    for &field in fields {\n        let (new_layout, offset) = layout.extend(field)?;\n        layout = new_layout;\n        offsets.push(offset);\n    }\n    // Remember to finalize with `pad_to_align`!\n    Ok((layout.pad_to_align(), offsets))\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::alloc::%7BLayout,+LayoutError%7D;%0A++++pub+fn+repr_c(fields:+%26%5BLayout%5D)+-%3E+Result%3C(Layout,+Vec%3Cusize%3E),+LayoutError%3E+%7B%0A++++++++let+mut+offsets+=+Vec::new();%0A++++++++let+mut+layout+=+Layout::from_size_align(0,+1)?;%0A++++++++for+%26field+in+fields+%7B%0A++++++++++++let+(new_layout,+offset)+=+layout.extend(field)?;%0A++++++++++++layout+=+new_layout;%0A++++++++++++offsets.push(offset);%0A++++++++%7D%0A++++++++//+Remember+to+finalize+with+%60pad_to_align%60!%0A++++++++Ok((layout.pad_to_align(),+offsets))%0A++++%7D%0A++++//+test+that+it+works%0A++++%23%5Brepr(C)%5D+struct+S+%7B+a:+u64,+b:+u32,+c:+u16,+d:+u32+%7D%0A++++let+s+=+Layout::new::%3CS%3E();%0A++++let+u16+=+Layout::new::%3Cu16%3E();%0A++++let+u32+=+Layout::new::%3Cu32%3E();%0A++++let+u64+=+Layout::new::%3Cu64%3E();%0A++++assert_eq!(repr_c(%26%5Bu64,+u32,+u16,+u32%5D),+Ok((s,+vec!%5B0,+8,+12,+16%5D)));%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/alloc/layout.rs.html#408)\n\nüî¨This is a nightly-only experimental API. (`alloc_layout_extra`¬†[#55724](https://github.com/rust-lang/rust/issues/55724))\n\nCreates a layout describing the record for `n` instances of `self`, with no padding between each instance.\n\nNote that, unlike `repeat`, `repeat_packed` does not guarantee that the repeated instances of `self` will be properly aligned, even if a given instance of `self` is properly aligned. In other words, if the layout returned by `repeat_packed` is used to allocate an array, it is not guaranteed that all elements in the array will be properly aligned.\n\nOn arithmetic overflow, returns `LayoutError`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/alloc/layout.rs.html#422)\n\nüî¨This is a nightly-only experimental API. (`alloc_layout_extra`¬†[#55724](https://github.com/rust-lang/rust/issues/55724))\n\nCreates a layout describing the record for `self` followed by `next` with no additional padding between the two. Since no padding is inserted, the alignment of `next` is irrelevant, and is not incorporated _at all_ into the resulting layout.\n\nOn arithmetic overflow, returns `LayoutError`.\n\n1.44.0 (const: [unstable](https://github.com/rust-lang/rust/issues/67521 \"Tracking issue for const_alloc_layout\")) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/alloc/layout.rs.html#435)\n\nCreates a layout describing the record for a `[T; n]`.\n\nOn arithmetic overflow or when the total size would exceed `isize::MAX`, returns `LayoutError`.\n\n1.28.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/alloc/layout.rs.html#38)[¬ß](#impl-Clone-for-Layout)\n\n1.28.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/alloc/layout.rs.html#38)[¬ß](#impl-Debug-for-Layout)\n\n1.28.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/alloc/layout.rs.html#38)[¬ß](#impl-Hash-for-Layout)\n\n1.28.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/alloc/layout.rs.html#38)[¬ß](#impl-PartialEq-for-Layout)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/alloc/layout.rs.html#38)[¬ß](#method.eq)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[¬ß](#method.ne)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.28.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/alloc/layout.rs.html#38)[¬ß](#impl-Copy-for-Layout)\n\n1.28.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/alloc/layout.rs.html#38)[¬ß](#impl-Eq-for-Layout)\n\n1.28.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/alloc/layout.rs.html#38)[¬ß](#impl-StructuralPartialEq-for-Layout)\n\n[¬ß](#impl-Freeze-for-Layout)\n\n[¬ß](#impl-RefUnwindSafe-for-Layout)\n\n[¬ß](#impl-Send-for-Layout)\n\n[¬ß](#impl-Sync-for-Layout)\n\n[¬ß](#impl-Unpin-for-Layout)\n\n[¬ß](#impl-UnwindSafe-for-Layout)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140)[¬ß](#impl-Any-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208)[¬ß](#impl-Borrow%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216)[¬ß](#impl-BorrowMut%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765)[¬ß](#impl-From%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768)[¬ß](#method.from)\n\nReturns the argument unchanged.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750)[¬ß](#impl-Into%3CU%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758)[¬ß](#method.into)\n\nCalls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of `[From](../convert/trait.From.html \"trait std::convert::From\")<T> for U` chooses to do.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85)[¬ß](#impl-ToOwned-for-T)\n\n[¬ß](#associatedtype.Owned)\n\nThe resulting type after obtaining ownership.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88)[¬ß](#method.to_owned)\n\nCreates owned data from borrowed data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#tymethod.to_owned)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92)[¬ß](#method.clone_into)\n\nUses borrowed data to replace owned data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#method.clone_into)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807)[¬ß](#impl-TryFrom%3CU%3E-for-T)\n\n[¬ß](#associatedtype.Error-1)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812)[¬ß](#method.try_from)\n\nPerforms the conversion.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792)[¬ß](#impl-TryInto%3CU%3E-for-T)\n\n[¬ß](#associatedtype.Error)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797)[¬ß](#method.try_into)\n\nPerforms the conversion.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Layout of a block of memory.\"><title>Layout in std::alloc - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc struct\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">Layout</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">Layout</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#implementations\">Methods</a></h3><ul class=\"block method\"><li><a href=\"#method.align\">align</a></li><li><a href=\"#method.align_to\">align_to</a></li><li><a href=\"#method.array\">array</a></li><li><a href=\"#method.dangling\">dangling</a></li><li><a href=\"#method.extend\">extend</a></li><li><a href=\"#method.extend_packed\">extend_packed</a></li><li><a href=\"#method.for_value\">for_value</a></li><li><a href=\"#method.for_value_raw\">for_value_raw</a></li><li><a href=\"#method.from_size_align\">from_size_align</a></li><li><a href=\"#method.from_size_align_unchecked\">from_size_align_unchecked</a></li><li><a href=\"#method.new\">new</a></li><li><a href=\"#method.pad_to_align\">pad_to_align</a></li><li><a href=\"#method.padding_needed_for\">padding_needed_for</a></li><li><a href=\"#method.repeat\">repeat</a></li><li><a href=\"#method.repeat_packed\">repeat_packed</a></li><li><a href=\"#method.size\">size</a></li></ul><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-Clone-for-Layout\">Clone</a></li><li><a href=\"#impl-Copy-for-Layout\">Copy</a></li><li><a href=\"#impl-Debug-for-Layout\">Debug</a></li><li><a href=\"#impl-Eq-for-Layout\">Eq</a></li><li><a href=\"#impl-Hash-for-Layout\">Hash</a></li><li><a href=\"#impl-PartialEq-for-Layout\">PartialEq</a></li><li><a href=\"#impl-StructuralPartialEq-for-Layout\">StructuralPartialEq</a></li></ul><h3><a href=\"#synthetic-implementations\">Auto Trait Implementations</a></h3><ul class=\"block synthetic-implementation\"><li><a href=\"#impl-Freeze-for-Layout\">Freeze</a></li><li><a href=\"#impl-RefUnwindSafe-for-Layout\">RefUnwindSafe</a></li><li><a href=\"#impl-Send-for-Layout\">Send</a></li><li><a href=\"#impl-Sync-for-Layout\">Sync</a></li><li><a href=\"#impl-Unpin-for-Layout\">Unpin</a></li><li><a href=\"#impl-UnwindSafe-for-Layout\">UnwindSafe</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-Any-for-T\">Any</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-T\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-T\">BorrowMut&lt;T&gt;</a></li><li><a href=\"#impl-From%3CT%3E-for-T\">From&lt;T&gt;</a></li><li><a href=\"#impl-Into%3CU%3E-for-T\">Into&lt;U&gt;</a></li><li><a href=\"#impl-ToOwned-for-T\">ToOwned</a></li><li><a href=\"#impl-TryFrom%3CU%3E-for-T\">TryFrom&lt;U&gt;</a></li><li><a href=\"#impl-TryInto%3CU%3E-for-T\">TryInto&lt;U&gt;</a></li></ul></section><h2><a href=\"index.html\">In std::alloc</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.AllocError.html\">AllocError</a></li><li><a href=\"struct.Global.html\">Global</a></li><li><a href=\"struct.Layout.html\">Layout</a></li><li><a href=\"struct.LayoutError.html\">LayoutError</a></li><li><a href=\"struct.System.html\">System</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.Allocator.html\">Allocator</a></li><li><a href=\"trait.GlobalAlloc.html\">GlobalAlloc</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.alloc.html\">alloc</a></li><li><a href=\"fn.alloc_zeroed.html\">alloc_zeroed</a></li><li><a href=\"fn.dealloc.html\">dealloc</a></li><li><a href=\"fn.handle_alloc_error.html\">handle_alloc_error</a></li><li><a href=\"fn.realloc.html\">realloc</a></li><li><a href=\"fn.set_alloc_error_hook.html\">set_alloc_error_hook</a></li><li><a href=\"fn.take_alloc_error_hook.html\">take_alloc_error_hook</a></li></ul><h3><a href=\"index.html#types\">Type Aliases</a></h3><ul class=\"block type\"><li><a href=\"type.LayoutErr.html\">LayoutErr</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‚ÄòS‚Äô or ‚Äò/‚Äô to search, ‚Äò?‚Äô for more options‚Ä¶\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Struct <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">alloc</a>::<wbr><a class=\"struct\" href=\"#\">Layout</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/alloc/layout.rs.html#40\">source</a> ¬∑ <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>‚àí</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub struct Layout { <span class=\"comment\">/* private fields */</span> }</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Layout of a block of memory.</p>\n<p>An instance of <code>Layout</code> describes a particular layout of memory.\nYou build a <code>Layout</code> up as an input to give to an allocator.</p>\n<p>All layouts have an associated size and a power-of-two alignment. The size, when rounded up to\nthe nearest multiple of <code>align</code>, does not overflow isize (i.e., the rounded value will always be\nless than or equal to <code>isize::MAX</code>).</p>\n<p>(Note that layouts are <em>not</em> required to have non-zero size,\neven though <code>GlobalAlloc</code> requires that all memory requests\nbe non-zero in size. A caller must either ensure that conditions\nlike this are met, use specific allocators with looser\nrequirements, or use the more lenient <code>Allocator</code> interface.)</p>\n</div></details><h2 id=\"implementations\" class=\"section-header\">Implementations<a href=\"#implementations\" class=\"anchor\">¬ß</a></h2><div id=\"implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Layout\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/alloc/layout.rs.html#54\">source</a><a href=\"#impl-Layout\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"struct.Layout.html\" title=\"struct std::alloc::Layout\">Layout</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_size_align\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0, const since 1.50.0\">1.28.0 (const: 1.50.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/alloc/layout.rs.html#70\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.from_size_align\" class=\"fn\">from_size_align</a>(\n    size: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>,\n    align: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.Layout.html\" title=\"struct std::alloc::Layout\">Layout</a>, <a class=\"struct\" href=\"struct.LayoutError.html\" title=\"struct std::alloc::LayoutError\">LayoutError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Constructs a <code>Layout</code> from a given <code>size</code> and <code>align</code>,\nor returns <code>LayoutError</code> if any of the following conditions\nare not met:</p>\n<ul>\n<li>\n<p><code>align</code> must not be zero,</p>\n</li>\n<li>\n<p><code>align</code> must be a power of two,</p>\n</li>\n<li>\n<p><code>size</code>, when rounded up to the nearest multiple of <code>align</code>,\nmust not overflow isize (i.e., the rounded value must be\nless than or equal to <code>isize::MAX</code>).</p>\n</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_size_align_unchecked\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0, const since 1.36.0\">1.28.0 (const: 1.36.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/alloc/layout.rs.html#120\">source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"#method.from_size_align_unchecked\" class=\"fn\">from_size_align_unchecked</a>(\n    size: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>,\n    align: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"struct\" href=\"struct.Layout.html\" title=\"struct std::alloc::Layout\">Layout</a></h4></section></summary><div class=\"docblock\"><p>Creates a layout, bypassing all checks.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">¬ß</a>Safety</h5>\n<p>This function is unsafe as it does not verify the preconditions from\n<a href=\"struct.Layout.html#method.from_size_align\" title=\"associated function std::alloc::Layout::from_size_align\"><code>Layout::from_size_align</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.size\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0, const since 1.50.0\">1.28.0 (const: 1.50.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/alloc/layout.rs.html#130\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.size\" class=\"fn\">size</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>The minimum size in bytes for a memory block of this layout.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.align\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0, const since 1.50.0\">1.28.0 (const: 1.50.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/alloc/layout.rs.html#143\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.align\" class=\"fn\">align</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>The minimum byte alignment for a memory block of this layout.</p>\n<p>The returned alignment is guaranteed to be a power of two.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.new\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0, const since 1.42.0\">1.28.0 (const: 1.42.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/alloc/layout.rs.html#152\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.new\" class=\"fn\">new</a>&lt;T&gt;() -&gt; <a class=\"struct\" href=\"struct.Layout.html\" title=\"struct std::alloc::Layout\">Layout</a></h4></section></summary><div class=\"docblock\"><p>Constructs a <code>Layout</code> suitable for holding a value of type <code>T</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.for_value\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0, const unstable\">1.28.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67521\" title=\"Tracking issue for const_alloc_layout\">unstable</a>)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/alloc/layout.rs.html#167\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.for_value\" class=\"fn\">for_value</a>&lt;T&gt;(t: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"struct\" href=\"struct.Layout.html\" title=\"struct std::alloc::Layout\">Layout</a><div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Produces layout describing a record that could be used to\nallocate backing structure for <code>T</code> (which could be a trait\nor other unsized type like a slice).</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.for_value_raw\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/alloc/layout.rs.html#201\">source</a><h4 class=\"code-header\">pub const unsafe fn <a href=\"#method.for_value_raw\" class=\"fn\">for_value_raw</a>&lt;T&gt;(t: <a class=\"primitive\" href=\"../primitive.pointer.html\">*const T</a>) -&gt; <a class=\"struct\" href=\"struct.Layout.html\" title=\"struct std::alloc::Layout\">Layout</a><div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>layout_for_ptr</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/69835\">#69835</a>)</span></div></span></summary><div class=\"docblock\"><p>Produces layout describing a record that could be used to\nallocate backing structure for <code>T</code> (which could be a trait\nor other unsized type like a slice).</p>\n<h5 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">¬ß</a>Safety</h5>\n<p>This function is only safe to call if the following conditions hold:</p>\n<ul>\n<li>If <code>T</code> is <code>Sized</code>, this function is always safe to call.</li>\n<li>If the unsized tail of <code>T</code> is:\n<ul>\n<li>a <a href=\"../primitive.slice.html\" title=\"primitive slice\">slice</a>, then the length of the slice tail must be an initialized\ninteger, and the size of the <em>entire value</em>\n(dynamic tail length + statically sized prefix) must fit in <code>isize</code>.</li>\n<li>a <a href=\"../../book/ch17-02-trait-objects.html\">trait object</a>, then the vtable part of the pointer must point\nto a valid vtable for the type <code>T</code> acquired by an unsizing coercion,\nand the size of the <em>entire value</em>\n(dynamic tail length + statically sized prefix) must fit in <code>isize</code>.</li>\n<li>an (unstable) <a href=\"../../unstable-book/language-features/extern-types.html\">extern type</a>, then this function is always safe to\ncall, but may panic or otherwise return the wrong value, as the\nextern type‚Äôs layout is not known. This is the same behavior as\n<a href=\"struct.Layout.html#method.for_value\" title=\"associated function std::alloc::Layout::for_value\"><code>Layout::for_value</code></a> on a reference to an extern type tail.</li>\n<li>otherwise, it is conservatively not allowed to call this function.</li>\n</ul>\n</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.dangling\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/alloc/layout.rs.html#218\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.dangling\" class=\"fn\">dangling</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../ptr/struct.NonNull.html\" title=\"struct std::ptr::NonNull\">NonNull</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>alloc_layout_extra</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/55724\">#55724</a>)</span></div></span></summary><div class=\"docblock\"><p>Creates a <code>NonNull</code> that is dangling, but well-aligned for this Layout.</p>\n<p>Note that the pointer value may potentially represent a valid pointer,\nwhich means this must not be used as a ‚Äúnot yet initialized‚Äù\nsentinel value. Types that lazily allocate must track initialization by\nsome other means.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.align_to\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.44.0\">1.44.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/alloc/layout.rs.html#239\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.align_to\" class=\"fn\">align_to</a>(&amp;self, align: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.Layout.html\" title=\"struct std::alloc::Layout\">Layout</a>, <a class=\"struct\" href=\"struct.LayoutError.html\" title=\"struct std::alloc::LayoutError\">LayoutError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a layout describing the record that can hold a value\nof the same layout as <code>self</code>, but that also is aligned to\nalignment <code>align</code> (measured in bytes).</p>\n<p>If <code>self</code> already meets the prescribed alignment, then returns\n<code>self</code>.</p>\n<p>Note that this method does not add any padding to the overall\nsize, regardless of whether the returned layout has a different\nalignment. In other words, if <code>K</code> has size 16, <code>K.align_to(32)</code>\nwill <em>still</em> have size 16.</p>\n<p>Returns an error if the combination of <code>self.size()</code> and the given\n<code>align</code> violates the conditions listed in <a href=\"struct.Layout.html#method.from_size_align\" title=\"associated function std::alloc::Layout::from_size_align\"><code>Layout::from_size_align</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.padding_needed_for\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/alloc/layout.rs.html#264\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.padding_needed_for\" class=\"fn\">padding_needed_for</a>(&amp;self, align: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>alloc_layout_extra</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/55724\">#55724</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the amount of padding we must insert after <code>self</code>\nto ensure that the following address will satisfy <code>align</code>\n(measured in bytes).</p>\n<p>e.g., if <code>self.size()</code> is 9, then <code>self.padding_needed_for(4)</code>\nreturns 3, because that is the minimum number of bytes of\npadding required to get a 4-aligned address (assuming that the\ncorresponding memory block starts at a 4-aligned address).</p>\n<p>The return value of this function has no meaning if <code>align</code> is\nnot a power-of-two.</p>\n<p>Note that the utility of the returned value requires <code>align</code>\nto be less than or equal to the alignment of the starting\naddress for the whole allocated block of memory. One way to\nsatisfy this constraint is to ensure <code>align &lt;= self.align()</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.pad_to_align\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.44.0, const unstable\">1.44.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67521\" title=\"Tracking issue for const_alloc_layout\">unstable</a>)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/alloc/layout.rs.html#300\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.pad_to_align\" class=\"fn\">pad_to_align</a>(&amp;self) -&gt; <a class=\"struct\" href=\"struct.Layout.html\" title=\"struct std::alloc::Layout\">Layout</a></h4></section></summary><div class=\"docblock\"><p>Creates a layout by rounding the size of this layout up to a multiple\nof the layout‚Äôs alignment.</p>\n<p>This is equivalent to adding the result of <code>padding_needed_for</code>\nto the layout‚Äôs current size.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.repeat\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/alloc/layout.rs.html#322\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.repeat\" class=\"fn\">repeat</a>(&amp;self, n: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;(<a class=\"struct\" href=\"struct.Layout.html\" title=\"struct std::alloc::Layout\">Layout</a>, <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>), <a class=\"struct\" href=\"struct.LayoutError.html\" title=\"struct std::alloc::LayoutError\">LayoutError</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>alloc_layout_extra</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/55724\">#55724</a>)</span></div></span></summary><div class=\"docblock\"><p>Creates a layout describing the record for <code>n</code> instances of\n<code>self</code>, with a suitable amount of padding between each to\nensure that each instance is given its requested size and\nalignment. On success, returns <code>(k, offs)</code> where <code>k</code> is the\nlayout of the array and <code>offs</code> is the distance between the start\nof each element in the array.</p>\n<p>On arithmetic overflow, returns <code>LayoutError</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.extend\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.44.0\">1.44.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/alloc/layout.rs.html#382\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.extend\" class=\"fn\">extend</a>(&amp;self, next: <a class=\"struct\" href=\"struct.Layout.html\" title=\"struct std::alloc::Layout\">Layout</a>) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;(<a class=\"struct\" href=\"struct.Layout.html\" title=\"struct std::alloc::Layout\">Layout</a>, <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>), <a class=\"struct\" href=\"struct.LayoutError.html\" title=\"struct std::alloc::LayoutError\">LayoutError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a layout describing the record for <code>self</code> followed by\n<code>next</code>, including any necessary padding to ensure that <code>next</code>\nwill be properly aligned, but <em>no trailing padding</em>.</p>\n<p>In order to match C representation layout <code>repr(C)</code>, you should\ncall <code>pad_to_align</code> after extending the layout with all fields.\n(There is no way to match the default Rust representation\nlayout <code>repr(Rust)</code>, as it is unspecified.)</p>\n<p>Note that the alignment of the resulting layout will be the maximum of\nthose of <code>self</code> and <code>next</code>, in order to ensure alignment of both parts.</p>\n<p>Returns <code>Ok((k, offset))</code>, where <code>k</code> is layout of the concatenated\nrecord and <code>offset</code> is the relative location, in bytes, of the\nstart of the <code>next</code> embedded within the concatenated record\n(assuming that the record itself starts at offset 0).</p>\n<p>On arithmetic overflow, returns <code>LayoutError</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">¬ß</a>Examples</h5>\n<p>To calculate the layout of a <code>#[repr(C)]</code> structure and the offsets of\nthe fields from its fields‚Äô layouts:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">pub fn </span>repr_c(fields: <span class=\"kw-2\">&amp;</span>[Layout]) -&gt; <span class=\"prelude-ty\">Result</span>&lt;(Layout, Vec&lt;usize&gt;), LayoutError&gt; {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>offsets = Vec::new();\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>layout = Layout::from_size_align(<span class=\"number\">0</span>, <span class=\"number\">1</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">for </span><span class=\"kw-2\">&amp;</span>field <span class=\"kw\">in </span>fields {\n        <span class=\"kw\">let </span>(new_layout, offset) = layout.extend(field)<span class=\"question-mark\">?</span>;\n        layout = new_layout;\n        offsets.push(offset);\n    }\n    <span class=\"comment\">// Remember to finalize with `pad_to_align`!\n    </span><span class=\"prelude-val\">Ok</span>((layout.pad_to_align(), offsets))\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::alloc::%7BLayout,+LayoutError%7D;%0A++++pub+fn+repr_c(fields:+%26%5BLayout%5D)+-%3E+Result%3C(Layout,+Vec%3Cusize%3E),+LayoutError%3E+%7B%0A++++++++let+mut+offsets+=+Vec::new();%0A++++++++let+mut+layout+=+Layout::from_size_align(0,+1)?;%0A++++++++for+%26field+in+fields+%7B%0A++++++++++++let+(new_layout,+offset)+=+layout.extend(field)?;%0A++++++++++++layout+=+new_layout;%0A++++++++++++offsets.push(offset);%0A++++++++%7D%0A++++++++//+Remember+to+finalize+with+%60pad_to_align%60!%0A++++++++Ok((layout.pad_to_align(),+offsets))%0A++++%7D%0A++++//+test+that+it+works%0A++++%23%5Brepr(C)%5D+struct+S+%7B+a:+u64,+b:+u32,+c:+u16,+d:+u32+%7D%0A++++let+s+=+Layout::new::%3CS%3E();%0A++++let+u16+=+Layout::new::%3Cu16%3E();%0A++++let+u32+=+Layout::new::%3Cu32%3E();%0A++++let+u64+=+Layout::new::%3Cu64%3E();%0A++++assert_eq!(repr_c(%26%5Bu64,+u32,+u16,+u32%5D),+Ok((s,+vec!%5B0,+8,+12,+16%5D)));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.repeat_packed\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/alloc/layout.rs.html#408\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.repeat_packed\" class=\"fn\">repeat_packed</a>(&amp;self, n: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.Layout.html\" title=\"struct std::alloc::Layout\">Layout</a>, <a class=\"struct\" href=\"struct.LayoutError.html\" title=\"struct std::alloc::LayoutError\">LayoutError</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>alloc_layout_extra</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/55724\">#55724</a>)</span></div></span></summary><div class=\"docblock\"><p>Creates a layout describing the record for <code>n</code> instances of\n<code>self</code>, with no padding between each instance.</p>\n<p>Note that, unlike <code>repeat</code>, <code>repeat_packed</code> does not guarantee\nthat the repeated instances of <code>self</code> will be properly\naligned, even if a given instance of <code>self</code> is properly\naligned. In other words, if the layout returned by\n<code>repeat_packed</code> is used to allocate an array, it is not\nguaranteed that all elements in the array will be properly\naligned.</p>\n<p>On arithmetic overflow, returns <code>LayoutError</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.extend_packed\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/alloc/layout.rs.html#422\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.extend_packed\" class=\"fn\">extend_packed</a>(&amp;self, next: <a class=\"struct\" href=\"struct.Layout.html\" title=\"struct std::alloc::Layout\">Layout</a>) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.Layout.html\" title=\"struct std::alloc::Layout\">Layout</a>, <a class=\"struct\" href=\"struct.LayoutError.html\" title=\"struct std::alloc::LayoutError\">LayoutError</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>alloc_layout_extra</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/55724\">#55724</a>)</span></div></span></summary><div class=\"docblock\"><p>Creates a layout describing the record for <code>self</code> followed by\n<code>next</code> with no additional padding between the two. Since no\npadding is inserted, the alignment of <code>next</code> is irrelevant,\nand is not incorporated <em>at all</em> into the resulting layout.</p>\n<p>On arithmetic overflow, returns <code>LayoutError</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.array\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.44.0, const unstable\">1.44.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67521\" title=\"Tracking issue for const_alloc_layout\">unstable</a>)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/alloc/layout.rs.html#435\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.array\" class=\"fn\">array</a>&lt;T&gt;(n: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.Layout.html\" title=\"struct std::alloc::Layout\">Layout</a>, <a class=\"struct\" href=\"struct.LayoutError.html\" title=\"struct std::alloc::LayoutError\">LayoutError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a layout describing the record for a <code>[T; n]</code>.</p>\n<p>On arithmetic overflow or when the total size would exceed\n<code>isize::MAX</code>, returns <code>LayoutError</code>.</p>\n</div></details></div></details></div><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">¬ß</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Clone-for-Layout\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/alloc/layout.rs.html#38\">source</a></span><a href=\"#impl-Clone-for-Layout\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"struct.Layout.html\" title=\"struct std::alloc::Layout\">Layout</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/alloc/layout.rs.html#38\">source</a><a href=\"#method.clone\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"struct.Layout.html\" title=\"struct std::alloc::Layout\">Layout</a></h4></section></summary><div class=\"docblock\">Returns a copy of the value. <a href=\"../clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class=\"docblock\">Performs copy-assignment from <code>source</code>. <a href=\"../clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-Layout\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/alloc/layout.rs.html#38\">source</a></span><a href=\"#impl-Debug-for-Layout\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"struct.Layout.html\" title=\"struct std::alloc::Layout\">Layout</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/alloc/layout.rs.html#38\">source</a><a href=\"#method.fmt\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"../fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Hash-for-Layout\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/alloc/layout.rs.html#38\">source</a></span><a href=\"#impl-Hash-for-Layout\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"struct.Layout.html\" title=\"struct std::alloc::Layout\">Layout</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/alloc/layout.rs.html#38\">source</a><a href=\"#method.hash\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;__H&gt;(&amp;self, state: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut __H</a>)<div class=\"where\">where\n    __H: <a class=\"trait\" href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class=\"docblock\">Feeds this value into the given <a href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"../hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#238-240\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Feeds a slice of this type into the given <a href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"../hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq-for-Layout\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/alloc/layout.rs.html#38\">source</a></span><a href=\"#impl-PartialEq-for-Layout\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"struct.Layout.html\" title=\"struct std::alloc::Layout\">Layout</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/alloc/layout.rs.html#38\">source</a><a href=\"#method.eq\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.Layout.html\" title=\"struct std::alloc::Layout\">Layout</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><section id=\"impl-Copy-for-Layout\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/alloc/layout.rs.html#38\">source</a></span><a href=\"#impl-Copy-for-Layout\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a> for <a class=\"struct\" href=\"struct.Layout.html\" title=\"struct std::alloc::Layout\">Layout</a></h3></section><section id=\"impl-Eq-for-Layout\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/alloc/layout.rs.html#38\">source</a></span><a href=\"#impl-Eq-for-Layout\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"struct.Layout.html\" title=\"struct std::alloc::Layout\">Layout</a></h3></section><section id=\"impl-StructuralPartialEq-for-Layout\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/alloc/layout.rs.html#38\">source</a></span><a href=\"#impl-StructuralPartialEq-for-Layout\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.StructuralPartialEq.html\" title=\"trait std::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"struct\" href=\"struct.Layout.html\" title=\"struct std::alloc::Layout\">Layout</a></h3></section></div><h2 id=\"synthetic-implementations\" class=\"section-header\">Auto Trait Implementations<a href=\"#synthetic-implementations\" class=\"anchor\">¬ß</a></h2><div id=\"synthetic-implementations-list\"><section id=\"impl-Freeze-for-Layout\" class=\"impl\"><a href=\"#impl-Freeze-for-Layout\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"struct\" href=\"struct.Layout.html\" title=\"struct std::alloc::Layout\">Layout</a></h3></section><section id=\"impl-RefUnwindSafe-for-Layout\" class=\"impl\"><a href=\"#impl-RefUnwindSafe-for-Layout\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"struct\" href=\"struct.Layout.html\" title=\"struct std::alloc::Layout\">Layout</a></h3></section><section id=\"impl-Send-for-Layout\" class=\"impl\"><a href=\"#impl-Send-for-Layout\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"struct\" href=\"struct.Layout.html\" title=\"struct std::alloc::Layout\">Layout</a></h3></section><section id=\"impl-Sync-for-Layout\" class=\"impl\"><a href=\"#impl-Sync-for-Layout\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"struct.Layout.html\" title=\"struct std::alloc::Layout\">Layout</a></h3></section><section id=\"impl-Unpin-for-Layout\" class=\"impl\"><a href=\"#impl-Unpin-for-Layout\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"struct\" href=\"struct.Layout.html\" title=\"struct std::alloc::Layout\">Layout</a></h3></section><section id=\"impl-UnwindSafe-for-Layout\" class=\"impl\"><a href=\"#impl-UnwindSafe-for-Layout\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"struct.Layout.html\" title=\"struct std::alloc::Layout\">Layout</a></h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">¬ß</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Any-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a><a href=\"#impl-Any-for-T\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#141\">source</a><a href=\"#method.type_id\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../any/trait.Any.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\">Gets the <code>TypeId</code> of <code>self</code>. <a href=\"../any/trait.Any.html#tymethod.type_id\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Borrow%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208\">source</a><a href=\"#impl-Borrow%3CT%3E-for-T\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#210\">source</a><a href=\"#method.borrow\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216\">source</a><a href=\"#impl-BorrowMut%3CT%3E-for-T\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#217\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765\">source</a><a href=\"#impl-From%3CT%3E-for-T\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768\">source</a><a href=\"#method.from\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the argument unchanged.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Into%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750\">source</a><a href=\"#impl-Into%3CU%3E-for-T\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758\">source</a><a href=\"#method.into\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; U</h4></section></summary><div class=\"docblock\"><p>Calls <code>U::from(self)</code>.</p>\n<p>That is, this conversion is whatever the implementation of\n<code><a href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for U</code> chooses to do.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-ToOwned-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85\">source</a><a href=\"#impl-ToOwned-for-T\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.ToOwned.html\" title=\"trait std::borrow::ToOwned\">ToOwned</a> for T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Owned\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Owned\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../borrow/trait.ToOwned.html#associatedtype.Owned\" class=\"associatedtype\">Owned</a> = T</h4></section></summary><div class=\"docblock\">The resulting type after obtaining ownership.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_owned\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88\">source</a><a href=\"#method.to_owned\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.ToOwned.html#tymethod.to_owned\" class=\"fn\">to_owned</a>(&amp;self) -&gt; T</h4></section></summary><div class=\"docblock\">Creates owned data from borrowed data, usually by cloning. <a href=\"../borrow/trait.ToOwned.html#tymethod.to_owned\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92\">source</a><a href=\"#method.clone_into\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.ToOwned.html#method.clone_into\" class=\"fn\">clone_into</a>(&amp;self, target: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>)</h4></section></summary><div class=\"docblock\">Uses borrowed data to replace owned data, usually by cloning. <a href=\"../borrow/trait.ToOwned.html#method.clone_into\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryFrom%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807\">source</a><a href=\"#impl-TryFrom%3CU%3E-for-T\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812\">source</a><a href=\"#method.try_from\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: U) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, &lt;T as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryInto%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792\">source</a><a href=\"#impl-TryInto%3CU%3E-for-T\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryInto.html\" title=\"trait std::convert::TryInto\">TryInto</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryInto.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797\">source</a><a href=\"#method.try_into\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryInto.html#tymethod.try_into\" class=\"fn\">try_into</a>(self) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;U, &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details></div></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:21:57.884Z"
}