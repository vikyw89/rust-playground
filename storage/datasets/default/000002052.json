{
	"title": "assert_matches in std::assert_matches - Rust",
	"url": "https://doc.rust-lang.org/stable/std/assert_matches/macro.assert_matches.html",
	"markdown": "# assert\\_matches in std::assert\\_matches - Rust\n\n```\npub macro assert_matches {\n    ($left:expr, $(|)? $($pattern:pat_param)|+ $(if $guard:expr)? $(,)?) => { ... },\n    ($left:expr, $(|)? $($pattern:pat_param)|+ $(if $guard:expr)?, $($arg:tt)+) => { ... },\n}\n```\n\nðŸ”¬This is a nightly-only experimental API. (`assert_matches`Â [#82775](https://github.com/rust-lang/rust/issues/82775))\n\nExpand description\n\nAsserts that an expression matches the provided pattern.\n\nThis macro is generally preferable to `assert!(matches!(value, pattern))`, because it can print the debug representation of the actual value shape that did not meet expectations. In contrast, using [`assert!`](../macro.assert.html \"macro std::assert\") will only print that expectations were not met, but not why.\n\nThe pattern syntax is exactly the same as found in a match arm and the `matches!` macro. The optional if guard can be used to add additional checks that must be true for the matched value, otherwise this macro will panic.\n\nOn panic, this macro will print the value of the expression with its debug representation.\n\nLike [`assert!`](../macro.assert.html \"macro std::assert\"), this macro has a second form, where a custom panic message can be provided.\n\n## [Â§](#examples)Examples\n\n```\n#![feature(assert_matches)]\n\nuse std::assert_matches::assert_matches;\n\nlet a = Some(345);\nlet b = Some(56);\nassert_matches!(a, Some(_));\nassert_matches!(b, Some(_));\n\nassert_matches!(a, Some(345));\nassert_matches!(a, Some(345) | None);\n\n// assert_matches!(a, None); // panics\n// assert_matches!(b, Some(345)); // panics\n// assert_matches!(b, Some(345) | None); // panics\n\nassert_matches!(a, Some(x) if x > 100);\n// assert_matches!(a, Some(x) if x < 100); // panics\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(assert_matches)%5D%0A%0Afn+main()+%7B%0A++++use+std::assert_matches::assert_matches;%0A++++%0A++++let+a+=+Some(345);%0A++++let+b+=+Some(56);%0A++++assert_matches!(a,+Some(_));%0A++++assert_matches!(b,+Some(_));%0A++++%0A++++assert_matches!(a,+Some(345));%0A++++assert_matches!(a,+Some(345)+%7C+None);%0A++++%0A++++//+assert_matches!(a,+None);+//+panics%0A++++//+assert_matches!(b,+Some(345));+//+panics%0A++++//+assert_matches!(b,+Some(345)+%7C+None);+//+panics%0A++++%0A++++assert_matches!(a,+Some(x)+if+x+%3E+100);%0A++++//+assert_matches!(a,+Some(x)+if+x+%3C+100);+//+panics%0A%7D&version=nightly&edition=2021)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Asserts that an expression matches the provided pattern.\"><title>assert_matches in std::assert_matches - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc macro\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><div class=\"sidebar-elems\"><h2><a href=\"index.html\">In std::assert_matches</a></h2><h3><a href=\"index.html#macros\">Macros</a></h3><ul class=\"block macro\"><li><a href=\"macro.assert_matches.html\">assert_matches</a></li><li><a href=\"macro.debug_assert_matches.html\">debug_assert_matches</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type â€˜Sâ€™ or â€˜/â€™ to search, â€˜?â€™ for more optionsâ€¦\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Macro <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">assert_matches</a>::<wbr><a class=\"macro\" href=\"#\">assert_matches</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/macros/mod.rs.html#154\">source</a> Â· <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>âˆ’</span>]</button></span></div><pre class=\"rust item-decl\"><span class=\"kw\">pub macro </span>assert_matches {\n    (<span class=\"macro-nonterminal\">$left</span>:expr, $(|)<span class=\"question-mark\">? </span>$(<span class=\"macro-nonterminal\">$pattern</span>:pat_param)|+ $(<span class=\"kw\">if </span><span class=\"macro-nonterminal\">$guard</span>:expr)<span class=\"question-mark\">? </span>$(,)<span class=\"question-mark\">?</span>) =&gt; { ... },\n    (<span class=\"macro-nonterminal\">$left</span>:expr, $(|)<span class=\"question-mark\">? </span>$(<span class=\"macro-nonterminal\">$pattern</span>:pat_param)|+ $(<span class=\"kw\">if </span><span class=\"macro-nonterminal\">$guard</span>:expr)<span class=\"question-mark\">?</span>, $(<span class=\"macro-nonterminal\">$arg</span>:tt)+) =&gt; { ... },\n}</pre><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>assert_matches</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/82775\">#82775</a>)</span></div></span><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Asserts that an expression matches the provided pattern.</p>\n<p>This macro is generally preferable to <code>assert!(matches!(value, pattern))</code>, because it can print\nthe debug representation of the actual value shape that did not meet expectations. In contrast,\nusing <a href=\"../macro.assert.html\" title=\"macro std::assert\"><code>assert!</code></a> will only print that expectations were not met, but not why.</p>\n<p>The pattern syntax is exactly the same as found in a match arm and the <code>matches!</code> macro. The\noptional if guard can be used to add additional checks that must be true for the matched value,\notherwise this macro will panic.</p>\n<p>On panic, this macro will print the value of the expression with its debug representation.</p>\n<p>Like <a href=\"../macro.assert.html\" title=\"macro std::assert\"><code>assert!</code></a>, this macro has a second form, where a custom panic message can be provided.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">Â§</a>Examples</h2>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(assert_matches)]\n\n</span><span class=\"kw\">use </span>std::assert_matches::assert_matches;\n\n<span class=\"kw\">let </span>a = <span class=\"prelude-val\">Some</span>(<span class=\"number\">345</span>);\n<span class=\"kw\">let </span>b = <span class=\"prelude-val\">Some</span>(<span class=\"number\">56</span>);\n<span class=\"macro\">assert_matches!</span>(a, <span class=\"prelude-val\">Some</span>(<span class=\"kw\">_</span>));\n<span class=\"macro\">assert_matches!</span>(b, <span class=\"prelude-val\">Some</span>(<span class=\"kw\">_</span>));\n\n<span class=\"macro\">assert_matches!</span>(a, <span class=\"prelude-val\">Some</span>(<span class=\"number\">345</span>));\n<span class=\"macro\">assert_matches!</span>(a, <span class=\"prelude-val\">Some</span>(<span class=\"number\">345</span>) | <span class=\"prelude-val\">None</span>);\n\n<span class=\"comment\">// assert_matches!(a, None); // panics\n// assert_matches!(b, Some(345)); // panics\n// assert_matches!(b, Some(345) | None); // panics\n\n</span><span class=\"macro\">assert_matches!</span>(a, <span class=\"prelude-val\">Some</span>(x) <span class=\"kw\">if </span>x &gt; <span class=\"number\">100</span>);\n<span class=\"comment\">// assert_matches!(a, Some(x) if x &lt; 100); // panics</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(assert_matches)%5D%0A%0Afn+main()+%7B%0A++++use+std::assert_matches::assert_matches;%0A++++%0A++++let+a+=+Some(345);%0A++++let+b+=+Some(56);%0A++++assert_matches!(a,+Some(_));%0A++++assert_matches!(b,+Some(_));%0A++++%0A++++assert_matches!(a,+Some(345));%0A++++assert_matches!(a,+Some(345)+%7C+None);%0A++++%0A++++//+assert_matches!(a,+None);+//+panics%0A++++//+assert_matches!(b,+Some(345));+//+panics%0A++++//+assert_matches!(b,+Some(345)+%7C+None);+//+panics%0A++++%0A++++assert_matches!(a,+Some(x)+if+x+%3E+100);%0A++++//+assert_matches!(a,+Some(x)+if+x+%3C+100);+//+panics%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:22:48.234Z"
}