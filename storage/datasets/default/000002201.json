{
	"title": "OpenOptions in std::fs - Rust",
	"url": "https://doc.rust-lang.org/stable/std/fs/struct.OpenOptions.html",
	"markdown": "# OpenOptions in std::fs - Rust\n\n```\npub struct OpenOptions(/* private fields */);\n```\n\nExpand description\n\nOptions and flags which can be used to configure how a file is opened.\n\nThis builder exposes the ability to configure how a [`File`](struct.File.html \"struct std::fs::File\") is opened and what operations are permitted on the open file. The [`File::open`](about:blank/struct.File.html#method.open \"associated function std::fs::File::open\") and [`File::create`](about:blank/struct.File.html#method.create \"associated function std::fs::File::create\") methods are aliases for commonly used options using this builder.\n\nGenerally speaking, when using `OpenOptions`, you’ll first call [`OpenOptions::new`](about:blank/struct.OpenOptions.html#method.new \"associated function std::fs::OpenOptions::new\"), then chain calls to methods to set each option, then call [`OpenOptions::open`](about:blank/struct.OpenOptions.html#method.open \"method std::fs::OpenOptions::open\"), passing the path of the file you’re trying to open. This will give you a [`io::Result`](../io/type.Result.html \"type std::io::Result\") with a [`File`](struct.File.html \"struct std::fs::File\") inside that you can further operate on.\n\n## [§](#examples)Examples\n\nOpening a file to read:\n\n```\nuse std::fs::OpenOptions;\n\nlet file = OpenOptions::new().read(true).open(\"foo.txt\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fs::OpenOptions;%0A++++%0A++++let+file+=+OpenOptions::new().read(true).open(%22foo.txt%22);%0A%7D&edition=2021)\n\nOpening a file for both reading and writing, as well as creating it if it doesn’t exist:\n\n```\nuse std::fs::OpenOptions;\n\nlet file = OpenOptions::new()\n            .read(true)\n            .write(true)\n            .create(true)\n            .open(\"foo.txt\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fs::OpenOptions;%0A++++%0A++++let+file+=+OpenOptions::new()%0A++++++++++++++++.read(true)%0A++++++++++++++++.write(true)%0A++++++++++++++++.create(true)%0A++++++++++++++++.open(%22foo.txt%22);%0A%7D&edition=2021)\n\n[source](about:blank/src/std/fs.rs.html#999-1238)[§](#impl-OpenOptions)\n\n1.0.0 · [source](about:blank/src/std/fs.rs.html#1014-1016)\n\nCreates a blank new set of options ready for configuration.\n\nAll options are initially set to `false`.\n\n##### [§](#examples-1)Examples\n\n```\nuse std::fs::OpenOptions;\n\nlet mut options = OpenOptions::new();\nlet file = options.read(true).open(\"foo.txt\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fs::OpenOptions;%0A++++%0A++++let+mut+options+=+OpenOptions::new();%0A++++let+file+=+options.read(true).open(%22foo.txt%22);%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/fs.rs.html#1031-1034)\n\nSets the option for read access.\n\nThis option, when true, will indicate that the file should be `read`\\-able if opened.\n\n##### [§](#examples-2)Examples\n\n```\nuse std::fs::OpenOptions;\n\nlet file = OpenOptions::new().read(true).open(\"foo.txt\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fs::OpenOptions;%0A++++%0A++++let+file+=+OpenOptions::new().read(true).open(%22foo.txt%22);%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/fs.rs.html#1052-1055)\n\nSets the option for write access.\n\nThis option, when true, will indicate that the file should be `write`\\-able if opened.\n\nIf the file already exists, any write calls on it will overwrite its contents, without truncating it.\n\n##### [§](#examples-3)Examples\n\n```\nuse std::fs::OpenOptions;\n\nlet file = OpenOptions::new().write(true).open(\"foo.txt\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fs::OpenOptions;%0A++++%0A++++let+file+=+OpenOptions::new().write(true).open(%22foo.txt%22);%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/fs.rs.html#1105-1108)\n\nSets the option for the append mode.\n\nThis option, when true, means that writes will append to a file instead of overwriting previous contents. Note that setting `.write(true).append(true)` has the same effect as setting only `.append(true)`.\n\nAppend mode guarantees that writes will be positioned at the current end of file, even when there are other processes or threads appending to the same file. This is unlike `[seek](about:blank/io/trait.Seek.html#tymethod.seek \"io::Seek::seek\")([SeekFrom](../io/enum.SeekFrom.html \"enum std::io::SeekFrom\")::[End](about:blank/io/enum.SeekFrom.html#variant.End \"io::SeekFrom::End\")(0))` followed by `write()`, which has a race between seeking and writing during which another writer can write, with our `write()` overwriting their data.\n\nKeep in mind that this does not necessarily guarantee that data appended by different processes or threads does not interleave. The amount of data accepted a single `write()` call depends on the operating system and file system. A successful `write()` is allowed to write only part of the given data, so even if you’re careful to provide the whole message in a single call to `write()`, there is no guarantee that it will be written out in full. If you rely on the filesystem accepting the message in a single write, make sure that all data that belongs together is written in one operation. This can be done by concatenating strings before passing them to [`write()`](about:blank/io/trait.Write.html#tymethod.write \"io::Write::write\").\n\nIf a file is opened with both read and append access, beware that after opening, and after every write, the position for reading may be set at the end of the file. So, before writing, save the current position (using `[Seek](about:blank/io/trait.Seek.html#tymethod.seek \"io::Seek::seek\")::[stream_position](about:blank/io/trait.Seek.html#method.stream_position \"io::Seek::stream_position\")`), and restore it before the next read.\n\n###### [§](#note)Note\n\nThis function doesn’t create the file if it doesn’t exist. Use the [`OpenOptions::create`](about:blank/struct.OpenOptions.html#method.create \"method std::fs::OpenOptions::create\") method to do so.\n\n##### [§](#examples-4)Examples\n\n```\nuse std::fs::OpenOptions;\n\nlet file = OpenOptions::new().append(true).open(\"foo.txt\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fs::OpenOptions;%0A++++%0A++++let+file+=+OpenOptions::new().append(true).open(%22foo.txt%22);%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/fs.rs.html#1125-1128)\n\nSets the option for truncating a previous file.\n\nIf a file is successfully opened with this option set it will truncate the file to 0 length if it already exists.\n\nThe file must be opened with write access for truncate to work.\n\n##### [§](#examples-5)Examples\n\n```\nuse std::fs::OpenOptions;\n\nlet file = OpenOptions::new().write(true).truncate(true).open(\"foo.txt\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fs::OpenOptions;%0A++++%0A++++let+file+=+OpenOptions::new().write(true).truncate(true).open(%22foo.txt%22);%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/fs.rs.html#1146-1149)\n\nSets the option to create a new file, or open it if it already exists.\n\nIn order for the file to be created, [`OpenOptions::write`](about:blank/struct.OpenOptions.html#method.write \"method std::fs::OpenOptions::write\") or [`OpenOptions::append`](about:blank/struct.OpenOptions.html#method.append \"method std::fs::OpenOptions::append\") access must be used.\n\nSee also [`std::fs::write()`](fn.write.html \"fn std::fs::write\") for a simple function to create a file with some given data.\n\n##### [§](#examples-6)Examples\n\n```\nuse std::fs::OpenOptions;\n\nlet file = OpenOptions::new().write(true).create(true).open(\"foo.txt\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fs::OpenOptions;%0A++++%0A++++let+file+=+OpenOptions::new().write(true).create(true).open(%22foo.txt%22);%0A%7D&edition=2021)\n\n1.9.0 · [source](about:blank/src/std/fs.rs.html#1183-1186)\n\nSets the option to create a new file, failing if it already exists.\n\nNo file is allowed to exist at the target location, also no (dangling) symlink. In this way, if the call succeeds, the file returned is guaranteed to be new. If a file exists at the target location, creating a new file will fail with [`AlreadyExists`](about:blank/io/enum.ErrorKind.html#variant.AlreadyExists \"variant std::io::ErrorKind::AlreadyExists\") or another error based on the situation. See [`OpenOptions::open`](about:blank/struct.OpenOptions.html#method.open \"method std::fs::OpenOptions::open\") for a non-exhaustive list of likely errors.\n\nThis option is useful because it is atomic. Otherwise between checking whether a file exists and creating a new one, the file may have been created by another process (a TOCTOU race condition / attack).\n\nIf `.create_new(true)` is set, [`.create()`](about:blank/struct.OpenOptions.html#method.create \"method std::fs::OpenOptions::create\") and [`.truncate()`](about:blank/struct.OpenOptions.html#method.truncate \"method std::fs::OpenOptions::truncate\") are ignored.\n\nThe file must be opened with write or append access in order to create a new file.\n\n##### [§](#examples-7)Examples\n\n```\nuse std::fs::OpenOptions;\n\nlet file = OpenOptions::new().write(true)\n                             .create_new(true)\n                             .open(\"foo.txt\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fs::OpenOptions;%0A++++%0A++++let+file+=+OpenOptions::new().write(true)%0A+++++++++++++++++++++++++++++++++.create_new(true)%0A+++++++++++++++++++++++++++++++++.open(%22foo.txt%22);%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/fs.rs.html#1231-1233)\n\nOpens a file at `path` with the options specified by `self`.\n\n##### [§](#errors)Errors\n\nThis function will return an error under a number of different circumstances. Some of these error conditions are listed here, together with their [`io::ErrorKind`](../io/enum.ErrorKind.html \"enum std::io::ErrorKind\"). The mapping to [`io::ErrorKind`](../io/enum.ErrorKind.html \"enum std::io::ErrorKind\")s is not part of the compatibility contract of the function.\n\n-   [`NotFound`](about:blank/io/enum.ErrorKind.html#variant.NotFound \"variant std::io::ErrorKind::NotFound\"): The specified file does not exist and neither `create` or `create_new` is set.\n-   [`NotFound`](about:blank/io/enum.ErrorKind.html#variant.NotFound \"variant std::io::ErrorKind::NotFound\"): One of the directory components of the file path does not exist.\n-   [`PermissionDenied`](about:blank/io/enum.ErrorKind.html#variant.PermissionDenied \"variant std::io::ErrorKind::PermissionDenied\"): The user lacks permission to get the specified access rights for the file.\n-   [`PermissionDenied`](about:blank/io/enum.ErrorKind.html#variant.PermissionDenied \"variant std::io::ErrorKind::PermissionDenied\"): The user lacks permission to open one of the directory components of the specified path.\n-   [`AlreadyExists`](about:blank/io/enum.ErrorKind.html#variant.AlreadyExists \"variant std::io::ErrorKind::AlreadyExists\"): `create_new` was specified and the file already exists.\n-   [`InvalidInput`](about:blank/io/enum.ErrorKind.html#variant.InvalidInput \"variant std::io::ErrorKind::InvalidInput\"): Invalid combinations of open options (truncate without write access, no access mode set, etc.).\n\nThe following errors don’t match any existing [`io::ErrorKind`](../io/enum.ErrorKind.html \"enum std::io::ErrorKind\") at the moment:\n\n-   One of the directory components of the specified file path was not, in fact, a directory.\n-   Filesystem-level errors: full disk, write permission requested on a read-only file system, exceeded disk quota, too many open files, too long filename, too many symbolic links in the specified path (Unix-like systems only), etc.\n\n##### [§](#examples-8)Examples\n\n```\nuse std::fs::OpenOptions;\n\nlet file = OpenOptions::new().read(true).open(\"foo.txt\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fs::OpenOptions;%0A++++%0A++++let+file+=+OpenOptions::new().read(true).open(%22foo.txt%22);%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/fs.rs.html#191)[§](#impl-Clone-for-OpenOptions)\n\n1.0.0 · [source](about:blank/src/std/fs.rs.html#191)[§](#impl-Debug-for-OpenOptions)\n\n1.10.0 · [source](about:blank/src/std/os/windows/fs.rs.html#269-294)[§](#impl-OpenOptionsExt-for-OpenOptions)\n\nAvailable on **Windows** only.\n\n[source](about:blank/src/std/os/windows/fs.rs.html#270-273)[§](#method.access_mode)\n\nOverrides the `dwDesiredAccess` argument to the call to [`CreateFile`](https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-createfilea) with the specified value. [Read more](about:blank/os/windows/fs/trait.OpenOptionsExt.html#tymethod.access_mode)\n\nOverrides the `dwShareMode` argument to the call to [`CreateFile`](https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-createfilea) with the specified value. [Read more](about:blank/os/windows/fs/trait.OpenOptionsExt.html#tymethod.share_mode)\n\n[source](about:blank/src/std/os/windows/fs.rs.html#280-283)[§](#method.custom_flags)\n\nSets extra flags for the `dwFileFlags` argument to the call to [`CreateFile2`](https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-createfile2) to the specified value (or combines it with `attributes` and `security_qos_flags` to set the `dwFlagsAndAttributes` for [`CreateFile`](https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-createfilea)). [Read more](about:blank/os/windows/fs/trait.OpenOptionsExt.html#tymethod.custom_flags)\n\n[source](about:blank/src/std/os/windows/fs.rs.html#285-288)[§](#method.attributes)\n\nSets the `dwFileAttributes` argument to the call to [`CreateFile2`](https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-createfile2) to the specified value (or combines it with `custom_flags` and `security_qos_flags` to set the `dwFlagsAndAttributes` for [`CreateFile`](https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-createfilea)). [Read more](about:blank/os/windows/fs/trait.OpenOptionsExt.html#tymethod.attributes)\n\n[source](about:blank/src/std/os/windows/fs.rs.html#290-293)[§](#method.security_qos_flags)\n\nSets the `dwSecurityQosFlags` argument to the call to [`CreateFile2`](https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-createfile2) to the specified value (or combines it with `custom_flags` and `attributes` to set the `dwFlagsAndAttributes` for [`CreateFile`](https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-createfilea)). [Read more](about:blank/os/windows/fs/trait.OpenOptionsExt.html#tymethod.security_qos_flags)\n\n[source](about:blank/src/std/os/wasi/fs.rs.html#369-414)[§](#impl-OpenOptionsExt-for-OpenOptions-1)\n\nAvailable on **WASI** only.\n\n[source](about:blank/src/std/os/wasi/fs.rs.html#370-373)[§](#method.lookup_flags)\n\n🔬This is a nightly-only experimental API. (`wasi_ext` [#71213](https://github.com/rust-lang/rust/issues/71213))\n\nPass custom `dirflags` argument to `path_open`. [Read more](about:blank/os/wasi/fs/trait.OpenOptionsExt.html#tymethod.lookup_flags)\n\n[source](about:blank/src/std/os/wasi/fs.rs.html#375-378)[§](#method.directory)\n\n🔬This is a nightly-only experimental API. (`wasi_ext` [#71213](https://github.com/rust-lang/rust/issues/71213))\n\nIndicates whether `OpenOptions` must open a directory or not. [Read more](about:blank/os/wasi/fs/trait.OpenOptionsExt.html#tymethod.directory)\n\n[source](about:blank/src/std/os/wasi/fs.rs.html#380-383)[§](#method.dsync)\n\n🔬This is a nightly-only experimental API. (`wasi_ext` [#71213](https://github.com/rust-lang/rust/issues/71213))\n\nIndicates whether `__WASI_FDFLAG_DSYNC` is passed in the `fs_flags` field of `path_open`. [Read more](about:blank/os/wasi/fs/trait.OpenOptionsExt.html#tymethod.dsync)\n\n[source](about:blank/src/std/os/wasi/fs.rs.html#385-388)[§](#method.nonblock)\n\n🔬This is a nightly-only experimental API. (`wasi_ext` [#71213](https://github.com/rust-lang/rust/issues/71213))\n\nIndicates whether `__WASI_FDFLAG_NONBLOCK` is passed in the `fs_flags` field of `path_open`. [Read more](about:blank/os/wasi/fs/trait.OpenOptionsExt.html#tymethod.nonblock)\n\n[source](about:blank/src/std/os/wasi/fs.rs.html#390-393)[§](#method.rsync)\n\n🔬This is a nightly-only experimental API. (`wasi_ext` [#71213](https://github.com/rust-lang/rust/issues/71213))\n\nIndicates whether `__WASI_FDFLAG_RSYNC` is passed in the `fs_flags` field of `path_open`. [Read more](about:blank/os/wasi/fs/trait.OpenOptionsExt.html#tymethod.rsync)\n\n[source](about:blank/src/std/os/wasi/fs.rs.html#395-398)[§](#method.sync)\n\n🔬This is a nightly-only experimental API. (`wasi_ext` [#71213](https://github.com/rust-lang/rust/issues/71213))\n\nIndicates whether `__WASI_FDFLAG_SYNC` is passed in the `fs_flags` field of `path_open`. [Read more](about:blank/os/wasi/fs/trait.OpenOptionsExt.html#tymethod.sync)\n\n[source](about:blank/src/std/os/wasi/fs.rs.html#400-403)[§](#method.fs_rights_base)\n\n🔬This is a nightly-only experimental API. (`wasi_ext` [#71213](https://github.com/rust-lang/rust/issues/71213))\n\nIndicates the value that should be passed in for the `fs_rights_base` parameter of `path_open`. [Read more](about:blank/os/wasi/fs/trait.OpenOptionsExt.html#tymethod.fs_rights_base)\n\n[source](about:blank/src/std/os/wasi/fs.rs.html#405-408)[§](#method.fs_rights_inheriting)\n\n🔬This is a nightly-only experimental API. (`wasi_ext` [#71213](https://github.com/rust-lang/rust/issues/71213))\n\nIndicates the value that should be passed in for the `fs_rights_inheriting` parameter of `path_open`. [Read more](about:blank/os/wasi/fs/trait.OpenOptionsExt.html#tymethod.fs_rights_inheriting)\n\n[source](about:blank/src/std/os/wasi/fs.rs.html#410-413)[§](#method.open_at)\n\n🔬This is a nightly-only experimental API. (`wasi_ext` [#71213](https://github.com/rust-lang/rust/issues/71213))\n\n1.1.0 · [source](about:blank/src/std/os/unix/fs.rs.html#410-420)[§](#impl-OpenOptionsExt-for-OpenOptions-2)\n\nAvailable on **Unix** only.\n\n[§](#impl-Freeze-for-OpenOptions)\n\n[§](#impl-RefUnwindSafe-for-OpenOptions)\n\n[§](#impl-Send-for-OpenOptions)\n\n[§](#impl-Sync-for-OpenOptions)\n\n[§](#impl-Unpin-for-OpenOptions)\n\n[§](#impl-UnwindSafe-for-OpenOptions)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140)[§](#impl-Any-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208)[§](#impl-Borrow%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216)[§](#impl-BorrowMut%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765)[§](#impl-From%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768)[§](#method.from)\n\nReturns the argument unchanged.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750)[§](#impl-Into%3CU%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758)[§](#method.into)\n\nCalls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of `[From](../convert/trait.From.html \"trait std::convert::From\")<T> for U` chooses to do.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85)[§](#impl-ToOwned-for-T)\n\n[§](#associatedtype.Owned)\n\nThe resulting type after obtaining ownership.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88)[§](#method.to_owned)\n\nCreates owned data from borrowed data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#tymethod.to_owned)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92)[§](#method.clone_into)\n\nUses borrowed data to replace owned data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#method.clone_into)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807)[§](#impl-TryFrom%3CU%3E-for-T)\n\n[§](#associatedtype.Error-1)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812)[§](#method.try_from)\n\nPerforms the conversion.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792)[§](#impl-TryInto%3CU%3E-for-T)\n\n[§](#associatedtype.Error)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797)[§](#method.try_into)\n\nPerforms the conversion.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Options and flags which can be used to configure how a file is opened.\"><title>OpenOptions in std::fs - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc struct\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">OpenOptions</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">OpenOptions</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#implementations\">Methods</a></h3><ul class=\"block method\"><li><a href=\"#method.append\">append</a></li><li><a href=\"#method.create\">create</a></li><li><a href=\"#method.create_new\">create_new</a></li><li><a href=\"#method.new\">new</a></li><li><a href=\"#method.open\">open</a></li><li><a href=\"#method.read\">read</a></li><li><a href=\"#method.truncate\">truncate</a></li><li><a href=\"#method.write\">write</a></li></ul><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-Clone-for-OpenOptions\">Clone</a></li><li><a href=\"#impl-Debug-for-OpenOptions\">Debug</a></li><li><a href=\"#impl-OpenOptionsExt-for-OpenOptions\">OpenOptionsExt</a></li><li><a href=\"#impl-OpenOptionsExt-for-OpenOptions-1\">OpenOptionsExt</a></li><li><a href=\"#impl-OpenOptionsExt-for-OpenOptions-2\">OpenOptionsExt</a></li></ul><h3><a href=\"#synthetic-implementations\">Auto Trait Implementations</a></h3><ul class=\"block synthetic-implementation\"><li><a href=\"#impl-Freeze-for-OpenOptions\">Freeze</a></li><li><a href=\"#impl-RefUnwindSafe-for-OpenOptions\">RefUnwindSafe</a></li><li><a href=\"#impl-Send-for-OpenOptions\">Send</a></li><li><a href=\"#impl-Sync-for-OpenOptions\">Sync</a></li><li><a href=\"#impl-Unpin-for-OpenOptions\">Unpin</a></li><li><a href=\"#impl-UnwindSafe-for-OpenOptions\">UnwindSafe</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-Any-for-T\">Any</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-T\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-T\">BorrowMut&lt;T&gt;</a></li><li><a href=\"#impl-From%3CT%3E-for-T\">From&lt;T&gt;</a></li><li><a href=\"#impl-Into%3CU%3E-for-T\">Into&lt;U&gt;</a></li><li><a href=\"#impl-ToOwned-for-T\">ToOwned</a></li><li><a href=\"#impl-TryFrom%3CU%3E-for-T\">TryFrom&lt;U&gt;</a></li><li><a href=\"#impl-TryInto%3CU%3E-for-T\">TryInto&lt;U&gt;</a></li></ul></section><h2><a href=\"index.html\">In std::fs</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.DirBuilder.html\">DirBuilder</a></li><li><a href=\"struct.DirEntry.html\">DirEntry</a></li><li><a href=\"struct.File.html\">File</a></li><li><a href=\"struct.FileTimes.html\">FileTimes</a></li><li><a href=\"struct.FileType.html\">FileType</a></li><li><a href=\"struct.Metadata.html\">Metadata</a></li><li><a href=\"struct.OpenOptions.html\">OpenOptions</a></li><li><a href=\"struct.Permissions.html\">Permissions</a></li><li><a href=\"struct.ReadDir.html\">ReadDir</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.canonicalize.html\">canonicalize</a></li><li><a href=\"fn.copy.html\">copy</a></li><li><a href=\"fn.create_dir.html\">create_dir</a></li><li><a href=\"fn.create_dir_all.html\">create_dir_all</a></li><li><a href=\"fn.hard_link.html\">hard_link</a></li><li><a href=\"fn.metadata.html\">metadata</a></li><li><a href=\"fn.read.html\">read</a></li><li><a href=\"fn.read_dir.html\">read_dir</a></li><li><a href=\"fn.read_link.html\">read_link</a></li><li><a href=\"fn.read_to_string.html\">read_to_string</a></li><li><a href=\"fn.remove_dir.html\">remove_dir</a></li><li><a href=\"fn.remove_dir_all.html\">remove_dir_all</a></li><li><a href=\"fn.remove_file.html\">remove_file</a></li><li><a href=\"fn.rename.html\">rename</a></li><li><a href=\"fn.set_permissions.html\">set_permissions</a></li><li><a href=\"fn.soft_link.html\">soft_link</a></li><li><a href=\"fn.symlink_metadata.html\">symlink_metadata</a></li><li><a href=\"fn.try_exists.html\">try_exists</a></li><li><a href=\"fn.write.html\">write</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Struct <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">fs</a>::<wbr><a class=\"struct\" href=\"#\">OpenOptions</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/fs.rs.html#194\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub struct OpenOptions(<span class=\"comment\">/* private fields */</span>);</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Options and flags which can be used to configure how a file is opened.</p>\n<p>This builder exposes the ability to configure how a <a href=\"struct.File.html\" title=\"struct std::fs::File\"><code>File</code></a> is opened and\nwhat operations are permitted on the open file. The <a href=\"struct.File.html#method.open\" title=\"associated function std::fs::File::open\"><code>File::open</code></a> and\n<a href=\"struct.File.html#method.create\" title=\"associated function std::fs::File::create\"><code>File::create</code></a> methods are aliases for commonly used options using this\nbuilder.</p>\n<p>Generally speaking, when using <code>OpenOptions</code>, you’ll first call\n<a href=\"struct.OpenOptions.html#method.new\" title=\"associated function std::fs::OpenOptions::new\"><code>OpenOptions::new</code></a>, then chain calls to methods to set each option, then\ncall <a href=\"struct.OpenOptions.html#method.open\" title=\"method std::fs::OpenOptions::open\"><code>OpenOptions::open</code></a>, passing the path of the file you’re trying to\nopen. This will give you a <a href=\"../io/type.Result.html\" title=\"type std::io::Result\"><code>io::Result</code></a> with a <a href=\"struct.File.html\" title=\"struct std::fs::File\"><code>File</code></a> inside that you\ncan further operate on.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<p>Opening a file to read:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs::OpenOptions;\n\n<span class=\"kw\">let </span>file = OpenOptions::new().read(<span class=\"bool-val\">true</span>).open(<span class=\"string\">\"foo.txt\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fs::OpenOptions;%0A++++%0A++++let+file+=+OpenOptions::new().read(true).open(%22foo.txt%22);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Opening a file for both reading and writing, as well as creating it if it\ndoesn’t exist:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs::OpenOptions;\n\n<span class=\"kw\">let </span>file = OpenOptions::new()\n            .read(<span class=\"bool-val\">true</span>)\n            .write(<span class=\"bool-val\">true</span>)\n            .create(<span class=\"bool-val\">true</span>)\n            .open(<span class=\"string\">\"foo.txt\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fs::OpenOptions;%0A++++%0A++++let+file+=+OpenOptions::new()%0A++++++++++++++++.read(true)%0A++++++++++++++++.write(true)%0A++++++++++++++++.create(true)%0A++++++++++++++++.open(%22foo.txt%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><h2 id=\"implementations\" class=\"section-header\">Implementations<a href=\"#implementations\" class=\"anchor\">§</a></h2><div id=\"implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-OpenOptions\" class=\"impl\"><a class=\"src rightside\" href=\"../../src/std/fs.rs.html#999-1238\">source</a><a href=\"#impl-OpenOptions\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"struct.OpenOptions.html\" title=\"struct std::fs::OpenOptions\">OpenOptions</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.new\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/fs.rs.html#1014-1016\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.new\" class=\"fn\">new</a>() -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Creates a blank new set of options ready for configuration.</p>\n<p>All options are initially set to <code>false</code>.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs::OpenOptions;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>options = OpenOptions::new();\n<span class=\"kw\">let </span>file = options.read(<span class=\"bool-val\">true</span>).open(<span class=\"string\">\"foo.txt\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fs::OpenOptions;%0A++++%0A++++let+mut+options+=+OpenOptions::new();%0A++++let+file+=+options.read(true).open(%22foo.txt%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/fs.rs.html#1031-1034\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.read\" class=\"fn\">read</a>(&amp;mut self, read: <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut Self</a></h4></section></summary><div class=\"docblock\"><p>Sets the option for read access.</p>\n<p>This option, when true, will indicate that the file should be\n<code>read</code>-able if opened.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs::OpenOptions;\n\n<span class=\"kw\">let </span>file = OpenOptions::new().read(<span class=\"bool-val\">true</span>).open(<span class=\"string\">\"foo.txt\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fs::OpenOptions;%0A++++%0A++++let+file+=+OpenOptions::new().read(true).open(%22foo.txt%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/fs.rs.html#1052-1055\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.write\" class=\"fn\">write</a>(&amp;mut self, write: <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut Self</a></h4></section></summary><div class=\"docblock\"><p>Sets the option for write access.</p>\n<p>This option, when true, will indicate that the file should be\n<code>write</code>-able if opened.</p>\n<p>If the file already exists, any write calls on it will overwrite its\ncontents, without truncating it.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs::OpenOptions;\n\n<span class=\"kw\">let </span>file = OpenOptions::new().write(<span class=\"bool-val\">true</span>).open(<span class=\"string\">\"foo.txt\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fs::OpenOptions;%0A++++%0A++++let+file+=+OpenOptions::new().write(true).open(%22foo.txt%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.append\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/fs.rs.html#1105-1108\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.append\" class=\"fn\">append</a>(&amp;mut self, append: <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut Self</a></h4></section></summary><div class=\"docblock\"><p>Sets the option for the append mode.</p>\n<p>This option, when true, means that writes will append to a file instead\nof overwriting previous contents.\nNote that setting <code>.write(true).append(true)</code> has the same effect as\nsetting only <code>.append(true)</code>.</p>\n<p>Append mode guarantees that writes will be positioned at the current end of file,\neven when there are other processes or threads appending to the same file. This is\nunlike <code><a href=\"../io/trait.Seek.html#tymethod.seek\" title=\"io::Seek::seek\">seek</a>(<a href=\"../io/enum.SeekFrom.html\" title=\"enum std::io::SeekFrom\">SeekFrom</a>::<a href=\"../io/enum.SeekFrom.html#variant.End\" title=\"io::SeekFrom::End\">End</a>(0))</code> followed by <code>write()</code>, which\nhas a race between seeking and writing during which another writer can write, with\nour <code>write()</code> overwriting their data.</p>\n<p>Keep in mind that this does not necessarily guarantee that data appended by\ndifferent processes or threads does not interleave. The amount of data accepted a\nsingle <code>write()</code> call depends on the operating system and file system. A\nsuccessful <code>write()</code> is allowed to write only part of the given data, so even if\nyou’re careful to provide the whole message in a single call to <code>write()</code>, there\nis no guarantee that it will be written out in full. If you rely on the filesystem\naccepting the message in a single write, make sure that all data that belongs\ntogether is written in one operation. This can be done by concatenating strings\nbefore passing them to <a href=\"../io/trait.Write.html#tymethod.write\" title=\"io::Write::write\"><code>write()</code></a>.</p>\n<p>If a file is opened with both read and append access, beware that after\nopening, and after every write, the position for reading may be set at the\nend of the file. So, before writing, save the current position (using\n<code><a href=\"../io/trait.Seek.html#tymethod.seek\" title=\"io::Seek::seek\">Seek</a>::<a href=\"../io/trait.Seek.html#method.stream_position\" title=\"io::Seek::stream_position\">stream_position</a></code>), and restore it before the next read.</p>\n<h6 id=\"note\"><a class=\"doc-anchor\" href=\"#note\">§</a>Note</h6>\n<p>This function doesn’t create the file if it doesn’t exist. Use the\n<a href=\"struct.OpenOptions.html#method.create\" title=\"method std::fs::OpenOptions::create\"><code>OpenOptions::create</code></a> method to do so.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs::OpenOptions;\n\n<span class=\"kw\">let </span>file = OpenOptions::new().append(<span class=\"bool-val\">true</span>).open(<span class=\"string\">\"foo.txt\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fs::OpenOptions;%0A++++%0A++++let+file+=+OpenOptions::new().append(true).open(%22foo.txt%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.truncate\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/fs.rs.html#1125-1128\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.truncate\" class=\"fn\">truncate</a>(&amp;mut self, truncate: <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut Self</a></h4></section></summary><div class=\"docblock\"><p>Sets the option for truncating a previous file.</p>\n<p>If a file is successfully opened with this option set it will truncate\nthe file to 0 length if it already exists.</p>\n<p>The file must be opened with write access for truncate to work.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs::OpenOptions;\n\n<span class=\"kw\">let </span>file = OpenOptions::new().write(<span class=\"bool-val\">true</span>).truncate(<span class=\"bool-val\">true</span>).open(<span class=\"string\">\"foo.txt\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fs::OpenOptions;%0A++++%0A++++let+file+=+OpenOptions::new().write(true).truncate(true).open(%22foo.txt%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.create\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/fs.rs.html#1146-1149\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.create\" class=\"fn\">create</a>(&amp;mut self, create: <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut Self</a></h4></section></summary><div class=\"docblock\"><p>Sets the option to create a new file, or open it if it already exists.</p>\n<p>In order for the file to be created, <a href=\"struct.OpenOptions.html#method.write\" title=\"method std::fs::OpenOptions::write\"><code>OpenOptions::write</code></a> or\n<a href=\"struct.OpenOptions.html#method.append\" title=\"method std::fs::OpenOptions::append\"><code>OpenOptions::append</code></a> access must be used.</p>\n<p>See also <a href=\"fn.write.html\" title=\"fn std::fs::write\"><code>std::fs::write()</code></a> for a simple function to\ncreate a file with some given data.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs::OpenOptions;\n\n<span class=\"kw\">let </span>file = OpenOptions::new().write(<span class=\"bool-val\">true</span>).create(<span class=\"bool-val\">true</span>).open(<span class=\"string\">\"foo.txt\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fs::OpenOptions;%0A++++%0A++++let+file+=+OpenOptions::new().write(true).create(true).open(%22foo.txt%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.create_new\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.9.0\">1.9.0</span> · <a class=\"src\" href=\"../../src/std/fs.rs.html#1183-1186\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.create_new\" class=\"fn\">create_new</a>(&amp;mut self, create_new: <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut Self</a></h4></section></summary><div class=\"docblock\"><p>Sets the option to create a new file, failing if it already exists.</p>\n<p>No file is allowed to exist at the target location, also no (dangling) symlink. In this\nway, if the call succeeds, the file returned is guaranteed to be new.\nIf a file exists at the target location, creating a new file will fail with <a href=\"../io/enum.ErrorKind.html#variant.AlreadyExists\" title=\"variant std::io::ErrorKind::AlreadyExists\"><code>AlreadyExists</code></a>\nor another error based on the situation. See <a href=\"struct.OpenOptions.html#method.open\" title=\"method std::fs::OpenOptions::open\"><code>OpenOptions::open</code></a> for a\nnon-exhaustive list of likely errors.</p>\n<p>This option is useful because it is atomic. Otherwise between checking\nwhether a file exists and creating a new one, the file may have been\ncreated by another process (a TOCTOU race condition / attack).</p>\n<p>If <code>.create_new(true)</code> is set, <a href=\"struct.OpenOptions.html#method.create\" title=\"method std::fs::OpenOptions::create\"><code>.create()</code></a> and <a href=\"struct.OpenOptions.html#method.truncate\" title=\"method std::fs::OpenOptions::truncate\"><code>.truncate()</code></a> are\nignored.</p>\n<p>The file must be opened with write or append access in order to create\na new file.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs::OpenOptions;\n\n<span class=\"kw\">let </span>file = OpenOptions::new().write(<span class=\"bool-val\">true</span>)\n                             .create_new(<span class=\"bool-val\">true</span>)\n                             .open(<span class=\"string\">\"foo.txt\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fs::OpenOptions;%0A++++%0A++++let+file+=+OpenOptions::new().write(true)%0A+++++++++++++++++++++++++++++++++.create_new(true)%0A+++++++++++++++++++++++++++++++++.open(%22foo.txt%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.open\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/fs.rs.html#1231-1233\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.open\" class=\"fn\">open</a>&lt;P: <a class=\"trait\" href=\"../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;&gt;(&amp;self, path: P) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.File.html\" title=\"struct std::fs::File\">File</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Opens a file at <code>path</code> with the options specified by <code>self</code>.</p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h5>\n<p>This function will return an error under a number of different\ncircumstances. Some of these error conditions are listed here, together\nwith their <a href=\"../io/enum.ErrorKind.html\" title=\"enum std::io::ErrorKind\"><code>io::ErrorKind</code></a>. The mapping to <a href=\"../io/enum.ErrorKind.html\" title=\"enum std::io::ErrorKind\"><code>io::ErrorKind</code></a>s is not\npart of the compatibility contract of the function.</p>\n<ul>\n<li><a href=\"../io/enum.ErrorKind.html#variant.NotFound\" title=\"variant std::io::ErrorKind::NotFound\"><code>NotFound</code></a>: The specified file does not exist and neither <code>create</code>\nor <code>create_new</code> is set.</li>\n<li><a href=\"../io/enum.ErrorKind.html#variant.NotFound\" title=\"variant std::io::ErrorKind::NotFound\"><code>NotFound</code></a>: One of the directory components of the file path does\nnot exist.</li>\n<li><a href=\"../io/enum.ErrorKind.html#variant.PermissionDenied\" title=\"variant std::io::ErrorKind::PermissionDenied\"><code>PermissionDenied</code></a>: The user lacks permission to get the specified\naccess rights for the file.</li>\n<li><a href=\"../io/enum.ErrorKind.html#variant.PermissionDenied\" title=\"variant std::io::ErrorKind::PermissionDenied\"><code>PermissionDenied</code></a>: The user lacks permission to open one of the\ndirectory components of the specified path.</li>\n<li><a href=\"../io/enum.ErrorKind.html#variant.AlreadyExists\" title=\"variant std::io::ErrorKind::AlreadyExists\"><code>AlreadyExists</code></a>: <code>create_new</code> was specified and the file already\nexists.</li>\n<li><a href=\"../io/enum.ErrorKind.html#variant.InvalidInput\" title=\"variant std::io::ErrorKind::InvalidInput\"><code>InvalidInput</code></a>: Invalid combinations of open options (truncate\nwithout write access, no access mode set, etc.).</li>\n</ul>\n<p>The following errors don’t match any existing <a href=\"../io/enum.ErrorKind.html\" title=\"enum std::io::ErrorKind\"><code>io::ErrorKind</code></a> at the moment:</p>\n<ul>\n<li>One of the directory components of the specified file path\nwas not, in fact, a directory.</li>\n<li>Filesystem-level errors: full disk, write permission\nrequested on a read-only file system, exceeded disk quota, too many\nopen files, too long filename, too many symbolic links in the\nspecified path (Unix-like systems only), etc.</li>\n</ul>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs::OpenOptions;\n\n<span class=\"kw\">let </span>file = OpenOptions::new().read(<span class=\"bool-val\">true</span>).open(<span class=\"string\">\"foo.txt\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fs::OpenOptions;%0A++++%0A++++let+file+=+OpenOptions::new().read(true).open(%22foo.txt%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details></div><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">§</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Clone-for-OpenOptions\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/fs.rs.html#191\">source</a></span><a href=\"#impl-Clone-for-OpenOptions\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"struct.OpenOptions.html\" title=\"struct std::fs::OpenOptions\">OpenOptions</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/fs.rs.html#191\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"struct.OpenOptions.html\" title=\"struct std::fs::OpenOptions\">OpenOptions</a></h4></section></summary><div class=\"docblock\">Returns a copy of the value. <a href=\"../clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class=\"docblock\">Performs copy-assignment from <code>source</code>. <a href=\"../clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-OpenOptions\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/fs.rs.html#191\">source</a></span><a href=\"#impl-Debug-for-OpenOptions\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"struct.OpenOptions.html\" title=\"struct std::fs::OpenOptions\">OpenOptions</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/fs.rs.html#191\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"../fmt/type.Result.html\" title=\"type std::fmt::Result\">Result</a></h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-OpenOptionsExt-for-OpenOptions\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"../../src/std/os/windows/fs.rs.html#269-294\">source</a></span><a href=\"#impl-OpenOptionsExt-for-OpenOptions\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../os/windows/fs/trait.OpenOptionsExt.html\" title=\"trait std::os::windows::fs::OpenOptionsExt\">OpenOptionsExt</a> for <a class=\"struct\" href=\"struct.OpenOptions.html\" title=\"struct std::fs::OpenOptions\">OpenOptions</a></h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Windows</strong> only.</div></span></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.access_mode\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/windows/fs.rs.html#270-273\">source</a><a href=\"#method.access_mode\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/windows/fs/trait.OpenOptionsExt.html#tymethod.access_mode\" class=\"fn\">access_mode</a>(&amp;mut self, access: <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>) -&gt; &amp;mut <a class=\"struct\" href=\"struct.OpenOptions.html\" title=\"struct std::fs::OpenOptions\">OpenOptions</a></h4></section></summary><div class=\"docblock\">Overrides the <code>dwDesiredAccess</code> argument to the call to <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-createfilea\"><code>CreateFile</code></a>\nwith the specified value. <a href=\"../os/windows/fs/trait.OpenOptionsExt.html#tymethod.access_mode\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.share_mode\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/windows/fs.rs.html#275-278\">source</a><a href=\"#method.share_mode\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/windows/fs/trait.OpenOptionsExt.html#tymethod.share_mode\" class=\"fn\">share_mode</a>(&amp;mut self, share: <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>) -&gt; &amp;mut <a class=\"struct\" href=\"struct.OpenOptions.html\" title=\"struct std::fs::OpenOptions\">OpenOptions</a></h4></section></summary><div class=\"docblock\">Overrides the <code>dwShareMode</code> argument to the call to <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-createfilea\"><code>CreateFile</code></a> with\nthe specified value. <a href=\"../os/windows/fs/trait.OpenOptionsExt.html#tymethod.share_mode\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.custom_flags\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/windows/fs.rs.html#280-283\">source</a><a href=\"#method.custom_flags\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/windows/fs/trait.OpenOptionsExt.html#tymethod.custom_flags\" class=\"fn\">custom_flags</a>(&amp;mut self, flags: <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>) -&gt; &amp;mut <a class=\"struct\" href=\"struct.OpenOptions.html\" title=\"struct std::fs::OpenOptions\">OpenOptions</a></h4></section></summary><div class=\"docblock\">Sets extra flags for the <code>dwFileFlags</code> argument to the call to\n<a href=\"https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-createfile2\"><code>CreateFile2</code></a> to the specified value (or combines it with\n<code>attributes</code> and <code>security_qos_flags</code> to set the <code>dwFlagsAndAttributes</code>\nfor <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-createfilea\"><code>CreateFile</code></a>). <a href=\"../os/windows/fs/trait.OpenOptionsExt.html#tymethod.custom_flags\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.attributes\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/windows/fs.rs.html#285-288\">source</a><a href=\"#method.attributes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/windows/fs/trait.OpenOptionsExt.html#tymethod.attributes\" class=\"fn\">attributes</a>(&amp;mut self, attributes: <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>) -&gt; &amp;mut <a class=\"struct\" href=\"struct.OpenOptions.html\" title=\"struct std::fs::OpenOptions\">OpenOptions</a></h4></section></summary><div class=\"docblock\">Sets the <code>dwFileAttributes</code> argument to the call to <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-createfile2\"><code>CreateFile2</code></a> to\nthe specified value (or combines it with <code>custom_flags</code> and\n<code>security_qos_flags</code> to set the <code>dwFlagsAndAttributes</code> for\n<a href=\"https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-createfilea\"><code>CreateFile</code></a>). <a href=\"../os/windows/fs/trait.OpenOptionsExt.html#tymethod.attributes\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.security_qos_flags\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/windows/fs.rs.html#290-293\">source</a><a href=\"#method.security_qos_flags\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/windows/fs/trait.OpenOptionsExt.html#tymethod.security_qos_flags\" class=\"fn\">security_qos_flags</a>(&amp;mut self, flags: <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>) -&gt; &amp;mut <a class=\"struct\" href=\"struct.OpenOptions.html\" title=\"struct std::fs::OpenOptions\">OpenOptions</a></h4></section></summary><div class=\"docblock\">Sets the <code>dwSecurityQosFlags</code> argument to the call to <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-createfile2\"><code>CreateFile2</code></a> to\nthe specified value (or combines it with <code>custom_flags</code> and <code>attributes</code>\nto set the <code>dwFlagsAndAttributes</code> for <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-createfilea\"><code>CreateFile</code></a>). <a href=\"../os/windows/fs/trait.OpenOptionsExt.html#tymethod.security_qos_flags\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-OpenOptionsExt-for-OpenOptions-1\" class=\"impl\"><a class=\"src rightside\" href=\"../../src/std/os/wasi/fs.rs.html#369-414\">source</a><a href=\"#impl-OpenOptionsExt-for-OpenOptions-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../os/wasi/fs/trait.OpenOptionsExt.html\" title=\"trait std::os::wasi::fs::OpenOptionsExt\">OpenOptionsExt</a> for <a class=\"struct\" href=\"struct.OpenOptions.html\" title=\"struct std::fs::OpenOptions\">OpenOptions</a></h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>WASI</strong> only.</div></span></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lookup_flags\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/wasi/fs.rs.html#370-373\">source</a><a href=\"#method.lookup_flags\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/wasi/fs/trait.OpenOptionsExt.html#tymethod.lookup_flags\" class=\"fn\">lookup_flags</a>(&amp;mut self, flags: <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>) -&gt; &amp;mut <a class=\"struct\" href=\"struct.OpenOptions.html\" title=\"struct std::fs::OpenOptions\">OpenOptions</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>wasi_ext</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/71213\">#71213</a>)</span></div></span><div class=\"docblock\">Pass custom <code>dirflags</code> argument to <code>path_open</code>. <a href=\"../os/wasi/fs/trait.OpenOptionsExt.html#tymethod.lookup_flags\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.directory\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/wasi/fs.rs.html#375-378\">source</a><a href=\"#method.directory\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/wasi/fs/trait.OpenOptionsExt.html#tymethod.directory\" class=\"fn\">directory</a>(&amp;mut self, dir: <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>) -&gt; &amp;mut <a class=\"struct\" href=\"struct.OpenOptions.html\" title=\"struct std::fs::OpenOptions\">OpenOptions</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>wasi_ext</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/71213\">#71213</a>)</span></div></span><div class=\"docblock\">Indicates whether <code>OpenOptions</code> must open a directory or not. <a href=\"../os/wasi/fs/trait.OpenOptionsExt.html#tymethod.directory\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.dsync\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/wasi/fs.rs.html#380-383\">source</a><a href=\"#method.dsync\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/wasi/fs/trait.OpenOptionsExt.html#tymethod.dsync\" class=\"fn\">dsync</a>(&amp;mut self, enabled: <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>) -&gt; &amp;mut <a class=\"struct\" href=\"struct.OpenOptions.html\" title=\"struct std::fs::OpenOptions\">OpenOptions</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>wasi_ext</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/71213\">#71213</a>)</span></div></span><div class=\"docblock\">Indicates whether <code>__WASI_FDFLAG_DSYNC</code> is passed in the <code>fs_flags</code>\nfield of <code>path_open</code>. <a href=\"../os/wasi/fs/trait.OpenOptionsExt.html#tymethod.dsync\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.nonblock\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/wasi/fs.rs.html#385-388\">source</a><a href=\"#method.nonblock\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/wasi/fs/trait.OpenOptionsExt.html#tymethod.nonblock\" class=\"fn\">nonblock</a>(&amp;mut self, enabled: <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>) -&gt; &amp;mut <a class=\"struct\" href=\"struct.OpenOptions.html\" title=\"struct std::fs::OpenOptions\">OpenOptions</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>wasi_ext</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/71213\">#71213</a>)</span></div></span><div class=\"docblock\">Indicates whether <code>__WASI_FDFLAG_NONBLOCK</code> is passed in the <code>fs_flags</code>\nfield of <code>path_open</code>. <a href=\"../os/wasi/fs/trait.OpenOptionsExt.html#tymethod.nonblock\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.rsync\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/wasi/fs.rs.html#390-393\">source</a><a href=\"#method.rsync\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/wasi/fs/trait.OpenOptionsExt.html#tymethod.rsync\" class=\"fn\">rsync</a>(&amp;mut self, enabled: <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>) -&gt; &amp;mut <a class=\"struct\" href=\"struct.OpenOptions.html\" title=\"struct std::fs::OpenOptions\">OpenOptions</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>wasi_ext</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/71213\">#71213</a>)</span></div></span><div class=\"docblock\">Indicates whether <code>__WASI_FDFLAG_RSYNC</code> is passed in the <code>fs_flags</code>\nfield of <code>path_open</code>. <a href=\"../os/wasi/fs/trait.OpenOptionsExt.html#tymethod.rsync\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sync\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/wasi/fs.rs.html#395-398\">source</a><a href=\"#method.sync\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/wasi/fs/trait.OpenOptionsExt.html#tymethod.sync\" class=\"fn\">sync</a>(&amp;mut self, enabled: <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>) -&gt; &amp;mut <a class=\"struct\" href=\"struct.OpenOptions.html\" title=\"struct std::fs::OpenOptions\">OpenOptions</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>wasi_ext</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/71213\">#71213</a>)</span></div></span><div class=\"docblock\">Indicates whether <code>__WASI_FDFLAG_SYNC</code> is passed in the <code>fs_flags</code>\nfield of <code>path_open</code>. <a href=\"../os/wasi/fs/trait.OpenOptionsExt.html#tymethod.sync\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fs_rights_base\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/wasi/fs.rs.html#400-403\">source</a><a href=\"#method.fs_rights_base\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/wasi/fs/trait.OpenOptionsExt.html#tymethod.fs_rights_base\" class=\"fn\">fs_rights_base</a>(&amp;mut self, rights: <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>) -&gt; &amp;mut <a class=\"struct\" href=\"struct.OpenOptions.html\" title=\"struct std::fs::OpenOptions\">OpenOptions</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>wasi_ext</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/71213\">#71213</a>)</span></div></span><div class=\"docblock\">Indicates the value that should be passed in for the <code>fs_rights_base</code>\nparameter of <code>path_open</code>. <a href=\"../os/wasi/fs/trait.OpenOptionsExt.html#tymethod.fs_rights_base\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fs_rights_inheriting\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/wasi/fs.rs.html#405-408\">source</a><a href=\"#method.fs_rights_inheriting\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/wasi/fs/trait.OpenOptionsExt.html#tymethod.fs_rights_inheriting\" class=\"fn\">fs_rights_inheriting</a>(&amp;mut self, rights: <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>) -&gt; &amp;mut <a class=\"struct\" href=\"struct.OpenOptions.html\" title=\"struct std::fs::OpenOptions\">OpenOptions</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>wasi_ext</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/71213\">#71213</a>)</span></div></span><div class=\"docblock\">Indicates the value that should be passed in for the\n<code>fs_rights_inheriting</code> parameter of <code>path_open</code>. <a href=\"../os/wasi/fs/trait.OpenOptionsExt.html#tymethod.fs_rights_inheriting\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.open_at\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/wasi/fs.rs.html#410-413\">source</a><a href=\"#method.open_at\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/wasi/fs/trait.OpenOptionsExt.html#tymethod.open_at\" class=\"fn\">open_at</a>&lt;P: <a class=\"trait\" href=\"../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;&gt;(&amp;self, file: &amp;<a class=\"struct\" href=\"struct.File.html\" title=\"struct std::fs::File\">File</a>, path: P) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.File.html\" title=\"struct std::fs::File\">File</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>wasi_ext</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/71213\">#71213</a>)</span></div></span><div class=\"docblock\">Open a file or directory. <a href=\"../os/wasi/fs/trait.OpenOptionsExt.html#tymethod.open_at\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-OpenOptionsExt-for-OpenOptions-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.1.0\">1.1.0</span> · <a class=\"src\" href=\"../../src/std/os/unix/fs.rs.html#410-420\">source</a></span><a href=\"#impl-OpenOptionsExt-for-OpenOptions-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../os/unix/fs/trait.OpenOptionsExt.html\" title=\"trait std::os::unix::fs::OpenOptionsExt\">OpenOptionsExt</a> for <a class=\"struct\" href=\"struct.OpenOptions.html\" title=\"struct std::fs::OpenOptions\">OpenOptions</a></h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Unix</strong> only.</div></span></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.mode\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/unix/fs.rs.html#411-414\">source</a><a href=\"#method.mode\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/unix/fs/trait.OpenOptionsExt.html#tymethod.mode\" class=\"fn\">mode</a>(&amp;mut self, mode: <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>) -&gt; &amp;mut <a class=\"struct\" href=\"struct.OpenOptions.html\" title=\"struct std::fs::OpenOptions\">OpenOptions</a></h4></section></summary><div class=\"docblock\">Sets the mode bits that a new file will be created with. <a href=\"../os/unix/fs/trait.OpenOptionsExt.html#tymethod.mode\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.custom_flags-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/unix/fs.rs.html#416-419\">source</a><a href=\"#method.custom_flags-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/unix/fs/trait.OpenOptionsExt.html#tymethod.custom_flags\" class=\"fn\">custom_flags</a>(&amp;mut self, flags: <a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>) -&gt; &amp;mut <a class=\"struct\" href=\"struct.OpenOptions.html\" title=\"struct std::fs::OpenOptions\">OpenOptions</a></h4></section></summary><div class=\"docblock\">Pass custom flags to the <code>flags</code> argument of <code>open</code>. <a href=\"../os/unix/fs/trait.OpenOptionsExt.html#tymethod.custom_flags\">Read more</a></div></details></div></details></div><h2 id=\"synthetic-implementations\" class=\"section-header\">Auto Trait Implementations<a href=\"#synthetic-implementations\" class=\"anchor\">§</a></h2><div id=\"synthetic-implementations-list\"><section id=\"impl-Freeze-for-OpenOptions\" class=\"impl\"><a href=\"#impl-Freeze-for-OpenOptions\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"struct\" href=\"struct.OpenOptions.html\" title=\"struct std::fs::OpenOptions\">OpenOptions</a></h3></section><section id=\"impl-RefUnwindSafe-for-OpenOptions\" class=\"impl\"><a href=\"#impl-RefUnwindSafe-for-OpenOptions\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"struct\" href=\"struct.OpenOptions.html\" title=\"struct std::fs::OpenOptions\">OpenOptions</a></h3></section><section id=\"impl-Send-for-OpenOptions\" class=\"impl\"><a href=\"#impl-Send-for-OpenOptions\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"struct\" href=\"struct.OpenOptions.html\" title=\"struct std::fs::OpenOptions\">OpenOptions</a></h3></section><section id=\"impl-Sync-for-OpenOptions\" class=\"impl\"><a href=\"#impl-Sync-for-OpenOptions\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"struct.OpenOptions.html\" title=\"struct std::fs::OpenOptions\">OpenOptions</a></h3></section><section id=\"impl-Unpin-for-OpenOptions\" class=\"impl\"><a href=\"#impl-Unpin-for-OpenOptions\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"struct\" href=\"struct.OpenOptions.html\" title=\"struct std::fs::OpenOptions\">OpenOptions</a></h3></section><section id=\"impl-UnwindSafe-for-OpenOptions\" class=\"impl\"><a href=\"#impl-UnwindSafe-for-OpenOptions\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"struct.OpenOptions.html\" title=\"struct std::fs::OpenOptions\">OpenOptions</a></h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">§</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Any-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a><a href=\"#impl-Any-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#141\">source</a><a href=\"#method.type_id\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../any/trait.Any.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\">Gets the <code>TypeId</code> of <code>self</code>. <a href=\"../any/trait.Any.html#tymethod.type_id\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Borrow%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208\">source</a><a href=\"#impl-Borrow%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#210\">source</a><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216\">source</a><a href=\"#impl-BorrowMut%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#217\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765\">source</a><a href=\"#impl-From%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the argument unchanged.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Into%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750\">source</a><a href=\"#impl-Into%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758\">source</a><a href=\"#method.into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; U</h4></section></summary><div class=\"docblock\"><p>Calls <code>U::from(self)</code>.</p>\n<p>That is, this conversion is whatever the implementation of\n<code><a href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for U</code> chooses to do.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-ToOwned-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85\">source</a><a href=\"#impl-ToOwned-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.ToOwned.html\" title=\"trait std::borrow::ToOwned\">ToOwned</a> for T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Owned\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Owned\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../borrow/trait.ToOwned.html#associatedtype.Owned\" class=\"associatedtype\">Owned</a> = T</h4></section></summary><div class=\"docblock\">The resulting type after obtaining ownership.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_owned\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88\">source</a><a href=\"#method.to_owned\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.ToOwned.html#tymethod.to_owned\" class=\"fn\">to_owned</a>(&amp;self) -&gt; T</h4></section></summary><div class=\"docblock\">Creates owned data from borrowed data, usually by cloning. <a href=\"../borrow/trait.ToOwned.html#tymethod.to_owned\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92\">source</a><a href=\"#method.clone_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.ToOwned.html#method.clone_into\" class=\"fn\">clone_into</a>(&amp;self, target: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>)</h4></section></summary><div class=\"docblock\">Uses borrowed data to replace owned data, usually by cloning. <a href=\"../borrow/trait.ToOwned.html#method.clone_into\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryFrom%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807\">source</a><a href=\"#impl-TryFrom%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812\">source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: U) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, &lt;T as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryInto%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792\">source</a><a href=\"#impl-TryInto%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryInto.html\" title=\"trait std::convert::TryInto\">TryInto</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryInto.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797\">source</a><a href=\"#method.try_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryInto.html#tymethod.try_into\" class=\"fn\">try_into</a>(self) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;U, &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details></div></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:23:12.861Z"
}