{
	"title": "Literal expressions - The Rust Reference",
	"url": "https://doc.rust-lang.org/stable/reference/expressions/literal-expr.html",
	"markdown": "# Literal expressions - The Rust Reference\n\n> **Syntax**  \n> _LiteralExpression_ :  \n>       [CHAR\\_LITERAL](about:blank/tokens.html#character-literals)  \n>    | [STRING\\_LITERAL](about:blank/tokens.html#string-literals)  \n>    | [RAW\\_STRING\\_LITERAL](about:blank/tokens.html#raw-string-literals)  \n>    | [BYTE\\_LITERAL](about:blank/tokens.html#byte-literals)  \n>    | [BYTE\\_STRING\\_LITERAL](about:blank/tokens.html#byte-string-literals)  \n>    | [RAW\\_BYTE\\_STRING\\_LITERAL](about:blank/tokens.html#raw-byte-string-literals)  \n>    | [C\\_STRING\\_LITERAL](about:blank/tokens.html#c-string-literals)  \n>    | [RAW\\_C\\_STRING\\_LITERAL](about:blank/tokens.html#raw-c-string-literals)  \n>    | [INTEGER\\_LITERAL](about:blank/tokens.html#integer-literals)  \n>    | [FLOAT\\_LITERAL](about:blank/tokens.html#floating-point-literals)  \n>    | `true` | `false`\n\nA _literal expression_ is an expression consisting of a single token, rather than a sequence of tokens, that immediately and directly denotes the value it evaluates to, rather than referring to it by name or some other evaluation rule.\n\nA literal is a form of [constant expression](about:blank/const_eval.html#constant-expressions), so is evaluated (primarily) at compile time.\n\nEach of the lexical [literal](about:blank/tokens.html#literals) forms described earlier can make up a literal expression, as can the keywords `true` and `false`.\n\n```rust\n#![allow(unused)]\nfn main() {\n\"hello\";   // string type\n'5';       // character type\n5;         // integer type\n}\n```\n\nIn the descriptions below, the _string representation_ of a token is the sequence of characters from the input which matched the token's production in a _Lexer_ grammar snippet.\n\n> **Note**: this string representation never includes a character `U+000D` (CR) immediately followed by `U+000A` (LF): this pair would have been previously transformed into a single `U+000A` (LF).\n\n## [Escapes](#escapes)\n\nThe descriptions of textual literal expressions below make use of several forms of _escape_.\n\nEach form of escape is characterised by:\n\n-   an _escape sequence_: a sequence of characters, which always begins with `U+005C` (`\\`)\n-   an _escaped value_: either a single character or an empty sequence of characters\n\nIn the definitions of escapes below:\n\n-   An _octal digit_ is any of the characters in the range \\[`0`\\-`7`\\].\n-   A _hexadecimal digit_ is any of the characters in the ranges \\[`0`\\-`9`\\], \\[`a`\\-`f`\\], or \\[`A`\\-`F`\\].\n\n### [Simple escapes](#simple-escapes)\n\nEach sequence of characters occurring in the first column of the following table is an escape sequence.\n\nIn each case, the escaped value is the character given in the corresponding entry in the second column.\n\n| Escape sequence | Escaped value |\n| --- | --- |\n| `\\0` | U+0000 (NUL) |\n| `\\t` | U+0009 (HT) |\n| `\\n` | U+000A (LF) |\n| `\\r` | U+000D (CR) |\n| `\\\"` | U+0022 (QUOTATION MARK) |\n| `\\'` | U+0027 (APOSTROPHE) |\n| `\\\\` | U+005C (REVERSE SOLIDUS) |\n\n### [8-bit escapes](#8-bit-escapes)\n\nThe escape sequence consists of `\\x` followed by two hexadecimal digits.\n\nThe escaped value is the character whose [Unicode scalar value](http://www.unicode.org/glossary/#unicode_scalar_value) is the result of interpreting the final two characters in the escape sequence as a hexadecimal integer, as if by [`u8::from_str_radix`](about:blank/core/primitive.u8.html#method.from_str_radix) with radix 16.\n\n> **Note**: the escaped value therefore has a [Unicode scalar value](http://www.unicode.org/glossary/#unicode_scalar_value) in the range of [`u8`](../types/numeric.html).\n\n### [7-bit escapes](#7-bit-escapes)\n\nThe escape sequence consists of `\\x` followed by an octal digit then a hexadecimal digit.\n\nThe escaped value is the character whose [Unicode scalar value](http://www.unicode.org/glossary/#unicode_scalar_value) is the result of interpreting the final two characters in the escape sequence as a hexadecimal integer, as if by [`u8::from_str_radix`](about:blank/core/primitive.u8.html#method.from_str_radix) with radix 16.\n\n### [Unicode escapes](#unicode-escapes)\n\nThe escape sequence consists of `\\u{`, followed by a sequence of characters each of which is a hexadecimal digit or `_`, followed by `}`.\n\nThe escaped value is the character whose [Unicode scalar value](http://www.unicode.org/glossary/#unicode_scalar_value) is the result of interpreting the hexadecimal digits contained in the escape sequence as a hexadecimal integer, as if by [`u32::from_str_radix`](about:blank/core/primitive.u32.html#method.from_str_radix) with radix 16.\n\n> **Note**: the permitted forms of a [CHAR\\_LITERAL](about:blank/tokens.html#character-literals) or [STRING\\_LITERAL](about:blank/tokens.html#string-literals) token ensure that there is such a character.\n\n### [String continuation escapes](#string-continuation-escapes)\n\nThe escape sequence consists of `\\` followed immediately by `U+000A` (LF), and all following whitespace characters before the next non-whitespace character. For this purpose, the whitespace characters are `U+0009` (HT), `U+000A` (LF), `U+000D` (CR), and `U+0020` (SPACE).\n\nThe escaped value is an empty sequence of characters.\n\n> **Note**: The effect of this form of escape is that a string continuation skips following whitespace, including additional newlines. Thus `a`, `b` and `c` are equal:\n> \n> ```rust\n> #![allow(unused)]\n> fn main() {\n> let a = \"foobar\";\n> let b = \"foo\\\n>          bar\";\n> let c = \"foo\\\n> \n>      bar\";\n> \n> assert_eq!(a, b);\n> assert_eq!(b, c);\n> }\n> ```\n> \n> Skipping additional newlines (as in example c) is potentially confusing and unexpected. This behavior may be adjusted in the future. Until a decision is made, it is recommended to avoid relying on skipping multiple newlines with line continuations. See [this issue](https://github.com/rust-lang/reference/pull/1042) for more information.\n\n## [Character literal expressions](#character-literal-expressions)\n\nA character literal expression consists of a single [CHAR\\_LITERAL](about:blank/tokens.html#character-literals) token.\n\nThe expression's type is the primitive [`char`](../types/textual.html) type.\n\nThe token must not have a suffix.\n\nThe token's _literal content_ is the sequence of characters following the first `U+0027` (`'`) and preceding the last `U+0027` (`'`) in the string representation of the token.\n\nThe literal expression's _represented character_ is derived from the literal content as follows:\n\n-   If the literal content is one of the following forms of escape sequence, the represented character is the escape sequence's escaped value:\n    \n    -   [Simple escapes](#simple-escapes)\n    -   [7-bit escapes](#7-bit-escapes)\n    -   [Unicode escapes](#unicode-escapes)\n-   Otherwise the represented character is the single character that makes up the literal content.\n    \n\nThe expression's value is the [`char`](../types/textual.html) corresponding to the represented character's [Unicode scalar value](http://www.unicode.org/glossary/#unicode_scalar_value).\n\n> **Note**: the permitted forms of a [CHAR\\_LITERAL](about:blank/tokens.html#character-literals) token ensure that these rules always produce a single character.\n\nExamples of character literal expressions:\n\n```rust\n#![allow(unused)]\nfn main() {\n'R';                               // R\n'\\'';                              // '\n'\\x52';                            // R\n'\\u{00E6}';                        // LATIN SMALL LETTER AE (U+00E6)\n}\n```\n\n## [String literal expressions](#string-literal-expressions)\n\nA string literal expression consists of a single [STRING\\_LITERAL](about:blank/tokens.html#string-literals) or [RAW\\_STRING\\_LITERAL](about:blank/tokens.html#raw-string-literals) token.\n\nThe expression's type is a shared reference (with `static` lifetime) to the primitive [`str`](../types/textual.html) type. That is, the type is `&'static str`.\n\nThe token must not have a suffix.\n\nThe token's _literal content_ is the sequence of characters following the first `U+0022` (`\"`) and preceding the last `U+0022` (`\"`) in the string representation of the token.\n\nThe literal expression's _represented string_ is a sequence of characters derived from the literal content as follows:\n\n-   If the token is a [STRING\\_LITERAL](about:blank/tokens.html#string-literals), each escape sequence of any of the following forms occurring in the literal content is replaced by the escape sequence's escaped value.\n    \n    -   [Simple escapes](#simple-escapes)\n    -   [7-bit escapes](#7-bit-escapes)\n    -   [Unicode escapes](#unicode-escapes)\n    -   [String continuation escapes](#string-continuation-escapes)\n    \n    These replacements take place in left-to-right order. For example, the token `\"\\\\x41\"` is converted to the characters `\\` `x` `4` `1`.\n    \n-   If the token is a [RAW\\_STRING\\_LITERAL](about:blank/tokens.html#raw-string-literals), the represented string is identical to the literal content.\n    \n\nThe expression's value is a reference to a statically allocated [`str`](../types/textual.html) containing the UTF-8 encoding of the represented string.\n\nExamples of string literal expressions:\n\n```rust\n#![allow(unused)]\nfn main() {\n\"foo\"; r\"foo\";                     // foo\n\"\\\"foo\\\"\"; r#\"\"foo\"\"#;             // \"foo\"\n\n\"foo #\\\"# bar\";\nr##\"foo #\"# bar\"##;                // foo #\"# bar\n\n\"\\x52\"; \"R\"; r\"R\";                 // R\n\"\\\\x52\"; r\"\\x52\";                  // \\x52\n}\n```\n\n## [Byte literal expressions](#byte-literal-expressions)\n\nA byte literal expression consists of a single [BYTE\\_LITERAL](about:blank/tokens.html#byte-literals) token.\n\nThe expression's type is the primitive [`u8`](../types/numeric.html) type.\n\nThe token must not have a suffix.\n\nThe token's _literal content_ is the sequence of characters following the first `U+0027` (`'`) and preceding the last `U+0027` (`'`) in the string representation of the token.\n\nThe literal expression's _represented character_ is derived from the literal content as follows:\n\n-   If the literal content is one of the following forms of escape sequence, the represented character is the escape sequence's escaped value:\n    \n    -   [Simple escapes](#simple-escapes)\n    -   [8-bit escapes](#8-bit-escapes)\n-   Otherwise the represented character is the single character that makes up the literal content.\n    \n\nThe expression's value is the represented character's [Unicode scalar value](http://www.unicode.org/glossary/#unicode_scalar_value).\n\n> **Note**: the permitted forms of a [BYTE\\_LITERAL](about:blank/tokens.html#byte-literals) token ensure that these rules always produce a single character, whose Unicode scalar value is in the range of [`u8`](../types/numeric.html).\n\nExamples of byte literal expressions:\n\n```rust\n#![allow(unused)]\nfn main() {\nb'R';                              // 82\nb'\\'';                             // 39\nb'\\x52';                           // 82\nb'\\xA0';                           // 160\n}\n```\n\n## [Byte string literal expressions](#byte-string-literal-expressions)\n\nA byte string literal expression consists of a single [BYTE\\_STRING\\_LITERAL](about:blank/tokens.html#byte-string-literals) or [RAW\\_BYTE\\_STRING\\_LITERAL](about:blank/tokens.html#raw-byte-string-literals) token.\n\nThe expression's type is a shared reference (with `static` lifetime) to an array whose element type is [`u8`](../types/numeric.html). That is, the type is `&'static [u8; N]`, where `N` is the number of bytes in the represented string described below.\n\nThe token must not have a suffix.\n\nThe token's _literal content_ is the sequence of characters following the first `U+0022` (`\"`) and preceding the last `U+0022` (`\"`) in the string representation of the token.\n\nThe literal expression's _represented string_ is a sequence of characters derived from the literal content as follows:\n\n-   If the token is a [BYTE\\_STRING\\_LITERAL](about:blank/tokens.html#byte-string-literals), each escape sequence of any of the following forms occurring in the literal content is replaced by the escape sequence's escaped value.\n    \n    -   [Simple escapes](#simple-escapes)\n    -   [8-bit escapes](#8-bit-escapes)\n    -   [String continuation escapes](#string-continuation-escapes)\n    \n    These replacements take place in left-to-right order. For example, the token `b\"\\\\x41\"` is converted to the characters `\\` `x` `4` `1`.\n    \n-   If the token is a [RAW\\_BYTE\\_STRING\\_LITERAL](about:blank/tokens.html#raw-byte-string-literals), the represented string is identical to the literal content.\n    \n\nThe expression's value is a reference to a statically allocated array containing the [Unicode scalar values](http://www.unicode.org/glossary/#unicode_scalar_value) of the characters in the represented string, in the same order.\n\n> **Note**: the permitted forms of [BYTE\\_STRING\\_LITERAL](about:blank/tokens.html#byte-string-literals) and [RAW\\_BYTE\\_STRING\\_LITERAL](about:blank/tokens.html#raw-byte-string-literals) tokens ensure that these rules always produce array element values in the range of [`u8`](../types/numeric.html).\n\nExamples of byte string literal expressions:\n\n```rust\n#![allow(unused)]\nfn main() {\nb\"foo\"; br\"foo\";                     // foo\nb\"\\\"foo\\\"\"; br#\"\"foo\"\"#;             // \"foo\"\n\nb\"foo #\\\"# bar\";\nbr##\"foo #\"# bar\"##;                 // foo #\"# bar\n\nb\"\\x52\"; b\"R\"; br\"R\";                // R\nb\"\\\\x52\"; br\"\\x52\";                  // \\x52\n}\n```\n\n## [C string literal expressions](#c-string-literal-expressions)\n\nA C string literal expression consists of a single [C\\_STRING\\_LITERAL](about:blank/tokens.html#c-string-literals) or [RAW\\_C\\_STRING\\_LITERAL](about:blank/tokens.html#raw-c-string-literals) token.\n\nThe expression's type is a shared reference (with `static` lifetime) to the standard library [CStr](../../core/ffi/struct.CStr.html) type. That is, the type is `&'static core::ffi::CStr`.\n\nThe token must not have a suffix.\n\nThe token's _literal content_ is the sequence of characters following the first `\"` and preceding the last `\"` in the string representation of the token.\n\nThe literal expression's _represented bytes_ are a sequence of bytes derived from the literal content as follows:\n\n-   If the token is a [C\\_STRING\\_LITERAL](about:blank/tokens.html#c-string-literals), the literal content is treated as a sequence of items, each of which is either a single Unicode character other than `\\` or an [escape](#escapes). The sequence of items is converted to a sequence of bytes as follows:\n    \n    -   Each single Unicode character contributes its UTF-8 representation.\n    -   Each [simple escape](#simple-escapes) contributes the [Unicode scalar value](http://www.unicode.org/glossary/#unicode_scalar_value) of its escaped value.\n    -   Each [8-bit escape](#8-bit-escapes) contributes a single byte containing the [Unicode scalar value](http://www.unicode.org/glossary/#unicode_scalar_value) of its escaped value.\n    -   Each [unicode escape](#unicode-escapes) contributes the UTF-8 representation of its escaped value.\n    -   Each [string continuation escape](#string-continuation-escapes) contributes no bytes.\n-   If the token is a [RAW\\_C\\_STRING\\_LITERAL](about:blank/tokens.html#raw-c-string-literals), the represented bytes are the UTF-8 encoding of the literal content.\n    \n\n> **Note**: the permitted forms of [C\\_STRING\\_LITERAL](about:blank/tokens.html#c-string-literals) and [RAW\\_C\\_STRING\\_LITERAL](about:blank/tokens.html#raw-c-string-literals) tokens ensure that the represented bytes never include a null byte.\n\nThe expression's value is a reference to a statically allocated [CStr](../../core/ffi/struct.CStr.html) whose array of bytes contains the represented bytes followed by a null byte.\n\nExamples of C string literal expressions:\n\n```rust\n#![allow(unused)]\nfn main() {\nc\"foo\"; cr\"foo\";                     // foo\nc\"\\\"foo\\\"\"; cr#\"\"foo\"\"#;             // \"foo\"\n\nc\"foo #\\\"# bar\";\ncr##\"foo #\"# bar\"##;                 // foo #\"# bar\n\nc\"\\x52\"; c\"R\"; cr\"R\";                // R\nc\"\\\\x52\"; cr\"\\x52\";                  // \\x52\n\nc\"æ\";                                // LATIN SMALL LETTER AE (U+00E6)\nc\"\\u{00E6}\";                         // LATIN SMALL LETTER AE (U+00E6)\nc\"\\xC3\\xA6\";                         // LATIN SMALL LETTER AE (U+00E6)\n\nc\"\\xE6\".to_bytes();                  // [230]\nc\"\\u{00E6}\".to_bytes();              // [195, 166]\n}\n```\n\n## [Integer literal expressions](#integer-literal-expressions)\n\nAn integer literal expression consists of a single [INTEGER\\_LITERAL](about:blank/tokens.html#integer-literals) token.\n\nIf the token has a [suffix](about:blank/tokens.html#suffixes), the suffix must be the name of one of the [primitive integer types](../types/numeric.html): `u8`, `i8`, `u16`, `i16`, `u32`, `i32`, `u64`, `i64`, `u128`, `i128`, `usize`, or `isize`, and the expression has that type.\n\nIf the token has no suffix, the expression's type is determined by type inference:\n\n-   If an integer type can be _uniquely_ determined from the surrounding program context, the expression has that type.\n    \n-   If the program context under-constrains the type, it defaults to the signed 32-bit integer `i32`.\n    \n-   If the program context over-constrains the type, it is considered a static type error.\n    \n\nExamples of integer literal expressions:\n\n```rust\n#![allow(unused)]\nfn main() {\n123;                               // type i32\n123i32;                            // type i32\n123u32;                            // type u32\n123_u32;                           // type u32\nlet a: u64 = 123;                  // type u64\n\n0xff;                              // type i32\n0xff_u8;                           // type u8\n\n0o70;                              // type i32\n0o70_i16;                          // type i16\n\n0b1111_1111_1001_0000;             // type i32\n0b1111_1111_1001_0000i64;          // type i64\n\n0usize;                            // type usize\n}\n```\n\nThe value of the expression is determined from the string representation of the token as follows:\n\n-   An integer radix is chosen by inspecting the first two characters of the string, as follows:\n    \n    -   `0b` indicates radix 2\n    -   `0o` indicates radix 8\n    -   `0x` indicates radix 16\n    -   otherwise the radix is 10.\n-   If the radix is not 10, the first two characters are removed from the string.\n    \n-   Any suffix is removed from the string.\n    \n-   Any underscores are removed from the string.\n    \n-   The string is converted to a `u128` value as if by [`u128::from_str_radix`](about:blank/core/primitive.u128.html#method.from_str_radix) with the chosen radix. If the value does not fit in `u128`, it is a compiler error.\n    \n-   The `u128` value is converted to the expression's type via a [numeric cast](about:blank/operator-expr.html#numeric-cast).\n    \n\n> **Note**: The final cast will truncate the value of the literal if it does not fit in the expression's type. `rustc` includes a [lint check](about:blank/attributes/diagnostics.html#lint-check-attributes) named `overflowing_literals`, defaulting to `deny`, which rejects expressions where this occurs.\n\n> **Note**: `-1i8`, for example, is an application of the [negation operator](about:blank/operator-expr.html#negation-operators) to the literal expression `1i8`, not a single integer literal expression. See [Overflow](about:blank/operator-expr.html#overflow) for notes on representing the most negative value for a signed type.\n\n## [Floating-point literal expressions](#floating-point-literal-expressions)\n\nA floating-point literal expression has one of two forms:\n\n-   a single [FLOAT\\_LITERAL](about:blank/tokens.html#floating-point-literals) token\n-   a single [INTEGER\\_LITERAL](about:blank/tokens.html#integer-literals) token which has a suffix and no radix indicator\n\nIf the token has a [suffix](about:blank/tokens.html#suffixes), the suffix must be the name of one of the [primitive floating-point types](about:blank/types/numeric.html#floating-point-types): `f32` or `f64`, and the expression has that type.\n\nIf the token has no suffix, the expression's type is determined by type inference:\n\n-   If a floating-point type can be _uniquely_ determined from the surrounding program context, the expression has that type.\n    \n-   If the program context under-constrains the type, it defaults to `f64`.\n    \n-   If the program context over-constrains the type, it is considered a static type error.\n    \n\nExamples of floating-point literal expressions:\n\n```rust\n#![allow(unused)]\nfn main() {\n123.0f64;        // type f64\n0.1f64;          // type f64\n0.1f32;          // type f32\n12E+99_f64;      // type f64\n5f32;            // type f32\nlet x: f64 = 2.; // type f64\n}\n```\n\nThe value of the expression is determined from the string representation of the token as follows:\n\n-   Any suffix is removed from the string.\n    \n-   Any underscores are removed from the string.\n    \n-   The string is converted to the expression's type as if by [`f32::from_str`](about:blank/core/primitive.f32.html#method.from_str) or [`f64::from_str`](about:blank/core/primitive.f64.html#method.from_str).\n    \n\n> **Note**: `-1.0`, for example, is an application of the [negation operator](about:blank/operator-expr.html#negation-operators) to the literal expression `1.0`, not a single floating-point literal expression.\n\n> **Note**: `inf` and `NaN` are not literal tokens. The [`f32::INFINITY`](about:blank/core/primitive.f32.html#associatedconstant.INFINITY), [`f64::INFINITY`](about:blank/core/primitive.f64.html#associatedconstant.INFINITY), [`f32::NAN`](about:blank/core/primitive.f32.html#associatedconstant.NAN), and [`f64::NAN`](about:blank/core/primitive.f64.html#associatedconstant.NAN) constants can be used instead of literal expressions. In `rustc`, a literal large enough to be evaluated as infinite will trigger the `overflowing_literals` lint check.\n\n## [Boolean literal expressions](#boolean-literal-expressions)\n\nA boolean literal expression consists of one of the keywords `true` or `false`.\n\nThe expression's type is the primitive [boolean type](../types/boolean.html), and its value is:\n\n-   true if the keyword is `true`\n-   false if the keyword is `false`",
	"html": "<!DOCTYPE html><html lang=\"en\" class=\"light\" dir=\"ltr\"><head>\n        <!-- Book generated using mdBook -->\n        <meta charset=\"UTF-8\">\n        <title>Literal expressions - The Rust Reference</title>\n\n\n        <!-- Custom HTML head -->\n        \n        <meta name=\"description\" content=\"\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <meta name=\"theme-color\" content=\"rgb(255, 255, 255)\">\n\n        <link rel=\"icon\" href=\"../favicon.svg\">\n        <link rel=\"shortcut icon\" href=\"../favicon.png\">\n        <link rel=\"stylesheet\" href=\"../css/variables.css\">\n        <link rel=\"stylesheet\" href=\"../css/general.css\">\n        <link rel=\"stylesheet\" href=\"../css/chrome.css\">\n        <link rel=\"stylesheet\" href=\"../css/print.css\" media=\"print\">\n\n        <!-- Fonts -->\n        <link rel=\"stylesheet\" href=\"../FontAwesome/css/font-awesome.css\">\n        <link rel=\"stylesheet\" href=\"../fonts/fonts.css\">\n\n        <!-- Highlight.js Stylesheets -->\n        <link rel=\"stylesheet\" href=\"../highlight.css\">\n        <link rel=\"stylesheet\" href=\"../tomorrow-night.css\" disabled=\"\">\n        <link rel=\"stylesheet\" href=\"../ayu-highlight.css\" disabled=\"\">\n\n        <!-- Custom theme stylesheets -->\n        <link rel=\"stylesheet\" href=\"../theme/reference.css\">\n\n    </head>\n    <body class=\"js sidebar-visible\">\n    <div id=\"body-container\">\n        <!-- Provide site root to javascript -->\n        <script>\n            var path_to_root = \"../\";\n            var default_theme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"navy\" : \"light\";\n        </script>\n\n        <!-- Work around some values being stored in localStorage wrapped in quotes -->\n        <script>\n            try {\n                var theme = localStorage.getItem('mdbook-theme');\n                var sidebar = localStorage.getItem('mdbook-sidebar');\n\n                if (theme.startsWith('\"') && theme.endsWith('\"')) {\n                    localStorage.setItem('mdbook-theme', theme.slice(1, theme.length - 1));\n                }\n\n                if (sidebar.startsWith('\"') && sidebar.endsWith('\"')) {\n                    localStorage.setItem('mdbook-sidebar', sidebar.slice(1, sidebar.length - 1));\n                }\n            } catch (e) { }\n        </script>\n\n        <!-- Set the theme before any content is loaded, prevents flash -->\n        <script>\n            var theme;\n            try { theme = localStorage.getItem('mdbook-theme'); } catch(e) { }\n            if (theme === null || theme === undefined) { theme = default_theme; }\n            var html = document.querySelector('html');\n            html.classList.remove('light')\n            html.classList.add(theme);\n            var body = document.querySelector('body');\n            body.classList.remove('no-js')\n            body.classList.add('js');\n        </script>\n\n        <input type=\"checkbox\" id=\"sidebar-toggle-anchor\" class=\"hidden\">\n\n        <!-- Hide / unhide sidebar before it is displayed -->\n        <script>\n            var body = document.querySelector('body');\n            var sidebar = null;\n            var sidebar_toggle = document.getElementById(\"sidebar-toggle-anchor\");\n            if (document.body.clientWidth >= 1080) {\n                try { sidebar = localStorage.getItem('mdbook-sidebar'); } catch(e) { }\n                sidebar = sidebar || 'visible';\n            } else {\n                sidebar = 'hidden';\n            }\n            sidebar_toggle.checked = sidebar === 'visible';\n            body.classList.remove('sidebar-visible');\n            body.classList.add(\"sidebar-\" + sidebar);\n        </script>\n\n        <nav id=\"sidebar\" class=\"sidebar\" aria-label=\"Table of contents\" aria-hidden=\"false\">\n            <div class=\"sidebar-scrollbox\">\n                <ol class=\"chapter\"><li class=\"chapter-item expanded affix \"><a href=\"../introduction.html\" tabindex=\"0\">Introduction</a></li><li class=\"chapter-item expanded \"><a href=\"../notation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.</strong> Notation</a></li><li class=\"chapter-item expanded \"><a href=\"../lexical-structure.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.</strong> Lexical structure</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../input-format.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.1.</strong> Input format</a></li><li class=\"chapter-item expanded \"><a href=\"../keywords.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.2.</strong> Keywords</a></li><li class=\"chapter-item expanded \"><a href=\"../identifiers.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.3.</strong> Identifiers</a></li><li class=\"chapter-item expanded \"><a href=\"../comments.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.4.</strong> Comments</a></li><li class=\"chapter-item expanded \"><a href=\"../whitespace.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.5.</strong> Whitespace</a></li><li class=\"chapter-item expanded \"><a href=\"../tokens.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.6.</strong> Tokens</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../macros.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.</strong> Macros</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../macros-by-example.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.1.</strong> Macros By Example</a></li><li class=\"chapter-item expanded \"><a href=\"../procedural-macros.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.2.</strong> Procedural Macros</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../crates-and-source-files.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.</strong> Crates and source files</a></li><li class=\"chapter-item expanded \"><a href=\"../conditional-compilation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.</strong> Conditional compilation</a></li><li class=\"chapter-item expanded \"><a href=\"../items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.</strong> Items</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../items/modules.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.1.</strong> Modules</a></li><li class=\"chapter-item expanded \"><a href=\"../items/extern-crates.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.2.</strong> Extern crates</a></li><li class=\"chapter-item expanded \"><a href=\"../items/use-declarations.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.3.</strong> Use declarations</a></li><li class=\"chapter-item expanded \"><a href=\"../items/functions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.4.</strong> Functions</a></li><li class=\"chapter-item expanded \"><a href=\"../items/type-aliases.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.5.</strong> Type aliases</a></li><li class=\"chapter-item expanded \"><a href=\"../items/structs.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.6.</strong> Structs</a></li><li class=\"chapter-item expanded \"><a href=\"../items/enumerations.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.7.</strong> Enumerations</a></li><li class=\"chapter-item expanded \"><a href=\"../items/unions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.8.</strong> Unions</a></li><li class=\"chapter-item expanded \"><a href=\"../items/constant-items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.9.</strong> Constant items</a></li><li class=\"chapter-item expanded \"><a href=\"../items/static-items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.10.</strong> Static items</a></li><li class=\"chapter-item expanded \"><a href=\"../items/traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.11.</strong> Traits</a></li><li class=\"chapter-item expanded \"><a href=\"../items/implementations.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.12.</strong> Implementations</a></li><li class=\"chapter-item expanded \"><a href=\"../items/external-blocks.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.13.</strong> External blocks</a></li><li class=\"chapter-item expanded \"><a href=\"../items/generics.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.14.</strong> Generic parameters</a></li><li class=\"chapter-item expanded \"><a href=\"../items/associated-items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.15.</strong> Associated Items</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../attributes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.</strong> Attributes</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../attributes/testing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.1.</strong> Testing</a></li><li class=\"chapter-item expanded \"><a href=\"../attributes/derive.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.2.</strong> Derive</a></li><li class=\"chapter-item expanded \"><a href=\"../attributes/diagnostics.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.3.</strong> Diagnostics</a></li><li class=\"chapter-item expanded \"><a href=\"../attributes/codegen.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.4.</strong> Code generation</a></li><li class=\"chapter-item expanded \"><a href=\"../attributes/limits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.5.</strong> Limits</a></li><li class=\"chapter-item expanded \"><a href=\"../attributes/type_system.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.6.</strong> Type System</a></li><li class=\"chapter-item expanded \"><a href=\"../attributes/debugger.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.7.</strong> Debugger</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../statements-and-expressions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.</strong> Statements and expressions</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../statements.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.1.</strong> Statements</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.</strong> Expressions</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../expressions/literal-expr.html\" class=\"active\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.1.</strong> Literal expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/path-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.2.</strong> Path expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/block-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.3.</strong> Block expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/operator-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.4.</strong> Operator expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/grouped-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.5.</strong> Grouped expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/array-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.6.</strong> Array and index expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/tuple-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.7.</strong> Tuple and index expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/struct-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.8.</strong> Struct expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/call-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.9.</strong> Call expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/method-call-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.10.</strong> Method call expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/field-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.11.</strong> Field access expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/closure-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.12.</strong> Closure expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/loop-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.13.</strong> Loop expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/range-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.14.</strong> Range expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/if-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.15.</strong> If and if let expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/match-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.16.</strong> Match expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/return-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.17.</strong> Return expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/await-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.18.</strong> Await expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/underscore-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.19.</strong> Underscore expressions</a></li></ol></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../patterns.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.</strong> Patterns</a></li><li class=\"chapter-item expanded \"><a href=\"../type-system.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.</strong> Type system</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../types.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.</strong> Types</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../types/boolean.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.1.</strong> Boolean type</a></li><li class=\"chapter-item expanded \"><a href=\"../types/numeric.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.2.</strong> Numeric types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/textual.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.3.</strong> Textual types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/never.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.4.</strong> Never type</a></li><li class=\"chapter-item expanded \"><a href=\"../types/tuple.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.5.</strong> Tuple types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/array.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.6.</strong> Array types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/slice.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.7.</strong> Slice types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/struct.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.8.</strong> Struct types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/enum.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.9.</strong> Enumerated types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/union.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.10.</strong> Union types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/function-item.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.11.</strong> Function item types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/closure.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.12.</strong> Closure types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/pointer.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.13.</strong> Pointer types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/function-pointer.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.14.</strong> Function pointer types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/trait-object.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.15.</strong> Trait object types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/impl-trait.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.16.</strong> Impl trait type</a></li><li class=\"chapter-item expanded \"><a href=\"../types/parameters.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.17.</strong> Type parameters</a></li><li class=\"chapter-item expanded \"><a href=\"../types/inferred.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.18.</strong> Inferred type</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../dynamically-sized-types.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.2.</strong> Dynamically Sized Types</a></li><li class=\"chapter-item expanded \"><a href=\"../type-layout.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.3.</strong> Type layout</a></li><li class=\"chapter-item expanded \"><a href=\"../interior-mutability.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.4.</strong> Interior mutability</a></li><li class=\"chapter-item expanded \"><a href=\"../subtyping.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.5.</strong> Subtyping and Variance</a></li><li class=\"chapter-item expanded \"><a href=\"../trait-bounds.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.6.</strong> Trait and lifetime bounds</a></li><li class=\"chapter-item expanded \"><a href=\"../type-coercions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.7.</strong> Type coercions</a></li><li class=\"chapter-item expanded \"><a href=\"../destructors.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.8.</strong> Destructors</a></li><li class=\"chapter-item expanded \"><a href=\"../lifetime-elision.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.9.</strong> Lifetime elision</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../special-types-and-traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.</strong> Special types and traits</a></li><li class=\"chapter-item expanded \"><a href=\"../names.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.</strong> Names</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../names/namespaces.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.1.</strong> Namespaces</a></li><li class=\"chapter-item expanded \"><a href=\"../names/scopes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.2.</strong> Scopes</a></li><li class=\"chapter-item expanded \"><a href=\"../names/preludes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.3.</strong> Preludes</a></li><li class=\"chapter-item expanded \"><a href=\"../paths.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.4.</strong> Paths</a></li><li class=\"chapter-item expanded \"><a href=\"../names/name-resolution.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.5.</strong> Name resolution</a></li><li class=\"chapter-item expanded \"><a href=\"../visibility-and-privacy.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.6.</strong> Visibility and privacy</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../memory-model.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.</strong> Memory model</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../memory-allocation-and-lifetime.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.1.</strong> Memory allocation and lifetime</a></li><li class=\"chapter-item expanded \"><a href=\"../variables.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.2.</strong> Variables</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../linkage.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.</strong> Linkage</a></li><li class=\"chapter-item expanded \"><a href=\"../inline-assembly.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.</strong> Inline assembly</a></li><li class=\"chapter-item expanded \"><a href=\"../unsafety.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.</strong> Unsafety</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../unsafe-keyword.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.1.</strong> The unsafe keyword</a></li><li class=\"chapter-item expanded \"><a href=\"../behavior-considered-undefined.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.2.</strong> Behavior considered undefined</a></li><li class=\"chapter-item expanded \"><a href=\"../behavior-not-considered-unsafe.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.3.</strong> Behavior not considered unsafe</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../const_eval.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.</strong> Constant Evaluation</a></li><li class=\"chapter-item expanded \"><a href=\"../abi.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.</strong> Application Binary Interface</a></li><li class=\"chapter-item expanded \"><a href=\"../runtime.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.</strong> The Rust runtime</a></li><li class=\"chapter-item expanded \"><a href=\"../appendices.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.</strong> Appendices</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../macro-ambiguity.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.1.</strong> Macro Follow-Set Ambiguity Formal Specification</a></li><li class=\"chapter-item expanded \"><a href=\"../influences.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.2.</strong> Influences</a></li><li class=\"chapter-item expanded \"><a href=\"../glossary.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.3.</strong> Glossary</a></li></ol></li></ol>\n            </div>\n            <div id=\"sidebar-resize-handle\" class=\"sidebar-resize-handle\">\n                <div class=\"sidebar-resize-indicator\"></div>\n            </div>\n        </nav>\n\n        <!-- Track and set sidebar scroll position -->\n        <script>\n            var sidebarScrollbox = document.querySelector('#sidebar .sidebar-scrollbox');\n            sidebarScrollbox.addEventListener('click', function(e) {\n                if (e.target.tagName === 'A') {\n                    sessionStorage.setItem('sidebar-scroll', sidebarScrollbox.scrollTop);\n                }\n            }, { passive: true });\n            var sidebarScrollTop = sessionStorage.getItem('sidebar-scroll');\n            sessionStorage.removeItem('sidebar-scroll');\n            if (sidebarScrollTop) {\n                // preserve sidebar scroll position when navigating via links within sidebar\n                sidebarScrollbox.scrollTop = sidebarScrollTop;\n            } else {\n                // scroll sidebar to current active section when navigating via \"next/previous chapter\" buttons\n                var activeSection = document.querySelector('#sidebar .active');\n                if (activeSection) {\n                    activeSection.scrollIntoView({ block: 'center' });\n                }\n            }\n        </script>\n\n        <div id=\"page-wrapper\" class=\"page-wrapper\">\n\n            <div class=\"page\">\n                                <div id=\"menu-bar-hover-placeholder\"></div>\n                <div id=\"menu-bar\" class=\"menu-bar\" style=\"top: 0px;\">\n                    <div class=\"left-buttons\">\n                        <label id=\"sidebar-toggle\" class=\"icon-button\" for=\"sidebar-toggle-anchor\" title=\"Toggle Table of Contents\" aria-label=\"Toggle Table of Contents\" aria-controls=\"sidebar\" aria-expanded=\"true\">\n                            <i class=\"fa fa-bars\"></i>\n                        </label>\n                        <button id=\"theme-toggle\" class=\"icon-button\" type=\"button\" title=\"Change theme\" aria-label=\"Change theme\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-controls=\"theme-list\">\n                            <i class=\"fa fa-paint-brush\"></i>\n                        </button>\n                        <ul id=\"theme-list\" class=\"theme-popup\" aria-label=\"Themes\" role=\"menu\">\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme theme-selected\" id=\"light\">Light</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"rust\">Rust</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"coal\">Coal</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"navy\">Navy</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"ayu\">Ayu</button></li>\n                        </ul>\n                        <button id=\"search-toggle\" class=\"icon-button\" type=\"button\" title=\"Search. (Shortkey: s)\" aria-label=\"Toggle Searchbar\" aria-expanded=\"false\" aria-keyshortcuts=\"S\" aria-controls=\"searchbar\">\n                            <i class=\"fa fa-search\"></i>\n                        </button>\n                    </div>\n\n                    <h1 class=\"menu-title\">The Rust Reference</h1>\n\n                    <div class=\"right-buttons\">\n                        <a href=\"../print.html\" title=\"Print this book\" aria-label=\"Print this book\">\n                            <i id=\"print-button\" class=\"fa fa-print\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/reference/\" title=\"Git repository\" aria-label=\"Git repository\">\n                            <i id=\"git-repository-button\" class=\"fa fa-github\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/reference/edit/master/src/expressions/literal-expr.md\" title=\"Suggest an edit\" aria-label=\"Suggest an edit\">\n                            <i id=\"git-edit-button\" class=\"fa fa-edit\"></i>\n                        </a>\n\n                    </div>\n                </div>\n\n                <div id=\"search-wrapper\" class=\"hidden\">\n                    <form id=\"searchbar-outer\" class=\"searchbar-outer\">\n                        <input type=\"search\" id=\"searchbar\" name=\"searchbar\" placeholder=\"Search this book ...\" aria-controls=\"searchresults-outer\" aria-describedby=\"searchresults-header\">\n                    </form>\n                    <div id=\"searchresults-outer\" class=\"searchresults-outer hidden\">\n                        <div id=\"searchresults-header\" class=\"searchresults-header\"></div>\n                        <ul id=\"searchresults\">\n                        </ul>\n                    </div>\n                </div>\n\n                <!-- Apply ARIA attributes after the sidebar and the sidebar toggle button are added to the DOM -->\n                <script>\n                    document.getElementById('sidebar-toggle').setAttribute('aria-expanded', sidebar === 'visible');\n                    document.getElementById('sidebar').setAttribute('aria-hidden', sidebar !== 'visible');\n                    Array.from(document.querySelectorAll('#sidebar a')).forEach(function(link) {\n                        link.setAttribute('tabIndex', sidebar === 'visible' ? 0 : -1);\n                    });\n                </script>\n\n                <div id=\"content\" class=\"content\">\n                    <main>\n                        <h1 id=\"literal-expressions\"><a class=\"header\" href=\"#literal-expressions\">Literal expressions</a></h1>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>LiteralExpression</em> :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; <a href=\"../tokens.html#character-literals\">CHAR_LITERAL</a><br>\n&nbsp;&nbsp; | <a href=\"../tokens.html#string-literals\">STRING_LITERAL</a><br>\n&nbsp;&nbsp; | <a href=\"../tokens.html#raw-string-literals\">RAW_STRING_LITERAL</a><br>\n&nbsp;&nbsp; | <a href=\"../tokens.html#byte-literals\">BYTE_LITERAL</a><br>\n&nbsp;&nbsp; | <a href=\"../tokens.html#byte-string-literals\">BYTE_STRING_LITERAL</a><br>\n&nbsp;&nbsp; | <a href=\"../tokens.html#raw-byte-string-literals\">RAW_BYTE_STRING_LITERAL</a><br>\n&nbsp;&nbsp; | <a href=\"../tokens.html#c-string-literals\">C_STRING_LITERAL</a><br>\n&nbsp;&nbsp; | <a href=\"../tokens.html#raw-c-string-literals\">RAW_C_STRING_LITERAL</a><br>\n&nbsp;&nbsp; | <a href=\"../tokens.html#integer-literals\">INTEGER_LITERAL</a><br>\n&nbsp;&nbsp; | <a href=\"../tokens.html#floating-point-literals\">FLOAT_LITERAL</a><br>\n&nbsp;&nbsp; | <code class=\"hljs\">true</code> | <code class=\"hljs\">false</code></p>\n</blockquote>\n<p>A <em>literal expression</em> is an expression consisting of a single token, rather than a sequence of tokens, that immediately and directly denotes the value it evaluates to, rather than referring to it by name or some other evaluation rule.</p>\n<p>A literal is a form of <a href=\"../const_eval.html#constant-expressions\">constant expression</a>, so is evaluated (primarily) at compile time.</p>\n<p>Each of the lexical <a href=\"../tokens.html#literals\">literal</a> forms described earlier can make up a literal expression, as can the keywords <code class=\"hljs\">true</code> and <code class=\"hljs\">false</code>.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-string\">\"hello\"</span>;   <span class=\"hljs-comment\">// string type</span>\n<span class=\"hljs-string\">'5'</span>;       <span class=\"hljs-comment\">// character type</span>\n<span class=\"hljs-number\">5</span>;         <span class=\"hljs-comment\">// integer type</span>\n<span class=\"boring\">}</span></code></pre></pre>\n<p>In the descriptions below, the <em>string representation</em> of a token is the sequence of characters from the input which matched the token's production in a <em>Lexer</em> grammar snippet.</p>\n<blockquote>\n<p><strong>Note</strong>: this string representation never includes a character <code class=\"hljs\">U+000D</code> (CR) immediately followed by <code class=\"hljs\">U+000A</code> (LF): this pair would have been previously transformed into a single <code class=\"hljs\">U+000A</code> (LF).</p>\n</blockquote>\n<h2 id=\"escapes\"><a class=\"header\" href=\"#escapes\">Escapes</a></h2>\n<p>The descriptions of textual literal expressions below make use of several forms of <em>escape</em>.</p>\n<p>Each form of escape is characterised by:</p>\n<ul>\n<li>an <em>escape sequence</em>: a sequence of characters, which always begins with <code class=\"hljs\">U+005C</code> (<code class=\"hljs\">\\</code>)</li>\n<li>an <em>escaped value</em>: either a single character or an empty sequence of characters</li>\n</ul>\n<p>In the definitions of escapes below:</p>\n<ul>\n<li>An <em>octal digit</em> is any of the characters in the range [<code class=\"hljs\">0</code>-<code class=\"hljs\">7</code>].</li>\n<li>A <em>hexadecimal digit</em> is any of the characters in the ranges [<code class=\"hljs\">0</code>-<code class=\"hljs\">9</code>], [<code class=\"hljs\">a</code>-<code class=\"hljs\">f</code>], or [<code class=\"hljs\">A</code>-<code class=\"hljs\">F</code>].</li>\n</ul>\n<h3 id=\"simple-escapes\"><a class=\"header\" href=\"#simple-escapes\">Simple escapes</a></h3>\n<p>Each sequence of characters occurring in the first column of the following table is an escape sequence.</p>\n<p>In each case, the escaped value is the character given in the corresponding entry in the second column.</p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Escape sequence</th><th>Escaped value</th></tr></thead><tbody>\n<tr><td><code class=\"hljs\">\\0</code></td><td>U+0000 (NUL)</td></tr>\n<tr><td><code class=\"hljs\">\\t</code></td><td>U+0009 (HT)</td></tr>\n<tr><td><code class=\"hljs\">\\n</code></td><td>U+000A (LF)</td></tr>\n<tr><td><code class=\"hljs\">\\r</code></td><td>U+000D (CR)</td></tr>\n<tr><td><code class=\"hljs\">\\\"</code></td><td>U+0022 (QUOTATION MARK)</td></tr>\n<tr><td><code class=\"hljs\">\\'</code></td><td>U+0027 (APOSTROPHE)</td></tr>\n<tr><td><code class=\"hljs\">\\\\</code></td><td>U+005C (REVERSE SOLIDUS)</td></tr>\n</tbody></table>\n</div>\n<h3 id=\"8-bit-escapes\"><a class=\"header\" href=\"#8-bit-escapes\">8-bit escapes</a></h3>\n<p>The escape sequence consists of <code class=\"hljs\">\\x</code> followed by two hexadecimal digits.</p>\n<p>The escaped value is the character whose <a href=\"http://www.unicode.org/glossary/#unicode_scalar_value\">Unicode scalar value</a> is the result of interpreting the final two characters in the escape sequence as a hexadecimal integer, as if by <a href=\"../../core/primitive.u8.html#method.from_str_radix\"><code class=\"hljs\">u8::from_str_radix</code></a> with radix 16.</p>\n<blockquote>\n<p><strong>Note</strong>: the escaped value therefore has a <a href=\"http://www.unicode.org/glossary/#unicode_scalar_value\">Unicode scalar value</a> in the range of <a href=\"../types/numeric.html\"><code class=\"hljs\">u8</code></a>.</p>\n</blockquote>\n<h3 id=\"7-bit-escapes\"><a class=\"header\" href=\"#7-bit-escapes\">7-bit escapes</a></h3>\n<p>The escape sequence consists of <code class=\"hljs\">\\x</code> followed by an octal digit then a hexadecimal digit.</p>\n<p>The escaped value is the character whose <a href=\"http://www.unicode.org/glossary/#unicode_scalar_value\">Unicode scalar value</a> is the result of interpreting the final two characters in the escape sequence as a hexadecimal integer, as if by <a href=\"../../core/primitive.u8.html#method.from_str_radix\"><code class=\"hljs\">u8::from_str_radix</code></a> with radix 16.</p>\n<h3 id=\"unicode-escapes\"><a class=\"header\" href=\"#unicode-escapes\">Unicode escapes</a></h3>\n<p>The escape sequence consists of <code class=\"hljs\">\\u{</code>, followed by a sequence of characters each of which is a hexadecimal digit or <code class=\"hljs\">_</code>, followed by <code class=\"hljs\">}</code>.</p>\n<p>The escaped value is the character whose <a href=\"http://www.unicode.org/glossary/#unicode_scalar_value\">Unicode scalar value</a> is the result of interpreting the hexadecimal digits contained in the escape sequence as a hexadecimal integer, as if by <a href=\"../../core/primitive.u32.html#method.from_str_radix\"><code class=\"hljs\">u32::from_str_radix</code></a> with radix 16.</p>\n<blockquote>\n<p><strong>Note</strong>: the permitted forms of a <a href=\"../tokens.html#character-literals\">CHAR_LITERAL</a> or <a href=\"../tokens.html#string-literals\">STRING_LITERAL</a> token ensure that there is such a character.</p>\n</blockquote>\n<h3 id=\"string-continuation-escapes\"><a class=\"header\" href=\"#string-continuation-escapes\">String continuation escapes</a></h3>\n<p>The escape sequence consists of <code class=\"hljs\">\\</code> followed immediately by <code class=\"hljs\">U+000A</code> (LF), and all following whitespace characters before the next non-whitespace character.\nFor this purpose, the whitespace characters are <code class=\"hljs\">U+0009</code> (HT), <code class=\"hljs\">U+000A</code> (LF), <code class=\"hljs\">U+000D</code> (CR), and <code class=\"hljs\">U+0020</code> (SPACE).</p>\n<p>The escaped value is an empty sequence of characters.</p>\n<blockquote>\n<p><strong>Note</strong>: The effect of this form of escape is that a string continuation skips following whitespace, including additional newlines.\nThus <code class=\"hljs\">a</code>, <code class=\"hljs\">b</code> and <code class=\"hljs\">c</code> are equal:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> a = <span class=\"hljs-string\">\"foobar\"</span>;\n<span class=\"hljs-keyword\">let</span> b = <span class=\"hljs-string\">\"foo\\\n         bar\"</span>;\n<span class=\"hljs-keyword\">let</span> c = <span class=\"hljs-string\">\"foo\\\n\n     bar\"</span>;\n\n<span class=\"hljs-built_in\">assert_eq!</span>(a, b);\n<span class=\"hljs-built_in\">assert_eq!</span>(b, c);\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Skipping additional newlines (as in example c) is potentially confusing and unexpected.\nThis behavior may be adjusted in the future.\nUntil a decision is made, it is recommended to avoid relying on skipping multiple newlines with line continuations.\nSee <a href=\"https://github.com/rust-lang/reference/pull/1042\">this issue</a> for more information.</p>\n</blockquote>\n<h2 id=\"character-literal-expressions\"><a class=\"header\" href=\"#character-literal-expressions\">Character literal expressions</a></h2>\n<p>A character literal expression consists of a single <a href=\"../tokens.html#character-literals\">CHAR_LITERAL</a> token.</p>\n<p>The expression's type is the primitive <a href=\"../types/textual.html\"><code class=\"hljs\">char</code></a> type.</p>\n<p>The token must not have a suffix.</p>\n<p>The token's <em>literal content</em> is the sequence of characters following the first <code class=\"hljs\">U+0027</code> (<code class=\"hljs\">'</code>) and preceding the last <code class=\"hljs\">U+0027</code> (<code class=\"hljs\">'</code>) in the string representation of the token.</p>\n<p>The literal expression's <em>represented character</em> is derived from the literal content as follows:</p>\n<ul>\n<li>\n<p>If the literal content is one of the following forms of escape sequence, the represented character is the escape sequence's escaped value:</p>\n<ul>\n<li><a href=\"#simple-escapes\">Simple escapes</a></li>\n<li><a href=\"#7-bit-escapes\">7-bit escapes</a></li>\n<li><a href=\"#unicode-escapes\">Unicode escapes</a></li>\n</ul>\n</li>\n<li>\n<p>Otherwise the represented character is the single character that makes up the literal content.</p>\n</li>\n</ul>\n<p>The expression's value is the <a href=\"../types/textual.html\"><code class=\"hljs\">char</code></a> corresponding to the represented character's <a href=\"http://www.unicode.org/glossary/#unicode_scalar_value\">Unicode scalar value</a>.</p>\n<blockquote>\n<p><strong>Note</strong>: the permitted forms of a <a href=\"../tokens.html#character-literals\">CHAR_LITERAL</a> token ensure that these rules always produce a single character.</p>\n</blockquote>\n<p>Examples of character literal expressions:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-string\">'R'</span>;                               <span class=\"hljs-comment\">// R</span>\n<span class=\"hljs-string\">'\\''</span>;                              <span class=\"hljs-comment\">// '</span>\n<span class=\"hljs-string\">'\\x52'</span>;                            <span class=\"hljs-comment\">// R</span>\n'\\u{<span class=\"hljs-number\">00E6</span>}';                        <span class=\"hljs-comment\">// LATIN SMALL LETTER AE (U+00E6)</span>\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"string-literal-expressions\"><a class=\"header\" href=\"#string-literal-expressions\">String literal expressions</a></h2>\n<p>A string literal expression consists of a single <a href=\"../tokens.html#string-literals\">STRING_LITERAL</a> or <a href=\"../tokens.html#raw-string-literals\">RAW_STRING_LITERAL</a> token.</p>\n<p>The expression's type is a shared reference (with <code class=\"hljs\">static</code> lifetime) to the primitive <a href=\"../types/textual.html\"><code class=\"hljs\">str</code></a> type.\nThat is, the type is <code class=\"hljs\">&amp;'static str</code>.</p>\n<p>The token must not have a suffix.</p>\n<p>The token's <em>literal content</em> is the sequence of characters following the first <code class=\"hljs\">U+0022</code> (<code class=\"hljs\">\"</code>) and preceding the last <code class=\"hljs\">U+0022</code> (<code class=\"hljs\">\"</code>) in the string representation of the token.</p>\n<p>The literal expression's <em>represented string</em> is a sequence of characters derived from the literal content as follows:</p>\n<ul>\n<li>\n<p>If the token is a <a href=\"../tokens.html#string-literals\">STRING_LITERAL</a>, each escape sequence of any of the following forms occurring in the literal content is replaced by the escape sequence's escaped value.</p>\n<ul>\n<li><a href=\"#simple-escapes\">Simple escapes</a></li>\n<li><a href=\"#7-bit-escapes\">7-bit escapes</a></li>\n<li><a href=\"#unicode-escapes\">Unicode escapes</a></li>\n<li><a href=\"#string-continuation-escapes\">String continuation escapes</a></li>\n</ul>\n<p>These replacements take place in left-to-right order.\nFor example, the token <code class=\"hljs\">\"\\\\x41\"</code> is converted to the characters <code class=\"hljs\">\\</code> <code class=\"hljs\">x</code> <code class=\"hljs\">4</code> <code class=\"hljs\">1</code>.</p>\n</li>\n<li>\n<p>If the token is a <a href=\"../tokens.html#raw-string-literals\">RAW_STRING_LITERAL</a>, the represented string is identical to the literal content.</p>\n</li>\n</ul>\n<p>The expression's value is a reference to a statically allocated <a href=\"../types/textual.html\"><code class=\"hljs\">str</code></a> containing the UTF-8 encoding of the represented string.</p>\n<p>Examples of string literal expressions:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-string\">\"foo\"</span>; <span class=\"hljs-string\">r\"foo\"</span>;                     <span class=\"hljs-comment\">// foo</span>\n<span class=\"hljs-string\">\"\\\"foo\\\"\"</span>; <span class=\"hljs-string\">r#\"\"foo\"\"#</span>;             <span class=\"hljs-comment\">// \"foo\"</span>\n\n<span class=\"hljs-string\">\"foo #\\\"# bar\"</span>;\n<span class=\"hljs-string\">r##\"foo #\"# bar\"##</span>;                <span class=\"hljs-comment\">// foo #\"# bar</span>\n\n<span class=\"hljs-string\">\"\\x52\"</span>; <span class=\"hljs-string\">\"R\"</span>; <span class=\"hljs-string\">r\"R\"</span>;                 <span class=\"hljs-comment\">// R</span>\n<span class=\"hljs-string\">\"\\\\x52\"</span>; <span class=\"hljs-string\">r\"\\x52\"</span>;                  <span class=\"hljs-comment\">// \\x52</span>\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"byte-literal-expressions\"><a class=\"header\" href=\"#byte-literal-expressions\">Byte literal expressions</a></h2>\n<p>A byte literal expression consists of a single <a href=\"../tokens.html#byte-literals\">BYTE_LITERAL</a> token.</p>\n<p>The expression's type is the primitive <a href=\"../types/numeric.html\"><code class=\"hljs\">u8</code></a> type.</p>\n<p>The token must not have a suffix.</p>\n<p>The token's <em>literal content</em> is the sequence of characters following the first <code class=\"hljs\">U+0027</code> (<code class=\"hljs\">'</code>) and preceding the last <code class=\"hljs\">U+0027</code> (<code class=\"hljs\">'</code>) in the string representation of the token.</p>\n<p>The literal expression's <em>represented character</em> is derived from the literal content as follows:</p>\n<ul>\n<li>\n<p>If the literal content is one of the following forms of escape sequence, the represented character is the escape sequence's escaped value:</p>\n<ul>\n<li><a href=\"#simple-escapes\">Simple escapes</a></li>\n<li><a href=\"#8-bit-escapes\">8-bit escapes</a></li>\n</ul>\n</li>\n<li>\n<p>Otherwise the represented character is the single character that makes up the literal content.</p>\n</li>\n</ul>\n<p>The expression's value is the represented character's <a href=\"http://www.unicode.org/glossary/#unicode_scalar_value\">Unicode scalar value</a>.</p>\n<blockquote>\n<p><strong>Note</strong>: the permitted forms of a <a href=\"../tokens.html#byte-literals\">BYTE_LITERAL</a> token ensure that these rules always produce a single character, whose Unicode scalar value is in the range of <a href=\"../types/numeric.html\"><code class=\"hljs\">u8</code></a>.</p>\n</blockquote>\n<p>Examples of byte literal expressions:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-string\">b'R'</span>;                              <span class=\"hljs-comment\">// 82</span>\n<span class=\"hljs-string\">b'\\''</span>;                             <span class=\"hljs-comment\">// 39</span>\n<span class=\"hljs-string\">b'\\x52'</span>;                           <span class=\"hljs-comment\">// 82</span>\n<span class=\"hljs-string\">b'\\xA0'</span>;                           <span class=\"hljs-comment\">// 160</span>\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"byte-string-literal-expressions\"><a class=\"header\" href=\"#byte-string-literal-expressions\">Byte string literal expressions</a></h2>\n<p>A byte string literal expression consists of a single <a href=\"../tokens.html#byte-string-literals\">BYTE_STRING_LITERAL</a> or <a href=\"../tokens.html#raw-byte-string-literals\">RAW_BYTE_STRING_LITERAL</a> token.</p>\n<p>The expression's type is a shared reference (with <code class=\"hljs\">static</code> lifetime) to an array whose element type is <a href=\"../types/numeric.html\"><code class=\"hljs\">u8</code></a>.\nThat is, the type is <code class=\"hljs\">&amp;'static [u8; N]</code>, where <code class=\"hljs\">N</code> is the number of bytes in the represented string described below.</p>\n<p>The token must not have a suffix.</p>\n<p>The token's <em>literal content</em> is the sequence of characters following the first <code class=\"hljs\">U+0022</code> (<code class=\"hljs\">\"</code>) and preceding the last <code class=\"hljs\">U+0022</code> (<code class=\"hljs\">\"</code>) in the string representation of the token.</p>\n<p>The literal expression's <em>represented string</em> is a sequence of characters derived from the literal content as follows:</p>\n<ul>\n<li>\n<p>If the token is a <a href=\"../tokens.html#byte-string-literals\">BYTE_STRING_LITERAL</a>, each escape sequence of any of the following forms occurring in the literal content is replaced by the escape sequence's escaped value.</p>\n<ul>\n<li><a href=\"#simple-escapes\">Simple escapes</a></li>\n<li><a href=\"#8-bit-escapes\">8-bit escapes</a></li>\n<li><a href=\"#string-continuation-escapes\">String continuation escapes</a></li>\n</ul>\n<p>These replacements take place in left-to-right order.\nFor example, the token <code class=\"hljs\">b\"\\\\x41\"</code> is converted to the characters <code class=\"hljs\">\\</code> <code class=\"hljs\">x</code> <code class=\"hljs\">4</code> <code class=\"hljs\">1</code>.</p>\n</li>\n<li>\n<p>If the token is a <a href=\"../tokens.html#raw-byte-string-literals\">RAW_BYTE_STRING_LITERAL</a>, the represented string is identical to the literal content.</p>\n</li>\n</ul>\n<p>The expression's value is a reference to a statically allocated array containing the <a href=\"http://www.unicode.org/glossary/#unicode_scalar_value\">Unicode scalar values</a> of the characters in the represented string, in the same order.</p>\n<blockquote>\n<p><strong>Note</strong>: the permitted forms of <a href=\"../tokens.html#byte-string-literals\">BYTE_STRING_LITERAL</a> and <a href=\"../tokens.html#raw-byte-string-literals\">RAW_BYTE_STRING_LITERAL</a> tokens ensure that these rules always produce array element values in the range of <a href=\"../types/numeric.html\"><code class=\"hljs\">u8</code></a>.</p>\n</blockquote>\n<p>Examples of byte string literal expressions:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-string\">b\"foo\"</span>; b<span class=\"hljs-string\">r\"foo\"</span>;                     <span class=\"hljs-comment\">// foo</span>\n<span class=\"hljs-string\">b\"\\\"foo\\\"\"</span>; b<span class=\"hljs-string\">r#\"\"foo\"\"#</span>;             <span class=\"hljs-comment\">// \"foo\"</span>\n\n<span class=\"hljs-string\">b\"foo #\\\"# bar\"</span>;\nb<span class=\"hljs-string\">r##\"foo #\"# bar\"##</span>;                 <span class=\"hljs-comment\">// foo #\"# bar</span>\n\n<span class=\"hljs-string\">b\"\\x52\"</span>; <span class=\"hljs-string\">b\"R\"</span>; b<span class=\"hljs-string\">r\"R\"</span>;                <span class=\"hljs-comment\">// R</span>\n<span class=\"hljs-string\">b\"\\\\x52\"</span>; b<span class=\"hljs-string\">r\"\\x52\"</span>;                  <span class=\"hljs-comment\">// \\x52</span>\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"c-string-literal-expressions\"><a class=\"header\" href=\"#c-string-literal-expressions\">C string literal expressions</a></h2>\n<p>A C string literal expression consists of a single <a href=\"../tokens.html#c-string-literals\">C_STRING_LITERAL</a> or <a href=\"../tokens.html#raw-c-string-literals\">RAW_C_STRING_LITERAL</a> token.</p>\n<p>The expression's type is a shared reference (with <code class=\"hljs\">static</code> lifetime) to the standard library <a href=\"../../core/ffi/struct.CStr.html\">CStr</a> type.\nThat is, the type is <code class=\"hljs\">&amp;'static core::ffi::CStr</code>.</p>\n<p>The token must not have a suffix.</p>\n<p>The token's <em>literal content</em> is the sequence of characters following the first <code class=\"hljs\">\"</code> and preceding the last <code class=\"hljs\">\"</code> in the string representation of the token.</p>\n<p>The literal expression's <em>represented bytes</em> are a sequence of bytes derived from the literal content as follows:</p>\n<ul>\n<li>\n<p>If the token is a <a href=\"../tokens.html#c-string-literals\">C_STRING_LITERAL</a>, the literal content is treated as a sequence of items, each of which is either a single Unicode character other than <code class=\"hljs\">\\</code> or an <a href=\"#escapes\">escape</a>.\nThe sequence of items is converted to a sequence of bytes as follows:</p>\n<ul>\n<li>Each single Unicode character contributes its UTF-8 representation.</li>\n<li>Each <a href=\"#simple-escapes\">simple escape</a> contributes the <a href=\"http://www.unicode.org/glossary/#unicode_scalar_value\">Unicode scalar value</a> of its escaped value.</li>\n<li>Each <a href=\"#8-bit-escapes\">8-bit escape</a> contributes a single byte containing the <a href=\"http://www.unicode.org/glossary/#unicode_scalar_value\">Unicode scalar value</a> of its escaped value.</li>\n<li>Each <a href=\"#unicode-escapes\">unicode escape</a> contributes the UTF-8 representation of its escaped value.</li>\n<li>Each <a href=\"#string-continuation-escapes\">string continuation escape</a> contributes no bytes.</li>\n</ul>\n</li>\n<li>\n<p>If the token is a <a href=\"../tokens.html#raw-c-string-literals\">RAW_C_STRING_LITERAL</a>, the represented bytes are the UTF-8 encoding of the literal content.</p>\n</li>\n</ul>\n<blockquote>\n<p><strong>Note</strong>: the permitted forms of <a href=\"../tokens.html#c-string-literals\">C_STRING_LITERAL</a> and <a href=\"../tokens.html#raw-c-string-literals\">RAW_C_STRING_LITERAL</a> tokens ensure that the represented bytes never include a null byte.</p>\n</blockquote>\n<p>The expression's value is a reference to a statically allocated <a href=\"../../core/ffi/struct.CStr.html\">CStr</a> whose array of bytes contains the represented bytes followed by a null byte.</p>\n<p>Examples of C string literal expressions:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>c<span class=\"hljs-string\">\"foo\"</span>; c<span class=\"hljs-string\">r\"foo\"</span>;                     <span class=\"hljs-comment\">// foo</span>\nc<span class=\"hljs-string\">\"\\\"foo\\\"\"</span>; c<span class=\"hljs-string\">r#\"\"foo\"\"#</span>;             <span class=\"hljs-comment\">// \"foo\"</span>\n\nc<span class=\"hljs-string\">\"foo #\\\"# bar\"</span>;\nc<span class=\"hljs-string\">r##\"foo #\"# bar\"##</span>;                 <span class=\"hljs-comment\">// foo #\"# bar</span>\n\nc<span class=\"hljs-string\">\"\\x52\"</span>; c<span class=\"hljs-string\">\"R\"</span>; c<span class=\"hljs-string\">r\"R\"</span>;                <span class=\"hljs-comment\">// R</span>\nc<span class=\"hljs-string\">\"\\\\x52\"</span>; c<span class=\"hljs-string\">r\"\\x52\"</span>;                  <span class=\"hljs-comment\">// \\x52</span>\n\nc<span class=\"hljs-string\">\"æ\"</span>;                                <span class=\"hljs-comment\">// LATIN SMALL LETTER AE (U+00E6)</span>\nc<span class=\"hljs-string\">\"\\u{00E6}\"</span>;                         <span class=\"hljs-comment\">// LATIN SMALL LETTER AE (U+00E6)</span>\nc<span class=\"hljs-string\">\"\\xC3\\xA6\"</span>;                         <span class=\"hljs-comment\">// LATIN SMALL LETTER AE (U+00E6)</span>\n\nc<span class=\"hljs-string\">\"\\xE6\"</span>.to_bytes();                  <span class=\"hljs-comment\">// [230]</span>\nc<span class=\"hljs-string\">\"\\u{00E6}\"</span>.to_bytes();              <span class=\"hljs-comment\">// [195, 166]</span>\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"integer-literal-expressions\"><a class=\"header\" href=\"#integer-literal-expressions\">Integer literal expressions</a></h2>\n<p>An integer literal expression consists of a single <a href=\"../tokens.html#integer-literals\">INTEGER_LITERAL</a> token.</p>\n<p>If the token has a <a href=\"../tokens.html#suffixes\">suffix</a>, the suffix must be the name of one of the <a href=\"../types/numeric.html\">primitive integer types</a>: <code class=\"hljs\">u8</code>, <code class=\"hljs\">i8</code>, <code class=\"hljs\">u16</code>, <code class=\"hljs\">i16</code>, <code class=\"hljs\">u32</code>, <code class=\"hljs\">i32</code>, <code class=\"hljs\">u64</code>, <code class=\"hljs\">i64</code>, <code class=\"hljs\">u128</code>, <code class=\"hljs\">i128</code>, <code class=\"hljs\">usize</code>, or <code class=\"hljs\">isize</code>, and the expression has that type.</p>\n<p>If the token has no suffix, the expression's type is determined by type inference:</p>\n<ul>\n<li>\n<p>If an integer type can be <em>uniquely</em> determined from the surrounding program context, the expression has that type.</p>\n</li>\n<li>\n<p>If the program context under-constrains the type, it defaults to the signed 32-bit integer <code class=\"hljs\">i32</code>.</p>\n</li>\n<li>\n<p>If the program context over-constrains the type, it is considered a static type error.</p>\n</li>\n</ul>\n<p>Examples of integer literal expressions:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-number\">123</span>;                               <span class=\"hljs-comment\">// type i32</span>\n<span class=\"hljs-number\">123i32</span>;                            <span class=\"hljs-comment\">// type i32</span>\n<span class=\"hljs-number\">123u32</span>;                            <span class=\"hljs-comment\">// type u32</span>\n<span class=\"hljs-number\">123_u32</span>;                           <span class=\"hljs-comment\">// type u32</span>\n<span class=\"hljs-keyword\">let</span> a: <span class=\"hljs-built_in\">u64</span> = <span class=\"hljs-number\">123</span>;                  <span class=\"hljs-comment\">// type u64</span>\n\n<span class=\"hljs-number\">0xff</span>;                              <span class=\"hljs-comment\">// type i32</span>\n<span class=\"hljs-number\">0xff_u8</span>;                           <span class=\"hljs-comment\">// type u8</span>\n\n<span class=\"hljs-number\">0o70</span>;                              <span class=\"hljs-comment\">// type i32</span>\n<span class=\"hljs-number\">0o70_i16</span>;                          <span class=\"hljs-comment\">// type i16</span>\n\n<span class=\"hljs-number\">0b1111_1111_1001_0000</span>;             <span class=\"hljs-comment\">// type i32</span>\n<span class=\"hljs-number\">0b1111_1111_1001_0000i64</span>;          <span class=\"hljs-comment\">// type i64</span>\n\n<span class=\"hljs-number\">0usize</span>;                            <span class=\"hljs-comment\">// type usize</span>\n<span class=\"boring\">}</span></code></pre></pre>\n<p>The value of the expression is determined from the string representation of the token as follows:</p>\n<ul>\n<li>\n<p>An integer radix is chosen by inspecting the first two characters of the string, as follows:</p>\n<ul>\n<li><code class=\"hljs\">0b</code> indicates radix 2</li>\n<li><code class=\"hljs\">0o</code> indicates radix 8</li>\n<li><code class=\"hljs\">0x</code> indicates radix 16</li>\n<li>otherwise the radix is 10.</li>\n</ul>\n</li>\n<li>\n<p>If the radix is not 10, the first two characters are removed from the string.</p>\n</li>\n<li>\n<p>Any suffix is removed from the string.</p>\n</li>\n<li>\n<p>Any underscores are removed from the string.</p>\n</li>\n<li>\n<p>The string is converted to a <code class=\"hljs\">u128</code> value as if by <a href=\"../../core/primitive.u128.html#method.from_str_radix\"><code class=\"hljs\">u128::from_str_radix</code></a> with the chosen radix.\nIf the value does not fit in <code class=\"hljs\">u128</code>, it is a compiler error.</p>\n</li>\n<li>\n<p>The <code class=\"hljs\">u128</code> value is converted to the expression's type via a <a href=\"operator-expr.html#numeric-cast\">numeric cast</a>.</p>\n</li>\n</ul>\n<blockquote>\n<p><strong>Note</strong>: The final cast will truncate the value of the literal if it does not fit in the expression's type.\n<code class=\"hljs\">rustc</code> includes a <a href=\"../attributes/diagnostics.html#lint-check-attributes\">lint check</a> named <code class=\"hljs\">overflowing_literals</code>, defaulting to <code class=\"hljs\">deny</code>, which rejects expressions where this occurs.</p>\n</blockquote>\n<blockquote>\n<p><strong>Note</strong>: <code class=\"hljs\">-1i8</code>, for example, is an application of the <a href=\"operator-expr.html#negation-operators\">negation operator</a> to the literal expression <code class=\"hljs\">1i8</code>, not a single integer literal expression.\nSee <a href=\"operator-expr.html#overflow\">Overflow</a> for notes on representing the most negative value for a signed type.</p>\n</blockquote>\n<h2 id=\"floating-point-literal-expressions\"><a class=\"header\" href=\"#floating-point-literal-expressions\">Floating-point literal expressions</a></h2>\n<p>A floating-point literal expression has one of two forms:</p>\n<ul>\n<li>a single <a href=\"../tokens.html#floating-point-literals\">FLOAT_LITERAL</a> token</li>\n<li>a single <a href=\"../tokens.html#integer-literals\">INTEGER_LITERAL</a> token which has a suffix and no radix indicator</li>\n</ul>\n<p>If the token has a <a href=\"../tokens.html#suffixes\">suffix</a>, the suffix must be the name of one of the <a href=\"../types/numeric.html#floating-point-types\">primitive floating-point types</a>: <code class=\"hljs\">f32</code> or <code class=\"hljs\">f64</code>, and the expression has that type.</p>\n<p>If the token has no suffix, the expression's type is determined by type inference:</p>\n<ul>\n<li>\n<p>If a floating-point type can be <em>uniquely</em> determined from the surrounding program context, the expression has that type.</p>\n</li>\n<li>\n<p>If the program context under-constrains the type, it defaults to <code class=\"hljs\">f64</code>.</p>\n</li>\n<li>\n<p>If the program context over-constrains the type, it is considered a static type error.</p>\n</li>\n</ul>\n<p>Examples of floating-point literal expressions:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-number\">123.0f64</span>;        <span class=\"hljs-comment\">// type f64</span>\n<span class=\"hljs-number\">0.1f64</span>;          <span class=\"hljs-comment\">// type f64</span>\n<span class=\"hljs-number\">0.1f32</span>;          <span class=\"hljs-comment\">// type f32</span>\n<span class=\"hljs-number\">12E+99_f64</span>;      <span class=\"hljs-comment\">// type f64</span>\n<span class=\"hljs-number\">5f32</span>;            <span class=\"hljs-comment\">// type f32</span>\n<span class=\"hljs-keyword\">let</span> x: <span class=\"hljs-built_in\">f64</span> = <span class=\"hljs-number\">2</span>.; <span class=\"hljs-comment\">// type f64</span>\n<span class=\"boring\">}</span></code></pre></pre>\n<p>The value of the expression is determined from the string representation of the token as follows:</p>\n<ul>\n<li>\n<p>Any suffix is removed from the string.</p>\n</li>\n<li>\n<p>Any underscores are removed from the string.</p>\n</li>\n<li>\n<p>The string is converted to the expression's type as if by <a href=\"../../core/primitive.f32.html#method.from_str\"><code class=\"hljs\">f32::from_str</code></a> or <a href=\"../../core/primitive.f64.html#method.from_str\"><code class=\"hljs\">f64::from_str</code></a>.</p>\n</li>\n</ul>\n<blockquote>\n<p><strong>Note</strong>: <code class=\"hljs\">-1.0</code>, for example, is an application of the <a href=\"operator-expr.html#negation-operators\">negation operator</a> to the literal expression <code class=\"hljs\">1.0</code>, not a single floating-point literal expression.</p>\n</blockquote>\n<blockquote>\n<p><strong>Note</strong>: <code class=\"hljs\">inf</code> and <code class=\"hljs\">NaN</code> are not literal tokens.\nThe <a href=\"../../core/primitive.f32.html#associatedconstant.INFINITY\"><code class=\"hljs\">f32::INFINITY</code></a>, <a href=\"../../core/primitive.f64.html#associatedconstant.INFINITY\"><code class=\"hljs\">f64::INFINITY</code></a>, <a href=\"../../core/primitive.f32.html#associatedconstant.NAN\"><code class=\"hljs\">f32::NAN</code></a>, and <a href=\"../../core/primitive.f64.html#associatedconstant.NAN\"><code class=\"hljs\">f64::NAN</code></a> constants can be used instead of literal expressions.\nIn <code class=\"hljs\">rustc</code>, a literal large enough to be evaluated as infinite will trigger the <code class=\"hljs\">overflowing_literals</code> lint check.</p>\n</blockquote>\n<h2 id=\"boolean-literal-expressions\"><a class=\"header\" href=\"#boolean-literal-expressions\">Boolean literal expressions</a></h2>\n<p>A boolean literal expression consists of one of the keywords <code class=\"hljs\">true</code> or <code class=\"hljs\">false</code>.</p>\n<p>The expression's type is the primitive <a href=\"../types/boolean.html\">boolean type</a>, and its value is:</p>\n<ul>\n<li>true if the keyword is <code class=\"hljs\">true</code></li>\n<li>false if the keyword is <code class=\"hljs\">false</code></li>\n</ul>\n\n                    </main>\n\n                    <nav class=\"nav-wrapper\" aria-label=\"Page navigation\">\n                        <!-- Mobile navigation buttons -->\n                            <a rel=\"prev\" href=\"../expressions.html\" class=\"mobile-nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                                <i class=\"fa fa-angle-left\"></i>\n                            </a>\n\n                            <a rel=\"next prefetch\" href=\"../expressions/path-expr.html\" class=\"mobile-nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                                <i class=\"fa fa-angle-right\"></i>\n                            </a>\n\n                        <div style=\"clear: both\"></div>\n                    </nav>\n                </div>\n            </div>\n\n            <nav class=\"nav-wide-wrapper\" aria-label=\"Page navigation\">\n                    <a rel=\"prev\" href=\"../expressions.html\" class=\"nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                        <i class=\"fa fa-angle-left\"></i>\n                    </a>\n\n                    <a rel=\"next prefetch\" href=\"../expressions/path-expr.html\" class=\"nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                        <i class=\"fa fa-angle-right\"></i>\n                    </a>\n            </nav>\n\n        </div>\n\n\n\n\n        <script>\n            window.playground_copyable = true;\n        </script>\n\n\n        <script src=\"../elasticlunr.min.js\"></script>\n        <script src=\"../mark.min.js\"></script>\n        <script src=\"../searcher.js\"></script>\n\n        <script src=\"../clipboard.min.js\"></script>\n        <script src=\"../highlight.js\"></script>\n        <script src=\"../book.js\"></script>\n\n        <!-- Custom JS scripts -->\n\n\n    </div>\n    \n\n</body></html>",
	"crawlDate": "2024-07-28T05:13:05.691Z"
}