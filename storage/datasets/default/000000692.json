{
	"title": "PhantomData in std::marker - Rust",
	"url": "https://doc.rust-lang.org/stable/std/marker/struct.PhantomData.html",
	"markdown": "# PhantomData in std::marker - Rust\n\n```\npub struct PhantomData<T>\nwhere\n    T: ?Sized;\n```\n\nExpand description\n\nZero-sized type used to mark things that “act like” they own a `T`.\n\nAdding a `PhantomData<T>` field to your type tells the compiler that your type acts as though it stores a value of type `T`, even though it doesn’t really. This information is used when computing certain safety properties.\n\nFor a more in-depth explanation of how to use `PhantomData<T>`, please see [the Nomicon](../../nomicon/phantom-data.html).\n\n## [§](#a-ghastly-note-)A ghastly note 👻👻👻\n\nThough they both have scary names, `PhantomData` and ‘phantom types’ are related, but not identical. A phantom type parameter is simply a type parameter which is never used. In Rust, this often causes the compiler to complain, and the solution is to add a “dummy” use by way of `PhantomData`.\n\n## [§](#examples)Examples\n\n### [§](#unused-lifetime-parameters)Unused lifetime parameters\n\nPerhaps the most common use case for `PhantomData` is a struct that has an unused lifetime parameter, typically as part of some unsafe code. For example, here is a struct `Slice` that has two pointers of type `*const T`, presumably pointing into an array somewhere:\n\n[ⓘ](# \"This example deliberately fails to compile\")\n\n```\nstruct Slice<'a, T> {\n    start: *const T,\n    end: *const T,\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++struct+Slice%3C%27a,+T%3E+%7B%0A++++++++start:+*const+T,%0A++++++++end:+*const+T,%0A++++%7D%0A%7D&edition=2021)\n\nThe intention is that the underlying data is only valid for the lifetime `'a`, so `Slice` should not outlive `'a`. However, this intent is not expressed in the code, since there are no uses of the lifetime `'a` and hence it is not clear what data it applies to. We can correct this by telling the compiler to act _as if_ the `Slice` struct contained a reference `&'a T`:\n\n```\nuse std::marker::PhantomData;\n\nstruct Slice<'a, T> {\n    start: *const T,\n    end: *const T,\n    phantom: PhantomData<&'a T>,\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::marker::PhantomData;%0A++++%0A++++%23%5Ballow(dead_code)%5D%0A++++struct+Slice%3C%27a,+T%3E+%7B%0A++++++++start:+*const+T,%0A++++++++end:+*const+T,%0A++++++++phantom:+PhantomData%3C%26%27a+T%3E,%0A++++%7D%0A%7D&edition=2021)\n\nThis also in turn infers the lifetime bound `T: 'a`, indicating that any references in `T` are valid over the lifetime `'a`.\n\nWhen initializing a `Slice` you simply provide the value `PhantomData` for the field `phantom`:\n\n```\nfn borrow_vec<T>(vec: &Vec<T>) -> Slice<'_, T> {\n    let ptr = vec.as_ptr();\n    Slice {\n        start: ptr,\n        end: unsafe { ptr.add(vec.len()) },\n        phantom: PhantomData,\n    }\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Ballow(dead_code)%5D%0Afn+main()+%7B%0A++++use+std::marker::PhantomData;%0A++++struct+Slice%3C%27a,+T%3E+%7B%0A++++++++start:+*const+T,%0A++++++++end:+*const+T,%0A++++++++phantom:+PhantomData%3C%26%27a+T%3E,%0A++++%7D%0A++++fn+borrow_vec%3CT%3E(vec:+%26Vec%3CT%3E)+-%3E+Slice%3C%27_,+T%3E+%7B%0A++++++++let+ptr+=+vec.as_ptr();%0A++++++++Slice+%7B%0A++++++++++++start:+ptr,%0A++++++++++++end:+unsafe+%7B+ptr.add(vec.len())+%7D,%0A++++++++++++phantom:+PhantomData,%0A++++++++%7D%0A++++%7D%0A%7D&edition=2021)\n\n### [§](#unused-type-parameters)Unused type parameters\n\nIt sometimes happens that you have unused type parameters which indicate what type of data a struct is “tied” to, even though that data is not actually found in the struct itself. Here is an example where this arises with [FFI](about:blank/book/ch19-01-unsafe-rust.html#using-extern-functions-to-call-external-code). The foreign interface uses handles of type `*mut ()` to refer to Rust values of different types. We track the Rust type using a phantom type parameter on the struct `ExternalResource` which wraps a handle.\n\n```\nuse std::marker::PhantomData;\nuse std::mem;\n\nstruct ExternalResource<R> {\n   resource_handle: *mut (),\n   resource_type: PhantomData<R>,\n}\n\nimpl<R: ResType> ExternalResource<R> {\n    fn new() -> Self {\n        let size_of_res = mem::size_of::<R>();\n        Self {\n            resource_handle: foreign_lib::new(size_of_res),\n            resource_type: PhantomData,\n        }\n    }\n\n    fn do_stuff(&self, param: ParamType) {\n        let foreign_params = convert_params(param);\n        foreign_lib::do_stuff(self.resource_handle, foreign_params);\n    }\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Ballow(dead_code)%5D%0Afn+main()+%7B%0A++++trait+ResType+%7B+%7D%0A++++struct+ParamType;%0A++++mod+foreign_lib+%7B%0A++++++++pub+fn+new(_:+usize)+-%3E+*mut+()+%7B+42+as+*mut+()+%7D%0A++++++++pub+fn+do_stuff(_:+*mut+(),+_:+usize)+%7B%7D%0A++++%7D%0A++++fn+convert_params(_:+ParamType)+-%3E+usize+%7B+42+%7D%0A++++use+std::marker::PhantomData;%0A++++use+std::mem;%0A++++%0A++++struct+ExternalResource%3CR%3E+%7B%0A+++++++resource_handle:+*mut+(),%0A+++++++resource_type:+PhantomData%3CR%3E,%0A++++%7D%0A++++%0A++++impl%3CR:+ResType%3E+ExternalResource%3CR%3E+%7B%0A++++++++fn+new()+-%3E+Self+%7B%0A++++++++++++let+size_of_res+=+mem::size_of::%3CR%3E();%0A++++++++++++Self+%7B%0A++++++++++++++++resource_handle:+foreign_lib::new(size_of_res),%0A++++++++++++++++resource_type:+PhantomData,%0A++++++++++++%7D%0A++++++++%7D%0A++++%0A++++++++fn+do_stuff(%26self,+param:+ParamType)+%7B%0A++++++++++++let+foreign_params+=+convert_params(param);%0A++++++++++++foreign_lib::do_stuff(self.resource_handle,+foreign_params);%0A++++++++%7D%0A++++%7D%0A%7D&edition=2021)\n\n### [§](#ownership-and-the-drop-check)Ownership and the drop check\n\nThe exact interaction of `PhantomData` with drop check **may change in the future**.\n\nCurrently, adding a field of type `PhantomData<T>` indicates that your type _owns_ data of type `T` in very rare circumstances. This in turn has effects on the Rust compiler’s [drop check](about:blank/ops/trait.Drop.html#drop-check \"trait std::ops::Drop\") analysis. For the exact rules, see the [drop check](about:blank/ops/trait.Drop.html#drop-check \"trait std::ops::Drop\") documentation.\n\n### [§](#layout-1)Layout\n\nFor all `T`, the following are guaranteed:\n\n-   `size_of::<PhantomData<T>>() == 0`\n-   `align_of::<PhantomData<T>>() == 1`\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/marker.rs.html#776)[§](#impl-Clone-for-PhantomData%3CT%3E)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#2617)[§](#impl-Debug-for-PhantomData%3CT%3E)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/marker.rs.html#783)[§](#impl-Default-for-PhantomData%3CT%3E)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/marker.rs.html#743)[§](#impl-Hash-for-PhantomData%3CT%3E)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/marker.rs.html#766)[§](#impl-Ord-for-PhantomData%3CT%3E)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/marker.rs.html#749)[§](#impl-PartialEq-for-PhantomData%3CT%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/marker.rs.html#750)[§](#method.eq)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[§](#method.ne)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/marker.rs.html#759)[§](#impl-PartialOrd-for-PhantomData%3CT%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/marker.rs.html#760)[§](#method.partial_cmp)\n\nThis method returns an ordering between `self` and `other` values if one exists. [Read more](about:blank/cmp/trait.PartialOrd.html#tymethod.partial_cmp)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180)[§](#method.lt)\n\nThis method tests less than (for `self` and `other`) and is used by the `<` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.lt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198)[§](#method.le)\n\nThis method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.le)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215)[§](#method.gt)\n\nThis method tests greater than (for `self` and `other`) and is used by the `>` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.gt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233)[§](#method.ge)\n\nThis method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.ge)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/marker.rs.html#773)[§](#impl-Copy-for-PhantomData%3CT%3E)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/marker.rs.html#756)[§](#impl-Eq-for-PhantomData%3CT%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/marker.rs.html#833-841)[§](#impl-Freeze-for-PhantomData%3CT%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/marker.rs.html#790)[§](#impl-StructuralPartialEq-for-PhantomData%3CT%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140)[§](#impl-Any-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208)[§](#impl-Borrow%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216)[§](#impl-BorrowMut%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765)[§](#impl-From%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768)[§](#method.from)\n\nReturns the argument unchanged.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750)[§](#impl-Into%3CU%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758)[§](#method.into)\n\nCalls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of `[From](../convert/trait.From.html \"trait std::convert::From\")<T> for U` chooses to do.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85)[§](#impl-ToOwned-for-T)\n\n[§](#associatedtype.Owned)\n\nThe resulting type after obtaining ownership.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88)[§](#method.to_owned)\n\nCreates owned data from borrowed data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#tymethod.to_owned)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92)[§](#method.clone_into)\n\nUses borrowed data to replace owned data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#method.clone_into)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807)[§](#impl-TryFrom%3CU%3E-for-T)\n\n[§](#associatedtype.Error-1)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812)[§](#method.try_from)\n\nPerforms the conversion.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792)[§](#impl-TryInto%3CU%3E-for-T)\n\n[§](#associatedtype.Error)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797)[§](#method.try_into)\n\nPerforms the conversion.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Zero-sized type used to mark things that “act like” they own a `T`.\"><title>PhantomData in std::marker - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc struct\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">PhantomData</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">PhantomData</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-Clone-for-PhantomData%3CT%3E\">Clone</a></li><li><a href=\"#impl-Copy-for-PhantomData%3CT%3E\">Copy</a></li><li><a href=\"#impl-Debug-for-PhantomData%3CT%3E\">Debug</a></li><li><a href=\"#impl-Default-for-PhantomData%3CT%3E\">Default</a></li><li><a href=\"#impl-Eq-for-PhantomData%3CT%3E\">Eq</a></li><li><a href=\"#impl-Freeze-for-PhantomData%3CT%3E\">Freeze</a></li><li><a href=\"#impl-Hash-for-PhantomData%3CT%3E\">Hash</a></li><li><a href=\"#impl-Ord-for-PhantomData%3CT%3E\">Ord</a></li><li><a href=\"#impl-PartialEq-for-PhantomData%3CT%3E\">PartialEq</a></li><li><a href=\"#impl-PartialOrd-for-PhantomData%3CT%3E\">PartialOrd</a></li><li><a href=\"#impl-StructuralPartialEq-for-PhantomData%3CT%3E\">StructuralPartialEq</a></li></ul><h3><a href=\"#synthetic-implementations\">Auto Trait Implementations</a></h3><ul class=\"block synthetic-implementation\"><li><a href=\"#impl-RefUnwindSafe-for-PhantomData%3CT%3E\">RefUnwindSafe</a></li><li><a href=\"#impl-Send-for-PhantomData%3CT%3E\">Send</a></li><li><a href=\"#impl-Sync-for-PhantomData%3CT%3E\">Sync</a></li><li><a href=\"#impl-Unpin-for-PhantomData%3CT%3E\">Unpin</a></li><li><a href=\"#impl-UnwindSafe-for-PhantomData%3CT%3E\">UnwindSafe</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-Any-for-T\">Any</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-T\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-T\">BorrowMut&lt;T&gt;</a></li><li><a href=\"#impl-From%3CT%3E-for-T\">From&lt;T&gt;</a></li><li><a href=\"#impl-Into%3CU%3E-for-T\">Into&lt;U&gt;</a></li><li><a href=\"#impl-ToOwned-for-T\">ToOwned</a></li><li><a href=\"#impl-TryFrom%3CU%3E-for-T\">TryFrom&lt;U&gt;</a></li><li><a href=\"#impl-TryInto%3CU%3E-for-T\">TryInto&lt;U&gt;</a></li></ul></section><h2><a href=\"index.html\">In std::marker</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.PhantomData.html\">PhantomData</a></li><li><a href=\"struct.PhantomPinned.html\">PhantomPinned</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.ConstParamTy.html\">ConstParamTy</a></li><li><a href=\"trait.Copy.html\">Copy</a></li><li><a href=\"trait.Destruct.html\">Destruct</a></li><li><a href=\"trait.DiscriminantKind.html\">DiscriminantKind</a></li><li><a href=\"trait.FnPtr.html\">FnPtr</a></li><li><a href=\"trait.Freeze.html\">Freeze</a></li><li><a href=\"trait.PointerLike.html\">PointerLike</a></li><li><a href=\"trait.Send.html\">Send</a></li><li><a href=\"trait.Sized.html\">Sized</a></li><li><a href=\"trait.StructuralPartialEq.html\">StructuralPartialEq</a></li><li><a href=\"trait.Sync.html\">Sync</a></li><li><a href=\"trait.Tuple.html\">Tuple</a></li><li><a href=\"trait.Unpin.html\">Unpin</a></li><li><a href=\"trait.Unsize.html\">Unsize</a></li></ul><h3><a href=\"index.html#derives\">Derive Macros</a></h3><ul class=\"block derive\"><li><a href=\"derive.ConstParamTy.html\">ConstParamTy</a></li><li><a href=\"derive.Copy.html\">Copy</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Struct <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">marker</a>::<wbr><a class=\"struct\" href=\"#\">PhantomData</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/marker.rs.html#740\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub struct PhantomData&lt;T&gt;\n<span class=\"where\">where\n    T: ?<a class=\"trait\" href=\"trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a></span>;</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Zero-sized type used to mark things that “act like” they own a <code>T</code>.</p>\n<p>Adding a <code>PhantomData&lt;T&gt;</code> field to your type tells the compiler that your\ntype acts as though it stores a value of type <code>T</code>, even though it doesn’t\nreally. This information is used when computing certain safety properties.</p>\n<p>For a more in-depth explanation of how to use <code>PhantomData&lt;T&gt;</code>, please see\n<a href=\"../../nomicon/phantom-data.html\">the Nomicon</a>.</p>\n<h2 id=\"a-ghastly-note-\"><a class=\"doc-anchor\" href=\"#a-ghastly-note-\">§</a>A ghastly note 👻👻👻</h2>\n<p>Though they both have scary names, <code>PhantomData</code> and ‘phantom types’ are\nrelated, but not identical. A phantom type parameter is simply a type\nparameter which is never used. In Rust, this often causes the compiler to\ncomplain, and the solution is to add a “dummy” use by way of <code>PhantomData</code>.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2><h3 id=\"unused-lifetime-parameters\"><a class=\"doc-anchor\" href=\"#unused-lifetime-parameters\">§</a>Unused lifetime parameters</h3>\n<p>Perhaps the most common use case for <code>PhantomData</code> is a struct that has an\nunused lifetime parameter, typically as part of some unsafe code. For\nexample, here is a struct <code>Slice</code> that has two pointers of type <code>*const T</code>,\npresumably pointing into an array somewhere:</p>\n\n<div class=\"example-wrap compile_fail\"><a href=\"#\" class=\"tooltip\" title=\"This example deliberately fails to compile\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">struct </span>Slice&lt;<span class=\"lifetime\">'a</span>, T&gt; {\n    start: <span class=\"kw-2\">*const </span>T,\n    end: <span class=\"kw-2\">*const </span>T,\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++struct+Slice%3C'a,+T%3E+%7B%0A++++++++start:+*const+T,%0A++++++++end:+*const+T,%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<p>The intention is that the underlying data is only valid for the\nlifetime <code>'a</code>, so <code>Slice</code> should not outlive <code>'a</code>. However, this\nintent is not expressed in the code, since there are no uses of\nthe lifetime <code>'a</code> and hence it is not clear what data it applies\nto. We can correct this by telling the compiler to act <em>as if</em> the\n<code>Slice</code> struct contained a reference <code>&amp;'a T</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::marker::PhantomData;\n\n<span class=\"kw\">struct </span>Slice&lt;<span class=\"lifetime\">'a</span>, T&gt; {\n    start: <span class=\"kw-2\">*const </span>T,\n    end: <span class=\"kw-2\">*const </span>T,\n    phantom: PhantomData&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>T&gt;,\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::marker::PhantomData;%0A++++%0A++++%23%5Ballow(dead_code)%5D%0A++++struct+Slice%3C'a,+T%3E+%7B%0A++++++++start:+*const+T,%0A++++++++end:+*const+T,%0A++++++++phantom:+PhantomData%3C%26'a+T%3E,%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<p>This also in turn infers the lifetime bound <code>T: 'a</code>, indicating\nthat any references in <code>T</code> are valid over the lifetime <code>'a</code>.</p>\n<p>When initializing a <code>Slice</code> you simply provide the value\n<code>PhantomData</code> for the field <code>phantom</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>borrow_vec&lt;T&gt;(vec: <span class=\"kw-2\">&amp;</span>Vec&lt;T&gt;) -&gt; Slice&lt;<span class=\"lifetime\">'_</span>, T&gt; {\n    <span class=\"kw\">let </span>ptr = vec.as_ptr();\n    Slice {\n        start: ptr,\n        end: <span class=\"kw\">unsafe </span>{ ptr.add(vec.len()) },\n        phantom: PhantomData,\n    }\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Ballow(dead_code)%5D%0Afn+main()+%7B%0A++++use+std::marker::PhantomData;%0A++++struct+Slice%3C'a,+T%3E+%7B%0A++++++++start:+*const+T,%0A++++++++end:+*const+T,%0A++++++++phantom:+PhantomData%3C%26'a+T%3E,%0A++++%7D%0A++++fn+borrow_vec%3CT%3E(vec:+%26Vec%3CT%3E)+-%3E+Slice%3C'_,+T%3E+%7B%0A++++++++let+ptr+=+vec.as_ptr();%0A++++++++Slice+%7B%0A++++++++++++start:+ptr,%0A++++++++++++end:+unsafe+%7B+ptr.add(vec.len())+%7D,%0A++++++++++++phantom:+PhantomData,%0A++++++++%7D%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<h3 id=\"unused-type-parameters\"><a class=\"doc-anchor\" href=\"#unused-type-parameters\">§</a>Unused type parameters</h3>\n<p>It sometimes happens that you have unused type parameters which\nindicate what type of data a struct is “tied” to, even though that\ndata is not actually found in the struct itself. Here is an\nexample where this arises with <a href=\"../../book/ch19-01-unsafe-rust.html#using-extern-functions-to-call-external-code\">FFI</a>. The foreign interface uses\nhandles of type <code>*mut ()</code> to refer to Rust values of different\ntypes. We track the Rust type using a phantom type parameter on\nthe struct <code>ExternalResource</code> which wraps a handle.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::marker::PhantomData;\n<span class=\"kw\">use </span>std::mem;\n\n<span class=\"kw\">struct </span>ExternalResource&lt;R&gt; {\n   resource_handle: <span class=\"kw-2\">*mut </span>(),\n   resource_type: PhantomData&lt;R&gt;,\n}\n\n<span class=\"kw\">impl</span>&lt;R: ResType&gt; ExternalResource&lt;R&gt; {\n    <span class=\"kw\">fn </span>new() -&gt; <span class=\"self\">Self </span>{\n        <span class=\"kw\">let </span>size_of_res = mem::size_of::&lt;R&gt;();\n        <span class=\"self\">Self </span>{\n            resource_handle: foreign_lib::new(size_of_res),\n            resource_type: PhantomData,\n        }\n    }\n\n    <span class=\"kw\">fn </span>do_stuff(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, param: ParamType) {\n        <span class=\"kw\">let </span>foreign_params = convert_params(param);\n        foreign_lib::do_stuff(<span class=\"self\">self</span>.resource_handle, foreign_params);\n    }\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Ballow(dead_code)%5D%0Afn+main()+%7B%0A++++trait+ResType+%7B+%7D%0A++++struct+ParamType;%0A++++mod+foreign_lib+%7B%0A++++++++pub+fn+new(_:+usize)+-%3E+*mut+()+%7B+42+as+*mut+()+%7D%0A++++++++pub+fn+do_stuff(_:+*mut+(),+_:+usize)+%7B%7D%0A++++%7D%0A++++fn+convert_params(_:+ParamType)+-%3E+usize+%7B+42+%7D%0A++++use+std::marker::PhantomData;%0A++++use+std::mem;%0A++++%0A++++struct+ExternalResource%3CR%3E+%7B%0A+++++++resource_handle:+*mut+(),%0A+++++++resource_type:+PhantomData%3CR%3E,%0A++++%7D%0A++++%0A++++impl%3CR:+ResType%3E+ExternalResource%3CR%3E+%7B%0A++++++++fn+new()+-%3E+Self+%7B%0A++++++++++++let+size_of_res+=+mem::size_of::%3CR%3E();%0A++++++++++++Self+%7B%0A++++++++++++++++resource_handle:+foreign_lib::new(size_of_res),%0A++++++++++++++++resource_type:+PhantomData,%0A++++++++++++%7D%0A++++++++%7D%0A++++%0A++++++++fn+do_stuff(%26self,+param:+ParamType)+%7B%0A++++++++++++let+foreign_params+=+convert_params(param);%0A++++++++++++foreign_lib::do_stuff(self.resource_handle,+foreign_params);%0A++++++++%7D%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<h3 id=\"ownership-and-the-drop-check\"><a class=\"doc-anchor\" href=\"#ownership-and-the-drop-check\">§</a>Ownership and the drop check</h3>\n<p>The exact interaction of <code>PhantomData</code> with drop check <strong>may change in the future</strong>.</p>\n<p>Currently, adding a field of type <code>PhantomData&lt;T&gt;</code> indicates that your type <em>owns</em> data of type\n<code>T</code> in very rare circumstances. This in turn has effects on the Rust compiler’s <a href=\"../ops/trait.Drop.html#drop-check\" title=\"trait std::ops::Drop\">drop check</a>\nanalysis. For the exact rules, see the <a href=\"../ops/trait.Drop.html#drop-check\" title=\"trait std::ops::Drop\">drop check</a> documentation.</p>\n<h3 id=\"layout-1\"><a class=\"doc-anchor\" href=\"#layout-1\">§</a>Layout</h3>\n<p>For all <code>T</code>, the following are guaranteed:</p>\n<ul>\n<li><code>size_of::&lt;PhantomData&lt;T&gt;&gt;() == 0</code></li>\n<li><code>align_of::&lt;PhantomData&lt;T&gt;&gt;() == 1</code></li>\n</ul>\n</div></details><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">§</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Clone-for-PhantomData%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/marker.rs.html#776\">source</a></span><a href=\"#impl-Clone-for-PhantomData%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"struct.PhantomData.html\" title=\"struct std::marker::PhantomData\">PhantomData</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/marker.rs.html#777\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"struct.PhantomData.html\" title=\"struct std::marker::PhantomData\">PhantomData</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\">Returns a copy of the value. <a href=\"../clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class=\"docblock\">Performs copy-assignment from <code>source</code>. <a href=\"../clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-PhantomData%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#2617\">source</a></span><a href=\"#impl-Debug-for-PhantomData%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"struct.PhantomData.html\" title=\"struct std::marker::PhantomData\">PhantomData</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#2618\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"../fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Default-for-PhantomData%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/marker.rs.html#783\">source</a></span><a href=\"#impl-Default-for-PhantomData%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for <a class=\"struct\" href=\"struct.PhantomData.html\" title=\"struct std::marker::PhantomData\">PhantomData</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/marker.rs.html#784\">source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"struct\" href=\"struct.PhantomData.html\" title=\"struct std::marker::PhantomData\">PhantomData</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\">Returns the “default value” for a type. <a href=\"../default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Hash-for-PhantomData%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/marker.rs.html#743\">source</a></span><a href=\"#impl-Hash-for-PhantomData%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"struct.PhantomData.html\" title=\"struct std::marker::PhantomData\">PhantomData</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/marker.rs.html#745\">source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;H&gt;(&amp;self, _: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class=\"docblock\">Feeds this value into the given <a href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"../hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#238-240\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Feeds a slice of this type into the given <a href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"../hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Ord-for-PhantomData%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/marker.rs.html#766\">source</a></span><a href=\"#impl-Ord-for-PhantomData%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"struct.PhantomData.html\" title=\"struct std::marker::PhantomData\">PhantomData</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/marker.rs.html#767\">source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, _other: &amp;<a class=\"struct\" href=\"struct.PhantomData.html\" title=\"struct std::marker::PhantomData\">PhantomData</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a></h4></section></summary><div class=\"docblock\">This method returns an <a href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"../cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#856-858\">source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Compares and returns the maximum of two values. <a href=\"../cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#877-879\">source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Compares and returns the minimum of two values. <a href=\"../cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#903-906\">source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>,</div></h4></section></summary><div class=\"docblock\">Restrict a value to a certain interval. <a href=\"../cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq-for-PhantomData%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/marker.rs.html#749\">source</a></span><a href=\"#impl-PartialEq-for-PhantomData%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"struct.PhantomData.html\" title=\"struct std::marker::PhantomData\">PhantomData</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/marker.rs.html#750\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, _other: &amp;<a class=\"struct\" href=\"struct.PhantomData.html\" title=\"struct std::marker::PhantomData\">PhantomData</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialOrd-for-PhantomData%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/marker.rs.html#759\">source</a></span><a href=\"#impl-PartialOrd-for-PhantomData%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a> for <a class=\"struct\" href=\"struct.PhantomData.html\" title=\"struct std::marker::PhantomData\">PhantomData</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/marker.rs.html#760\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, _other: &amp;<a class=\"struct\" href=\"struct.PhantomData.html\" title=\"struct std::marker::PhantomData\">PhantomData</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\">This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"../cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180\">source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"../cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198\">source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"../cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215\">source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"../cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233\">source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"../cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details><section id=\"impl-Copy-for-PhantomData%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/marker.rs.html#773\">source</a></span><a href=\"#impl-Copy-for-PhantomData%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a> for <a class=\"struct\" href=\"struct.PhantomData.html\" title=\"struct std::marker::PhantomData\">PhantomData</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-Eq-for-PhantomData%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/marker.rs.html#756\">source</a></span><a href=\"#impl-Eq-for-PhantomData%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"struct.PhantomData.html\" title=\"struct std::marker::PhantomData\">PhantomData</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-Freeze-for-PhantomData%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/marker.rs.html#833-841\">source</a><a href=\"#impl-Freeze-for-PhantomData%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"struct\" href=\"struct.PhantomData.html\" title=\"struct std::marker::PhantomData\">PhantomData</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-StructuralPartialEq-for-PhantomData%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/marker.rs.html#790\">source</a><a href=\"#impl-StructuralPartialEq-for-PhantomData%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.StructuralPartialEq.html\" title=\"trait std::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"struct\" href=\"struct.PhantomData.html\" title=\"struct std::marker::PhantomData\">PhantomData</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></div><h2 id=\"synthetic-implementations\" class=\"section-header\">Auto Trait Implementations<a href=\"#synthetic-implementations\" class=\"anchor\">§</a></h2><div id=\"synthetic-implementations-list\"><section id=\"impl-RefUnwindSafe-for-PhantomData%3CT%3E\" class=\"impl\"><a href=\"#impl-RefUnwindSafe-for-PhantomData%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"struct\" href=\"struct.PhantomData.html\" title=\"struct std::marker::PhantomData\">PhantomData</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> + ?<a class=\"trait\" href=\"trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-Send-for-PhantomData%3CT%3E\" class=\"impl\"><a href=\"#impl-Send-for-PhantomData%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"struct\" href=\"struct.PhantomData.html\" title=\"struct std::marker::PhantomData\">PhantomData</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.Send.html\" title=\"trait std::marker::Send\">Send</a> + ?<a class=\"trait\" href=\"trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-Sync-for-PhantomData%3CT%3E\" class=\"impl\"><a href=\"#impl-Sync-for-PhantomData%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"struct.PhantomData.html\" title=\"struct std::marker::PhantomData\">PhantomData</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> + ?<a class=\"trait\" href=\"trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-Unpin-for-PhantomData%3CT%3E\" class=\"impl\"><a href=\"#impl-Unpin-for-PhantomData%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"struct\" href=\"struct.PhantomData.html\" title=\"struct std::marker::PhantomData\">PhantomData</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> + ?<a class=\"trait\" href=\"trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-UnwindSafe-for-PhantomData%3CT%3E\" class=\"impl\"><a href=\"#impl-UnwindSafe-for-PhantomData%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"struct.PhantomData.html\" title=\"struct std::marker::PhantomData\">PhantomData</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> + ?<a class=\"trait\" href=\"trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">§</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Any-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a><a href=\"#impl-Any-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#141\">source</a><a href=\"#method.type_id\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../any/trait.Any.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\">Gets the <code>TypeId</code> of <code>self</code>. <a href=\"../any/trait.Any.html#tymethod.type_id\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Borrow%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208\">source</a><a href=\"#impl-Borrow%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#210\">source</a><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216\">source</a><a href=\"#impl-BorrowMut%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#217\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765\">source</a><a href=\"#impl-From%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the argument unchanged.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Into%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750\">source</a><a href=\"#impl-Into%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758\">source</a><a href=\"#method.into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; U</h4></section></summary><div class=\"docblock\"><p>Calls <code>U::from(self)</code>.</p>\n<p>That is, this conversion is whatever the implementation of\n<code><a href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for U</code> chooses to do.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-ToOwned-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85\">source</a><a href=\"#impl-ToOwned-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.ToOwned.html\" title=\"trait std::borrow::ToOwned\">ToOwned</a> for T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Owned\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Owned\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../borrow/trait.ToOwned.html#associatedtype.Owned\" class=\"associatedtype\">Owned</a> = T</h4></section></summary><div class=\"docblock\">The resulting type after obtaining ownership.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_owned\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88\">source</a><a href=\"#method.to_owned\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.ToOwned.html#tymethod.to_owned\" class=\"fn\">to_owned</a>(&amp;self) -&gt; T</h4></section></summary><div class=\"docblock\">Creates owned data from borrowed data, usually by cloning. <a href=\"../borrow/trait.ToOwned.html#tymethod.to_owned\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92\">source</a><a href=\"#method.clone_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.ToOwned.html#method.clone_into\" class=\"fn\">clone_into</a>(&amp;self, target: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>)</h4></section></summary><div class=\"docblock\">Uses borrowed data to replace owned data, usually by cloning. <a href=\"../borrow/trait.ToOwned.html#method.clone_into\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryFrom%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807\">source</a><a href=\"#impl-TryFrom%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812\">source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: U) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, &lt;T as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryInto%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792\">source</a><a href=\"#impl-TryInto%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryInto.html\" title=\"trait std::convert::TryInto\">TryInto</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryInto.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797\">source</a><a href=\"#method.try_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryInto.html#tymethod.try_into\" class=\"fn\">try_into</a>(self) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;U, &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details></div></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:13:04.671Z"
}