{
	"title": "Into in std::convert - Rust",
	"url": "https://doc.rust-lang.org/stable/std/convert/trait.Into.html",
	"markdown": "# Into in std::convert - Rust\n\n## Trait [std](../index.html)::[convert](index.html)::[Into](#)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#446) ·\n\n```\npub trait Into<T>: Sized {\n    // Required method\n    fn into(self) -> T;\n}\n```\n\nExpand description\n\nA value-to-value conversion that consumes the input value. The opposite of [`From`](trait.From.html \"trait std::convert::From\").\n\nOne should avoid implementing [`Into`](trait.Into.html \"trait std::convert::Into\") and implement [`From`](trait.From.html \"trait std::convert::From\") instead. Implementing [`From`](trait.From.html \"trait std::convert::From\") automatically provides one with an implementation of [`Into`](trait.Into.html \"trait std::convert::Into\") thanks to the blanket implementation in the standard library.\n\nPrefer using [`Into`](trait.Into.html \"trait std::convert::Into\") over [`From`](trait.From.html \"trait std::convert::From\") when specifying trait bounds on a generic function to ensure that types that only implement [`Into`](trait.Into.html \"trait std::convert::Into\") can be used as well.\n\n**Note: This trait must not fail**. If the conversion can fail, use [`TryInto`](trait.TryInto.html \"trait std::convert::TryInto\").\n\n## [§](#generic-implementations)Generic Implementations\n\n-   [`From`](trait.From.html \"trait std::convert::From\")`<T> for U` implies `Into<U> for T`\n-   [`Into`](trait.Into.html \"trait std::convert::Into\") is reflexive, which means that `Into<T> for T` is implemented\n\n## [§](#implementing-into-for-conversions-to-external-types-in-old-versions-of-rust)Implementing [`Into`](trait.Into.html \"trait std::convert::Into\") for conversions to external types in old versions of Rust\n\nPrior to Rust 1.41, if the destination type was not part of the current crate then you couldn’t implement [`From`](trait.From.html \"trait std::convert::From\") directly. For example, take this code:\n\n```\nstruct Wrapper<T>(Vec<T>);\nimpl<T> From<Wrapper<T>> for Vec<T> {\n    fn from(w: Wrapper<T>) -> Vec<T> {\n        w.0\n    }\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Ballow(non_local_definitions)%5D%0Afn+main()+%7B%0A++++struct+Wrapper%3CT%3E(Vec%3CT%3E);%0A++++impl%3CT%3E+From%3CWrapper%3CT%3E%3E+for+Vec%3CT%3E+%7B%0A++++++++fn+from(w:+Wrapper%3CT%3E)+-%3E+Vec%3CT%3E+%7B%0A++++++++++++w.0%0A++++++++%7D%0A++++%7D%0A%7D&edition=2021)\n\nThis will fail to compile in older versions of the language because Rust’s orphaning rules used to be a little bit more strict. To bypass this, you could implement [`Into`](trait.Into.html \"trait std::convert::Into\") directly:\n\n```\nstruct Wrapper<T>(Vec<T>);\nimpl<T> Into<Vec<T>> for Wrapper<T> {\n    fn into(self) -> Vec<T> {\n        self.0\n    }\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++struct+Wrapper%3CT%3E(Vec%3CT%3E);%0A++++impl%3CT%3E+Into%3CVec%3CT%3E%3E+for+Wrapper%3CT%3E+%7B%0A++++++++fn+into(self)+-%3E+Vec%3CT%3E+%7B%0A++++++++++++self.0%0A++++++++%7D%0A++++%7D%0A%7D&edition=2021)\n\nIt is important to understand that [`Into`](trait.Into.html \"trait std::convert::Into\") does not provide a [`From`](trait.From.html \"trait std::convert::From\") implementation (as [`From`](trait.From.html \"trait std::convert::From\") does with [`Into`](trait.Into.html \"trait std::convert::Into\")). Therefore, you should always try to implement [`From`](trait.From.html \"trait std::convert::From\") and then fall back to [`Into`](trait.Into.html \"trait std::convert::Into\") if [`From`](trait.From.html \"trait std::convert::From\") can’t be implemented.\n\n## [§](#examples)Examples\n\n[`String`](../../std/string/struct.String.html) implements [`Into`](trait.Into.html \"trait std::convert::Into\")`<`[`Vec`](../../std/vec/struct.Vec.html)`<`[`u8`](../primitive.u8.html \"primitive u8\")`>>`:\n\nIn order to express that we want a generic function to take all arguments that can be converted to a specified type `T`, we can use a trait bound of [`Into`](trait.Into.html \"trait std::convert::Into\")`<T>`. For example: The function `is_hello` takes all arguments that can be converted into a [`Vec`](../../std/vec/struct.Vec.html)`<`[`u8`](../primitive.u8.html \"primitive u8\")`>`.\n\n```\nfn is_hello<T: Into<Vec<u8>>>(s: T) {\n   let bytes = b\"hello\".to_vec();\n   assert_eq!(bytes, s.into());\n}\n\nlet s = \"hello\".to_string();\nis_hello(s);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++fn+is_hello%3CT:+Into%3CVec%3Cu8%3E%3E%3E(s:+T)+%7B%0A+++++++let+bytes+=+b%22hello%22.to_vec();%0A+++++++assert_eq!(bytes,+s.into());%0A++++%7D%0A++++%0A++++let+s+=+%22hello%22.to_string();%0A++++is_hello(s);%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#450)\n\nConverts this type into the (usually inferred) input type.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"A value-to-value conversion that consumes the input value. The opposite of `From`.\"><title>Into in std::convert - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc trait\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">Into</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">Into</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#required-methods\">Required Methods</a></h3><ul class=\"block\"><li><a href=\"#tymethod.into\">into</a></li></ul><h3><a href=\"#object-safety\">Object Safety</a></h3><h3><a href=\"#implementors\">Implementors</a></h3></section><h2><a href=\"index.html\">In std::convert</a></h2><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.Infallible.html\">Infallible</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.AsMut.html\">AsMut</a></li><li><a href=\"trait.AsRef.html\">AsRef</a></li><li><a href=\"trait.FloatToInt.html\">FloatToInt</a></li><li><a href=\"trait.From.html\">From</a></li><li><a href=\"trait.Into.html\">Into</a></li><li><a href=\"trait.TryFrom.html\">TryFrom</a></li><li><a href=\"trait.TryInto.html\">TryInto</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.identity.html\">identity</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Trait <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">convert</a>::<wbr><a class=\"trait\" href=\"#\">Into</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#446\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub trait Into&lt;T&gt;: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a> {\n    // Required method\n    fn <a href=\"#tymethod.into\" class=\"fn\">into</a>(self) -&gt; T;\n}</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>A value-to-value conversion that consumes the input value. The\nopposite of <a href=\"trait.From.html\" title=\"trait std::convert::From\"><code>From</code></a>.</p>\n<p>One should avoid implementing <a href=\"trait.Into.html\" title=\"trait std::convert::Into\"><code>Into</code></a> and implement <a href=\"trait.From.html\" title=\"trait std::convert::From\"><code>From</code></a> instead.\nImplementing <a href=\"trait.From.html\" title=\"trait std::convert::From\"><code>From</code></a> automatically provides one with an implementation of <a href=\"trait.Into.html\" title=\"trait std::convert::Into\"><code>Into</code></a>\nthanks to the blanket implementation in the standard library.</p>\n<p>Prefer using <a href=\"trait.Into.html\" title=\"trait std::convert::Into\"><code>Into</code></a> over <a href=\"trait.From.html\" title=\"trait std::convert::From\"><code>From</code></a> when specifying trait bounds on a generic function\nto ensure that types that only implement <a href=\"trait.Into.html\" title=\"trait std::convert::Into\"><code>Into</code></a> can be used as well.</p>\n<p><strong>Note: This trait must not fail</strong>. If the conversion can fail, use <a href=\"trait.TryInto.html\" title=\"trait std::convert::TryInto\"><code>TryInto</code></a>.</p>\n<h2 id=\"generic-implementations\"><a class=\"doc-anchor\" href=\"#generic-implementations\">§</a>Generic Implementations</h2>\n<ul>\n<li><a href=\"trait.From.html\" title=\"trait std::convert::From\"><code>From</code></a><code>&lt;T&gt; for U</code> implies <code>Into&lt;U&gt; for T</code></li>\n<li><a href=\"trait.Into.html\" title=\"trait std::convert::Into\"><code>Into</code></a> is reflexive, which means that <code>Into&lt;T&gt; for T</code> is implemented</li>\n</ul>\n<h2 id=\"implementing-into-for-conversions-to-external-types-in-old-versions-of-rust\"><a class=\"doc-anchor\" href=\"#implementing-into-for-conversions-to-external-types-in-old-versions-of-rust\">§</a>Implementing <a href=\"trait.Into.html\" title=\"trait std::convert::Into\"><code>Into</code></a> for conversions to external types in old versions of Rust</h2>\n<p>Prior to Rust 1.41, if the destination type was not part of the current crate\nthen you couldn’t implement <a href=\"trait.From.html\" title=\"trait std::convert::From\"><code>From</code></a> directly.\nFor example, take this code:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">struct </span>Wrapper&lt;T&gt;(Vec&lt;T&gt;);\n<span class=\"kw\">impl</span>&lt;T&gt; From&lt;Wrapper&lt;T&gt;&gt; <span class=\"kw\">for </span>Vec&lt;T&gt; {\n    <span class=\"kw\">fn </span>from(w: Wrapper&lt;T&gt;) -&gt; Vec&lt;T&gt; {\n        w.<span class=\"number\">0\n    </span>}\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Ballow(non_local_definitions)%5D%0Afn+main()+%7B%0A++++struct+Wrapper%3CT%3E(Vec%3CT%3E);%0A++++impl%3CT%3E+From%3CWrapper%3CT%3E%3E+for+Vec%3CT%3E+%7B%0A++++++++fn+from(w:+Wrapper%3CT%3E)+-%3E+Vec%3CT%3E+%7B%0A++++++++++++w.0%0A++++++++%7D%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<p>This will fail to compile in older versions of the language because Rust’s orphaning rules\nused to be a little bit more strict. To bypass this, you could implement <a href=\"trait.Into.html\" title=\"trait std::convert::Into\"><code>Into</code></a> directly:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">struct </span>Wrapper&lt;T&gt;(Vec&lt;T&gt;);\n<span class=\"kw\">impl</span>&lt;T&gt; Into&lt;Vec&lt;T&gt;&gt; <span class=\"kw\">for </span>Wrapper&lt;T&gt; {\n    <span class=\"kw\">fn </span>into(<span class=\"self\">self</span>) -&gt; Vec&lt;T&gt; {\n        <span class=\"self\">self</span>.<span class=\"number\">0\n    </span>}\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++struct+Wrapper%3CT%3E(Vec%3CT%3E);%0A++++impl%3CT%3E+Into%3CVec%3CT%3E%3E+for+Wrapper%3CT%3E+%7B%0A++++++++fn+into(self)+-%3E+Vec%3CT%3E+%7B%0A++++++++++++self.0%0A++++++++%7D%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<p>It is important to understand that <a href=\"trait.Into.html\" title=\"trait std::convert::Into\"><code>Into</code></a> does not provide a <a href=\"trait.From.html\" title=\"trait std::convert::From\"><code>From</code></a> implementation\n(as <a href=\"trait.From.html\" title=\"trait std::convert::From\"><code>From</code></a> does with <a href=\"trait.Into.html\" title=\"trait std::convert::Into\"><code>Into</code></a>). Therefore, you should always try to implement <a href=\"trait.From.html\" title=\"trait std::convert::From\"><code>From</code></a>\nand then fall back to <a href=\"trait.Into.html\" title=\"trait std::convert::Into\"><code>Into</code></a> if <a href=\"trait.From.html\" title=\"trait std::convert::From\"><code>From</code></a> can’t be implemented.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<p><a href=\"../../std/string/struct.String.html\"><code>String</code></a> implements <a href=\"trait.Into.html\" title=\"trait std::convert::Into\"><code>Into</code></a><code>&lt;</code><a href=\"../../std/vec/struct.Vec.html\"><code>Vec</code></a><code>&lt;</code><a href=\"../primitive.u8.html\" title=\"primitive u8\"><code>u8</code></a><code>&gt;&gt;</code>:</p>\n<p>In order to express that we want a generic function to take all arguments that can be\nconverted to a specified type <code>T</code>, we can use a trait bound of <a href=\"trait.Into.html\" title=\"trait std::convert::Into\"><code>Into</code></a><code>&lt;T&gt;</code>.\nFor example: The function <code>is_hello</code> takes all arguments that can be converted into a\n<a href=\"../../std/vec/struct.Vec.html\"><code>Vec</code></a><code>&lt;</code><a href=\"../primitive.u8.html\" title=\"primitive u8\"><code>u8</code></a><code>&gt;</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>is_hello&lt;T: Into&lt;Vec&lt;u8&gt;&gt;&gt;(s: T) {\n   <span class=\"kw\">let </span>bytes = <span class=\"string\">b\"hello\"</span>.to_vec();\n   <span class=\"macro\">assert_eq!</span>(bytes, s.into());\n}\n\n<span class=\"kw\">let </span>s = <span class=\"string\">\"hello\"</span>.to_string();\nis_hello(s);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++fn+is_hello%3CT:+Into%3CVec%3Cu8%3E%3E%3E(s:+T)+%7B%0A+++++++let+bytes+=+b%22hello%22.to_vec();%0A+++++++assert_eq!(bytes,+s.into());%0A++++%7D%0A++++%0A++++let+s+=+%22hello%22.to_string();%0A++++is_hello(s);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><h2 id=\"required-methods\" class=\"section-header\">Required Methods<a href=\"#required-methods\" class=\"anchor\">§</a></h2><div class=\"methods\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.into\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#450\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.into\" class=\"fn\">into</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Converts this type into the (usually inferred) input type.</p>\n</div></details></div><h2 id=\"object-safety\" class=\"section-header\">Object Safety<a href=\"#object-safety\" class=\"anchor\">§</a></h2><div class=\"object-safety-info\">This trait is <b>not</b> <a href=\"https://doc.rust-lang.org/1.80.0/reference/items/traits.html#object-safety\">object safe</a>.</div><h2 id=\"implementors\" class=\"section-header\">Implementors<a href=\"#implementors\" class=\"anchor\">§</a></h2><div id=\"implementors-list\"><section id=\"impl-Into%3CU%3E-for-T\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750\">source</a></span><a href=\"#impl-Into%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt;,</div></h3></section></div><script src=\"../../trait.impl/core/convert/trait.Into.js\" async=\"\"></script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:11:54.295Z"
}