{
	"title": "RawEntryBuilderMut in std::collections::hash_map - Rust",
	"url": "https://doc.rust-lang.org/stable/std/collections/hash_map/struct.RawEntryBuilderMut.html",
	"markdown": "# RawEntryBuilderMut in std::collections::hash\\_map - Rust\n\n```\npub struct RawEntryBuilderMut<'a, K: 'a, V: 'a, S: 'a> { /* private fields */ }\n```\n\nðŸ”¬This is a nightly-only experimental API. (`hash_raw_entry`Â [#56167](https://github.com/rust-lang/rust/issues/56167))\n\nExpand description\n\nA builder for computing where in a HashMap a key-value pair would be stored.\n\nSee the [`HashMap::raw_entry_mut`](about:blank/struct.HashMap.html#method.raw_entry_mut \"method std::collections::hash_map::HashMap::raw_entry_mut\") docs for usage examples.\n\n[source](about:blank/src/std/collections/hash/map.rs.html#1721-1756)[Â§](#impl-RawEntryBuilderMut%3C'a,+K,+V,+S%3E)\n\n[source](about:blank/src/std/collections/hash/map.rs.html#1728-1734)\n\nðŸ”¬This is a nightly-only experimental API. (`hash_raw_entry`Â [#56167](https://github.com/rust-lang/rust/issues/56167))\n\nCreates a `RawEntryMut` from the given key.\n\n[source](about:blank/src/std/collections/hash/map.rs.html#1739-1745)\n\nðŸ”¬This is a nightly-only experimental API. (`hash_raw_entry`Â [#56167](https://github.com/rust-lang/rust/issues/56167))\n\nCreates a `RawEntryMut` from the given key and its hash.\n\n[source](about:blank/src/std/collections/hash/map.rs.html#1750-1755)\n\nðŸ”¬This is a nightly-only experimental API. (`hash_raw_entry`Â [#56167](https://github.com/rust-lang/rust/issues/56167))\n\nCreates a `RawEntryMut` from the given hash.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140)[Â§](#impl-Any-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208)[Â§](#impl-Borrow%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216)[Â§](#impl-BorrowMut%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765)[Â§](#impl-From%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768)[Â§](#method.from)\n\nReturns the argument unchanged.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750)[Â§](#impl-Into%3CU%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758)[Â§](#method.into)\n\nCalls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of `[From](../../convert/trait.From.html \"trait std::convert::From\")<T> for U` chooses to do.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807)[Â§](#impl-TryFrom%3CU%3E-for-T)\n\n[Â§](#associatedtype.Error-1)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812)[Â§](#method.try_from)\n\nPerforms the conversion.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792)[Â§](#impl-TryInto%3CU%3E-for-T)\n\n[Â§](#associatedtype.Error)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797)[Â§](#method.try_into)\n\nPerforms the conversion.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"A builder for computing where in a HashMap a key-value pair would be stored.\"><title>RawEntryBuilderMut in std::collections::hash_map - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../../\" data-static-root-path=\"../../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc struct\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">RawEntryBuilderMut</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">RawEntryBuilderMut</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#implementations\">Methods</a></h3><ul class=\"block method\"><li><a href=\"#method.from_hash\">from_hash</a></li><li><a href=\"#method.from_key\">from_key</a></li><li><a href=\"#method.from_key_hashed_nocheck\">from_key_hashed_nocheck</a></li></ul><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-Debug-for-RawEntryBuilderMut%3C'_,+K,+V,+S%3E\">Debug</a></li></ul><h3><a href=\"#synthetic-implementations\">Auto Trait Implementations</a></h3><ul class=\"block synthetic-implementation\"><li><a href=\"#impl-UnwindSafe-for-RawEntryBuilderMut%3C'a,+K,+V,+S%3E\">!UnwindSafe</a></li><li><a href=\"#impl-Freeze-for-RawEntryBuilderMut%3C'a,+K,+V,+S%3E\">Freeze</a></li><li><a href=\"#impl-RefUnwindSafe-for-RawEntryBuilderMut%3C'a,+K,+V,+S%3E\">RefUnwindSafe</a></li><li><a href=\"#impl-Send-for-RawEntryBuilderMut%3C'a,+K,+V,+S%3E\">Send</a></li><li><a href=\"#impl-Sync-for-RawEntryBuilderMut%3C'a,+K,+V,+S%3E\">Sync</a></li><li><a href=\"#impl-Unpin-for-RawEntryBuilderMut%3C'a,+K,+V,+S%3E\">Unpin</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-Any-for-T\">Any</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-T\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-T\">BorrowMut&lt;T&gt;</a></li><li><a href=\"#impl-From%3CT%3E-for-T\">From&lt;T&gt;</a></li><li><a href=\"#impl-Into%3CU%3E-for-T\">Into&lt;U&gt;</a></li><li><a href=\"#impl-TryFrom%3CU%3E-for-T\">TryFrom&lt;U&gt;</a></li><li><a href=\"#impl-TryInto%3CU%3E-for-T\">TryInto&lt;U&gt;</a></li></ul></section><h2><a href=\"index.html\">In std::collections::hash_map</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.DefaultHasher.html\">DefaultHasher</a></li><li><a href=\"struct.Drain.html\">Drain</a></li><li><a href=\"struct.ExtractIf.html\">ExtractIf</a></li><li><a href=\"struct.HashMap.html\">HashMap</a></li><li><a href=\"struct.IntoIter.html\">IntoIter</a></li><li><a href=\"struct.IntoKeys.html\">IntoKeys</a></li><li><a href=\"struct.IntoValues.html\">IntoValues</a></li><li><a href=\"struct.Iter.html\">Iter</a></li><li><a href=\"struct.IterMut.html\">IterMut</a></li><li><a href=\"struct.Keys.html\">Keys</a></li><li><a href=\"struct.OccupiedEntry.html\">OccupiedEntry</a></li><li><a href=\"struct.OccupiedError.html\">OccupiedError</a></li><li><a href=\"struct.RandomState.html\">RandomState</a></li><li><a href=\"struct.RawEntryBuilder.html\">RawEntryBuilder</a></li><li><a href=\"struct.RawEntryBuilderMut.html\">RawEntryBuilderMut</a></li><li><a href=\"struct.RawOccupiedEntryMut.html\">RawOccupiedEntryMut</a></li><li><a href=\"struct.RawVacantEntryMut.html\">RawVacantEntryMut</a></li><li><a href=\"struct.VacantEntry.html\">VacantEntry</a></li><li><a href=\"struct.Values.html\">Values</a></li><li><a href=\"struct.ValuesMut.html\">ValuesMut</a></li></ul><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.Entry.html\">Entry</a></li><li><a href=\"enum.RawEntryMut.html\">RawEntryMut</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type â€˜Sâ€™ or â€˜/â€™ to search, â€˜?â€™ for more optionsâ€¦\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Struct <a href=\"../../index.html\">std</a>::<wbr><a href=\"../index.html\">collections</a>::<wbr><a href=\"index.html\">hash_map</a>::<wbr><a class=\"struct\" href=\"#\">RawEntryBuilderMut</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><a class=\"src\" href=\"../../../src/std/collections/hash/map.rs.html#1679-1681\">source</a> Â· <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>âˆ’</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub struct RawEntryBuilderMut&lt;'a, K: 'a, V: 'a, S: 'a&gt; { <span class=\"comment\">/* private fields */</span> }</code></pre><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>hash_raw_entry</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/56167\">#56167</a>)</span></div></span><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>A builder for computing where in a HashMap a key-value pair would be stored.</p>\n<p>See the <a href=\"struct.HashMap.html#method.raw_entry_mut\" title=\"method std::collections::hash_map::HashMap::raw_entry_mut\"><code>HashMap::raw_entry_mut</code></a> docs for usage examples.</p>\n</div></details><h2 id=\"implementations\" class=\"section-header\">Implementations<a href=\"#implementations\" class=\"anchor\">Â§</a></h2><div id=\"implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-RawEntryBuilderMut%3C'a,+K,+V,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"../../../src/std/collections/hash/map.rs.html#1721-1756\">source</a><a href=\"#impl-RawEntryBuilderMut%3C'a,+K,+V,+S%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, K, V, S&gt; <a class=\"struct\" href=\"struct.RawEntryBuilderMut.html\" title=\"struct std::collections::hash_map::RawEntryBuilderMut\">RawEntryBuilderMut</a>&lt;'a, K, V, S&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"../../hash/trait.BuildHasher.html\" title=\"trait std::hash::BuildHasher\">BuildHasher</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_key\" class=\"method\"><a class=\"src rightside\" href=\"../../../src/std/collections/hash/map.rs.html#1728-1734\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.from_key\" class=\"fn\">from_key</a>&lt;Q&gt;(self, k: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"enum\" href=\"enum.RawEntryMut.html\" title=\"enum std::collections::hash_map::RawEntryMut\">RawEntryMut</a>&lt;'a, K, V, S&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"../../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;Q&gt;,\n    Q: <a class=\"trait\" href=\"../../hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"../../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> + ?<a class=\"trait\" href=\"../../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>hash_raw_entry</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/56167\">#56167</a>)</span></div></span></summary><div class=\"docblock\"><p>Creates a <code>RawEntryMut</code> from the given key.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_key_hashed_nocheck\" class=\"method\"><a class=\"src rightside\" href=\"../../../src/std/collections/hash/map.rs.html#1739-1745\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.from_key_hashed_nocheck\" class=\"fn\">from_key_hashed_nocheck</a>&lt;Q&gt;(\n    self,\n    hash: <a class=\"primitive\" href=\"../../primitive.u64.html\">u64</a>,\n    k: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Q</a>,\n) -&gt; <a class=\"enum\" href=\"enum.RawEntryMut.html\" title=\"enum std::collections::hash_map::RawEntryMut\">RawEntryMut</a>&lt;'a, K, V, S&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"../../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;Q&gt;,\n    Q: <a class=\"trait\" href=\"../../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> + ?<a class=\"trait\" href=\"../../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>hash_raw_entry</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/56167\">#56167</a>)</span></div></span></summary><div class=\"docblock\"><p>Creates a <code>RawEntryMut</code> from the given key and its hash.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_hash\" class=\"method\"><a class=\"src rightside\" href=\"../../../src/std/collections/hash/map.rs.html#1750-1755\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.from_hash\" class=\"fn\">from_hash</a>&lt;F&gt;(self, hash: <a class=\"primitive\" href=\"../../primitive.u64.html\">u64</a>, is_match: F) -&gt; <a class=\"enum\" href=\"enum.RawEntryMut.html\" title=\"enum std::collections::hash_map::RawEntryMut\">RawEntryMut</a>&lt;'a, K, V, S&gt;<div class=\"where\">where\n    for&lt;'b&gt; F: <a class=\"trait\" href=\"../../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;'b K</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>hash_raw_entry</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/56167\">#56167</a>)</span></div></span></summary><div class=\"docblock\"><p>Creates a <code>RawEntryMut</code> from the given hash.</p>\n</div></details></div></details></div><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">Â§</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-RawEntryBuilderMut%3C'_,+K,+V,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"../../../src/std/collections/hash/map.rs.html#2033-2037\">source</a><a href=\"#impl-Debug-for-RawEntryBuilderMut%3C'_,+K,+V,+S%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"../../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"struct.RawEntryBuilderMut.html\" title=\"struct std::collections::hash_map::RawEntryBuilderMut\">RawEntryBuilderMut</a>&lt;'_, K, V, S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/collections/hash/map.rs.html#2034-2036\">source</a><a href=\"#method.fmt\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../../fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"../../fmt/type.Result.html\" title=\"type std::fmt::Result\">Result</a></h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../../fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details></div><h2 id=\"synthetic-implementations\" class=\"section-header\">Auto Trait Implementations<a href=\"#synthetic-implementations\" class=\"anchor\">Â§</a></h2><div id=\"synthetic-implementations-list\"><section id=\"impl-Freeze-for-RawEntryBuilderMut%3C'a,+K,+V,+S%3E\" class=\"impl\"><a href=\"#impl-Freeze-for-RawEntryBuilderMut%3C'a,+K,+V,+S%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, K, V, S&gt; <a class=\"trait\" href=\"../../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"struct\" href=\"struct.RawEntryBuilderMut.html\" title=\"struct std::collections::hash_map::RawEntryBuilderMut\">RawEntryBuilderMut</a>&lt;'a, K, V, S&gt;</h3></section><section id=\"impl-RefUnwindSafe-for-RawEntryBuilderMut%3C'a,+K,+V,+S%3E\" class=\"impl\"><a href=\"#impl-RefUnwindSafe-for-RawEntryBuilderMut%3C'a,+K,+V,+S%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, K, V, S&gt; <a class=\"trait\" href=\"../../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"struct\" href=\"struct.RawEntryBuilderMut.html\" title=\"struct std::collections::hash_map::RawEntryBuilderMut\">RawEntryBuilderMut</a>&lt;'a, K, V, S&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"../../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a>,\n    K: <a class=\"trait\" href=\"../../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a>,\n    V: <a class=\"trait\" href=\"../../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a>,</div></h3></section><section id=\"impl-Send-for-RawEntryBuilderMut%3C'a,+K,+V,+S%3E\" class=\"impl\"><a href=\"#impl-Send-for-RawEntryBuilderMut%3C'a,+K,+V,+S%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, K, V, S&gt; <a class=\"trait\" href=\"../../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"struct\" href=\"struct.RawEntryBuilderMut.html\" title=\"struct std::collections::hash_map::RawEntryBuilderMut\">RawEntryBuilderMut</a>&lt;'a, K, V, S&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"../../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a>,\n    K: <a class=\"trait\" href=\"../../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a>,\n    V: <a class=\"trait\" href=\"../../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a>,</div></h3></section><section id=\"impl-Sync-for-RawEntryBuilderMut%3C'a,+K,+V,+S%3E\" class=\"impl\"><a href=\"#impl-Sync-for-RawEntryBuilderMut%3C'a,+K,+V,+S%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, K, V, S&gt; <a class=\"trait\" href=\"../../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"struct.RawEntryBuilderMut.html\" title=\"struct std::collections::hash_map::RawEntryBuilderMut\">RawEntryBuilderMut</a>&lt;'a, K, V, S&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"../../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a>,\n    K: <a class=\"trait\" href=\"../../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a>,\n    V: <a class=\"trait\" href=\"../../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a>,</div></h3></section><section id=\"impl-Unpin-for-RawEntryBuilderMut%3C'a,+K,+V,+S%3E\" class=\"impl\"><a href=\"#impl-Unpin-for-RawEntryBuilderMut%3C'a,+K,+V,+S%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, K, V, S&gt; <a class=\"trait\" href=\"../../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"struct\" href=\"struct.RawEntryBuilderMut.html\" title=\"struct std::collections::hash_map::RawEntryBuilderMut\">RawEntryBuilderMut</a>&lt;'a, K, V, S&gt;</h3></section><section id=\"impl-UnwindSafe-for-RawEntryBuilderMut%3C'a,+K,+V,+S%3E\" class=\"impl\"><a href=\"#impl-UnwindSafe-for-RawEntryBuilderMut%3C'a,+K,+V,+S%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, K, V, S&gt; !<a class=\"trait\" href=\"../../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"struct.RawEntryBuilderMut.html\" title=\"struct std::collections::hash_map::RawEntryBuilderMut\">RawEntryBuilderMut</a>&lt;'a, K, V, S&gt;</h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">Â§</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Any-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a><a href=\"#impl-Any-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"../../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#141\">source</a><a href=\"#method.type_id\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../../any/trait.Any.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../../any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\">Gets the <code>TypeId</code> of <code>self</code>. <a href=\"../../any/trait.Any.html#tymethod.type_id\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Borrow%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208\">source</a><a href=\"#impl-Borrow%3CT%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#210\">source</a><a href=\"#method.borrow\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../../borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"../../borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216\">source</a><a href=\"#impl-BorrowMut%3CT%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#217\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../../borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"../../borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765\">source</a><a href=\"#impl-From%3CT%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768\">source</a><a href=\"#method.from\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the argument unchanged.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Into%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750\">source</a><a href=\"#impl-Into%3CU%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758\">source</a><a href=\"#method.into\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; U</h4></section></summary><div class=\"docblock\"><p>Calls <code>U::from(self)</code>.</p>\n<p>That is, this conversion is whatever the implementation of\n<code><a href=\"../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for U</code> chooses to do.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryFrom%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807\">source</a><a href=\"#impl-TryFrom%3CU%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"../../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"../../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812\">source</a><a href=\"#method.try_from\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: U) -&gt; <a class=\"enum\" href=\"../../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, &lt;T as <a class=\"trait\" href=\"../../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt;&gt;::<a class=\"associatedtype\" href=\"../../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryInto%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792\">source</a><a href=\"#impl-TryInto%3CU%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../../convert/trait.TryInto.html\" title=\"trait std::convert::TryInto\">TryInto</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"../../convert/trait.TryInto.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = &lt;U as <a class=\"trait\" href=\"../../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797\">source</a><a href=\"#method.try_into\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.TryInto.html#tymethod.try_into\" class=\"fn\">try_into</a>(self) -&gt; <a class=\"enum\" href=\"../../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;U, &lt;U as <a class=\"trait\" href=\"../../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details></div></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:26:07.114Z"
}