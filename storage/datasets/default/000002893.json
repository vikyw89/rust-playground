{
	"title": "SocketAncillary in std::os::unix::net - Rust",
	"url": "https://doc.rust-lang.org/stable/std/os/unix/net/struct.SocketAncillary.html",
	"markdown": "# SocketAncillary in std::os::unix::net - Rust\n\n```\npub struct SocketAncillary<'a> { /* private fields */ }\n```\n\nðŸ”¬This is a nightly-only experimental API. (`unix_socket_ancillary_data`Â [#76915](https://github.com/rust-lang/rust/issues/76915))\n\nAvailable on **(Android or Linux) and Unix** only.\n\nExpand description\n\nA Unix socket Ancillary data struct.\n\n## [Â§](#example)Example\n\n```\n#![feature(unix_socket_ancillary_data)]\nuse std::os::unix::net::{UnixStream, SocketAncillary, AncillaryData};\nuse std::io::IoSliceMut;\n\nfn main() -> std::io::Result<()> {\n    let sock = UnixStream::connect(\"/tmp/sock\")?;\n\n    let mut fds = [0; 8];\n    let mut ancillary_buffer = [0; 128];\n    let mut ancillary = SocketAncillary::new(&mut ancillary_buffer[..]);\n\n    let mut buf = [1; 8];\n    let mut bufs = &mut [IoSliceMut::new(&mut buf[..])][..];\n    sock.recv_vectored_with_ancillary(bufs, &mut ancillary)?;\n\n    for ancillary_result in ancillary.messages() {\n        if let AncillaryData::ScmRights(scm_rights) = ancillary_result.unwrap() {\n            for fd in scm_rights {\n                println!(\"receive file descriptor: {fd}\");\n            }\n        }\n    }\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(unix_socket_ancillary_data)%5D%0Ause+std::os::unix::net::%7BUnixStream,+SocketAncillary,+AncillaryData%7D;%0Ause+std::io::IoSliceMut;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+sock+=+UnixStream::connect(%22/tmp/sock%22)?;%0A%0A++++let+mut+fds+=+%5B0;+8%5D;%0A++++let+mut+ancillary_buffer+=+%5B0;+128%5D;%0A++++let+mut+ancillary+=+SocketAncillary::new(%26mut+ancillary_buffer%5B..%5D);%0A%0A++++let+mut+buf+=+%5B1;+8%5D;%0A++++let+mut+bufs+=+%26mut+%5BIoSliceMut::new(%26mut+buf%5B..%5D)%5D%5B..%5D;%0A++++sock.recv_vectored_with_ancillary(bufs,+%26mut+ancillary)?;%0A%0A++++for+ancillary_result+in+ancillary.messages()+%7B%0A++++++++if+let+AncillaryData::ScmRights(scm_rights)+=+ancillary_result.unwrap()+%7B%0A++++++++++++for+fd+in+scm_rights+%7B%0A++++++++++++++++println!(%22receive+file+descriptor:+%7Bfd%7D%22);%0A++++++++++++%7D%0A++++++++%7D%0A++++%7D%0A++++Ok(())%0A%7D&version=nightly&edition=2021)\n\n[source](about:blank/src/std/os/unix/net/ancillary.rs.html#607-798)[Â§](#impl-SocketAncillary%3C'a%3E)\n\n[source](about:blank/src/std/os/unix/net/ancillary.rs.html#620-622)\n\nðŸ”¬This is a nightly-only experimental API. (`unix_socket_ancillary_data`Â [#76915](https://github.com/rust-lang/rust/issues/76915))\n\nCreate an ancillary data with the given buffer.\n\n##### [Â§](#example-1)Example\n\n```\n#![feature(unix_socket_ancillary_data)]\nuse std::os::unix::net::SocketAncillary;\nlet mut ancillary_buffer = [0; 128];\nlet mut ancillary = SocketAncillary::new(&mut ancillary_buffer[..]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Ballow(unused_mut)%5D%0A%23!%5Bfeature(unix_socket_ancillary_data)%5D%0Afn+main()+%7B%0A++++use+std::os::unix::net::SocketAncillary;%0A++++let+mut+ancillary_buffer+=+%5B0;+128%5D;%0A++++let+mut+ancillary+=+SocketAncillary::new(%26mut+ancillary_buffer%5B..%5D);%0A%7D&version=nightly&edition=2021)\n\n[source](about:blank/src/std/os/unix/net/ancillary.rs.html#627-629)\n\nðŸ”¬This is a nightly-only experimental API. (`unix_socket_ancillary_data`Â [#76915](https://github.com/rust-lang/rust/issues/76915))\n\nReturns the capacity of the buffer.\n\n[source](about:blank/src/std/os/unix/net/ancillary.rs.html#634-636)\n\nðŸ”¬This is a nightly-only experimental API. (`unix_socket_ancillary_data`Â [#76915](https://github.com/rust-lang/rust/issues/76915))\n\nReturns `true` if the ancillary data is empty.\n\n[source](about:blank/src/std/os/unix/net/ancillary.rs.html#641-643)\n\nðŸ”¬This is a nightly-only experimental API. (`unix_socket_ancillary_data`Â [#76915](https://github.com/rust-lang/rust/issues/76915))\n\nReturns the number of used bytes.\n\n[source](about:blank/src/std/os/unix/net/ancillary.rs.html#647-649)\n\nðŸ”¬This is a nightly-only experimental API. (`unix_socket_ancillary_data`Â [#76915](https://github.com/rust-lang/rust/issues/76915))\n\nReturns the iterator of the control messages.\n\n[source](about:blank/src/std/os/unix/net/ancillary.rs.html#676-678)\n\nðŸ”¬This is a nightly-only experimental API. (`unix_socket_ancillary_data`Â [#76915](https://github.com/rust-lang/rust/issues/76915))\n\nIs `true` if during a recv operation the ancillary was truncated.\n\n##### [Â§](#example-2)Example\n\n```\n#![feature(unix_socket_ancillary_data)]\nuse std::os::unix::net::{UnixStream, SocketAncillary};\nuse std::io::IoSliceMut;\n\nfn main() -> std::io::Result<()> {\n    let sock = UnixStream::connect(\"/tmp/sock\")?;\n\n    let mut ancillary_buffer = [0; 128];\n    let mut ancillary = SocketAncillary::new(&mut ancillary_buffer[..]);\n\n    let mut buf = [1; 8];\n    let mut bufs = &mut [IoSliceMut::new(&mut buf[..])][..];\n    sock.recv_vectored_with_ancillary(bufs, &mut ancillary)?;\n\n    println!(\"Is truncated: {}\", ancillary.truncated());\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(unix_socket_ancillary_data)%5D%0Ause+std::os::unix::net::%7BUnixStream,+SocketAncillary%7D;%0Ause+std::io::IoSliceMut;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+sock+=+UnixStream::connect(%22/tmp/sock%22)?;%0A%0A++++let+mut+ancillary_buffer+=+%5B0;+128%5D;%0A++++let+mut+ancillary+=+SocketAncillary::new(%26mut+ancillary_buffer%5B..%5D);%0A%0A++++let+mut+buf+=+%5B1;+8%5D;%0A++++let+mut+bufs+=+%26mut+%5BIoSliceMut::new(%26mut+buf%5B..%5D)%5D%5B..%5D;%0A++++sock.recv_vectored_with_ancillary(bufs,+%26mut+ancillary)?;%0A%0A++++println!(%22Is+truncated:+%7B%7D%22,+ancillary.truncated());%0A++++Ok(())%0A%7D&version=nightly&edition=2021)\n\n[source](about:blank/src/std/os/unix/net/ancillary.rs.html#709-718)\n\nðŸ”¬This is a nightly-only experimental API. (`unix_socket_ancillary_data`Â [#76915](https://github.com/rust-lang/rust/issues/76915))\n\nAdd file descriptors to the ancillary data.\n\nThe function returns `true` if there was enough space in the buffer. If there was not enough space then no file descriptors was appended. Technically, that means this operation adds a control message with the level `SOL_SOCKET` and type `SCM_RIGHTS`.\n\n##### [Â§](#example-3)Example\n\n```\n#![feature(unix_socket_ancillary_data)]\nuse std::os::unix::net::{UnixStream, SocketAncillary};\nuse std::os::unix::io::AsRawFd;\nuse std::io::IoSlice;\n\nfn main() -> std::io::Result<()> {\n    let sock = UnixStream::connect(\"/tmp/sock\")?;\n\n    let mut ancillary_buffer = [0; 128];\n    let mut ancillary = SocketAncillary::new(&mut ancillary_buffer[..]);\n    ancillary.add_fds(&[sock.as_raw_fd()][..]);\n\n    let buf = [1; 8];\n    let mut bufs = &mut [IoSlice::new(&buf[..])][..];\n    sock.send_vectored_with_ancillary(bufs, &mut ancillary)?;\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(unix_socket_ancillary_data)%5D%0Ause+std::os::unix::net::%7BUnixStream,+SocketAncillary%7D;%0Ause+std::os::unix::io::AsRawFd;%0Ause+std::io::IoSlice;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+sock+=+UnixStream::connect(%22/tmp/sock%22)?;%0A%0A++++let+mut+ancillary_buffer+=+%5B0;+128%5D;%0A++++let+mut+ancillary+=+SocketAncillary::new(%26mut+ancillary_buffer%5B..%5D);%0A++++ancillary.add_fds(%26%5Bsock.as_raw_fd()%5D%5B..%5D);%0A%0A++++let+buf+=+%5B1;+8%5D;%0A++++let+mut+bufs+=+%26mut+%5BIoSlice::new(%26buf%5B..%5D)%5D%5B..%5D;%0A++++sock.send_vectored_with_ancillary(bufs,+%26mut+ancillary)?;%0A++++Ok(())%0A%7D&version=nightly&edition=2021)\n\n[source](about:blank/src/std/os/unix/net/ancillary.rs.html#735-749)\n\nðŸ”¬This is a nightly-only experimental API. (`unix_socket_ancillary_data`Â [#76915](https://github.com/rust-lang/rust/issues/76915))\n\nAdd credentials to the ancillary data.\n\nThe function returns `true` if there is enough space in the buffer. If there is not enough space then no credentials will be appended. Technically, that means this operation adds a control message with the level `SOL_SOCKET` and type `SCM_CREDENTIALS`, `SCM_CREDS`, or `SCM_CREDS2`.\n\n[source](about:blank/src/std/os/unix/net/ancillary.rs.html#794-797)\n\nðŸ”¬This is a nightly-only experimental API. (`unix_socket_ancillary_data`Â [#76915](https://github.com/rust-lang/rust/issues/76915))\n\nClears the ancillary data, removing all values.\n\n##### [Â§](#example-4)Example\n\n```\n#![feature(unix_socket_ancillary_data)]\nuse std::os::unix::net::{UnixStream, SocketAncillary, AncillaryData};\nuse std::io::IoSliceMut;\n\nfn main() -> std::io::Result<()> {\n    let sock = UnixStream::connect(\"/tmp/sock\")?;\n\n    let mut fds1 = [0; 8];\n    let mut fds2 = [0; 8];\n    let mut ancillary_buffer = [0; 128];\n    let mut ancillary = SocketAncillary::new(&mut ancillary_buffer[..]);\n\n    let mut buf = [1; 8];\n    let mut bufs = &mut [IoSliceMut::new(&mut buf[..])][..];\n\n    sock.recv_vectored_with_ancillary(bufs, &mut ancillary)?;\n    for ancillary_result in ancillary.messages() {\n        if let AncillaryData::ScmRights(scm_rights) = ancillary_result.unwrap() {\n            for fd in scm_rights {\n                println!(\"receive file descriptor: {fd}\");\n            }\n        }\n    }\n\n    ancillary.clear();\n\n    sock.recv_vectored_with_ancillary(bufs, &mut ancillary)?;\n    for ancillary_result in ancillary.messages() {\n        if let AncillaryData::ScmRights(scm_rights) = ancillary_result.unwrap() {\n            for fd in scm_rights {\n                println!(\"receive file descriptor: {fd}\");\n            }\n        }\n    }\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(unix_socket_ancillary_data)%5D%0Ause+std::os::unix::net::%7BUnixStream,+SocketAncillary,+AncillaryData%7D;%0Ause+std::io::IoSliceMut;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+sock+=+UnixStream::connect(%22/tmp/sock%22)?;%0A%0A++++let+mut+fds1+=+%5B0;+8%5D;%0A++++let+mut+fds2+=+%5B0;+8%5D;%0A++++let+mut+ancillary_buffer+=+%5B0;+128%5D;%0A++++let+mut+ancillary+=+SocketAncillary::new(%26mut+ancillary_buffer%5B..%5D);%0A%0A++++let+mut+buf+=+%5B1;+8%5D;%0A++++let+mut+bufs+=+%26mut+%5BIoSliceMut::new(%26mut+buf%5B..%5D)%5D%5B..%5D;%0A%0A++++sock.recv_vectored_with_ancillary(bufs,+%26mut+ancillary)?;%0A++++for+ancillary_result+in+ancillary.messages()+%7B%0A++++++++if+let+AncillaryData::ScmRights(scm_rights)+=+ancillary_result.unwrap()+%7B%0A++++++++++++for+fd+in+scm_rights+%7B%0A++++++++++++++++println!(%22receive+file+descriptor:+%7Bfd%7D%22);%0A++++++++++++%7D%0A++++++++%7D%0A++++%7D%0A%0A++++ancillary.clear();%0A%0A++++sock.recv_vectored_with_ancillary(bufs,+%26mut+ancillary)?;%0A++++for+ancillary_result+in+ancillary.messages()+%7B%0A++++++++if+let+AncillaryData::ScmRights(scm_rights)+=+ancillary_result.unwrap()+%7B%0A++++++++++++for+fd+in+scm_rights+%7B%0A++++++++++++++++println!(%22receive+file+descriptor:+%7Bfd%7D%22);%0A++++++++++++%7D%0A++++++++%7D%0A++++%7D%0A++++Ok(())%0A%7D&version=nightly&edition=2021)\n\n[Â§](#impl-Freeze-for-SocketAncillary%3C'a%3E)\n\n[Â§](#impl-RefUnwindSafe-for-SocketAncillary%3C'a%3E)\n\n[Â§](#impl-Send-for-SocketAncillary%3C'a%3E)\n\n[Â§](#impl-Sync-for-SocketAncillary%3C'a%3E)\n\n[Â§](#impl-Unpin-for-SocketAncillary%3C'a%3E)\n\n[Â§](#impl-UnwindSafe-for-SocketAncillary%3C'a%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140)[Â§](#impl-Any-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208)[Â§](#impl-Borrow%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216)[Â§](#impl-BorrowMut%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765)[Â§](#impl-From%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768)[Â§](#method.from)\n\nReturns the argument unchanged.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750)[Â§](#impl-Into%3CU%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758)[Â§](#method.into)\n\nCalls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of `[From](../../../convert/trait.From.html \"trait std::convert::From\")<T> for U` chooses to do.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807)[Â§](#impl-TryFrom%3CU%3E-for-T)\n\n[Â§](#associatedtype.Error-1)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812)[Â§](#method.try_from)\n\nPerforms the conversion.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792)[Â§](#impl-TryInto%3CU%3E-for-T)\n\n[Â§](#associatedtype.Error)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797)[Â§](#method.try_into)\n\nPerforms the conversion.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"A Unix socket Ancillary data struct.\"><title>SocketAncillary in std::os::unix::net - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../../../\" data-static-root-path=\"../../../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc struct\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">SocketAncillary</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">SocketAncillary</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#implementations\">Methods</a></h3><ul class=\"block method\"><li><a href=\"#method.add_creds\">add_creds</a></li><li><a href=\"#method.add_fds\">add_fds</a></li><li><a href=\"#method.capacity\">capacity</a></li><li><a href=\"#method.clear\">clear</a></li><li><a href=\"#method.is_empty\">is_empty</a></li><li><a href=\"#method.len\">len</a></li><li><a href=\"#method.messages\">messages</a></li><li><a href=\"#method.new\">new</a></li><li><a href=\"#method.truncated\">truncated</a></li></ul><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-Debug-for-SocketAncillary%3C'a%3E\">Debug</a></li></ul><h3><a href=\"#synthetic-implementations\">Auto Trait Implementations</a></h3><ul class=\"block synthetic-implementation\"><li><a href=\"#impl-UnwindSafe-for-SocketAncillary%3C'a%3E\">!UnwindSafe</a></li><li><a href=\"#impl-Freeze-for-SocketAncillary%3C'a%3E\">Freeze</a></li><li><a href=\"#impl-RefUnwindSafe-for-SocketAncillary%3C'a%3E\">RefUnwindSafe</a></li><li><a href=\"#impl-Send-for-SocketAncillary%3C'a%3E\">Send</a></li><li><a href=\"#impl-Sync-for-SocketAncillary%3C'a%3E\">Sync</a></li><li><a href=\"#impl-Unpin-for-SocketAncillary%3C'a%3E\">Unpin</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-Any-for-T\">Any</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-T\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-T\">BorrowMut&lt;T&gt;</a></li><li><a href=\"#impl-From%3CT%3E-for-T\">From&lt;T&gt;</a></li><li><a href=\"#impl-Into%3CU%3E-for-T\">Into&lt;U&gt;</a></li><li><a href=\"#impl-TryFrom%3CU%3E-for-T\">TryFrom&lt;U&gt;</a></li><li><a href=\"#impl-TryInto%3CU%3E-for-T\">TryInto&lt;U&gt;</a></li></ul></section><h2><a href=\"index.html\">In std::os::unix::net</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.Incoming.html\">Incoming</a></li><li><a href=\"struct.Messages.html\">Messages</a></li><li><a href=\"struct.ScmCredentials.html\">ScmCredentials</a></li><li><a href=\"struct.ScmRights.html\">ScmRights</a></li><li><a href=\"struct.SocketAddr.html\">SocketAddr</a></li><li><a href=\"struct.SocketAncillary.html\">SocketAncillary</a></li><li><a href=\"struct.SocketCred.html\">SocketCred</a></li><li><a href=\"struct.UCred.html\">UCred</a></li><li><a href=\"struct.UnixDatagram.html\">UnixDatagram</a></li><li><a href=\"struct.UnixListener.html\">UnixListener</a></li><li><a href=\"struct.UnixStream.html\">UnixStream</a></li></ul><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.AncillaryData.html\">AncillaryData</a></li><li><a href=\"enum.AncillaryError.html\">AncillaryError</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type â€˜Sâ€™ or â€˜/â€™ to search, â€˜?â€™ for more optionsâ€¦\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Struct <a href=\"../../../index.html\">std</a>::<wbr><a href=\"../../index.html\">os</a>::<wbr><a href=\"../index.html\">unix</a>::<wbr><a href=\"index.html\">net</a>::<wbr><a class=\"struct\" href=\"#\">SocketAncillary</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><a class=\"src\" href=\"../../../../src/std/os/unix/net/ancillary.rs.html#601-605\">source</a> Â· <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>âˆ’</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub struct SocketAncillary&lt;'a&gt; { <span class=\"comment\">/* private fields */</span> }</code></pre><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>unix_socket_ancillary_data</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/76915\">#76915</a>)</span></div><div class=\"stab portability\">Available on <strong>(Android or Linux) and Unix</strong> only.</div></span><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>A Unix socket Ancillary data struct.</p>\n<h2 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">Â§</a>Example</h2>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(unix_socket_ancillary_data)]\n</span><span class=\"kw\">use </span>std::os::unix::net::{UnixStream, SocketAncillary, AncillaryData};\n<span class=\"kw\">use </span>std::io::IoSliceMut;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>sock = UnixStream::connect(<span class=\"string\">\"/tmp/sock\"</span>)<span class=\"question-mark\">?</span>;\n\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>fds = [<span class=\"number\">0</span>; <span class=\"number\">8</span>];\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>ancillary_buffer = [<span class=\"number\">0</span>; <span class=\"number\">128</span>];\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>ancillary = SocketAncillary::new(<span class=\"kw-2\">&amp;mut </span>ancillary_buffer[..]);\n\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buf = [<span class=\"number\">1</span>; <span class=\"number\">8</span>];\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bufs = <span class=\"kw-2\">&amp;mut </span>[IoSliceMut::new(<span class=\"kw-2\">&amp;mut </span>buf[..])][..];\n    sock.recv_vectored_with_ancillary(bufs, <span class=\"kw-2\">&amp;mut </span>ancillary)<span class=\"question-mark\">?</span>;\n\n    <span class=\"kw\">for </span>ancillary_result <span class=\"kw\">in </span>ancillary.messages() {\n        <span class=\"kw\">if let </span>AncillaryData::ScmRights(scm_rights) = ancillary_result.unwrap() {\n            <span class=\"kw\">for </span>fd <span class=\"kw\">in </span>scm_rights {\n                <span class=\"macro\">println!</span>(<span class=\"string\">\"receive file descriptor: {fd}\"</span>);\n            }\n        }\n    }\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(unix_socket_ancillary_data)%5D%0Ause+std::os::unix::net::%7BUnixStream,+SocketAncillary,+AncillaryData%7D;%0Ause+std::io::IoSliceMut;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+sock+=+UnixStream::connect(%22/tmp/sock%22)?;%0A%0A++++let+mut+fds+=+%5B0;+8%5D;%0A++++let+mut+ancillary_buffer+=+%5B0;+128%5D;%0A++++let+mut+ancillary+=+SocketAncillary::new(%26mut+ancillary_buffer%5B..%5D);%0A%0A++++let+mut+buf+=+%5B1;+8%5D;%0A++++let+mut+bufs+=+%26mut+%5BIoSliceMut::new(%26mut+buf%5B..%5D)%5D%5B..%5D;%0A++++sock.recv_vectored_with_ancillary(bufs,+%26mut+ancillary)?;%0A%0A++++for+ancillary_result+in+ancillary.messages()+%7B%0A++++++++if+let+AncillaryData::ScmRights(scm_rights)+=+ancillary_result.unwrap()+%7B%0A++++++++++++for+fd+in+scm_rights+%7B%0A++++++++++++++++println!(%22receive+file+descriptor:+%7Bfd%7D%22);%0A++++++++++++%7D%0A++++++++%7D%0A++++%7D%0A++++Ok(())%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><h2 id=\"implementations\" class=\"section-header\">Implementations<a href=\"#implementations\" class=\"anchor\">Â§</a></h2><div id=\"implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SocketAncillary%3C'a%3E\" class=\"impl\"><a class=\"src rightside\" href=\"../../../../src/std/os/unix/net/ancillary.rs.html#607-798\">source</a><a href=\"#impl-SocketAncillary%3C'a%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"struct\" href=\"struct.SocketAncillary.html\" title=\"struct std::os::unix::net::SocketAncillary\">SocketAncillary</a>&lt;'a&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"../../../../src/std/os/unix/net/ancillary.rs.html#620-622\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.new\" class=\"fn\">new</a>(buffer: &amp;'a mut [<a class=\"primitive\" href=\"../../../primitive.u8.html\">u8</a>]) -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>unix_socket_ancillary_data</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/76915\">#76915</a>)</span></div></span></summary><div class=\"docblock\"><p>Create an ancillary data with the given buffer.</p>\n<h5 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">Â§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(unix_socket_ancillary_data)]\n</span><span class=\"kw\">use </span>std::os::unix::net::SocketAncillary;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>ancillary_buffer = [<span class=\"number\">0</span>; <span class=\"number\">128</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>ancillary = SocketAncillary::new(<span class=\"kw-2\">&amp;mut </span>ancillary_buffer[..]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Ballow(unused_mut)%5D%0A%23!%5Bfeature(unix_socket_ancillary_data)%5D%0Afn+main()+%7B%0A++++use+std::os::unix::net::SocketAncillary;%0A++++let+mut+ancillary_buffer+=+%5B0;+128%5D;%0A++++let+mut+ancillary+=+SocketAncillary::new(%26mut+ancillary_buffer%5B..%5D);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.capacity\" class=\"method\"><a class=\"src rightside\" href=\"../../../../src/std/os/unix/net/ancillary.rs.html#627-629\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.capacity\" class=\"fn\">capacity</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.usize.html\">usize</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>unix_socket_ancillary_data</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/76915\">#76915</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the capacity of the buffer.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_empty\" class=\"method\"><a class=\"src rightside\" href=\"../../../../src/std/os/unix/net/ancillary.rs.html#634-636\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.is_empty\" class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.bool.html\">bool</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>unix_socket_ancillary_data</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/76915\">#76915</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns <code>true</code> if the ancillary data is empty.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.len\" class=\"method\"><a class=\"src rightside\" href=\"../../../../src/std/os/unix/net/ancillary.rs.html#641-643\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.len\" class=\"fn\">len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.usize.html\">usize</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>unix_socket_ancillary_data</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/76915\">#76915</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the number of used bytes.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.messages\" class=\"method\"><a class=\"src rightside\" href=\"../../../../src/std/os/unix/net/ancillary.rs.html#647-649\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.messages\" class=\"fn\">messages</a>(&amp;self) -&gt; <a class=\"struct\" href=\"struct.Messages.html\" title=\"struct std::os::unix::net::Messages\">Messages</a>&lt;'_&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Messages<'_>\">â“˜</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>unix_socket_ancillary_data</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/76915\">#76915</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the iterator of the control messages.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.truncated\" class=\"method\"><a class=\"src rightside\" href=\"../../../../src/std/os/unix/net/ancillary.rs.html#676-678\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.truncated\" class=\"fn\">truncated</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.bool.html\">bool</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>unix_socket_ancillary_data</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/76915\">#76915</a>)</span></div></span></summary><div class=\"docblock\"><p>Is <code>true</code> if during a recv operation the ancillary was truncated.</p>\n<h5 id=\"example-2\"><a class=\"doc-anchor\" href=\"#example-2\">Â§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(unix_socket_ancillary_data)]\n</span><span class=\"kw\">use </span>std::os::unix::net::{UnixStream, SocketAncillary};\n<span class=\"kw\">use </span>std::io::IoSliceMut;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>sock = UnixStream::connect(<span class=\"string\">\"/tmp/sock\"</span>)<span class=\"question-mark\">?</span>;\n\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>ancillary_buffer = [<span class=\"number\">0</span>; <span class=\"number\">128</span>];\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>ancillary = SocketAncillary::new(<span class=\"kw-2\">&amp;mut </span>ancillary_buffer[..]);\n\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buf = [<span class=\"number\">1</span>; <span class=\"number\">8</span>];\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bufs = <span class=\"kw-2\">&amp;mut </span>[IoSliceMut::new(<span class=\"kw-2\">&amp;mut </span>buf[..])][..];\n    sock.recv_vectored_with_ancillary(bufs, <span class=\"kw-2\">&amp;mut </span>ancillary)<span class=\"question-mark\">?</span>;\n\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"Is truncated: {}\"</span>, ancillary.truncated());\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(unix_socket_ancillary_data)%5D%0Ause+std::os::unix::net::%7BUnixStream,+SocketAncillary%7D;%0Ause+std::io::IoSliceMut;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+sock+=+UnixStream::connect(%22/tmp/sock%22)?;%0A%0A++++let+mut+ancillary_buffer+=+%5B0;+128%5D;%0A++++let+mut+ancillary+=+SocketAncillary::new(%26mut+ancillary_buffer%5B..%5D);%0A%0A++++let+mut+buf+=+%5B1;+8%5D;%0A++++let+mut+bufs+=+%26mut+%5BIoSliceMut::new(%26mut+buf%5B..%5D)%5D%5B..%5D;%0A++++sock.recv_vectored_with_ancillary(bufs,+%26mut+ancillary)?;%0A%0A++++println!(%22Is+truncated:+%7B%7D%22,+ancillary.truncated());%0A++++Ok(())%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.add_fds\" class=\"method\"><a class=\"src rightside\" href=\"../../../../src/std/os/unix/net/ancillary.rs.html#709-718\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.add_fds\" class=\"fn\">add_fds</a>(&amp;mut self, fds: &amp;[<a class=\"type\" href=\"../../fd/type.RawFd.html\" title=\"type std::os::fd::RawFd\">RawFd</a>]) -&gt; <a class=\"primitive\" href=\"../../../primitive.bool.html\">bool</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>unix_socket_ancillary_data</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/76915\">#76915</a>)</span></div></span></summary><div class=\"docblock\"><p>Add file descriptors to the ancillary data.</p>\n<p>The function returns <code>true</code> if there was enough space in the buffer.\nIf there was not enough space then no file descriptors was appended.\nTechnically, that means this operation adds a control message with the level <code>SOL_SOCKET</code>\nand type <code>SCM_RIGHTS</code>.</p>\n<h5 id=\"example-3\"><a class=\"doc-anchor\" href=\"#example-3\">Â§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(unix_socket_ancillary_data)]\n</span><span class=\"kw\">use </span>std::os::unix::net::{UnixStream, SocketAncillary};\n<span class=\"kw\">use </span>std::os::unix::io::AsRawFd;\n<span class=\"kw\">use </span>std::io::IoSlice;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>sock = UnixStream::connect(<span class=\"string\">\"/tmp/sock\"</span>)<span class=\"question-mark\">?</span>;\n\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>ancillary_buffer = [<span class=\"number\">0</span>; <span class=\"number\">128</span>];\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>ancillary = SocketAncillary::new(<span class=\"kw-2\">&amp;mut </span>ancillary_buffer[..]);\n    ancillary.add_fds(<span class=\"kw-2\">&amp;</span>[sock.as_raw_fd()][..]);\n\n    <span class=\"kw\">let </span>buf = [<span class=\"number\">1</span>; <span class=\"number\">8</span>];\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bufs = <span class=\"kw-2\">&amp;mut </span>[IoSlice::new(<span class=\"kw-2\">&amp;</span>buf[..])][..];\n    sock.send_vectored_with_ancillary(bufs, <span class=\"kw-2\">&amp;mut </span>ancillary)<span class=\"question-mark\">?</span>;\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(unix_socket_ancillary_data)%5D%0Ause+std::os::unix::net::%7BUnixStream,+SocketAncillary%7D;%0Ause+std::os::unix::io::AsRawFd;%0Ause+std::io::IoSlice;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+sock+=+UnixStream::connect(%22/tmp/sock%22)?;%0A%0A++++let+mut+ancillary_buffer+=+%5B0;+128%5D;%0A++++let+mut+ancillary+=+SocketAncillary::new(%26mut+ancillary_buffer%5B..%5D);%0A++++ancillary.add_fds(%26%5Bsock.as_raw_fd()%5D%5B..%5D);%0A%0A++++let+buf+=+%5B1;+8%5D;%0A++++let+mut+bufs+=+%26mut+%5BIoSlice::new(%26buf%5B..%5D)%5D%5B..%5D;%0A++++sock.send_vectored_with_ancillary(bufs,+%26mut+ancillary)?;%0A++++Ok(())%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.add_creds\" class=\"method\"><a class=\"src rightside\" href=\"../../../../src/std/os/unix/net/ancillary.rs.html#735-749\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.add_creds\" class=\"fn\">add_creds</a>(&amp;mut self, creds: &amp;[<a class=\"struct\" href=\"struct.SocketCred.html\" title=\"struct std::os::unix::net::SocketCred\">SocketCred</a>]) -&gt; <a class=\"primitive\" href=\"../../../primitive.bool.html\">bool</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>unix_socket_ancillary_data</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/76915\">#76915</a>)</span></div></span></summary><div class=\"docblock\"><p>Add credentials to the ancillary data.</p>\n<p>The function returns <code>true</code> if there is enough space in the buffer.\nIf there is not enough space then no credentials will be appended.\nTechnically, that means this operation adds a control message with the level <code>SOL_SOCKET</code>\nand type <code>SCM_CREDENTIALS</code>, <code>SCM_CREDS</code>, or <code>SCM_CREDS2</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clear\" class=\"method\"><a class=\"src rightside\" href=\"../../../../src/std/os/unix/net/ancillary.rs.html#794-797\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.clear\" class=\"fn\">clear</a>(&amp;mut self)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>unix_socket_ancillary_data</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/76915\">#76915</a>)</span></div></span></summary><div class=\"docblock\"><p>Clears the ancillary data, removing all values.</p>\n<h5 id=\"example-4\"><a class=\"doc-anchor\" href=\"#example-4\">Â§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(unix_socket_ancillary_data)]\n</span><span class=\"kw\">use </span>std::os::unix::net::{UnixStream, SocketAncillary, AncillaryData};\n<span class=\"kw\">use </span>std::io::IoSliceMut;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>sock = UnixStream::connect(<span class=\"string\">\"/tmp/sock\"</span>)<span class=\"question-mark\">?</span>;\n\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>fds1 = [<span class=\"number\">0</span>; <span class=\"number\">8</span>];\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>fds2 = [<span class=\"number\">0</span>; <span class=\"number\">8</span>];\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>ancillary_buffer = [<span class=\"number\">0</span>; <span class=\"number\">128</span>];\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>ancillary = SocketAncillary::new(<span class=\"kw-2\">&amp;mut </span>ancillary_buffer[..]);\n\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buf = [<span class=\"number\">1</span>; <span class=\"number\">8</span>];\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bufs = <span class=\"kw-2\">&amp;mut </span>[IoSliceMut::new(<span class=\"kw-2\">&amp;mut </span>buf[..])][..];\n\n    sock.recv_vectored_with_ancillary(bufs, <span class=\"kw-2\">&amp;mut </span>ancillary)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">for </span>ancillary_result <span class=\"kw\">in </span>ancillary.messages() {\n        <span class=\"kw\">if let </span>AncillaryData::ScmRights(scm_rights) = ancillary_result.unwrap() {\n            <span class=\"kw\">for </span>fd <span class=\"kw\">in </span>scm_rights {\n                <span class=\"macro\">println!</span>(<span class=\"string\">\"receive file descriptor: {fd}\"</span>);\n            }\n        }\n    }\n\n    ancillary.clear();\n\n    sock.recv_vectored_with_ancillary(bufs, <span class=\"kw-2\">&amp;mut </span>ancillary)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">for </span>ancillary_result <span class=\"kw\">in </span>ancillary.messages() {\n        <span class=\"kw\">if let </span>AncillaryData::ScmRights(scm_rights) = ancillary_result.unwrap() {\n            <span class=\"kw\">for </span>fd <span class=\"kw\">in </span>scm_rights {\n                <span class=\"macro\">println!</span>(<span class=\"string\">\"receive file descriptor: {fd}\"</span>);\n            }\n        }\n    }\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(unix_socket_ancillary_data)%5D%0Ause+std::os::unix::net::%7BUnixStream,+SocketAncillary,+AncillaryData%7D;%0Ause+std::io::IoSliceMut;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+sock+=+UnixStream::connect(%22/tmp/sock%22)?;%0A%0A++++let+mut+fds1+=+%5B0;+8%5D;%0A++++let+mut+fds2+=+%5B0;+8%5D;%0A++++let+mut+ancillary_buffer+=+%5B0;+128%5D;%0A++++let+mut+ancillary+=+SocketAncillary::new(%26mut+ancillary_buffer%5B..%5D);%0A%0A++++let+mut+buf+=+%5B1;+8%5D;%0A++++let+mut+bufs+=+%26mut+%5BIoSliceMut::new(%26mut+buf%5B..%5D)%5D%5B..%5D;%0A%0A++++sock.recv_vectored_with_ancillary(bufs,+%26mut+ancillary)?;%0A++++for+ancillary_result+in+ancillary.messages()+%7B%0A++++++++if+let+AncillaryData::ScmRights(scm_rights)+=+ancillary_result.unwrap()+%7B%0A++++++++++++for+fd+in+scm_rights+%7B%0A++++++++++++++++println!(%22receive+file+descriptor:+%7Bfd%7D%22);%0A++++++++++++%7D%0A++++++++%7D%0A++++%7D%0A%0A++++ancillary.clear();%0A%0A++++sock.recv_vectored_with_ancillary(bufs,+%26mut+ancillary)?;%0A++++for+ancillary_result+in+ancillary.messages()+%7B%0A++++++++if+let+AncillaryData::ScmRights(scm_rights)+=+ancillary_result.unwrap()+%7B%0A++++++++++++for+fd+in+scm_rights+%7B%0A++++++++++++++++println!(%22receive+file+descriptor:+%7Bfd%7D%22);%0A++++++++++++%7D%0A++++++++%7D%0A++++%7D%0A++++Ok(())%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details></div></details></div><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">Â§</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-SocketAncillary%3C'a%3E\" class=\"impl\"><a class=\"src rightside\" href=\"../../../../src/std/os/unix/net/ancillary.rs.html#600\">source</a><a href=\"#impl-Debug-for-SocketAncillary%3C'a%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"../../../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"struct.SocketAncillary.html\" title=\"struct std::os::unix::net::SocketAncillary\">SocketAncillary</a>&lt;'a&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../../src/std/os/unix/net/ancillary.rs.html#600\">source</a><a href=\"#method.fmt\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../../../fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../../../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"../../../fmt/type.Result.html\" title=\"type std::fmt::Result\">Result</a></h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../../../fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details></div><h2 id=\"synthetic-implementations\" class=\"section-header\">Auto Trait Implementations<a href=\"#synthetic-implementations\" class=\"anchor\">Â§</a></h2><div id=\"synthetic-implementations-list\"><section id=\"impl-Freeze-for-SocketAncillary%3C'a%3E\" class=\"impl\"><a href=\"#impl-Freeze-for-SocketAncillary%3C'a%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"../../../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"struct\" href=\"struct.SocketAncillary.html\" title=\"struct std::os::unix::net::SocketAncillary\">SocketAncillary</a>&lt;'a&gt;</h3></section><section id=\"impl-RefUnwindSafe-for-SocketAncillary%3C'a%3E\" class=\"impl\"><a href=\"#impl-RefUnwindSafe-for-SocketAncillary%3C'a%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"../../../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"struct\" href=\"struct.SocketAncillary.html\" title=\"struct std::os::unix::net::SocketAncillary\">SocketAncillary</a>&lt;'a&gt;</h3></section><section id=\"impl-Send-for-SocketAncillary%3C'a%3E\" class=\"impl\"><a href=\"#impl-Send-for-SocketAncillary%3C'a%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"../../../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"struct\" href=\"struct.SocketAncillary.html\" title=\"struct std::os::unix::net::SocketAncillary\">SocketAncillary</a>&lt;'a&gt;</h3></section><section id=\"impl-Sync-for-SocketAncillary%3C'a%3E\" class=\"impl\"><a href=\"#impl-Sync-for-SocketAncillary%3C'a%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"../../../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"struct.SocketAncillary.html\" title=\"struct std::os::unix::net::SocketAncillary\">SocketAncillary</a>&lt;'a&gt;</h3></section><section id=\"impl-Unpin-for-SocketAncillary%3C'a%3E\" class=\"impl\"><a href=\"#impl-Unpin-for-SocketAncillary%3C'a%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"../../../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"struct\" href=\"struct.SocketAncillary.html\" title=\"struct std::os::unix::net::SocketAncillary\">SocketAncillary</a>&lt;'a&gt;</h3></section><section id=\"impl-UnwindSafe-for-SocketAncillary%3C'a%3E\" class=\"impl\"><a href=\"#impl-UnwindSafe-for-SocketAncillary%3C'a%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a&gt; !<a class=\"trait\" href=\"../../../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"struct.SocketAncillary.html\" title=\"struct std::os::unix::net::SocketAncillary\">SocketAncillary</a>&lt;'a&gt;</h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">Â§</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Any-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a><a href=\"#impl-Any-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"../../../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#141\">source</a><a href=\"#method.type_id\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../../../any/trait.Any.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../../../any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\">Gets the <code>TypeId</code> of <code>self</code>. <a href=\"../../../any/trait.Any.html#tymethod.type_id\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Borrow%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208\">source</a><a href=\"#impl-Borrow%3CT%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../../../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#210\">source</a><a href=\"#method.borrow\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../../../borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"../../../borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216\">source</a><a href=\"#impl-BorrowMut%3CT%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../../borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../../../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#217\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../../../borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../../../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"../../../borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765\">source</a><a href=\"#impl-From%3CT%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768\">source</a><a href=\"#method.from\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../../../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the argument unchanged.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Into%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750\">source</a><a href=\"#impl-Into%3CU%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../../../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758\">source</a><a href=\"#method.into\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../../../convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; U</h4></section></summary><div class=\"docblock\"><p>Calls <code>U::from(self)</code>.</p>\n<p>That is, this conversion is whatever the implementation of\n<code><a href=\"../../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for U</code> chooses to do.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryFrom%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807\">source</a><a href=\"#impl-TryFrom%3CU%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../../../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../../../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"../../../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"../../../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812\">source</a><a href=\"#method.try_from\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../../../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: U) -&gt; <a class=\"enum\" href=\"../../../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, &lt;T as <a class=\"trait\" href=\"../../../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt;&gt;::<a class=\"associatedtype\" href=\"../../../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryInto%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792\">source</a><a href=\"#impl-TryInto%3CU%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../../../convert/trait.TryInto.html\" title=\"trait std::convert::TryInto\">TryInto</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../../../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"../../../convert/trait.TryInto.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = &lt;U as <a class=\"trait\" href=\"../../../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../../../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797\">source</a><a href=\"#method.try_into\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../../../convert/trait.TryInto.html#tymethod.try_into\" class=\"fn\">try_into</a>(self) -&gt; <a class=\"enum\" href=\"../../../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;U, &lt;U as <a class=\"trait\" href=\"../../../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../../../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details></div><script type=\"text/json\" id=\"notable-traits-data\">{\"Messages<'_>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"struct.Messages.html\\\" title=\\\"struct std::os::unix::net::Messages\\\">Messages</a>&lt;'a&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a&gt; <a class=\\\"trait\\\" href=\\\"../../../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"struct.Messages.html\\\" title=\\\"struct std::os::unix::net::Messages\\\">Messages</a>&lt;'a&gt;</div><div class=\\\"where\\\">    type <a href=\\\"../../../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = <a class=\\\"enum\\\" href=\\\"../../../result/enum.Result.html\\\" title=\\\"enum std::result::Result\\\">Result</a>&lt;<a class=\\\"enum\\\" href=\\\"enum.AncillaryData.html\\\" title=\\\"enum std::os::unix::net::AncillaryData\\\">AncillaryData</a>&lt;'a&gt;, <a class=\\\"enum\\\" href=\\\"enum.AncillaryError.html\\\" title=\\\"enum std::os::unix::net::AncillaryError\\\">AncillaryError</a>&gt;;</div>\"}</script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:26:20.394Z"
}