{
	"title": "copy in std::fs - Rust",
	"url": "https://doc.rust-lang.org/stable/std/fs/fn.copy.html",
	"markdown": "# copy in std::fs - Rust\n\n## Function [std](../index.html)::[fs](index.html)::[copy](#)\n\n1.0.0 · [source](about:blank/src/std/fs.rs.html#2183-2185) ·\n\n```\npub fn copy<P: AsRef<Path>, Q: AsRef<Path>>(from: P, to: Q) -> Result<u64>\n```\n\nExpand description\n\nCopies the contents of one file to another. This function will also copy the permission bits of the original file to the destination file.\n\nThis function will **overwrite** the contents of `to`.\n\nNote that if `from` and `to` both point to the same file, then the file will likely get truncated by this operation.\n\nOn success, the total number of bytes copied is returned and it is equal to the length of the `to` file as reported by `metadata`.\n\nIf you want to copy the contents of one file to another and you’re working with [`File`](struct.File.html \"struct std::fs::File\")s, see the [`io::copy`](../io/fn.copy.html \"fn std::io::copy\") function.\n\n## [§](#platform-specific-behavior)Platform-specific behavior\n\nThis function currently corresponds to the `open` function in Unix with `O_RDONLY` for `from` and `O_WRONLY`, `O_CREAT`, and `O_TRUNC` for `to`. `O_CLOEXEC` is set for returned file descriptors.\n\nOn Linux (including Android), this function attempts to use `copy_file_range(2)`, and falls back to reading and writing if that is not possible.\n\nOn Windows, this function currently corresponds to `CopyFileEx`. Alternate NTFS streams are copied but only the size of the main stream is returned by this function.\n\nOn MacOS, this function corresponds to `fclonefileat` and `fcopyfile`.\n\nNote that platform-specific behavior [may change in the future](about:blank/io/index.html#platform-specific-behavior \"mod std::io\").\n\n## [§](#errors)Errors\n\nThis function will return an error in the following situations, but is not limited to just these cases:\n\n-   `from` is neither a regular file nor a symlink to a regular file.\n-   `from` does not exist.\n-   The current process does not have the permission rights to read `from` or write `to`.\n\n## [§](#examples)Examples\n\n```\nuse std::fs;\n\nfn main() -> std::io::Result<()> {\n    fs::copy(\"foo.txt\", \"bar.txt\")?;  // Copy foo.txt to bar.txt\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++fs::copy(%22foo.txt%22,+%22bar.txt%22)?;++//+Copy+foo.txt+to+bar.txt%0A++++Ok(())%0A%7D&edition=2021)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Copies the contents of one file to another. This function will also copy the permission bits of the original file to the destination file.\"><title>copy in std::fs - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc fn\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><div class=\"sidebar-elems\"><h2><a href=\"index.html\">In std::fs</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.DirBuilder.html\">DirBuilder</a></li><li><a href=\"struct.DirEntry.html\">DirEntry</a></li><li><a href=\"struct.File.html\">File</a></li><li><a href=\"struct.FileTimes.html\">FileTimes</a></li><li><a href=\"struct.FileType.html\">FileType</a></li><li><a href=\"struct.Metadata.html\">Metadata</a></li><li><a href=\"struct.OpenOptions.html\">OpenOptions</a></li><li><a href=\"struct.Permissions.html\">Permissions</a></li><li><a href=\"struct.ReadDir.html\">ReadDir</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.canonicalize.html\">canonicalize</a></li><li><a href=\"fn.copy.html\">copy</a></li><li><a href=\"fn.create_dir.html\">create_dir</a></li><li><a href=\"fn.create_dir_all.html\">create_dir_all</a></li><li><a href=\"fn.hard_link.html\">hard_link</a></li><li><a href=\"fn.metadata.html\">metadata</a></li><li><a href=\"fn.read.html\">read</a></li><li><a href=\"fn.read_dir.html\">read_dir</a></li><li><a href=\"fn.read_link.html\">read_link</a></li><li><a href=\"fn.read_to_string.html\">read_to_string</a></li><li><a href=\"fn.remove_dir.html\">remove_dir</a></li><li><a href=\"fn.remove_dir_all.html\">remove_dir_all</a></li><li><a href=\"fn.remove_file.html\">remove_file</a></li><li><a href=\"fn.rename.html\">rename</a></li><li><a href=\"fn.set_permissions.html\">set_permissions</a></li><li><a href=\"fn.soft_link.html\">soft_link</a></li><li><a href=\"fn.symlink_metadata.html\">symlink_metadata</a></li><li><a href=\"fn.try_exists.html\">try_exists</a></li><li><a href=\"fn.write.html\">write</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Function <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">fs</a>::<wbr><a class=\"fn\" href=\"#\">copy</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/fs.rs.html#2183-2185\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub fn copy&lt;P: <a class=\"trait\" href=\"../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;, Q: <a class=\"trait\" href=\"../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;&gt;(from: P, to: Q) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Copies the contents of one file to another. This function will also\ncopy the permission bits of the original file to the destination file.</p>\n<p>This function will <strong>overwrite</strong> the contents of <code>to</code>.</p>\n<p>Note that if <code>from</code> and <code>to</code> both point to the same file, then the file\nwill likely get truncated by this operation.</p>\n<p>On success, the total number of bytes copied is returned and it is equal to\nthe length of the <code>to</code> file as reported by <code>metadata</code>.</p>\n<p>If you want to copy the contents of one file to another and you’re\nworking with <a href=\"struct.File.html\" title=\"struct std::fs::File\"><code>File</code></a>s, see the <a href=\"../io/fn.copy.html\" title=\"fn std::io::copy\"><code>io::copy</code></a> function.</p>\n<h2 id=\"platform-specific-behavior\"><a class=\"doc-anchor\" href=\"#platform-specific-behavior\">§</a>Platform-specific behavior</h2>\n<p>This function currently corresponds to the <code>open</code> function in Unix\nwith <code>O_RDONLY</code> for <code>from</code> and <code>O_WRONLY</code>, <code>O_CREAT</code>, and <code>O_TRUNC</code> for <code>to</code>.\n<code>O_CLOEXEC</code> is set for returned file descriptors.</p>\n<p>On Linux (including Android), this function attempts to use <code>copy_file_range(2)</code>,\nand falls back to reading and writing if that is not possible.</p>\n<p>On Windows, this function currently corresponds to <code>CopyFileEx</code>. Alternate\nNTFS streams are copied but only the size of the main stream is returned by\nthis function.</p>\n<p>On MacOS, this function corresponds to <code>fclonefileat</code> and <code>fcopyfile</code>.</p>\n<p>Note that platform-specific behavior <a href=\"../io/index.html#platform-specific-behavior\" title=\"mod std::io\">may change in the future</a>.</p>\n<h2 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h2>\n<p>This function will return an error in the following situations, but is not\nlimited to just these cases:</p>\n<ul>\n<li><code>from</code> is neither a regular file nor a symlink to a regular file.</li>\n<li><code>from</code> does not exist.</li>\n<li>The current process does not have the permission rights to read\n<code>from</code> or write <code>to</code>.</li>\n</ul>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    fs::copy(<span class=\"string\">\"foo.txt\"</span>, <span class=\"string\">\"bar.txt\"</span>)<span class=\"question-mark\">?</span>;  <span class=\"comment\">// Copy foo.txt to bar.txt\n    </span><span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++fs::copy(%22foo.txt%22,+%22bar.txt%22)?;++//+Copy+foo.txt+to+bar.txt%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:23:13.124Z"
}