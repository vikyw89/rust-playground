{
	"title": "std::path - Rust",
	"url": "https://doc.rust-lang.org/stable/std/path/index.html",
	"markdown": "# std::path - Rust\n\n## Module [std](../index.html)::[path](#)\n\n1.0.0 · [source](about:blank/src/std/path.rs.html#1-3401) ·\n\nExpand description\n\nCross-platform path manipulation.\n\nThis module provides two types, [`PathBuf`](struct.PathBuf.html \"struct std::path::PathBuf\") and [`Path`](struct.Path.html \"struct std::path::Path\") (akin to [`String`](../string/struct.String.html \"struct std::string::String\") and [`str`](../primitive.str.html \"primitive str\")), for working with paths abstractly. These types are thin wrappers around [`OsString`](../ffi/struct.OsString.html \"struct std::ffi::OsString\") and [`OsStr`](../ffi/struct.OsStr.html \"struct std::ffi::OsStr\") respectively, meaning that they work directly on strings according to the local platform’s path syntax.\n\nPaths can be parsed into [`Component`](enum.Component.html \"enum std::path::Component\")s by iterating over the structure returned by the [`components`](about:blank/struct.Path.html#method.components \"method std::path::Path::components\") method on [`Path`](struct.Path.html \"struct std::path::Path\"). [`Component`](enum.Component.html \"enum std::path::Component\")s roughly correspond to the substrings between path separators (`/` or `\\`). You can reconstruct an equivalent path from components with the [`push`](about:blank/struct.PathBuf.html#method.push \"method std::path::PathBuf::push\") method on [`PathBuf`](struct.PathBuf.html \"struct std::path::PathBuf\"); note that the paths may differ syntactically by the normalization described in the documentation for the [`components`](about:blank/struct.Path.html#method.components \"method std::path::Path::components\") method.\n\n### [§](#case-sensitivity)Case sensitivity\n\nUnless otherwise indicated path methods that do not access the filesystem, such as [`Path::starts_with`](about:blank/struct.Path.html#method.starts_with \"method std::path::Path::starts_with\") and [`Path::ends_with`](about:blank/struct.Path.html#method.ends_with \"method std::path::Path::ends_with\"), are case sensitive no matter the platform or filesystem. An exception to this is made for Windows drive letters.\n\n### [§](#simple-usage)Simple usage\n\nPath manipulation includes both parsing components from slices and building new owned paths.\n\nTo parse a path, you can create a [`Path`](struct.Path.html \"struct std::path::Path\") slice from a [`str`](../primitive.str.html \"primitive str\") slice and start asking questions:\n\n```\nuse std::path::Path;\nuse std::ffi::OsStr;\n\nlet path = Path::new(\"/tmp/foo/bar.txt\");\n\nlet parent = path.parent();\nassert_eq!(parent, Some(Path::new(\"/tmp/foo\")));\n\nlet file_stem = path.file_stem();\nassert_eq!(file_stem, Some(OsStr::new(\"bar\")));\n\nlet extension = path.extension();\nassert_eq!(extension, Some(OsStr::new(\"txt\")));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::Path;%0A++++use+std::ffi::OsStr;%0A++++%0A++++let+path+=+Path::new(%22/tmp/foo/bar.txt%22);%0A++++%0A++++let+parent+=+path.parent();%0A++++assert_eq!(parent,+Some(Path::new(%22/tmp/foo%22)));%0A++++%0A++++let+file_stem+=+path.file_stem();%0A++++assert_eq!(file_stem,+Some(OsStr::new(%22bar%22)));%0A++++%0A++++let+extension+=+path.extension();%0A++++assert_eq!(extension,+Some(OsStr::new(%22txt%22)));%0A%7D&edition=2021)\n\nTo build or modify paths, use [`PathBuf`](struct.PathBuf.html \"struct std::path::PathBuf\"):\n\n```\nuse std::path::PathBuf;\n\n// This way works...\nlet mut path = PathBuf::from(\"c:\\\\\");\n\npath.push(\"windows\");\npath.push(\"system32\");\n\npath.set_extension(\"dll\");\n\n// ... but push is best used if you don't know everything up\n// front. If you do, this way is better:\nlet path: PathBuf = [\"c:\\\\\", \"windows\", \"system32.dll\"].iter().collect();\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::PathBuf;%0A++++%0A++++//+This+way+works...%0A++++let+mut+path+=+PathBuf::from(%22c:%5C%5C%22);%0A++++%0A++++path.push(%22windows%22);%0A++++path.push(%22system32%22);%0A++++%0A++++path.set_extension(%22dll%22);%0A++++%0A++++//+...+but+push+is+best+used+if+you+don%27t+know+everything+up%0A++++//+front.+If+you+do,+this+way+is+better:%0A++++let+path:+PathBuf+=+%5B%22c:%5C%5C%22,+%22windows%22,+%22system32.dll%22%5D.iter().collect();%0A%7D&edition=2021)\n\n-   An iterator over [`Path`](struct.Path.html \"struct std::path::Path\") and its ancestors.\n    \n\n-   Helper struct for safely printing paths with [`format!`](../macro.format.html \"macro std::format\") and `{}`.\n    \n\n-   A slice of a path (akin to [`str`](../primitive.str.html \"primitive str\")).\n    \n-   An owned, mutable path (akin to [`String`](../string/struct.String.html \"struct std::string::String\")).\n    \n-   A structure wrapping a Windows path prefix as well as its unparsed string representation.\n    \n\n-   A single component of a path.\n    \n-   Windows path prefixes, e.g., `C:` or `\\\\server\\share`.\n    \n\n-   The primary separator of path components for the current platform.\n    \n-   The primary separator of path components for the current platform.\n    \n\n-   Makes the path absolute without accessing the filesystem.\n    \n-   Determines whether the character is one of the permitted path separators for the current platform.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Cross-platform path manipulation.\"><title>std::path - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"../sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc mod\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">Module path</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">Module path</a></h2><div class=\"sidebar-elems\"><section><ul class=\"block\"><li><a href=\"#structs\">Structs</a></li><li><a href=\"#enums\">Enums</a></li><li><a href=\"#constants\">Constants</a></li><li><a href=\"#functions\">Functions</a></li></ul></section><h2><a href=\"../index.html\">In crate std</a></h2><h3><a href=\"../index.html#primitives\">Primitive Types</a></h3><ul class=\"block primitive\"><li><a href=\"../primitive.array.html\">array</a></li><li><a href=\"../primitive.bool.html\">bool</a></li><li><a href=\"../primitive.char.html\">char</a></li><li><a href=\"../primitive.f128.html\">f128</a></li><li><a href=\"../primitive.f16.html\">f16</a></li><li><a href=\"../primitive.f32.html\">f32</a></li><li><a href=\"../primitive.f64.html\">f64</a></li><li><a href=\"../primitive.fn.html\">fn</a></li><li><a href=\"../primitive.i128.html\">i128</a></li><li><a href=\"../primitive.i16.html\">i16</a></li><li><a href=\"../primitive.i32.html\">i32</a></li><li><a href=\"../primitive.i64.html\">i64</a></li><li><a href=\"../primitive.i8.html\">i8</a></li><li><a href=\"../primitive.isize.html\">isize</a></li><li><a href=\"../primitive.never.html\">never</a></li><li><a href=\"../primitive.pointer.html\">pointer</a></li><li><a href=\"../primitive.reference.html\">reference</a></li><li><a href=\"../primitive.slice.html\">slice</a></li><li><a href=\"../primitive.str.html\">str</a></li><li><a href=\"../primitive.tuple.html\">tuple</a></li><li><a href=\"../primitive.u128.html\">u128</a></li><li><a href=\"../primitive.u16.html\">u16</a></li><li><a href=\"../primitive.u32.html\">u32</a></li><li><a href=\"../primitive.u64.html\">u64</a></li><li><a href=\"../primitive.u8.html\">u8</a></li><li><a href=\"../primitive.unit.html\">unit</a></li><li><a href=\"../primitive.usize.html\">usize</a></li></ul><h3><a href=\"../index.html#modules\">Modules</a></h3><ul class=\"block mod\"><li><a href=\"../alloc/index.html\">alloc</a></li><li><a href=\"../any/index.html\">any</a></li><li><a href=\"../arch/index.html\">arch</a></li><li><a href=\"../array/index.html\">array</a></li><li><a href=\"../ascii/index.html\">ascii</a></li><li><a href=\"../assert_matches/index.html\">assert_matches</a></li><li><a href=\"../async_iter/index.html\">async_iter</a></li><li><a href=\"../backtrace/index.html\">backtrace</a></li><li><a href=\"../borrow/index.html\">borrow</a></li><li><a href=\"../boxed/index.html\">boxed</a></li><li><a href=\"../cell/index.html\">cell</a></li><li><a href=\"../char/index.html\">char</a></li><li><a href=\"../clone/index.html\">clone</a></li><li><a href=\"../cmp/index.html\">cmp</a></li><li><a href=\"../collections/index.html\">collections</a></li><li><a href=\"../convert/index.html\">convert</a></li><li><a href=\"../default/index.html\">default</a></li><li><a href=\"../env/index.html\">env</a></li><li><a href=\"../error/index.html\">error</a></li><li><a href=\"../f128/index.html\">f128</a></li><li><a href=\"../f16/index.html\">f16</a></li><li><a href=\"../f32/index.html\">f32</a></li><li><a href=\"../f64/index.html\">f64</a></li><li><a href=\"../ffi/index.html\">ffi</a></li><li><a href=\"../fmt/index.html\">fmt</a></li><li><a href=\"../fs/index.html\">fs</a></li><li><a href=\"../future/index.html\">future</a></li><li><a href=\"../hash/index.html\">hash</a></li><li><a href=\"../hint/index.html\">hint</a></li><li><a href=\"../i128/index.html\">i128</a></li><li><a href=\"../i16/index.html\">i16</a></li><li><a href=\"../i32/index.html\">i32</a></li><li><a href=\"../i64/index.html\">i64</a></li><li><a href=\"../i8/index.html\">i8</a></li><li><a href=\"../intrinsics/index.html\">intrinsics</a></li><li><a href=\"../io/index.html\">io</a></li><li><a href=\"../isize/index.html\">isize</a></li><li><a href=\"../iter/index.html\">iter</a></li><li><a href=\"../marker/index.html\">marker</a></li><li><a href=\"../mem/index.html\">mem</a></li><li><a href=\"../net/index.html\">net</a></li><li><a href=\"../num/index.html\">num</a></li><li><a href=\"../ops/index.html\">ops</a></li><li><a href=\"../option/index.html\">option</a></li><li><a href=\"../os/index.html\">os</a></li><li><a href=\"../panic/index.html\">panic</a></li><li><a href=\"../pat/index.html\">pat</a></li><li><a href=\"../path/index.html\">path</a></li><li><a href=\"../pin/index.html\">pin</a></li><li><a href=\"../prelude/index.html\">prelude</a></li><li><a href=\"../primitive/index.html\">primitive</a></li><li><a href=\"../process/index.html\">process</a></li><li><a href=\"../ptr/index.html\">ptr</a></li><li><a href=\"../rc/index.html\">rc</a></li><li><a href=\"../result/index.html\">result</a></li><li><a href=\"../simd/index.html\">simd</a></li><li><a href=\"../slice/index.html\">slice</a></li><li><a href=\"../str/index.html\">str</a></li><li><a href=\"../string/index.html\">string</a></li><li><a href=\"../sync/index.html\">sync</a></li><li><a href=\"../task/index.html\">task</a></li><li><a href=\"../thread/index.html\">thread</a></li><li><a href=\"../time/index.html\">time</a></li><li><a href=\"../u128/index.html\">u128</a></li><li><a href=\"../u16/index.html\">u16</a></li><li><a href=\"../u32/index.html\">u32</a></li><li><a href=\"../u64/index.html\">u64</a></li><li><a href=\"../u8/index.html\">u8</a></li><li><a href=\"../usize/index.html\">usize</a></li><li><a href=\"../vec/index.html\">vec</a></li></ul><h3><a href=\"../index.html#macros\">Macros</a></h3><ul class=\"block macro\"><li><a href=\"../macro.assert.html\">assert</a></li><li><a href=\"../macro.assert_eq.html\">assert_eq</a></li><li><a href=\"../macro.assert_ne.html\">assert_ne</a></li><li><a href=\"../macro.cfg.html\">cfg</a></li><li><a href=\"../macro.cfg_match.html\">cfg_match</a></li><li><a href=\"../macro.column.html\">column</a></li><li><a href=\"../macro.compile_error.html\">compile_error</a></li><li><a href=\"../macro.concat.html\">concat</a></li><li><a href=\"../macro.concat_bytes.html\">concat_bytes</a></li><li><a href=\"../macro.concat_idents.html\">concat_idents</a></li><li><a href=\"../macro.const_format_args.html\">const_format_args</a></li><li><a href=\"../macro.dbg.html\">dbg</a></li><li><a href=\"../macro.debug_assert.html\">debug_assert</a></li><li><a href=\"../macro.debug_assert_eq.html\">debug_assert_eq</a></li><li><a href=\"../macro.debug_assert_ne.html\">debug_assert_ne</a></li><li><a href=\"../macro.env.html\">env</a></li><li><a href=\"../macro.eprint.html\">eprint</a></li><li><a href=\"../macro.eprintln.html\">eprintln</a></li><li><a href=\"../macro.file.html\">file</a></li><li><a href=\"../macro.format.html\">format</a></li><li><a href=\"../macro.format_args.html\">format_args</a></li><li><a href=\"../macro.format_args_nl.html\">format_args_nl</a></li><li><a href=\"../macro.include.html\">include</a></li><li><a href=\"../macro.include_bytes.html\">include_bytes</a></li><li><a href=\"../macro.include_str.html\">include_str</a></li><li><a href=\"../macro.is_x86_feature_detected.html\">is_x86_feature_detected</a></li><li><a href=\"../macro.line.html\">line</a></li><li><a href=\"../macro.log_syntax.html\">log_syntax</a></li><li><a href=\"../macro.matches.html\">matches</a></li><li><a href=\"../macro.module_path.html\">module_path</a></li><li><a href=\"../macro.option_env.html\">option_env</a></li><li><a href=\"../macro.panic.html\">panic</a></li><li><a href=\"../macro.print.html\">print</a></li><li><a href=\"../macro.println.html\">println</a></li><li><a href=\"../macro.stringify.html\">stringify</a></li><li><a href=\"../macro.thread_local.html\">thread_local</a></li><li><a href=\"../macro.todo.html\">todo</a></li><li><a href=\"../macro.trace_macros.html\">trace_macros</a></li><li><a href=\"../macro.try.html\">try</a></li><li><a href=\"../macro.unimplemented.html\">unimplemented</a></li><li><a href=\"../macro.unreachable.html\">unreachable</a></li><li><a href=\"../macro.vec.html\">vec</a></li><li><a href=\"../macro.write.html\">write</a></li><li><a href=\"../macro.writeln.html\">writeln</a></li></ul><h3><a href=\"../index.html#keywords\">Keywords</a></h3><ul class=\"block keyword\"><li><a href=\"../keyword.SelfTy.html\">SelfTy</a></li><li><a href=\"../keyword.as.html\">as</a></li><li><a href=\"../keyword.async.html\">async</a></li><li><a href=\"../keyword.await.html\">await</a></li><li><a href=\"../keyword.break.html\">break</a></li><li><a href=\"../keyword.const.html\">const</a></li><li><a href=\"../keyword.continue.html\">continue</a></li><li><a href=\"../keyword.crate.html\">crate</a></li><li><a href=\"../keyword.dyn.html\">dyn</a></li><li><a href=\"../keyword.else.html\">else</a></li><li><a href=\"../keyword.enum.html\">enum</a></li><li><a href=\"../keyword.extern.html\">extern</a></li><li><a href=\"../keyword.false.html\">false</a></li><li><a href=\"../keyword.fn.html\">fn</a></li><li><a href=\"../keyword.for.html\">for</a></li><li><a href=\"../keyword.if.html\">if</a></li><li><a href=\"../keyword.impl.html\">impl</a></li><li><a href=\"../keyword.in.html\">in</a></li><li><a href=\"../keyword.let.html\">let</a></li><li><a href=\"../keyword.loop.html\">loop</a></li><li><a href=\"../keyword.match.html\">match</a></li><li><a href=\"../keyword.mod.html\">mod</a></li><li><a href=\"../keyword.move.html\">move</a></li><li><a href=\"../keyword.mut.html\">mut</a></li><li><a href=\"../keyword.pub.html\">pub</a></li><li><a href=\"../keyword.ref.html\">ref</a></li><li><a href=\"../keyword.return.html\">return</a></li><li><a href=\"../keyword.self.html\">self</a></li><li><a href=\"../keyword.static.html\">static</a></li><li><a href=\"../keyword.struct.html\">struct</a></li><li><a href=\"../keyword.super.html\">super</a></li><li><a href=\"../keyword.trait.html\">trait</a></li><li><a href=\"../keyword.true.html\">true</a></li><li><a href=\"../keyword.type.html\">type</a></li><li><a href=\"../keyword.union.html\">union</a></li><li><a href=\"../keyword.unsafe.html\">unsafe</a></li><li><a href=\"../keyword.use.html\">use</a></li><li><a href=\"../keyword.where.html\">where</a></li><li><a href=\"../keyword.while.html\">while</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Module <a href=\"../index.html\">std</a>::<wbr><a class=\"mod\" href=\"#\">path</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#1-3401\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Cross-platform path manipulation.</p>\n<p>This module provides two types, <a href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\"><code>PathBuf</code></a> and <a href=\"struct.Path.html\" title=\"struct std::path::Path\"><code>Path</code></a> (akin to <a href=\"../string/struct.String.html\" title=\"struct std::string::String\"><code>String</code></a>\nand <a href=\"../primitive.str.html\" title=\"primitive str\"><code>str</code></a>), for working with paths abstractly. These types are thin wrappers\naround <a href=\"../ffi/struct.OsString.html\" title=\"struct std::ffi::OsString\"><code>OsString</code></a> and <a href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\"><code>OsStr</code></a> respectively, meaning that they work directly\non strings according to the local platform’s path syntax.</p>\n<p>Paths can be parsed into <a href=\"enum.Component.html\" title=\"enum std::path::Component\"><code>Component</code></a>s by iterating over the structure\nreturned by the <a href=\"struct.Path.html#method.components\" title=\"method std::path::Path::components\"><code>components</code></a> method on <a href=\"struct.Path.html\" title=\"struct std::path::Path\"><code>Path</code></a>. <a href=\"enum.Component.html\" title=\"enum std::path::Component\"><code>Component</code></a>s roughly\ncorrespond to the substrings between path separators (<code>/</code> or <code>\\</code>). You can\nreconstruct an equivalent path from components with the <a href=\"struct.PathBuf.html#method.push\" title=\"method std::path::PathBuf::push\"><code>push</code></a> method on\n<a href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\"><code>PathBuf</code></a>; note that the paths may differ syntactically by the\nnormalization described in the documentation for the <a href=\"struct.Path.html#method.components\" title=\"method std::path::Path::components\"><code>components</code></a> method.</p>\n<h3 id=\"case-sensitivity\"><a class=\"doc-anchor\" href=\"#case-sensitivity\">§</a>Case sensitivity</h3>\n<p>Unless otherwise indicated path methods that do not access the filesystem,\nsuch as <a href=\"struct.Path.html#method.starts_with\" title=\"method std::path::Path::starts_with\"><code>Path::starts_with</code></a> and <a href=\"struct.Path.html#method.ends_with\" title=\"method std::path::Path::ends_with\"><code>Path::ends_with</code></a>, are case sensitive no\nmatter the platform or filesystem. An exception to this is made for Windows\ndrive letters.</p>\n<h3 id=\"simple-usage\"><a class=\"doc-anchor\" href=\"#simple-usage\">§</a>Simple usage</h3>\n<p>Path manipulation includes both parsing components from slices and building\nnew owned paths.</p>\n<p>To parse a path, you can create a <a href=\"struct.Path.html\" title=\"struct std::path::Path\"><code>Path</code></a> slice from a <a href=\"../primitive.str.html\" title=\"primitive str\"><code>str</code></a>\nslice and start asking questions:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::path::Path;\n<span class=\"kw\">use </span>std::ffi::OsStr;\n\n<span class=\"kw\">let </span>path = Path::new(<span class=\"string\">\"/tmp/foo/bar.txt\"</span>);\n\n<span class=\"kw\">let </span>parent = path.parent();\n<span class=\"macro\">assert_eq!</span>(parent, <span class=\"prelude-val\">Some</span>(Path::new(<span class=\"string\">\"/tmp/foo\"</span>)));\n\n<span class=\"kw\">let </span>file_stem = path.file_stem();\n<span class=\"macro\">assert_eq!</span>(file_stem, <span class=\"prelude-val\">Some</span>(OsStr::new(<span class=\"string\">\"bar\"</span>)));\n\n<span class=\"kw\">let </span>extension = path.extension();\n<span class=\"macro\">assert_eq!</span>(extension, <span class=\"prelude-val\">Some</span>(OsStr::new(<span class=\"string\">\"txt\"</span>)));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::Path;%0A++++use+std::ffi::OsStr;%0A++++%0A++++let+path+=+Path::new(%22/tmp/foo/bar.txt%22);%0A++++%0A++++let+parent+=+path.parent();%0A++++assert_eq!(parent,+Some(Path::new(%22/tmp/foo%22)));%0A++++%0A++++let+file_stem+=+path.file_stem();%0A++++assert_eq!(file_stem,+Some(OsStr::new(%22bar%22)));%0A++++%0A++++let+extension+=+path.extension();%0A++++assert_eq!(extension,+Some(OsStr::new(%22txt%22)));%0A%7D&amp;edition=2021\">Run</a></div>\n<p>To build or modify paths, use <a href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\"><code>PathBuf</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::path::PathBuf;\n\n<span class=\"comment\">// This way works...\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>path = PathBuf::from(<span class=\"string\">\"c:\\\\\"</span>);\n\npath.push(<span class=\"string\">\"windows\"</span>);\npath.push(<span class=\"string\">\"system32\"</span>);\n\npath.set_extension(<span class=\"string\">\"dll\"</span>);\n\n<span class=\"comment\">// ... but push is best used if you don't know everything up\n// front. If you do, this way is better:\n</span><span class=\"kw\">let </span>path: PathBuf = [<span class=\"string\">\"c:\\\\\"</span>, <span class=\"string\">\"windows\"</span>, <span class=\"string\">\"system32.dll\"</span>].iter().collect();</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::PathBuf;%0A++++%0A++++//+This+way+works...%0A++++let+mut+path+=+PathBuf::from(%22c:%5C%5C%22);%0A++++%0A++++path.push(%22windows%22);%0A++++path.push(%22system32%22);%0A++++%0A++++path.set_extension(%22dll%22);%0A++++%0A++++//+...+but+push+is+best+used+if+you+don't+know+everything+up%0A++++//+front.+If+you+do,+this+way+is+better:%0A++++let+path:+PathBuf+=+%5B%22c:%5C%5C%22,+%22windows%22,+%22system32.dll%22%5D.iter().collect();%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><h2 id=\"structs\" class=\"section-header\">Structs<a href=\"#structs\" class=\"anchor\">§</a></h2><ul class=\"item-table\"><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.Ancestors.html\" title=\"struct std::path::Ancestors\">Ancestors</a></div><div class=\"desc docblock-short\">An iterator over <a href=\"struct.Path.html\" title=\"struct std::path::Path\"><code>Path</code></a> and its ancestors.</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.Components.html\" title=\"struct std::path::Components\">Components</a></div><div class=\"desc docblock-short\">An iterator over the <a href=\"enum.Component.html\" title=\"enum std::path::Component\"><code>Component</code></a>s of a <a href=\"struct.Path.html\" title=\"struct std::path::Path\"><code>Path</code></a>.</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.Display.html\" title=\"struct std::path::Display\">Display</a></div><div class=\"desc docblock-short\">Helper struct for safely printing paths with <a href=\"../macro.format.html\" title=\"macro std::format\"><code>format!</code></a> and <code>{}</code>.</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.Iter.html\" title=\"struct std::path::Iter\">Iter</a></div><div class=\"desc docblock-short\">An iterator over the <a href=\"enum.Component.html\" title=\"enum std::path::Component\"><code>Component</code></a>s of a <a href=\"struct.Path.html\" title=\"struct std::path::Path\"><code>Path</code></a>, as <a href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\"><code>OsStr</code></a> slices.</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.Path.html\" title=\"struct std::path::Path\">Path</a></div><div class=\"desc docblock-short\">A slice of a path (akin to <a href=\"../primitive.str.html\" title=\"primitive str\"><code>str</code></a>).</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a></div><div class=\"desc docblock-short\">An owned, mutable path (akin to <a href=\"../string/struct.String.html\" title=\"struct std::string::String\"><code>String</code></a>).</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.PrefixComponent.html\" title=\"struct std::path::PrefixComponent\">PrefixComponent</a></div><div class=\"desc docblock-short\">A structure wrapping a Windows path prefix as well as its unparsed string\nrepresentation.</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.StripPrefixError.html\" title=\"struct std::path::StripPrefixError\">StripPrefixError</a></div><div class=\"desc docblock-short\">An error returned from <a href=\"struct.Path.html#method.strip_prefix\" title=\"method std::path::Path::strip_prefix\"><code>Path::strip_prefix</code></a> if the prefix was not found.</div></li></ul><h2 id=\"enums\" class=\"section-header\">Enums<a href=\"#enums\" class=\"anchor\">§</a></h2><ul class=\"item-table\"><li><div class=\"item-name\"><a class=\"enum\" href=\"enum.Component.html\" title=\"enum std::path::Component\">Component</a></div><div class=\"desc docblock-short\">A single component of a path.</div></li><li><div class=\"item-name\"><a class=\"enum\" href=\"enum.Prefix.html\" title=\"enum std::path::Prefix\">Prefix</a></div><div class=\"desc docblock-short\">Windows path prefixes, e.g., <code>C:</code> or <code>\\\\server\\share</code>.</div></li></ul><h2 id=\"constants\" class=\"section-header\">Constants<a href=\"#constants\" class=\"anchor\">§</a></h2><ul class=\"item-table\"><li><div class=\"item-name\"><a class=\"constant\" href=\"constant.MAIN_SEPARATOR.html\" title=\"constant std::path::MAIN_SEPARATOR\">MAIN_SEPARATOR</a></div><div class=\"desc docblock-short\">The primary separator of path components for the current platform.</div></li><li><div class=\"item-name\"><a class=\"constant\" href=\"constant.MAIN_SEPARATOR_STR.html\" title=\"constant std::path::MAIN_SEPARATOR_STR\">MAIN_SEPARATOR_STR</a></div><div class=\"desc docblock-short\">The primary separator of path components for the current platform.</div></li></ul><h2 id=\"functions\" class=\"section-header\">Functions<a href=\"#functions\" class=\"anchor\">§</a></h2><ul class=\"item-table\"><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.absolute.html\" title=\"fn std::path::absolute\">absolute</a></div><div class=\"desc docblock-short\">Makes the path absolute without accessing the filesystem.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.is_separator.html\" title=\"fn std::path::is_separator\">is_separator</a></div><div class=\"desc docblock-short\">Determines whether the character is one of the permitted path\nseparators for the current platform.</div></li></ul></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:11:05.424Z"
}