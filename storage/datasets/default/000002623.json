{
	"title": "Swizzle in std::simd - Rust",
	"url": "https://doc.rust-lang.org/stable/std/simd/trait.Swizzle.html",
	"markdown": "# Swizzle in std::simd - Rust\n\n```\npub trait Swizzle<const N: usize> {\n    const INDEX: [usize; N];\n\n    // Provided methods\n    fn swizzle<T, const M: usize>(vector: Simd<T, M>) -> Simd<T, N>\n       where T: SimdElement,\n             LaneCount<N>: SupportedLaneCount,\n             LaneCount<M>: SupportedLaneCount { ... }\n    fn concat_swizzle<T, const M: usize>(\n        first: Simd<T, M>,\n        second: Simd<T, M>,\n    ) -> Simd<T, N>\n       where T: SimdElement,\n             LaneCount<N>: SupportedLaneCount,\n             LaneCount<M>: SupportedLaneCount { ... }\n    fn swizzle_mask<T, const M: usize>(mask: Mask<T, M>) -> Mask<T, N>\n       where T: MaskElement,\n             LaneCount<N>: SupportedLaneCount,\n             LaneCount<M>: SupportedLaneCount { ... }\n    fn concat_swizzle_mask<T, const M: usize>(\n        first: Mask<T, M>,\n        second: Mask<T, M>,\n    ) -> Mask<T, N>\n       where T: MaskElement,\n             LaneCount<N>: SupportedLaneCount,\n             LaneCount<M>: SupportedLaneCount { ... }\n}\n```\n\nðŸ”¬This is a nightly-only experimental API. (`portable_simd`Â [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nExpand description\n\nCreate a vector from the elements of another vector.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/swizzle.rs.html#75)\n\nðŸ”¬This is a nightly-only experimental API. (`portable_simd`Â [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nMap from the elements of the input vector to the output vector.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/swizzle.rs.html#82-86)\n\nðŸ”¬This is a nightly-only experimental API. (`portable_simd`Â [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate a new vector from the elements of `vector`.\n\nLane `i` of the output is `vector[Self::INDEX[i]]`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/swizzle.rs.html#118-122)\n\nðŸ”¬This is a nightly-only experimental API. (`portable_simd`Â [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate a new vector from the elements of `first` and `second`.\n\nLane `i` of the output is `concat[Self::INDEX[i]]`, where `concat` is the concatenation of `first` and `second`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/swizzle.rs.html#154-158)\n\nðŸ”¬This is a nightly-only experimental API. (`portable_simd`Â [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate a new mask from the elements of `mask`.\n\nElement `i` of the output is `concat[Self::INDEX[i]]`, where `concat` is the concatenation of `first` and `second`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/swizzle.rs.html#170-174)\n\nðŸ”¬This is a nightly-only experimental API. (`portable_simd`Â [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate a new mask from the elements of `first` and `second`.\n\nElement `i` of the output is `concat[Self::INDEX[i]]`, where `concat` is the concatenation of `first` and `second`.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Create a vector from the elements of another vector.\"><title>Swizzle in std::simd - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc trait\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">Swizzle</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">Swizzle</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#required-associated-consts\">Required Associated Constants</a></h3><ul class=\"block\"><li><a href=\"#associatedconstant.INDEX\">INDEX</a></li></ul><h3><a href=\"#provided-methods\">Provided Methods</a></h3><ul class=\"block\"><li><a href=\"#method.concat_swizzle\">concat_swizzle</a></li><li><a href=\"#method.concat_swizzle_mask\">concat_swizzle_mask</a></li><li><a href=\"#method.swizzle\">swizzle</a></li><li><a href=\"#method.swizzle_mask\">swizzle_mask</a></li></ul><h3><a href=\"#object-safety\">Object Safety</a></h3><h3><a href=\"#implementors\">Implementors</a></h3></section><h2><a href=\"index.html\">In std::simd</a></h2><h3><a href=\"index.html#modules\">Modules</a></h3><ul class=\"block mod\"><li><a href=\"cmp/index.html\">cmp</a></li><li><a href=\"num/index.html\">num</a></li><li><a href=\"prelude/index.html\">prelude</a></li><li><a href=\"ptr/index.html\">ptr</a></li></ul><h3><a href=\"index.html#macros\">Macros</a></h3><ul class=\"block macro\"><li><a href=\"macro.simd_swizzle.html\">simd_swizzle</a></li></ul><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.LaneCount.html\">LaneCount</a></li><li><a href=\"struct.Mask.html\">Mask</a></li><li><a href=\"struct.Simd.html\">Simd</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.MaskElement.html\">MaskElement</a></li><li><a href=\"trait.SimdCast.html\">SimdCast</a></li><li><a href=\"trait.SimdElement.html\">SimdElement</a></li><li><a href=\"trait.StdFloat.html\">StdFloat</a></li><li><a href=\"trait.SupportedLaneCount.html\">SupportedLaneCount</a></li><li><a href=\"trait.Swizzle.html\">Swizzle</a></li><li><a href=\"trait.ToBytes.html\">ToBytes</a></li></ul><h3><a href=\"index.html#types\">Type Aliases</a></h3><ul class=\"block type\"><li><a href=\"type.f32x1.html\">f32x1</a></li><li><a href=\"type.f32x16.html\">f32x16</a></li><li><a href=\"type.f32x2.html\">f32x2</a></li><li><a href=\"type.f32x32.html\">f32x32</a></li><li><a href=\"type.f32x4.html\">f32x4</a></li><li><a href=\"type.f32x64.html\">f32x64</a></li><li><a href=\"type.f32x8.html\">f32x8</a></li><li><a href=\"type.f64x1.html\">f64x1</a></li><li><a href=\"type.f64x16.html\">f64x16</a></li><li><a href=\"type.f64x2.html\">f64x2</a></li><li><a href=\"type.f64x32.html\">f64x32</a></li><li><a href=\"type.f64x4.html\">f64x4</a></li><li><a href=\"type.f64x64.html\">f64x64</a></li><li><a href=\"type.f64x8.html\">f64x8</a></li><li><a href=\"type.i16x1.html\">i16x1</a></li><li><a href=\"type.i16x16.html\">i16x16</a></li><li><a href=\"type.i16x2.html\">i16x2</a></li><li><a href=\"type.i16x32.html\">i16x32</a></li><li><a href=\"type.i16x4.html\">i16x4</a></li><li><a href=\"type.i16x64.html\">i16x64</a></li><li><a href=\"type.i16x8.html\">i16x8</a></li><li><a href=\"type.i32x1.html\">i32x1</a></li><li><a href=\"type.i32x16.html\">i32x16</a></li><li><a href=\"type.i32x2.html\">i32x2</a></li><li><a href=\"type.i32x32.html\">i32x32</a></li><li><a href=\"type.i32x4.html\">i32x4</a></li><li><a href=\"type.i32x64.html\">i32x64</a></li><li><a href=\"type.i32x8.html\">i32x8</a></li><li><a href=\"type.i64x1.html\">i64x1</a></li><li><a href=\"type.i64x16.html\">i64x16</a></li><li><a href=\"type.i64x2.html\">i64x2</a></li><li><a href=\"type.i64x32.html\">i64x32</a></li><li><a href=\"type.i64x4.html\">i64x4</a></li><li><a href=\"type.i64x64.html\">i64x64</a></li><li><a href=\"type.i64x8.html\">i64x8</a></li><li><a href=\"type.i8x1.html\">i8x1</a></li><li><a href=\"type.i8x16.html\">i8x16</a></li><li><a href=\"type.i8x2.html\">i8x2</a></li><li><a href=\"type.i8x32.html\">i8x32</a></li><li><a href=\"type.i8x4.html\">i8x4</a></li><li><a href=\"type.i8x64.html\">i8x64</a></li><li><a href=\"type.i8x8.html\">i8x8</a></li><li><a href=\"type.isizex1.html\">isizex1</a></li><li><a href=\"type.isizex16.html\">isizex16</a></li><li><a href=\"type.isizex2.html\">isizex2</a></li><li><a href=\"type.isizex32.html\">isizex32</a></li><li><a href=\"type.isizex4.html\">isizex4</a></li><li><a href=\"type.isizex64.html\">isizex64</a></li><li><a href=\"type.isizex8.html\">isizex8</a></li><li><a href=\"type.mask16x1.html\">mask16x1</a></li><li><a href=\"type.mask16x16.html\">mask16x16</a></li><li><a href=\"type.mask16x2.html\">mask16x2</a></li><li><a href=\"type.mask16x32.html\">mask16x32</a></li><li><a href=\"type.mask16x4.html\">mask16x4</a></li><li><a href=\"type.mask16x64.html\">mask16x64</a></li><li><a href=\"type.mask16x8.html\">mask16x8</a></li><li><a href=\"type.mask32x1.html\">mask32x1</a></li><li><a href=\"type.mask32x16.html\">mask32x16</a></li><li><a href=\"type.mask32x2.html\">mask32x2</a></li><li><a href=\"type.mask32x32.html\">mask32x32</a></li><li><a href=\"type.mask32x4.html\">mask32x4</a></li><li><a href=\"type.mask32x64.html\">mask32x64</a></li><li><a href=\"type.mask32x8.html\">mask32x8</a></li><li><a href=\"type.mask64x1.html\">mask64x1</a></li><li><a href=\"type.mask64x16.html\">mask64x16</a></li><li><a href=\"type.mask64x2.html\">mask64x2</a></li><li><a href=\"type.mask64x32.html\">mask64x32</a></li><li><a href=\"type.mask64x4.html\">mask64x4</a></li><li><a href=\"type.mask64x64.html\">mask64x64</a></li><li><a href=\"type.mask64x8.html\">mask64x8</a></li><li><a href=\"type.mask8x1.html\">mask8x1</a></li><li><a href=\"type.mask8x16.html\">mask8x16</a></li><li><a href=\"type.mask8x2.html\">mask8x2</a></li><li><a href=\"type.mask8x32.html\">mask8x32</a></li><li><a href=\"type.mask8x4.html\">mask8x4</a></li><li><a href=\"type.mask8x64.html\">mask8x64</a></li><li><a href=\"type.mask8x8.html\">mask8x8</a></li><li><a href=\"type.masksizex1.html\">masksizex1</a></li><li><a href=\"type.masksizex16.html\">masksizex16</a></li><li><a href=\"type.masksizex2.html\">masksizex2</a></li><li><a href=\"type.masksizex32.html\">masksizex32</a></li><li><a href=\"type.masksizex4.html\">masksizex4</a></li><li><a href=\"type.masksizex64.html\">masksizex64</a></li><li><a href=\"type.masksizex8.html\">masksizex8</a></li><li><a href=\"type.u16x1.html\">u16x1</a></li><li><a href=\"type.u16x16.html\">u16x16</a></li><li><a href=\"type.u16x2.html\">u16x2</a></li><li><a href=\"type.u16x32.html\">u16x32</a></li><li><a href=\"type.u16x4.html\">u16x4</a></li><li><a href=\"type.u16x64.html\">u16x64</a></li><li><a href=\"type.u16x8.html\">u16x8</a></li><li><a href=\"type.u32x1.html\">u32x1</a></li><li><a href=\"type.u32x16.html\">u32x16</a></li><li><a href=\"type.u32x2.html\">u32x2</a></li><li><a href=\"type.u32x32.html\">u32x32</a></li><li><a href=\"type.u32x4.html\">u32x4</a></li><li><a href=\"type.u32x64.html\">u32x64</a></li><li><a href=\"type.u32x8.html\">u32x8</a></li><li><a href=\"type.u64x1.html\">u64x1</a></li><li><a href=\"type.u64x16.html\">u64x16</a></li><li><a href=\"type.u64x2.html\">u64x2</a></li><li><a href=\"type.u64x32.html\">u64x32</a></li><li><a href=\"type.u64x4.html\">u64x4</a></li><li><a href=\"type.u64x64.html\">u64x64</a></li><li><a href=\"type.u64x8.html\">u64x8</a></li><li><a href=\"type.u8x1.html\">u8x1</a></li><li><a href=\"type.u8x16.html\">u8x16</a></li><li><a href=\"type.u8x2.html\">u8x2</a></li><li><a href=\"type.u8x32.html\">u8x32</a></li><li><a href=\"type.u8x4.html\">u8x4</a></li><li><a href=\"type.u8x64.html\">u8x64</a></li><li><a href=\"type.u8x8.html\">u8x8</a></li><li><a href=\"type.usizex1.html\">usizex1</a></li><li><a href=\"type.usizex16.html\">usizex16</a></li><li><a href=\"type.usizex2.html\">usizex2</a></li><li><a href=\"type.usizex32.html\">usizex32</a></li><li><a href=\"type.usizex4.html\">usizex4</a></li><li><a href=\"type.usizex64.html\">usizex64</a></li><li><a href=\"type.usizex8.html\">usizex8</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type â€˜Sâ€™ or â€˜/â€™ to search, â€˜?â€™ for more optionsâ€¦\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Trait <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">simd</a>::<wbr><a class=\"trait\" href=\"#\">Swizzle</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/swizzle.rs.html#73\">source</a> Â· <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>âˆ’</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub trait Swizzle&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; {\n    const <a href=\"#associatedconstant.INDEX\" class=\"constant\">INDEX</a>: [<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>; <a class=\"primitive\" href=\"../primitive.array.html\">N</a>];\n\n    // Provided methods\n    fn <a href=\"#method.swizzle\" class=\"fn\">swizzle</a>&lt;T, const M: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;(vector: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, M&gt;) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;\n       <span class=\"where\">where T: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n             <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,\n             <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;M&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a></span> { ... }\n<span class=\"item-spacer\"></span>    fn <a href=\"#method.concat_swizzle\" class=\"fn\">concat_swizzle</a>&lt;T, const M: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;(\n        first: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, M&gt;,\n        second: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, M&gt;,\n    ) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;\n       <span class=\"where\">where T: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n             <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,\n             <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;M&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a></span> { ... }\n<span class=\"item-spacer\"></span>    fn <a href=\"#method.swizzle_mask\" class=\"fn\">swizzle_mask</a>&lt;T, const M: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;(mask: <a class=\"struct\" href=\"prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, M&gt;) -&gt; <a class=\"struct\" href=\"prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;\n       <span class=\"where\">where T: <a class=\"trait\" href=\"trait.MaskElement.html\" title=\"trait std::simd::MaskElement\">MaskElement</a>,\n             <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,\n             <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;M&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a></span> { ... }\n<span class=\"item-spacer\"></span>    fn <a href=\"#method.concat_swizzle_mask\" class=\"fn\">concat_swizzle_mask</a>&lt;T, const M: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;(\n        first: <a class=\"struct\" href=\"prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, M&gt;,\n        second: <a class=\"struct\" href=\"prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, M&gt;,\n    ) -&gt; <a class=\"struct\" href=\"prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;\n       <span class=\"where\">where T: <a class=\"trait\" href=\"trait.MaskElement.html\" title=\"trait std::simd::MaskElement\">MaskElement</a>,\n             <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,\n             <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;M&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a></span> { ... }\n}</code></pre><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Create a vector from the elements of another vector.</p>\n</div></details><h2 id=\"required-associated-consts\" class=\"section-header\">Required Associated Constants<a href=\"#required-associated-consts\" class=\"anchor\">Â§</a></h2><div class=\"methods\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedconstant.INDEX\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/swizzle.rs.html#75\">source</a><h4 class=\"code-header\">const <a href=\"#associatedconstant.INDEX\" class=\"constant\">INDEX</a>: [<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>; <a class=\"primitive\" href=\"../primitive.array.html\">N</a>]</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Map from the elements of the input vector to the output vector.</p>\n</div></details></div><h2 id=\"provided-methods\" class=\"section-header\">Provided Methods<a href=\"#provided-methods\" class=\"anchor\">Â§</a></h2><div class=\"methods\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.swizzle\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/swizzle.rs.html#82-86\">source</a><h4 class=\"code-header\">fn <a href=\"#method.swizzle\" class=\"fn\">swizzle</a>&lt;T, const M: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;(vector: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, M&gt;) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;M&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Create a new vector from the elements of <code>vector</code>.</p>\n<p>Lane <code>i</code> of the output is <code>vector[Self::INDEX[i]]</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.concat_swizzle\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/swizzle.rs.html#118-122\">source</a><h4 class=\"code-header\">fn <a href=\"#method.concat_swizzle\" class=\"fn\">concat_swizzle</a>&lt;T, const M: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;(\n    first: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, M&gt;,\n    second: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, M&gt;,\n) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;M&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Create a new vector from the elements of <code>first</code> and <code>second</code>.</p>\n<p>Lane <code>i</code> of the output is <code>concat[Self::INDEX[i]]</code>, where <code>concat</code> is the concatenation of\n<code>first</code> and <code>second</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.swizzle_mask\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/swizzle.rs.html#154-158\">source</a><h4 class=\"code-header\">fn <a href=\"#method.swizzle_mask\" class=\"fn\">swizzle_mask</a>&lt;T, const M: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;(mask: <a class=\"struct\" href=\"prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, M&gt;) -&gt; <a class=\"struct\" href=\"prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.MaskElement.html\" title=\"trait std::simd::MaskElement\">MaskElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;M&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Create a new mask from the elements of <code>mask</code>.</p>\n<p>Element <code>i</code> of the output is <code>concat[Self::INDEX[i]]</code>, where <code>concat</code> is the concatenation of\n<code>first</code> and <code>second</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.concat_swizzle_mask\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/swizzle.rs.html#170-174\">source</a><h4 class=\"code-header\">fn <a href=\"#method.concat_swizzle_mask\" class=\"fn\">concat_swizzle_mask</a>&lt;T, const M: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;(\n    first: <a class=\"struct\" href=\"prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, M&gt;,\n    second: <a class=\"struct\" href=\"prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, M&gt;,\n) -&gt; <a class=\"struct\" href=\"prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.MaskElement.html\" title=\"trait std::simd::MaskElement\">MaskElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;M&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Create a new mask from the elements of <code>first</code> and <code>second</code>.</p>\n<p>Element <code>i</code> of the output is <code>concat[Self::INDEX[i]]</code>, where <code>concat</code> is the concatenation of\n<code>first</code> and <code>second</code>.</p>\n</div></details></div><h2 id=\"object-safety\" class=\"section-header\">Object Safety<a href=\"#object-safety\" class=\"anchor\">Â§</a></h2><div class=\"object-safety-info\">This trait is <b>not</b> <a href=\"https://doc.rust-lang.org/1.80.0/reference/items/traits.html#object-safety\">object safe</a>.</div><h2 id=\"implementors\" class=\"section-header\">Implementors<a href=\"#implementors\" class=\"anchor\">Â§</a></h2><div id=\"implementors-list\"></div><script src=\"../../trait.impl/core/core_simd/swizzle/trait.Swizzle.js\" async=\"\"></script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:24:18.455Z"
}