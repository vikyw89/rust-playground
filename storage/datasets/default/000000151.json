{
	"title": "Specifying Dependencies - The Cargo Book",
	"url": "https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html",
	"markdown": "# Specifying Dependencies - The Cargo Book\n\nYour crates can depend on other libraries from [crates.io](https://crates.io/) or other registries, `git` repositories, or subdirectories on your local file system. You can also temporarily override the location of a dependency — for example, to be able to test out a bug fix in the dependency that you are working on locally. You can have different dependencies for different platforms, and dependencies that are only used during development. Let’s take a look at how to do each of these.\n\n## [Specifying dependencies from crates.io](#specifying-dependencies-from-cratesio)\n\nCargo is configured to look for dependencies on [crates.io](https://crates.io/) by default. Only the name and a version string are required in this case. In [the cargo guide](../guide/index.html), we specified a dependency on the `time` crate:\n\n```toml\n[dependencies]\ntime = \"0.1.12\"\n\n```\n\nThe string `\"0.1.12\"` is a version requirement. Although it looks like a specific _version_ of the `time` crate, it actually specifies a _range_ of versions and allows [SemVer](https://semver.org/) compatible updates. An update is allowed if the new version number does not modify the left-most non-zero number in the major, minor, patch grouping. In this case, if we ran `cargo update time`, cargo should update us to version `0.1.13` if it is the latest `0.1.z` release, but would not update us to `0.2.0`. If instead we had specified the version string as `1.0`, cargo should update to `1.1` if it is the latest `1.y` release, but not `2.0`. The version `0.0.x` is not considered compatible with any other version.\n\nHere are some more examples of version requirements and the versions that would be allowed with them:\n\n```notrust\n1.2.3  :=  >=1.2.3, <2.0.0\n1.2    :=  >=1.2.0, <2.0.0\n1      :=  >=1.0.0, <2.0.0\n0.2.3  :=  >=0.2.3, <0.3.0\n0.2    :=  >=0.2.0, <0.3.0\n0.0.3  :=  >=0.0.3, <0.0.4\n0.0    :=  >=0.0.0, <0.1.0\n0      :=  >=0.0.0, <1.0.0\n\n```\n\nThis compatibility convention is different from SemVer in the way it treats versions before 1.0.0. While SemVer says there is no compatibility before 1.0.0, Cargo considers `0.x.y` to be compatible with `0.x.z`, where `y ≥ z` and `x > 0`.\n\nIt is possible to further tweak the logic for selecting compatible versions using special operators as described in the [Version requirement syntax](#version-requirement-syntax) section.\n\nUse the default version requirement strategy, e.g. `log = \"1.2.3\"` where possible to maximize compatibility.\n\n## [Version requirement syntax](#version-requirement-syntax)\n\n### [Caret requirements](#caret-requirements)\n\n**Caret requirements** are the default version requirement strategy. This version strategy allows [SemVer](https://semver.org/) compatible updates. They are specified as version requirements with a leading caret (`^`).\n\n`^1.2.3` is an example of a caret requirement.\n\nLeaving off the caret is a simplified equivalent syntax to using caret requirements. While caret requirements are the default, it is recommended to use the simplified syntax when possible.\n\n`log = \"^1.2.3\"` is exactly equivalent to `log = \"1.2.3\"`.\n\n### [Tilde requirements](#tilde-requirements)\n\n**Tilde requirements** specify a minimal version with some ability to update. If you specify a major, minor, and patch version or only a major and minor version, only patch-level changes are allowed. If you only specify a major version, then minor- and patch-level changes are allowed.\n\n`~1.2.3` is an example of a tilde requirement.\n\n```notrust\n~1.2.3  := >=1.2.3, <1.3.0\n~1.2    := >=1.2.0, <1.3.0\n~1      := >=1.0.0, <2.0.0\n\n```\n\n### [Wildcard requirements](#wildcard-requirements)\n\n**Wildcard requirements** allow for any version where the wildcard is positioned.\n\n`*`, `1.*` and `1.2.*` are examples of wildcard requirements.\n\n```notrust\n*     := >=0.0.0\n1.*   := >=1.0.0, <2.0.0\n1.2.* := >=1.2.0, <1.3.0\n\n```\n\n> **Note**: [crates.io](https://crates.io/) does not allow bare `*` versions.\n\n### [Comparison requirements](#comparison-requirements)\n\n**Comparison requirements** allow manually specifying a version range or an exact version to depend on.\n\nHere are some examples of comparison requirements:\n\n```notrust\n>= 1.2.0\n> 1\n< 2\n= 1.2.3\n\n```\n\n### [Multiple version requirements](#multiple-version-requirements)\n\nAs shown in the examples above, multiple version requirements can be separated with a comma, e.g., `>= 1.2, < 1.5`.\n\n> **Recommendation:** When in doubt, use the default version requirement operator.\n> \n> In rare circumstances, a package with a “public dependency” (re-exports the dependency or interoperates with it in its public API) that is compatible with multiple semver-incompatible versions (e.g. only uses a simple type that hasn’t changed between releases, like an `Id`) may support users choosing which version of the “public dependency” to use. In this case, a version requirement like `\">=0.4, <2\"` may be of interest. _However_ users of the package will likely run into errors and need to manually select a version of the “public dependency” via `cargo update` if they also depend on it as Cargo might pick different versions of the “public dependency” when [resolving dependency versions](resolver.html) (see [#10599](https://github.com/rust-lang/cargo/issues/10599)).\n> \n> Avoid constraining the upper bound of a version to be anything less than the next semver incompatible version (e.g. avoid `\">=2.0, <2.4\"`) as other packages in the dependency tree may require a newer version, leading to an unresolvable error (see [#9029](https://github.com/rust-lang/cargo/issues/9029)). Consider whether controlling the version in your [`Cargo.lock`](../guide/cargo-toml-vs-cargo-lock.html) would be more appropriate.\n> \n> In some instances this won’t matter or the benefits might outweigh the cost, including:\n> \n> -   When no one else depends on your package e.g. it only has a `[[bin]]`\n> -   When depending on a pre-release package and wishing to avoid breaking changes then a fully specified `\"=1.2.3-alpha.3\"` might be warranted (see [#2222](https://github.com/rust-lang/cargo/issues/2222))\n> -   When a library re-exports a proc-macro but the proc-macro generates code that calls into the re-exporting library then a fully specified `=1.2.3` might be warranted to ensure the proc-macro isn’t newer than the re-exporting library and generating code that uses parts of the API that don’t exist within the current version\n\n## [Specifying dependencies from other registries](#specifying-dependencies-from-other-registries)\n\nTo specify a dependency from a registry other than [crates.io](https://crates.io/) set the `registry` key to the name of the registry to use:\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n\n```\n\nwhere `my-registry` is the registry name configured in `.cargo/config.toml` file. See the [registries documentation](registries.html) for more information.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with dependencies on code published outside of [crates.io](https://crates.io/).\n\n## [Specifying dependencies from `git` repositories](#specifying-dependencies-from-git-repositories)\n\nTo depend on a library located in a `git` repository, the minimum information you need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nregex = { git = \"https://github.com/rust-lang/regex.git\" }\n\n```\n\nCargo fetches the `git` repository at that location and traverses the file tree to find `Cargo.toml` file for the requested crate anywhere inside the `git` repository. For example, `regex-lite` and `regex-syntax` are members of `rust-lang/regex` repo and can be referred to by the repo’s root URL (`https://github.com/rust-lang/regex.git`) regardless of where in the file tree they reside.\n\n```toml\nregex-lite   = { git = \"https://github.com/rust-lang/regex.git\" }\nregex-syntax = { git = \"https://github.com/rust-lang/regex.git\" }\n\n```\n\nThe above rule does not apply to [`path` dependencies](#specifying-path-dependencies).\n\n### [Choice of commit](#choice-of-commit)\n\nCargo assumes that we intend to use the latest commit on the default branch to build our package if we only specify the repo URL, as in the examples above.\n\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to be more specific about which commit to use. Here’s an example of using the latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nregex = { git = \"https://github.com/rust-lang/regex.git\", branch = \"next\" }\n\n```\n\nAnything that is not a branch or a tag falls under `rev` key. This can be a commit hash like `rev = \"4c59b707\"`, or a named reference exposed by the remote repository such as `rev = \"refs/pull/493/head\"`.\n\nWhat references are available for the `rev` key varies by where the repo is hosted.  \nGitHub exposes a reference to the most recent commit of every pull request as in the example above. Other git hosts may provide something equivalent under a different naming scheme.\n\n**More `git` dependency examples:**\n\n```toml\n# .git suffix can be omitted if the host accepts such URLs - both examples work the same\nregex = { git = \"https://github.com/rust-lang/regex\" }\nregex = { git = \"https://github.com/rust-lang/regex.git\" }\n\n# a commit with a particular tag\nregex = { git = \"https://github.com/rust-lang/regex.git\", tag = \"1.10.3\" }\n\n# a commit by its SHA1 hash\nregex = { git = \"https://github.com/rust-lang/regex.git\", rev = \"0c0990399270277832fbb5b91a1fa118e6f63dba\" }\n\n# HEAD commit of PR 493\nregex = { git = \"https://github.com/rust-lang/regex.git\", rev = \"refs/pull/493/head\" }\n\n# INVALID EXAMPLES\n\n# specifying the commit after # ignores the commit ID and generates a warning\nregex = { git = \"https://github.com/rust-lang/regex.git#4c59b70\" }\n\n# git and path cannot be used at the same time\nregex = { git = \"https://github.com/rust-lang/regex.git#4c59b70\", path = \"../regex\" }\n\n```\n\nCargo locks the commits of `git` dependencies in `Cargo.lock` file at the time of their addition and checks for updates only when you run `cargo update` command.\n\n### [The role of the `version` key](#the-role-of-the-version-key)\n\nThe `version` key always implies that the package is available in a registry, regardless of the presence of `git` or `path` keys.\n\nThe `version` key does _not_ affect which commit is used when Cargo retrieves the `git` dependency, but Cargo checks the version information in the dependency’s `Cargo.toml` file against the `version` key and raises an error if the check fails.\n\nIn this example, Cargo retrieves the HEAD commit of the branch called `next` from Git and checks if the crate’s version is compatible with `version = \"1.10.3\"`:\n\n```toml\n[dependencies]\nregex = { version = \"1.10.3\", git = \"https://github.com/rust-lang/regex.git\", branch = \"next\" }\n\n```\n\n`version`, `git`, and `path` keys are considered separate locations for resolving the dependency. See [Multiple locations](#multiple-locations) section below for detailed explanations.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with dependencies on code published outside of [crates.io](https://crates.io/) itself ([dev-dependencies](#development-dependencies) are ignored). See the [Multiple locations](#multiple-locations) section for a fallback alternative for `git` and `path` dependencies.\n\n### [Accessing private Git repositories](#accessing-private-git-repositories)\n\nSee [Git Authentication](../appendix/git-authentication.html) for help with Git authentication for private repos.\n\n## [Specifying path dependencies](#specifying-path-dependencies)\n\nOver time, our `hello_world` package from [the guide](../guide/index.html) has grown significantly in size! It’s gotten to the point that we probably want to split out a separate crate for others to use. To do this Cargo supports **path dependencies** which are typically sub-crates that live within one repository. Let’s start by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and `src` folder are ready to be configured. To tell Cargo about this, open up `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found in the `hello_utils` folder, relative to the `Cargo.toml` file it’s written in.\n\nThe next `cargo build` will automatically build `hello_utils` and all of its dependencies.\n\n### [No local path traversal](#no-local-path-traversal)\n\nThe local paths must point to the exact folder with the dependency’s `Cargo.toml`. Unlike with `git` dependencies, Cargo does not traverse local paths. For example, if `regex-lite` and `regex-syntax` are members of a locally cloned `rust-lang/regex` repo, they have to be referred to by the full path:\n\n```toml\n# git key accepts the repo root URL and Cargo traverses the tree to find the crate\n[dependencies]\nregex-lite   = { git = \"https://github.com/rust-lang/regex.git\" }\nregex-syntax = { git = \"https://github.com/rust-lang/regex.git\" }\n\n# path key requires the member name to be included in the local path\n[dependencies]\nregex-lite   = { path = \"../regex/regex-lite\" }\nregex-syntax = { path = \"../regex/regex-syntax\" }\n\n```\n\n### [Local paths in published crates](#local-paths-in-published-crates)\n\nCrates that use dependencies specified with only a path are not permitted on [crates.io](https://crates.io/).\n\nIf we wanted to publish our `hello_world` crate, we would need to publish a version of `hello_utils` to [crates.io](https://crates.io/) as a separate crate and specify its version in the dependencies line of `hello_world`:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\", version = \"0.1.0\" }\n\n```\n\nThe use of `path` and `version` keys together is explained in the [Multiple locations](#multiple-locations) section.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with dependencies on code outside of [crates.io](https://crates.io/), except for [dev-dependencies](#development-dependencies). See the [Multiple locations](#multiple-locations) section for a fallback alternative for `git` and `path` dependencies.\n\n## [Multiple locations](#multiple-locations)\n\nIt is possible to specify both a registry version and a `git` or `path` location. The `git` or `path` dependency will be used locally (in which case the `version` is checked against the local copy), and when published to a registry like [crates.io](https://crates.io/), it will use the registry version. Other combinations are not allowed. Examples:\n\n```toml\n[dependencies]\n# Uses `my-bitflags` when used locally, and uses\n# version 1.0 from crates.io when published.\nbitflags = { path = \"my-bitflags\", version = \"1.0\" }\n\n# Uses the given git repo when used locally, and uses\n# version 1.0 from crates.io when published.\nsmallvec = { git = \"https://github.com/servo/rust-smallvec.git\", version = \"1.0\" }\n\n# N.B. that if a version doesn't match, Cargo will fail to compile!\n\n```\n\nOne example where this can be useful is when you have split up a library into multiple packages within the same workspace. You can then use `path` dependencies to point to the local packages within the workspace to use the local version during development, and then use the [crates.io](https://crates.io/) version once it is published. This is similar to specifying an [override](overriding-dependencies.html), but only applies to this one dependency declaration.\n\n## [Platform specific dependencies](#platform-specific-dependencies)\n\nPlatform-specific dependencies take the same format, but are listed under a `target` section. Normally Rust-like [`#[cfg]` syntax](../../reference/conditional-compilation.html) will be used to define these sections:\n\n```toml\n[target.'cfg(windows)'.dependencies]\nwinhttp = \"0.4.0\"\n\n[target.'cfg(unix)'.dependencies]\nopenssl = \"1.0.1\"\n\n[target.'cfg(target_arch = \"x86\")'.dependencies]\nnative-i686 = { path = \"native/i686\" }\n\n[target.'cfg(target_arch = \"x86_64\")'.dependencies]\nnative-x86_64 = { path = \"native/x86_64\" }\n\n```\n\nLike with Rust, the syntax here supports the `not`, `any`, and `all` operators to combine various cfg name/value pairs.\n\nIf you want to know which cfg targets are available on your platform, run `rustc --print=cfg` from the command line. If you want to know which `cfg` targets are available for another platform, such as 64-bit Windows, run `rustc --print=cfg --target=x86_64-pc-windows-msvc`.\n\nUnlike in your Rust source code, you cannot use `[target.'cfg(feature = \"fancy-feature\")'.dependencies]` to add dependencies based on optional features. Use [the `[features]` section](features.html) instead:\n\n```toml\n[dependencies]\nfoo = { version = \"1.0\", optional = true }\nbar = { version = \"1.0\", optional = true }\n\n[features]\nfancy-feature = [\"foo\", \"bar\"]\n\n```\n\nThe same applies to `cfg(debug_assertions)`, `cfg(test)` and `cfg(proc_macro)`. These values will not work as expected and will always have the default value returned by `rustc --print=cfg`. There is currently no way to add dependencies based on these configuration values.\n\nIn addition to `#[cfg]` syntax, Cargo also supports listing out the full target the dependencies would apply to:\n\n```toml\n[target.x86_64-pc-windows-gnu.dependencies]\nwinhttp = \"0.4.0\"\n\n[target.i686-unknown-linux-gnu.dependencies]\nopenssl = \"1.0.1\"\n\n```\n\n### [Custom target specifications](#custom-target-specifications)\n\nIf you’re using a custom target specification (such as `--target foo/bar.json`), use the base filename without the `.json` extension:\n\n```toml\n[target.bar.dependencies]\nwinhttp = \"0.4.0\"\n\n[target.my-special-i686-platform.dependencies]\nopenssl = \"1.0.1\"\nnative = { path = \"native/i686\" }\n\n```\n\n> **Note**: Custom target specifications are not usable on the stable channel.\n\n## [Development dependencies](#development-dependencies)\n\nYou can add a `[dev-dependencies]` section to your `Cargo.toml` whose format is equivalent to `[dependencies]`:\n\n```toml\n[dev-dependencies]\ntempdir = \"0.3\"\n\n```\n\nDev-dependencies are not used when compiling a package for building, but are used for compiling tests, examples, and benchmarks.\n\nThese dependencies are _not_ propagated to other packages which depend on this package.\n\nYou can also have target-specific development dependencies by using `dev-dependencies` in the target section header instead of `dependencies`. For example:\n\n```toml\n[target.'cfg(unix)'.dev-dependencies]\nmio = \"0.0.1\"\n\n```\n\n> **Note**: When a package is published, only dev-dependencies that specify a `version` will be included in the published crate. For most use cases, dev-dependencies are not needed when published, though some users (like OS packagers) may want to run tests within a crate, so providing a `version` if possible can still be beneficial.\n\n## [Build dependencies](#build-dependencies)\n\nYou can depend on other Cargo-based crates for use in your build scripts. Dependencies are declared through the `build-dependencies` section of the manifest:\n\n```toml\n[build-dependencies]\ncc = \"1.0.3\"\n\n```\n\nYou can also have target-specific build dependencies by using `build-dependencies` in the target section header instead of `dependencies`. For example:\n\n```toml\n[target.'cfg(unix)'.build-dependencies]\ncc = \"1.0.3\"\n\n```\n\nIn this case, the dependency will only be built when the host platform matches the specified target.\n\nThe build script **does not** have access to the dependencies listed in the `dependencies` or `dev-dependencies` section. Build dependencies will likewise not be available to the package itself unless listed under the `dependencies` section as well. A package itself and its build script are built separately, so their dependencies need not coincide. Cargo is kept simpler and cleaner by using independent dependencies for independent purposes.\n\n## [Choosing features](#choosing-features)\n\nIf a package you depend on offers conditional features, you can specify which to use:\n\n```toml\n[dependencies.awesome]\nversion = \"1.3.5\"\ndefault-features = false # do not include the default features, and optionally\n                         # cherry-pick individual features\nfeatures = [\"secure-password\", \"civet\"]\n\n```\n\nMore information about features can be found in the [features chapter](about:blank/features.html#dependency-features).\n\n## [Renaming dependencies in `Cargo.toml`](#renaming-dependencies-in-cargotoml)\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a dependency typically matches up to the name of the crate you import from in the code. For some projects, though, you may wish to reference the crate with a different name in the code regardless of how it’s published on crates.io. For example you may wish to:\n\n-   Avoid the need to `use foo as bar` in Rust source.\n-   Depend on multiple versions of a crate.\n-   Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section of which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project.git\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own `Cargo.toml`, so we’re explicitly using the `package` key to inform Cargo that we want the `foo` package even though we’re calling it something else locally. The `package` key, if not specified, defaults to the name of the dependency being requested.\n\nNote that if you have an optional dependency like:\n\n```toml\n[dependencies]\nbar = { version = \"0.1\", package = 'foo', optional = true }\n\n```\n\nyou’re depending on the crate `foo` from crates.io, but your crate has a `bar` feature instead of a `foo` feature. That is, names of features take after the name of the dependency, not the package name, when renamed.\n\nEnabling transitive dependencies works similarly, for example we could add the following to the above manifest:\n\n```toml\n[features]\nlog-debug = ['bar/log-debug'] # using 'foo/log-debug' would be an error!\n\n```\n\n## [Inheriting a dependency from a workspace](#inheriting-a-dependency-from-a-workspace)\n\nDependencies can be inherited from a workspace by specifying the dependency in the workspace’s [`[workspace.dependencies]`](about:blank/workspaces.html#the-dependencies-table) table. After that, add it to the `[dependencies]` table with `workspace = true`.\n\nAlong with the `workspace` key, dependencies can also include these keys:\n\n-   [`optional`](about:blank/features.html#optional-dependencies): Note that the`[workspace.dependencies]` table is not allowed to specify `optional`.\n-   [`features`](features.html): These are additive with the features declared in the `[workspace.dependencies]`\n\nOther than `optional` and `features`, inherited dependencies cannot use any other dependency key (such as `version` or `default-features`).\n\nDependencies in the `[dependencies]`, `[dev-dependencies]`, `[build-dependencies]`, and `[target.\"...\".dependencies]` sections support the ability to reference the `[workspace.dependencies]` definition of dependencies.\n\n```toml\n[package]\nname = \"bar\"\nversion = \"0.2.0\"\n\n[dependencies]\nregex = { workspace = true, features = [\"unicode\"] }\n\n[build-dependencies]\ncc.workspace = true\n\n[dev-dependencies]\nrand = { workspace = true, optional = true }\n\n```",
	"html": "<!DOCTYPE html><html lang=\"en\" class=\"light\" dir=\"ltr\"><head>\n        <!-- Book generated using mdBook -->\n        <meta charset=\"UTF-8\">\n        <title>Specifying Dependencies - The Cargo Book</title>\n\n\n        <!-- Custom HTML head -->\n        <style>\n            dd {\n                margin-bottom: 1em;\n            }\n        </style>\n\n        <meta name=\"description\" content=\"\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <meta name=\"theme-color\" content=\"rgb(255, 255, 255)\">\n\n        <link rel=\"shortcut icon\" href=\"../favicon.png\">\n        <link rel=\"stylesheet\" href=\"../css/variables.css\">\n        <link rel=\"stylesheet\" href=\"../css/general.css\">\n        <link rel=\"stylesheet\" href=\"../css/chrome.css\">\n        <link rel=\"stylesheet\" href=\"../css/print.css\" media=\"print\">\n\n        <!-- Fonts -->\n        <link rel=\"stylesheet\" href=\"../FontAwesome/css/font-awesome.css\">\n        <link rel=\"stylesheet\" href=\"../fonts/fonts.css\">\n\n        <!-- Highlight.js Stylesheets -->\n        <link rel=\"stylesheet\" href=\"../highlight.css\">\n        <link rel=\"stylesheet\" href=\"../tomorrow-night.css\" disabled=\"\">\n        <link rel=\"stylesheet\" href=\"../ayu-highlight.css\" disabled=\"\">\n\n        <!-- Custom theme stylesheets -->\n\n    </head>\n    <body class=\"js sidebar-visible\">\n    <div id=\"body-container\">\n        <!-- Provide site root to javascript -->\n        <script>\n            var path_to_root = \"../\";\n            var default_theme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"navy\" : \"light\";\n        </script>\n\n        <!-- Work around some values being stored in localStorage wrapped in quotes -->\n        <script>\n            try {\n                var theme = localStorage.getItem('mdbook-theme');\n                var sidebar = localStorage.getItem('mdbook-sidebar');\n\n                if (theme.startsWith('\"') && theme.endsWith('\"')) {\n                    localStorage.setItem('mdbook-theme', theme.slice(1, theme.length - 1));\n                }\n\n                if (sidebar.startsWith('\"') && sidebar.endsWith('\"')) {\n                    localStorage.setItem('mdbook-sidebar', sidebar.slice(1, sidebar.length - 1));\n                }\n            } catch (e) { }\n        </script>\n\n        <!-- Set the theme before any content is loaded, prevents flash -->\n        <script>\n            var theme;\n            try { theme = localStorage.getItem('mdbook-theme'); } catch(e) { }\n            if (theme === null || theme === undefined) { theme = default_theme; }\n            var html = document.querySelector('html');\n            html.classList.remove('light')\n            html.classList.add(theme);\n            var body = document.querySelector('body');\n            body.classList.remove('no-js')\n            body.classList.add('js');\n        </script>\n\n        <input type=\"checkbox\" id=\"sidebar-toggle-anchor\" class=\"hidden\">\n\n        <!-- Hide / unhide sidebar before it is displayed -->\n        <script>\n            var body = document.querySelector('body');\n            var sidebar = null;\n            var sidebar_toggle = document.getElementById(\"sidebar-toggle-anchor\");\n            if (document.body.clientWidth >= 1080) {\n                try { sidebar = localStorage.getItem('mdbook-sidebar'); } catch(e) { }\n                sidebar = sidebar || 'visible';\n            } else {\n                sidebar = 'hidden';\n            }\n            sidebar_toggle.checked = sidebar === 'visible';\n            body.classList.remove('sidebar-visible');\n            body.classList.add(\"sidebar-\" + sidebar);\n        </script>\n\n        <nav id=\"sidebar\" class=\"sidebar\" aria-label=\"Table of contents\" aria-hidden=\"false\">\n            <div class=\"sidebar-scrollbox\">\n                <ol class=\"chapter\"><li class=\"chapter-item expanded affix \"><a href=\"../index.html\" tabindex=\"0\">Introduction</a></li><li class=\"chapter-item expanded \"><a href=\"../getting-started/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.</strong> Getting Started</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../getting-started/installation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.1.</strong> Installation</a></li><li class=\"chapter-item expanded \"><a href=\"../getting-started/first-steps.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.2.</strong> First Steps with Cargo</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../guide/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.</strong> Cargo Guide</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../guide/why-cargo-exists.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.1.</strong> Why Cargo Exists</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/creating-a-new-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.2.</strong> Creating a New Package</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/working-on-an-existing-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.3.</strong> Working on an Existing Package</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/dependencies.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.4.</strong> Dependencies</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/project-layout.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.5.</strong> Package Layout</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/cargo-toml-vs-cargo-lock.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.6.</strong> Cargo.toml vs Cargo.lock</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/tests.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.7.</strong> Tests</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/continuous-integration.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.8.</strong> Continuous Integration</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/cargo-home.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.9.</strong> Cargo Home</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/build-cache.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.10.</strong> Build Cache</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.</strong> Cargo Reference</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/specifying-dependencies.html\" class=\"active\" tabindex=\"0\"><strong aria-hidden=\"true\">3.1.</strong> Specifying Dependencies</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/overriding-dependencies.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.1.1.</strong> Overriding Dependencies</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/manifest.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.2.</strong> The Manifest Format</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/cargo-targets.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.2.1.</strong> Cargo Targets</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/workspaces.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.3.</strong> Workspaces</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/features.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.4.</strong> Features</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/features-examples.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.4.1.</strong> Features Examples</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/profiles.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.5.</strong> Profiles</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/config.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.6.</strong> Configuration</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/environment-variables.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.7.</strong> Environment Variables</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/build-scripts.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.8.</strong> Build Scripts</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/build-script-examples.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.8.1.</strong> Build Script Examples</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/publishing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.9.</strong> Publishing on crates.io</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/pkgid-spec.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.10.</strong> Package ID Specifications</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/source-replacement.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.11.</strong> Source Replacement</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/external-tools.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.12.</strong> External Tools</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/registries.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.</strong> Registries</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/registry-authentication.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.1.</strong> Registry Authentication</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/credential-provider-protocol.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.1.1.</strong> Credential Provider Protocol</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/running-a-registry.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.2.</strong> Running a Registry</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/registry-index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.2.1.</strong> Registry Index</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/registry-web-api.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.2.2.</strong> Registry Web API</a></li></ol></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/resolver.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.14.</strong> Dependency Resolution</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/semver.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.15.</strong> SemVer Compatibility</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/future-incompat-report.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.16.</strong> Future incompat report</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/timings.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.17.</strong> Reporting build timings</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/unstable.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.18.</strong> Unstable Features</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../commands/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.</strong> Cargo Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../commands/general-commands.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.</strong> General Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../commands/cargo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.1.</strong> cargo</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-help.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.2.</strong> cargo help</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-version.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.3.</strong> cargo version</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../commands/build-commands.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.</strong> Build Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-bench.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.1.</strong> cargo bench</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-build.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.2.</strong> cargo build</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-check.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.3.</strong> cargo check</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-clean.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.4.</strong> cargo clean</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-doc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.5.</strong> cargo doc</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-fetch.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.6.</strong> cargo fetch</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-fix.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.7.</strong> cargo fix</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-run.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.8.</strong> cargo run</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-rustc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.9.</strong> cargo rustc</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-rustdoc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.10.</strong> cargo rustdoc</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-test.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.11.</strong> cargo test</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-report.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.12.</strong> cargo report</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../commands/manifest-commands.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.</strong> Manifest Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-add.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.1.</strong> cargo add</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-generate-lockfile.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.2.</strong> cargo generate-lockfile</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-locate-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.3.</strong> cargo locate-project</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-metadata.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.4.</strong> cargo metadata</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-pkgid.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.5.</strong> cargo pkgid</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-remove.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.6.</strong> cargo remove</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-tree.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.7.</strong> cargo tree</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-update.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.8.</strong> cargo update</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-vendor.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.9.</strong> cargo vendor</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-verify-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.10.</strong> cargo verify-project</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../commands/package-commands.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.</strong> Package Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-init.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.1.</strong> cargo init</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-install.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.2.</strong> cargo install</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-new.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.3.</strong> cargo new</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-search.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.4.</strong> cargo search</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-uninstall.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.5.</strong> cargo uninstall</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../commands/publishing-commands.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.</strong> Publishing Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-login.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.1.</strong> cargo login</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-logout.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.2.</strong> cargo logout</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-owner.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.3.</strong> cargo owner</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-package.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.4.</strong> cargo package</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-publish.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.5.</strong> cargo publish</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-yank.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.6.</strong> cargo yank</a></li></ol></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../faq.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.</strong> FAQ</a></li><li class=\"chapter-item expanded \"><a href=\"../appendix/glossary.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.</strong> Appendix: Glossary</a></li><li class=\"chapter-item expanded \"><a href=\"../appendix/git-authentication.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.</strong> Appendix: Git Authentication</a></li></ol>\n            </div>\n            <div id=\"sidebar-resize-handle\" class=\"sidebar-resize-handle\">\n                <div class=\"sidebar-resize-indicator\"></div>\n            </div>\n        </nav>\n\n        <!-- Track and set sidebar scroll position -->\n        <script>\n            var sidebarScrollbox = document.querySelector('#sidebar .sidebar-scrollbox');\n            sidebarScrollbox.addEventListener('click', function(e) {\n                if (e.target.tagName === 'A') {\n                    sessionStorage.setItem('sidebar-scroll', sidebarScrollbox.scrollTop);\n                }\n            }, { passive: true });\n            var sidebarScrollTop = sessionStorage.getItem('sidebar-scroll');\n            sessionStorage.removeItem('sidebar-scroll');\n            if (sidebarScrollTop) {\n                // preserve sidebar scroll position when navigating via links within sidebar\n                sidebarScrollbox.scrollTop = sidebarScrollTop;\n            } else {\n                // scroll sidebar to current active section when navigating via \"next/previous chapter\" buttons\n                var activeSection = document.querySelector('#sidebar .active');\n                if (activeSection) {\n                    activeSection.scrollIntoView({ block: 'center' });\n                }\n            }\n        </script>\n\n        <div id=\"page-wrapper\" class=\"page-wrapper\">\n\n            <div class=\"page\">\n                                <div id=\"menu-bar-hover-placeholder\"></div>\n                <div id=\"menu-bar\" class=\"menu-bar\" style=\"top: 0px;\">\n                    <div class=\"left-buttons\">\n                        <label id=\"sidebar-toggle\" class=\"icon-button\" for=\"sidebar-toggle-anchor\" title=\"Toggle Table of Contents\" aria-label=\"Toggle Table of Contents\" aria-controls=\"sidebar\" aria-expanded=\"true\">\n                            <i class=\"fa fa-bars\"></i>\n                        </label>\n                        <button id=\"theme-toggle\" class=\"icon-button\" type=\"button\" title=\"Change theme\" aria-label=\"Change theme\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-controls=\"theme-list\">\n                            <i class=\"fa fa-paint-brush\"></i>\n                        </button>\n                        <ul id=\"theme-list\" class=\"theme-popup\" aria-label=\"Themes\" role=\"menu\">\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme theme-selected\" id=\"light\">Light</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"rust\">Rust</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"coal\">Coal</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"navy\">Navy</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"ayu\">Ayu</button></li>\n                        </ul>\n                        <button id=\"search-toggle\" class=\"icon-button\" type=\"button\" title=\"Search. (Shortkey: s)\" aria-label=\"Toggle Searchbar\" aria-expanded=\"false\" aria-keyshortcuts=\"S\" aria-controls=\"searchbar\">\n                            <i class=\"fa fa-search\"></i>\n                        </button>\n                    </div>\n\n                    <h1 class=\"menu-title\">The Cargo Book</h1>\n\n                    <div class=\"right-buttons\">\n                        <a href=\"../print.html\" title=\"Print this book\" aria-label=\"Print this book\">\n                            <i id=\"print-button\" class=\"fa fa-print\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/cargo/tree/master/src/doc/src\" title=\"Git repository\" aria-label=\"Git repository\">\n                            <i id=\"git-repository-button\" class=\"fa fa-github\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/cargo/edit/master/src/doc/src/reference/specifying-dependencies.md\" title=\"Suggest an edit\" aria-label=\"Suggest an edit\">\n                            <i id=\"git-edit-button\" class=\"fa fa-edit\"></i>\n                        </a>\n\n                    </div>\n                </div>\n\n                <div id=\"search-wrapper\" class=\"hidden\">\n                    <form id=\"searchbar-outer\" class=\"searchbar-outer\">\n                        <input type=\"search\" id=\"searchbar\" name=\"searchbar\" placeholder=\"Search this book ...\" aria-controls=\"searchresults-outer\" aria-describedby=\"searchresults-header\">\n                    </form>\n                    <div id=\"searchresults-outer\" class=\"searchresults-outer hidden\">\n                        <div id=\"searchresults-header\" class=\"searchresults-header\"></div>\n                        <ul id=\"searchresults\">\n                        </ul>\n                    </div>\n                </div>\n\n                <!-- Apply ARIA attributes after the sidebar and the sidebar toggle button are added to the DOM -->\n                <script>\n                    document.getElementById('sidebar-toggle').setAttribute('aria-expanded', sidebar === 'visible');\n                    document.getElementById('sidebar').setAttribute('aria-hidden', sidebar !== 'visible');\n                    Array.from(document.querySelectorAll('#sidebar a')).forEach(function(link) {\n                        link.setAttribute('tabIndex', sidebar === 'visible' ? 0 : -1);\n                    });\n                </script>\n\n                <div id=\"content\" class=\"content\">\n                    <main>\n                        <h1 id=\"specifying-dependencies\"><a class=\"header\" href=\"#specifying-dependencies\">Specifying Dependencies</a></h1>\n<p>Your crates can depend on other libraries from <a href=\"https://crates.io/\">crates.io</a> or other\nregistries, <code class=\"hljs\">git</code> repositories, or subdirectories on your local file system.\nYou can also temporarily override the location of a dependency — for example,\nto be able to test out a bug fix in the dependency that you are working on\nlocally. You can have different dependencies for different platforms, and\ndependencies that are only used during development. Let’s take a look at how\nto do each of these.</p>\n<h2 id=\"specifying-dependencies-from-cratesio\"><a class=\"header\" href=\"#specifying-dependencies-from-cratesio\">Specifying dependencies from crates.io</a></h2>\n<p>Cargo is configured to look for dependencies on <a href=\"https://crates.io/\">crates.io</a> by default. Only\nthe name and a version string are required in this case. In <a href=\"../guide/index.html\">the cargo\nguide</a>, we specified a dependency on the <code class=\"hljs\">time</code> crate:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">time</span> = <span class=\"hljs-string\">\"0.1.12\"</span>\n</code></pre>\n<p>The string <code class=\"hljs\">\"0.1.12\"</code> is a version requirement. Although it looks like a\nspecific <em>version</em> of the <code class=\"hljs\">time</code> crate, it actually specifies a <em>range</em> of\nversions and allows <a href=\"https://semver.org\">SemVer</a> compatible updates. An update is allowed if the new\nversion number does not modify the left-most non-zero number in the major, minor,\npatch grouping. In this case, if we ran <code class=\"hljs\">cargo update time</code>, cargo should\nupdate us to version <code class=\"hljs\">0.1.13</code> if it is the latest <code class=\"hljs\">0.1.z</code> release, but would not\nupdate us to <code class=\"hljs\">0.2.0</code>. If instead we had specified the version string as <code class=\"hljs\">1.0</code>,\ncargo should update to <code class=\"hljs\">1.1</code> if it is the latest <code class=\"hljs\">1.y</code> release, but not <code class=\"hljs\">2.0</code>.\nThe version <code class=\"hljs\">0.0.x</code> is not considered compatible with any other version.</p>\n<p>Here are some more examples of version requirements and the versions that would\nbe allowed with them:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-notrust hljs\">1.2.3  :=  &gt;=1.2.3, &lt;2.0.0\n1.2    :=  &gt;=1.2.0, &lt;2.0.0\n1      :=  &gt;=1.0.0, &lt;2.0.0\n0.2.3  :=  &gt;=0.2.3, &lt;0.3.0\n0.2    :=  &gt;=0.2.0, &lt;0.3.0\n0.0.3  :=  &gt;=0.0.3, &lt;0.0.4\n0.0    :=  &gt;=0.0.0, &lt;0.1.0\n0      :=  &gt;=0.0.0, &lt;1.0.0\n</code></pre>\n<p>This compatibility convention is different from SemVer in the way it treats\nversions before 1.0.0. While SemVer says there is no compatibility before\n1.0.0, Cargo considers <code class=\"hljs\">0.x.y</code> to be compatible with <code class=\"hljs\">0.x.z</code>, where <code class=\"hljs\">y ≥ z</code>\nand <code class=\"hljs\">x &gt; 0</code>.</p>\n<p>It is possible to further tweak the logic for selecting compatible versions\nusing special operators as described in the <a href=\"#version-requirement-syntax\">Version requirement syntax</a> section.</p>\n<p>Use the default version requirement strategy, e.g. <code class=\"hljs\">log = \"1.2.3\"</code> where possible to maximize compatibility.</p>\n<h2 id=\"version-requirement-syntax\"><a class=\"header\" href=\"#version-requirement-syntax\">Version requirement syntax</a></h2>\n<h3 id=\"caret-requirements\"><a class=\"header\" href=\"#caret-requirements\">Caret requirements</a></h3>\n<p><strong>Caret requirements</strong> are the default version requirement strategy.\nThis version strategy allows <a href=\"https://semver.org\">SemVer</a> compatible updates.\nThey are specified as version requirements with a leading caret (<code class=\"hljs\">^</code>).</p>\n<p><code class=\"hljs\">^1.2.3</code> is an example of a caret requirement.</p>\n<p>Leaving off the caret is a simplified equivalent syntax to using caret requirements.\nWhile caret requirements are the default, it is recommended to use the\nsimplified syntax when possible.</p>\n<p><code class=\"hljs\">log = \"^1.2.3\"</code> is exactly equivalent to <code class=\"hljs\">log = \"1.2.3\"</code>.</p>\n<h3 id=\"tilde-requirements\"><a class=\"header\" href=\"#tilde-requirements\">Tilde requirements</a></h3>\n<p><strong>Tilde requirements</strong> specify a minimal version with some ability to update.\nIf you specify a major, minor, and patch version or only a major and minor\nversion, only patch-level changes are allowed. If you only specify a major\nversion, then minor- and patch-level changes are allowed.</p>\n<p><code class=\"hljs\">~1.2.3</code> is an example of a tilde requirement.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-notrust hljs\">~1.2.3  := &gt;=1.2.3, &lt;1.3.0\n~1.2    := &gt;=1.2.0, &lt;1.3.0\n~1      := &gt;=1.0.0, &lt;2.0.0\n</code></pre>\n<h3 id=\"wildcard-requirements\"><a class=\"header\" href=\"#wildcard-requirements\">Wildcard requirements</a></h3>\n<p><strong>Wildcard requirements</strong> allow for any version where the wildcard is\npositioned.</p>\n<p><code class=\"hljs\">*</code>, <code class=\"hljs\">1.*</code> and <code class=\"hljs\">1.2.*</code> are examples of wildcard requirements.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-notrust hljs\">*     := &gt;=0.0.0\n1.*   := &gt;=1.0.0, &lt;2.0.0\n1.2.* := &gt;=1.2.0, &lt;1.3.0\n</code></pre>\n<blockquote>\n<p><strong>Note</strong>: <a href=\"https://crates.io/\">crates.io</a> does not allow bare <code class=\"hljs\">*</code> versions.</p>\n</blockquote>\n<h3 id=\"comparison-requirements\"><a class=\"header\" href=\"#comparison-requirements\">Comparison requirements</a></h3>\n<p><strong>Comparison requirements</strong> allow manually specifying a version range or an\nexact version to depend on.</p>\n<p>Here are some examples of comparison requirements:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-notrust hljs\">&gt;= 1.2.0\n&gt; 1\n&lt; 2\n= 1.2.3\n</code></pre>\n<p><span id=\"multiple-requirements\"></span></p>\n<h3 id=\"multiple-version-requirements\"><a class=\"header\" href=\"#multiple-version-requirements\">Multiple version requirements</a></h3>\n<p>As shown in the examples above, multiple version requirements can be\nseparated with a comma, e.g., <code class=\"hljs\">&gt;= 1.2, &lt; 1.5</code>.</p>\n<blockquote>\n<p><strong>Recommendation:</strong> When in doubt, use the default version requirement operator.</p>\n<p>In rare circumstances, a package with a “public dependency”\n(re-exports the dependency or interoperates with it in its public API)\nthat is compatible with multiple semver-incompatible versions\n(e.g. only uses a simple type that hasn’t changed between releases, like an <code class=\"hljs\">Id</code>)\nmay support users choosing which version of the “public dependency” to use.\nIn this case, a version requirement like <code class=\"hljs\">\"&gt;=0.4, &lt;2\"</code> may be of interest.\n<em>However</em> users of the package will likely run into errors and need to\nmanually select a version of the “public dependency” via <code class=\"hljs\">cargo update</code> if\nthey also depend on it as Cargo might pick different versions of the “public\ndependency” when <a href=\"resolver.html\">resolving dependency versions</a>  (see\n<a href=\"https://github.com/rust-lang/cargo/issues/10599\">#10599</a>).</p>\n<p>Avoid constraining the upper bound of a version to be anything less than the\nnext semver incompatible version\n(e.g. avoid <code class=\"hljs\">\"&gt;=2.0, &lt;2.4\"</code>) as other packages in the dependency tree may\nrequire a newer version, leading to an unresolvable error (see <a href=\"https://github.com/rust-lang/cargo/issues/9029\">#9029</a>).\nConsider whether controlling the version in your <a href=\"../guide/cargo-toml-vs-cargo-lock.html\"><code class=\"hljs\">Cargo.lock</code></a> would be more\nappropriate.</p>\n<p>In some instances this won’t matter or the benefits might outweigh the cost, including:</p>\n<ul>\n<li>When no one else depends on your package e.g. it only has a <code class=\"hljs\">[[bin]]</code></li>\n<li>When depending on a pre-release package and wishing to avoid breaking\nchanges then a fully specified <code class=\"hljs\">\"=1.2.3-alpha.3\"</code> might be warranted (see\n<a href=\"https://github.com/rust-lang/cargo/issues/2222\">#2222</a>)</li>\n<li>When a library re-exports a proc-macro but the proc-macro generates code that\ncalls into the re-exporting library then a fully specified <code class=\"hljs\">=1.2.3</code> might be\nwarranted to ensure the proc-macro isn’t newer than the re-exporting library\nand generating code that uses parts of the API that don’t exist within the\ncurrent version</li>\n</ul>\n</blockquote>\n<h2 id=\"specifying-dependencies-from-other-registries\"><a class=\"header\" href=\"#specifying-dependencies-from-other-registries\">Specifying dependencies from other registries</a></h2>\n<p>To specify a dependency from a registry other than <a href=\"https://crates.io/\">crates.io</a> set the <code class=\"hljs\">registry</code> key\nto the name of the registry to use:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">some-crate</span> = { version = <span class=\"hljs-string\">\"1.0\"</span>, registry = <span class=\"hljs-string\">\"my-registry\"</span> }\n</code></pre>\n<p>where <code class=\"hljs\">my-registry</code> is the registry name configured in <code class=\"hljs\">.cargo/config.toml</code> file.\nSee the <a href=\"registries.html\">registries documentation</a> for more information.</p>\n<blockquote>\n<p><strong>Note</strong>: <a href=\"https://crates.io/\">crates.io</a> does not allow packages to be published with\ndependencies on code published outside of <a href=\"https://crates.io/\">crates.io</a>.</p>\n</blockquote>\n<h2 id=\"specifying-dependencies-from-git-repositories\"><a class=\"header\" href=\"#specifying-dependencies-from-git-repositories\">Specifying dependencies from <code>git</code> repositories</a></h2>\n<p>To depend on a library located in a <code class=\"hljs\">git</code> repository, the minimum information\nyou need to specify is the location of the repository with the <code class=\"hljs\">git</code> key:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">regex</span> = { git = <span class=\"hljs-string\">\"https://github.com/rust-lang/regex.git\"</span> }\n</code></pre>\n<p>Cargo fetches the <code class=\"hljs\">git</code> repository at that location and traverses the file tree to find\n<code class=\"hljs\">Cargo.toml</code> file for the requested crate anywhere inside the <code class=\"hljs\">git</code> repository.\nFor example, <code class=\"hljs\">regex-lite</code> and <code class=\"hljs\">regex-syntax</code> are members of <code class=\"hljs\">rust-lang/regex</code> repo\nand can be referred to by the repo’s root URL (<code class=\"hljs\">https://github.com/rust-lang/regex.git</code>)\nregardless of where in the file tree they reside.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-attr\">regex-lite</span>   = { git = <span class=\"hljs-string\">\"https://github.com/rust-lang/regex.git\"</span> }\n<span class=\"hljs-attr\">regex-syntax</span> = { git = <span class=\"hljs-string\">\"https://github.com/rust-lang/regex.git\"</span> }\n</code></pre>\n<p>The above rule does not apply to <a href=\"#specifying-path-dependencies\"><code class=\"hljs\">path</code> dependencies</a>.</p>\n<h3 id=\"choice-of-commit\"><a class=\"header\" href=\"#choice-of-commit\">Choice of commit</a></h3>\n<p>Cargo assumes that we intend to use the latest commit on the default branch to build\nour package if we only specify the repo URL, as in the examples above.</p>\n<p>You can combine the <code class=\"hljs\">git</code> key with the <code class=\"hljs\">rev</code>, <code class=\"hljs\">tag</code>, or <code class=\"hljs\">branch</code> keys to be more specific about\nwhich commit to use. Here’s an example of using the latest commit on a branch named <code class=\"hljs\">next</code>:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">regex</span> = { git = <span class=\"hljs-string\">\"https://github.com/rust-lang/regex.git\"</span>, branch = <span class=\"hljs-string\">\"next\"</span> }\n</code></pre>\n<p>Anything that is not a branch or a tag falls under <code class=\"hljs\">rev</code> key. This can be a commit\nhash like <code class=\"hljs\">rev = \"4c59b707\"</code>, or a named reference exposed by the remote\nrepository such as <code class=\"hljs\">rev = \"refs/pull/493/head\"</code>.</p>\n<p>What references are available for the <code class=\"hljs\">rev</code> key varies by where the repo is hosted.<br>\nGitHub exposes a reference to the most recent commit of every pull request as in the example above.\nOther git hosts may provide something equivalent under a different naming scheme.</p>\n<p><strong>More <code class=\"hljs\">git</code> dependency examples:</strong></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-comment\"># .git suffix can be omitted if the host accepts such URLs - both examples work the same</span>\n<span class=\"hljs-attr\">regex</span> = { git = <span class=\"hljs-string\">\"https://github.com/rust-lang/regex\"</span> }\n<span class=\"hljs-attr\">regex</span> = { git = <span class=\"hljs-string\">\"https://github.com/rust-lang/regex.git\"</span> }\n\n<span class=\"hljs-comment\"># a commit with a particular tag</span>\n<span class=\"hljs-attr\">regex</span> = { git = <span class=\"hljs-string\">\"https://github.com/rust-lang/regex.git\"</span>, tag = <span class=\"hljs-string\">\"1.10.3\"</span> }\n\n<span class=\"hljs-comment\"># a commit by its SHA1 hash</span>\n<span class=\"hljs-attr\">regex</span> = { git = <span class=\"hljs-string\">\"https://github.com/rust-lang/regex.git\"</span>, rev = <span class=\"hljs-string\">\"0c0990399270277832fbb5b91a1fa118e6f63dba\"</span> }\n\n<span class=\"hljs-comment\"># HEAD commit of PR 493</span>\n<span class=\"hljs-attr\">regex</span> = { git = <span class=\"hljs-string\">\"https://github.com/rust-lang/regex.git\"</span>, rev = <span class=\"hljs-string\">\"refs/pull/493/head\"</span> }\n\n<span class=\"hljs-comment\"># INVALID EXAMPLES</span>\n\n<span class=\"hljs-comment\"># specifying the commit after # ignores the commit ID and generates a warning</span>\n<span class=\"hljs-attr\">regex</span> = { git = <span class=\"hljs-string\">\"https://github.com/rust-lang/regex.git#4c59b70\"</span> }\n\n<span class=\"hljs-comment\"># git and path cannot be used at the same time</span>\n<span class=\"hljs-attr\">regex</span> = { git = <span class=\"hljs-string\">\"https://github.com/rust-lang/regex.git#4c59b70\"</span>, path = <span class=\"hljs-string\">\"../regex\"</span> }\n</code></pre>\n<p>Cargo locks the commits of <code class=\"hljs\">git</code> dependencies in <code class=\"hljs\">Cargo.lock</code> file at the time of their addition\nand checks for updates only when you run <code class=\"hljs\">cargo update</code> command.</p>\n<h3 id=\"the-role-of-the-version-key\"><a class=\"header\" href=\"#the-role-of-the-version-key\">The role of the <code>version</code> key</a></h3>\n<p>The <code class=\"hljs\">version</code> key always implies that the package is available in a registry,\nregardless of the presence of <code class=\"hljs\">git</code> or <code class=\"hljs\">path</code> keys.</p>\n<p>The <code class=\"hljs\">version</code> key does <em>not</em> affect which commit is used when Cargo retrieves the <code class=\"hljs\">git</code> dependency,\nbut Cargo checks the version information in the dependency’s <code class=\"hljs\">Cargo.toml</code> file\nagainst the <code class=\"hljs\">version</code> key and raises an error if the check fails.</p>\n<p>In this example, Cargo retrieves the HEAD commit of the branch called <code class=\"hljs\">next</code> from Git and checks if the crate’s version\nis compatible with <code class=\"hljs\">version = \"1.10.3\"</code>:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">regex</span> = { version = <span class=\"hljs-string\">\"1.10.3\"</span>, git = <span class=\"hljs-string\">\"https://github.com/rust-lang/regex.git\"</span>, branch = <span class=\"hljs-string\">\"next\"</span> }\n</code></pre>\n<p><code class=\"hljs\">version</code>, <code class=\"hljs\">git</code>, and <code class=\"hljs\">path</code> keys are considered separate locations for resolving the dependency.\nSee <a href=\"#multiple-locations\">Multiple locations</a> section below for detailed explanations.</p>\n<blockquote>\n<p><strong>Note</strong>: <a href=\"https://crates.io/\">crates.io</a> does not allow packages to be published with\ndependencies on code published outside of <a href=\"https://crates.io/\">crates.io</a> itself\n(<a href=\"#development-dependencies\">dev-dependencies</a> are ignored). See the <a href=\"#multiple-locations\">Multiple\nlocations</a> section for a fallback alternative for <code class=\"hljs\">git</code>\nand <code class=\"hljs\">path</code> dependencies.</p>\n</blockquote>\n<h3 id=\"accessing-private-git-repositories\"><a class=\"header\" href=\"#accessing-private-git-repositories\">Accessing private Git repositories</a></h3>\n<p>See <a href=\"../appendix/git-authentication.html\">Git Authentication</a> for help with Git authentication for private repos.</p>\n<h2 id=\"specifying-path-dependencies\"><a class=\"header\" href=\"#specifying-path-dependencies\">Specifying path dependencies</a></h2>\n<p>Over time, our <code class=\"hljs\">hello_world</code> package from <a href=\"../guide/index.html\">the guide</a> has\ngrown significantly in size! It’s gotten to the point that we probably want to\nsplit out a separate crate for others to use. To do this Cargo supports <strong>path\ndependencies</strong> which are typically sub-crates that live within one repository.\nLet’s start by making a new crate inside of our <code class=\"hljs\">hello_world</code> package:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> inside of hello_world/</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo new hello_utils</span>\n</code></pre>\n<p>This will create a new folder <code class=\"hljs\">hello_utils</code> inside of which a <code class=\"hljs\">Cargo.toml</code> and\n<code class=\"hljs\">src</code> folder are ready to be configured. To tell Cargo about this, open\nup <code class=\"hljs\">hello_world/Cargo.toml</code> and add <code class=\"hljs\">hello_utils</code> to your dependencies:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">hello_utils</span> = { path = <span class=\"hljs-string\">\"hello_utils\"</span> }\n</code></pre>\n<p>This tells Cargo that we depend on a crate called <code class=\"hljs\">hello_utils</code> which is found\nin the <code class=\"hljs\">hello_utils</code> folder, relative to the <code class=\"hljs\">Cargo.toml</code> file it’s written in.</p>\n<p>The next <code class=\"hljs\">cargo build</code> will automatically build <code class=\"hljs\">hello_utils</code> and\nall of its dependencies.</p>\n<h3 id=\"no-local-path-traversal\"><a class=\"header\" href=\"#no-local-path-traversal\">No local path traversal</a></h3>\n<p>The local paths must point to the exact folder with the dependency’s <code class=\"hljs\">Cargo.toml</code>.\nUnlike with <code class=\"hljs\">git</code> dependencies, Cargo does not traverse local paths.\nFor example, if <code class=\"hljs\">regex-lite</code> and <code class=\"hljs\">regex-syntax</code> are members of a\nlocally cloned <code class=\"hljs\">rust-lang/regex</code> repo, they have to be referred to by the full path:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-comment\"># git key accepts the repo root URL and Cargo traverses the tree to find the crate</span>\n<span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">regex-lite</span>   = { git = <span class=\"hljs-string\">\"https://github.com/rust-lang/regex.git\"</span> }\n<span class=\"hljs-attr\">regex-syntax</span> = { git = <span class=\"hljs-string\">\"https://github.com/rust-lang/regex.git\"</span> }\n\n<span class=\"hljs-comment\"># path key requires the member name to be included in the local path</span>\n<span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">regex-lite</span>   = { path = <span class=\"hljs-string\">\"../regex/regex-lite\"</span> }\n<span class=\"hljs-attr\">regex-syntax</span> = { path = <span class=\"hljs-string\">\"../regex/regex-syntax\"</span> }\n</code></pre>\n<h3 id=\"local-paths-in-published-crates\"><a class=\"header\" href=\"#local-paths-in-published-crates\">Local paths in published crates</a></h3>\n<p>Crates that use dependencies specified with only a path are not\npermitted on <a href=\"https://crates.io/\">crates.io</a>.</p>\n<p>If we wanted to publish our <code class=\"hljs\">hello_world</code> crate,\nwe would need to publish a version of <code class=\"hljs\">hello_utils</code> to <a href=\"https://crates.io/\">crates.io</a> as a separate crate\nand specify its version in the dependencies line of <code class=\"hljs\">hello_world</code>:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">hello_utils</span> = { path = <span class=\"hljs-string\">\"hello_utils\"</span>, version = <span class=\"hljs-string\">\"0.1.0\"</span> }\n</code></pre>\n<p>The use of <code class=\"hljs\">path</code> and <code class=\"hljs\">version</code> keys together is explained in the <a href=\"#multiple-locations\">Multiple locations</a> section.</p>\n<blockquote>\n<p><strong>Note</strong>: <a href=\"https://crates.io/\">crates.io</a> does not allow packages to be published with\ndependencies on code outside of <a href=\"https://crates.io/\">crates.io</a>, except for <a href=\"#development-dependencies\">dev-dependencies</a>.\nSee the <a href=\"#multiple-locations\">Multiple locations</a> section\nfor a fallback alternative for <code class=\"hljs\">git</code> and <code class=\"hljs\">path</code> dependencies.</p>\n</blockquote>\n<h2 id=\"multiple-locations\"><a class=\"header\" href=\"#multiple-locations\">Multiple locations</a></h2>\n<p>It is possible to specify both a registry version and a <code class=\"hljs\">git</code> or <code class=\"hljs\">path</code>\nlocation. The <code class=\"hljs\">git</code> or <code class=\"hljs\">path</code> dependency will be used locally (in which case\nthe <code class=\"hljs\">version</code> is checked against the local copy), and when published to a\nregistry like <a href=\"https://crates.io/\">crates.io</a>, it will use the registry version. Other\ncombinations are not allowed. Examples:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-comment\"># Uses `my-bitflags` when used locally, and uses</span>\n<span class=\"hljs-comment\"># version 1.0 from crates.io when published.</span>\n<span class=\"hljs-attr\">bitflags</span> = { path = <span class=\"hljs-string\">\"my-bitflags\"</span>, version = <span class=\"hljs-string\">\"1.0\"</span> }\n\n<span class=\"hljs-comment\"># Uses the given git repo when used locally, and uses</span>\n<span class=\"hljs-comment\"># version 1.0 from crates.io when published.</span>\n<span class=\"hljs-attr\">smallvec</span> = { git = <span class=\"hljs-string\">\"https://github.com/servo/rust-smallvec.git\"</span>, version = <span class=\"hljs-string\">\"1.0\"</span> }\n\n<span class=\"hljs-comment\"># N.B. that if a version doesn't match, Cargo will fail to compile!</span>\n</code></pre>\n<p>One example where this can be useful is when you have split up a library into\nmultiple packages within the same workspace. You can then use <code class=\"hljs\">path</code>\ndependencies to point to the local packages within the workspace to use the\nlocal version during development, and then use the <a href=\"https://crates.io/\">crates.io</a> version once it\nis published. This is similar to specifying an\n<a href=\"overriding-dependencies.html\">override</a>, but only applies to this one\ndependency declaration.</p>\n<h2 id=\"platform-specific-dependencies\"><a class=\"header\" href=\"#platform-specific-dependencies\">Platform specific dependencies</a></h2>\n<p>Platform-specific dependencies take the same format, but are listed under a\n<code class=\"hljs\">target</code> section. Normally Rust-like <a href=\"../../reference/conditional-compilation.html\"><code class=\"hljs\">#[cfg]</code>\nsyntax</a> will be used to define\nthese sections:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[target.'cfg(windows)'.dependencies]</span>\n<span class=\"hljs-attr\">winhttp</span> = <span class=\"hljs-string\">\"0.4.0\"</span>\n\n<span class=\"hljs-section\">[target.'cfg(unix)'.dependencies]</span>\n<span class=\"hljs-attr\">openssl</span> = <span class=\"hljs-string\">\"1.0.1\"</span>\n\n<span class=\"hljs-section\">[target.'cfg(target_arch = \"x86\")'.dependencies]</span>\n<span class=\"hljs-attr\">native-i686</span> = { path = <span class=\"hljs-string\">\"native/i686\"</span> }\n\n<span class=\"hljs-section\">[target.'cfg(target_arch = \"x86_64\")'.dependencies]</span>\n<span class=\"hljs-attr\">native-x86_64</span> = { path = <span class=\"hljs-string\">\"native/x86_64\"</span> }\n</code></pre>\n<p>Like with Rust, the syntax here supports the <code class=\"hljs\">not</code>, <code class=\"hljs\">any</code>, and <code class=\"hljs\">all</code> operators\nto combine various cfg name/value pairs.</p>\n<p>If you want to know which cfg targets are available on your platform, run\n<code class=\"hljs\">rustc --print=cfg</code> from the command line. If you want to know which <code class=\"hljs\">cfg</code>\ntargets are available for another platform, such as 64-bit Windows,\nrun <code class=\"hljs\">rustc --print=cfg --target=x86_64-pc-windows-msvc</code>.</p>\n<p>Unlike in your Rust source code, you cannot use\n<code class=\"hljs\">[target.'cfg(feature = \"fancy-feature\")'.dependencies]</code> to add dependencies\nbased on optional features. Use <a href=\"features.html\">the <code class=\"hljs\">[features]</code> section</a>\ninstead:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">foo</span> = { version = <span class=\"hljs-string\">\"1.0\"</span>, optional = <span class=\"hljs-literal\">true</span> }\n<span class=\"hljs-attr\">bar</span> = { version = <span class=\"hljs-string\">\"1.0\"</span>, optional = <span class=\"hljs-literal\">true</span> }\n\n<span class=\"hljs-section\">[features]</span>\n<span class=\"hljs-attr\">fancy-feature</span> = [<span class=\"hljs-string\">\"foo\"</span>, <span class=\"hljs-string\">\"bar\"</span>]\n</code></pre>\n<p>The same applies to <code class=\"hljs\">cfg(debug_assertions)</code>, <code class=\"hljs\">cfg(test)</code> and <code class=\"hljs\">cfg(proc_macro)</code>.\nThese values will not work as expected and will always have the default value\nreturned by <code class=\"hljs\">rustc --print=cfg</code>.\nThere is currently no way to add dependencies based on these configuration values.</p>\n<p>In addition to <code class=\"hljs\">#[cfg]</code> syntax, Cargo also supports listing out the full target\nthe dependencies would apply to:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[target.x86_64-pc-windows-gnu.dependencies]</span>\n<span class=\"hljs-attr\">winhttp</span> = <span class=\"hljs-string\">\"0.4.0\"</span>\n\n<span class=\"hljs-section\">[target.i686-unknown-linux-gnu.dependencies]</span>\n<span class=\"hljs-attr\">openssl</span> = <span class=\"hljs-string\">\"1.0.1\"</span>\n</code></pre>\n<h3 id=\"custom-target-specifications\"><a class=\"header\" href=\"#custom-target-specifications\">Custom target specifications</a></h3>\n<p>If you’re using a custom target specification (such as <code class=\"hljs\">--target foo/bar.json</code>), use the base filename without the <code class=\"hljs\">.json</code> extension:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[target.bar.dependencies]</span>\n<span class=\"hljs-attr\">winhttp</span> = <span class=\"hljs-string\">\"0.4.0\"</span>\n\n<span class=\"hljs-section\">[target.my-special-i686-platform.dependencies]</span>\n<span class=\"hljs-attr\">openssl</span> = <span class=\"hljs-string\">\"1.0.1\"</span>\n<span class=\"hljs-attr\">native</span> = { path = <span class=\"hljs-string\">\"native/i686\"</span> }\n</code></pre>\n<blockquote>\n<p><strong>Note</strong>: Custom target specifications are not usable on the stable channel.</p>\n</blockquote>\n<h2 id=\"development-dependencies\"><a class=\"header\" href=\"#development-dependencies\">Development dependencies</a></h2>\n<p>You can add a <code class=\"hljs\">[dev-dependencies]</code> section to your <code class=\"hljs\">Cargo.toml</code> whose format\nis equivalent to <code class=\"hljs\">[dependencies]</code>:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[dev-dependencies]</span>\n<span class=\"hljs-attr\">tempdir</span> = <span class=\"hljs-string\">\"0.3\"</span>\n</code></pre>\n<p>Dev-dependencies are not used when compiling\na package for building, but are used for compiling tests, examples, and\nbenchmarks.</p>\n<p>These dependencies are <em>not</em> propagated to other packages which depend on this\npackage.</p>\n<p>You can also have target-specific development dependencies by using\n<code class=\"hljs\">dev-dependencies</code> in the target section header instead of <code class=\"hljs\">dependencies</code>. For\nexample:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[target.'cfg(unix)'.dev-dependencies]</span>\n<span class=\"hljs-attr\">mio</span> = <span class=\"hljs-string\">\"0.0.1\"</span>\n</code></pre>\n<blockquote>\n<p><strong>Note</strong>: When a package is published, only dev-dependencies that specify a\n<code class=\"hljs\">version</code> will be included in the published crate. For most use cases,\ndev-dependencies are not needed when published, though some users (like OS\npackagers) may want to run tests within a crate, so providing a <code class=\"hljs\">version</code> if\npossible can still be beneficial.</p>\n</blockquote>\n<h2 id=\"build-dependencies\"><a class=\"header\" href=\"#build-dependencies\">Build dependencies</a></h2>\n<p>You can depend on other Cargo-based crates for use in your build scripts.\nDependencies are declared through the <code class=\"hljs\">build-dependencies</code> section of the\nmanifest:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[build-dependencies]</span>\n<span class=\"hljs-attr\">cc</span> = <span class=\"hljs-string\">\"1.0.3\"</span>\n</code></pre>\n<p>You can also have target-specific build dependencies by using\n<code class=\"hljs\">build-dependencies</code> in the target section header instead of <code class=\"hljs\">dependencies</code>. For\nexample:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[target.'cfg(unix)'.build-dependencies]</span>\n<span class=\"hljs-attr\">cc</span> = <span class=\"hljs-string\">\"1.0.3\"</span>\n</code></pre>\n<p>In this case, the dependency will only be built when the host platform matches the\nspecified target.</p>\n<p>The build script <strong>does not</strong> have access to the dependencies listed\nin the <code class=\"hljs\">dependencies</code> or <code class=\"hljs\">dev-dependencies</code> section. Build\ndependencies will likewise not be available to the package itself\nunless listed under the <code class=\"hljs\">dependencies</code> section as well. A package\nitself and its build script are built separately, so their\ndependencies need not coincide. Cargo is kept simpler and cleaner by\nusing independent dependencies for independent purposes.</p>\n<h2 id=\"choosing-features\"><a class=\"header\" href=\"#choosing-features\">Choosing features</a></h2>\n<p>If a package you depend on offers conditional features, you can\nspecify which to use:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[dependencies.awesome]</span>\n<span class=\"hljs-attr\">version</span> = <span class=\"hljs-string\">\"1.3.5\"</span>\n<span class=\"hljs-attr\">default-features</span> = <span class=\"hljs-literal\">false</span> <span class=\"hljs-comment\"># do not include the default features, and optionally</span>\n                         <span class=\"hljs-comment\"># cherry-pick individual features</span>\n<span class=\"hljs-attr\">features</span> = [<span class=\"hljs-string\">\"secure-password\"</span>, <span class=\"hljs-string\">\"civet\"</span>]\n</code></pre>\n<p>More information about features can be found in the <a href=\"features.html#dependency-features\">features\nchapter</a>.</p>\n<h2 id=\"renaming-dependencies-in-cargotoml\"><a class=\"header\" href=\"#renaming-dependencies-in-cargotoml\">Renaming dependencies in <code>Cargo.toml</code></a></h2>\n<p>When writing a <code class=\"hljs\">[dependencies]</code> section in <code class=\"hljs\">Cargo.toml</code> the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it’s published on crates.io. For\nexample you may wish to:</p>\n<ul>\n<li>Avoid the need to  <code class=\"hljs\">use foo as bar</code> in Rust source.</li>\n<li>Depend on multiple versions of a crate.</li>\n<li>Depend on crates with the same name from different registries.</li>\n</ul>\n<p>To support this Cargo supports a <code class=\"hljs\">package</code> key in the <code class=\"hljs\">[dependencies]</code> section\nof which package should be depended on:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-attr\">name</span> = <span class=\"hljs-string\">\"mypackage\"</span>\n<span class=\"hljs-attr\">version</span> = <span class=\"hljs-string\">\"0.0.1\"</span>\n\n<span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">foo</span> = <span class=\"hljs-string\">\"0.1\"</span>\n<span class=\"hljs-attr\">bar</span> = { git = <span class=\"hljs-string\">\"https://github.com/example/project.git\"</span>, package = <span class=\"hljs-string\">\"foo\"</span> }\n<span class=\"hljs-attr\">baz</span> = { version = <span class=\"hljs-string\">\"0.1\"</span>, registry = <span class=\"hljs-string\">\"custom\"</span>, package = <span class=\"hljs-string\">\"foo\"</span> }\n</code></pre>\n<p>In this example, three crates are now available in your Rust code:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">extern</span> <span class=\"hljs-keyword\">crate</span> foo; <span class=\"hljs-comment\">// crates.io</span>\n<span class=\"hljs-keyword\">extern</span> <span class=\"hljs-keyword\">crate</span> bar; <span class=\"hljs-comment\">// git repository</span>\n<span class=\"hljs-keyword\">extern</span> <span class=\"hljs-keyword\">crate</span> baz; <span class=\"hljs-comment\">// registry `custom`</span></code></pre>\n<p>All three of these crates have the package name of <code class=\"hljs\">foo</code> in their own\n<code class=\"hljs\">Cargo.toml</code>, so we’re explicitly using the <code class=\"hljs\">package</code> key to inform Cargo that\nwe want the <code class=\"hljs\">foo</code> package even though we’re calling it something else locally.\nThe <code class=\"hljs\">package</code> key, if not specified, defaults to the name of the dependency\nbeing requested.</p>\n<p>Note that if you have an optional dependency like:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">bar</span> = { version = <span class=\"hljs-string\">\"0.1\"</span>, package = <span class=\"hljs-string\">'foo'</span>, optional = <span class=\"hljs-literal\">true</span> }\n</code></pre>\n<p>you’re depending on the crate <code class=\"hljs\">foo</code> from crates.io, but your crate has a <code class=\"hljs\">bar</code>\nfeature instead of a <code class=\"hljs\">foo</code> feature. That is, names of features take after the\nname of the dependency, not the package name, when renamed.</p>\n<p>Enabling transitive dependencies works similarly, for example we could add the\nfollowing to the above manifest:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[features]</span>\n<span class=\"hljs-attr\">log-debug</span> = [<span class=\"hljs-string\">'bar/log-debug'</span>] <span class=\"hljs-comment\"># using 'foo/log-debug' would be an error!</span>\n</code></pre>\n<h2 id=\"inheriting-a-dependency-from-a-workspace\"><a class=\"header\" href=\"#inheriting-a-dependency-from-a-workspace\">Inheriting a dependency from a workspace</a></h2>\n<p>Dependencies can be inherited from a workspace by specifying the\ndependency in the workspace’s <a href=\"workspaces.html#the-dependencies-table\"><code class=\"hljs\">[workspace.dependencies]</code></a> table.\nAfter that, add it to the <code class=\"hljs\">[dependencies]</code> table with <code class=\"hljs\">workspace = true</code>.</p>\n<p>Along with the <code class=\"hljs\">workspace</code> key, dependencies can also include these keys:</p>\n<ul>\n<li><a href=\"features.html#optional-dependencies\"><code class=\"hljs\">optional</code></a>: Note that the<code class=\"hljs\">[workspace.dependencies]</code> table is not allowed to specify <code class=\"hljs\">optional</code>.</li>\n<li><a href=\"features.html\"><code class=\"hljs\">features</code></a>: These are additive with the features declared in the <code class=\"hljs\">[workspace.dependencies]</code></li>\n</ul>\n<p>Other than <code class=\"hljs\">optional</code> and <code class=\"hljs\">features</code>, inherited dependencies cannot use any other\ndependency key (such as <code class=\"hljs\">version</code> or <code class=\"hljs\">default-features</code>).</p>\n<p>Dependencies in the <code class=\"hljs\">[dependencies]</code>, <code class=\"hljs\">[dev-dependencies]</code>, <code class=\"hljs\">[build-dependencies]</code>, and\n<code class=\"hljs\">[target.\"...\".dependencies]</code> sections support the ability to reference the\n<code class=\"hljs\">[workspace.dependencies]</code> definition of dependencies.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-attr\">name</span> = <span class=\"hljs-string\">\"bar\"</span>\n<span class=\"hljs-attr\">version</span> = <span class=\"hljs-string\">\"0.2.0\"</span>\n\n<span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">regex</span> = { workspace = <span class=\"hljs-literal\">true</span>, features = [<span class=\"hljs-string\">\"unicode\"</span>] }\n\n<span class=\"hljs-section\">[build-dependencies]</span>\n<span class=\"hljs-attr\">cc.workspace</span> = <span class=\"hljs-literal\">true</span>\n\n<span class=\"hljs-section\">[dev-dependencies]</span>\n<span class=\"hljs-attr\">rand</span> = { workspace = <span class=\"hljs-literal\">true</span>, optional = <span class=\"hljs-literal\">true</span> }\n</code></pre>\n<script>\n(function() {\n    var fragments = {\n        \"#overriding-dependencies\": \"overriding-dependencies.html\",\n        \"#testing-a-bugfix\": \"overriding-dependencies.html#testing-a-bugfix\",\n        \"#working-with-an-unpublished-minor-version\": \"overriding-dependencies.html#working-with-an-unpublished-minor-version\",\n        \"#overriding-repository-url\": \"overriding-dependencies.html#overriding-repository-url\",\n        \"#prepublishing-a-breaking-change\": \"overriding-dependencies.html#prepublishing-a-breaking-change\",\n        \"#overriding-with-local-dependencies\": \"overriding-dependencies.html#paths-overrides\",\n    };\n    var target = fragments[window.location.hash];\n    if (target) {\n        var url = window.location.toString();\n        var base = url.substring(0, url.lastIndexOf('/'));\n        window.location.replace(base + \"/\" + target);\n    }\n})();\n</script>\n\n                    </main>\n\n                    <nav class=\"nav-wrapper\" aria-label=\"Page navigation\">\n                        <!-- Mobile navigation buttons -->\n                            <a rel=\"prev\" href=\"../reference/index.html\" class=\"mobile-nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                                <i class=\"fa fa-angle-left\"></i>\n                            </a>\n\n                            <a rel=\"next prefetch\" href=\"../reference/overriding-dependencies.html\" class=\"mobile-nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                                <i class=\"fa fa-angle-right\"></i>\n                            </a>\n\n                        <div style=\"clear: both\"></div>\n                    </nav>\n                </div>\n            </div>\n\n            <nav class=\"nav-wide-wrapper\" aria-label=\"Page navigation\">\n                    <a rel=\"prev\" href=\"../reference/index.html\" class=\"nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                        <i class=\"fa fa-angle-left\"></i>\n                    </a>\n\n                    <a rel=\"next prefetch\" href=\"../reference/overriding-dependencies.html\" class=\"nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                        <i class=\"fa fa-angle-right\"></i>\n                    </a>\n            </nav>\n\n        </div>\n\n\n\n\n        <script>\n            window.playground_copyable = true;\n        </script>\n\n\n        <script src=\"../elasticlunr.min.js\"></script>\n        <script src=\"../mark.min.js\"></script>\n        <script src=\"../searcher.js\"></script>\n\n        <script src=\"../clipboard.min.js\"></script>\n        <script src=\"../highlight.js\"></script>\n        <script src=\"../book.js\"></script>\n\n        <!-- Custom JS scripts -->\n\n\n    </div>\n    \n\n</body></html>",
	"crawlDate": "2024-07-28T05:09:20.837Z"
}