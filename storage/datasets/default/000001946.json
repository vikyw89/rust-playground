{
	"title": "Pointee in std::ptr - Rust",
	"url": "https://doc.rust-lang.org/stable/std/ptr/trait.Pointee.html",
	"markdown": "# Pointee in std::ptr - Rust\n\n```\npub trait Pointee {\n    type Metadata: Debug + Copy + Send + Sync + Ord + Hash + Unpin + Freeze;\n}\n```\n\n🔬This is a nightly-only experimental API. (`ptr_metadata` [#81513](https://github.com/rust-lang/rust/issues/81513))\n\nExpand description\n\nProvides the pointer metadata type of any pointed-to type.\n\nRaw pointer types and reference types in Rust can be thought of as made of two parts: a data pointer that contains the memory address of the value, and some metadata.\n\nFor statically-sized types (that implement the `Sized` traits) as well as for `extern` types, pointers are said to be “thin”: metadata is zero-sized and its type is `()`.\n\nPointers to [dynamically-sized types](https://doc.rust-lang.org/nomicon/exotic-sizes.html#dynamically-sized-types-dsts) are said to be “wide” or “fat”, they have non-zero-sized metadata:\n\n-   For structs whose last field is a DST, metadata is the metadata for the last field\n-   For the `str` type, metadata is the length in bytes as `usize`\n-   For slice types like `[T]`, metadata is the length in items as `usize`\n-   For trait objects like `dyn SomeTrait`, metadata is [`DynMetadata<Self>`](struct.DynMetadata.html \"struct std::ptr::DynMetadata\") (e.g. `DynMetadata<dyn SomeTrait>`)\n\nIn the future, the Rust language may gain new kinds of types that have different pointer metadata.\n\n## [§](#the-pointee-trait)The `Pointee` trait\n\nThe point of this trait is its `Metadata` associated type, which is `()` or `usize` or `DynMetadata<_>` as described above. It is automatically implemented for every type. It can be assumed to be implemented in a generic context, even without a corresponding bound.\n\n## [§](#usage)Usage\n\nRaw pointers can be decomposed into the data pointer and metadata components with their [`to_raw_parts`](about:blank/primitive.pointer.html#method.to_raw_parts \"method pointer::to_raw_parts\") method.\n\nAlternatively, metadata alone can be extracted with the [`metadata`](fn.metadata.html \"fn std::ptr::metadata\") function. A reference can be passed to [`metadata`](fn.metadata.html \"fn std::ptr::metadata\") and implicitly coerced.\n\nA (possibly-wide) pointer can be put back together from its data pointer and metadata with [`from_raw_parts`](fn.from_raw_parts.html \"fn std::ptr::from_raw_parts\") or [`from_raw_parts_mut`](fn.from_raw_parts_mut.html \"fn std::ptr::from_raw_parts_mut\").\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/metadata.rs.html#64)\n\n🔬This is a nightly-only experimental API. (`ptr_metadata` [#81513](https://github.com/rust-lang/rust/issues/81513))\n\nThe type for metadata in pointers and references to `Self`.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Provides the pointer metadata type of any pointed-to type.\"><title>Pointee in std::ptr - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc trait\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">Pointee</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">Pointee</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#required-associated-types\">Required Associated Types</a></h3><ul class=\"block\"><li><a href=\"#associatedtype.Metadata\">Metadata</a></li></ul><h3><a href=\"#implementors\">Implementors</a></h3></section><h2><a href=\"index.html\">In std::ptr</a></h2><h3><a href=\"index.html#macros\">Macros</a></h3><ul class=\"block macro\"><li><a href=\"macro.addr_of.html\">addr_of</a></li><li><a href=\"macro.addr_of_mut.html\">addr_of_mut</a></li></ul><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.Alignment.html\">Alignment</a></li><li><a href=\"struct.DynMetadata.html\">DynMetadata</a></li><li><a href=\"struct.NonNull.html\">NonNull</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.Pointee.html\">Pointee</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.addr_eq.html\">addr_eq</a></li><li><a href=\"fn.copy.html\">copy</a></li><li><a href=\"fn.copy_nonoverlapping.html\">copy_nonoverlapping</a></li><li><a href=\"fn.dangling.html\">dangling</a></li><li><a href=\"fn.dangling_mut.html\">dangling_mut</a></li><li><a href=\"fn.drop_in_place.html\">drop_in_place</a></li><li><a href=\"fn.eq.html\">eq</a></li><li><a href=\"fn.from_mut.html\">from_mut</a></li><li><a href=\"fn.from_raw_parts.html\">from_raw_parts</a></li><li><a href=\"fn.from_raw_parts_mut.html\">from_raw_parts_mut</a></li><li><a href=\"fn.from_ref.html\">from_ref</a></li><li><a href=\"fn.hash.html\">hash</a></li><li><a href=\"fn.metadata.html\">metadata</a></li><li><a href=\"fn.null.html\">null</a></li><li><a href=\"fn.null_mut.html\">null_mut</a></li><li><a href=\"fn.read.html\">read</a></li><li><a href=\"fn.read_unaligned.html\">read_unaligned</a></li><li><a href=\"fn.read_volatile.html\">read_volatile</a></li><li><a href=\"fn.replace.html\">replace</a></li><li><a href=\"fn.slice_from_raw_parts.html\">slice_from_raw_parts</a></li><li><a href=\"fn.slice_from_raw_parts_mut.html\">slice_from_raw_parts_mut</a></li><li><a href=\"fn.swap.html\">swap</a></li><li><a href=\"fn.swap_nonoverlapping.html\">swap_nonoverlapping</a></li><li><a href=\"fn.with_exposed_provenance.html\">with_exposed_provenance</a></li><li><a href=\"fn.with_exposed_provenance_mut.html\">with_exposed_provenance_mut</a></li><li><a href=\"fn.without_provenance.html\">without_provenance</a></li><li><a href=\"fn.without_provenance_mut.html\">without_provenance_mut</a></li><li><a href=\"fn.write.html\">write</a></li><li><a href=\"fn.write_bytes.html\">write_bytes</a></li><li><a href=\"fn.write_unaligned.html\">write_unaligned</a></li><li><a href=\"fn.write_volatile.html\">write_volatile</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Trait <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">ptr</a>::<wbr><a class=\"trait\" href=\"#\">Pointee</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/metadata.rs.html#58\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub trait Pointee {\n    type <a href=\"#associatedtype.Metadata\" class=\"associatedtype\">Metadata</a>: <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> + <a class=\"trait\" href=\"../marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a> + <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> + <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> + <a class=\"trait\" href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> + <a class=\"trait\" href=\"../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a>;\n}</code></pre><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>ptr_metadata</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/81513\">#81513</a>)</span></div></span><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Provides the pointer metadata type of any pointed-to type.</p>\n<h2 id=\"pointer-metadata\"><a class=\"doc-anchor\" href=\"#pointer-metadata\">§</a>Pointer metadata</h2>\n<p>Raw pointer types and reference types in Rust can be thought of as made of two parts:\na data pointer that contains the memory address of the value, and some metadata.</p>\n<p>For statically-sized types (that implement the <code>Sized</code> traits)\nas well as for <code>extern</code> types,\npointers are said to be “thin”: metadata is zero-sized and its type is <code>()</code>.</p>\n<p>Pointers to <a href=\"https://doc.rust-lang.org/nomicon/exotic-sizes.html#dynamically-sized-types-dsts\">dynamically-sized types</a> are said to be “wide” or “fat”,\nthey have non-zero-sized metadata:</p>\n<ul>\n<li>For structs whose last field is a DST, metadata is the metadata for the last field</li>\n<li>For the <code>str</code> type, metadata is the length in bytes as <code>usize</code></li>\n<li>For slice types like <code>[T]</code>, metadata is the length in items as <code>usize</code></li>\n<li>For trait objects like <code>dyn SomeTrait</code>, metadata is <a href=\"struct.DynMetadata.html\" title=\"struct std::ptr::DynMetadata\"><code>DynMetadata&lt;Self&gt;</code></a>\n(e.g. <code>DynMetadata&lt;dyn SomeTrait&gt;</code>)</li>\n</ul>\n<p>In the future, the Rust language may gain new kinds of types\nthat have different pointer metadata.</p>\n<h2 id=\"the-pointee-trait\"><a class=\"doc-anchor\" href=\"#the-pointee-trait\">§</a>The <code>Pointee</code> trait</h2>\n<p>The point of this trait is its <code>Metadata</code> associated type,\nwhich is <code>()</code> or <code>usize</code> or <code>DynMetadata&lt;_&gt;</code> as described above.\nIt is automatically implemented for every type.\nIt can be assumed to be implemented in a generic context, even without a corresponding bound.</p>\n<h2 id=\"usage\"><a class=\"doc-anchor\" href=\"#usage\">§</a>Usage</h2>\n<p>Raw pointers can be decomposed into the data pointer and metadata components\nwith their <a href=\"../primitive.pointer.html#method.to_raw_parts\" title=\"method pointer::to_raw_parts\"><code>to_raw_parts</code></a> method.</p>\n<p>Alternatively, metadata alone can be extracted with the <a href=\"fn.metadata.html\" title=\"fn std::ptr::metadata\"><code>metadata</code></a> function.\nA reference can be passed to <a href=\"fn.metadata.html\" title=\"fn std::ptr::metadata\"><code>metadata</code></a> and implicitly coerced.</p>\n<p>A (possibly-wide) pointer can be put back together from its data pointer and metadata\nwith <a href=\"fn.from_raw_parts.html\" title=\"fn std::ptr::from_raw_parts\"><code>from_raw_parts</code></a> or <a href=\"fn.from_raw_parts_mut.html\" title=\"fn std::ptr::from_raw_parts_mut\"><code>from_raw_parts_mut</code></a>.</p>\n</div></details><h2 id=\"required-associated-types\" class=\"section-header\">Required Associated Types<a href=\"#required-associated-types\" class=\"anchor\">§</a></h2><div class=\"methods\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Metadata\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/metadata.rs.html#64\">source</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Metadata\" class=\"associatedtype\">Metadata</a>: <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> + <a class=\"trait\" href=\"../marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a> + <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> + <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> + <a class=\"trait\" href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> + <a class=\"trait\" href=\"../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>ptr_metadata</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/81513\">#81513</a>)</span></div></span></summary><div class=\"docblock\"><p>The type for metadata in pointers and references to <code>Self</code>.</p>\n</div></details></div><h2 id=\"implementors\" class=\"section-header\">Implementors<a href=\"#implementors\" class=\"anchor\">§</a></h2><div id=\"implementors-list\"></div><script src=\"../../trait.impl/core/ptr/metadata/trait.Pointee.js\" async=\"\"></script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:21:32.587Z"
}