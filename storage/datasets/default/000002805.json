{
	"title": "UnixStream in std::os::unix::net - Rust",
	"url": "https://doc.rust-lang.org/stable/std/os/unix/net/struct.UnixStream.html",
	"markdown": "# UnixStream in std::os::unix::net - Rust\n\n```\npub struct UnixStream(/* private fields */);\n```\n\nAvailable on **Unix** only.\n\nExpand description\n\nA Unix stream socket.\n\n## [§](#examples)Examples\n\n```\nuse std::os::unix::net::UnixStream;\nuse std::io::prelude::*;\n\nfn main() -> std::io::Result<()> {\n    let mut stream = UnixStream::connect(\"/path/to/my/socket\")?;\n    stream.write_all(b\"hello world\")?;\n    let mut response = String::new();\n    stream.read_to_string(&mut response)?;\n    println!(\"{response}\");\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::os::unix::net::UnixStream;%0Ause+std::io::prelude::*;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+mut+stream+=+UnixStream::connect(%22/path/to/my/socket%22)?;%0A++++stream.write_all(b%22hello+world%22)?;%0A++++let+mut+response+=+String::new();%0A++++stream.read_to_string(%26mut+response)?;%0A++++println!(%22%7Bresponse%7D%22);%0A++++Ok(())%0A%7D&edition=2021)\n\n[source](about:blank/src/std/os/unix/net/stream.rs.html#65-569)[§](#impl-UnixStream)\n\n1.10.0 · [source](about:blank/src/std/os/unix/net/stream.rs.html#82-90)\n\nConnects to the socket named by `path`.\n\n##### [§](#examples-1)Examples\n\n```\nuse std::os::unix::net::UnixStream;\n\nlet socket = match UnixStream::connect(\"/tmp/sock\") {\n    Ok(sock) => sock,\n    Err(e) => {\n        println!(\"Couldn't connect: {e:?}\");\n        return\n    }\n};\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::os::unix::net::UnixStream;%0A++++%0A++++let+socket+=+match+UnixStream::connect(%22/tmp/sock%22)+%7B%0A++++++++Ok(sock)+=%3E+sock,%0A++++++++Err(e)+=%3E+%7B%0A++++++++++++println!(%22Couldn%27t+connect:+%7Be:?%7D%22);%0A++++++++++++return%0A++++++++%7D%0A++++%7D;%0A%7D&edition=2021)\n\n1.70.0 · [source](about:blank/src/std/os/unix/net/stream.rs.html#116-126)\n\nConnects to the socket specified by [`address`](struct.SocketAddr.html \"struct std::os::unix::net::SocketAddr\").\n\n##### [§](#examples-2)Examples\n\n```\nuse std::os::unix::net::{UnixListener, UnixStream};\n\nfn main() -> std::io::Result<()> {\n    let listener = UnixListener::bind(\"/path/to/the/socket\")?;\n    let addr = listener.local_addr()?;\n\n    let sock = match UnixStream::connect_addr(&addr) {\n        Ok(sock) => sock,\n        Err(e) => {\n            println!(\"Couldn't connect: {e:?}\");\n            return Err(e)\n        }\n    };\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::os::unix::net::%7BUnixListener,+UnixStream%7D;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+listener+=+UnixListener::bind(%22/path/to/the/socket%22)?;%0A++++let+addr+=+listener.local_addr()?;%0A%0A++++let+sock+=+match+UnixStream::connect_addr(%26addr)+%7B%0A++++++++Ok(sock)+=%3E+sock,%0A++++++++Err(e)+=%3E+%7B%0A++++++++++++println!(%22Couldn%27t+connect:+%7Be:?%7D%22);%0A++++++++++++return+Err(e)%0A++++++++%7D%0A++++%7D;%0A++++Ok(())%0A%7D&edition=2021)\n\n1.10.0 · [source](about:blank/src/std/os/unix/net/stream.rs.html#146-149)\n\nCreates an unnamed pair of connected sockets.\n\nReturns two `UnixStream`s which are connected to each other.\n\n##### [§](#examples-3)Examples\n\n```\nuse std::os::unix::net::UnixStream;\n\nlet (sock1, sock2) = match UnixStream::pair() {\n    Ok((sock1, sock2)) => (sock1, sock2),\n    Err(e) => {\n        println!(\"Couldn't create a pair of sockets: {e:?}\");\n        return\n    }\n};\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::os::unix::net::UnixStream;%0A++++%0A++++let+(sock1,+sock2)+=+match+UnixStream::pair()+%7B%0A++++++++Ok((sock1,+sock2))+=%3E+(sock1,+sock2),%0A++++++++Err(e)+=%3E+%7B%0A++++++++++++println!(%22Couldn%27t+create+a+pair+of+sockets:+%7Be:?%7D%22);%0A++++++++++++return%0A++++++++%7D%0A++++%7D;%0A%7D&edition=2021)\n\n1.10.0 · [source](about:blank/src/std/os/unix/net/stream.rs.html#170-172)\n\nCreates a new independently owned handle to the underlying socket.\n\nThe returned `UnixStream` is a reference to the same stream that this object references. Both handles will read and write the same stream of data, and options set on one stream will be propagated to the other stream.\n\n##### [§](#examples-4)Examples\n\n```\nuse std::os::unix::net::UnixStream;\n\nfn main() -> std::io::Result<()> {\n    let socket = UnixStream::connect(\"/tmp/sock\")?;\n    let sock_copy = socket.try_clone().expect(\"Couldn't clone socket\");\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::os::unix::net::UnixStream;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+socket+=+UnixStream::connect(%22/tmp/sock%22)?;%0A++++let+sock_copy+=+socket.try_clone().expect(%22Couldn%27t+clone+socket%22);%0A++++Ok(())%0A%7D&edition=2021)\n\n1.10.0 · [source](about:blank/src/std/os/unix/net/stream.rs.html#188-190)\n\nReturns the socket address of the local half of this connection.\n\n##### [§](#examples-5)Examples\n\n```\nuse std::os::unix::net::UnixStream;\n\nfn main() -> std::io::Result<()> {\n    let socket = UnixStream::connect(\"/tmp/sock\")?;\n    let addr = socket.local_addr().expect(\"Couldn't get local address\");\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::os::unix::net::UnixStream;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+socket+=+UnixStream::connect(%22/tmp/sock%22)?;%0A++++let+addr+=+socket.local_addr().expect(%22Couldn%27t+get+local+address%22);%0A++++Ok(())%0A%7D&edition=2021)\n\n1.10.0 · [source](about:blank/src/std/os/unix/net/stream.rs.html#206-208)\n\nReturns the socket address of the remote half of this connection.\n\n##### [§](#examples-6)Examples\n\n```\nuse std::os::unix::net::UnixStream;\n\nfn main() -> std::io::Result<()> {\n    let socket = UnixStream::connect(\"/tmp/sock\")?;\n    let addr = socket.peer_addr().expect(\"Couldn't get peer address\");\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::os::unix::net::UnixStream;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+socket+=+UnixStream::connect(%22/tmp/sock%22)?;%0A++++let+addr+=+socket.peer_addr().expect(%22Couldn%27t+get+peer+address%22);%0A++++Ok(())%0A%7D&edition=2021)\n\n[source](about:blank/src/std/os/unix/net/stream.rs.html#235-237)\n\n🔬This is a nightly-only experimental API. (`peer_credentials_unix_socket` [#42839](https://github.com/rust-lang/rust/issues/42839))\n\nGets the peer credentials for this Unix domain socket.\n\n##### [§](#examples-7)Examples\n\n```\n#![feature(peer_credentials_unix_socket)]\nuse std::os::unix::net::UnixStream;\n\nfn main() -> std::io::Result<()> {\n    let socket = UnixStream::connect(\"/tmp/sock\")?;\n    let peer_cred = socket.peer_cred().expect(\"Couldn't get peer credentials\");\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(peer_credentials_unix_socket)%5D%0Ause+std::os::unix::net::UnixStream;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+socket+=+UnixStream::connect(%22/tmp/sock%22)?;%0A++++let+peer_cred+=+socket.peer_cred().expect(%22Couldn%27t+get+peer+credentials%22);%0A++++Ok(())%0A%7D&version=nightly&edition=2021)\n\n1.10.0 · [source](about:blank/src/std/os/unix/net/stream.rs.html#277-279)\n\nSets the read timeout for the socket.\n\nIf the provided value is [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\"), then [`read`](about:blank/io/trait.Read.html#tymethod.read \"method std::io::Read::read\") calls will block indefinitely. An [`Err`](about:blank/result/enum.Result.html#variant.Err \"variant std::result::Result::Err\") is returned if the zero [`Duration`](../../../time/struct.Duration.html \"struct std::time::Duration\") is passed to this method.\n\n##### [§](#examples-8)Examples\n\n```\nuse std::os::unix::net::UnixStream;\nuse std::time::Duration;\n\nfn main() -> std::io::Result<()> {\n    let socket = UnixStream::connect(\"/tmp/sock\")?;\n    socket.set_read_timeout(Some(Duration::new(1, 0))).expect(\"Couldn't set read timeout\");\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::os::unix::net::UnixStream;%0Ause+std::time::Duration;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+socket+=+UnixStream::connect(%22/tmp/sock%22)?;%0A++++socket.set_read_timeout(Some(Duration::new(1,+0))).expect(%22Couldn%27t+set+read+timeout%22);%0A++++Ok(())%0A%7D&edition=2021)\n\nAn [`Err`](about:blank/result/enum.Result.html#variant.Err \"variant std::result::Result::Err\") is returned if the zero [`Duration`](../../../time/struct.Duration.html \"struct std::time::Duration\") is passed to this method:\n\n```\nuse std::io;\nuse std::os::unix::net::UnixStream;\nuse std::time::Duration;\n\nfn main() -> std::io::Result<()> {\n    let socket = UnixStream::connect(\"/tmp/sock\")?;\n    let result = socket.set_read_timeout(Some(Duration::new(0, 0)));\n    let err = result.unwrap_err();\n    assert_eq!(err.kind(), io::ErrorKind::InvalidInput);\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::io;%0Ause+std::os::unix::net::UnixStream;%0Ause+std::time::Duration;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+socket+=+UnixStream::connect(%22/tmp/sock%22)?;%0A++++let+result+=+socket.set_read_timeout(Some(Duration::new(0,+0)));%0A++++let+err+=+result.unwrap_err();%0A++++assert_eq!(err.kind(),+io::ErrorKind::InvalidInput);%0A++++Ok(())%0A%7D&edition=2021)\n\n1.10.0 · [source](about:blank/src/std/os/unix/net/stream.rs.html#320-322)\n\nSets the write timeout for the socket.\n\nIf the provided value is [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\"), then [`write`](../../../macro.write.html \"macro std::write\") calls will block indefinitely. An [`Err`](about:blank/result/enum.Result.html#variant.Err \"variant std::result::Result::Err\") is returned if the zero [`Duration`](../../../time/struct.Duration.html \"struct std::time::Duration\") is passed to this method.\n\n##### [§](#examples-9)Examples\n\n```\nuse std::os::unix::net::UnixStream;\nuse std::time::Duration;\n\nfn main() -> std::io::Result<()> {\n    let socket = UnixStream::connect(\"/tmp/sock\")?;\n    socket.set_write_timeout(Some(Duration::new(1, 0)))\n        .expect(\"Couldn't set write timeout\");\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::os::unix::net::UnixStream;%0Ause+std::time::Duration;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+socket+=+UnixStream::connect(%22/tmp/sock%22)?;%0A++++socket.set_write_timeout(Some(Duration::new(1,+0)))%0A++++++++.expect(%22Couldn%27t+set+write+timeout%22);%0A++++Ok(())%0A%7D&edition=2021)\n\nAn [`Err`](about:blank/result/enum.Result.html#variant.Err \"variant std::result::Result::Err\") is returned if the zero [`Duration`](../../../time/struct.Duration.html \"struct std::time::Duration\") is passed to this method:\n\n```\nuse std::io;\nuse std::net::UdpSocket;\nuse std::time::Duration;\n\nfn main() -> std::io::Result<()> {\n    let socket = UdpSocket::bind(\"127.0.0.1:34254\")?;\n    let result = socket.set_write_timeout(Some(Duration::new(0, 0)));\n    let err = result.unwrap_err();\n    assert_eq!(err.kind(), io::ErrorKind::InvalidInput);\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::io;%0Ause+std::net::UdpSocket;%0Ause+std::time::Duration;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+socket+=+UdpSocket::bind(%22127.0.0.1:34254%22)?;%0A++++let+result+=+socket.set_write_timeout(Some(Duration::new(0,+0)));%0A++++let+err+=+result.unwrap_err();%0A++++assert_eq!(err.kind(),+io::ErrorKind::InvalidInput);%0A++++Ok(())%0A%7D&edition=2021)\n\n1.10.0 · [source](about:blank/src/std/os/unix/net/stream.rs.html#340-342)\n\nReturns the read timeout of this socket.\n\n##### [§](#examples-10)Examples\n\n```\nuse std::os::unix::net::UnixStream;\nuse std::time::Duration;\n\nfn main() -> std::io::Result<()> {\n    let socket = UnixStream::connect(\"/tmp/sock\")?;\n    socket.set_read_timeout(Some(Duration::new(1, 0))).expect(\"Couldn't set read timeout\");\n    assert_eq!(socket.read_timeout()?, Some(Duration::new(1, 0)));\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::os::unix::net::UnixStream;%0Ause+std::time::Duration;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+socket+=+UnixStream::connect(%22/tmp/sock%22)?;%0A++++socket.set_read_timeout(Some(Duration::new(1,+0))).expect(%22Couldn%27t+set+read+timeout%22);%0A++++assert_eq!(socket.read_timeout()?,+Some(Duration::new(1,+0)));%0A++++Ok(())%0A%7D&edition=2021)\n\n1.10.0 · [source](about:blank/src/std/os/unix/net/stream.rs.html#361-363)\n\nReturns the write timeout of this socket.\n\n##### [§](#examples-11)Examples\n\n```\nuse std::os::unix::net::UnixStream;\nuse std::time::Duration;\n\nfn main() -> std::io::Result<()> {\n    let socket = UnixStream::connect(\"/tmp/sock\")?;\n    socket.set_write_timeout(Some(Duration::new(1, 0)))\n        .expect(\"Couldn't set write timeout\");\n    assert_eq!(socket.write_timeout()?, Some(Duration::new(1, 0)));\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::os::unix::net::UnixStream;%0Ause+std::time::Duration;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+socket+=+UnixStream::connect(%22/tmp/sock%22)?;%0A++++socket.set_write_timeout(Some(Duration::new(1,+0)))%0A++++++++.expect(%22Couldn%27t+set+write+timeout%22);%0A++++assert_eq!(socket.write_timeout()?,+Some(Duration::new(1,+0)));%0A++++Ok(())%0A%7D&edition=2021)\n\n1.10.0 · [source](about:blank/src/std/os/unix/net/stream.rs.html#379-381)\n\nMoves the socket into or out of nonblocking mode.\n\n##### [§](#examples-12)Examples\n\n```\nuse std::os::unix::net::UnixStream;\n\nfn main() -> std::io::Result<()> {\n    let socket = UnixStream::connect(\"/tmp/sock\")?;\n    socket.set_nonblocking(true).expect(\"Couldn't set nonblocking\");\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::os::unix::net::UnixStream;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+socket+=+UnixStream::connect(%22/tmp/sock%22)?;%0A++++socket.set_nonblocking(true).expect(%22Couldn%27t+set+nonblocking%22);%0A++++Ok(())%0A%7D&edition=2021)\n\n[source](about:blank/src/std/os/unix/net/stream.rs.html#404-406)\n\n🔬This is a nightly-only experimental API. (`unix_set_mark` [#96467](https://github.com/rust-lang/rust/issues/96467))\n\nSet the id of the socket for network filtering purpose\n\n```\n#![feature(unix_set_mark)]\nuse std::os::unix::net::UnixStream;\n\nfn main() -> std::io::Result<()> {\n    let sock = UnixStream::connect(\"/tmp/sock\")?;\n    sock.set_mark(32)?;\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(unix_set_mark)%5D%0Ause+std::os::unix::net::UnixStream;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+sock+=+UnixStream::connect(%22/tmp/sock%22)?;%0A++++sock.set_mark(32)?;%0A++++Ok(())%0A%7D&version=nightly&edition=2021)\n\n1.10.0 · [source](about:blank/src/std/os/unix/net/stream.rs.html#427-429)\n\nReturns the value of the `SO_ERROR` option.\n\n##### [§](#examples-13)Examples\n\n```\nuse std::os::unix::net::UnixStream;\n\nfn main() -> std::io::Result<()> {\n    let socket = UnixStream::connect(\"/tmp/sock\")?;\n    if let Ok(Some(err)) = socket.take_error() {\n        println!(\"Got error: {err:?}\");\n    }\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::os::unix::net::UnixStream;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+socket+=+UnixStream::connect(%22/tmp/sock%22)?;%0A++++if+let+Ok(Some(err))+=+socket.take_error()+%7B%0A++++++++println!(%22Got+error:+%7Berr:?%7D%22);%0A++++%7D%0A++++Ok(())%0A%7D&edition=2021)\n\n##### [§](#platform-specific)Platform specific\n\nOn Redox this always returns `None`.\n\n1.10.0 · [source](about:blank/src/std/os/unix/net/stream.rs.html#450-452)\n\nShuts down the read, write, or both halves of this connection.\n\nThis function will cause all pending and future I/O calls on the specified portions to immediately return with an appropriate value (see the documentation of [`Shutdown`](../../../net/enum.Shutdown.html \"enum std::net::Shutdown\")).\n\n##### [§](#examples-14)Examples\n\n```\nuse std::os::unix::net::UnixStream;\nuse std::net::Shutdown;\n\nfn main() -> std::io::Result<()> {\n    let socket = UnixStream::connect(\"/tmp/sock\")?;\n    socket.shutdown(Shutdown::Both).expect(\"shutdown function failed\");\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::os::unix::net::UnixStream;%0Ause+std::net::Shutdown;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+socket+=+UnixStream::connect(%22/tmp/sock%22)?;%0A++++socket.shutdown(Shutdown::Both).expect(%22shutdown+function+failed%22);%0A++++Ok(())%0A%7D&edition=2021)\n\n[source](about:blank/src/std/os/unix/net/stream.rs.html#476-478)\n\n🔬This is a nightly-only experimental API. (`unix_socket_peek` [#76923](https://github.com/rust-lang/rust/issues/76923))\n\nReceives data on the socket from the remote address to which it is connected, without removing that data from the queue. On success, returns the number of bytes peeked.\n\nSuccessive calls return the same data. This is accomplished by passing `MSG_PEEK` as a flag to the underlying `recv` system call.\n\n##### [§](#examples-15)Examples\n\n```\n#![feature(unix_socket_peek)]\n\nuse std::os::unix::net::UnixStream;\n\nfn main() -> std::io::Result<()> {\n    let socket = UnixStream::connect(\"/tmp/sock\")?;\n    let mut buf = [0; 10];\n    let len = socket.peek(&mut buf).expect(\"peek failed\");\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(unix_socket_peek)%5D%0A%0Ause+std::os::unix::net::UnixStream;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+socket+=+UnixStream::connect(%22/tmp/sock%22)?;%0A++++let+mut+buf+=+%5B0;+10%5D;%0A++++let+len+=+socket.peek(%26mut+buf).expect(%22peek+failed%22);%0A++++Ok(())%0A%7D&version=nightly&edition=2021)\n\n[source](about:blank/src/std/os/unix/net/stream.rs.html#519-527)\n\n🔬This is a nightly-only experimental API. (`unix_socket_ancillary_data` [#76915](https://github.com/rust-lang/rust/issues/76915))\n\nReceives data and ancillary data from socket.\n\nOn success, returns the number of bytes read.\n\n##### [§](#examples-16)Examples\n\n```\n#![feature(unix_socket_ancillary_data)]\nuse std::os::unix::net::{UnixStream, SocketAncillary, AncillaryData};\nuse std::io::IoSliceMut;\n\nfn main() -> std::io::Result<()> {\n    let socket = UnixStream::connect(\"/tmp/sock\")?;\n    let mut buf1 = [1; 8];\n    let mut buf2 = [2; 16];\n    let mut buf3 = [3; 8];\n    let mut bufs = &mut [\n        IoSliceMut::new(&mut buf1),\n        IoSliceMut::new(&mut buf2),\n        IoSliceMut::new(&mut buf3),\n    ][..];\n    let mut fds = [0; 8];\n    let mut ancillary_buffer = [0; 128];\n    let mut ancillary = SocketAncillary::new(&mut ancillary_buffer[..]);\n    let size = socket.recv_vectored_with_ancillary(bufs, &mut ancillary)?;\n    println!(\"received {size}\");\n    for ancillary_result in ancillary.messages() {\n        if let AncillaryData::ScmRights(scm_rights) = ancillary_result.unwrap() {\n            for fd in scm_rights {\n                println!(\"receive file descriptor: {fd}\");\n            }\n        }\n    }\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(unix_socket_ancillary_data)%5D%0Ause+std::os::unix::net::%7BUnixStream,+SocketAncillary,+AncillaryData%7D;%0Ause+std::io::IoSliceMut;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+socket+=+UnixStream::connect(%22/tmp/sock%22)?;%0A++++let+mut+buf1+=+%5B1;+8%5D;%0A++++let+mut+buf2+=+%5B2;+16%5D;%0A++++let+mut+buf3+=+%5B3;+8%5D;%0A++++let+mut+bufs+=+%26mut+%5B%0A++++++++IoSliceMut::new(%26mut+buf1),%0A++++++++IoSliceMut::new(%26mut+buf2),%0A++++++++IoSliceMut::new(%26mut+buf3),%0A++++%5D%5B..%5D;%0A++++let+mut+fds+=+%5B0;+8%5D;%0A++++let+mut+ancillary_buffer+=+%5B0;+128%5D;%0A++++let+mut+ancillary+=+SocketAncillary::new(%26mut+ancillary_buffer%5B..%5D);%0A++++let+size+=+socket.recv_vectored_with_ancillary(bufs,+%26mut+ancillary)?;%0A++++println!(%22received+%7Bsize%7D%22);%0A++++for+ancillary_result+in+ancillary.messages()+%7B%0A++++++++if+let+AncillaryData::ScmRights(scm_rights)+=+ancillary_result.unwrap()+%7B%0A++++++++++++for+fd+in+scm_rights+%7B%0A++++++++++++++++println!(%22receive+file+descriptor:+%7Bfd%7D%22);%0A++++++++++++%7D%0A++++++++%7D%0A++++%7D%0A++++Ok(())%0A%7D&version=nightly&edition=2021)\n\n[source](about:blank/src/std/os/unix/net/stream.rs.html#562-568)\n\n🔬This is a nightly-only experimental API. (`unix_socket_ancillary_data` [#76915](https://github.com/rust-lang/rust/issues/76915))\n\nSends data and ancillary data on the socket.\n\nOn success, returns the number of bytes written.\n\n##### [§](#examples-17)Examples\n\n```\n#![feature(unix_socket_ancillary_data)]\nuse std::os::unix::net::{UnixStream, SocketAncillary};\nuse std::io::IoSlice;\n\nfn main() -> std::io::Result<()> {\n    let socket = UnixStream::connect(\"/tmp/sock\")?;\n    let buf1 = [1; 8];\n    let buf2 = [2; 16];\n    let buf3 = [3; 8];\n    let bufs = &[\n        IoSlice::new(&buf1),\n        IoSlice::new(&buf2),\n        IoSlice::new(&buf3),\n    ][..];\n    let fds = [0, 1, 2];\n    let mut ancillary_buffer = [0; 128];\n    let mut ancillary = SocketAncillary::new(&mut ancillary_buffer[..]);\n    ancillary.add_fds(&fds[..]);\n    socket.send_vectored_with_ancillary(bufs, &mut ancillary)\n        .expect(\"send_vectored_with_ancillary function failed\");\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(unix_socket_ancillary_data)%5D%0Ause+std::os::unix::net::%7BUnixStream,+SocketAncillary%7D;%0Ause+std::io::IoSlice;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+socket+=+UnixStream::connect(%22/tmp/sock%22)?;%0A++++let+buf1+=+%5B1;+8%5D;%0A++++let+buf2+=+%5B2;+16%5D;%0A++++let+buf3+=+%5B3;+8%5D;%0A++++let+bufs+=+%26%5B%0A++++++++IoSlice::new(%26buf1),%0A++++++++IoSlice::new(%26buf2),%0A++++++++IoSlice::new(%26buf3),%0A++++%5D%5B..%5D;%0A++++let+fds+=+%5B0,+1,+2%5D;%0A++++let+mut+ancillary_buffer+=+%5B0;+128%5D;%0A++++let+mut+ancillary+=+SocketAncillary::new(%26mut+ancillary_buffer%5B..%5D);%0A++++ancillary.add_fds(%26fds%5B..%5D);%0A++++socket.send_vectored_with_ancillary(bufs,+%26mut+ancillary)%0A++++++++.expect(%22send_vectored_with_ancillary+function+failed%22);%0A++++Ok(())%0A%7D&version=nightly&edition=2021)\n\n1.63.0 · [source](about:blank/src/std/os/unix/net/stream.rs.html#677-682)[§](#impl-AsFd-for-UnixStream)\n\n1.10.0 · [source](about:blank/src/std/os/unix/net/stream.rs.html#653-658)[§](#impl-AsRawFd-for-UnixStream)\n\n1.10.0 · [source](about:blank/src/std/os/unix/net/stream.rs.html#51-63)[§](#impl-Debug-for-UnixStream)\n\n1.63.0 · [source](about:blank/src/std/os/unix/net/stream.rs.html#694-699)[§](#impl-From%3COwnedFd%3E-for-UnixStream)\n\n[source](about:blank/src/std/os/unix/net/stream.rs.html#696-698)[§](#method.from)\n\nConverts to this type from the input type.\n\n1.63.0 · [source](about:blank/src/std/os/unix/net/stream.rs.html#685-691)[§](#impl-From%3CUnixStream%3E-for-OwnedFd)\n\n1.10.0 · [source](about:blank/src/std/os/unix/net/stream.rs.html#661-666)[§](#impl-FromRawFd-for-UnixStream)\n\n[source](about:blank/src/std/os/unix/net/stream.rs.html#663-665)[§](#method.from_raw_fd)\n\nConstructs a new instance of `Self` from the given raw file descriptor. [Read more](about:blank/fd/trait.FromRawFd.html#tymethod.from_raw_fd)\n\n1.10.0 · [source](about:blank/src/std/os/unix/net/stream.rs.html#669-674)[§](#impl-IntoRawFd-for-UnixStream)\n\n[source](about:blank/src/std/os/unix/net/stream.rs.html#671-673)[§](#method.into_raw_fd)\n\nConsumes this object, returning the raw underlying file descriptor. [Read more](about:blank/fd/trait.IntoRawFd.html#tymethod.into_raw_fd)\n\n1.10.0 · [source](about:blank/src/std/os/unix/net/stream.rs.html#592-609)[§](#impl-Read-for-%26UnixStream)\n\n[source](about:blank/src/std/os/unix/net/stream.rs.html#593-595)[§](#method.read)\n\nPull some bytes from this source into the specified buffer, returning how many bytes were read. [Read more](about:blank/io/trait.Read.html#tymethod.read)\n\n[source](about:blank/src/std/os/unix/net/stream.rs.html#597-599)[§](#method.read_buf)\n\n🔬This is a nightly-only experimental API. (`read_buf` [#78485](https://github.com/rust-lang/rust/issues/78485))\n\nPull some bytes from this source into the specified buffer. [Read more](about:blank/io/trait.Read.html#method.read_buf)\n\n[source](about:blank/src/std/os/unix/net/stream.rs.html#601-603)[§](#method.read_vectored)\n\nLike `read`, except that it reads into a slice of buffers. [Read more](about:blank/io/trait.Read.html#method.read_vectored)\n\n[source](about:blank/src/std/os/unix/net/stream.rs.html#606-608)[§](#method.is_read_vectored)\n\n🔬This is a nightly-only experimental API. (`can_vector` [#69941](https://github.com/rust-lang/rust/issues/69941))\n\nDetermines if this `Read`er has an efficient `read_vectored` implementation. [Read more](about:blank/io/trait.Read.html#method.is_read_vectored)\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#865-867)[§](#method.read_to_end)\n\nRead all bytes until EOF in this source, placing them into `buf`. [Read more](about:blank/io/trait.Read.html#method.read_to_end)\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#908-910)[§](#method.read_to_string)\n\nRead all bytes until EOF in this source, appending them to `buf`. [Read more](about:blank/io/trait.Read.html#method.read_to_string)\n\n1.6.0 · [source](about:blank/src/std/io/mod.rs.html#961-963)[§](#method.read_exact)\n\nRead the exact number of bytes required to fill `buf`. [Read more](about:blank/io/trait.Read.html#method.read_exact)\n\n[source](about:blank/src/std/io/mod.rs.html#995-997)[§](#method.read_buf_exact)\n\n🔬This is a nightly-only experimental API. (`read_buf` [#78485](https://github.com/rust-lang/rust/issues/78485))\n\nRead the exact number of bytes required to fill `cursor`. [Read more](about:blank/io/trait.Read.html#method.read_buf_exact)\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#1034-1039)[§](#method.by_ref)\n\nCreates a “by reference” adaptor for this instance of `Read`. [Read more](about:blank/io/trait.Read.html#method.by_ref)\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#1077-1082)[§](#method.bytes)\n\nTransforms this `Read` instance to an [`Iterator`](../../../iter/trait.Iterator.html \"trait std::iter::Iterator\") over its bytes. [Read more](about:blank/io/trait.Read.html#method.bytes)\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#1115-1120)[§](#method.chain)\n\nCreates an adapter which will chain this stream with another. [Read more](about:blank/io/trait.Read.html#method.chain)\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#1154-1159)[§](#method.take)\n\nCreates an adapter which will read at most `limit` bytes from it. [Read more](about:blank/io/trait.Read.html#method.take)\n\n1.10.0 · [source](about:blank/src/std/os/unix/net/stream.rs.html#572-589)[§](#impl-Read-for-UnixStream)\n\n[source](about:blank/src/std/os/unix/net/stream.rs.html#573-575)[§](#method.read-1)\n\nPull some bytes from this source into the specified buffer, returning how many bytes were read. [Read more](about:blank/io/trait.Read.html#tymethod.read)\n\n[source](about:blank/src/std/os/unix/net/stream.rs.html#577-579)[§](#method.read_buf-1)\n\n🔬This is a nightly-only experimental API. (`read_buf` [#78485](https://github.com/rust-lang/rust/issues/78485))\n\nPull some bytes from this source into the specified buffer. [Read more](about:blank/io/trait.Read.html#method.read_buf)\n\n[source](about:blank/src/std/os/unix/net/stream.rs.html#581-583)[§](#method.read_vectored-1)\n\nLike `read`, except that it reads into a slice of buffers. [Read more](about:blank/io/trait.Read.html#method.read_vectored)\n\n[source](about:blank/src/std/os/unix/net/stream.rs.html#586-588)[§](#method.is_read_vectored-1)\n\n🔬This is a nightly-only experimental API. (`can_vector` [#69941](https://github.com/rust-lang/rust/issues/69941))\n\nDetermines if this `Read`er has an efficient `read_vectored` implementation. [Read more](about:blank/io/trait.Read.html#method.is_read_vectored)\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#865-867)[§](#method.read_to_end-1)\n\nRead all bytes until EOF in this source, placing them into `buf`. [Read more](about:blank/io/trait.Read.html#method.read_to_end)\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#908-910)[§](#method.read_to_string-1)\n\nRead all bytes until EOF in this source, appending them to `buf`. [Read more](about:blank/io/trait.Read.html#method.read_to_string)\n\n1.6.0 · [source](about:blank/src/std/io/mod.rs.html#961-963)[§](#method.read_exact-1)\n\nRead the exact number of bytes required to fill `buf`. [Read more](about:blank/io/trait.Read.html#method.read_exact)\n\n[source](about:blank/src/std/io/mod.rs.html#995-997)[§](#method.read_buf_exact-1)\n\n🔬This is a nightly-only experimental API. (`read_buf` [#78485](https://github.com/rust-lang/rust/issues/78485))\n\nRead the exact number of bytes required to fill `cursor`. [Read more](about:blank/io/trait.Read.html#method.read_buf_exact)\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#1034-1039)[§](#method.by_ref-1)\n\nCreates a “by reference” adaptor for this instance of `Read`. [Read more](about:blank/io/trait.Read.html#method.by_ref)\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#1077-1082)[§](#method.bytes-1)\n\nTransforms this `Read` instance to an [`Iterator`](../../../iter/trait.Iterator.html \"trait std::iter::Iterator\") over its bytes. [Read more](about:blank/io/trait.Read.html#method.bytes)\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#1115-1120)[§](#method.chain-1)\n\nCreates an adapter which will chain this stream with another. [Read more](about:blank/io/trait.Read.html#method.chain)\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#1154-1159)[§](#method.take-1)\n\nCreates an adapter which will read at most `limit` bytes from it. [Read more](about:blank/io/trait.Read.html#method.take)\n\n[source](about:blank/src/std/os/net/linux_ext/socket.rs.html#55-63)[§](#impl-UnixSocketExt-for-UnixStream)\n\nAvailable on **Linux or Android** only.\n\n[source](about:blank/src/std/os/net/linux_ext/socket.rs.html#56-58)[§](#method.passcred)\n\n🔬This is a nightly-only experimental API. (`unix_socket_ancillary_data` [#76915](https://github.com/rust-lang/rust/issues/76915))\n\nAvailable on **Linux** only.\n\nQuery the current setting of socket option `SO_PASSCRED`.\n\n[source](about:blank/src/std/os/net/linux_ext/socket.rs.html#60-62)[§](#method.set_passcred)\n\n🔬This is a nightly-only experimental API. (`unix_socket_ancillary_data` [#76915](https://github.com/rust-lang/rust/issues/76915))\n\nAvailable on **Linux** only.\n\nEnable or disable socket option `SO_PASSCRED`. [Read more](about:blank/linux/net/trait.UnixSocketExt.html#tymethod.set_passcred)\n\n1.10.0 · [source](about:blank/src/std/os/unix/net/stream.rs.html#632-650)[§](#impl-Write-for-%26UnixStream)\n\n[source](about:blank/src/std/os/unix/net/stream.rs.html#633-635)[§](#method.write-1)\n\nWrite a buffer into this writer, returning how many bytes were written. [Read more](about:blank/io/trait.Write.html#tymethod.write)\n\n[source](about:blank/src/std/os/unix/net/stream.rs.html#637-639)[§](#method.write_vectored-1)\n\nLike [`write`](about:blank/io/trait.Write.html#tymethod.write \"method std::io::Write::write\"), except that it writes from a slice of buffers. [Read more](about:blank/io/trait.Write.html#method.write_vectored)\n\n[source](about:blank/src/std/os/unix/net/stream.rs.html#642-644)[§](#method.is_write_vectored-1)\n\n🔬This is a nightly-only experimental API. (`can_vector` [#69941](https://github.com/rust-lang/rust/issues/69941))\n\n[source](about:blank/src/std/os/unix/net/stream.rs.html#647-649)[§](#method.flush-1)\n\nFlush this output stream, ensuring that all intermediately buffered contents reach their destination. [Read more](about:blank/io/trait.Write.html#tymethod.flush)\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#1699-1711)[§](#method.write_all-1)\n\nAttempts to write an entire buffer into this writer. [Read more](about:blank/io/trait.Write.html#method.write_all)\n\n[source](about:blank/src/std/io/mod.rs.html#1761-1776)[§](#method.write_all_vectored-1)\n\n🔬This is a nightly-only experimental API. (`write_all_vectored` [#70436](https://github.com/rust-lang/rust/issues/70436))\n\nAttempts to write multiple buffers into this writer. [Read more](about:blank/io/trait.Write.html#method.write_all_vectored)\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#1814-1850)[§](#method.write_fmt-1)\n\nWrites a formatted string into this writer, returning any error encountered. [Read more](about:blank/io/trait.Write.html#method.write_fmt)\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#1874-1879)[§](#method.by_ref-3)\n\nCreates a “by reference” adapter for this instance of `Write`. [Read more](about:blank/io/trait.Write.html#method.by_ref)\n\n1.10.0 · [source](about:blank/src/std/os/unix/net/stream.rs.html#612-629)[§](#impl-Write-for-UnixStream)\n\n[source](about:blank/src/std/os/unix/net/stream.rs.html#613-615)[§](#method.write)\n\nWrite a buffer into this writer, returning how many bytes were written. [Read more](about:blank/io/trait.Write.html#tymethod.write)\n\n[source](about:blank/src/std/os/unix/net/stream.rs.html#617-619)[§](#method.write_vectored)\n\nLike [`write`](about:blank/io/trait.Write.html#tymethod.write \"method std::io::Write::write\"), except that it writes from a slice of buffers. [Read more](about:blank/io/trait.Write.html#method.write_vectored)\n\n[source](about:blank/src/std/os/unix/net/stream.rs.html#622-624)[§](#method.is_write_vectored)\n\n🔬This is a nightly-only experimental API. (`can_vector` [#69941](https://github.com/rust-lang/rust/issues/69941))\n\n[source](about:blank/src/std/os/unix/net/stream.rs.html#626-628)[§](#method.flush)\n\nFlush this output stream, ensuring that all intermediately buffered contents reach their destination. [Read more](about:blank/io/trait.Write.html#tymethod.flush)\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#1699-1711)[§](#method.write_all)\n\nAttempts to write an entire buffer into this writer. [Read more](about:blank/io/trait.Write.html#method.write_all)\n\n[source](about:blank/src/std/io/mod.rs.html#1761-1776)[§](#method.write_all_vectored)\n\n🔬This is a nightly-only experimental API. (`write_all_vectored` [#70436](https://github.com/rust-lang/rust/issues/70436))\n\nAttempts to write multiple buffers into this writer. [Read more](about:blank/io/trait.Write.html#method.write_all_vectored)\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#1814-1850)[§](#method.write_fmt)\n\nWrites a formatted string into this writer, returning any error encountered. [Read more](about:blank/io/trait.Write.html#method.write_fmt)\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#1874-1879)[§](#method.by_ref-2)\n\nCreates a “by reference” adapter for this instance of `Write`. [Read more](about:blank/io/trait.Write.html#method.by_ref)\n\n[§](#impl-Freeze-for-UnixStream)\n\n[§](#impl-RefUnwindSafe-for-UnixStream)\n\n[§](#impl-Send-for-UnixStream)\n\n[§](#impl-Sync-for-UnixStream)\n\n[§](#impl-Unpin-for-UnixStream)\n\n[§](#impl-UnwindSafe-for-UnixStream)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140)[§](#impl-Any-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208)[§](#impl-Borrow%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216)[§](#impl-BorrowMut%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765)[§](#impl-From%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768)[§](#method.from-2)\n\nReturns the argument unchanged.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750)[§](#impl-Into%3CU%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758)[§](#method.into)\n\nCalls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of `[From](../../../convert/trait.From.html \"trait std::convert::From\")<T> for U` chooses to do.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807)[§](#impl-TryFrom%3CU%3E-for-T)\n\n[§](#associatedtype.Error-1)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812)[§](#method.try_from)\n\nPerforms the conversion.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792)[§](#impl-TryInto%3CU%3E-for-T)\n\n[§](#associatedtype.Error)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797)[§](#method.try_into)\n\nPerforms the conversion.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"A Unix stream socket.\"><title>UnixStream in std::os::unix::net - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../../../\" data-static-root-path=\"../../../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc struct\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">UnixStream</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">UnixStream</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#implementations\">Methods</a></h3><ul class=\"block method\"><li><a href=\"#method.connect\">connect</a></li><li><a href=\"#method.connect_addr\">connect_addr</a></li><li><a href=\"#method.local_addr\">local_addr</a></li><li><a href=\"#method.pair\">pair</a></li><li><a href=\"#method.peek\">peek</a></li><li><a href=\"#method.peer_addr\">peer_addr</a></li><li><a href=\"#method.peer_cred\">peer_cred</a></li><li><a href=\"#method.read_timeout\">read_timeout</a></li><li><a href=\"#method.recv_vectored_with_ancillary\">recv_vectored_with_ancillary</a></li><li><a href=\"#method.send_vectored_with_ancillary\">send_vectored_with_ancillary</a></li><li><a href=\"#method.set_mark\">set_mark</a></li><li><a href=\"#method.set_nonblocking\">set_nonblocking</a></li><li><a href=\"#method.set_read_timeout\">set_read_timeout</a></li><li><a href=\"#method.set_write_timeout\">set_write_timeout</a></li><li><a href=\"#method.shutdown\">shutdown</a></li><li><a href=\"#method.take_error\">take_error</a></li><li><a href=\"#method.try_clone\">try_clone</a></li><li><a href=\"#method.write_timeout\">write_timeout</a></li></ul><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-AsFd-for-UnixStream\">AsFd</a></li><li><a href=\"#impl-AsRawFd-for-UnixStream\">AsRawFd</a></li><li><a href=\"#impl-Debug-for-UnixStream\">Debug</a></li><li><a href=\"#impl-From%3COwnedFd%3E-for-UnixStream\">From&lt;OwnedFd&gt;</a></li><li><a href=\"#impl-From%3CUnixStream%3E-for-OwnedFd\">From&lt;UnixStream&gt;</a></li><li><a href=\"#impl-FromRawFd-for-UnixStream\">FromRawFd</a></li><li><a href=\"#impl-IntoRawFd-for-UnixStream\">IntoRawFd</a></li><li><a href=\"#impl-Read-for-%26UnixStream\">Read</a></li><li><a href=\"#impl-Read-for-UnixStream\">Read</a></li><li><a href=\"#impl-UnixSocketExt-for-UnixStream\">UnixSocketExt</a></li><li><a href=\"#impl-Write-for-%26UnixStream\">Write</a></li><li><a href=\"#impl-Write-for-UnixStream\">Write</a></li></ul><h3><a href=\"#synthetic-implementations\">Auto Trait Implementations</a></h3><ul class=\"block synthetic-implementation\"><li><a href=\"#impl-Freeze-for-UnixStream\">Freeze</a></li><li><a href=\"#impl-RefUnwindSafe-for-UnixStream\">RefUnwindSafe</a></li><li><a href=\"#impl-Send-for-UnixStream\">Send</a></li><li><a href=\"#impl-Sync-for-UnixStream\">Sync</a></li><li><a href=\"#impl-Unpin-for-UnixStream\">Unpin</a></li><li><a href=\"#impl-UnwindSafe-for-UnixStream\">UnwindSafe</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-Any-for-T\">Any</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-T\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-T\">BorrowMut&lt;T&gt;</a></li><li><a href=\"#impl-From%3CT%3E-for-T\">From&lt;T&gt;</a></li><li><a href=\"#impl-Into%3CU%3E-for-T\">Into&lt;U&gt;</a></li><li><a href=\"#impl-TryFrom%3CU%3E-for-T\">TryFrom&lt;U&gt;</a></li><li><a href=\"#impl-TryInto%3CU%3E-for-T\">TryInto&lt;U&gt;</a></li></ul></section><h2><a href=\"index.html\">In std::os::unix::net</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.Incoming.html\">Incoming</a></li><li><a href=\"struct.Messages.html\">Messages</a></li><li><a href=\"struct.ScmCredentials.html\">ScmCredentials</a></li><li><a href=\"struct.ScmRights.html\">ScmRights</a></li><li><a href=\"struct.SocketAddr.html\">SocketAddr</a></li><li><a href=\"struct.SocketAncillary.html\">SocketAncillary</a></li><li><a href=\"struct.SocketCred.html\">SocketCred</a></li><li><a href=\"struct.UCred.html\">UCred</a></li><li><a href=\"struct.UnixDatagram.html\">UnixDatagram</a></li><li><a href=\"struct.UnixListener.html\">UnixListener</a></li><li><a href=\"struct.UnixStream.html\">UnixStream</a></li></ul><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.AncillaryData.html\">AncillaryData</a></li><li><a href=\"enum.AncillaryError.html\">AncillaryError</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Struct <a href=\"../../../index.html\">std</a>::<wbr><a href=\"../../index.html\">os</a>::<wbr><a href=\"../index.html\">unix</a>::<wbr><a href=\"index.html\">net</a>::<wbr><a class=\"struct\" href=\"#\">UnixStream</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"../../../../src/std/os/unix/net/stream.rs.html#44\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub struct UnixStream(<span class=\"comment\">/* private fields */</span>);</code></pre><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Unix</strong> only.</div></span><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>A Unix stream socket.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::os::unix::net::UnixStream;\n<span class=\"kw\">use </span>std::io::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>stream = UnixStream::connect(<span class=\"string\">\"/path/to/my/socket\"</span>)<span class=\"question-mark\">?</span>;\n    stream.write_all(<span class=\"string\">b\"hello world\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>response = String::new();\n    stream.read_to_string(<span class=\"kw-2\">&amp;mut </span>response)<span class=\"question-mark\">?</span>;\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{response}\"</span>);\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::os::unix::net::UnixStream;%0Ause+std::io::prelude::*;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+mut+stream+=+UnixStream::connect(%22/path/to/my/socket%22)?;%0A++++stream.write_all(b%22hello+world%22)?;%0A++++let+mut+response+=+String::new();%0A++++stream.read_to_string(%26mut+response)?;%0A++++println!(%22%7Bresponse%7D%22);%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><h2 id=\"implementations\" class=\"section-header\">Implementations<a href=\"#implementations\" class=\"anchor\">§</a></h2><div id=\"implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-UnixStream\" class=\"impl\"><a class=\"src rightside\" href=\"../../../../src/std/os/unix/net/stream.rs.html#65-569\">source</a><a href=\"#impl-UnixStream\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"struct.UnixStream.html\" title=\"struct std::os::unix::net::UnixStream\">UnixStream</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.connect\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"../../../../src/std/os/unix/net/stream.rs.html#82-90\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.connect\" class=\"fn\">connect</a>&lt;P: <a class=\"trait\" href=\"../../../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../../../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;&gt;(path: P) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.UnixStream.html\" title=\"struct std::os::unix::net::UnixStream\">UnixStream</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Connects to the socket named by <code>path</code>.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::os::unix::net::UnixStream;\n\n<span class=\"kw\">let </span>socket = <span class=\"kw\">match </span>UnixStream::connect(<span class=\"string\">\"/tmp/sock\"</span>) {\n    <span class=\"prelude-val\">Ok</span>(sock) =&gt; sock,\n    <span class=\"prelude-val\">Err</span>(e) =&gt; {\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"Couldn't connect: {e:?}\"</span>);\n        <span class=\"kw\">return\n    </span>}\n};</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::os::unix::net::UnixStream;%0A++++%0A++++let+socket+=+match+UnixStream::connect(%22/tmp/sock%22)+%7B%0A++++++++Ok(sock)+=%3E+sock,%0A++++++++Err(e)+=%3E+%7B%0A++++++++++++println!(%22Couldn't+connect:+%7Be:?%7D%22);%0A++++++++++++return%0A++++++++%7D%0A++++%7D;%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.connect_addr\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"../../../../src/std/os/unix/net/stream.rs.html#116-126\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.connect_addr\" class=\"fn\">connect_addr</a>(socket_addr: &amp;<a class=\"struct\" href=\"struct.SocketAddr.html\" title=\"struct std::os::unix::net::SocketAddr\">SocketAddr</a>) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.UnixStream.html\" title=\"struct std::os::unix::net::UnixStream\">UnixStream</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Connects to the socket specified by <a href=\"struct.SocketAddr.html\" title=\"struct std::os::unix::net::SocketAddr\"><code>address</code></a>.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::os::unix::net::{UnixListener, UnixStream};\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>listener = UnixListener::bind(<span class=\"string\">\"/path/to/the/socket\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span>addr = listener.local_addr()<span class=\"question-mark\">?</span>;\n\n    <span class=\"kw\">let </span>sock = <span class=\"kw\">match </span>UnixStream::connect_addr(<span class=\"kw-2\">&amp;</span>addr) {\n        <span class=\"prelude-val\">Ok</span>(sock) =&gt; sock,\n        <span class=\"prelude-val\">Err</span>(e) =&gt; {\n            <span class=\"macro\">println!</span>(<span class=\"string\">\"Couldn't connect: {e:?}\"</span>);\n            <span class=\"kw\">return </span><span class=\"prelude-val\">Err</span>(e)\n        }\n    };\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::os::unix::net::%7BUnixListener,+UnixStream%7D;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+listener+=+UnixListener::bind(%22/path/to/the/socket%22)?;%0A++++let+addr+=+listener.local_addr()?;%0A%0A++++let+sock+=+match+UnixStream::connect_addr(%26addr)+%7B%0A++++++++Ok(sock)+=%3E+sock,%0A++++++++Err(e)+=%3E+%7B%0A++++++++++++println!(%22Couldn't+connect:+%7Be:?%7D%22);%0A++++++++++++return+Err(e)%0A++++++++%7D%0A++++%7D;%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.pair\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"../../../../src/std/os/unix/net/stream.rs.html#146-149\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.pair\" class=\"fn\">pair</a>() -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;(<a class=\"struct\" href=\"struct.UnixStream.html\" title=\"struct std::os::unix::net::UnixStream\">UnixStream</a>, <a class=\"struct\" href=\"struct.UnixStream.html\" title=\"struct std::os::unix::net::UnixStream\">UnixStream</a>)&gt;</h4></section></summary><div class=\"docblock\"><p>Creates an unnamed pair of connected sockets.</p>\n<p>Returns two <code>UnixStream</code>s which are connected to each other.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::os::unix::net::UnixStream;\n\n<span class=\"kw\">let </span>(sock1, sock2) = <span class=\"kw\">match </span>UnixStream::pair() {\n    <span class=\"prelude-val\">Ok</span>((sock1, sock2)) =&gt; (sock1, sock2),\n    <span class=\"prelude-val\">Err</span>(e) =&gt; {\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"Couldn't create a pair of sockets: {e:?}\"</span>);\n        <span class=\"kw\">return\n    </span>}\n};</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::os::unix::net::UnixStream;%0A++++%0A++++let+(sock1,+sock2)+=+match+UnixStream::pair()+%7B%0A++++++++Ok((sock1,+sock2))+=%3E+(sock1,+sock2),%0A++++++++Err(e)+=%3E+%7B%0A++++++++++++println!(%22Couldn't+create+a+pair+of+sockets:+%7Be:?%7D%22);%0A++++++++++++return%0A++++++++%7D%0A++++%7D;%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_clone\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"../../../../src/std/os/unix/net/stream.rs.html#170-172\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.try_clone\" class=\"fn\">try_clone</a>(&amp;self) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.UnixStream.html\" title=\"struct std::os::unix::net::UnixStream\">UnixStream</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new independently owned handle to the underlying socket.</p>\n<p>The returned <code>UnixStream</code> is a reference to the same stream that this\nobject references. Both handles will read and write the same stream of\ndata, and options set on one stream will be propagated to the other\nstream.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::os::unix::net::UnixStream;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>socket = UnixStream::connect(<span class=\"string\">\"/tmp/sock\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span>sock_copy = socket.try_clone().expect(<span class=\"string\">\"Couldn't clone socket\"</span>);\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::os::unix::net::UnixStream;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+socket+=+UnixStream::connect(%22/tmp/sock%22)?;%0A++++let+sock_copy+=+socket.try_clone().expect(%22Couldn't+clone+socket%22);%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.local_addr\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"../../../../src/std/os/unix/net/stream.rs.html#188-190\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.local_addr\" class=\"fn\">local_addr</a>(&amp;self) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.SocketAddr.html\" title=\"struct std::os::unix::net::SocketAddr\">SocketAddr</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the socket address of the local half of this connection.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::os::unix::net::UnixStream;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>socket = UnixStream::connect(<span class=\"string\">\"/tmp/sock\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span>addr = socket.local_addr().expect(<span class=\"string\">\"Couldn't get local address\"</span>);\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::os::unix::net::UnixStream;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+socket+=+UnixStream::connect(%22/tmp/sock%22)?;%0A++++let+addr+=+socket.local_addr().expect(%22Couldn't+get+local+address%22);%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.peer_addr\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"../../../../src/std/os/unix/net/stream.rs.html#206-208\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.peer_addr\" class=\"fn\">peer_addr</a>(&amp;self) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.SocketAddr.html\" title=\"struct std::os::unix::net::SocketAddr\">SocketAddr</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the socket address of the remote half of this connection.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::os::unix::net::UnixStream;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>socket = UnixStream::connect(<span class=\"string\">\"/tmp/sock\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span>addr = socket.peer_addr().expect(<span class=\"string\">\"Couldn't get peer address\"</span>);\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::os::unix::net::UnixStream;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+socket+=+UnixStream::connect(%22/tmp/sock%22)?;%0A++++let+addr+=+socket.peer_addr().expect(%22Couldn't+get+peer+address%22);%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.peer_cred\" class=\"method\"><a class=\"src rightside\" href=\"../../../../src/std/os/unix/net/stream.rs.html#235-237\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.peer_cred\" class=\"fn\">peer_cred</a>(&amp;self) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.UCred.html\" title=\"struct std::os::unix::net::UCred\">UCred</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>peer_credentials_unix_socket</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42839\">#42839</a>)</span></div></span></summary><div class=\"docblock\"><p>Gets the peer credentials for this Unix domain socket.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(peer_credentials_unix_socket)]\n</span><span class=\"kw\">use </span>std::os::unix::net::UnixStream;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>socket = UnixStream::connect(<span class=\"string\">\"/tmp/sock\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span>peer_cred = socket.peer_cred().expect(<span class=\"string\">\"Couldn't get peer credentials\"</span>);\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(peer_credentials_unix_socket)%5D%0Ause+std::os::unix::net::UnixStream;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+socket+=+UnixStream::connect(%22/tmp/sock%22)?;%0A++++let+peer_cred+=+socket.peer_cred().expect(%22Couldn't+get+peer+credentials%22);%0A++++Ok(())%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.set_read_timeout\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"../../../../src/std/os/unix/net/stream.rs.html#277-279\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.set_read_timeout\" class=\"fn\">set_read_timeout</a>(&amp;self, timeout: <a class=\"enum\" href=\"../../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"../../../time/struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>&gt;) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Sets the read timeout for the socket.</p>\n<p>If the provided value is <a href=\"../../../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a>, then <a href=\"../../../io/trait.Read.html#tymethod.read\" title=\"method std::io::Read::read\"><code>read</code></a> calls will block\nindefinitely. An <a href=\"../../../result/enum.Result.html#variant.Err\" title=\"variant std::result::Result::Err\"><code>Err</code></a> is returned if the zero <a href=\"../../../time/struct.Duration.html\" title=\"struct std::time::Duration\"><code>Duration</code></a> is passed to this\nmethod.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::os::unix::net::UnixStream;\n<span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>socket = UnixStream::connect(<span class=\"string\">\"/tmp/sock\"</span>)<span class=\"question-mark\">?</span>;\n    socket.set_read_timeout(<span class=\"prelude-val\">Some</span>(Duration::new(<span class=\"number\">1</span>, <span class=\"number\">0</span>))).expect(<span class=\"string\">\"Couldn't set read timeout\"</span>);\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::os::unix::net::UnixStream;%0Ause+std::time::Duration;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+socket+=+UnixStream::connect(%22/tmp/sock%22)?;%0A++++socket.set_read_timeout(Some(Duration::new(1,+0))).expect(%22Couldn't+set+read+timeout%22);%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n<p>An <a href=\"../../../result/enum.Result.html#variant.Err\" title=\"variant std::result::Result::Err\"><code>Err</code></a> is returned if the zero <a href=\"../../../time/struct.Duration.html\" title=\"struct std::time::Duration\"><code>Duration</code></a> is passed to this\nmethod:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io;\n<span class=\"kw\">use </span>std::os::unix::net::UnixStream;\n<span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>socket = UnixStream::connect(<span class=\"string\">\"/tmp/sock\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span>result = socket.set_read_timeout(<span class=\"prelude-val\">Some</span>(Duration::new(<span class=\"number\">0</span>, <span class=\"number\">0</span>)));\n    <span class=\"kw\">let </span>err = result.unwrap_err();\n    <span class=\"macro\">assert_eq!</span>(err.kind(), io::ErrorKind::InvalidInput);\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::io;%0Ause+std::os::unix::net::UnixStream;%0Ause+std::time::Duration;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+socket+=+UnixStream::connect(%22/tmp/sock%22)?;%0A++++let+result+=+socket.set_read_timeout(Some(Duration::new(0,+0)));%0A++++let+err+=+result.unwrap_err();%0A++++assert_eq!(err.kind(),+io::ErrorKind::InvalidInput);%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.set_write_timeout\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"../../../../src/std/os/unix/net/stream.rs.html#320-322\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.set_write_timeout\" class=\"fn\">set_write_timeout</a>(&amp;self, timeout: <a class=\"enum\" href=\"../../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"../../../time/struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>&gt;) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Sets the write timeout for the socket.</p>\n<p>If the provided value is <a href=\"../../../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a>, then <a href=\"../../../macro.write.html\" title=\"macro std::write\"><code>write</code></a> calls will block\nindefinitely. An <a href=\"../../../result/enum.Result.html#variant.Err\" title=\"variant std::result::Result::Err\"><code>Err</code></a> is returned if the zero <a href=\"../../../time/struct.Duration.html\" title=\"struct std::time::Duration\"><code>Duration</code></a> is\npassed to this method.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::os::unix::net::UnixStream;\n<span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>socket = UnixStream::connect(<span class=\"string\">\"/tmp/sock\"</span>)<span class=\"question-mark\">?</span>;\n    socket.set_write_timeout(<span class=\"prelude-val\">Some</span>(Duration::new(<span class=\"number\">1</span>, <span class=\"number\">0</span>)))\n        .expect(<span class=\"string\">\"Couldn't set write timeout\"</span>);\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::os::unix::net::UnixStream;%0Ause+std::time::Duration;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+socket+=+UnixStream::connect(%22/tmp/sock%22)?;%0A++++socket.set_write_timeout(Some(Duration::new(1,+0)))%0A++++++++.expect(%22Couldn't+set+write+timeout%22);%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n<p>An <a href=\"../../../result/enum.Result.html#variant.Err\" title=\"variant std::result::Result::Err\"><code>Err</code></a> is returned if the zero <a href=\"../../../time/struct.Duration.html\" title=\"struct std::time::Duration\"><code>Duration</code></a> is passed to this\nmethod:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io;\n<span class=\"kw\">use </span>std::net::UdpSocket;\n<span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>socket = UdpSocket::bind(<span class=\"string\">\"127.0.0.1:34254\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span>result = socket.set_write_timeout(<span class=\"prelude-val\">Some</span>(Duration::new(<span class=\"number\">0</span>, <span class=\"number\">0</span>)));\n    <span class=\"kw\">let </span>err = result.unwrap_err();\n    <span class=\"macro\">assert_eq!</span>(err.kind(), io::ErrorKind::InvalidInput);\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::io;%0Ause+std::net::UdpSocket;%0Ause+std::time::Duration;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+socket+=+UdpSocket::bind(%22127.0.0.1:34254%22)?;%0A++++let+result+=+socket.set_write_timeout(Some(Duration::new(0,+0)));%0A++++let+err+=+result.unwrap_err();%0A++++assert_eq!(err.kind(),+io::ErrorKind::InvalidInput);%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_timeout\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"../../../../src/std/os/unix/net/stream.rs.html#340-342\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.read_timeout\" class=\"fn\">read_timeout</a>(&amp;self) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"enum\" href=\"../../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"../../../time/struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the read timeout of this socket.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::os::unix::net::UnixStream;\n<span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>socket = UnixStream::connect(<span class=\"string\">\"/tmp/sock\"</span>)<span class=\"question-mark\">?</span>;\n    socket.set_read_timeout(<span class=\"prelude-val\">Some</span>(Duration::new(<span class=\"number\">1</span>, <span class=\"number\">0</span>))).expect(<span class=\"string\">\"Couldn't set read timeout\"</span>);\n    <span class=\"macro\">assert_eq!</span>(socket.read_timeout()<span class=\"question-mark\">?</span>, <span class=\"prelude-val\">Some</span>(Duration::new(<span class=\"number\">1</span>, <span class=\"number\">0</span>)));\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::os::unix::net::UnixStream;%0Ause+std::time::Duration;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+socket+=+UnixStream::connect(%22/tmp/sock%22)?;%0A++++socket.set_read_timeout(Some(Duration::new(1,+0))).expect(%22Couldn't+set+read+timeout%22);%0A++++assert_eq!(socket.read_timeout()?,+Some(Duration::new(1,+0)));%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_timeout\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"../../../../src/std/os/unix/net/stream.rs.html#361-363\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.write_timeout\" class=\"fn\">write_timeout</a>(&amp;self) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"enum\" href=\"../../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"../../../time/struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the write timeout of this socket.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::os::unix::net::UnixStream;\n<span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>socket = UnixStream::connect(<span class=\"string\">\"/tmp/sock\"</span>)<span class=\"question-mark\">?</span>;\n    socket.set_write_timeout(<span class=\"prelude-val\">Some</span>(Duration::new(<span class=\"number\">1</span>, <span class=\"number\">0</span>)))\n        .expect(<span class=\"string\">\"Couldn't set write timeout\"</span>);\n    <span class=\"macro\">assert_eq!</span>(socket.write_timeout()<span class=\"question-mark\">?</span>, <span class=\"prelude-val\">Some</span>(Duration::new(<span class=\"number\">1</span>, <span class=\"number\">0</span>)));\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::os::unix::net::UnixStream;%0Ause+std::time::Duration;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+socket+=+UnixStream::connect(%22/tmp/sock%22)?;%0A++++socket.set_write_timeout(Some(Duration::new(1,+0)))%0A++++++++.expect(%22Couldn't+set+write+timeout%22);%0A++++assert_eq!(socket.write_timeout()?,+Some(Duration::new(1,+0)));%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.set_nonblocking\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"../../../../src/std/os/unix/net/stream.rs.html#379-381\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.set_nonblocking\" class=\"fn\">set_nonblocking</a>(&amp;self, nonblocking: <a class=\"primitive\" href=\"../../../primitive.bool.html\">bool</a>) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Moves the socket into or out of nonblocking mode.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::os::unix::net::UnixStream;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>socket = UnixStream::connect(<span class=\"string\">\"/tmp/sock\"</span>)<span class=\"question-mark\">?</span>;\n    socket.set_nonblocking(<span class=\"bool-val\">true</span>).expect(<span class=\"string\">\"Couldn't set nonblocking\"</span>);\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::os::unix::net::UnixStream;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+socket+=+UnixStream::connect(%22/tmp/sock%22)?;%0A++++socket.set_nonblocking(true).expect(%22Couldn't+set+nonblocking%22);%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.set_mark\" class=\"method\"><a class=\"src rightside\" href=\"../../../../src/std/os/unix/net/stream.rs.html#404-406\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.set_mark\" class=\"fn\">set_mark</a>(&amp;self, mark: <a class=\"primitive\" href=\"../../../primitive.u32.html\">u32</a>) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../../primitive.unit.html\">()</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unix_set_mark</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/96467\">#96467</a>)</span></div></span></summary><div class=\"docblock\"><p>Set the id of the socket for network filtering purpose</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(unix_set_mark)]\n</span><span class=\"kw\">use </span>std::os::unix::net::UnixStream;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>sock = UnixStream::connect(<span class=\"string\">\"/tmp/sock\"</span>)<span class=\"question-mark\">?</span>;\n    sock.set_mark(<span class=\"number\">32</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(unix_set_mark)%5D%0Ause+std::os::unix::net::UnixStream;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+sock+=+UnixStream::connect(%22/tmp/sock%22)?;%0A++++sock.set_mark(32)?;%0A++++Ok(())%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.take_error\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"../../../../src/std/os/unix/net/stream.rs.html#427-429\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.take_error\" class=\"fn\">take_error</a>(&amp;self) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"enum\" href=\"../../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"../../../io/struct.Error.html\" title=\"struct std::io::Error\">Error</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the value of the <code>SO_ERROR</code> option.</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::os::unix::net::UnixStream;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>socket = UnixStream::connect(<span class=\"string\">\"/tmp/sock\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span>(<span class=\"prelude-val\">Some</span>(err)) = socket.take_error() {\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"Got error: {err:?}\"</span>);\n    }\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::os::unix::net::UnixStream;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+socket+=+UnixStream::connect(%22/tmp/sock%22)?;%0A++++if+let+Ok(Some(err))+=+socket.take_error()+%7B%0A++++++++println!(%22Got+error:+%7Berr:?%7D%22);%0A++++%7D%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n<h5 id=\"platform-specific\"><a class=\"doc-anchor\" href=\"#platform-specific\">§</a>Platform specific</h5>\n<p>On Redox this always returns <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shutdown\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"../../../../src/std/os/unix/net/stream.rs.html#450-452\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.shutdown\" class=\"fn\">shutdown</a>(&amp;self, how: <a class=\"enum\" href=\"../../../net/enum.Shutdown.html\" title=\"enum std::net::Shutdown\">Shutdown</a>) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Shuts down the read, write, or both halves of this connection.</p>\n<p>This function will cause all pending and future I/O calls on the\nspecified portions to immediately return with an appropriate value\n(see the documentation of <a href=\"../../../net/enum.Shutdown.html\" title=\"enum std::net::Shutdown\"><code>Shutdown</code></a>).</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::os::unix::net::UnixStream;\n<span class=\"kw\">use </span>std::net::Shutdown;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>socket = UnixStream::connect(<span class=\"string\">\"/tmp/sock\"</span>)<span class=\"question-mark\">?</span>;\n    socket.shutdown(Shutdown::Both).expect(<span class=\"string\">\"shutdown function failed\"</span>);\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::os::unix::net::UnixStream;%0Ause+std::net::Shutdown;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+socket+=+UnixStream::connect(%22/tmp/sock%22)?;%0A++++socket.shutdown(Shutdown::Both).expect(%22shutdown+function+failed%22);%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.peek\" class=\"method\"><a class=\"src rightside\" href=\"../../../../src/std/os/unix/net/stream.rs.html#476-478\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.peek\" class=\"fn\">peek</a>(&amp;self, buf: &amp;mut [<a class=\"primitive\" href=\"../../../primitive.u8.html\">u8</a>]) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../../primitive.usize.html\">usize</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unix_socket_peek</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/76923\">#76923</a>)</span></div></span></summary><div class=\"docblock\"><p>Receives data on the socket from the remote address to which it is\nconnected, without removing that data from the queue. On success,\nreturns the number of bytes peeked.</p>\n<p>Successive calls return the same data. This is accomplished by passing\n<code>MSG_PEEK</code> as a flag to the underlying <code>recv</code> system call.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(unix_socket_peek)]\n\n</span><span class=\"kw\">use </span>std::os::unix::net::UnixStream;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>socket = UnixStream::connect(<span class=\"string\">\"/tmp/sock\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buf = [<span class=\"number\">0</span>; <span class=\"number\">10</span>];\n    <span class=\"kw\">let </span>len = socket.peek(<span class=\"kw-2\">&amp;mut </span>buf).expect(<span class=\"string\">\"peek failed\"</span>);\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(unix_socket_peek)%5D%0A%0Ause+std::os::unix::net::UnixStream;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+socket+=+UnixStream::connect(%22/tmp/sock%22)?;%0A++++let+mut+buf+=+%5B0;+10%5D;%0A++++let+len+=+socket.peek(%26mut+buf).expect(%22peek+failed%22);%0A++++Ok(())%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.recv_vectored_with_ancillary\" class=\"method\"><a class=\"src rightside\" href=\"../../../../src/std/os/unix/net/stream.rs.html#519-527\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.recv_vectored_with_ancillary\" class=\"fn\">recv_vectored_with_ancillary</a>(\n    &amp;self,\n    bufs: &amp;mut [<a class=\"struct\" href=\"../../../io/struct.IoSliceMut.html\" title=\"struct std::io::IoSliceMut\">IoSliceMut</a>&lt;'_&gt;],\n    ancillary: &amp;mut <a class=\"struct\" href=\"struct.SocketAncillary.html\" title=\"struct std::os::unix::net::SocketAncillary\">SocketAncillary</a>&lt;'_&gt;,\n) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../../primitive.usize.html\">usize</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unix_socket_ancillary_data</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/76915\">#76915</a>)</span></div></span></summary><div class=\"docblock\"><p>Receives data and ancillary data from socket.</p>\n<p>On success, returns the number of bytes read.</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(unix_socket_ancillary_data)]\n</span><span class=\"kw\">use </span>std::os::unix::net::{UnixStream, SocketAncillary, AncillaryData};\n<span class=\"kw\">use </span>std::io::IoSliceMut;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>socket = UnixStream::connect(<span class=\"string\">\"/tmp/sock\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buf1 = [<span class=\"number\">1</span>; <span class=\"number\">8</span>];\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buf2 = [<span class=\"number\">2</span>; <span class=\"number\">16</span>];\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buf3 = [<span class=\"number\">3</span>; <span class=\"number\">8</span>];\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bufs = <span class=\"kw-2\">&amp;mut </span>[\n        IoSliceMut::new(<span class=\"kw-2\">&amp;mut </span>buf1),\n        IoSliceMut::new(<span class=\"kw-2\">&amp;mut </span>buf2),\n        IoSliceMut::new(<span class=\"kw-2\">&amp;mut </span>buf3),\n    ][..];\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>fds = [<span class=\"number\">0</span>; <span class=\"number\">8</span>];\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>ancillary_buffer = [<span class=\"number\">0</span>; <span class=\"number\">128</span>];\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>ancillary = SocketAncillary::new(<span class=\"kw-2\">&amp;mut </span>ancillary_buffer[..]);\n    <span class=\"kw\">let </span>size = socket.recv_vectored_with_ancillary(bufs, <span class=\"kw-2\">&amp;mut </span>ancillary)<span class=\"question-mark\">?</span>;\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"received {size}\"</span>);\n    <span class=\"kw\">for </span>ancillary_result <span class=\"kw\">in </span>ancillary.messages() {\n        <span class=\"kw\">if let </span>AncillaryData::ScmRights(scm_rights) = ancillary_result.unwrap() {\n            <span class=\"kw\">for </span>fd <span class=\"kw\">in </span>scm_rights {\n                <span class=\"macro\">println!</span>(<span class=\"string\">\"receive file descriptor: {fd}\"</span>);\n            }\n        }\n    }\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(unix_socket_ancillary_data)%5D%0Ause+std::os::unix::net::%7BUnixStream,+SocketAncillary,+AncillaryData%7D;%0Ause+std::io::IoSliceMut;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+socket+=+UnixStream::connect(%22/tmp/sock%22)?;%0A++++let+mut+buf1+=+%5B1;+8%5D;%0A++++let+mut+buf2+=+%5B2;+16%5D;%0A++++let+mut+buf3+=+%5B3;+8%5D;%0A++++let+mut+bufs+=+%26mut+%5B%0A++++++++IoSliceMut::new(%26mut+buf1),%0A++++++++IoSliceMut::new(%26mut+buf2),%0A++++++++IoSliceMut::new(%26mut+buf3),%0A++++%5D%5B..%5D;%0A++++let+mut+fds+=+%5B0;+8%5D;%0A++++let+mut+ancillary_buffer+=+%5B0;+128%5D;%0A++++let+mut+ancillary+=+SocketAncillary::new(%26mut+ancillary_buffer%5B..%5D);%0A++++let+size+=+socket.recv_vectored_with_ancillary(bufs,+%26mut+ancillary)?;%0A++++println!(%22received+%7Bsize%7D%22);%0A++++for+ancillary_result+in+ancillary.messages()+%7B%0A++++++++if+let+AncillaryData::ScmRights(scm_rights)+=+ancillary_result.unwrap()+%7B%0A++++++++++++for+fd+in+scm_rights+%7B%0A++++++++++++++++println!(%22receive+file+descriptor:+%7Bfd%7D%22);%0A++++++++++++%7D%0A++++++++%7D%0A++++%7D%0A++++Ok(())%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.send_vectored_with_ancillary\" class=\"method\"><a class=\"src rightside\" href=\"../../../../src/std/os/unix/net/stream.rs.html#562-568\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.send_vectored_with_ancillary\" class=\"fn\">send_vectored_with_ancillary</a>(\n    &amp;self,\n    bufs: &amp;[<a class=\"struct\" href=\"../../../io/struct.IoSlice.html\" title=\"struct std::io::IoSlice\">IoSlice</a>&lt;'_&gt;],\n    ancillary: &amp;mut <a class=\"struct\" href=\"struct.SocketAncillary.html\" title=\"struct std::os::unix::net::SocketAncillary\">SocketAncillary</a>&lt;'_&gt;,\n) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../../primitive.usize.html\">usize</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unix_socket_ancillary_data</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/76915\">#76915</a>)</span></div></span></summary><div class=\"docblock\"><p>Sends data and ancillary data on the socket.</p>\n<p>On success, returns the number of bytes written.</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(unix_socket_ancillary_data)]\n</span><span class=\"kw\">use </span>std::os::unix::net::{UnixStream, SocketAncillary};\n<span class=\"kw\">use </span>std::io::IoSlice;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>socket = UnixStream::connect(<span class=\"string\">\"/tmp/sock\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span>buf1 = [<span class=\"number\">1</span>; <span class=\"number\">8</span>];\n    <span class=\"kw\">let </span>buf2 = [<span class=\"number\">2</span>; <span class=\"number\">16</span>];\n    <span class=\"kw\">let </span>buf3 = [<span class=\"number\">3</span>; <span class=\"number\">8</span>];\n    <span class=\"kw\">let </span>bufs = <span class=\"kw-2\">&amp;</span>[\n        IoSlice::new(<span class=\"kw-2\">&amp;</span>buf1),\n        IoSlice::new(<span class=\"kw-2\">&amp;</span>buf2),\n        IoSlice::new(<span class=\"kw-2\">&amp;</span>buf3),\n    ][..];\n    <span class=\"kw\">let </span>fds = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>ancillary_buffer = [<span class=\"number\">0</span>; <span class=\"number\">128</span>];\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>ancillary = SocketAncillary::new(<span class=\"kw-2\">&amp;mut </span>ancillary_buffer[..]);\n    ancillary.add_fds(<span class=\"kw-2\">&amp;</span>fds[..]);\n    socket.send_vectored_with_ancillary(bufs, <span class=\"kw-2\">&amp;mut </span>ancillary)\n        .expect(<span class=\"string\">\"send_vectored_with_ancillary function failed\"</span>);\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(unix_socket_ancillary_data)%5D%0Ause+std::os::unix::net::%7BUnixStream,+SocketAncillary%7D;%0Ause+std::io::IoSlice;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+socket+=+UnixStream::connect(%22/tmp/sock%22)?;%0A++++let+buf1+=+%5B1;+8%5D;%0A++++let+buf2+=+%5B2;+16%5D;%0A++++let+buf3+=+%5B3;+8%5D;%0A++++let+bufs+=+%26%5B%0A++++++++IoSlice::new(%26buf1),%0A++++++++IoSlice::new(%26buf2),%0A++++++++IoSlice::new(%26buf3),%0A++++%5D%5B..%5D;%0A++++let+fds+=+%5B0,+1,+2%5D;%0A++++let+mut+ancillary_buffer+=+%5B0;+128%5D;%0A++++let+mut+ancillary+=+SocketAncillary::new(%26mut+ancillary_buffer%5B..%5D);%0A++++ancillary.add_fds(%26fds%5B..%5D);%0A++++socket.send_vectored_with_ancillary(bufs,+%26mut+ancillary)%0A++++++++.expect(%22send_vectored_with_ancillary+function+failed%22);%0A++++Ok(())%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details></div></details></div><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">§</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AsFd-for-UnixStream\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.63.0\">1.63.0</span> · <a class=\"src\" href=\"../../../../src/std/os/unix/net/stream.rs.html#677-682\">source</a></span><a href=\"#impl-AsFd-for-UnixStream\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../fd/trait.AsFd.html\" title=\"trait std::os::fd::AsFd\">AsFd</a> for <a class=\"struct\" href=\"struct.UnixStream.html\" title=\"struct std::os::unix::net::UnixStream\">UnixStream</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_fd\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../../src/std/os/unix/net/stream.rs.html#679-681\">source</a><a href=\"#method.as_fd\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../fd/trait.AsFd.html#tymethod.as_fd\" class=\"fn\">as_fd</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../../fd/struct.BorrowedFd.html\" title=\"struct std::os::fd::BorrowedFd\">BorrowedFd</a>&lt;'_&gt;</h4></section></summary><div class=\"docblock\">Borrows the file descriptor. <a href=\"../../fd/trait.AsFd.html#tymethod.as_fd\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AsRawFd-for-UnixStream\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"../../../../src/std/os/unix/net/stream.rs.html#653-658\">source</a></span><a href=\"#impl-AsRawFd-for-UnixStream\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../fd/trait.AsRawFd.html\" title=\"trait std::os::fd::AsRawFd\">AsRawFd</a> for <a class=\"struct\" href=\"struct.UnixStream.html\" title=\"struct std::os::unix::net::UnixStream\">UnixStream</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_raw_fd\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../../src/std/os/unix/net/stream.rs.html#655-657\">source</a><a href=\"#method.as_raw_fd\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../fd/trait.AsRawFd.html#tymethod.as_raw_fd\" class=\"fn\">as_raw_fd</a>(&amp;self) -&gt; <a class=\"type\" href=\"../../fd/type.RawFd.html\" title=\"type std::os::fd::RawFd\">RawFd</a></h4></section></summary><div class=\"docblock\">Extracts the raw file descriptor. <a href=\"../../fd/trait.AsRawFd.html#tymethod.as_raw_fd\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-UnixStream\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"../../../../src/std/os/unix/net/stream.rs.html#51-63\">source</a></span><a href=\"#impl-Debug-for-UnixStream\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"struct.UnixStream.html\" title=\"struct std::os::unix::net::UnixStream\">UnixStream</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../../src/std/os/unix/net/stream.rs.html#52-62\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, fmt: &amp;mut <a class=\"struct\" href=\"../../../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"../../../fmt/type.Result.html\" title=\"type std::fmt::Result\">Result</a></h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../../../fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3COwnedFd%3E-for-UnixStream\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.63.0\">1.63.0</span> · <a class=\"src\" href=\"../../../../src/std/os/unix/net/stream.rs.html#694-699\">source</a></span><a href=\"#impl-From%3COwnedFd%3E-for-UnixStream\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"../../fd/struct.OwnedFd.html\" title=\"struct std::os::fd::OwnedFd\">OwnedFd</a>&gt; for <a class=\"struct\" href=\"struct.UnixStream.html\" title=\"struct std::os::unix::net::UnixStream\">UnixStream</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../../src/std/os/unix/net/stream.rs.html#696-698\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(owned: <a class=\"struct\" href=\"../../fd/struct.OwnedFd.html\" title=\"struct std::os::fd::OwnedFd\">OwnedFd</a>) -&gt; Self</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CUnixStream%3E-for-OwnedFd\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.63.0\">1.63.0</span> · <a class=\"src\" href=\"../../../../src/std/os/unix/net/stream.rs.html#685-691\">source</a></span><a href=\"#impl-From%3CUnixStream%3E-for-OwnedFd\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.UnixStream.html\" title=\"struct std::os::unix::net::UnixStream\">UnixStream</a>&gt; for <a class=\"struct\" href=\"../../fd/struct.OwnedFd.html\" title=\"struct std::os::fd::OwnedFd\">OwnedFd</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../../src/std/os/unix/net/stream.rs.html#688-690\">source</a><a href=\"#method.from-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(unix_stream: <a class=\"struct\" href=\"struct.UnixStream.html\" title=\"struct std::os::unix::net::UnixStream\">UnixStream</a>) -&gt; <a class=\"struct\" href=\"../../fd/struct.OwnedFd.html\" title=\"struct std::os::fd::OwnedFd\">OwnedFd</a></h4></section></summary><div class=\"docblock\"><p>Takes ownership of a <a href=\"struct.UnixStream.html\" title=\"struct std::os::unix::net::UnixStream\"><code>UnixStream</code></a>’s socket file descriptor.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-FromRawFd-for-UnixStream\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"../../../../src/std/os/unix/net/stream.rs.html#661-666\">source</a></span><a href=\"#impl-FromRawFd-for-UnixStream\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../fd/trait.FromRawFd.html\" title=\"trait std::os::fd::FromRawFd\">FromRawFd</a> for <a class=\"struct\" href=\"struct.UnixStream.html\" title=\"struct std::os::unix::net::UnixStream\">UnixStream</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_raw_fd\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../../src/std/os/unix/net/stream.rs.html#663-665\">source</a><a href=\"#method.from_raw_fd\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"../../fd/trait.FromRawFd.html#tymethod.from_raw_fd\" class=\"fn\">from_raw_fd</a>(fd: <a class=\"type\" href=\"../../fd/type.RawFd.html\" title=\"type std::os::fd::RawFd\">RawFd</a>) -&gt; <a class=\"struct\" href=\"struct.UnixStream.html\" title=\"struct std::os::unix::net::UnixStream\">UnixStream</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"UnixStream\">ⓘ</a></h4></section></summary><div class=\"docblock\">Constructs a new instance of <code>Self</code> from the given raw file\ndescriptor. <a href=\"../../fd/trait.FromRawFd.html#tymethod.from_raw_fd\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-IntoRawFd-for-UnixStream\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"../../../../src/std/os/unix/net/stream.rs.html#669-674\">source</a></span><a href=\"#impl-IntoRawFd-for-UnixStream\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../fd/trait.IntoRawFd.html\" title=\"trait std::os::fd::IntoRawFd\">IntoRawFd</a> for <a class=\"struct\" href=\"struct.UnixStream.html\" title=\"struct std::os::unix::net::UnixStream\">UnixStream</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_raw_fd\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../../src/std/os/unix/net/stream.rs.html#671-673\">source</a><a href=\"#method.into_raw_fd\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../fd/trait.IntoRawFd.html#tymethod.into_raw_fd\" class=\"fn\">into_raw_fd</a>(self) -&gt; <a class=\"type\" href=\"../../fd/type.RawFd.html\" title=\"type std::os::fd::RawFd\">RawFd</a></h4></section></summary><div class=\"docblock\">Consumes this object, returning the raw underlying file descriptor. <a href=\"../../fd/trait.IntoRawFd.html#tymethod.into_raw_fd\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Read-for-%26UnixStream\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"../../../../src/std/os/unix/net/stream.rs.html#592-609\">source</a></span><a href=\"#impl-Read-for-%26UnixStream\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"../../../io/trait.Read.html\" title=\"trait std::io::Read\">Read</a> for &amp;'a <a class=\"struct\" href=\"struct.UnixStream.html\" title=\"struct std::os::unix::net::UnixStream\">UnixStream</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../../src/std/os/unix/net/stream.rs.html#593-595\">source</a><a href=\"#method.read\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../io/trait.Read.html#tymethod.read\" class=\"fn\">read</a>(&amp;mut self, buf: &amp;mut [<a class=\"primitive\" href=\"../../../primitive.u8.html\">u8</a>]) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\">Pull some bytes from this source into the specified buffer, returning\nhow many bytes were read. <a href=\"../../../io/trait.Read.html#tymethod.read\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_buf\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../../src/std/os/unix/net/stream.rs.html#597-599\">source</a><a href=\"#method.read_buf\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../io/trait.Read.html#method.read_buf\" class=\"fn\">read_buf</a>(&amp;mut self, buf: <a class=\"struct\" href=\"../../../io/struct.BorrowedCursor.html\" title=\"struct std::io::BorrowedCursor\">BorrowedCursor</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../../primitive.unit.html\">()</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>read_buf</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/78485\">#78485</a>)</span></div></span><div class=\"docblock\">Pull some bytes from this source into the specified buffer. <a href=\"../../../io/trait.Read.html#method.read_buf\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_vectored\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../../src/std/os/unix/net/stream.rs.html#601-603\">source</a><a href=\"#method.read_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../io/trait.Read.html#method.read_vectored\" class=\"fn\">read_vectored</a>(&amp;mut self, bufs: &amp;mut [<a class=\"struct\" href=\"../../../io/struct.IoSliceMut.html\" title=\"struct std::io::IoSliceMut\">IoSliceMut</a>&lt;'_&gt;]) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\">Like <code>read</code>, except that it reads into a slice of buffers. <a href=\"../../../io/trait.Read.html#method.read_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_read_vectored\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../../src/std/os/unix/net/stream.rs.html#606-608\">source</a><a href=\"#method.is_read_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../io/trait.Read.html#method.is_read_vectored\" class=\"fn\">is_read_vectored</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.bool.html\">bool</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>can_vector</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/69941\">#69941</a>)</span></div></span><div class=\"docblock\">Determines if this <code>Read</code>er has an efficient <code>read_vectored</code>\nimplementation. <a href=\"../../../io/trait.Read.html#method.is_read_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_to_end\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../../../src/std/io/mod.rs.html#865-867\">source</a></span><a href=\"#method.read_to_end\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../io/trait.Read.html#method.read_to_end\" class=\"fn\">read_to_end</a>(&amp;mut self, buf: &amp;mut <a class=\"struct\" href=\"../../../vec/struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"../../../primitive.u8.html\">u8</a>&gt;) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\">Read all bytes until EOF in this source, placing them into <code>buf</code>. <a href=\"../../../io/trait.Read.html#method.read_to_end\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_to_string\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../../../src/std/io/mod.rs.html#908-910\">source</a></span><a href=\"#method.read_to_string\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../io/trait.Read.html#method.read_to_string\" class=\"fn\">read_to_string</a>(&amp;mut self, buf: &amp;mut <a class=\"struct\" href=\"../../../string/struct.String.html\" title=\"struct std::string::String\">String</a>) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\">Read all bytes until EOF in this source, appending them to <code>buf</code>. <a href=\"../../../io/trait.Read.html#method.read_to_string\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_exact\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> · <a class=\"src\" href=\"../../../../src/std/io/mod.rs.html#961-963\">source</a></span><a href=\"#method.read_exact\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../io/trait.Read.html#method.read_exact\" class=\"fn\">read_exact</a>(&amp;mut self, buf: &amp;mut [<a class=\"primitive\" href=\"../../../primitive.u8.html\">u8</a>]) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\">Read the exact number of bytes required to fill <code>buf</code>. <a href=\"../../../io/trait.Read.html#method.read_exact\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_buf_exact\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../../src/std/io/mod.rs.html#995-997\">source</a><a href=\"#method.read_buf_exact\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../io/trait.Read.html#method.read_buf_exact\" class=\"fn\">read_buf_exact</a>(&amp;mut self, cursor: <a class=\"struct\" href=\"../../../io/struct.BorrowedCursor.html\" title=\"struct std::io::BorrowedCursor\">BorrowedCursor</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../../primitive.unit.html\">()</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>read_buf</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/78485\">#78485</a>)</span></div></span><div class=\"docblock\">Read the exact number of bytes required to fill <code>cursor</code>. <a href=\"../../../io/trait.Read.html#method.read_buf_exact\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.by_ref\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../../../src/std/io/mod.rs.html#1034-1039\">source</a></span><a href=\"#method.by_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../io/trait.Read.html#method.by_ref\" class=\"fn\">by_ref</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../../../primitive.reference.html\">&amp;mut Self</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../../../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Creates a “by reference” adaptor for this instance of <code>Read</code>. <a href=\"../../../io/trait.Read.html#method.by_ref\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bytes\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../../../src/std/io/mod.rs.html#1077-1082\">source</a></span><a href=\"#method.bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../io/trait.Read.html#method.bytes\" class=\"fn\">bytes</a>(self) -&gt; <a class=\"struct\" href=\"../../../io/struct.Bytes.html\" title=\"struct std::io::Bytes\">Bytes</a>&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Bytes<Self>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../../../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Transforms this <code>Read</code> instance to an <a href=\"../../../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\"><code>Iterator</code></a> over its bytes. <a href=\"../../../io/trait.Read.html#method.bytes\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.chain\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../../../src/std/io/mod.rs.html#1115-1120\">source</a></span><a href=\"#method.chain\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../io/trait.Read.html#method.chain\" class=\"fn\">chain</a>&lt;R: <a class=\"trait\" href=\"../../../io/trait.Read.html\" title=\"trait std::io::Read\">Read</a>&gt;(self, next: R) -&gt; <a class=\"struct\" href=\"../../../io/struct.Chain.html\" title=\"struct std::io::Chain\">Chain</a>&lt;Self, R&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Chain<Self, R>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../../../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Creates an adapter which will chain this stream with another. <a href=\"../../../io/trait.Read.html#method.chain\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.take\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../../../src/std/io/mod.rs.html#1154-1159\">source</a></span><a href=\"#method.take\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../io/trait.Read.html#method.take\" class=\"fn\">take</a>(self, limit: <a class=\"primitive\" href=\"../../../primitive.u64.html\">u64</a>) -&gt; <a class=\"struct\" href=\"../../../io/struct.Take.html\" title=\"struct std::io::Take\">Take</a>&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Take<Self>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../../../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Creates an adapter which will read at most <code>limit</code> bytes from it. <a href=\"../../../io/trait.Read.html#method.take\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Read-for-UnixStream\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"../../../../src/std/os/unix/net/stream.rs.html#572-589\">source</a></span><a href=\"#impl-Read-for-UnixStream\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../../io/trait.Read.html\" title=\"trait std::io::Read\">Read</a> for <a class=\"struct\" href=\"struct.UnixStream.html\" title=\"struct std::os::unix::net::UnixStream\">UnixStream</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../../src/std/os/unix/net/stream.rs.html#573-575\">source</a><a href=\"#method.read-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../io/trait.Read.html#tymethod.read\" class=\"fn\">read</a>(&amp;mut self, buf: &amp;mut [<a class=\"primitive\" href=\"../../../primitive.u8.html\">u8</a>]) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\">Pull some bytes from this source into the specified buffer, returning\nhow many bytes were read. <a href=\"../../../io/trait.Read.html#tymethod.read\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_buf-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../../src/std/os/unix/net/stream.rs.html#577-579\">source</a><a href=\"#method.read_buf-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../io/trait.Read.html#method.read_buf\" class=\"fn\">read_buf</a>(&amp;mut self, buf: <a class=\"struct\" href=\"../../../io/struct.BorrowedCursor.html\" title=\"struct std::io::BorrowedCursor\">BorrowedCursor</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../../primitive.unit.html\">()</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>read_buf</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/78485\">#78485</a>)</span></div></span><div class=\"docblock\">Pull some bytes from this source into the specified buffer. <a href=\"../../../io/trait.Read.html#method.read_buf\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_vectored-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../../src/std/os/unix/net/stream.rs.html#581-583\">source</a><a href=\"#method.read_vectored-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../io/trait.Read.html#method.read_vectored\" class=\"fn\">read_vectored</a>(&amp;mut self, bufs: &amp;mut [<a class=\"struct\" href=\"../../../io/struct.IoSliceMut.html\" title=\"struct std::io::IoSliceMut\">IoSliceMut</a>&lt;'_&gt;]) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\">Like <code>read</code>, except that it reads into a slice of buffers. <a href=\"../../../io/trait.Read.html#method.read_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_read_vectored-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../../src/std/os/unix/net/stream.rs.html#586-588\">source</a><a href=\"#method.is_read_vectored-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../io/trait.Read.html#method.is_read_vectored\" class=\"fn\">is_read_vectored</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.bool.html\">bool</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>can_vector</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/69941\">#69941</a>)</span></div></span><div class=\"docblock\">Determines if this <code>Read</code>er has an efficient <code>read_vectored</code>\nimplementation. <a href=\"../../../io/trait.Read.html#method.is_read_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_to_end-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../../../src/std/io/mod.rs.html#865-867\">source</a></span><a href=\"#method.read_to_end-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../io/trait.Read.html#method.read_to_end\" class=\"fn\">read_to_end</a>(&amp;mut self, buf: &amp;mut <a class=\"struct\" href=\"../../../vec/struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"../../../primitive.u8.html\">u8</a>&gt;) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\">Read all bytes until EOF in this source, placing them into <code>buf</code>. <a href=\"../../../io/trait.Read.html#method.read_to_end\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_to_string-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../../../src/std/io/mod.rs.html#908-910\">source</a></span><a href=\"#method.read_to_string-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../io/trait.Read.html#method.read_to_string\" class=\"fn\">read_to_string</a>(&amp;mut self, buf: &amp;mut <a class=\"struct\" href=\"../../../string/struct.String.html\" title=\"struct std::string::String\">String</a>) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\">Read all bytes until EOF in this source, appending them to <code>buf</code>. <a href=\"../../../io/trait.Read.html#method.read_to_string\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_exact-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> · <a class=\"src\" href=\"../../../../src/std/io/mod.rs.html#961-963\">source</a></span><a href=\"#method.read_exact-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../io/trait.Read.html#method.read_exact\" class=\"fn\">read_exact</a>(&amp;mut self, buf: &amp;mut [<a class=\"primitive\" href=\"../../../primitive.u8.html\">u8</a>]) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\">Read the exact number of bytes required to fill <code>buf</code>. <a href=\"../../../io/trait.Read.html#method.read_exact\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_buf_exact-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../../src/std/io/mod.rs.html#995-997\">source</a><a href=\"#method.read_buf_exact-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../io/trait.Read.html#method.read_buf_exact\" class=\"fn\">read_buf_exact</a>(&amp;mut self, cursor: <a class=\"struct\" href=\"../../../io/struct.BorrowedCursor.html\" title=\"struct std::io::BorrowedCursor\">BorrowedCursor</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../../primitive.unit.html\">()</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>read_buf</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/78485\">#78485</a>)</span></div></span><div class=\"docblock\">Read the exact number of bytes required to fill <code>cursor</code>. <a href=\"../../../io/trait.Read.html#method.read_buf_exact\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.by_ref-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../../../src/std/io/mod.rs.html#1034-1039\">source</a></span><a href=\"#method.by_ref-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../io/trait.Read.html#method.by_ref\" class=\"fn\">by_ref</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../../../primitive.reference.html\">&amp;mut Self</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../../../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Creates a “by reference” adaptor for this instance of <code>Read</code>. <a href=\"../../../io/trait.Read.html#method.by_ref\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bytes-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../../../src/std/io/mod.rs.html#1077-1082\">source</a></span><a href=\"#method.bytes-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../io/trait.Read.html#method.bytes\" class=\"fn\">bytes</a>(self) -&gt; <a class=\"struct\" href=\"../../../io/struct.Bytes.html\" title=\"struct std::io::Bytes\">Bytes</a>&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Bytes<Self>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../../../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Transforms this <code>Read</code> instance to an <a href=\"../../../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\"><code>Iterator</code></a> over its bytes. <a href=\"../../../io/trait.Read.html#method.bytes\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.chain-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../../../src/std/io/mod.rs.html#1115-1120\">source</a></span><a href=\"#method.chain-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../io/trait.Read.html#method.chain\" class=\"fn\">chain</a>&lt;R: <a class=\"trait\" href=\"../../../io/trait.Read.html\" title=\"trait std::io::Read\">Read</a>&gt;(self, next: R) -&gt; <a class=\"struct\" href=\"../../../io/struct.Chain.html\" title=\"struct std::io::Chain\">Chain</a>&lt;Self, R&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Chain<Self, R>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../../../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Creates an adapter which will chain this stream with another. <a href=\"../../../io/trait.Read.html#method.chain\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.take-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../../../src/std/io/mod.rs.html#1154-1159\">source</a></span><a href=\"#method.take-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../io/trait.Read.html#method.take\" class=\"fn\">take</a>(self, limit: <a class=\"primitive\" href=\"../../../primitive.u64.html\">u64</a>) -&gt; <a class=\"struct\" href=\"../../../io/struct.Take.html\" title=\"struct std::io::Take\">Take</a>&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Take<Self>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../../../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Creates an adapter which will read at most <code>limit</code> bytes from it. <a href=\"../../../io/trait.Read.html#method.take\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-UnixSocketExt-for-UnixStream\" class=\"impl\"><a class=\"src rightside\" href=\"../../../../src/std/os/net/linux_ext/socket.rs.html#55-63\">source</a><a href=\"#impl-UnixSocketExt-for-UnixStream\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../linux/net/trait.UnixSocketExt.html\" title=\"trait std::os::linux::net::UnixSocketExt\">UnixSocketExt</a> for <a class=\"struct\" href=\"struct.UnixStream.html\" title=\"struct std::os::unix::net::UnixStream\">UnixStream</a></h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Linux or Android</strong> only.</div></span></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.passcred\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../../src/std/os/net/linux_ext/socket.rs.html#56-58\">source</a><a href=\"#method.passcred\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../linux/net/trait.UnixSocketExt.html#tymethod.passcred\" class=\"fn\">passcred</a>(&amp;self) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../../primitive.bool.html\">bool</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unix_socket_ancillary_data</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/76915\">#76915</a>)</span></div><div class=\"stab portability\">Available on <strong>Linux</strong> only.</div></span><div class=\"docblock\">Query the current setting of socket option <code>SO_PASSCRED</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.set_passcred\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../../src/std/os/net/linux_ext/socket.rs.html#60-62\">source</a><a href=\"#method.set_passcred\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../linux/net/trait.UnixSocketExt.html#tymethod.set_passcred\" class=\"fn\">set_passcred</a>(&amp;self, passcred: <a class=\"primitive\" href=\"../../../primitive.bool.html\">bool</a>) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../../primitive.unit.html\">()</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unix_socket_ancillary_data</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/76915\">#76915</a>)</span></div><div class=\"stab portability\">Available on <strong>Linux</strong> only.</div></span><div class=\"docblock\">Enable or disable socket option <code>SO_PASSCRED</code>. <a href=\"../../linux/net/trait.UnixSocketExt.html#tymethod.set_passcred\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Write-for-%26UnixStream\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"../../../../src/std/os/unix/net/stream.rs.html#632-650\">source</a></span><a href=\"#impl-Write-for-%26UnixStream\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"../../../io/trait.Write.html\" title=\"trait std::io::Write\">Write</a> for &amp;'a <a class=\"struct\" href=\"struct.UnixStream.html\" title=\"struct std::os::unix::net::UnixStream\">UnixStream</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../../src/std/os/unix/net/stream.rs.html#633-635\">source</a><a href=\"#method.write-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../io/trait.Write.html#tymethod.write\" class=\"fn\">write</a>(&amp;mut self, buf: &amp;[<a class=\"primitive\" href=\"../../../primitive.u8.html\">u8</a>]) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\">Write a buffer into this writer, returning how many bytes were written. <a href=\"../../../io/trait.Write.html#tymethod.write\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_vectored-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../../src/std/os/unix/net/stream.rs.html#637-639\">source</a><a href=\"#method.write_vectored-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../io/trait.Write.html#method.write_vectored\" class=\"fn\">write_vectored</a>(&amp;mut self, bufs: &amp;[<a class=\"struct\" href=\"../../../io/struct.IoSlice.html\" title=\"struct std::io::IoSlice\">IoSlice</a>&lt;'_&gt;]) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\">Like <a href=\"../../../io/trait.Write.html#tymethod.write\" title=\"method std::io::Write::write\"><code>write</code></a>, except that it writes from a slice of buffers. <a href=\"../../../io/trait.Write.html#method.write_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_write_vectored-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../../src/std/os/unix/net/stream.rs.html#642-644\">source</a><a href=\"#method.is_write_vectored-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../io/trait.Write.html#method.is_write_vectored\" class=\"fn\">is_write_vectored</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.bool.html\">bool</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>can_vector</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/69941\">#69941</a>)</span></div></span><div class=\"docblock\">Determines if this <code>Write</code>r has an efficient <a href=\"../../../io/trait.Write.html#method.write_vectored\" title=\"method std::io::Write::write_vectored\"><code>write_vectored</code></a>\nimplementation. <a href=\"../../../io/trait.Write.html#method.is_write_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.flush-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../../src/std/os/unix/net/stream.rs.html#647-649\">source</a><a href=\"#method.flush-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../io/trait.Write.html#tymethod.flush\" class=\"fn\">flush</a>(&amp;mut self) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\">Flush this output stream, ensuring that all intermediately buffered\ncontents reach their destination. <a href=\"../../../io/trait.Write.html#tymethod.flush\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_all-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../../../src/std/io/mod.rs.html#1699-1711\">source</a></span><a href=\"#method.write_all-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../io/trait.Write.html#method.write_all\" class=\"fn\">write_all</a>(&amp;mut self, buf: &amp;[<a class=\"primitive\" href=\"../../../primitive.u8.html\">u8</a>]) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\">Attempts to write an entire buffer into this writer. <a href=\"../../../io/trait.Write.html#method.write_all\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_all_vectored-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../../src/std/io/mod.rs.html#1761-1776\">source</a><a href=\"#method.write_all_vectored-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../io/trait.Write.html#method.write_all_vectored\" class=\"fn\">write_all_vectored</a>(&amp;mut self, bufs: &amp;mut [<a class=\"struct\" href=\"../../../io/struct.IoSlice.html\" title=\"struct std::io::IoSlice\">IoSlice</a>&lt;'_&gt;]) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../../primitive.unit.html\">()</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>write_all_vectored</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/70436\">#70436</a>)</span></div></span><div class=\"docblock\">Attempts to write multiple buffers into this writer. <a href=\"../../../io/trait.Write.html#method.write_all_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_fmt-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../../../src/std/io/mod.rs.html#1814-1850\">source</a></span><a href=\"#method.write_fmt-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../io/trait.Write.html#method.write_fmt\" class=\"fn\">write_fmt</a>(&amp;mut self, fmt: <a class=\"struct\" href=\"../../../fmt/struct.Arguments.html\" title=\"struct std::fmt::Arguments\">Arguments</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\">Writes a formatted string into this writer, returning any error\nencountered. <a href=\"../../../io/trait.Write.html#method.write_fmt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.by_ref-3\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../../../src/std/io/mod.rs.html#1874-1879\">source</a></span><a href=\"#method.by_ref-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../io/trait.Write.html#method.by_ref\" class=\"fn\">by_ref</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../../../primitive.reference.html\">&amp;mut Self</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../../../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Creates a “by reference” adapter for this instance of <code>Write</code>. <a href=\"../../../io/trait.Write.html#method.by_ref\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Write-for-UnixStream\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"../../../../src/std/os/unix/net/stream.rs.html#612-629\">source</a></span><a href=\"#impl-Write-for-UnixStream\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../../io/trait.Write.html\" title=\"trait std::io::Write\">Write</a> for <a class=\"struct\" href=\"struct.UnixStream.html\" title=\"struct std::os::unix::net::UnixStream\">UnixStream</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../../src/std/os/unix/net/stream.rs.html#613-615\">source</a><a href=\"#method.write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../io/trait.Write.html#tymethod.write\" class=\"fn\">write</a>(&amp;mut self, buf: &amp;[<a class=\"primitive\" href=\"../../../primitive.u8.html\">u8</a>]) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\">Write a buffer into this writer, returning how many bytes were written. <a href=\"../../../io/trait.Write.html#tymethod.write\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_vectored\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../../src/std/os/unix/net/stream.rs.html#617-619\">source</a><a href=\"#method.write_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../io/trait.Write.html#method.write_vectored\" class=\"fn\">write_vectored</a>(&amp;mut self, bufs: &amp;[<a class=\"struct\" href=\"../../../io/struct.IoSlice.html\" title=\"struct std::io::IoSlice\">IoSlice</a>&lt;'_&gt;]) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\">Like <a href=\"../../../io/trait.Write.html#tymethod.write\" title=\"method std::io::Write::write\"><code>write</code></a>, except that it writes from a slice of buffers. <a href=\"../../../io/trait.Write.html#method.write_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_write_vectored\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../../src/std/os/unix/net/stream.rs.html#622-624\">source</a><a href=\"#method.is_write_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../io/trait.Write.html#method.is_write_vectored\" class=\"fn\">is_write_vectored</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.bool.html\">bool</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>can_vector</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/69941\">#69941</a>)</span></div></span><div class=\"docblock\">Determines if this <code>Write</code>r has an efficient <a href=\"../../../io/trait.Write.html#method.write_vectored\" title=\"method std::io::Write::write_vectored\"><code>write_vectored</code></a>\nimplementation. <a href=\"../../../io/trait.Write.html#method.is_write_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.flush\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../../src/std/os/unix/net/stream.rs.html#626-628\">source</a><a href=\"#method.flush\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../io/trait.Write.html#tymethod.flush\" class=\"fn\">flush</a>(&amp;mut self) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\">Flush this output stream, ensuring that all intermediately buffered\ncontents reach their destination. <a href=\"../../../io/trait.Write.html#tymethod.flush\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_all\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../../../src/std/io/mod.rs.html#1699-1711\">source</a></span><a href=\"#method.write_all\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../io/trait.Write.html#method.write_all\" class=\"fn\">write_all</a>(&amp;mut self, buf: &amp;[<a class=\"primitive\" href=\"../../../primitive.u8.html\">u8</a>]) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\">Attempts to write an entire buffer into this writer. <a href=\"../../../io/trait.Write.html#method.write_all\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_all_vectored\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../../src/std/io/mod.rs.html#1761-1776\">source</a><a href=\"#method.write_all_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../io/trait.Write.html#method.write_all_vectored\" class=\"fn\">write_all_vectored</a>(&amp;mut self, bufs: &amp;mut [<a class=\"struct\" href=\"../../../io/struct.IoSlice.html\" title=\"struct std::io::IoSlice\">IoSlice</a>&lt;'_&gt;]) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../../primitive.unit.html\">()</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>write_all_vectored</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/70436\">#70436</a>)</span></div></span><div class=\"docblock\">Attempts to write multiple buffers into this writer. <a href=\"../../../io/trait.Write.html#method.write_all_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_fmt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../../../src/std/io/mod.rs.html#1814-1850\">source</a></span><a href=\"#method.write_fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../io/trait.Write.html#method.write_fmt\" class=\"fn\">write_fmt</a>(&amp;mut self, fmt: <a class=\"struct\" href=\"../../../fmt/struct.Arguments.html\" title=\"struct std::fmt::Arguments\">Arguments</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\">Writes a formatted string into this writer, returning any error\nencountered. <a href=\"../../../io/trait.Write.html#method.write_fmt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.by_ref-2\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../../../src/std/io/mod.rs.html#1874-1879\">source</a></span><a href=\"#method.by_ref-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../io/trait.Write.html#method.by_ref\" class=\"fn\">by_ref</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../../../primitive.reference.html\">&amp;mut Self</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../../../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Creates a “by reference” adapter for this instance of <code>Write</code>. <a href=\"../../../io/trait.Write.html#method.by_ref\">Read more</a></div></details></div></details></div><h2 id=\"synthetic-implementations\" class=\"section-header\">Auto Trait Implementations<a href=\"#synthetic-implementations\" class=\"anchor\">§</a></h2><div id=\"synthetic-implementations-list\"><section id=\"impl-Freeze-for-UnixStream\" class=\"impl\"><a href=\"#impl-Freeze-for-UnixStream\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"struct\" href=\"struct.UnixStream.html\" title=\"struct std::os::unix::net::UnixStream\">UnixStream</a></h3></section><section id=\"impl-RefUnwindSafe-for-UnixStream\" class=\"impl\"><a href=\"#impl-RefUnwindSafe-for-UnixStream\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"struct\" href=\"struct.UnixStream.html\" title=\"struct std::os::unix::net::UnixStream\">UnixStream</a></h3></section><section id=\"impl-Send-for-UnixStream\" class=\"impl\"><a href=\"#impl-Send-for-UnixStream\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"struct\" href=\"struct.UnixStream.html\" title=\"struct std::os::unix::net::UnixStream\">UnixStream</a></h3></section><section id=\"impl-Sync-for-UnixStream\" class=\"impl\"><a href=\"#impl-Sync-for-UnixStream\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"struct.UnixStream.html\" title=\"struct std::os::unix::net::UnixStream\">UnixStream</a></h3></section><section id=\"impl-Unpin-for-UnixStream\" class=\"impl\"><a href=\"#impl-Unpin-for-UnixStream\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"struct\" href=\"struct.UnixStream.html\" title=\"struct std::os::unix::net::UnixStream\">UnixStream</a></h3></section><section id=\"impl-UnwindSafe-for-UnixStream\" class=\"impl\"><a href=\"#impl-UnwindSafe-for-UnixStream\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"struct.UnixStream.html\" title=\"struct std::os::unix::net::UnixStream\">UnixStream</a></h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">§</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Any-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a><a href=\"#impl-Any-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"../../../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#141\">source</a><a href=\"#method.type_id\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../any/trait.Any.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../../../any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\">Gets the <code>TypeId</code> of <code>self</code>. <a href=\"../../../any/trait.Any.html#tymethod.type_id\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Borrow%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208\">source</a><a href=\"#impl-Borrow%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../../../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#210\">source</a><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"../../../borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216\">source</a><a href=\"#impl-BorrowMut%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../../borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../../../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#217\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../../../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"../../../borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765\">source</a><a href=\"#impl-From%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768\">source</a><a href=\"#method.from-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the argument unchanged.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Into%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750\">source</a><a href=\"#impl-Into%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../../../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758\">source</a><a href=\"#method.into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; U</h4></section></summary><div class=\"docblock\"><p>Calls <code>U::from(self)</code>.</p>\n<p>That is, this conversion is whatever the implementation of\n<code><a href=\"../../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for U</code> chooses to do.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryFrom%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807\">source</a><a href=\"#impl-TryFrom%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../../../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../../../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../../../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"../../../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812\">source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: U) -&gt; <a class=\"enum\" href=\"../../../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, &lt;T as <a class=\"trait\" href=\"../../../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt;&gt;::<a class=\"associatedtype\" href=\"../../../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryInto%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792\">source</a><a href=\"#impl-TryInto%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../../../convert/trait.TryInto.html\" title=\"trait std::convert::TryInto\">TryInto</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../../../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../../../convert/trait.TryInto.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = &lt;U as <a class=\"trait\" href=\"../../../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../../../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797\">source</a><a href=\"#method.try_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../convert/trait.TryInto.html#tymethod.try_into\" class=\"fn\">try_into</a>(self) -&gt; <a class=\"enum\" href=\"../../../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;U, &lt;U as <a class=\"trait\" href=\"../../../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../../../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details></div><script type=\"text/json\" id=\"notable-traits-data\">{\"Bytes<Self>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"../../../io/struct.Bytes.html\\\" title=\\\"struct std::io::Bytes\\\">Bytes</a>&lt;R&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;R: <a class=\\\"trait\\\" href=\\\"../../../io/trait.Read.html\\\" title=\\\"trait std::io::Read\\\">Read</a>&gt; <a class=\\\"trait\\\" href=\\\"../../../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"../../../io/struct.Bytes.html\\\" title=\\\"struct std::io::Bytes\\\">Bytes</a>&lt;R&gt;</div><div class=\\\"where\\\">    type <a href=\\\"../../../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = <a class=\\\"type\\\" href=\\\"../../../io/type.Result.html\\\" title=\\\"type std::io::Result\\\">Result</a>&lt;<a class=\\\"primitive\\\" href=\\\"../../../primitive.u8.html\\\">u8</a>&gt;;</div>\",\"Chain<Self, R>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"../../../io/struct.Chain.html\\\" title=\\\"struct std::io::Chain\\\">Chain</a>&lt;T, U&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;T: <a class=\\\"trait\\\" href=\\\"../../../io/trait.Read.html\\\" title=\\\"trait std::io::Read\\\">Read</a>, U: <a class=\\\"trait\\\" href=\\\"../../../io/trait.Read.html\\\" title=\\\"trait std::io::Read\\\">Read</a>&gt; <a class=\\\"trait\\\" href=\\\"../../../io/trait.Read.html\\\" title=\\\"trait std::io::Read\\\">Read</a> for <a class=\\\"struct\\\" href=\\\"../../../io/struct.Chain.html\\\" title=\\\"struct std::io::Chain\\\">Chain</a>&lt;T, U&gt;</div>\",\"Take<Self>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"../../../io/struct.Take.html\\\" title=\\\"struct std::io::Take\\\">Take</a>&lt;T&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;T: <a class=\\\"trait\\\" href=\\\"../../../io/trait.Read.html\\\" title=\\\"trait std::io::Read\\\">Read</a>&gt; <a class=\\\"trait\\\" href=\\\"../../../io/trait.Read.html\\\" title=\\\"trait std::io::Read\\\">Read</a> for <a class=\\\"struct\\\" href=\\\"../../../io/struct.Take.html\\\" title=\\\"struct std::io::Take\\\">Take</a>&lt;T&gt;</div>\",\"UnixStream\":\"<h3>Notable traits for <code>&amp;'a <a class=\\\"struct\\\" href=\\\"struct.UnixStream.html\\\" title=\\\"struct std::os::unix::net::UnixStream\\\">UnixStream</a></code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a&gt; <a class=\\\"trait\\\" href=\\\"../../../io/trait.Read.html\\\" title=\\\"trait std::io::Read\\\">Read</a> for &amp;'a <a class=\\\"struct\\\" href=\\\"struct.UnixStream.html\\\" title=\\\"struct std::os::unix::net::UnixStream\\\">UnixStream</a></div><div class=\\\"where\\\">impl <a class=\\\"trait\\\" href=\\\"../../../io/trait.Read.html\\\" title=\\\"trait std::io::Read\\\">Read</a> for <a class=\\\"struct\\\" href=\\\"struct.UnixStream.html\\\" title=\\\"struct std::os::unix::net::UnixStream\\\">UnixStream</a></div><div class=\\\"where\\\">impl <a class=\\\"trait\\\" href=\\\"../../../io/trait.Write.html\\\" title=\\\"trait std::io::Write\\\">Write</a> for <a class=\\\"struct\\\" href=\\\"struct.UnixStream.html\\\" title=\\\"struct std::os::unix::net::UnixStream\\\">UnixStream</a></div><div class=\\\"where\\\">impl&lt;'a&gt; <a class=\\\"trait\\\" href=\\\"../../../io/trait.Write.html\\\" title=\\\"trait std::io::Write\\\">Write</a> for &amp;'a <a class=\\\"struct\\\" href=\\\"struct.UnixStream.html\\\" title=\\\"struct std::os::unix::net::UnixStream\\\">UnixStream</a></div>\"}</script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:25:56.510Z"
}