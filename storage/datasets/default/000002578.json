{
	"title": "Location in std::panic - Rust",
	"url": "https://doc.rust-lang.org/stable/std/panic/struct.Location.html",
	"markdown": "# Location in std::panic - Rust\n\n## Struct [std](../index.html)::[panic](index.html)::[Location](#)\n\n1.10.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/panic/location.rs.html#33) ·\n\n```\npub struct Location<'a> { /* private fields */ }\n```\n\nExpand description\n\nA struct containing information about the location of a panic.\n\nThis structure is created by [`PanicInfo::location()`](about:blank/struct.PanicInfo.html#method.location \"method std::panic::PanicInfo::location\").\n\n## [§](#examples)Examples\n\n[ⓘ](# \"This example panics\")\n\n```\nuse std::panic;\n\npanic::set_hook(Box::new(|panic_info| {\n    if let Some(location) = panic_info.location() {\n        println!(\"panic occurred in file '{}' at line {}\", location.file(), location.line());\n    } else {\n        println!(\"panic occurred but can't get location information...\");\n    }\n}));\n\npanic!(\"Normal panic\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::panic;%0A++++%0A++++panic::set_hook(Box::new(%7Cpanic_info%7C+%7B%0A++++++++if+let+Some(location)+=+panic_info.location()+%7B%0A++++++++++++println!(%22panic+occurred+in+file+%27%7B%7D%27+at+line+%7B%7D%22,+location.file(),+location.line());%0A++++++++%7D+else+%7B%0A++++++++++++println!(%22panic+occurred+but+can%27t+get+location+information...%22);%0A++++++++%7D%0A++++%7D));%0A++++%0A++++panic!(%22Normal+panic%22);%0A%7D&edition=2021)\n\n## [§](#comparisons)Comparisons\n\nComparisons for equality and ordering are made in file, line, then column priority. Files are compared as strings, not `Path`, which could be unexpected. See [`Location::file`](about:blank/struct.Location.html#method.file \"method std::panic::Location::file\")’s documentation for more discussion.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/panic/location.rs.html#39)[§](#impl-Location%3C'a%3E)\n\n1.46.0 (const: 1.79.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/panic/location.rs.html#87)\n\nReturns the source location of the caller of this function. If that function’s caller is annotated then its call location will be returned, and so on up the stack to the first call within a non-tracked function body.\n\n##### [§](#examples-1)Examples\n\n```\nuse std::panic::Location;\n\n/// Returns the [`Location`] at which it is called.\n#[track_caller]\nfn get_caller_location() -> &'static Location<'static> {\n    Location::caller()\n}\n\n/// Returns a [`Location`] from within this function's definition.\nfn get_just_one_location() -> &'static Location<'static> {\n    get_caller_location()\n}\n\nlet fixed_location = get_just_one_location();\nassert_eq!(fixed_location.file(), file!());\nassert_eq!(fixed_location.line(), 14);\nassert_eq!(fixed_location.column(), 5);\n\n// running the same untracked function in a different location gives us the same result\nlet second_fixed_location = get_just_one_location();\nassert_eq!(fixed_location.file(), second_fixed_location.file());\nassert_eq!(fixed_location.line(), second_fixed_location.line());\nassert_eq!(fixed_location.column(), second_fixed_location.column());\n\nlet this_location = get_caller_location();\nassert_eq!(this_location.file(), file!());\nassert_eq!(this_location.line(), 28);\nassert_eq!(this_location.column(), 21);\n\n// running the tracked function in a different location produces a different value\nlet another_location = get_caller_location();\nassert_eq!(this_location.file(), another_location.file());\nassert_ne!(this_location.line(), another_location.line());\nassert_ne!(this_location.column(), another_location.column());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::panic::Location;%0A++++%0A++++///+Returns+the+%5B%60Location%60%5D+at+which+it+is+called.%0A++++%23%5Btrack_caller%5D%0A++++fn+get_caller_location()+-%3E+%26%27static+Location%3C%27static%3E+%7B%0A++++++++Location::caller()%0A++++%7D%0A++++%0A++++///+Returns+a+%5B%60Location%60%5D+from+within+this+function%27s+definition.%0A++++fn+get_just_one_location()+-%3E+%26%27static+Location%3C%27static%3E+%7B%0A++++++++get_caller_location()%0A++++%7D%0A++++%0A++++let+fixed_location+=+get_just_one_location();%0A++++assert_eq!(fixed_location.file(),+file!());%0A++++assert_eq!(fixed_location.line(),+14);%0A++++assert_eq!(fixed_location.column(),+5);%0A++++%0A++++//+running+the+same+untracked+function+in+a+different+location+gives+us+the+same+result%0A++++let+second_fixed_location+=+get_just_one_location();%0A++++assert_eq!(fixed_location.file(),+second_fixed_location.file());%0A++++assert_eq!(fixed_location.line(),+second_fixed_location.line());%0A++++assert_eq!(fixed_location.column(),+second_fixed_location.column());%0A++++%0A++++let+this_location+=+get_caller_location();%0A++++assert_eq!(this_location.file(),+file!());%0A++++assert_eq!(this_location.line(),+28);%0A++++assert_eq!(this_location.column(),+21);%0A++++%0A++++//+running+the+tracked+function+in+a+different+location+produces+a+different+value%0A++++let+another_location+=+get_caller_location();%0A++++assert_eq!(this_location.file(),+another_location.file());%0A++++assert_ne!(this_location.line(),+another_location.line());%0A++++assert_ne!(this_location.column(),+another_location.column());%0A%7D&edition=2021)\n\n1.10.0 (const: 1.79.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/panic/location.rs.html#128)\n\nReturns the name of the source file from which the panic originated.\n\n##### [§](#str-not-path)`&str`, not `&Path`\n\nThe returned name refers to a source path on the compiling system, but it isn’t valid to represent this directly as a `&Path`. The compiled code may run on a different system with a different `Path` implementation than the system providing the contents and this library does not currently have a different “host path” type.\n\nThe most surprising behavior occurs when “the same” file is reachable via multiple paths in the module system (usually using the `#[path = \"...\"]` attribute or similar), which can cause what appears to be identical code to return differing values from this function.\n\n##### [§](#cross-compilation)Cross-compilation\n\nThis value is not suitable for passing to `Path::new` or similar constructors when the host platform and target platform differ.\n\n##### [§](#examples-2)Examples\n\n[ⓘ](# \"This example panics\")\n\n```\nuse std::panic;\n\npanic::set_hook(Box::new(|panic_info| {\n    if let Some(location) = panic_info.location() {\n        println!(\"panic occurred in file '{}'\", location.file());\n    } else {\n        println!(\"panic occurred but can't get location information...\");\n    }\n}));\n\npanic!(\"Normal panic\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::panic;%0A++++%0A++++panic::set_hook(Box::new(%7Cpanic_info%7C+%7B%0A++++++++if+let+Some(location)+=+panic_info.location()+%7B%0A++++++++++++println!(%22panic+occurred+in+file+%27%7B%7D%27%22,+location.file());%0A++++++++%7D+else+%7B%0A++++++++++++println!(%22panic+occurred+but+can%27t+get+location+information...%22);%0A++++++++%7D%0A++++%7D));%0A++++%0A++++panic!(%22Normal+panic%22);%0A%7D&edition=2021)\n\n1.10.0 (const: 1.79.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/panic/location.rs.html#153)\n\nReturns the line number from which the panic originated.\n\n##### [§](#examples-3)Examples\n\n[ⓘ](# \"This example panics\")\n\n```\nuse std::panic;\n\npanic::set_hook(Box::new(|panic_info| {\n    if let Some(location) = panic_info.location() {\n        println!(\"panic occurred at line {}\", location.line());\n    } else {\n        println!(\"panic occurred but can't get location information...\");\n    }\n}));\n\npanic!(\"Normal panic\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::panic;%0A++++%0A++++panic::set_hook(Box::new(%7Cpanic_info%7C+%7B%0A++++++++if+let+Some(location)+=+panic_info.location()+%7B%0A++++++++++++println!(%22panic+occurred+at+line+%7B%7D%22,+location.line());%0A++++++++%7D+else+%7B%0A++++++++++++println!(%22panic+occurred+but+can%27t+get+location+information...%22);%0A++++++++%7D%0A++++%7D));%0A++++%0A++++panic!(%22Normal+panic%22);%0A%7D&edition=2021)\n\n1.25.0 (const: 1.79.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/panic/location.rs.html#178)\n\nReturns the column from which the panic originated.\n\n##### [§](#examples-4)Examples\n\n[ⓘ](# \"This example panics\")\n\n```\nuse std::panic;\n\npanic::set_hook(Box::new(|panic_info| {\n    if let Some(location) = panic_info.location() {\n        println!(\"panic occurred at column {}\", location.column());\n    } else {\n        println!(\"panic occurred but can't get location information...\");\n    }\n}));\n\npanic!(\"Normal panic\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::panic;%0A++++%0A++++panic::set_hook(Box::new(%7Cpanic_info%7C+%7B%0A++++++++if+let+Some(location)+=+panic_info.location()+%7B%0A++++++++++++println!(%22panic+occurred+at+column+%7B%7D%22,+location.column());%0A++++++++%7D+else+%7B%0A++++++++++++println!(%22panic+occurred+but+can%27t+get+location+information...%22);%0A++++++++%7D%0A++++%7D));%0A++++%0A++++panic!(%22Normal+panic%22);%0A%7D&edition=2021)\n\n1.10.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/panic/location.rs.html#31)[§](#impl-Clone-for-Location%3C'a%3E)\n\n1.10.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/panic/location.rs.html#31)[§](#impl-Debug-for-Location%3C'a%3E)\n\n1.26.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/panic/location.rs.html#196)[§](#impl-Display-for-Location%3C'_%3E)\n\n1.10.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/panic/location.rs.html#31)[§](#impl-Hash-for-Location%3C'a%3E)\n\n1.10.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/panic/location.rs.html#31)[§](#impl-Ord-for-Location%3C'a%3E)\n\n1.10.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/panic/location.rs.html#31)[§](#impl-PartialEq-for-Location%3C'a%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/panic/location.rs.html#31)[§](#method.eq)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[§](#method.ne)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.10.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/panic/location.rs.html#31)[§](#impl-PartialOrd-for-Location%3C'a%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/panic/location.rs.html#31)[§](#method.partial_cmp)\n\nThis method returns an ordering between `self` and `other` values if one exists. [Read more](about:blank/cmp/trait.PartialOrd.html#tymethod.partial_cmp)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180)[§](#method.lt)\n\nThis method tests less than (for `self` and `other`) and is used by the `<` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.lt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198)[§](#method.le)\n\nThis method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.le)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215)[§](#method.gt)\n\nThis method tests greater than (for `self` and `other`) and is used by the `>` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.gt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233)[§](#method.ge)\n\nThis method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.ge)\n\n1.10.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/panic/location.rs.html#31)[§](#impl-Copy-for-Location%3C'a%3E)\n\n1.10.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/panic/location.rs.html#31)[§](#impl-Eq-for-Location%3C'a%3E)\n\n1.10.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/panic/location.rs.html#31)[§](#impl-StructuralPartialEq-for-Location%3C'a%3E)\n\n[§](#impl-Freeze-for-Location%3C'a%3E)\n\n[§](#impl-RefUnwindSafe-for-Location%3C'a%3E)\n\n[§](#impl-Send-for-Location%3C'a%3E)\n\n[§](#impl-Sync-for-Location%3C'a%3E)\n\n[§](#impl-Unpin-for-Location%3C'a%3E)\n\n[§](#impl-UnwindSafe-for-Location%3C'a%3E)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"A struct containing information about the location of a panic.\"><title>Location in std::panic - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc struct\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">Location</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">Location</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#implementations\">Methods</a></h3><ul class=\"block method\"><li><a href=\"#method.caller\">caller</a></li><li><a href=\"#method.column\">column</a></li><li><a href=\"#method.file\">file</a></li><li><a href=\"#method.line\">line</a></li></ul><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-Clone-for-Location%3C'a%3E\">Clone</a></li><li><a href=\"#impl-Copy-for-Location%3C'a%3E\">Copy</a></li><li><a href=\"#impl-Debug-for-Location%3C'a%3E\">Debug</a></li><li><a href=\"#impl-Display-for-Location%3C'_%3E\">Display</a></li><li><a href=\"#impl-Eq-for-Location%3C'a%3E\">Eq</a></li><li><a href=\"#impl-Hash-for-Location%3C'a%3E\">Hash</a></li><li><a href=\"#impl-Ord-for-Location%3C'a%3E\">Ord</a></li><li><a href=\"#impl-PartialEq-for-Location%3C'a%3E\">PartialEq</a></li><li><a href=\"#impl-PartialOrd-for-Location%3C'a%3E\">PartialOrd</a></li><li><a href=\"#impl-StructuralPartialEq-for-Location%3C'a%3E\">StructuralPartialEq</a></li></ul><h3><a href=\"#synthetic-implementations\">Auto Trait Implementations</a></h3><ul class=\"block synthetic-implementation\"><li><a href=\"#impl-Freeze-for-Location%3C'a%3E\">Freeze</a></li><li><a href=\"#impl-RefUnwindSafe-for-Location%3C'a%3E\">RefUnwindSafe</a></li><li><a href=\"#impl-Send-for-Location%3C'a%3E\">Send</a></li><li><a href=\"#impl-Sync-for-Location%3C'a%3E\">Sync</a></li><li><a href=\"#impl-Unpin-for-Location%3C'a%3E\">Unpin</a></li><li><a href=\"#impl-UnwindSafe-for-Location%3C'a%3E\">UnwindSafe</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-Any-for-T\">Any</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-T\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-T\">BorrowMut&lt;T&gt;</a></li><li><a href=\"#impl-From%3CT%3E-for-T\">From&lt;T&gt;</a></li><li><a href=\"#impl-Into%3CU%3E-for-T\">Into&lt;U&gt;</a></li><li><a href=\"#impl-ToOwned-for-T\">ToOwned</a></li><li><a href=\"#impl-ToString-for-T\">ToString</a></li><li><a href=\"#impl-TryFrom%3CU%3E-for-T\">TryFrom&lt;U&gt;</a></li><li><a href=\"#impl-TryInto%3CU%3E-for-T\">TryInto&lt;U&gt;</a></li></ul></section><h2><a href=\"index.html\">In std::panic</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.AssertUnwindSafe.html\">AssertUnwindSafe</a></li><li><a href=\"struct.Location.html\">Location</a></li><li><a href=\"struct.PanicInfo.html\">PanicInfo</a></li></ul><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.BacktraceStyle.html\">BacktraceStyle</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.RefUnwindSafe.html\">RefUnwindSafe</a></li><li><a href=\"trait.UnwindSafe.html\">UnwindSafe</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.always_abort.html\">always_abort</a></li><li><a href=\"fn.catch_unwind.html\">catch_unwind</a></li><li><a href=\"fn.get_backtrace_style.html\">get_backtrace_style</a></li><li><a href=\"fn.panic_any.html\">panic_any</a></li><li><a href=\"fn.resume_unwind.html\">resume_unwind</a></li><li><a href=\"fn.set_backtrace_style.html\">set_backtrace_style</a></li><li><a href=\"fn.set_hook.html\">set_hook</a></li><li><a href=\"fn.take_hook.html\">take_hook</a></li><li><a href=\"fn.update_hook.html\">update_hook</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Struct <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">panic</a>::<wbr><a class=\"struct\" href=\"#\">Location</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/panic/location.rs.html#33\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub struct Location&lt;'a&gt; { <span class=\"comment\">/* private fields */</span> }</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>A struct containing information about the location of a panic.</p>\n<p>This structure is created by <a href=\"struct.PanicInfo.html#method.location\" title=\"method std::panic::PanicInfo::location\"><code>PanicInfo::location()</code></a>.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::panic;\n\npanic::set_hook(Box::new(|panic_info| {\n    <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(location) = panic_info.location() {\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"panic occurred in file '{}' at line {}\"</span>, location.file(), location.line());\n    } <span class=\"kw\">else </span>{\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"panic occurred but can't get location information...\"</span>);\n    }\n}));\n\n<span class=\"macro\">panic!</span>(<span class=\"string\">\"Normal panic\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::panic;%0A++++%0A++++panic::set_hook(Box::new(%7Cpanic_info%7C+%7B%0A++++++++if+let+Some(location)+=+panic_info.location()+%7B%0A++++++++++++println!(%22panic+occurred+in+file+'%7B%7D'+at+line+%7B%7D%22,+location.file(),+location.line());%0A++++++++%7D+else+%7B%0A++++++++++++println!(%22panic+occurred+but+can't+get+location+information...%22);%0A++++++++%7D%0A++++%7D));%0A++++%0A++++panic!(%22Normal+panic%22);%0A%7D&amp;edition=2021\">Run</a></div>\n<h2 id=\"comparisons\"><a class=\"doc-anchor\" href=\"#comparisons\">§</a>Comparisons</h2>\n<p>Comparisons for equality and ordering are made in file, line, then column priority.\nFiles are compared as strings, not <code>Path</code>, which could be unexpected.\nSee <a href=\"struct.Location.html#method.file\" title=\"method std::panic::Location::file\"><code>Location::file</code></a>’s documentation for more discussion.</p>\n</div></details><h2 id=\"implementations\" class=\"section-header\">Implementations<a href=\"#implementations\" class=\"anchor\">§</a></h2><div id=\"implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Location%3C'a%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/panic/location.rs.html#39\">source</a><a href=\"#impl-Location%3C'a%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"struct\" href=\"struct.Location.html\" title=\"struct std::panic::Location\">Location</a>&lt;'a&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.caller\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0, const since 1.79.0\">1.46.0 (const: 1.79.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/panic/location.rs.html#87\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.caller\" class=\"fn\">caller</a>() -&gt; &amp;'static <a class=\"struct\" href=\"struct.Location.html\" title=\"struct std::panic::Location\">Location</a>&lt;'static&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the source location of the caller of this function. If that function’s caller is\nannotated then its call location will be returned, and so on up the stack to the first call\nwithin a non-tracked function body.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::panic::Location;\n\n<span class=\"doccomment\">/// Returns the [`Location`] at which it is called.\n</span><span class=\"attr\">#[track_caller]\n</span><span class=\"kw\">fn </span>get_caller_location() -&gt; <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>Location&lt;<span class=\"lifetime\">'static</span>&gt; {\n    Location::caller()\n}\n\n<span class=\"doccomment\">/// Returns a [`Location`] from within this function's definition.\n</span><span class=\"kw\">fn </span>get_just_one_location() -&gt; <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>Location&lt;<span class=\"lifetime\">'static</span>&gt; {\n    get_caller_location()\n}\n\n<span class=\"kw\">let </span>fixed_location = get_just_one_location();\n<span class=\"macro\">assert_eq!</span>(fixed_location.file(), <span class=\"macro\">file!</span>());\n<span class=\"macro\">assert_eq!</span>(fixed_location.line(), <span class=\"number\">14</span>);\n<span class=\"macro\">assert_eq!</span>(fixed_location.column(), <span class=\"number\">5</span>);\n\n<span class=\"comment\">// running the same untracked function in a different location gives us the same result\n</span><span class=\"kw\">let </span>second_fixed_location = get_just_one_location();\n<span class=\"macro\">assert_eq!</span>(fixed_location.file(), second_fixed_location.file());\n<span class=\"macro\">assert_eq!</span>(fixed_location.line(), second_fixed_location.line());\n<span class=\"macro\">assert_eq!</span>(fixed_location.column(), second_fixed_location.column());\n\n<span class=\"kw\">let </span>this_location = get_caller_location();\n<span class=\"macro\">assert_eq!</span>(this_location.file(), <span class=\"macro\">file!</span>());\n<span class=\"macro\">assert_eq!</span>(this_location.line(), <span class=\"number\">28</span>);\n<span class=\"macro\">assert_eq!</span>(this_location.column(), <span class=\"number\">21</span>);\n\n<span class=\"comment\">// running the tracked function in a different location produces a different value\n</span><span class=\"kw\">let </span>another_location = get_caller_location();\n<span class=\"macro\">assert_eq!</span>(this_location.file(), another_location.file());\n<span class=\"macro\">assert_ne!</span>(this_location.line(), another_location.line());\n<span class=\"macro\">assert_ne!</span>(this_location.column(), another_location.column());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::panic::Location;%0A++++%0A++++///+Returns+the+%5B%60Location%60%5D+at+which+it+is+called.%0A++++%23%5Btrack_caller%5D%0A++++fn+get_caller_location()+-%3E+%26'static+Location%3C'static%3E+%7B%0A++++++++Location::caller()%0A++++%7D%0A++++%0A++++///+Returns+a+%5B%60Location%60%5D+from+within+this+function's+definition.%0A++++fn+get_just_one_location()+-%3E+%26'static+Location%3C'static%3E+%7B%0A++++++++get_caller_location()%0A++++%7D%0A++++%0A++++let+fixed_location+=+get_just_one_location();%0A++++assert_eq!(fixed_location.file(),+file!());%0A++++assert_eq!(fixed_location.line(),+14);%0A++++assert_eq!(fixed_location.column(),+5);%0A++++%0A++++//+running+the+same+untracked+function+in+a+different+location+gives+us+the+same+result%0A++++let+second_fixed_location+=+get_just_one_location();%0A++++assert_eq!(fixed_location.file(),+second_fixed_location.file());%0A++++assert_eq!(fixed_location.line(),+second_fixed_location.line());%0A++++assert_eq!(fixed_location.column(),+second_fixed_location.column());%0A++++%0A++++let+this_location+=+get_caller_location();%0A++++assert_eq!(this_location.file(),+file!());%0A++++assert_eq!(this_location.line(),+28);%0A++++assert_eq!(this_location.column(),+21);%0A++++%0A++++//+running+the+tracked+function+in+a+different+location+produces+a+different+value%0A++++let+another_location+=+get_caller_location();%0A++++assert_eq!(this_location.file(),+another_location.file());%0A++++assert_ne!(this_location.line(),+another_location.line());%0A++++assert_ne!(this_location.column(),+another_location.column());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.file\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0, const since 1.79.0\">1.10.0 (const: 1.79.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/panic/location.rs.html#128\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.file\" class=\"fn\">file</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"../primitive.str.html\">str</a></h4></section></summary><div class=\"docblock\"><p>Returns the name of the source file from which the panic originated.</p>\n<h5 id=\"str-not-path\"><a class=\"doc-anchor\" href=\"#str-not-path\">§</a><code>&amp;str</code>, not <code>&amp;Path</code></h5>\n<p>The returned name refers to a source path on the compiling system, but it isn’t valid to\nrepresent this directly as a <code>&amp;Path</code>. The compiled code may run on a different system with\na different <code>Path</code> implementation than the system providing the contents and this library\ndoes not currently have a different “host path” type.</p>\n<p>The most surprising behavior occurs when “the same” file is reachable via multiple paths in\nthe module system (usually using the <code>#[path = \"...\"]</code> attribute or similar), which can\ncause what appears to be identical code to return differing values from this function.</p>\n<h5 id=\"cross-compilation\"><a class=\"doc-anchor\" href=\"#cross-compilation\">§</a>Cross-compilation</h5>\n<p>This value is not suitable for passing to <code>Path::new</code> or similar constructors when the host\nplatform and target platform differ.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::panic;\n\npanic::set_hook(Box::new(|panic_info| {\n    <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(location) = panic_info.location() {\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"panic occurred in file '{}'\"</span>, location.file());\n    } <span class=\"kw\">else </span>{\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"panic occurred but can't get location information...\"</span>);\n    }\n}));\n\n<span class=\"macro\">panic!</span>(<span class=\"string\">\"Normal panic\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::panic;%0A++++%0A++++panic::set_hook(Box::new(%7Cpanic_info%7C+%7B%0A++++++++if+let+Some(location)+=+panic_info.location()+%7B%0A++++++++++++println!(%22panic+occurred+in+file+'%7B%7D'%22,+location.file());%0A++++++++%7D+else+%7B%0A++++++++++++println!(%22panic+occurred+but+can't+get+location+information...%22);%0A++++++++%7D%0A++++%7D));%0A++++%0A++++panic!(%22Normal+panic%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.line\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0, const since 1.79.0\">1.10.0 (const: 1.79.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/panic/location.rs.html#153\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.line\" class=\"fn\">line</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the line number from which the panic originated.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::panic;\n\npanic::set_hook(Box::new(|panic_info| {\n    <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(location) = panic_info.location() {\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"panic occurred at line {}\"</span>, location.line());\n    } <span class=\"kw\">else </span>{\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"panic occurred but can't get location information...\"</span>);\n    }\n}));\n\n<span class=\"macro\">panic!</span>(<span class=\"string\">\"Normal panic\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::panic;%0A++++%0A++++panic::set_hook(Box::new(%7Cpanic_info%7C+%7B%0A++++++++if+let+Some(location)+=+panic_info.location()+%7B%0A++++++++++++println!(%22panic+occurred+at+line+%7B%7D%22,+location.line());%0A++++++++%7D+else+%7B%0A++++++++++++println!(%22panic+occurred+but+can't+get+location+information...%22);%0A++++++++%7D%0A++++%7D));%0A++++%0A++++panic!(%22Normal+panic%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.column\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.25.0, const since 1.79.0\">1.25.0 (const: 1.79.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/panic/location.rs.html#178\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.column\" class=\"fn\">column</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the column from which the panic originated.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::panic;\n\npanic::set_hook(Box::new(|panic_info| {\n    <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(location) = panic_info.location() {\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"panic occurred at column {}\"</span>, location.column());\n    } <span class=\"kw\">else </span>{\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"panic occurred but can't get location information...\"</span>);\n    }\n}));\n\n<span class=\"macro\">panic!</span>(<span class=\"string\">\"Normal panic\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::panic;%0A++++%0A++++panic::set_hook(Box::new(%7Cpanic_info%7C+%7B%0A++++++++if+let+Some(location)+=+panic_info.location()+%7B%0A++++++++++++println!(%22panic+occurred+at+column+%7B%7D%22,+location.column());%0A++++++++%7D+else+%7B%0A++++++++++++println!(%22panic+occurred+but+can't+get+location+information...%22);%0A++++++++%7D%0A++++%7D));%0A++++%0A++++panic!(%22Normal+panic%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details></div><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">§</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Clone-for-Location%3C'a%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/panic/location.rs.html#31\">source</a></span><a href=\"#impl-Clone-for-Location%3C'a%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"struct.Location.html\" title=\"struct std::panic::Location\">Location</a>&lt;'a&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/panic/location.rs.html#31\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"struct.Location.html\" title=\"struct std::panic::Location\">Location</a>&lt;'a&gt;</h4></section></summary><div class=\"docblock\">Returns a copy of the value. <a href=\"../clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class=\"docblock\">Performs copy-assignment from <code>source</code>. <a href=\"../clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-Location%3C'a%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/panic/location.rs.html#31\">source</a></span><a href=\"#impl-Debug-for-Location%3C'a%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"struct.Location.html\" title=\"struct std::panic::Location\">Location</a>&lt;'a&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/panic/location.rs.html#31\">source</a><a href=\"#method.fmt-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"../fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Display-for-Location%3C'_%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.26.0\">1.26.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/panic/location.rs.html#196\">source</a></span><a href=\"#impl-Display-for-Location%3C'_%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../fmt/trait.Display.html\" title=\"trait std::fmt::Display\">Display</a> for <a class=\"struct\" href=\"struct.Location.html\" title=\"struct std::panic::Location\">Location</a>&lt;'_&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/panic/location.rs.html#197\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../fmt/trait.Display.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, formatter: &amp;mut <a class=\"struct\" href=\"../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"../fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../fmt/trait.Display.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Hash-for-Location%3C'a%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/panic/location.rs.html#31\">source</a></span><a href=\"#impl-Hash-for-Location%3C'a%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"struct.Location.html\" title=\"struct std::panic::Location\">Location</a>&lt;'a&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/panic/location.rs.html#31\">source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;__H&gt;(&amp;self, state: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut __H</a>)<div class=\"where\">where\n    __H: <a class=\"trait\" href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class=\"docblock\">Feeds this value into the given <a href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"../hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#238-240\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Feeds a slice of this type into the given <a href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"../hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Ord-for-Location%3C'a%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/panic/location.rs.html#31\">source</a></span><a href=\"#impl-Ord-for-Location%3C'a%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"struct.Location.html\" title=\"struct std::panic::Location\">Location</a>&lt;'a&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/panic/location.rs.html#31\">source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.Location.html\" title=\"struct std::panic::Location\">Location</a>&lt;'a&gt;) -&gt; <a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a></h4></section></summary><div class=\"docblock\">This method returns an <a href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"../cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#856-858\">source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Compares and returns the maximum of two values. <a href=\"../cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#877-879\">source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Compares and returns the minimum of two values. <a href=\"../cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#903-906\">source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>,</div></h4></section></summary><div class=\"docblock\">Restrict a value to a certain interval. <a href=\"../cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq-for-Location%3C'a%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/panic/location.rs.html#31\">source</a></span><a href=\"#impl-PartialEq-for-Location%3C'a%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"struct.Location.html\" title=\"struct std::panic::Location\">Location</a>&lt;'a&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/panic/location.rs.html#31\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.Location.html\" title=\"struct std::panic::Location\">Location</a>&lt;'a&gt;) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialOrd-for-Location%3C'a%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/panic/location.rs.html#31\">source</a></span><a href=\"#impl-PartialOrd-for-Location%3C'a%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a> for <a class=\"struct\" href=\"struct.Location.html\" title=\"struct std::panic::Location\">Location</a>&lt;'a&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/panic/location.rs.html#31\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.Location.html\" title=\"struct std::panic::Location\">Location</a>&lt;'a&gt;) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\">This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"../cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180\">source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"../cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198\">source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"../cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215\">source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"../cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233\">source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"../cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details><section id=\"impl-Copy-for-Location%3C'a%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/panic/location.rs.html#31\">source</a></span><a href=\"#impl-Copy-for-Location%3C'a%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"../marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a> for <a class=\"struct\" href=\"struct.Location.html\" title=\"struct std::panic::Location\">Location</a>&lt;'a&gt;</h3></section><section id=\"impl-Eq-for-Location%3C'a%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/panic/location.rs.html#31\">source</a></span><a href=\"#impl-Eq-for-Location%3C'a%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"struct.Location.html\" title=\"struct std::panic::Location\">Location</a>&lt;'a&gt;</h3></section><section id=\"impl-StructuralPartialEq-for-Location%3C'a%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/panic/location.rs.html#31\">source</a></span><a href=\"#impl-StructuralPartialEq-for-Location%3C'a%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"../marker/trait.StructuralPartialEq.html\" title=\"trait std::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"struct\" href=\"struct.Location.html\" title=\"struct std::panic::Location\">Location</a>&lt;'a&gt;</h3></section></div><h2 id=\"synthetic-implementations\" class=\"section-header\">Auto Trait Implementations<a href=\"#synthetic-implementations\" class=\"anchor\">§</a></h2><div id=\"synthetic-implementations-list\"><section id=\"impl-Freeze-for-Location%3C'a%3E\" class=\"impl\"><a href=\"#impl-Freeze-for-Location%3C'a%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"struct\" href=\"struct.Location.html\" title=\"struct std::panic::Location\">Location</a>&lt;'a&gt;</h3></section><section id=\"impl-RefUnwindSafe-for-Location%3C'a%3E\" class=\"impl\"><a href=\"#impl-RefUnwindSafe-for-Location%3C'a%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"struct\" href=\"struct.Location.html\" title=\"struct std::panic::Location\">Location</a>&lt;'a&gt;</h3></section><section id=\"impl-Send-for-Location%3C'a%3E\" class=\"impl\"><a href=\"#impl-Send-for-Location%3C'a%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"struct\" href=\"struct.Location.html\" title=\"struct std::panic::Location\">Location</a>&lt;'a&gt;</h3></section><section id=\"impl-Sync-for-Location%3C'a%3E\" class=\"impl\"><a href=\"#impl-Sync-for-Location%3C'a%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"struct.Location.html\" title=\"struct std::panic::Location\">Location</a>&lt;'a&gt;</h3></section><section id=\"impl-Unpin-for-Location%3C'a%3E\" class=\"impl\"><a href=\"#impl-Unpin-for-Location%3C'a%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"struct\" href=\"struct.Location.html\" title=\"struct std::panic::Location\">Location</a>&lt;'a&gt;</h3></section><section id=\"impl-UnwindSafe-for-Location%3C'a%3E\" class=\"impl\"><a href=\"#impl-UnwindSafe-for-Location%3C'a%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"struct.Location.html\" title=\"struct std::panic::Location\">Location</a>&lt;'a&gt;</h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">§</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Any-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a><a href=\"#impl-Any-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#141\">source</a><a href=\"#method.type_id\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../any/trait.Any.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\">Gets the <code>TypeId</code> of <code>self</code>. <a href=\"../any/trait.Any.html#tymethod.type_id\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Borrow%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208\">source</a><a href=\"#impl-Borrow%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#210\">source</a><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216\">source</a><a href=\"#impl-BorrowMut%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#217\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765\">source</a><a href=\"#impl-From%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the argument unchanged.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Into%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750\">source</a><a href=\"#impl-Into%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758\">source</a><a href=\"#method.into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; U</h4></section></summary><div class=\"docblock\"><p>Calls <code>U::from(self)</code>.</p>\n<p>That is, this conversion is whatever the implementation of\n<code><a href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for U</code> chooses to do.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-ToOwned-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85\">source</a><a href=\"#impl-ToOwned-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.ToOwned.html\" title=\"trait std::borrow::ToOwned\">ToOwned</a> for T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Owned\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Owned\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../borrow/trait.ToOwned.html#associatedtype.Owned\" class=\"associatedtype\">Owned</a> = T</h4></section></summary><div class=\"docblock\">The resulting type after obtaining ownership.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_owned\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88\">source</a><a href=\"#method.to_owned\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.ToOwned.html#tymethod.to_owned\" class=\"fn\">to_owned</a>(&amp;self) -&gt; T</h4></section></summary><div class=\"docblock\">Creates owned data from borrowed data, usually by cloning. <a href=\"../borrow/trait.ToOwned.html#tymethod.to_owned\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92\">source</a><a href=\"#method.clone_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.ToOwned.html#method.clone_into\" class=\"fn\">clone_into</a>(&amp;self, target: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>)</h4></section></summary><div class=\"docblock\">Uses borrowed data to replace owned data, usually by cloning. <a href=\"../borrow/trait.ToOwned.html#method.clone_into\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-ToString-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2552\">source</a><a href=\"#impl-ToString-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../string/trait.ToString.html\" title=\"trait std::string::ToString\">ToString</a> for T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../fmt/trait.Display.html\" title=\"trait std::fmt::Display\">Display</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_string\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2558\">source</a><a href=\"#method.to_string\" class=\"anchor\">§</a><h4 class=\"code-header\">default fn <a href=\"../string/trait.ToString.html#tymethod.to_string\" class=\"fn\">to_string</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../string/struct.String.html\" title=\"struct std::string::String\">String</a></h4></section></summary><div class=\"docblock\">Converts the given value to a <code>String</code>. <a href=\"../string/trait.ToString.html#tymethod.to_string\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryFrom%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807\">source</a><a href=\"#impl-TryFrom%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812\">source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: U) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, &lt;T as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryInto%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792\">source</a><a href=\"#impl-TryInto%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryInto.html\" title=\"trait std::convert::TryInto\">TryInto</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryInto.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797\">source</a><a href=\"#method.try_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryInto.html#tymethod.try_into\" class=\"fn\">try_into</a>(self) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;U, &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details></div></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:24:08.376Z"
}