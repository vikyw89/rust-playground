{
	"title": "Step in std::iter - Rust",
	"url": "https://doc.rust-lang.org/stable/std/iter/trait.Step.html",
	"markdown": "# Step in std::iter - Rust\n\n```\npub trait Step: Sized + Clone + PartialOrd {\n    // Required methods\n    fn steps_between(start: &Self, end: &Self) -> Option<usize>;\n    fn forward_checked(start: Self, count: usize) -> Option<Self>;\n    fn backward_checked(start: Self, count: usize) -> Option<Self>;\n\n    // Provided methods\n    fn forward(start: Self, count: usize) -> Self { ... }\n    unsafe fn forward_unchecked(start: Self, count: usize) -> Self { ... }\n    fn backward(start: Self, count: usize) -> Self { ... }\n    unsafe fn backward_unchecked(start: Self, count: usize) -> Self { ... }\n}\n```\n\nðŸ”¬This is a nightly-only experimental API. (`step_trait`Â [#42168](https://github.com/rust-lang/rust/issues/42168))\n\nExpand description\n\nObjects that have a notion of _successor_ and _predecessor_ operations.\n\nThe _successor_ operation moves towards values that compare greater. The _predecessor_ operation moves towards values that compare lesser.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#42)\n\nðŸ”¬This is a nightly-only experimental API. (`step_trait`Â [#42168](https://github.com/rust-lang/rust/issues/42168))\n\nReturns the number of _successor_ steps required to get from `start` to `end`.\n\nReturns `None` if the number of steps would overflow `usize` (or is infinite, or if `end` would never be reached).\n\n##### [Â§](#invariants)Invariants\n\nFor any `a`, `b`, and `n`:\n\n-   `steps_between(&a, &b) == Some(n)` if and only if `Step::forward_checked(&a, n) == Some(b)`\n-   `steps_between(&a, &b) == Some(n)` if and only if `Step::backward_checked(&b, n) == Some(a)`\n-   `steps_between(&a, &b) == Some(n)` only if `a <= b`\n    -   Corollary: `steps_between(&a, &b) == Some(0)` if and only if `a == b`\n    -   Note that `a <= b` does _not_ imply `steps_between(&a, &b) != None`; this is the case when it would require more than `usize::MAX` steps to get to `b`\n-   `steps_between(&a, &b) == None` if `a > b`\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#60)\n\nðŸ”¬This is a nightly-only experimental API. (`step_trait`Â [#42168](https://github.com/rust-lang/rust/issues/42168))\n\nReturns the value that would be obtained by taking the _successor_ of `self` `count` times.\n\nIf this would overflow the range of values supported by `Self`, returns `None`.\n\n##### [Â§](#invariants-1)Invariants\n\nFor any `a`, `n`, and `m`:\n\n-   `Step::forward_checked(a, n).and_then(|x| Step::forward_checked(x, m)) == Step::forward_checked(a, m).and_then(|x| Step::forward_checked(x, n))`\n-   `Step::forward_checked(a, n).and_then(|x| Step::forward_checked(x, m)) == try { Step::forward_checked(a, n.checked_add(m)) }`\n\nFor any `a` and `n`:\n\n-   `Step::forward_checked(a, n) == (0..n).try_fold(a, |x, _| Step::forward_checked(&x, 1))`\n    -   Corollary: `Step::forward_checked(a, 0) == Some(a)`\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#130)\n\nðŸ”¬This is a nightly-only experimental API. (`step_trait`Â [#42168](https://github.com/rust-lang/rust/issues/42168))\n\nReturns the value that would be obtained by taking the _predecessor_ of `self` `count` times.\n\nIf this would overflow the range of values supported by `Self`, returns `None`.\n\n##### [Â§](#invariants-2)Invariants\n\nFor any `a`, `n`, and `m`:\n\n-   `Step::backward_checked(a, n).and_then(|x| Step::backward_checked(x, m)) == n.checked_add(m).and_then(|x| Step::backward_checked(a, x))`\n-   `Step::backward_checked(a, n).and_then(|x| Step::backward_checked(x, m)) == try { Step::backward_checked(a, n.checked_add(m)?) }`\n\nFor any `a` and `n`:\n\n-   `Step::backward_checked(a, n) == (0..n).try_fold(a, |x, _| Step::backward_checked(x, 1))`\n    -   Corollary: `Step::backward_checked(a, 0) == Some(a)`\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#85)\n\nðŸ”¬This is a nightly-only experimental API. (`step_trait`Â [#42168](https://github.com/rust-lang/rust/issues/42168))\n\nReturns the value that would be obtained by taking the _successor_ of `self` `count` times.\n\nIf this would overflow the range of values supported by `Self`, this function is allowed to panic, wrap, or saturate. The suggested behavior is to panic when debug assertions are enabled, and to wrap or saturate otherwise.\n\nUnsafe code should not rely on the correctness of behavior after overflow.\n\n##### [Â§](#invariants-3)Invariants\n\nFor any `a`, `n`, and `m`, where no overflow occurs:\n\n-   `Step::forward(Step::forward(a, n), m) == Step::forward(a, n + m)`\n\nFor any `a` and `n`, where no overflow occurs:\n\n-   `Step::forward_checked(a, n) == Some(Step::forward(a, n))`\n-   `Step::forward(a, n) == (0..n).fold(a, |x, _| Step::forward(x, 1))`\n    -   Corollary: `Step::forward(a, 0) == a`\n-   `Step::forward(a, n) >= a`\n-   `Step::backward(Step::forward(a, n), n) == a`\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#110)\n\nðŸ”¬This is a nightly-only experimental API. (`step_trait`Â [#42168](https://github.com/rust-lang/rust/issues/42168))\n\nReturns the value that would be obtained by taking the _successor_ of `self` `count` times.\n\n##### [Â§](#safety)Safety\n\nIt is undefined behavior for this operation to overflow the range of values supported by `Self`. If you cannot guarantee that this will not overflow, use `forward` or `forward_checked` instead.\n\n##### [Â§](#invariants-4)Invariants\n\nFor any `a`:\n\n-   if there exists `b` such that `b > a`, it is safe to call `Step::forward_unchecked(a, 1)`\n-   if there exists `b`, `n` such that `steps_between(&a, &b) == Some(n)`, it is safe to call `Step::forward_unchecked(a, m)` for any `m <= n`.\n    -   Corollary: `Step::forward_unchecked(a, 0)` is always safe.\n\nFor any `a` and `n`, where no overflow occurs:\n\n-   `Step::forward_unchecked(a, n)` is equivalent to `Step::forward(a, n)`\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#155)\n\nðŸ”¬This is a nightly-only experimental API. (`step_trait`Â [#42168](https://github.com/rust-lang/rust/issues/42168))\n\nReturns the value that would be obtained by taking the _predecessor_ of `self` `count` times.\n\nIf this would overflow the range of values supported by `Self`, this function is allowed to panic, wrap, or saturate. The suggested behavior is to panic when debug assertions are enabled, and to wrap or saturate otherwise.\n\nUnsafe code should not rely on the correctness of behavior after overflow.\n\n##### [Â§](#invariants-5)Invariants\n\nFor any `a`, `n`, and `m`, where no overflow occurs:\n\n-   `Step::backward(Step::backward(a, n), m) == Step::backward(a, n + m)`\n\nFor any `a` and `n`, where no overflow occurs:\n\n-   `Step::backward_checked(a, n) == Some(Step::backward(a, n))`\n-   `Step::backward(a, n) == (0..n).fold(a, |x, _| Step::backward(x, 1))`\n    -   Corollary: `Step::backward(a, 0) == a`\n-   `Step::backward(a, n) <= a`\n-   `Step::forward(Step::backward(a, n), n) == a`\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#180)\n\nðŸ”¬This is a nightly-only experimental API. (`step_trait`Â [#42168](https://github.com/rust-lang/rust/issues/42168))\n\nReturns the value that would be obtained by taking the _predecessor_ of `self` `count` times.\n\n##### [Â§](#safety-1)Safety\n\nIt is undefined behavior for this operation to overflow the range of values supported by `Self`. If you cannot guarantee that this will not overflow, use `backward` or `backward_checked` instead.\n\n##### [Â§](#invariants-6)Invariants\n\nFor any `a`:\n\n-   if there exists `b` such that `b < a`, it is safe to call `Step::backward_unchecked(a, 1)`\n-   if there exists `b`, `n` such that `steps_between(&b, &a) == Some(n)`, it is safe to call `Step::backward_unchecked(a, m)` for any `m <= n`.\n    -   Corollary: `Step::backward_unchecked(a, 0)` is always safe.\n\nFor any `a` and `n`, where no overflow occurs:\n\n-   `Step::backward_unchecked(a, n)` is equivalent to `Step::backward(a, n)`\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#514)[Â§](#impl-Step-for-Char)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#435)[Â§](#impl-Step-for-char)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#417-420)[Â§](#impl-Step-for-i8)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#417-420)[Â§](#impl-Step-for-i16)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#417-420)[Â§](#impl-Step-for-i32)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#417-420)[Â§](#impl-Step-for-i64)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#417-420)[Â§](#impl-Step-for-i128)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#417-420)[Â§](#impl-Step-for-isize)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#417-420)[Â§](#impl-Step-for-u8)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#417-420)[Â§](#impl-Step-for-u16)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#417-420)[Â§](#impl-Step-for-u32)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#417-420)[Â§](#impl-Step-for-u64)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#417-420)[Â§](#impl-Step-for-u128)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#417-420)[Â§](#impl-Step-for-usize)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#556)[Â§](#impl-Step-for-Ipv4Addr)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#588)[Â§](#impl-Step-for-Ipv6Addr)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Objects that have a notion of successor and predecessor operations.\"><title>Step in std::iter - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc trait\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">Step</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">Step</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#required-methods\">Required Methods</a></h3><ul class=\"block\"><li><a href=\"#tymethod.backward_checked\">backward_checked</a></li><li><a href=\"#tymethod.forward_checked\">forward_checked</a></li><li><a href=\"#tymethod.steps_between\">steps_between</a></li></ul><h3><a href=\"#provided-methods\">Provided Methods</a></h3><ul class=\"block\"><li><a href=\"#method.backward\">backward</a></li><li><a href=\"#method.backward_unchecked\">backward_unchecked</a></li><li><a href=\"#method.forward\">forward</a></li><li><a href=\"#method.forward_unchecked\">forward_unchecked</a></li></ul><h3><a href=\"#object-safety\">Object Safety</a></h3><h3><a href=\"#implementors\">Implementors</a></h3></section><h2><a href=\"index.html\">In std::iter</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.ArrayChunks.html\">ArrayChunks</a></li><li><a href=\"struct.ByRefSized.html\">ByRefSized</a></li><li><a href=\"struct.Chain.html\">Chain</a></li><li><a href=\"struct.Cloned.html\">Cloned</a></li><li><a href=\"struct.Copied.html\">Copied</a></li><li><a href=\"struct.Cycle.html\">Cycle</a></li><li><a href=\"struct.Empty.html\">Empty</a></li><li><a href=\"struct.Enumerate.html\">Enumerate</a></li><li><a href=\"struct.Filter.html\">Filter</a></li><li><a href=\"struct.FilterMap.html\">FilterMap</a></li><li><a href=\"struct.FlatMap.html\">FlatMap</a></li><li><a href=\"struct.Flatten.html\">Flatten</a></li><li><a href=\"struct.FromFn.html\">FromFn</a></li><li><a href=\"struct.Fuse.html\">Fuse</a></li><li><a href=\"struct.Inspect.html\">Inspect</a></li><li><a href=\"struct.Intersperse.html\">Intersperse</a></li><li><a href=\"struct.IntersperseWith.html\">IntersperseWith</a></li><li><a href=\"struct.Map.html\">Map</a></li><li><a href=\"struct.MapWhile.html\">MapWhile</a></li><li><a href=\"struct.MapWindows.html\">MapWindows</a></li><li><a href=\"struct.Once.html\">Once</a></li><li><a href=\"struct.OnceWith.html\">OnceWith</a></li><li><a href=\"struct.Peekable.html\">Peekable</a></li><li><a href=\"struct.Repeat.html\">Repeat</a></li><li><a href=\"struct.RepeatN.html\">RepeatN</a></li><li><a href=\"struct.RepeatWith.html\">RepeatWith</a></li><li><a href=\"struct.Rev.html\">Rev</a></li><li><a href=\"struct.Scan.html\">Scan</a></li><li><a href=\"struct.Skip.html\">Skip</a></li><li><a href=\"struct.SkipWhile.html\">SkipWhile</a></li><li><a href=\"struct.StepBy.html\">StepBy</a></li><li><a href=\"struct.Successors.html\">Successors</a></li><li><a href=\"struct.Take.html\">Take</a></li><li><a href=\"struct.TakeWhile.html\">TakeWhile</a></li><li><a href=\"struct.Zip.html\">Zip</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.DoubleEndedIterator.html\">DoubleEndedIterator</a></li><li><a href=\"trait.ExactSizeIterator.html\">ExactSizeIterator</a></li><li><a href=\"trait.Extend.html\">Extend</a></li><li><a href=\"trait.FromIterator.html\">FromIterator</a></li><li><a href=\"trait.FusedIterator.html\">FusedIterator</a></li><li><a href=\"trait.IntoIterator.html\">IntoIterator</a></li><li><a href=\"trait.Iterator.html\">Iterator</a></li><li><a href=\"trait.Product.html\">Product</a></li><li><a href=\"trait.Step.html\">Step</a></li><li><a href=\"trait.Sum.html\">Sum</a></li><li><a href=\"trait.TrustedLen.html\">TrustedLen</a></li><li><a href=\"trait.TrustedStep.html\">TrustedStep</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.chain.html\">chain</a></li><li><a href=\"fn.empty.html\">empty</a></li><li><a href=\"fn.from_coroutine.html\">from_coroutine</a></li><li><a href=\"fn.from_fn.html\">from_fn</a></li><li><a href=\"fn.once.html\">once</a></li><li><a href=\"fn.once_with.html\">once_with</a></li><li><a href=\"fn.repeat.html\">repeat</a></li><li><a href=\"fn.repeat_n.html\">repeat_n</a></li><li><a href=\"fn.repeat_with.html\">repeat_with</a></li><li><a href=\"fn.successors.html\">successors</a></li><li><a href=\"fn.zip.html\">zip</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type â€˜Sâ€™ or â€˜/â€™ to search, â€˜?â€™ for more optionsâ€¦\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Trait <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">iter</a>::<wbr><a class=\"trait\" href=\"#\">Step</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#25\">source</a> Â· <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>âˆ’</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub trait Step: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a> {\n    // Required methods\n    fn <a href=\"#tymethod.steps_between\" class=\"fn\">steps_between</a>(start: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Self</a>, end: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Self</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.forward_checked\" class=\"fn\">forward_checked</a>(start: Self, count: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;Self&gt;;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.backward_checked\" class=\"fn\">backward_checked</a>(start: Self, count: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;Self&gt;;\n\n    // Provided methods\n    fn <a href=\"#method.forward\" class=\"fn\">forward</a>(start: Self, count: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; Self { ... }\n<span class=\"item-spacer\"></span>    unsafe fn <a href=\"#method.forward_unchecked\" class=\"fn\">forward_unchecked</a>(start: Self, count: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; Self { ... }\n<span class=\"item-spacer\"></span>    fn <a href=\"#method.backward\" class=\"fn\">backward</a>(start: Self, count: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; Self { ... }\n<span class=\"item-spacer\"></span>    unsafe fn <a href=\"#method.backward_unchecked\" class=\"fn\">backward_unchecked</a>(start: Self, count: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; Self { ... }\n}</code></pre><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Objects that have a notion of <em>successor</em> and <em>predecessor</em> operations.</p>\n<p>The <em>successor</em> operation moves towards values that compare greater.\nThe <em>predecessor</em> operation moves towards values that compare lesser.</p>\n</div></details><h2 id=\"required-methods\" class=\"section-header\">Required Methods<a href=\"#required-methods\" class=\"anchor\">Â§</a></h2><div class=\"methods\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.steps_between\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#42\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.steps_between\" class=\"fn\">steps_between</a>(start: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Self</a>, end: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Self</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the number of <em>successor</em> steps required to get from <code>start</code> to <code>end</code>.</p>\n<p>Returns <code>None</code> if the number of steps would overflow <code>usize</code>\n(or is infinite, or if <code>end</code> would never be reached).</p>\n<h5 id=\"invariants\"><a class=\"doc-anchor\" href=\"#invariants\">Â§</a>Invariants</h5>\n<p>For any <code>a</code>, <code>b</code>, and <code>n</code>:</p>\n<ul>\n<li><code>steps_between(&amp;a, &amp;b) == Some(n)</code> if and only if <code>Step::forward_checked(&amp;a, n) == Some(b)</code></li>\n<li><code>steps_between(&amp;a, &amp;b) == Some(n)</code> if and only if <code>Step::backward_checked(&amp;b, n) == Some(a)</code></li>\n<li><code>steps_between(&amp;a, &amp;b) == Some(n)</code> only if <code>a &lt;= b</code>\n<ul>\n<li>Corollary: <code>steps_between(&amp;a, &amp;b) == Some(0)</code> if and only if <code>a == b</code></li>\n<li>Note that <code>a &lt;= b</code> does <em>not</em> imply <code>steps_between(&amp;a, &amp;b) != None</code>;\nthis is the case when it would require more than <code>usize::MAX</code> steps to get to <code>b</code></li>\n</ul>\n</li>\n<li><code>steps_between(&amp;a, &amp;b) == None</code> if <code>a &gt; b</code></li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.forward_checked\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#60\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.forward_checked\" class=\"fn\">forward_checked</a>(start: Self, count: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;Self&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the value that would be obtained by taking the <em>successor</em>\nof <code>self</code> <code>count</code> times.</p>\n<p>If this would overflow the range of values supported by <code>Self</code>, returns <code>None</code>.</p>\n<h5 id=\"invariants-1\"><a class=\"doc-anchor\" href=\"#invariants-1\">Â§</a>Invariants</h5>\n<p>For any <code>a</code>, <code>n</code>, and <code>m</code>:</p>\n<ul>\n<li><code>Step::forward_checked(a, n).and_then(|x| Step::forward_checked(x, m)) == Step::forward_checked(a, m).and_then(|x| Step::forward_checked(x, n))</code></li>\n<li><code>Step::forward_checked(a, n).and_then(|x| Step::forward_checked(x, m)) == try { Step::forward_checked(a, n.checked_add(m)) }</code></li>\n</ul>\n<p>For any <code>a</code> and <code>n</code>:</p>\n<ul>\n<li><code>Step::forward_checked(a, n) == (0..n).try_fold(a, |x, _| Step::forward_checked(&amp;x, 1))</code>\n<ul>\n<li>Corollary: <code>Step::forward_checked(a, 0) == Some(a)</code></li>\n</ul>\n</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.backward_checked\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#130\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.backward_checked\" class=\"fn\">backward_checked</a>(start: Self, count: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;Self&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the value that would be obtained by taking the <em>predecessor</em>\nof <code>self</code> <code>count</code> times.</p>\n<p>If this would overflow the range of values supported by <code>Self</code>, returns <code>None</code>.</p>\n<h5 id=\"invariants-2\"><a class=\"doc-anchor\" href=\"#invariants-2\">Â§</a>Invariants</h5>\n<p>For any <code>a</code>, <code>n</code>, and <code>m</code>:</p>\n<ul>\n<li><code>Step::backward_checked(a, n).and_then(|x| Step::backward_checked(x, m)) == n.checked_add(m).and_then(|x| Step::backward_checked(a, x))</code></li>\n<li><code>Step::backward_checked(a, n).and_then(|x| Step::backward_checked(x, m)) == try { Step::backward_checked(a, n.checked_add(m)?) }</code></li>\n</ul>\n<p>For any <code>a</code> and <code>n</code>:</p>\n<ul>\n<li><code>Step::backward_checked(a, n) == (0..n).try_fold(a, |x, _| Step::backward_checked(x, 1))</code>\n<ul>\n<li>Corollary: <code>Step::backward_checked(a, 0) == Some(a)</code></li>\n</ul>\n</li>\n</ul>\n</div></details></div><h2 id=\"provided-methods\" class=\"section-header\">Provided Methods<a href=\"#provided-methods\" class=\"anchor\">Â§</a></h2><div class=\"methods\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.forward\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#85\">source</a><h4 class=\"code-header\">fn <a href=\"#method.forward\" class=\"fn\">forward</a>(start: Self, count: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the value that would be obtained by taking the <em>successor</em>\nof <code>self</code> <code>count</code> times.</p>\n<p>If this would overflow the range of values supported by <code>Self</code>,\nthis function is allowed to panic, wrap, or saturate.\nThe suggested behavior is to panic when debug assertions are enabled,\nand to wrap or saturate otherwise.</p>\n<p>Unsafe code should not rely on the correctness of behavior after overflow.</p>\n<h5 id=\"invariants-3\"><a class=\"doc-anchor\" href=\"#invariants-3\">Â§</a>Invariants</h5>\n<p>For any <code>a</code>, <code>n</code>, and <code>m</code>, where no overflow occurs:</p>\n<ul>\n<li><code>Step::forward(Step::forward(a, n), m) == Step::forward(a, n + m)</code></li>\n</ul>\n<p>For any <code>a</code> and <code>n</code>, where no overflow occurs:</p>\n<ul>\n<li><code>Step::forward_checked(a, n) == Some(Step::forward(a, n))</code></li>\n<li><code>Step::forward(a, n) == (0..n).fold(a, |x, _| Step::forward(x, 1))</code>\n<ul>\n<li>Corollary: <code>Step::forward(a, 0) == a</code></li>\n</ul>\n</li>\n<li><code>Step::forward(a, n) &gt;= a</code></li>\n<li><code>Step::backward(Step::forward(a, n), n) == a</code></li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.forward_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#110\">source</a><h4 class=\"code-header\">unsafe fn <a href=\"#method.forward_unchecked\" class=\"fn\">forward_unchecked</a>(start: Self, count: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the value that would be obtained by taking the <em>successor</em>\nof <code>self</code> <code>count</code> times.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">Â§</a>Safety</h5>\n<p>It is undefined behavior for this operation to overflow the\nrange of values supported by <code>Self</code>. If you cannot guarantee that this\nwill not overflow, use <code>forward</code> or <code>forward_checked</code> instead.</p>\n<h5 id=\"invariants-4\"><a class=\"doc-anchor\" href=\"#invariants-4\">Â§</a>Invariants</h5>\n<p>For any <code>a</code>:</p>\n<ul>\n<li>if there exists <code>b</code> such that <code>b &gt; a</code>, it is safe to call <code>Step::forward_unchecked(a, 1)</code></li>\n<li>if there exists <code>b</code>, <code>n</code> such that <code>steps_between(&amp;a, &amp;b) == Some(n)</code>,\nit is safe to call <code>Step::forward_unchecked(a, m)</code> for any <code>m &lt;= n</code>.\n<ul>\n<li>Corollary: <code>Step::forward_unchecked(a, 0)</code> is always safe.</li>\n</ul>\n</li>\n</ul>\n<p>For any <code>a</code> and <code>n</code>, where no overflow occurs:</p>\n<ul>\n<li><code>Step::forward_unchecked(a, n)</code> is equivalent to <code>Step::forward(a, n)</code></li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.backward\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#155\">source</a><h4 class=\"code-header\">fn <a href=\"#method.backward\" class=\"fn\">backward</a>(start: Self, count: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the value that would be obtained by taking the <em>predecessor</em>\nof <code>self</code> <code>count</code> times.</p>\n<p>If this would overflow the range of values supported by <code>Self</code>,\nthis function is allowed to panic, wrap, or saturate.\nThe suggested behavior is to panic when debug assertions are enabled,\nand to wrap or saturate otherwise.</p>\n<p>Unsafe code should not rely on the correctness of behavior after overflow.</p>\n<h5 id=\"invariants-5\"><a class=\"doc-anchor\" href=\"#invariants-5\">Â§</a>Invariants</h5>\n<p>For any <code>a</code>, <code>n</code>, and <code>m</code>, where no overflow occurs:</p>\n<ul>\n<li><code>Step::backward(Step::backward(a, n), m) == Step::backward(a, n + m)</code></li>\n</ul>\n<p>For any <code>a</code> and <code>n</code>, where no overflow occurs:</p>\n<ul>\n<li><code>Step::backward_checked(a, n) == Some(Step::backward(a, n))</code></li>\n<li><code>Step::backward(a, n) == (0..n).fold(a, |x, _| Step::backward(x, 1))</code>\n<ul>\n<li>Corollary: <code>Step::backward(a, 0) == a</code></li>\n</ul>\n</li>\n<li><code>Step::backward(a, n) &lt;= a</code></li>\n<li><code>Step::forward(Step::backward(a, n), n) == a</code></li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.backward_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#180\">source</a><h4 class=\"code-header\">unsafe fn <a href=\"#method.backward_unchecked\" class=\"fn\">backward_unchecked</a>(start: Self, count: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the value that would be obtained by taking the <em>predecessor</em>\nof <code>self</code> <code>count</code> times.</p>\n<h5 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">Â§</a>Safety</h5>\n<p>It is undefined behavior for this operation to overflow the\nrange of values supported by <code>Self</code>. If you cannot guarantee that this\nwill not overflow, use <code>backward</code> or <code>backward_checked</code> instead.</p>\n<h5 id=\"invariants-6\"><a class=\"doc-anchor\" href=\"#invariants-6\">Â§</a>Invariants</h5>\n<p>For any <code>a</code>:</p>\n<ul>\n<li>if there exists <code>b</code> such that <code>b &lt; a</code>, it is safe to call <code>Step::backward_unchecked(a, 1)</code></li>\n<li>if there exists <code>b</code>, <code>n</code> such that <code>steps_between(&amp;b, &amp;a) == Some(n)</code>,\nit is safe to call <code>Step::backward_unchecked(a, m)</code> for any <code>m &lt;= n</code>.\n<ul>\n<li>Corollary: <code>Step::backward_unchecked(a, 0)</code> is always safe.</li>\n</ul>\n</li>\n</ul>\n<p>For any <code>a</code> and <code>n</code>, where no overflow occurs:</p>\n<ul>\n<li><code>Step::backward_unchecked(a, n)</code> is equivalent to <code>Step::backward(a, n)</code></li>\n</ul>\n</div></details></div><h2 id=\"object-safety\" class=\"section-header\">Object Safety<a href=\"#object-safety\" class=\"anchor\">Â§</a></h2><div class=\"object-safety-info\">This trait is <b>not</b> <a href=\"https://doc.rust-lang.org/1.80.0/reference/items/traits.html#object-safety\">object safe</a>.</div><h2 id=\"implementors\" class=\"section-header\">Implementors<a href=\"#implementors\" class=\"anchor\">Â§</a></h2><div id=\"implementors-list\"><section id=\"impl-Step-for-Char\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#514\">source</a><a href=\"#impl-Step-for-Char\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Step.html\" title=\"trait std::iter::Step\">Step</a> for <a class=\"enum\" href=\"../ascii/enum.Char.html\" title=\"enum std::ascii::Char\">AsciiChar</a></h3></section><section id=\"impl-Step-for-char\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#435\">source</a><a href=\"#impl-Step-for-char\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Step.html\" title=\"trait std::iter::Step\">Step</a> for <a class=\"primitive\" href=\"../primitive.char.html\">char</a></h3></section><section id=\"impl-Step-for-i8\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#417-420\">source</a><a href=\"#impl-Step-for-i8\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Step.html\" title=\"trait std::iter::Step\">Step</a> for <a class=\"primitive\" href=\"../primitive.i8.html\">i8</a></h3></section><section id=\"impl-Step-for-i16\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#417-420\">source</a><a href=\"#impl-Step-for-i16\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Step.html\" title=\"trait std::iter::Step\">Step</a> for <a class=\"primitive\" href=\"../primitive.i16.html\">i16</a></h3></section><section id=\"impl-Step-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#417-420\">source</a><a href=\"#impl-Step-for-i32\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Step.html\" title=\"trait std::iter::Step\">Step</a> for <a class=\"primitive\" href=\"../primitive.i32.html\">i32</a></h3></section><section id=\"impl-Step-for-i64\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#417-420\">source</a><a href=\"#impl-Step-for-i64\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Step.html\" title=\"trait std::iter::Step\">Step</a> for <a class=\"primitive\" href=\"../primitive.i64.html\">i64</a></h3></section><section id=\"impl-Step-for-i128\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#417-420\">source</a><a href=\"#impl-Step-for-i128\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Step.html\" title=\"trait std::iter::Step\">Step</a> for <a class=\"primitive\" href=\"../primitive.i128.html\">i128</a></h3></section><section id=\"impl-Step-for-isize\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#417-420\">source</a><a href=\"#impl-Step-for-isize\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Step.html\" title=\"trait std::iter::Step\">Step</a> for <a class=\"primitive\" href=\"../primitive.isize.html\">isize</a></h3></section><section id=\"impl-Step-for-u8\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#417-420\">source</a><a href=\"#impl-Step-for-u8\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Step.html\" title=\"trait std::iter::Step\">Step</a> for <a class=\"primitive\" href=\"../primitive.u8.html\">u8</a></h3></section><section id=\"impl-Step-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#417-420\">source</a><a href=\"#impl-Step-for-u16\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Step.html\" title=\"trait std::iter::Step\">Step</a> for <a class=\"primitive\" href=\"../primitive.u16.html\">u16</a></h3></section><section id=\"impl-Step-for-u32\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#417-420\">source</a><a href=\"#impl-Step-for-u32\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Step.html\" title=\"trait std::iter::Step\">Step</a> for <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a></h3></section><section id=\"impl-Step-for-u64\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#417-420\">source</a><a href=\"#impl-Step-for-u64\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Step.html\" title=\"trait std::iter::Step\">Step</a> for <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a></h3></section><section id=\"impl-Step-for-u128\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#417-420\">source</a><a href=\"#impl-Step-for-u128\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Step.html\" title=\"trait std::iter::Step\">Step</a> for <a class=\"primitive\" href=\"../primitive.u128.html\">u128</a></h3></section><section id=\"impl-Step-for-usize\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#417-420\">source</a><a href=\"#impl-Step-for-usize\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Step.html\" title=\"trait std::iter::Step\">Step</a> for <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a></h3></section><section id=\"impl-Step-for-Ipv4Addr\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#556\">source</a><a href=\"#impl-Step-for-Ipv4Addr\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Step.html\" title=\"trait std::iter::Step\">Step</a> for <a class=\"struct\" href=\"../net/struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a></h3></section><section id=\"impl-Step-for-Ipv6Addr\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#588\">source</a><a href=\"#impl-Step-for-Ipv6Addr\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Step.html\" title=\"trait std::iter::Step\">Step</a> for <a class=\"struct\" href=\"../net/struct.Ipv6Addr.html\" title=\"struct std::net::Ipv6Addr\">Ipv6Addr</a></h3></section></div><script src=\"../../trait.impl/core/iter/range/trait.Step.js\" data-ignore-extern-crates=\"core\" async=\"\"></script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:21:05.657Z"
}