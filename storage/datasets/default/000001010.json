{
	"title": "Condvar in std::sync - Rust",
	"url": "https://doc.rust-lang.org/stable/std/sync/struct.Condvar.html",
	"markdown": "# Condvar in std::sync - Rust\n\n## Struct [std](../index.html)::[sync](index.html)::[Condvar](#)\n\n1.0.0 · [source](about:blank/src/std/sync/condvar.rs.html#107-109) ·\n\n```\npub struct Condvar { /* private fields */ }\n```\n\nExpand description\n\nA Condition Variable\n\nCondition variables represent the ability to block a thread such that it consumes no CPU time while waiting for an event to occur. Condition variables are typically associated with a boolean predicate (a condition) and a mutex. The predicate is always verified inside of the mutex before determining that a thread must block.\n\nFunctions in this module will block the current **thread** of execution. Note that any attempt to use multiple mutexes on the same condition variable may result in a runtime panic.\n\n## [§](#examples)Examples\n\n```\nuse std::sync::{Arc, Mutex, Condvar};\nuse std::thread;\n\nlet pair = Arc::new((Mutex::new(false), Condvar::new()));\nlet pair2 = Arc::clone(&pair);\n\n// Inside of our lock, spawn a new thread, and then wait for it to start.\nthread::spawn(move|| {\n    let (lock, cvar) = &*pair2;\n    let mut started = lock.lock().unwrap();\n    *started = true;\n    // We notify the condvar that the value has changed.\n    cvar.notify_one();\n});\n\n// Wait for the thread to start up.\nlet (lock, cvar) = &*pair;\nlet mut started = lock.lock().unwrap();\nwhile !*started {\n    started = cvar.wait(started).unwrap();\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::%7BArc,+Mutex,+Condvar%7D;%0A++++use+std::thread;%0A++++%0A++++let+pair+=+Arc::new((Mutex::new(false),+Condvar::new()));%0A++++let+pair2+=+Arc::clone(%26pair);%0A++++%0A++++//+Inside+of+our+lock,+spawn+a+new+thread,+and+then+wait+for+it+to+start.%0A++++thread::spawn(move%7C%7C+%7B%0A++++++++let+(lock,+cvar)+=+%26*pair2;%0A++++++++let+mut+started+=+lock.lock().unwrap();%0A++++++++*started+=+true;%0A++++++++//+We+notify+the+condvar+that+the+value+has+changed.%0A++++++++cvar.notify_one();%0A++++%7D);%0A++++%0A++++//+Wait+for+the+thread+to+start+up.%0A++++let+(lock,+cvar)+=+%26*pair;%0A++++let+mut+started+=+lock.lock().unwrap();%0A++++while+!*started+%7B%0A++++++++started+=+cvar.wait(started).unwrap();%0A++++%7D%0A%7D&edition=2021)\n\n[source](about:blank/src/std/sync/condvar.rs.html#111-547)[§](#impl-Condvar)\n\n1.0.0 (const: 1.63.0) · [source](about:blank/src/std/sync/condvar.rs.html#126-128)\n\nCreates a new condition variable which is ready to be waited on and notified.\n\n##### [§](#examples-1)Examples\n\n```\nuse std::sync::Condvar;\n\nlet condvar = Condvar::new();\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::Condvar;%0A++++%0A++++let+condvar+=+Condvar::new();%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/sync/condvar.rs.html#186-193)\n\nBlocks the current thread until this condition variable receives a notification.\n\nThis function will atomically unlock the mutex specified (represented by `guard`) and block the current thread. This means that any calls to [`notify_one`](about:blank/struct.Condvar.html#method.notify_one \"method std::sync::Condvar::notify_one\") or [`notify_all`](about:blank/struct.Condvar.html#method.notify_all \"method std::sync::Condvar::notify_all\") which happen logically after the mutex is unlocked are candidates to wake this thread up. When this function call returns, the lock specified will have been re-acquired.\n\nNote that this function is susceptible to spurious wakeups. Condition variables normally have a boolean predicate associated with them, and the predicate must always be checked each time this function returns to protect against spurious wakeups.\n\n##### [§](#errors)Errors\n\nThis function will return an error if the mutex being waited on is poisoned when this thread re-acquires the lock. For more information, see information about [poisoning](about:blank/struct.Mutex.html#poisoning \"struct std::sync::Mutex\") on the [`Mutex`](struct.Mutex.html \"struct std::sync::Mutex\") type.\n\n##### [§](#panics)Panics\n\nThis function may [`panic!`](../macro.panic.html \"macro std::panic\") if it is used with more than one mutex over time.\n\n##### [§](#examples-2)Examples\n\n```\nuse std::sync::{Arc, Mutex, Condvar};\nuse std::thread;\n\nlet pair = Arc::new((Mutex::new(false), Condvar::new()));\nlet pair2 = Arc::clone(&pair);\n\nthread::spawn(move|| {\n    let (lock, cvar) = &*pair2;\n    let mut started = lock.lock().unwrap();\n    *started = true;\n    // We notify the condvar that the value has changed.\n    cvar.notify_one();\n});\n\n// Wait for the thread to start up.\nlet (lock, cvar) = &*pair;\nlet mut started = lock.lock().unwrap();\n// As long as the value inside the `Mutex<bool>` is `false`, we wait.\nwhile !*started {\n    started = cvar.wait(started).unwrap();\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::%7BArc,+Mutex,+Condvar%7D;%0A++++use+std::thread;%0A++++%0A++++let+pair+=+Arc::new((Mutex::new(false),+Condvar::new()));%0A++++let+pair2+=+Arc::clone(%26pair);%0A++++%0A++++thread::spawn(move%7C%7C+%7B%0A++++++++let+(lock,+cvar)+=+%26*pair2;%0A++++++++let+mut+started+=+lock.lock().unwrap();%0A++++++++*started+=+true;%0A++++++++//+We+notify+the+condvar+that+the+value+has+changed.%0A++++++++cvar.notify_one();%0A++++%7D);%0A++++%0A++++//+Wait+for+the+thread+to+start+up.%0A++++let+(lock,+cvar)+=+%26*pair;%0A++++let+mut+started+=+lock.lock().unwrap();%0A++++//+As+long+as+the+value+inside+the+%60Mutex%3Cbool%3E%60+is+%60false%60,+we+wait.%0A++++while+!*started+%7B%0A++++++++started+=+cvar.wait(started).unwrap();%0A++++%7D%0A%7D&edition=2021)\n\n1.42.0 · [source](about:blank/src/std/sync/condvar.rs.html#238-250)\n\nBlocks the current thread until this condition variable receives a notification and the provided condition is false.\n\nThis function will atomically unlock the mutex specified (represented by `guard`) and block the current thread. This means that any calls to [`notify_one`](about:blank/struct.Condvar.html#method.notify_one \"method std::sync::Condvar::notify_one\") or [`notify_all`](about:blank/struct.Condvar.html#method.notify_all \"method std::sync::Condvar::notify_all\") which happen logically after the mutex is unlocked are candidates to wake this thread up. When this function call returns, the lock specified will have been re-acquired.\n\n##### [§](#errors-1)Errors\n\nThis function will return an error if the mutex being waited on is poisoned when this thread re-acquires the lock. For more information, see information about [poisoning](about:blank/struct.Mutex.html#poisoning \"struct std::sync::Mutex\") on the [`Mutex`](struct.Mutex.html \"struct std::sync::Mutex\") type.\n\n##### [§](#examples-3)Examples\n\n```\nuse std::sync::{Arc, Mutex, Condvar};\nuse std::thread;\n\nlet pair = Arc::new((Mutex::new(true), Condvar::new()));\nlet pair2 = Arc::clone(&pair);\n\nthread::spawn(move|| {\n    let (lock, cvar) = &*pair2;\n    let mut pending = lock.lock().unwrap();\n    *pending = false;\n    // We notify the condvar that the value has changed.\n    cvar.notify_one();\n});\n\n// Wait for the thread to start up.\nlet (lock, cvar) = &*pair;\n// As long as the value inside the `Mutex<bool>` is `true`, we wait.\nlet _guard = cvar.wait_while(lock.lock().unwrap(), |pending| { *pending }).unwrap();\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::%7BArc,+Mutex,+Condvar%7D;%0A++++use+std::thread;%0A++++%0A++++let+pair+=+Arc::new((Mutex::new(true),+Condvar::new()));%0A++++let+pair2+=+Arc::clone(%26pair);%0A++++%0A++++thread::spawn(move%7C%7C+%7B%0A++++++++let+(lock,+cvar)+=+%26*pair2;%0A++++++++let+mut+pending+=+lock.lock().unwrap();%0A++++++++*pending+=+false;%0A++++++++//+We+notify+the+condvar+that+the+value+has+changed.%0A++++++++cvar.notify_one();%0A++++%7D);%0A++++%0A++++//+Wait+for+the+thread+to+start+up.%0A++++let+(lock,+cvar)+=+%26*pair;%0A++++//+As+long+as+the+value+inside+the+%60Mutex%3Cbool%3E%60+is+%60true%60,+we+wait.%0A++++let+_guard+=+cvar.wait_while(lock.lock().unwrap(),+%7Cpending%7C+%7B+*pending+%7D).unwrap();%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/sync/condvar.rs.html#307-314)\n\n👎Deprecated since 1.6.0: replaced by `std::sync::Condvar::wait_timeout`\n\nWaits on this condition variable for a notification, timing out after a specified duration.\n\nThe semantics of this function are equivalent to [`wait`](about:blank/struct.Condvar.html#method.wait \"method std::sync::Condvar::wait\") except that the thread will be blocked for roughly no longer than `ms` milliseconds. This method should not be used for precise timing due to anomalies such as preemption or platform differences that might not cause the maximum amount of time waited to be precisely `ms`.\n\nNote that the best effort is made to ensure that the time waited is measured with a monotonic clock, and not affected by the changes made to the system time.\n\nThe returned boolean is `false` only if the timeout is known to have elapsed.\n\nLike [`wait`](about:blank/struct.Condvar.html#method.wait \"method std::sync::Condvar::wait\"), the lock specified will be re-acquired when this function returns, regardless of whether the timeout elapsed or not.\n\n##### [§](#examples-4)Examples\n\n```\nuse std::sync::{Arc, Mutex, Condvar};\nuse std::thread;\n\nlet pair = Arc::new((Mutex::new(false), Condvar::new()));\nlet pair2 = Arc::clone(&pair);\n\nthread::spawn(move|| {\n    let (lock, cvar) = &*pair2;\n    let mut started = lock.lock().unwrap();\n    *started = true;\n    // We notify the condvar that the value has changed.\n    cvar.notify_one();\n});\n\n// Wait for the thread to start up.\nlet (lock, cvar) = &*pair;\nlet mut started = lock.lock().unwrap();\n// As long as the value inside the `Mutex<bool>` is `false`, we wait.\nloop {\n    let result = cvar.wait_timeout_ms(started, 10).unwrap();\n    // 10 milliseconds have passed, or maybe the value changed!\n    started = result.0;\n    if *started == true {\n        // We received the notification and the value has been updated, we can leave.\n        break\n    }\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::%7BArc,+Mutex,+Condvar%7D;%0A++++use+std::thread;%0A++++%0A++++let+pair+=+Arc::new((Mutex::new(false),+Condvar::new()));%0A++++let+pair2+=+Arc::clone(%26pair);%0A++++%0A++++thread::spawn(move%7C%7C+%7B%0A++++++++let+(lock,+cvar)+=+%26*pair2;%0A++++++++let+mut+started+=+lock.lock().unwrap();%0A++++++++*started+=+true;%0A++++++++//+We+notify+the+condvar+that+the+value+has+changed.%0A++++++++cvar.notify_one();%0A++++%7D);%0A++++%0A++++//+Wait+for+the+thread+to+start+up.%0A++++let+(lock,+cvar)+=+%26*pair;%0A++++let+mut+started+=+lock.lock().unwrap();%0A++++//+As+long+as+the+value+inside+the+%60Mutex%3Cbool%3E%60+is+%60false%60,+we+wait.%0A++++loop+%7B%0A++++++++let+result+=+cvar.wait_timeout_ms(started,+10).unwrap();%0A++++++++//+10+milliseconds+have+passed,+or+maybe+the+value+changed!%0A++++++++started+=+result.0;%0A++++++++if+*started+==+true+%7B%0A++++++++++++//+We+received+the+notification+and+the+value+has+been+updated,+we+can+leave.%0A++++++++++++break%0A++++++++%7D%0A++++%7D%0A%7D&edition=2021)\n\n1.5.0 · [source](about:blank/src/std/sync/condvar.rs.html#378-389)\n\nWaits on this condition variable for a notification, timing out after a specified duration.\n\nThe semantics of this function are equivalent to [`wait`](about:blank/struct.Condvar.html#method.wait \"method std::sync::Condvar::wait\") except that the thread will be blocked for roughly no longer than `dur`. This method should not be used for precise timing due to anomalies such as preemption or platform differences that might not cause the maximum amount of time waited to be precisely `dur`.\n\nNote that the best effort is made to ensure that the time waited is measured with a monotonic clock, and not affected by the changes made to the system time. This function is susceptible to spurious wakeups. Condition variables normally have a boolean predicate associated with them, and the predicate must always be checked each time this function returns to protect against spurious wakeups. Additionally, it is typically desirable for the timeout to not exceed some duration in spite of spurious wakes, thus the sleep-duration is decremented by the amount slept. Alternatively, use the `wait_timeout_while` method to wait with a timeout while a predicate is true.\n\nThe returned [`WaitTimeoutResult`](struct.WaitTimeoutResult.html \"struct std::sync::WaitTimeoutResult\") value indicates if the timeout is known to have elapsed.\n\nLike [`wait`](about:blank/struct.Condvar.html#method.wait \"method std::sync::Condvar::wait\"), the lock specified will be re-acquired when this function returns, regardless of whether the timeout elapsed or not.\n\n##### [§](#examples-5)Examples\n\n```\nuse std::sync::{Arc, Mutex, Condvar};\nuse std::thread;\nuse std::time::Duration;\n\nlet pair = Arc::new((Mutex::new(false), Condvar::new()));\nlet pair2 = Arc::clone(&pair);\n\nthread::spawn(move|| {\n    let (lock, cvar) = &*pair2;\n    let mut started = lock.lock().unwrap();\n    *started = true;\n    // We notify the condvar that the value has changed.\n    cvar.notify_one();\n});\n\n// wait for the thread to start up\nlet (lock, cvar) = &*pair;\nlet mut started = lock.lock().unwrap();\n// as long as the value inside the `Mutex<bool>` is `false`, we wait\nloop {\n    let result = cvar.wait_timeout(started, Duration::from_millis(10)).unwrap();\n    // 10 milliseconds have passed, or maybe the value changed!\n    started = result.0;\n    if *started == true {\n        // We received the notification and the value has been updated, we can leave.\n        break\n    }\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::%7BArc,+Mutex,+Condvar%7D;%0A++++use+std::thread;%0A++++use+std::time::Duration;%0A++++%0A++++let+pair+=+Arc::new((Mutex::new(false),+Condvar::new()));%0A++++let+pair2+=+Arc::clone(%26pair);%0A++++%0A++++thread::spawn(move%7C%7C+%7B%0A++++++++let+(lock,+cvar)+=+%26*pair2;%0A++++++++let+mut+started+=+lock.lock().unwrap();%0A++++++++*started+=+true;%0A++++++++//+We+notify+the+condvar+that+the+value+has+changed.%0A++++++++cvar.notify_one();%0A++++%7D);%0A++++%0A++++//+wait+for+the+thread+to+start+up%0A++++let+(lock,+cvar)+=+%26*pair;%0A++++let+mut+started+=+lock.lock().unwrap();%0A++++//+as+long+as+the+value+inside+the+%60Mutex%3Cbool%3E%60+is+%60false%60,+we+wait%0A++++loop+%7B%0A++++++++let+result+=+cvar.wait_timeout(started,+Duration::from_millis(10)).unwrap();%0A++++++++//+10+milliseconds+have+passed,+or+maybe+the+value+changed!%0A++++++++started+=+result.0;%0A++++++++if+*started+==+true+%7B%0A++++++++++++//+We+received+the+notification+and+the+value+has+been+updated,+we+can+leave.%0A++++++++++++break%0A++++++++%7D%0A++++%7D%0A%7D&edition=2021)\n\n1.42.0 · [source](about:blank/src/std/sync/condvar.rs.html#444-464)\n\nWaits on this condition variable for a notification, timing out after a specified duration.\n\nThe semantics of this function are equivalent to [`wait_while`](about:blank/struct.Condvar.html#method.wait_while \"method std::sync::Condvar::wait_while\") except that the thread will be blocked for roughly no longer than `dur`. This method should not be used for precise timing due to anomalies such as preemption or platform differences that might not cause the maximum amount of time waited to be precisely `dur`.\n\nNote that the best effort is made to ensure that the time waited is measured with a monotonic clock, and not affected by the changes made to the system time.\n\nThe returned [`WaitTimeoutResult`](struct.WaitTimeoutResult.html \"struct std::sync::WaitTimeoutResult\") value indicates if the timeout is known to have elapsed without the condition being met.\n\nLike [`wait_while`](about:blank/struct.Condvar.html#method.wait_while \"method std::sync::Condvar::wait_while\"), the lock specified will be re-acquired when this function returns, regardless of whether the timeout elapsed or not.\n\n##### [§](#examples-6)Examples\n\n```\nuse std::sync::{Arc, Mutex, Condvar};\nuse std::thread;\nuse std::time::Duration;\n\nlet pair = Arc::new((Mutex::new(true), Condvar::new()));\nlet pair2 = Arc::clone(&pair);\n\nthread::spawn(move|| {\n    let (lock, cvar) = &*pair2;\n    let mut pending = lock.lock().unwrap();\n    *pending = false;\n    // We notify the condvar that the value has changed.\n    cvar.notify_one();\n});\n\n// wait for the thread to start up\nlet (lock, cvar) = &*pair;\nlet result = cvar.wait_timeout_while(\n    lock.lock().unwrap(),\n    Duration::from_millis(100),\n    |&mut pending| pending,\n).unwrap();\nif result.1.timed_out() {\n    // timed-out without the condition ever evaluating to false.\n}\n// access the locked mutex via result.0\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::%7BArc,+Mutex,+Condvar%7D;%0A++++use+std::thread;%0A++++use+std::time::Duration;%0A++++%0A++++let+pair+=+Arc::new((Mutex::new(true),+Condvar::new()));%0A++++let+pair2+=+Arc::clone(%26pair);%0A++++%0A++++thread::spawn(move%7C%7C+%7B%0A++++++++let+(lock,+cvar)+=+%26*pair2;%0A++++++++let+mut+pending+=+lock.lock().unwrap();%0A++++++++*pending+=+false;%0A++++++++//+We+notify+the+condvar+that+the+value+has+changed.%0A++++++++cvar.notify_one();%0A++++%7D);%0A++++%0A++++//+wait+for+the+thread+to+start+up%0A++++let+(lock,+cvar)+=+%26*pair;%0A++++let+result+=+cvar.wait_timeout_while(%0A++++++++lock.lock().unwrap(),%0A++++++++Duration::from_millis(100),%0A++++++++%7C%26mut+pending%7C+pending,%0A++++).unwrap();%0A++++if+result.1.timed_out()+%7B%0A++++++++//+timed-out+without+the+condition+ever+evaluating+to+false.%0A++++%7D%0A++++//+access+the+locked+mutex+via+result.0%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/sync/condvar.rs.html#504-506)\n\nWakes up one blocked thread on this condvar.\n\nIf there is a blocked thread on this condition variable, then it will be woken up from its call to [`wait`](about:blank/struct.Condvar.html#method.wait \"method std::sync::Condvar::wait\") or [`wait_timeout`](about:blank/struct.Condvar.html#method.wait_timeout \"method std::sync::Condvar::wait_timeout\"). Calls to `notify_one` are not buffered in any way.\n\nTo wake up all threads, see [`notify_all`](about:blank/struct.Condvar.html#method.notify_all \"method std::sync::Condvar::notify_all\").\n\n##### [§](#examples-7)Examples\n\n```\nuse std::sync::{Arc, Mutex, Condvar};\nuse std::thread;\n\nlet pair = Arc::new((Mutex::new(false), Condvar::new()));\nlet pair2 = Arc::clone(&pair);\n\nthread::spawn(move|| {\n    let (lock, cvar) = &*pair2;\n    let mut started = lock.lock().unwrap();\n    *started = true;\n    // We notify the condvar that the value has changed.\n    cvar.notify_one();\n});\n\n// Wait for the thread to start up.\nlet (lock, cvar) = &*pair;\nlet mut started = lock.lock().unwrap();\n// As long as the value inside the `Mutex<bool>` is `false`, we wait.\nwhile !*started {\n    started = cvar.wait(started).unwrap();\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::%7BArc,+Mutex,+Condvar%7D;%0A++++use+std::thread;%0A++++%0A++++let+pair+=+Arc::new((Mutex::new(false),+Condvar::new()));%0A++++let+pair2+=+Arc::clone(%26pair);%0A++++%0A++++thread::spawn(move%7C%7C+%7B%0A++++++++let+(lock,+cvar)+=+%26*pair2;%0A++++++++let+mut+started+=+lock.lock().unwrap();%0A++++++++*started+=+true;%0A++++++++//+We+notify+the+condvar+that+the+value+has+changed.%0A++++++++cvar.notify_one();%0A++++%7D);%0A++++%0A++++//+Wait+for+the+thread+to+start+up.%0A++++let+(lock,+cvar)+=+%26*pair;%0A++++let+mut+started+=+lock.lock().unwrap();%0A++++//+As+long+as+the+value+inside+the+%60Mutex%3Cbool%3E%60+is+%60false%60,+we+wait.%0A++++while+!*started+%7B%0A++++++++started+=+cvar.wait(started).unwrap();%0A++++%7D%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/sync/condvar.rs.html#544-546)\n\nWakes up all blocked threads on this condvar.\n\nThis method will ensure that any current waiters on the condition variable are awoken. Calls to `notify_all()` are not buffered in any way.\n\nTo wake up only one thread, see [`notify_one`](about:blank/struct.Condvar.html#method.notify_one \"method std::sync::Condvar::notify_one\").\n\n##### [§](#examples-8)Examples\n\n```\nuse std::sync::{Arc, Mutex, Condvar};\nuse std::thread;\n\nlet pair = Arc::new((Mutex::new(false), Condvar::new()));\nlet pair2 = Arc::clone(&pair);\n\nthread::spawn(move|| {\n    let (lock, cvar) = &*pair2;\n    let mut started = lock.lock().unwrap();\n    *started = true;\n    // We notify the condvar that the value has changed.\n    cvar.notify_all();\n});\n\n// Wait for the thread to start up.\nlet (lock, cvar) = &*pair;\nlet mut started = lock.lock().unwrap();\n// As long as the value inside the `Mutex<bool>` is `false`, we wait.\nwhile !*started {\n    started = cvar.wait(started).unwrap();\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::%7BArc,+Mutex,+Condvar%7D;%0A++++use+std::thread;%0A++++%0A++++let+pair+=+Arc::new((Mutex::new(false),+Condvar::new()));%0A++++let+pair2+=+Arc::clone(%26pair);%0A++++%0A++++thread::spawn(move%7C%7C+%7B%0A++++++++let+(lock,+cvar)+=+%26*pair2;%0A++++++++let+mut+started+=+lock.lock().unwrap();%0A++++++++*started+=+true;%0A++++++++//+We+notify+the+condvar+that+the+value+has+changed.%0A++++++++cvar.notify_all();%0A++++%7D);%0A++++%0A++++//+Wait+for+the+thread+to+start+up.%0A++++let+(lock,+cvar)+=+%26*pair;%0A++++let+mut+started+=+lock.lock().unwrap();%0A++++//+As+long+as+the+value+inside+the+%60Mutex%3Cbool%3E%60+is+%60false%60,+we+wait.%0A++++while+!*started+%7B%0A++++++++started+=+cvar.wait(started).unwrap();%0A++++%7D%0A%7D&edition=2021)\n\n[§](#impl-Freeze-for-Condvar)\n\n[§](#impl-Send-for-Condvar)\n\n[§](#impl-Sync-for-Condvar)\n\n[§](#impl-Unpin-for-Condvar)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140)[§](#impl-Any-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208)[§](#impl-Borrow%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216)[§](#impl-BorrowMut%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765)[§](#impl-From%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768)[§](#method.from)\n\nReturns the argument unchanged.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750)[§](#impl-Into%3CU%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758)[§](#method.into)\n\nCalls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of `[From](../convert/trait.From.html \"trait std::convert::From\")<T> for U` chooses to do.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807)[§](#impl-TryFrom%3CU%3E-for-T)\n\n[§](#associatedtype.Error-1)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812)[§](#method.try_from)\n\nPerforms the conversion.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792)[§](#impl-TryInto%3CU%3E-for-T)\n\n[§](#associatedtype.Error)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797)[§](#method.try_into)\n\nPerforms the conversion.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"A Condition Variable\"><title>Condvar in std::sync - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc struct\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">Condvar</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">Condvar</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#implementations\">Methods</a></h3><ul class=\"block method\"><li><a href=\"#method.new\">new</a></li><li><a href=\"#method.notify_all\">notify_all</a></li><li><a href=\"#method.notify_one\">notify_one</a></li><li><a href=\"#method.wait\">wait</a></li><li><a href=\"#method.wait_timeout\">wait_timeout</a></li><li><a href=\"#method.wait_timeout_ms\">wait_timeout_ms</a></li><li><a href=\"#method.wait_timeout_while\">wait_timeout_while</a></li><li><a href=\"#method.wait_while\">wait_while</a></li></ul><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-Debug-for-Condvar\">Debug</a></li><li><a href=\"#impl-Default-for-Condvar\">Default</a></li><li><a href=\"#impl-RefUnwindSafe-for-Condvar\">RefUnwindSafe</a></li><li><a href=\"#impl-UnwindSafe-for-Condvar\">UnwindSafe</a></li></ul><h3><a href=\"#synthetic-implementations\">Auto Trait Implementations</a></h3><ul class=\"block synthetic-implementation\"><li><a href=\"#impl-Freeze-for-Condvar\">!Freeze</a></li><li><a href=\"#impl-Send-for-Condvar\">Send</a></li><li><a href=\"#impl-Sync-for-Condvar\">Sync</a></li><li><a href=\"#impl-Unpin-for-Condvar\">Unpin</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-Any-for-T\">Any</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-T\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-T\">BorrowMut&lt;T&gt;</a></li><li><a href=\"#impl-From%3CT%3E-for-T\">From&lt;T&gt;</a></li><li><a href=\"#impl-Into%3CU%3E-for-T\">Into&lt;U&gt;</a></li><li><a href=\"#impl-TryFrom%3CU%3E-for-T\">TryFrom&lt;U&gt;</a></li><li><a href=\"#impl-TryInto%3CU%3E-for-T\">TryInto&lt;U&gt;</a></li></ul></section><h2><a href=\"index.html\">In std::sync</a></h2><h3><a href=\"index.html#modules\">Modules</a></h3><ul class=\"block mod\"><li><a href=\"atomic/index.html\">atomic</a></li><li><a href=\"mpsc/index.html\">mpsc</a></li></ul><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.Arc.html\">Arc</a></li><li><a href=\"struct.Barrier.html\">Barrier</a></li><li><a href=\"struct.BarrierWaitResult.html\">BarrierWaitResult</a></li><li><a href=\"struct.Condvar.html\">Condvar</a></li><li><a href=\"struct.Exclusive.html\">Exclusive</a></li><li><a href=\"struct.LazyLock.html\">LazyLock</a></li><li><a href=\"struct.MappedMutexGuard.html\">MappedMutexGuard</a></li><li><a href=\"struct.MappedRwLockReadGuard.html\">MappedRwLockReadGuard</a></li><li><a href=\"struct.MappedRwLockWriteGuard.html\">MappedRwLockWriteGuard</a></li><li><a href=\"struct.Mutex.html\">Mutex</a></li><li><a href=\"struct.MutexGuard.html\">MutexGuard</a></li><li><a href=\"struct.Once.html\">Once</a></li><li><a href=\"struct.OnceLock.html\">OnceLock</a></li><li><a href=\"struct.OnceState.html\">OnceState</a></li><li><a href=\"struct.PoisonError.html\">PoisonError</a></li><li><a href=\"struct.ReentrantLock.html\">ReentrantLock</a></li><li><a href=\"struct.ReentrantLockGuard.html\">ReentrantLockGuard</a></li><li><a href=\"struct.RwLock.html\">RwLock</a></li><li><a href=\"struct.RwLockReadGuard.html\">RwLockReadGuard</a></li><li><a href=\"struct.RwLockWriteGuard.html\">RwLockWriteGuard</a></li><li><a href=\"struct.WaitTimeoutResult.html\">WaitTimeoutResult</a></li><li><a href=\"struct.Weak.html\">Weak</a></li></ul><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.TryLockError.html\">TryLockError</a></li></ul><h3><a href=\"index.html#constants\">Constants</a></h3><ul class=\"block constant\"><li><a href=\"constant.ONCE_INIT.html\">ONCE_INIT</a></li></ul><h3><a href=\"index.html#types\">Type Aliases</a></h3><ul class=\"block type\"><li><a href=\"type.LockResult.html\">LockResult</a></li><li><a href=\"type.TryLockResult.html\">TryLockResult</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Struct <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">sync</a>::<wbr><a class=\"struct\" href=\"#\">Condvar</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/sync/condvar.rs.html#107-109\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub struct Condvar { <span class=\"comment\">/* private fields */</span> }</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>A Condition Variable</p>\n<p>Condition variables represent the ability to block a thread such that it\nconsumes no CPU time while waiting for an event to occur. Condition\nvariables are typically associated with a boolean predicate (a condition)\nand a mutex. The predicate is always verified inside of the mutex before\ndetermining that a thread must block.</p>\n<p>Functions in this module will block the current <strong>thread</strong> of execution.\nNote that any attempt to use multiple mutexes on the same condition\nvariable may result in a runtime panic.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::{Arc, Mutex, Condvar};\n<span class=\"kw\">use </span>std::thread;\n\n<span class=\"kw\">let </span>pair = Arc::new((Mutex::new(<span class=\"bool-val\">false</span>), Condvar::new()));\n<span class=\"kw\">let </span>pair2 = Arc::clone(<span class=\"kw-2\">&amp;</span>pair);\n\n<span class=\"comment\">// Inside of our lock, spawn a new thread, and then wait for it to start.\n</span>thread::spawn(<span class=\"kw\">move</span>|| {\n    <span class=\"kw\">let </span>(lock, cvar) = <span class=\"kw-2\">&amp;*</span>pair2;\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>started = lock.lock().unwrap();\n    <span class=\"kw-2\">*</span>started = <span class=\"bool-val\">true</span>;\n    <span class=\"comment\">// We notify the condvar that the value has changed.\n    </span>cvar.notify_one();\n});\n\n<span class=\"comment\">// Wait for the thread to start up.\n</span><span class=\"kw\">let </span>(lock, cvar) = <span class=\"kw-2\">&amp;*</span>pair;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>started = lock.lock().unwrap();\n<span class=\"kw\">while </span>!<span class=\"kw-2\">*</span>started {\n    started = cvar.wait(started).unwrap();\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::%7BArc,+Mutex,+Condvar%7D;%0A++++use+std::thread;%0A++++%0A++++let+pair+=+Arc::new((Mutex::new(false),+Condvar::new()));%0A++++let+pair2+=+Arc::clone(%26pair);%0A++++%0A++++//+Inside+of+our+lock,+spawn+a+new+thread,+and+then+wait+for+it+to+start.%0A++++thread::spawn(move%7C%7C+%7B%0A++++++++let+(lock,+cvar)+=+%26*pair2;%0A++++++++let+mut+started+=+lock.lock().unwrap();%0A++++++++*started+=+true;%0A++++++++//+We+notify+the+condvar+that+the+value+has+changed.%0A++++++++cvar.notify_one();%0A++++%7D);%0A++++%0A++++//+Wait+for+the+thread+to+start+up.%0A++++let+(lock,+cvar)+=+%26*pair;%0A++++let+mut+started+=+lock.lock().unwrap();%0A++++while+!*started+%7B%0A++++++++started+=+cvar.wait(started).unwrap();%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><h2 id=\"implementations\" class=\"section-header\">Implementations<a href=\"#implementations\" class=\"anchor\">§</a></h2><div id=\"implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Condvar\" class=\"impl\"><a class=\"src rightside\" href=\"../../src/std/sync/condvar.rs.html#111-547\">source</a><a href=\"#impl-Condvar\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"struct.Condvar.html\" title=\"struct std::sync::Condvar\">Condvar</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.new\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.63.0\">1.0.0 (const: 1.63.0)</span> · <a class=\"src\" href=\"../../src/std/sync/condvar.rs.html#126-128\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.new\" class=\"fn\">new</a>() -&gt; <a class=\"struct\" href=\"struct.Condvar.html\" title=\"struct std::sync::Condvar\">Condvar</a></h4></section></summary><div class=\"docblock\"><p>Creates a new condition variable which is ready to be waited on and\nnotified.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::Condvar;\n\n<span class=\"kw\">let </span>condvar = Condvar::new();</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::Condvar;%0A++++%0A++++let+condvar+=+Condvar::new();%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.wait\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/sync/condvar.rs.html#186-193\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.wait\" class=\"fn\">wait</a>&lt;'a, T&gt;(\n    &amp;self,\n    guard: <a class=\"struct\" href=\"struct.MutexGuard.html\" title=\"struct std::sync::MutexGuard\">MutexGuard</a>&lt;'a, T&gt;,\n) -&gt; <a class=\"type\" href=\"type.LockResult.html\" title=\"type std::sync::LockResult\">LockResult</a>&lt;<a class=\"struct\" href=\"struct.MutexGuard.html\" title=\"struct std::sync::MutexGuard\">MutexGuard</a>&lt;'a, T&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Blocks the current thread until this condition variable receives a\nnotification.</p>\n<p>This function will atomically unlock the mutex specified (represented by\n<code>guard</code>) and block the current thread. This means that any calls\nto <a href=\"struct.Condvar.html#method.notify_one\" title=\"method std::sync::Condvar::notify_one\"><code>notify_one</code></a> or <a href=\"struct.Condvar.html#method.notify_all\" title=\"method std::sync::Condvar::notify_all\"><code>notify_all</code></a> which happen logically after the\nmutex is unlocked are candidates to wake this thread up. When this\nfunction call returns, the lock specified will have been re-acquired.</p>\n<p>Note that this function is susceptible to spurious wakeups. Condition\nvariables normally have a boolean predicate associated with them, and\nthe predicate must always be checked each time this function returns to\nprotect against spurious wakeups.</p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h5>\n<p>This function will return an error if the mutex being waited on is\npoisoned when this thread re-acquires the lock. For more information,\nsee information about <a href=\"struct.Mutex.html#poisoning\" title=\"struct std::sync::Mutex\">poisoning</a> on the <a href=\"struct.Mutex.html\" title=\"struct std::sync::Mutex\"><code>Mutex</code></a> type.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>This function may <a href=\"../macro.panic.html\" title=\"macro std::panic\"><code>panic!</code></a> if it is used with more than one mutex\nover time.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::{Arc, Mutex, Condvar};\n<span class=\"kw\">use </span>std::thread;\n\n<span class=\"kw\">let </span>pair = Arc::new((Mutex::new(<span class=\"bool-val\">false</span>), Condvar::new()));\n<span class=\"kw\">let </span>pair2 = Arc::clone(<span class=\"kw-2\">&amp;</span>pair);\n\nthread::spawn(<span class=\"kw\">move</span>|| {\n    <span class=\"kw\">let </span>(lock, cvar) = <span class=\"kw-2\">&amp;*</span>pair2;\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>started = lock.lock().unwrap();\n    <span class=\"kw-2\">*</span>started = <span class=\"bool-val\">true</span>;\n    <span class=\"comment\">// We notify the condvar that the value has changed.\n    </span>cvar.notify_one();\n});\n\n<span class=\"comment\">// Wait for the thread to start up.\n</span><span class=\"kw\">let </span>(lock, cvar) = <span class=\"kw-2\">&amp;*</span>pair;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>started = lock.lock().unwrap();\n<span class=\"comment\">// As long as the value inside the `Mutex&lt;bool&gt;` is `false`, we wait.\n</span><span class=\"kw\">while </span>!<span class=\"kw-2\">*</span>started {\n    started = cvar.wait(started).unwrap();\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::%7BArc,+Mutex,+Condvar%7D;%0A++++use+std::thread;%0A++++%0A++++let+pair+=+Arc::new((Mutex::new(false),+Condvar::new()));%0A++++let+pair2+=+Arc::clone(%26pair);%0A++++%0A++++thread::spawn(move%7C%7C+%7B%0A++++++++let+(lock,+cvar)+=+%26*pair2;%0A++++++++let+mut+started+=+lock.lock().unwrap();%0A++++++++*started+=+true;%0A++++++++//+We+notify+the+condvar+that+the+value+has+changed.%0A++++++++cvar.notify_one();%0A++++%7D);%0A++++%0A++++//+Wait+for+the+thread+to+start+up.%0A++++let+(lock,+cvar)+=+%26*pair;%0A++++let+mut+started+=+lock.lock().unwrap();%0A++++//+As+long+as+the+value+inside+the+%60Mutex%3Cbool%3E%60+is+%60false%60,+we+wait.%0A++++while+!*started+%7B%0A++++++++started+=+cvar.wait(started).unwrap();%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.wait_while\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.42.0\">1.42.0</span> · <a class=\"src\" href=\"../../src/std/sync/condvar.rs.html#238-250\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.wait_while\" class=\"fn\">wait_while</a>&lt;'a, T, F&gt;(\n    &amp;self,\n    guard: <a class=\"struct\" href=\"struct.MutexGuard.html\" title=\"struct std::sync::MutexGuard\">MutexGuard</a>&lt;'a, T&gt;,\n    condition: F,\n) -&gt; <a class=\"type\" href=\"type.LockResult.html\" title=\"type std::sync::LockResult\">LockResult</a>&lt;<a class=\"struct\" href=\"struct.MutexGuard.html\" title=\"struct std::sync::MutexGuard\">MutexGuard</a>&lt;'a, T&gt;&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Blocks the current thread until this condition variable receives a\nnotification and the provided condition is false.</p>\n<p>This function will atomically unlock the mutex specified (represented by\n<code>guard</code>) and block the current thread. This means that any calls\nto <a href=\"struct.Condvar.html#method.notify_one\" title=\"method std::sync::Condvar::notify_one\"><code>notify_one</code></a> or <a href=\"struct.Condvar.html#method.notify_all\" title=\"method std::sync::Condvar::notify_all\"><code>notify_all</code></a> which happen logically after the\nmutex is unlocked are candidates to wake this thread up. When this\nfunction call returns, the lock specified will have been re-acquired.</p>\n<h5 id=\"errors-1\"><a class=\"doc-anchor\" href=\"#errors-1\">§</a>Errors</h5>\n<p>This function will return an error if the mutex being waited on is\npoisoned when this thread re-acquires the lock. For more information,\nsee information about <a href=\"struct.Mutex.html#poisoning\" title=\"struct std::sync::Mutex\">poisoning</a> on the <a href=\"struct.Mutex.html\" title=\"struct std::sync::Mutex\"><code>Mutex</code></a> type.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::{Arc, Mutex, Condvar};\n<span class=\"kw\">use </span>std::thread;\n\n<span class=\"kw\">let </span>pair = Arc::new((Mutex::new(<span class=\"bool-val\">true</span>), Condvar::new()));\n<span class=\"kw\">let </span>pair2 = Arc::clone(<span class=\"kw-2\">&amp;</span>pair);\n\nthread::spawn(<span class=\"kw\">move</span>|| {\n    <span class=\"kw\">let </span>(lock, cvar) = <span class=\"kw-2\">&amp;*</span>pair2;\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>pending = lock.lock().unwrap();\n    <span class=\"kw-2\">*</span>pending = <span class=\"bool-val\">false</span>;\n    <span class=\"comment\">// We notify the condvar that the value has changed.\n    </span>cvar.notify_one();\n});\n\n<span class=\"comment\">// Wait for the thread to start up.\n</span><span class=\"kw\">let </span>(lock, cvar) = <span class=\"kw-2\">&amp;*</span>pair;\n<span class=\"comment\">// As long as the value inside the `Mutex&lt;bool&gt;` is `true`, we wait.\n</span><span class=\"kw\">let </span>_guard = cvar.wait_while(lock.lock().unwrap(), |pending| { <span class=\"kw-2\">*</span>pending }).unwrap();</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::%7BArc,+Mutex,+Condvar%7D;%0A++++use+std::thread;%0A++++%0A++++let+pair+=+Arc::new((Mutex::new(true),+Condvar::new()));%0A++++let+pair2+=+Arc::clone(%26pair);%0A++++%0A++++thread::spawn(move%7C%7C+%7B%0A++++++++let+(lock,+cvar)+=+%26*pair2;%0A++++++++let+mut+pending+=+lock.lock().unwrap();%0A++++++++*pending+=+false;%0A++++++++//+We+notify+the+condvar+that+the+value+has+changed.%0A++++++++cvar.notify_one();%0A++++%7D);%0A++++%0A++++//+Wait+for+the+thread+to+start+up.%0A++++let+(lock,+cvar)+=+%26*pair;%0A++++//+As+long+as+the+value+inside+the+%60Mutex%3Cbool%3E%60+is+%60true%60,+we+wait.%0A++++let+_guard+=+cvar.wait_while(lock.lock().unwrap(),+%7Cpending%7C+%7B+*pending+%7D).unwrap();%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.wait_timeout_ms\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/sync/condvar.rs.html#307-314\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.wait_timeout_ms\" class=\"fn\">wait_timeout_ms</a>&lt;'a, T&gt;(\n    &amp;self,\n    guard: <a class=\"struct\" href=\"struct.MutexGuard.html\" title=\"struct std::sync::MutexGuard\">MutexGuard</a>&lt;'a, T&gt;,\n    ms: <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>,\n) -&gt; <a class=\"type\" href=\"type.LockResult.html\" title=\"type std::sync::LockResult\">LockResult</a>&lt;(<a class=\"struct\" href=\"struct.MutexGuard.html\" title=\"struct std::sync::MutexGuard\">MutexGuard</a>&lt;'a, T&gt;, <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>)&gt;</h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 1.6.0: replaced by <code>std::sync::Condvar::wait_timeout</code></span></div></span></summary><div class=\"docblock\"><p>Waits on this condition variable for a notification, timing out after a\nspecified duration.</p>\n<p>The semantics of this function are equivalent to <a href=\"struct.Condvar.html#method.wait\" title=\"method std::sync::Condvar::wait\"><code>wait</code></a>\nexcept that the thread will be blocked for roughly no longer\nthan <code>ms</code> milliseconds. This method should not be used for\nprecise timing due to anomalies such as preemption or platform\ndifferences that might not cause the maximum amount of time\nwaited to be precisely <code>ms</code>.</p>\n<p>Note that the best effort is made to ensure that the time waited is\nmeasured with a monotonic clock, and not affected by the changes made to\nthe system time.</p>\n<p>The returned boolean is <code>false</code> only if the timeout is known\nto have elapsed.</p>\n<p>Like <a href=\"struct.Condvar.html#method.wait\" title=\"method std::sync::Condvar::wait\"><code>wait</code></a>, the lock specified will be re-acquired when this function\nreturns, regardless of whether the timeout elapsed or not.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::{Arc, Mutex, Condvar};\n<span class=\"kw\">use </span>std::thread;\n\n<span class=\"kw\">let </span>pair = Arc::new((Mutex::new(<span class=\"bool-val\">false</span>), Condvar::new()));\n<span class=\"kw\">let </span>pair2 = Arc::clone(<span class=\"kw-2\">&amp;</span>pair);\n\nthread::spawn(<span class=\"kw\">move</span>|| {\n    <span class=\"kw\">let </span>(lock, cvar) = <span class=\"kw-2\">&amp;*</span>pair2;\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>started = lock.lock().unwrap();\n    <span class=\"kw-2\">*</span>started = <span class=\"bool-val\">true</span>;\n    <span class=\"comment\">// We notify the condvar that the value has changed.\n    </span>cvar.notify_one();\n});\n\n<span class=\"comment\">// Wait for the thread to start up.\n</span><span class=\"kw\">let </span>(lock, cvar) = <span class=\"kw-2\">&amp;*</span>pair;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>started = lock.lock().unwrap();\n<span class=\"comment\">// As long as the value inside the `Mutex&lt;bool&gt;` is `false`, we wait.\n</span><span class=\"kw\">loop </span>{\n    <span class=\"kw\">let </span>result = cvar.wait_timeout_ms(started, <span class=\"number\">10</span>).unwrap();\n    <span class=\"comment\">// 10 milliseconds have passed, or maybe the value changed!\n    </span>started = result.<span class=\"number\">0</span>;\n    <span class=\"kw\">if </span><span class=\"kw-2\">*</span>started == <span class=\"bool-val\">true </span>{\n        <span class=\"comment\">// We received the notification and the value has been updated, we can leave.\n        </span><span class=\"kw\">break\n    </span>}\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::%7BArc,+Mutex,+Condvar%7D;%0A++++use+std::thread;%0A++++%0A++++let+pair+=+Arc::new((Mutex::new(false),+Condvar::new()));%0A++++let+pair2+=+Arc::clone(%26pair);%0A++++%0A++++thread::spawn(move%7C%7C+%7B%0A++++++++let+(lock,+cvar)+=+%26*pair2;%0A++++++++let+mut+started+=+lock.lock().unwrap();%0A++++++++*started+=+true;%0A++++++++//+We+notify+the+condvar+that+the+value+has+changed.%0A++++++++cvar.notify_one();%0A++++%7D);%0A++++%0A++++//+Wait+for+the+thread+to+start+up.%0A++++let+(lock,+cvar)+=+%26*pair;%0A++++let+mut+started+=+lock.lock().unwrap();%0A++++//+As+long+as+the+value+inside+the+%60Mutex%3Cbool%3E%60+is+%60false%60,+we+wait.%0A++++loop+%7B%0A++++++++let+result+=+cvar.wait_timeout_ms(started,+10).unwrap();%0A++++++++//+10+milliseconds+have+passed,+or+maybe+the+value+changed!%0A++++++++started+=+result.0;%0A++++++++if+*started+==+true+%7B%0A++++++++++++//+We+received+the+notification+and+the+value+has+been+updated,+we+can+leave.%0A++++++++++++break%0A++++++++%7D%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.wait_timeout\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"../../src/std/sync/condvar.rs.html#378-389\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.wait_timeout\" class=\"fn\">wait_timeout</a>&lt;'a, T&gt;(\n    &amp;self,\n    guard: <a class=\"struct\" href=\"struct.MutexGuard.html\" title=\"struct std::sync::MutexGuard\">MutexGuard</a>&lt;'a, T&gt;,\n    dur: <a class=\"struct\" href=\"../time/struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>,\n) -&gt; <a class=\"type\" href=\"type.LockResult.html\" title=\"type std::sync::LockResult\">LockResult</a>&lt;(<a class=\"struct\" href=\"struct.MutexGuard.html\" title=\"struct std::sync::MutexGuard\">MutexGuard</a>&lt;'a, T&gt;, <a class=\"struct\" href=\"struct.WaitTimeoutResult.html\" title=\"struct std::sync::WaitTimeoutResult\">WaitTimeoutResult</a>)&gt;</h4></section></summary><div class=\"docblock\"><p>Waits on this condition variable for a notification, timing out after a\nspecified duration.</p>\n<p>The semantics of this function are equivalent to <a href=\"struct.Condvar.html#method.wait\" title=\"method std::sync::Condvar::wait\"><code>wait</code></a> except that\nthe thread will be blocked for roughly no longer than <code>dur</code>. This\nmethod should not be used for precise timing due to anomalies such as\npreemption or platform differences that might not cause the maximum\namount of time waited to be precisely <code>dur</code>.</p>\n<p>Note that the best effort is made to ensure that the time waited is\nmeasured with a monotonic clock, and not affected by the changes made to\nthe system time. This function is susceptible to spurious wakeups.\nCondition variables normally have a boolean predicate associated with\nthem, and the predicate must always be checked each time this function\nreturns to protect against spurious wakeups. Additionally, it is\ntypically desirable for the timeout to not exceed some duration in\nspite of spurious wakes, thus the sleep-duration is decremented by the\namount slept. Alternatively, use the <code>wait_timeout_while</code> method\nto wait with a timeout while a predicate is true.</p>\n<p>The returned <a href=\"struct.WaitTimeoutResult.html\" title=\"struct std::sync::WaitTimeoutResult\"><code>WaitTimeoutResult</code></a> value indicates if the timeout is\nknown to have elapsed.</p>\n<p>Like <a href=\"struct.Condvar.html#method.wait\" title=\"method std::sync::Condvar::wait\"><code>wait</code></a>, the lock specified will be re-acquired when this function\nreturns, regardless of whether the timeout elapsed or not.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::{Arc, Mutex, Condvar};\n<span class=\"kw\">use </span>std::thread;\n<span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"kw\">let </span>pair = Arc::new((Mutex::new(<span class=\"bool-val\">false</span>), Condvar::new()));\n<span class=\"kw\">let </span>pair2 = Arc::clone(<span class=\"kw-2\">&amp;</span>pair);\n\nthread::spawn(<span class=\"kw\">move</span>|| {\n    <span class=\"kw\">let </span>(lock, cvar) = <span class=\"kw-2\">&amp;*</span>pair2;\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>started = lock.lock().unwrap();\n    <span class=\"kw-2\">*</span>started = <span class=\"bool-val\">true</span>;\n    <span class=\"comment\">// We notify the condvar that the value has changed.\n    </span>cvar.notify_one();\n});\n\n<span class=\"comment\">// wait for the thread to start up\n</span><span class=\"kw\">let </span>(lock, cvar) = <span class=\"kw-2\">&amp;*</span>pair;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>started = lock.lock().unwrap();\n<span class=\"comment\">// as long as the value inside the `Mutex&lt;bool&gt;` is `false`, we wait\n</span><span class=\"kw\">loop </span>{\n    <span class=\"kw\">let </span>result = cvar.wait_timeout(started, Duration::from_millis(<span class=\"number\">10</span>)).unwrap();\n    <span class=\"comment\">// 10 milliseconds have passed, or maybe the value changed!\n    </span>started = result.<span class=\"number\">0</span>;\n    <span class=\"kw\">if </span><span class=\"kw-2\">*</span>started == <span class=\"bool-val\">true </span>{\n        <span class=\"comment\">// We received the notification and the value has been updated, we can leave.\n        </span><span class=\"kw\">break\n    </span>}\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::%7BArc,+Mutex,+Condvar%7D;%0A++++use+std::thread;%0A++++use+std::time::Duration;%0A++++%0A++++let+pair+=+Arc::new((Mutex::new(false),+Condvar::new()));%0A++++let+pair2+=+Arc::clone(%26pair);%0A++++%0A++++thread::spawn(move%7C%7C+%7B%0A++++++++let+(lock,+cvar)+=+%26*pair2;%0A++++++++let+mut+started+=+lock.lock().unwrap();%0A++++++++*started+=+true;%0A++++++++//+We+notify+the+condvar+that+the+value+has+changed.%0A++++++++cvar.notify_one();%0A++++%7D);%0A++++%0A++++//+wait+for+the+thread+to+start+up%0A++++let+(lock,+cvar)+=+%26*pair;%0A++++let+mut+started+=+lock.lock().unwrap();%0A++++//+as+long+as+the+value+inside+the+%60Mutex%3Cbool%3E%60+is+%60false%60,+we+wait%0A++++loop+%7B%0A++++++++let+result+=+cvar.wait_timeout(started,+Duration::from_millis(10)).unwrap();%0A++++++++//+10+milliseconds+have+passed,+or+maybe+the+value+changed!%0A++++++++started+=+result.0;%0A++++++++if+*started+==+true+%7B%0A++++++++++++//+We+received+the+notification+and+the+value+has+been+updated,+we+can+leave.%0A++++++++++++break%0A++++++++%7D%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.wait_timeout_while\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.42.0\">1.42.0</span> · <a class=\"src\" href=\"../../src/std/sync/condvar.rs.html#444-464\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.wait_timeout_while\" class=\"fn\">wait_timeout_while</a>&lt;'a, T, F&gt;(\n    &amp;self,\n    guard: <a class=\"struct\" href=\"struct.MutexGuard.html\" title=\"struct std::sync::MutexGuard\">MutexGuard</a>&lt;'a, T&gt;,\n    dur: <a class=\"struct\" href=\"../time/struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>,\n    condition: F,\n) -&gt; <a class=\"type\" href=\"type.LockResult.html\" title=\"type std::sync::LockResult\">LockResult</a>&lt;(<a class=\"struct\" href=\"struct.MutexGuard.html\" title=\"struct std::sync::MutexGuard\">MutexGuard</a>&lt;'a, T&gt;, <a class=\"struct\" href=\"struct.WaitTimeoutResult.html\" title=\"struct std::sync::WaitTimeoutResult\">WaitTimeoutResult</a>)&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Waits on this condition variable for a notification, timing out after a\nspecified duration.</p>\n<p>The semantics of this function are equivalent to <a href=\"struct.Condvar.html#method.wait_while\" title=\"method std::sync::Condvar::wait_while\"><code>wait_while</code></a> except\nthat the thread will be blocked for roughly no longer than <code>dur</code>. This\nmethod should not be used for precise timing due to anomalies such as\npreemption or platform differences that might not cause the maximum\namount of time waited to be precisely <code>dur</code>.</p>\n<p>Note that the best effort is made to ensure that the time waited is\nmeasured with a monotonic clock, and not affected by the changes made to\nthe system time.</p>\n<p>The returned <a href=\"struct.WaitTimeoutResult.html\" title=\"struct std::sync::WaitTimeoutResult\"><code>WaitTimeoutResult</code></a> value indicates if the timeout is\nknown to have elapsed without the condition being met.</p>\n<p>Like <a href=\"struct.Condvar.html#method.wait_while\" title=\"method std::sync::Condvar::wait_while\"><code>wait_while</code></a>, the lock specified will be re-acquired when this\nfunction returns, regardless of whether the timeout elapsed or not.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::{Arc, Mutex, Condvar};\n<span class=\"kw\">use </span>std::thread;\n<span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"kw\">let </span>pair = Arc::new((Mutex::new(<span class=\"bool-val\">true</span>), Condvar::new()));\n<span class=\"kw\">let </span>pair2 = Arc::clone(<span class=\"kw-2\">&amp;</span>pair);\n\nthread::spawn(<span class=\"kw\">move</span>|| {\n    <span class=\"kw\">let </span>(lock, cvar) = <span class=\"kw-2\">&amp;*</span>pair2;\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>pending = lock.lock().unwrap();\n    <span class=\"kw-2\">*</span>pending = <span class=\"bool-val\">false</span>;\n    <span class=\"comment\">// We notify the condvar that the value has changed.\n    </span>cvar.notify_one();\n});\n\n<span class=\"comment\">// wait for the thread to start up\n</span><span class=\"kw\">let </span>(lock, cvar) = <span class=\"kw-2\">&amp;*</span>pair;\n<span class=\"kw\">let </span>result = cvar.wait_timeout_while(\n    lock.lock().unwrap(),\n    Duration::from_millis(<span class=\"number\">100</span>),\n    |<span class=\"kw-2\">&amp;mut </span>pending| pending,\n).unwrap();\n<span class=\"kw\">if </span>result.<span class=\"number\">1</span>.timed_out() {\n    <span class=\"comment\">// timed-out without the condition ever evaluating to false.\n</span>}\n<span class=\"comment\">// access the locked mutex via result.0</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::%7BArc,+Mutex,+Condvar%7D;%0A++++use+std::thread;%0A++++use+std::time::Duration;%0A++++%0A++++let+pair+=+Arc::new((Mutex::new(true),+Condvar::new()));%0A++++let+pair2+=+Arc::clone(%26pair);%0A++++%0A++++thread::spawn(move%7C%7C+%7B%0A++++++++let+(lock,+cvar)+=+%26*pair2;%0A++++++++let+mut+pending+=+lock.lock().unwrap();%0A++++++++*pending+=+false;%0A++++++++//+We+notify+the+condvar+that+the+value+has+changed.%0A++++++++cvar.notify_one();%0A++++%7D);%0A++++%0A++++//+wait+for+the+thread+to+start+up%0A++++let+(lock,+cvar)+=+%26*pair;%0A++++let+result+=+cvar.wait_timeout_while(%0A++++++++lock.lock().unwrap(),%0A++++++++Duration::from_millis(100),%0A++++++++%7C%26mut+pending%7C+pending,%0A++++).unwrap();%0A++++if+result.1.timed_out()+%7B%0A++++++++//+timed-out+without+the+condition+ever+evaluating+to+false.%0A++++%7D%0A++++//+access+the+locked+mutex+via+result.0%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.notify_one\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/sync/condvar.rs.html#504-506\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.notify_one\" class=\"fn\">notify_one</a>(&amp;self)</h4></section></summary><div class=\"docblock\"><p>Wakes up one blocked thread on this condvar.</p>\n<p>If there is a blocked thread on this condition variable, then it will\nbe woken up from its call to <a href=\"struct.Condvar.html#method.wait\" title=\"method std::sync::Condvar::wait\"><code>wait</code></a> or <a href=\"struct.Condvar.html#method.wait_timeout\" title=\"method std::sync::Condvar::wait_timeout\"><code>wait_timeout</code></a>. Calls to\n<code>notify_one</code> are not buffered in any way.</p>\n<p>To wake up all threads, see <a href=\"struct.Condvar.html#method.notify_all\" title=\"method std::sync::Condvar::notify_all\"><code>notify_all</code></a>.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::{Arc, Mutex, Condvar};\n<span class=\"kw\">use </span>std::thread;\n\n<span class=\"kw\">let </span>pair = Arc::new((Mutex::new(<span class=\"bool-val\">false</span>), Condvar::new()));\n<span class=\"kw\">let </span>pair2 = Arc::clone(<span class=\"kw-2\">&amp;</span>pair);\n\nthread::spawn(<span class=\"kw\">move</span>|| {\n    <span class=\"kw\">let </span>(lock, cvar) = <span class=\"kw-2\">&amp;*</span>pair2;\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>started = lock.lock().unwrap();\n    <span class=\"kw-2\">*</span>started = <span class=\"bool-val\">true</span>;\n    <span class=\"comment\">// We notify the condvar that the value has changed.\n    </span>cvar.notify_one();\n});\n\n<span class=\"comment\">// Wait for the thread to start up.\n</span><span class=\"kw\">let </span>(lock, cvar) = <span class=\"kw-2\">&amp;*</span>pair;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>started = lock.lock().unwrap();\n<span class=\"comment\">// As long as the value inside the `Mutex&lt;bool&gt;` is `false`, we wait.\n</span><span class=\"kw\">while </span>!<span class=\"kw-2\">*</span>started {\n    started = cvar.wait(started).unwrap();\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::%7BArc,+Mutex,+Condvar%7D;%0A++++use+std::thread;%0A++++%0A++++let+pair+=+Arc::new((Mutex::new(false),+Condvar::new()));%0A++++let+pair2+=+Arc::clone(%26pair);%0A++++%0A++++thread::spawn(move%7C%7C+%7B%0A++++++++let+(lock,+cvar)+=+%26*pair2;%0A++++++++let+mut+started+=+lock.lock().unwrap();%0A++++++++*started+=+true;%0A++++++++//+We+notify+the+condvar+that+the+value+has+changed.%0A++++++++cvar.notify_one();%0A++++%7D);%0A++++%0A++++//+Wait+for+the+thread+to+start+up.%0A++++let+(lock,+cvar)+=+%26*pair;%0A++++let+mut+started+=+lock.lock().unwrap();%0A++++//+As+long+as+the+value+inside+the+%60Mutex%3Cbool%3E%60+is+%60false%60,+we+wait.%0A++++while+!*started+%7B%0A++++++++started+=+cvar.wait(started).unwrap();%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.notify_all\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/sync/condvar.rs.html#544-546\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.notify_all\" class=\"fn\">notify_all</a>(&amp;self)</h4></section></summary><div class=\"docblock\"><p>Wakes up all blocked threads on this condvar.</p>\n<p>This method will ensure that any current waiters on the condition\nvariable are awoken. Calls to <code>notify_all()</code> are not buffered in any\nway.</p>\n<p>To wake up only one thread, see <a href=\"struct.Condvar.html#method.notify_one\" title=\"method std::sync::Condvar::notify_one\"><code>notify_one</code></a>.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::{Arc, Mutex, Condvar};\n<span class=\"kw\">use </span>std::thread;\n\n<span class=\"kw\">let </span>pair = Arc::new((Mutex::new(<span class=\"bool-val\">false</span>), Condvar::new()));\n<span class=\"kw\">let </span>pair2 = Arc::clone(<span class=\"kw-2\">&amp;</span>pair);\n\nthread::spawn(<span class=\"kw\">move</span>|| {\n    <span class=\"kw\">let </span>(lock, cvar) = <span class=\"kw-2\">&amp;*</span>pair2;\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>started = lock.lock().unwrap();\n    <span class=\"kw-2\">*</span>started = <span class=\"bool-val\">true</span>;\n    <span class=\"comment\">// We notify the condvar that the value has changed.\n    </span>cvar.notify_all();\n});\n\n<span class=\"comment\">// Wait for the thread to start up.\n</span><span class=\"kw\">let </span>(lock, cvar) = <span class=\"kw-2\">&amp;*</span>pair;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>started = lock.lock().unwrap();\n<span class=\"comment\">// As long as the value inside the `Mutex&lt;bool&gt;` is `false`, we wait.\n</span><span class=\"kw\">while </span>!<span class=\"kw-2\">*</span>started {\n    started = cvar.wait(started).unwrap();\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::%7BArc,+Mutex,+Condvar%7D;%0A++++use+std::thread;%0A++++%0A++++let+pair+=+Arc::new((Mutex::new(false),+Condvar::new()));%0A++++let+pair2+=+Arc::clone(%26pair);%0A++++%0A++++thread::spawn(move%7C%7C+%7B%0A++++++++let+(lock,+cvar)+=+%26*pair2;%0A++++++++let+mut+started+=+lock.lock().unwrap();%0A++++++++*started+=+true;%0A++++++++//+We+notify+the+condvar+that+the+value+has+changed.%0A++++++++cvar.notify_all();%0A++++%7D);%0A++++%0A++++//+Wait+for+the+thread+to+start+up.%0A++++let+(lock,+cvar)+=+%26*pair;%0A++++let+mut+started+=+lock.lock().unwrap();%0A++++//+As+long+as+the+value+inside+the+%60Mutex%3Cbool%3E%60+is+%60false%60,+we+wait.%0A++++while+!*started+%7B%0A++++++++started+=+cvar.wait(started).unwrap();%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details></div><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">§</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-Condvar\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.16.0\">1.16.0</span> · <a class=\"src\" href=\"../../src/std/sync/condvar.rs.html#550-554\">source</a></span><a href=\"#impl-Debug-for-Condvar\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"struct.Condvar.html\" title=\"struct std::sync::Condvar\">Condvar</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/sync/condvar.rs.html#551-553\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"../fmt/type.Result.html\" title=\"type std::fmt::Result\">Result</a></h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Default-for-Condvar\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"../../src/std/sync/condvar.rs.html#557-562\">source</a></span><a href=\"#impl-Default-for-Condvar\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for <a class=\"struct\" href=\"struct.Condvar.html\" title=\"struct std::sync::Condvar\">Condvar</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/sync/condvar.rs.html#559-561\">source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"struct\" href=\"struct.Condvar.html\" title=\"struct std::sync::Condvar\">Condvar</a></h4></section></summary><div class=\"docblock\"><p>Creates a <code>Condvar</code> which is ready to be waited on and notified.</p>\n</div></details></div></details><section id=\"impl-RefUnwindSafe-for-Condvar\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"../../src/std/panic.rs.html#78\">source</a></span><a href=\"#impl-RefUnwindSafe-for-Condvar\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"struct\" href=\"struct.Condvar.html\" title=\"struct std::sync::Condvar\">Condvar</a></h3></section><section id=\"impl-UnwindSafe-for-Condvar\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.9.0\">1.9.0</span> · <a class=\"src\" href=\"../../src/std/panic.rs.html#71\">source</a></span><a href=\"#impl-UnwindSafe-for-Condvar\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"struct.Condvar.html\" title=\"struct std::sync::Condvar\">Condvar</a></h3></section></div><h2 id=\"synthetic-implementations\" class=\"section-header\">Auto Trait Implementations<a href=\"#synthetic-implementations\" class=\"anchor\">§</a></h2><div id=\"synthetic-implementations-list\"><section id=\"impl-Freeze-for-Condvar\" class=\"impl\"><a href=\"#impl-Freeze-for-Condvar\" class=\"anchor\">§</a><h3 class=\"code-header\">impl !<a class=\"trait\" href=\"../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"struct\" href=\"struct.Condvar.html\" title=\"struct std::sync::Condvar\">Condvar</a></h3></section><section id=\"impl-Send-for-Condvar\" class=\"impl\"><a href=\"#impl-Send-for-Condvar\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"struct\" href=\"struct.Condvar.html\" title=\"struct std::sync::Condvar\">Condvar</a></h3></section><section id=\"impl-Sync-for-Condvar\" class=\"impl\"><a href=\"#impl-Sync-for-Condvar\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"struct.Condvar.html\" title=\"struct std::sync::Condvar\">Condvar</a></h3></section><section id=\"impl-Unpin-for-Condvar\" class=\"impl\"><a href=\"#impl-Unpin-for-Condvar\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"struct\" href=\"struct.Condvar.html\" title=\"struct std::sync::Condvar\">Condvar</a></h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">§</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Any-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a><a href=\"#impl-Any-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#141\">source</a><a href=\"#method.type_id\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../any/trait.Any.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\">Gets the <code>TypeId</code> of <code>self</code>. <a href=\"../any/trait.Any.html#tymethod.type_id\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Borrow%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208\">source</a><a href=\"#impl-Borrow%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#210\">source</a><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216\">source</a><a href=\"#impl-BorrowMut%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#217\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765\">source</a><a href=\"#impl-From%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the argument unchanged.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Into%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750\">source</a><a href=\"#impl-Into%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758\">source</a><a href=\"#method.into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; U</h4></section></summary><div class=\"docblock\"><p>Calls <code>U::from(self)</code>.</p>\n<p>That is, this conversion is whatever the implementation of\n<code><a href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for U</code> chooses to do.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryFrom%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807\">source</a><a href=\"#impl-TryFrom%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812\">source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: U) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, &lt;T as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryInto%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792\">source</a><a href=\"#impl-TryInto%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryInto.html\" title=\"trait std::convert::TryInto\">TryInto</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryInto.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797\">source</a><a href=\"#method.try_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryInto.html#tymethod.try_into\" class=\"fn\">try_into</a>(self) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;U, &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details></div></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:14:46.670Z"
}