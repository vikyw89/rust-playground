{
	"title": "Cargo Targets - The Cargo Book",
	"url": "https://doc.rust-lang.org/cargo/reference/cargo-targets.html",
	"markdown": "# Cargo Targets - The Cargo Book\n\nCargo packages consist of _targets_ which correspond to source files which can be compiled into a crate. Packages can have [library](#library), [binary](#binaries), [example](#examples), [test](#tests), and [benchmark](#benchmarks) targets. The list of targets can be configured in the `Cargo.toml` manifest, often [inferred automatically](#target-auto-discovery) by the [directory layout](../guide/project-layout.html) of the source files.\n\nSee [Configuring a target](#configuring-a-target) below for details on configuring the settings for a target.\n\n## [Library](#library)\n\nThe library target defines a “library” that can be used and linked by other libraries and executables. The filename defaults to `src/lib.rs`, and the name of the library defaults to the name of the package, with any dashes replaced with underscores. A package can have only one library. The settings for the library can be [customized](#configuring-a-target) in the `[lib]` table in `Cargo.toml`.\n\n```toml\n# Example of customizing the library in Cargo.toml.\n[lib]\ncrate-type = [\"cdylib\"]\nbench = false\n\n```\n\n## [Binaries](#binaries)\n\nBinary targets are executable programs that can be run after being compiled. The default binary filename is `src/main.rs`, which defaults to the name of the package. Additional binaries are stored in the [`src/bin/` directory](../guide/project-layout.html). The settings for each binary can be [customized](#configuring-a-target) in the `[[bin]]` tables in `Cargo.toml`.\n\nBinaries can use the public API of the package’s library. They are also linked with the [`[dependencies]`](specifying-dependencies.html) defined in `Cargo.toml`.\n\nYou can run individual binaries with the [`cargo run`](../commands/cargo-run.html) command with the `--bin <bin-name>` option. [`cargo install`](../commands/cargo-install.html) can be used to copy the executable to a common location.\n\n```toml\n# Example of customizing binaries in Cargo.toml.\n[[bin]]\nname = \"cool-tool\"\ntest = false\nbench = false\n\n[[bin]]\nname = \"frobnicator\"\nrequired-features = [\"frobnicate\"]\n\n```\n\n## [Examples](#examples)\n\nFiles located under the [`examples` directory](../guide/project-layout.html) are example uses of the functionality provided by the library. When compiled, they are placed in the [`target/debug/examples` directory](../guide/build-cache.html).\n\nExamples can use the public API of the package’s library. They are also linked with the [`[dependencies]`](specifying-dependencies.html) and [`[dev-dependencies]`](about:blank/specifying-dependencies.html#development-dependencies) defined in `Cargo.toml`.\n\nBy default, examples are executable binaries (with a `main()` function). You can specify the [`crate-type` field](#the-crate-type-field) to make an example be compiled as a library:\n\n```toml\n[[example]]\nname = \"foo\"\ncrate-type = [\"staticlib\"]\n\n```\n\nYou can run individual executable examples with the [`cargo run`](../commands/cargo-run.html) command with the `--example <example-name>` option. Library examples can be built with [`cargo build`](../commands/cargo-build.html) with the `--example <example-name>` option. [`cargo install`](../commands/cargo-install.html) with the `--example <example-name>` option can be used to copy executable binaries to a common location. Examples are compiled by [`cargo test`](../commands/cargo-test.html) by default to protect them from bit-rotting. Set [the `test` field](#the-test-field) to `true` if you have `#[test]` functions in the example that you want to run with [`cargo test`](../commands/cargo-test.html).\n\n## [Tests](#tests)\n\nThere are two styles of tests within a Cargo project:\n\n-   _Unit tests_ which are functions marked with the [`#[test]` attribute](about:blank/reference/attributes/testing.html#the-test-attribute) located within your library or binaries (or any target enabled with [the `test` field](#the-test-field)). These tests have access to private APIs located within the target they are defined in.\n-   _Integration tests_ which is a separate executable binary, also containing `#[test]` functions, which is linked with the project’s library and has access to its _public_ API.\n\nTests are run with the [`cargo test`](../commands/cargo-test.html) command. By default, Cargo and `rustc` use the [libtest harness](../../rustc/tests/index.html) which is responsible for collecting functions annotated with the [`#[test]` attribute](about:blank/reference/attributes/testing.html#the-test-attribute) and executing them in parallel, reporting the success and failure of each test. See [the `harness` field](#the-harness-field) if you want to use a different harness or test strategy.\n\n> **Note**: There is another special style of test in Cargo: [documentation tests](../../rustdoc/documentation-tests.html). They are handled by `rustdoc` and have a slightly different execution model. For more information, please see [`cargo test`](about:blank/commands/cargo-test.html#documentation-tests).\n\n### [Integration tests](#integration-tests)\n\nFiles located under the [`tests` directory](../guide/project-layout.html) are integration tests. When you run [`cargo test`](../commands/cargo-test.html), Cargo will compile each of these files as a separate crate, and execute them.\n\nIntegration tests can use the public API of the package’s library. They are also linked with the [`[dependencies]`](specifying-dependencies.html) and [`[dev-dependencies]`](about:blank/specifying-dependencies.html#development-dependencies) defined in `Cargo.toml`.\n\nIf you want to share code among multiple integration tests, you can place it in a separate module such as `tests/common/mod.rs` and then put `mod common;` in each test to import it.\n\nEach integration test results in a separate executable binary, and [`cargo test`](../commands/cargo-test.html) will run them serially. In some cases this can be inefficient, as it can take longer to compile, and may not make full use of multiple CPUs when running the tests. If you have a lot of integration tests, you may want to consider creating a single integration test, and split the tests into multiple modules. The libtest harness will automatically find all of the `#[test]` annotated functions and run them in parallel. You can pass module names to [`cargo test`](../commands/cargo-test.html) to only run the tests within that module.\n\nBinary targets are automatically built if there is an integration test. This allows an integration test to execute the binary to exercise and test its behavior. The `CARGO_BIN_EXE_<name>` [environment variable](about:blank/environment-variables.html#environment-variables-cargo-sets-for-crates) is set when the integration test is built so that it can use the [`env` macro](../../std/macro.env.html) to locate the executable.\n\n## [Benchmarks](#benchmarks)\n\nBenchmarks provide a way to test the performance of your code using the [`cargo bench`](../commands/cargo-bench.html) command. They follow the same structure as [tests](#tests), with each benchmark function annotated with the `#[bench]` attribute. Similarly to tests:\n\n-   Benchmarks are placed in the [`benches` directory](../guide/project-layout.html).\n-   Benchmark functions defined in libraries and binaries have access to the _private_ API within the target they are defined in. Benchmarks in the `benches` directory may use the _public_ API.\n-   [The `bench` field](#the-bench-field) can be used to define which targets are benchmarked by default.\n-   [The `harness` field](#the-harness-field) can be used to disable the built-in harness.\n\n> **Note**: The [`#[bench]` attribute](../../unstable-book/library-features/test.html) is currently unstable and only available on the [nightly channel](../../book/appendix-07-nightly-rust.html). There are some packages available on [crates.io](https://crates.io/keywords/benchmark) that may help with running benchmarks on the stable channel, such as [Criterion](https://crates.io/crates/criterion).\n\n## [Configuring a target](#configuring-a-target)\n\nAll of the `[lib]`, `[[bin]]`, `[[example]]`, `[[test]]`, and `[[bench]]` sections in `Cargo.toml` support similar configuration for specifying how a target should be built. The double-bracket sections like `[[bin]]` are [array-of-table of TOML](https://toml.io/en/v1.0.0-rc.3#array-of-tables), which means you can write more than one `[[bin]]` section to make several executables in your crate. You can only specify one library, so `[lib]` is a normal TOML table.\n\nThe following is an overview of the TOML settings for each target, with each field described in detail below.\n\n```toml\n[lib]\nname = \"foo\"           # The name of the target.\npath = \"src/lib.rs\"    # The source file of the target.\ntest = true            # Is tested by default.\ndoctest = true         # Documentation examples are tested by default.\nbench = true           # Is benchmarked by default.\ndoc = true             # Is documented by default.\nplugin = false         # Used as a compiler plugin (deprecated).\nproc-macro = false     # Set to `true` for a proc-macro library.\nharness = true         # Use libtest harness.\nedition = \"2015\"       # The edition of the target.\ncrate-type = [\"lib\"]   # The crate types to generate.\nrequired-features = [] # Features required to build this target (N/A for lib).\n\n```\n\n### [The `name` field](#the-name-field)\n\nThe `name` field specifies the name of the target, which corresponds to the filename of the artifact that will be generated. For a library, this is the crate name that dependencies will use to reference it.\n\nFor the library target, this defaults to the name of the package , with any dashes replaced with underscores. For the default binary (`src/main.rs`), it also defaults to the name of the package, with no replacement for dashes. For [auto discovered](#target-auto-discovery) targets, it defaults to the directory or file name.\n\nThis is required for all targets except `[lib]`.\n\n### [The `path` field](#the-path-field)\n\nThe `path` field specifies where the source for the crate is located, relative to the `Cargo.toml` file.\n\nIf not specified, the [inferred path](#target-auto-discovery) is used based on the target name.\n\n### [The `test` field](#the-test-field)\n\nThe `test` field indicates whether or not the target is tested by default by [`cargo test`](../commands/cargo-test.html). The default is `true` for lib, bins, and tests.\n\n> **Note**: Examples are built by [`cargo test`](../commands/cargo-test.html) by default to ensure they continue to compile, but they are not _tested_ by default. Setting `test = true` for an example will also build it as a test and run any [`#[test]`](about:blank/reference/attributes/testing.html#the-test-attribute) functions defined in the example.\n\n### [The `doctest` field](#the-doctest-field)\n\nThe `doctest` field indicates whether or not [documentation examples](../../rustdoc/documentation-tests.html) are tested by default by [`cargo test`](../commands/cargo-test.html). This is only relevant for libraries, it has no effect on other sections. The default is `true` for the library.\n\n### [The `bench` field](#the-bench-field)\n\nThe `bench` field indicates whether or not the target is benchmarked by default by [`cargo bench`](../commands/cargo-bench.html). The default is `true` for lib, bins, and benchmarks.\n\n### [The `doc` field](#the-doc-field)\n\nThe `doc` field indicates whether or not the target is included in the documentation generated by [`cargo doc`](../commands/cargo-doc.html) by default. The default is `true` for libraries and binaries.\n\n> **Note**: The binary will be skipped if its name is the same as the lib target.\n\n### [The `plugin` field](#the-plugin-field)\n\nThis field is used for `rustc` plugins, which are being deprecated.\n\n### [The `proc-macro` field](#the-proc-macro-field)\n\nThe `proc-macro` field indicates that the library is a [procedural macro](../../book/ch19-06-macros.html) ([reference](../../reference/procedural-macros.html)). This is only valid for the `[lib]` target.\n\n### [The `harness` field](#the-harness-field)\n\nThe `harness` field indicates that the [`--test` flag](about:blank/rustc/command-line-arguments.html#option-test) will be passed to `rustc` which will automatically include the libtest library which is the driver for collecting and running tests marked with the [`#[test]` attribute](about:blank/reference/attributes/testing.html#the-test-attribute) or benchmarks with the `#[bench]` attribute. The default is `true` for all targets.\n\nIf set to `false`, then you are responsible for defining a `main()` function to run tests and benchmarks.\n\nTests have the [`cfg(test)` conditional expression](about:blank/reference/conditional-compilation.html#test) enabled whether or not the harness is enabled.\n\n### [The `edition` field](#the-edition-field)\n\nThe `edition` field defines the [Rust edition](../../edition-guide/index.html) the target will use. If not specified, it defaults to the [`edition` field](about:blank/manifest.html#the-edition-field) for the `[package]`. This field should usually not be set, and is only intended for advanced scenarios such as incrementally transitioning a large package to a new edition.\n\n### [The `crate-type` field](#the-crate-type-field)\n\nThe `crate-type` field defines the [crate types](../../reference/linkage.html) that will be generated by the target. It is an array of strings, allowing you to specify multiple crate types for a single target. This can only be specified for libraries and examples. Binaries, tests, and benchmarks are always the “bin” crate type. The defaults are:\n\n| Target | Crate Type |\n| --- | --- |\n| Normal library | `\"lib\"` |\n| Proc-macro library | `\"proc-macro\"` |\n| Example | `\"bin\"` |\n\nThe available options are `bin`, `lib`, `rlib`, `dylib`, `cdylib`, `staticlib`, and `proc-macro`. You can read more about the different crate types in the [Rust Reference Manual](../../reference/linkage.html).\n\n### [The `required-features` field](#the-required-features-field)\n\nThe `required-features` field specifies which [features](features.html) the target needs in order to be built. If any of the required features are not enabled, the target will be skipped. This is only relevant for the `[[bin]]`, `[[bench]]`, `[[test]]`, and `[[example]]` sections, it has no effect on `[lib]`.\n\n```toml\n[features]\n# ...\npostgres = []\nsqlite = []\ntools = []\n\n[[bin]]\nname = \"my-pg-tool\"\nrequired-features = [\"postgres\", \"tools\"]\n\n```\n\n## [Target auto-discovery](#target-auto-discovery)\n\nBy default, Cargo automatically determines the targets to build based on the [layout of the files](../guide/project-layout.html) on the filesystem. The target configuration tables, such as `[lib]`, `[[bin]]`, `[[test]]`, `[[bench]]`, or `[[example]]`, can be used to add additional targets that don’t follow the standard directory layout.\n\nThe automatic target discovery can be disabled so that only manually configured targets will be built. Setting the keys `autobins`, `autoexamples`, `autotests`, or `autobenches` to `false` in the `[package]` section will disable auto-discovery of the corresponding target type.\n\n```toml\n[package]\n# ...\nautobins = false\nautoexamples = false\nautotests = false\nautobenches = false\n\n```\n\nDisabling automatic discovery should only be needed for specialized situations. For example, if you have a library where you want a _module_ named `bin`, this would present a problem because Cargo would usually attempt to compile anything in the `bin` directory as an executable. Here is a sample layout of this scenario:\n\n```text\n├── Cargo.toml\n└── src\n    ├── lib.rs\n    └── bin\n        └── mod.rs\n\n```\n\nTo prevent Cargo from inferring `src/bin/mod.rs` as an executable, set `autobins = false` in `Cargo.toml` to disable auto-discovery:\n\n```toml\n[package]\n# …\nautobins = false\n\n```\n\n> **Note**: For packages with the 2015 edition, the default for auto-discovery is `false` if at least one target is manually defined in `Cargo.toml`. Beginning with the 2018 edition, the default is always `true`.",
	"html": "<!DOCTYPE html><html lang=\"en\" class=\"light\" dir=\"ltr\"><head>\n        <!-- Book generated using mdBook -->\n        <meta charset=\"UTF-8\">\n        <title>Cargo Targets - The Cargo Book</title>\n\n\n        <!-- Custom HTML head -->\n        <style>\n            dd {\n                margin-bottom: 1em;\n            }\n        </style>\n\n        <meta name=\"description\" content=\"\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <meta name=\"theme-color\" content=\"rgb(255, 255, 255)\">\n\n        <link rel=\"shortcut icon\" href=\"../favicon.png\">\n        <link rel=\"stylesheet\" href=\"../css/variables.css\">\n        <link rel=\"stylesheet\" href=\"../css/general.css\">\n        <link rel=\"stylesheet\" href=\"../css/chrome.css\">\n        <link rel=\"stylesheet\" href=\"../css/print.css\" media=\"print\">\n\n        <!-- Fonts -->\n        <link rel=\"stylesheet\" href=\"../FontAwesome/css/font-awesome.css\">\n        <link rel=\"stylesheet\" href=\"../fonts/fonts.css\">\n\n        <!-- Highlight.js Stylesheets -->\n        <link rel=\"stylesheet\" href=\"../highlight.css\">\n        <link rel=\"stylesheet\" href=\"../tomorrow-night.css\" disabled=\"\">\n        <link rel=\"stylesheet\" href=\"../ayu-highlight.css\" disabled=\"\">\n\n        <!-- Custom theme stylesheets -->\n\n    </head>\n    <body class=\"js sidebar-visible\">\n    <div id=\"body-container\">\n        <!-- Provide site root to javascript -->\n        <script>\n            var path_to_root = \"../\";\n            var default_theme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"navy\" : \"light\";\n        </script>\n\n        <!-- Work around some values being stored in localStorage wrapped in quotes -->\n        <script>\n            try {\n                var theme = localStorage.getItem('mdbook-theme');\n                var sidebar = localStorage.getItem('mdbook-sidebar');\n\n                if (theme.startsWith('\"') && theme.endsWith('\"')) {\n                    localStorage.setItem('mdbook-theme', theme.slice(1, theme.length - 1));\n                }\n\n                if (sidebar.startsWith('\"') && sidebar.endsWith('\"')) {\n                    localStorage.setItem('mdbook-sidebar', sidebar.slice(1, sidebar.length - 1));\n                }\n            } catch (e) { }\n        </script>\n\n        <!-- Set the theme before any content is loaded, prevents flash -->\n        <script>\n            var theme;\n            try { theme = localStorage.getItem('mdbook-theme'); } catch(e) { }\n            if (theme === null || theme === undefined) { theme = default_theme; }\n            var html = document.querySelector('html');\n            html.classList.remove('light')\n            html.classList.add(theme);\n            var body = document.querySelector('body');\n            body.classList.remove('no-js')\n            body.classList.add('js');\n        </script>\n\n        <input type=\"checkbox\" id=\"sidebar-toggle-anchor\" class=\"hidden\">\n\n        <!-- Hide / unhide sidebar before it is displayed -->\n        <script>\n            var body = document.querySelector('body');\n            var sidebar = null;\n            var sidebar_toggle = document.getElementById(\"sidebar-toggle-anchor\");\n            if (document.body.clientWidth >= 1080) {\n                try { sidebar = localStorage.getItem('mdbook-sidebar'); } catch(e) { }\n                sidebar = sidebar || 'visible';\n            } else {\n                sidebar = 'hidden';\n            }\n            sidebar_toggle.checked = sidebar === 'visible';\n            body.classList.remove('sidebar-visible');\n            body.classList.add(\"sidebar-\" + sidebar);\n        </script>\n\n        <nav id=\"sidebar\" class=\"sidebar\" aria-label=\"Table of contents\" aria-hidden=\"false\">\n            <div class=\"sidebar-scrollbox\">\n                <ol class=\"chapter\"><li class=\"chapter-item expanded affix \"><a href=\"../index.html\" tabindex=\"0\">Introduction</a></li><li class=\"chapter-item expanded \"><a href=\"../getting-started/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.</strong> Getting Started</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../getting-started/installation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.1.</strong> Installation</a></li><li class=\"chapter-item expanded \"><a href=\"../getting-started/first-steps.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.2.</strong> First Steps with Cargo</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../guide/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.</strong> Cargo Guide</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../guide/why-cargo-exists.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.1.</strong> Why Cargo Exists</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/creating-a-new-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.2.</strong> Creating a New Package</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/working-on-an-existing-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.3.</strong> Working on an Existing Package</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/dependencies.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.4.</strong> Dependencies</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/project-layout.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.5.</strong> Package Layout</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/cargo-toml-vs-cargo-lock.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.6.</strong> Cargo.toml vs Cargo.lock</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/tests.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.7.</strong> Tests</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/continuous-integration.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.8.</strong> Continuous Integration</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/cargo-home.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.9.</strong> Cargo Home</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/build-cache.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.10.</strong> Build Cache</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.</strong> Cargo Reference</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/specifying-dependencies.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.1.</strong> Specifying Dependencies</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/overriding-dependencies.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.1.1.</strong> Overriding Dependencies</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/manifest.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.2.</strong> The Manifest Format</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/cargo-targets.html\" class=\"active\" tabindex=\"0\"><strong aria-hidden=\"true\">3.2.1.</strong> Cargo Targets</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/workspaces.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.3.</strong> Workspaces</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/features.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.4.</strong> Features</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/features-examples.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.4.1.</strong> Features Examples</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/profiles.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.5.</strong> Profiles</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/config.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.6.</strong> Configuration</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/environment-variables.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.7.</strong> Environment Variables</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/build-scripts.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.8.</strong> Build Scripts</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/build-script-examples.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.8.1.</strong> Build Script Examples</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/publishing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.9.</strong> Publishing on crates.io</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/pkgid-spec.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.10.</strong> Package ID Specifications</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/source-replacement.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.11.</strong> Source Replacement</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/external-tools.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.12.</strong> External Tools</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/registries.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.</strong> Registries</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/registry-authentication.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.1.</strong> Registry Authentication</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/credential-provider-protocol.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.1.1.</strong> Credential Provider Protocol</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/running-a-registry.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.2.</strong> Running a Registry</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/registry-index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.2.1.</strong> Registry Index</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/registry-web-api.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.2.2.</strong> Registry Web API</a></li></ol></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/resolver.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.14.</strong> Dependency Resolution</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/semver.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.15.</strong> SemVer Compatibility</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/future-incompat-report.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.16.</strong> Future incompat report</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/timings.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.17.</strong> Reporting build timings</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/unstable.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.18.</strong> Unstable Features</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../commands/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.</strong> Cargo Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../commands/general-commands.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.</strong> General Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../commands/cargo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.1.</strong> cargo</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-help.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.2.</strong> cargo help</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-version.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.3.</strong> cargo version</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../commands/build-commands.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.</strong> Build Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-bench.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.1.</strong> cargo bench</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-build.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.2.</strong> cargo build</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-check.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.3.</strong> cargo check</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-clean.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.4.</strong> cargo clean</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-doc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.5.</strong> cargo doc</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-fetch.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.6.</strong> cargo fetch</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-fix.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.7.</strong> cargo fix</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-run.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.8.</strong> cargo run</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-rustc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.9.</strong> cargo rustc</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-rustdoc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.10.</strong> cargo rustdoc</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-test.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.11.</strong> cargo test</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-report.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.12.</strong> cargo report</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../commands/manifest-commands.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.</strong> Manifest Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-add.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.1.</strong> cargo add</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-generate-lockfile.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.2.</strong> cargo generate-lockfile</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-locate-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.3.</strong> cargo locate-project</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-metadata.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.4.</strong> cargo metadata</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-pkgid.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.5.</strong> cargo pkgid</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-remove.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.6.</strong> cargo remove</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-tree.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.7.</strong> cargo tree</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-update.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.8.</strong> cargo update</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-vendor.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.9.</strong> cargo vendor</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-verify-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.10.</strong> cargo verify-project</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../commands/package-commands.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.</strong> Package Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-init.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.1.</strong> cargo init</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-install.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.2.</strong> cargo install</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-new.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.3.</strong> cargo new</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-search.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.4.</strong> cargo search</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-uninstall.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.5.</strong> cargo uninstall</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../commands/publishing-commands.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.</strong> Publishing Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-login.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.1.</strong> cargo login</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-logout.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.2.</strong> cargo logout</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-owner.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.3.</strong> cargo owner</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-package.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.4.</strong> cargo package</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-publish.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.5.</strong> cargo publish</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-yank.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.6.</strong> cargo yank</a></li></ol></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../faq.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.</strong> FAQ</a></li><li class=\"chapter-item expanded \"><a href=\"../appendix/glossary.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.</strong> Appendix: Glossary</a></li><li class=\"chapter-item expanded \"><a href=\"../appendix/git-authentication.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.</strong> Appendix: Git Authentication</a></li></ol>\n            </div>\n            <div id=\"sidebar-resize-handle\" class=\"sidebar-resize-handle\">\n                <div class=\"sidebar-resize-indicator\"></div>\n            </div>\n        </nav>\n\n        <!-- Track and set sidebar scroll position -->\n        <script>\n            var sidebarScrollbox = document.querySelector('#sidebar .sidebar-scrollbox');\n            sidebarScrollbox.addEventListener('click', function(e) {\n                if (e.target.tagName === 'A') {\n                    sessionStorage.setItem('sidebar-scroll', sidebarScrollbox.scrollTop);\n                }\n            }, { passive: true });\n            var sidebarScrollTop = sessionStorage.getItem('sidebar-scroll');\n            sessionStorage.removeItem('sidebar-scroll');\n            if (sidebarScrollTop) {\n                // preserve sidebar scroll position when navigating via links within sidebar\n                sidebarScrollbox.scrollTop = sidebarScrollTop;\n            } else {\n                // scroll sidebar to current active section when navigating via \"next/previous chapter\" buttons\n                var activeSection = document.querySelector('#sidebar .active');\n                if (activeSection) {\n                    activeSection.scrollIntoView({ block: 'center' });\n                }\n            }\n        </script>\n\n        <div id=\"page-wrapper\" class=\"page-wrapper\">\n\n            <div class=\"page\">\n                                <div id=\"menu-bar-hover-placeholder\"></div>\n                <div id=\"menu-bar\" class=\"menu-bar\" style=\"top: 0px;\">\n                    <div class=\"left-buttons\">\n                        <label id=\"sidebar-toggle\" class=\"icon-button\" for=\"sidebar-toggle-anchor\" title=\"Toggle Table of Contents\" aria-label=\"Toggle Table of Contents\" aria-controls=\"sidebar\" aria-expanded=\"true\">\n                            <i class=\"fa fa-bars\"></i>\n                        </label>\n                        <button id=\"theme-toggle\" class=\"icon-button\" type=\"button\" title=\"Change theme\" aria-label=\"Change theme\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-controls=\"theme-list\">\n                            <i class=\"fa fa-paint-brush\"></i>\n                        </button>\n                        <ul id=\"theme-list\" class=\"theme-popup\" aria-label=\"Themes\" role=\"menu\">\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme theme-selected\" id=\"light\">Light</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"rust\">Rust</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"coal\">Coal</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"navy\">Navy</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"ayu\">Ayu</button></li>\n                        </ul>\n                        <button id=\"search-toggle\" class=\"icon-button\" type=\"button\" title=\"Search. (Shortkey: s)\" aria-label=\"Toggle Searchbar\" aria-expanded=\"false\" aria-keyshortcuts=\"S\" aria-controls=\"searchbar\">\n                            <i class=\"fa fa-search\"></i>\n                        </button>\n                    </div>\n\n                    <h1 class=\"menu-title\">The Cargo Book</h1>\n\n                    <div class=\"right-buttons\">\n                        <a href=\"../print.html\" title=\"Print this book\" aria-label=\"Print this book\">\n                            <i id=\"print-button\" class=\"fa fa-print\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/cargo/tree/master/src/doc/src\" title=\"Git repository\" aria-label=\"Git repository\">\n                            <i id=\"git-repository-button\" class=\"fa fa-github\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/cargo/edit/master/src/doc/src/reference/cargo-targets.md\" title=\"Suggest an edit\" aria-label=\"Suggest an edit\">\n                            <i id=\"git-edit-button\" class=\"fa fa-edit\"></i>\n                        </a>\n\n                    </div>\n                </div>\n\n                <div id=\"search-wrapper\" class=\"hidden\">\n                    <form id=\"searchbar-outer\" class=\"searchbar-outer\">\n                        <input type=\"search\" id=\"searchbar\" name=\"searchbar\" placeholder=\"Search this book ...\" aria-controls=\"searchresults-outer\" aria-describedby=\"searchresults-header\">\n                    </form>\n                    <div id=\"searchresults-outer\" class=\"searchresults-outer hidden\">\n                        <div id=\"searchresults-header\" class=\"searchresults-header\"></div>\n                        <ul id=\"searchresults\">\n                        </ul>\n                    </div>\n                </div>\n\n                <!-- Apply ARIA attributes after the sidebar and the sidebar toggle button are added to the DOM -->\n                <script>\n                    document.getElementById('sidebar-toggle').setAttribute('aria-expanded', sidebar === 'visible');\n                    document.getElementById('sidebar').setAttribute('aria-hidden', sidebar !== 'visible');\n                    Array.from(document.querySelectorAll('#sidebar a')).forEach(function(link) {\n                        link.setAttribute('tabIndex', sidebar === 'visible' ? 0 : -1);\n                    });\n                </script>\n\n                <div id=\"content\" class=\"content\">\n                    <main>\n                        <h1 id=\"cargo-targets\"><a class=\"header\" href=\"#cargo-targets\">Cargo Targets</a></h1>\n<p>Cargo packages consist of <em>targets</em> which correspond to source files which can\nbe compiled into a crate. Packages can have <a href=\"#library\">library</a>,\n<a href=\"#binaries\">binary</a>, <a href=\"#examples\">example</a>, <a href=\"#tests\">test</a>, and\n<a href=\"#benchmarks\">benchmark</a> targets. The list of targets can be configured in the\n<code class=\"hljs\">Cargo.toml</code> manifest, often <a href=\"#target-auto-discovery\">inferred automatically</a>\nby the <a href=\"../guide/project-layout.html\">directory layout</a> of the source files.</p>\n<p>See <a href=\"#configuring-a-target\">Configuring a target</a> below for details on\nconfiguring the settings for a target.</p>\n<h2 id=\"library\"><a class=\"header\" href=\"#library\">Library</a></h2>\n<p>The library target defines a “library” that can be used and linked by other\nlibraries and executables. The filename defaults to <code class=\"hljs\">src/lib.rs</code>, and the name\nof the library defaults to the name of the package, with any dashes replaced\nwith underscores. A package can have only one library. The settings for the\nlibrary can be <a href=\"#configuring-a-target\">customized</a> in the <code class=\"hljs\">[lib]</code> table in <code class=\"hljs\">Cargo.toml</code>.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-comment\"># Example of customizing the library in Cargo.toml.</span>\n<span class=\"hljs-section\">[lib]</span>\n<span class=\"hljs-attr\">crate-type</span> = [<span class=\"hljs-string\">\"cdylib\"</span>]\n<span class=\"hljs-attr\">bench</span> = <span class=\"hljs-literal\">false</span>\n</code></pre>\n<h2 id=\"binaries\"><a class=\"header\" href=\"#binaries\">Binaries</a></h2>\n<p>Binary targets are executable programs that can be run after being compiled.\nThe default binary filename is <code class=\"hljs\">src/main.rs</code>, which defaults to the name of\nthe package. Additional binaries are stored in the <a href=\"../guide/project-layout.html\"><code class=\"hljs\">src/bin/</code>\ndirectory</a>. The settings for each binary can be <a href=\"#configuring-a-target\">customized</a>\nin the <code class=\"hljs\">[[bin]]</code> tables in <code class=\"hljs\">Cargo.toml</code>.</p>\n<p>Binaries can use the public API of the package’s library. They are also linked\nwith the <a href=\"specifying-dependencies.html\"><code class=\"hljs\">[dependencies]</code></a> defined in <code class=\"hljs\">Cargo.toml</code>.</p>\n<p>You can run individual binaries with the <a href=\"../commands/cargo-run.html\"><code class=\"hljs\">cargo run</code></a> command with the <code class=\"hljs\">--bin &lt;bin-name&gt;</code> option. <a href=\"../commands/cargo-install.html\"><code class=\"hljs\">cargo install</code></a> can be used to copy the executable to a\ncommon location.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-comment\"># Example of customizing binaries in Cargo.toml.</span>\n<span class=\"hljs-section\">[[bin]]</span>\n<span class=\"hljs-attr\">name</span> = <span class=\"hljs-string\">\"cool-tool\"</span>\n<span class=\"hljs-attr\">test</span> = <span class=\"hljs-literal\">false</span>\n<span class=\"hljs-attr\">bench</span> = <span class=\"hljs-literal\">false</span>\n\n<span class=\"hljs-section\">[[bin]]</span>\n<span class=\"hljs-attr\">name</span> = <span class=\"hljs-string\">\"frobnicator\"</span>\n<span class=\"hljs-attr\">required-features</span> = [<span class=\"hljs-string\">\"frobnicate\"</span>]\n</code></pre>\n<h2 id=\"examples\"><a class=\"header\" href=\"#examples\">Examples</a></h2>\n<p>Files located under the <a href=\"../guide/project-layout.html\"><code class=\"hljs\">examples</code> directory</a> are example\nuses of the functionality provided by the library. When compiled, they are\nplaced in the <a href=\"../guide/build-cache.html\"><code class=\"hljs\">target/debug/examples</code> directory</a>.</p>\n<p>Examples can use the public API of the package’s library. They are also linked\nwith the <a href=\"specifying-dependencies.html\"><code class=\"hljs\">[dependencies]</code></a> and\n<a href=\"specifying-dependencies.html#development-dependencies\"><code class=\"hljs\">[dev-dependencies]</code></a> defined in <code class=\"hljs\">Cargo.toml</code>.</p>\n<p>By default, examples are executable binaries (with a <code class=\"hljs\">main()</code> function). You\ncan specify the <a href=\"#the-crate-type-field\"><code class=\"hljs\">crate-type</code> field</a> to make an example\nbe compiled as a library:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[[example]]</span>\n<span class=\"hljs-attr\">name</span> = <span class=\"hljs-string\">\"foo\"</span>\n<span class=\"hljs-attr\">crate-type</span> = [<span class=\"hljs-string\">\"staticlib\"</span>]\n</code></pre>\n<p>You can run individual executable examples with the <a href=\"../commands/cargo-run.html\"><code class=\"hljs\">cargo run</code></a> command with\nthe <code class=\"hljs\">--example &lt;example-name&gt;</code> option. Library examples can be built with\n<a href=\"../commands/cargo-build.html\"><code class=\"hljs\">cargo build</code></a> with the <code class=\"hljs\">--example &lt;example-name&gt;</code> option. <a href=\"../commands/cargo-install.html\"><code class=\"hljs\">cargo install</code></a>\nwith the <code class=\"hljs\">--example &lt;example-name&gt;</code> option can be used to copy executable\nbinaries to a common location. Examples are compiled by <a href=\"../commands/cargo-test.html\"><code class=\"hljs\">cargo test</code></a> by\ndefault to protect them from bit-rotting. Set <a href=\"#the-test-field\">the <code class=\"hljs\">test</code>\nfield</a> to <code class=\"hljs\">true</code> if you have <code class=\"hljs\">#[test]</code> functions in the\nexample that you want to run with <a href=\"../commands/cargo-test.html\"><code class=\"hljs\">cargo test</code></a>.</p>\n<h2 id=\"tests\"><a class=\"header\" href=\"#tests\">Tests</a></h2>\n<p>There are two styles of tests within a Cargo project:</p>\n<ul>\n<li><em>Unit tests</em> which are functions marked with the <a href=\"../../reference/attributes/testing.html#the-test-attribute\"><code class=\"hljs\">#[test]</code>\nattribute</a> located within your library or binaries (or any\ntarget enabled with <a href=\"#the-test-field\">the <code class=\"hljs\">test</code> field</a>). These tests have\naccess to private APIs located within the target they are defined in.</li>\n<li><em>Integration tests</em> which is a separate executable binary, also containing\n<code class=\"hljs\">#[test]</code> functions, which is linked with the project’s library and has\naccess to its <em>public</em> API.</li>\n</ul>\n<p>Tests are run with the <a href=\"../commands/cargo-test.html\"><code class=\"hljs\">cargo test</code></a> command. By default, Cargo and <code class=\"hljs\">rustc</code>\nuse the <a href=\"../../rustc/tests/index.html\">libtest harness</a> which is responsible for collecting functions\nannotated with the <a href=\"../../reference/attributes/testing.html#the-test-attribute\"><code class=\"hljs\">#[test]</code> attribute</a> and executing them in\nparallel, reporting the success and failure of each test. See <a href=\"#the-harness-field\">the <code class=\"hljs\">harness</code>\nfield</a> if you want to use a different harness or test\nstrategy.</p>\n<blockquote>\n<p><strong>Note</strong>: There is another special style of test in Cargo:\n<a href=\"../../rustdoc/documentation-tests.html\">documentation tests</a>.\nThey are handled by <code class=\"hljs\">rustdoc</code> and have a slightly different execution model.\nFor more information, please see <a href=\"../commands/cargo-test.html#documentation-tests\"><code class=\"hljs\">cargo test</code></a>.</p>\n</blockquote>\n<h3 id=\"integration-tests\"><a class=\"header\" href=\"#integration-tests\">Integration tests</a></h3>\n<p>Files located under the <a href=\"../guide/project-layout.html\"><code class=\"hljs\">tests</code> directory</a> are integration\ntests. When you run <a href=\"../commands/cargo-test.html\"><code class=\"hljs\">cargo test</code></a>, Cargo will compile each of these files as\na separate crate, and execute them.</p>\n<p>Integration tests can use the public API of the package’s library. They are\nalso linked with the <a href=\"specifying-dependencies.html\"><code class=\"hljs\">[dependencies]</code></a> and\n<a href=\"specifying-dependencies.html#development-dependencies\"><code class=\"hljs\">[dev-dependencies]</code></a> defined in <code class=\"hljs\">Cargo.toml</code>.</p>\n<p>If you want to share code among multiple integration tests, you can place it\nin a separate module such as <code class=\"hljs\">tests/common/mod.rs</code> and then put <code class=\"hljs\">mod common;</code>\nin each test to import it.</p>\n<p>Each integration test results in a separate executable binary, and <a href=\"../commands/cargo-test.html\"><code class=\"hljs\">cargo test</code></a> will run them serially. In some cases this can be inefficient, as it\ncan take longer to compile, and may not make full use of multiple CPUs when\nrunning the tests. If you have a lot of integration tests, you may want to\nconsider creating a single integration test, and split the tests into multiple\nmodules. The libtest harness will automatically find all of the <code class=\"hljs\">#[test]</code>\nannotated functions and run them in parallel. You can pass module names to\n<a href=\"../commands/cargo-test.html\"><code class=\"hljs\">cargo test</code></a> to only run the tests within that module.</p>\n<p>Binary targets are automatically built if there is an integration test. This\nallows an integration test to execute the binary to exercise and test its\nbehavior. The <code class=\"hljs\">CARGO_BIN_EXE_&lt;name&gt;</code> <a href=\"environment-variables.html#environment-variables-cargo-sets-for-crates\">environment variable</a> is set when the\nintegration test is built so that it can use the <a href=\"../../std/macro.env.html\"><code class=\"hljs\">env</code> macro</a> to locate the\nexecutable.</p>\n<h2 id=\"benchmarks\"><a class=\"header\" href=\"#benchmarks\">Benchmarks</a></h2>\n<p>Benchmarks provide a way to test the performance of your code using the\n<a href=\"../commands/cargo-bench.html\"><code class=\"hljs\">cargo bench</code></a> command. They follow the same structure as <a href=\"#tests\">tests</a>,\nwith each benchmark function annotated with the <code class=\"hljs\">#[bench]</code> attribute.\nSimilarly to tests:</p>\n<ul>\n<li>Benchmarks are placed in the <a href=\"../guide/project-layout.html\"><code class=\"hljs\">benches</code> directory</a>.</li>\n<li>Benchmark functions defined in libraries and binaries have access to the\n<em>private</em> API within the target they are defined in. Benchmarks in the\n<code class=\"hljs\">benches</code> directory may use the <em>public</em> API.</li>\n<li><a href=\"#the-bench-field\">The <code class=\"hljs\">bench</code> field</a> can be used to define which targets\nare benchmarked by default.</li>\n<li><a href=\"#the-harness-field\">The <code class=\"hljs\">harness</code> field</a> can be used to disable the\nbuilt-in harness.</li>\n</ul>\n<blockquote>\n<p><strong>Note</strong>: The <a href=\"../../unstable-book/library-features/test.html\"><code class=\"hljs\">#[bench]</code>\nattribute</a> is currently\nunstable and only available on the <a href=\"../../book/appendix-07-nightly-rust.html\">nightly channel</a>. There are some\npackages available on <a href=\"https://crates.io/keywords/benchmark\">crates.io</a> that\nmay help with running benchmarks on the stable channel, such as\n<a href=\"https://crates.io/crates/criterion\">Criterion</a>.</p>\n</blockquote>\n<h2 id=\"configuring-a-target\"><a class=\"header\" href=\"#configuring-a-target\">Configuring a target</a></h2>\n<p>All of the  <code class=\"hljs\">[lib]</code>, <code class=\"hljs\">[[bin]]</code>, <code class=\"hljs\">[[example]]</code>, <code class=\"hljs\">[[test]]</code>, and <code class=\"hljs\">[[bench]]</code>\nsections in <code class=\"hljs\">Cargo.toml</code> support similar configuration for specifying how a\ntarget should be built. The double-bracket sections like <code class=\"hljs\">[[bin]]</code> are\n<a href=\"https://toml.io/en/v1.0.0-rc.3#array-of-tables\">array-of-table of TOML</a>,\nwhich means you can write more than one <code class=\"hljs\">[[bin]]</code> section to make several\nexecutables in your crate. You can only specify one library, so <code class=\"hljs\">[lib]</code> is a\nnormal TOML table.</p>\n<p>The following is an overview of the TOML settings for each target, with each\nfield described in detail below.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[lib]</span>\n<span class=\"hljs-attr\">name</span> = <span class=\"hljs-string\">\"foo\"</span>           <span class=\"hljs-comment\"># The name of the target.</span>\n<span class=\"hljs-attr\">path</span> = <span class=\"hljs-string\">\"src/lib.rs\"</span>    <span class=\"hljs-comment\"># The source file of the target.</span>\n<span class=\"hljs-attr\">test</span> = <span class=\"hljs-literal\">true</span>            <span class=\"hljs-comment\"># Is tested by default.</span>\n<span class=\"hljs-attr\">doctest</span> = <span class=\"hljs-literal\">true</span>         <span class=\"hljs-comment\"># Documentation examples are tested by default.</span>\n<span class=\"hljs-attr\">bench</span> = <span class=\"hljs-literal\">true</span>           <span class=\"hljs-comment\"># Is benchmarked by default.</span>\n<span class=\"hljs-attr\">doc</span> = <span class=\"hljs-literal\">true</span>             <span class=\"hljs-comment\"># Is documented by default.</span>\n<span class=\"hljs-attr\">plugin</span> = <span class=\"hljs-literal\">false</span>         <span class=\"hljs-comment\"># Used as a compiler plugin (deprecated).</span>\n<span class=\"hljs-attr\">proc-macro</span> = <span class=\"hljs-literal\">false</span>     <span class=\"hljs-comment\"># Set to `true` for a proc-macro library.</span>\n<span class=\"hljs-attr\">harness</span> = <span class=\"hljs-literal\">true</span>         <span class=\"hljs-comment\"># Use libtest harness.</span>\n<span class=\"hljs-attr\">edition</span> = <span class=\"hljs-string\">\"2015\"</span>       <span class=\"hljs-comment\"># The edition of the target.</span>\n<span class=\"hljs-attr\">crate-type</span> = [<span class=\"hljs-string\">\"lib\"</span>]   <span class=\"hljs-comment\"># The crate types to generate.</span>\n<span class=\"hljs-attr\">required-features</span> = [] <span class=\"hljs-comment\"># Features required to build this target (N/A for lib).</span>\n</code></pre>\n<h3 id=\"the-name-field\"><a class=\"header\" href=\"#the-name-field\">The <code>name</code> field</a></h3>\n<p>The <code class=\"hljs\">name</code> field specifies the name of the target, which corresponds to the\nfilename of the artifact that will be generated. For a library, this is the\ncrate name that dependencies will use to reference it.</p>\n<p>For the library target, this defaults to the name of the package , with any\ndashes replaced with underscores. For the default binary (<code class=\"hljs\">src/main.rs</code>),\nit also defaults to the name of the package, with no replacement for dashes.\nFor <a href=\"#target-auto-discovery\">auto discovered</a> targets, it defaults to the\ndirectory or file name.</p>\n<p>This is required for all targets except <code class=\"hljs\">[lib]</code>.</p>\n<h3 id=\"the-path-field\"><a class=\"header\" href=\"#the-path-field\">The <code>path</code> field</a></h3>\n<p>The <code class=\"hljs\">path</code> field specifies where the source for the crate is located, relative\nto the <code class=\"hljs\">Cargo.toml</code> file.</p>\n<p>If not specified, the <a href=\"#target-auto-discovery\">inferred path</a> is used based on\nthe target name.</p>\n<h3 id=\"the-test-field\"><a class=\"header\" href=\"#the-test-field\">The <code>test</code> field</a></h3>\n<p>The <code class=\"hljs\">test</code> field indicates whether or not the target is tested by default by\n<a href=\"../commands/cargo-test.html\"><code class=\"hljs\">cargo test</code></a>. The default is <code class=\"hljs\">true</code> for lib, bins, and tests.</p>\n<blockquote>\n<p><strong>Note</strong>: Examples are built by <a href=\"../commands/cargo-test.html\"><code class=\"hljs\">cargo test</code></a> by default to ensure they\ncontinue to compile, but they are not <em>tested</em> by default. Setting <code class=\"hljs\">test = true</code> for an example will also build it as a test and run any\n<a href=\"../../reference/attributes/testing.html#the-test-attribute\"><code class=\"hljs\">#[test]</code></a> functions defined in the example.</p>\n</blockquote>\n<h3 id=\"the-doctest-field\"><a class=\"header\" href=\"#the-doctest-field\">The <code>doctest</code> field</a></h3>\n<p>The <code class=\"hljs\">doctest</code> field indicates whether or not <a href=\"../../rustdoc/documentation-tests.html\">documentation examples</a> are\ntested by default by <a href=\"../commands/cargo-test.html\"><code class=\"hljs\">cargo test</code></a>. This is only relevant for libraries, it\nhas no effect on other sections. The default is <code class=\"hljs\">true</code> for the library.</p>\n<h3 id=\"the-bench-field\"><a class=\"header\" href=\"#the-bench-field\">The <code>bench</code> field</a></h3>\n<p>The <code class=\"hljs\">bench</code> field indicates whether or not the target is benchmarked by\ndefault by <a href=\"../commands/cargo-bench.html\"><code class=\"hljs\">cargo bench</code></a>. The default is <code class=\"hljs\">true</code> for lib, bins, and\nbenchmarks.</p>\n<h3 id=\"the-doc-field\"><a class=\"header\" href=\"#the-doc-field\">The <code>doc</code> field</a></h3>\n<p>The <code class=\"hljs\">doc</code> field indicates whether or not the target is included in the\ndocumentation generated by <a href=\"../commands/cargo-doc.html\"><code class=\"hljs\">cargo doc</code></a> by default. The default is <code class=\"hljs\">true</code> for\nlibraries and binaries.</p>\n<blockquote>\n<p><strong>Note</strong>: The binary will be skipped if its name is the same as the lib\ntarget.</p>\n</blockquote>\n<h3 id=\"the-plugin-field\"><a class=\"header\" href=\"#the-plugin-field\">The <code>plugin</code> field</a></h3>\n<p>This field is used for <code class=\"hljs\">rustc</code> plugins, which are being deprecated.</p>\n<h3 id=\"the-proc-macro-field\"><a class=\"header\" href=\"#the-proc-macro-field\">The <code>proc-macro</code> field</a></h3>\n<p>The <code class=\"hljs\">proc-macro</code> field indicates that the library is a <a href=\"../../book/ch19-06-macros.html\">procedural macro</a>\n(<a href=\"../../reference/procedural-macros.html\">reference</a>). This is only valid for the <code class=\"hljs\">[lib]</code>\ntarget.</p>\n<h3 id=\"the-harness-field\"><a class=\"header\" href=\"#the-harness-field\">The <code>harness</code> field</a></h3>\n<p>The <code class=\"hljs\">harness</code> field indicates that the <a href=\"../../rustc/command-line-arguments.html#option-test\"><code class=\"hljs\">--test</code> flag</a> will be passed to\n<code class=\"hljs\">rustc</code> which will automatically include the libtest library which is the\ndriver for collecting and running tests marked with the <a href=\"../../reference/attributes/testing.html#the-test-attribute\"><code class=\"hljs\">#[test]</code>\nattribute</a> or benchmarks with the <code class=\"hljs\">#[bench]</code> attribute. The\ndefault is <code class=\"hljs\">true</code> for all targets.</p>\n<p>If set to <code class=\"hljs\">false</code>, then you are responsible for defining a <code class=\"hljs\">main()</code> function\nto run tests and benchmarks.</p>\n<p>Tests have the <a href=\"../../reference/conditional-compilation.html#test\"><code class=\"hljs\">cfg(test)</code> conditional expression</a> enabled whether\nor not the harness is enabled.</p>\n<h3 id=\"the-edition-field\"><a class=\"header\" href=\"#the-edition-field\">The <code>edition</code> field</a></h3>\n<p>The <code class=\"hljs\">edition</code> field defines the <a href=\"../../edition-guide/index.html\">Rust edition</a> the target will use. If not\nspecified, it defaults to the <a href=\"manifest.html#the-edition-field\"><code class=\"hljs\">edition</code> field</a> for the\n<code class=\"hljs\">[package]</code>. This field should usually not be set, and is only intended for\nadvanced scenarios such as incrementally transitioning a large package to a\nnew edition.</p>\n<h3 id=\"the-crate-type-field\"><a class=\"header\" href=\"#the-crate-type-field\">The <code>crate-type</code> field</a></h3>\n<p>The <code class=\"hljs\">crate-type</code> field defines the <a href=\"../../reference/linkage.html\">crate types</a> that will be generated by the\ntarget. It is an array of strings, allowing you to specify multiple crate\ntypes for a single target. This can only be specified for libraries and\nexamples. Binaries, tests, and benchmarks are always the “bin” crate type. The\ndefaults are:</p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Target</th><th>Crate Type</th></tr></thead><tbody>\n<tr><td>Normal library</td><td><code class=\"hljs\">\"lib\"</code></td></tr>\n<tr><td>Proc-macro library</td><td><code class=\"hljs\">\"proc-macro\"</code></td></tr>\n<tr><td>Example</td><td><code class=\"hljs\">\"bin\"</code></td></tr>\n</tbody></table>\n</div>\n<p>The available options are <code class=\"hljs\">bin</code>, <code class=\"hljs\">lib</code>, <code class=\"hljs\">rlib</code>, <code class=\"hljs\">dylib</code>, <code class=\"hljs\">cdylib</code>,\n<code class=\"hljs\">staticlib</code>, and <code class=\"hljs\">proc-macro</code>. You can read more about the different crate\ntypes in the <a href=\"../../reference/linkage.html\">Rust Reference Manual</a>.</p>\n<h3 id=\"the-required-features-field\"><a class=\"header\" href=\"#the-required-features-field\">The <code>required-features</code> field</a></h3>\n<p>The <code class=\"hljs\">required-features</code> field specifies which <a href=\"features.html\">features</a> the target needs in\norder to be built. If any of the required features are not enabled, the\ntarget will be skipped. This is only relevant for the <code class=\"hljs\">[[bin]]</code>, <code class=\"hljs\">[[bench]]</code>,\n<code class=\"hljs\">[[test]]</code>, and <code class=\"hljs\">[[example]]</code> sections, it has no effect on <code class=\"hljs\">[lib]</code>.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[features]</span>\n<span class=\"hljs-comment\"># ...</span>\n<span class=\"hljs-attr\">postgres</span> = []\n<span class=\"hljs-attr\">sqlite</span> = []\n<span class=\"hljs-attr\">tools</span> = []\n\n<span class=\"hljs-section\">[[bin]]</span>\n<span class=\"hljs-attr\">name</span> = <span class=\"hljs-string\">\"my-pg-tool\"</span>\n<span class=\"hljs-attr\">required-features</span> = [<span class=\"hljs-string\">\"postgres\"</span>, <span class=\"hljs-string\">\"tools\"</span>]\n</code></pre>\n<h2 id=\"target-auto-discovery\"><a class=\"header\" href=\"#target-auto-discovery\">Target auto-discovery</a></h2>\n<p>By default, Cargo automatically determines the targets to build based on the\n<a href=\"../guide/project-layout.html\">layout of the files</a> on the filesystem. The target\nconfiguration tables, such as <code class=\"hljs\">[lib]</code>, <code class=\"hljs\">[[bin]]</code>, <code class=\"hljs\">[[test]]</code>, <code class=\"hljs\">[[bench]]</code>, or\n<code class=\"hljs\">[[example]]</code>, can be used to add additional targets that don’t follow the\nstandard directory layout.</p>\n<p>The automatic target discovery can be disabled so that only manually\nconfigured targets will be built. Setting the keys <code class=\"hljs\">autobins</code>, <code class=\"hljs\">autoexamples</code>,\n<code class=\"hljs\">autotests</code>, or <code class=\"hljs\">autobenches</code> to <code class=\"hljs\">false</code> in the <code class=\"hljs\">[package]</code> section will\ndisable auto-discovery of the corresponding target type.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-comment\"># ...</span>\n<span class=\"hljs-attr\">autobins</span> = <span class=\"hljs-literal\">false</span>\n<span class=\"hljs-attr\">autoexamples</span> = <span class=\"hljs-literal\">false</span>\n<span class=\"hljs-attr\">autotests</span> = <span class=\"hljs-literal\">false</span>\n<span class=\"hljs-attr\">autobenches</span> = <span class=\"hljs-literal\">false</span>\n</code></pre>\n<p>Disabling automatic discovery should only be needed for specialized\nsituations. For example, if you have a library where you want a <em>module</em> named\n<code class=\"hljs\">bin</code>, this would present a problem because Cargo would usually attempt to\ncompile anything in the <code class=\"hljs\">bin</code> directory as an executable. Here is a sample\nlayout of this scenario:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">├── Cargo.toml\n└── src\n &nbsp;&nbsp; ├── lib.rs\n &nbsp;&nbsp; └── bin\n &nbsp;&nbsp;  &nbsp;&nbsp; └── mod.rs\n</code></pre>\n<p>To prevent Cargo from inferring <code class=\"hljs\">src/bin/mod.rs</code> as an executable, set\n<code class=\"hljs\">autobins = false</code> in <code class=\"hljs\">Cargo.toml</code> to disable auto-discovery:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-comment\"># …</span>\n<span class=\"hljs-attr\">autobins</span> = <span class=\"hljs-literal\">false</span>\n</code></pre>\n<blockquote>\n<p><strong>Note</strong>: For packages with the 2015 edition, the default for auto-discovery\nis <code class=\"hljs\">false</code> if at least one target is manually defined in <code class=\"hljs\">Cargo.toml</code>.\nBeginning with the 2018 edition, the default is always <code class=\"hljs\">true</code>.</p>\n</blockquote>\n\n                    </main>\n\n                    <nav class=\"nav-wrapper\" aria-label=\"Page navigation\">\n                        <!-- Mobile navigation buttons -->\n                            <a rel=\"prev\" href=\"../reference/manifest.html\" class=\"mobile-nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                                <i class=\"fa fa-angle-left\"></i>\n                            </a>\n\n                            <a rel=\"next prefetch\" href=\"../reference/workspaces.html\" class=\"mobile-nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                                <i class=\"fa fa-angle-right\"></i>\n                            </a>\n\n                        <div style=\"clear: both\"></div>\n                    </nav>\n                </div>\n            </div>\n\n            <nav class=\"nav-wide-wrapper\" aria-label=\"Page navigation\">\n                    <a rel=\"prev\" href=\"../reference/manifest.html\" class=\"nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                        <i class=\"fa fa-angle-left\"></i>\n                    </a>\n\n                    <a rel=\"next prefetch\" href=\"../reference/workspaces.html\" class=\"nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                        <i class=\"fa fa-angle-right\"></i>\n                    </a>\n            </nav>\n\n        </div>\n\n\n\n\n        <script>\n            window.playground_copyable = true;\n        </script>\n\n\n        <script src=\"../elasticlunr.min.js\"></script>\n        <script src=\"../mark.min.js\"></script>\n        <script src=\"../searcher.js\"></script>\n\n        <script src=\"../clipboard.min.js\"></script>\n        <script src=\"../highlight.js\"></script>\n        <script src=\"../book.js\"></script>\n\n        <!-- Custom JS scripts -->\n\n\n    </div>\n    \n\n</body></html>",
	"crawlDate": "2024-07-28T05:09:21.431Z"
}