{
	"title": "CommandExt in std::os::windows::process - Rust",
	"url": "https://doc.rust-lang.org/stable/std/os/windows/process/trait.CommandExt.html#tymethod.raw_arg",
	"markdown": "# CommandExt in std::os::windows::process - Rust\n\n```\npub trait CommandExt: Sealed {\n    // Required methods\n    fn creation_flags(&mut self, flags: u32) -> &mut Command;\n    fn force_quotes(&mut self, enabled: bool) -> &mut Command;\n    fn raw_arg<S: AsRef<OsStr>>(\n        &mut self,\n        text_to_append_as_is: S,\n    ) -> &mut Command;\n    fn async_pipes(&mut self, always_async: bool) -> &mut Command;\n    unsafe fn raw_attribute<T: Copy + Send + Sync + 'static>(\n        &mut self,\n        attribute: usize,\n        value: T,\n    ) -> &mut Command;\n}\n```\n\nAvailable on **Windows** only.\n\nExpand description\n\nWindows-specific extensions to the [`process::Command`](../../../process/struct.Command.html \"struct std::process::Command\") builder.\n\nThis trait is sealed: it cannot be implemented outside the standard library. This is so that future additional methods are not breaking changes.\n\n1.16.0 Â· [source](about:blank/src/std/os/windows/process.rs.html#182)\n\nSets the [process creation flags](https://docs.microsoft.com/en-us/windows/win32/procthread/process-creation-flags) to be passed to `CreateProcess`.\n\nThese will always be ORed with `CREATE_UNICODE_ENVIRONMENT`.\n\n[source](about:blank/src/std/os/windows/process.rs.html#198)\n\nðŸ”¬This is a nightly-only experimental API. (`windows_process_extensions_force_quotes`Â [#82227](https://github.com/rust-lang/rust/issues/82227))\n\nForces all arguments to be wrapped in quote (`\"`) characters.\n\nThis is useful for passing arguments to [MSYS2/Cygwin](https://github.com/msys2/MSYS2-packages/issues/2176) based executables: these programs will expand unquoted arguments containing wildcard characters (`?` and `*`) by searching for any file paths matching the wildcard pattern.\n\nAdding quotes has no effect when passing arguments to programs that use [msvcrt](https://msdn.microsoft.com/en-us/library/17w5ykft.aspx). This includes programs built with both MinGW and MSVC.\n\n1.62.0 Â· [source](about:blank/src/std/os/windows/process.rs.html#258)\n\nAppend literal text to the command line without any quoting or escaping.\n\nThis is useful for passing arguments to applications that donâ€™t follow the standard C run-time escaping rules, such as `cmd.exe /c`.\n\n##### [Â§](#batch-files)Batch files\n\nNote the `cmd /c` command line has slightly different escaping rules than batch files themselves. If possible, it may be better to write complex arguments to a temporary `.bat` file, with appropriate escaping, and simply run that using:\n\n```\nlet output = Command::new(\"cmd\").args([\"/c\", &format!(\"\\\"{temp_bat_file}\\\"\")]).output();\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::process::Command;%0A++++let+temp_bat_file+=+%22%22;%0A++++%23%5Ballow(unused)%5D%0A++++let+output+=+Command::new(%22cmd%22).args(%5B%22/c%22,+%26format!(%22%5C%22%7Btemp_bat_file%7D%5C%22%22)%5D).output();%0A%7D&edition=2021)\n\n##### [Â§](#example)Example\n\nRun a batch script using both trusted and untrusted arguments.\n\n```\n#[cfg(windows)]\n// `my_script_path` is a path to known bat file.\n// `user_name` is an untrusted name given by the user.\nfn run_script(\n    my_script_path: &str,\n    user_name: &str,\n) -> Result<std::process::Output, std::io::Error> {\n    use std::io::{Error, ErrorKind};\n    use std::os::windows::process::CommandExt;\n    use std::process::Command;\n\n    // Create the command line, making sure to quote the script path.\n    // This assumes the fixed arguments have been tested to work with the script we're using.\n    let mut cmd_args = format!(r#\"\"{my_script_path}\" \"--features=[a,b,c]\"\"#);\n\n    // Make sure the user name is safe. In particular we need to be\n    // cautious of ascii symbols that cmd may interpret specially.\n    // Here we only allow alphanumeric characters.\n    if !user_name.chars().all(|c| c.is_alphanumeric()) {\n        return Err(Error::new(ErrorKind::InvalidInput, \"invalid user name\"));\n    }\n\n    // now we have validated the user name, let's add that too.\n    cmd_args.push_str(\" --user \");\n    cmd_args.push_str(user_name);\n\n    // call cmd.exe and return the output\n    Command::new(\"cmd.exe\")\n        .arg(\"/c\")\n        // surround the entire command in an extra pair of quotes, as required by cmd.exe.\n        .raw_arg(&format!(\"\\\"{cmd_args}\\\"\"))\n        .output()\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(windows)%5D%0A++++//+%60my_script_path%60+is+a+path+to+known+bat+file.%0A++++//+%60user_name%60+is+an+untrusted+name+given+by+the+user.%0A++++fn+run_script(%0A++++++++my_script_path:+%26str,%0A++++++++user_name:+%26str,%0A++++)+-%3E+Result%3Cstd::process::Output,+std::io::Error%3E+%7B%0A++++++++use+std::io::%7BError,+ErrorKind%7D;%0A++++++++use+std::os::windows::process::CommandExt;%0A++++++++use+std::process::Command;%0A++++%0A++++++++//+Create+the+command+line,+making+sure+to+quote+the+script+path.%0A++++++++//+This+assumes+the+fixed+arguments+have+been+tested+to+work+with+the+script+we%27re+using.%0A++++++++let+mut+cmd_args+=+format!(r%23%22%22%7Bmy_script_path%7D%22+%22--features=%5Ba,b,c%5D%22%22%23);%0A++++%0A++++++++//+Make+sure+the+user+name+is+safe.+In+particular+we+need+to+be%0A++++++++//+cautious+of+ascii+symbols+that+cmd+may+interpret+specially.%0A++++++++//+Here+we+only+allow+alphanumeric+characters.%0A++++++++if+!user_name.chars().all(%7Cc%7C+c.is_alphanumeric())+%7B%0A++++++++++++return+Err(Error::new(ErrorKind::InvalidInput,+%22invalid+user+name%22));%0A++++++++%7D%0A++++%0A++++++++//+now+we+have+validated+the+user+name,+let%27s+add+that+too.%0A++++++++cmd_args.push_str(%22+--user+%22);%0A++++++++cmd_args.push_str(user_name);%0A++++%0A++++++++//+call+cmd.exe+and+return+the+output%0A++++++++Command::new(%22cmd.exe%22)%0A++++++++++++.arg(%22/c%22)%0A++++++++++++//+surround+the+entire+command+in+an+extra+pair+of+quotes,+as+required+by+cmd.exe.%0A++++++++++++.raw_arg(%26format!(%22%5C%22%7Bcmd_args%7D%5C%22%22))%0A++++++++++++.output()%0A++++%7D%0A%7D&edition=2021)\n\n[source](about:blank/src/std/os/windows/process.rs.html#289)\n\nðŸ”¬This is a nightly-only experimental API. (`windows_process_extensions_async_pipes`Â [#98289](https://github.com/rust-lang/rust/issues/98289))\n\nWhen [`process::Command`](../../../process/struct.Command.html \"struct std::process::Command\") creates pipes, request that our side is always async.\n\nBy default [`process::Command`](../../../process/struct.Command.html \"struct std::process::Command\") may choose to use pipes where both ends are opened for synchronous read or write operations. By using `async_pipes(true)`, this behavior is overridden so that our side is always async.\n\nThis is important because if doing async I/O a pipe or a file has to be opened for async access.\n\nThe end of the pipe sent to the child process will always be synchronous regardless of this option.\n\n##### [Â§](#example-1)Example\n\n```\n#![feature(windows_process_extensions_async_pipes)]\nuse std::os::windows::process::CommandExt;\nuse std::process::{Command, Stdio};\n\n\nCommand::new(program)\n    .async_pipes(true)\n    .stdin(Stdio::piped())\n    .stdout(Stdio::piped())\n    .stderr(Stdio::piped());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(windows_process_extensions_async_pipes)%5D%0Afn+main()+%7B%0A++++use+std::os::windows::process::CommandExt;%0A++++use+std::process::%7BCommand,+Stdio%7D;%0A++++%0A++++let+program+=+%22%22;%0A++++%0A++++Command::new(program)%0A++++++++.async_pipes(true)%0A++++++++.stdin(Stdio::piped())%0A++++++++.stdout(Stdio::piped())%0A++++++++.stderr(Stdio::piped());%0A%7D&version=nightly&edition=2021)\n\n[source](about:blank/src/std/os/windows/process.rs.html#359-363)\n\nðŸ”¬This is a nightly-only experimental API. (`windows_process_extensions_raw_attribute`Â [#114854](https://github.com/rust-lang/rust/issues/114854))\n\nSet a raw attribute on the command, providing extended configuration options for Windows processes.\n\nThis method allows you to specify custom attributes for a child process on Windows systems using raw attribute values. Raw attributes provide extended configurability for process creation, but their usage can be complex and potentially unsafe.\n\nThe `attribute` parameter specifies the raw attribute to be set, while the `value` parameter holds the value associated with that attribute. Please refer to the [`windows-rs` documentation](https://microsoft.github.io/windows-docs-rs/doc/windows/) or the [Win32 API documentation](https://learn.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-updateprocthreadattribute) for detailed information about available attributes and their meanings.\n\n##### [Â§](#note)Note\n\nThe maximum number of raw attributes is the value of [`u32::MAX`](about:blank/primitive.u32.html#associatedconstant.MAX \"associated constant u32::MAX\"). If this limit is exceeded, the call to [`process::Command::spawn`](about:blank/process/struct.Command.html#method.spawn \"method std::process::Command::spawn\") will return an `Error` indicating that the maximum number of attributes has been exceeded.\n\n##### [Â§](#safety)Safety\n\nThe usage of raw attributes is potentially unsafe and should be done with caution. Incorrect attribute values or improper configuration can lead to unexpected behavior or errors.\n\n##### [Â§](#example-2)Example\n\nThe following example demonstrates how to create a child process with a specific parent process ID using a raw attribute.\n\n```\n#![feature(windows_process_extensions_raw_attribute)]\nuse std::os::windows::{process::CommandExt, io::AsRawHandle};\nuse std::process::Command;\n\n\nlet parent = Command::new(\"cmd\").spawn()?;\n\nlet mut child_cmd = Command::new(\"cmd\");\n\nconst PROC_THREAD_ATTRIBUTE_PARENT_PROCESS: usize = 0x00020000;\n\nunsafe {\n    child_cmd.raw_attribute(PROC_THREAD_ATTRIBUTE_PARENT_PROCESS, parent.as_raw_handle() as isize);\n}\n\nlet mut child = child_cmd.spawn()?;\n\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(windows_process_extensions_raw_attribute)%5D%0Afn+main()+%7B+fn+_inner()+-%3E+Result%3C(),+impl+core::fmt::Debug%3E+%7B%0A++++use+std::os::windows::%7Bprocess::CommandExt,+io::AsRawHandle%7D;%0A++++use+std::process::Command;%0A++++%0A++++struct+ProcessDropGuard(std::process::Child);%0A++++impl+Drop+for+ProcessDropGuard+%7B%0A++++++++fn+drop(%26mut+self)+%7B%0A++++++++++++let+_+=+self.0.kill();%0A++++++++%7D%0A++++%7D%0A++++%0A++++let+parent+=+Command::new(%22cmd%22).spawn()?;%0A++++%0A++++let+mut+child_cmd+=+Command::new(%22cmd%22);%0A++++%0A++++const+PROC_THREAD_ATTRIBUTE_PARENT_PROCESS:+usize+=+0x00020000;%0A++++%0A++++unsafe+%7B%0A++++++++child_cmd.raw_attribute(PROC_THREAD_ATTRIBUTE_PARENT_PROCESS,+parent.as_raw_handle()+as+isize);%0A++++%7D%0A++++%0A++++let+parent+=+ProcessDropGuard(parent);%0A++++%0A++++let+mut+child+=+child_cmd.spawn()?;%0A++++%0A++++child.kill()?;%0A++++Ok::%3C(),+std::io::Error%3E(())%0A%7D+_inner().unwrap()+%7D&version=nightly&edition=2021)\n\n##### [Â§](#safety-note)Safety Note\n\nRemember that improper use of raw attributes can lead to undefined behavior or security vulnerabilities. Always consult the documentation and ensure proper attribute values are used.\n\n1.16.0 Â· [source](about:blank/src/std/os/windows/process.rs.html#367-400)[Â§](#impl-CommandExt-for-Command)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Windows-specific extensions to the `process::Command` builder.\"><title>CommandExt in std::os::windows::process - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../../../\" data-static-root-path=\"../../../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc trait\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">CommandExt</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">CommandExt</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#required-methods\">Required Methods</a></h3><ul class=\"block\"><li><a href=\"#tymethod.async_pipes\">async_pipes</a></li><li><a href=\"#tymethod.creation_flags\">creation_flags</a></li><li><a href=\"#tymethod.force_quotes\">force_quotes</a></li><li><a href=\"#tymethod.raw_arg\">raw_arg</a></li><li><a href=\"#tymethod.raw_attribute\">raw_attribute</a></li></ul><h3><a href=\"#object-safety\">Object Safety</a></h3><h3><a href=\"#implementors\">Implementors</a></h3></section><h2><a href=\"index.html\">In std::os::windows::process</a></h2><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.ChildExt.html\">ChildExt</a></li><li><a href=\"trait.CommandExt.html\">CommandExt</a></li><li><a href=\"trait.ExitCodeExt.html\">ExitCodeExt</a></li><li><a href=\"trait.ExitStatusExt.html\">ExitStatusExt</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type â€˜Sâ€™ or â€˜/â€™ to search, â€˜?â€™ for more optionsâ€¦\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Trait <a href=\"../../../index.html\">std</a>::<wbr><a href=\"../../index.html\">os</a>::<wbr><a href=\"../index.html\">windows</a>::<wbr><a href=\"index.html\">process</a>::<wbr><a class=\"trait\" href=\"#\">CommandExt</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.16.0\">1.16.0</span> Â· <a class=\"src\" href=\"../../../../src/std/os/windows/process.rs.html#175-364\">source</a> Â· <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>âˆ’</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub trait CommandExt: Sealed {\n    // Required methods\n    fn <a href=\"#tymethod.creation_flags\" class=\"fn\">creation_flags</a>(&amp;mut self, flags: <a class=\"primitive\" href=\"../../../primitive.u32.html\">u32</a>) -&gt; &amp;mut <a class=\"struct\" href=\"../../../process/struct.Command.html\" title=\"struct std::process::Command\">Command</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.force_quotes\" class=\"fn\">force_quotes</a>(&amp;mut self, enabled: <a class=\"primitive\" href=\"../../../primitive.bool.html\">bool</a>) -&gt; &amp;mut <a class=\"struct\" href=\"../../../process/struct.Command.html\" title=\"struct std::process::Command\">Command</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.raw_arg\" class=\"fn\">raw_arg</a>&lt;S: <a class=\"trait\" href=\"../../../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../../../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;&gt;(\n        &amp;mut self,\n        text_to_append_as_is: S,\n    ) -&gt; &amp;mut <a class=\"struct\" href=\"../../../process/struct.Command.html\" title=\"struct std::process::Command\">Command</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.async_pipes\" class=\"fn\">async_pipes</a>(&amp;mut self, always_async: <a class=\"primitive\" href=\"../../../primitive.bool.html\">bool</a>) -&gt; &amp;mut <a class=\"struct\" href=\"../../../process/struct.Command.html\" title=\"struct std::process::Command\">Command</a>;\n<span class=\"item-spacer\"></span>    unsafe fn <a href=\"#tymethod.raw_attribute\" class=\"fn\">raw_attribute</a>&lt;T: <a class=\"trait\" href=\"../../../marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a> + <a class=\"trait\" href=\"../../../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> + <a class=\"trait\" href=\"../../../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> + 'static&gt;(\n        &amp;mut self,\n        attribute: <a class=\"primitive\" href=\"../../../primitive.usize.html\">usize</a>,\n        value: T,\n    ) -&gt; &amp;mut <a class=\"struct\" href=\"../../../process/struct.Command.html\" title=\"struct std::process::Command\">Command</a>;\n}</code></pre><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Windows</strong> only.</div></span><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Windows-specific extensions to the <a href=\"../../../process/struct.Command.html\" title=\"struct std::process::Command\"><code>process::Command</code></a> builder.</p>\n<p>This trait is sealed: it cannot be implemented outside the standard library.\nThis is so that future additional methods are not breaking changes.</p>\n</div></details><h2 id=\"required-methods\" class=\"section-header\">Required Methods<a href=\"#required-methods\" class=\"anchor\">Â§</a></h2><div class=\"methods\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.creation_flags\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.16.0\">1.16.0</span> Â· <a class=\"src\" href=\"../../../../src/std/os/windows/process.rs.html#182\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.creation_flags\" class=\"fn\">creation_flags</a>(&amp;mut self, flags: <a class=\"primitive\" href=\"../../../primitive.u32.html\">u32</a>) -&gt; &amp;mut <a class=\"struct\" href=\"../../../process/struct.Command.html\" title=\"struct std::process::Command\">Command</a></h4></section></summary><div class=\"docblock\"><p>Sets the <a href=\"https://docs.microsoft.com/en-us/windows/win32/procthread/process-creation-flags\">process creation flags</a> to be passed to <code>CreateProcess</code>.</p>\n<p>These will always be ORed with <code>CREATE_UNICODE_ENVIRONMENT</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.force_quotes\" class=\"method\"><a class=\"src rightside\" href=\"../../../../src/std/os/windows/process.rs.html#198\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.force_quotes\" class=\"fn\">force_quotes</a>(&amp;mut self, enabled: <a class=\"primitive\" href=\"../../../primitive.bool.html\">bool</a>) -&gt; &amp;mut <a class=\"struct\" href=\"../../../process/struct.Command.html\" title=\"struct std::process::Command\">Command</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>windows_process_extensions_force_quotes</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/82227\">#82227</a>)</span></div></span></summary><div class=\"docblock\"><p>Forces all arguments to be wrapped in quote (<code>\"</code>) characters.</p>\n<p>This is useful for passing arguments to <a href=\"https://github.com/msys2/MSYS2-packages/issues/2176\">MSYS2/Cygwin</a> based\nexecutables: these programs will expand unquoted arguments containing\nwildcard characters (<code>?</code> and <code>*</code>) by searching for any file paths\nmatching the wildcard pattern.</p>\n<p>Adding quotes has no effect when passing arguments to programs\nthat use <a href=\"https://msdn.microsoft.com/en-us/library/17w5ykft.aspx\">msvcrt</a>. This includes programs built with both\nMinGW and MSVC.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.raw_arg\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.62.0\">1.62.0</span> Â· <a class=\"src\" href=\"../../../../src/std/os/windows/process.rs.html#258\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.raw_arg\" class=\"fn\">raw_arg</a>&lt;S: <a class=\"trait\" href=\"../../../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../../../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;&gt;(&amp;mut self, text_to_append_as_is: S) -&gt; &amp;mut <a class=\"struct\" href=\"../../../process/struct.Command.html\" title=\"struct std::process::Command\">Command</a></h4></section></summary><div class=\"docblock\"><p>Append literal text to the command line without any quoting or escaping.</p>\n<p>This is useful for passing arguments to applications that donâ€™t follow\nthe standard C run-time escaping rules, such as <code>cmd.exe /c</code>.</p>\n<h5 id=\"batch-files\"><a class=\"doc-anchor\" href=\"#batch-files\">Â§</a>Batch files</h5>\n<p>Note the <code>cmd /c</code> command line has slightly different escaping rules than batch files\nthemselves. If possible, it may be better to write complex arguments to a temporary\n<code>.bat</code> file, with appropriate escaping, and simply run that using:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>output = Command::new(<span class=\"string\">\"cmd\"</span>).args([<span class=\"string\">\"/c\"</span>, <span class=\"kw-2\">&amp;</span><span class=\"macro\">format!</span>(<span class=\"string\">\"\\\"{temp_bat_file}\\\"\"</span>)]).output();</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::process::Command;%0A++++let+temp_bat_file+=+%22%22;%0A++++%23%5Ballow(unused)%5D%0A++++let+output+=+Command::new(%22cmd%22).args(%5B%22/c%22,+%26format!(%22%5C%22%7Btemp_bat_file%7D%5C%22%22)%5D).output();%0A%7D&amp;edition=2021\">Run</a></div>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">Â§</a>Example</h5>\n<p>Run a batch script using both trusted and untrusted arguments.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#[cfg(windows)]\n</span><span class=\"comment\">// `my_script_path` is a path to known bat file.\n// `user_name` is an untrusted name given by the user.\n</span><span class=\"kw\">fn </span>run_script(\n    my_script_path: <span class=\"kw-2\">&amp;</span>str,\n    user_name: <span class=\"kw-2\">&amp;</span>str,\n) -&gt; <span class=\"prelude-ty\">Result</span>&lt;std::process::Output, std::io::Error&gt; {\n    <span class=\"kw\">use </span>std::io::{Error, ErrorKind};\n    <span class=\"kw\">use </span>std::os::windows::process::CommandExt;\n    <span class=\"kw\">use </span>std::process::Command;\n\n    <span class=\"comment\">// Create the command line, making sure to quote the script path.\n    // This assumes the fixed arguments have been tested to work with the script we're using.\n    </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>cmd_args = <span class=\"macro\">format!</span>(<span class=\"string\">r#\"\"{my_script_path}\" \"--features=[a,b,c]\"\"#</span>);\n\n    <span class=\"comment\">// Make sure the user name is safe. In particular we need to be\n    // cautious of ascii symbols that cmd may interpret specially.\n    // Here we only allow alphanumeric characters.\n    </span><span class=\"kw\">if </span>!user_name.chars().all(|c| c.is_alphanumeric()) {\n        <span class=\"kw\">return </span><span class=\"prelude-val\">Err</span>(Error::new(ErrorKind::InvalidInput, <span class=\"string\">\"invalid user name\"</span>));\n    }\n\n    <span class=\"comment\">// now we have validated the user name, let's add that too.\n    </span>cmd_args.push_str(<span class=\"string\">\" --user \"</span>);\n    cmd_args.push_str(user_name);\n\n    <span class=\"comment\">// call cmd.exe and return the output\n    </span>Command::new(<span class=\"string\">\"cmd.exe\"</span>)\n        .arg(<span class=\"string\">\"/c\"</span>)\n        <span class=\"comment\">// surround the entire command in an extra pair of quotes, as required by cmd.exe.\n        </span>.raw_arg(<span class=\"kw-2\">&amp;</span><span class=\"macro\">format!</span>(<span class=\"string\">\"\\\"{cmd_args}\\\"\"</span>))\n        .output()\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(windows)%5D%0A++++//+%60my_script_path%60+is+a+path+to+known+bat+file.%0A++++//+%60user_name%60+is+an+untrusted+name+given+by+the+user.%0A++++fn+run_script(%0A++++++++my_script_path:+%26str,%0A++++++++user_name:+%26str,%0A++++)+-%3E+Result%3Cstd::process::Output,+std::io::Error%3E+%7B%0A++++++++use+std::io::%7BError,+ErrorKind%7D;%0A++++++++use+std::os::windows::process::CommandExt;%0A++++++++use+std::process::Command;%0A++++%0A++++++++//+Create+the+command+line,+making+sure+to+quote+the+script+path.%0A++++++++//+This+assumes+the+fixed+arguments+have+been+tested+to+work+with+the+script+we're+using.%0A++++++++let+mut+cmd_args+=+format!(r%23%22%22%7Bmy_script_path%7D%22+%22--features=%5Ba,b,c%5D%22%22%23);%0A++++%0A++++++++//+Make+sure+the+user+name+is+safe.+In+particular+we+need+to+be%0A++++++++//+cautious+of+ascii+symbols+that+cmd+may+interpret+specially.%0A++++++++//+Here+we+only+allow+alphanumeric+characters.%0A++++++++if+!user_name.chars().all(%7Cc%7C+c.is_alphanumeric())+%7B%0A++++++++++++return+Err(Error::new(ErrorKind::InvalidInput,+%22invalid+user+name%22));%0A++++++++%7D%0A++++%0A++++++++//+now+we+have+validated+the+user+name,+let's+add+that+too.%0A++++++++cmd_args.push_str(%22+--user+%22);%0A++++++++cmd_args.push_str(user_name);%0A++++%0A++++++++//+call+cmd.exe+and+return+the+output%0A++++++++Command::new(%22cmd.exe%22)%0A++++++++++++.arg(%22/c%22)%0A++++++++++++//+surround+the+entire+command+in+an+extra+pair+of+quotes,+as+required+by+cmd.exe.%0A++++++++++++.raw_arg(%26format!(%22%5C%22%7Bcmd_args%7D%5C%22%22))%0A++++++++++++.output()%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.async_pipes\" class=\"method\"><a class=\"src rightside\" href=\"../../../../src/std/os/windows/process.rs.html#289\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.async_pipes\" class=\"fn\">async_pipes</a>(&amp;mut self, always_async: <a class=\"primitive\" href=\"../../../primitive.bool.html\">bool</a>) -&gt; &amp;mut <a class=\"struct\" href=\"../../../process/struct.Command.html\" title=\"struct std::process::Command\">Command</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>windows_process_extensions_async_pipes</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/98289\">#98289</a>)</span></div></span></summary><div class=\"docblock\"><p>When <a href=\"../../../process/struct.Command.html\" title=\"struct std::process::Command\"><code>process::Command</code></a> creates pipes, request that our side is always async.</p>\n<p>By default <a href=\"../../../process/struct.Command.html\" title=\"struct std::process::Command\"><code>process::Command</code></a> may choose to use pipes where both ends\nare opened for synchronous read or write operations. By using\n<code>async_pipes(true)</code>, this behavior is overridden so that our side is\nalways async.</p>\n<p>This is important because if doing async I/O a pipe or a file has to be\nopened for async access.</p>\n<p>The end of the pipe sent to the child process will always be synchronous\nregardless of this option.</p>\n<h5 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">Â§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(windows_process_extensions_async_pipes)]\n</span><span class=\"kw\">use </span>std::os::windows::process::CommandExt;\n<span class=\"kw\">use </span>std::process::{Command, Stdio};\n\n\nCommand::new(program)\n    .async_pipes(<span class=\"bool-val\">true</span>)\n    .stdin(Stdio::piped())\n    .stdout(Stdio::piped())\n    .stderr(Stdio::piped());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(windows_process_extensions_async_pipes)%5D%0Afn+main()+%7B%0A++++use+std::os::windows::process::CommandExt;%0A++++use+std::process::%7BCommand,+Stdio%7D;%0A++++%0A++++let+program+=+%22%22;%0A++++%0A++++Command::new(program)%0A++++++++.async_pipes(true)%0A++++++++.stdin(Stdio::piped())%0A++++++++.stdout(Stdio::piped())%0A++++++++.stderr(Stdio::piped());%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.raw_attribute\" class=\"method\"><a class=\"src rightside\" href=\"../../../../src/std/os/windows/process.rs.html#359-363\">source</a><h4 class=\"code-header\">unsafe fn <a href=\"#tymethod.raw_attribute\" class=\"fn\">raw_attribute</a>&lt;T: <a class=\"trait\" href=\"../../../marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a> + <a class=\"trait\" href=\"../../../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> + <a class=\"trait\" href=\"../../../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> + 'static&gt;(\n    &amp;mut self,\n    attribute: <a class=\"primitive\" href=\"../../../primitive.usize.html\">usize</a>,\n    value: T,\n) -&gt; &amp;mut <a class=\"struct\" href=\"../../../process/struct.Command.html\" title=\"struct std::process::Command\">Command</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>windows_process_extensions_raw_attribute</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/114854\">#114854</a>)</span></div></span></summary><div class=\"docblock\"><p>Set a raw attribute on the command, providing extended configuration options for Windows\nprocesses.</p>\n<p>This method allows you to specify custom attributes for a child process on Windows systems\nusing raw attribute values. Raw attributes provide extended configurability for process\ncreation, but their usage can be complex and potentially unsafe.</p>\n<p>The <code>attribute</code> parameter specifies the raw attribute to be set, while the <code>value</code>\nparameter holds the value associated with that attribute. Please refer to the\n<a href=\"https://microsoft.github.io/windows-docs-rs/doc/windows/\"><code>windows-rs</code> documentation</a> or the <a href=\"https://learn.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-updateprocthreadattribute\">Win32 API documentation</a> for detailed information\nabout available attributes and their meanings.</p>\n<h5 id=\"note\"><a class=\"doc-anchor\" href=\"#note\">Â§</a>Note</h5>\n<p>The maximum number of raw attributes is the value of <a href=\"../../../primitive.u32.html#associatedconstant.MAX\" title=\"associated constant u32::MAX\"><code>u32::MAX</code></a>.\nIf this limit is exceeded, the call to <a href=\"../../../process/struct.Command.html#method.spawn\" title=\"method std::process::Command::spawn\"><code>process::Command::spawn</code></a> will return an <code>Error</code>\nindicating that the maximum number of attributes has been exceeded.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">Â§</a>Safety</h5>\n<p>The usage of raw attributes is potentially unsafe and should be done with caution.\nIncorrect attribute values or improper configuration can lead to unexpected behavior or\nerrors.</p>\n<h5 id=\"example-2\"><a class=\"doc-anchor\" href=\"#example-2\">Â§</a>Example</h5>\n<p>The following example demonstrates how to create a child process with a specific parent\nprocess ID using a raw attribute.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(windows_process_extensions_raw_attribute)]\n</span><span class=\"kw\">use </span>std::os::windows::{process::CommandExt, io::AsRawHandle};\n<span class=\"kw\">use </span>std::process::Command;\n\n\n<span class=\"kw\">let </span>parent = Command::new(<span class=\"string\">\"cmd\"</span>).spawn()<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>child_cmd = Command::new(<span class=\"string\">\"cmd\"</span>);\n\n<span class=\"kw\">const </span>PROC_THREAD_ATTRIBUTE_PARENT_PROCESS: usize = <span class=\"number\">0x00020000</span>;\n\n<span class=\"kw\">unsafe </span>{\n    child_cmd.raw_attribute(PROC_THREAD_ATTRIBUTE_PARENT_PROCESS, parent.as_raw_handle() <span class=\"kw\">as </span>isize);\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>child = child_cmd.spawn()<span class=\"question-mark\">?</span>;\n</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(windows_process_extensions_raw_attribute)%5D%0Afn+main()+%7B+fn+_inner()+-%3E+Result%3C(),+impl+core::fmt::Debug%3E+%7B%0A++++use+std::os::windows::%7Bprocess::CommandExt,+io::AsRawHandle%7D;%0A++++use+std::process::Command;%0A++++%0A++++struct+ProcessDropGuard(std::process::Child);%0A++++impl+Drop+for+ProcessDropGuard+%7B%0A++++++++fn+drop(%26mut+self)+%7B%0A++++++++++++let+_+=+self.0.kill();%0A++++++++%7D%0A++++%7D%0A++++%0A++++let+parent+=+Command::new(%22cmd%22).spawn()?;%0A++++%0A++++let+mut+child_cmd+=+Command::new(%22cmd%22);%0A++++%0A++++const+PROC_THREAD_ATTRIBUTE_PARENT_PROCESS:+usize+=+0x00020000;%0A++++%0A++++unsafe+%7B%0A++++++++child_cmd.raw_attribute(PROC_THREAD_ATTRIBUTE_PARENT_PROCESS,+parent.as_raw_handle()+as+isize);%0A++++%7D%0A++++%0A++++let+parent+=+ProcessDropGuard(parent);%0A++++%0A++++let+mut+child+=+child_cmd.spawn()?;%0A++++%0A++++child.kill()?;%0A++++Ok::%3C(),+std::io::Error%3E(())%0A%7D+_inner().unwrap()+%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<h5 id=\"safety-note\"><a class=\"doc-anchor\" href=\"#safety-note\">Â§</a>Safety Note</h5>\n<p>Remember that improper use of raw attributes can lead to undefined behavior or security\nvulnerabilities. Always consult the documentation and ensure proper attribute values are\nused.</p>\n</div></details></div><h2 id=\"object-safety\" class=\"section-header\">Object Safety<a href=\"#object-safety\" class=\"anchor\">Â§</a></h2><div class=\"object-safety-info\">This trait is <b>not</b> <a href=\"https://doc.rust-lang.org/1.80.0/reference/items/traits.html#object-safety\">object safe</a>.</div><h2 id=\"implementors\" class=\"section-header\">Implementors<a href=\"#implementors\" class=\"anchor\">Â§</a></h2><div id=\"implementors-list\"><section id=\"impl-CommandExt-for-Command\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.16.0\">1.16.0</span> Â· <a class=\"src\" href=\"../../../../src/std/os/windows/process.rs.html#367-400\">source</a></span><a href=\"#impl-CommandExt-for-Command\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.CommandExt.html\" title=\"trait std::os::windows::process::CommandExt\">CommandExt</a> for <a class=\"struct\" href=\"../../../process/struct.Command.html\" title=\"struct std::process::Command\">Command</a></h3></section></div><script src=\"../../../../trait.impl/std/os/windows/process/trait.CommandExt.js\" async=\"\"></script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:24:14.179Z"
}