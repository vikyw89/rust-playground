{
	"title": "Traits - The Rust Reference",
	"url": "https://doc.rust-lang.org/stable/reference/items/traits.html",
	"markdown": "# Traits - The Rust Reference\n\n> **Syntax**  \n> _Trait_ :  \n>    `unsafe`? `trait` [IDENTIFIER](../identifiers.html)  [_GenericParams_](generics.html)? ( `:` [_TypeParamBounds_](../trait-bounds.html)? )? [_WhereClause_](about:blank/generics.html#where-clauses)? `{`  \n>      [_InnerAttribute_](../attributes.html)\\*  \n>      [_AssociatedItem_](associated-items.html)\\*  \n>    `}`\n\nA _trait_ describes an abstract interface that types can implement. This interface consists of [associated items](associated-items.html), which come in three varieties:\n\n-   [functions](about:blank/associated-items.html#associated-functions-and-methods)\n-   [types](about:blank/associated-items.html#associated-types)\n-   [constants](about:blank/associated-items.html#associated-constants)\n\nAll traits define an implicit type parameter `Self` that refers to \"the type that is implementing this interface\". Traits may also contain additional type parameters. These type parameters, including `Self`, may be constrained by other traits and so forth [as usual](generics.html).\n\nTraits are implemented for specific types through separate [implementations](implementations.html).\n\nTrait functions may omit the function body by replacing it with a semicolon. This indicates that the implementation must define the function. If the trait function defines a body, this definition acts as a default for any implementation which does not override it. Similarly, associated constants may omit the equals sign and expression to indicate implementations must define the constant value. Associated types must never define the type, the type may only be specified in an implementation.\n\n```rust\n#![allow(unused)]\nfn main() {\n// Examples of associated trait items with and without definitions.\ntrait Example {\n    const CONST_NO_DEFAULT: i32;\n    const CONST_WITH_DEFAULT: i32 = 99;\n    type TypeNoDefault;\n    fn method_without_default(&self);\n    fn method_with_default(&self) {}\n}\n}\n```\n\nTrait functions are not allowed to be [`const`](about:blank/functions.html#const-functions).\n\n## [Trait bounds](#trait-bounds)\n\nGeneric items may use traits as [bounds](../trait-bounds.html) on their type parameters.\n\n## [Generic Traits](#generic-traits)\n\nType parameters can be specified for a trait to make it generic. These appear after the trait name, using the same syntax used in [generic functions](about:blank/functions.html#generic-functions).\n\n```rust\n#![allow(unused)]\nfn main() {\ntrait Seq<T> {\n    fn len(&self) -> u32;\n    fn elt_at(&self, n: u32) -> T;\n    fn iter<F>(&self, f: F) where F: Fn(T);\n}\n}\n```\n\n## [Object Safety](#object-safety)\n\nObject safe traits can be the base trait of a [trait object](../types/trait-object.html). A trait is _object safe_ if it has the following qualities (defined in [RFC 255](https://github.com/rust-lang/rfcs/blob/master/text/0255-object-safety.md)):\n\n-   All [supertraits](#supertraits) must also be object safe.\n-   `Sized` must not be a [supertrait](#supertraits). In other words, it must not require `Self: Sized`.\n-   It must not have any associated constants.\n-   It must not have any associated types with generics.\n-   All associated functions must either be dispatchable from a trait object or be explicitly non-dispatchable:\n    -   Dispatchable functions must:\n        -   Not have any type parameters (although lifetime parameters are allowed).\n        -   Be a [method](about:blank/associated-items.html#methods) that does not use `Self` except in the type of the receiver.\n        -   Have a receiver with one of the following types:\n            -   `&Self` (i.e. `&self`)\n            -   `&mut Self` (i.e `&mut self`)\n            -   [`Box<Self>`](about:blank/special-types-and-traits.html#boxt)\n            -   [`Rc<Self>`](about:blank/special-types-and-traits.html#rct)\n            -   [`Arc<Self>`](about:blank/special-types-and-traits.html#arct)\n            -   [`Pin<P>`](about:blank/special-types-and-traits.html#pinp) where `P` is one of the types above\n        -   Not have an opaque return type; that is,\n            -   Not be an `async fn` (which has a hidden `Future` type).\n            -   Not have a return position `impl Trait` type (`fn example(&self) -> impl Trait`).\n        -   Not have a `where Self: Sized` bound (receiver type of `Self` (i.e. `self`) implies this).\n    -   Explicitly non-dispatchable functions require:\n        -   Have a `where Self: Sized` bound (receiver type of `Self` (i.e. `self`) implies this).\n\n```rust\n#![allow(unused)]\nfn main() {\nuse std::rc::Rc;\nuse std::sync::Arc;\nuse std::pin::Pin;\n// Examples of object safe methods.\ntrait TraitMethods {\n    fn by_ref(self: &Self) {}\n    fn by_ref_mut(self: &mut Self) {}\n    fn by_box(self: Box<Self>) {}\n    fn by_rc(self: Rc<Self>) {}\n    fn by_arc(self: Arc<Self>) {}\n    fn by_pin(self: Pin<&Self>) {}\n    fn with_lifetime<'a>(self: &'a Self) {}\n    fn nested_pin(self: Pin<Arc<Self>>) {}\n}\nstruct S;\nimpl TraitMethods for S {}\nlet t: Box<dyn TraitMethods> = Box::new(S);\n}\n```\n\n```rust\n#![allow(unused)]\nfn main() {\n// This trait is object-safe, but these methods cannot be dispatched on a trait object.\ntrait NonDispatchable {\n    // Non-methods cannot be dispatched.\n    fn foo() where Self: Sized {}\n    // Self type isn't known until runtime.\n    fn returns(&self) -> Self where Self: Sized;\n    // `other` may be a different concrete type of the receiver.\n    fn param(&self, other: Self) where Self: Sized {}\n    // Generics are not compatible with vtables.\n    fn typed<T>(&self, x: T) where Self: Sized {}\n}\n\nstruct S;\nimpl NonDispatchable for S {\n    fn returns(&self) -> Self where Self: Sized { S }\n}\nlet obj: Box<dyn NonDispatchable> = Box::new(S);\nobj.returns(); // ERROR: cannot call with Self return\nobj.param(S);  // ERROR: cannot call with Self parameter\nobj.typed(1);  // ERROR: cannot call with generic type\n}\n```\n\n```rust\n#![allow(unused)]\nfn main() {\nuse std::rc::Rc;\n// Examples of non-object safe traits.\ntrait NotObjectSafe {\n    const CONST: i32 = 1;  // ERROR: cannot have associated const\n\n    fn foo() {}  // ERROR: associated function without Sized\n    fn returns(&self) -> Self; // ERROR: Self in return type\n    fn typed<T>(&self, x: T) {} // ERROR: has generic type parameters\n    fn nested(self: Rc<Box<Self>>) {} // ERROR: nested receiver not yet supported\n}\n\nstruct S;\nimpl NotObjectSafe for S {\n    fn returns(&self) -> Self { S }\n}\nlet obj: Box<dyn NotObjectSafe> = Box::new(S); // ERROR\n}\n```\n\n```rust\n#![allow(unused)]\nfn main() {\n// Self: Sized traits are not object-safe.\ntrait TraitWithSize where Self: Sized {}\n\nstruct S;\nimpl TraitWithSize for S {}\nlet obj: Box<dyn TraitWithSize> = Box::new(S); // ERROR\n}\n```\n\n```rust\n#![allow(unused)]\nfn main() {\n// Not object safe if `Self` is a type argument.\ntrait Super<A> {}\ntrait WithSelf: Super<Self> where Self: Sized {}\n\nstruct S;\nimpl<A> Super<A> for S {}\nimpl WithSelf for S {}\nlet obj: Box<dyn WithSelf> = Box::new(S); // ERROR: cannot use `Self` type parameter\n}\n```\n\n## [Supertraits](#supertraits)\n\n**Supertraits** are traits that are required to be implemented for a type to implement a specific trait. Furthermore, anywhere a [generic](generics.html) or [trait object](../types/trait-object.html) is bounded by a trait, it has access to the associated items of its supertraits.\n\nSupertraits are declared by trait bounds on the `Self` type of a trait and transitively the supertraits of the traits declared in those trait bounds. It is an error for a trait to be its own supertrait.\n\nThe trait with a supertrait is called a **subtrait** of its supertrait.\n\nThe following is an example of declaring `Shape` to be a supertrait of `Circle`.\n\n```rust\n#![allow(unused)]\nfn main() {\ntrait Shape { fn area(&self) -> f64; }\ntrait Circle : Shape { fn radius(&self) -> f64; }\n}\n```\n\nAnd the following is the same example, except using [where clauses](about:blank/generics.html#where-clauses).\n\n```rust\n#![allow(unused)]\nfn main() {\ntrait Shape { fn area(&self) -> f64; }\ntrait Circle where Self: Shape { fn radius(&self) -> f64; }\n}\n```\n\nThis next example gives `radius` a default implementation using the `area` function from `Shape`.\n\n```rust\n#![allow(unused)]\nfn main() {\ntrait Shape { fn area(&self) -> f64; }\ntrait Circle where Self: Shape {\n    fn radius(&self) -> f64 {\n        // A = pi * r^2\n        // so algebraically,\n        // r = sqrt(A / pi)\n        (self.area() /std::f64::consts::PI).sqrt()\n    }\n}\n}\n```\n\nThis next example calls a supertrait method on a generic parameter.\n\n```rust\n#![allow(unused)]\nfn main() {\ntrait Shape { fn area(&self) -> f64; }\ntrait Circle : Shape { fn radius(&self) -> f64; }\nfn print_area_and_radius<C: Circle>(c: C) {\n    // Here we call the area method from the supertrait `Shape` of `Circle`.\n    println!(\"Area: {}\", c.area());\n    println!(\"Radius: {}\", c.radius());\n}\n}\n```\n\nSimilarly, here is an example of calling supertrait methods on trait objects.\n\n```rust\n#![allow(unused)]\nfn main() {\ntrait Shape { fn area(&self) -> f64; }\ntrait Circle : Shape { fn radius(&self) -> f64; }\nstruct UnitCircle;\nimpl Shape for UnitCircle { fn area(&self) -> f64 { std::f64::consts::PI } }\nimpl Circle for UnitCircle { fn radius(&self) -> f64 { 1.0 } }\nlet circle = UnitCircle;\nlet circle = Box::new(circle) as Box<dyn Circle>;\nlet nonsense = circle.radius() * circle.area();\n}\n```\n\n## [Unsafe traits](#unsafe-traits)\n\nTraits items that begin with the `unsafe` keyword indicate that _implementing_ the trait may be [unsafe](../unsafety.html). It is safe to use a correctly implemented unsafe trait. The [trait implementation](about:blank/implementations.html#trait-implementations) must also begin with the `unsafe` keyword.\n\n[`Sync`](about:blank/special-types-and-traits.html#sync) and [`Send`](about:blank/special-types-and-traits.html#send) are examples of unsafe traits.\n\n## [Parameter patterns](#parameter-patterns)\n\nFunction or method declarations without a body only allow [IDENTIFIER](../identifiers.html) or `_` [wild card](about:blank/patterns.html#wildcard-pattern) patterns. `mut` [IDENTIFIER](../identifiers.html) is currently allowed, but it is deprecated and will become a hard error in the future.\n\nIn the 2015 edition, the pattern for a trait function or method parameter is optional:\n\n```rust\n#![allow(unused)]\nfn main() {\n// 2015 Edition\ntrait T {\n    fn f(i32);  // Parameter identifiers are not required.\n}\n}\n```\n\nThe kinds of patterns for parameters is limited to one of the following:\n\n-   [IDENTIFIER](../identifiers.html)\n-   `mut` [IDENTIFIER](../identifiers.html)\n-   [`_`](about:blank/patterns.html#wildcard-pattern)\n-   `&` [IDENTIFIER](../identifiers.html)\n-   `&&` [IDENTIFIER](../identifiers.html)\n\nBeginning in the 2018 edition, function or method parameter patterns are no longer optional. Also, all irrefutable patterns are allowed as long as there is a body. Without a body, the limitations listed above are still in effect.\n\n```rust\n#![allow(unused)]\nfn main() {\ntrait T {\n    fn f1((a, b): (i32, i32)) {}\n    fn f2(_: (i32, i32));  // Cannot use tuple pattern without a body.\n}\n}\n```\n\n## [Item visibility](#item-visibility)\n\nTrait items syntactically allow a [_Visibility_](../visibility-and-privacy.html) annotation, but this is rejected when the trait is validated. This allows items to be parsed with a unified syntax across different contexts where they are used. As an example, an empty `vis` macro fragment specifier can be used for trait items, where the macro rule may be used in other situations where visibility is allowed.\n\n```rust\nmacro_rules! create_method {\n    ($vis:vis $name:ident) => {\n        $vis fn $name(&self) {}\n    };\n}\n\ntrait T1 {\n    // Empty `vis` is allowed.\n    create_method! { method_of_t1 }\n}\n\nstruct S;\n\nimpl S {\n    // Visibility is allowed here.\n    create_method! { pub method_of_s }\n}\n\nimpl T1 for S {}\n\nfn main() {\n    let s = S;\n    s.method_of_t1();\n    s.method_of_s();\n}\n```",
	"html": "<!DOCTYPE html><html lang=\"en\" class=\"light\" dir=\"ltr\"><head>\n        <!-- Book generated using mdBook -->\n        <meta charset=\"UTF-8\">\n        <title>Traits - The Rust Reference</title>\n\n\n        <!-- Custom HTML head -->\n        \n        <meta name=\"description\" content=\"\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <meta name=\"theme-color\" content=\"rgb(255, 255, 255)\">\n\n        <link rel=\"icon\" href=\"../favicon.svg\">\n        <link rel=\"shortcut icon\" href=\"../favicon.png\">\n        <link rel=\"stylesheet\" href=\"../css/variables.css\">\n        <link rel=\"stylesheet\" href=\"../css/general.css\">\n        <link rel=\"stylesheet\" href=\"../css/chrome.css\">\n        <link rel=\"stylesheet\" href=\"../css/print.css\" media=\"print\">\n\n        <!-- Fonts -->\n        <link rel=\"stylesheet\" href=\"../FontAwesome/css/font-awesome.css\">\n        <link rel=\"stylesheet\" href=\"../fonts/fonts.css\">\n\n        <!-- Highlight.js Stylesheets -->\n        <link rel=\"stylesheet\" href=\"../highlight.css\">\n        <link rel=\"stylesheet\" href=\"../tomorrow-night.css\" disabled=\"\">\n        <link rel=\"stylesheet\" href=\"../ayu-highlight.css\" disabled=\"\">\n\n        <!-- Custom theme stylesheets -->\n        <link rel=\"stylesheet\" href=\"../theme/reference.css\">\n\n    </head>\n    <body class=\"js sidebar-visible\">\n    <div id=\"body-container\">\n        <!-- Provide site root to javascript -->\n        <script>\n            var path_to_root = \"../\";\n            var default_theme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"navy\" : \"light\";\n        </script>\n\n        <!-- Work around some values being stored in localStorage wrapped in quotes -->\n        <script>\n            try {\n                var theme = localStorage.getItem('mdbook-theme');\n                var sidebar = localStorage.getItem('mdbook-sidebar');\n\n                if (theme.startsWith('\"') && theme.endsWith('\"')) {\n                    localStorage.setItem('mdbook-theme', theme.slice(1, theme.length - 1));\n                }\n\n                if (sidebar.startsWith('\"') && sidebar.endsWith('\"')) {\n                    localStorage.setItem('mdbook-sidebar', sidebar.slice(1, sidebar.length - 1));\n                }\n            } catch (e) { }\n        </script>\n\n        <!-- Set the theme before any content is loaded, prevents flash -->\n        <script>\n            var theme;\n            try { theme = localStorage.getItem('mdbook-theme'); } catch(e) { }\n            if (theme === null || theme === undefined) { theme = default_theme; }\n            var html = document.querySelector('html');\n            html.classList.remove('light')\n            html.classList.add(theme);\n            var body = document.querySelector('body');\n            body.classList.remove('no-js')\n            body.classList.add('js');\n        </script>\n\n        <input type=\"checkbox\" id=\"sidebar-toggle-anchor\" class=\"hidden\">\n\n        <!-- Hide / unhide sidebar before it is displayed -->\n        <script>\n            var body = document.querySelector('body');\n            var sidebar = null;\n            var sidebar_toggle = document.getElementById(\"sidebar-toggle-anchor\");\n            if (document.body.clientWidth >= 1080) {\n                try { sidebar = localStorage.getItem('mdbook-sidebar'); } catch(e) { }\n                sidebar = sidebar || 'visible';\n            } else {\n                sidebar = 'hidden';\n            }\n            sidebar_toggle.checked = sidebar === 'visible';\n            body.classList.remove('sidebar-visible');\n            body.classList.add(\"sidebar-\" + sidebar);\n        </script>\n\n        <nav id=\"sidebar\" class=\"sidebar\" aria-label=\"Table of contents\" aria-hidden=\"false\">\n            <div class=\"sidebar-scrollbox\">\n                <ol class=\"chapter\"><li class=\"chapter-item expanded affix \"><a href=\"../introduction.html\" tabindex=\"0\">Introduction</a></li><li class=\"chapter-item expanded \"><a href=\"../notation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.</strong> Notation</a></li><li class=\"chapter-item expanded \"><a href=\"../lexical-structure.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.</strong> Lexical structure</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../input-format.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.1.</strong> Input format</a></li><li class=\"chapter-item expanded \"><a href=\"../keywords.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.2.</strong> Keywords</a></li><li class=\"chapter-item expanded \"><a href=\"../identifiers.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.3.</strong> Identifiers</a></li><li class=\"chapter-item expanded \"><a href=\"../comments.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.4.</strong> Comments</a></li><li class=\"chapter-item expanded \"><a href=\"../whitespace.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.5.</strong> Whitespace</a></li><li class=\"chapter-item expanded \"><a href=\"../tokens.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.6.</strong> Tokens</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../macros.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.</strong> Macros</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../macros-by-example.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.1.</strong> Macros By Example</a></li><li class=\"chapter-item expanded \"><a href=\"../procedural-macros.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.2.</strong> Procedural Macros</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../crates-and-source-files.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.</strong> Crates and source files</a></li><li class=\"chapter-item expanded \"><a href=\"../conditional-compilation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.</strong> Conditional compilation</a></li><li class=\"chapter-item expanded \"><a href=\"../items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.</strong> Items</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../items/modules.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.1.</strong> Modules</a></li><li class=\"chapter-item expanded \"><a href=\"../items/extern-crates.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.2.</strong> Extern crates</a></li><li class=\"chapter-item expanded \"><a href=\"../items/use-declarations.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.3.</strong> Use declarations</a></li><li class=\"chapter-item expanded \"><a href=\"../items/functions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.4.</strong> Functions</a></li><li class=\"chapter-item expanded \"><a href=\"../items/type-aliases.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.5.</strong> Type aliases</a></li><li class=\"chapter-item expanded \"><a href=\"../items/structs.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.6.</strong> Structs</a></li><li class=\"chapter-item expanded \"><a href=\"../items/enumerations.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.7.</strong> Enumerations</a></li><li class=\"chapter-item expanded \"><a href=\"../items/unions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.8.</strong> Unions</a></li><li class=\"chapter-item expanded \"><a href=\"../items/constant-items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.9.</strong> Constant items</a></li><li class=\"chapter-item expanded \"><a href=\"../items/static-items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.10.</strong> Static items</a></li><li class=\"chapter-item expanded \"><a href=\"../items/traits.html\" class=\"active\" tabindex=\"0\"><strong aria-hidden=\"true\">6.11.</strong> Traits</a></li><li class=\"chapter-item expanded \"><a href=\"../items/implementations.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.12.</strong> Implementations</a></li><li class=\"chapter-item expanded \"><a href=\"../items/external-blocks.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.13.</strong> External blocks</a></li><li class=\"chapter-item expanded \"><a href=\"../items/generics.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.14.</strong> Generic parameters</a></li><li class=\"chapter-item expanded \"><a href=\"../items/associated-items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.15.</strong> Associated Items</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../attributes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.</strong> Attributes</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../attributes/testing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.1.</strong> Testing</a></li><li class=\"chapter-item expanded \"><a href=\"../attributes/derive.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.2.</strong> Derive</a></li><li class=\"chapter-item expanded \"><a href=\"../attributes/diagnostics.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.3.</strong> Diagnostics</a></li><li class=\"chapter-item expanded \"><a href=\"../attributes/codegen.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.4.</strong> Code generation</a></li><li class=\"chapter-item expanded \"><a href=\"../attributes/limits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.5.</strong> Limits</a></li><li class=\"chapter-item expanded \"><a href=\"../attributes/type_system.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.6.</strong> Type System</a></li><li class=\"chapter-item expanded \"><a href=\"../attributes/debugger.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.7.</strong> Debugger</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../statements-and-expressions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.</strong> Statements and expressions</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../statements.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.1.</strong> Statements</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.</strong> Expressions</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../expressions/literal-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.1.</strong> Literal expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/path-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.2.</strong> Path expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/block-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.3.</strong> Block expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/operator-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.4.</strong> Operator expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/grouped-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.5.</strong> Grouped expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/array-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.6.</strong> Array and index expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/tuple-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.7.</strong> Tuple and index expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/struct-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.8.</strong> Struct expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/call-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.9.</strong> Call expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/method-call-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.10.</strong> Method call expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/field-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.11.</strong> Field access expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/closure-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.12.</strong> Closure expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/loop-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.13.</strong> Loop expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/range-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.14.</strong> Range expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/if-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.15.</strong> If and if let expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/match-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.16.</strong> Match expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/return-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.17.</strong> Return expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/await-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.18.</strong> Await expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/underscore-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.19.</strong> Underscore expressions</a></li></ol></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../patterns.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.</strong> Patterns</a></li><li class=\"chapter-item expanded \"><a href=\"../type-system.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.</strong> Type system</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../types.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.</strong> Types</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../types/boolean.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.1.</strong> Boolean type</a></li><li class=\"chapter-item expanded \"><a href=\"../types/numeric.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.2.</strong> Numeric types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/textual.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.3.</strong> Textual types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/never.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.4.</strong> Never type</a></li><li class=\"chapter-item expanded \"><a href=\"../types/tuple.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.5.</strong> Tuple types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/array.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.6.</strong> Array types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/slice.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.7.</strong> Slice types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/struct.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.8.</strong> Struct types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/enum.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.9.</strong> Enumerated types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/union.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.10.</strong> Union types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/function-item.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.11.</strong> Function item types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/closure.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.12.</strong> Closure types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/pointer.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.13.</strong> Pointer types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/function-pointer.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.14.</strong> Function pointer types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/trait-object.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.15.</strong> Trait object types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/impl-trait.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.16.</strong> Impl trait type</a></li><li class=\"chapter-item expanded \"><a href=\"../types/parameters.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.17.</strong> Type parameters</a></li><li class=\"chapter-item expanded \"><a href=\"../types/inferred.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.18.</strong> Inferred type</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../dynamically-sized-types.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.2.</strong> Dynamically Sized Types</a></li><li class=\"chapter-item expanded \"><a href=\"../type-layout.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.3.</strong> Type layout</a></li><li class=\"chapter-item expanded \"><a href=\"../interior-mutability.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.4.</strong> Interior mutability</a></li><li class=\"chapter-item expanded \"><a href=\"../subtyping.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.5.</strong> Subtyping and Variance</a></li><li class=\"chapter-item expanded \"><a href=\"../trait-bounds.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.6.</strong> Trait and lifetime bounds</a></li><li class=\"chapter-item expanded \"><a href=\"../type-coercions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.7.</strong> Type coercions</a></li><li class=\"chapter-item expanded \"><a href=\"../destructors.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.8.</strong> Destructors</a></li><li class=\"chapter-item expanded \"><a href=\"../lifetime-elision.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.9.</strong> Lifetime elision</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../special-types-and-traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.</strong> Special types and traits</a></li><li class=\"chapter-item expanded \"><a href=\"../names.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.</strong> Names</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../names/namespaces.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.1.</strong> Namespaces</a></li><li class=\"chapter-item expanded \"><a href=\"../names/scopes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.2.</strong> Scopes</a></li><li class=\"chapter-item expanded \"><a href=\"../names/preludes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.3.</strong> Preludes</a></li><li class=\"chapter-item expanded \"><a href=\"../paths.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.4.</strong> Paths</a></li><li class=\"chapter-item expanded \"><a href=\"../names/name-resolution.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.5.</strong> Name resolution</a></li><li class=\"chapter-item expanded \"><a href=\"../visibility-and-privacy.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.6.</strong> Visibility and privacy</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../memory-model.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.</strong> Memory model</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../memory-allocation-and-lifetime.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.1.</strong> Memory allocation and lifetime</a></li><li class=\"chapter-item expanded \"><a href=\"../variables.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.2.</strong> Variables</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../linkage.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.</strong> Linkage</a></li><li class=\"chapter-item expanded \"><a href=\"../inline-assembly.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.</strong> Inline assembly</a></li><li class=\"chapter-item expanded \"><a href=\"../unsafety.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.</strong> Unsafety</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../unsafe-keyword.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.1.</strong> The unsafe keyword</a></li><li class=\"chapter-item expanded \"><a href=\"../behavior-considered-undefined.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.2.</strong> Behavior considered undefined</a></li><li class=\"chapter-item expanded \"><a href=\"../behavior-not-considered-unsafe.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.3.</strong> Behavior not considered unsafe</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../const_eval.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.</strong> Constant Evaluation</a></li><li class=\"chapter-item expanded \"><a href=\"../abi.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.</strong> Application Binary Interface</a></li><li class=\"chapter-item expanded \"><a href=\"../runtime.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.</strong> The Rust runtime</a></li><li class=\"chapter-item expanded \"><a href=\"../appendices.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.</strong> Appendices</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../macro-ambiguity.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.1.</strong> Macro Follow-Set Ambiguity Formal Specification</a></li><li class=\"chapter-item expanded \"><a href=\"../influences.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.2.</strong> Influences</a></li><li class=\"chapter-item expanded \"><a href=\"../glossary.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.3.</strong> Glossary</a></li></ol></li></ol>\n            </div>\n            <div id=\"sidebar-resize-handle\" class=\"sidebar-resize-handle\">\n                <div class=\"sidebar-resize-indicator\"></div>\n            </div>\n        </nav>\n\n        <!-- Track and set sidebar scroll position -->\n        <script>\n            var sidebarScrollbox = document.querySelector('#sidebar .sidebar-scrollbox');\n            sidebarScrollbox.addEventListener('click', function(e) {\n                if (e.target.tagName === 'A') {\n                    sessionStorage.setItem('sidebar-scroll', sidebarScrollbox.scrollTop);\n                }\n            }, { passive: true });\n            var sidebarScrollTop = sessionStorage.getItem('sidebar-scroll');\n            sessionStorage.removeItem('sidebar-scroll');\n            if (sidebarScrollTop) {\n                // preserve sidebar scroll position when navigating via links within sidebar\n                sidebarScrollbox.scrollTop = sidebarScrollTop;\n            } else {\n                // scroll sidebar to current active section when navigating via \"next/previous chapter\" buttons\n                var activeSection = document.querySelector('#sidebar .active');\n                if (activeSection) {\n                    activeSection.scrollIntoView({ block: 'center' });\n                }\n            }\n        </script>\n\n        <div id=\"page-wrapper\" class=\"page-wrapper\">\n\n            <div class=\"page\">\n                                <div id=\"menu-bar-hover-placeholder\"></div>\n                <div id=\"menu-bar\" class=\"menu-bar\" style=\"top: 0px;\">\n                    <div class=\"left-buttons\">\n                        <label id=\"sidebar-toggle\" class=\"icon-button\" for=\"sidebar-toggle-anchor\" title=\"Toggle Table of Contents\" aria-label=\"Toggle Table of Contents\" aria-controls=\"sidebar\" aria-expanded=\"true\">\n                            <i class=\"fa fa-bars\"></i>\n                        </label>\n                        <button id=\"theme-toggle\" class=\"icon-button\" type=\"button\" title=\"Change theme\" aria-label=\"Change theme\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-controls=\"theme-list\">\n                            <i class=\"fa fa-paint-brush\"></i>\n                        </button>\n                        <ul id=\"theme-list\" class=\"theme-popup\" aria-label=\"Themes\" role=\"menu\">\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme theme-selected\" id=\"light\">Light</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"rust\">Rust</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"coal\">Coal</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"navy\">Navy</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"ayu\">Ayu</button></li>\n                        </ul>\n                        <button id=\"search-toggle\" class=\"icon-button\" type=\"button\" title=\"Search. (Shortkey: s)\" aria-label=\"Toggle Searchbar\" aria-expanded=\"false\" aria-keyshortcuts=\"S\" aria-controls=\"searchbar\">\n                            <i class=\"fa fa-search\"></i>\n                        </button>\n                    </div>\n\n                    <h1 class=\"menu-title\">The Rust Reference</h1>\n\n                    <div class=\"right-buttons\">\n                        <a href=\"../print.html\" title=\"Print this book\" aria-label=\"Print this book\">\n                            <i id=\"print-button\" class=\"fa fa-print\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/reference/\" title=\"Git repository\" aria-label=\"Git repository\">\n                            <i id=\"git-repository-button\" class=\"fa fa-github\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/reference/edit/master/src/items/traits.md\" title=\"Suggest an edit\" aria-label=\"Suggest an edit\">\n                            <i id=\"git-edit-button\" class=\"fa fa-edit\"></i>\n                        </a>\n\n                    </div>\n                </div>\n\n                <div id=\"search-wrapper\" class=\"hidden\">\n                    <form id=\"searchbar-outer\" class=\"searchbar-outer\">\n                        <input type=\"search\" id=\"searchbar\" name=\"searchbar\" placeholder=\"Search this book ...\" aria-controls=\"searchresults-outer\" aria-describedby=\"searchresults-header\">\n                    </form>\n                    <div id=\"searchresults-outer\" class=\"searchresults-outer hidden\">\n                        <div id=\"searchresults-header\" class=\"searchresults-header\"></div>\n                        <ul id=\"searchresults\">\n                        </ul>\n                    </div>\n                </div>\n\n                <!-- Apply ARIA attributes after the sidebar and the sidebar toggle button are added to the DOM -->\n                <script>\n                    document.getElementById('sidebar-toggle').setAttribute('aria-expanded', sidebar === 'visible');\n                    document.getElementById('sidebar').setAttribute('aria-hidden', sidebar !== 'visible');\n                    Array.from(document.querySelectorAll('#sidebar a')).forEach(function(link) {\n                        link.setAttribute('tabIndex', sidebar === 'visible' ? 0 : -1);\n                    });\n                </script>\n\n                <div id=\"content\" class=\"content\">\n                    <main>\n                        <h1 id=\"traits\"><a class=\"header\" href=\"#traits\">Traits</a></h1>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>Trait</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">unsafe</code><sup>?</sup> <code class=\"hljs\">trait</code> <a href=\"../identifiers.html\">IDENTIFIER</a>&nbsp;\n<a href=\"generics.html\"><em>GenericParams</em></a><sup>?</sup>\n( <code class=\"hljs\">:</code> <a href=\"../trait-bounds.html\"><em>TypeParamBounds</em></a><sup>?</sup> )<sup>?</sup>\n<a href=\"generics.html#where-clauses\"><em>WhereClause</em></a><sup>?</sup> <code class=\"hljs\">{</code><br>\n&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../attributes.html\"><em>InnerAttribute</em></a><sup>*</sup><br>\n&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"associated-items.html\"><em>AssociatedItem</em></a><sup>*</sup><br>\n&nbsp;&nbsp; <code class=\"hljs\">}</code></p>\n</blockquote>\n<p>A <em>trait</em> describes an abstract interface that types can implement. This\ninterface consists of <a href=\"associated-items.html\">associated items</a>, which come in three varieties:</p>\n<ul>\n<li><a href=\"associated-items.html#associated-functions-and-methods\">functions</a></li>\n<li><a href=\"associated-items.html#associated-types\">types</a></li>\n<li><a href=\"associated-items.html#associated-constants\">constants</a></li>\n</ul>\n<p>All traits define an implicit type parameter <code class=\"hljs\">Self</code> that refers to \"the type\nthat is implementing this interface\". Traits may also contain additional type\nparameters. These type parameters, including <code class=\"hljs\">Self</code>, may be constrained by\nother traits and so forth <a href=\"generics.html\">as usual</a>.</p>\n<p>Traits are implemented for specific types through separate <a href=\"implementations.html\">implementations</a>.</p>\n<p>Trait functions may omit the function body by replacing it with a semicolon.\nThis indicates that the implementation must define the function. If the trait\nfunction defines a body, this definition acts as a default for any\nimplementation which does not override it. Similarly, associated constants may\nomit the equals sign and expression to indicate implementations must define\nthe constant value. Associated types must never define the type, the type may\nonly be specified in an implementation.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">// Examples of associated trait items with and without definitions.</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Example</span></span> {\n    <span class=\"hljs-keyword\">const</span> CONST_NO_DEFAULT: <span class=\"hljs-built_in\">i32</span>;\n    <span class=\"hljs-keyword\">const</span> CONST_WITH_DEFAULT: <span class=\"hljs-built_in\">i32</span> = <span class=\"hljs-number\">99</span>;\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">TypeNoDefault</span></span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">method_without_default</span></span>(&amp;<span class=\"hljs-keyword\">self</span>);\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">method_with_default</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) {}\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Trait functions are not allowed to be <a href=\"functions.html#const-functions\"><code class=\"hljs\">const</code></a>.</p>\n<h2 id=\"trait-bounds\"><a class=\"header\" href=\"#trait-bounds\">Trait bounds</a></h2>\n<p>Generic items may use traits as <a href=\"../trait-bounds.html\">bounds</a> on their type parameters.</p>\n<h2 id=\"generic-traits\"><a class=\"header\" href=\"#generic-traits\">Generic Traits</a></h2>\n<p>Type parameters can be specified for a trait to make it generic. These appear\nafter the trait name, using the same syntax used in <a href=\"functions.html#generic-functions\">generic functions</a>.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Seq</span></span>&lt;T&gt; {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">len</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">u32</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">elt_at</span></span>(&amp;<span class=\"hljs-keyword\">self</span>, n: <span class=\"hljs-built_in\">u32</span>) -&gt; T;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">iter</span></span>&lt;F&gt;(&amp;<span class=\"hljs-keyword\">self</span>, f: F) <span class=\"hljs-keyword\">where</span> F: <span class=\"hljs-built_in\">Fn</span>(T);\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"object-safety\"><a class=\"header\" href=\"#object-safety\">Object Safety</a></h2>\n<p>Object safe traits can be the base trait of a <a href=\"../types/trait-object.html\">trait object</a>. A trait is\n<em>object safe</em> if it has the following qualities (defined in <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0255-object-safety.md\">RFC 255</a>):</p>\n<ul>\n<li>All <a href=\"#supertraits\">supertraits</a> must also be object safe.</li>\n<li><code class=\"hljs\">Sized</code> must not be a <a href=\"#supertraits\">supertrait</a>. In other words, it must not require <code class=\"hljs\">Self: Sized</code>.</li>\n<li>It must not have any associated constants.</li>\n<li>It must not have any associated types with generics.</li>\n<li>All associated functions must either be dispatchable from a trait object or be explicitly non-dispatchable:\n<ul>\n<li>Dispatchable functions must:\n<ul>\n<li>Not have any type parameters (although lifetime parameters are allowed).</li>\n<li>Be a <a href=\"associated-items.html#methods\">method</a> that does not use <code class=\"hljs\">Self</code> except in the type of the receiver.</li>\n<li>Have a receiver with one of the following types:\n<ul>\n<li><code class=\"hljs\">&amp;Self</code> (i.e. <code class=\"hljs\">&amp;self</code>)</li>\n<li><code class=\"hljs\">&amp;mut Self</code> (i.e <code class=\"hljs\">&amp;mut self</code>)</li>\n<li><a href=\"../special-types-and-traits.html#boxt\"><code class=\"hljs\">Box&lt;Self&gt;</code></a></li>\n<li><a href=\"../special-types-and-traits.html#rct\"><code class=\"hljs\">Rc&lt;Self&gt;</code></a></li>\n<li><a href=\"../special-types-and-traits.html#arct\"><code class=\"hljs\">Arc&lt;Self&gt;</code></a></li>\n<li><a href=\"../special-types-and-traits.html#pinp\"><code class=\"hljs\">Pin&lt;P&gt;</code></a> where <code class=\"hljs\">P</code> is one of the types above</li>\n</ul>\n</li>\n<li>Not have an opaque return type; that is,\n<ul>\n<li>Not be an <code class=\"hljs\">async fn</code> (which has a hidden <code class=\"hljs\">Future</code> type).</li>\n<li>Not have a return position <code class=\"hljs\">impl Trait</code> type (<code class=\"hljs\">fn example(&amp;self) -&gt; impl Trait</code>).</li>\n</ul>\n</li>\n<li>Not have a <code class=\"hljs\">where Self: Sized</code> bound (receiver type of <code class=\"hljs\">Self</code> (i.e. <code class=\"hljs\">self</code>) implies this).</li>\n</ul>\n</li>\n<li>Explicitly non-dispatchable functions require:\n<ul>\n<li>Have a <code class=\"hljs\">where Self: Sized</code> bound (receiver type of <code class=\"hljs\">Self</code> (i.e. <code class=\"hljs\">self</code>) implies this).</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::rc::Rc;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::sync::Arc;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::pin::Pin;\n</span><span class=\"hljs-comment\">// Examples of object safe methods.</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">TraitMethods</span></span> {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">by_ref</span></span>(<span class=\"hljs-keyword\">self</span>: &amp;<span class=\"hljs-keyword\">Self</span>) {}\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">by_ref_mut</span></span>(<span class=\"hljs-keyword\">self</span>: &amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">Self</span>) {}\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">by_box</span></span>(<span class=\"hljs-keyword\">self</span>: <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">Self</span>&gt;) {}\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">by_rc</span></span>(<span class=\"hljs-keyword\">self</span>: Rc&lt;<span class=\"hljs-keyword\">Self</span>&gt;) {}\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">by_arc</span></span>(<span class=\"hljs-keyword\">self</span>: Arc&lt;<span class=\"hljs-keyword\">Self</span>&gt;) {}\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">by_pin</span></span>(<span class=\"hljs-keyword\">self</span>: Pin&lt;&amp;<span class=\"hljs-keyword\">Self</span>&gt;) {}\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">with_lifetime</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(<span class=\"hljs-keyword\">self</span>: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-keyword\">Self</span>) {}\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">nested_pin</span></span>(<span class=\"hljs-keyword\">self</span>: Pin&lt;Arc&lt;<span class=\"hljs-keyword\">Self</span>&gt;&gt;) {}\n}\n<span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">S</span></span>;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> TraitMethods <span class=\"hljs-keyword\">for</span> S {}\n</span><span class=\"boring\"><span class=\"hljs-keyword\">let</span> t: <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> TraitMethods&gt; = <span class=\"hljs-built_in\">Box</span>::new(S);\n</span><span class=\"boring\">}</span></code></pre></pre>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust compile_fail edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">// This trait is object-safe, but these methods cannot be dispatched on a trait object.</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">NonDispatchable</span></span> {\n    <span class=\"hljs-comment\">// Non-methods cannot be dispatched.</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>() <span class=\"hljs-keyword\">where</span> <span class=\"hljs-keyword\">Self</span>: <span class=\"hljs-built_in\">Sized</span> {}\n    <span class=\"hljs-comment\">// Self type isn't known until runtime.</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">returns</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-keyword\">Self</span> <span class=\"hljs-keyword\">where</span> <span class=\"hljs-keyword\">Self</span>: <span class=\"hljs-built_in\">Sized</span>;\n    <span class=\"hljs-comment\">// `other` may be a different concrete type of the receiver.</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">param</span></span>(&amp;<span class=\"hljs-keyword\">self</span>, other: <span class=\"hljs-keyword\">Self</span>) <span class=\"hljs-keyword\">where</span> <span class=\"hljs-keyword\">Self</span>: <span class=\"hljs-built_in\">Sized</span> {}\n    <span class=\"hljs-comment\">// Generics are not compatible with vtables.</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">typed</span></span>&lt;T&gt;(&amp;<span class=\"hljs-keyword\">self</span>, x: T) <span class=\"hljs-keyword\">where</span> <span class=\"hljs-keyword\">Self</span>: <span class=\"hljs-built_in\">Sized</span> {}\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">S</span></span>;\n<span class=\"hljs-keyword\">impl</span> NonDispatchable <span class=\"hljs-keyword\">for</span> S {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">returns</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-keyword\">Self</span> <span class=\"hljs-keyword\">where</span> <span class=\"hljs-keyword\">Self</span>: <span class=\"hljs-built_in\">Sized</span> { S }\n}\n<span class=\"hljs-keyword\">let</span> obj: <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> NonDispatchable&gt; = <span class=\"hljs-built_in\">Box</span>::new(S);\nobj.returns(); <span class=\"hljs-comment\">// ERROR: cannot call with Self return</span>\nobj.param(S);  <span class=\"hljs-comment\">// ERROR: cannot call with Self parameter</span>\nobj.typed(<span class=\"hljs-number\">1</span>);  <span class=\"hljs-comment\">// ERROR: cannot call with generic type</span>\n<span class=\"boring\">}</span></code></pre></pre>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust compile_fail edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::rc::Rc;\n</span><span class=\"hljs-comment\">// Examples of non-object safe traits.</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">NotObjectSafe</span></span> {\n    <span class=\"hljs-keyword\">const</span> CONST: <span class=\"hljs-built_in\">i32</span> = <span class=\"hljs-number\">1</span>;  <span class=\"hljs-comment\">// ERROR: cannot have associated const</span>\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>() {}  <span class=\"hljs-comment\">// ERROR: associated function without Sized</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">returns</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-keyword\">Self</span>; <span class=\"hljs-comment\">// ERROR: Self in return type</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">typed</span></span>&lt;T&gt;(&amp;<span class=\"hljs-keyword\">self</span>, x: T) {} <span class=\"hljs-comment\">// ERROR: has generic type parameters</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">nested</span></span>(<span class=\"hljs-keyword\">self</span>: Rc&lt;<span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">Self</span>&gt;&gt;) {} <span class=\"hljs-comment\">// ERROR: nested receiver not yet supported</span>\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">S</span></span>;\n<span class=\"hljs-keyword\">impl</span> NotObjectSafe <span class=\"hljs-keyword\">for</span> S {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">returns</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-keyword\">Self</span> { S }\n}\n<span class=\"hljs-keyword\">let</span> obj: <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> NotObjectSafe&gt; = <span class=\"hljs-built_in\">Box</span>::new(S); <span class=\"hljs-comment\">// ERROR</span>\n<span class=\"boring\">}</span></code></pre></pre>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust compile_fail edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">// Self: Sized traits are not object-safe.</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">TraitWithSize</span></span> <span class=\"hljs-keyword\">where</span> <span class=\"hljs-keyword\">Self</span>: <span class=\"hljs-built_in\">Sized</span> {}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">S</span></span>;\n<span class=\"hljs-keyword\">impl</span> TraitWithSize <span class=\"hljs-keyword\">for</span> S {}\n<span class=\"hljs-keyword\">let</span> obj: <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> TraitWithSize&gt; = <span class=\"hljs-built_in\">Box</span>::new(S); <span class=\"hljs-comment\">// ERROR</span>\n<span class=\"boring\">}</span></code></pre></pre>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust compile_fail edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">// Not object safe if `Self` is a type argument.</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Super</span></span>&lt;A&gt; {}\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">WithSelf</span></span>: Super&lt;<span class=\"hljs-keyword\">Self</span>&gt; <span class=\"hljs-keyword\">where</span> <span class=\"hljs-keyword\">Self</span>: <span class=\"hljs-built_in\">Sized</span> {}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">S</span></span>;\n<span class=\"hljs-keyword\">impl</span>&lt;A&gt; Super&lt;A&gt; <span class=\"hljs-keyword\">for</span> S {}\n<span class=\"hljs-keyword\">impl</span> WithSelf <span class=\"hljs-keyword\">for</span> S {}\n<span class=\"hljs-keyword\">let</span> obj: <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> WithSelf&gt; = <span class=\"hljs-built_in\">Box</span>::new(S); <span class=\"hljs-comment\">// ERROR: cannot use `Self` type parameter</span>\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"supertraits\"><a class=\"header\" href=\"#supertraits\">Supertraits</a></h2>\n<p><strong>Supertraits</strong> are traits that are required to be implemented for a type to\nimplement a specific trait. Furthermore, anywhere a <a href=\"generics.html\">generic</a> or <a href=\"../types/trait-object.html\">trait object</a>\nis bounded by a trait, it has access to the associated items of its supertraits.</p>\n<p>Supertraits are declared by trait bounds on the <code class=\"hljs\">Self</code> type of a trait and\ntransitively the supertraits of the traits declared in those trait bounds. It is\nan error for a trait to be its own supertrait.</p>\n<p>The trait with a supertrait is called a <strong>subtrait</strong> of its supertrait.</p>\n<p>The following is an example of declaring <code class=\"hljs\">Shape</code> to be a supertrait of <code class=\"hljs\">Circle</code>.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Shape</span></span> { <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">area</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">f64</span>; }\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Circle</span></span> : Shape { <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">radius</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">f64</span>; }\n<span class=\"boring\">}</span></code></pre></pre>\n<p>And the following is the same example, except using <a href=\"generics.html#where-clauses\">where clauses</a>.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Shape</span></span> { <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">area</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">f64</span>; }\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Circle</span></span> <span class=\"hljs-keyword\">where</span> <span class=\"hljs-keyword\">Self</span>: Shape { <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">radius</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">f64</span>; }\n<span class=\"boring\">}</span></code></pre></pre>\n<p>This next example gives <code class=\"hljs\">radius</code> a default implementation using the <code class=\"hljs\">area</code>\nfunction from <code class=\"hljs\">Shape</code>.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Shape</span></span> { <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">area</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">f64</span>; }\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Circle</span></span> <span class=\"hljs-keyword\">where</span> <span class=\"hljs-keyword\">Self</span>: Shape {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">radius</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">f64</span> {\n        <span class=\"hljs-comment\">// A = pi * r^2</span>\n        <span class=\"hljs-comment\">// so algebraically,</span>\n        <span class=\"hljs-comment\">// r = sqrt(A / pi)</span>\n        (<span class=\"hljs-keyword\">self</span>.area() /std::<span class=\"hljs-built_in\">f64</span>::consts::PI).sqrt()\n    }\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>This next example calls a supertrait method on a generic parameter.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Shape</span></span> { <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">area</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">f64</span>; }\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Circle</span></span> : Shape { <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">radius</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">f64</span>; }\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">print_area_and_radius</span></span>&lt;C: Circle&gt;(c: C) {\n    <span class=\"hljs-comment\">// Here we call the area method from the supertrait `Shape` of `Circle`.</span>\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Area: {}\"</span>, c.area());\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Radius: {}\"</span>, c.radius());\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Similarly, here is an example of calling supertrait methods on trait objects.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Shape</span></span> { <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">area</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">f64</span>; }\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Circle</span></span> : Shape { <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">radius</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">f64</span>; }\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">UnitCircle</span></span>;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> Shape <span class=\"hljs-keyword\">for</span> UnitCircle { <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">area</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">f64</span> { std::<span class=\"hljs-built_in\">f64</span>::consts::PI } }\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> Circle <span class=\"hljs-keyword\">for</span> UnitCircle { <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">radius</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">f64</span> { <span class=\"hljs-number\">1.0</span> } }\n</span><span class=\"boring\"><span class=\"hljs-keyword\">let</span> circle = UnitCircle;\n</span><span class=\"hljs-keyword\">let</span> circle = <span class=\"hljs-built_in\">Box</span>::new(circle) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> Circle&gt;;\n<span class=\"hljs-keyword\">let</span> nonsense = circle.radius() * circle.area();\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"unsafe-traits\"><a class=\"header\" href=\"#unsafe-traits\">Unsafe traits</a></h2>\n<p>Traits items that begin with the <code class=\"hljs\">unsafe</code> keyword indicate that <em>implementing</em> the\ntrait may be <a href=\"../unsafety.html\">unsafe</a>. It is safe to use a correctly implemented unsafe trait.\nThe <a href=\"implementations.html#trait-implementations\">trait implementation</a> must also begin with the <code class=\"hljs\">unsafe</code> keyword.</p>\n<p><a href=\"../special-types-and-traits.html#sync\"><code class=\"hljs\">Sync</code></a> and <a href=\"../special-types-and-traits.html#send\"><code class=\"hljs\">Send</code></a> are examples of unsafe traits.</p>\n<h2 id=\"parameter-patterns\"><a class=\"header\" href=\"#parameter-patterns\">Parameter patterns</a></h2>\n<p>Function or method declarations without a body only allow <a href=\"../identifiers.html\">IDENTIFIER</a> or\n<code class=\"hljs\">_</code> <a href=\"../patterns.html#wildcard-pattern\">wild card</a> patterns. <code class=\"hljs\">mut</code> <a href=\"../identifiers.html\">IDENTIFIER</a> is currently\nallowed, but it is deprecated and will become a hard error in the future.</p>\n<!-- https://github.com/rust-lang/rust/issues/35203 -->\n<p>In the 2015 edition, the pattern for a trait function or method parameter is\noptional:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2015 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">// 2015 Edition</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">T</span></span> {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">f</span></span>(<span class=\"hljs-built_in\">i32</span>);  <span class=\"hljs-comment\">// Parameter identifiers are not required.</span>\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>The kinds of patterns for parameters is limited to one of the following:</p>\n<ul>\n<li><a href=\"../identifiers.html\">IDENTIFIER</a></li>\n<li><code class=\"hljs\">mut</code> <a href=\"../identifiers.html\">IDENTIFIER</a></li>\n<li><a href=\"../patterns.html#wildcard-pattern\"><code class=\"hljs\">_</code></a></li>\n<li><code class=\"hljs\">&amp;</code> <a href=\"../identifiers.html\">IDENTIFIER</a></li>\n<li><code class=\"hljs\">&amp;&amp;</code> <a href=\"../identifiers.html\">IDENTIFIER</a></li>\n</ul>\n<p>Beginning in the 2018 edition, function or method parameter patterns are no\nlonger optional. Also, all irrefutable patterns are allowed as long as there\nis a body. Without a body, the limitations listed above are still in effect.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">T</span></span> {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">f1</span></span>((a, b): (<span class=\"hljs-built_in\">i32</span>, <span class=\"hljs-built_in\">i32</span>)) {}\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">f2</span></span>(_: (<span class=\"hljs-built_in\">i32</span>, <span class=\"hljs-built_in\">i32</span>));  <span class=\"hljs-comment\">// Cannot use tuple pattern without a body.</span>\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"item-visibility\"><a class=\"header\" href=\"#item-visibility\">Item visibility</a></h2>\n<p>Trait items syntactically allow a <a href=\"../visibility-and-privacy.html\"><em>Visibility</em></a> annotation, but this is\nrejected when the trait is validated. This allows items to be parsed with a\nunified syntax across different contexts where they are used. As an example,\nan empty <code class=\"hljs\">vis</code> macro fragment specifier can be used for trait items, where the\nmacro rule may be used in other situations where visibility is allowed.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust edition2021 hljs\"><span class=\"hljs-built_in\">macro_rules!</span> create_method {\n    ($vis:vis $name:ident) =&gt; {\n        $vis <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> $<span class=\"hljs-title\">name</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) {}\n    };\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">T1</span></span> {\n    <span class=\"hljs-comment\">// Empty `vis` is allowed.</span>\n    create_method! { method_of_t1 }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">S</span></span>;\n\n<span class=\"hljs-keyword\">impl</span> S {\n    <span class=\"hljs-comment\">// Visibility is allowed here.</span>\n    create_method! { <span class=\"hljs-keyword\">pub</span> method_of_s }\n}\n\n<span class=\"hljs-keyword\">impl</span> T1 <span class=\"hljs-keyword\">for</span> S {}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> s = S;\n    s.method_of_t1();\n    s.method_of_s();\n}</code></pre></pre>\n\n                    </main>\n\n                    <nav class=\"nav-wrapper\" aria-label=\"Page navigation\">\n                        <!-- Mobile navigation buttons -->\n                            <a rel=\"prev\" href=\"../items/static-items.html\" class=\"mobile-nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                                <i class=\"fa fa-angle-left\"></i>\n                            </a>\n\n                            <a rel=\"next prefetch\" href=\"../items/implementations.html\" class=\"mobile-nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                                <i class=\"fa fa-angle-right\"></i>\n                            </a>\n\n                        <div style=\"clear: both\"></div>\n                    </nav>\n                </div>\n            </div>\n\n            <nav class=\"nav-wide-wrapper\" aria-label=\"Page navigation\">\n                    <a rel=\"prev\" href=\"../items/static-items.html\" class=\"nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                        <i class=\"fa fa-angle-left\"></i>\n                    </a>\n\n                    <a rel=\"next prefetch\" href=\"../items/implementations.html\" class=\"nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                        <i class=\"fa fa-angle-right\"></i>\n                    </a>\n            </nav>\n\n        </div>\n\n\n\n\n        <script>\n            window.playground_copyable = true;\n        </script>\n\n\n        <script src=\"../elasticlunr.min.js\"></script>\n        <script src=\"../mark.min.js\"></script>\n        <script src=\"../searcher.js\"></script>\n\n        <script src=\"../clipboard.min.js\"></script>\n        <script src=\"../highlight.js\"></script>\n        <script src=\"../book.js\"></script>\n\n        <!-- Custom JS scripts -->\n\n\n    </div>\n    \n\n</body></html>",
	"crawlDate": "2024-07-28T05:12:53.929Z"
}