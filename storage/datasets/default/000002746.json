{
	"title": "from_ptr_range in std::slice - Rust",
	"url": "https://doc.rust-lang.org/stable/std/slice/fn.from_ptr_range.html",
	"markdown": "# from\\_ptr\\_range in std::slice - Rust\n\n```\npub const unsafe fn from_ptr_range<'a, T>(range: Range<*const T>) -> &'a [T]\n```\n\nüî¨This is a nightly-only experimental API. (`slice_from_ptr_range`¬†[#89792](https://github.com/rust-lang/rust/issues/89792))\n\nExpand description\n\nForms a slice from a pointer range.\n\nThis function is useful for interacting with foreign interfaces which use two pointers to refer to a range of elements in memory, as is common in C++.\n\n## [¬ß](#safety)Safety\n\nBehavior is undefined if any of the following conditions are violated:\n\n-   The `start` pointer of the range must be a [valid](about:blank/ptr/index.html#safety \"mod std::ptr\") and properly aligned pointer to the first element of a slice.\n    \n-   The `end` pointer must be a [valid](about:blank/ptr/index.html#safety \"mod std::ptr\") and properly aligned pointer to _one past_ the last element, such that the offset from the end to the start pointer is the length of the slice.\n    \n-   The entire memory range of this slice must be contained within a single allocated object! Slices can never span across multiple allocated objects.\n    \n-   The range must contain `N` consecutive properly initialized values of type `T`.\n    \n-   The memory referenced by the returned slice must not be mutated for the duration of lifetime `'a`, except inside an `UnsafeCell`.\n    \n-   The total length of the range must be no larger than `isize::MAX`, and adding that size to `data` must not ‚Äúwrap around‚Äù the address space. See the safety documentation of [`pointer::offset`](about:blank/primitive.pointer.html#method.offset \"method pointer::offset\").\n    \n\nNote that a range created from [`slice::as_ptr_range`](about:blank/primitive.slice.html#method.as_ptr_range \"method slice::as_ptr_range\") fulfills these requirements.\n\n## [¬ß](#panics)Panics\n\nThis function panics if `T` is a Zero-Sized Type (‚ÄúZST‚Äù).\n\n## [¬ß](#caveat)Caveat\n\nThe lifetime for the returned slice is inferred from its usage. To prevent accidental misuse, it‚Äôs suggested to tie the lifetime to whichever source lifetime is safe in the context, such as by providing a helper function taking the lifetime of a host value for the slice, or by explicit annotation.\n\n## [¬ß](#examples)Examples\n\n```\n#![feature(slice_from_ptr_range)]\n\nuse core::slice;\n\nlet x = [1, 2, 3];\nlet range = x.as_ptr_range();\n\nunsafe {\n    assert_eq!(slice::from_ptr_range(range), &x);\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(slice_from_ptr_range)%5D%0A%0Afn+main()+%7B%0A++++use+core::slice;%0A++++%0A++++let+x+=+%5B1,+2,+3%5D;%0A++++let+range+=+x.as_ptr_range();%0A++++%0A++++unsafe+%7B%0A++++++++assert_eq!(slice::from_ptr_range(range),+%26x);%0A++++%7D%0A%7D&version=nightly&edition=2021)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Forms a slice from a pointer range.\"><title>from_ptr_range in std::slice - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc fn\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><div class=\"sidebar-elems\"><h2><a href=\"index.html\">In std::slice</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.ArrayChunks.html\">ArrayChunks</a></li><li><a href=\"struct.ArrayChunksMut.html\">ArrayChunksMut</a></li><li><a href=\"struct.ArrayWindows.html\">ArrayWindows</a></li><li><a href=\"struct.ChunkBy.html\">ChunkBy</a></li><li><a href=\"struct.ChunkByMut.html\">ChunkByMut</a></li><li><a href=\"struct.Chunks.html\">Chunks</a></li><li><a href=\"struct.ChunksExact.html\">ChunksExact</a></li><li><a href=\"struct.ChunksExactMut.html\">ChunksExactMut</a></li><li><a href=\"struct.ChunksMut.html\">ChunksMut</a></li><li><a href=\"struct.EscapeAscii.html\">EscapeAscii</a></li><li><a href=\"struct.Iter.html\">Iter</a></li><li><a href=\"struct.IterMut.html\">IterMut</a></li><li><a href=\"struct.RChunks.html\">RChunks</a></li><li><a href=\"struct.RChunksExact.html\">RChunksExact</a></li><li><a href=\"struct.RChunksExactMut.html\">RChunksExactMut</a></li><li><a href=\"struct.RChunksMut.html\">RChunksMut</a></li><li><a href=\"struct.RSplit.html\">RSplit</a></li><li><a href=\"struct.RSplitMut.html\">RSplitMut</a></li><li><a href=\"struct.RSplitN.html\">RSplitN</a></li><li><a href=\"struct.RSplitNMut.html\">RSplitNMut</a></li><li><a href=\"struct.Split.html\">Split</a></li><li><a href=\"struct.SplitInclusive.html\">SplitInclusive</a></li><li><a href=\"struct.SplitInclusiveMut.html\">SplitInclusiveMut</a></li><li><a href=\"struct.SplitMut.html\">SplitMut</a></li><li><a href=\"struct.SplitN.html\">SplitN</a></li><li><a href=\"struct.SplitNMut.html\">SplitNMut</a></li><li><a href=\"struct.Windows.html\">Windows</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.Concat.html\">Concat</a></li><li><a href=\"trait.Join.html\">Join</a></li><li><a href=\"trait.SliceIndex.html\">SliceIndex</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.from_mut.html\">from_mut</a></li><li><a href=\"fn.from_mut_ptr_range.html\">from_mut_ptr_range</a></li><li><a href=\"fn.from_ptr_range.html\">from_ptr_range</a></li><li><a href=\"fn.from_raw_parts.html\">from_raw_parts</a></li><li><a href=\"fn.from_raw_parts_mut.html\">from_raw_parts_mut</a></li><li><a href=\"fn.from_ref.html\">from_ref</a></li><li><a href=\"fn.range.html\">range</a></li><li><a href=\"fn.try_range.html\">try_range</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‚ÄòS‚Äô or ‚Äò/‚Äô to search, ‚Äò?‚Äô for more options‚Ä¶\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Function <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">slice</a>::<wbr><a class=\"fn\" href=\"#\">from_ptr_range</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/raw.rs.html#242\">source</a> ¬∑ <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>‚àí</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub const unsafe fn from_ptr_range&lt;'a, T&gt;(range: <a class=\"struct\" href=\"../ops/struct.Range.html\" title=\"struct std::ops::Range\">Range</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*const T</a>&gt;) -&gt; &amp;'a <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a></code></pre><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>slice_from_ptr_range</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/89792\">#89792</a>)</span></div></span><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Forms a slice from a pointer range.</p>\n<p>This function is useful for interacting with foreign interfaces which\nuse two pointers to refer to a range of elements in memory, as is\ncommon in C++.</p>\n<h2 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">¬ß</a>Safety</h2>\n<p>Behavior is undefined if any of the following conditions are violated:</p>\n<ul>\n<li>\n<p>The <code>start</code> pointer of the range must be a <a href=\"../ptr/index.html#safety\" title=\"mod std::ptr\">valid</a> and properly aligned pointer\nto the first element of a slice.</p>\n</li>\n<li>\n<p>The <code>end</code> pointer must be a <a href=\"../ptr/index.html#safety\" title=\"mod std::ptr\">valid</a> and properly aligned pointer to <em>one past</em>\nthe last element, such that the offset from the end to the start pointer is\nthe length of the slice.</p>\n</li>\n<li>\n<p>The entire memory range of this slice must be contained within a single allocated object!\nSlices can never span across multiple allocated objects.</p>\n</li>\n<li>\n<p>The range must contain <code>N</code> consecutive properly initialized values of type <code>T</code>.</p>\n</li>\n<li>\n<p>The memory referenced by the returned slice must not be mutated for the duration\nof lifetime <code>'a</code>, except inside an <code>UnsafeCell</code>.</p>\n</li>\n<li>\n<p>The total length of the range must be no larger than <code>isize::MAX</code>,\nand adding that size to <code>data</code> must not ‚Äúwrap around‚Äù the address space.\nSee the safety documentation of <a href=\"../primitive.pointer.html#method.offset\" title=\"method pointer::offset\"><code>pointer::offset</code></a>.</p>\n</li>\n</ul>\n<p>Note that a range created from <a href=\"../primitive.slice.html#method.as_ptr_range\" title=\"method slice::as_ptr_range\"><code>slice::as_ptr_range</code></a> fulfills these requirements.</p>\n<h2 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">¬ß</a>Panics</h2>\n<p>This function panics if <code>T</code> is a Zero-Sized Type (‚ÄúZST‚Äù).</p>\n<h2 id=\"caveat\"><a class=\"doc-anchor\" href=\"#caveat\">¬ß</a>Caveat</h2>\n<p>The lifetime for the returned slice is inferred from its usage. To\nprevent accidental misuse, it‚Äôs suggested to tie the lifetime to whichever\nsource lifetime is safe in the context, such as by providing a helper\nfunction taking the lifetime of a host value for the slice, or by explicit\nannotation.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">¬ß</a>Examples</h2>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(slice_from_ptr_range)]\n\n</span><span class=\"kw\">use </span>core::slice;\n\n<span class=\"kw\">let </span>x = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"kw\">let </span>range = x.as_ptr_range();\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"macro\">assert_eq!</span>(slice::from_ptr_range(range), <span class=\"kw-2\">&amp;</span>x);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(slice_from_ptr_range)%5D%0A%0Afn+main()+%7B%0A++++use+core::slice;%0A++++%0A++++let+x+=+%5B1,+2,+3%5D;%0A++++let+range+=+x.as_ptr_range();%0A++++%0A++++unsafe+%7B%0A++++++++assert_eq!(slice::from_ptr_range(range),+%26x);%0A++++%7D%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:25:44.835Z"
}