{
	"title": "Codegen Options - The rustc book",
	"url": "https://doc.rust-lang.org/rustc/codegen-options/index.html#opt-level",
	"markdown": "# Codegen Options - The rustc book\n\nAll of these options are passed to `rustc` via the `-C` flag, short for \"codegen.\" You can see a version of this list for your exact compiler by running `rustc -C help`.\n\n## [ar](#ar)\n\nThis option is deprecated and does nothing.\n\n## [code-model](#code-model)\n\nThis option lets you choose which code model to use.  \nCode models put constraints on address ranges that the program and its symbols may use.  \nWith smaller address ranges machine instructions may be able to use more compact addressing modes.\n\nThe specific ranges depend on target architectures and addressing modes available to them.  \nFor x86 more detailed description of its code models can be found in [System V Application Binary Interface](https://github.com/hjl-tools/x86-psABI/wiki/x86-64-psABI-1.0.pdf) specification.\n\nSupported values for this option are:\n\n-   `tiny` - Tiny code model.\n-   `small` - Small code model. This is the default model for majority of supported targets.\n-   `kernel` - Kernel code model.\n-   `medium` - Medium code model.\n-   `large` - Large code model.\n\nSupported values can also be discovered by running `rustc --print code-models`.\n\n## [codegen-units](#codegen-units)\n\nThis flag controls the maximum number of code generation units the crate is split into. It takes an integer greater than 0.\n\nWhen a crate is split into multiple codegen units, LLVM is able to process them in parallel. Increasing parallelism may speed up compile times, but may also produce slower code. Setting this to 1 may improve the performance of generated code, but may be slower to compile.\n\nThe default value, if not specified, is 16 for non-incremental builds. For incremental builds the default is 256 which allows caching to be more granular.\n\n## [collapse-macro-debuginfo](#collapse-macro-debuginfo)\n\nThis flag controls whether code locations from a macro definition are collapsed into a single location associated with that macro's call site, when generating debuginfo for this crate.\n\nThis option, if passed, overrides both default collapsing behavior and `#[collapse_debuginfo]` attributes in code.\n\n-   `y`, `yes`, `on`, `true`: collapse code locations in debuginfo.\n-   `n`, `no`, `off` or `false`: do not collapse code locations in debuginfo.\n-   `external`: collapse code locations in debuginfo only if the macro comes from a different crate.\n\n## [control-flow-guard](#control-flow-guard)\n\nThis flag controls whether LLVM enables the Windows [Control Flow Guard](https://docs.microsoft.com/en-us/windows/win32/secbp/control-flow-guard) platform security feature. This flag is currently ignored for non-Windows targets. It takes one of the following values:\n\n-   `y`, `yes`, `on`, `true`, `checks`, or no value: enable Control Flow Guard.\n-   `nochecks`: emit Control Flow Guard metadata without runtime enforcement checks (this should only be used for testing purposes as it does not provide security enforcement).\n-   `n`, `no`, `off`, `false`: do not enable Control Flow Guard (the default).\n\n## [debug-assertions](#debug-assertions)\n\nThis flag lets you turn `cfg(debug_assertions)` [conditional compilation](about:blank/reference/conditional-compilation.html#debug_assertions) on or off. It takes one of the following values:\n\n-   `y`, `yes`, `on`, `true`, or no value: enable debug-assertions.\n-   `n`, `no`, `off` or `false`: disable debug-assertions.\n\nIf not specified, debug assertions are automatically enabled only if the [opt-level](#opt-level) is 0.\n\n## [debuginfo](#debuginfo)\n\nThis flag controls the generation of debug information. It takes one of the following values:\n\n-   `0` or `none`: no debug info at all (the default).\n-   `line-directives-only`: line info directives only. For the nvptx\\* targets this enables [profiling](https://reviews.llvm.org/D46061). For other use cases, `line-tables-only` is the better, more compatible choice.\n-   `line-tables-only`: line tables only. Generates the minimal amount of debug info for backtraces with filename/line number info, but not anything else, i.e. no variable or function parameter info.\n-   `1` or `limited`: debug info without type or variable-level information.\n-   `2` or `full`: full debug info.\n\nNote: The [`-g` flag](about:blank/command-line-arguments.html#option-g-debug) is an alias for `-C debuginfo=2`.\n\n## [default-linker-libraries](#default-linker-libraries)\n\nThis flag controls whether or not the linker includes its default libraries. It takes one of the following values:\n\n-   `y`, `yes`, `on`, `true`: include default libraries.\n-   `n`, `no`, `off` or `false` or no value: exclude default libraries (the default).\n\nFor example, for gcc flavor linkers, this issues the `-nodefaultlibs` flag to the linker.\n\nOn `windows-gnu` targets, this flag controls which dlltool `rustc` invokes to generate import libraries when using the [`raw-dylib` link kind](about:blank/reference/items/external-blocks.html#the-link-attribute). It takes a path to [the dlltool executable](https://sourceware.org/binutils/docs/binutils/dlltool.html). If this flag is not specified, a dlltool executable will be inferred based on the host environment and target.\n\n## [embed-bitcode](#embed-bitcode)\n\nThis flag controls whether or not the compiler embeds LLVM bitcode into object files. It takes one of the following values:\n\n-   `y`, `yes`, `on`, `true` or no value: put bitcode in rlibs (the default).\n-   `n`, `no`, `off` or `false`: omit bitcode from rlibs.\n\nLLVM bitcode is required when rustc is performing link-time optimization (LTO). It is also required on some targets like iOS ones where vendors look for LLVM bitcode. Embedded bitcode will appear in rustc-generated object files inside of a section whose name is defined by the target platform. Most of the time this is `.llvmbc`.\n\nThe use of `-C embed-bitcode=no` can significantly improve compile times and reduce generated file sizes if your compilation does not actually need bitcode (e.g. if you're not compiling for iOS or you're not performing LTO). For these reasons, Cargo uses `-C embed-bitcode=no` whenever possible. Likewise, if you are building directly with `rustc` we recommend using `-C embed-bitcode=no` whenever you are not using LTO.\n\nIf combined with `-C lto`, `-C embed-bitcode=no` will cause `rustc` to abort at start-up, because the combination is invalid.\n\n> **Note**: if you're building Rust code with LTO then you probably don't even need the `embed-bitcode` option turned on. You'll likely want to use `-Clinker-plugin-lto` instead which skips generating object files entirely and simply replaces object files with LLVM bitcode. The only purpose for `-Cembed-bitcode` is when you're generating an rlib that is both being used with and without LTO. For example Rust's standard library ships with embedded bitcode since users link to it both with and without LTO.\n> \n> This also may make you wonder why the default is `yes` for this option. The reason for that is that it's how it was for rustc 1.44 and prior. In 1.45 this option was added to turn off what had always been the default.\n\nThis option allows you to put extra data in each output filename. It takes a string to add as a suffix to the filename. See the [`--emit` flag](about:blank/command-line-arguments.html#option-emit) for more information.\n\n## [force-frame-pointers](#force-frame-pointers)\n\nThis flag forces the use of frame pointers. It takes one of the following values:\n\n-   `y`, `yes`, `on`, `true` or no value: force-enable frame pointers.\n-   `n`, `no`, `off` or `false`: do not force-enable frame pointers. This does not necessarily mean frame pointers will be removed.\n\nThe default behaviour, if frame pointers are not force-enabled, depends on the target.\n\n## [force-unwind-tables](#force-unwind-tables)\n\nThis flag forces the generation of unwind tables. It takes one of the following values:\n\n-   `y`, `yes`, `on`, `true` or no value: Unwind tables are forced to be generated.\n-   `n`, `no`, `off` or `false`: Unwind tables are not forced to be generated. If unwind tables are required by the target an error will be emitted.\n\nThe default if not specified depends on the target.\n\n## [incremental](#incremental)\n\nThis flag allows you to enable incremental compilation, which allows `rustc` to save information after compiling a crate to be reused when recompiling the crate, improving re-compile times. This takes a path to a directory where incremental files will be stored.\n\n## [inline-threshold](#inline-threshold)\n\nThis option lets you set the default threshold for inlining a function. It takes an unsigned integer as a value. Inlining is based on a cost model, where a higher threshold will allow more inlining.\n\nThe default depends on the [opt-level](#opt-level):\n\n| opt-level | Threshold |\n| --- | --- |\n| 0 | N/A, only inlines always-inline functions |\n| 1 | N/A, only inlines always-inline functions and LLVM lifetime intrinsics |\n| 2 | 225 |\n| 3 | 275 |\n| s | 75 |\n| z | 25 |\n\n## [instrument-coverage](#instrument-coverage)\n\nThis option enables instrumentation-based code coverage support. See the chapter on [instrumentation-based code coverage](../instrument-coverage.html) for more information.\n\nNote that while the `-C instrument-coverage` option is stable, the profile data format produced by the resulting instrumentation may change, and may not work with coverage tools other than those built and shipped with the compiler.\n\n## [link-arg](#link-arg)\n\nThis flag lets you append a single extra argument to the linker invocation.\n\n\"Append\" is significant; you can pass this flag multiple times to add multiple arguments.\n\n## [link-args](#link-args)\n\nThis flag lets you append multiple extra arguments to the linker invocation. The options should be separated by spaces.\n\n## [link-dead-code](#link-dead-code)\n\nThis flag controls whether the linker will keep dead code. It takes one of the following values:\n\n-   `y`, `yes`, `on`, `true` or no value: keep dead code.\n-   `n`, `no`, `off` or `false`: remove dead code (the default).\n\nAn example of when this flag might be useful is when trying to construct code coverage metrics.\n\n## [link-self-contained](#link-self-contained)\n\nOn `windows-gnu`, `linux-musl`, and `wasi` targets, this flag controls whether the linker will use libraries and objects shipped with Rust instead of those in the system. It takes one of the following values:\n\n-   no value: rustc will use heuristic to disable self-contained mode if system has necessary tools.\n-   `y`, `yes`, `on`, `true`: use only libraries/objects shipped with Rust.\n-   `n`, `no`, `off` or `false`: rely on the user or the linker to provide non-Rust libraries/objects.\n\nThis allows overriding cases when detection fails or user wants to use shipped libraries.\n\n## [linker](#linker)\n\nThis flag controls which linker `rustc` invokes to link your code. It takes a path to the linker executable. If this flag is not specified, the linker will be inferred based on the target. See also the [linker-flavor](#linker-flavor) flag for another way to specify the linker.\n\n## [linker-flavor](#linker-flavor)\n\nThis flag controls the linker flavor used by `rustc`. If a linker is given with the [`-C linker` flag](#linker), then the linker flavor is inferred from the value provided. If no linker is given then the linker flavor is used to determine the linker to use. Every `rustc` target defaults to some linker flavor. Valid options are:\n\n-   `em`: use [Emscripten `emcc`](https://emscripten.org/docs/tools_reference/emcc.html).\n-   `gcc`: use the `cc` executable, which is typically gcc or clang on many systems.\n-   `ld`: use the `ld` executable.\n-   `msvc`: use the `link.exe` executable from Microsoft Visual Studio MSVC.\n-   `wasm-ld`: use the [`wasm-ld`](https://lld.llvm.org/WebAssembly.html) executable, a port of LLVM `lld` for WebAssembly.\n-   `ld64.lld`: use the LLVM `lld` executable with the [`-flavor darwin` flag](https://releases.llvm.org/12.0.0/tools/lld/docs/Driver.html) for Apple's `ld`.\n-   `ld.lld`: use the LLVM `lld` executable with the [`-flavor gnu` flag](https://releases.llvm.org/12.0.0/tools/lld/docs/Driver.html) for GNU binutils' `ld`.\n-   `lld-link`: use the LLVM `lld` executable with the [`-flavor link` flag](https://releases.llvm.org/12.0.0/tools/lld/docs/Driver.html) for Microsoft's `link.exe`.\n\n## [linker-plugin-lto](#linker-plugin-lto)\n\nThis flag defers LTO optimizations to the linker. See [linker-plugin-LTO](../linker-plugin-lto.html) for more details. It takes one of the following values:\n\n-   `y`, `yes`, `on`, `true` or no value: enable linker plugin LTO.\n-   `n`, `no`, `off` or `false`: disable linker plugin LTO (the default).\n-   A path to the linker plugin.\n\nMore specifically this flag will cause the compiler to replace its typical object file output with LLVM bitcode files. For example an rlib produced with `-Clinker-plugin-lto` will still have `*.o` files in it, but they'll all be LLVM bitcode instead of actual machine code. It is expected that the native platform linker is capable of loading these LLVM bitcode files and generating code at link time (typically after performing optimizations).\n\nNote that rustc can also read its own object files produced with `-Clinker-plugin-lto`. If an rlib is only ever going to get used later with a `-Clto` compilation then you can pass `-Clinker-plugin-lto` to speed up compilation and avoid generating object files that aren't used.\n\n## [llvm-args](#llvm-args)\n\nThis flag can be used to pass a list of arguments directly to LLVM.\n\nThe list must be separated by spaces.\n\nPass `--help` to see a list of options.\n\n## [lto](#lto)\n\nThis flag controls whether LLVM uses [link time optimizations](https://llvm.org/docs/LinkTimeOptimization.html) to produce better optimized code, using whole-program analysis, at the cost of longer linking time. It takes one of the following values:\n\n-   `y`, `yes`, `on`, `true`, `fat`, or no value: perform \"fat\" LTO which attempts to perform optimizations across all crates within the dependency graph.\n-   `n`, `no`, `off`, `false`: disables LTO.\n-   `thin`: perform [\"thin\" LTO](http://blog.llvm.org/2016/06/thinlto-scalable-and-incremental-lto.html). This is similar to \"fat\", but takes substantially less time to run while still achieving performance gains similar to \"fat\".\n\nIf `-C lto` is not specified, then the compiler will attempt to perform \"thin local LTO\" which performs \"thin\" LTO on the local crate only across its [codegen units](#codegen-units). When `-C lto` is not specified, LTO is disabled if codegen units is 1 or optimizations are disabled ([`-C opt-level=0`](#opt-level)). That is:\n\n-   When `-C lto` is not specified:\n    -   `codegen-units=1`: disable LTO.\n    -   `opt-level=0`: disable LTO.\n-   When `-C lto` is specified:\n    -   `lto`: 16 codegen units, perform fat LTO across crates.\n    -   `codegen-units=1` + `lto`: 1 codegen unit, fat LTO across crates.\n\nSee also [linker-plugin-lto](#linker-plugin-lto) for cross-language LTO.\n\nThis option allows you to control the metadata used for symbol mangling. This takes a space-separated list of strings. Mangled symbols will incorporate a hash of the metadata. This may be used, for example, to differentiate symbols between two different versions of the same crate being linked.\n\n## [no-prepopulate-passes](#no-prepopulate-passes)\n\nThis flag tells the pass manager to use an empty list of passes, instead of the usual pre-populated list of passes.\n\n## [no-redzone](#no-redzone)\n\nThis flag allows you to disable [the red zone](https://en.wikipedia.org/wiki/Red_zone_(computing)). It takes one of the following values:\n\n-   `y`, `yes`, `on`, `true` or no value: disable the red zone.\n-   `n`, `no`, `off` or `false`: enable the red zone.\n\nThe default behaviour, if the flag is not specified, depends on the target.\n\n## [no-stack-check](#no-stack-check)\n\nThis option is deprecated and does nothing.\n\n## [no-vectorize-loops](#no-vectorize-loops)\n\nThis flag disables [loop vectorization](https://llvm.org/docs/Vectorizers.html#the-loop-vectorizer).\n\n## [no-vectorize-slp](#no-vectorize-slp)\n\nThis flag disables vectorization using [superword-level parallelism](https://llvm.org/docs/Vectorizers.html#the-slp-vectorizer).\n\n## [opt-level](#opt-level)\n\nThis flag controls the optimization level.\n\n-   `0`: no optimizations, also turns on [`cfg(debug_assertions)`](#debug-assertions) (the default).\n-   `1`: basic optimizations.\n-   `2`: some optimizations.\n-   `3`: all optimizations.\n-   `s`: optimize for binary size.\n-   `z`: optimize for binary size, but also turn off loop vectorization.\n\nNote: The [`-O` flag](about:blank/command-line-arguments.html#option-o-optimize) is an alias for `-C opt-level=2`.\n\nThe default is `0`.\n\n## [overflow-checks](#overflow-checks)\n\nThis flag allows you to control the behavior of [runtime integer overflow](about:blank/reference/expressions/operator-expr.html#overflow). When overflow-checks are enabled, a panic will occur on overflow. This flag takes one of the following values:\n\n-   `y`, `yes`, `on`, `true` or no value: enable overflow checks.\n-   `n`, `no`, `off` or `false`: disable overflow checks.\n\nIf not specified, overflow checks are enabled if [debug-assertions](#debug-assertions) are enabled, disabled otherwise.\n\n## [panic](#panic)\n\nThis option lets you control what happens when the code panics.\n\n-   `abort`: terminate the process upon panic\n-   `unwind`: unwind the stack upon panic\n\nIf not specified, the default depends on the target.\n\n## [passes](#passes)\n\nThis flag can be used to add extra [LLVM passes](http://llvm.org/docs/Passes.html) to the compilation.\n\nThe list must be separated by spaces.\n\nSee also the [`no-prepopulate-passes`](#no-prepopulate-passes) flag.\n\n## [prefer-dynamic](#prefer-dynamic)\n\nBy default, `rustc` prefers to statically link dependencies. This option will indicate that dynamic linking should be used if possible if both a static and dynamic versions of a library are available. There is an internal algorithm for determining whether or not it is possible to statically or dynamically link with a dependency. For example, `cdylib` crate types may only use static linkage. This flag takes one of the following values:\n\n-   `y`, `yes`, `on`, `true` or no value: use dynamic linking.\n-   `n`, `no`, `off` or `false`: use static linking (the default).\n\n## [profile-generate](#profile-generate)\n\nThis flag allows for creating instrumented binaries that will collect profiling data for use with profile-guided optimization (PGO). The flag takes an optional argument which is the path to a directory into which the instrumented binary will emit the collected data. See the chapter on [profile-guided optimization](../profile-guided-optimization.html) for more information.\n\n## [profile-use](#profile-use)\n\nThis flag specifies the profiling data file to be used for profile-guided optimization (PGO). The flag takes a mandatory argument which is the path to a valid `.profdata` file. See the chapter on [profile-guided optimization](../profile-guided-optimization.html) for more information.\n\n## [relocation-model](#relocation-model)\n\nThis option controls generation of [position-independent code (PIC)](https://en.wikipedia.org/wiki/Position-independent_code).\n\nSupported values for this option are:\n\n#### [Primary relocation models](#primary-relocation-models)\n\n-   `static` - non-relocatable code, machine instructions may use absolute addressing modes.\n    \n-   `pic` - fully relocatable position independent code, machine instructions need to use relative addressing modes.  \n    Equivalent to the \"uppercase\" `-fPIC` or `-fPIE` options in other compilers, depending on the produced crate types.  \n    This is the default model for majority of supported targets.\n    \n-   `pie` - position independent executable, relocatable code but without support for symbol interpositioning (replacing symbols by name using `LD_PRELOAD` and similar). Equivalent to the \"uppercase\" `-fPIE` option in other compilers. `pie` code cannot be linked into shared libraries (you'll get a linking error on attempt to do this).\n    \n\n#### [Special relocation models](#special-relocation-models)\n\n-   `dynamic-no-pic` - relocatable external references, non-relocatable code.  \n    Only makes sense on Darwin and is rarely used.  \n    If StackOverflow tells you to use this as an opt-out of PIC or PIE, don't believe it, use `-C relocation-model=static` instead.\n-   `ropi`, `rwpi` and `ropi-rwpi` - relocatable code and read-only data, relocatable read-write data, and combination of both, respectively.  \n    Only makes sense for certain embedded ARM targets.\n-   `default` - relocation model default to the current target.  \n    Only makes sense as an override for some other explicitly specified relocation model previously set on the command line.\n\nSupported values can also be discovered by running `rustc --print relocation-models`.\n\n#### [Linking effects](#linking-effects)\n\nIn addition to codegen effects, `relocation-model` has effects during linking.\n\nIf the relocation model is `pic` and the current target supports position-independent executables (PIE), the linker will be instructed (`-pie`) to produce one.  \nIf the target doesn't support both position-independent and statically linked executables, then `-C target-feature=+crt-static` \"wins\" over `-C relocation-model=pic`, and the linker is instructed (`-static`) to produce a statically linked but not position-independent executable.\n\n## [relro-level](#relro-level)\n\nThis flag controls what level of RELRO (Relocation Read-Only) is enabled. RELRO is an exploit mitigation which makes the Global Offset Table (GOT) read-only.\n\nSupported values for this option are:\n\n-   `off`: Dynamically linked functions are resolved lazily and the GOT is writable.\n-   `partial`: Dynamically linked functions are resolved lazily and written into the Procedure Linking Table (PLT) part of the GOT (`.got.plt`). The non-PLT part of the GOT (`.got`) is made read-only and both are moved to prevent writing from buffer overflows.\n-   `full`: Dynamically linked functions are resolved at the start of program execution and the Global Offset Table (`.got`/`.got.plt`) is populated eagerly and then made read-only. The GOT is also moved to prevent writing from buffer overflows. Full RELRO uses more memory and increases process startup time.\n\nThis flag is ignored on platforms where RELRO is not supported (targets which do not use the ELF binary format), such as Windows or macOS. Each rustc target has its own default for RELRO. rustc enables Full RELRO by default on platforms where it is supported.\n\nThis flag lets you print remarks for optimization passes.\n\nThe list of passes should be separated by spaces.\n\n`all` will remark on every pass.\n\n## [rpath](#rpath)\n\nThis flag controls whether [`rpath`](https://en.wikipedia.org/wiki/Rpath) is enabled. It takes one of the following values:\n\n-   `y`, `yes`, `on`, `true` or no value: enable rpath.\n-   `n`, `no`, `off` or `false`: disable rpath (the default).\n\n## [save-temps](#save-temps)\n\nThis flag controls whether temporary files generated during compilation are deleted once compilation finishes. It takes one of the following values:\n\n-   `y`, `yes`, `on`, `true` or no value: save temporary files.\n-   `n`, `no`, `off` or `false`: delete temporary files (the default).\n\n## [soft-float](#soft-float)\n\nThis option controls whether `rustc` generates code that emulates floating point instructions in software. It takes one of the following values:\n\n-   `y`, `yes`, `on`, `true` or no value: use soft floats.\n-   `n`, `no`, `off` or `false`: use hardware floats (the default).\n\n## [split-debuginfo](#split-debuginfo)\n\nThis option controls the emission of \"split debuginfo\" for debug information that `rustc` generates. The default behavior of this option is platform-specific, and not all possible values for this option work on all platforms. Possible values are:\n\n-   `off` - This is the default for platforms with ELF binaries and windows-gnu (not Windows MSVC and not macOS). This typically means that DWARF debug information can be found in the final artifact in sections of the executable. This option is not supported on Windows MSVC. On macOS this options prevents the final execution of `dsymutil` to generate debuginfo.\n    \n-   `packed` - This is the default for Windows MSVC and macOS. The term \"packed\" here means that all the debug information is packed into a separate file from the main executable. On Windows MSVC this is a `*.pdb` file, on macOS this is a `*.dSYM` folder, and on other platforms this is a `*.dwp` file.\n    \n-   `unpacked` - This means that debug information will be found in separate files for each compilation unit (object file). This is not supported on Windows MSVC. On macOS this means the original object files will contain debug information. On other Unix platforms this means that `*.dwo` files will contain debug information.\n    \n\nNote that all three options are supported on Linux and Apple platforms, `packed` is supported on Windows-MSVC, and all other platforms support `off`. Attempting to use an unsupported option requires using the nightly channel with the `-Z unstable-options` flag.\n\n## [strip](#strip)\n\nThe option `-C strip=val` controls stripping of debuginfo and similar auxiliary data from binaries during linking.\n\nSupported values for this option are:\n\n-   `none` - debuginfo and symbols are not modified.\n-   `debuginfo` - debuginfo sections and debuginfo symbols from the symbol table section are stripped at link time and are not copied to the produced binary. This should leave backtraces mostly-intact but may make using a debugger like gdb or lldb ineffectual. Prior to 1.79, this unintentionally disabled the generation of `*.pdb` files on MSVC, resulting in the absence of symbols.\n-   `symbols` - same as `debuginfo`, but the rest of the symbol table section is stripped as well, depending on platform support. On platforms which depend on this symbol table for backtraces, profiling, and similar, this can affect them so negatively as to make the trace incomprehensible. Programs which may be combined with others, such as CLI pipelines and developer tooling, or even anything which wants crash-reporting, should usually avoid `-Cstrip=symbols`.\n\nNote that, at any level, removing debuginfo only necessarily impacts \"friendly\" introspection. `-Cstrip` cannot be relied on as a meaningful security or obfuscation measure, as disassemblers and decompilers can extract considerable information even in the absence of symbols.\n\n## [symbol-mangling-version](#symbol-mangling-version)\n\nThis option controls the [name mangling](https://en.wikipedia.org/wiki/Name_mangling) format for encoding Rust item names for the purpose of generating object code and linking.\n\nSupported values for this option are:\n\n-   `v0` — The \"v0\" mangling scheme.\n\nThe default, if not specified, will use a compiler-chosen default which may change in the future.\n\nSee the [Symbol Mangling](../symbol-mangling/index.html) chapter for details on symbol mangling and the mangling format.\n\n## [target-cpu](#target-cpu)\n\nThis instructs `rustc` to generate code specifically for a particular processor.\n\nYou can run `rustc --print target-cpus` to see the valid options to pass and the default target CPU for the current build target. Each target has a default base CPU. Special values include:\n\n-   `native` can be passed to use the processor of the host machine.\n-   `generic` refers to an LLVM target with minimal features but modern tuning.\n\n## [target-feature](#target-feature)\n\nIndividual targets will support different features; this flag lets you control enabling or disabling a feature. Each feature should be prefixed with a `+` to enable it or `-` to disable it.\n\nFeatures from multiple `-C target-feature` options are combined.  \nMultiple features can be specified in a single option by separating them with commas - `-C target-feature=+x,-y`.  \nIf some feature is specified more than once with both `+` and `-`, then values passed later override values passed earlier.  \nFor example, `-C target-feature=+x,-y,+z -Ctarget-feature=-x,+y` is equivalent to `-C target-feature=-x,+y,+z`.\n\nTo see the valid options and an example of use, run `rustc --print target-features`.\n\nUsing this flag is unsafe and might result in [undefined runtime behavior](../targets/known-issues.html).\n\nSee also the [`target_feature` attribute](about:blank/reference/attributes/codegen.html#the-target_feature-attribute) for controlling features per-function.\n\nThis also supports the feature `+crt-static` and `-crt-static` to control [static C runtime linkage](about:blank/reference/linkage.html#static-and-dynamic-c-runtimes).\n\nEach target and [`target-cpu`](#target-cpu) has a default set of enabled features.\n\n## [tune-cpu](#tune-cpu)\n\nThis instructs `rustc` to schedule code specifically for a particular processor. This does not affect the compatibility (instruction sets or ABI), but should make your code slightly more efficient on the selected CPU.\n\nThe valid options are the same as those for [`target-cpu`](#target-cpu). The default is `None`, which LLVM translates as the `target-cpu`.\n\nThis is an unstable option. Use `-Z tune-cpu=machine` to specify a value.\n\nDue to limitations in LLVM (12.0.0-git9218f92), this option is currently effective only for x86 targets.",
	"html": "<!DOCTYPE html><html lang=\"en\" class=\"light\" dir=\"ltr\"><head>\n        <!-- Book generated using mdBook -->\n        <meta charset=\"UTF-8\">\n        <title>Codegen Options - The rustc book</title>\n\n\n        <!-- Custom HTML head -->\n        \n        <meta name=\"description\" content=\"\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <meta name=\"theme-color\" content=\"rgb(255, 255, 255)\">\n\n        <link rel=\"icon\" href=\"../favicon.svg\">\n        <link rel=\"shortcut icon\" href=\"../favicon.png\">\n        <link rel=\"stylesheet\" href=\"../css/variables.css\">\n        <link rel=\"stylesheet\" href=\"../css/general.css\">\n        <link rel=\"stylesheet\" href=\"../css/chrome.css\">\n        <link rel=\"stylesheet\" href=\"../css/print.css\" media=\"print\">\n\n        <!-- Fonts -->\n        <link rel=\"stylesheet\" href=\"../FontAwesome/css/font-awesome.css\">\n        <link rel=\"stylesheet\" href=\"../fonts/fonts.css\">\n\n        <!-- Highlight.js Stylesheets -->\n        <link rel=\"stylesheet\" href=\"../highlight.css\">\n        <link rel=\"stylesheet\" href=\"../tomorrow-night.css\" disabled=\"\">\n        <link rel=\"stylesheet\" href=\"../ayu-highlight.css\" disabled=\"\">\n\n        <!-- Custom theme stylesheets -->\n\n    </head>\n    <body class=\"js sidebar-visible\">\n    <div id=\"body-container\">\n        <!-- Provide site root to javascript -->\n        <script>\n            var path_to_root = \"../\";\n            var default_theme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"navy\" : \"light\";\n        </script>\n\n        <!-- Work around some values being stored in localStorage wrapped in quotes -->\n        <script>\n            try {\n                var theme = localStorage.getItem('mdbook-theme');\n                var sidebar = localStorage.getItem('mdbook-sidebar');\n\n                if (theme.startsWith('\"') && theme.endsWith('\"')) {\n                    localStorage.setItem('mdbook-theme', theme.slice(1, theme.length - 1));\n                }\n\n                if (sidebar.startsWith('\"') && sidebar.endsWith('\"')) {\n                    localStorage.setItem('mdbook-sidebar', sidebar.slice(1, sidebar.length - 1));\n                }\n            } catch (e) { }\n        </script>\n\n        <!-- Set the theme before any content is loaded, prevents flash -->\n        <script>\n            var theme;\n            try { theme = localStorage.getItem('mdbook-theme'); } catch(e) { }\n            if (theme === null || theme === undefined) { theme = default_theme; }\n            var html = document.querySelector('html');\n            html.classList.remove('light')\n            html.classList.add(theme);\n            var body = document.querySelector('body');\n            body.classList.remove('no-js')\n            body.classList.add('js');\n        </script>\n\n        <input type=\"checkbox\" id=\"sidebar-toggle-anchor\" class=\"hidden\">\n\n        <!-- Hide / unhide sidebar before it is displayed -->\n        <script>\n            var body = document.querySelector('body');\n            var sidebar = null;\n            var sidebar_toggle = document.getElementById(\"sidebar-toggle-anchor\");\n            if (document.body.clientWidth >= 1080) {\n                try { sidebar = localStorage.getItem('mdbook-sidebar'); } catch(e) { }\n                sidebar = sidebar || 'visible';\n            } else {\n                sidebar = 'hidden';\n            }\n            sidebar_toggle.checked = sidebar === 'visible';\n            body.classList.remove('sidebar-visible');\n            body.classList.add(\"sidebar-\" + sidebar);\n        </script>\n\n        <nav id=\"sidebar\" class=\"sidebar\" aria-label=\"Table of contents\" aria-hidden=\"false\">\n            <div class=\"sidebar-scrollbox\">\n                <ol class=\"chapter\"><li class=\"chapter-item expanded \"><a href=\"../what-is-rustc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.</strong> What is rustc?</a></li><li class=\"chapter-item expanded \"><a href=\"../command-line-arguments.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.</strong> Command-line Arguments</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../codegen-options/index.html\" class=\"active\" tabindex=\"0\"><strong aria-hidden=\"true\">2.1.</strong> Codegen Options</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../jobserver.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.</strong> Jobserver</a></li><li class=\"chapter-item expanded \"><a href=\"../lints/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.</strong> Lints</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../lints/levels.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.</strong> Lint Levels</a></li><li class=\"chapter-item expanded \"><a href=\"../lints/groups.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.</strong> Lint Groups</a></li><li class=\"chapter-item expanded \"><a href=\"../lints/listing/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.</strong> Lint Listing</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../lints/listing/allowed-by-default.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.1.</strong> Allowed-by-default Lints</a></li><li class=\"chapter-item expanded \"><a href=\"../lints/listing/warn-by-default.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.2.</strong> Warn-by-default Lints</a></li><li class=\"chapter-item expanded \"><a href=\"../lints/listing/deny-by-default.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.3.</strong> Deny-by-default Lints</a></li></ol></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../json.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.</strong> JSON Output</a></li><li class=\"chapter-item expanded \"><a href=\"../tests/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.</strong> Tests</a></li><li class=\"chapter-item expanded \"><a href=\"../platform-support.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.</strong> Platform Support</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../target-tier-policy.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.1.</strong> Target Tier Policy</a></li><li class=\"chapter-item expanded \"><a href=\"../platform-support/TEMPLATE.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.2.</strong> Template for Target-specific Documentation</a></li><li class=\"chapter-item expanded \"><a href=\"../platform-support/arm64ec-pc-windows-msvc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.3.</strong> arm64ec-pc-windows-msvc</a></li><li class=\"chapter-item expanded \"><a href=\"../platform-support/apple-darwin.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.4.</strong> *-apple-darwin</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../platform-support/i686-apple-darwin.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.4.1.</strong> i686-apple-darwin</a></li><li class=\"chapter-item expanded \"><a href=\"../platform-support/x86_64h-apple-darwin.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.4.2.</strong> x86_64h-apple-darwin</a></li><li class=\"chapter-item expanded \"><a href=\"../platform-support/arm64e-apple-darwin.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.4.3.</strong> arm64e-apple-darwin</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../platform-support/apple-ios.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.5.</strong> *-apple-ios</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../platform-support/apple-ios-macabi.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.5.1.</strong> *-apple-ios-macabi</a></li><li class=\"chapter-item expanded \"><a href=\"../platform-support/arm64e-apple-ios.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.5.2.</strong> arm64e-apple-ios</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../platform-support/apple-tvos.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.6.</strong> *-apple-tvos</a></li><li class=\"chapter-item expanded \"><a href=\"../platform-support/apple-watchos.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.7.</strong> *-apple-watchos</a></li><li class=\"chapter-item expanded \"><a href=\"../platform-support/apple-visionos.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.8.</strong> *-apple-visionos</a></li><li class=\"chapter-item expanded \"><a href=\"../platform-support/aarch64-nintendo-switch-freestanding.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.9.</strong> aarch64-nintendo-switch-freestanding</a></li><li class=\"chapter-item expanded \"><a href=\"../platform-support/armeb-unknown-linux-gnueabi.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.10.</strong> armeb-unknown-linux-gnueabi</a></li><li class=\"chapter-item expanded \"><a href=\"../platform-support/arm-none-eabi.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.11.</strong> arm-none-eabi</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../platform-support/armv4t-none-eabi.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.11.1.</strong> armv4t-none-eabi</a></li><li class=\"chapter-item expanded \"><a href=\"../platform-support/armv5te-none-eabi.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.11.2.</strong> armv5te-none-eabi</a></li><li class=\"chapter-item expanded \"><a href=\"../platform-support/armv7r-none-eabi.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.11.3.</strong> armv7r-none-eabi</a></li><li class=\"chapter-item expanded \"><a href=\"../platform-support/armv8r-none-eabihf.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.11.4.</strong> armv8r-none-eabihf</a></li><li class=\"chapter-item expanded \"><a href=\"../platform-support/thumbv6m-none-eabi.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.11.5.</strong> thumbv6m-none-eabi</a></li><li class=\"chapter-item expanded \"><a href=\"../platform-support/thumbv7em-none-eabi.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.11.6.</strong> thumbv7em-none-eabi*</a></li><li class=\"chapter-item expanded \"><a href=\"../platform-support/thumbv7m-none-eabi.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.11.7.</strong> thumbv7m-none-eabi</a></li><li class=\"chapter-item expanded \"><a href=\"../platform-support/thumbv8m.base-none-eabi.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.11.8.</strong> thumbv8m.base-none-eabi</a></li><li class=\"chapter-item expanded \"><a href=\"../platform-support/thumbv8m.main-none-eabi.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.11.9.</strong> thumbv8m.main-none-eabi*</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../platform-support/armv6k-nintendo-3ds.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.12.</strong> armv6k-nintendo-3ds</a></li><li class=\"chapter-item expanded \"><a href=\"../platform-support/armv7-sony-vita-newlibeabihf.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.13.</strong> armv7-sony-vita-newlibeabihf</a></li><li class=\"chapter-item expanded \"><a href=\"../platform-support/armv7-unknown-linux-uclibceabi.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.14.</strong> armv7-unknown-linux-uclibceabi</a></li><li class=\"chapter-item expanded \"><a href=\"../platform-support/armv7-unknown-linux-uclibceabihf.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.15.</strong> armv7-unknown-linux-uclibceabihf</a></li><li class=\"chapter-item expanded \"><a href=\"../platform-support/android.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.16.</strong> *-android and *-androideabi</a></li><li class=\"chapter-item expanded \"><a href=\"../platform-support/openharmony.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.17.</strong> *-linux-ohos</a></li><li class=\"chapter-item expanded \"><a href=\"../platform-support/hurd.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.18.</strong> *-hurd-gnu</a></li><li class=\"chapter-item expanded \"><a href=\"../platform-support/aarch64-unknown-teeos.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.19.</strong> aarch64-unknown-teeos</a></li><li class=\"chapter-item expanded \"><a href=\"../platform-support/esp-idf.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.20.</strong> *-esp-espidf</a></li><li class=\"chapter-item expanded \"><a href=\"../platform-support/fuchsia.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.21.</strong> *-unknown-fuchsia</a></li><li class=\"chapter-item expanded \"><a href=\"../platform-support/kmc-solid.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.22.</strong> *-kmc-solid_*</a></li><li class=\"chapter-item expanded \"><a href=\"../platform-support/csky-unknown-linux-gnuabiv2.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.23.</strong> csky-unknown-linux-gnuabiv2*</a></li><li class=\"chapter-item expanded \"><a href=\"../platform-support/hexagon-unknown-linux-musl.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.24.</strong> hexagon-unknown-linux-musl</a></li><li class=\"chapter-item expanded \"><a href=\"../platform-support/hexagon-unknown-none-elf.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.25.</strong> hexagon-unknown-none-elf</a></li><li class=\"chapter-item expanded \"><a href=\"../platform-support/loongarch-linux.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.26.</strong> loongarch*-unknown-linux-*</a></li><li class=\"chapter-item expanded \"><a href=\"../platform-support/loongarch-none.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.27.</strong> loongarch*-unknown-none*</a></li><li class=\"chapter-item expanded \"><a href=\"../platform-support/m68k-unknown-linux-gnu.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.28.</strong> m68k-unknown-linux-gnu</a></li><li class=\"chapter-item expanded \"><a href=\"../platform-support/mips64-openwrt-linux-musl.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.29.</strong> mips64-openwrt-linux-musl</a></li><li class=\"chapter-item expanded \"><a href=\"../platform-support/mipsel-sony-psx.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.30.</strong> mipsel-sony-psx</a></li><li class=\"chapter-item expanded \"><a href=\"../platform-support/mips-release-6.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.31.</strong> mipsisa*r6*-unknown-linux-gnu*</a></li><li class=\"chapter-item expanded \"><a href=\"../platform-support/nvptx64-nvidia-cuda.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.32.</strong> nvptx64-nvidia-cuda</a></li><li class=\"chapter-item expanded \"><a href=\"../platform-support/aix.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.33.</strong> powerpc64-ibm-aix</a></li><li class=\"chapter-item expanded \"><a href=\"../platform-support/riscv32im-risc0-zkvm-elf.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.34.</strong> riscv32im-risc0-zkvm-elf</a></li><li class=\"chapter-item expanded \"><a href=\"../platform-support/riscv32imac-unknown-xous-elf.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.35.</strong> riscv32imac-unknown-xous-elf</a></li><li class=\"chapter-item expanded \"><a href=\"../platform-support/riscv32-unknown-none-elf.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.36.</strong> riscv32*-unknown-none-elf</a></li><li class=\"chapter-item expanded \"><a href=\"../platform-support/sparc-unknown-none-elf.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.37.</strong> sparc-unknown-none-elf</a></li><li class=\"chapter-item expanded \"><a href=\"../platform-support/pc-windows-gnullvm.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.38.</strong> *-pc-windows-gnullvm</a></li><li class=\"chapter-item expanded \"><a href=\"../platform-support/nto-qnx.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.39.</strong> *-nto-qnx-*</a></li><li class=\"chapter-item expanded \"><a href=\"../platform-support/unikraft-linux-musl.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.40.</strong> *-unikraft-linux-musl</a></li><li class=\"chapter-item expanded \"><a href=\"../platform-support/hermit.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.41.</strong> *-unknown-hermit</a></li><li class=\"chapter-item expanded \"><a href=\"../platform-support/netbsd.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.42.</strong> *-unknown-netbsd*</a></li><li class=\"chapter-item expanded \"><a href=\"../platform-support/openbsd.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.43.</strong> *-unknown-openbsd</a></li><li class=\"chapter-item expanded \"><a href=\"../platform-support/unknown-uefi.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.44.</strong> *-unknown-uefi</a></li><li class=\"chapter-item expanded \"><a href=\"../platform-support/wasm32-wasip1.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.45.</strong> wasm32-wasip1</a></li><li class=\"chapter-item expanded \"><a href=\"../platform-support/wasm32-wasip1-threads.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.46.</strong> wasm32-wasip1-threads</a></li><li class=\"chapter-item expanded \"><a href=\"../platform-support/wasm32-wasip2.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.47.</strong> wasm32-wasip2</a></li><li class=\"chapter-item expanded \"><a href=\"../platform-support/wasm64-unknown-unknown.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.48.</strong> wasm64-unknown-unknown</a></li><li class=\"chapter-item expanded \"><a href=\"../platform-support/win7-windows-msvc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.49.</strong> *-win7-windows-msvc</a></li><li class=\"chapter-item expanded \"><a href=\"../platform-support/x86_64-fortanix-unknown-sgx.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.50.</strong> x86_64-fortanix-unknown-sgx</a></li><li class=\"chapter-item expanded \"><a href=\"../platform-support/x86_64-unknown-linux-none.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.51.</strong> x86_64-unknown-linux-none.md</a></li><li class=\"chapter-item expanded \"><a href=\"../platform-support/x86_64-unknown-none.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.52.</strong> x86_64-unknown-none</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../targets/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.</strong> Targets</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../targets/built-in.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.1.</strong> Built-in Targets</a></li><li class=\"chapter-item expanded \"><a href=\"../targets/custom.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.</strong> Custom Targets</a></li><li class=\"chapter-item expanded \"><a href=\"../targets/known-issues.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.3.</strong> Known Issues</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../profile-guided-optimization.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.</strong> Profile-guided Optimization</a></li><li class=\"chapter-item expanded \"><a href=\"../instrument-coverage.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.</strong> Instrumentation-based Code Coverage</a></li><li class=\"chapter-item expanded \"><a href=\"../linker-plugin-lto.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.</strong> Linker-plugin-based LTO</a></li><li class=\"chapter-item expanded \"><a href=\"../check-cfg.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.</strong> Checking Conditional Configurations</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../check-cfg/cargo-specifics.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.1.</strong> Cargo Specifics</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../exploit-mitigations.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.</strong> Exploit Mitigations</a></li><li class=\"chapter-item expanded \"><a href=\"../symbol-mangling/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.</strong> Symbol Mangling</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../symbol-mangling/v0.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.1.</strong> v0 Symbol Format</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../contributing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.</strong> Contributing to rustc</a></li></ol>\n            </div>\n            <div id=\"sidebar-resize-handle\" class=\"sidebar-resize-handle\">\n                <div class=\"sidebar-resize-indicator\"></div>\n            </div>\n        </nav>\n\n        <!-- Track and set sidebar scroll position -->\n        <script>\n            var sidebarScrollbox = document.querySelector('#sidebar .sidebar-scrollbox');\n            sidebarScrollbox.addEventListener('click', function(e) {\n                if (e.target.tagName === 'A') {\n                    sessionStorage.setItem('sidebar-scroll', sidebarScrollbox.scrollTop);\n                }\n            }, { passive: true });\n            var sidebarScrollTop = sessionStorage.getItem('sidebar-scroll');\n            sessionStorage.removeItem('sidebar-scroll');\n            if (sidebarScrollTop) {\n                // preserve sidebar scroll position when navigating via links within sidebar\n                sidebarScrollbox.scrollTop = sidebarScrollTop;\n            } else {\n                // scroll sidebar to current active section when navigating via \"next/previous chapter\" buttons\n                var activeSection = document.querySelector('#sidebar .active');\n                if (activeSection) {\n                    activeSection.scrollIntoView({ block: 'center' });\n                }\n            }\n        </script>\n\n        <div id=\"page-wrapper\" class=\"page-wrapper\">\n\n            <div class=\"page\">\n                                <div id=\"menu-bar-hover-placeholder\"></div>\n                <div id=\"menu-bar\" class=\"menu-bar bordered\" style=\"top: 0px;\">\n                    <div class=\"left-buttons\">\n                        <label id=\"sidebar-toggle\" class=\"icon-button\" for=\"sidebar-toggle-anchor\" title=\"Toggle Table of Contents\" aria-label=\"Toggle Table of Contents\" aria-controls=\"sidebar\" aria-expanded=\"true\">\n                            <i class=\"fa fa-bars\"></i>\n                        </label>\n                        <button id=\"theme-toggle\" class=\"icon-button\" type=\"button\" title=\"Change theme\" aria-label=\"Change theme\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-controls=\"theme-list\">\n                            <i class=\"fa fa-paint-brush\"></i>\n                        </button>\n                        <ul id=\"theme-list\" class=\"theme-popup\" aria-label=\"Themes\" role=\"menu\">\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme theme-selected\" id=\"light\">Light</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"rust\">Rust</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"coal\">Coal</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"navy\">Navy</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"ayu\">Ayu</button></li>\n                        </ul>\n                        <button id=\"search-toggle\" class=\"icon-button\" type=\"button\" title=\"Search. (Shortkey: s)\" aria-label=\"Toggle Searchbar\" aria-expanded=\"false\" aria-keyshortcuts=\"S\" aria-controls=\"searchbar\">\n                            <i class=\"fa fa-search\"></i>\n                        </button>\n                    </div>\n\n                    <h1 class=\"menu-title\">The rustc book</h1>\n\n                    <div class=\"right-buttons\">\n                        <a href=\"../print.html\" title=\"Print this book\" aria-label=\"Print this book\">\n                            <i id=\"print-button\" class=\"fa fa-print\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/rust/tree/master/src/doc/rustc\" title=\"Git repository\" aria-label=\"Git repository\">\n                            <i id=\"git-repository-button\" class=\"fa fa-github\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/rust/edit/master/src/doc/rustc/src/codegen-options/index.md\" title=\"Suggest an edit\" aria-label=\"Suggest an edit\">\n                            <i id=\"git-edit-button\" class=\"fa fa-edit\"></i>\n                        </a>\n\n                    </div>\n                </div>\n\n                <div id=\"search-wrapper\" class=\"hidden\">\n                    <form id=\"searchbar-outer\" class=\"searchbar-outer\">\n                        <input type=\"search\" id=\"searchbar\" name=\"searchbar\" placeholder=\"Search this book ...\" aria-controls=\"searchresults-outer\" aria-describedby=\"searchresults-header\">\n                    </form>\n                    <div id=\"searchresults-outer\" class=\"searchresults-outer hidden\">\n                        <div id=\"searchresults-header\" class=\"searchresults-header\"></div>\n                        <ul id=\"searchresults\">\n                        </ul>\n                    </div>\n                </div>\n\n                <!-- Apply ARIA attributes after the sidebar and the sidebar toggle button are added to the DOM -->\n                <script>\n                    document.getElementById('sidebar-toggle').setAttribute('aria-expanded', sidebar === 'visible');\n                    document.getElementById('sidebar').setAttribute('aria-hidden', sidebar !== 'visible');\n                    Array.from(document.querySelectorAll('#sidebar a')).forEach(function(link) {\n                        link.setAttribute('tabIndex', sidebar === 'visible' ? 0 : -1);\n                    });\n                </script>\n\n                <div id=\"content\" class=\"content\">\n                    <main>\n                        <h1 id=\"codegen-options\"><a class=\"header\" href=\"#codegen-options\">Codegen Options</a></h1>\n<p>All of these options are passed to <code class=\"hljs\">rustc</code> via the <code class=\"hljs\">-C</code> flag, short for \"codegen.\" You can see\na version of this list for your exact compiler by running <code class=\"hljs\">rustc -C help</code>.</p>\n<h2 id=\"ar\"><a class=\"header\" href=\"#ar\">ar</a></h2>\n<p>This option is deprecated and does nothing.</p>\n<h2 id=\"code-model\"><a class=\"header\" href=\"#code-model\">code-model</a></h2>\n<p>This option lets you choose which code model to use. <br>\nCode models put constraints on address ranges that the program and its symbols may use. <br>\nWith smaller address ranges machine instructions\nmay be able to use more compact addressing modes.</p>\n<p>The specific ranges depend on target architectures and addressing modes available to them. <br>\nFor x86 more detailed description of its code models can be found in\n<a href=\"https://github.com/hjl-tools/x86-psABI/wiki/x86-64-psABI-1.0.pdf\">System V Application Binary Interface</a>\nspecification.</p>\n<p>Supported values for this option are:</p>\n<ul>\n<li><code class=\"hljs\">tiny</code> - Tiny code model.</li>\n<li><code class=\"hljs\">small</code> - Small code model. This is the default model for majority of supported targets.</li>\n<li><code class=\"hljs\">kernel</code> - Kernel code model.</li>\n<li><code class=\"hljs\">medium</code> - Medium code model.</li>\n<li><code class=\"hljs\">large</code> - Large code model.</li>\n</ul>\n<p>Supported values can also be discovered by running <code class=\"hljs\">rustc --print code-models</code>.</p>\n<h2 id=\"codegen-units\"><a class=\"header\" href=\"#codegen-units\">codegen-units</a></h2>\n<p>This flag controls the maximum number of code generation units the crate is\nsplit into. It takes an integer greater than 0.</p>\n<p>When a crate is split into multiple codegen units, LLVM is able to process\nthem in parallel. Increasing parallelism may speed up compile times, but may\nalso produce slower code. Setting this to 1 may improve the performance of\ngenerated code, but may be slower to compile.</p>\n<p>The default value, if not specified, is 16 for non-incremental builds. For\nincremental builds the default is 256 which allows caching to be more granular.</p>\n<h2 id=\"collapse-macro-debuginfo\"><a class=\"header\" href=\"#collapse-macro-debuginfo\">collapse-macro-debuginfo</a></h2>\n<p>This flag controls whether code locations from a macro definition are collapsed into a single\nlocation associated with that macro's call site, when generating debuginfo for this crate.</p>\n<p>This option, if passed, overrides both default collapsing behavior and <code class=\"hljs\">#[collapse_debuginfo]</code>\nattributes in code.</p>\n<ul>\n<li><code class=\"hljs\">y</code>, <code class=\"hljs\">yes</code>, <code class=\"hljs\">on</code>, <code class=\"hljs\">true</code>: collapse code locations in debuginfo.</li>\n<li><code class=\"hljs\">n</code>, <code class=\"hljs\">no</code>, <code class=\"hljs\">off</code> or <code class=\"hljs\">false</code>: do not collapse code locations in debuginfo.</li>\n<li><code class=\"hljs\">external</code>: collapse code locations in debuginfo only if the macro comes from a different crate.</li>\n</ul>\n<h2 id=\"control-flow-guard\"><a class=\"header\" href=\"#control-flow-guard\">control-flow-guard</a></h2>\n<p>This flag controls whether LLVM enables the Windows <a href=\"https://docs.microsoft.com/en-us/windows/win32/secbp/control-flow-guard\">Control Flow\nGuard</a>\nplatform security feature. This flag is currently ignored for non-Windows targets.\nIt takes one of the following values:</p>\n<ul>\n<li><code class=\"hljs\">y</code>, <code class=\"hljs\">yes</code>, <code class=\"hljs\">on</code>, <code class=\"hljs\">true</code>, <code class=\"hljs\">checks</code>, or no value: enable Control Flow Guard.</li>\n<li><code class=\"hljs\">nochecks</code>: emit Control Flow Guard metadata without runtime enforcement checks (this\nshould only be used for testing purposes as it does not provide security enforcement).</li>\n<li><code class=\"hljs\">n</code>, <code class=\"hljs\">no</code>, <code class=\"hljs\">off</code>, <code class=\"hljs\">false</code>: do not enable Control Flow Guard (the default).</li>\n</ul>\n<h2 id=\"debug-assertions\"><a class=\"header\" href=\"#debug-assertions\">debug-assertions</a></h2>\n<p>This flag lets you turn <code class=\"hljs\">cfg(debug_assertions)</code> <a href=\"../../reference/conditional-compilation.html#debug_assertions\">conditional\ncompilation</a> on\nor off. It takes one of the following values:</p>\n<ul>\n<li><code class=\"hljs\">y</code>, <code class=\"hljs\">yes</code>, <code class=\"hljs\">on</code>, <code class=\"hljs\">true</code>, or no value: enable debug-assertions.</li>\n<li><code class=\"hljs\">n</code>, <code class=\"hljs\">no</code>, <code class=\"hljs\">off</code> or <code class=\"hljs\">false</code>: disable debug-assertions.</li>\n</ul>\n<p>If not specified, debug assertions are automatically enabled only if the\n<a href=\"#opt-level\">opt-level</a> is 0.</p>\n<h2 id=\"debuginfo\"><a class=\"header\" href=\"#debuginfo\">debuginfo</a></h2>\n<p>This flag controls the generation of debug information. It takes one of the\nfollowing values:</p>\n<ul>\n<li><code class=\"hljs\">0</code> or <code class=\"hljs\">none</code>: no debug info at all (the default).</li>\n<li><code class=\"hljs\">line-directives-only</code>: line info directives only. For the nvptx* targets this enables <a href=\"https://reviews.llvm.org/D46061\">profiling</a>. For other use cases, <code class=\"hljs\">line-tables-only</code> is the better, more compatible choice.</li>\n<li><code class=\"hljs\">line-tables-only</code>: line tables only. Generates the minimal amount of debug info for backtraces with filename/line number info, but not anything else, i.e. no variable or function parameter info.</li>\n<li><code class=\"hljs\">1</code> or <code class=\"hljs\">limited</code>: debug info without type or variable-level information.</li>\n<li><code class=\"hljs\">2</code> or <code class=\"hljs\">full</code>: full debug info.</li>\n</ul>\n<p>Note: The <a href=\"../command-line-arguments.html#option-g-debug\"><code class=\"hljs\">-g</code> flag</a> is an alias for <code class=\"hljs\">-C debuginfo=2</code>.</p>\n<h2 id=\"default-linker-libraries\"><a class=\"header\" href=\"#default-linker-libraries\">default-linker-libraries</a></h2>\n<p>This flag controls whether or not the linker includes its default libraries.\nIt takes one of the following values:</p>\n<ul>\n<li><code class=\"hljs\">y</code>, <code class=\"hljs\">yes</code>, <code class=\"hljs\">on</code>, <code class=\"hljs\">true</code>: include default libraries.</li>\n<li><code class=\"hljs\">n</code>, <code class=\"hljs\">no</code>, <code class=\"hljs\">off</code> or <code class=\"hljs\">false</code> or no value: exclude default libraries (the default).</li>\n</ul>\n<p>For example, for gcc flavor linkers, this issues the <code class=\"hljs\">-nodefaultlibs</code> flag to\nthe linker.</p>\n<h2 id=\"dlltool\"><a class=\"header\" href=\"#dlltool\">dlltool</a></h2>\n<p>On <code class=\"hljs\">windows-gnu</code> targets, this flag controls which dlltool <code class=\"hljs\">rustc</code> invokes to\ngenerate import libraries when using the <a href=\"../../reference/items/external-blocks.html#the-link-attribute\"><code class=\"hljs\">raw-dylib</code> link kind</a>.\nIt takes a path to <a href=\"https://sourceware.org/binutils/docs/binutils/dlltool.html\">the dlltool executable</a>.\nIf this flag is not specified, a dlltool executable will be inferred based on\nthe host environment and target.</p>\n<h2 id=\"embed-bitcode\"><a class=\"header\" href=\"#embed-bitcode\">embed-bitcode</a></h2>\n<p>This flag controls whether or not the compiler embeds LLVM bitcode into object\nfiles. It takes one of the following values:</p>\n<ul>\n<li><code class=\"hljs\">y</code>, <code class=\"hljs\">yes</code>, <code class=\"hljs\">on</code>, <code class=\"hljs\">true</code> or no value: put bitcode in rlibs (the default).</li>\n<li><code class=\"hljs\">n</code>, <code class=\"hljs\">no</code>, <code class=\"hljs\">off</code> or <code class=\"hljs\">false</code>: omit bitcode from rlibs.</li>\n</ul>\n<p>LLVM bitcode is required when rustc is performing link-time optimization (LTO).\nIt is also required on some targets like iOS ones where vendors look for LLVM\nbitcode. Embedded bitcode will appear in rustc-generated object files inside of\na section whose name is defined by the target platform. Most of the time this is\n<code class=\"hljs\">.llvmbc</code>.</p>\n<p>The use of <code class=\"hljs\">-C embed-bitcode=no</code> can significantly improve compile times and\nreduce generated file sizes if your compilation does not actually need bitcode\n(e.g. if you're not compiling for iOS or you're not performing LTO). For these\nreasons, Cargo uses <code class=\"hljs\">-C embed-bitcode=no</code> whenever possible. Likewise, if you\nare building directly with <code class=\"hljs\">rustc</code> we recommend using <code class=\"hljs\">-C embed-bitcode=no</code>\nwhenever you are not using LTO.</p>\n<p>If combined with <code class=\"hljs\">-C lto</code>, <code class=\"hljs\">-C embed-bitcode=no</code> will cause <code class=\"hljs\">rustc</code> to abort\nat start-up, because the combination is invalid.</p>\n<blockquote>\n<p><strong>Note</strong>: if you're building Rust code with LTO then you probably don't even\nneed the <code class=\"hljs\">embed-bitcode</code> option turned on. You'll likely want to use\n<code class=\"hljs\">-Clinker-plugin-lto</code> instead which skips generating object files entirely and\nsimply replaces object files with LLVM bitcode. The only purpose for\n<code class=\"hljs\">-Cembed-bitcode</code> is when you're generating an rlib that is both being used\nwith and without LTO. For example Rust's standard library ships with embedded\nbitcode since users link to it both with and without LTO.</p>\n<p>This also may make you wonder why the default is <code class=\"hljs\">yes</code> for this option. The\nreason for that is that it's how it was for rustc 1.44 and prior. In 1.45 this\noption was added to turn off what had always been the default.</p>\n</blockquote>\n<h2 id=\"extra-filename\"><a class=\"header\" href=\"#extra-filename\">extra-filename</a></h2>\n<p>This option allows you to put extra data in each output filename. It takes a\nstring to add as a suffix to the filename. See the <a href=\"../command-line-arguments.html#option-emit\"><code class=\"hljs\">--emit</code>\nflag</a> for more information.</p>\n<h2 id=\"force-frame-pointers\"><a class=\"header\" href=\"#force-frame-pointers\">force-frame-pointers</a></h2>\n<p>This flag forces the use of frame pointers. It takes one of the following\nvalues:</p>\n<ul>\n<li><code class=\"hljs\">y</code>, <code class=\"hljs\">yes</code>, <code class=\"hljs\">on</code>, <code class=\"hljs\">true</code> or no value: force-enable frame pointers.</li>\n<li><code class=\"hljs\">n</code>, <code class=\"hljs\">no</code>, <code class=\"hljs\">off</code> or <code class=\"hljs\">false</code>: do not force-enable frame pointers. This does\nnot necessarily mean frame pointers will be removed.</li>\n</ul>\n<p>The default behaviour, if frame pointers are not force-enabled, depends on the\ntarget.</p>\n<h2 id=\"force-unwind-tables\"><a class=\"header\" href=\"#force-unwind-tables\">force-unwind-tables</a></h2>\n<p>This flag forces the generation of unwind tables. It takes one of the following\nvalues:</p>\n<ul>\n<li><code class=\"hljs\">y</code>, <code class=\"hljs\">yes</code>, <code class=\"hljs\">on</code>, <code class=\"hljs\">true</code> or no value: Unwind tables are forced to be generated.</li>\n<li><code class=\"hljs\">n</code>, <code class=\"hljs\">no</code>, <code class=\"hljs\">off</code> or <code class=\"hljs\">false</code>: Unwind tables are not forced to be generated. If unwind\ntables are required by the target an error will be emitted.</li>\n</ul>\n<p>The default if not specified depends on the target.</p>\n<h2 id=\"incremental\"><a class=\"header\" href=\"#incremental\">incremental</a></h2>\n<p>This flag allows you to enable incremental compilation, which allows <code class=\"hljs\">rustc</code>\nto save information after compiling a crate to be reused when recompiling the\ncrate, improving re-compile times. This takes a path to a directory where\nincremental files will be stored.</p>\n<h2 id=\"inline-threshold\"><a class=\"header\" href=\"#inline-threshold\">inline-threshold</a></h2>\n<p>This option lets you set the default threshold for inlining a function. It\ntakes an unsigned integer as a value. Inlining is based on a cost model, where\na higher threshold will allow more inlining.</p>\n<p>The default depends on the <a href=\"#opt-level\">opt-level</a>:</p>\n<div class=\"table-wrapper\"><table><thead><tr><th>opt-level</th><th>Threshold</th></tr></thead><tbody>\n<tr><td>0</td><td>N/A, only inlines always-inline functions</td></tr>\n<tr><td>1</td><td>N/A, only inlines always-inline functions and LLVM lifetime intrinsics</td></tr>\n<tr><td>2</td><td>225</td></tr>\n<tr><td>3</td><td>275</td></tr>\n<tr><td>s</td><td>75</td></tr>\n<tr><td>z</td><td>25</td></tr>\n</tbody></table>\n</div>\n<h2 id=\"instrument-coverage\"><a class=\"header\" href=\"#instrument-coverage\">instrument-coverage</a></h2>\n<p>This option enables instrumentation-based code coverage support. See the\nchapter on <a href=\"../instrument-coverage.html\">instrumentation-based code coverage</a> for more information.</p>\n<p>Note that while the <code class=\"hljs\">-C instrument-coverage</code> option is stable, the profile data\nformat produced by the resulting instrumentation may change, and may not work\nwith coverage tools other than those built and shipped with the compiler.</p>\n<h2 id=\"link-arg\"><a class=\"header\" href=\"#link-arg\">link-arg</a></h2>\n<p>This flag lets you append a single extra argument to the linker invocation.</p>\n<p>\"Append\" is significant; you can pass this flag multiple times to add multiple arguments.</p>\n<h2 id=\"link-args\"><a class=\"header\" href=\"#link-args\">link-args</a></h2>\n<p>This flag lets you append multiple extra arguments to the linker invocation. The\noptions should be separated by spaces.</p>\n<h2 id=\"link-dead-code\"><a class=\"header\" href=\"#link-dead-code\">link-dead-code</a></h2>\n<p>This flag controls whether the linker will keep dead code. It takes one of\nthe following values:</p>\n<ul>\n<li><code class=\"hljs\">y</code>, <code class=\"hljs\">yes</code>, <code class=\"hljs\">on</code>, <code class=\"hljs\">true</code> or no value: keep dead code.</li>\n<li><code class=\"hljs\">n</code>, <code class=\"hljs\">no</code>, <code class=\"hljs\">off</code> or <code class=\"hljs\">false</code>: remove dead code (the default).</li>\n</ul>\n<p>An example of when this flag might be useful is when trying to construct code coverage\nmetrics.</p>\n<h2 id=\"link-self-contained\"><a class=\"header\" href=\"#link-self-contained\">link-self-contained</a></h2>\n<p>On <code class=\"hljs\">windows-gnu</code>, <code class=\"hljs\">linux-musl</code>, and <code class=\"hljs\">wasi</code> targets, this flag controls whether the\nlinker will use libraries and objects shipped with Rust instead of those in the system.\nIt takes one of the following values:</p>\n<ul>\n<li>no value: rustc will use heuristic to disable self-contained mode if system has necessary tools.</li>\n<li><code class=\"hljs\">y</code>, <code class=\"hljs\">yes</code>, <code class=\"hljs\">on</code>, <code class=\"hljs\">true</code>: use only libraries/objects shipped with Rust.</li>\n<li><code class=\"hljs\">n</code>, <code class=\"hljs\">no</code>, <code class=\"hljs\">off</code> or <code class=\"hljs\">false</code>: rely on the user or the linker to provide non-Rust libraries/objects.</li>\n</ul>\n<p>This allows overriding cases when detection fails or user wants to use shipped libraries.</p>\n<h2 id=\"linker\"><a class=\"header\" href=\"#linker\">linker</a></h2>\n<p>This flag controls which linker <code class=\"hljs\">rustc</code> invokes to link your code. It takes a\npath to the linker executable. If this flag is not specified, the linker will\nbe inferred based on the target. See also the <a href=\"#linker-flavor\">linker-flavor</a>\nflag for another way to specify the linker.</p>\n<h2 id=\"linker-flavor\"><a class=\"header\" href=\"#linker-flavor\">linker-flavor</a></h2>\n<p>This flag controls the linker flavor used by <code class=\"hljs\">rustc</code>. If a linker is given with\nthe <a href=\"#linker\"><code class=\"hljs\">-C linker</code> flag</a>, then the linker flavor is inferred from the\nvalue provided. If no linker is given then the linker flavor is used to\ndetermine the linker to use. Every <code class=\"hljs\">rustc</code> target defaults to some linker\nflavor. Valid options are:</p>\n<ul>\n<li><code class=\"hljs\">em</code>: use <a href=\"https://emscripten.org/docs/tools_reference/emcc.html\">Emscripten <code class=\"hljs\">emcc</code></a>.</li>\n<li><code class=\"hljs\">gcc</code>: use the <code class=\"hljs\">cc</code> executable, which is typically gcc or clang on many systems.</li>\n<li><code class=\"hljs\">ld</code>: use the <code class=\"hljs\">ld</code> executable.</li>\n<li><code class=\"hljs\">msvc</code>: use the <code class=\"hljs\">link.exe</code> executable from Microsoft Visual Studio MSVC.</li>\n<li><code class=\"hljs\">wasm-ld</code>: use the <a href=\"https://lld.llvm.org/WebAssembly.html\"><code class=\"hljs\">wasm-ld</code></a>\nexecutable, a port of LLVM <code class=\"hljs\">lld</code> for WebAssembly.</li>\n<li><code class=\"hljs\">ld64.lld</code>: use the LLVM <code class=\"hljs\">lld</code> executable with the <a href=\"https://releases.llvm.org/12.0.0/tools/lld/docs/Driver.html\"><code class=\"hljs\">-flavor darwin</code>\nflag</a> for Apple's <code class=\"hljs\">ld</code>.</li>\n<li><code class=\"hljs\">ld.lld</code>: use the LLVM <code class=\"hljs\">lld</code> executable with the <a href=\"https://releases.llvm.org/12.0.0/tools/lld/docs/Driver.html\"><code class=\"hljs\">-flavor gnu</code>\nflag</a> for GNU binutils' <code class=\"hljs\">ld</code>.</li>\n<li><code class=\"hljs\">lld-link</code>: use the LLVM <code class=\"hljs\">lld</code> executable with the <a href=\"https://releases.llvm.org/12.0.0/tools/lld/docs/Driver.html\"><code class=\"hljs\">-flavor link</code>\nflag</a> for Microsoft's <code class=\"hljs\">link.exe</code>.</li>\n</ul>\n<h2 id=\"linker-plugin-lto\"><a class=\"header\" href=\"#linker-plugin-lto\">linker-plugin-lto</a></h2>\n<p>This flag defers LTO optimizations to the linker. See\n<a href=\"../linker-plugin-lto.html\">linker-plugin-LTO</a> for more details. It takes one of\nthe following values:</p>\n<ul>\n<li><code class=\"hljs\">y</code>, <code class=\"hljs\">yes</code>, <code class=\"hljs\">on</code>, <code class=\"hljs\">true</code> or no value: enable linker plugin LTO.</li>\n<li><code class=\"hljs\">n</code>, <code class=\"hljs\">no</code>, <code class=\"hljs\">off</code> or <code class=\"hljs\">false</code>: disable linker plugin LTO (the default).</li>\n<li>A path to the linker plugin.</li>\n</ul>\n<p>More specifically this flag will cause the compiler to replace its typical\nobject file output with LLVM bitcode files. For example an rlib produced with\n<code class=\"hljs\">-Clinker-plugin-lto</code> will still have <code class=\"hljs\">*.o</code> files in it, but they'll all be LLVM\nbitcode instead of actual machine code. It is expected that the native platform\nlinker is capable of loading these LLVM bitcode files and generating code at\nlink time (typically after performing optimizations).</p>\n<p>Note that rustc can also read its own object files produced with\n<code class=\"hljs\">-Clinker-plugin-lto</code>. If an rlib is only ever going to get used later with a\n<code class=\"hljs\">-Clto</code> compilation then you can pass <code class=\"hljs\">-Clinker-plugin-lto</code> to speed up\ncompilation and avoid generating object files that aren't used.</p>\n<h2 id=\"llvm-args\"><a class=\"header\" href=\"#llvm-args\">llvm-args</a></h2>\n<p>This flag can be used to pass a list of arguments directly to LLVM.</p>\n<p>The list must be separated by spaces.</p>\n<p>Pass <code class=\"hljs\">--help</code> to see a list of options.</p>\n<h2 id=\"lto\"><a class=\"header\" href=\"#lto\">lto</a></h2>\n<p>This flag controls whether LLVM uses <a href=\"https://llvm.org/docs/LinkTimeOptimization.html\">link time\noptimizations</a> to produce\nbetter optimized code, using whole-program analysis, at the cost of longer\nlinking time. It takes one of the following values:</p>\n<ul>\n<li><code class=\"hljs\">y</code>, <code class=\"hljs\">yes</code>, <code class=\"hljs\">on</code>, <code class=\"hljs\">true</code>, <code class=\"hljs\">fat</code>, or no value: perform \"fat\" LTO which attempts to\nperform optimizations across all crates within the dependency graph.</li>\n<li><code class=\"hljs\">n</code>, <code class=\"hljs\">no</code>, <code class=\"hljs\">off</code>, <code class=\"hljs\">false</code>: disables LTO.</li>\n<li><code class=\"hljs\">thin</code>: perform <a href=\"http://blog.llvm.org/2016/06/thinlto-scalable-and-incremental-lto.html\">\"thin\"\nLTO</a>.\nThis is similar to \"fat\", but takes substantially less time to run while\nstill achieving performance gains similar to \"fat\".</li>\n</ul>\n<p>If <code class=\"hljs\">-C lto</code> is not specified, then the compiler will attempt to perform \"thin\nlocal LTO\" which performs \"thin\" LTO on the local crate only across its\n<a href=\"#codegen-units\">codegen units</a>. When <code class=\"hljs\">-C lto</code> is not specified, LTO is\ndisabled if codegen units is 1 or optimizations are disabled (<a href=\"#opt-level\"><code class=\"hljs\">-C opt-level=0</code></a>). That is:</p>\n<ul>\n<li>When <code class=\"hljs\">-C lto</code> is not specified:\n<ul>\n<li><code class=\"hljs\">codegen-units=1</code>: disable LTO.</li>\n<li><code class=\"hljs\">opt-level=0</code>: disable LTO.</li>\n</ul>\n</li>\n<li>When <code class=\"hljs\">-C lto</code> is specified:\n<ul>\n<li><code class=\"hljs\">lto</code>: 16 codegen units, perform fat LTO across crates.</li>\n<li><code class=\"hljs\">codegen-units=1</code> + <code class=\"hljs\">lto</code>: 1 codegen unit, fat LTO across crates.</li>\n</ul>\n</li>\n</ul>\n<p>See also <a href=\"#linker-plugin-lto\">linker-plugin-lto</a> for cross-language LTO.</p>\n<h2 id=\"metadata\"><a class=\"header\" href=\"#metadata\">metadata</a></h2>\n<p>This option allows you to control the metadata used for symbol mangling. This\ntakes a space-separated list of strings. Mangled symbols will incorporate a\nhash of the metadata. This may be used, for example, to differentiate symbols\nbetween two different versions of the same crate being linked.</p>\n<h2 id=\"no-prepopulate-passes\"><a class=\"header\" href=\"#no-prepopulate-passes\">no-prepopulate-passes</a></h2>\n<p>This flag tells the pass manager to use an empty list of passes, instead of the\nusual pre-populated list of passes.</p>\n<h2 id=\"no-redzone\"><a class=\"header\" href=\"#no-redzone\">no-redzone</a></h2>\n<p>This flag allows you to disable <a href=\"https://en.wikipedia.org/wiki/Red_zone_(computing)\">the\nred zone</a>. It takes one\nof the following values:</p>\n<ul>\n<li><code class=\"hljs\">y</code>, <code class=\"hljs\">yes</code>, <code class=\"hljs\">on</code>, <code class=\"hljs\">true</code> or no value: disable the red zone.</li>\n<li><code class=\"hljs\">n</code>, <code class=\"hljs\">no</code>, <code class=\"hljs\">off</code> or <code class=\"hljs\">false</code>: enable the red zone.</li>\n</ul>\n<p>The default behaviour, if the flag is not specified, depends on the target.</p>\n<h2 id=\"no-stack-check\"><a class=\"header\" href=\"#no-stack-check\">no-stack-check</a></h2>\n<p>This option is deprecated and does nothing.</p>\n<h2 id=\"no-vectorize-loops\"><a class=\"header\" href=\"#no-vectorize-loops\">no-vectorize-loops</a></h2>\n<p>This flag disables <a href=\"https://llvm.org/docs/Vectorizers.html#the-loop-vectorizer\">loop\nvectorization</a>.</p>\n<h2 id=\"no-vectorize-slp\"><a class=\"header\" href=\"#no-vectorize-slp\">no-vectorize-slp</a></h2>\n<p>This flag disables vectorization using\n<a href=\"https://llvm.org/docs/Vectorizers.html#the-slp-vectorizer\">superword-level\nparallelism</a>.</p>\n<h2 id=\"opt-level\"><a class=\"header\" href=\"#opt-level\">opt-level</a></h2>\n<p>This flag controls the optimization level.</p>\n<ul>\n<li><code class=\"hljs\">0</code>: no optimizations, also turns on\n<a href=\"#debug-assertions\"><code class=\"hljs\">cfg(debug_assertions)</code></a> (the default).</li>\n<li><code class=\"hljs\">1</code>: basic optimizations.</li>\n<li><code class=\"hljs\">2</code>: some optimizations.</li>\n<li><code class=\"hljs\">3</code>: all optimizations.</li>\n<li><code class=\"hljs\">s</code>: optimize for binary size.</li>\n<li><code class=\"hljs\">z</code>: optimize for binary size, but also turn off loop vectorization.</li>\n</ul>\n<p>Note: The <a href=\"../command-line-arguments.html#option-o-optimize\"><code class=\"hljs\">-O</code> flag</a> is an alias for <code class=\"hljs\">-C opt-level=2</code>.</p>\n<p>The default is <code class=\"hljs\">0</code>.</p>\n<h2 id=\"overflow-checks\"><a class=\"header\" href=\"#overflow-checks\">overflow-checks</a></h2>\n<p>This flag allows you to control the behavior of <a href=\"../../reference/expressions/operator-expr.html#overflow\">runtime integer\noverflow</a>. When\noverflow-checks are enabled, a panic will occur on overflow. This flag takes\none of the following values:</p>\n<ul>\n<li><code class=\"hljs\">y</code>, <code class=\"hljs\">yes</code>, <code class=\"hljs\">on</code>, <code class=\"hljs\">true</code> or no value: enable overflow checks.</li>\n<li><code class=\"hljs\">n</code>, <code class=\"hljs\">no</code>, <code class=\"hljs\">off</code> or <code class=\"hljs\">false</code>: disable overflow checks.</li>\n</ul>\n<p>If not specified, overflow checks are enabled if\n<a href=\"#debug-assertions\">debug-assertions</a> are enabled, disabled otherwise.</p>\n<h2 id=\"panic\"><a class=\"header\" href=\"#panic\">panic</a></h2>\n<p>This option lets you control what happens when the code panics.</p>\n<ul>\n<li><code class=\"hljs\">abort</code>: terminate the process upon panic</li>\n<li><code class=\"hljs\">unwind</code>: unwind the stack upon panic</li>\n</ul>\n<p>If not specified, the default depends on the target.</p>\n<h2 id=\"passes\"><a class=\"header\" href=\"#passes\">passes</a></h2>\n<p>This flag can be used to add extra <a href=\"http://llvm.org/docs/Passes.html\">LLVM\npasses</a> to the compilation.</p>\n<p>The list must be separated by spaces.</p>\n<p>See also the <a href=\"#no-prepopulate-passes\"><code class=\"hljs\">no-prepopulate-passes</code></a> flag.</p>\n<h2 id=\"prefer-dynamic\"><a class=\"header\" href=\"#prefer-dynamic\">prefer-dynamic</a></h2>\n<p>By default, <code class=\"hljs\">rustc</code> prefers to statically link dependencies. This option will\nindicate that dynamic linking should be used if possible if both a static and\ndynamic versions of a library are available. There is an internal algorithm\nfor determining whether or not it is possible to statically or dynamically\nlink with a dependency. For example, <code class=\"hljs\">cdylib</code> crate types may only use static\nlinkage. This flag takes one of the following values:</p>\n<ul>\n<li><code class=\"hljs\">y</code>, <code class=\"hljs\">yes</code>, <code class=\"hljs\">on</code>, <code class=\"hljs\">true</code> or no value: use dynamic linking.</li>\n<li><code class=\"hljs\">n</code>, <code class=\"hljs\">no</code>, <code class=\"hljs\">off</code> or <code class=\"hljs\">false</code>: use static linking (the default).</li>\n</ul>\n<h2 id=\"profile-generate\"><a class=\"header\" href=\"#profile-generate\">profile-generate</a></h2>\n<p>This flag allows for creating instrumented binaries that will collect\nprofiling data for use with profile-guided optimization (PGO). The flag takes\nan optional argument which is the path to a directory into which the\ninstrumented binary will emit the collected data. See the chapter on\n<a href=\"../profile-guided-optimization.html\">profile-guided optimization</a> for more information.</p>\n<h2 id=\"profile-use\"><a class=\"header\" href=\"#profile-use\">profile-use</a></h2>\n<p>This flag specifies the profiling data file to be used for profile-guided\noptimization (PGO). The flag takes a mandatory argument which is the path\nto a valid <code class=\"hljs\">.profdata</code> file. See the chapter on\n<a href=\"../profile-guided-optimization.html\">profile-guided optimization</a> for more information.</p>\n<h2 id=\"relocation-model\"><a class=\"header\" href=\"#relocation-model\">relocation-model</a></h2>\n<p>This option controls generation of\n<a href=\"https://en.wikipedia.org/wiki/Position-independent_code\">position-independent code (PIC)</a>.</p>\n<p>Supported values for this option are:</p>\n<h4 id=\"primary-relocation-models\"><a class=\"header\" href=\"#primary-relocation-models\">Primary relocation models</a></h4>\n<ul>\n<li>\n<p><code class=\"hljs\">static</code> - non-relocatable code, machine instructions may use absolute addressing modes.</p>\n</li>\n<li>\n<p><code class=\"hljs\">pic</code> - fully relocatable position independent code,\nmachine instructions need to use relative addressing modes.  <br>\nEquivalent to the \"uppercase\" <code class=\"hljs\">-fPIC</code> or <code class=\"hljs\">-fPIE</code> options in other compilers,\ndepending on the produced crate types.  <br>\nThis is the default model for majority of supported targets.</p>\n</li>\n<li>\n<p><code class=\"hljs\">pie</code> - position independent executable, relocatable code but without support for symbol\ninterpositioning (replacing symbols by name using <code class=\"hljs\">LD_PRELOAD</code> and similar). Equivalent to the \"uppercase\" <code class=\"hljs\">-fPIE</code> option in other compilers. <code class=\"hljs\">pie</code>\ncode cannot be linked into shared libraries (you'll get a linking error on attempt to do this).</p>\n</li>\n</ul>\n<h4 id=\"special-relocation-models\"><a class=\"header\" href=\"#special-relocation-models\">Special relocation models</a></h4>\n<ul>\n<li><code class=\"hljs\">dynamic-no-pic</code> - relocatable external references, non-relocatable code.  <br>\nOnly makes sense on Darwin and is rarely used.  <br>\nIf StackOverflow tells you to use this as an opt-out of PIC or PIE, don't believe it,\nuse <code class=\"hljs\">-C relocation-model=static</code> instead.</li>\n<li><code class=\"hljs\">ropi</code>, <code class=\"hljs\">rwpi</code> and <code class=\"hljs\">ropi-rwpi</code> - relocatable code and read-only data, relocatable read-write data,\nand combination of both, respectively.  <br>\nOnly makes sense for certain embedded ARM targets.</li>\n<li><code class=\"hljs\">default</code> - relocation model default to the current target.  <br>\nOnly makes sense as an override for some other explicitly specified relocation model\npreviously set on the command line.</li>\n</ul>\n<p>Supported values can also be discovered by running <code class=\"hljs\">rustc --print relocation-models</code>.</p>\n<h4 id=\"linking-effects\"><a class=\"header\" href=\"#linking-effects\">Linking effects</a></h4>\n<p>In addition to codegen effects, <code class=\"hljs\">relocation-model</code> has effects during linking.</p>\n<p>If the relocation model is <code class=\"hljs\">pic</code> and the current target supports position-independent executables\n(PIE), the linker will be instructed (<code class=\"hljs\">-pie</code>) to produce one.  <br>\nIf the target doesn't support both position-independent and statically linked executables,\nthen <code class=\"hljs\">-C target-feature=+crt-static</code> \"wins\" over <code class=\"hljs\">-C relocation-model=pic</code>,\nand the linker is instructed (<code class=\"hljs\">-static</code>) to produce a statically linked\nbut not position-independent executable.</p>\n<h2 id=\"relro-level\"><a class=\"header\" href=\"#relro-level\">relro-level</a></h2>\n<p>This flag controls what level of RELRO (Relocation Read-Only) is enabled. RELRO is an exploit\nmitigation which makes the Global Offset Table (GOT) read-only.</p>\n<p>Supported values for this option are:</p>\n<ul>\n<li><code class=\"hljs\">off</code>: Dynamically linked functions are resolved lazily and the GOT is writable.</li>\n<li><code class=\"hljs\">partial</code>: Dynamically linked functions are resolved lazily and written into the Procedure\nLinking Table (PLT) part of the GOT (<code class=\"hljs\">.got.plt</code>). The non-PLT part of the GOT (<code class=\"hljs\">.got</code>) is made\nread-only and both are moved to prevent writing from buffer overflows.</li>\n<li><code class=\"hljs\">full</code>: Dynamically linked functions are resolved at the start of program execution and the\nGlobal Offset Table (<code class=\"hljs\">.got</code>/<code class=\"hljs\">.got.plt</code>) is populated eagerly and then made read-only. The GOT is\nalso moved to prevent writing from buffer overflows. Full RELRO uses more memory and increases\nprocess startup time.</li>\n</ul>\n<p>This flag is ignored on platforms where RELRO is not supported (targets which do not use the ELF\nbinary format), such as Windows or macOS. Each rustc target has its own default for RELRO. rustc\nenables Full RELRO by default on platforms where it is supported.</p>\n<h2 id=\"remark\"><a class=\"header\" href=\"#remark\">remark</a></h2>\n<p>This flag lets you print remarks for optimization passes.</p>\n<p>The list of passes should be separated by spaces.</p>\n<p><code class=\"hljs\">all</code> will remark on every pass.</p>\n<h2 id=\"rpath\"><a class=\"header\" href=\"#rpath\">rpath</a></h2>\n<p>This flag controls whether <a href=\"https://en.wikipedia.org/wiki/Rpath\"><code class=\"hljs\">rpath</code></a> is\nenabled. It takes one of the following values:</p>\n<ul>\n<li><code class=\"hljs\">y</code>, <code class=\"hljs\">yes</code>, <code class=\"hljs\">on</code>, <code class=\"hljs\">true</code> or no value: enable rpath.</li>\n<li><code class=\"hljs\">n</code>, <code class=\"hljs\">no</code>, <code class=\"hljs\">off</code> or <code class=\"hljs\">false</code>: disable rpath (the default).</li>\n</ul>\n<h2 id=\"save-temps\"><a class=\"header\" href=\"#save-temps\">save-temps</a></h2>\n<p>This flag controls whether temporary files generated during compilation are\ndeleted once compilation finishes. It takes one of the following values:</p>\n<ul>\n<li><code class=\"hljs\">y</code>, <code class=\"hljs\">yes</code>, <code class=\"hljs\">on</code>, <code class=\"hljs\">true</code> or no value: save temporary files.</li>\n<li><code class=\"hljs\">n</code>, <code class=\"hljs\">no</code>, <code class=\"hljs\">off</code> or <code class=\"hljs\">false</code>: delete temporary files (the default).</li>\n</ul>\n<h2 id=\"soft-float\"><a class=\"header\" href=\"#soft-float\">soft-float</a></h2>\n<p>This option controls whether <code class=\"hljs\">rustc</code> generates code that emulates floating\npoint instructions in software. It takes one of the following values:</p>\n<ul>\n<li><code class=\"hljs\">y</code>, <code class=\"hljs\">yes</code>, <code class=\"hljs\">on</code>, <code class=\"hljs\">true</code> or no value: use soft floats.</li>\n<li><code class=\"hljs\">n</code>, <code class=\"hljs\">no</code>, <code class=\"hljs\">off</code> or <code class=\"hljs\">false</code>: use hardware floats (the default).</li>\n</ul>\n<h2 id=\"split-debuginfo\"><a class=\"header\" href=\"#split-debuginfo\">split-debuginfo</a></h2>\n<p>This option controls the emission of \"split debuginfo\" for debug information\nthat <code class=\"hljs\">rustc</code> generates. The default behavior of this option is\nplatform-specific, and not all possible values for this option work on all\nplatforms. Possible values are:</p>\n<ul>\n<li>\n<p><code class=\"hljs\">off</code> - This is the default for platforms with ELF binaries and windows-gnu\n(not Windows MSVC and not macOS). This typically means that DWARF debug\ninformation can be found in the final artifact in sections of the executable.\nThis option is not supported on Windows MSVC. On macOS this options prevents\nthe final execution of <code class=\"hljs\">dsymutil</code> to generate debuginfo.</p>\n</li>\n<li>\n<p><code class=\"hljs\">packed</code> - This is the default for Windows MSVC and macOS. The term\n\"packed\" here means that all the debug information is packed into a separate\nfile from the main executable. On Windows MSVC this is a <code class=\"hljs\">*.pdb</code> file, on\nmacOS this is a <code class=\"hljs\">*.dSYM</code> folder, and on other platforms this is a <code class=\"hljs\">*.dwp</code>\nfile.</p>\n</li>\n<li>\n<p><code class=\"hljs\">unpacked</code> - This means that debug information will be found in separate\nfiles for each compilation unit (object file). This is not supported on\nWindows MSVC. On macOS this means the original object files will contain\ndebug information. On other Unix platforms this means that <code class=\"hljs\">*.dwo</code> files will\ncontain debug information.</p>\n</li>\n</ul>\n<p>Note that all three options are supported on Linux and Apple platforms,\n<code class=\"hljs\">packed</code> is supported on Windows-MSVC, and all other platforms support <code class=\"hljs\">off</code>.\nAttempting to use an unsupported option requires using the nightly channel\nwith the <code class=\"hljs\">-Z unstable-options</code> flag.</p>\n<h2 id=\"strip\"><a class=\"header\" href=\"#strip\">strip</a></h2>\n<p>The option <code class=\"hljs\">-C strip=val</code> controls stripping of debuginfo and similar auxiliary\ndata from binaries during linking.</p>\n<p>Supported values for this option are:</p>\n<ul>\n<li><code class=\"hljs\">none</code> - debuginfo and symbols are not modified.</li>\n<li><code class=\"hljs\">debuginfo</code> - debuginfo sections and debuginfo symbols from the symbol table\nsection are stripped at link time and are not copied to the produced binary.\nThis should leave backtraces mostly-intact but may make using a debugger like\ngdb or lldb ineffectual. Prior to 1.79, this unintentionally disabled the\ngeneration of <code class=\"hljs\">*.pdb</code> files on MSVC, resulting in the absence of symbols.</li>\n<li><code class=\"hljs\">symbols</code> - same as <code class=\"hljs\">debuginfo</code>, but the rest of the symbol table section is\nstripped as well, depending on platform support. On platforms which depend on\nthis symbol table for backtraces, profiling, and similar, this can affect\nthem so negatively as to make the trace incomprehensible. Programs which may\nbe combined with others, such as CLI pipelines and developer tooling, or even\nanything which wants crash-reporting, should usually avoid <code class=\"hljs\">-Cstrip=symbols</code>.</li>\n</ul>\n<p>Note that, at any level, removing debuginfo only necessarily impacts \"friendly\"\nintrospection. <code class=\"hljs\">-Cstrip</code> cannot be relied on as a meaningful security or\nobfuscation measure, as disassemblers and decompilers can extract considerable\ninformation even in the absence of symbols.</p>\n<h2 id=\"symbol-mangling-version\"><a class=\"header\" href=\"#symbol-mangling-version\">symbol-mangling-version</a></h2>\n<p>This option controls the <a href=\"https://en.wikipedia.org/wiki/Name_mangling\">name mangling</a> format for encoding Rust item names\nfor the purpose of generating object code and linking.</p>\n<p>Supported values for this option are:</p>\n<ul>\n<li><code class=\"hljs\">v0</code> — The \"v0\" mangling scheme.</li>\n</ul>\n<p>The default, if not specified, will use a compiler-chosen default which may\nchange in the future.</p>\n<p>See the <a href=\"../symbol-mangling/index.html\">Symbol Mangling</a> chapter for details on symbol mangling and the mangling format.</p>\n<h2 id=\"target-cpu\"><a class=\"header\" href=\"#target-cpu\">target-cpu</a></h2>\n<p>This instructs <code class=\"hljs\">rustc</code> to generate code specifically for a particular processor.</p>\n<p>You can run <code class=\"hljs\">rustc --print target-cpus</code> to see the valid options to pass\nand the default target CPU for the current build target.\nEach target has a default base CPU. Special values include:</p>\n<ul>\n<li><code class=\"hljs\">native</code> can be passed to use the processor of the host machine.</li>\n<li><code class=\"hljs\">generic</code> refers to an LLVM target with minimal features but modern tuning.</li>\n</ul>\n<h2 id=\"target-feature\"><a class=\"header\" href=\"#target-feature\">target-feature</a></h2>\n<p>Individual targets will support different features; this flag lets you control\nenabling or disabling a feature. Each feature should be prefixed with a <code class=\"hljs\">+</code> to\nenable it or <code class=\"hljs\">-</code> to disable it.</p>\n<p>Features from multiple <code class=\"hljs\">-C target-feature</code> options are combined. <br>\nMultiple features can be specified in a single option by separating them\nwith commas - <code class=\"hljs\">-C target-feature=+x,-y</code>. <br>\nIf some feature is specified more than once with both <code class=\"hljs\">+</code> and <code class=\"hljs\">-</code>,\nthen values passed later override values passed earlier. <br>\nFor example, <code class=\"hljs\">-C target-feature=+x,-y,+z -Ctarget-feature=-x,+y</code>\nis equivalent to <code class=\"hljs\">-C target-feature=-x,+y,+z</code>.</p>\n<p>To see the valid options and an example of use, run <code class=\"hljs\">rustc --print target-features</code>.</p>\n<p>Using this flag is unsafe and might result in <a href=\"../targets/known-issues.html\">undefined runtime\nbehavior</a>.</p>\n<p>See also the <a href=\"../../reference/attributes/codegen.html#the-target_feature-attribute\"><code class=\"hljs\">target_feature</code>\nattribute</a>\nfor controlling features per-function.</p>\n<p>This also supports the feature <code class=\"hljs\">+crt-static</code> and <code class=\"hljs\">-crt-static</code> to control\n<a href=\"../../reference/linkage.html#static-and-dynamic-c-runtimes\">static C runtime linkage</a>.</p>\n<p>Each target and <a href=\"#target-cpu\"><code class=\"hljs\">target-cpu</code></a> has a default set of enabled\nfeatures.</p>\n<h2 id=\"tune-cpu\"><a class=\"header\" href=\"#tune-cpu\">tune-cpu</a></h2>\n<p>This instructs <code class=\"hljs\">rustc</code> to schedule code specifically for a particular\nprocessor. This does not affect the compatibility (instruction sets or ABI),\nbut should make your code slightly more efficient on the selected CPU.</p>\n<p>The valid options are the same as those for <a href=\"#target-cpu\"><code class=\"hljs\">target-cpu</code></a>.\nThe default is <code class=\"hljs\">None</code>, which LLVM translates as the <code class=\"hljs\">target-cpu</code>.</p>\n<p>This is an unstable option. Use <code class=\"hljs\">-Z tune-cpu=machine</code> to specify a value.</p>\n<p>Due to limitations in LLVM (12.0.0-git9218f92), this option is currently\neffective only for x86 targets.</p>\n\n                    </main>\n\n                    <nav class=\"nav-wrapper\" aria-label=\"Page navigation\">\n                        <!-- Mobile navigation buttons -->\n                            <a rel=\"prev\" href=\"../command-line-arguments.html\" class=\"mobile-nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                                <i class=\"fa fa-angle-left\"></i>\n                            </a>\n\n                            <a rel=\"next prefetch\" href=\"../jobserver.html\" class=\"mobile-nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                                <i class=\"fa fa-angle-right\"></i>\n                            </a>\n\n                        <div style=\"clear: both\"></div>\n                    </nav>\n                </div>\n            </div>\n\n            <nav class=\"nav-wide-wrapper\" aria-label=\"Page navigation\">\n                    <a rel=\"prev\" href=\"../command-line-arguments.html\" class=\"nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                        <i class=\"fa fa-angle-left\"></i>\n                    </a>\n\n                    <a rel=\"next prefetch\" href=\"../jobserver.html\" class=\"nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                        <i class=\"fa fa-angle-right\"></i>\n                    </a>\n            </nav>\n\n        </div>\n\n\n\n\n        <script>\n            window.playground_copyable = true;\n        </script>\n\n\n        <script src=\"../elasticlunr.min.js\"></script>\n        <script src=\"../mark.min.js\"></script>\n        <script src=\"../searcher.js\"></script>\n\n        <script src=\"../clipboard.min.js\"></script>\n        <script src=\"../highlight.js\"></script>\n        <script src=\"../book.js\"></script>\n\n        <!-- Custom JS scripts -->\n\n\n    </div>\n    \n\n</body></html>",
	"crawlDate": "2024-07-28T05:14:41.418Z"
}