{
	"title": "var_os in std::env - Rust",
	"url": "https://doc.rust-lang.org/stable/std/env/fn.var_os.html",
	"markdown": "# var\\_os in std::env - Rust\n\n## Function [std](../index.html)::[env](index.html)::[var\\_os](#)\n\n1.0.0 · [source](about:blank/src/std/env.rs.html#266-268) ·\n\n```\npub fn var_os<K: AsRef<OsStr>>(key: K) -> Option<OsString>\n```\n\nExpand description\n\nFetches the environment variable `key` from the current process, returning [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\") if the variable isn’t set or if there is another error.\n\nIt may return `None` if the environment variable’s name contains the equal sign character (`=`) or the NUL character.\n\nNote that this function will not check if the environment variable is valid Unicode. If you want to have an error on invalid UTF-8, use the [`var`](fn.var.html \"fn std::env::var\") function instead.\n\n## [§](#examples)Examples\n\n```\nuse std::env;\n\nlet key = \"HOME\";\nmatch env::var_os(key) {\n    Some(val) => println!(\"{key}: {val:?}\"),\n    None => println!(\"{key} is not defined in the environment.\")\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::env;%0A++++%0A++++let+key+=+%22HOME%22;%0A++++match+env::var_os(key)+%7B%0A++++++++Some(val)+=%3E+println!(%22%7Bkey%7D:+%7Bval:?%7D%22),%0A++++++++None+=%3E+println!(%22%7Bkey%7D+is+not+defined+in+the+environment.%22)%0A++++%7D%0A%7D&edition=2021)\n\nIf expecting a delimited variable (such as `PATH`), [`split_paths`](fn.split_paths.html \"fn std::env::split_paths\") can be used to separate items.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Fetches the environment variable `key` from the current process, returning `None` if the variable isn’t set or if there is another error.\"><title>var_os in std::env - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc fn\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><div class=\"sidebar-elems\"><h2><a href=\"index.html\">In std::env</a></h2><h3><a href=\"index.html#modules\">Modules</a></h3><ul class=\"block mod\"><li><a href=\"consts/index.html\">consts</a></li></ul><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.Args.html\">Args</a></li><li><a href=\"struct.ArgsOs.html\">ArgsOs</a></li><li><a href=\"struct.JoinPathsError.html\">JoinPathsError</a></li><li><a href=\"struct.SplitPaths.html\">SplitPaths</a></li><li><a href=\"struct.Vars.html\">Vars</a></li><li><a href=\"struct.VarsOs.html\">VarsOs</a></li></ul><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.VarError.html\">VarError</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.args.html\">args</a></li><li><a href=\"fn.args_os.html\">args_os</a></li><li><a href=\"fn.current_dir.html\">current_dir</a></li><li><a href=\"fn.current_exe.html\">current_exe</a></li><li><a href=\"fn.home_dir.html\">home_dir</a></li><li><a href=\"fn.join_paths.html\">join_paths</a></li><li><a href=\"fn.remove_var.html\">remove_var</a></li><li><a href=\"fn.set_current_dir.html\">set_current_dir</a></li><li><a href=\"fn.set_var.html\">set_var</a></li><li><a href=\"fn.split_paths.html\">split_paths</a></li><li><a href=\"fn.temp_dir.html\">temp_dir</a></li><li><a href=\"fn.var.html\">var</a></li><li><a href=\"fn.var_os.html\">var_os</a></li><li><a href=\"fn.vars.html\">vars</a></li><li><a href=\"fn.vars_os.html\">vars_os</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Function <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">env</a>::<wbr><a class=\"fn\" href=\"#\">var_os</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/env.rs.html#266-268\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub fn var_os&lt;K: <a class=\"trait\" href=\"../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;&gt;(key: K) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"../ffi/struct.OsString.html\" title=\"struct std::ffi::OsString\">OsString</a>&gt;</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Fetches the environment variable <code>key</code> from the current process, returning\n<a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a> if the variable isn’t set or if there is another error.</p>\n<p>It may return <code>None</code> if the environment variable’s name contains\nthe equal sign character (<code>=</code>) or the NUL character.</p>\n<p>Note that this function will not check if the environment variable\nis valid Unicode. If you want to have an error on invalid UTF-8,\nuse the <a href=\"fn.var.html\" title=\"fn std::env::var\"><code>var</code></a> function instead.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::env;\n\n<span class=\"kw\">let </span>key = <span class=\"string\">\"HOME\"</span>;\n<span class=\"kw\">match </span>env::var_os(key) {\n    <span class=\"prelude-val\">Some</span>(val) =&gt; <span class=\"macro\">println!</span>(<span class=\"string\">\"{key}: {val:?}\"</span>),\n    <span class=\"prelude-val\">None </span>=&gt; <span class=\"macro\">println!</span>(<span class=\"string\">\"{key} is not defined in the environment.\"</span>)\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::env;%0A++++%0A++++let+key+=+%22HOME%22;%0A++++match+env::var_os(key)+%7B%0A++++++++Some(val)+=%3E+println!(%22%7Bkey%7D:+%7Bval:?%7D%22),%0A++++++++None+=%3E+println!(%22%7Bkey%7D+is+not+defined+in+the+environment.%22)%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<p>If expecting a delimited variable (such as <code>PATH</code>), <a href=\"fn.split_paths.html\" title=\"fn std::env::split_paths\"><code>split_paths</code></a>\ncan be used to separate items.</p>\n</div></details></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:22:57.968Z"
}