{
	"title": "write_unaligned in std::ptr - Rust",
	"url": "https://doc.rust-lang.org/stable/std/ptr/fn.write_unaligned.html",
	"markdown": "# write\\_unaligned in std::ptr - Rust\n\n```\npub unsafe fn write_unaligned<T>(dst: *mut T, src: T)\n```\n\nExpand description\n\nOverwrites a memory location with the given value without reading or dropping the old value.\n\nUnlike [`write()`](fn.write.html \"fn std::ptr::write\"), the pointer may be unaligned.\n\n`write_unaligned` does not drop the contents of `dst`. This is safe, but it could leak allocations or resources, so care should be taken not to overwrite an object that should be dropped.\n\nAdditionally, it does not drop `src`. Semantically, `src` is moved into the location pointed to by `dst`.\n\nThis is appropriate for initializing uninitialized memory, or overwriting memory that has previously been read with [`read_unaligned`](fn.read_unaligned.html \"fn std::ptr::read_unaligned\").\n\n## [ยง](#safety)Safety\n\nBehavior is undefined if any of the following conditions are violated:\n\n-   `dst` must be [valid](about:blank/index.html#safety \"mod std::ptr\") for writes.\n\nNote that even if `T` has size `0`, the pointer must be non-null.\n\n### [ยง](#on-packed-structs)On `packed` structs\n\nAttempting to create a raw pointer to an `unaligned` struct field with an expression such as `&packed.unaligned as *const FieldType` creates an intermediate unaligned reference before converting that to a raw pointer. That this reference is temporary and immediately cast is inconsequential as the compiler always expects references to be properly aligned. As a result, using `&packed.unaligned as *const FieldType` causes immediate _undefined behavior_ in your program.\n\nInstead you must use the [`ptr::addr_of_mut!`](macro.addr_of_mut.html \"macro std::ptr::addr_of_mut\") macro to create the pointer. You may use that returned pointer together with this function.\n\nAn example of how to do it and how this relates to `write_unaligned` is:\n\n```\n#[repr(packed, C)]\nstruct Packed {\n    _padding: u8,\n    unaligned: u32,\n}\n\nlet mut packed: Packed = unsafe { std::mem::zeroed() };\n\n// Take the address of a 32-bit integer which is not aligned.\n// In contrast to `&packed.unaligned as *mut _`, this has no undefined behavior.\nlet unaligned = std::ptr::addr_of_mut!(packed.unaligned);\n\nunsafe { std::ptr::write_unaligned(unaligned, 42) };\n\nassert_eq!({packed.unaligned}, 42); // `{...}` forces copying the field instead of creating a reference.\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++%23%5Brepr(packed,+C)%5D%0A++++struct+Packed+%7B%0A++++++++_padding:+u8,%0A++++++++unaligned:+u32,%0A++++%7D%0A++++%0A++++let+mut+packed:+Packed+=+unsafe+%7B+std::mem::zeroed()+%7D;%0A++++%0A++++//+Take+the+address+of+a+32-bit+integer+which+is+not+aligned.%0A++++//+In+contrast+to+%60%26packed.unaligned+as+*mut+_%60,+this+has+no+undefined+behavior.%0A++++let+unaligned+=+std::ptr::addr_of_mut!(packed.unaligned);%0A++++%0A++++unsafe+%7B+std::ptr::write_unaligned(unaligned,+42)+%7D;%0A++++%0A++++assert_eq!(%7Bpacked.unaligned%7D,+42);+//+%60%7B...%7D%60+forces+copying+the+field+instead+of+creating+a+reference.%0A%7D&edition=2021)\n\nAccessing unaligned fields directly with e.g. `packed.unaligned` is safe however (as can be seen in the `assert_eq!` above).\n\n## [ยง](#examples)Examples\n\nWrite a usize value to a byte buffer:\n\n```\nuse std::mem;\n\nfn write_usize(x: &mut [u8], val: usize) {\n    assert!(x.len() >= mem::size_of::<usize>());\n\n    let ptr = x.as_mut_ptr() as *mut usize;\n\n    unsafe { ptr.write_unaligned(val) }\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::mem;%0A++++%0A++++fn+write_usize(x:+%26mut+%5Bu8%5D,+val:+usize)+%7B%0A++++++++assert!(x.len()+%3E=+mem::size_of::%3Cusize%3E());%0A++++%0A++++++++let+ptr+=+x.as_mut_ptr()+as+*mut+usize;%0A++++%0A++++++++unsafe+%7B+ptr.write_unaligned(val)+%7D%0A++++%7D%0A%7D&edition=2021)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Overwrites a memory location with the given value without reading or dropping the old value.\"><title>write_unaligned in std::ptr - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc fn\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><div class=\"sidebar-elems\"><h2><a href=\"index.html\">In std::ptr</a></h2><h3><a href=\"index.html#macros\">Macros</a></h3><ul class=\"block macro\"><li><a href=\"macro.addr_of.html\">addr_of</a></li><li><a href=\"macro.addr_of_mut.html\">addr_of_mut</a></li></ul><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.Alignment.html\">Alignment</a></li><li><a href=\"struct.DynMetadata.html\">DynMetadata</a></li><li><a href=\"struct.NonNull.html\">NonNull</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.Pointee.html\">Pointee</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.addr_eq.html\">addr_eq</a></li><li><a href=\"fn.copy.html\">copy</a></li><li><a href=\"fn.copy_nonoverlapping.html\">copy_nonoverlapping</a></li><li><a href=\"fn.dangling.html\">dangling</a></li><li><a href=\"fn.dangling_mut.html\">dangling_mut</a></li><li><a href=\"fn.drop_in_place.html\">drop_in_place</a></li><li><a href=\"fn.eq.html\">eq</a></li><li><a href=\"fn.from_mut.html\">from_mut</a></li><li><a href=\"fn.from_raw_parts.html\">from_raw_parts</a></li><li><a href=\"fn.from_raw_parts_mut.html\">from_raw_parts_mut</a></li><li><a href=\"fn.from_ref.html\">from_ref</a></li><li><a href=\"fn.hash.html\">hash</a></li><li><a href=\"fn.metadata.html\">metadata</a></li><li><a href=\"fn.null.html\">null</a></li><li><a href=\"fn.null_mut.html\">null_mut</a></li><li><a href=\"fn.read.html\">read</a></li><li><a href=\"fn.read_unaligned.html\">read_unaligned</a></li><li><a href=\"fn.read_volatile.html\">read_volatile</a></li><li><a href=\"fn.replace.html\">replace</a></li><li><a href=\"fn.slice_from_raw_parts.html\">slice_from_raw_parts</a></li><li><a href=\"fn.slice_from_raw_parts_mut.html\">slice_from_raw_parts_mut</a></li><li><a href=\"fn.swap.html\">swap</a></li><li><a href=\"fn.swap_nonoverlapping.html\">swap_nonoverlapping</a></li><li><a href=\"fn.with_exposed_provenance.html\">with_exposed_provenance</a></li><li><a href=\"fn.with_exposed_provenance_mut.html\">with_exposed_provenance_mut</a></li><li><a href=\"fn.without_provenance.html\">without_provenance</a></li><li><a href=\"fn.without_provenance_mut.html\">without_provenance_mut</a></li><li><a href=\"fn.write.html\">write</a></li><li><a href=\"fn.write_bytes.html\">write_bytes</a></li><li><a href=\"fn.write_unaligned.html\">write_unaligned</a></li><li><a href=\"fn.write_volatile.html\">write_volatile</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type โSโ or โ/โ to search, โ?โ for more optionsโฆ\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Function <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">ptr</a>::<wbr><a class=\"fn\" href=\"#\">write_unaligned</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.17.0, const unstable\">1.17.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/86302\" title=\"Tracking issue for const_ptr_write\">unstable</a>)</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/mod.rs.html#1620\">source</a> ยท <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>โ</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub unsafe fn write_unaligned&lt;T&gt;(dst: <a class=\"primitive\" href=\"../primitive.pointer.html\">*mut T</a>, src: T)</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Overwrites a memory location with the given value without reading or\ndropping the old value.</p>\n<p>Unlike <a href=\"fn.write.html\" title=\"fn std::ptr::write\"><code>write()</code></a>, the pointer may be unaligned.</p>\n<p><code>write_unaligned</code> does not drop the contents of <code>dst</code>. This is safe, but it\ncould leak allocations or resources, so care should be taken not to overwrite\nan object that should be dropped.</p>\n<p>Additionally, it does not drop <code>src</code>. Semantically, <code>src</code> is moved into the\nlocation pointed to by <code>dst</code>.</p>\n<p>This is appropriate for initializing uninitialized memory, or overwriting\nmemory that has previously been read with <a href=\"fn.read_unaligned.html\" title=\"fn std::ptr::read_unaligned\"><code>read_unaligned</code></a>.</p>\n<h2 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">ยง</a>Safety</h2>\n<p>Behavior is undefined if any of the following conditions are violated:</p>\n<ul>\n<li><code>dst</code> must be <a href=\"index.html#safety\" title=\"mod std::ptr\">valid</a> for writes.</li>\n</ul>\n<p>Note that even if <code>T</code> has size <code>0</code>, the pointer must be non-null.</p>\n<h3 id=\"on-packed-structs\"><a class=\"doc-anchor\" href=\"#on-packed-structs\">ยง</a>On <code>packed</code> structs</h3>\n<p>Attempting to create a raw pointer to an <code>unaligned</code> struct field with\nan expression such as <code>&amp;packed.unaligned as *const FieldType</code> creates an\nintermediate unaligned reference before converting that to a raw pointer.\nThat this reference is temporary and immediately cast is inconsequential\nas the compiler always expects references to be properly aligned.\nAs a result, using <code>&amp;packed.unaligned as *const FieldType</code> causes immediate\n<em>undefined behavior</em> in your program.</p>\n<p>Instead you must use the <a href=\"macro.addr_of_mut.html\" title=\"macro std::ptr::addr_of_mut\"><code>ptr::addr_of_mut!</code></a>\nmacro to create the pointer. You may use that returned pointer together with\nthis function.</p>\n<p>An example of how to do it and how this relates to <code>write_unaligned</code> is:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#[repr(packed, C)]\n</span><span class=\"kw\">struct </span>Packed {\n    _padding: u8,\n    unaligned: u32,\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>packed: Packed = <span class=\"kw\">unsafe </span>{ std::mem::zeroed() };\n\n<span class=\"comment\">// Take the address of a 32-bit integer which is not aligned.\n// In contrast to `&amp;packed.unaligned as *mut _`, this has no undefined behavior.\n</span><span class=\"kw\">let </span>unaligned = <span class=\"macro\">std::ptr::addr_of_mut!</span>(packed.unaligned);\n\n<span class=\"kw\">unsafe </span>{ std::ptr::write_unaligned(unaligned, <span class=\"number\">42</span>) };\n\n<span class=\"macro\">assert_eq!</span>({packed.unaligned}, <span class=\"number\">42</span>); <span class=\"comment\">// `{...}` forces copying the field instead of creating a reference.</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++%23%5Brepr(packed,+C)%5D%0A++++struct+Packed+%7B%0A++++++++_padding:+u8,%0A++++++++unaligned:+u32,%0A++++%7D%0A++++%0A++++let+mut+packed:+Packed+=+unsafe+%7B+std::mem::zeroed()+%7D;%0A++++%0A++++//+Take+the+address+of+a+32-bit+integer+which+is+not+aligned.%0A++++//+In+contrast+to+%60%26packed.unaligned+as+*mut+_%60,+this+has+no+undefined+behavior.%0A++++let+unaligned+=+std::ptr::addr_of_mut!(packed.unaligned);%0A++++%0A++++unsafe+%7B+std::ptr::write_unaligned(unaligned,+42)+%7D;%0A++++%0A++++assert_eq!(%7Bpacked.unaligned%7D,+42);+//+%60%7B...%7D%60+forces+copying+the+field+instead+of+creating+a+reference.%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Accessing unaligned fields directly with e.g. <code>packed.unaligned</code> is safe however\n(as can be seen in the <code>assert_eq!</code> above).</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">ยง</a>Examples</h2>\n<p>Write a usize value to a byte buffer:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::mem;\n\n<span class=\"kw\">fn </span>write_usize(x: <span class=\"kw-2\">&amp;mut </span>[u8], val: usize) {\n    <span class=\"macro\">assert!</span>(x.len() &gt;= mem::size_of::&lt;usize&gt;());\n\n    <span class=\"kw\">let </span>ptr = x.as_mut_ptr() <span class=\"kw\">as </span><span class=\"kw-2\">*mut </span>usize;\n\n    <span class=\"kw\">unsafe </span>{ ptr.write_unaligned(val) }\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::mem;%0A++++%0A++++fn+write_usize(x:+%26mut+%5Bu8%5D,+val:+usize)+%7B%0A++++++++assert!(x.len()+%3E=+mem::size_of::%3Cusize%3E());%0A++++%0A++++++++let+ptr+=+x.as_mut_ptr()+as+*mut+usize;%0A++++%0A++++++++unsafe+%7B+ptr.write_unaligned(val)+%7D%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:21:35.025Z"
}