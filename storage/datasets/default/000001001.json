{
	"title": "Conditional compilation - The Rust Reference",
	"url": "https://doc.rust-lang.org/reference/conditional-compilation.html#debug_assertions",
	"markdown": "# Conditional compilation - The Rust Reference\n\n> **Syntax**  \n> _ConfigurationPredicate_ :  \n>       _ConfigurationOption_  \n>    | _ConfigurationAll_  \n>    | _ConfigurationAny_  \n>    | _ConfigurationNot_\n> \n> _ConfigurationOption_ :  \n>    [IDENTIFIER](identifiers.html) (`=` ([STRING\\_LITERAL](about:blank/tokens.html#string-literals) | [RAW\\_STRING\\_LITERAL](about:blank/tokens.html#raw-string-literals)))?\n> \n> _ConfigurationAll_  \n>    `all` `(` _ConfigurationPredicateList_? `)`\n> \n> _ConfigurationAny_  \n>    `any` `(` _ConfigurationPredicateList_? `)`\n> \n> _ConfigurationNot_  \n>    `not` `(` _ConfigurationPredicate_ `)`\n> \n> _ConfigurationPredicateList_  \n>    _ConfigurationPredicate_ (`,` _ConfigurationPredicate_)\\* `,`?\n\n_Conditionally compiled source code_ is source code that may or may not be considered a part of the source code depending on certain conditions. Source code can be conditionally compiled using the [attributes](attributes.html) [`cfg`](#the-cfg-attribute) and [`cfg_attr`](#the-cfg_attr-attribute) and the built-in [`cfg` macro](#the-cfg-macro). These conditions are based on the target architecture of the compiled crate, arbitrary values passed to the compiler, and a few other miscellaneous things further described below in detail.\n\nEach form of conditional compilation takes a _configuration predicate_ that evaluates to true or false. The predicate is one of the following:\n\n-   A configuration option. It is true if the option is set and false if it is unset.\n-   `all()` with a comma separated list of configuration predicates. It is false if at least one predicate is false. If there are no predicates, it is true.\n-   `any()` with a comma separated list of configuration predicates. It is true if at least one predicate is true. If there are no predicates, it is false.\n-   `not()` with a configuration predicate. It is true if its predicate is false and false if its predicate is true.\n\n_Configuration options_ are names and key-value pairs that are either set or unset. Names are written as a single identifier such as, for example, `unix`. Key-value pairs are written as an identifier, `=`, and then a string. For example, `target_arch = \"x86_64\"` is a configuration option.\n\n> **Note**: Whitespace around the `=` is ignored. `foo=\"bar\"` and `foo = \"bar\"` are equivalent configuration options.\n\nKeys are not unique in the set of key-value configuration options. For example, both `feature = \"std\"` and `feature = \"serde\"` can be set at the same time.\n\n## [Set Configuration Options](#set-configuration-options)\n\nWhich configuration options are set is determined statically during the compilation of the crate. Certain options are _compiler-set_ based on data about the compilation. Other options are _arbitrarily-set_, set based on input passed to the compiler outside of the code. It is not possible to set a configuration option from within the source code of the crate being compiled.\n\n> **Note**: For `rustc`, arbitrary-set configuration options are set using the [`--cfg`](about:blank/rustc/command-line-arguments.html#--cfg-configure-the-compilation-environment) flag.\n\n> **Note**: Configuration options with the key `feature` are a convention used by [Cargo](../cargo/reference/features.html) for specifying compile-time options and optional dependencies.\n\nWarning: It is possible for arbitrarily-set configuration options to have the same value as compiler-set configuration options. For example, it is possible to do `rustc --cfg \"unix\" program.rs` while compiling to a Windows target, and have both `unix` and `windows` configuration options set at the same time. It is unwise to actually do this.\n\n### [`target_arch`](#target_arch)\n\nKey-value option set once with the target's CPU architecture. The value is similar to the first element of the platform's target triple, but not identical.\n\nExample values:\n\n-   `\"x86\"`\n-   `\"x86_64\"`\n-   `\"mips\"`\n-   `\"powerpc\"`\n-   `\"powerpc64\"`\n-   `\"arm\"`\n-   `\"aarch64\"`\n\n### [`target_feature`](#target_feature)\n\nKey-value option set for each platform feature available for the current compilation target.\n\nExample values:\n\n-   `\"avx\"`\n-   `\"avx2\"`\n-   `\"crt-static\"`\n-   `\"rdrand\"`\n-   `\"sse\"`\n-   `\"sse2\"`\n-   `\"sse4.1\"`\n\nSee the [`target_feature` attribute](about:blank/attributes/codegen.html#the-target_feature-attribute) for more details on the available features. An additional feature of `crt-static` is available to the `target_feature` option to indicate that a [static C runtime](about:blank/linkage.html#static-and-dynamic-c-runtimes) is available.\n\n### [`target_os`](#target_os)\n\nKey-value option set once with the target's operating system. This value is similar to the second and third element of the platform's target triple.\n\nExample values:\n\n-   `\"windows\"`\n-   `\"macos\"`\n-   `\"ios\"`\n-   `\"linux\"`\n-   `\"android\"`\n-   `\"freebsd\"`\n-   `\"dragonfly\"`\n-   `\"openbsd\"`\n-   `\"netbsd\"`\n-   `\"none\"` (typical for embedded targets)\n\n### [`target_family`](#target_family)\n\nKey-value option providing a more generic description of a target, such as the family of the operating systems or architectures that the target generally falls into. Any number of `target_family` key-value pairs can be set.\n\nExample values:\n\n-   `\"unix\"`\n-   `\"windows\"`\n-   `\"wasm\"`\n\n### [`unix` and `windows`](#unix-and-windows)\n\n`unix` is set if `target_family = \"unix\"` is set and `windows` is set if `target_family = \"windows\"` is set.\n\n### [`target_env`](#target_env)\n\nKey-value option set with further disambiguating information about the target platform with information about the ABI or `libc` used. For historical reasons, this value is only defined as not the empty-string when actually needed for disambiguation. Thus, for example, on many GNU platforms, this value will be empty. This value is similar to the fourth element of the platform's target triple. One difference is that embedded ABIs such as `gnueabihf` will simply define `target_env` as `\"gnu\"`.\n\nExample values:\n\n-   `\"\"`\n-   `\"gnu\"`\n-   `\"msvc\"`\n-   `\"musl\"`\n-   `\"sgx\"`\n\n### [`target_abi`](#target_abi)\n\nKey-value option set to further disambiguate the `target_env` with information about the target ABI. For historical reasons, this value is only defined as not the empty-string when actually needed for disambiguation. Thus, for example, on many GNU platforms, this value will be empty.\n\nExample values:\n\n-   `\"\"`\n-   `\"llvm\"`\n-   `\"eabihf\"`\n-   `\"abi64\"`\n-   `\"sim\"`\n-   `\"macabi\"`\n\n### [`target_endian`](#target_endian)\n\nKey-value option set once with either a value of \"little\" or \"big\" depending on the endianness of the target's CPU.\n\n### [`target_pointer_width`](#target_pointer_width)\n\nKey-value option set once with the target's pointer width in bits.\n\nExample values:\n\n-   `\"16\"`\n-   `\"32\"`\n-   `\"64\"`\n\n### [`target_vendor`](#target_vendor)\n\nKey-value option set once with the vendor of the target.\n\nExample values:\n\n-   `\"apple\"`\n-   `\"fortanix\"`\n-   `\"pc\"`\n-   `\"unknown\"`\n\n### [`target_has_atomic`](#target_has_atomic)\n\nKey-value option set for each bit width that the target supports atomic loads, stores, and compare-and-swap operations.\n\nWhen this cfg is present, all of the stable [`core::sync::atomic`](../core/sync/atomic/index.html) APIs are available for the relevant atomic width.\n\nPossible values:\n\n-   `\"8\"`\n-   `\"16\"`\n-   `\"32\"`\n-   `\"64\"`\n-   `\"128\"`\n-   `\"ptr\"`\n\n### [`test`](#test)\n\nEnabled when compiling the test harness. Done with `rustc` by using the [`--test`](about:blank/rustc/command-line-arguments.html#--test-build-a-test-harness) flag. See [Testing](attributes/testing.html) for more on testing support.\n\n### [`debug_assertions`](#debug_assertions)\n\nEnabled by default when compiling without optimizations. This can be used to enable extra debugging code in development but not in production. For example, it controls the behavior of the standard library's [`debug_assert!`](../std/macro.debug_assert.html) macro.\n\n### [`proc_macro`](#proc_macro)\n\nSet when the crate being compiled is being compiled with the `proc_macro` [crate type](linkage.html).\n\n### [`panic`](#panic)\n\nKey-value option set depending on the panic strategy. Note that more values may be added in the future.\n\nExample values:\n\n-   `\"abort\"`\n-   `\"unwind\"`\n\n## [Forms of conditional compilation](#forms-of-conditional-compilation)\n\n### [The `cfg` attribute](#the-cfg-attribute)\n\n> **Syntax**  \n> _CfgAttrAttribute_ :  \n>    `cfg` `(` _ConfigurationPredicate_ `)`\n\nThe `cfg` [attribute](attributes.html) conditionally includes the thing it is attached to based on a configuration predicate.\n\nIt is written as `cfg`, `(`, a configuration predicate, and finally `)`.\n\nIf the predicate is true, the thing is rewritten to not have the `cfg` attribute on it. If the predicate is false, the thing is removed from the source code.\n\nWhen a crate-level `cfg` has a false predicate, the behavior is slightly different: any crate attributes preceding the `cfg` are kept, and any crate attributes following the `cfg` are removed. This allows `#![no_std]` and `#![no_core]` crates to avoid linking `std`/`core` even if a `#![cfg(...)]` has removed the entire crate.\n\nSome examples on functions:\n\n```rust\n#![allow(unused)]\nfn main() {\n// The function is only included in the build when compiling for macOS\n#[cfg(target_os = \"macos\")]\nfn macos_only() {\n  // ...\n}\n\n// This function is only included when either foo or bar is defined\n#[cfg(any(foo, bar))]\nfn needs_foo_or_bar() {\n  // ...\n}\n\n// This function is only included when compiling for a unixish OS with a 32-bit\n// architecture\n#[cfg(all(unix, target_pointer_width = \"32\"))]\nfn on_32bit_unix() {\n  // ...\n}\n\n// This function is only included when foo is not defined\n#[cfg(not(foo))]\nfn needs_not_foo() {\n  // ...\n}\n\n// This function is only included when the panic strategy is set to unwind\n#[cfg(panic = \"unwind\")]\nfn when_unwinding() {\n  // ...\n}\n\n}\n```\n\nThe `cfg` attribute is allowed anywhere attributes are allowed.\n\n### [The `cfg_attr` attribute](#the-cfg_attr-attribute)\n\n> **Syntax**  \n> _CfgAttrAttribute_ :  \n>    `cfg_attr` `(` _ConfigurationPredicate_ `,` _CfgAttrs_? `)`\n> \n> _CfgAttrs_ :  \n>    [_Attr_](attributes.html) (`,` [_Attr_](attributes.html))\\* `,`?\n\nThe `cfg_attr` [attribute](attributes.html) conditionally includes [attributes](attributes.html) based on a configuration predicate.\n\nWhen the configuration predicate is true, this attribute expands out to the attributes listed after the predicate. For example, the following module will either be found at `linux.rs` or `windows.rs` based on the target.\n\n```rust\n#[cfg_attr(target_os = \"linux\", path = \"linux.rs\")]\n#[cfg_attr(windows, path = \"windows.rs\")]\nmod os;\n```\n\nZero, one, or more attributes may be listed. Multiple attributes will each be expanded into separate attributes. For example:\n\n```rust\n#[cfg_attr(feature = \"magic\", sparkles, crackles)]\nfn bewitched() {}\n\n// When the `magic` feature flag is enabled, the above will expand to:\n#[sparkles]\n#[crackles]\nfn bewitched() {}\n```\n\n> **Note**: The `cfg_attr` can expand to another `cfg_attr`. For example, `#[cfg_attr(target_os = \"linux\", cfg_attr(feature = \"multithreaded\", some_other_attribute))]` is valid. This example would be equivalent to `#[cfg_attr(all(target_os = \"linux\", feature =\"multithreaded\"), some_other_attribute)]`.\n\nThe `cfg_attr` attribute is allowed anywhere attributes are allowed.\n\n### [The `cfg` macro](#the-cfg-macro)\n\nThe built-in `cfg` macro takes in a single configuration predicate and evaluates to the `true` literal when the predicate is true and the `false` literal when it is false.\n\nFor example:\n\n```rust\n#![allow(unused)]\nfn main() {\nlet machine_kind = if cfg!(unix) {\n  \"unix\"\n} else if cfg!(windows) {\n  \"windows\"\n} else {\n  \"unknown\"\n};\n\nprintln!(\"I'm running on a {} machine!\", machine_kind);\n}\n```",
	"html": "<!DOCTYPE html><html lang=\"en\" class=\"light\" dir=\"ltr\"><head>\n        <!-- Book generated using mdBook -->\n        <meta charset=\"UTF-8\">\n        <title>Conditional compilation - The Rust Reference</title>\n\n\n        <!-- Custom HTML head -->\n        \n        <meta name=\"description\" content=\"\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <meta name=\"theme-color\" content=\"rgb(255, 255, 255)\">\n\n        <link rel=\"icon\" href=\"favicon.svg\">\n        <link rel=\"shortcut icon\" href=\"favicon.png\">\n        <link rel=\"stylesheet\" href=\"css/variables.css\">\n        <link rel=\"stylesheet\" href=\"css/general.css\">\n        <link rel=\"stylesheet\" href=\"css/chrome.css\">\n        <link rel=\"stylesheet\" href=\"css/print.css\" media=\"print\">\n\n        <!-- Fonts -->\n        <link rel=\"stylesheet\" href=\"FontAwesome/css/font-awesome.css\">\n        <link rel=\"stylesheet\" href=\"fonts/fonts.css\">\n\n        <!-- Highlight.js Stylesheets -->\n        <link rel=\"stylesheet\" href=\"highlight.css\">\n        <link rel=\"stylesheet\" href=\"tomorrow-night.css\" disabled=\"\">\n        <link rel=\"stylesheet\" href=\"ayu-highlight.css\" disabled=\"\">\n\n        <!-- Custom theme stylesheets -->\n        <link rel=\"stylesheet\" href=\"theme/reference.css\">\n\n    </head>\n    <body class=\"js sidebar-visible\">\n    <div id=\"body-container\">\n        <!-- Provide site root to javascript -->\n        <script>\n            var path_to_root = \"\";\n            var default_theme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"navy\" : \"light\";\n        </script>\n\n        <!-- Work around some values being stored in localStorage wrapped in quotes -->\n        <script>\n            try {\n                var theme = localStorage.getItem('mdbook-theme');\n                var sidebar = localStorage.getItem('mdbook-sidebar');\n\n                if (theme.startsWith('\"') && theme.endsWith('\"')) {\n                    localStorage.setItem('mdbook-theme', theme.slice(1, theme.length - 1));\n                }\n\n                if (sidebar.startsWith('\"') && sidebar.endsWith('\"')) {\n                    localStorage.setItem('mdbook-sidebar', sidebar.slice(1, sidebar.length - 1));\n                }\n            } catch (e) { }\n        </script>\n\n        <!-- Set the theme before any content is loaded, prevents flash -->\n        <script>\n            var theme;\n            try { theme = localStorage.getItem('mdbook-theme'); } catch(e) { }\n            if (theme === null || theme === undefined) { theme = default_theme; }\n            var html = document.querySelector('html');\n            html.classList.remove('light')\n            html.classList.add(theme);\n            var body = document.querySelector('body');\n            body.classList.remove('no-js')\n            body.classList.add('js');\n        </script>\n\n        <input type=\"checkbox\" id=\"sidebar-toggle-anchor\" class=\"hidden\">\n\n        <!-- Hide / unhide sidebar before it is displayed -->\n        <script>\n            var body = document.querySelector('body');\n            var sidebar = null;\n            var sidebar_toggle = document.getElementById(\"sidebar-toggle-anchor\");\n            if (document.body.clientWidth >= 1080) {\n                try { sidebar = localStorage.getItem('mdbook-sidebar'); } catch(e) { }\n                sidebar = sidebar || 'visible';\n            } else {\n                sidebar = 'hidden';\n            }\n            sidebar_toggle.checked = sidebar === 'visible';\n            body.classList.remove('sidebar-visible');\n            body.classList.add(\"sidebar-\" + sidebar);\n        </script>\n\n        <nav id=\"sidebar\" class=\"sidebar\" aria-label=\"Table of contents\" aria-hidden=\"false\">\n            <div class=\"sidebar-scrollbox\">\n                <ol class=\"chapter\"><li class=\"chapter-item expanded affix \"><a href=\"introduction.html\" tabindex=\"0\">Introduction</a></li><li class=\"chapter-item expanded \"><a href=\"notation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.</strong> Notation</a></li><li class=\"chapter-item expanded \"><a href=\"lexical-structure.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.</strong> Lexical structure</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"input-format.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.1.</strong> Input format</a></li><li class=\"chapter-item expanded \"><a href=\"keywords.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.2.</strong> Keywords</a></li><li class=\"chapter-item expanded \"><a href=\"identifiers.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.3.</strong> Identifiers</a></li><li class=\"chapter-item expanded \"><a href=\"comments.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.4.</strong> Comments</a></li><li class=\"chapter-item expanded \"><a href=\"whitespace.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.5.</strong> Whitespace</a></li><li class=\"chapter-item expanded \"><a href=\"tokens.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.6.</strong> Tokens</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"macros.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.</strong> Macros</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"macros-by-example.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.1.</strong> Macros By Example</a></li><li class=\"chapter-item expanded \"><a href=\"procedural-macros.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.2.</strong> Procedural Macros</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"crates-and-source-files.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.</strong> Crates and source files</a></li><li class=\"chapter-item expanded \"><a href=\"conditional-compilation.html\" class=\"active\" tabindex=\"0\"><strong aria-hidden=\"true\">5.</strong> Conditional compilation</a></li><li class=\"chapter-item expanded \"><a href=\"items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.</strong> Items</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"items/modules.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.1.</strong> Modules</a></li><li class=\"chapter-item expanded \"><a href=\"items/extern-crates.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.2.</strong> Extern crates</a></li><li class=\"chapter-item expanded \"><a href=\"items/use-declarations.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.3.</strong> Use declarations</a></li><li class=\"chapter-item expanded \"><a href=\"items/functions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.4.</strong> Functions</a></li><li class=\"chapter-item expanded \"><a href=\"items/type-aliases.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.5.</strong> Type aliases</a></li><li class=\"chapter-item expanded \"><a href=\"items/structs.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.6.</strong> Structs</a></li><li class=\"chapter-item expanded \"><a href=\"items/enumerations.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.7.</strong> Enumerations</a></li><li class=\"chapter-item expanded \"><a href=\"items/unions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.8.</strong> Unions</a></li><li class=\"chapter-item expanded \"><a href=\"items/constant-items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.9.</strong> Constant items</a></li><li class=\"chapter-item expanded \"><a href=\"items/static-items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.10.</strong> Static items</a></li><li class=\"chapter-item expanded \"><a href=\"items/traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.11.</strong> Traits</a></li><li class=\"chapter-item expanded \"><a href=\"items/implementations.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.12.</strong> Implementations</a></li><li class=\"chapter-item expanded \"><a href=\"items/external-blocks.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.13.</strong> External blocks</a></li><li class=\"chapter-item expanded \"><a href=\"items/generics.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.14.</strong> Generic parameters</a></li><li class=\"chapter-item expanded \"><a href=\"items/associated-items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.15.</strong> Associated Items</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"attributes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.</strong> Attributes</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"attributes/testing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.1.</strong> Testing</a></li><li class=\"chapter-item expanded \"><a href=\"attributes/derive.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.2.</strong> Derive</a></li><li class=\"chapter-item expanded \"><a href=\"attributes/diagnostics.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.3.</strong> Diagnostics</a></li><li class=\"chapter-item expanded \"><a href=\"attributes/codegen.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.4.</strong> Code generation</a></li><li class=\"chapter-item expanded \"><a href=\"attributes/limits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.5.</strong> Limits</a></li><li class=\"chapter-item expanded \"><a href=\"attributes/type_system.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.6.</strong> Type System</a></li><li class=\"chapter-item expanded \"><a href=\"attributes/debugger.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.7.</strong> Debugger</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"statements-and-expressions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.</strong> Statements and expressions</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"statements.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.1.</strong> Statements</a></li><li class=\"chapter-item expanded \"><a href=\"expressions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.</strong> Expressions</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"expressions/literal-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.1.</strong> Literal expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/path-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.2.</strong> Path expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/block-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.3.</strong> Block expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/operator-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.4.</strong> Operator expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/grouped-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.5.</strong> Grouped expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/array-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.6.</strong> Array and index expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/tuple-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.7.</strong> Tuple and index expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/struct-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.8.</strong> Struct expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/call-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.9.</strong> Call expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/method-call-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.10.</strong> Method call expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/field-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.11.</strong> Field access expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/closure-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.12.</strong> Closure expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/loop-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.13.</strong> Loop expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/range-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.14.</strong> Range expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/if-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.15.</strong> If and if let expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/match-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.16.</strong> Match expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/return-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.17.</strong> Return expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/await-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.18.</strong> Await expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/underscore-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.19.</strong> Underscore expressions</a></li></ol></li></ol></li><li class=\"chapter-item expanded \"><a href=\"patterns.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.</strong> Patterns</a></li><li class=\"chapter-item expanded \"><a href=\"type-system.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.</strong> Type system</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"types.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.</strong> Types</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"types/boolean.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.1.</strong> Boolean type</a></li><li class=\"chapter-item expanded \"><a href=\"types/numeric.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.2.</strong> Numeric types</a></li><li class=\"chapter-item expanded \"><a href=\"types/textual.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.3.</strong> Textual types</a></li><li class=\"chapter-item expanded \"><a href=\"types/never.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.4.</strong> Never type</a></li><li class=\"chapter-item expanded \"><a href=\"types/tuple.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.5.</strong> Tuple types</a></li><li class=\"chapter-item expanded \"><a href=\"types/array.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.6.</strong> Array types</a></li><li class=\"chapter-item expanded \"><a href=\"types/slice.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.7.</strong> Slice types</a></li><li class=\"chapter-item expanded \"><a href=\"types/struct.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.8.</strong> Struct types</a></li><li class=\"chapter-item expanded \"><a href=\"types/enum.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.9.</strong> Enumerated types</a></li><li class=\"chapter-item expanded \"><a href=\"types/union.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.10.</strong> Union types</a></li><li class=\"chapter-item expanded \"><a href=\"types/function-item.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.11.</strong> Function item types</a></li><li class=\"chapter-item expanded \"><a href=\"types/closure.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.12.</strong> Closure types</a></li><li class=\"chapter-item expanded \"><a href=\"types/pointer.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.13.</strong> Pointer types</a></li><li class=\"chapter-item expanded \"><a href=\"types/function-pointer.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.14.</strong> Function pointer types</a></li><li class=\"chapter-item expanded \"><a href=\"types/trait-object.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.15.</strong> Trait object types</a></li><li class=\"chapter-item expanded \"><a href=\"types/impl-trait.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.16.</strong> Impl trait type</a></li><li class=\"chapter-item expanded \"><a href=\"types/parameters.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.17.</strong> Type parameters</a></li><li class=\"chapter-item expanded \"><a href=\"types/inferred.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.18.</strong> Inferred type</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"dynamically-sized-types.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.2.</strong> Dynamically Sized Types</a></li><li class=\"chapter-item expanded \"><a href=\"type-layout.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.3.</strong> Type layout</a></li><li class=\"chapter-item expanded \"><a href=\"interior-mutability.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.4.</strong> Interior mutability</a></li><li class=\"chapter-item expanded \"><a href=\"subtyping.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.5.</strong> Subtyping and Variance</a></li><li class=\"chapter-item expanded \"><a href=\"trait-bounds.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.6.</strong> Trait and lifetime bounds</a></li><li class=\"chapter-item expanded \"><a href=\"type-coercions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.7.</strong> Type coercions</a></li><li class=\"chapter-item expanded \"><a href=\"destructors.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.8.</strong> Destructors</a></li><li class=\"chapter-item expanded \"><a href=\"lifetime-elision.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.9.</strong> Lifetime elision</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"special-types-and-traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.</strong> Special types and traits</a></li><li class=\"chapter-item expanded \"><a href=\"names.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.</strong> Names</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"names/namespaces.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.1.</strong> Namespaces</a></li><li class=\"chapter-item expanded \"><a href=\"names/scopes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.2.</strong> Scopes</a></li><li class=\"chapter-item expanded \"><a href=\"names/preludes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.3.</strong> Preludes</a></li><li class=\"chapter-item expanded \"><a href=\"paths.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.4.</strong> Paths</a></li><li class=\"chapter-item expanded \"><a href=\"names/name-resolution.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.5.</strong> Name resolution</a></li><li class=\"chapter-item expanded \"><a href=\"visibility-and-privacy.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.6.</strong> Visibility and privacy</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"memory-model.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.</strong> Memory model</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"memory-allocation-and-lifetime.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.1.</strong> Memory allocation and lifetime</a></li><li class=\"chapter-item expanded \"><a href=\"variables.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.2.</strong> Variables</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"linkage.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.</strong> Linkage</a></li><li class=\"chapter-item expanded \"><a href=\"inline-assembly.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.</strong> Inline assembly</a></li><li class=\"chapter-item expanded \"><a href=\"unsafety.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.</strong> Unsafety</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"unsafe-keyword.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.1.</strong> The unsafe keyword</a></li><li class=\"chapter-item expanded \"><a href=\"behavior-considered-undefined.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.2.</strong> Behavior considered undefined</a></li><li class=\"chapter-item expanded \"><a href=\"behavior-not-considered-unsafe.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.3.</strong> Behavior not considered unsafe</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"const_eval.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.</strong> Constant Evaluation</a></li><li class=\"chapter-item expanded \"><a href=\"abi.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.</strong> Application Binary Interface</a></li><li class=\"chapter-item expanded \"><a href=\"runtime.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.</strong> The Rust runtime</a></li><li class=\"chapter-item expanded \"><a href=\"appendices.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.</strong> Appendices</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"macro-ambiguity.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.1.</strong> Macro Follow-Set Ambiguity Formal Specification</a></li><li class=\"chapter-item expanded \"><a href=\"influences.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.2.</strong> Influences</a></li><li class=\"chapter-item expanded \"><a href=\"glossary.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.3.</strong> Glossary</a></li></ol></li></ol>\n            </div>\n            <div id=\"sidebar-resize-handle\" class=\"sidebar-resize-handle\">\n                <div class=\"sidebar-resize-indicator\"></div>\n            </div>\n        </nav>\n\n        <!-- Track and set sidebar scroll position -->\n        <script>\n            var sidebarScrollbox = document.querySelector('#sidebar .sidebar-scrollbox');\n            sidebarScrollbox.addEventListener('click', function(e) {\n                if (e.target.tagName === 'A') {\n                    sessionStorage.setItem('sidebar-scroll', sidebarScrollbox.scrollTop);\n                }\n            }, { passive: true });\n            var sidebarScrollTop = sessionStorage.getItem('sidebar-scroll');\n            sessionStorage.removeItem('sidebar-scroll');\n            if (sidebarScrollTop) {\n                // preserve sidebar scroll position when navigating via links within sidebar\n                sidebarScrollbox.scrollTop = sidebarScrollTop;\n            } else {\n                // scroll sidebar to current active section when navigating via \"next/previous chapter\" buttons\n                var activeSection = document.querySelector('#sidebar .active');\n                if (activeSection) {\n                    activeSection.scrollIntoView({ block: 'center' });\n                }\n            }\n        </script>\n\n        <div id=\"page-wrapper\" class=\"page-wrapper\">\n\n            <div class=\"page\">\n                                <div id=\"menu-bar-hover-placeholder\"></div>\n                <div id=\"menu-bar\" class=\"menu-bar bordered\" style=\"top: 0px;\">\n                    <div class=\"left-buttons\">\n                        <label id=\"sidebar-toggle\" class=\"icon-button\" for=\"sidebar-toggle-anchor\" title=\"Toggle Table of Contents\" aria-label=\"Toggle Table of Contents\" aria-controls=\"sidebar\" aria-expanded=\"true\">\n                            <i class=\"fa fa-bars\"></i>\n                        </label>\n                        <button id=\"theme-toggle\" class=\"icon-button\" type=\"button\" title=\"Change theme\" aria-label=\"Change theme\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-controls=\"theme-list\">\n                            <i class=\"fa fa-paint-brush\"></i>\n                        </button>\n                        <ul id=\"theme-list\" class=\"theme-popup\" aria-label=\"Themes\" role=\"menu\">\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme theme-selected\" id=\"light\">Light</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"rust\">Rust</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"coal\">Coal</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"navy\">Navy</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"ayu\">Ayu</button></li>\n                        </ul>\n                        <button id=\"search-toggle\" class=\"icon-button\" type=\"button\" title=\"Search. (Shortkey: s)\" aria-label=\"Toggle Searchbar\" aria-expanded=\"false\" aria-keyshortcuts=\"S\" aria-controls=\"searchbar\">\n                            <i class=\"fa fa-search\"></i>\n                        </button>\n                    </div>\n\n                    <h1 class=\"menu-title\">The Rust Reference</h1>\n\n                    <div class=\"right-buttons\">\n                        <a href=\"print.html\" title=\"Print this book\" aria-label=\"Print this book\">\n                            <i id=\"print-button\" class=\"fa fa-print\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/reference/\" title=\"Git repository\" aria-label=\"Git repository\">\n                            <i id=\"git-repository-button\" class=\"fa fa-github\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/reference/edit/master/src/conditional-compilation.md\" title=\"Suggest an edit\" aria-label=\"Suggest an edit\">\n                            <i id=\"git-edit-button\" class=\"fa fa-edit\"></i>\n                        </a>\n\n                    </div>\n                </div>\n\n                <div id=\"search-wrapper\" class=\"hidden\">\n                    <form id=\"searchbar-outer\" class=\"searchbar-outer\">\n                        <input type=\"search\" id=\"searchbar\" name=\"searchbar\" placeholder=\"Search this book ...\" aria-controls=\"searchresults-outer\" aria-describedby=\"searchresults-header\">\n                    </form>\n                    <div id=\"searchresults-outer\" class=\"searchresults-outer hidden\">\n                        <div id=\"searchresults-header\" class=\"searchresults-header\"></div>\n                        <ul id=\"searchresults\">\n                        </ul>\n                    </div>\n                </div>\n\n                <!-- Apply ARIA attributes after the sidebar and the sidebar toggle button are added to the DOM -->\n                <script>\n                    document.getElementById('sidebar-toggle').setAttribute('aria-expanded', sidebar === 'visible');\n                    document.getElementById('sidebar').setAttribute('aria-hidden', sidebar !== 'visible');\n                    Array.from(document.querySelectorAll('#sidebar a')).forEach(function(link) {\n                        link.setAttribute('tabIndex', sidebar === 'visible' ? 0 : -1);\n                    });\n                </script>\n\n                <div id=\"content\" class=\"content\">\n                    <main>\n                        <h1 id=\"conditional-compilation\"><a class=\"header\" href=\"#conditional-compilation\">Conditional compilation</a></h1>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>ConfigurationPredicate</em> :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; <em>ConfigurationOption</em><br>\n&nbsp;&nbsp; | <em>ConfigurationAll</em><br>\n&nbsp;&nbsp; | <em>ConfigurationAny</em><br>\n&nbsp;&nbsp; | <em>ConfigurationNot</em></p>\n<p><em>ConfigurationOption</em> :<br>\n&nbsp;&nbsp; <a href=\"identifiers.html\">IDENTIFIER</a>&nbsp;(<code class=\"hljs\">=</code> (<a href=\"tokens.html#string-literals\">STRING_LITERAL</a> | <a href=\"tokens.html#raw-string-literals\">RAW_STRING_LITERAL</a>))<sup>?</sup></p>\n<p><em>ConfigurationAll</em><br>\n&nbsp;&nbsp; <code class=\"hljs\">all</code> <code class=\"hljs\">(</code> <em>ConfigurationPredicateList</em><sup>?</sup> <code class=\"hljs\">)</code></p>\n<p><em>ConfigurationAny</em><br>\n&nbsp;&nbsp; <code class=\"hljs\">any</code> <code class=\"hljs\">(</code> <em>ConfigurationPredicateList</em><sup>?</sup> <code class=\"hljs\">)</code></p>\n<p><em>ConfigurationNot</em><br>\n&nbsp;&nbsp; <code class=\"hljs\">not</code> <code class=\"hljs\">(</code> <em>ConfigurationPredicate</em> <code class=\"hljs\">)</code></p>\n<p><em>ConfigurationPredicateList</em><br>\n&nbsp;&nbsp; <em>ConfigurationPredicate</em> (<code class=\"hljs\">,</code> <em>ConfigurationPredicate</em>)<sup>*</sup> <code class=\"hljs\">,</code><sup>?</sup></p>\n</blockquote>\n<p><em>Conditionally compiled source code</em> is source code that may or may not be\nconsidered a part of the source code depending on certain conditions. <!-- This\ndefinition is sort of vacuous --> Source code can be conditionally compiled\nusing the <a href=\"attributes.html\">attributes</a> <a href=\"#the-cfg-attribute\"><code class=\"hljs\">cfg</code></a> and <a href=\"#the-cfg_attr-attribute\"><code class=\"hljs\">cfg_attr</code></a> and the built-in <a href=\"#the-cfg-macro\"><code class=\"hljs\">cfg</code> macro</a>.\nThese conditions are based on the target architecture of the compiled crate,\narbitrary values passed to the compiler, and a few other miscellaneous things\nfurther described below in detail.</p>\n<p>Each form of conditional compilation takes a <em>configuration predicate</em> that\nevaluates to true or false. The predicate is one of the following:</p>\n<ul>\n<li>A configuration option. It is true if the option is set and false if it is\nunset.</li>\n<li><code class=\"hljs\">all()</code> with a comma separated list of configuration predicates. It is false\nif at least one predicate is false. If there are no predicates, it is true.</li>\n<li><code class=\"hljs\">any()</code> with a comma separated list of configuration predicates. It is true\nif at least one predicate is true. If there are no predicates, it is false.</li>\n<li><code class=\"hljs\">not()</code> with a configuration predicate. It is true if its predicate is false\nand false if its predicate is true.</li>\n</ul>\n<p><em>Configuration options</em> are names and key-value pairs that are either set or\nunset. Names are written as a single identifier such as, for example, <code class=\"hljs\">unix</code>.\nKey-value pairs are written as an identifier, <code class=\"hljs\">=</code>, and then a string. For\nexample, <code class=\"hljs\">target_arch = \"x86_64\"</code> is a configuration option.</p>\n<blockquote>\n<p><strong>Note</strong>: Whitespace around the <code class=\"hljs\">=</code> is ignored. <code class=\"hljs\">foo=\"bar\"</code> and <code class=\"hljs\">foo = \"bar\"</code>\nare equivalent configuration options.</p>\n</blockquote>\n<p>Keys are not unique in the set of key-value configuration options. For example,\nboth <code class=\"hljs\">feature = \"std\"</code> and <code class=\"hljs\">feature = \"serde\"</code> can be set at the same time.</p>\n<h2 id=\"set-configuration-options\"><a class=\"header\" href=\"#set-configuration-options\">Set Configuration Options</a></h2>\n<p>Which configuration options are set is determined statically during the\ncompilation of the crate. Certain options are <em>compiler-set</em> based on data\nabout the compilation. Other options are <em>arbitrarily-set</em>, set based on input\npassed to the compiler outside of the code. It is not possible to set a\nconfiguration option from within the source code of the crate being compiled.</p>\n<blockquote>\n<p><strong>Note</strong>: For <code class=\"hljs\">rustc</code>, arbitrary-set configuration options are set using the\n<a href=\"../rustc/command-line-arguments.html#--cfg-configure-the-compilation-environment\"><code class=\"hljs\">--cfg</code></a> flag.</p>\n</blockquote>\n<blockquote>\n<p><strong>Note</strong>: Configuration options with the key <code class=\"hljs\">feature</code> are a convention used\nby <a href=\"../cargo/reference/features.html\">Cargo</a> for specifying compile-time options and optional\ndependencies.</p>\n</blockquote>\n<div class=\"warning\">\n<p>Warning: It is possible for arbitrarily-set configuration options to have the\nsame value as compiler-set configuration options. For example, it is possible\nto do <code class=\"hljs\">rustc --cfg \"unix\" program.rs</code> while compiling to a Windows target, and\nhave both <code class=\"hljs\">unix</code> and <code class=\"hljs\">windows</code> configuration options set at the same time. It\nis unwise to actually do this.</p>\n</div>\n<h3 id=\"target_arch\"><a class=\"header\" href=\"#target_arch\"><code>target_arch</code></a></h3>\n<p>Key-value option set once with the target's CPU architecture. The value is\nsimilar to the first element of the platform's target triple, but not\nidentical.</p>\n<p>Example values:</p>\n<ul>\n<li><code class=\"hljs\">\"x86\"</code></li>\n<li><code class=\"hljs\">\"x86_64\"</code></li>\n<li><code class=\"hljs\">\"mips\"</code></li>\n<li><code class=\"hljs\">\"powerpc\"</code></li>\n<li><code class=\"hljs\">\"powerpc64\"</code></li>\n<li><code class=\"hljs\">\"arm\"</code></li>\n<li><code class=\"hljs\">\"aarch64\"</code></li>\n</ul>\n<h3 id=\"target_feature\"><a class=\"header\" href=\"#target_feature\"><code>target_feature</code></a></h3>\n<p>Key-value option set for each platform feature available for the current\ncompilation target.</p>\n<p>Example values:</p>\n<ul>\n<li><code class=\"hljs\">\"avx\"</code></li>\n<li><code class=\"hljs\">\"avx2\"</code></li>\n<li><code class=\"hljs\">\"crt-static\"</code></li>\n<li><code class=\"hljs\">\"rdrand\"</code></li>\n<li><code class=\"hljs\">\"sse\"</code></li>\n<li><code class=\"hljs\">\"sse2\"</code></li>\n<li><code class=\"hljs\">\"sse4.1\"</code></li>\n</ul>\n<p>See the <a href=\"attributes/codegen.html#the-target_feature-attribute\"><code class=\"hljs\">target_feature</code> attribute</a> for more details on the available\nfeatures. An additional feature of <code class=\"hljs\">crt-static</code> is available to the\n<code class=\"hljs\">target_feature</code> option to indicate that a <a href=\"linkage.html#static-and-dynamic-c-runtimes\">static C runtime</a> is available.</p>\n<h3 id=\"target_os\"><a class=\"header\" href=\"#target_os\"><code>target_os</code></a></h3>\n<p>Key-value option set once with the target's operating system. This value is\nsimilar to the second and third element of the platform's target triple.</p>\n<p>Example values:</p>\n<ul>\n<li><code class=\"hljs\">\"windows\"</code></li>\n<li><code class=\"hljs\">\"macos\"</code></li>\n<li><code class=\"hljs\">\"ios\"</code></li>\n<li><code class=\"hljs\">\"linux\"</code></li>\n<li><code class=\"hljs\">\"android\"</code></li>\n<li><code class=\"hljs\">\"freebsd\"</code></li>\n<li><code class=\"hljs\">\"dragonfly\"</code></li>\n<li><code class=\"hljs\">\"openbsd\"</code></li>\n<li><code class=\"hljs\">\"netbsd\"</code></li>\n<li><code class=\"hljs\">\"none\"</code> (typical for embedded targets)</li>\n</ul>\n<h3 id=\"target_family\"><a class=\"header\" href=\"#target_family\"><code>target_family</code></a></h3>\n<p>Key-value option providing a more generic description of a target, such as the family of the\noperating systems or architectures that the target generally falls into. Any number of\n<code class=\"hljs\">target_family</code> key-value pairs can be set.</p>\n<p>Example values:</p>\n<ul>\n<li><code class=\"hljs\">\"unix\"</code></li>\n<li><code class=\"hljs\">\"windows\"</code></li>\n<li><code class=\"hljs\">\"wasm\"</code></li>\n</ul>\n<h3 id=\"unix-and-windows\"><a class=\"header\" href=\"#unix-and-windows\"><code>unix</code> and <code>windows</code></a></h3>\n<p><code class=\"hljs\">unix</code> is set if <code class=\"hljs\">target_family = \"unix\"</code> is set and <code class=\"hljs\">windows</code> is set if\n<code class=\"hljs\">target_family = \"windows\"</code> is set.</p>\n<h3 id=\"target_env\"><a class=\"header\" href=\"#target_env\"><code>target_env</code></a></h3>\n<p>Key-value option set with further disambiguating information about the target\nplatform with information about the ABI or <code class=\"hljs\">libc</code> used. For historical reasons,\nthis value is only defined as not the empty-string when actually needed for\ndisambiguation. Thus, for example, on many GNU platforms, this value will be\nempty. This value is similar to the fourth element of the platform's target\ntriple. One difference is that embedded ABIs such as <code class=\"hljs\">gnueabihf</code> will simply\ndefine <code class=\"hljs\">target_env</code> as <code class=\"hljs\">\"gnu\"</code>.</p>\n<p>Example values:</p>\n<ul>\n<li><code class=\"hljs\">\"\"</code></li>\n<li><code class=\"hljs\">\"gnu\"</code></li>\n<li><code class=\"hljs\">\"msvc\"</code></li>\n<li><code class=\"hljs\">\"musl\"</code></li>\n<li><code class=\"hljs\">\"sgx\"</code></li>\n</ul>\n<h3 id=\"target_abi\"><a class=\"header\" href=\"#target_abi\"><code>target_abi</code></a></h3>\n<p>Key-value option set to further disambiguate the <code class=\"hljs\">target_env</code> with information\nabout the target ABI. For historical reasons,\nthis value is only defined as not the empty-string when actually needed for\ndisambiguation. Thus, for example, on many GNU platforms, this value will be\nempty.</p>\n<p>Example values:</p>\n<ul>\n<li><code class=\"hljs\">\"\"</code></li>\n<li><code class=\"hljs\">\"llvm\"</code></li>\n<li><code class=\"hljs\">\"eabihf\"</code></li>\n<li><code class=\"hljs\">\"abi64\"</code></li>\n<li><code class=\"hljs\">\"sim\"</code></li>\n<li><code class=\"hljs\">\"macabi\"</code></li>\n</ul>\n<h3 id=\"target_endian\"><a class=\"header\" href=\"#target_endian\"><code>target_endian</code></a></h3>\n<p>Key-value option set once with either a value of \"little\" or \"big\" depending\non the endianness of the target's CPU.</p>\n<h3 id=\"target_pointer_width\"><a class=\"header\" href=\"#target_pointer_width\"><code>target_pointer_width</code></a></h3>\n<p>Key-value option set once with the target's pointer width in bits.</p>\n<p>Example values:</p>\n<ul>\n<li><code class=\"hljs\">\"16\"</code></li>\n<li><code class=\"hljs\">\"32\"</code></li>\n<li><code class=\"hljs\">\"64\"</code></li>\n</ul>\n<h3 id=\"target_vendor\"><a class=\"header\" href=\"#target_vendor\"><code>target_vendor</code></a></h3>\n<p>Key-value option set once with the vendor of the target.</p>\n<p>Example values:</p>\n<ul>\n<li><code class=\"hljs\">\"apple\"</code></li>\n<li><code class=\"hljs\">\"fortanix\"</code></li>\n<li><code class=\"hljs\">\"pc\"</code></li>\n<li><code class=\"hljs\">\"unknown\"</code></li>\n</ul>\n<h3 id=\"target_has_atomic\"><a class=\"header\" href=\"#target_has_atomic\"><code>target_has_atomic</code></a></h3>\n<p>Key-value option set for each bit width that the target supports\natomic loads, stores, and compare-and-swap operations.</p>\n<p>When this cfg is present, all of the stable <a href=\"../core/sync/atomic/index.html\"><code class=\"hljs\">core::sync::atomic</code></a> APIs are available for\nthe relevant atomic width.</p>\n<p>Possible values:</p>\n<ul>\n<li><code class=\"hljs\">\"8\"</code></li>\n<li><code class=\"hljs\">\"16\"</code></li>\n<li><code class=\"hljs\">\"32\"</code></li>\n<li><code class=\"hljs\">\"64\"</code></li>\n<li><code class=\"hljs\">\"128\"</code></li>\n<li><code class=\"hljs\">\"ptr\"</code></li>\n</ul>\n<h3 id=\"test\"><a class=\"header\" href=\"#test\"><code>test</code></a></h3>\n<p>Enabled when compiling the test harness. Done with <code class=\"hljs\">rustc</code> by using the\n<a href=\"../rustc/command-line-arguments.html#--test-build-a-test-harness\"><code class=\"hljs\">--test</code></a> flag. See <a href=\"attributes/testing.html\">Testing</a> for more on testing support.</p>\n<h3 id=\"debug_assertions\"><a class=\"header\" href=\"#debug_assertions\"><code>debug_assertions</code></a></h3>\n<p>Enabled by default when compiling without optimizations.\nThis can be used to enable extra debugging code in development but not in\nproduction.  For example, it controls the behavior of the standard library's\n<a href=\"../std/macro.debug_assert.html\"><code class=\"hljs\">debug_assert!</code></a> macro.</p>\n<h3 id=\"proc_macro\"><a class=\"header\" href=\"#proc_macro\"><code>proc_macro</code></a></h3>\n<p>Set when the crate being compiled is being compiled with the <code class=\"hljs\">proc_macro</code>\n<a href=\"linkage.html\">crate type</a>.</p>\n<h3 id=\"panic\"><a class=\"header\" href=\"#panic\"><code>panic</code></a></h3>\n<p>Key-value option set depending on the panic strategy. Note that more values may be added in the future.</p>\n<p>Example values:</p>\n<ul>\n<li><code class=\"hljs\">\"abort\"</code></li>\n<li><code class=\"hljs\">\"unwind\"</code></li>\n</ul>\n<h2 id=\"forms-of-conditional-compilation\"><a class=\"header\" href=\"#forms-of-conditional-compilation\">Forms of conditional compilation</a></h2>\n<h3 id=\"the-cfg-attribute\"><a class=\"header\" href=\"#the-cfg-attribute\">The <code>cfg</code> attribute</a></h3>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>CfgAttrAttribute</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">cfg</code> <code class=\"hljs\">(</code> <em>ConfigurationPredicate</em> <code class=\"hljs\">)</code></p>\n</blockquote>\n<!-- should we say they're active attributes here? -->\n<p>The <code class=\"hljs\">cfg</code> <a href=\"attributes.html\">attribute</a> conditionally includes the thing it is attached to based\non a configuration predicate.</p>\n<p>It is written as <code class=\"hljs\">cfg</code>, <code class=\"hljs\">(</code>, a configuration predicate, and finally <code class=\"hljs\">)</code>.</p>\n<p>If the predicate is true, the thing is rewritten to not have the <code class=\"hljs\">cfg</code> attribute\non it. If the predicate is false, the thing is removed from the source code.</p>\n<p>When a crate-level <code class=\"hljs\">cfg</code> has a false predicate, the behavior is slightly\ndifferent: any crate attributes preceding the <code class=\"hljs\">cfg</code> are kept, and any crate\nattributes following the <code class=\"hljs\">cfg</code> are removed. This allows <code class=\"hljs\">#![no_std]</code> and\n<code class=\"hljs\">#![no_core]</code> crates to avoid linking <code class=\"hljs\">std</code>/<code class=\"hljs\">core</code> even if a <code class=\"hljs\">#![cfg(...)]</code> has\nremoved the entire crate.</p>\n<p>Some examples on functions:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">// The function is only included in the build when compiling for macOS</span>\n<span class=\"hljs-meta\">#[cfg(target_os = <span class=\"hljs-meta-string\">\"macos\"</span>)]</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">macos_only</span></span>() {\n  <span class=\"hljs-comment\">// ...</span>\n}\n\n<span class=\"hljs-comment\">// This function is only included when either foo or bar is defined</span>\n<span class=\"hljs-meta\">#[cfg(any(foo, bar))]</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">needs_foo_or_bar</span></span>() {\n  <span class=\"hljs-comment\">// ...</span>\n}\n\n<span class=\"hljs-comment\">// This function is only included when compiling for a unixish OS with a 32-bit</span>\n<span class=\"hljs-comment\">// architecture</span>\n<span class=\"hljs-meta\">#[cfg(all(unix, target_pointer_width = <span class=\"hljs-meta-string\">\"32\"</span>))]</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">on_32bit_unix</span></span>() {\n  <span class=\"hljs-comment\">// ...</span>\n}\n\n<span class=\"hljs-comment\">// This function is only included when foo is not defined</span>\n<span class=\"hljs-meta\">#[cfg(not(foo))]</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">needs_not_foo</span></span>() {\n  <span class=\"hljs-comment\">// ...</span>\n}\n\n<span class=\"hljs-comment\">// This function is only included when the panic strategy is set to unwind</span>\n<span class=\"hljs-meta\">#[cfg(panic = <span class=\"hljs-meta-string\">\"unwind\"</span>)]</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">when_unwinding</span></span>() {\n  <span class=\"hljs-comment\">// ...</span>\n}\n\n<span class=\"boring\">}</span></code></pre></pre>\n<p>The <code class=\"hljs\">cfg</code> attribute is allowed anywhere attributes are allowed.</p>\n<h3 id=\"the-cfg_attr-attribute\"><a class=\"header\" href=\"#the-cfg_attr-attribute\">The <code>cfg_attr</code> attribute</a></h3>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>CfgAttrAttribute</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">cfg_attr</code> <code class=\"hljs\">(</code> <em>ConfigurationPredicate</em> <code class=\"hljs\">,</code> <em>CfgAttrs</em><sup>?</sup> <code class=\"hljs\">)</code></p>\n<p><em>CfgAttrs</em> :<br>\n&nbsp;&nbsp; <a href=\"attributes.html\"><em>Attr</em></a>&nbsp;(<code class=\"hljs\">,</code> <a href=\"attributes.html\"><em>Attr</em></a>)<sup>*</sup> <code class=\"hljs\">,</code><sup>?</sup></p>\n</blockquote>\n<p>The <code class=\"hljs\">cfg_attr</code> <a href=\"attributes.html\">attribute</a> conditionally includes <a href=\"attributes.html\">attributes</a> based on a\nconfiguration predicate.</p>\n<p>When the configuration predicate is true, this attribute expands out to the\nattributes listed after the predicate. For example, the following module will\neither be found at <code class=\"hljs\">linux.rs</code> or <code class=\"hljs\">windows.rs</code> based on the target.</p>\n<!-- ignore: `mod` needs multiple files -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-meta\">#[cfg_attr(target_os = <span class=\"hljs-meta-string\">\"linux\"</span>, path = <span class=\"hljs-meta-string\">\"linux.rs\"</span>)]</span>\n<span class=\"hljs-meta\">#[cfg_attr(windows, path = <span class=\"hljs-meta-string\">\"windows.rs\"</span>)]</span>\n<span class=\"hljs-keyword\">mod</span> os;</code></pre>\n<p>Zero, one, or more attributes may be listed. Multiple attributes will each be\nexpanded into separate attributes. For example:</p>\n<!-- ignore: fake attributes -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-meta\">#[cfg_attr(feature = <span class=\"hljs-meta-string\">\"magic\"</span>, sparkles, crackles)]</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">bewitched</span></span>() {}\n\n<span class=\"hljs-comment\">// When the `magic` feature flag is enabled, the above will expand to:</span>\n<span class=\"hljs-meta\">#[sparkles]</span>\n<span class=\"hljs-meta\">#[crackles]</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">bewitched</span></span>() {}</code></pre>\n<blockquote>\n<p><strong>Note</strong>: The <code class=\"hljs\">cfg_attr</code> can expand to another <code class=\"hljs\">cfg_attr</code>. For example,\n<code class=\"hljs\">#[cfg_attr(target_os = \"linux\", cfg_attr(feature = \"multithreaded\", some_other_attribute))]</code>\nis valid. This example would be equivalent to\n<code class=\"hljs\">#[cfg_attr(all(target_os = \"linux\", feature =\"multithreaded\"), some_other_attribute)]</code>.</p>\n</blockquote>\n<p>The <code class=\"hljs\">cfg_attr</code> attribute is allowed anywhere attributes are allowed.</p>\n<h3 id=\"the-cfg-macro\"><a class=\"header\" href=\"#the-cfg-macro\">The <code>cfg</code> macro</a></h3>\n<p>The built-in <code class=\"hljs\">cfg</code> macro takes in a single configuration predicate and evaluates\nto the <code class=\"hljs\">true</code> literal when the predicate is true and the <code class=\"hljs\">false</code> literal when\nit is false.</p>\n<p>For example:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> machine_kind = <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">cfg!</span>(unix) {\n  <span class=\"hljs-string\">\"unix\"</span>\n} <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">cfg!</span>(windows) {\n  <span class=\"hljs-string\">\"windows\"</span>\n} <span class=\"hljs-keyword\">else</span> {\n  <span class=\"hljs-string\">\"unknown\"</span>\n};\n\n<span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"I'm running on a {} machine!\"</span>, machine_kind);\n<span class=\"boring\">}</span></code></pre></pre>\n\n                    </main>\n\n                    <nav class=\"nav-wrapper\" aria-label=\"Page navigation\">\n                        <!-- Mobile navigation buttons -->\n                            <a rel=\"prev\" href=\"crates-and-source-files.html\" class=\"mobile-nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                                <i class=\"fa fa-angle-left\"></i>\n                            </a>\n\n                            <a rel=\"next prefetch\" href=\"items.html\" class=\"mobile-nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                                <i class=\"fa fa-angle-right\"></i>\n                            </a>\n\n                        <div style=\"clear: both\"></div>\n                    </nav>\n                </div>\n            </div>\n\n            <nav class=\"nav-wide-wrapper\" aria-label=\"Page navigation\">\n                    <a rel=\"prev\" href=\"crates-and-source-files.html\" class=\"nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                        <i class=\"fa fa-angle-left\"></i>\n                    </a>\n\n                    <a rel=\"next prefetch\" href=\"items.html\" class=\"nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                        <i class=\"fa fa-angle-right\"></i>\n                    </a>\n            </nav>\n\n        </div>\n\n\n\n\n        <script>\n            window.playground_copyable = true;\n        </script>\n\n\n        <script src=\"elasticlunr.min.js\"></script>\n        <script src=\"mark.min.js\"></script>\n        <script src=\"searcher.js\"></script>\n\n        <script src=\"clipboard.min.js\"></script>\n        <script src=\"highlight.js\"></script>\n        <script src=\"book.js\"></script>\n\n        <!-- Custom JS scripts -->\n\n\n    </div>\n    \n\n</body></html>",
	"crawlDate": "2024-07-28T05:14:44.819Z"
}