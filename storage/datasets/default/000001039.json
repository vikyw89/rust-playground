{
	"title": "compiler_fence in std::sync::atomic - Rust",
	"url": "https://doc.rust-lang.org/stable/std/sync/atomic/fn.compiler_fence.html",
	"markdown": "# compiler\\_fence in std::sync::atomic - Rust\n\n```\npub fn compiler_fence(order: Ordering)\n```\n\nExpand description\n\nA compiler memory fence.\n\n`compiler_fence` does not emit any machine code, but restricts the kinds of memory re-ordering the compiler is allowed to do. Specifically, depending on the given [`Ordering`](enum.Ordering.html \"enum std::sync::atomic::Ordering\") semantics, the compiler may be disallowed from moving reads or writes from before or after the call to the other side of the call to `compiler_fence`. Note that it does **not** prevent the _hardware_ from doing such re-ordering. This is not a problem in a single-threaded, execution context, but when other threads may modify memory at the same time, stronger synchronization primitives such as [`fence`](fn.fence.html \"fn std::sync::atomic::fence\") are required.\n\nThe re-ordering prevented by the different ordering semantics are:\n\n-   with [`SeqCst`](about:blank/enum.Ordering.html#variant.SeqCst \"variant std::sync::atomic::Ordering::SeqCst\"), no re-ordering of reads and writes across this point is allowed.\n-   with [`Release`](about:blank/enum.Ordering.html#variant.Release \"variant std::sync::atomic::Ordering::Release\"), preceding reads and writes cannot be moved past subsequent writes.\n-   with [`Acquire`](about:blank/enum.Ordering.html#variant.Acquire \"variant std::sync::atomic::Ordering::Acquire\"), subsequent reads and writes cannot be moved ahead of preceding reads.\n-   with [`AcqRel`](about:blank/enum.Ordering.html#variant.AcqRel \"variant std::sync::atomic::Ordering::AcqRel\"), both of the above rules are enforced.\n\n`compiler_fence` is generally only useful for preventing a thread from racing _with itself_. That is, if a given thread is executing one piece of code, and is then interrupted, and starts executing code elsewhere (while still in the same thread, and conceptually still on the same core). In traditional programs, this can only occur when a signal handler is registered. In more low-level code, such situations can also arise when handling interrupts, when implementing green threads with pre-emption, etc. Curious readers are encouraged to read the Linux kernel’s discussion of [memory barriers](https://www.kernel.org/doc/Documentation/memory-barriers.txt).\n\n## [§](#panics)Panics\n\nPanics if `order` is [`Relaxed`](about:blank/enum.Ordering.html#variant.Relaxed \"variant std::sync::atomic::Ordering::Relaxed\").\n\n## [§](#examples)Examples\n\nWithout `compiler_fence`, the `assert_eq!` in following code is _not_ guaranteed to succeed, despite everything happening in a single thread. To see why, remember that the compiler is free to swap the stores to `IMPORTANT_VARIABLE` and `IS_READY` since they are both `Ordering::Relaxed`. If it does, and the signal handler is invoked right after `IS_READY` is updated, then the signal handler will see `IS_READY=1`, but `IMPORTANT_VARIABLE=0`. Using a `compiler_fence` remedies this situation.\n\n```\nuse std::sync::atomic::{AtomicBool, AtomicUsize};\nuse std::sync::atomic::Ordering;\nuse std::sync::atomic::compiler_fence;\n\nstatic IMPORTANT_VARIABLE: AtomicUsize = AtomicUsize::new(0);\nstatic IS_READY: AtomicBool = AtomicBool::new(false);\n\nfn main() {\n    IMPORTANT_VARIABLE.store(42, Ordering::Relaxed);\n    // prevent earlier writes from being moved beyond this point\n    compiler_fence(Ordering::Release);\n    IS_READY.store(true, Ordering::Relaxed);\n}\n\nfn signal_handler() {\n    if IS_READY.load(Ordering::Relaxed) {\n        assert_eq!(IMPORTANT_VARIABLE.load(Ordering::Relaxed), 42);\n    }\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::sync::atomic::%7BAtomicBool,+AtomicUsize%7D;%0Ause+std::sync::atomic::Ordering;%0Ause+std::sync::atomic::compiler_fence;%0A%0Astatic+IMPORTANT_VARIABLE:+AtomicUsize+=+AtomicUsize::new(0);%0Astatic+IS_READY:+AtomicBool+=+AtomicBool::new(false);%0A%0Afn+main()+%7B%0A++++IMPORTANT_VARIABLE.store(42,+Ordering::Relaxed);%0A++++//+prevent+earlier+writes+from+being+moved+beyond+this+point%0A++++compiler_fence(Ordering::Release);%0A++++IS_READY.store(true,+Ordering::Relaxed);%0A%7D%0A%0Afn+signal_handler()+%7B%0A++++if+IS_READY.load(Ordering::Relaxed)+%7B%0A++++++++assert_eq!(IMPORTANT_VARIABLE.load(Ordering::Relaxed),+42);%0A++++%7D%0A%7D&edition=2021)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"A compiler memory fence.\"><title>compiler_fence in std::sync::atomic - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../../\" data-static-root-path=\"../../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc fn\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><div class=\"sidebar-elems\"><h2><a href=\"index.html\">In std::sync::atomic</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.AtomicBool.html\">AtomicBool</a></li><li><a href=\"struct.AtomicI16.html\">AtomicI16</a></li><li><a href=\"struct.AtomicI32.html\">AtomicI32</a></li><li><a href=\"struct.AtomicI64.html\">AtomicI64</a></li><li><a href=\"struct.AtomicI8.html\">AtomicI8</a></li><li><a href=\"struct.AtomicIsize.html\">AtomicIsize</a></li><li><a href=\"struct.AtomicPtr.html\">AtomicPtr</a></li><li><a href=\"struct.AtomicU16.html\">AtomicU16</a></li><li><a href=\"struct.AtomicU32.html\">AtomicU32</a></li><li><a href=\"struct.AtomicU64.html\">AtomicU64</a></li><li><a href=\"struct.AtomicU8.html\">AtomicU8</a></li><li><a href=\"struct.AtomicUsize.html\">AtomicUsize</a></li></ul><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.Ordering.html\">Ordering</a></li></ul><h3><a href=\"index.html#constants\">Constants</a></h3><ul class=\"block constant\"><li><a href=\"constant.ATOMIC_BOOL_INIT.html\">ATOMIC_BOOL_INIT</a></li><li><a href=\"constant.ATOMIC_ISIZE_INIT.html\">ATOMIC_ISIZE_INIT</a></li><li><a href=\"constant.ATOMIC_USIZE_INIT.html\">ATOMIC_USIZE_INIT</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.compiler_fence.html\">compiler_fence</a></li><li><a href=\"fn.fence.html\">fence</a></li><li><a href=\"fn.spin_loop_hint.html\">spin_loop_hint</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Function <a href=\"../../index.html\">std</a>::<wbr><a href=\"../index.html\">sync</a>::<wbr><a href=\"index.html\">atomic</a>::<wbr><a class=\"fn\" href=\"#\">compiler_fence</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/sync/atomic.rs.html#3720\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub fn compiler_fence(order: <a class=\"enum\" href=\"enum.Ordering.html\" title=\"enum std::sync::atomic::Ordering\">Ordering</a>)</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>A compiler memory fence.</p>\n<p><code>compiler_fence</code> does not emit any machine code, but restricts the kinds\nof memory re-ordering the compiler is allowed to do. Specifically, depending on\nthe given <a href=\"enum.Ordering.html\" title=\"enum std::sync::atomic::Ordering\"><code>Ordering</code></a> semantics, the compiler may be disallowed from moving reads\nor writes from before or after the call to the other side of the call to\n<code>compiler_fence</code>. Note that it does <strong>not</strong> prevent the <em>hardware</em>\nfrom doing such re-ordering. This is not a problem in a single-threaded,\nexecution context, but when other threads may modify memory at the same\ntime, stronger synchronization primitives such as <a href=\"fn.fence.html\" title=\"fn std::sync::atomic::fence\"><code>fence</code></a> are required.</p>\n<p>The re-ordering prevented by the different ordering semantics are:</p>\n<ul>\n<li>with <a href=\"enum.Ordering.html#variant.SeqCst\" title=\"variant std::sync::atomic::Ordering::SeqCst\"><code>SeqCst</code></a>, no re-ordering of reads and writes across this point is allowed.</li>\n<li>with <a href=\"enum.Ordering.html#variant.Release\" title=\"variant std::sync::atomic::Ordering::Release\"><code>Release</code></a>, preceding reads and writes cannot be moved past subsequent writes.</li>\n<li>with <a href=\"enum.Ordering.html#variant.Acquire\" title=\"variant std::sync::atomic::Ordering::Acquire\"><code>Acquire</code></a>, subsequent reads and writes cannot be moved ahead of preceding reads.</li>\n<li>with <a href=\"enum.Ordering.html#variant.AcqRel\" title=\"variant std::sync::atomic::Ordering::AcqRel\"><code>AcqRel</code></a>, both of the above rules are enforced.</li>\n</ul>\n<p><code>compiler_fence</code> is generally only useful for preventing a thread from\nracing <em>with itself</em>. That is, if a given thread is executing one piece\nof code, and is then interrupted, and starts executing code elsewhere\n(while still in the same thread, and conceptually still on the same\ncore). In traditional programs, this can only occur when a signal\nhandler is registered. In more low-level code, such situations can also\narise when handling interrupts, when implementing green threads with\npre-emption, etc. Curious readers are encouraged to read the Linux kernel’s\ndiscussion of <a href=\"https://www.kernel.org/doc/Documentation/memory-barriers.txt\">memory barriers</a>.</p>\n<h2 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h2>\n<p>Panics if <code>order</code> is <a href=\"enum.Ordering.html#variant.Relaxed\" title=\"variant std::sync::atomic::Ordering::Relaxed\"><code>Relaxed</code></a>.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<p>Without <code>compiler_fence</code>, the <code>assert_eq!</code> in following code\nis <em>not</em> guaranteed to succeed, despite everything happening in a single thread.\nTo see why, remember that the compiler is free to swap the stores to\n<code>IMPORTANT_VARIABLE</code> and <code>IS_READY</code> since they are both\n<code>Ordering::Relaxed</code>. If it does, and the signal handler is invoked right\nafter <code>IS_READY</code> is updated, then the signal handler will see\n<code>IS_READY=1</code>, but <code>IMPORTANT_VARIABLE=0</code>.\nUsing a <code>compiler_fence</code> remedies this situation.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::atomic::{AtomicBool, AtomicUsize};\n<span class=\"kw\">use </span>std::sync::atomic::Ordering;\n<span class=\"kw\">use </span>std::sync::atomic::compiler_fence;\n\n<span class=\"kw\">static </span>IMPORTANT_VARIABLE: AtomicUsize = AtomicUsize::new(<span class=\"number\">0</span>);\n<span class=\"kw\">static </span>IS_READY: AtomicBool = AtomicBool::new(<span class=\"bool-val\">false</span>);\n\n<span class=\"kw\">fn </span>main() {\n    IMPORTANT_VARIABLE.store(<span class=\"number\">42</span>, Ordering::Relaxed);\n    <span class=\"comment\">// prevent earlier writes from being moved beyond this point\n    </span>compiler_fence(Ordering::Release);\n    IS_READY.store(<span class=\"bool-val\">true</span>, Ordering::Relaxed);\n}\n\n<span class=\"kw\">fn </span>signal_handler() {\n    <span class=\"kw\">if </span>IS_READY.load(Ordering::Relaxed) {\n        <span class=\"macro\">assert_eq!</span>(IMPORTANT_VARIABLE.load(Ordering::Relaxed), <span class=\"number\">42</span>);\n    }\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::sync::atomic::%7BAtomicBool,+AtomicUsize%7D;%0Ause+std::sync::atomic::Ordering;%0Ause+std::sync::atomic::compiler_fence;%0A%0Astatic+IMPORTANT_VARIABLE:+AtomicUsize+=+AtomicUsize::new(0);%0Astatic+IS_READY:+AtomicBool+=+AtomicBool::new(false);%0A%0Afn+main()+%7B%0A++++IMPORTANT_VARIABLE.store(42,+Ordering::Relaxed);%0A++++//+prevent+earlier+writes+from+being+moved+beyond+this+point%0A++++compiler_fence(Ordering::Release);%0A++++IS_READY.store(true,+Ordering::Relaxed);%0A%7D%0A%0Afn+signal_handler()+%7B%0A++++if+IS_READY.load(Ordering::Relaxed)+%7B%0A++++++++assert_eq!(IMPORTANT_VARIABLE.load(Ordering::Relaxed),+42);%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:14:52.488Z"
}