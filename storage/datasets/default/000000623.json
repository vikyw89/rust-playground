{
	"title": "RangeToInclusive in std::ops - Rust",
	"url": "https://doc.rust-lang.org/stable/std/ops/struct.RangeToInclusive.html",
	"markdown": "# RangeToInclusive in std::ops - Rust\n\n```\npub struct RangeToInclusive<Idx> {\n    pub end: Idx,\n}\n```\n\nExpand description\n\nA range only bounded inclusively above (`..=end`).\n\nThe `RangeToInclusive` `..=end` contains all values with `x <= end`. It cannot serve as an [`Iterator`](../iter/trait.Iterator.html \"trait std::iter::Iterator\") because it doesnâ€™t have a starting point.\n\n## [Â§](#examples)Examples\n\nThe `..=end` syntax is a `RangeToInclusive`:\n\n```\nassert_eq!((..=5), std::ops::RangeToInclusive{ end: 5 });\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!((..=5),+std::ops::RangeToInclusive%7B+end:+5+%7D);%0A%7D&edition=2021)\n\nIt does not have an [`IntoIterator`](../iter/trait.IntoIterator.html \"trait std::iter::IntoIterator\") implementation, so you canâ€™t use it in a `for` loop directly. This wonâ€™t compile:\n\n[â“˜](# \"This example deliberately fails to compile\")\n\n```\n// error[E0277]: the trait bound `std::ops::RangeToInclusive<{integer}>:\n// std::iter::Iterator` is not satisfied\nfor i in ..=5 {\n    // ...\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A//+error%5BE0277%5D:+the+trait+bound+%60std::ops::RangeToInclusive%3C%7Binteger%7D%3E:%0A//+std::iter::Iterator%60+is+not+satisfied%0Afn+main()+%7B%0A++++for+i+in+..=5+%7B%0A++++++++//+...%0A++++%7D%0A%7D&edition=2021)\n\nWhen used as a [slicing index](../slice/trait.SliceIndex.html \"trait std::slice::SliceIndex\"), `RangeToInclusive` produces a slice of all array elements up to and including the index indicated by `end`.\n\n```\nlet arr = [0, 1, 2, 3, 4];\nassert_eq!(arr[ ..  ], [0, 1, 2, 3, 4]);\nassert_eq!(arr[ .. 3], [0, 1, 2      ]);\nassert_eq!(arr[ ..=3], [0, 1, 2, 3   ]); // This is a `RangeToInclusive`\nassert_eq!(arr[1..  ], [   1, 2, 3, 4]);\nassert_eq!(arr[1.. 3], [   1, 2      ]);\nassert_eq!(arr[1..=3], [   1, 2, 3   ]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+arr+=+%5B0,+1,+2,+3,+4%5D;%0A++++assert_eq!(arr%5B+..++%5D,+%5B0,+1,+2,+3,+4%5D);%0A++++assert_eq!(arr%5B+..+3%5D,+%5B0,+1,+2++++++%5D);%0A++++assert_eq!(arr%5B+..=3%5D,+%5B0,+1,+2,+3+++%5D);+//+This+is+a+%60RangeToInclusive%60%0A++++assert_eq!(arr%5B1..++%5D,+%5B+++1,+2,+3,+4%5D);%0A++++assert_eq!(arr%5B1..+3%5D,+%5B+++1,+2++++++%5D);%0A++++assert_eq!(arr%5B1..=3%5D,+%5B+++1,+2,+3+++%5D);%0A%7D&edition=2021)\n\nThe upper bound of the range (inclusive)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#607)[Â§](#impl-RangeToInclusive%3CIdx%3E)\n\n1.35.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#623-626)\n\nReturns `true` if `item` is contained in the range.\n\n##### [Â§](#examples-1)Examples\n\n```\nassert!( (..=5).contains(&-1_000_000_000));\nassert!( (..=5).contains(&5));\nassert!(!(..=5).contains(&6));\n\nassert!( (..=1.0).contains(&1.0));\nassert!(!(..=1.0).contains(&f32::NAN));\nassert!(!(..=f32::NAN).contains(&0.5));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert!(+(..=5).contains(%26-1_000_000_000));%0A++++assert!(+(..=5).contains(%265));%0A++++assert!(!(..=5).contains(%266));%0A++++%0A++++assert!(+(..=1.0).contains(%261.0));%0A++++assert!(!(..=1.0).contains(%26f32::NAN));%0A++++assert!(!(..=f32::NAN).contains(%260.5));%0A%7D&edition=2021)\n\n1.26.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#590)[Â§](#impl-Clone-for-RangeToInclusive%3CIdx%3E)\n\n1.26.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#599)[Â§](#impl-Debug-for-RangeToInclusive%3CIdx%3E)\n\n1.26.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#590)[Â§](#impl-Hash-for-RangeToInclusive%3CIdx%3E)\n\n1.26.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#590)[Â§](#impl-PartialEq-for-RangeToInclusive%3CIdx%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#590)[Â§](#method.eq)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[Â§](#method.ne)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.28.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#973)[Â§](#impl-RangeBounds%3CT%3E-for-RangeToInclusive%3C%26T%3E)\n\n1.28.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#893)[Â§](#impl-RangeBounds%3CT%3E-for-RangeToInclusive%3CT%3E)\n\n1.26.0 (const: unstable) Â· [source](https://doc.rust-lang.org/1.80.0/src/core/slice/index.rs.html#595)[Â§](#impl-SliceIndex%3C%5BT%5D%3E-for-RangeToInclusive%3Cusize%3E)\n\nThe methods `index` and `index_mut` panic if the end of the range is out of bounds.\n\n[Â§](#associatedtype.Output-1)\n\nThe output type returned by methods.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/slice/index.rs.html#599)[Â§](#method.get-1)\n\nðŸ”¬This is a nightly-only experimental API. (`slice_index_methods`)\n\nReturns a shared reference to the output at this location, if in bounds.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/slice/index.rs.html#604)[Â§](#method.get_mut-1)\n\nðŸ”¬This is a nightly-only experimental API. (`slice_index_methods`)\n\nReturns a mutable reference to the output at this location, if in bounds.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/slice/index.rs.html#609)[Â§](#method.get_unchecked-1)\n\nðŸ”¬This is a nightly-only experimental API. (`slice_index_methods`)\n\nReturns a pointer to the output at this location, without performing any bounds checking. Calling this method with an out-of-bounds index or a dangling `slice` pointer is _[undefined behavior](https://doc.rust-lang.org/reference/behavior-considered-undefined.html)_ even if the resulting pointer is not used.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/slice/index.rs.html#615)[Â§](#method.get_unchecked_mut-1)\n\nðŸ”¬This is a nightly-only experimental API. (`slice_index_methods`)\n\nReturns a mutable pointer to the output at this location, without performing any bounds checking. Calling this method with an out-of-bounds index or a dangling `slice` pointer is _[undefined behavior](https://doc.rust-lang.org/reference/behavior-considered-undefined.html)_ even if the resulting pointer is not used.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/slice/index.rs.html#621)[Â§](#method.index-1)\n\nðŸ”¬This is a nightly-only experimental API. (`slice_index_methods`)\n\nReturns a shared reference to the output at this location, panicking if out of bounds.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/slice/index.rs.html#626)[Â§](#method.index_mut-1)\n\nðŸ”¬This is a nightly-only experimental API. (`slice_index_methods`)\n\nReturns a mutable reference to the output at this location, panicking if out of bounds.\n\n1.26.0 (const: unstable) Â· [source](https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#526)[Â§](#impl-SliceIndex%3Cstr%3E-for-RangeToInclusive%3Cusize%3E)\n\nImplements substring slicing with syntax `&self[..= end]` or `&mut self[..= end]`.\n\nReturns a slice of the given string from the byte range \\[0, `end`\\]. Equivalent to `&self [0 .. end + 1]`, except if `end` has the maximum value for `usize`.\n\nThis operation is _O_(1).\n\n#### [Â§](#panics)Panics\n\nPanics if `end` does not point to the ending byte offset of a character (`end + 1` is either a starting byte offset as defined by `is_char_boundary`, or equal to `len`), or if `end >= len`.\n\n[Â§](#associatedtype.Output)\n\nThe output type returned by methods.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#529)[Â§](#method.get)\n\nðŸ”¬This is a nightly-only experimental API. (`slice_index_methods`)\n\nReturns a shared reference to the output at this location, if in bounds.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#533)[Â§](#method.get_mut)\n\nðŸ”¬This is a nightly-only experimental API. (`slice_index_methods`)\n\nReturns a mutable reference to the output at this location, if in bounds.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#537)[Â§](#method.get_unchecked)\n\nðŸ”¬This is a nightly-only experimental API. (`slice_index_methods`)\n\nReturns a pointer to the output at this location, without performing any bounds checking. Calling this method with an out-of-bounds index or a dangling `slice` pointer is _[undefined behavior](https://doc.rust-lang.org/reference/behavior-considered-undefined.html)_ even if the resulting pointer is not used.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#542)[Â§](#method.get_unchecked_mut)\n\nðŸ”¬This is a nightly-only experimental API. (`slice_index_methods`)\n\nReturns a mutable pointer to the output at this location, without performing any bounds checking. Calling this method with an out-of-bounds index or a dangling `slice` pointer is _[undefined behavior](https://doc.rust-lang.org/reference/behavior-considered-undefined.html)_ even if the resulting pointer is not used.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#547)[Â§](#method.index)\n\nðŸ”¬This is a nightly-only experimental API. (`slice_index_methods`)\n\nReturns a shared reference to the output at this location, panicking if out of bounds.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#551)[Â§](#method.index_mut)\n\nðŸ”¬This is a nightly-only experimental API. (`slice_index_methods`)\n\nReturns a mutable reference to the output at this location, panicking if out of bounds.\n\n1.26.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#590)[Â§](#impl-Copy-for-RangeToInclusive%3CIdx%3E)\n\n1.26.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#590)[Â§](#impl-Eq-for-RangeToInclusive%3CIdx%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#998)[Â§](#impl-OneSidedRange%3CT%3E-for-RangeToInclusive%3CT%3E)\n\n1.26.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#590)[Â§](#impl-StructuralPartialEq-for-RangeToInclusive%3CIdx%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140)[Â§](#impl-Any-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208)[Â§](#impl-Borrow%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216)[Â§](#impl-BorrowMut%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765)[Â§](#impl-From%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768)[Â§](#method.from)\n\nReturns the argument unchanged.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750)[Â§](#impl-Into%3CU%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758)[Â§](#method.into)\n\nCalls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of `[From](../convert/trait.From.html \"trait std::convert::From\")<T> for U` chooses to do.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85)[Â§](#impl-ToOwned-for-T)\n\n[Â§](#associatedtype.Owned)\n\nThe resulting type after obtaining ownership.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88)[Â§](#method.to_owned)\n\nCreates owned data from borrowed data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#tymethod.to_owned)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92)[Â§](#method.clone_into)\n\nUses borrowed data to replace owned data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#method.clone_into)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807)[Â§](#impl-TryFrom%3CU%3E-for-T)\n\n[Â§](#associatedtype.Error-1)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812)[Â§](#method.try_from)\n\nPerforms the conversion.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792)[Â§](#impl-TryInto%3CU%3E-for-T)\n\n[Â§](#associatedtype.Error)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797)[Â§](#method.try_into)\n\nPerforms the conversion.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"A range only bounded inclusively above (`..=end`).\"><title>RangeToInclusive in std::ops - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc struct\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">RangeToInclusive</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">RangeToInclusive</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#fields\">Fields</a></h3><ul class=\"block structfield\"><li><a href=\"#structfield.end\">end</a></li></ul><h3><a href=\"#implementations\">Methods</a></h3><ul class=\"block method\"><li><a href=\"#method.contains\">contains</a></li></ul><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-Clone-for-RangeToInclusive%3CIdx%3E\">Clone</a></li><li><a href=\"#impl-Copy-for-RangeToInclusive%3CIdx%3E\">Copy</a></li><li><a href=\"#impl-Debug-for-RangeToInclusive%3CIdx%3E\">Debug</a></li><li><a href=\"#impl-Eq-for-RangeToInclusive%3CIdx%3E\">Eq</a></li><li><a href=\"#impl-Hash-for-RangeToInclusive%3CIdx%3E\">Hash</a></li><li><a href=\"#impl-OneSidedRange%3CT%3E-for-RangeToInclusive%3CT%3E\">OneSidedRange&lt;T&gt;</a></li><li><a href=\"#impl-PartialEq-for-RangeToInclusive%3CIdx%3E\">PartialEq</a></li><li><a href=\"#impl-RangeBounds%3CT%3E-for-RangeToInclusive%3C%26T%3E\">RangeBounds&lt;T&gt;</a></li><li><a href=\"#impl-RangeBounds%3CT%3E-for-RangeToInclusive%3CT%3E\">RangeBounds&lt;T&gt;</a></li><li><a href=\"#impl-SliceIndex%3C%5BT%5D%3E-for-RangeToInclusive%3Cusize%3E\">SliceIndex&lt;[T]&gt;</a></li><li><a href=\"#impl-SliceIndex%3Cstr%3E-for-RangeToInclusive%3Cusize%3E\">SliceIndex&lt;str&gt;</a></li><li><a href=\"#impl-StructuralPartialEq-for-RangeToInclusive%3CIdx%3E\">StructuralPartialEq</a></li></ul><h3><a href=\"#synthetic-implementations\">Auto Trait Implementations</a></h3><ul class=\"block synthetic-implementation\"><li><a href=\"#impl-Freeze-for-RangeToInclusive%3CIdx%3E\">Freeze</a></li><li><a href=\"#impl-RefUnwindSafe-for-RangeToInclusive%3CIdx%3E\">RefUnwindSafe</a></li><li><a href=\"#impl-Send-for-RangeToInclusive%3CIdx%3E\">Send</a></li><li><a href=\"#impl-Sync-for-RangeToInclusive%3CIdx%3E\">Sync</a></li><li><a href=\"#impl-Unpin-for-RangeToInclusive%3CIdx%3E\">Unpin</a></li><li><a href=\"#impl-UnwindSafe-for-RangeToInclusive%3CIdx%3E\">UnwindSafe</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-Any-for-T\">Any</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-T\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-T\">BorrowMut&lt;T&gt;</a></li><li><a href=\"#impl-From%3CT%3E-for-T\">From&lt;T&gt;</a></li><li><a href=\"#impl-Into%3CU%3E-for-T\">Into&lt;U&gt;</a></li><li><a href=\"#impl-ToOwned-for-T\">ToOwned</a></li><li><a href=\"#impl-TryFrom%3CU%3E-for-T\">TryFrom&lt;U&gt;</a></li><li><a href=\"#impl-TryInto%3CU%3E-for-T\">TryInto&lt;U&gt;</a></li></ul></section><h2><a href=\"index.html\">In std::ops</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.Range.html\">Range</a></li><li><a href=\"struct.RangeFrom.html\">RangeFrom</a></li><li><a href=\"struct.RangeFull.html\">RangeFull</a></li><li><a href=\"struct.RangeInclusive.html\">RangeInclusive</a></li><li><a href=\"struct.RangeTo.html\">RangeTo</a></li><li><a href=\"struct.RangeToInclusive.html\">RangeToInclusive</a></li><li><a href=\"struct.Yeet.html\">Yeet</a></li></ul><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.Bound.html\">Bound</a></li><li><a href=\"enum.ControlFlow.html\">ControlFlow</a></li><li><a href=\"enum.CoroutineState.html\">CoroutineState</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.Add.html\">Add</a></li><li><a href=\"trait.AddAssign.html\">AddAssign</a></li><li><a href=\"trait.AsyncFn.html\">AsyncFn</a></li><li><a href=\"trait.AsyncFnMut.html\">AsyncFnMut</a></li><li><a href=\"trait.AsyncFnOnce.html\">AsyncFnOnce</a></li><li><a href=\"trait.BitAnd.html\">BitAnd</a></li><li><a href=\"trait.BitAndAssign.html\">BitAndAssign</a></li><li><a href=\"trait.BitOr.html\">BitOr</a></li><li><a href=\"trait.BitOrAssign.html\">BitOrAssign</a></li><li><a href=\"trait.BitXor.html\">BitXor</a></li><li><a href=\"trait.BitXorAssign.html\">BitXorAssign</a></li><li><a href=\"trait.CoerceUnsized.html\">CoerceUnsized</a></li><li><a href=\"trait.Coroutine.html\">Coroutine</a></li><li><a href=\"trait.Deref.html\">Deref</a></li><li><a href=\"trait.DerefMut.html\">DerefMut</a></li><li><a href=\"trait.DerefPure.html\">DerefPure</a></li><li><a href=\"trait.DispatchFromDyn.html\">DispatchFromDyn</a></li><li><a href=\"trait.Div.html\">Div</a></li><li><a href=\"trait.DivAssign.html\">DivAssign</a></li><li><a href=\"trait.Drop.html\">Drop</a></li><li><a href=\"trait.Fn.html\">Fn</a></li><li><a href=\"trait.FnMut.html\">FnMut</a></li><li><a href=\"trait.FnOnce.html\">FnOnce</a></li><li><a href=\"trait.FromResidual.html\">FromResidual</a></li><li><a href=\"trait.Index.html\">Index</a></li><li><a href=\"trait.IndexMut.html\">IndexMut</a></li><li><a href=\"trait.Mul.html\">Mul</a></li><li><a href=\"trait.MulAssign.html\">MulAssign</a></li><li><a href=\"trait.Neg.html\">Neg</a></li><li><a href=\"trait.Not.html\">Not</a></li><li><a href=\"trait.OneSidedRange.html\">OneSidedRange</a></li><li><a href=\"trait.RangeBounds.html\">RangeBounds</a></li><li><a href=\"trait.Rem.html\">Rem</a></li><li><a href=\"trait.RemAssign.html\">RemAssign</a></li><li><a href=\"trait.Residual.html\">Residual</a></li><li><a href=\"trait.Shl.html\">Shl</a></li><li><a href=\"trait.ShlAssign.html\">ShlAssign</a></li><li><a href=\"trait.Shr.html\">Shr</a></li><li><a href=\"trait.ShrAssign.html\">ShrAssign</a></li><li><a href=\"trait.Sub.html\">Sub</a></li><li><a href=\"trait.SubAssign.html\">SubAssign</a></li><li><a href=\"trait.Try.html\">Try</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type â€˜Sâ€™ or â€˜/â€™ to search, â€˜?â€™ for more optionsâ€¦\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Struct <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">ops</a>::<wbr><a class=\"struct\" href=\"#\">RangeToInclusive</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.26.0\">1.26.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#592\">source</a> Â· <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>âˆ’</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub struct RangeToInclusive&lt;Idx&gt; {\n    pub end: Idx,\n}</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>A range only bounded inclusively above (<code>..=end</code>).</p>\n<p>The <code>RangeToInclusive</code> <code>..=end</code> contains all values with <code>x &lt;= end</code>.\nIt cannot serve as an <a href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\"><code>Iterator</code></a> because it doesnâ€™t have a starting point.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">Â§</a>Examples</h2>\n<p>The <code>..=end</code> syntax is a <code>RangeToInclusive</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((..=<span class=\"number\">5</span>), std::ops::RangeToInclusive{ end: <span class=\"number\">5 </span>});</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!((..=5),+std::ops::RangeToInclusive%7B+end:+5+%7D);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>It does not have an <a href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\"><code>IntoIterator</code></a> implementation, so you canâ€™t use it in a\n<code>for</code> loop directly. This wonâ€™t compile:</p>\n\n<div class=\"example-wrap compile_fail\"><a href=\"#\" class=\"tooltip\" title=\"This example deliberately fails to compile\">â“˜</a><pre class=\"rust rust-example-rendered\"><code><span class=\"comment\">// error[E0277]: the trait bound `std::ops::RangeToInclusive&lt;{integer}&gt;:\n// std::iter::Iterator` is not satisfied\n</span><span class=\"kw\">for </span>i <span class=\"kw\">in </span>..=<span class=\"number\">5 </span>{\n    <span class=\"comment\">// ...\n</span>}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A//+error%5BE0277%5D:+the+trait+bound+%60std::ops::RangeToInclusive%3C%7Binteger%7D%3E:%0A//+std::iter::Iterator%60+is+not+satisfied%0Afn+main()+%7B%0A++++for+i+in+..=5+%7B%0A++++++++//+...%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<p>When used as a <a href=\"../slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">slicing index</a>, <code>RangeToInclusive</code> produces a slice of all\narray elements up to and including the index indicated by <code>end</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>arr = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];\n<span class=\"macro\">assert_eq!</span>(arr[ ..  ], [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n<span class=\"macro\">assert_eq!</span>(arr[ .. <span class=\"number\">3</span>], [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2      </span>]);\n<span class=\"macro\">assert_eq!</span>(arr[ ..=<span class=\"number\">3</span>], [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3   </span>]); <span class=\"comment\">// This is a `RangeToInclusive`\n</span><span class=\"macro\">assert_eq!</span>(arr[<span class=\"number\">1</span>..  ], [   <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n<span class=\"macro\">assert_eq!</span>(arr[<span class=\"number\">1</span>.. <span class=\"number\">3</span>], [   <span class=\"number\">1</span>, <span class=\"number\">2      </span>]);\n<span class=\"macro\">assert_eq!</span>(arr[<span class=\"number\">1</span>..=<span class=\"number\">3</span>], [   <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3   </span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+arr+=+%5B0,+1,+2,+3,+4%5D;%0A++++assert_eq!(arr%5B+..++%5D,+%5B0,+1,+2,+3,+4%5D);%0A++++assert_eq!(arr%5B+..+3%5D,+%5B0,+1,+2++++++%5D);%0A++++assert_eq!(arr%5B+..=3%5D,+%5B0,+1,+2,+3+++%5D);+//+This+is+a+%60RangeToInclusive%60%0A++++assert_eq!(arr%5B1..++%5D,+%5B+++1,+2,+3,+4%5D);%0A++++assert_eq!(arr%5B1..+3%5D,+%5B+++1,+2++++++%5D);%0A++++assert_eq!(arr%5B1..=3%5D,+%5B+++1,+2,+3+++%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><h2 id=\"fields\" class=\"fields section-header\">Fields<a href=\"#fields\" class=\"anchor\">Â§</a></h2><span id=\"structfield.end\" class=\"structfield section-header\"><a href=\"#structfield.end\" class=\"anchor field\">Â§</a><code>end: Idx</code></span><div class=\"docblock\"><p>The upper bound of the range (inclusive)</p>\n</div><h2 id=\"implementations\" class=\"section-header\">Implementations<a href=\"#implementations\" class=\"anchor\">Â§</a></h2><div id=\"implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-RangeToInclusive%3CIdx%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#607\">source</a><a href=\"#impl-RangeToInclusive%3CIdx%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;Idx&gt; <a class=\"struct\" href=\"struct.RangeToInclusive.html\" title=\"struct std::ops::RangeToInclusive\">RangeToInclusive</a>&lt;Idx&gt;<div class=\"where\">where\n    Idx: <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.contains\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.35.0\">1.35.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#623-626\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.contains\" class=\"fn\">contains</a>&lt;U&gt;(&amp;self, item: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;U</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a><div class=\"where\">where\n    Idx: <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;U&gt;,\n    U: <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;Idx&gt; + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if <code>item</code> is contained in the range.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert!</span>( (..=<span class=\"number\">5</span>).contains(<span class=\"kw-2\">&amp;</span>-<span class=\"number\">1_000_000_000</span>));\n<span class=\"macro\">assert!</span>( (..=<span class=\"number\">5</span>).contains(<span class=\"kw-2\">&amp;</span><span class=\"number\">5</span>));\n<span class=\"macro\">assert!</span>(!(..=<span class=\"number\">5</span>).contains(<span class=\"kw-2\">&amp;</span><span class=\"number\">6</span>));\n\n<span class=\"macro\">assert!</span>( (..=<span class=\"number\">1.0</span>).contains(<span class=\"kw-2\">&amp;</span><span class=\"number\">1.0</span>));\n<span class=\"macro\">assert!</span>(!(..=<span class=\"number\">1.0</span>).contains(<span class=\"kw-2\">&amp;</span>f32::NAN));\n<span class=\"macro\">assert!</span>(!(..=f32::NAN).contains(<span class=\"kw-2\">&amp;</span><span class=\"number\">0.5</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert!(+(..=5).contains(%26-1_000_000_000));%0A++++assert!(+(..=5).contains(%265));%0A++++assert!(!(..=5).contains(%266));%0A++++%0A++++assert!(+(..=1.0).contains(%261.0));%0A++++assert!(!(..=1.0).contains(%26f32::NAN));%0A++++assert!(!(..=f32::NAN).contains(%260.5));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details></div><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">Â§</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Clone-for-RangeToInclusive%3CIdx%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.26.0\">1.26.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#590\">source</a></span><a href=\"#impl-Clone-for-RangeToInclusive%3CIdx%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;Idx&gt; <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"struct.RangeToInclusive.html\" title=\"struct std::ops::RangeToInclusive\">RangeToInclusive</a>&lt;Idx&gt;<div class=\"where\">where\n    Idx: <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#590\">source</a><a href=\"#method.clone\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"struct.RangeToInclusive.html\" title=\"struct std::ops::RangeToInclusive\">RangeToInclusive</a>&lt;Idx&gt;</h4></section></summary><div class=\"docblock\">Returns a copy of the value. <a href=\"../clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class=\"docblock\">Performs copy-assignment from <code>source</code>. <a href=\"../clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-RangeToInclusive%3CIdx%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.26.0\">1.26.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#599\">source</a></span><a href=\"#impl-Debug-for-RangeToInclusive%3CIdx%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;Idx&gt; <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"struct.RangeToInclusive.html\" title=\"struct std::ops::RangeToInclusive\">RangeToInclusive</a>&lt;Idx&gt;<div class=\"where\">where\n    Idx: <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#600\">source</a><a href=\"#method.fmt\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, fmt: &amp;mut <a class=\"struct\" href=\"../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"../fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Hash-for-RangeToInclusive%3CIdx%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.26.0\">1.26.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#590\">source</a></span><a href=\"#impl-Hash-for-RangeToInclusive%3CIdx%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;Idx&gt; <a class=\"trait\" href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"struct.RangeToInclusive.html\" title=\"struct std::ops::RangeToInclusive\">RangeToInclusive</a>&lt;Idx&gt;<div class=\"where\">where\n    Idx: <a class=\"trait\" href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#590\">source</a><a href=\"#method.hash\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;__H&gt;(&amp;self, state: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut __H</a>)<div class=\"where\">where\n    __H: <a class=\"trait\" href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class=\"docblock\">Feeds this value into the given <a href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"../hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#238-240\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Feeds a slice of this type into the given <a href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"../hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq-for-RangeToInclusive%3CIdx%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.26.0\">1.26.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#590\">source</a></span><a href=\"#impl-PartialEq-for-RangeToInclusive%3CIdx%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;Idx&gt; <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"struct.RangeToInclusive.html\" title=\"struct std::ops::RangeToInclusive\">RangeToInclusive</a>&lt;Idx&gt;<div class=\"where\">where\n    Idx: <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#590\">source</a><a href=\"#method.eq\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.RangeToInclusive.html\" title=\"struct std::ops::RangeToInclusive\">RangeToInclusive</a>&lt;Idx&gt;) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-RangeBounds%3CT%3E-for-RangeToInclusive%3C%26T%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#973\">source</a></span><a href=\"#impl-RangeBounds%3CT%3E-for-RangeToInclusive%3C%26T%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.RangeBounds.html\" title=\"trait std::ops::RangeBounds\">RangeBounds</a>&lt;T&gt; for <a class=\"struct\" href=\"struct.RangeToInclusive.html\" title=\"struct std::ops::RangeToInclusive\">RangeToInclusive</a>&lt;<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.start_bound\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#974\">source</a><a href=\"#method.start_bound\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"trait.RangeBounds.html#tymethod.start_bound\" class=\"fn\">start_bound</a>(&amp;self) -&gt; <a class=\"enum\" href=\"enum.Bound.html\" title=\"enum std::ops::Bound\">Bound</a>&lt;<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>&gt;</h4></section></summary><div class=\"docblock\">Start index bound. <a href=\"trait.RangeBounds.html#tymethod.start_bound\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.end_bound\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#977\">source</a><a href=\"#method.end_bound\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"trait.RangeBounds.html#tymethod.end_bound\" class=\"fn\">end_bound</a>(&amp;self) -&gt; <a class=\"enum\" href=\"enum.Bound.html\" title=\"enum std::ops::Bound\">Bound</a>&lt;<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>&gt;</h4></section></summary><div class=\"docblock\">End index bound. <a href=\"trait.RangeBounds.html#tymethod.end_bound\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.contains-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.35.0\">1.35.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#817-820\">source</a></span><a href=\"#method.contains-1\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"trait.RangeBounds.html#method.contains\" class=\"fn\">contains</a>&lt;U&gt;(&amp;self, item: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;U</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;U&gt;,\n    U: <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;T&gt; + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Returns <code>true</code> if <code>item</code> is contained in the range. <a href=\"trait.RangeBounds.html#method.contains\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-RangeBounds%3CT%3E-for-RangeToInclusive%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#893\">source</a></span><a href=\"#impl-RangeBounds%3CT%3E-for-RangeToInclusive%3CT%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.RangeBounds.html\" title=\"trait std::ops::RangeBounds\">RangeBounds</a>&lt;T&gt; for <a class=\"struct\" href=\"struct.RangeToInclusive.html\" title=\"struct std::ops::RangeToInclusive\">RangeToInclusive</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.start_bound-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#894\">source</a><a href=\"#method.start_bound-1\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"trait.RangeBounds.html#tymethod.start_bound\" class=\"fn\">start_bound</a>(&amp;self) -&gt; <a class=\"enum\" href=\"enum.Bound.html\" title=\"enum std::ops::Bound\">Bound</a>&lt;<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>&gt;</h4></section></summary><div class=\"docblock\">Start index bound. <a href=\"trait.RangeBounds.html#tymethod.start_bound\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.end_bound-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#897\">source</a><a href=\"#method.end_bound-1\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"trait.RangeBounds.html#tymethod.end_bound\" class=\"fn\">end_bound</a>(&amp;self) -&gt; <a class=\"enum\" href=\"enum.Bound.html\" title=\"enum std::ops::Bound\">Bound</a>&lt;<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>&gt;</h4></section></summary><div class=\"docblock\">End index bound. <a href=\"trait.RangeBounds.html#tymethod.end_bound\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.contains-2\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.35.0\">1.35.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#817-820\">source</a></span><a href=\"#method.contains-2\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"trait.RangeBounds.html#method.contains\" class=\"fn\">contains</a>&lt;U&gt;(&amp;self, item: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;U</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;U&gt;,\n    U: <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;T&gt; + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Returns <code>true</code> if <code>item</code> is contained in the range. <a href=\"trait.RangeBounds.html#method.contains\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SliceIndex%3C%5BT%5D%3E-for-RangeToInclusive%3Cusize%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.26.0, const unstable\">1.26.0 (const: unstable)</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/index.rs.html#595\">source</a></span><a href=\"#impl-SliceIndex%3C%5BT%5D%3E-for-RangeToInclusive%3Cusize%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"struct.RangeToInclusive.html\" title=\"struct std::ops::RangeToInclusive\">RangeToInclusive</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h3></section></summary><div class=\"docblock\"><p>The methods <code>index</code> and <code>index_mut</code> panic if the end of the range is out of bounds.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"../slice/trait.SliceIndex.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\">The output type returned by methods.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/index.rs.html#599\">source</a><a href=\"#method.get-1\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../slice/trait.SliceIndex.html#tymethod.get\" class=\"fn\">get</a>(self, slice: &amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class=\"docblock\">Returns a shared reference to the output at this location, if in\nbounds.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_mut-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/index.rs.html#604\">source</a><a href=\"#method.get_mut-1\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../slice/trait.SliceIndex.html#tymethod.get_mut\" class=\"fn\">get_mut</a>(self, slice: &amp;mut <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;mut <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class=\"docblock\">Returns a mutable reference to the output at this location, if in\nbounds.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_unchecked-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/index.rs.html#609\">source</a><a href=\"#method.get_unchecked-1\" class=\"anchor\">Â§</a><h4 class=\"code-header\">unsafe fn <a href=\"../slice/trait.SliceIndex.html#tymethod.get_unchecked\" class=\"fn\">get_unchecked</a>(self, slice: <a class=\"primitive\" href=\"../primitive.pointer.html\">*const </a><a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>) -&gt; <a class=\"primitive\" href=\"../primitive.pointer.html\">*const </a><a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class=\"docblock\">Returns a pointer to the output at this location, without\nperforming any bounds checking.\nCalling this method with an out-of-bounds index or a dangling <code>slice</code> pointer\nis <em><a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">undefined behavior</a></em> even if the resulting pointer is not used.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_unchecked_mut-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/index.rs.html#615\">source</a><a href=\"#method.get_unchecked_mut-1\" class=\"anchor\">Â§</a><h4 class=\"code-header\">unsafe fn <a href=\"../slice/trait.SliceIndex.html#tymethod.get_unchecked_mut\" class=\"fn\">get_unchecked_mut</a>(self, slice: <a class=\"primitive\" href=\"../primitive.pointer.html\">*mut </a><a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>) -&gt; <a class=\"primitive\" href=\"../primitive.pointer.html\">*mut </a><a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class=\"docblock\">Returns a mutable pointer to the output at this location, without\nperforming any bounds checking.\nCalling this method with an out-of-bounds index or a dangling <code>slice</code> pointer\nis <em><a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">undefined behavior</a></em> even if the resulting pointer is not used.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.index-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/index.rs.html#621\">source</a><a href=\"#method.index-1\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../slice/trait.SliceIndex.html#tymethod.index\" class=\"fn\">index</a>(self, slice: &amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>) -&gt; &amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class=\"docblock\">Returns a shared reference to the output at this location, panicking\nif out of bounds.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.index_mut-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/index.rs.html#626\">source</a><a href=\"#method.index_mut-1\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../slice/trait.SliceIndex.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(self, slice: &amp;mut <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>) -&gt; &amp;mut <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class=\"docblock\">Returns a mutable reference to the output at this location, panicking\nif out of bounds.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SliceIndex%3Cstr%3E-for-RangeToInclusive%3Cusize%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.26.0, const unstable\">1.26.0 (const: unstable)</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#526\">source</a></span><a href=\"#impl-SliceIndex%3Cstr%3E-for-RangeToInclusive%3Cusize%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"struct.RangeToInclusive.html\" title=\"struct std::ops::RangeToInclusive\">RangeToInclusive</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h3></section></summary><div class=\"docblock\"><p>Implements substring slicing with syntax <code>&amp;self[..= end]</code> or <code>&amp;mut self[..= end]</code>.</p>\n<p>Returns a slice of the given string from the byte range [0, <code>end</code>].\nEquivalent to <code>&amp;self [0 .. end + 1]</code>, except if <code>end</code> has the maximum\nvalue for <code>usize</code>.</p>\n<p>This operation is <em>O</em>(1).</p>\n<h4 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">Â§</a>Panics</h4>\n<p>Panics if <code>end</code> does not point to the ending byte offset of a character\n(<code>end + 1</code> is either a starting byte offset as defined by\n<code>is_char_boundary</code>, or equal to <code>len</code>), or if <code>end &gt;= len</code>.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"../slice/trait.SliceIndex.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"../primitive.str.html\">str</a></h4></section></summary><div class=\"docblock\">The output type returned by methods.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#529\">source</a><a href=\"#method.get\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../slice/trait.SliceIndex.html#tymethod.get\" class=\"fn\">get</a>(\n    self,\n    slice: &amp;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>,\n) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;&lt;<a class=\"struct\" href=\"struct.RangeToInclusive.html\" title=\"struct std::ops::RangeToInclusive\">RangeToInclusive</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; as <a class=\"trait\" href=\"../slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type std::slice::SliceIndex::Output\">Output</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class=\"docblock\">Returns a shared reference to the output at this location, if in\nbounds.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#533\">source</a><a href=\"#method.get_mut\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../slice/trait.SliceIndex.html#tymethod.get_mut\" class=\"fn\">get_mut</a>(\n    self,\n    slice: &amp;mut <a class=\"primitive\" href=\"../primitive.str.html\">str</a>,\n) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;mut &lt;<a class=\"struct\" href=\"struct.RangeToInclusive.html\" title=\"struct std::ops::RangeToInclusive\">RangeToInclusive</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; as <a class=\"trait\" href=\"../slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type std::slice::SliceIndex::Output\">Output</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class=\"docblock\">Returns a mutable reference to the output at this location, if in\nbounds.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_unchecked\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#537\">source</a><a href=\"#method.get_unchecked\" class=\"anchor\">Â§</a><h4 class=\"code-header\">unsafe fn <a href=\"../slice/trait.SliceIndex.html#tymethod.get_unchecked\" class=\"fn\">get_unchecked</a>(\n    self,\n    slice: <a class=\"primitive\" href=\"../primitive.pointer.html\">*const </a><a class=\"primitive\" href=\"../primitive.str.html\">str</a>,\n) -&gt; <a class=\"primitive\" href=\"../primitive.pointer.html\">*const </a>&lt;<a class=\"struct\" href=\"struct.RangeToInclusive.html\" title=\"struct std::ops::RangeToInclusive\">RangeToInclusive</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; as <a class=\"trait\" href=\"../slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type std::slice::SliceIndex::Output\">Output</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class=\"docblock\">Returns a pointer to the output at this location, without\nperforming any bounds checking.\nCalling this method with an out-of-bounds index or a dangling <code>slice</code> pointer\nis <em><a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">undefined behavior</a></em> even if the resulting pointer is not used.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_unchecked_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#542\">source</a><a href=\"#method.get_unchecked_mut\" class=\"anchor\">Â§</a><h4 class=\"code-header\">unsafe fn <a href=\"../slice/trait.SliceIndex.html#tymethod.get_unchecked_mut\" class=\"fn\">get_unchecked_mut</a>(\n    self,\n    slice: <a class=\"primitive\" href=\"../primitive.pointer.html\">*mut </a><a class=\"primitive\" href=\"../primitive.str.html\">str</a>,\n) -&gt; <a class=\"primitive\" href=\"../primitive.pointer.html\">*mut </a>&lt;<a class=\"struct\" href=\"struct.RangeToInclusive.html\" title=\"struct std::ops::RangeToInclusive\">RangeToInclusive</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; as <a class=\"trait\" href=\"../slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type std::slice::SliceIndex::Output\">Output</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class=\"docblock\">Returns a mutable pointer to the output at this location, without\nperforming any bounds checking.\nCalling this method with an out-of-bounds index or a dangling <code>slice</code> pointer\nis <em><a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">undefined behavior</a></em> even if the resulting pointer is not used.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.index\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#547\">source</a><a href=\"#method.index\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../slice/trait.SliceIndex.html#tymethod.index\" class=\"fn\">index</a>(\n    self,\n    slice: &amp;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>,\n) -&gt; &amp;&lt;<a class=\"struct\" href=\"struct.RangeToInclusive.html\" title=\"struct std::ops::RangeToInclusive\">RangeToInclusive</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; as <a class=\"trait\" href=\"../slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type std::slice::SliceIndex::Output\">Output</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class=\"docblock\">Returns a shared reference to the output at this location, panicking\nif out of bounds.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#551\">source</a><a href=\"#method.index_mut\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../slice/trait.SliceIndex.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(\n    self,\n    slice: &amp;mut <a class=\"primitive\" href=\"../primitive.str.html\">str</a>,\n) -&gt; &amp;mut &lt;<a class=\"struct\" href=\"struct.RangeToInclusive.html\" title=\"struct std::ops::RangeToInclusive\">RangeToInclusive</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; as <a class=\"trait\" href=\"../slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type std::slice::SliceIndex::Output\">Output</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class=\"docblock\">Returns a mutable reference to the output at this location, panicking\nif out of bounds.</div></details></div></details><section id=\"impl-Copy-for-RangeToInclusive%3CIdx%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.26.0\">1.26.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#590\">source</a></span><a href=\"#impl-Copy-for-RangeToInclusive%3CIdx%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;Idx&gt; <a class=\"trait\" href=\"../marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a> for <a class=\"struct\" href=\"struct.RangeToInclusive.html\" title=\"struct std::ops::RangeToInclusive\">RangeToInclusive</a>&lt;Idx&gt;<div class=\"where\">where\n    Idx: <a class=\"trait\" href=\"../marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a>,</div></h3></section><section id=\"impl-Eq-for-RangeToInclusive%3CIdx%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.26.0\">1.26.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#590\">source</a></span><a href=\"#impl-Eq-for-RangeToInclusive%3CIdx%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;Idx&gt; <a class=\"trait\" href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"struct.RangeToInclusive.html\" title=\"struct std::ops::RangeToInclusive\">RangeToInclusive</a>&lt;Idx&gt;<div class=\"where\">where\n    Idx: <a class=\"trait\" href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a>,</div></h3></section><section id=\"impl-OneSidedRange%3CT%3E-for-RangeToInclusive%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#998\">source</a><a href=\"#impl-OneSidedRange%3CT%3E-for-RangeToInclusive%3CT%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.OneSidedRange.html\" title=\"trait std::ops::OneSidedRange\">OneSidedRange</a>&lt;T&gt; for <a class=\"struct\" href=\"struct.RangeToInclusive.html\" title=\"struct std::ops::RangeToInclusive\">RangeToInclusive</a>&lt;T&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.RangeToInclusive.html\" title=\"struct std::ops::RangeToInclusive\">RangeToInclusive</a>&lt;T&gt;: <a class=\"trait\" href=\"trait.RangeBounds.html\" title=\"trait std::ops::RangeBounds\">RangeBounds</a>&lt;T&gt;,</div></h3></section><section id=\"impl-StructuralPartialEq-for-RangeToInclusive%3CIdx%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.26.0\">1.26.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#590\">source</a></span><a href=\"#impl-StructuralPartialEq-for-RangeToInclusive%3CIdx%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;Idx&gt; <a class=\"trait\" href=\"../marker/trait.StructuralPartialEq.html\" title=\"trait std::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"struct\" href=\"struct.RangeToInclusive.html\" title=\"struct std::ops::RangeToInclusive\">RangeToInclusive</a>&lt;Idx&gt;</h3></section></div><h2 id=\"synthetic-implementations\" class=\"section-header\">Auto Trait Implementations<a href=\"#synthetic-implementations\" class=\"anchor\">Â§</a></h2><div id=\"synthetic-implementations-list\"><section id=\"impl-Freeze-for-RangeToInclusive%3CIdx%3E\" class=\"impl\"><a href=\"#impl-Freeze-for-RangeToInclusive%3CIdx%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;Idx&gt; <a class=\"trait\" href=\"../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"struct\" href=\"struct.RangeToInclusive.html\" title=\"struct std::ops::RangeToInclusive\">RangeToInclusive</a>&lt;Idx&gt;<div class=\"where\">where\n    Idx: <a class=\"trait\" href=\"../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a>,</div></h3></section><section id=\"impl-RefUnwindSafe-for-RangeToInclusive%3CIdx%3E\" class=\"impl\"><a href=\"#impl-RefUnwindSafe-for-RangeToInclusive%3CIdx%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;Idx&gt; <a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"struct\" href=\"struct.RangeToInclusive.html\" title=\"struct std::ops::RangeToInclusive\">RangeToInclusive</a>&lt;Idx&gt;<div class=\"where\">where\n    Idx: <a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a>,</div></h3></section><section id=\"impl-Send-for-RangeToInclusive%3CIdx%3E\" class=\"impl\"><a href=\"#impl-Send-for-RangeToInclusive%3CIdx%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;Idx&gt; <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"struct\" href=\"struct.RangeToInclusive.html\" title=\"struct std::ops::RangeToInclusive\">RangeToInclusive</a>&lt;Idx&gt;<div class=\"where\">where\n    Idx: <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a>,</div></h3></section><section id=\"impl-Sync-for-RangeToInclusive%3CIdx%3E\" class=\"impl\"><a href=\"#impl-Sync-for-RangeToInclusive%3CIdx%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;Idx&gt; <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"struct.RangeToInclusive.html\" title=\"struct std::ops::RangeToInclusive\">RangeToInclusive</a>&lt;Idx&gt;<div class=\"where\">where\n    Idx: <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a>,</div></h3></section><section id=\"impl-Unpin-for-RangeToInclusive%3CIdx%3E\" class=\"impl\"><a href=\"#impl-Unpin-for-RangeToInclusive%3CIdx%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;Idx&gt; <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"struct\" href=\"struct.RangeToInclusive.html\" title=\"struct std::ops::RangeToInclusive\">RangeToInclusive</a>&lt;Idx&gt;<div class=\"where\">where\n    Idx: <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a>,</div></h3></section><section id=\"impl-UnwindSafe-for-RangeToInclusive%3CIdx%3E\" class=\"impl\"><a href=\"#impl-UnwindSafe-for-RangeToInclusive%3CIdx%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;Idx&gt; <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"struct.RangeToInclusive.html\" title=\"struct std::ops::RangeToInclusive\">RangeToInclusive</a>&lt;Idx&gt;<div class=\"where\">where\n    Idx: <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a>,</div></h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">Â§</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Any-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a><a href=\"#impl-Any-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#141\">source</a><a href=\"#method.type_id\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../any/trait.Any.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\">Gets the <code>TypeId</code> of <code>self</code>. <a href=\"../any/trait.Any.html#tymethod.type_id\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Borrow%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208\">source</a><a href=\"#impl-Borrow%3CT%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#210\">source</a><a href=\"#method.borrow\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216\">source</a><a href=\"#impl-BorrowMut%3CT%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#217\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765\">source</a><a href=\"#impl-From%3CT%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768\">source</a><a href=\"#method.from\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the argument unchanged.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Into%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750\">source</a><a href=\"#impl-Into%3CU%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758\">source</a><a href=\"#method.into\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; U</h4></section></summary><div class=\"docblock\"><p>Calls <code>U::from(self)</code>.</p>\n<p>That is, this conversion is whatever the implementation of\n<code><a href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for U</code> chooses to do.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-ToOwned-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85\">source</a><a href=\"#impl-ToOwned-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.ToOwned.html\" title=\"trait std::borrow::ToOwned\">ToOwned</a> for T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Owned\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Owned\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"../borrow/trait.ToOwned.html#associatedtype.Owned\" class=\"associatedtype\">Owned</a> = T</h4></section></summary><div class=\"docblock\">The resulting type after obtaining ownership.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_owned\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88\">source</a><a href=\"#method.to_owned\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.ToOwned.html#tymethod.to_owned\" class=\"fn\">to_owned</a>(&amp;self) -&gt; T</h4></section></summary><div class=\"docblock\">Creates owned data from borrowed data, usually by cloning. <a href=\"../borrow/trait.ToOwned.html#tymethod.to_owned\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92\">source</a><a href=\"#method.clone_into\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.ToOwned.html#method.clone_into\" class=\"fn\">clone_into</a>(&amp;self, target: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>)</h4></section></summary><div class=\"docblock\">Uses borrowed data to replace owned data, usually by cloning. <a href=\"../borrow/trait.ToOwned.html#method.clone_into\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryFrom%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807\">source</a><a href=\"#impl-TryFrom%3CU%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812\">source</a><a href=\"#method.try_from\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: U) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, &lt;T as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryInto%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792\">source</a><a href=\"#impl-TryInto%3CU%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryInto.html\" title=\"trait std::convert::TryInto\">TryInto</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryInto.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797\">source</a><a href=\"#method.try_into\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryInto.html#tymethod.try_into\" class=\"fn\">try_into</a>(self) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;U, &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details></div></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:12:43.394Z"
}