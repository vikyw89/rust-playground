{
	"title": "std::intrinsics::mir - Rust",
	"url": "https://doc.rust-lang.org/stable/std/intrinsics/mir/index.html",
	"markdown": "# std::intrinsics::mir - Rust\n\nðŸ”¬This is a nightly-only experimental API. (`custom_mir`)\n\nExpand description\n\nRustc internal tooling for hand-writing MIR.\n\nIf for some reasons you are not writing rustc tests and have found yourself considering using this feature, turn back. This is _exceptionally_ unstable. There is no attempt at all to make anything work besides those things which the rustc test suite happened to need. If you make a typo youâ€™ll probably ICE. Really, this is not the solution to your problems. Consider instead supporting the [stable MIR project group](https://github.com/rust-lang/project-stable-mir).\n\nThe documentation for this module describes how to use this feature. If you are interested in hacking on the implementation, most of that documentation lives at `rustc_mir_build/src/build/custom/mod.rs`.\n\nTypical usage will look like this:\n\n```\n#![feature(core_intrinsics, custom_mir)]\n#![allow(internal_features)]\n\nuse core::intrinsics::mir::*;\n\n#[custom_mir(dialect = \"built\")]\npub fn simple(x: i32) -> i32 {\n    mir! {\n        let temp2: i32;\n\n        {\n            let temp1 = x;\n            Goto(my_second_block)\n        }\n\n        my_second_block = {\n            temp2 = Move(temp1);\n            RET = temp2;\n            Return()\n        }\n    }\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(core_intrinsics,+custom_mir)%5D%0A%23!%5Ballow(internal_features)%5D%0A%0Afn+main()+%7B%0A++++use+core::intrinsics::mir::*;%0A++++%0A++++%23%5Bcustom_mir(dialect+=+%22built%22)%5D%0A++++pub+fn+simple(x:+i32)+-%3E+i32+%7B%0A++++++++mir!+%7B%0A++++++++++++let+temp2:+i32;%0A++++%0A++++++++++++%7B%0A++++++++++++++++let+temp1+=+x;%0A++++++++++++++++Goto(my_second_block)%0A++++++++++++%7D%0A++++%0A++++++++++++my_second_block+=+%7B%0A++++++++++++++++temp2+=+Move(temp1);%0A++++++++++++++++RET+=+temp2;%0A++++++++++++++++Return()%0A++++++++++++%7D%0A++++++++%7D%0A++++%7D%0A%7D&version=nightly&edition=2021)\n\nThe `custom_mir` attribute tells the compiler to treat the function as being custom MIR. This attribute only works on functions - there is no way to insert custom MIR into the middle of another function. The `dialect` and `phase` parameters indicate which [version of MIR](https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/mir/enum.MirPhase.html) you are inserting here. Generally youâ€™ll want to use `#![custom_mir(dialect = \"built\")]` if you want your MIR to be modified by the full MIR pipeline, or `#![custom_mir(dialect = \"runtime\", phase = \"optimized\")]` if you donâ€™t.\n\nThe input to the [`mir!`](macro.mir.html \"macro std::intrinsics::mir::mir\") macro is:\n\n-   An optional return type annotation in the form of `type RET = ...;`. This may be required if the compiler cannot infer the type of RET.\n-   A possibly empty list of local declarations. Locals can also be declared inline on assignments via `let`. Type inference generally works. Shadowing does not.\n-   A list of basic blocks. The first of these is the start block and is where execution begins. All blocks other than the start block need to be given a name, so that they can be referred to later.\n    -   Each block is a list of semicolon terminated statements, followed by a terminator. The syntax for the various statements and terminators is designed to be as similar as possible to the syntax for analogous concepts in native Rust. See below for a list.\n\n## [Â§](#examples)Examples\n\n```\n#![feature(core_intrinsics, custom_mir)]\n#![allow(internal_features)]\n#![allow(unused_assignments)]\n\nuse core::intrinsics::mir::*;\n\n#[custom_mir(dialect = \"built\")]\npub fn choose_load(a: &i32, b: &i32, c: bool) -> i32 {\n    mir! {\n        {\n            match c {\n                true => t,\n                _ => f,\n            }\n        }\n\n        t = {\n            let temp = a;\n            Goto(load_and_exit)\n        }\n\n        f = {\n            temp = b;\n            Goto(load_and_exit)\n        }\n\n        load_and_exit = {\n            RET = *temp;\n            Return()\n        }\n    }\n}\n\n#[custom_mir(dialect = \"built\")]\nfn unwrap_unchecked<T>(opt: Option<T>) -> T {\n    mir! {\n        {\n            RET = Move(Field(Variant(opt, 1), 0));\n            Return()\n        }\n    }\n}\n\n#[custom_mir(dialect = \"runtime\", phase = \"optimized\")]\nfn push_and_pop<T>(v: &mut Vec<T>, value: T) {\n    mir! {\n        let _unused;\n        let popped;\n\n        {\n            Call(_unused = Vec::push(v, value), ReturnTo(pop), UnwindContinue())\n        }\n\n        pop = {\n            Call(popped = Vec::pop(v), ReturnTo(drop), UnwindContinue())\n        }\n\n        drop = {\n            Drop(popped, ReturnTo(ret), UnwindContinue())\n        }\n\n        ret = {\n            Return()\n        }\n    }\n}\n\n#[custom_mir(dialect = \"runtime\", phase = \"optimized\")]\nfn annotated_return_type() -> (i32, bool) {\n    mir! {\n        type RET = (i32, bool);\n        {\n            RET.0 = 1;\n            RET.1 = true;\n            Return()\n        }\n    }\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(core_intrinsics,+custom_mir)%5D%0A%23!%5Ballow(internal_features)%5D%0A%23!%5Ballow(unused_assignments)%5D%0A%0Afn+main()+%7B%0A++++use+core::intrinsics::mir::*;%0A++++%0A++++%23%5Bcustom_mir(dialect+=+%22built%22)%5D%0A++++pub+fn+choose_load(a:+%26i32,+b:+%26i32,+c:+bool)+-%3E+i32+%7B%0A++++++++mir!+%7B%0A++++++++++++%7B%0A++++++++++++++++match+c+%7B%0A++++++++++++++++++++true+=%3E+t,%0A++++++++++++++++++++_+=%3E+f,%0A++++++++++++++++%7D%0A++++++++++++%7D%0A++++%0A++++++++++++t+=+%7B%0A++++++++++++++++let+temp+=+a;%0A++++++++++++++++Goto(load_and_exit)%0A++++++++++++%7D%0A++++%0A++++++++++++f+=+%7B%0A++++++++++++++++temp+=+b;%0A++++++++++++++++Goto(load_and_exit)%0A++++++++++++%7D%0A++++%0A++++++++++++load_and_exit+=+%7B%0A++++++++++++++++RET+=+*temp;%0A++++++++++++++++Return()%0A++++++++++++%7D%0A++++++++%7D%0A++++%7D%0A++++%0A++++%23%5Bcustom_mir(dialect+=+%22built%22)%5D%0A++++fn+unwrap_unchecked%3CT%3E(opt:+Option%3CT%3E)+-%3E+T+%7B%0A++++++++mir!+%7B%0A++++++++++++%7B%0A++++++++++++++++RET+=+Move(Field(Variant(opt,+1),+0));%0A++++++++++++++++Return()%0A++++++++++++%7D%0A++++++++%7D%0A++++%7D%0A++++%0A++++%23%5Bcustom_mir(dialect+=+%22runtime%22,+phase+=+%22optimized%22)%5D%0A++++fn+push_and_pop%3CT%3E(v:+%26mut+Vec%3CT%3E,+value:+T)+%7B%0A++++++++mir!+%7B%0A++++++++++++let+_unused;%0A++++++++++++let+popped;%0A++++%0A++++++++++++%7B%0A++++++++++++++++Call(_unused+=+Vec::push(v,+value),+ReturnTo(pop),+UnwindContinue())%0A++++++++++++%7D%0A++++%0A++++++++++++pop+=+%7B%0A++++++++++++++++Call(popped+=+Vec::pop(v),+ReturnTo(drop),+UnwindContinue())%0A++++++++++++%7D%0A++++%0A++++++++++++drop+=+%7B%0A++++++++++++++++Drop(popped,+ReturnTo(ret),+UnwindContinue())%0A++++++++++++%7D%0A++++%0A++++++++++++ret+=+%7B%0A++++++++++++++++Return()%0A++++++++++++%7D%0A++++++++%7D%0A++++%7D%0A++++%0A++++%23%5Bcustom_mir(dialect+=+%22runtime%22,+phase+=+%22optimized%22)%5D%0A++++fn+annotated_return_type()+-%3E+(i32,+bool)+%7B%0A++++++++mir!+%7B%0A++++++++++++type+RET+=+(i32,+bool);%0A++++++++++++%7B%0A++++++++++++++++RET.0+=+1;%0A++++++++++++++++RET.1+=+true;%0A++++++++++++++++Return()%0A++++++++++++%7D%0A++++++++%7D%0A++++%7D%0A%7D&version=nightly&edition=2021)\n\nWe can also set off compilation failures that happen in sufficiently late stages of the compiler:\n\n[â“˜](# \"This example deliberately fails to compile\")\n\n```\n#![feature(core_intrinsics, custom_mir)]\n\nextern crate core;\nuse core::intrinsics::mir::*;\n\n#[custom_mir(dialect = \"built\")]\nfn borrow_error(should_init: bool) -> i32 {\n    mir! {\n        let temp: i32;\n\n        {\n            match should_init {\n                true => init,\n                _ => use_temp,\n            }\n        }\n\n        init = {\n            temp = 0;\n            Goto(use_temp)\n        }\n\n        use_temp = {\n            RET = temp;\n            Return()\n        }\n    }\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(core_intrinsics,+custom_mir)%5D%0A%0Aextern+crate+core;%0Afn+main()+%7B%0A++++use+core::intrinsics::mir::*;%0A++++%0A++++%23%5Bcustom_mir(dialect+=+%22built%22)%5D%0A++++fn+borrow_error(should_init:+bool)+-%3E+i32+%7B%0A++++++++mir!+%7B%0A++++++++++++let+temp:+i32;%0A++++%0A++++++++++++%7B%0A++++++++++++++++match+should_init+%7B%0A++++++++++++++++++++true+=%3E+init,%0A++++++++++++++++++++_+=%3E+use_temp,%0A++++++++++++++++%7D%0A++++++++++++%7D%0A++++%0A++++++++++++init+=+%7B%0A++++++++++++++++temp+=+0;%0A++++++++++++++++Goto(use_temp)%0A++++++++++++%7D%0A++++%0A++++++++++++use_temp+=+%7B%0A++++++++++++++++RET+=+temp;%0A++++++++++++++++Return()%0A++++++++++++%7D%0A++++++++%7D%0A++++%7D%0A%7D&version=nightly&edition=2021)\n\n```text\nerror[E0381]: used binding is possibly-uninitialized\n  --> test.rs:24:13\n   |\n8  | /     mir! {\n9  | |         let temp: i32;\n10 | |\n11 | |         {\n...  |\n19 | |             temp = 0;\n   | |             -------- binding initialized here in some conditions\n...  |\n24 | |             RET = temp;\n   | |             ^^^^^^^^^^ value used here but it is possibly-uninitialized\n25 | |             Return()\n26 | |         }\n27 | |     }\n   | |_____- binding declared here but left uninitialized\n\nerror: aborting due to 1 previous error\n\nFor more information about this error, try `rustc --explain E0381`.\n\n```\n\n## [Â§](#syntax)Syntax\n\nThe lists below are an exhaustive description of how various MIR constructs can be created. Anything missing from the list should be assumed to not be supported, PRs welcome.\n\n##### [Â§](#locals)Locals\n\n-   The `_0` return local can always be accessed via `RET`.\n-   Arguments can be accessed via their regular name.\n-   All other locals need to be declared with `let` somewhere and then can be accessed by name.\n\n##### [Â§](#places)Places\n\n-   Locals implicit convert to places.\n-   Field accesses, derefs, and indexing work normally.\n-   Fields in variants can be accessed via the [`Variant`](fn.Variant.html \"fn std::intrinsics::mir::Variant\") and [`Field`](fn.Field.html \"fn std::intrinsics::mir::Field\") associated functions, see their documentation for details.\n\n##### [Â§](#operands)Operands\n\n-   Places implicitly convert to `Copy` operands.\n-   `Move` operands can be created via [`Move`](fn.Move.html \"fn std::intrinsics::mir::Move\").\n-   Const blocks, literals, named constants, and const params all just work.\n-   [`Static`](fn.Static.html \"fn std::intrinsics::mir::Static\") and [`StaticMut`](fn.StaticMut.html \"fn std::intrinsics::mir::StaticMut\") can be used to create `&T` and `*mut T`s to statics. These are constants in MIR and the only way to access statics.\n\n##### [Â§](#statements)Statements\n\n-   Assign statements work via normal Rust assignment.\n-   [`Retag`](fn.Retag.html \"fn std::intrinsics::mir::Retag\"), [`StorageLive`](fn.StorageLive.html \"fn std::intrinsics::mir::StorageLive\"), [`StorageDead`](fn.StorageDead.html \"fn std::intrinsics::mir::StorageDead\"), [`Deinit`](fn.Deinit.html \"fn std::intrinsics::mir::Deinit\") statements have an associated function.\n\n##### [Â§](#rvalues)Rvalues\n\n-   Operands implicitly convert to `Use` rvalues.\n-   `&`, `&mut`, `addr_of!`, and `addr_of_mut!` all work to create their associated rvalue.\n-   [`Discriminant`](fn.Discriminant.html \"fn std::intrinsics::mir::Discriminant\"), [`Len`](fn.Len.html \"fn std::intrinsics::mir::Len\"), and [`CopyForDeref`](fn.CopyForDeref.html \"fn std::intrinsics::mir::CopyForDeref\") have associated functions.\n-   Unary and binary operations use their normal Rust syntax - `a * b`, `!c`, etc.\n-   The binary operation `Offset` can be created via [`Offset`](fn.Offset.html \"fn std::intrinsics::mir::Offset\").\n-   Checked binary operations are represented by wrapping the associated binop in [`Checked`](fn.Checked.html \"fn std::intrinsics::mir::Checked\").\n-   Array repetition syntax (`[foo; 10]`) creates the associated rvalue.\n\n##### [Â§](#terminators)Terminators\n\n-   [`Goto`](fn.Goto.html \"fn std::intrinsics::mir::Goto\"), [`Return`](fn.Return.html \"fn std::intrinsics::mir::Return\"), [`Unreachable`](fn.Unreachable.html \"fn std::intrinsics::mir::Unreachable\") and [`Drop`](fn.Drop.html \"fn std::intrinsics::mir::Drop\") have associated functions.\n-   `match some_int_operand` becomes a `SwitchInt`. Each arm should be `literal => basic_block`\n    -   The exception is the last arm, which must be `_ => basic_block` and corresponds to the otherwise branch.\n-   [`Call`](fn.Call.html \"fn std::intrinsics::mir::Call\") has an associated function as well, with special syntax: `Call(ret_val = function(arg1, arg2, ...), ReturnTo(next_block), UnwindContinue())`.\n\n-   [mir](macro.mir.html \"macro std::intrinsics::mir::mir\")Experimental\n    \n    Macro for generating custom MIR.\n    \n-   Helper macro that allows you to treat a value expression like a place expression.\n    \n\n-   Type representing basic blocks.\n    \n-   The reason we are terminating the process during unwinding.\n    \n\n-   Call a function.\n    \n-   Emits a `CastKind::Transmute` cast.\n    \n\n-   Gets the discriminant of a place.\n    \n-   Drop the contents of a place.\n    \n-   Access the field with the given index of some place.\n    \n\n-   [Len](fn.Len.html \"fn std::intrinsics::mir::Len\")Experimental\n    \n\n-   An unwind action that continues execution in a given basic blok.\n    \n-   An unwind action that continues unwinding.\n    \n-   A terminator that resumes the unwinding.\n    \n-   An unwind action that terminates the execution.\n    \n-   An unwind action that triggers undefined behaviour.\n    \n-   Adds a variant projection with the given index to the place.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Rustc internal tooling for hand-writing MIR.\"><title>std::intrinsics::mir - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../../\" data-static-root-path=\"../../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"../sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc mod\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">Module mir</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">Module mir</a></h2><div class=\"sidebar-elems\"><section><ul class=\"block\"><li><a href=\"#macros\">Macros</a></li><li><a href=\"#structs\">Structs</a></li><li><a href=\"#enums\">Enums</a></li><li><a href=\"#functions\">Functions</a></li></ul></section><h2><a href=\"../index.html\">In std::intrinsics</a></h2><h3><a href=\"../index.html#modules\">Modules</a></h3><ul class=\"block mod\"><li><a href=\"../mir/index.html\">mir</a></li><li><a href=\"../simd/index.html\">simd</a></li></ul><h3><a href=\"../index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"../trait.AggregateRawPtr.html\">AggregateRawPtr</a></li></ul><h3><a href=\"../index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"../fn.abort.html\">abort</a></li><li><a href=\"../fn.add_with_overflow.html\">add_with_overflow</a></li><li><a href=\"../fn.aggregate_raw_ptr.html\">aggregate_raw_ptr</a></li><li><a href=\"../fn.arith_offset.html\">arith_offset</a></li><li><a href=\"../fn.assert_inhabited.html\">assert_inhabited</a></li><li><a href=\"../fn.assert_mem_uninitialized_valid.html\">assert_mem_uninitialized_valid</a></li><li><a href=\"../fn.assert_zero_valid.html\">assert_zero_valid</a></li><li><a href=\"../fn.assume.html\">assume</a></li><li><a href=\"../fn.atomic_and_acqrel.html\">atomic_and_acqrel</a></li><li><a href=\"../fn.atomic_and_acquire.html\">atomic_and_acquire</a></li><li><a href=\"../fn.atomic_and_relaxed.html\">atomic_and_relaxed</a></li><li><a href=\"../fn.atomic_and_release.html\">atomic_and_release</a></li><li><a href=\"../fn.atomic_and_seqcst.html\">atomic_and_seqcst</a></li><li><a href=\"../fn.atomic_cxchg_acqrel_acquire.html\">atomic_cxchg_acqrel_acquire</a></li><li><a href=\"../fn.atomic_cxchg_acqrel_relaxed.html\">atomic_cxchg_acqrel_relaxed</a></li><li><a href=\"../fn.atomic_cxchg_acqrel_seqcst.html\">atomic_cxchg_acqrel_seqcst</a></li><li><a href=\"../fn.atomic_cxchg_acquire_acquire.html\">atomic_cxchg_acquire_acquire</a></li><li><a href=\"../fn.atomic_cxchg_acquire_relaxed.html\">atomic_cxchg_acquire_relaxed</a></li><li><a href=\"../fn.atomic_cxchg_acquire_seqcst.html\">atomic_cxchg_acquire_seqcst</a></li><li><a href=\"../fn.atomic_cxchg_relaxed_acquire.html\">atomic_cxchg_relaxed_acquire</a></li><li><a href=\"../fn.atomic_cxchg_relaxed_relaxed.html\">atomic_cxchg_relaxed_relaxed</a></li><li><a href=\"../fn.atomic_cxchg_relaxed_seqcst.html\">atomic_cxchg_relaxed_seqcst</a></li><li><a href=\"../fn.atomic_cxchg_release_acquire.html\">atomic_cxchg_release_acquire</a></li><li><a href=\"../fn.atomic_cxchg_release_relaxed.html\">atomic_cxchg_release_relaxed</a></li><li><a href=\"../fn.atomic_cxchg_release_seqcst.html\">atomic_cxchg_release_seqcst</a></li><li><a href=\"../fn.atomic_cxchg_seqcst_acquire.html\">atomic_cxchg_seqcst_acquire</a></li><li><a href=\"../fn.atomic_cxchg_seqcst_relaxed.html\">atomic_cxchg_seqcst_relaxed</a></li><li><a href=\"../fn.atomic_cxchg_seqcst_seqcst.html\">atomic_cxchg_seqcst_seqcst</a></li><li><a href=\"../fn.atomic_cxchgweak_acqrel_acquire.html\">atomic_cxchgweak_acqrel_acquire</a></li><li><a href=\"../fn.atomic_cxchgweak_acqrel_relaxed.html\">atomic_cxchgweak_acqrel_relaxed</a></li><li><a href=\"../fn.atomic_cxchgweak_acqrel_seqcst.html\">atomic_cxchgweak_acqrel_seqcst</a></li><li><a href=\"../fn.atomic_cxchgweak_acquire_acquire.html\">atomic_cxchgweak_acquire_acquire</a></li><li><a href=\"../fn.atomic_cxchgweak_acquire_relaxed.html\">atomic_cxchgweak_acquire_relaxed</a></li><li><a href=\"../fn.atomic_cxchgweak_acquire_seqcst.html\">atomic_cxchgweak_acquire_seqcst</a></li><li><a href=\"../fn.atomic_cxchgweak_relaxed_acquire.html\">atomic_cxchgweak_relaxed_acquire</a></li><li><a href=\"../fn.atomic_cxchgweak_relaxed_relaxed.html\">atomic_cxchgweak_relaxed_relaxed</a></li><li><a href=\"../fn.atomic_cxchgweak_relaxed_seqcst.html\">atomic_cxchgweak_relaxed_seqcst</a></li><li><a href=\"../fn.atomic_cxchgweak_release_acquire.html\">atomic_cxchgweak_release_acquire</a></li><li><a href=\"../fn.atomic_cxchgweak_release_relaxed.html\">atomic_cxchgweak_release_relaxed</a></li><li><a href=\"../fn.atomic_cxchgweak_release_seqcst.html\">atomic_cxchgweak_release_seqcst</a></li><li><a href=\"../fn.atomic_cxchgweak_seqcst_acquire.html\">atomic_cxchgweak_seqcst_acquire</a></li><li><a href=\"../fn.atomic_cxchgweak_seqcst_relaxed.html\">atomic_cxchgweak_seqcst_relaxed</a></li><li><a href=\"../fn.atomic_cxchgweak_seqcst_seqcst.html\">atomic_cxchgweak_seqcst_seqcst</a></li><li><a href=\"../fn.atomic_fence_acqrel.html\">atomic_fence_acqrel</a></li><li><a href=\"../fn.atomic_fence_acquire.html\">atomic_fence_acquire</a></li><li><a href=\"../fn.atomic_fence_release.html\">atomic_fence_release</a></li><li><a href=\"../fn.atomic_fence_seqcst.html\">atomic_fence_seqcst</a></li><li><a href=\"../fn.atomic_load_acquire.html\">atomic_load_acquire</a></li><li><a href=\"../fn.atomic_load_relaxed.html\">atomic_load_relaxed</a></li><li><a href=\"../fn.atomic_load_seqcst.html\">atomic_load_seqcst</a></li><li><a href=\"../fn.atomic_load_unordered.html\">atomic_load_unordered</a></li><li><a href=\"../fn.atomic_max_acqrel.html\">atomic_max_acqrel</a></li><li><a href=\"../fn.atomic_max_acquire.html\">atomic_max_acquire</a></li><li><a href=\"../fn.atomic_max_relaxed.html\">atomic_max_relaxed</a></li><li><a href=\"../fn.atomic_max_release.html\">atomic_max_release</a></li><li><a href=\"../fn.atomic_max_seqcst.html\">atomic_max_seqcst</a></li><li><a href=\"../fn.atomic_min_acqrel.html\">atomic_min_acqrel</a></li><li><a href=\"../fn.atomic_min_acquire.html\">atomic_min_acquire</a></li><li><a href=\"../fn.atomic_min_relaxed.html\">atomic_min_relaxed</a></li><li><a href=\"../fn.atomic_min_release.html\">atomic_min_release</a></li><li><a href=\"../fn.atomic_min_seqcst.html\">atomic_min_seqcst</a></li><li><a href=\"../fn.atomic_nand_acqrel.html\">atomic_nand_acqrel</a></li><li><a href=\"../fn.atomic_nand_acquire.html\">atomic_nand_acquire</a></li><li><a href=\"../fn.atomic_nand_relaxed.html\">atomic_nand_relaxed</a></li><li><a href=\"../fn.atomic_nand_release.html\">atomic_nand_release</a></li><li><a href=\"../fn.atomic_nand_seqcst.html\">atomic_nand_seqcst</a></li><li><a href=\"../fn.atomic_or_acqrel.html\">atomic_or_acqrel</a></li><li><a href=\"../fn.atomic_or_acquire.html\">atomic_or_acquire</a></li><li><a href=\"../fn.atomic_or_relaxed.html\">atomic_or_relaxed</a></li><li><a href=\"../fn.atomic_or_release.html\">atomic_or_release</a></li><li><a href=\"../fn.atomic_or_seqcst.html\">atomic_or_seqcst</a></li><li><a href=\"../fn.atomic_singlethreadfence_acqrel.html\">atomic_singlethreadfence_acqrel</a></li><li><a href=\"../fn.atomic_singlethreadfence_acquire.html\">atomic_singlethreadfence_acquire</a></li><li><a href=\"../fn.atomic_singlethreadfence_release.html\">atomic_singlethreadfence_release</a></li><li><a href=\"../fn.atomic_singlethreadfence_seqcst.html\">atomic_singlethreadfence_seqcst</a></li><li><a href=\"../fn.atomic_store_relaxed.html\">atomic_store_relaxed</a></li><li><a href=\"../fn.atomic_store_release.html\">atomic_store_release</a></li><li><a href=\"../fn.atomic_store_seqcst.html\">atomic_store_seqcst</a></li><li><a href=\"../fn.atomic_store_unordered.html\">atomic_store_unordered</a></li><li><a href=\"../fn.atomic_umax_acqrel.html\">atomic_umax_acqrel</a></li><li><a href=\"../fn.atomic_umax_acquire.html\">atomic_umax_acquire</a></li><li><a href=\"../fn.atomic_umax_relaxed.html\">atomic_umax_relaxed</a></li><li><a href=\"../fn.atomic_umax_release.html\">atomic_umax_release</a></li><li><a href=\"../fn.atomic_umax_seqcst.html\">atomic_umax_seqcst</a></li><li><a href=\"../fn.atomic_umin_acqrel.html\">atomic_umin_acqrel</a></li><li><a href=\"../fn.atomic_umin_acquire.html\">atomic_umin_acquire</a></li><li><a href=\"../fn.atomic_umin_relaxed.html\">atomic_umin_relaxed</a></li><li><a href=\"../fn.atomic_umin_release.html\">atomic_umin_release</a></li><li><a href=\"../fn.atomic_umin_seqcst.html\">atomic_umin_seqcst</a></li><li><a href=\"../fn.atomic_xadd_acqrel.html\">atomic_xadd_acqrel</a></li><li><a href=\"../fn.atomic_xadd_acquire.html\">atomic_xadd_acquire</a></li><li><a href=\"../fn.atomic_xadd_relaxed.html\">atomic_xadd_relaxed</a></li><li><a href=\"../fn.atomic_xadd_release.html\">atomic_xadd_release</a></li><li><a href=\"../fn.atomic_xadd_seqcst.html\">atomic_xadd_seqcst</a></li><li><a href=\"../fn.atomic_xchg_acqrel.html\">atomic_xchg_acqrel</a></li><li><a href=\"../fn.atomic_xchg_acquire.html\">atomic_xchg_acquire</a></li><li><a href=\"../fn.atomic_xchg_relaxed.html\">atomic_xchg_relaxed</a></li><li><a href=\"../fn.atomic_xchg_release.html\">atomic_xchg_release</a></li><li><a href=\"../fn.atomic_xchg_seqcst.html\">atomic_xchg_seqcst</a></li><li><a href=\"../fn.atomic_xor_acqrel.html\">atomic_xor_acqrel</a></li><li><a href=\"../fn.atomic_xor_acquire.html\">atomic_xor_acquire</a></li><li><a href=\"../fn.atomic_xor_relaxed.html\">atomic_xor_relaxed</a></li><li><a href=\"../fn.atomic_xor_release.html\">atomic_xor_release</a></li><li><a href=\"../fn.atomic_xor_seqcst.html\">atomic_xor_seqcst</a></li><li><a href=\"../fn.atomic_xsub_acqrel.html\">atomic_xsub_acqrel</a></li><li><a href=\"../fn.atomic_xsub_acquire.html\">atomic_xsub_acquire</a></li><li><a href=\"../fn.atomic_xsub_relaxed.html\">atomic_xsub_relaxed</a></li><li><a href=\"../fn.atomic_xsub_release.html\">atomic_xsub_release</a></li><li><a href=\"../fn.atomic_xsub_seqcst.html\">atomic_xsub_seqcst</a></li><li><a href=\"../fn.bitreverse.html\">bitreverse</a></li><li><a href=\"../fn.black_box.html\">black_box</a></li><li><a href=\"../fn.breakpoint.html\">breakpoint</a></li><li><a href=\"../fn.bswap.html\">bswap</a></li><li><a href=\"../fn.caller_location.html\">caller_location</a></li><li><a href=\"../fn.catch_unwind.html\">catch_unwind</a></li><li><a href=\"../fn.ceilf32.html\">ceilf32</a></li><li><a href=\"../fn.ceilf64.html\">ceilf64</a></li><li><a href=\"../fn.compare_bytes.html\">compare_bytes</a></li><li><a href=\"../fn.const_allocate.html\">const_allocate</a></li><li><a href=\"../fn.const_deallocate.html\">const_deallocate</a></li><li><a href=\"../fn.const_eval_select.html\">const_eval_select</a></li><li><a href=\"../fn.copy.html\">copy</a></li><li><a href=\"../fn.copy_nonoverlapping.html\">copy_nonoverlapping</a></li><li><a href=\"../fn.copysignf32.html\">copysignf32</a></li><li><a href=\"../fn.copysignf64.html\">copysignf64</a></li><li><a href=\"../fn.cosf32.html\">cosf32</a></li><li><a href=\"../fn.cosf64.html\">cosf64</a></li><li><a href=\"../fn.ctlz.html\">ctlz</a></li><li><a href=\"../fn.ctlz_nonzero.html\">ctlz_nonzero</a></li><li><a href=\"../fn.ctpop.html\">ctpop</a></li><li><a href=\"../fn.cttz.html\">cttz</a></li><li><a href=\"../fn.cttz_nonzero.html\">cttz_nonzero</a></li><li><a href=\"../fn.discriminant_value.html\">discriminant_value</a></li><li><a href=\"../fn.drop_in_place.html\">drop_in_place</a></li><li><a href=\"../fn.exact_div.html\">exact_div</a></li><li><a href=\"../fn.exp2f32.html\">exp2f32</a></li><li><a href=\"../fn.exp2f64.html\">exp2f64</a></li><li><a href=\"../fn.expf32.html\">expf32</a></li><li><a href=\"../fn.expf64.html\">expf64</a></li><li><a href=\"../fn.fabsf32.html\">fabsf32</a></li><li><a href=\"../fn.fabsf64.html\">fabsf64</a></li><li><a href=\"../fn.fadd_algebraic.html\">fadd_algebraic</a></li><li><a href=\"../fn.fadd_fast.html\">fadd_fast</a></li><li><a href=\"../fn.fdiv_algebraic.html\">fdiv_algebraic</a></li><li><a href=\"../fn.fdiv_fast.html\">fdiv_fast</a></li><li><a href=\"../fn.float_to_int_unchecked.html\">float_to_int_unchecked</a></li><li><a href=\"../fn.floorf32.html\">floorf32</a></li><li><a href=\"../fn.floorf64.html\">floorf64</a></li><li><a href=\"../fn.fmaf32.html\">fmaf32</a></li><li><a href=\"../fn.fmaf64.html\">fmaf64</a></li><li><a href=\"../fn.fmul_algebraic.html\">fmul_algebraic</a></li><li><a href=\"../fn.fmul_fast.html\">fmul_fast</a></li><li><a href=\"../fn.forget.html\">forget</a></li><li><a href=\"../fn.frem_algebraic.html\">frem_algebraic</a></li><li><a href=\"../fn.frem_fast.html\">frem_fast</a></li><li><a href=\"../fn.fsub_algebraic.html\">fsub_algebraic</a></li><li><a href=\"../fn.fsub_fast.html\">fsub_fast</a></li><li><a href=\"../fn.is_val_statically_known.html\">is_val_statically_known</a></li><li><a href=\"../fn.likely.html\">likely</a></li><li><a href=\"../fn.log10f32.html\">log10f32</a></li><li><a href=\"../fn.log10f64.html\">log10f64</a></li><li><a href=\"../fn.log2f32.html\">log2f32</a></li><li><a href=\"../fn.log2f64.html\">log2f64</a></li><li><a href=\"../fn.logf32.html\">logf32</a></li><li><a href=\"../fn.logf64.html\">logf64</a></li><li><a href=\"../fn.maxnumf32.html\">maxnumf32</a></li><li><a href=\"../fn.maxnumf64.html\">maxnumf64</a></li><li><a href=\"../fn.min_align_of.html\">min_align_of</a></li><li><a href=\"../fn.min_align_of_val.html\">min_align_of_val</a></li><li><a href=\"../fn.minnumf32.html\">minnumf32</a></li><li><a href=\"../fn.minnumf64.html\">minnumf64</a></li><li><a href=\"../fn.mul_with_overflow.html\">mul_with_overflow</a></li><li><a href=\"../fn.nearbyintf32.html\">nearbyintf32</a></li><li><a href=\"../fn.nearbyintf64.html\">nearbyintf64</a></li><li><a href=\"../fn.needs_drop.html\">needs_drop</a></li><li><a href=\"../fn.nontemporal_store.html\">nontemporal_store</a></li><li><a href=\"../fn.offset.html\">offset</a></li><li><a href=\"../fn.powf32.html\">powf32</a></li><li><a href=\"../fn.powf64.html\">powf64</a></li><li><a href=\"../fn.powif128.html\">powif128</a></li><li><a href=\"../fn.powif16.html\">powif16</a></li><li><a href=\"../fn.powif32.html\">powif32</a></li><li><a href=\"../fn.powif64.html\">powif64</a></li><li><a href=\"../fn.pref_align_of.html\">pref_align_of</a></li><li><a href=\"../fn.prefetch_read_data.html\">prefetch_read_data</a></li><li><a href=\"../fn.prefetch_read_instruction.html\">prefetch_read_instruction</a></li><li><a href=\"../fn.prefetch_write_data.html\">prefetch_write_data</a></li><li><a href=\"../fn.prefetch_write_instruction.html\">prefetch_write_instruction</a></li><li><a href=\"../fn.ptr_guaranteed_cmp.html\">ptr_guaranteed_cmp</a></li><li><a href=\"../fn.ptr_mask.html\">ptr_mask</a></li><li><a href=\"../fn.ptr_metadata.html\">ptr_metadata</a></li><li><a href=\"../fn.ptr_offset_from.html\">ptr_offset_from</a></li><li><a href=\"../fn.ptr_offset_from_unsigned.html\">ptr_offset_from_unsigned</a></li><li><a href=\"../fn.raw_eq.html\">raw_eq</a></li><li><a href=\"../fn.read_via_copy.html\">read_via_copy</a></li><li><a href=\"../fn.rintf32.html\">rintf32</a></li><li><a href=\"../fn.rintf64.html\">rintf64</a></li><li><a href=\"../fn.rotate_left.html\">rotate_left</a></li><li><a href=\"../fn.rotate_right.html\">rotate_right</a></li><li><a href=\"../fn.roundevenf32.html\">roundevenf32</a></li><li><a href=\"../fn.roundevenf64.html\">roundevenf64</a></li><li><a href=\"../fn.roundf32.html\">roundf32</a></li><li><a href=\"../fn.roundf64.html\">roundf64</a></li><li><a href=\"../fn.rustc_peek.html\">rustc_peek</a></li><li><a href=\"../fn.saturating_add.html\">saturating_add</a></li><li><a href=\"../fn.saturating_sub.html\">saturating_sub</a></li><li><a href=\"../fn.sinf32.html\">sinf32</a></li><li><a href=\"../fn.sinf64.html\">sinf64</a></li><li><a href=\"../fn.size_of.html\">size_of</a></li><li><a href=\"../fn.size_of_val.html\">size_of_val</a></li><li><a href=\"../fn.sqrtf32.html\">sqrtf32</a></li><li><a href=\"../fn.sqrtf64.html\">sqrtf64</a></li><li><a href=\"../fn.sub_with_overflow.html\">sub_with_overflow</a></li><li><a href=\"../fn.three_way_compare.html\">three_way_compare</a></li><li><a href=\"../fn.transmute.html\">transmute</a></li><li><a href=\"../fn.transmute_unchecked.html\">transmute_unchecked</a></li><li><a href=\"../fn.truncf32.html\">truncf32</a></li><li><a href=\"../fn.truncf64.html\">truncf64</a></li><li><a href=\"../fn.type_id.html\">type_id</a></li><li><a href=\"../fn.type_name.html\">type_name</a></li><li><a href=\"../fn.typed_swap.html\">typed_swap</a></li><li><a href=\"../fn.ub_checks.html\">ub_checks</a></li><li><a href=\"../fn.unaligned_volatile_load.html\">unaligned_volatile_load</a></li><li><a href=\"../fn.unaligned_volatile_store.html\">unaligned_volatile_store</a></li><li><a href=\"../fn.unchecked_add.html\">unchecked_add</a></li><li><a href=\"../fn.unchecked_div.html\">unchecked_div</a></li><li><a href=\"../fn.unchecked_mul.html\">unchecked_mul</a></li><li><a href=\"../fn.unchecked_rem.html\">unchecked_rem</a></li><li><a href=\"../fn.unchecked_shl.html\">unchecked_shl</a></li><li><a href=\"../fn.unchecked_shr.html\">unchecked_shr</a></li><li><a href=\"../fn.unchecked_sub.html\">unchecked_sub</a></li><li><a href=\"../fn.unlikely.html\">unlikely</a></li><li><a href=\"../fn.unreachable.html\">unreachable</a></li><li><a href=\"../fn.variant_count.html\">variant_count</a></li><li><a href=\"../fn.volatile_copy_memory.html\">volatile_copy_memory</a></li><li><a href=\"../fn.volatile_copy_nonoverlapping_memory.html\">volatile_copy_nonoverlapping_memory</a></li><li><a href=\"../fn.volatile_load.html\">volatile_load</a></li><li><a href=\"../fn.volatile_set_memory.html\">volatile_set_memory</a></li><li><a href=\"../fn.volatile_store.html\">volatile_store</a></li><li><a href=\"../fn.vtable_align.html\">vtable_align</a></li><li><a href=\"../fn.vtable_size.html\">vtable_size</a></li><li><a href=\"../fn.wrapping_add.html\">wrapping_add</a></li><li><a href=\"../fn.wrapping_mul.html\">wrapping_mul</a></li><li><a href=\"../fn.wrapping_sub.html\">wrapping_sub</a></li><li><a href=\"../fn.write_bytes.html\">write_bytes</a></li><li><a href=\"../fn.write_via_move.html\">write_via_move</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type â€˜Sâ€™ or â€˜/â€™ to search, â€˜?â€™ for more optionsâ€¦\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Module <a href=\"../../index.html\">std</a>::<wbr><a href=\"../index.html\">intrinsics</a>::<wbr><a class=\"mod\" href=\"#\">mir</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/intrinsics.rs.html#71\">source</a> Â· <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>âˆ’</span>]</button></span></div><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>custom_mir</code>)</span></div></span><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Rustc internal tooling for hand-writing MIR.</p>\n<p>If for some reasons you are not writing rustc tests and have found yourself considering using\nthis feature, turn back. This is <em>exceptionally</em> unstable. There is no attempt at all to make\nanything work besides those things which the rustc test suite happened to need. If you make a\ntypo youâ€™ll probably ICE. Really, this is not the solution to your problems. Consider instead\nsupporting the <a href=\"https://github.com/rust-lang/project-stable-mir\">stable MIR project group</a>.</p>\n<p>The documentation for this module describes how to use this feature. If you are interested in\nhacking on the implementation, most of that documentation lives at\n<code>rustc_mir_build/src/build/custom/mod.rs</code>.</p>\n<p>Typical usage will look like this:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(core_intrinsics, custom_mir)]\n#![allow(internal_features)]\n\n</span><span class=\"kw\">use </span>core::intrinsics::mir::<span class=\"kw-2\">*</span>;\n\n<span class=\"attr\">#[custom_mir(dialect = <span class=\"string\">\"built\"</span>)]\n</span><span class=\"kw\">pub fn </span>simple(x: i32) -&gt; i32 {\n    <span class=\"macro\">mir!</span> {\n        <span class=\"kw\">let </span>temp2: i32;\n\n        {\n            <span class=\"kw\">let </span>temp1 = x;\n            Goto(my_second_block)\n        }\n\n        my_second_block = {\n            temp2 = Move(temp1);\n            RET = temp2;\n            Return()\n        }\n    }\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(core_intrinsics,+custom_mir)%5D%0A%23!%5Ballow(internal_features)%5D%0A%0Afn+main()+%7B%0A++++use+core::intrinsics::mir::*;%0A++++%0A++++%23%5Bcustom_mir(dialect+=+%22built%22)%5D%0A++++pub+fn+simple(x:+i32)+-%3E+i32+%7B%0A++++++++mir!+%7B%0A++++++++++++let+temp2:+i32;%0A++++%0A++++++++++++%7B%0A++++++++++++++++let+temp1+=+x;%0A++++++++++++++++Goto(my_second_block)%0A++++++++++++%7D%0A++++%0A++++++++++++my_second_block+=+%7B%0A++++++++++++++++temp2+=+Move(temp1);%0A++++++++++++++++RET+=+temp2;%0A++++++++++++++++Return()%0A++++++++++++%7D%0A++++++++%7D%0A++++%7D%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<p>The <code>custom_mir</code> attribute tells the compiler to treat the function as being custom MIR. This\nattribute only works on functions - there is no way to insert custom MIR into the middle of\nanother function. The <code>dialect</code> and <code>phase</code> parameters indicate which <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/mir/enum.MirPhase.html\">version of MIR</a> you are inserting here. Generally youâ€™ll want to use <code>#![custom_mir(dialect = \"built\")]</code>\nif you want your MIR to be modified by the full MIR pipeline, or <code>#![custom_mir(dialect = \"runtime\", phase = \"optimized\")]</code> if you donâ€™t.</p>\n<p>The input to the <a href=\"macro.mir.html\" title=\"macro std::intrinsics::mir::mir\"><code>mir!</code></a> macro is:</p>\n<ul>\n<li>An optional return type annotation in the form of <code>type RET = ...;</code>. This may be required\nif the compiler cannot infer the type of RET.</li>\n<li>A possibly empty list of local declarations. Locals can also be declared inline on\nassignments via <code>let</code>. Type inference generally works. Shadowing does not.</li>\n<li>A list of basic blocks. The first of these is the start block and is where execution begins.\nAll blocks other than the start block need to be given a name, so that they can be referred\nto later.\n<ul>\n<li>Each block is a list of semicolon terminated statements, followed by a terminator. The\nsyntax for the various statements and terminators is designed to be as similar as possible\nto the syntax for analogous concepts in native Rust. See below for a list.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">Â§</a>Examples</h2>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(core_intrinsics, custom_mir)]\n#![allow(internal_features)]\n#![allow(unused_assignments)]\n\n</span><span class=\"kw\">use </span>core::intrinsics::mir::<span class=\"kw-2\">*</span>;\n\n<span class=\"attr\">#[custom_mir(dialect = <span class=\"string\">\"built\"</span>)]\n</span><span class=\"kw\">pub fn </span>choose_load(a: <span class=\"kw-2\">&amp;</span>i32, b: <span class=\"kw-2\">&amp;</span>i32, c: bool) -&gt; i32 {\n    <span class=\"macro\">mir!</span> {\n        {\n            <span class=\"kw\">match </span>c {\n                <span class=\"bool-val\">true </span>=&gt; t,\n                <span class=\"kw\">_ </span>=&gt; f,\n            }\n        }\n\n        t = {\n            <span class=\"kw\">let </span>temp = a;\n            Goto(load_and_exit)\n        }\n\n        f = {\n            temp = b;\n            Goto(load_and_exit)\n        }\n\n        load_and_exit = {\n            RET = <span class=\"kw-2\">*</span>temp;\n            Return()\n        }\n    }\n}\n\n<span class=\"attr\">#[custom_mir(dialect = <span class=\"string\">\"built\"</span>)]\n</span><span class=\"kw\">fn </span>unwrap_unchecked&lt;T&gt;(opt: <span class=\"prelude-ty\">Option</span>&lt;T&gt;) -&gt; T {\n    <span class=\"macro\">mir!</span> {\n        {\n            RET = Move(Field(Variant(opt, <span class=\"number\">1</span>), <span class=\"number\">0</span>));\n            Return()\n        }\n    }\n}\n\n<span class=\"attr\">#[custom_mir(dialect = <span class=\"string\">\"runtime\"</span>, phase = <span class=\"string\">\"optimized\"</span>)]\n</span><span class=\"kw\">fn </span>push_and_pop&lt;T&gt;(v: <span class=\"kw-2\">&amp;mut </span>Vec&lt;T&gt;, value: T) {\n    <span class=\"macro\">mir!</span> {\n        <span class=\"kw\">let </span>_unused;\n        <span class=\"kw\">let </span>popped;\n\n        {\n            Call(_unused = Vec::push(v, value), ReturnTo(pop), UnwindContinue())\n        }\n\n        pop = {\n            Call(popped = Vec::pop(v), ReturnTo(drop), UnwindContinue())\n        }\n\n        drop = {\n            Drop(popped, ReturnTo(ret), UnwindContinue())\n        }\n\n        ret = {\n            Return()\n        }\n    }\n}\n\n<span class=\"attr\">#[custom_mir(dialect = <span class=\"string\">\"runtime\"</span>, phase = <span class=\"string\">\"optimized\"</span>)]\n</span><span class=\"kw\">fn </span>annotated_return_type() -&gt; (i32, bool) {\n    <span class=\"macro\">mir!</span> {\n        <span class=\"kw\">type </span>RET = (i32, bool);\n        {\n            RET.<span class=\"number\">0 </span>= <span class=\"number\">1</span>;\n            RET.<span class=\"number\">1 </span>= <span class=\"bool-val\">true</span>;\n            Return()\n        }\n    }\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(core_intrinsics,+custom_mir)%5D%0A%23!%5Ballow(internal_features)%5D%0A%23!%5Ballow(unused_assignments)%5D%0A%0Afn+main()+%7B%0A++++use+core::intrinsics::mir::*;%0A++++%0A++++%23%5Bcustom_mir(dialect+=+%22built%22)%5D%0A++++pub+fn+choose_load(a:+%26i32,+b:+%26i32,+c:+bool)+-%3E+i32+%7B%0A++++++++mir!+%7B%0A++++++++++++%7B%0A++++++++++++++++match+c+%7B%0A++++++++++++++++++++true+=%3E+t,%0A++++++++++++++++++++_+=%3E+f,%0A++++++++++++++++%7D%0A++++++++++++%7D%0A++++%0A++++++++++++t+=+%7B%0A++++++++++++++++let+temp+=+a;%0A++++++++++++++++Goto(load_and_exit)%0A++++++++++++%7D%0A++++%0A++++++++++++f+=+%7B%0A++++++++++++++++temp+=+b;%0A++++++++++++++++Goto(load_and_exit)%0A++++++++++++%7D%0A++++%0A++++++++++++load_and_exit+=+%7B%0A++++++++++++++++RET+=+*temp;%0A++++++++++++++++Return()%0A++++++++++++%7D%0A++++++++%7D%0A++++%7D%0A++++%0A++++%23%5Bcustom_mir(dialect+=+%22built%22)%5D%0A++++fn+unwrap_unchecked%3CT%3E(opt:+Option%3CT%3E)+-%3E+T+%7B%0A++++++++mir!+%7B%0A++++++++++++%7B%0A++++++++++++++++RET+=+Move(Field(Variant(opt,+1),+0));%0A++++++++++++++++Return()%0A++++++++++++%7D%0A++++++++%7D%0A++++%7D%0A++++%0A++++%23%5Bcustom_mir(dialect+=+%22runtime%22,+phase+=+%22optimized%22)%5D%0A++++fn+push_and_pop%3CT%3E(v:+%26mut+Vec%3CT%3E,+value:+T)+%7B%0A++++++++mir!+%7B%0A++++++++++++let+_unused;%0A++++++++++++let+popped;%0A++++%0A++++++++++++%7B%0A++++++++++++++++Call(_unused+=+Vec::push(v,+value),+ReturnTo(pop),+UnwindContinue())%0A++++++++++++%7D%0A++++%0A++++++++++++pop+=+%7B%0A++++++++++++++++Call(popped+=+Vec::pop(v),+ReturnTo(drop),+UnwindContinue())%0A++++++++++++%7D%0A++++%0A++++++++++++drop+=+%7B%0A++++++++++++++++Drop(popped,+ReturnTo(ret),+UnwindContinue())%0A++++++++++++%7D%0A++++%0A++++++++++++ret+=+%7B%0A++++++++++++++++Return()%0A++++++++++++%7D%0A++++++++%7D%0A++++%7D%0A++++%0A++++%23%5Bcustom_mir(dialect+=+%22runtime%22,+phase+=+%22optimized%22)%5D%0A++++fn+annotated_return_type()+-%3E+(i32,+bool)+%7B%0A++++++++mir!+%7B%0A++++++++++++type+RET+=+(i32,+bool);%0A++++++++++++%7B%0A++++++++++++++++RET.0+=+1;%0A++++++++++++++++RET.1+=+true;%0A++++++++++++++++Return()%0A++++++++++++%7D%0A++++++++%7D%0A++++%7D%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<p>We can also set off compilation failures that happen in sufficiently late stages of the\ncompiler:</p>\n\n<div class=\"example-wrap compile_fail\"><a href=\"#\" class=\"tooltip\" title=\"This example deliberately fails to compile\">â“˜</a><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(core_intrinsics, custom_mir)]\n\n</span><span class=\"kw\">extern crate </span>core;\n<span class=\"kw\">use </span>core::intrinsics::mir::<span class=\"kw-2\">*</span>;\n\n<span class=\"attr\">#[custom_mir(dialect = <span class=\"string\">\"built\"</span>)]\n</span><span class=\"kw\">fn </span>borrow_error(should_init: bool) -&gt; i32 {\n    <span class=\"macro\">mir!</span> {\n        <span class=\"kw\">let </span>temp: i32;\n\n        {\n            <span class=\"kw\">match </span>should_init {\n                <span class=\"bool-val\">true </span>=&gt; init,\n                <span class=\"kw\">_ </span>=&gt; use_temp,\n            }\n        }\n\n        init = {\n            temp = <span class=\"number\">0</span>;\n            Goto(use_temp)\n        }\n\n        use_temp = {\n            RET = temp;\n            Return()\n        }\n    }\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(core_intrinsics,+custom_mir)%5D%0A%0Aextern+crate+core;%0Afn+main()+%7B%0A++++use+core::intrinsics::mir::*;%0A++++%0A++++%23%5Bcustom_mir(dialect+=+%22built%22)%5D%0A++++fn+borrow_error(should_init:+bool)+-%3E+i32+%7B%0A++++++++mir!+%7B%0A++++++++++++let+temp:+i32;%0A++++%0A++++++++++++%7B%0A++++++++++++++++match+should_init+%7B%0A++++++++++++++++++++true+=%3E+init,%0A++++++++++++++++++++_+=%3E+use_temp,%0A++++++++++++++++%7D%0A++++++++++++%7D%0A++++%0A++++++++++++init+=+%7B%0A++++++++++++++++temp+=+0;%0A++++++++++++++++Goto(use_temp)%0A++++++++++++%7D%0A++++%0A++++++++++++use_temp+=+%7B%0A++++++++++++++++RET+=+temp;%0A++++++++++++++++Return()%0A++++++++++++%7D%0A++++++++%7D%0A++++%7D%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<div class=\"example-wrap\"><pre class=\"language-text\"><code>error[E0381]: used binding is possibly-uninitialized\n  --&gt; test.rs:24:13\n   |\n8  | /     mir! {\n9  | |         let temp: i32;\n10 | |\n11 | |         {\n...  |\n19 | |             temp = 0;\n   | |             -------- binding initialized here in some conditions\n...  |\n24 | |             RET = temp;\n   | |             ^^^^^^^^^^ value used here but it is possibly-uninitialized\n25 | |             Return()\n26 | |         }\n27 | |     }\n   | |_____- binding declared here but left uninitialized\n\nerror: aborting due to 1 previous error\n\nFor more information about this error, try `rustc --explain E0381`.\n</code></pre></div><h2 id=\"syntax\"><a class=\"doc-anchor\" href=\"#syntax\">Â§</a>Syntax</h2>\n<p>The lists below are an exhaustive description of how various MIR constructs can be created.\nAnything missing from the list should be assumed to not be supported, PRs welcome.</p>\n<h5 id=\"locals\"><a class=\"doc-anchor\" href=\"#locals\">Â§</a>Locals</h5>\n<ul>\n<li>The <code>_0</code> return local can always be accessed via <code>RET</code>.</li>\n<li>Arguments can be accessed via their regular name.</li>\n<li>All other locals need to be declared with <code>let</code> somewhere and then can be accessed by name.</li>\n</ul>\n<h5 id=\"places\"><a class=\"doc-anchor\" href=\"#places\">Â§</a>Places</h5>\n<ul>\n<li>Locals implicit convert to places.</li>\n<li>Field accesses, derefs, and indexing work normally.</li>\n<li>Fields in variants can be accessed via the <a href=\"fn.Variant.html\" title=\"fn std::intrinsics::mir::Variant\"><code>Variant</code></a> and <a href=\"fn.Field.html\" title=\"fn std::intrinsics::mir::Field\"><code>Field</code></a> associated functions,\nsee their documentation for details.</li>\n</ul>\n<h5 id=\"operands\"><a class=\"doc-anchor\" href=\"#operands\">Â§</a>Operands</h5>\n<ul>\n<li>Places implicitly convert to <code>Copy</code> operands.</li>\n<li><code>Move</code> operands can be created via <a href=\"fn.Move.html\" title=\"fn std::intrinsics::mir::Move\"><code>Move</code></a>.</li>\n<li>Const blocks, literals, named constants, and const params all just work.</li>\n<li><a href=\"fn.Static.html\" title=\"fn std::intrinsics::mir::Static\"><code>Static</code></a> and <a href=\"fn.StaticMut.html\" title=\"fn std::intrinsics::mir::StaticMut\"><code>StaticMut</code></a> can be used to create <code>&amp;T</code> and <code>*mut T</code>s to statics. These are\nconstants in MIR and the only way to access statics.</li>\n</ul>\n<h5 id=\"statements\"><a class=\"doc-anchor\" href=\"#statements\">Â§</a>Statements</h5>\n<ul>\n<li>Assign statements work via normal Rust assignment.</li>\n<li><a href=\"fn.Retag.html\" title=\"fn std::intrinsics::mir::Retag\"><code>Retag</code></a>, <a href=\"fn.StorageLive.html\" title=\"fn std::intrinsics::mir::StorageLive\"><code>StorageLive</code></a>, <a href=\"fn.StorageDead.html\" title=\"fn std::intrinsics::mir::StorageDead\"><code>StorageDead</code></a>, <a href=\"fn.Deinit.html\" title=\"fn std::intrinsics::mir::Deinit\"><code>Deinit</code></a> statements have an associated function.</li>\n</ul>\n<h5 id=\"rvalues\"><a class=\"doc-anchor\" href=\"#rvalues\">Â§</a>Rvalues</h5>\n<ul>\n<li>Operands implicitly convert to <code>Use</code> rvalues.</li>\n<li><code>&amp;</code>, <code>&amp;mut</code>, <code>addr_of!</code>, and <code>addr_of_mut!</code> all work to create their associated rvalue.</li>\n<li><a href=\"fn.Discriminant.html\" title=\"fn std::intrinsics::mir::Discriminant\"><code>Discriminant</code></a>, <a href=\"fn.Len.html\" title=\"fn std::intrinsics::mir::Len\"><code>Len</code></a>, and <a href=\"fn.CopyForDeref.html\" title=\"fn std::intrinsics::mir::CopyForDeref\"><code>CopyForDeref</code></a> have associated functions.</li>\n<li>Unary and binary operations use their normal Rust syntax - <code>a * b</code>, <code>!c</code>, etc.</li>\n<li>The binary operation <code>Offset</code> can be created via <a href=\"fn.Offset.html\" title=\"fn std::intrinsics::mir::Offset\"><code>Offset</code></a>.</li>\n<li>Checked binary operations are represented by wrapping the associated binop in <a href=\"fn.Checked.html\" title=\"fn std::intrinsics::mir::Checked\"><code>Checked</code></a>.</li>\n<li>Array repetition syntax (<code>[foo; 10]</code>) creates the associated rvalue.</li>\n</ul>\n<h5 id=\"terminators\"><a class=\"doc-anchor\" href=\"#terminators\">Â§</a>Terminators</h5>\n<ul>\n<li><a href=\"fn.Goto.html\" title=\"fn std::intrinsics::mir::Goto\"><code>Goto</code></a>, <a href=\"fn.Return.html\" title=\"fn std::intrinsics::mir::Return\"><code>Return</code></a>, <a href=\"fn.Unreachable.html\" title=\"fn std::intrinsics::mir::Unreachable\"><code>Unreachable</code></a> and <a href=\"fn.Drop.html\" title=\"fn std::intrinsics::mir::Drop\"><code>Drop</code></a> have associated functions.</li>\n<li><code>match some_int_operand</code> becomes a <code>SwitchInt</code>. Each arm should be <code>literal =&gt; basic_block</code>\n<ul>\n<li>The exception is the last arm, which must be <code>_ =&gt; basic_block</code> and corresponds to the\notherwise branch.</li>\n</ul>\n</li>\n<li><a href=\"fn.Call.html\" title=\"fn std::intrinsics::mir::Call\"><code>Call</code></a> has an associated function as well, with special syntax:\n<code>Call(ret_val = function(arg1, arg2, ...), ReturnTo(next_block), UnwindContinue())</code>.</li>\n</ul>\n</div></details><h2 id=\"macros\" class=\"section-header\">Macros<a href=\"#macros\" class=\"anchor\">Â§</a></h2><ul class=\"item-table\"><li><div class=\"item-name\"><a class=\"macro\" href=\"macro.mir.html\" title=\"macro std::intrinsics::mir::mir\">mir</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Macro for generating custom MIR.</div></li><li><div class=\"item-name\"><a class=\"macro\" href=\"macro.place.html\" title=\"macro std::intrinsics::mir::place\">place</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Helper macro that allows you to treat a value expression like a place expression.</div></li></ul><h2 id=\"structs\" class=\"section-header\">Structs<a href=\"#structs\" class=\"anchor\">Â§</a></h2><ul class=\"item-table\"><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.ReturnToArg.html\" title=\"struct std::intrinsics::mir::ReturnToArg\">ReturnToArg</a><span class=\"stab unstable\" title=\"\">Experimental</span></div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.UnwindActionArg.html\" title=\"struct std::intrinsics::mir::UnwindActionArg\">UnwindActionArg</a><span class=\"stab unstable\" title=\"\">Experimental</span></div></li></ul><h2 id=\"enums\" class=\"section-header\">Enums<a href=\"#enums\" class=\"anchor\">Â§</a></h2><ul class=\"item-table\"><li><div class=\"item-name\"><a class=\"enum\" href=\"enum.BasicBlock.html\" title=\"enum std::intrinsics::mir::BasicBlock\">BasicBlock</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Type representing basic blocks.</div></li><li><div class=\"item-name\"><a class=\"enum\" href=\"enum.UnwindTerminateReason.html\" title=\"enum std::intrinsics::mir::UnwindTerminateReason\">UnwindTerminateReason</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">The reason we are terminating the process during unwinding.</div></li></ul><h2 id=\"functions\" class=\"section-header\">Functions<a href=\"#functions\" class=\"anchor\">Â§</a></h2><ul class=\"item-table\"><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.Assume.html\" title=\"fn std::intrinsics::mir::Assume\">Assume</a><span class=\"stab unstable\" title=\"\">Experimental</span></div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.Call.html\" title=\"fn std::intrinsics::mir::Call\">Call</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Call a function.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.CastTransmute.html\" title=\"fn std::intrinsics::mir::CastTransmute\">CastTransmute</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Emits a <code>CastKind::Transmute</code> cast.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.Checked.html\" title=\"fn std::intrinsics::mir::Checked\">Checked</a><span class=\"stab unstable\" title=\"\">Experimental</span></div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.CopyForDeref.html\" title=\"fn std::intrinsics::mir::CopyForDeref\">CopyForDeref</a><span class=\"stab unstable\" title=\"\">Experimental</span></div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.Deinit.html\" title=\"fn std::intrinsics::mir::Deinit\">Deinit</a><span class=\"stab unstable\" title=\"\">Experimental</span></div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.Discriminant.html\" title=\"fn std::intrinsics::mir::Discriminant\">Discriminant</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Gets the discriminant of a place.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.Drop.html\" title=\"fn std::intrinsics::mir::Drop\">Drop</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Drop the contents of a place.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.Field.html\" title=\"fn std::intrinsics::mir::Field\">Field</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Access the field with the given index of some place.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.Goto.html\" title=\"fn std::intrinsics::mir::Goto\">Goto</a><span class=\"stab unstable\" title=\"\">Experimental</span></div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.Len.html\" title=\"fn std::intrinsics::mir::Len\">Len</a><span class=\"stab unstable\" title=\"\">Experimental</span></div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.Move.html\" title=\"fn std::intrinsics::mir::Move\">Move</a><span class=\"stab unstable\" title=\"\">Experimental</span></div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.Offset.html\" title=\"fn std::intrinsics::mir::Offset\">Offset</a><span class=\"stab unstable\" title=\"\">Experimental</span></div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.PtrMetadata.html\" title=\"fn std::intrinsics::mir::PtrMetadata\">PtrMetadata</a><span class=\"stab unstable\" title=\"\">Experimental</span></div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.Retag.html\" title=\"fn std::intrinsics::mir::Retag\">Retag</a><span class=\"stab unstable\" title=\"\">Experimental</span></div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.Return.html\" title=\"fn std::intrinsics::mir::Return\">Return</a><span class=\"stab unstable\" title=\"\">Experimental</span></div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.ReturnTo.html\" title=\"fn std::intrinsics::mir::ReturnTo\">ReturnTo</a><span class=\"stab unstable\" title=\"\">Experimental</span></div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.SetDiscriminant.html\" title=\"fn std::intrinsics::mir::SetDiscriminant\">SetDiscriminant</a><span class=\"stab unstable\" title=\"\">Experimental</span></div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.Static.html\" title=\"fn std::intrinsics::mir::Static\">Static</a><span class=\"stab unstable\" title=\"\">Experimental</span></div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.StaticMut.html\" title=\"fn std::intrinsics::mir::StaticMut\">StaticMut</a><span class=\"stab unstable\" title=\"\">Experimental</span></div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.StorageDead.html\" title=\"fn std::intrinsics::mir::StorageDead\">StorageDead</a><span class=\"stab unstable\" title=\"\">Experimental</span></div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.StorageLive.html\" title=\"fn std::intrinsics::mir::StorageLive\">StorageLive</a><span class=\"stab unstable\" title=\"\">Experimental</span></div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.Unreachable.html\" title=\"fn std::intrinsics::mir::Unreachable\">Unreachable</a><span class=\"stab unstable\" title=\"\">Experimental</span></div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.UnwindCleanup.html\" title=\"fn std::intrinsics::mir::UnwindCleanup\">UnwindCleanup</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">An unwind action that continues execution in a given basic blok.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.UnwindContinue.html\" title=\"fn std::intrinsics::mir::UnwindContinue\">UnwindContinue</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">An unwind action that continues unwinding.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.UnwindResume.html\" title=\"fn std::intrinsics::mir::UnwindResume\">UnwindResume</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">A terminator that resumes the unwinding.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.UnwindTerminate.html\" title=\"fn std::intrinsics::mir::UnwindTerminate\">UnwindTerminate</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">An unwind action that terminates the execution.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.UnwindUnreachable.html\" title=\"fn std::intrinsics::mir::UnwindUnreachable\">UnwindUnreachable</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">An unwind action that triggers undefined behaviour.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.Variant.html\" title=\"fn std::intrinsics::mir::Variant\">Variant</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Adds a variant projection with the given index to the place.</div></li></ul></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:23:18.989Z"
}