{
	"title": "once_with in std::iter - Rust",
	"url": "https://doc.rust-lang.org/stable/std/iter/fn.once_with.html",
	"markdown": "# once\\_with in std::iter - Rust\n\n## Function [std](../index.html)::[iter](index.html)::[once\\_with](#)\n\n1.43.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/sources/once_with.rs.html#61) ·\n\n```\npub fn once_with<A, F>(gen: F) -> OnceWith<F> ⓘwhere\n    F: FnOnce() -> A,\n```\n\nExpand description\n\nCreates an iterator that lazily generates a value exactly once by invoking the provided closure.\n\nThis is commonly used to adapt a single value coroutine into a [`chain()`](about:blank/trait.Iterator.html#method.chain \"method std::iter::Iterator::chain\") of other kinds of iteration. Maybe you have an iterator that covers almost everything, but you need an extra special case. Maybe you have a function which works on iterators, but you only need to process one value.\n\nUnlike [`once()`](fn.once.html \"fn std::iter::once\"), this function will lazily generate the value on request.\n\n## [§](#examples)Examples\n\nBasic usage:\n\n```\nuse std::iter;\n\n// one is the loneliest number\nlet mut one = iter::once_with(|| 1);\n\nassert_eq!(Some(1), one.next());\n\n// just one, that's all we get\nassert_eq!(None, one.next());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::iter;%0A++++%0A++++//+one+is+the+loneliest+number%0A++++let+mut+one+=+iter::once_with(%7C%7C+1);%0A++++%0A++++assert_eq!(Some(1),+one.next());%0A++++%0A++++//+just+one,+that%27s+all+we+get%0A++++assert_eq!(None,+one.next());%0A%7D&edition=2021)\n\nChaining together with another iterator. Let’s say that we want to iterate over each file of the `.foo` directory, but also a configuration file, `.foorc`:\n\n```\nuse std::iter;\nuse std::fs;\nuse std::path::PathBuf;\n\nlet dirs = fs::read_dir(\".foo\").unwrap();\n\n// we need to convert from an iterator of DirEntry-s to an iterator of\n// PathBufs, so we use map\nlet dirs = dirs.map(|file| file.unwrap().path());\n\n// now, our iterator just for our config file\nlet config = iter::once_with(|| PathBuf::from(\".foorc\"));\n\n// chain the two iterators together into one big iterator\nlet files = dirs.chain(config);\n\n// this will give us all of the files in .foo as well as .foorc\nfor f in files {\n    println!(\"{f:?}\");\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::iter;%0A++++use+std::fs;%0A++++use+std::path::PathBuf;%0A++++%0A++++let+dirs+=+fs::read_dir(%22.foo%22).unwrap();%0A++++%0A++++//+we+need+to+convert+from+an+iterator+of+DirEntry-s+to+an+iterator+of%0A++++//+PathBufs,+so+we+use+map%0A++++let+dirs+=+dirs.map(%7Cfile%7C+file.unwrap().path());%0A++++%0A++++//+now,+our+iterator+just+for+our+config+file%0A++++let+config+=+iter::once_with(%7C%7C+PathBuf::from(%22.foorc%22));%0A++++%0A++++//+chain+the+two+iterators+together+into+one+big+iterator%0A++++let+files+=+dirs.chain(config);%0A++++%0A++++//+this+will+give+us+all+of+the+files+in+.foo+as+well+as+.foorc%0A++++for+f+in+files+%7B%0A++++++++println!(%22%7Bf:?%7D%22);%0A++++%7D%0A%7D&edition=2021)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Creates an iterator that lazily generates a value exactly once by invoking the provided closure.\"><title>once_with in std::iter - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc fn\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><div class=\"sidebar-elems\"><h2><a href=\"index.html\">In std::iter</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.ArrayChunks.html\">ArrayChunks</a></li><li><a href=\"struct.ByRefSized.html\">ByRefSized</a></li><li><a href=\"struct.Chain.html\">Chain</a></li><li><a href=\"struct.Cloned.html\">Cloned</a></li><li><a href=\"struct.Copied.html\">Copied</a></li><li><a href=\"struct.Cycle.html\">Cycle</a></li><li><a href=\"struct.Empty.html\">Empty</a></li><li><a href=\"struct.Enumerate.html\">Enumerate</a></li><li><a href=\"struct.Filter.html\">Filter</a></li><li><a href=\"struct.FilterMap.html\">FilterMap</a></li><li><a href=\"struct.FlatMap.html\">FlatMap</a></li><li><a href=\"struct.Flatten.html\">Flatten</a></li><li><a href=\"struct.FromFn.html\">FromFn</a></li><li><a href=\"struct.Fuse.html\">Fuse</a></li><li><a href=\"struct.Inspect.html\">Inspect</a></li><li><a href=\"struct.Intersperse.html\">Intersperse</a></li><li><a href=\"struct.IntersperseWith.html\">IntersperseWith</a></li><li><a href=\"struct.Map.html\">Map</a></li><li><a href=\"struct.MapWhile.html\">MapWhile</a></li><li><a href=\"struct.MapWindows.html\">MapWindows</a></li><li><a href=\"struct.Once.html\">Once</a></li><li><a href=\"struct.OnceWith.html\">OnceWith</a></li><li><a href=\"struct.Peekable.html\">Peekable</a></li><li><a href=\"struct.Repeat.html\">Repeat</a></li><li><a href=\"struct.RepeatN.html\">RepeatN</a></li><li><a href=\"struct.RepeatWith.html\">RepeatWith</a></li><li><a href=\"struct.Rev.html\">Rev</a></li><li><a href=\"struct.Scan.html\">Scan</a></li><li><a href=\"struct.Skip.html\">Skip</a></li><li><a href=\"struct.SkipWhile.html\">SkipWhile</a></li><li><a href=\"struct.StepBy.html\">StepBy</a></li><li><a href=\"struct.Successors.html\">Successors</a></li><li><a href=\"struct.Take.html\">Take</a></li><li><a href=\"struct.TakeWhile.html\">TakeWhile</a></li><li><a href=\"struct.Zip.html\">Zip</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.DoubleEndedIterator.html\">DoubleEndedIterator</a></li><li><a href=\"trait.ExactSizeIterator.html\">ExactSizeIterator</a></li><li><a href=\"trait.Extend.html\">Extend</a></li><li><a href=\"trait.FromIterator.html\">FromIterator</a></li><li><a href=\"trait.FusedIterator.html\">FusedIterator</a></li><li><a href=\"trait.IntoIterator.html\">IntoIterator</a></li><li><a href=\"trait.Iterator.html\">Iterator</a></li><li><a href=\"trait.Product.html\">Product</a></li><li><a href=\"trait.Step.html\">Step</a></li><li><a href=\"trait.Sum.html\">Sum</a></li><li><a href=\"trait.TrustedLen.html\">TrustedLen</a></li><li><a href=\"trait.TrustedStep.html\">TrustedStep</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.chain.html\">chain</a></li><li><a href=\"fn.empty.html\">empty</a></li><li><a href=\"fn.from_coroutine.html\">from_coroutine</a></li><li><a href=\"fn.from_fn.html\">from_fn</a></li><li><a href=\"fn.once.html\">once</a></li><li><a href=\"fn.once_with.html\">once_with</a></li><li><a href=\"fn.repeat.html\">repeat</a></li><li><a href=\"fn.repeat_n.html\">repeat_n</a></li><li><a href=\"fn.repeat_with.html\">repeat_with</a></li><li><a href=\"fn.successors.html\">successors</a></li><li><a href=\"fn.zip.html\">zip</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Function <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">iter</a>::<wbr><a class=\"fn\" href=\"#\">once_with</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.43.0\">1.43.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/sources/once_with.rs.html#61\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub fn once_with&lt;A, F&gt;(gen: F) -&gt; <a class=\"struct\" href=\"struct.OnceWith.html\" title=\"struct std::iter::OnceWith\">OnceWith</a>&lt;F&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"OnceWith<F>\">ⓘ</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnOnce.html\" title=\"trait std::ops::FnOnce\">FnOnce</a>() -&gt; A,</div></code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Creates an iterator that lazily generates a value exactly once by invoking\nthe provided closure.</p>\n<p>This is commonly used to adapt a single value coroutine into a <a href=\"trait.Iterator.html#method.chain\" title=\"method std::iter::Iterator::chain\"><code>chain()</code></a> of\nother kinds of iteration. Maybe you have an iterator that covers almost\neverything, but you need an extra special case. Maybe you have a function\nwhich works on iterators, but you only need to process one value.</p>\n<p>Unlike <a href=\"fn.once.html\" title=\"fn std::iter::once\"><code>once()</code></a>, this function will lazily generate the value on request.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::iter;\n\n<span class=\"comment\">// one is the loneliest number\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>one = iter::once_with(|| <span class=\"number\">1</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>), one.next());\n\n<span class=\"comment\">// just one, that's all we get\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, one.next());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::iter;%0A++++%0A++++//+one+is+the+loneliest+number%0A++++let+mut+one+=+iter::once_with(%7C%7C+1);%0A++++%0A++++assert_eq!(Some(1),+one.next());%0A++++%0A++++//+just+one,+that's+all+we+get%0A++++assert_eq!(None,+one.next());%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Chaining together with another iterator. Let’s say that we want to iterate\nover each file of the <code>.foo</code> directory, but also a configuration file,\n<code>.foorc</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::iter;\n<span class=\"kw\">use </span>std::fs;\n<span class=\"kw\">use </span>std::path::PathBuf;\n\n<span class=\"kw\">let </span>dirs = fs::read_dir(<span class=\"string\">\".foo\"</span>).unwrap();\n\n<span class=\"comment\">// we need to convert from an iterator of DirEntry-s to an iterator of\n// PathBufs, so we use map\n</span><span class=\"kw\">let </span>dirs = dirs.map(|file| file.unwrap().path());\n\n<span class=\"comment\">// now, our iterator just for our config file\n</span><span class=\"kw\">let </span>config = iter::once_with(|| PathBuf::from(<span class=\"string\">\".foorc\"</span>));\n\n<span class=\"comment\">// chain the two iterators together into one big iterator\n</span><span class=\"kw\">let </span>files = dirs.chain(config);\n\n<span class=\"comment\">// this will give us all of the files in .foo as well as .foorc\n</span><span class=\"kw\">for </span>f <span class=\"kw\">in </span>files {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{f:?}\"</span>);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::iter;%0A++++use+std::fs;%0A++++use+std::path::PathBuf;%0A++++%0A++++let+dirs+=+fs::read_dir(%22.foo%22).unwrap();%0A++++%0A++++//+we+need+to+convert+from+an+iterator+of+DirEntry-s+to+an+iterator+of%0A++++//+PathBufs,+so+we+use+map%0A++++let+dirs+=+dirs.map(%7Cfile%7C+file.unwrap().path());%0A++++%0A++++//+now,+our+iterator+just+for+our+config+file%0A++++let+config+=+iter::once_with(%7C%7C+PathBuf::from(%22.foorc%22));%0A++++%0A++++//+chain+the+two+iterators+together+into+one+big+iterator%0A++++let+files+=+dirs.chain(config);%0A++++%0A++++//+this+will+give+us+all+of+the+files+in+.foo+as+well+as+.foorc%0A++++for+f+in+files+%7B%0A++++++++println!(%22%7Bf:?%7D%22);%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><script type=\"text/json\" id=\"notable-traits-data\">{\"OnceWith<F>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"struct.OnceWith.html\\\" title=\\\"struct std::iter::OnceWith\\\">OnceWith</a>&lt;F&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;A, F&gt; <a class=\\\"trait\\\" href=\\\"trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"struct.OnceWith.html\\\" title=\\\"struct std::iter::OnceWith\\\">OnceWith</a>&lt;F&gt;<div class=\\\"where\\\">where\\n    F: <a class=\\\"trait\\\" href=\\\"../ops/trait.FnOnce.html\\\" title=\\\"trait std::ops::FnOnce\\\">FnOnce</a>() -&gt; A,</div></div><div class=\\\"where\\\">    type <a href=\\\"trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = A;</div>\"}</script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:23:53.491Z"
}