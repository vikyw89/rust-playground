{
	"title": "Wake in std::task - Rust",
	"url": "https://doc.rust-lang.org/stable/std/task/trait.Wake.html",
	"markdown": "# Wake in std::task - Rust\n\n## Trait [std](../index.html)::[task](index.html)::[Wake](#)\n\n1.51.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/task.rs.html#90) ·\n\n```\npub trait Wake {\n    // Required method\n    fn wake(self: Arc<Self>);\n\n    // Provided method\n    fn wake_by_ref(self: &Arc<Self>) { ... }\n}\n```\n\nExpand description\n\nThe implementation of waking a task on an executor.\n\nThis trait can be used to create a [`Waker`](struct.Waker.html \"struct std::task::Waker\"). An executor can define an implementation of this trait, and use that to construct a [`Waker`](struct.Waker.html \"struct std::task::Waker\") to pass to the tasks that are executed on that executor.\n\nThis trait is a memory-safe and ergonomic alternative to constructing a [`RawWaker`](struct.RawWaker.html \"struct std::task::RawWaker\"). It supports the common executor design in which the data used to wake up a task is stored in an [`Arc`](../sync/struct.Arc.html \"struct std::sync::Arc\"). Some executors (especially those for embedded systems) cannot use this API, which is why [`RawWaker`](struct.RawWaker.html \"struct std::task::RawWaker\") exists as an alternative for those systems.\n\nTo construct a [`Waker`](struct.Waker.html \"struct std::task::Waker\") from some type `W` implementing this trait, wrap it in an [`Arc<W>`](../sync/struct.Arc.html \"struct std::sync::Arc\") and call `Waker::from()` on that. It is also possible to convert to [`RawWaker`](struct.RawWaker.html \"struct std::task::RawWaker\") in the same way.\n\n## [§](#examples)Examples\n\nA basic `block_on` function that takes a future and runs it to completion on the current thread.\n\n**Note:** This example trades correctness for simplicity. In order to prevent deadlocks, production-grade implementations will also need to handle intermediate calls to `thread::unpark` as well as nested invocations.\n\n```\nuse std::future::Future;\nuse std::sync::Arc;\nuse std::task::{Context, Poll, Wake};\nuse std::thread::{self, Thread};\nuse core::pin::pin;\n\n/// A waker that wakes up the current thread when called.\nstruct ThreadWaker(Thread);\n\nimpl Wake for ThreadWaker {\n    fn wake(self: Arc<Self>) {\n        self.0.unpark();\n    }\n}\n\n/// Run a future to completion on the current thread.\nfn block_on<T>(fut: impl Future<Output = T>) -> T {\n    // Pin the future so it can be polled.\n    let mut fut = pin!(fut);\n\n    // Create a new context to be passed to the future.\n    let t = thread::current();\n    let waker = Arc::new(ThreadWaker(t)).into();\n    let mut cx = Context::from_waker(&waker);\n\n    // Run the future to completion.\n    loop {\n        match fut.as_mut().poll(&mut cx) {\n            Poll::Ready(res) => return res,\n            Poll::Pending => thread::park(),\n        }\n    }\n}\n\nblock_on(async {\n    println!(\"Hi from inside a future!\");\n});\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::future::Future;%0A++++use+std::sync::Arc;%0A++++use+std::task::%7BContext,+Poll,+Wake%7D;%0A++++use+std::thread::%7Bself,+Thread%7D;%0A++++use+core::pin::pin;%0A++++%0A++++///+A+waker+that+wakes+up+the+current+thread+when+called.%0A++++struct+ThreadWaker(Thread);%0A++++%0A++++impl+Wake+for+ThreadWaker+%7B%0A++++++++fn+wake(self:+Arc%3CSelf%3E)+%7B%0A++++++++++++self.0.unpark();%0A++++++++%7D%0A++++%7D%0A++++%0A++++///+Run+a+future+to+completion+on+the+current+thread.%0A++++fn+block_on%3CT%3E(fut:+impl+Future%3COutput+=+T%3E)+-%3E+T+%7B%0A++++++++//+Pin+the+future+so+it+can+be+polled.%0A++++++++let+mut+fut+=+pin!(fut);%0A++++%0A++++++++//+Create+a+new+context+to+be+passed+to+the+future.%0A++++++++let+t+=+thread::current();%0A++++++++let+waker+=+Arc::new(ThreadWaker(t)).into();%0A++++++++let+mut+cx+=+Context::from_waker(%26waker);%0A++++%0A++++++++//+Run+the+future+to+completion.%0A++++++++loop+%7B%0A++++++++++++match+fut.as_mut().poll(%26mut+cx)+%7B%0A++++++++++++++++Poll::Ready(res)+=%3E+return+res,%0A++++++++++++++++Poll::Pending+=%3E+thread::park(),%0A++++++++++++%7D%0A++++++++%7D%0A++++%7D%0A++++%0A++++block_on(async+%7B%0A++++++++println!(%22Hi+from+inside+a+future!%22);%0A++++%7D);%0A%7D&edition=2021)\n\n1.51.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/task.rs.html#93)\n\nWake this task.\n\n1.51.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/task.rs.html#103)\n\nWake this task without consuming the waker.\n\nIf an executor supports a cheaper way to wake without consuming the waker, it should override this method. By default, it clones the [`Arc`](../sync/struct.Arc.html \"struct std::sync::Arc\") and calls [`wake`](about:blank/trait.Wake.html#tymethod.wake \"method std::task::Wake::wake\") on the clone.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"The implementation of waking a task on an executor.\"><title>Wake in std::task - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc trait\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">Wake</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">Wake</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#required-methods\">Required Methods</a></h3><ul class=\"block\"><li><a href=\"#tymethod.wake\">wake</a></li></ul><h3><a href=\"#provided-methods\">Provided Methods</a></h3><ul class=\"block\"><li><a href=\"#method.wake_by_ref\">wake_by_ref</a></li></ul><h3><a href=\"#object-safety\">Object Safety</a></h3><h3><a href=\"#implementors\">Implementors</a></h3></section><h2><a href=\"index.html\">In std::task</a></h2><h3><a href=\"index.html#macros\">Macros</a></h3><ul class=\"block macro\"><li><a href=\"macro.ready.html\">ready</a></li></ul><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.Context.html\">Context</a></li><li><a href=\"struct.ContextBuilder.html\">ContextBuilder</a></li><li><a href=\"struct.LocalWaker.html\">LocalWaker</a></li><li><a href=\"struct.RawWaker.html\">RawWaker</a></li><li><a href=\"struct.RawWakerVTable.html\">RawWakerVTable</a></li><li><a href=\"struct.Waker.html\">Waker</a></li></ul><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.Poll.html\">Poll</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.LocalWake.html\">LocalWake</a></li><li><a href=\"trait.Wake.html\">Wake</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Trait <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">task</a>::<wbr><a class=\"trait\" href=\"#\">Wake</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.51.0\">1.51.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/task.rs.html#90\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub trait Wake {\n    // Required method\n    fn <a href=\"#tymethod.wake\" class=\"fn\">wake</a>(self: <a class=\"struct\" href=\"../sync/struct.Arc.html\" title=\"struct std::sync::Arc\">Arc</a>&lt;Self&gt;);\n\n    // Provided method\n    fn <a href=\"#method.wake_by_ref\" class=\"fn\">wake_by_ref</a>(self: &amp;<a class=\"struct\" href=\"../sync/struct.Arc.html\" title=\"struct std::sync::Arc\">Arc</a>&lt;Self&gt;) { ... }\n}</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>The implementation of waking a task on an executor.</p>\n<p>This trait can be used to create a <a href=\"struct.Waker.html\" title=\"struct std::task::Waker\"><code>Waker</code></a>. An executor can define an\nimplementation of this trait, and use that to construct a <a href=\"struct.Waker.html\" title=\"struct std::task::Waker\"><code>Waker</code></a> to pass\nto the tasks that are executed on that executor.</p>\n<p>This trait is a memory-safe and ergonomic alternative to constructing a\n<a href=\"struct.RawWaker.html\" title=\"struct std::task::RawWaker\"><code>RawWaker</code></a>. It supports the common executor design in which the data used\nto wake up a task is stored in an <a href=\"../sync/struct.Arc.html\" title=\"struct std::sync::Arc\"><code>Arc</code></a>. Some executors (especially\nthose for embedded systems) cannot use this API, which is why <a href=\"struct.RawWaker.html\" title=\"struct std::task::RawWaker\"><code>RawWaker</code></a>\nexists as an alternative for those systems.</p>\n<p>To construct a <a href=\"struct.Waker.html\" title=\"struct std::task::Waker\"><code>Waker</code></a> from some type <code>W</code> implementing this trait,\nwrap it in an <a href=\"../sync/struct.Arc.html\" title=\"struct std::sync::Arc\"><code>Arc&lt;W&gt;</code></a> and call <code>Waker::from()</code> on that.\nIt is also possible to convert to <a href=\"struct.RawWaker.html\" title=\"struct std::task::RawWaker\"><code>RawWaker</code></a> in the same way.</p>\n<!-- Ideally we'd link to the `From` impl, but rustdoc doesn't generate any page for it within\n     `alloc` because `alloc` neither defines nor re-exports `From` or `Waker`, and we can't\n     link ../../std/task/struct.Waker.html#impl-From%3CArc%3CW,+Global%3E%3E-for-Waker\n     without getting a link-checking error in CI. -->\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<p>A basic <code>block_on</code> function that takes a future and runs it to completion on\nthe current thread.</p>\n<p><strong>Note:</strong> This example trades correctness for simplicity. In order to prevent\ndeadlocks, production-grade implementations will also need to handle\nintermediate calls to <code>thread::unpark</code> as well as nested invocations.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::future::Future;\n<span class=\"kw\">use </span>std::sync::Arc;\n<span class=\"kw\">use </span>std::task::{Context, Poll, Wake};\n<span class=\"kw\">use </span>std::thread::{<span class=\"self\">self</span>, Thread};\n<span class=\"kw\">use </span>core::pin::pin;\n\n<span class=\"doccomment\">/// A waker that wakes up the current thread when called.\n</span><span class=\"kw\">struct </span>ThreadWaker(Thread);\n\n<span class=\"kw\">impl </span>Wake <span class=\"kw\">for </span>ThreadWaker {\n    <span class=\"kw\">fn </span>wake(<span class=\"self\">self</span>: Arc&lt;<span class=\"self\">Self</span>&gt;) {\n        <span class=\"self\">self</span>.<span class=\"number\">0</span>.unpark();\n    }\n}\n\n<span class=\"doccomment\">/// Run a future to completion on the current thread.\n</span><span class=\"kw\">fn </span>block_on&lt;T&gt;(fut: <span class=\"kw\">impl </span>Future&lt;Output = T&gt;) -&gt; T {\n    <span class=\"comment\">// Pin the future so it can be polled.\n    </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>fut = <span class=\"macro\">pin!</span>(fut);\n\n    <span class=\"comment\">// Create a new context to be passed to the future.\n    </span><span class=\"kw\">let </span>t = thread::current();\n    <span class=\"kw\">let </span>waker = Arc::new(ThreadWaker(t)).into();\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>cx = Context::from_waker(<span class=\"kw-2\">&amp;</span>waker);\n\n    <span class=\"comment\">// Run the future to completion.\n    </span><span class=\"kw\">loop </span>{\n        <span class=\"kw\">match </span>fut.as_mut().poll(<span class=\"kw-2\">&amp;mut </span>cx) {\n            Poll::Ready(res) =&gt; <span class=\"kw\">return </span>res,\n            Poll::Pending =&gt; thread::park(),\n        }\n    }\n}\n\nblock_on(<span class=\"kw\">async </span>{\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"Hi from inside a future!\"</span>);\n});</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::future::Future;%0A++++use+std::sync::Arc;%0A++++use+std::task::%7BContext,+Poll,+Wake%7D;%0A++++use+std::thread::%7Bself,+Thread%7D;%0A++++use+core::pin::pin;%0A++++%0A++++///+A+waker+that+wakes+up+the+current+thread+when+called.%0A++++struct+ThreadWaker(Thread);%0A++++%0A++++impl+Wake+for+ThreadWaker+%7B%0A++++++++fn+wake(self:+Arc%3CSelf%3E)+%7B%0A++++++++++++self.0.unpark();%0A++++++++%7D%0A++++%7D%0A++++%0A++++///+Run+a+future+to+completion+on+the+current+thread.%0A++++fn+block_on%3CT%3E(fut:+impl+Future%3COutput+=+T%3E)+-%3E+T+%7B%0A++++++++//+Pin+the+future+so+it+can+be+polled.%0A++++++++let+mut+fut+=+pin!(fut);%0A++++%0A++++++++//+Create+a+new+context+to+be+passed+to+the+future.%0A++++++++let+t+=+thread::current();%0A++++++++let+waker+=+Arc::new(ThreadWaker(t)).into();%0A++++++++let+mut+cx+=+Context::from_waker(%26waker);%0A++++%0A++++++++//+Run+the+future+to+completion.%0A++++++++loop+%7B%0A++++++++++++match+fut.as_mut().poll(%26mut+cx)+%7B%0A++++++++++++++++Poll::Ready(res)+=%3E+return+res,%0A++++++++++++++++Poll::Pending+=%3E+thread::park(),%0A++++++++++++%7D%0A++++++++%7D%0A++++%7D%0A++++%0A++++block_on(async+%7B%0A++++++++println!(%22Hi+from+inside+a+future!%22);%0A++++%7D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><h2 id=\"required-methods\" class=\"section-header\">Required Methods<a href=\"#required-methods\" class=\"anchor\">§</a></h2><div class=\"methods\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.wake\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.51.0\">1.51.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/task.rs.html#93\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.wake\" class=\"fn\">wake</a>(self: <a class=\"struct\" href=\"../sync/struct.Arc.html\" title=\"struct std::sync::Arc\">Arc</a>&lt;Self&gt;)</h4></section></summary><div class=\"docblock\"><p>Wake this task.</p>\n</div></details></div><h2 id=\"provided-methods\" class=\"section-header\">Provided Methods<a href=\"#provided-methods\" class=\"anchor\">§</a></h2><div class=\"methods\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.wake_by_ref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.51.0\">1.51.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/task.rs.html#103\">source</a></span><h4 class=\"code-header\">fn <a href=\"#method.wake_by_ref\" class=\"fn\">wake_by_ref</a>(self: &amp;<a class=\"struct\" href=\"../sync/struct.Arc.html\" title=\"struct std::sync::Arc\">Arc</a>&lt;Self&gt;)</h4></section></summary><div class=\"docblock\"><p>Wake this task without consuming the waker.</p>\n<p>If an executor supports a cheaper way to wake without consuming the\nwaker, it should override this method. By default, it clones the\n<a href=\"../sync/struct.Arc.html\" title=\"struct std::sync::Arc\"><code>Arc</code></a> and calls <a href=\"trait.Wake.html#tymethod.wake\" title=\"method std::task::Wake::wake\"><code>wake</code></a> on the clone.</p>\n</div></details></div><h2 id=\"object-safety\" class=\"section-header\">Object Safety<a href=\"#object-safety\" class=\"anchor\">§</a></h2><div class=\"object-safety-info\">This trait is <b>not</b> <a href=\"https://doc.rust-lang.org/1.80.0/reference/items/traits.html#object-safety\">object safe</a>.</div><h2 id=\"implementors\" class=\"section-header\">Implementors<a href=\"#implementors\" class=\"anchor\">§</a></h2><div id=\"implementors-list\"></div><script src=\"../../trait.impl/alloc/task/trait.Wake.js\" async=\"\"></script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:25:48.037Z"
}