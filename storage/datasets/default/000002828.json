{
	"title": "VacantEntry in std::collections::btree_map - Rust",
	"url": "https://doc.rust-lang.org/stable/std/collections/btree_map/struct.VacantEntry.html",
	"markdown": "# VacantEntry in std::collections::btree\\_map - Rust\n\n```\npub struct VacantEntry<'a, K, V, A = Global>where\n    A: Allocator + Clone,{ /* private fields */ }\n```\n\nExpand description\n\nA view into a vacant entry in a `BTreeMap`. It is part of the [`Entry`](enum.Entry.html \"enum std::collections::btree_map::Entry\") enum.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/map/entry.rs.html#297)[§](#impl-VacantEntry%3C'a,+K,+V,+A%3E)\n\n1.10.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/map/entry.rs.html#310)\n\nGets a reference to the key that would be used when inserting a value through the VacantEntry.\n\n##### [§](#examples)Examples\n\n```\nuse std::collections::BTreeMap;\n\nlet mut map: BTreeMap<&str, usize> = BTreeMap::new();\nassert_eq!(map.entry(\"poneyland\").key(), &\"poneyland\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::BTreeMap;%0A++++%0A++++let+mut+map:+BTreeMap%3C%26str,+usize%3E+=+BTreeMap::new();%0A++++assert_eq!(map.entry(%22poneyland%22).key(),+%26%22poneyland%22);%0A%7D&edition=2021)\n\n1.12.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/map/entry.rs.html#329)\n\nTake ownership of the key.\n\n##### [§](#examples-1)Examples\n\n```\nuse std::collections::BTreeMap;\nuse std::collections::btree_map::Entry;\n\nlet mut map: BTreeMap<&str, usize> = BTreeMap::new();\n\nif let Entry::Vacant(v) = map.entry(\"poneyland\") {\n    v.into_key();\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::BTreeMap;%0A++++use+std::collections::btree_map::Entry;%0A++++%0A++++let+mut+map:+BTreeMap%3C%26str,+usize%3E+=+BTreeMap::new();%0A++++%0A++++if+let+Entry::Vacant(v)+=+map.entry(%22poneyland%22)+%7B%0A++++++++v.into_key();%0A++++%7D%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/map/entry.rs.html#351)\n\nSets the value of the entry with the `VacantEntry`’s key, and returns a mutable reference to it.\n\n##### [§](#examples-2)Examples\n\n```\nuse std::collections::BTreeMap;\nuse std::collections::btree_map::Entry;\n\nlet mut map: BTreeMap<&str, u32> = BTreeMap::new();\n\nif let Entry::Vacant(o) = map.entry(\"poneyland\") {\n    o.insert(37);\n}\nassert_eq!(map[\"poneyland\"], 37);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::BTreeMap;%0A++++use+std::collections::btree_map::Entry;%0A++++%0A++++let+mut+map:+BTreeMap%3C%26str,+u32%3E+=+BTreeMap::new();%0A++++%0A++++if+let+Entry::Vacant(o)+=+map.entry(%22poneyland%22)+%7B%0A++++++++o.insert(37);%0A++++%7D%0A++++assert_eq!(map%5B%22poneyland%22%5D,+37);%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140)[§](#impl-Any-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208)[§](#impl-Borrow%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216)[§](#impl-BorrowMut%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765)[§](#impl-From%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768)[§](#method.from)\n\nReturns the argument unchanged.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750)[§](#impl-Into%3CU%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758)[§](#method.into)\n\nCalls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of `[From](../../convert/trait.From.html \"trait std::convert::From\")<T> for U` chooses to do.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807)[§](#impl-TryFrom%3CU%3E-for-T)\n\n[§](#associatedtype.Error-1)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812)[§](#method.try_from)\n\nPerforms the conversion.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792)[§](#impl-TryInto%3CU%3E-for-T)\n\n[§](#associatedtype.Error)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797)[§](#method.try_into)\n\nPerforms the conversion.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"A view into a vacant entry in a `BTreeMap`. It is part of the `Entry` enum.\"><title>VacantEntry in std::collections::btree_map - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../../\" data-static-root-path=\"../../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc struct\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">VacantEntry</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">VacantEntry</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#implementations\">Methods</a></h3><ul class=\"block method\"><li><a href=\"#method.insert\">insert</a></li><li><a href=\"#method.into_key\">into_key</a></li><li><a href=\"#method.key\">key</a></li></ul><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-Debug-for-VacantEntry%3C'_,+K,+V,+A%3E\">Debug</a></li></ul><h3><a href=\"#synthetic-implementations\">Auto Trait Implementations</a></h3><ul class=\"block synthetic-implementation\"><li><a href=\"#impl-UnwindSafe-for-VacantEntry%3C'a,+K,+V,+A%3E\">!UnwindSafe</a></li><li><a href=\"#impl-Freeze-for-VacantEntry%3C'a,+K,+V,+A%3E\">Freeze</a></li><li><a href=\"#impl-RefUnwindSafe-for-VacantEntry%3C'a,+K,+V,+A%3E\">RefUnwindSafe</a></li><li><a href=\"#impl-Send-for-VacantEntry%3C'a,+K,+V,+A%3E\">Send</a></li><li><a href=\"#impl-Sync-for-VacantEntry%3C'a,+K,+V,+A%3E\">Sync</a></li><li><a href=\"#impl-Unpin-for-VacantEntry%3C'a,+K,+V,+A%3E\">Unpin</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-Any-for-T\">Any</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-T\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-T\">BorrowMut&lt;T&gt;</a></li><li><a href=\"#impl-From%3CT%3E-for-T\">From&lt;T&gt;</a></li><li><a href=\"#impl-Into%3CU%3E-for-T\">Into&lt;U&gt;</a></li><li><a href=\"#impl-TryFrom%3CU%3E-for-T\">TryFrom&lt;U&gt;</a></li><li><a href=\"#impl-TryInto%3CU%3E-for-T\">TryInto&lt;U&gt;</a></li></ul></section><h2><a href=\"index.html\">In std::collections::btree_map</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.BTreeMap.html\">BTreeMap</a></li><li><a href=\"struct.Cursor.html\">Cursor</a></li><li><a href=\"struct.CursorMut.html\">CursorMut</a></li><li><a href=\"struct.CursorMutKey.html\">CursorMutKey</a></li><li><a href=\"struct.ExtractIf.html\">ExtractIf</a></li><li><a href=\"struct.IntoIter.html\">IntoIter</a></li><li><a href=\"struct.IntoKeys.html\">IntoKeys</a></li><li><a href=\"struct.IntoValues.html\">IntoValues</a></li><li><a href=\"struct.Iter.html\">Iter</a></li><li><a href=\"struct.IterMut.html\">IterMut</a></li><li><a href=\"struct.Keys.html\">Keys</a></li><li><a href=\"struct.OccupiedEntry.html\">OccupiedEntry</a></li><li><a href=\"struct.OccupiedError.html\">OccupiedError</a></li><li><a href=\"struct.Range.html\">Range</a></li><li><a href=\"struct.RangeMut.html\">RangeMut</a></li><li><a href=\"struct.UnorderedKeyError.html\">UnorderedKeyError</a></li><li><a href=\"struct.VacantEntry.html\">VacantEntry</a></li><li><a href=\"struct.Values.html\">Values</a></li><li><a href=\"struct.ValuesMut.html\">ValuesMut</a></li></ul><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.Entry.html\">Entry</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Struct <a href=\"../../index.html\">std</a>::<wbr><a href=\"../index.html\">collections</a>::<wbr><a href=\"index.html\">btree_map</a>::<wbr><a class=\"struct\" href=\"#\">VacantEntry</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/map/entry.rs.html#48-53\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub struct VacantEntry&lt;'a, K, V, A = <a class=\"struct\" href=\"../../alloc/struct.Global.html\" title=\"struct std::alloc::Global\">Global</a>&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a> + <a class=\"trait\" href=\"../../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div>{ <span class=\"comment\">/* private fields */</span> }</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>A view into a vacant entry in a <code>BTreeMap</code>.\nIt is part of the <a href=\"enum.Entry.html\" title=\"enum std::collections::btree_map::Entry\"><code>Entry</code></a> enum.</p>\n</div></details><h2 id=\"implementations\" class=\"section-header\">Implementations<a href=\"#implementations\" class=\"anchor\">§</a></h2><div id=\"implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-VacantEntry%3C'a,+K,+V,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/map/entry.rs.html#297\">source</a><a href=\"#impl-VacantEntry%3C'a,+K,+V,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, K, V, A&gt; <a class=\"struct\" href=\"struct.VacantEntry.html\" title=\"struct std::collections::btree_map::VacantEntry\">VacantEntry</a>&lt;'a, K, V, A&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"../../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,\n    A: <a class=\"trait\" href=\"../../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a> + <a class=\"trait\" href=\"../../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.key\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/map/entry.rs.html#310\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.key\" class=\"fn\">key</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;K</a></h4></section></summary><div class=\"docblock\"><p>Gets a reference to the key that would be used when inserting a value\nthrough the VacantEntry.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::BTreeMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map: BTreeMap&lt;<span class=\"kw-2\">&amp;</span>str, usize&gt; = BTreeMap::new();\n<span class=\"macro\">assert_eq!</span>(map.entry(<span class=\"string\">\"poneyland\"</span>).key(), <span class=\"kw-2\">&amp;</span><span class=\"string\">\"poneyland\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::BTreeMap;%0A++++%0A++++let+mut+map:+BTreeMap%3C%26str,+usize%3E+=+BTreeMap::new();%0A++++assert_eq!(map.entry(%22poneyland%22).key(),+%26%22poneyland%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_key\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/map/entry.rs.html#329\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.into_key\" class=\"fn\">into_key</a>(self) -&gt; K</h4></section></summary><div class=\"docblock\"><p>Take ownership of the key.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::BTreeMap;\n<span class=\"kw\">use </span>std::collections::btree_map::Entry;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map: BTreeMap&lt;<span class=\"kw-2\">&amp;</span>str, usize&gt; = BTreeMap::new();\n\n<span class=\"kw\">if let </span>Entry::Vacant(v) = map.entry(<span class=\"string\">\"poneyland\"</span>) {\n    v.into_key();\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::BTreeMap;%0A++++use+std::collections::btree_map::Entry;%0A++++%0A++++let+mut+map:+BTreeMap%3C%26str,+usize%3E+=+BTreeMap::new();%0A++++%0A++++if+let+Entry::Vacant(v)+=+map.entry(%22poneyland%22)+%7B%0A++++++++v.into_key();%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.insert\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/map/entry.rs.html#351\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.insert\" class=\"fn\">insert</a>(self, value: V) -&gt; <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;'a mut V</a></h4></section></summary><div class=\"docblock\"><p>Sets the value of the entry with the <code>VacantEntry</code>’s key,\nand returns a mutable reference to it.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::BTreeMap;\n<span class=\"kw\">use </span>std::collections::btree_map::Entry;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map: BTreeMap&lt;<span class=\"kw-2\">&amp;</span>str, u32&gt; = BTreeMap::new();\n\n<span class=\"kw\">if let </span>Entry::Vacant(o) = map.entry(<span class=\"string\">\"poneyland\"</span>) {\n    o.insert(<span class=\"number\">37</span>);\n}\n<span class=\"macro\">assert_eq!</span>(map[<span class=\"string\">\"poneyland\"</span>], <span class=\"number\">37</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::BTreeMap;%0A++++use+std::collections::btree_map::Entry;%0A++++%0A++++let+mut+map:+BTreeMap%3C%26str,+u32%3E+=+BTreeMap::new();%0A++++%0A++++if+let+Entry::Vacant(o)+=+map.entry(%22poneyland%22)+%7B%0A++++++++o.insert(37);%0A++++%7D%0A++++assert_eq!(map%5B%22poneyland%22%5D,+37);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details></div><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">§</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-VacantEntry%3C'_,+K,+V,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/map/entry.rs.html#67\">source</a></span><a href=\"#impl-Debug-for-VacantEntry%3C'_,+K,+V,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, A&gt; <a class=\"trait\" href=\"../../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"struct.VacantEntry.html\" title=\"struct std::collections::btree_map::VacantEntry\">VacantEntry</a>&lt;'_, K, V, A&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"../../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> + <a class=\"trait\" href=\"../../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,\n    A: <a class=\"trait\" href=\"../../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a> + <a class=\"trait\" href=\"../../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/map/entry.rs.html#68\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"../../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"../../fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../../fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details></div><h2 id=\"synthetic-implementations\" class=\"section-header\">Auto Trait Implementations<a href=\"#synthetic-implementations\" class=\"anchor\">§</a></h2><div id=\"synthetic-implementations-list\"><section id=\"impl-Freeze-for-VacantEntry%3C'a,+K,+V,+A%3E\" class=\"impl\"><a href=\"#impl-Freeze-for-VacantEntry%3C'a,+K,+V,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, K, V, A&gt; <a class=\"trait\" href=\"../../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"struct\" href=\"struct.VacantEntry.html\" title=\"struct std::collections::btree_map::VacantEntry\">VacantEntry</a>&lt;'a, K, V, A&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"../../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a>,\n    A: <a class=\"trait\" href=\"../../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a>,</div></h3></section><section id=\"impl-RefUnwindSafe-for-VacantEntry%3C'a,+K,+V,+A%3E\" class=\"impl\"><a href=\"#impl-RefUnwindSafe-for-VacantEntry%3C'a,+K,+V,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, K, V, A&gt; <a class=\"trait\" href=\"../../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"struct\" href=\"struct.VacantEntry.html\" title=\"struct std::collections::btree_map::VacantEntry\">VacantEntry</a>&lt;'a, K, V, A&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"../../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a>,\n    A: <a class=\"trait\" href=\"../../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a>,\n    V: <a class=\"trait\" href=\"../../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a>,</div></h3></section><section id=\"impl-Send-for-VacantEntry%3C'a,+K,+V,+A%3E\" class=\"impl\"><a href=\"#impl-Send-for-VacantEntry%3C'a,+K,+V,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, K, V, A&gt; <a class=\"trait\" href=\"../../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"struct\" href=\"struct.VacantEntry.html\" title=\"struct std::collections::btree_map::VacantEntry\">VacantEntry</a>&lt;'a, K, V, A&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"../../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a>,\n    A: <a class=\"trait\" href=\"../../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a>,\n    V: <a class=\"trait\" href=\"../../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a>,</div></h3></section><section id=\"impl-Sync-for-VacantEntry%3C'a,+K,+V,+A%3E\" class=\"impl\"><a href=\"#impl-Sync-for-VacantEntry%3C'a,+K,+V,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, K, V, A&gt; <a class=\"trait\" href=\"../../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"struct.VacantEntry.html\" title=\"struct std::collections::btree_map::VacantEntry\">VacantEntry</a>&lt;'a, K, V, A&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"../../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a>,\n    A: <a class=\"trait\" href=\"../../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a>,\n    V: <a class=\"trait\" href=\"../../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a>,</div></h3></section><section id=\"impl-Unpin-for-VacantEntry%3C'a,+K,+V,+A%3E\" class=\"impl\"><a href=\"#impl-Unpin-for-VacantEntry%3C'a,+K,+V,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, K, V, A&gt; <a class=\"trait\" href=\"../../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"struct\" href=\"struct.VacantEntry.html\" title=\"struct std::collections::btree_map::VacantEntry\">VacantEntry</a>&lt;'a, K, V, A&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"../../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a>,\n    A: <a class=\"trait\" href=\"../../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a>,</div></h3></section><section id=\"impl-UnwindSafe-for-VacantEntry%3C'a,+K,+V,+A%3E\" class=\"impl\"><a href=\"#impl-UnwindSafe-for-VacantEntry%3C'a,+K,+V,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, K, V, A = <a class=\"struct\" href=\"../../alloc/struct.Global.html\" title=\"struct std::alloc::Global\">Global</a>&gt; !<a class=\"trait\" href=\"../../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"struct.VacantEntry.html\" title=\"struct std::collections::btree_map::VacantEntry\">VacantEntry</a>&lt;'a, K, V, A&gt;</h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">§</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Any-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a><a href=\"#impl-Any-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"../../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#141\">source</a><a href=\"#method.type_id\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../any/trait.Any.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../../any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\">Gets the <code>TypeId</code> of <code>self</code>. <a href=\"../../any/trait.Any.html#tymethod.type_id\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Borrow%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208\">source</a><a href=\"#impl-Borrow%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#210\">source</a><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"../../borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216\">source</a><a href=\"#impl-BorrowMut%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#217\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"../../borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765\">source</a><a href=\"#impl-From%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the argument unchanged.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Into%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750\">source</a><a href=\"#impl-Into%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758\">source</a><a href=\"#method.into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; U</h4></section></summary><div class=\"docblock\"><p>Calls <code>U::from(self)</code>.</p>\n<p>That is, this conversion is whatever the implementation of\n<code><a href=\"../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for U</code> chooses to do.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryFrom%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807\">source</a><a href=\"#impl-TryFrom%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"../../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812\">source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: U) -&gt; <a class=\"enum\" href=\"../../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, &lt;T as <a class=\"trait\" href=\"../../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt;&gt;::<a class=\"associatedtype\" href=\"../../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryInto%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792\">source</a><a href=\"#impl-TryInto%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../../convert/trait.TryInto.html\" title=\"trait std::convert::TryInto\">TryInto</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../../convert/trait.TryInto.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = &lt;U as <a class=\"trait\" href=\"../../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797\">source</a><a href=\"#method.try_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.TryInto.html#tymethod.try_into\" class=\"fn\">try_into</a>(self) -&gt; <a class=\"enum\" href=\"../../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;U, &lt;U as <a class=\"trait\" href=\"../../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details></div></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:26:02.283Z"
}