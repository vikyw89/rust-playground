{
	"title": "from_fn in std::iter - Rust",
	"url": "https://doc.rust-lang.org/stable/std/iter/fn.from_fn.html",
	"markdown": "# from\\_fn in std::iter - Rust\n\n## Function [std](../index.html)::[iter](index.html)::[from\\_fn](#)\n\n1.34.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/sources/from_fn.rs.html#43-45) ·\n\n```\npub fn from_fn<T, F>(f: F) -> FromFn<F> ⓘwhere\n    F: FnMut() -> Option<T>,\n```\n\nExpand description\n\nCreates a new iterator where each iteration calls the provided closure `F: FnMut() -> Option<T>`.\n\nThis allows creating a custom iterator with any behavior without using the more verbose syntax of creating a dedicated type and implementing the [`Iterator`](trait.Iterator.html \"trait std::iter::Iterator\") trait for it.\n\nNote that the `FromFn` iterator doesn’t make assumptions about the behavior of the closure, and therefore conservatively does not implement [`FusedIterator`](trait.FusedIterator.html \"trait std::iter::FusedIterator\"), or override [`Iterator::size_hint()`](about:blank/trait.Iterator.html#method.size_hint \"method std::iter::Iterator::size_hint\") from its default `(0, None)`.\n\nThe closure can use captures and its environment to track state across iterations. Depending on how the iterator is used, this may require specifying the [`move`](../../std/keyword.move.html) keyword on the closure.\n\n## [§](#examples)Examples\n\nLet’s re-implement the counter iterator from [module-level documentation](index.html \"mod std::iter\"):\n\n```\nlet mut count = 0;\nlet counter = std::iter::from_fn(move || {\n    // Increment our count. This is why we started at zero.\n    count += 1;\n\n    // Check to see if we've finished counting or not.\n    if count < 6 {\n        Some(count)\n    } else {\n        None\n    }\n});\nassert_eq!(counter.collect::<Vec<_>>(), &[1, 2, 3, 4, 5]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+count+=+0;%0A++++let+counter+=+std::iter::from_fn(move+%7C%7C+%7B%0A++++++++//+Increment+our+count.+This+is+why+we+started+at+zero.%0A++++++++count+%2B=+1;%0A++++%0A++++++++//+Check+to+see+if+we%27ve+finished+counting+or+not.%0A++++++++if+count+%3C+6+%7B%0A++++++++++++Some(count)%0A++++++++%7D+else+%7B%0A++++++++++++None%0A++++++++%7D%0A++++%7D);%0A++++assert_eq!(counter.collect::%3CVec%3C_%3E%3E(),+%26%5B1,+2,+3,+4,+5%5D);%0A%7D&edition=2021)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Creates a new iterator where each iteration calls the provided closure `F: FnMut() -> Option<T>`.\"><title>from_fn in std::iter - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc fn\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><div class=\"sidebar-elems\"><h2><a href=\"index.html\">In std::iter</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.ArrayChunks.html\">ArrayChunks</a></li><li><a href=\"struct.ByRefSized.html\">ByRefSized</a></li><li><a href=\"struct.Chain.html\">Chain</a></li><li><a href=\"struct.Cloned.html\">Cloned</a></li><li><a href=\"struct.Copied.html\">Copied</a></li><li><a href=\"struct.Cycle.html\">Cycle</a></li><li><a href=\"struct.Empty.html\">Empty</a></li><li><a href=\"struct.Enumerate.html\">Enumerate</a></li><li><a href=\"struct.Filter.html\">Filter</a></li><li><a href=\"struct.FilterMap.html\">FilterMap</a></li><li><a href=\"struct.FlatMap.html\">FlatMap</a></li><li><a href=\"struct.Flatten.html\">Flatten</a></li><li><a href=\"struct.FromFn.html\">FromFn</a></li><li><a href=\"struct.Fuse.html\">Fuse</a></li><li><a href=\"struct.Inspect.html\">Inspect</a></li><li><a href=\"struct.Intersperse.html\">Intersperse</a></li><li><a href=\"struct.IntersperseWith.html\">IntersperseWith</a></li><li><a href=\"struct.Map.html\">Map</a></li><li><a href=\"struct.MapWhile.html\">MapWhile</a></li><li><a href=\"struct.MapWindows.html\">MapWindows</a></li><li><a href=\"struct.Once.html\">Once</a></li><li><a href=\"struct.OnceWith.html\">OnceWith</a></li><li><a href=\"struct.Peekable.html\">Peekable</a></li><li><a href=\"struct.Repeat.html\">Repeat</a></li><li><a href=\"struct.RepeatN.html\">RepeatN</a></li><li><a href=\"struct.RepeatWith.html\">RepeatWith</a></li><li><a href=\"struct.Rev.html\">Rev</a></li><li><a href=\"struct.Scan.html\">Scan</a></li><li><a href=\"struct.Skip.html\">Skip</a></li><li><a href=\"struct.SkipWhile.html\">SkipWhile</a></li><li><a href=\"struct.StepBy.html\">StepBy</a></li><li><a href=\"struct.Successors.html\">Successors</a></li><li><a href=\"struct.Take.html\">Take</a></li><li><a href=\"struct.TakeWhile.html\">TakeWhile</a></li><li><a href=\"struct.Zip.html\">Zip</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.DoubleEndedIterator.html\">DoubleEndedIterator</a></li><li><a href=\"trait.ExactSizeIterator.html\">ExactSizeIterator</a></li><li><a href=\"trait.Extend.html\">Extend</a></li><li><a href=\"trait.FromIterator.html\">FromIterator</a></li><li><a href=\"trait.FusedIterator.html\">FusedIterator</a></li><li><a href=\"trait.IntoIterator.html\">IntoIterator</a></li><li><a href=\"trait.Iterator.html\">Iterator</a></li><li><a href=\"trait.Product.html\">Product</a></li><li><a href=\"trait.Step.html\">Step</a></li><li><a href=\"trait.Sum.html\">Sum</a></li><li><a href=\"trait.TrustedLen.html\">TrustedLen</a></li><li><a href=\"trait.TrustedStep.html\">TrustedStep</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.chain.html\">chain</a></li><li><a href=\"fn.empty.html\">empty</a></li><li><a href=\"fn.from_coroutine.html\">from_coroutine</a></li><li><a href=\"fn.from_fn.html\">from_fn</a></li><li><a href=\"fn.once.html\">once</a></li><li><a href=\"fn.once_with.html\">once_with</a></li><li><a href=\"fn.repeat.html\">repeat</a></li><li><a href=\"fn.repeat_n.html\">repeat_n</a></li><li><a href=\"fn.repeat_with.html\">repeat_with</a></li><li><a href=\"fn.successors.html\">successors</a></li><li><a href=\"fn.zip.html\">zip</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Function <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">iter</a>::<wbr><a class=\"fn\" href=\"#\">from_fn</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/sources/from_fn.rs.html#43-45\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub fn from_fn&lt;T, F&gt;(f: F) -&gt; <a class=\"struct\" href=\"struct.FromFn.html\" title=\"struct std::iter::FromFn\">FromFn</a>&lt;F&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"FromFn<F>\">ⓘ</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>() -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;,</div></code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Creates a new iterator where each iteration calls the provided closure\n<code>F: FnMut() -&gt; Option&lt;T&gt;</code>.</p>\n<p>This allows creating a custom iterator with any behavior\nwithout using the more verbose syntax of creating a dedicated type\nand implementing the <a href=\"trait.Iterator.html\" title=\"trait std::iter::Iterator\"><code>Iterator</code></a> trait for it.</p>\n<p>Note that the <code>FromFn</code> iterator doesn’t make assumptions about the behavior of the closure,\nand therefore conservatively does not implement <a href=\"trait.FusedIterator.html\" title=\"trait std::iter::FusedIterator\"><code>FusedIterator</code></a>,\nor override <a href=\"trait.Iterator.html#method.size_hint\" title=\"method std::iter::Iterator::size_hint\"><code>Iterator::size_hint()</code></a> from its default <code>(0, None)</code>.</p>\n<p>The closure can use captures and its environment to track state across iterations. Depending on\nhow the iterator is used, this may require specifying the <a href=\"../../std/keyword.move.html\"><code>move</code></a> keyword on the closure.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<p>Let’s re-implement the counter iterator from <a href=\"index.html\" title=\"mod std::iter\">module-level documentation</a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>count = <span class=\"number\">0</span>;\n<span class=\"kw\">let </span>counter = std::iter::from_fn(<span class=\"kw\">move </span>|| {\n    <span class=\"comment\">// Increment our count. This is why we started at zero.\n    </span>count += <span class=\"number\">1</span>;\n\n    <span class=\"comment\">// Check to see if we've finished counting or not.\n    </span><span class=\"kw\">if </span>count &lt; <span class=\"number\">6 </span>{\n        <span class=\"prelude-val\">Some</span>(count)\n    } <span class=\"kw\">else </span>{\n        <span class=\"prelude-val\">None\n    </span>}\n});\n<span class=\"macro\">assert_eq!</span>(counter.collect::&lt;Vec&lt;<span class=\"kw\">_</span>&gt;&gt;(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+count+=+0;%0A++++let+counter+=+std::iter::from_fn(move+%7C%7C+%7B%0A++++++++//+Increment+our+count.+This+is+why+we+started+at+zero.%0A++++++++count+%2B=+1;%0A++++%0A++++++++//+Check+to+see+if+we've+finished+counting+or+not.%0A++++++++if+count+%3C+6+%7B%0A++++++++++++Some(count)%0A++++++++%7D+else+%7B%0A++++++++++++None%0A++++++++%7D%0A++++%7D);%0A++++assert_eq!(counter.collect::%3CVec%3C_%3E%3E(),+%26%5B1,+2,+3,+4,+5%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><script type=\"text/json\" id=\"notable-traits-data\">{\"FromFn<F>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"struct.FromFn.html\\\" title=\\\"struct std::iter::FromFn\\\">FromFn</a>&lt;F&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;T, F&gt; <a class=\\\"trait\\\" href=\\\"trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"struct.FromFn.html\\\" title=\\\"struct std::iter::FromFn\\\">FromFn</a>&lt;F&gt;<div class=\\\"where\\\">where\\n    F: <a class=\\\"trait\\\" href=\\\"../ops/trait.FnMut.html\\\" title=\\\"trait std::ops::FnMut\\\">FnMut</a>() -&gt; <a class=\\\"enum\\\" href=\\\"../option/enum.Option.html\\\" title=\\\"enum std::option::Option\\\">Option</a>&lt;T&gt;,</div></div><div class=\\\"where\\\">    type <a href=\\\"trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = T;</div>\"}</script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:23:53.845Z"
}