{
	"title": "Attributes - The Rust Reference",
	"url": "https://doc.rust-lang.org/stable/reference/attributes.html",
	"markdown": "# Attributes - The Rust Reference\n\n> **Syntax**  \n> _InnerAttribute_ :  \n>    `#` `!` `[` _Attr_ `]`\n> \n> _OuterAttribute_ :  \n>    `#` `[` _Attr_ `]`\n> \n> _Attr_ :  \n>    [_SimplePath_](about:blank/paths.html#simple-paths) _AttrInput_?\n> \n> _AttrInput_ :  \n>       [_DelimTokenTree_](macros.html)  \n>    | `=` [_Expression_](expressions.html)\n\nAn _attribute_ is a general, free-form metadatum that is interpreted according to name, convention, language, and compiler version. Attributes are modeled on Attributes in [ECMA-335](https://www.ecma-international.org/publications-and-standards/standards/ecma-335/), with the syntax coming from [ECMA-334](https://www.ecma-international.org/publications-and-standards/standards/ecma-334/) (C#).\n\n_Inner attributes_, written with a bang (`!`) after the hash (`#`), apply to the item that the attribute is declared within. _Outer attributes_, written without the bang after the hash, apply to the thing that follows the attribute.\n\nThe attribute consists of a path to the attribute, followed by an optional delimited token tree whose interpretation is defined by the attribute. Attributes other than macro attributes also allow the input to be an equals sign (`=`) followed by an expression. See the [meta item syntax](#meta-item-attribute-syntax) below for more details.\n\nAttributes can be classified into the following kinds:\n\n-   [Built-in attributes](#built-in-attributes-index)\n-   [Macro attributes](about:blank/procedural-macros.html#attribute-macros)\n-   [Derive macro helper attributes](about:blank/procedural-macros.html#derive-macro-helper-attributes)\n-   [Tool attributes](#tool-attributes)\n\nAttributes may be applied to many things in the language:\n\n-   All [item declarations](items.html) accept outer attributes while [external blocks](items/external-blocks.html), [functions](items/functions.html), [implementations](items/implementations.html), and [modules](items/modules.html) accept inner attributes.\n-   Most [statements](statements.html) accept outer attributes (see [Expression Attributes](about:blank/expressions.html#expression-attributes) for limitations on expression statements).\n-   [Block expressions](expressions/block-expr.html) accept outer and inner attributes, but only when they are the outer expression of an [expression statement](about:blank/statements.html#expression-statements) or the final expression of another block expression.\n-   [Enum](items/enumerations.html) variants and [struct](items/structs.html) and [union](items/unions.html) fields accept outer attributes.\n-   [Match expression arms](expressions/match-expr.html) accept outer attributes.\n-   [Generic lifetime or type parameter](items/generics.html) accept outer attributes.\n-   Expressions accept outer attributes in limited situations, see [Expression Attributes](about:blank/expressions.html#expression-attributes) for details.\n-   [Function](items/functions.html), [closure](expressions/closure-expr.html) and [function pointer](types/function-pointer.html) parameters accept outer attributes. This includes attributes on variadic parameters denoted with `...` in function pointers and [external blocks](about:blank/items/external-blocks.html#variadic-functions).\n\nSome examples of attributes:\n\n```rust\n#![allow(unused)]\nfn main() {\n// General metadata applied to the enclosing module or crate.\n#![crate_type = \"lib\"]\n\n// A function marked as a unit test\n#[test]\nfn test_foo() {\n    /* ... */\n}\n\n// A conditionally-compiled module\n#[cfg(target_os = \"linux\")]\nmod bar {\n    /* ... */\n}\n\n// A lint attribute used to suppress a warning/error\n#[allow(non_camel_case_types)]\ntype int8_t = i8;\n\n// Inner attribute applies to the entire function.\nfn some_unused_variables() {\n  #![allow(unused_variables)]\n\n  let x = ();\n  let y = ();\n  let z = ();\n}\n}\n```\n\nA \"meta item\" is the syntax used for the _Attr_ rule by most [built-in attributes](#built-in-attributes-index). It has the following grammar:\n\n> **Syntax**  \n> _MetaItem_ :  \n>       [_SimplePath_](about:blank/paths.html#simple-paths)  \n>    | [_SimplePath_](about:blank/paths.html#simple-paths) `=` [_Expression_](expressions.html)  \n>    | [_SimplePath_](about:blank/paths.html#simple-paths) `(` _MetaSeq_? `)`\n> \n> _MetaSeq_ :  \n>    _MetaItemInner_ ( `,` MetaItemInner )\\* `,`?\n> \n> _MetaItemInner_ :  \n>       _MetaItem_  \n>    | [_Expression_](expressions.html)\n\nExpressions in meta items must macro-expand to literal expressions, which must not include integer or float type suffixes. Expressions which are not literal expressions will be syntactically accepted (and can be passed to proc-macros), but will be rejected after parsing.\n\nNote that if the attribute appears within another macro, it will be expanded after that outer macro. For example, the following code will expand the `Serialize` proc-macro first, which must preserve the `include_str!` call in order for it to be expanded:\n\n```rust\n#[derive(Serialize)]\nstruct Foo {\n    #[doc = include_str!(\"x.md\")]\n    x: u32\n}\n```\n\nAdditionally, macros in attributes will be expanded only after all other attributes applied to the item:\n\n```rust\n#[macro_attr1] // expanded first\n#[doc = mac!()] // `mac!` is expanded fourth.\n#[macro_attr2] // expanded second\n#[derive(MacroDerive1, MacroDerive2)] // expanded third\nfn foo() {}\n```\n\nVarious built-in attributes use different subsets of the meta item syntax to specify their inputs. The following grammar rules show some commonly used forms:\n\n> **Syntax**  \n> _MetaWord_:  \n>    [IDENTIFIER](identifiers.html)\n> \n> _MetaNameValueStr_:  \n>    [IDENTIFIER](identifiers.html) `=` ([STRING\\_LITERAL](about:blank/tokens.html#string-literals) | [RAW\\_STRING\\_LITERAL](about:blank/tokens.html#raw-string-literals))\n> \n> _MetaListPaths_:  \n>    [IDENTIFIER](identifiers.html) `(` ( [_SimplePath_](about:blank/paths.html#simple-paths) (`,` [_SimplePath_](about:blank/paths.html#simple-paths))\\* `,`? )? `)`\n> \n> _MetaListIdents_:  \n>    [IDENTIFIER](identifiers.html) `(` ( [IDENTIFIER](identifiers.html) (`,` [IDENTIFIER](identifiers.html))\\* `,`? )? `)`\n> \n> _MetaListNameValueStr_:  \n>    [IDENTIFIER](identifiers.html) `(` ( _MetaNameValueStr_ (`,` _MetaNameValueStr_)\\* `,`? )? `)`\n\nSome examples of meta items are:\n\n| Style | Example |\n| --- | --- |\n| _MetaWord_ | `no_std` |\n| _MetaNameValueStr_ | `doc = \"example\"` |\n| _MetaListPaths_ | `allow(unused, clippy::inline_always)` |\n| _MetaListIdents_ | `macro_use(foo, bar)` |\n| _MetaListNameValueStr_ | `link(name = \"CoreFoundation\", kind = \"framework\")` |\n\n## [Active and inert attributes](#active-and-inert-attributes)\n\nAn attribute is either active or inert. During attribute processing, _active attributes_ remove themselves from the thing they are on while _inert attributes_ stay on.\n\nThe [`cfg`](about:blank/conditional-compilation.html#the-cfg-attribute) and [`cfg_attr`](about:blank/conditional-compilation.html#the-cfg_attr-attribute) attributes are active. The [`test`](about:blank/attributes/testing.html#the-test-attribute) attribute is inert when compiling for tests and active otherwise. [Attribute macros](about:blank/procedural-macros.html#attribute-macros) are active. All other attributes are inert.\n\nThe compiler may allow attributes for external tools where each tool resides in its own namespace in the [tool prelude](about:blank/names/preludes.html#tool-prelude). The first segment of the attribute path is the name of the tool, with one or more additional segments whose interpretation is up to the tool.\n\nWhen a tool is not in use, the tool's attributes are accepted without a warning. When the tool is in use, the tool is responsible for processing and interpretation of its attributes.\n\nTool attributes are not available if the [`no_implicit_prelude`](about:blank/names/preludes.html#the-no_implicit_prelude-attribute) attribute is used.\n\n```rust\n#![allow(unused)]\nfn main() {\n// Tells the rustfmt tool to not format the following element.\n#[rustfmt::skip]\nstruct S {\n}\n\n// Controls the \"cyclomatic complexity\" threshold for the clippy tool.\n#[clippy::cyclomatic_complexity = \"100\"]\npub fn f() {}\n}\n```\n\n> Note: `rustc` currently recognizes the tools \"clippy\", \"rustfmt\" and \"diagnostic\".\n\n## [Built-in attributes index](#built-in-attributes-index)\n\nThe following is an index of all built-in attributes.\n\n-   Conditional compilation\n    -   [`cfg`](about:blank/conditional-compilation.html#the-cfg-attribute) — Controls conditional compilation.\n    -   [`cfg_attr`](about:blank/conditional-compilation.html#the-cfg_attr-attribute) — Conditionally includes attributes.\n-   Testing\n    -   [`test`](about:blank/attributes/testing.html#the-test-attribute) — Marks a function as a test.\n    -   [`ignore`](about:blank/attributes/testing.html#the-ignore-attribute) — Disables a test function.\n    -   [`should_panic`](about:blank/attributes/testing.html#the-should_panic-attribute) — Indicates a test should generate a panic.\n-   Derive\n    -   [`derive`](attributes/derive.html) — Automatic trait implementations.\n    -   [`automatically_derived`](about:blank/attributes/derive.html#the-automatically_derived-attribute) — Marker for implementations created by `derive`.\n-   Macros\n    -   [`macro_export`](about:blank/macros-by-example.html#path-based-scope) — Exports a `macro_rules` macro for cross-crate usage.\n    -   [`macro_use`](about:blank/macros-by-example.html#the-macro_use-attribute) — Expands macro visibility, or imports macros from other crates.\n    -   [`proc_macro`](about:blank/procedural-macros.html#function-like-procedural-macros) — Defines a function-like macro.\n    -   [`proc_macro_derive`](about:blank/procedural-macros.html#derive-macros) — Defines a derive macro.\n    -   [`proc_macro_attribute`](about:blank/procedural-macros.html#attribute-macros) — Defines an attribute macro.\n-   Diagnostics\n    -   [`allow`](about:blank/attributes/diagnostics.html#lint-check-attributes), [`warn`](about:blank/attributes/diagnostics.html#lint-check-attributes), [`deny`](about:blank/attributes/diagnostics.html#lint-check-attributes), [`forbid`](about:blank/attributes/diagnostics.html#lint-check-attributes) — Alters the default lint level.\n    -   [`deprecated`](about:blank/attributes/diagnostics.html#the-deprecated-attribute) — Generates deprecation notices.\n    -   [`must_use`](about:blank/attributes/diagnostics.html#the-must_use-attribute) — Generates a lint for unused values.\n    -   [`diagnostic::on_unimplemented`](about:blank/attributes/diagnostics.html#the-diagnosticon_unimplemented-attribute) — Hints the compiler to emit a certain error message if a trait is not implemented.\n-   ABI, linking, symbols, and FFI\n    -   [`link`](about:blank/items/external-blocks.html#the-link-attribute) — Specifies a native library to link with an `extern` block.\n    -   [`link_name`](about:blank/items/external-blocks.html#the-link_name-attribute) — Specifies the name of the symbol for functions or statics in an `extern` block.\n    -   [`link_ordinal`](about:blank/items/external-blocks.html#the-link_ordinal-attribute) — Specifies the ordinal of the symbol for functions or statics in an `extern` block.\n    -   [`no_link`](about:blank/items/extern-crates.html#the-no_link-attribute) — Prevents linking an extern crate.\n    -   [`repr`](about:blank/type-layout.html#representations) — Controls type layout.\n    -   [`crate_type`](linkage.html) — Specifies the type of crate (library, executable, etc.).\n    -   [`no_main`](about:blank/crates-and-source-files.html#the-no_main-attribute) — Disables emitting the `main` symbol.\n    -   [`export_name`](about:blank/abi.html#the-export_name-attribute) — Specifies the exported symbol name for a function or static.\n    -   [`link_section`](about:blank/abi.html#the-link_section-attribute) — Specifies the section of an object file to use for a function or static.\n    -   [`no_mangle`](about:blank/abi.html#the-no_mangle-attribute) — Disables symbol name encoding.\n    -   [`used`](about:blank/abi.html#the-used-attribute) — Forces the compiler to keep a static item in the output object file.\n    -   [`crate_name`](about:blank/crates-and-source-files.html#the-crate_name-attribute) — Specifies the crate name.\n-   Code generation\n    -   [`inline`](about:blank/attributes/codegen.html#the-inline-attribute) — Hint to inline code.\n    -   [`cold`](about:blank/attributes/codegen.html#the-cold-attribute) — Hint that a function is unlikely to be called.\n    -   [`no_builtins`](about:blank/attributes/codegen.html#the-no_builtins-attribute) — Disables use of certain built-in functions.\n    -   [`target_feature`](about:blank/attributes/codegen.html#the-target_feature-attribute) — Configure platform-specific code generation.\n    -   [`track_caller`](about:blank/attributes/codegen.html#the-track_caller-attribute) - Pass the parent call location to `std::panic::Location::caller()`.\n    -   [`instruction_set`](about:blank/attributes/codegen.html#the-instruction_set-attribute) - Specify the instruction set used to generate a functions code\n-   Documentation\n    -   `doc` — Specifies documentation. See [The Rustdoc Book](../rustdoc/the-doc-attribute.html) for more information. [Doc comments](about:blank/comments.html#doc-comments) are transformed into `doc` attributes.\n-   Preludes\n    -   [`no_std`](about:blank/names/preludes.html#the-no_std-attribute) — Removes std from the prelude.\n    -   [`no_implicit_prelude`](about:blank/names/preludes.html#the-no_implicit_prelude-attribute) — Disables prelude lookups within a module.\n-   Modules\n    -   [`path`](about:blank/items/modules.html#the-path-attribute) — Specifies the filename for a module.\n-   Limits\n    -   [`recursion_limit`](about:blank/attributes/limits.html#the-recursion_limit-attribute) — Sets the maximum recursion limit for certain compile-time operations.\n    -   [`type_length_limit`](about:blank/attributes/limits.html#the-type_length_limit-attribute) — Sets the maximum size of a polymorphic type.\n-   Runtime\n    -   [`panic_handler`](about:blank/runtime.html#the-panic_handler-attribute) — Sets the function to handle panics.\n    -   [`global_allocator`](about:blank/runtime.html#the-global_allocator-attribute) — Sets the global memory allocator.\n    -   [`windows_subsystem`](about:blank/runtime.html#the-windows_subsystem-attribute) — Specifies the windows subsystem to link with.\n-   Features\n    -   `feature` — Used to enable unstable or experimental compiler features. See [The Unstable Book](../unstable-book/index.html) for features implemented in `rustc`.\n-   Type System\n    -   [`non_exhaustive`](about:blank/attributes/type_system.html#the-non_exhaustive-attribute) — Indicate that a type will have more fields/variants added in future.\n-   Debugger\n    -   [`debugger_visualizer`](about:blank/attributes/debugger.html#the-debugger_visualizer-attribute) — Embeds a file that specifies debugger output for a type.\n    -   [`collapse_debuginfo`](about:blank/attributes/debugger.html#the-collapse_debuginfo-attribute) — Controls how macro invocations are encoded in debuginfo.",
	"html": "<!DOCTYPE html><html lang=\"en\" class=\"light\" dir=\"ltr\"><head>\n        <!-- Book generated using mdBook -->\n        <meta charset=\"UTF-8\">\n        <title>Attributes - The Rust Reference</title>\n\n\n        <!-- Custom HTML head -->\n        \n        <meta name=\"description\" content=\"\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <meta name=\"theme-color\" content=\"rgb(255, 255, 255)\">\n\n        <link rel=\"icon\" href=\"favicon.svg\">\n        <link rel=\"shortcut icon\" href=\"favicon.png\">\n        <link rel=\"stylesheet\" href=\"css/variables.css\">\n        <link rel=\"stylesheet\" href=\"css/general.css\">\n        <link rel=\"stylesheet\" href=\"css/chrome.css\">\n        <link rel=\"stylesheet\" href=\"css/print.css\" media=\"print\">\n\n        <!-- Fonts -->\n        <link rel=\"stylesheet\" href=\"FontAwesome/css/font-awesome.css\">\n        <link rel=\"stylesheet\" href=\"fonts/fonts.css\">\n\n        <!-- Highlight.js Stylesheets -->\n        <link rel=\"stylesheet\" href=\"highlight.css\">\n        <link rel=\"stylesheet\" href=\"tomorrow-night.css\" disabled=\"\">\n        <link rel=\"stylesheet\" href=\"ayu-highlight.css\" disabled=\"\">\n\n        <!-- Custom theme stylesheets -->\n        <link rel=\"stylesheet\" href=\"theme/reference.css\">\n\n    </head>\n    <body class=\"js sidebar-visible\">\n    <div id=\"body-container\">\n        <!-- Provide site root to javascript -->\n        <script>\n            var path_to_root = \"\";\n            var default_theme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"navy\" : \"light\";\n        </script>\n\n        <!-- Work around some values being stored in localStorage wrapped in quotes -->\n        <script>\n            try {\n                var theme = localStorage.getItem('mdbook-theme');\n                var sidebar = localStorage.getItem('mdbook-sidebar');\n\n                if (theme.startsWith('\"') && theme.endsWith('\"')) {\n                    localStorage.setItem('mdbook-theme', theme.slice(1, theme.length - 1));\n                }\n\n                if (sidebar.startsWith('\"') && sidebar.endsWith('\"')) {\n                    localStorage.setItem('mdbook-sidebar', sidebar.slice(1, sidebar.length - 1));\n                }\n            } catch (e) { }\n        </script>\n\n        <!-- Set the theme before any content is loaded, prevents flash -->\n        <script>\n            var theme;\n            try { theme = localStorage.getItem('mdbook-theme'); } catch(e) { }\n            if (theme === null || theme === undefined) { theme = default_theme; }\n            var html = document.querySelector('html');\n            html.classList.remove('light')\n            html.classList.add(theme);\n            var body = document.querySelector('body');\n            body.classList.remove('no-js')\n            body.classList.add('js');\n        </script>\n\n        <input type=\"checkbox\" id=\"sidebar-toggle-anchor\" class=\"hidden\">\n\n        <!-- Hide / unhide sidebar before it is displayed -->\n        <script>\n            var body = document.querySelector('body');\n            var sidebar = null;\n            var sidebar_toggle = document.getElementById(\"sidebar-toggle-anchor\");\n            if (document.body.clientWidth >= 1080) {\n                try { sidebar = localStorage.getItem('mdbook-sidebar'); } catch(e) { }\n                sidebar = sidebar || 'visible';\n            } else {\n                sidebar = 'hidden';\n            }\n            sidebar_toggle.checked = sidebar === 'visible';\n            body.classList.remove('sidebar-visible');\n            body.classList.add(\"sidebar-\" + sidebar);\n        </script>\n\n        <nav id=\"sidebar\" class=\"sidebar\" aria-label=\"Table of contents\" aria-hidden=\"false\">\n            <div class=\"sidebar-scrollbox\">\n                <ol class=\"chapter\"><li class=\"chapter-item expanded affix \"><a href=\"introduction.html\" tabindex=\"0\">Introduction</a></li><li class=\"chapter-item expanded \"><a href=\"notation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.</strong> Notation</a></li><li class=\"chapter-item expanded \"><a href=\"lexical-structure.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.</strong> Lexical structure</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"input-format.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.1.</strong> Input format</a></li><li class=\"chapter-item expanded \"><a href=\"keywords.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.2.</strong> Keywords</a></li><li class=\"chapter-item expanded \"><a href=\"identifiers.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.3.</strong> Identifiers</a></li><li class=\"chapter-item expanded \"><a href=\"comments.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.4.</strong> Comments</a></li><li class=\"chapter-item expanded \"><a href=\"whitespace.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.5.</strong> Whitespace</a></li><li class=\"chapter-item expanded \"><a href=\"tokens.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.6.</strong> Tokens</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"macros.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.</strong> Macros</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"macros-by-example.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.1.</strong> Macros By Example</a></li><li class=\"chapter-item expanded \"><a href=\"procedural-macros.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.2.</strong> Procedural Macros</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"crates-and-source-files.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.</strong> Crates and source files</a></li><li class=\"chapter-item expanded \"><a href=\"conditional-compilation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.</strong> Conditional compilation</a></li><li class=\"chapter-item expanded \"><a href=\"items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.</strong> Items</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"items/modules.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.1.</strong> Modules</a></li><li class=\"chapter-item expanded \"><a href=\"items/extern-crates.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.2.</strong> Extern crates</a></li><li class=\"chapter-item expanded \"><a href=\"items/use-declarations.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.3.</strong> Use declarations</a></li><li class=\"chapter-item expanded \"><a href=\"items/functions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.4.</strong> Functions</a></li><li class=\"chapter-item expanded \"><a href=\"items/type-aliases.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.5.</strong> Type aliases</a></li><li class=\"chapter-item expanded \"><a href=\"items/structs.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.6.</strong> Structs</a></li><li class=\"chapter-item expanded \"><a href=\"items/enumerations.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.7.</strong> Enumerations</a></li><li class=\"chapter-item expanded \"><a href=\"items/unions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.8.</strong> Unions</a></li><li class=\"chapter-item expanded \"><a href=\"items/constant-items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.9.</strong> Constant items</a></li><li class=\"chapter-item expanded \"><a href=\"items/static-items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.10.</strong> Static items</a></li><li class=\"chapter-item expanded \"><a href=\"items/traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.11.</strong> Traits</a></li><li class=\"chapter-item expanded \"><a href=\"items/implementations.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.12.</strong> Implementations</a></li><li class=\"chapter-item expanded \"><a href=\"items/external-blocks.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.13.</strong> External blocks</a></li><li class=\"chapter-item expanded \"><a href=\"items/generics.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.14.</strong> Generic parameters</a></li><li class=\"chapter-item expanded \"><a href=\"items/associated-items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.15.</strong> Associated Items</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"attributes.html\" class=\"active\" tabindex=\"0\"><strong aria-hidden=\"true\">7.</strong> Attributes</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"attributes/testing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.1.</strong> Testing</a></li><li class=\"chapter-item expanded \"><a href=\"attributes/derive.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.2.</strong> Derive</a></li><li class=\"chapter-item expanded \"><a href=\"attributes/diagnostics.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.3.</strong> Diagnostics</a></li><li class=\"chapter-item expanded \"><a href=\"attributes/codegen.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.4.</strong> Code generation</a></li><li class=\"chapter-item expanded \"><a href=\"attributes/limits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.5.</strong> Limits</a></li><li class=\"chapter-item expanded \"><a href=\"attributes/type_system.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.6.</strong> Type System</a></li><li class=\"chapter-item expanded \"><a href=\"attributes/debugger.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.7.</strong> Debugger</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"statements-and-expressions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.</strong> Statements and expressions</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"statements.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.1.</strong> Statements</a></li><li class=\"chapter-item expanded \"><a href=\"expressions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.</strong> Expressions</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"expressions/literal-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.1.</strong> Literal expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/path-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.2.</strong> Path expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/block-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.3.</strong> Block expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/operator-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.4.</strong> Operator expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/grouped-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.5.</strong> Grouped expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/array-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.6.</strong> Array and index expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/tuple-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.7.</strong> Tuple and index expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/struct-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.8.</strong> Struct expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/call-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.9.</strong> Call expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/method-call-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.10.</strong> Method call expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/field-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.11.</strong> Field access expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/closure-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.12.</strong> Closure expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/loop-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.13.</strong> Loop expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/range-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.14.</strong> Range expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/if-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.15.</strong> If and if let expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/match-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.16.</strong> Match expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/return-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.17.</strong> Return expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/await-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.18.</strong> Await expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/underscore-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.19.</strong> Underscore expressions</a></li></ol></li></ol></li><li class=\"chapter-item expanded \"><a href=\"patterns.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.</strong> Patterns</a></li><li class=\"chapter-item expanded \"><a href=\"type-system.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.</strong> Type system</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"types.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.</strong> Types</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"types/boolean.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.1.</strong> Boolean type</a></li><li class=\"chapter-item expanded \"><a href=\"types/numeric.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.2.</strong> Numeric types</a></li><li class=\"chapter-item expanded \"><a href=\"types/textual.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.3.</strong> Textual types</a></li><li class=\"chapter-item expanded \"><a href=\"types/never.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.4.</strong> Never type</a></li><li class=\"chapter-item expanded \"><a href=\"types/tuple.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.5.</strong> Tuple types</a></li><li class=\"chapter-item expanded \"><a href=\"types/array.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.6.</strong> Array types</a></li><li class=\"chapter-item expanded \"><a href=\"types/slice.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.7.</strong> Slice types</a></li><li class=\"chapter-item expanded \"><a href=\"types/struct.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.8.</strong> Struct types</a></li><li class=\"chapter-item expanded \"><a href=\"types/enum.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.9.</strong> Enumerated types</a></li><li class=\"chapter-item expanded \"><a href=\"types/union.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.10.</strong> Union types</a></li><li class=\"chapter-item expanded \"><a href=\"types/function-item.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.11.</strong> Function item types</a></li><li class=\"chapter-item expanded \"><a href=\"types/closure.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.12.</strong> Closure types</a></li><li class=\"chapter-item expanded \"><a href=\"types/pointer.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.13.</strong> Pointer types</a></li><li class=\"chapter-item expanded \"><a href=\"types/function-pointer.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.14.</strong> Function pointer types</a></li><li class=\"chapter-item expanded \"><a href=\"types/trait-object.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.15.</strong> Trait object types</a></li><li class=\"chapter-item expanded \"><a href=\"types/impl-trait.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.16.</strong> Impl trait type</a></li><li class=\"chapter-item expanded \"><a href=\"types/parameters.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.17.</strong> Type parameters</a></li><li class=\"chapter-item expanded \"><a href=\"types/inferred.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.18.</strong> Inferred type</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"dynamically-sized-types.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.2.</strong> Dynamically Sized Types</a></li><li class=\"chapter-item expanded \"><a href=\"type-layout.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.3.</strong> Type layout</a></li><li class=\"chapter-item expanded \"><a href=\"interior-mutability.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.4.</strong> Interior mutability</a></li><li class=\"chapter-item expanded \"><a href=\"subtyping.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.5.</strong> Subtyping and Variance</a></li><li class=\"chapter-item expanded \"><a href=\"trait-bounds.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.6.</strong> Trait and lifetime bounds</a></li><li class=\"chapter-item expanded \"><a href=\"type-coercions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.7.</strong> Type coercions</a></li><li class=\"chapter-item expanded \"><a href=\"destructors.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.8.</strong> Destructors</a></li><li class=\"chapter-item expanded \"><a href=\"lifetime-elision.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.9.</strong> Lifetime elision</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"special-types-and-traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.</strong> Special types and traits</a></li><li class=\"chapter-item expanded \"><a href=\"names.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.</strong> Names</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"names/namespaces.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.1.</strong> Namespaces</a></li><li class=\"chapter-item expanded \"><a href=\"names/scopes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.2.</strong> Scopes</a></li><li class=\"chapter-item expanded \"><a href=\"names/preludes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.3.</strong> Preludes</a></li><li class=\"chapter-item expanded \"><a href=\"paths.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.4.</strong> Paths</a></li><li class=\"chapter-item expanded \"><a href=\"names/name-resolution.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.5.</strong> Name resolution</a></li><li class=\"chapter-item expanded \"><a href=\"visibility-and-privacy.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.6.</strong> Visibility and privacy</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"memory-model.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.</strong> Memory model</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"memory-allocation-and-lifetime.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.1.</strong> Memory allocation and lifetime</a></li><li class=\"chapter-item expanded \"><a href=\"variables.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.2.</strong> Variables</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"linkage.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.</strong> Linkage</a></li><li class=\"chapter-item expanded \"><a href=\"inline-assembly.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.</strong> Inline assembly</a></li><li class=\"chapter-item expanded \"><a href=\"unsafety.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.</strong> Unsafety</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"unsafe-keyword.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.1.</strong> The unsafe keyword</a></li><li class=\"chapter-item expanded \"><a href=\"behavior-considered-undefined.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.2.</strong> Behavior considered undefined</a></li><li class=\"chapter-item expanded \"><a href=\"behavior-not-considered-unsafe.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.3.</strong> Behavior not considered unsafe</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"const_eval.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.</strong> Constant Evaluation</a></li><li class=\"chapter-item expanded \"><a href=\"abi.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.</strong> Application Binary Interface</a></li><li class=\"chapter-item expanded \"><a href=\"runtime.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.</strong> The Rust runtime</a></li><li class=\"chapter-item expanded \"><a href=\"appendices.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.</strong> Appendices</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"macro-ambiguity.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.1.</strong> Macro Follow-Set Ambiguity Formal Specification</a></li><li class=\"chapter-item expanded \"><a href=\"influences.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.2.</strong> Influences</a></li><li class=\"chapter-item expanded \"><a href=\"glossary.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.3.</strong> Glossary</a></li></ol></li></ol>\n            </div>\n            <div id=\"sidebar-resize-handle\" class=\"sidebar-resize-handle\">\n                <div class=\"sidebar-resize-indicator\"></div>\n            </div>\n        </nav>\n\n        <!-- Track and set sidebar scroll position -->\n        <script>\n            var sidebarScrollbox = document.querySelector('#sidebar .sidebar-scrollbox');\n            sidebarScrollbox.addEventListener('click', function(e) {\n                if (e.target.tagName === 'A') {\n                    sessionStorage.setItem('sidebar-scroll', sidebarScrollbox.scrollTop);\n                }\n            }, { passive: true });\n            var sidebarScrollTop = sessionStorage.getItem('sidebar-scroll');\n            sessionStorage.removeItem('sidebar-scroll');\n            if (sidebarScrollTop) {\n                // preserve sidebar scroll position when navigating via links within sidebar\n                sidebarScrollbox.scrollTop = sidebarScrollTop;\n            } else {\n                // scroll sidebar to current active section when navigating via \"next/previous chapter\" buttons\n                var activeSection = document.querySelector('#sidebar .active');\n                if (activeSection) {\n                    activeSection.scrollIntoView({ block: 'center' });\n                }\n            }\n        </script>\n\n        <div id=\"page-wrapper\" class=\"page-wrapper\">\n\n            <div class=\"page\">\n                                <div id=\"menu-bar-hover-placeholder\"></div>\n                <div id=\"menu-bar\" class=\"menu-bar\" style=\"top: 0px;\">\n                    <div class=\"left-buttons\">\n                        <label id=\"sidebar-toggle\" class=\"icon-button\" for=\"sidebar-toggle-anchor\" title=\"Toggle Table of Contents\" aria-label=\"Toggle Table of Contents\" aria-controls=\"sidebar\" aria-expanded=\"true\">\n                            <i class=\"fa fa-bars\"></i>\n                        </label>\n                        <button id=\"theme-toggle\" class=\"icon-button\" type=\"button\" title=\"Change theme\" aria-label=\"Change theme\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-controls=\"theme-list\">\n                            <i class=\"fa fa-paint-brush\"></i>\n                        </button>\n                        <ul id=\"theme-list\" class=\"theme-popup\" aria-label=\"Themes\" role=\"menu\">\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme theme-selected\" id=\"light\">Light</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"rust\">Rust</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"coal\">Coal</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"navy\">Navy</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"ayu\">Ayu</button></li>\n                        </ul>\n                        <button id=\"search-toggle\" class=\"icon-button\" type=\"button\" title=\"Search. (Shortkey: s)\" aria-label=\"Toggle Searchbar\" aria-expanded=\"false\" aria-keyshortcuts=\"S\" aria-controls=\"searchbar\">\n                            <i class=\"fa fa-search\"></i>\n                        </button>\n                    </div>\n\n                    <h1 class=\"menu-title\">The Rust Reference</h1>\n\n                    <div class=\"right-buttons\">\n                        <a href=\"print.html\" title=\"Print this book\" aria-label=\"Print this book\">\n                            <i id=\"print-button\" class=\"fa fa-print\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/reference/\" title=\"Git repository\" aria-label=\"Git repository\">\n                            <i id=\"git-repository-button\" class=\"fa fa-github\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/reference/edit/master/src/attributes.md\" title=\"Suggest an edit\" aria-label=\"Suggest an edit\">\n                            <i id=\"git-edit-button\" class=\"fa fa-edit\"></i>\n                        </a>\n\n                    </div>\n                </div>\n\n                <div id=\"search-wrapper\" class=\"hidden\">\n                    <form id=\"searchbar-outer\" class=\"searchbar-outer\">\n                        <input type=\"search\" id=\"searchbar\" name=\"searchbar\" placeholder=\"Search this book ...\" aria-controls=\"searchresults-outer\" aria-describedby=\"searchresults-header\">\n                    </form>\n                    <div id=\"searchresults-outer\" class=\"searchresults-outer hidden\">\n                        <div id=\"searchresults-header\" class=\"searchresults-header\"></div>\n                        <ul id=\"searchresults\">\n                        </ul>\n                    </div>\n                </div>\n\n                <!-- Apply ARIA attributes after the sidebar and the sidebar toggle button are added to the DOM -->\n                <script>\n                    document.getElementById('sidebar-toggle').setAttribute('aria-expanded', sidebar === 'visible');\n                    document.getElementById('sidebar').setAttribute('aria-hidden', sidebar !== 'visible');\n                    Array.from(document.querySelectorAll('#sidebar a')).forEach(function(link) {\n                        link.setAttribute('tabIndex', sidebar === 'visible' ? 0 : -1);\n                    });\n                </script>\n\n                <div id=\"content\" class=\"content\">\n                    <main>\n                        <script>\n(function() {\n    var fragments = {\n        \"#cold-attribute\": \"attributes/codegen.html#the-cold-attribute\",\n        \"#conditional-compilation\": \"conditional-compilation.html\",\n        \"#deprecation\": \"attributes/diagnostics.html#the-deprecated-attribute\",\n        \"#derive\": \"attributes/derive.html\",\n        \"#documentation\": \"../rustdoc/the-doc-attribute.html\",\n        \"#ffi-attributes\": \"attributes.html#built-in-attributes-index\",\n        \"#inline-attribute\": \"attributes/codegen.html#the-inline-attribute\",\n        \"#lint-check-attributes\": \"attributes/diagnostics.html#lint-check-attributes\",\n        \"#macro-related-attributes\": \"attributes.html#built-in-attributes-index\",\n        \"#miscellaneous-attributes\": \"attributes.html#built-in-attributes-index\",\n        \"#must_use\": \"attributes/diagnostics.html#the-must_use-attribute\",\n        \"#optimization-hints\": \"attributes/codegen.html#optimization-hints\",\n        \"#path\": \"items/modules.html#the-path-attribute\",\n        \"#preludes\": \"crates-and-source-files.html#preludes-and-no_std\",\n        \"#testing\": \"attributes/testing.html\",\n        \"#tool-lint-attributes\": \"attributes/diagnostics.html#tool-lint-attributes\",\n        \"#crate-only-attributes\": \"attributes.html#built-in-attributes-index\",\n    };\n    var target = fragments[window.location.hash];\n    if (target) {\n        var url = window.location.toString();\n        var base = url.substring(0, url.lastIndexOf('/'));\n        window.location.replace(base + \"/\" + target);\n    }\n})();\n</script>\n<h1 id=\"attributes\"><a class=\"header\" href=\"#attributes\">Attributes</a></h1>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>InnerAttribute</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">#</code> <code class=\"hljs\">!</code> <code class=\"hljs\">[</code> <em>Attr</em> <code class=\"hljs\">]</code></p>\n<p><em>OuterAttribute</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">#</code> <code class=\"hljs\">[</code> <em>Attr</em> <code class=\"hljs\">]</code></p>\n<p><em>Attr</em> :<br>\n&nbsp;&nbsp; <a href=\"paths.html#simple-paths\"><em>SimplePath</em></a> <em>AttrInput</em><sup>?</sup></p>\n<p><em>AttrInput</em> :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; <a href=\"macros.html\"><em>DelimTokenTree</em></a><br>\n&nbsp;&nbsp; | <code class=\"hljs\">=</code> <a href=\"expressions.html\"><em>Expression</em></a></p>\n</blockquote>\n<p>An <em>attribute</em> is a general, free-form metadatum that is interpreted according\nto name, convention, language, and compiler version. Attributes are modeled\non Attributes in <a href=\"https://www.ecma-international.org/publications-and-standards/standards/ecma-335/\">ECMA-335</a>, with the syntax coming from <a href=\"https://www.ecma-international.org/publications-and-standards/standards/ecma-334/\">ECMA-334</a> (C#).</p>\n<p><em>Inner attributes</em>, written with a bang (<code class=\"hljs\">!</code>) after the hash (<code class=\"hljs\">#</code>), apply to the\nitem that the attribute is declared within. <em>Outer attributes</em>, written without\nthe bang after the hash, apply to the thing that follows the attribute.</p>\n<p>The attribute consists of a path to the attribute, followed by an optional\ndelimited token tree whose interpretation is defined by the attribute.\nAttributes other than macro attributes also allow the input to be an equals\nsign (<code class=\"hljs\">=</code>) followed by an expression. See the <a href=\"#meta-item-attribute-syntax\">meta item\nsyntax</a> below for more details.</p>\n<p>Attributes can be classified into the following kinds:</p>\n<ul>\n<li><a href=\"#built-in-attributes-index\">Built-in attributes</a></li>\n<li><a href=\"procedural-macros.html#attribute-macros\">Macro attributes</a></li>\n<li><a href=\"procedural-macros.html#derive-macro-helper-attributes\">Derive macro helper attributes</a></li>\n<li><a href=\"#tool-attributes\">Tool attributes</a></li>\n</ul>\n<p>Attributes may be applied to many things in the language:</p>\n<ul>\n<li>All <a href=\"items.html\">item declarations</a> accept outer attributes while <a href=\"items/external-blocks.html\">external blocks</a>,\n<a href=\"items/functions.html\">functions</a>, <a href=\"items/implementations.html\">implementations</a>, and <a href=\"items/modules.html\">modules</a> accept inner attributes.</li>\n<li>Most <a href=\"statements.html\">statements</a> accept outer attributes (see <a href=\"expressions.html#expression-attributes\">Expression Attributes</a> for\nlimitations on expression statements).</li>\n<li><a href=\"expressions/block-expr.html\">Block expressions</a> accept outer and inner attributes, but only when they are\nthe outer expression of an <a href=\"statements.html#expression-statements\">expression statement</a> or the final expression of\nanother block expression.</li>\n<li><a href=\"items/enumerations.html\">Enum</a> variants and <a href=\"items/structs.html\">struct</a> and <a href=\"items/unions.html\">union</a> fields accept outer attributes.</li>\n<li><a href=\"expressions/match-expr.html\">Match expression arms</a> accept outer attributes.</li>\n<li><a href=\"items/generics.html\">Generic lifetime or type parameter</a> accept outer attributes.</li>\n<li>Expressions accept outer attributes in limited situations, see <a href=\"expressions.html#expression-attributes\">Expression\nAttributes</a> for details.</li>\n<li><a href=\"items/functions.html\">Function</a>, <a href=\"expressions/closure-expr.html\">closure</a> and <a href=\"types/function-pointer.html\">function pointer</a>\nparameters accept outer attributes. This includes attributes on variadic parameters\ndenoted with <code class=\"hljs\">...</code> in function pointers and <a href=\"items/external-blocks.html#variadic-functions\">external blocks</a>.</li>\n</ul>\n<p>Some examples of attributes:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">// General metadata applied to the enclosing module or crate.</span>\n<span class=\"hljs-meta\">#![crate_type = <span class=\"hljs-meta-string\">\"lib\"</span>]</span>\n\n<span class=\"hljs-comment\">// A function marked as a unit test</span>\n<span class=\"hljs-meta\">#[test]</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">test_foo</span></span>() {\n    <span class=\"hljs-comment\">/* ... */</span>\n}\n\n<span class=\"hljs-comment\">// A conditionally-compiled module</span>\n<span class=\"hljs-meta\">#[cfg(target_os = <span class=\"hljs-meta-string\">\"linux\"</span>)]</span>\n<span class=\"hljs-keyword\">mod</span> bar {\n    <span class=\"hljs-comment\">/* ... */</span>\n}\n\n<span class=\"hljs-comment\">// A lint attribute used to suppress a warning/error</span>\n<span class=\"hljs-meta\">#[allow(non_camel_case_types)]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">int8_t</span></span> = <span class=\"hljs-built_in\">i8</span>;\n\n<span class=\"hljs-comment\">// Inner attribute applies to the entire function.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">some_unused_variables</span></span>() {\n  <span class=\"hljs-meta\">#![allow(unused_variables)]</span>\n\n  <span class=\"hljs-keyword\">let</span> x = ();\n  <span class=\"hljs-keyword\">let</span> y = ();\n  <span class=\"hljs-keyword\">let</span> z = ();\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"meta-item-attribute-syntax\"><a class=\"header\" href=\"#meta-item-attribute-syntax\">Meta Item Attribute Syntax</a></h2>\n<p>A \"meta item\" is the syntax used for the <em>Attr</em> rule by most <a href=\"#built-in-attributes-index\">built-in\nattributes</a>. It has the following grammar:</p>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>MetaItem</em> :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; <a href=\"paths.html#simple-paths\"><em>SimplePath</em></a><br>\n&nbsp;&nbsp; | <a href=\"paths.html#simple-paths\"><em>SimplePath</em></a> <code class=\"hljs\">=</code> <a href=\"expressions.html\"><em>Expression</em></a><br>\n&nbsp;&nbsp; | <a href=\"paths.html#simple-paths\"><em>SimplePath</em></a> <code class=\"hljs\">(</code> <em>MetaSeq</em><sup>?</sup> <code class=\"hljs\">)</code></p>\n<p><em>MetaSeq</em> :<br>\n&nbsp;&nbsp; <em>MetaItemInner</em> ( <code class=\"hljs\">,</code> MetaItemInner )<sup>*</sup> <code class=\"hljs\">,</code><sup>?</sup></p>\n<p><em>MetaItemInner</em> :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; <em>MetaItem</em><br>\n&nbsp;&nbsp; | <a href=\"expressions.html\"><em>Expression</em></a></p>\n</blockquote>\n<p>Expressions in meta items must macro-expand to literal expressions, which must not\ninclude integer or float type suffixes. Expressions which are not literal expressions\nwill be syntactically accepted (and can be passed to proc-macros), but will be rejected after parsing.</p>\n<p>Note that if the attribute appears within another macro, it will be expanded\nafter that outer macro. For example, the following code will expand the\n<code class=\"hljs\">Serialize</code> proc-macro first, which must preserve the <code class=\"hljs\">include_str!</code> call in\norder for it to be expanded:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-meta\">#[derive(Serialize)]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Foo</span></span> {\n    <span class=\"hljs-meta\">#[doc = include_str!(<span class=\"hljs-meta-string\">\"x.md\"</span>)]</span>\n    x: <span class=\"hljs-built_in\">u32</span>\n}</code></pre>\n<p>Additionally, macros in attributes will be expanded only after all other attributes applied to the item:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-meta\">#[macro_attr1]</span> <span class=\"hljs-comment\">// expanded first</span>\n<span class=\"hljs-meta\">#[doc = mac!()]</span> <span class=\"hljs-comment\">// `mac!` is expanded fourth.</span>\n<span class=\"hljs-meta\">#[macro_attr2]</span> <span class=\"hljs-comment\">// expanded second</span>\n<span class=\"hljs-meta\">#[derive(MacroDerive1, MacroDerive2)]</span> <span class=\"hljs-comment\">// expanded third</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>() {}</code></pre>\n<p>Various built-in attributes use different subsets of the meta item syntax to\nspecify their inputs. The following grammar rules show some commonly used\nforms:</p>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>MetaWord</em>:<br>\n&nbsp;&nbsp; <a href=\"identifiers.html\">IDENTIFIER</a></p>\n<p><em>MetaNameValueStr</em>:<br>\n&nbsp;&nbsp; <a href=\"identifiers.html\">IDENTIFIER</a> <code class=\"hljs\">=</code> (<a href=\"tokens.html#string-literals\">STRING_LITERAL</a> | <a href=\"tokens.html#raw-string-literals\">RAW_STRING_LITERAL</a>)</p>\n<p><em>MetaListPaths</em>:<br>\n&nbsp;&nbsp; <a href=\"identifiers.html\">IDENTIFIER</a> <code class=\"hljs\">(</code> ( <a href=\"paths.html#simple-paths\"><em>SimplePath</em></a> (<code class=\"hljs\">,</code> <a href=\"paths.html#simple-paths\"><em>SimplePath</em></a>)* <code class=\"hljs\">,</code><sup>?</sup> )<sup>?</sup> <code class=\"hljs\">)</code></p>\n<p><em>MetaListIdents</em>:<br>\n&nbsp;&nbsp; <a href=\"identifiers.html\">IDENTIFIER</a> <code class=\"hljs\">(</code> ( <a href=\"identifiers.html\">IDENTIFIER</a> (<code class=\"hljs\">,</code> <a href=\"identifiers.html\">IDENTIFIER</a>)* <code class=\"hljs\">,</code><sup>?</sup> )<sup>?</sup> <code class=\"hljs\">)</code></p>\n<p><em>MetaListNameValueStr</em>:<br>\n&nbsp;&nbsp; <a href=\"identifiers.html\">IDENTIFIER</a> <code class=\"hljs\">(</code> ( <em>MetaNameValueStr</em> (<code class=\"hljs\">,</code> <em>MetaNameValueStr</em>)* <code class=\"hljs\">,</code><sup>?</sup> )<sup>?</sup> <code class=\"hljs\">)</code></p>\n</blockquote>\n<p>Some examples of meta items are:</p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Style</th><th>Example</th></tr></thead><tbody>\n<tr><td><em>MetaWord</em></td><td><code class=\"hljs\">no_std</code></td></tr>\n<tr><td><em>MetaNameValueStr</em></td><td><code class=\"hljs\">doc = \"example\"</code></td></tr>\n<tr><td><em>MetaListPaths</em></td><td><code class=\"hljs\">allow(unused, clippy::inline_always)</code></td></tr>\n<tr><td><em>MetaListIdents</em></td><td><code class=\"hljs\">macro_use(foo, bar)</code></td></tr>\n<tr><td><em>MetaListNameValueStr</em></td><td><code class=\"hljs\">link(name = \"CoreFoundation\", kind = \"framework\")</code></td></tr>\n</tbody></table>\n</div>\n<h2 id=\"active-and-inert-attributes\"><a class=\"header\" href=\"#active-and-inert-attributes\">Active and inert attributes</a></h2>\n<p>An attribute is either active or inert. During attribute processing, <em>active\nattributes</em> remove themselves from the thing they are on while <em>inert attributes</em>\nstay on.</p>\n<p>The <a href=\"conditional-compilation.html#the-cfg-attribute\"><code class=\"hljs\">cfg</code></a> and <a href=\"conditional-compilation.html#the-cfg_attr-attribute\"><code class=\"hljs\">cfg_attr</code></a> attributes are active. The <a href=\"attributes/testing.html#the-test-attribute\"><code class=\"hljs\">test</code></a> attribute is\ninert when compiling for tests and active otherwise. <a href=\"procedural-macros.html#attribute-macros\">Attribute macros</a> are\nactive. All other attributes are inert.</p>\n<h2 id=\"tool-attributes\"><a class=\"header\" href=\"#tool-attributes\">Tool attributes</a></h2>\n<p>The compiler may allow attributes for external tools where each tool resides\nin its own namespace in the <a href=\"names/preludes.html#tool-prelude\">tool prelude</a>. The first segment of the attribute\npath is the name of the tool, with one or more additional segments whose\ninterpretation is up to the tool.</p>\n<p>When a tool is not in use, the tool's attributes are accepted without a\nwarning. When the tool is in use, the tool is responsible for processing and\ninterpretation of its attributes.</p>\n<p>Tool attributes are not available if the <a href=\"names/preludes.html#the-no_implicit_prelude-attribute\"><code class=\"hljs\">no_implicit_prelude</code></a> attribute is\nused.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">// Tells the rustfmt tool to not format the following element.</span>\n<span class=\"hljs-meta\">#[rustfmt::skip]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">S</span></span> {\n}\n\n<span class=\"hljs-comment\">// Controls the \"cyclomatic complexity\" threshold for the clippy tool.</span>\n<span class=\"hljs-meta\">#[clippy::cyclomatic_complexity = <span class=\"hljs-meta-string\">\"100\"</span>]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">f</span></span>() {}\n<span class=\"boring\">}</span></code></pre></pre>\n<blockquote>\n<p>Note: <code class=\"hljs\">rustc</code> currently recognizes the tools \"clippy\", \"rustfmt\" and \"diagnostic\".</p>\n</blockquote>\n<h2 id=\"built-in-attributes-index\"><a class=\"header\" href=\"#built-in-attributes-index\">Built-in attributes index</a></h2>\n<p>The following is an index of all built-in attributes.</p>\n<ul>\n<li>Conditional compilation\n<ul>\n<li><a href=\"conditional-compilation.html#the-cfg-attribute\"><code class=\"hljs\">cfg</code></a> —&nbsp;Controls conditional compilation.</li>\n<li><a href=\"conditional-compilation.html#the-cfg_attr-attribute\"><code class=\"hljs\">cfg_attr</code></a> —&nbsp;Conditionally includes attributes.</li>\n</ul>\n</li>\n<li>Testing\n<ul>\n<li><a href=\"attributes/testing.html#the-test-attribute\"><code class=\"hljs\">test</code></a> —&nbsp;Marks a function as a test.</li>\n<li><a href=\"attributes/testing.html#the-ignore-attribute\"><code class=\"hljs\">ignore</code></a> —&nbsp;Disables a test function.</li>\n<li><a href=\"attributes/testing.html#the-should_panic-attribute\"><code class=\"hljs\">should_panic</code></a> —&nbsp;Indicates a test should generate a panic.</li>\n</ul>\n</li>\n<li>Derive\n<ul>\n<li><a href=\"attributes/derive.html\"><code class=\"hljs\">derive</code></a> —&nbsp;Automatic trait implementations.</li>\n<li><a href=\"attributes/derive.html#the-automatically_derived-attribute\"><code class=\"hljs\">automatically_derived</code></a> —&nbsp;Marker for implementations created by\n<code class=\"hljs\">derive</code>.</li>\n</ul>\n</li>\n<li>Macros\n<ul>\n<li><a href=\"macros-by-example.html#path-based-scope\"><code class=\"hljs\">macro_export</code></a> — Exports a <code class=\"hljs\">macro_rules</code> macro for cross-crate usage.</li>\n<li><a href=\"macros-by-example.html#the-macro_use-attribute\"><code class=\"hljs\">macro_use</code></a> — Expands macro visibility, or imports macros from other\ncrates.</li>\n<li><a href=\"procedural-macros.html#function-like-procedural-macros\"><code class=\"hljs\">proc_macro</code></a> — Defines a function-like macro.</li>\n<li><a href=\"procedural-macros.html#derive-macros\"><code class=\"hljs\">proc_macro_derive</code></a> — Defines a derive macro.</li>\n<li><a href=\"procedural-macros.html#attribute-macros\"><code class=\"hljs\">proc_macro_attribute</code></a> — Defines an attribute macro.</li>\n</ul>\n</li>\n<li>Diagnostics\n<ul>\n<li><a href=\"attributes/diagnostics.html#lint-check-attributes\"><code class=\"hljs\">allow</code></a>, <a href=\"attributes/diagnostics.html#lint-check-attributes\"><code class=\"hljs\">warn</code></a>, <a href=\"attributes/diagnostics.html#lint-check-attributes\"><code class=\"hljs\">deny</code></a>, <a href=\"attributes/diagnostics.html#lint-check-attributes\"><code class=\"hljs\">forbid</code></a> —&nbsp;Alters the default lint level.</li>\n<li><a href=\"attributes/diagnostics.html#the-deprecated-attribute\"><code class=\"hljs\">deprecated</code></a> —&nbsp;Generates deprecation notices.</li>\n<li><a href=\"attributes/diagnostics.html#the-must_use-attribute\"><code class=\"hljs\">must_use</code></a> — Generates a lint for unused values.</li>\n<li><a href=\"attributes/diagnostics.html#the-diagnosticon_unimplemented-attribute\"><code class=\"hljs\">diagnostic::on_unimplemented</code></a> — Hints the compiler to emit a certain error\nmessage if a trait is not implemented.</li>\n</ul>\n</li>\n<li>ABI, linking, symbols, and FFI\n<ul>\n<li><a href=\"items/external-blocks.html#the-link-attribute\"><code class=\"hljs\">link</code></a> — Specifies a native library to link with an <code class=\"hljs\">extern</code> block.</li>\n<li><a href=\"items/external-blocks.html#the-link_name-attribute\"><code class=\"hljs\">link_name</code></a> — Specifies the name of the symbol for functions or statics\nin an <code class=\"hljs\">extern</code> block.</li>\n<li><a href=\"items/external-blocks.html#the-link_ordinal-attribute\"><code class=\"hljs\">link_ordinal</code></a> — Specifies the ordinal of the symbol for functions or\nstatics in an <code class=\"hljs\">extern</code> block.</li>\n<li><a href=\"items/extern-crates.html#the-no_link-attribute\"><code class=\"hljs\">no_link</code></a> —&nbsp;Prevents linking an extern crate.</li>\n<li><a href=\"type-layout.html#representations\"><code class=\"hljs\">repr</code></a> —&nbsp;Controls type layout.</li>\n<li><a href=\"linkage.html\"><code class=\"hljs\">crate_type</code></a> — Specifies the type of crate (library, executable, etc.).</li>\n<li><a href=\"crates-and-source-files.html#the-no_main-attribute\"><code class=\"hljs\">no_main</code></a> —&nbsp;Disables emitting the <code class=\"hljs\">main</code> symbol.</li>\n<li><a href=\"abi.html#the-export_name-attribute\"><code class=\"hljs\">export_name</code></a> —&nbsp;Specifies the exported symbol name for a function or\nstatic.</li>\n<li><a href=\"abi.html#the-link_section-attribute\"><code class=\"hljs\">link_section</code></a> —&nbsp;Specifies the section of an object file to use for a\nfunction or static.</li>\n<li><a href=\"abi.html#the-no_mangle-attribute\"><code class=\"hljs\">no_mangle</code></a> —&nbsp;Disables symbol name encoding.</li>\n<li><a href=\"abi.html#the-used-attribute\"><code class=\"hljs\">used</code></a> — Forces the compiler to keep a static item in the output\nobject file.</li>\n<li><a href=\"crates-and-source-files.html#the-crate_name-attribute\"><code class=\"hljs\">crate_name</code></a> — Specifies the crate name.</li>\n</ul>\n</li>\n<li>Code generation\n<ul>\n<li><a href=\"attributes/codegen.html#the-inline-attribute\"><code class=\"hljs\">inline</code></a> — Hint to inline code.</li>\n<li><a href=\"attributes/codegen.html#the-cold-attribute\"><code class=\"hljs\">cold</code></a> — Hint that a function is unlikely to be called.</li>\n<li><a href=\"attributes/codegen.html#the-no_builtins-attribute\"><code class=\"hljs\">no_builtins</code></a> — Disables use of certain built-in functions.</li>\n<li><a href=\"attributes/codegen.html#the-target_feature-attribute\"><code class=\"hljs\">target_feature</code></a> —&nbsp;Configure platform-specific code generation.</li>\n<li><a href=\"attributes/codegen.html#the-track_caller-attribute\"><code class=\"hljs\">track_caller</code></a> - Pass the parent call location to <code class=\"hljs\">std::panic::Location::caller()</code>.</li>\n<li><a href=\"attributes/codegen.html#the-instruction_set-attribute\"><code class=\"hljs\">instruction_set</code></a> - Specify the instruction set used to generate a functions code</li>\n</ul>\n</li>\n<li>Documentation\n<ul>\n<li><code class=\"hljs\">doc</code> —&nbsp;Specifies documentation. See <a href=\"../rustdoc/the-doc-attribute.html\">The Rustdoc Book</a> for more\ninformation. <a href=\"comments.html#doc-comments\">Doc comments</a> are transformed into <code class=\"hljs\">doc</code> attributes.</li>\n</ul>\n</li>\n<li>Preludes\n<ul>\n<li><a href=\"names/preludes.html#the-no_std-attribute\"><code class=\"hljs\">no_std</code></a> — Removes std from the prelude.</li>\n<li><a href=\"names/preludes.html#the-no_implicit_prelude-attribute\"><code class=\"hljs\">no_implicit_prelude</code></a> —&nbsp;Disables prelude lookups within a module.</li>\n</ul>\n</li>\n<li>Modules\n<ul>\n<li><a href=\"items/modules.html#the-path-attribute\"><code class=\"hljs\">path</code></a> —&nbsp;Specifies the filename for a module.</li>\n</ul>\n</li>\n<li>Limits\n<ul>\n<li><a href=\"attributes/limits.html#the-recursion_limit-attribute\"><code class=\"hljs\">recursion_limit</code></a> —&nbsp;Sets the maximum recursion limit for certain\ncompile-time operations.</li>\n<li><a href=\"attributes/limits.html#the-type_length_limit-attribute\"><code class=\"hljs\">type_length_limit</code></a> —&nbsp;Sets the maximum size of a polymorphic type.</li>\n</ul>\n</li>\n<li>Runtime\n<ul>\n<li><a href=\"runtime.html#the-panic_handler-attribute\"><code class=\"hljs\">panic_handler</code></a> —&nbsp;Sets the function to handle panics.</li>\n<li><a href=\"runtime.html#the-global_allocator-attribute\"><code class=\"hljs\">global_allocator</code></a> — Sets the global memory allocator.</li>\n<li><a href=\"runtime.html#the-windows_subsystem-attribute\"><code class=\"hljs\">windows_subsystem</code></a> — Specifies the windows subsystem to link with.</li>\n</ul>\n</li>\n<li>Features\n<ul>\n<li><code class=\"hljs\">feature</code> — Used to enable unstable or experimental compiler features. See\n<a href=\"../unstable-book/index.html\">The Unstable Book</a> for features implemented in <code class=\"hljs\">rustc</code>.</li>\n</ul>\n</li>\n<li>Type System\n<ul>\n<li><a href=\"attributes/type_system.html#the-non_exhaustive-attribute\"><code class=\"hljs\">non_exhaustive</code></a> — Indicate that a type will have more fields/variants\nadded in future.</li>\n</ul>\n</li>\n<li>Debugger\n<ul>\n<li><a href=\"attributes/debugger.html#the-debugger_visualizer-attribute\"><code class=\"hljs\">debugger_visualizer</code></a> — Embeds a file that specifies debugger output for a type.</li>\n<li><a href=\"attributes/debugger.html#the-collapse_debuginfo-attribute\"><code class=\"hljs\">collapse_debuginfo</code></a> — Controls how macro invocations are encoded in debuginfo.</li>\n</ul>\n</li>\n</ul>\n\n                    </main>\n\n                    <nav class=\"nav-wrapper\" aria-label=\"Page navigation\">\n                        <!-- Mobile navigation buttons -->\n                            <a rel=\"prev\" href=\"items/associated-items.html\" class=\"mobile-nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                                <i class=\"fa fa-angle-left\"></i>\n                            </a>\n\n                            <a rel=\"next prefetch\" href=\"attributes/testing.html\" class=\"mobile-nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                                <i class=\"fa fa-angle-right\"></i>\n                            </a>\n\n                        <div style=\"clear: both\"></div>\n                    </nav>\n                </div>\n            </div>\n\n            <nav class=\"nav-wide-wrapper\" aria-label=\"Page navigation\">\n                    <a rel=\"prev\" href=\"items/associated-items.html\" class=\"nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                        <i class=\"fa fa-angle-left\"></i>\n                    </a>\n\n                    <a rel=\"next prefetch\" href=\"attributes/testing.html\" class=\"nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                        <i class=\"fa fa-angle-right\"></i>\n                    </a>\n            </nav>\n\n        </div>\n\n\n\n\n        <script>\n            window.playground_copyable = true;\n        </script>\n\n\n        <script src=\"elasticlunr.min.js\"></script>\n        <script src=\"mark.min.js\"></script>\n        <script src=\"searcher.js\"></script>\n\n        <script src=\"clipboard.min.js\"></script>\n        <script src=\"highlight.js\"></script>\n        <script src=\"book.js\"></script>\n\n        <!-- Custom JS scripts -->\n\n\n    </div>\n    \n\n</body></html>",
	"crawlDate": "2024-07-28T05:09:10.902Z"
}