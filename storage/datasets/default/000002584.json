{
	"title": "update_hook in std::panic - Rust",
	"url": "https://doc.rust-lang.org/stable/std/panic/fn.update_hook.html",
	"markdown": "# update\\_hook in std::panic - Rust\n\n```\npub fn update_hook<F>(hook_fn: F)where\n    F: Fn(&(dyn Fn(&PanicInfo<'_>) + Send + Sync + 'static), &PanicInfo<'_>) + Sync + Send + 'static,\n```\n\nðŸ”¬This is a nightly-only experimental API. (`panic_update_hook`Â [#92649](https://github.com/rust-lang/rust/issues/92649))\n\nExpand description\n\nAtomic combination of [`take_hook`](./fn.take_hook.html) and [`set_hook`](./fn.set_hook.html). Use this to replace the panic handler with a new panic handler that does something and then executes the old handler.\n\n## [Â§](#panics)Panics\n\nPanics if called from a panicking thread.\n\n## [Â§](#examples)Examples\n\nThe following will print the custom message, and then the normal output of panic.\n\n[â“˜](# \"This example panics\")\n\n```\n#![feature(panic_update_hook)]\nuse std::panic;\n\n// Equivalent to\n// let prev = panic::take_hook();\n// panic::set_hook(move |info| {\n//     println!(\"...\");\n//     prev(info);\n// );\npanic::update_hook(move |prev, info| {\n    println!(\"Print custom message and execute panic handler as usual\");\n    prev(info);\n});\n\npanic!(\"Custom and then normal\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(panic_update_hook)%5D%0Afn+main()+%7B%0A++++use+std::panic;%0A++++%0A++++//+Equivalent+to%0A++++//+let+prev+=+panic::take_hook();%0A++++//+panic::set_hook(move+%7Cinfo%7C+%7B%0A++++//+++++println!(%22...%22);%0A++++//+++++prev(info);%0A++++//+);%0A++++panic::update_hook(move+%7Cprev,+info%7C+%7B%0A++++++++println!(%22Print+custom+message+and+execute+panic+handler+as+usual%22);%0A++++++++prev(info);%0A++++%7D);%0A++++%0A++++panic!(%22Custom+and+then+normal%22);%0A%7D&version=nightly&edition=2021)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Atomic combination of `take_hook` and `set_hook`. Use this to replace the panic handler with a new panic handler that does something and then executes the old handler.\"><title>update_hook in std::panic - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc fn\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><div class=\"sidebar-elems\"><h2><a href=\"index.html\">In std::panic</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.AssertUnwindSafe.html\">AssertUnwindSafe</a></li><li><a href=\"struct.Location.html\">Location</a></li><li><a href=\"struct.PanicInfo.html\">PanicInfo</a></li></ul><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.BacktraceStyle.html\">BacktraceStyle</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.RefUnwindSafe.html\">RefUnwindSafe</a></li><li><a href=\"trait.UnwindSafe.html\">UnwindSafe</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.always_abort.html\">always_abort</a></li><li><a href=\"fn.catch_unwind.html\">catch_unwind</a></li><li><a href=\"fn.get_backtrace_style.html\">get_backtrace_style</a></li><li><a href=\"fn.panic_any.html\">panic_any</a></li><li><a href=\"fn.resume_unwind.html\">resume_unwind</a></li><li><a href=\"fn.set_backtrace_style.html\">set_backtrace_style</a></li><li><a href=\"fn.set_hook.html\">set_hook</a></li><li><a href=\"fn.take_hook.html\">take_hook</a></li><li><a href=\"fn.update_hook.html\">update_hook</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type â€˜Sâ€™ or â€˜/â€™ to search, â€˜?â€™ for more optionsâ€¦\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Function <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">panic</a>::<wbr><a class=\"fn\" href=\"#\">update_hook</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><a class=\"src\" href=\"../../src/std/panicking.rs.html#220-234\">source</a> Â· <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>âˆ’</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub fn update_hook&lt;F&gt;(hook_fn: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.Fn.html\" title=\"trait std::ops::Fn\">Fn</a>(&amp;(dyn <a class=\"trait\" href=\"../ops/trait.Fn.html\" title=\"trait std::ops::Fn\">Fn</a>(&amp;<a class=\"struct\" href=\"struct.PanicInfo.html\" title=\"struct std::panic::PanicInfo\">PanicInfo</a>&lt;'_&gt;) + <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> + <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> + 'static), &amp;<a class=\"struct\" href=\"struct.PanicInfo.html\" title=\"struct std::panic::PanicInfo\">PanicInfo</a>&lt;'_&gt;) + <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> + 'static,</div></code></pre><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>panic_update_hook</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/92649\">#92649</a>)</span></div></span><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Atomic combination of <a href=\"./fn.take_hook.html\"><code>take_hook</code></a> and <a href=\"./fn.set_hook.html\"><code>set_hook</code></a>. Use this to replace the panic handler with\na new panic handler that does something and then executes the old handler.</p>\n<h2 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">Â§</a>Panics</h2>\n<p>Panics if called from a panicking thread.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">Â§</a>Examples</h2>\n<p>The following will print the custom message, and then the normal output of panic.</p>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">â“˜</a><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(panic_update_hook)]\n</span><span class=\"kw\">use </span>std::panic;\n\n<span class=\"comment\">// Equivalent to\n// let prev = panic::take_hook();\n// panic::set_hook(move |info| {\n//     println!(\"...\");\n//     prev(info);\n// );\n</span>panic::update_hook(<span class=\"kw\">move </span>|prev, info| {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"Print custom message and execute panic handler as usual\"</span>);\n    prev(info);\n});\n\n<span class=\"macro\">panic!</span>(<span class=\"string\">\"Custom and then normal\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(panic_update_hook)%5D%0Afn+main()+%7B%0A++++use+std::panic;%0A++++%0A++++//+Equivalent+to%0A++++//+let+prev+=+panic::take_hook();%0A++++//+panic::set_hook(move+%7Cinfo%7C+%7B%0A++++//+++++println!(%22...%22);%0A++++//+++++prev(info);%0A++++//+);%0A++++panic::update_hook(move+%7Cprev,+info%7C+%7B%0A++++++++println!(%22Print+custom+message+and+execute+panic+handler+as+usual%22);%0A++++++++prev(info);%0A++++%7D);%0A++++%0A++++panic!(%22Custom+and+then+normal%22);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:24:09.551Z"
}