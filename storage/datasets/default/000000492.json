{
	"title": "Any in std::any - Rust",
	"url": "https://doc.rust-lang.org/stable/std/any/trait.Any.html",
	"markdown": "# Any in std::any - Rust\n\n## Trait [std](../index.html)::[any](index.html)::[Any](#)\n\n1.0.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#115) Â·\n\n```\npub trait Any: 'static {\n    // Required method\n    fn type_id(&self) -> TypeId;\n}\n```\n\nExpand description\n\nA trait to emulate dynamic typing.\n\nMost types implement `Any`. However, any type which contains a non-`'static` reference does not. See the [module-level documentation](index.html \"mod std::any\") for more details.\n\n1.34.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#136)\n\nGets the `TypeId` of `self`.\n\nIf called on a `dyn Any` trait object (or a trait object of a subtrait of `Any`), this returns the `TypeId` of the underlying concrete type, not that of `dyn Any` itself.\n\n##### [Â§](#examples)Examples\n\n```\nuse std::any::{Any, TypeId};\n\nfn is_string(s: &dyn Any) -> bool {\n    TypeId::of::<String>() == s.type_id()\n}\n\nassert_eq!(is_string(&0), false);\nassert_eq!(is_string(&\"cookie monster\".to_string()), true);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::any::%7BAny,+TypeId%7D;%0A++++%0A++++fn+is_string(s:+%26dyn+Any)+-%3E+bool+%7B%0A++++++++TypeId::of::%3CString%3E()+==+s.type_id()%0A++++%7D%0A++++%0A++++assert_eq!(is_string(%260),+false);%0A++++assert_eq!(is_string(%26%22cookie+monster%22.to_string()),+true);%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1769)[Â§](#impl-Box%3Cdyn+Any,+A%3E)\n\n1.0.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1789)\n\nAttempt to downcast the box to a concrete type.\n\n##### [Â§](#examples-1)Examples\n\n```\nuse std::any::Any;\n\nfn print_if_string(value: Box<dyn Any>) {\n    if let Ok(string) = value.downcast::<String>() {\n        println!(\"String ({}): {}\", string.len(), string);\n    }\n}\n\nlet my_string = \"Hello World\".to_string();\nprint_if_string(Box::new(my_string));\nprint_if_string(Box::new(0i8));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::any::Any;%0A++++%0A++++fn+print_if_string(value:+Box%3Cdyn+Any%3E)+%7B%0A++++++++if+let+Ok(string)+=+value.downcast::%3CString%3E()+%7B%0A++++++++++++println!(%22String+(%7B%7D):+%7B%7D%22,+string.len(),+string);%0A++++++++%7D%0A++++%7D%0A++++%0A++++let+my_string+=+%22Hello+World%22.to_string();%0A++++print_if_string(Box::new(my_string));%0A++++print_if_string(Box::new(0i8));%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1819)\n\nðŸ”¬This is a nightly-only experimental API. (`downcast_unchecked`Â [#90850](https://github.com/rust-lang/rust/issues/90850))\n\nDowncasts the box to a concrete type.\n\nFor a safe alternative see [`downcast`](about:blank/boxed/struct.Box.html#method.downcast \"method std::boxed::Box::downcast\").\n\n##### [Â§](#examples-2)Examples\n\n```\n#![feature(downcast_unchecked)]\n\nuse std::any::Any;\n\nlet x: Box<dyn Any> = Box::new(1_usize);\n\nunsafe {\n    assert_eq!(*x.downcast_unchecked::<usize>(), 1);\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(downcast_unchecked)%5D%0A%0Afn+main()+%7B%0A++++use+std::any::Any;%0A++++%0A++++let+x:+Box%3Cdyn+Any%3E+=+Box::new(1_usize);%0A++++%0A++++unsafe+%7B%0A++++++++assert_eq!(*x.downcast_unchecked::%3Cusize%3E(),+1);%0A++++%7D%0A%7D&version=nightly&edition=2021)\n\n##### [Â§](#safety)Safety\n\nThe contained value must be of type `T`. Calling this method with the incorrect type is _undefined behavior_.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1828)[Â§](#impl-Box%3Cdyn+Any+%2B+Send,+A%3E)\n\n1.0.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1848)\n\nAttempt to downcast the box to a concrete type.\n\n##### [Â§](#examples-3)Examples\n\n```\nuse std::any::Any;\n\nfn print_if_string(value: Box<dyn Any + Send>) {\n    if let Ok(string) = value.downcast::<String>() {\n        println!(\"String ({}): {}\", string.len(), string);\n    }\n}\n\nlet my_string = \"Hello World\".to_string();\nprint_if_string(Box::new(my_string));\nprint_if_string(Box::new(0i8));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::any::Any;%0A++++%0A++++fn+print_if_string(value:+Box%3Cdyn+Any+%2B+Send%3E)+%7B%0A++++++++if+let+Ok(string)+=+value.downcast::%3CString%3E()+%7B%0A++++++++++++println!(%22String+(%7B%7D):+%7B%7D%22,+string.len(),+string);%0A++++++++%7D%0A++++%7D%0A++++%0A++++let+my_string+=+%22Hello+World%22.to_string();%0A++++print_if_string(Box::new(my_string));%0A++++print_if_string(Box::new(0i8));%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1878)\n\nðŸ”¬This is a nightly-only experimental API. (`downcast_unchecked`Â [#90850](https://github.com/rust-lang/rust/issues/90850))\n\nDowncasts the box to a concrete type.\n\nFor a safe alternative see [`downcast`](about:blank/boxed/struct.Box.html#method.downcast \"method std::boxed::Box::downcast\").\n\n##### [Â§](#examples-4)Examples\n\n```\n#![feature(downcast_unchecked)]\n\nuse std::any::Any;\n\nlet x: Box<dyn Any + Send> = Box::new(1_usize);\n\nunsafe {\n    assert_eq!(*x.downcast_unchecked::<usize>(), 1);\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(downcast_unchecked)%5D%0A%0Afn+main()+%7B%0A++++use+std::any::Any;%0A++++%0A++++let+x:+Box%3Cdyn+Any+%2B+Send%3E+=+Box::new(1_usize);%0A++++%0A++++unsafe+%7B%0A++++++++assert_eq!(*x.downcast_unchecked::%3Cusize%3E(),+1);%0A++++%7D%0A%7D&version=nightly&edition=2021)\n\n##### [Â§](#safety-1)Safety\n\nThe contained value must be of type `T`. Calling this method with the incorrect type is _undefined behavior_.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1887)[Â§](#impl-Box%3Cdyn+Any+%2B+Send+%2B+Sync,+A%3E)\n\n1.51.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1907)\n\nAttempt to downcast the box to a concrete type.\n\n##### [Â§](#examples-5)Examples\n\n```\nuse std::any::Any;\n\nfn print_if_string(value: Box<dyn Any + Send + Sync>) {\n    if let Ok(string) = value.downcast::<String>() {\n        println!(\"String ({}): {}\", string.len(), string);\n    }\n}\n\nlet my_string = \"Hello World\".to_string();\nprint_if_string(Box::new(my_string));\nprint_if_string(Box::new(0i8));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::any::Any;%0A++++%0A++++fn+print_if_string(value:+Box%3Cdyn+Any+%2B+Send+%2B+Sync%3E)+%7B%0A++++++++if+let+Ok(string)+=+value.downcast::%3CString%3E()+%7B%0A++++++++++++println!(%22String+(%7B%7D):+%7B%7D%22,+string.len(),+string);%0A++++++++%7D%0A++++%7D%0A++++%0A++++let+my_string+=+%22Hello+World%22.to_string();%0A++++print_if_string(Box::new(my_string));%0A++++print_if_string(Box::new(0i8));%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1937)\n\nðŸ”¬This is a nightly-only experimental API. (`downcast_unchecked`Â [#90850](https://github.com/rust-lang/rust/issues/90850))\n\nDowncasts the box to a concrete type.\n\nFor a safe alternative see [`downcast`](about:blank/boxed/struct.Box.html#method.downcast \"method std::boxed::Box::downcast\").\n\n##### [Â§](#examples-6)Examples\n\n```\n#![feature(downcast_unchecked)]\n\nuse std::any::Any;\n\nlet x: Box<dyn Any + Send + Sync> = Box::new(1_usize);\n\nunsafe {\n    assert_eq!(*x.downcast_unchecked::<usize>(), 1);\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(downcast_unchecked)%5D%0A%0Afn+main()+%7B%0A++++use+std::any::Any;%0A++++%0A++++let+x:+Box%3Cdyn+Any+%2B+Send+%2B+Sync%3E+=+Box::new(1_usize);%0A++++%0A++++unsafe+%7B%0A++++++++assert_eq!(*x.downcast_unchecked::%3Cusize%3E(),+1);%0A++++%7D%0A%7D&version=nightly&edition=2021)\n\n##### [Â§](#safety-2)Safety\n\nThe contained value must be of type `T`. Calling this method with the incorrect type is _undefined behavior_.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#174)[Â§](#impl-dyn+Any)\n\n1.0.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#195)\n\nReturns `true` if the inner type is the same as `T`.\n\n##### [Â§](#examples-7)Examples\n\n```\nuse std::any::Any;\n\nfn is_string(s: &dyn Any) {\n    if s.is::<String>() {\n        println!(\"It's a string!\");\n    } else {\n        println!(\"Not a string...\");\n    }\n}\n\nis_string(&0);\nis_string(&\"cookie monster\".to_string());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::any::Any;%0A++++%0A++++fn+is_string(s:+%26dyn+Any)+%7B%0A++++++++if+s.is::%3CString%3E()+%7B%0A++++++++++++println!(%22It%27s+a+string!%22);%0A++++++++%7D+else+%7B%0A++++++++++++println!(%22Not+a+string...%22);%0A++++++++%7D%0A++++%7D%0A++++%0A++++is_string(%260);%0A++++is_string(%26%22cookie+monster%22.to_string());%0A%7D&edition=2021)\n\n1.0.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#227)\n\nReturns some reference to the inner value if it is of type `T`, or `None` if it isnâ€™t.\n\n##### [Â§](#examples-8)Examples\n\n```\nuse std::any::Any;\n\nfn print_if_string(s: &dyn Any) {\n    if let Some(string) = s.downcast_ref::<String>() {\n        println!(\"It's a string({}): '{}'\", string.len(), string);\n    } else {\n        println!(\"Not a string...\");\n    }\n}\n\nprint_if_string(&0);\nprint_if_string(&\"cookie monster\".to_string());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::any::Any;%0A++++%0A++++fn+print_if_string(s:+%26dyn+Any)+%7B%0A++++++++if+let+Some(string)+=+s.downcast_ref::%3CString%3E()+%7B%0A++++++++++++println!(%22It%27s+a+string(%7B%7D):+%27%7B%7D%27%22,+string.len(),+string);%0A++++++++%7D+else+%7B%0A++++++++++++println!(%22Not+a+string...%22);%0A++++++++%7D%0A++++%7D%0A++++%0A++++print_if_string(%260);%0A++++print_if_string(%26%22cookie+monster%22.to_string());%0A%7D&edition=2021)\n\n1.0.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#263)\n\nReturns some mutable reference to the inner value if it is of type `T`, or `None` if it isnâ€™t.\n\n##### [Â§](#examples-9)Examples\n\n```\nuse std::any::Any;\n\nfn modify_if_u32(s: &mut dyn Any) {\n    if let Some(num) = s.downcast_mut::<u32>() {\n        *num = 42;\n    }\n}\n\nlet mut x = 10u32;\nlet mut s = \"starlord\".to_string();\n\nmodify_if_u32(&mut x);\nmodify_if_u32(&mut s);\n\nassert_eq!(x, 42);\nassert_eq!(&s, \"starlord\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::any::Any;%0A++++%0A++++fn+modify_if_u32(s:+%26mut+dyn+Any)+%7B%0A++++++++if+let+Some(num)+=+s.downcast_mut::%3Cu32%3E()+%7B%0A++++++++++++*num+=+42;%0A++++++++%7D%0A++++%7D%0A++++%0A++++let+mut+x+=+10u32;%0A++++let+mut+s+=+%22starlord%22.to_string();%0A++++%0A++++modify_if_u32(%26mut+x);%0A++++modify_if_u32(%26mut+s);%0A++++%0A++++assert_eq!(x,+42);%0A++++assert_eq!(%26s,+%22starlord%22);%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#296)\n\nðŸ”¬This is a nightly-only experimental API. (`downcast_unchecked`Â [#90850](https://github.com/rust-lang/rust/issues/90850))\n\nReturns a reference to the inner value as type `dyn T`.\n\n##### [Â§](#examples-10)Examples\n\n```\n#![feature(downcast_unchecked)]\n\nuse std::any::Any;\n\nlet x: Box<dyn Any> = Box::new(1_usize);\n\nunsafe {\n    assert_eq!(*x.downcast_ref_unchecked::<usize>(), 1);\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(downcast_unchecked)%5D%0A%0Afn+main()+%7B%0A++++use+std::any::Any;%0A++++%0A++++let+x:+Box%3Cdyn+Any%3E+=+Box::new(1_usize);%0A++++%0A++++unsafe+%7B%0A++++++++assert_eq!(*x.downcast_ref_unchecked::%3Cusize%3E(),+1);%0A++++%7D%0A%7D&version=nightly&edition=2021)\n\n##### [Â§](#safety-3)Safety\n\nThe contained value must be of type `T`. Calling this method with the incorrect type is _undefined behavior_.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#326)\n\nðŸ”¬This is a nightly-only experimental API. (`downcast_unchecked`Â [#90850](https://github.com/rust-lang/rust/issues/90850))\n\nReturns a mutable reference to the inner value as type `dyn T`.\n\n##### [Â§](#examples-11)Examples\n\n```\n#![feature(downcast_unchecked)]\n\nuse std::any::Any;\n\nlet mut x: Box<dyn Any> = Box::new(1_usize);\n\nunsafe {\n    *x.downcast_mut_unchecked::<usize>() += 1;\n}\n\nassert_eq!(*x.downcast_ref::<usize>().unwrap(), 2);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(downcast_unchecked)%5D%0A%0Afn+main()+%7B%0A++++use+std::any::Any;%0A++++%0A++++let+mut+x:+Box%3Cdyn+Any%3E+=+Box::new(1_usize);%0A++++%0A++++unsafe+%7B%0A++++++++*x.downcast_mut_unchecked::%3Cusize%3E()+%2B=+1;%0A++++%7D%0A++++%0A++++assert_eq!(*x.downcast_ref::%3Cusize%3E().unwrap(),+2);%0A%7D&version=nightly&edition=2021)\n\n##### [Â§](#safety-4)Safety\n\nThe contained value must be of type `T`. Calling this method with the incorrect type is _undefined behavior_.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#333)[Â§](#impl-dyn+Any+%2B+Send)\n\n1.0.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#354)\n\nForwards to the method defined on the type `dyn Any`.\n\n##### [Â§](#examples-12)Examples\n\n```\nuse std::any::Any;\n\nfn is_string(s: &(dyn Any + Send)) {\n    if s.is::<String>() {\n        println!(\"It's a string!\");\n    } else {\n        println!(\"Not a string...\");\n    }\n}\n\nis_string(&0);\nis_string(&\"cookie monster\".to_string());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::any::Any;%0A++++%0A++++fn+is_string(s:+%26(dyn+Any+%2B+Send))+%7B%0A++++++++if+s.is::%3CString%3E()+%7B%0A++++++++++++println!(%22It%27s+a+string!%22);%0A++++++++%7D+else+%7B%0A++++++++++++println!(%22Not+a+string...%22);%0A++++++++%7D%0A++++%7D%0A++++%0A++++is_string(%260);%0A++++is_string(%26%22cookie+monster%22.to_string());%0A%7D&edition=2021)\n\n1.0.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#378)\n\nForwards to the method defined on the type `dyn Any`.\n\n##### [Â§](#examples-13)Examples\n\n```\nuse std::any::Any;\n\nfn print_if_string(s: &(dyn Any + Send)) {\n    if let Some(string) = s.downcast_ref::<String>() {\n        println!(\"It's a string({}): '{}'\", string.len(), string);\n    } else {\n        println!(\"Not a string...\");\n    }\n}\n\nprint_if_string(&0);\nprint_if_string(&\"cookie monster\".to_string());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::any::Any;%0A++++%0A++++fn+print_if_string(s:+%26(dyn+Any+%2B+Send))+%7B%0A++++++++if+let+Some(string)+=+s.downcast_ref::%3CString%3E()+%7B%0A++++++++++++println!(%22It%27s+a+string(%7B%7D):+%27%7B%7D%27%22,+string.len(),+string);%0A++++++++%7D+else+%7B%0A++++++++++++println!(%22Not+a+string...%22);%0A++++++++%7D%0A++++%7D%0A++++%0A++++print_if_string(%260);%0A++++print_if_string(%26%22cookie+monster%22.to_string());%0A%7D&edition=2021)\n\n1.0.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#406)\n\nForwards to the method defined on the type `dyn Any`.\n\n##### [Â§](#examples-14)Examples\n\n```\nuse std::any::Any;\n\nfn modify_if_u32(s: &mut (dyn Any + Send)) {\n    if let Some(num) = s.downcast_mut::<u32>() {\n        *num = 42;\n    }\n}\n\nlet mut x = 10u32;\nlet mut s = \"starlord\".to_string();\n\nmodify_if_u32(&mut x);\nmodify_if_u32(&mut s);\n\nassert_eq!(x, 42);\nassert_eq!(&s, \"starlord\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::any::Any;%0A++++%0A++++fn+modify_if_u32(s:+%26mut+(dyn+Any+%2B+Send))+%7B%0A++++++++if+let+Some(num)+=+s.downcast_mut::%3Cu32%3E()+%7B%0A++++++++++++*num+=+42;%0A++++++++%7D%0A++++%7D%0A++++%0A++++let+mut+x+=+10u32;%0A++++let+mut+s+=+%22starlord%22.to_string();%0A++++%0A++++modify_if_u32(%26mut+x);%0A++++modify_if_u32(%26mut+s);%0A++++%0A++++assert_eq!(x,+42);%0A++++assert_eq!(%26s,+%22starlord%22);%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#431)\n\nðŸ”¬This is a nightly-only experimental API. (`downcast_unchecked`Â [#90850](https://github.com/rust-lang/rust/issues/90850))\n\nForwards to the method defined on the type `dyn Any`.\n\n##### [Â§](#examples-15)Examples\n\n```\n#![feature(downcast_unchecked)]\n\nuse std::any::Any;\n\nlet x: Box<dyn Any> = Box::new(1_usize);\n\nunsafe {\n    assert_eq!(*x.downcast_ref_unchecked::<usize>(), 1);\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(downcast_unchecked)%5D%0A%0Afn+main()+%7B%0A++++use+std::any::Any;%0A++++%0A++++let+x:+Box%3Cdyn+Any%3E+=+Box::new(1_usize);%0A++++%0A++++unsafe+%7B%0A++++++++assert_eq!(*x.downcast_ref_unchecked::%3Cusize%3E(),+1);%0A++++%7D%0A%7D&version=nightly&edition=2021)\n\n##### [Â§](#safety-5)Safety\n\nSame as the method on the type `dyn Any`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#459)\n\nðŸ”¬This is a nightly-only experimental API. (`downcast_unchecked`Â [#90850](https://github.com/rust-lang/rust/issues/90850))\n\nForwards to the method defined on the type `dyn Any`.\n\n##### [Â§](#examples-16)Examples\n\n```\n#![feature(downcast_unchecked)]\n\nuse std::any::Any;\n\nlet mut x: Box<dyn Any> = Box::new(1_usize);\n\nunsafe {\n    *x.downcast_mut_unchecked::<usize>() += 1;\n}\n\nassert_eq!(*x.downcast_ref::<usize>().unwrap(), 2);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(downcast_unchecked)%5D%0A%0Afn+main()+%7B%0A++++use+std::any::Any;%0A++++%0A++++let+mut+x:+Box%3Cdyn+Any%3E+=+Box::new(1_usize);%0A++++%0A++++unsafe+%7B%0A++++++++*x.downcast_mut_unchecked::%3Cusize%3E()+%2B=+1;%0A++++%7D%0A++++%0A++++assert_eq!(*x.downcast_ref::%3Cusize%3E().unwrap(),+2);%0A%7D&version=nightly&edition=2021)\n\n##### [Â§](#safety-6)Safety\n\nSame as the method on the type `dyn Any`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#465)[Â§](#impl-dyn+Any+%2B+Send+%2B+Sync)\n\n1.28.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#486)\n\nForwards to the method defined on the type `Any`.\n\n##### [Â§](#examples-17)Examples\n\n```\nuse std::any::Any;\n\nfn is_string(s: &(dyn Any + Send + Sync)) {\n    if s.is::<String>() {\n        println!(\"It's a string!\");\n    } else {\n        println!(\"Not a string...\");\n    }\n}\n\nis_string(&0);\nis_string(&\"cookie monster\".to_string());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::any::Any;%0A++++%0A++++fn+is_string(s:+%26(dyn+Any+%2B+Send+%2B+Sync))+%7B%0A++++++++if+s.is::%3CString%3E()+%7B%0A++++++++++++println!(%22It%27s+a+string!%22);%0A++++++++%7D+else+%7B%0A++++++++++++println!(%22Not+a+string...%22);%0A++++++++%7D%0A++++%7D%0A++++%0A++++is_string(%260);%0A++++is_string(%26%22cookie+monster%22.to_string());%0A%7D&edition=2021)\n\n1.28.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#510)\n\nForwards to the method defined on the type `Any`.\n\n##### [Â§](#examples-18)Examples\n\n```\nuse std::any::Any;\n\nfn print_if_string(s: &(dyn Any + Send + Sync)) {\n    if let Some(string) = s.downcast_ref::<String>() {\n        println!(\"It's a string({}): '{}'\", string.len(), string);\n    } else {\n        println!(\"Not a string...\");\n    }\n}\n\nprint_if_string(&0);\nprint_if_string(&\"cookie monster\".to_string());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::any::Any;%0A++++%0A++++fn+print_if_string(s:+%26(dyn+Any+%2B+Send+%2B+Sync))+%7B%0A++++++++if+let+Some(string)+=+s.downcast_ref::%3CString%3E()+%7B%0A++++++++++++println!(%22It%27s+a+string(%7B%7D):+%27%7B%7D%27%22,+string.len(),+string);%0A++++++++%7D+else+%7B%0A++++++++++++println!(%22Not+a+string...%22);%0A++++++++%7D%0A++++%7D%0A++++%0A++++print_if_string(%260);%0A++++print_if_string(%26%22cookie+monster%22.to_string());%0A%7D&edition=2021)\n\n1.28.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#538)\n\nForwards to the method defined on the type `Any`.\n\n##### [Â§](#examples-19)Examples\n\n```\nuse std::any::Any;\n\nfn modify_if_u32(s: &mut (dyn Any + Send + Sync)) {\n    if let Some(num) = s.downcast_mut::<u32>() {\n        *num = 42;\n    }\n}\n\nlet mut x = 10u32;\nlet mut s = \"starlord\".to_string();\n\nmodify_if_u32(&mut x);\nmodify_if_u32(&mut s);\n\nassert_eq!(x, 42);\nassert_eq!(&s, \"starlord\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::any::Any;%0A++++%0A++++fn+modify_if_u32(s:+%26mut+(dyn+Any+%2B+Send+%2B+Sync))+%7B%0A++++++++if+let+Some(num)+=+s.downcast_mut::%3Cu32%3E()+%7B%0A++++++++++++*num+=+42;%0A++++++++%7D%0A++++%7D%0A++++%0A++++let+mut+x+=+10u32;%0A++++let+mut+s+=+%22starlord%22.to_string();%0A++++%0A++++modify_if_u32(%26mut+x);%0A++++modify_if_u32(%26mut+s);%0A++++%0A++++assert_eq!(x,+42);%0A++++assert_eq!(%26s,+%22starlord%22);%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#559)\n\nðŸ”¬This is a nightly-only experimental API. (`downcast_unchecked`Â [#90850](https://github.com/rust-lang/rust/issues/90850))\n\nForwards to the method defined on the type `Any`.\n\n##### [Â§](#examples-20)Examples\n\n```\n#![feature(downcast_unchecked)]\n\nuse std::any::Any;\n\nlet x: Box<dyn Any> = Box::new(1_usize);\n\nunsafe {\n    assert_eq!(*x.downcast_ref_unchecked::<usize>(), 1);\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(downcast_unchecked)%5D%0A%0Afn+main()+%7B%0A++++use+std::any::Any;%0A++++%0A++++let+x:+Box%3Cdyn+Any%3E+=+Box::new(1_usize);%0A++++%0A++++unsafe+%7B%0A++++++++assert_eq!(*x.downcast_ref_unchecked::%3Cusize%3E(),+1);%0A++++%7D%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#583)\n\nðŸ”¬This is a nightly-only experimental API. (`downcast_unchecked`Â [#90850](https://github.com/rust-lang/rust/issues/90850))\n\nForwards to the method defined on the type `Any`.\n\n##### [Â§](#examples-21)Examples\n\n```\n#![feature(downcast_unchecked)]\n\nuse std::any::Any;\n\nlet mut x: Box<dyn Any> = Box::new(1_usize);\n\nunsafe {\n    *x.downcast_mut_unchecked::<usize>() += 1;\n}\n\nassert_eq!(*x.downcast_ref::<usize>().unwrap(), 2);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(downcast_unchecked)%5D%0A%0Afn+main()+%7B%0A++++use+std::any::Any;%0A++++%0A++++let+mut+x:+Box%3Cdyn+Any%3E+=+Box::new(1_usize);%0A++++%0A++++unsafe+%7B%0A++++++++*x.downcast_mut_unchecked::%3Cusize%3E()+%2B=+1;%0A++++%7D%0A++++%0A++++assert_eq!(*x.downcast_ref::%3Cusize%3E().unwrap(),+2);%0A%7D&version=nightly&edition=2021)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"A trait to emulate dynamic typing.\"><title>Any in std::any - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc trait\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">Any</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">Any</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#required-methods\">Required Methods</a></h3><ul class=\"block\"><li><a href=\"#tymethod.type_id\">type_id</a></li></ul><h3><a href=\"#implementations\">Methods</a></h3><ul class=\"block method\"><li><a href=\"#method.downcast\">downcast</a></li><li><a href=\"#method.downcast-1\">downcast</a></li><li><a href=\"#method.downcast-2\">downcast</a></li><li><a href=\"#method.downcast_mut\">downcast_mut</a></li><li><a href=\"#method.downcast_mut-1\">downcast_mut</a></li><li><a href=\"#method.downcast_mut-2\">downcast_mut</a></li><li><a href=\"#method.downcast_mut_unchecked\">downcast_mut_unchecked</a></li><li><a href=\"#method.downcast_mut_unchecked-1\">downcast_mut_unchecked</a></li><li><a href=\"#method.downcast_mut_unchecked-2\">downcast_mut_unchecked</a></li><li><a href=\"#method.downcast_ref\">downcast_ref</a></li><li><a href=\"#method.downcast_ref-1\">downcast_ref</a></li><li><a href=\"#method.downcast_ref-2\">downcast_ref</a></li><li><a href=\"#method.downcast_ref_unchecked\">downcast_ref_unchecked</a></li><li><a href=\"#method.downcast_ref_unchecked-1\">downcast_ref_unchecked</a></li><li><a href=\"#method.downcast_ref_unchecked-2\">downcast_ref_unchecked</a></li><li><a href=\"#method.downcast_unchecked\">downcast_unchecked</a></li><li><a href=\"#method.downcast_unchecked-1\">downcast_unchecked</a></li><li><a href=\"#method.downcast_unchecked-2\">downcast_unchecked</a></li><li><a href=\"#method.is\">is</a></li><li><a href=\"#method.is-1\">is</a></li><li><a href=\"#method.is-2\">is</a></li></ul><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-Debug-for-dyn+Any\">Debug</a></li><li><a href=\"#impl-Debug-for-dyn+Any+%2B+Send\">Debug</a></li><li><a href=\"#impl-Debug-for-dyn+Any+%2B+Send+%2B+Sync\">Debug</a></li></ul><h3><a href=\"#implementors\">Implementors</a></h3></section><h2><a href=\"index.html\">In std::any</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.TypeId.html\">TypeId</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.Any.html\">Any</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.type_name.html\">type_name</a></li><li><a href=\"fn.type_name_of_val.html\">type_name_of_val</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type â€˜Sâ€™ or â€˜/â€™ to search, â€˜?â€™ for more optionsâ€¦\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Trait <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">any</a>::<wbr><a class=\"trait\" href=\"#\">Any</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#115\">source</a> Â· <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>âˆ’</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub trait Any: 'static {\n    // Required method\n    fn <a href=\"#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a>;\n}</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>A trait to emulate dynamic typing.</p>\n<p>Most types implement <code>Any</code>. However, any type which contains a non-<code>'static</code> reference does not.\nSee the <a href=\"index.html\" title=\"mod std::any\">module-level documentation</a> for more details.</p>\n</div></details><h2 id=\"required-methods\" class=\"section-header\">Required Methods<a href=\"#required-methods\" class=\"anchor\">Â§</a></h2><div class=\"methods\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.type_id\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#136\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\"><p>Gets the <code>TypeId</code> of <code>self</code>.</p>\n<p>If called on a <code>dyn Any</code> trait object\n(or a trait object of a subtrait of <code>Any</code>),\nthis returns the <code>TypeId</code> of the underlying\nconcrete type, not that of <code>dyn Any</code> itself.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::any::{Any, TypeId};\n\n<span class=\"kw\">fn </span>is_string(s: <span class=\"kw-2\">&amp;</span><span class=\"kw\">dyn </span>Any) -&gt; bool {\n    TypeId::of::&lt;String&gt;() == s.type_id()\n}\n\n<span class=\"macro\">assert_eq!</span>(is_string(<span class=\"kw-2\">&amp;</span><span class=\"number\">0</span>), <span class=\"bool-val\">false</span>);\n<span class=\"macro\">assert_eq!</span>(is_string(<span class=\"kw-2\">&amp;</span><span class=\"string\">\"cookie monster\"</span>.to_string()), <span class=\"bool-val\">true</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::any::%7BAny,+TypeId%7D;%0A++++%0A++++fn+is_string(s:+%26dyn+Any)+-%3E+bool+%7B%0A++++++++TypeId::of::%3CString%3E()+==+s.type_id()%0A++++%7D%0A++++%0A++++assert_eq!(is_string(%260),+false);%0A++++assert_eq!(is_string(%26%22cookie+monster%22.to_string()),+true);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div><h2 id=\"implementations\" class=\"section-header\">Implementations<a href=\"#implementations\" class=\"anchor\">Â§</a></h2><div id=\"implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Box%3Cdyn+Any,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1769\">source</a><a href=\"#impl-Box%3Cdyn+Any,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"struct\" href=\"../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"trait.Any.html\" title=\"trait std::any::Any\">Any</a>, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.downcast\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1789\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.downcast\" class=\"fn\">downcast</a>&lt;T&gt;(self) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T, A&gt;, <a class=\"struct\" href=\"../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"trait.Any.html\" title=\"trait std::any::Any\">Any</a>, A&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.Any.html\" title=\"trait std::any::Any\">Any</a>,</div></h4></section></summary><div class=\"docblock\"><p>Attempt to downcast the box to a concrete type.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::any::Any;\n\n<span class=\"kw\">fn </span>print_if_string(value: Box&lt;<span class=\"kw\">dyn </span>Any&gt;) {\n    <span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span>(string) = value.downcast::&lt;String&gt;() {\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"String ({}): {}\"</span>, string.len(), string);\n    }\n}\n\n<span class=\"kw\">let </span>my_string = <span class=\"string\">\"Hello World\"</span>.to_string();\nprint_if_string(Box::new(my_string));\nprint_if_string(Box::new(<span class=\"number\">0i8</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::any::Any;%0A++++%0A++++fn+print_if_string(value:+Box%3Cdyn+Any%3E)+%7B%0A++++++++if+let+Ok(string)+=+value.downcast::%3CString%3E()+%7B%0A++++++++++++println!(%22String+(%7B%7D):+%7B%7D%22,+string.len(),+string);%0A++++++++%7D%0A++++%7D%0A++++%0A++++let+my_string+=+%22Hello+World%22.to_string();%0A++++print_if_string(Box::new(my_string));%0A++++print_if_string(Box::new(0i8));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.downcast_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1819\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.downcast_unchecked\" class=\"fn\">downcast_unchecked</a>&lt;T&gt;(self) -&gt; <a class=\"struct\" href=\"../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.Any.html\" title=\"trait std::any::Any\">Any</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>downcast_unchecked</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/90850\">#90850</a>)</span></div></span></summary><div class=\"docblock\"><p>Downcasts the box to a concrete type.</p>\n<p>For a safe alternative see <a href=\"../boxed/struct.Box.html#method.downcast\" title=\"method std::boxed::Box::downcast\"><code>downcast</code></a>.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(downcast_unchecked)]\n\n</span><span class=\"kw\">use </span>std::any::Any;\n\n<span class=\"kw\">let </span>x: Box&lt;<span class=\"kw\">dyn </span>Any&gt; = Box::new(<span class=\"number\">1_usize</span>);\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>x.downcast_unchecked::&lt;usize&gt;(), <span class=\"number\">1</span>);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(downcast_unchecked)%5D%0A%0Afn+main()+%7B%0A++++use+std::any::Any;%0A++++%0A++++let+x:+Box%3Cdyn+Any%3E+=+Box::new(1_usize);%0A++++%0A++++unsafe+%7B%0A++++++++assert_eq!(*x.downcast_unchecked::%3Cusize%3E(),+1);%0A++++%7D%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">Â§</a>Safety</h5>\n<p>The contained value must be of type <code>T</code>. Calling this method\nwith the incorrect type is <em>undefined behavior</em>.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Box%3Cdyn+Any+%2B+Send,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1828\">source</a><a href=\"#impl-Box%3Cdyn+Any+%2B+Send,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"struct\" href=\"../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"trait.Any.html\" title=\"trait std::any::Any\">Any</a> + <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a>, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.downcast-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1848\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.downcast-1\" class=\"fn\">downcast</a>&lt;T&gt;(self) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T, A&gt;, <a class=\"struct\" href=\"../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"trait.Any.html\" title=\"trait std::any::Any\">Any</a> + <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a>, A&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.Any.html\" title=\"trait std::any::Any\">Any</a>,</div></h4></section></summary><div class=\"docblock\"><p>Attempt to downcast the box to a concrete type.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::any::Any;\n\n<span class=\"kw\">fn </span>print_if_string(value: Box&lt;<span class=\"kw\">dyn </span>Any + Send&gt;) {\n    <span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span>(string) = value.downcast::&lt;String&gt;() {\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"String ({}): {}\"</span>, string.len(), string);\n    }\n}\n\n<span class=\"kw\">let </span>my_string = <span class=\"string\">\"Hello World\"</span>.to_string();\nprint_if_string(Box::new(my_string));\nprint_if_string(Box::new(<span class=\"number\">0i8</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::any::Any;%0A++++%0A++++fn+print_if_string(value:+Box%3Cdyn+Any+%2B+Send%3E)+%7B%0A++++++++if+let+Ok(string)+=+value.downcast::%3CString%3E()+%7B%0A++++++++++++println!(%22String+(%7B%7D):+%7B%7D%22,+string.len(),+string);%0A++++++++%7D%0A++++%7D%0A++++%0A++++let+my_string+=+%22Hello+World%22.to_string();%0A++++print_if_string(Box::new(my_string));%0A++++print_if_string(Box::new(0i8));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.downcast_unchecked-1\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1878\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.downcast_unchecked-1\" class=\"fn\">downcast_unchecked</a>&lt;T&gt;(self) -&gt; <a class=\"struct\" href=\"../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.Any.html\" title=\"trait std::any::Any\">Any</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>downcast_unchecked</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/90850\">#90850</a>)</span></div></span></summary><div class=\"docblock\"><p>Downcasts the box to a concrete type.</p>\n<p>For a safe alternative see <a href=\"../boxed/struct.Box.html#method.downcast\" title=\"method std::boxed::Box::downcast\"><code>downcast</code></a>.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(downcast_unchecked)]\n\n</span><span class=\"kw\">use </span>std::any::Any;\n\n<span class=\"kw\">let </span>x: Box&lt;<span class=\"kw\">dyn </span>Any + Send&gt; = Box::new(<span class=\"number\">1_usize</span>);\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>x.downcast_unchecked::&lt;usize&gt;(), <span class=\"number\">1</span>);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(downcast_unchecked)%5D%0A%0Afn+main()+%7B%0A++++use+std::any::Any;%0A++++%0A++++let+x:+Box%3Cdyn+Any+%2B+Send%3E+=+Box::new(1_usize);%0A++++%0A++++unsafe+%7B%0A++++++++assert_eq!(*x.downcast_unchecked::%3Cusize%3E(),+1);%0A++++%7D%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<h5 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">Â§</a>Safety</h5>\n<p>The contained value must be of type <code>T</code>. Calling this method\nwith the incorrect type is <em>undefined behavior</em>.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Box%3Cdyn+Any+%2B+Send+%2B+Sync,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1887\">source</a><a href=\"#impl-Box%3Cdyn+Any+%2B+Send+%2B+Sync,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"struct\" href=\"../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"trait.Any.html\" title=\"trait std::any::Any\">Any</a> + <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a>, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.downcast-2\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.51.0\">1.51.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1907\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.downcast-2\" class=\"fn\">downcast</a>&lt;T&gt;(self) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T, A&gt;, <a class=\"struct\" href=\"../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"trait.Any.html\" title=\"trait std::any::Any\">Any</a> + <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a>, A&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.Any.html\" title=\"trait std::any::Any\">Any</a>,</div></h4></section></summary><div class=\"docblock\"><p>Attempt to downcast the box to a concrete type.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::any::Any;\n\n<span class=\"kw\">fn </span>print_if_string(value: Box&lt;<span class=\"kw\">dyn </span>Any + Send + Sync&gt;) {\n    <span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span>(string) = value.downcast::&lt;String&gt;() {\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"String ({}): {}\"</span>, string.len(), string);\n    }\n}\n\n<span class=\"kw\">let </span>my_string = <span class=\"string\">\"Hello World\"</span>.to_string();\nprint_if_string(Box::new(my_string));\nprint_if_string(Box::new(<span class=\"number\">0i8</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::any::Any;%0A++++%0A++++fn+print_if_string(value:+Box%3Cdyn+Any+%2B+Send+%2B+Sync%3E)+%7B%0A++++++++if+let+Ok(string)+=+value.downcast::%3CString%3E()+%7B%0A++++++++++++println!(%22String+(%7B%7D):+%7B%7D%22,+string.len(),+string);%0A++++++++%7D%0A++++%7D%0A++++%0A++++let+my_string+=+%22Hello+World%22.to_string();%0A++++print_if_string(Box::new(my_string));%0A++++print_if_string(Box::new(0i8));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.downcast_unchecked-2\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1937\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.downcast_unchecked-2\" class=\"fn\">downcast_unchecked</a>&lt;T&gt;(self) -&gt; <a class=\"struct\" href=\"../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.Any.html\" title=\"trait std::any::Any\">Any</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>downcast_unchecked</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/90850\">#90850</a>)</span></div></span></summary><div class=\"docblock\"><p>Downcasts the box to a concrete type.</p>\n<p>For a safe alternative see <a href=\"../boxed/struct.Box.html#method.downcast\" title=\"method std::boxed::Box::downcast\"><code>downcast</code></a>.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(downcast_unchecked)]\n\n</span><span class=\"kw\">use </span>std::any::Any;\n\n<span class=\"kw\">let </span>x: Box&lt;<span class=\"kw\">dyn </span>Any + Send + Sync&gt; = Box::new(<span class=\"number\">1_usize</span>);\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>x.downcast_unchecked::&lt;usize&gt;(), <span class=\"number\">1</span>);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(downcast_unchecked)%5D%0A%0Afn+main()+%7B%0A++++use+std::any::Any;%0A++++%0A++++let+x:+Box%3Cdyn+Any+%2B+Send+%2B+Sync%3E+=+Box::new(1_usize);%0A++++%0A++++unsafe+%7B%0A++++++++assert_eq!(*x.downcast_unchecked::%3Cusize%3E(),+1);%0A++++%7D%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<h5 id=\"safety-2\"><a class=\"doc-anchor\" href=\"#safety-2\">Â§</a>Safety</h5>\n<p>The contained value must be of type <code>T</code>. Calling this method\nwith the incorrect type is <em>undefined behavior</em>.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-dyn+Any\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#174\">source</a><a href=\"#impl-dyn+Any\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl dyn <a class=\"trait\" href=\"trait.Any.html\" title=\"trait std::any::Any\">Any</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#195\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.is\" class=\"fn\">is</a>&lt;T&gt;(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.Any.html\" title=\"trait std::any::Any\">Any</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the inner type is the same as <code>T</code>.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::any::Any;\n\n<span class=\"kw\">fn </span>is_string(s: <span class=\"kw-2\">&amp;</span><span class=\"kw\">dyn </span>Any) {\n    <span class=\"kw\">if </span>s.is::&lt;String&gt;() {\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"It's a string!\"</span>);\n    } <span class=\"kw\">else </span>{\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"Not a string...\"</span>);\n    }\n}\n\nis_string(<span class=\"kw-2\">&amp;</span><span class=\"number\">0</span>);\nis_string(<span class=\"kw-2\">&amp;</span><span class=\"string\">\"cookie monster\"</span>.to_string());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::any::Any;%0A++++%0A++++fn+is_string(s:+%26dyn+Any)+%7B%0A++++++++if+s.is::%3CString%3E()+%7B%0A++++++++++++println!(%22It's+a+string!%22);%0A++++++++%7D+else+%7B%0A++++++++++++println!(%22Not+a+string...%22);%0A++++++++%7D%0A++++%7D%0A++++%0A++++is_string(%260);%0A++++is_string(%26%22cookie+monster%22.to_string());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.downcast_ref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#227\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.downcast_ref\" class=\"fn\">downcast_ref</a>&lt;T&gt;(&amp;self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.Any.html\" title=\"trait std::any::Any\">Any</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns some reference to the inner value if it is of type <code>T</code>, or\n<code>None</code> if it isnâ€™t.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::any::Any;\n\n<span class=\"kw\">fn </span>print_if_string(s: <span class=\"kw-2\">&amp;</span><span class=\"kw\">dyn </span>Any) {\n    <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(string) = s.downcast_ref::&lt;String&gt;() {\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"It's a string({}): '{}'\"</span>, string.len(), string);\n    } <span class=\"kw\">else </span>{\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"Not a string...\"</span>);\n    }\n}\n\nprint_if_string(<span class=\"kw-2\">&amp;</span><span class=\"number\">0</span>);\nprint_if_string(<span class=\"kw-2\">&amp;</span><span class=\"string\">\"cookie monster\"</span>.to_string());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::any::Any;%0A++++%0A++++fn+print_if_string(s:+%26dyn+Any)+%7B%0A++++++++if+let+Some(string)+=+s.downcast_ref::%3CString%3E()+%7B%0A++++++++++++println!(%22It's+a+string(%7B%7D):+'%7B%7D'%22,+string.len(),+string);%0A++++++++%7D+else+%7B%0A++++++++++++println!(%22Not+a+string...%22);%0A++++++++%7D%0A++++%7D%0A++++%0A++++print_if_string(%260);%0A++++print_if_string(%26%22cookie+monster%22.to_string());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.downcast_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#263\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.downcast_mut\" class=\"fn\">downcast_mut</a>&lt;T&gt;(&amp;mut self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.Any.html\" title=\"trait std::any::Any\">Any</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns some mutable reference to the inner value if it is of type <code>T</code>, or\n<code>None</code> if it isnâ€™t.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::any::Any;\n\n<span class=\"kw\">fn </span>modify_if_u32(s: <span class=\"kw-2\">&amp;mut </span><span class=\"kw\">dyn </span>Any) {\n    <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(num) = s.downcast_mut::&lt;u32&gt;() {\n        <span class=\"kw-2\">*</span>num = <span class=\"number\">42</span>;\n    }\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"number\">10u32</span>;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = <span class=\"string\">\"starlord\"</span>.to_string();\n\nmodify_if_u32(<span class=\"kw-2\">&amp;mut </span>x);\nmodify_if_u32(<span class=\"kw-2\">&amp;mut </span>s);\n\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"number\">42</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>s, <span class=\"string\">\"starlord\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::any::Any;%0A++++%0A++++fn+modify_if_u32(s:+%26mut+dyn+Any)+%7B%0A++++++++if+let+Some(num)+=+s.downcast_mut::%3Cu32%3E()+%7B%0A++++++++++++*num+=+42;%0A++++++++%7D%0A++++%7D%0A++++%0A++++let+mut+x+=+10u32;%0A++++let+mut+s+=+%22starlord%22.to_string();%0A++++%0A++++modify_if_u32(%26mut+x);%0A++++modify_if_u32(%26mut+s);%0A++++%0A++++assert_eq!(x,+42);%0A++++assert_eq!(%26s,+%22starlord%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.downcast_ref_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#296\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.downcast_ref_unchecked\" class=\"fn\">downcast_ref_unchecked</a>&lt;T&gt;(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.Any.html\" title=\"trait std::any::Any\">Any</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>downcast_unchecked</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/90850\">#90850</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns a reference to the inner value as type <code>dyn T</code>.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(downcast_unchecked)]\n\n</span><span class=\"kw\">use </span>std::any::Any;\n\n<span class=\"kw\">let </span>x: Box&lt;<span class=\"kw\">dyn </span>Any&gt; = Box::new(<span class=\"number\">1_usize</span>);\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>x.downcast_ref_unchecked::&lt;usize&gt;(), <span class=\"number\">1</span>);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(downcast_unchecked)%5D%0A%0Afn+main()+%7B%0A++++use+std::any::Any;%0A++++%0A++++let+x:+Box%3Cdyn+Any%3E+=+Box::new(1_usize);%0A++++%0A++++unsafe+%7B%0A++++++++assert_eq!(*x.downcast_ref_unchecked::%3Cusize%3E(),+1);%0A++++%7D%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<h5 id=\"safety-3\"><a class=\"doc-anchor\" href=\"#safety-3\">Â§</a>Safety</h5>\n<p>The contained value must be of type <code>T</code>. Calling this method\nwith the incorrect type is <em>undefined behavior</em>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.downcast_mut_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#326\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.downcast_mut_unchecked\" class=\"fn\">downcast_mut_unchecked</a>&lt;T&gt;(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.Any.html\" title=\"trait std::any::Any\">Any</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>downcast_unchecked</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/90850\">#90850</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns a mutable reference to the inner value as type <code>dyn T</code>.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(downcast_unchecked)]\n\n</span><span class=\"kw\">use </span>std::any::Any;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: Box&lt;<span class=\"kw\">dyn </span>Any&gt; = Box::new(<span class=\"number\">1_usize</span>);\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"kw-2\">*</span>x.downcast_mut_unchecked::&lt;usize&gt;() += <span class=\"number\">1</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>x.downcast_ref::&lt;usize&gt;().unwrap(), <span class=\"number\">2</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(downcast_unchecked)%5D%0A%0Afn+main()+%7B%0A++++use+std::any::Any;%0A++++%0A++++let+mut+x:+Box%3Cdyn+Any%3E+=+Box::new(1_usize);%0A++++%0A++++unsafe+%7B%0A++++++++*x.downcast_mut_unchecked::%3Cusize%3E()+%2B=+1;%0A++++%7D%0A++++%0A++++assert_eq!(*x.downcast_ref::%3Cusize%3E().unwrap(),+2);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<h5 id=\"safety-4\"><a class=\"doc-anchor\" href=\"#safety-4\">Â§</a>Safety</h5>\n<p>The contained value must be of type <code>T</code>. Calling this method\nwith the incorrect type is <em>undefined behavior</em>.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-dyn+Any+%2B+Send\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#333\">source</a><a href=\"#impl-dyn+Any+%2B+Send\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl dyn <a class=\"trait\" href=\"trait.Any.html\" title=\"trait std::any::Any\">Any</a> + <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#354\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.is-1\" class=\"fn\">is</a>&lt;T&gt;(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.Any.html\" title=\"trait std::any::Any\">Any</a>,</div></h4></section></summary><div class=\"docblock\"><p>Forwards to the method defined on the type <code>dyn Any</code>.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::any::Any;\n\n<span class=\"kw\">fn </span>is_string(s: <span class=\"kw-2\">&amp;</span>(<span class=\"kw\">dyn </span>Any + Send)) {\n    <span class=\"kw\">if </span>s.is::&lt;String&gt;() {\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"It's a string!\"</span>);\n    } <span class=\"kw\">else </span>{\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"Not a string...\"</span>);\n    }\n}\n\nis_string(<span class=\"kw-2\">&amp;</span><span class=\"number\">0</span>);\nis_string(<span class=\"kw-2\">&amp;</span><span class=\"string\">\"cookie monster\"</span>.to_string());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::any::Any;%0A++++%0A++++fn+is_string(s:+%26(dyn+Any+%2B+Send))+%7B%0A++++++++if+s.is::%3CString%3E()+%7B%0A++++++++++++println!(%22It's+a+string!%22);%0A++++++++%7D+else+%7B%0A++++++++++++println!(%22Not+a+string...%22);%0A++++++++%7D%0A++++%7D%0A++++%0A++++is_string(%260);%0A++++is_string(%26%22cookie+monster%22.to_string());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.downcast_ref-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#378\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.downcast_ref-1\" class=\"fn\">downcast_ref</a>&lt;T&gt;(&amp;self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.Any.html\" title=\"trait std::any::Any\">Any</a>,</div></h4></section></summary><div class=\"docblock\"><p>Forwards to the method defined on the type <code>dyn Any</code>.</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::any::Any;\n\n<span class=\"kw\">fn </span>print_if_string(s: <span class=\"kw-2\">&amp;</span>(<span class=\"kw\">dyn </span>Any + Send)) {\n    <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(string) = s.downcast_ref::&lt;String&gt;() {\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"It's a string({}): '{}'\"</span>, string.len(), string);\n    } <span class=\"kw\">else </span>{\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"Not a string...\"</span>);\n    }\n}\n\nprint_if_string(<span class=\"kw-2\">&amp;</span><span class=\"number\">0</span>);\nprint_if_string(<span class=\"kw-2\">&amp;</span><span class=\"string\">\"cookie monster\"</span>.to_string());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::any::Any;%0A++++%0A++++fn+print_if_string(s:+%26(dyn+Any+%2B+Send))+%7B%0A++++++++if+let+Some(string)+=+s.downcast_ref::%3CString%3E()+%7B%0A++++++++++++println!(%22It's+a+string(%7B%7D):+'%7B%7D'%22,+string.len(),+string);%0A++++++++%7D+else+%7B%0A++++++++++++println!(%22Not+a+string...%22);%0A++++++++%7D%0A++++%7D%0A++++%0A++++print_if_string(%260);%0A++++print_if_string(%26%22cookie+monster%22.to_string());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.downcast_mut-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#406\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.downcast_mut-1\" class=\"fn\">downcast_mut</a>&lt;T&gt;(&amp;mut self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.Any.html\" title=\"trait std::any::Any\">Any</a>,</div></h4></section></summary><div class=\"docblock\"><p>Forwards to the method defined on the type <code>dyn Any</code>.</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::any::Any;\n\n<span class=\"kw\">fn </span>modify_if_u32(s: <span class=\"kw-2\">&amp;mut </span>(<span class=\"kw\">dyn </span>Any + Send)) {\n    <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(num) = s.downcast_mut::&lt;u32&gt;() {\n        <span class=\"kw-2\">*</span>num = <span class=\"number\">42</span>;\n    }\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"number\">10u32</span>;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = <span class=\"string\">\"starlord\"</span>.to_string();\n\nmodify_if_u32(<span class=\"kw-2\">&amp;mut </span>x);\nmodify_if_u32(<span class=\"kw-2\">&amp;mut </span>s);\n\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"number\">42</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>s, <span class=\"string\">\"starlord\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::any::Any;%0A++++%0A++++fn+modify_if_u32(s:+%26mut+(dyn+Any+%2B+Send))+%7B%0A++++++++if+let+Some(num)+=+s.downcast_mut::%3Cu32%3E()+%7B%0A++++++++++++*num+=+42;%0A++++++++%7D%0A++++%7D%0A++++%0A++++let+mut+x+=+10u32;%0A++++let+mut+s+=+%22starlord%22.to_string();%0A++++%0A++++modify_if_u32(%26mut+x);%0A++++modify_if_u32(%26mut+s);%0A++++%0A++++assert_eq!(x,+42);%0A++++assert_eq!(%26s,+%22starlord%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.downcast_ref_unchecked-1\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#431\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.downcast_ref_unchecked-1\" class=\"fn\">downcast_ref_unchecked</a>&lt;T&gt;(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.Any.html\" title=\"trait std::any::Any\">Any</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>downcast_unchecked</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/90850\">#90850</a>)</span></div></span></summary><div class=\"docblock\"><p>Forwards to the method defined on the type <code>dyn Any</code>.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(downcast_unchecked)]\n\n</span><span class=\"kw\">use </span>std::any::Any;\n\n<span class=\"kw\">let </span>x: Box&lt;<span class=\"kw\">dyn </span>Any&gt; = Box::new(<span class=\"number\">1_usize</span>);\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>x.downcast_ref_unchecked::&lt;usize&gt;(), <span class=\"number\">1</span>);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(downcast_unchecked)%5D%0A%0Afn+main()+%7B%0A++++use+std::any::Any;%0A++++%0A++++let+x:+Box%3Cdyn+Any%3E+=+Box::new(1_usize);%0A++++%0A++++unsafe+%7B%0A++++++++assert_eq!(*x.downcast_ref_unchecked::%3Cusize%3E(),+1);%0A++++%7D%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<h5 id=\"safety-5\"><a class=\"doc-anchor\" href=\"#safety-5\">Â§</a>Safety</h5>\n<p>Same as the method on the type <code>dyn Any</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.downcast_mut_unchecked-1\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#459\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.downcast_mut_unchecked-1\" class=\"fn\">downcast_mut_unchecked</a>&lt;T&gt;(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.Any.html\" title=\"trait std::any::Any\">Any</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>downcast_unchecked</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/90850\">#90850</a>)</span></div></span></summary><div class=\"docblock\"><p>Forwards to the method defined on the type <code>dyn Any</code>.</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(downcast_unchecked)]\n\n</span><span class=\"kw\">use </span>std::any::Any;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: Box&lt;<span class=\"kw\">dyn </span>Any&gt; = Box::new(<span class=\"number\">1_usize</span>);\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"kw-2\">*</span>x.downcast_mut_unchecked::&lt;usize&gt;() += <span class=\"number\">1</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>x.downcast_ref::&lt;usize&gt;().unwrap(), <span class=\"number\">2</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(downcast_unchecked)%5D%0A%0Afn+main()+%7B%0A++++use+std::any::Any;%0A++++%0A++++let+mut+x:+Box%3Cdyn+Any%3E+=+Box::new(1_usize);%0A++++%0A++++unsafe+%7B%0A++++++++*x.downcast_mut_unchecked::%3Cusize%3E()+%2B=+1;%0A++++%7D%0A++++%0A++++assert_eq!(*x.downcast_ref::%3Cusize%3E().unwrap(),+2);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<h5 id=\"safety-6\"><a class=\"doc-anchor\" href=\"#safety-6\">Â§</a>Safety</h5>\n<p>Same as the method on the type <code>dyn Any</code>.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-dyn+Any+%2B+Send+%2B+Sync\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#465\">source</a><a href=\"#impl-dyn+Any+%2B+Send+%2B+Sync\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl dyn <a class=\"trait\" href=\"trait.Any.html\" title=\"trait std::any::Any\">Any</a> + <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is-2\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#486\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.is-2\" class=\"fn\">is</a>&lt;T&gt;(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.Any.html\" title=\"trait std::any::Any\">Any</a>,</div></h4></section></summary><div class=\"docblock\"><p>Forwards to the method defined on the type <code>Any</code>.</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::any::Any;\n\n<span class=\"kw\">fn </span>is_string(s: <span class=\"kw-2\">&amp;</span>(<span class=\"kw\">dyn </span>Any + Send + Sync)) {\n    <span class=\"kw\">if </span>s.is::&lt;String&gt;() {\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"It's a string!\"</span>);\n    } <span class=\"kw\">else </span>{\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"Not a string...\"</span>);\n    }\n}\n\nis_string(<span class=\"kw-2\">&amp;</span><span class=\"number\">0</span>);\nis_string(<span class=\"kw-2\">&amp;</span><span class=\"string\">\"cookie monster\"</span>.to_string());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::any::Any;%0A++++%0A++++fn+is_string(s:+%26(dyn+Any+%2B+Send+%2B+Sync))+%7B%0A++++++++if+s.is::%3CString%3E()+%7B%0A++++++++++++println!(%22It's+a+string!%22);%0A++++++++%7D+else+%7B%0A++++++++++++println!(%22Not+a+string...%22);%0A++++++++%7D%0A++++%7D%0A++++%0A++++is_string(%260);%0A++++is_string(%26%22cookie+monster%22.to_string());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.downcast_ref-2\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#510\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.downcast_ref-2\" class=\"fn\">downcast_ref</a>&lt;T&gt;(&amp;self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.Any.html\" title=\"trait std::any::Any\">Any</a>,</div></h4></section></summary><div class=\"docblock\"><p>Forwards to the method defined on the type <code>Any</code>.</p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::any::Any;\n\n<span class=\"kw\">fn </span>print_if_string(s: <span class=\"kw-2\">&amp;</span>(<span class=\"kw\">dyn </span>Any + Send + Sync)) {\n    <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(string) = s.downcast_ref::&lt;String&gt;() {\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"It's a string({}): '{}'\"</span>, string.len(), string);\n    } <span class=\"kw\">else </span>{\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"Not a string...\"</span>);\n    }\n}\n\nprint_if_string(<span class=\"kw-2\">&amp;</span><span class=\"number\">0</span>);\nprint_if_string(<span class=\"kw-2\">&amp;</span><span class=\"string\">\"cookie monster\"</span>.to_string());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::any::Any;%0A++++%0A++++fn+print_if_string(s:+%26(dyn+Any+%2B+Send+%2B+Sync))+%7B%0A++++++++if+let+Some(string)+=+s.downcast_ref::%3CString%3E()+%7B%0A++++++++++++println!(%22It's+a+string(%7B%7D):+'%7B%7D'%22,+string.len(),+string);%0A++++++++%7D+else+%7B%0A++++++++++++println!(%22Not+a+string...%22);%0A++++++++%7D%0A++++%7D%0A++++%0A++++print_if_string(%260);%0A++++print_if_string(%26%22cookie+monster%22.to_string());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.downcast_mut-2\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#538\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.downcast_mut-2\" class=\"fn\">downcast_mut</a>&lt;T&gt;(&amp;mut self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.Any.html\" title=\"trait std::any::Any\">Any</a>,</div></h4></section></summary><div class=\"docblock\"><p>Forwards to the method defined on the type <code>Any</code>.</p>\n<h5 id=\"examples-19\"><a class=\"doc-anchor\" href=\"#examples-19\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::any::Any;\n\n<span class=\"kw\">fn </span>modify_if_u32(s: <span class=\"kw-2\">&amp;mut </span>(<span class=\"kw\">dyn </span>Any + Send + Sync)) {\n    <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(num) = s.downcast_mut::&lt;u32&gt;() {\n        <span class=\"kw-2\">*</span>num = <span class=\"number\">42</span>;\n    }\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"number\">10u32</span>;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = <span class=\"string\">\"starlord\"</span>.to_string();\n\nmodify_if_u32(<span class=\"kw-2\">&amp;mut </span>x);\nmodify_if_u32(<span class=\"kw-2\">&amp;mut </span>s);\n\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"number\">42</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>s, <span class=\"string\">\"starlord\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::any::Any;%0A++++%0A++++fn+modify_if_u32(s:+%26mut+(dyn+Any+%2B+Send+%2B+Sync))+%7B%0A++++++++if+let+Some(num)+=+s.downcast_mut::%3Cu32%3E()+%7B%0A++++++++++++*num+=+42;%0A++++++++%7D%0A++++%7D%0A++++%0A++++let+mut+x+=+10u32;%0A++++let+mut+s+=+%22starlord%22.to_string();%0A++++%0A++++modify_if_u32(%26mut+x);%0A++++modify_if_u32(%26mut+s);%0A++++%0A++++assert_eq!(x,+42);%0A++++assert_eq!(%26s,+%22starlord%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.downcast_ref_unchecked-2\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#559\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.downcast_ref_unchecked-2\" class=\"fn\">downcast_ref_unchecked</a>&lt;T&gt;(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.Any.html\" title=\"trait std::any::Any\">Any</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>downcast_unchecked</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/90850\">#90850</a>)</span></div></span></summary><div class=\"docblock\"><p>Forwards to the method defined on the type <code>Any</code>.</p>\n<h5 id=\"examples-20\"><a class=\"doc-anchor\" href=\"#examples-20\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(downcast_unchecked)]\n\n</span><span class=\"kw\">use </span>std::any::Any;\n\n<span class=\"kw\">let </span>x: Box&lt;<span class=\"kw\">dyn </span>Any&gt; = Box::new(<span class=\"number\">1_usize</span>);\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>x.downcast_ref_unchecked::&lt;usize&gt;(), <span class=\"number\">1</span>);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(downcast_unchecked)%5D%0A%0Afn+main()+%7B%0A++++use+std::any::Any;%0A++++%0A++++let+x:+Box%3Cdyn+Any%3E+=+Box::new(1_usize);%0A++++%0A++++unsafe+%7B%0A++++++++assert_eq!(*x.downcast_ref_unchecked::%3Cusize%3E(),+1);%0A++++%7D%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.downcast_mut_unchecked-2\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#583\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.downcast_mut_unchecked-2\" class=\"fn\">downcast_mut_unchecked</a>&lt;T&gt;(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.Any.html\" title=\"trait std::any::Any\">Any</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>downcast_unchecked</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/90850\">#90850</a>)</span></div></span></summary><div class=\"docblock\"><p>Forwards to the method defined on the type <code>Any</code>.</p>\n<h5 id=\"examples-21\"><a class=\"doc-anchor\" href=\"#examples-21\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(downcast_unchecked)]\n\n</span><span class=\"kw\">use </span>std::any::Any;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: Box&lt;<span class=\"kw\">dyn </span>Any&gt; = Box::new(<span class=\"number\">1_usize</span>);\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"kw-2\">*</span>x.downcast_mut_unchecked::&lt;usize&gt;() += <span class=\"number\">1</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>x.downcast_ref::&lt;usize&gt;().unwrap(), <span class=\"number\">2</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(downcast_unchecked)%5D%0A%0Afn+main()+%7B%0A++++use+std::any::Any;%0A++++%0A++++let+mut+x:+Box%3Cdyn+Any%3E+=+Box::new(1_usize);%0A++++%0A++++unsafe+%7B%0A++++++++*x.downcast_mut_unchecked::%3Cusize%3E()+%2B=+1;%0A++++%7D%0A++++%0A++++assert_eq!(*x.downcast_ref::%3Cusize%3E().unwrap(),+2);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details></div></details></div><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">Â§</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-dyn+Any\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#151\">source</a></span><a href=\"#impl-Debug-for-dyn+Any\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for dyn <a class=\"trait\" href=\"trait.Any.html\" title=\"trait std::any::Any\">Any</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#152\">source</a><a href=\"#method.fmt-1\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"../fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-dyn+Any+%2B+Send\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#161\">source</a></span><a href=\"#impl-Debug-for-dyn+Any+%2B+Send\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for dyn <a class=\"trait\" href=\"trait.Any.html\" title=\"trait std::any::Any\">Any</a> + <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#162\">source</a><a href=\"#method.fmt\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"../fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-dyn+Any+%2B+Send+%2B+Sync\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#168\">source</a></span><a href=\"#impl-Debug-for-dyn+Any+%2B+Send+%2B+Sync\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for dyn <a class=\"trait\" href=\"trait.Any.html\" title=\"trait std::any::Any\">Any</a> + <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#169\">source</a><a href=\"#method.fmt-2\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"../fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details></div><h2 id=\"implementors\" class=\"section-header\">Implementors<a href=\"#implementors\" class=\"anchor\">Â§</a></h2><div id=\"implementors-list\"><section id=\"impl-Any-for-T\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a></span><a href=\"#impl-Any-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></div><script src=\"../../trait.impl/core/any/trait.Any.js\" async=\"\"></script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:11:53.903Z"
}