{
	"title": "Associated Items - The Rust Reference",
	"url": "https://doc.rust-lang.org/stable/reference/items/associated-items.html",
	"markdown": "# Associated Items - The Rust Reference\n\n> **Syntax**  \n> _AssociatedItem_ :  \n>    [_OuterAttribute_](../attributes.html)\\* (  \n>          [_MacroInvocationSemi_](about:blank/macros.html#macro-invocation)  \n>       | ( [_Visibility_](../visibility-and-privacy.html)? ( [_TypeAlias_](type-aliases.html) | [_ConstantItem_](constant-items.html) | [_Function_](functions.html) ) )  \n>    )\n\n_Associated Items_ are the items declared in [traits](traits.html) or defined in [implementations](implementations.html). They are called this because they are defined on an associate type — the type in the implementation. They are a subset of the kinds of items you can declare in a module. Specifically, there are [associated functions](#associated-functions-and-methods) (including methods), [associated types](#associated-types), and [associated constants](#associated-constants).\n\nAssociated items are useful when the associated item logically is related to the associating item. For example, the `is_some` method on `Option` is intrinsically related to Options, so should be associated.\n\nEvery associated item kind comes in two varieties: definitions that contain the actual implementation and declarations that declare signatures for definitions.\n\nIt is the declarations that make up the contract of traits and what is available on generic types.\n\n## [Associated functions and methods](#associated-functions-and-methods)\n\n_Associated functions_ are [functions](functions.html) associated with a type.\n\nAn _associated function declaration_ declares a signature for an associated function definition. It is written as a function item, except the function body is replaced with a `;`.\n\nThe identifier is the name of the function. The generics, parameter list, return type, and where clause of the associated function must be the same as the associated function declarations's.\n\nAn _associated function definition_ defines a function associated with another type. It is written the same as a [function item](../types/function-item.html).\n\nAn example of a common associated function is a `new` function that returns a value of the type the associated function is associated with.\n\n```rust\nstruct Struct {\n    field: i32\n}\n\nimpl Struct {\n    fn new() -> Struct {\n        Struct {\n            field: 0i32\n        }\n    }\n}\n\nfn main () {\n    let _struct = Struct::new();\n}\n```\n\nWhen the associated function is declared on a trait, the function can also be called with a [path](../paths.html) that is a path to the trait appended by the name of the trait. When this happens, it is substituted for `<_ as Trait>::function_name`.\n\n```rust\n#![allow(unused)]\nfn main() {\ntrait Num {\n    fn from_i32(n: i32) -> Self;\n}\n\nimpl Num for f64 {\n    fn from_i32(n: i32) -> f64 { n as f64 }\n}\n\n// These 4 are all equivalent in this case.\nlet _: f64 = Num::from_i32(42);\nlet _: f64 = <_ as Num>::from_i32(42);\nlet _: f64 = <f64 as Num>::from_i32(42);\nlet _: f64 = f64::from_i32(42);\n}\n```\n\n### [Methods](#methods)\n\nAssociated functions whose first parameter is named `self` are called _methods_ and may be invoked using the [method call operator](../expressions/method-call-expr.html), for example, `x.foo()`, as well as the usual function call notation.\n\nIf the type of the `self` parameter is specified, it is limited to types resolving to one generated by the following grammar (where `'lt` denotes some arbitrary lifetime):\n\n```text\nP = &'lt S | &'lt mut S | Box<S> | Rc<S> | Arc<S> | Pin<P>\nS = Self | P\n\n```\n\nThe `Self` terminal in this grammar denotes a type resolving to the implementing type. This can also include the contextual type alias `Self`, other type aliases, or associated type projections resolving to the implementing type.\n\n```rust\n#![allow(unused)]\nfn main() {\nuse std::rc::Rc;\nuse std::sync::Arc;\nuse std::pin::Pin;\n// Examples of methods implemented on struct `Example`.\nstruct Example;\ntype Alias = Example;\ntrait Trait { type Output; }\nimpl Trait for Example { type Output = Example; }\nimpl Example {\n    fn by_value(self: Self) {}\n    fn by_ref(self: &Self) {}\n    fn by_ref_mut(self: &mut Self) {}\n    fn by_box(self: Box<Self>) {}\n    fn by_rc(self: Rc<Self>) {}\n    fn by_arc(self: Arc<Self>) {}\n    fn by_pin(self: Pin<&Self>) {}\n    fn explicit_type(self: Arc<Example>) {}\n    fn with_lifetime<'a>(self: &'a Self) {}\n    fn nested<'a>(self: &mut &'a Arc<Rc<Box<Alias>>>) {}\n    fn via_projection(self: <Example as Trait>::Output) {}\n}\n}\n```\n\nShorthand syntax can be used without specifying a type, which have the following equivalents:\n\n| Shorthand | Equivalent |\n| --- | --- |\n| `self` | `self: Self` |\n| `&'lifetime self` | `self: &'lifetime Self` |\n| `&'lifetime mut self` | `self: &'lifetime mut Self` |\n\n> **Note**: Lifetimes can be, and usually are, elided with this shorthand.\n\nIf the `self` parameter is prefixed with `mut`, it becomes a mutable variable, similar to regular parameters using a `mut` [identifier pattern](about:blank/patterns.html#identifier-patterns). For example:\n\n```rust\n#![allow(unused)]\nfn main() {\ntrait Changer: Sized {\n    fn change(mut self) {}\n    fn modify(mut self: Box<Self>) {}\n}\n}\n```\n\nAs an example of methods on a trait, consider the following:\n\n```rust\n#![allow(unused)]\nfn main() {\ntype Surface = i32;\ntype BoundingBox = i32;\ntrait Shape {\n    fn draw(&self, surface: Surface);\n    fn bounding_box(&self) -> BoundingBox;\n}\n}\n```\n\nThis defines a trait with two methods. All values that have [implementations](implementations.html) of this trait while the trait is in scope can have their `draw` and `bounding_box` methods called.\n\n```rust\n#![allow(unused)]\nfn main() {\ntype Surface = i32;\ntype BoundingBox = i32;\ntrait Shape {\n    fn draw(&self, surface: Surface);\n    fn bounding_box(&self) -> BoundingBox;\n}\n\nstruct Circle {\n    // ...\n}\n\nimpl Shape for Circle {\n    // ...\n  fn draw(&self, _: Surface) {}\n  fn bounding_box(&self) -> BoundingBox { 0i32 }\n}\n\nimpl Circle {\n    fn new() -> Circle { Circle{} }\n}\n\nlet circle_shape = Circle::new();\nlet bounding_box = circle_shape.bounding_box();\n}\n```\n\n> **Edition Differences**: In the 2015 edition, it is possible to declare trait methods with anonymous parameters (e.g. `fn foo(u8)`). This is deprecated and an error as of the 2018 edition. All parameters must have an argument name.\n\n#### [Attributes on method parameters](#attributes-on-method-parameters)\n\nAttributes on method parameters follow the same rules and restrictions as [regular function parameters](about:blank/functions.html#attributes-on-function-parameters).\n\n## [Associated Types](#associated-types)\n\n_Associated types_ are [type aliases](type-aliases.html) associated with another type. Associated types cannot be defined in [inherent implementations](about:blank/implementations.html#inherent-implementations) nor can they be given a default implementation in traits.\n\nAn _associated type declaration_ declares a signature for associated type definitions. It is written in one of the following forms, where `Assoc` is the name of the associated type, `Params` is a comma-separated list of type, lifetime or const parameters, `Bounds` is a plus-separated list of trait bounds that the associated type must meet, and `WhereBounds` is a comma-separated list of bounds that the parameters must meet:\n\n```rust\ntype Assoc;\ntype Assoc: Bounds;\ntype Assoc<Params>;\ntype Assoc<Params>: Bounds;\ntype Assoc<Params> where WhereBounds;\ntype Assoc<Params>: Bounds where WhereBounds;\n```\n\nThe identifier is the name of the declared type alias. The optional trait bounds must be fulfilled by the implementations of the type alias. There is an implicit [`Sized`](about:blank/special-types-and-traits.html#sized) bound on associated types that can be relaxed using the special `?Sized` bound.\n\nAn _associated type definition_ defines a type alias for the implementation of a trait on a type. They are written similarly to an _associated type declaration_, but cannot contain `Bounds`, but instead must contain a `Type`:\n\n```rust\ntype Assoc = Type;\ntype Assoc<Params> = Type; // the type `Type` here may reference `Params`\ntype Assoc<Params> = Type where WhereBounds;\ntype Assoc<Params> where WhereBounds = Type; // deprecated, prefer the form above\n```\n\nIf a type `Item` has an associated type `Assoc` from a trait `Trait`, then `<Item as Trait>::Assoc` is a type that is an alias of the type specified in the associated type definition. Furthermore, if `Item` is a type parameter, then `Item::Assoc` can be used in type parameters.\n\nAssociated types may include [generic parameters](generics.html) and [where clauses](about:blank/generics.html#where-clauses); these are often referred to as _generic associated types_, or _GATs_. If the type `Thing` has an associated type `Item` from a trait `Trait` with the generics `<'a>` , the type can be named like `<Thing as Trait>::Item<'x>`, where `'x` is some lifetime in scope. In this case, `'x` will be used wherever `'a` appears in the associated type definitions on impls.\n\n```rust\ntrait AssociatedType {\n    // Associated type declaration\n    type Assoc;\n}\n\nstruct Struct;\n\nstruct OtherStruct;\n\nimpl AssociatedType for Struct {\n    // Associated type definition\n    type Assoc = OtherStruct;\n}\n\nimpl OtherStruct {\n    fn new() -> OtherStruct {\n        OtherStruct\n    }\n}\n\nfn main() {\n    // Usage of the associated type to refer to OtherStruct as <Struct as AssociatedType>::Assoc\n    let _other_struct: OtherStruct = <Struct as AssociatedType>::Assoc::new();\n}\n```\n\nAn example of associated types with generics and where clauses:\n\n```rust\nstruct ArrayLender<'a, T>(&'a mut [T; 16]);\n\ntrait Lend {\n    // Generic associated type declaration\n    type Lender<'a> where Self: 'a;\n    fn lend<'a>(&'a mut self) -> Self::Lender<'a>;\n}\n\nimpl<T> Lend for [T; 16] {\n    // Generic associated type definition\n    type Lender<'a> = ArrayLender<'a, T> where Self: 'a;\n\n    fn lend<'a>(&'a mut self) -> Self::Lender<'a> {\n        ArrayLender(self)\n    }\n}\n\nfn borrow<'a, T: Lend>(array: &'a mut T) -> <T as Lend>::Lender<'a> {\n    array.lend()\n}\n\n\nfn main() {\n    let mut array = [0usize; 16];\n    let lender = borrow(&mut array);\n}\n```\n\n### [Associated Types Container Example](#associated-types-container-example)\n\nConsider the following example of a `Container` trait. Notice that the type is available for use in the method signatures:\n\n```rust\n#![allow(unused)]\nfn main() {\ntrait Container {\n    type E;\n    fn empty() -> Self;\n    fn insert(&mut self, elem: Self::E);\n}\n}\n```\n\nIn order for a type to implement this trait, it must not only provide implementations for every method, but it must specify the type `E`. Here's an implementation of `Container` for the standard library type `Vec`:\n\n```rust\n#![allow(unused)]\nfn main() {\ntrait Container {\n    type E;\n    fn empty() -> Self;\n    fn insert(&mut self, elem: Self::E);\n}\nimpl<T> Container for Vec<T> {\n    type E = T;\n    fn empty() -> Vec<T> { Vec::new() }\n    fn insert(&mut self, x: T) { self.push(x); }\n}\n}\n```\n\n### [Relationship between `Bounds` and `WhereBounds`](#relationship-between-bounds-and-wherebounds)\n\nIn this example:\n\n```rust\n#![allow(unused)]\nfn main() {\nuse std::fmt::Debug;\ntrait Example {\n    type Output<T>: Ord where T: Debug;\n}\n}\n```\n\nGiven a reference to the associated type like `<X as Example>::Output<Y>`, the associated type itself must be `Ord`, and the type `Y` must be `Debug`.\n\n### [Required where clauses on generic associated types](#required-where-clauses-on-generic-associated-types)\n\nGeneric associated type declarations on traits currently may require a list of where clauses, dependent on functions in the trait and how the GAT is used. These rules may be loosened in the future; updates can be found [on the generic associated types initiative repository](https://rust-lang.github.io/generic-associated-types-initiative/explainer/required_bounds.html).\n\nIn a few words, these where clauses are required in order to maximize the allowed definitions of the associated type in impls. To do this, any clauses that _can be proven to hold_ on functions (using the parameters of the function or trait) where a GAT appears as an input or output must also be written on the GAT itself.\n\n```rust\n#![allow(unused)]\nfn main() {\ntrait LendingIterator {\n    type Item<'x> where Self: 'x;\n    fn next<'a>(&'a mut self) -> Self::Item<'a>;\n}\n}\n```\n\nIn the above, on the `next` function, we can prove that `Self: 'a`, because of the implied bounds from `&'a mut self`; therefore, we must write the equivalent bound on the GAT itself: `where Self: 'x`.\n\nWhen there are multiple functions in a trait that use the GAT, then the _intersection_ of the bounds from the different functions are used, rather than the union.\n\n```rust\n#![allow(unused)]\nfn main() {\ntrait Check<T> {\n    type Checker<'x>;\n    fn create_checker<'a>(item: &'a T) -> Self::Checker<'a>;\n    fn do_check(checker: Self::Checker<'_>);\n}\n}\n```\n\nIn this example, no bounds are required on the `type Checker<'a>;`. While we know that `T: 'a` on `create_checker`, we do not know that on `do_check`. However, if `do_check` was commented out, then the `where T: 'x` bound would be required on `Checker`.\n\nThe bounds on associated types also propagate required where clauses.\n\n```rust\n#![allow(unused)]\nfn main() {\ntrait Iterable {\n    type Item<'a> where Self: 'a;\n    type Iterator<'a>: Iterator<Item = Self::Item<'a>> where Self: 'a;\n    fn iter<'a>(&'a self) -> Self::Iterator<'a>;\n}\n}\n```\n\nHere, `where Self: 'a` is required on `Item` because of `iter`. However, `Item` is used in the bounds of `Iterator`, the `where Self: 'a` clause is also required there.\n\nFinally, any explicit uses of `'static` on GATs in the trait do not count towards the required bounds.\n\n```rust\n#![allow(unused)]\nfn main() {\ntrait StaticReturn {\n    type Y<'a>;\n    fn foo(&self) -> Self::Y<'static>;\n}\n}\n```\n\n## [Associated Constants](#associated-constants)\n\n_Associated constants_ are [constants](constant-items.html) associated with a type.\n\nAn _associated constant declaration_ declares a signature for associated constant definitions. It is written as `const`, then an identifier, then `:`, then a type, finished by a `;`.\n\nThe identifier is the name of the constant used in the path. The type is the type that the definition has to implement.\n\nAn _associated constant definition_ defines a constant associated with a type. It is written the same as a [constant item](constant-items.html).\n\nAssociated constant definitions undergo [constant evaluation](../const_eval.html) only when referenced. Further, definitions that include [generic parameters](generics.html) are evaluated after monomorphization.\n\n```rust\nstruct Struct;\nstruct GenericStruct<const ID: i32>;\n\nimpl Struct {\n    // Definition not immediately evaluated\n    const PANIC: () = panic!(\"compile-time panic\");\n}\n\nimpl<const ID: i32> GenericStruct<ID> {\n    // Definition not immediately evaluated\n    const NON_ZERO: () = if ID == 0 {\n        panic!(\"contradiction\")\n    };\n}\n\nfn main() {\n    // Referencing Struct::PANIC causes compilation error\n    let _ = Struct::PANIC;\n\n    // Fine, ID is not 0\n    let _ = GenericStruct::<1>::NON_ZERO;\n\n    // Compilation error from evaluating NON_ZERO with ID=0\n    let _ = GenericStruct::<0>::NON_ZERO;\n}\n```\n\n### [Associated Constants Examples](#associated-constants-examples)\n\nA basic example:\n\n```rust\ntrait ConstantId {\n    const ID: i32;\n}\n\nstruct Struct;\n\nimpl ConstantId for Struct {\n    const ID: i32 = 1;\n}\n\nfn main() {\n    assert_eq!(1, Struct::ID);\n}\n```\n\nUsing default values:\n\n```rust\ntrait ConstantIdDefault {\n    const ID: i32 = 1;\n}\n\nstruct Struct;\nstruct OtherStruct;\n\nimpl ConstantIdDefault for Struct {}\n\nimpl ConstantIdDefault for OtherStruct {\n    const ID: i32 = 5;\n}\n\nfn main() {\n    assert_eq!(1, Struct::ID);\n    assert_eq!(5, OtherStruct::ID);\n}\n```",
	"html": "<!DOCTYPE html><html lang=\"en\" class=\"light\" dir=\"ltr\"><head>\n        <!-- Book generated using mdBook -->\n        <meta charset=\"UTF-8\">\n        <title>Associated Items - The Rust Reference</title>\n\n\n        <!-- Custom HTML head -->\n        \n        <meta name=\"description\" content=\"\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <meta name=\"theme-color\" content=\"rgb(255, 255, 255)\">\n\n        <link rel=\"icon\" href=\"../favicon.svg\">\n        <link rel=\"shortcut icon\" href=\"../favicon.png\">\n        <link rel=\"stylesheet\" href=\"../css/variables.css\">\n        <link rel=\"stylesheet\" href=\"../css/general.css\">\n        <link rel=\"stylesheet\" href=\"../css/chrome.css\">\n        <link rel=\"stylesheet\" href=\"../css/print.css\" media=\"print\">\n\n        <!-- Fonts -->\n        <link rel=\"stylesheet\" href=\"../FontAwesome/css/font-awesome.css\">\n        <link rel=\"stylesheet\" href=\"../fonts/fonts.css\">\n\n        <!-- Highlight.js Stylesheets -->\n        <link rel=\"stylesheet\" href=\"../highlight.css\">\n        <link rel=\"stylesheet\" href=\"../tomorrow-night.css\" disabled=\"\">\n        <link rel=\"stylesheet\" href=\"../ayu-highlight.css\" disabled=\"\">\n\n        <!-- Custom theme stylesheets -->\n        <link rel=\"stylesheet\" href=\"../theme/reference.css\">\n\n    </head>\n    <body class=\"js sidebar-visible\">\n    <div id=\"body-container\">\n        <!-- Provide site root to javascript -->\n        <script>\n            var path_to_root = \"../\";\n            var default_theme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"navy\" : \"light\";\n        </script>\n\n        <!-- Work around some values being stored in localStorage wrapped in quotes -->\n        <script>\n            try {\n                var theme = localStorage.getItem('mdbook-theme');\n                var sidebar = localStorage.getItem('mdbook-sidebar');\n\n                if (theme.startsWith('\"') && theme.endsWith('\"')) {\n                    localStorage.setItem('mdbook-theme', theme.slice(1, theme.length - 1));\n                }\n\n                if (sidebar.startsWith('\"') && sidebar.endsWith('\"')) {\n                    localStorage.setItem('mdbook-sidebar', sidebar.slice(1, sidebar.length - 1));\n                }\n            } catch (e) { }\n        </script>\n\n        <!-- Set the theme before any content is loaded, prevents flash -->\n        <script>\n            var theme;\n            try { theme = localStorage.getItem('mdbook-theme'); } catch(e) { }\n            if (theme === null || theme === undefined) { theme = default_theme; }\n            var html = document.querySelector('html');\n            html.classList.remove('light')\n            html.classList.add(theme);\n            var body = document.querySelector('body');\n            body.classList.remove('no-js')\n            body.classList.add('js');\n        </script>\n\n        <input type=\"checkbox\" id=\"sidebar-toggle-anchor\" class=\"hidden\">\n\n        <!-- Hide / unhide sidebar before it is displayed -->\n        <script>\n            var body = document.querySelector('body');\n            var sidebar = null;\n            var sidebar_toggle = document.getElementById(\"sidebar-toggle-anchor\");\n            if (document.body.clientWidth >= 1080) {\n                try { sidebar = localStorage.getItem('mdbook-sidebar'); } catch(e) { }\n                sidebar = sidebar || 'visible';\n            } else {\n                sidebar = 'hidden';\n            }\n            sidebar_toggle.checked = sidebar === 'visible';\n            body.classList.remove('sidebar-visible');\n            body.classList.add(\"sidebar-\" + sidebar);\n        </script>\n\n        <nav id=\"sidebar\" class=\"sidebar\" aria-label=\"Table of contents\" aria-hidden=\"false\">\n            <div class=\"sidebar-scrollbox\">\n                <ol class=\"chapter\"><li class=\"chapter-item expanded affix \"><a href=\"../introduction.html\" tabindex=\"0\">Introduction</a></li><li class=\"chapter-item expanded \"><a href=\"../notation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.</strong> Notation</a></li><li class=\"chapter-item expanded \"><a href=\"../lexical-structure.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.</strong> Lexical structure</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../input-format.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.1.</strong> Input format</a></li><li class=\"chapter-item expanded \"><a href=\"../keywords.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.2.</strong> Keywords</a></li><li class=\"chapter-item expanded \"><a href=\"../identifiers.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.3.</strong> Identifiers</a></li><li class=\"chapter-item expanded \"><a href=\"../comments.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.4.</strong> Comments</a></li><li class=\"chapter-item expanded \"><a href=\"../whitespace.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.5.</strong> Whitespace</a></li><li class=\"chapter-item expanded \"><a href=\"../tokens.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.6.</strong> Tokens</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../macros.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.</strong> Macros</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../macros-by-example.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.1.</strong> Macros By Example</a></li><li class=\"chapter-item expanded \"><a href=\"../procedural-macros.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.2.</strong> Procedural Macros</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../crates-and-source-files.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.</strong> Crates and source files</a></li><li class=\"chapter-item expanded \"><a href=\"../conditional-compilation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.</strong> Conditional compilation</a></li><li class=\"chapter-item expanded \"><a href=\"../items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.</strong> Items</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../items/modules.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.1.</strong> Modules</a></li><li class=\"chapter-item expanded \"><a href=\"../items/extern-crates.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.2.</strong> Extern crates</a></li><li class=\"chapter-item expanded \"><a href=\"../items/use-declarations.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.3.</strong> Use declarations</a></li><li class=\"chapter-item expanded \"><a href=\"../items/functions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.4.</strong> Functions</a></li><li class=\"chapter-item expanded \"><a href=\"../items/type-aliases.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.5.</strong> Type aliases</a></li><li class=\"chapter-item expanded \"><a href=\"../items/structs.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.6.</strong> Structs</a></li><li class=\"chapter-item expanded \"><a href=\"../items/enumerations.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.7.</strong> Enumerations</a></li><li class=\"chapter-item expanded \"><a href=\"../items/unions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.8.</strong> Unions</a></li><li class=\"chapter-item expanded \"><a href=\"../items/constant-items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.9.</strong> Constant items</a></li><li class=\"chapter-item expanded \"><a href=\"../items/static-items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.10.</strong> Static items</a></li><li class=\"chapter-item expanded \"><a href=\"../items/traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.11.</strong> Traits</a></li><li class=\"chapter-item expanded \"><a href=\"../items/implementations.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.12.</strong> Implementations</a></li><li class=\"chapter-item expanded \"><a href=\"../items/external-blocks.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.13.</strong> External blocks</a></li><li class=\"chapter-item expanded \"><a href=\"../items/generics.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.14.</strong> Generic parameters</a></li><li class=\"chapter-item expanded \"><a href=\"../items/associated-items.html\" class=\"active\" tabindex=\"0\"><strong aria-hidden=\"true\">6.15.</strong> Associated Items</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../attributes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.</strong> Attributes</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../attributes/testing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.1.</strong> Testing</a></li><li class=\"chapter-item expanded \"><a href=\"../attributes/derive.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.2.</strong> Derive</a></li><li class=\"chapter-item expanded \"><a href=\"../attributes/diagnostics.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.3.</strong> Diagnostics</a></li><li class=\"chapter-item expanded \"><a href=\"../attributes/codegen.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.4.</strong> Code generation</a></li><li class=\"chapter-item expanded \"><a href=\"../attributes/limits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.5.</strong> Limits</a></li><li class=\"chapter-item expanded \"><a href=\"../attributes/type_system.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.6.</strong> Type System</a></li><li class=\"chapter-item expanded \"><a href=\"../attributes/debugger.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.7.</strong> Debugger</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../statements-and-expressions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.</strong> Statements and expressions</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../statements.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.1.</strong> Statements</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.</strong> Expressions</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../expressions/literal-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.1.</strong> Literal expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/path-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.2.</strong> Path expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/block-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.3.</strong> Block expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/operator-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.4.</strong> Operator expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/grouped-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.5.</strong> Grouped expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/array-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.6.</strong> Array and index expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/tuple-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.7.</strong> Tuple and index expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/struct-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.8.</strong> Struct expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/call-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.9.</strong> Call expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/method-call-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.10.</strong> Method call expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/field-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.11.</strong> Field access expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/closure-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.12.</strong> Closure expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/loop-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.13.</strong> Loop expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/range-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.14.</strong> Range expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/if-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.15.</strong> If and if let expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/match-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.16.</strong> Match expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/return-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.17.</strong> Return expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/await-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.18.</strong> Await expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/underscore-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.19.</strong> Underscore expressions</a></li></ol></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../patterns.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.</strong> Patterns</a></li><li class=\"chapter-item expanded \"><a href=\"../type-system.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.</strong> Type system</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../types.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.</strong> Types</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../types/boolean.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.1.</strong> Boolean type</a></li><li class=\"chapter-item expanded \"><a href=\"../types/numeric.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.2.</strong> Numeric types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/textual.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.3.</strong> Textual types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/never.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.4.</strong> Never type</a></li><li class=\"chapter-item expanded \"><a href=\"../types/tuple.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.5.</strong> Tuple types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/array.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.6.</strong> Array types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/slice.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.7.</strong> Slice types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/struct.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.8.</strong> Struct types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/enum.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.9.</strong> Enumerated types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/union.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.10.</strong> Union types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/function-item.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.11.</strong> Function item types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/closure.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.12.</strong> Closure types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/pointer.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.13.</strong> Pointer types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/function-pointer.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.14.</strong> Function pointer types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/trait-object.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.15.</strong> Trait object types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/impl-trait.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.16.</strong> Impl trait type</a></li><li class=\"chapter-item expanded \"><a href=\"../types/parameters.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.17.</strong> Type parameters</a></li><li class=\"chapter-item expanded \"><a href=\"../types/inferred.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.18.</strong> Inferred type</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../dynamically-sized-types.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.2.</strong> Dynamically Sized Types</a></li><li class=\"chapter-item expanded \"><a href=\"../type-layout.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.3.</strong> Type layout</a></li><li class=\"chapter-item expanded \"><a href=\"../interior-mutability.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.4.</strong> Interior mutability</a></li><li class=\"chapter-item expanded \"><a href=\"../subtyping.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.5.</strong> Subtyping and Variance</a></li><li class=\"chapter-item expanded \"><a href=\"../trait-bounds.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.6.</strong> Trait and lifetime bounds</a></li><li class=\"chapter-item expanded \"><a href=\"../type-coercions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.7.</strong> Type coercions</a></li><li class=\"chapter-item expanded \"><a href=\"../destructors.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.8.</strong> Destructors</a></li><li class=\"chapter-item expanded \"><a href=\"../lifetime-elision.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.9.</strong> Lifetime elision</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../special-types-and-traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.</strong> Special types and traits</a></li><li class=\"chapter-item expanded \"><a href=\"../names.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.</strong> Names</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../names/namespaces.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.1.</strong> Namespaces</a></li><li class=\"chapter-item expanded \"><a href=\"../names/scopes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.2.</strong> Scopes</a></li><li class=\"chapter-item expanded \"><a href=\"../names/preludes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.3.</strong> Preludes</a></li><li class=\"chapter-item expanded \"><a href=\"../paths.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.4.</strong> Paths</a></li><li class=\"chapter-item expanded \"><a href=\"../names/name-resolution.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.5.</strong> Name resolution</a></li><li class=\"chapter-item expanded \"><a href=\"../visibility-and-privacy.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.6.</strong> Visibility and privacy</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../memory-model.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.</strong> Memory model</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../memory-allocation-and-lifetime.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.1.</strong> Memory allocation and lifetime</a></li><li class=\"chapter-item expanded \"><a href=\"../variables.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.2.</strong> Variables</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../linkage.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.</strong> Linkage</a></li><li class=\"chapter-item expanded \"><a href=\"../inline-assembly.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.</strong> Inline assembly</a></li><li class=\"chapter-item expanded \"><a href=\"../unsafety.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.</strong> Unsafety</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../unsafe-keyword.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.1.</strong> The unsafe keyword</a></li><li class=\"chapter-item expanded \"><a href=\"../behavior-considered-undefined.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.2.</strong> Behavior considered undefined</a></li><li class=\"chapter-item expanded \"><a href=\"../behavior-not-considered-unsafe.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.3.</strong> Behavior not considered unsafe</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../const_eval.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.</strong> Constant Evaluation</a></li><li class=\"chapter-item expanded \"><a href=\"../abi.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.</strong> Application Binary Interface</a></li><li class=\"chapter-item expanded \"><a href=\"../runtime.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.</strong> The Rust runtime</a></li><li class=\"chapter-item expanded \"><a href=\"../appendices.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.</strong> Appendices</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../macro-ambiguity.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.1.</strong> Macro Follow-Set Ambiguity Formal Specification</a></li><li class=\"chapter-item expanded \"><a href=\"../influences.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.2.</strong> Influences</a></li><li class=\"chapter-item expanded \"><a href=\"../glossary.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.3.</strong> Glossary</a></li></ol></li></ol>\n            </div>\n            <div id=\"sidebar-resize-handle\" class=\"sidebar-resize-handle\">\n                <div class=\"sidebar-resize-indicator\"></div>\n            </div>\n        </nav>\n\n        <!-- Track and set sidebar scroll position -->\n        <script>\n            var sidebarScrollbox = document.querySelector('#sidebar .sidebar-scrollbox');\n            sidebarScrollbox.addEventListener('click', function(e) {\n                if (e.target.tagName === 'A') {\n                    sessionStorage.setItem('sidebar-scroll', sidebarScrollbox.scrollTop);\n                }\n            }, { passive: true });\n            var sidebarScrollTop = sessionStorage.getItem('sidebar-scroll');\n            sessionStorage.removeItem('sidebar-scroll');\n            if (sidebarScrollTop) {\n                // preserve sidebar scroll position when navigating via links within sidebar\n                sidebarScrollbox.scrollTop = sidebarScrollTop;\n            } else {\n                // scroll sidebar to current active section when navigating via \"next/previous chapter\" buttons\n                var activeSection = document.querySelector('#sidebar .active');\n                if (activeSection) {\n                    activeSection.scrollIntoView({ block: 'center' });\n                }\n            }\n        </script>\n\n        <div id=\"page-wrapper\" class=\"page-wrapper\">\n\n            <div class=\"page\">\n                                <div id=\"menu-bar-hover-placeholder\"></div>\n                <div id=\"menu-bar\" class=\"menu-bar\" style=\"top: 0px;\">\n                    <div class=\"left-buttons\">\n                        <label id=\"sidebar-toggle\" class=\"icon-button\" for=\"sidebar-toggle-anchor\" title=\"Toggle Table of Contents\" aria-label=\"Toggle Table of Contents\" aria-controls=\"sidebar\" aria-expanded=\"true\">\n                            <i class=\"fa fa-bars\"></i>\n                        </label>\n                        <button id=\"theme-toggle\" class=\"icon-button\" type=\"button\" title=\"Change theme\" aria-label=\"Change theme\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-controls=\"theme-list\">\n                            <i class=\"fa fa-paint-brush\"></i>\n                        </button>\n                        <ul id=\"theme-list\" class=\"theme-popup\" aria-label=\"Themes\" role=\"menu\">\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme theme-selected\" id=\"light\">Light</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"rust\">Rust</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"coal\">Coal</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"navy\">Navy</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"ayu\">Ayu</button></li>\n                        </ul>\n                        <button id=\"search-toggle\" class=\"icon-button\" type=\"button\" title=\"Search. (Shortkey: s)\" aria-label=\"Toggle Searchbar\" aria-expanded=\"false\" aria-keyshortcuts=\"S\" aria-controls=\"searchbar\">\n                            <i class=\"fa fa-search\"></i>\n                        </button>\n                    </div>\n\n                    <h1 class=\"menu-title\">The Rust Reference</h1>\n\n                    <div class=\"right-buttons\">\n                        <a href=\"../print.html\" title=\"Print this book\" aria-label=\"Print this book\">\n                            <i id=\"print-button\" class=\"fa fa-print\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/reference/\" title=\"Git repository\" aria-label=\"Git repository\">\n                            <i id=\"git-repository-button\" class=\"fa fa-github\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/reference/edit/master/src/items/associated-items.md\" title=\"Suggest an edit\" aria-label=\"Suggest an edit\">\n                            <i id=\"git-edit-button\" class=\"fa fa-edit\"></i>\n                        </a>\n\n                    </div>\n                </div>\n\n                <div id=\"search-wrapper\" class=\"hidden\">\n                    <form id=\"searchbar-outer\" class=\"searchbar-outer\">\n                        <input type=\"search\" id=\"searchbar\" name=\"searchbar\" placeholder=\"Search this book ...\" aria-controls=\"searchresults-outer\" aria-describedby=\"searchresults-header\">\n                    </form>\n                    <div id=\"searchresults-outer\" class=\"searchresults-outer hidden\">\n                        <div id=\"searchresults-header\" class=\"searchresults-header\"></div>\n                        <ul id=\"searchresults\">\n                        </ul>\n                    </div>\n                </div>\n\n                <!-- Apply ARIA attributes after the sidebar and the sidebar toggle button are added to the DOM -->\n                <script>\n                    document.getElementById('sidebar-toggle').setAttribute('aria-expanded', sidebar === 'visible');\n                    document.getElementById('sidebar').setAttribute('aria-hidden', sidebar !== 'visible');\n                    Array.from(document.querySelectorAll('#sidebar a')).forEach(function(link) {\n                        link.setAttribute('tabIndex', sidebar === 'visible' ? 0 : -1);\n                    });\n                </script>\n\n                <div id=\"content\" class=\"content\">\n                    <main>\n                        <h1 id=\"associated-items\"><a class=\"header\" href=\"#associated-items\">Associated Items</a></h1>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>AssociatedItem</em> :<br>\n&nbsp;&nbsp; <a href=\"../attributes.html\"><em>OuterAttribute</em></a><sup>*</sup> (<br>\n&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; <a href=\"../macros.html#macro-invocation\"><em>MacroInvocationSemi</em></a><br>\n&nbsp;&nbsp; &nbsp;&nbsp; | ( <a href=\"../visibility-and-privacy.html\"><em>Visibility</em></a><sup>?</sup> ( <a href=\"type-aliases.html\"><em>TypeAlias</em></a> | <a href=\"constant-items.html\"><em>ConstantItem</em></a> | <a href=\"functions.html\"><em>Function</em></a> ) )<br>\n&nbsp;&nbsp; )</p>\n</blockquote>\n<p><em>Associated Items</em> are the items declared in <a href=\"traits.html\">traits</a> or defined in\n<a href=\"implementations.html\">implementations</a>. They are called this because they are defined on an associate\ntype — the type in the implementation. They are a subset of the kinds of\nitems you can declare in a module. Specifically, there are <a href=\"#associated-functions-and-methods\">associated\nfunctions</a> (including methods), <a href=\"#associated-types\">associated types</a>, and <a href=\"#associated-constants\">associated constants</a>.</p>\n<p>Associated items are useful when the associated item logically is related to the\nassociating item. For example, the <code class=\"hljs\">is_some</code> method on <code class=\"hljs\">Option</code> is intrinsically\nrelated to Options, so should be associated.</p>\n<p>Every associated item kind comes in two varieties: definitions that contain the\nactual implementation and declarations that declare signatures for\ndefinitions.</p>\n<p>It is the declarations that make up the contract of traits and what is available\non generic types.</p>\n<h2 id=\"associated-functions-and-methods\"><a class=\"header\" href=\"#associated-functions-and-methods\">Associated functions and methods</a></h2>\n<p><em>Associated functions</em> are <a href=\"functions.html\">functions</a> associated with a type.</p>\n<p>An <em>associated function declaration</em> declares a signature for an associated\nfunction definition. It is written as a function item, except the\nfunction body is replaced with a <code class=\"hljs\">;</code>.</p>\n<p>The identifier is the name of the function. The generics, parameter list,\nreturn type, and where clause of the associated function must be the same as the\nassociated function declarations's.</p>\n<p>An <em>associated function definition</em> defines a function associated with another\ntype. It is written the same as a <a href=\"../types/function-item.html\">function item</a>.</p>\n<p>An example of a common associated function is a <code class=\"hljs\">new</code> function that returns\na value of the type the associated function is associated with.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust edition2021 hljs\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Struct</span></span> {\n    field: <span class=\"hljs-built_in\">i32</span>\n}\n\n<span class=\"hljs-keyword\">impl</span> Struct {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>() -&gt; Struct {\n        Struct {\n            field: <span class=\"hljs-number\">0i32</span>\n        }\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span> </span>() {\n    <span class=\"hljs-keyword\">let</span> _<span class=\"hljs-keyword\">struct</span> = Struct::new();\n}</code></pre></pre>\n<p>When the associated function is declared on a trait, the function can also be\ncalled with a <a href=\"../paths.html\">path</a> that is a path to the trait appended by the name of the\ntrait. When this happens, it is substituted for <code class=\"hljs\">&lt;_ as Trait&gt;::function_name</code>.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Num</span></span> {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">from_i32</span></span>(n: <span class=\"hljs-built_in\">i32</span>) -&gt; <span class=\"hljs-keyword\">Self</span>;\n}\n\n<span class=\"hljs-keyword\">impl</span> Num <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">f64</span> {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">from_i32</span></span>(n: <span class=\"hljs-built_in\">i32</span>) -&gt; <span class=\"hljs-built_in\">f64</span> { n <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">f64</span> }\n}\n\n<span class=\"hljs-comment\">// These 4 are all equivalent in this case.</span>\n<span class=\"hljs-keyword\">let</span> _: <span class=\"hljs-built_in\">f64</span> = Num::from_i32(<span class=\"hljs-number\">42</span>);\n<span class=\"hljs-keyword\">let</span> _: <span class=\"hljs-built_in\">f64</span> = &lt;_ <span class=\"hljs-keyword\">as</span> Num&gt;::from_i32(<span class=\"hljs-number\">42</span>);\n<span class=\"hljs-keyword\">let</span> _: <span class=\"hljs-built_in\">f64</span> = &lt;<span class=\"hljs-built_in\">f64</span> <span class=\"hljs-keyword\">as</span> Num&gt;::from_i32(<span class=\"hljs-number\">42</span>);\n<span class=\"hljs-keyword\">let</span> _: <span class=\"hljs-built_in\">f64</span> = <span class=\"hljs-built_in\">f64</span>::from_i32(<span class=\"hljs-number\">42</span>);\n<span class=\"boring\">}</span></code></pre></pre>\n<h3 id=\"methods\"><a class=\"header\" href=\"#methods\">Methods</a></h3>\n<p>Associated functions whose first parameter is named <code class=\"hljs\">self</code> are called <em>methods</em>\nand may be invoked using the <a href=\"../expressions/method-call-expr.html\">method call operator</a>, for example, <code class=\"hljs\">x.foo()</code>, as\nwell as the usual function call notation.</p>\n<p>If the type of the <code class=\"hljs\">self</code> parameter is specified, it is limited to types resolving\nto one generated by the following grammar (where <code class=\"hljs\">'lt</code> denotes some arbitrary\nlifetime):</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">P = &amp;'lt S | &amp;'lt mut S | Box&lt;S&gt; | Rc&lt;S&gt; | Arc&lt;S&gt; | Pin&lt;P&gt;\nS = Self | P\n</code></pre>\n<p>The <code class=\"hljs\">Self</code> terminal in this grammar denotes a type resolving to the implementing type.\nThis can also include the contextual type alias <code class=\"hljs\">Self</code>, other type aliases,\nor associated type projections resolving to the implementing type.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::rc::Rc;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::sync::Arc;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::pin::Pin;\n</span><span class=\"hljs-comment\">// Examples of methods implemented on struct `Example`.</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Example</span></span>;\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Alias</span></span> = Example;\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Trait</span></span> { <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Output</span></span>; }\n<span class=\"hljs-keyword\">impl</span> Trait <span class=\"hljs-keyword\">for</span> Example { <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Output</span></span> = Example; }\n<span class=\"hljs-keyword\">impl</span> Example {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">by_value</span></span>(<span class=\"hljs-keyword\">self</span>: <span class=\"hljs-keyword\">Self</span>) {}\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">by_ref</span></span>(<span class=\"hljs-keyword\">self</span>: &amp;<span class=\"hljs-keyword\">Self</span>) {}\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">by_ref_mut</span></span>(<span class=\"hljs-keyword\">self</span>: &amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">Self</span>) {}\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">by_box</span></span>(<span class=\"hljs-keyword\">self</span>: <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">Self</span>&gt;) {}\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">by_rc</span></span>(<span class=\"hljs-keyword\">self</span>: Rc&lt;<span class=\"hljs-keyword\">Self</span>&gt;) {}\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">by_arc</span></span>(<span class=\"hljs-keyword\">self</span>: Arc&lt;<span class=\"hljs-keyword\">Self</span>&gt;) {}\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">by_pin</span></span>(<span class=\"hljs-keyword\">self</span>: Pin&lt;&amp;<span class=\"hljs-keyword\">Self</span>&gt;) {}\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">explicit_type</span></span>(<span class=\"hljs-keyword\">self</span>: Arc&lt;Example&gt;) {}\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">with_lifetime</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(<span class=\"hljs-keyword\">self</span>: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-keyword\">Self</span>) {}\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">nested</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(<span class=\"hljs-keyword\">self</span>: &amp;<span class=\"hljs-keyword\">mut</span> &amp;<span class=\"hljs-symbol\">'a</span> Arc&lt;Rc&lt;<span class=\"hljs-built_in\">Box</span>&lt;Alias&gt;&gt;&gt;) {}\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">via_projection</span></span>(<span class=\"hljs-keyword\">self</span>: &lt;Example <span class=\"hljs-keyword\">as</span> Trait&gt;::Output) {}\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Shorthand syntax can be used without specifying a type, which have the\nfollowing equivalents:</p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Shorthand</th><th>Equivalent</th></tr></thead><tbody>\n<tr><td><code class=\"hljs\">self</code></td><td><code class=\"hljs\">self: Self</code></td></tr>\n<tr><td><code class=\"hljs\">&amp;'lifetime self</code></td><td><code class=\"hljs\">self: &amp;'lifetime Self</code></td></tr>\n<tr><td><code class=\"hljs\">&amp;'lifetime mut self</code></td><td><code class=\"hljs\">self: &amp;'lifetime mut Self</code></td></tr>\n</tbody></table>\n</div>\n<blockquote>\n<p><strong>Note</strong>: Lifetimes can be, and usually are, elided with this shorthand.</p>\n</blockquote>\n<p>If the <code class=\"hljs\">self</code> parameter is prefixed with <code class=\"hljs\">mut</code>, it becomes a mutable variable,\nsimilar to regular parameters using a <code class=\"hljs\">mut</code> <a href=\"../patterns.html#identifier-patterns\">identifier pattern</a>. For example:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Changer</span></span>: <span class=\"hljs-built_in\">Sized</span> {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">change</span></span>(<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) {}\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">modify</span></span>(<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>: <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">Self</span>&gt;) {}\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>As an example of methods on a trait, consider the following:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Surface</span></span> = <span class=\"hljs-built_in\">i32</span>;\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">BoundingBox</span></span> = <span class=\"hljs-built_in\">i32</span>;\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Shape</span></span> {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">draw</span></span>(&amp;<span class=\"hljs-keyword\">self</span>, surface: Surface);\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">bounding_box</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; BoundingBox;\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>This defines a trait with two methods. All values that have <a href=\"implementations.html\">implementations</a>\nof this trait while the trait is in scope can have their <code class=\"hljs\">draw</code> and\n<code class=\"hljs\">bounding_box</code> methods called.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Surface</span></span> = <span class=\"hljs-built_in\">i32</span>;\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">BoundingBox</span></span> = <span class=\"hljs-built_in\">i32</span>;\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Shape</span></span> {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">draw</span></span>(&amp;<span class=\"hljs-keyword\">self</span>, surface: Surface);\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">bounding_box</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; BoundingBox;\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Circle</span></span> {\n    <span class=\"hljs-comment\">// ...</span>\n}\n\n<span class=\"hljs-keyword\">impl</span> Shape <span class=\"hljs-keyword\">for</span> Circle {\n    <span class=\"hljs-comment\">// ...</span>\n<span class=\"boring\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">draw</span></span>(&amp;<span class=\"hljs-keyword\">self</span>, _: Surface) {}\n</span><span class=\"boring\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">bounding_box</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; BoundingBox { <span class=\"hljs-number\">0i32</span> }\n</span>}\n\n<span class=\"boring\"><span class=\"hljs-keyword\">impl</span> Circle {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>() -&gt; Circle { Circle{} }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">let</span> circle_shape = Circle::new();\n<span class=\"hljs-keyword\">let</span> bounding_box = circle_shape.bounding_box();\n<span class=\"boring\">}</span></code></pre></pre>\n<blockquote>\n<p><strong>Edition Differences</strong>: In the 2015 edition, it is possible to declare trait\nmethods with anonymous parameters (e.g. <code class=\"hljs\">fn foo(u8)</code>). This is deprecated and\nan error as of the 2018 edition. All parameters must have an argument name.</p>\n</blockquote>\n<h4 id=\"attributes-on-method-parameters\"><a class=\"header\" href=\"#attributes-on-method-parameters\">Attributes on method parameters</a></h4>\n<p>Attributes on method parameters follow the same rules and restrictions as\n<a href=\"functions.html#attributes-on-function-parameters\">regular function parameters</a>.</p>\n<h2 id=\"associated-types\"><a class=\"header\" href=\"#associated-types\">Associated Types</a></h2>\n<p><em>Associated types</em> are <a href=\"type-aliases.html\">type aliases</a> associated with another type. Associated\ntypes cannot be defined in <a href=\"implementations.html#inherent-implementations\">inherent implementations</a> nor can they be given a\ndefault implementation in traits.</p>\n<p>An <em>associated type declaration</em> declares a signature for associated type\ndefinitions. It is written in one of the following forms, where <code class=\"hljs\">Assoc</code> is the\nname of the associated type, <code class=\"hljs\">Params</code> is a comma-separated list of type,\nlifetime or const parameters, <code class=\"hljs\">Bounds</code> is a plus-separated list of trait bounds\nthat the associated type must meet, and <code class=\"hljs\">WhereBounds</code> is a comma-separated list\nof bounds that the parameters must meet:</p>\n<!-- ignore: illustrative example forms -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Assoc</span></span>;\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Assoc</span></span>: Bounds;\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Assoc</span></span>&lt;Params&gt;;\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Assoc</span></span>&lt;Params&gt;: Bounds;\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Assoc</span></span>&lt;Params&gt; <span class=\"hljs-keyword\">where</span> WhereBounds;\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Assoc</span></span>&lt;Params&gt;: Bounds <span class=\"hljs-keyword\">where</span> WhereBounds;</code></pre>\n<p>The identifier is the name of the declared type alias. The optional trait bounds\nmust be fulfilled by the implementations of the type alias.\nThere is an implicit <a href=\"../special-types-and-traits.html#sized\"><code class=\"hljs\">Sized</code></a> bound on associated types that can be relaxed using the special <code class=\"hljs\">?Sized</code> bound.</p>\n<p>An <em>associated type definition</em> defines a type alias for the implementation\nof a trait on a type. They are written similarly to an <em>associated type declaration</em>,\nbut cannot contain <code class=\"hljs\">Bounds</code>, but instead must contain a <code class=\"hljs\">Type</code>:</p>\n<!-- ignore: illustrative example forms -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Assoc</span></span> = Type;\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Assoc</span></span>&lt;Params&gt; = Type; <span class=\"hljs-comment\">// the type `Type` here may reference `Params`</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Assoc</span></span>&lt;Params&gt; = Type <span class=\"hljs-keyword\">where</span> WhereBounds;\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Assoc</span></span>&lt;Params&gt; <span class=\"hljs-keyword\">where</span> WhereBounds = Type; <span class=\"hljs-comment\">// deprecated, prefer the form above</span></code></pre>\n<p>If a type <code class=\"hljs\">Item</code> has an associated type <code class=\"hljs\">Assoc</code> from a trait <code class=\"hljs\">Trait</code>, then\n<code class=\"hljs\">&lt;Item as Trait&gt;::Assoc</code> is a type that is an alias of the type specified in the\nassociated type definition. Furthermore, if <code class=\"hljs\">Item</code> is a type parameter, then\n<code class=\"hljs\">Item::Assoc</code> can be used in type parameters.</p>\n<p>Associated types may include <a href=\"generics.html\">generic parameters</a> and <a href=\"generics.html#where-clauses\">where clauses</a>; these are\noften referred to as <em>generic associated types</em>, or <em>GATs</em>. If the type <code class=\"hljs\">Thing</code>\nhas an associated type <code class=\"hljs\">Item</code> from a trait <code class=\"hljs\">Trait</code> with the generics <code class=\"hljs\">&lt;'a&gt;</code> , the\ntype can be named like <code class=\"hljs\">&lt;Thing as Trait&gt;::Item&lt;'x&gt;</code>, where <code class=\"hljs\">'x</code> is some lifetime\nin scope. In this case, <code class=\"hljs\">'x</code> will be used wherever <code class=\"hljs\">'a</code> appears in the associated\ntype definitions on impls.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust edition2021 hljs\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">AssociatedType</span></span> {\n    <span class=\"hljs-comment\">// Associated type declaration</span>\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Assoc</span></span>;\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Struct</span></span>;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">OtherStruct</span></span>;\n\n<span class=\"hljs-keyword\">impl</span> AssociatedType <span class=\"hljs-keyword\">for</span> Struct {\n    <span class=\"hljs-comment\">// Associated type definition</span>\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Assoc</span></span> = OtherStruct;\n}\n\n<span class=\"hljs-keyword\">impl</span> OtherStruct {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>() -&gt; OtherStruct {\n        OtherStruct\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-comment\">// Usage of the associated type to refer to OtherStruct as &lt;Struct as AssociatedType&gt;::Assoc</span>\n    <span class=\"hljs-keyword\">let</span> _other_struct: OtherStruct = &lt;Struct <span class=\"hljs-keyword\">as</span> AssociatedType&gt;::Assoc::new();\n}</code></pre></pre>\n<p>An example of associated types with generics and where clauses:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust edition2021 hljs\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">ArrayLender</span></span>&lt;<span class=\"hljs-symbol\">'a</span>, T&gt;(&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-keyword\">mut</span> [T; <span class=\"hljs-number\">16</span>]);\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Lend</span></span> {\n    <span class=\"hljs-comment\">// Generic associated type declaration</span>\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Lender</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt; <span class=\"hljs-keyword\">where</span> <span class=\"hljs-keyword\">Self</span>: <span class=\"hljs-symbol\">'a</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">lend</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) -&gt; Self::Lender&lt;<span class=\"hljs-symbol\">'a</span>&gt;;\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; Lend <span class=\"hljs-keyword\">for</span> [T; <span class=\"hljs-number\">16</span>] {\n    <span class=\"hljs-comment\">// Generic associated type definition</span>\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Lender</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt; = ArrayLender&lt;<span class=\"hljs-symbol\">'a</span>, T&gt; <span class=\"hljs-keyword\">where</span> <span class=\"hljs-keyword\">Self</span>: <span class=\"hljs-symbol\">'a</span>;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">lend</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) -&gt; Self::Lender&lt;<span class=\"hljs-symbol\">'a</span>&gt; {\n        ArrayLender(<span class=\"hljs-keyword\">self</span>)\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">borrow</span></span>&lt;<span class=\"hljs-symbol\">'a</span>, T: Lend&gt;(array: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-keyword\">mut</span> T) -&gt; &lt;T <span class=\"hljs-keyword\">as</span> Lend&gt;::Lender&lt;<span class=\"hljs-symbol\">'a</span>&gt; {\n    array.lend()\n}\n\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> array = [<span class=\"hljs-number\">0usize</span>; <span class=\"hljs-number\">16</span>];\n    <span class=\"hljs-keyword\">let</span> lender = borrow(&amp;<span class=\"hljs-keyword\">mut</span> array);\n}</code></pre></pre>\n<h3 id=\"associated-types-container-example\"><a class=\"header\" href=\"#associated-types-container-example\">Associated Types Container Example</a></h3>\n<p>Consider the following example of a <code class=\"hljs\">Container</code> trait. Notice that the type is\navailable for use in the method signatures:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Container</span></span> {\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">E</span></span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">empty</span></span>() -&gt; <span class=\"hljs-keyword\">Self</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">insert</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, elem: Self::E);\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>In order for a type to implement this trait, it must not only provide\nimplementations for every method, but it must specify the type <code class=\"hljs\">E</code>. Here's an\nimplementation of <code class=\"hljs\">Container</code> for the standard library type <code class=\"hljs\">Vec</code>:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Container</span></span> {\n</span><span class=\"boring\">    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">E</span></span>;\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">empty</span></span>() -&gt; <span class=\"hljs-keyword\">Self</span>;\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">insert</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, elem: Self::E);\n</span><span class=\"boring\">}\n</span><span class=\"hljs-keyword\">impl</span>&lt;T&gt; Container <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">Vec</span>&lt;T&gt; {\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">E</span></span> = T;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">empty</span></span>() -&gt; <span class=\"hljs-built_in\">Vec</span>&lt;T&gt; { <span class=\"hljs-built_in\">Vec</span>::new() }\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">insert</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, x: T) { <span class=\"hljs-keyword\">self</span>.push(x); }\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<h3 id=\"relationship-between-bounds-and-wherebounds\"><a class=\"header\" href=\"#relationship-between-bounds-and-wherebounds\">Relationship between <code>Bounds</code> and <code>WhereBounds</code></a></h3>\n<p>In this example:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::fmt::<span class=\"hljs-built_in\">Debug</span>;\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Example</span></span> {\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Output</span></span>&lt;T&gt;: <span class=\"hljs-built_in\">Ord</span> <span class=\"hljs-keyword\">where</span> T: <span class=\"hljs-built_in\">Debug</span>;\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Given a reference to the associated type like <code class=\"hljs\">&lt;X as Example&gt;::Output&lt;Y&gt;</code>, the associated type itself must be <code class=\"hljs\">Ord</code>, and the type <code class=\"hljs\">Y</code> must be <code class=\"hljs\">Debug</code>.</p>\n<h3 id=\"required-where-clauses-on-generic-associated-types\"><a class=\"header\" href=\"#required-where-clauses-on-generic-associated-types\">Required where clauses on generic associated types</a></h3>\n<p>Generic associated type declarations on traits currently may require a list of\nwhere clauses, dependent on functions in the trait and how the GAT is used. These\nrules may be loosened in the future; updates can be found <a href=\"https://rust-lang.github.io/generic-associated-types-initiative/explainer/required_bounds.html\">on the generic\nassociated types initiative repository</a>.</p>\n<p>In a few words, these where clauses are required in order to maximize the allowed\ndefinitions of the associated type in impls. To do this, any clauses that <em>can be\nproven to hold</em> on functions (using the parameters of the function or trait)\nwhere a GAT appears as an input or output must also be written on the GAT itself.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">LendingIterator</span></span> {\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Item</span></span>&lt;<span class=\"hljs-symbol\">'x</span>&gt; <span class=\"hljs-keyword\">where</span> <span class=\"hljs-keyword\">Self</span>: <span class=\"hljs-symbol\">'x</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">next</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) -&gt; Self::Item&lt;<span class=\"hljs-symbol\">'a</span>&gt;;\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>In the above, on the <code class=\"hljs\">next</code> function, we can prove that <code class=\"hljs\">Self: 'a</code>, because of\nthe implied bounds from <code class=\"hljs\">&amp;'a mut self</code>; therefore, we must write the equivalent\nbound on the GAT itself: <code class=\"hljs\">where Self: 'x</code>.</p>\n<p>When there are multiple functions in a trait that use the GAT, then the\n<em>intersection</em> of the bounds from the different functions are used, rather than\nthe union.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Check</span></span>&lt;T&gt; {\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Checker</span></span>&lt;<span class=\"hljs-symbol\">'x</span>&gt;;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">create_checker</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(item: &amp;<span class=\"hljs-symbol\">'a</span> T) -&gt; Self::Checker&lt;<span class=\"hljs-symbol\">'a</span>&gt;;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">do_check</span></span>(checker: Self::Checker&lt;<span class=\"hljs-symbol\">'_</span>&gt;);\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>In this example, no bounds are required on the <code class=\"hljs\">type Checker&lt;'a&gt;;</code>. While we\nknow that <code class=\"hljs\">T: 'a</code> on <code class=\"hljs\">create_checker</code>, we do not know that on <code class=\"hljs\">do_check</code>. However,\nif <code class=\"hljs\">do_check</code> was commented out, then the <code class=\"hljs\">where T: 'x</code> bound would be required\non <code class=\"hljs\">Checker</code>.</p>\n<p>The bounds on associated types also propagate required where clauses.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Iterable</span></span> {\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Item</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt; <span class=\"hljs-keyword\">where</span> <span class=\"hljs-keyword\">Self</span>: <span class=\"hljs-symbol\">'a</span>;\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Iterator</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;: <span class=\"hljs-built_in\">Iterator</span>&lt;Item = Self::Item&lt;<span class=\"hljs-symbol\">'a</span>&gt;&gt; <span class=\"hljs-keyword\">where</span> <span class=\"hljs-keyword\">Self</span>: <span class=\"hljs-symbol\">'a</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">iter</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-keyword\">self</span>) -&gt; Self::<span class=\"hljs-built_in\">Iterator</span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;;\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Here, <code class=\"hljs\">where Self: 'a</code> is required on <code class=\"hljs\">Item</code> because of <code class=\"hljs\">iter</code>. However, <code class=\"hljs\">Item</code>\nis used in the bounds of <code class=\"hljs\">Iterator</code>, the <code class=\"hljs\">where Self: 'a</code> clause is also required\nthere.</p>\n<p>Finally, any explicit uses of <code class=\"hljs\">'static</code> on GATs in the trait do not count towards\nthe required bounds.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">StaticReturn</span></span> {\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Y</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; Self::Y&lt;<span class=\"hljs-symbol\">'static</span>&gt;;\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"associated-constants\"><a class=\"header\" href=\"#associated-constants\">Associated Constants</a></h2>\n<p><em>Associated constants</em> are <a href=\"constant-items.html\">constants</a> associated with a type.</p>\n<p>An <em>associated constant declaration</em> declares a signature for associated\nconstant definitions. It is written as <code class=\"hljs\">const</code>, then an identifier,\nthen <code class=\"hljs\">:</code>, then a type, finished by a <code class=\"hljs\">;</code>.</p>\n<p>The identifier is the name of the constant used in the path. The type is the\ntype that the definition has to implement.</p>\n<p>An <em>associated constant definition</em> defines a constant associated with a\ntype. It is written the same as a <a href=\"constant-items.html\">constant item</a>.</p>\n<p>Associated constant definitions undergo <a href=\"../const_eval.html\">constant evaluation</a> only when\nreferenced. Further, definitions that include <a href=\"generics.html\">generic parameters</a> are\nevaluated after monomorphization.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust compile_fail edition2021 hljs\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Struct</span></span>;\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">GenericStruct</span></span>&lt;<span class=\"hljs-keyword\">const</span> ID: <span class=\"hljs-built_in\">i32</span>&gt;;\n\n<span class=\"hljs-keyword\">impl</span> Struct {\n    <span class=\"hljs-comment\">// Definition not immediately evaluated</span>\n    <span class=\"hljs-keyword\">const</span> PANIC: () = <span class=\"hljs-built_in\">panic!</span>(<span class=\"hljs-string\">\"compile-time panic\"</span>);\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;<span class=\"hljs-keyword\">const</span> ID: <span class=\"hljs-built_in\">i32</span>&gt; GenericStruct&lt;ID&gt; {\n    <span class=\"hljs-comment\">// Definition not immediately evaluated</span>\n    <span class=\"hljs-keyword\">const</span> NON_ZERO: () = <span class=\"hljs-keyword\">if</span> ID == <span class=\"hljs-number\">0</span> {\n        <span class=\"hljs-built_in\">panic!</span>(<span class=\"hljs-string\">\"contradiction\"</span>)\n    };\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-comment\">// Referencing Struct::PANIC causes compilation error</span>\n    <span class=\"hljs-keyword\">let</span> _ = Struct::PANIC;\n\n    <span class=\"hljs-comment\">// Fine, ID is not 0</span>\n    <span class=\"hljs-keyword\">let</span> _ = GenericStruct::&lt;<span class=\"hljs-number\">1</span>&gt;::NON_ZERO;\n\n    <span class=\"hljs-comment\">// Compilation error from evaluating NON_ZERO with ID=0</span>\n    <span class=\"hljs-keyword\">let</span> _ = GenericStruct::&lt;<span class=\"hljs-number\">0</span>&gt;::NON_ZERO;\n}</code></pre></pre>\n<h3 id=\"associated-constants-examples\"><a class=\"header\" href=\"#associated-constants-examples\">Associated Constants Examples</a></h3>\n<p>A basic example:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust edition2021 hljs\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">ConstantId</span></span> {\n    <span class=\"hljs-keyword\">const</span> ID: <span class=\"hljs-built_in\">i32</span>;\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Struct</span></span>;\n\n<span class=\"hljs-keyword\">impl</span> ConstantId <span class=\"hljs-keyword\">for</span> Struct {\n    <span class=\"hljs-keyword\">const</span> ID: <span class=\"hljs-built_in\">i32</span> = <span class=\"hljs-number\">1</span>;\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">1</span>, Struct::ID);\n}</code></pre></pre>\n<p>Using default values:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust edition2021 hljs\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">ConstantIdDefault</span></span> {\n    <span class=\"hljs-keyword\">const</span> ID: <span class=\"hljs-built_in\">i32</span> = <span class=\"hljs-number\">1</span>;\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Struct</span></span>;\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">OtherStruct</span></span>;\n\n<span class=\"hljs-keyword\">impl</span> ConstantIdDefault <span class=\"hljs-keyword\">for</span> Struct {}\n\n<span class=\"hljs-keyword\">impl</span> ConstantIdDefault <span class=\"hljs-keyword\">for</span> OtherStruct {\n    <span class=\"hljs-keyword\">const</span> ID: <span class=\"hljs-built_in\">i32</span> = <span class=\"hljs-number\">5</span>;\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">1</span>, Struct::ID);\n    <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">5</span>, OtherStruct::ID);\n}</code></pre></pre>\n\n                    </main>\n\n                    <nav class=\"nav-wrapper\" aria-label=\"Page navigation\">\n                        <!-- Mobile navigation buttons -->\n                            <a rel=\"prev\" href=\"../items/generics.html\" class=\"mobile-nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                                <i class=\"fa fa-angle-left\"></i>\n                            </a>\n\n                            <a rel=\"next prefetch\" href=\"../attributes.html\" class=\"mobile-nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                                <i class=\"fa fa-angle-right\"></i>\n                            </a>\n\n                        <div style=\"clear: both\"></div>\n                    </nav>\n                </div>\n            </div>\n\n            <nav class=\"nav-wide-wrapper\" aria-label=\"Page navigation\">\n                    <a rel=\"prev\" href=\"../items/generics.html\" class=\"nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                        <i class=\"fa fa-angle-left\"></i>\n                    </a>\n\n                    <a rel=\"next prefetch\" href=\"../attributes.html\" class=\"nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                        <i class=\"fa fa-angle-right\"></i>\n                    </a>\n            </nav>\n\n        </div>\n\n\n\n\n        <script>\n            window.playground_copyable = true;\n        </script>\n\n\n        <script src=\"../elasticlunr.min.js\"></script>\n        <script src=\"../mark.min.js\"></script>\n        <script src=\"../searcher.js\"></script>\n\n        <script src=\"../clipboard.min.js\"></script>\n        <script src=\"../highlight.js\"></script>\n        <script src=\"../book.js\"></script>\n\n        <!-- Custom JS scripts -->\n\n\n    </div>\n    \n\n</body></html>",
	"crawlDate": "2024-07-28T05:12:56.039Z"
}