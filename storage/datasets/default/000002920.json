{
	"title": "MetadataExt in std::os::linux::fs - Rust",
	"url": "https://doc.rust-lang.org/stable/std/os/linux/fs/trait.MetadataExt.html",
	"markdown": "# MetadataExt in std::os::linux::fs - Rust\n\n```\npub trait MetadataExt {\nShow 17 methods    // Required methods\n    fn as_raw_stat(&self) -> &stat;\n    fn st_dev(&self) -> u64;\n    fn st_ino(&self) -> u64;\n    fn st_mode(&self) -> u32;\n    fn st_nlink(&self) -> u64;\n    fn st_uid(&self) -> u32;\n    fn st_gid(&self) -> u32;\n    fn st_rdev(&self) -> u64;\n    fn st_size(&self) -> u64;\n    fn st_atime(&self) -> i64;\n    fn st_atime_nsec(&self) -> i64;\n    fn st_mtime(&self) -> i64;\n    fn st_mtime_nsec(&self) -> i64;\n    fn st_ctime(&self) -> i64;\n    fn st_ctime_nsec(&self) -> i64;\n    fn st_blksize(&self) -> u64;\n    fn st_blocks(&self) -> u64;\n}\n```\n\nAvailable on **Linux** only.\n\nExpand description\n\n1.1.0 · [source](about:blank/src/std/os/linux/fs.rs.html#43)\n\n👎Deprecated since 1.8.0: other methods of this trait are now preferred\n\nGain a reference to the underlying `stat` structure which contains the raw information returned by the OS.\n\nThe contents of the returned [`stat`](../raw/struct.stat.html \"struct std::os::linux::raw::stat\") are **not** consistent across Unix platforms. The `os::unix::fs::MetadataExt` trait contains the cross-Unix abstractions contained within the raw stat.\n\n##### [§](#examples)Examples\n\n```\nuse std::fs;\nuse std::io;\nuse std::os::linux::fs::MetadataExt;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    let stat = meta.as_raw_stat();\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0Ause+std::io;%0Ause+std::os::linux::fs::MetadataExt;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+meta+=+fs::metadata(%22some_file%22)?;%0A++++let+stat+=+meta.as_raw_stat();%0A++++Ok(())%0A%7D&edition=2021)\n\n1.8.0 · [source](about:blank/src/std/os/linux/fs.rs.html#61)\n\nReturns the device ID on which this file resides.\n\n##### [§](#examples-1)Examples\n\n```\nuse std::fs;\nuse std::io;\nuse std::os::linux::fs::MetadataExt;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    println!(\"{}\", meta.st_dev());\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0Ause+std::io;%0Ause+std::os::linux::fs::MetadataExt;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+meta+=+fs::metadata(%22some_file%22)?;%0A++++println!(%22%7B%7D%22,+meta.st_dev());%0A++++Ok(())%0A%7D&edition=2021)\n\n1.8.0 · [source](about:blank/src/std/os/linux/fs.rs.html#78)\n\nReturns the inode number.\n\n##### [§](#examples-2)Examples\n\n```\nuse std::fs;\nuse std::io;\nuse std::os::linux::fs::MetadataExt;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    println!(\"{}\", meta.st_ino());\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0Ause+std::io;%0Ause+std::os::linux::fs::MetadataExt;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+meta+=+fs::metadata(%22some_file%22)?;%0A++++println!(%22%7B%7D%22,+meta.st_ino());%0A++++Ok(())%0A%7D&edition=2021)\n\n1.8.0 · [source](about:blank/src/std/os/linux/fs.rs.html#95)\n\nReturns the file type and mode.\n\n##### [§](#examples-3)Examples\n\n```\nuse std::fs;\nuse std::io;\nuse std::os::linux::fs::MetadataExt;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    println!(\"{}\", meta.st_mode());\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0Ause+std::io;%0Ause+std::os::linux::fs::MetadataExt;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+meta+=+fs::metadata(%22some_file%22)?;%0A++++println!(%22%7B%7D%22,+meta.st_mode());%0A++++Ok(())%0A%7D&edition=2021)\n\n1.8.0 · [source](about:blank/src/std/os/linux/fs.rs.html#112)\n\nReturns the number of hard links to file.\n\n##### [§](#examples-4)Examples\n\n```\nuse std::fs;\nuse std::io;\nuse std::os::linux::fs::MetadataExt;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    println!(\"{}\", meta.st_nlink());\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0Ause+std::io;%0Ause+std::os::linux::fs::MetadataExt;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+meta+=+fs::metadata(%22some_file%22)?;%0A++++println!(%22%7B%7D%22,+meta.st_nlink());%0A++++Ok(())%0A%7D&edition=2021)\n\n1.8.0 · [source](about:blank/src/std/os/linux/fs.rs.html#129)\n\nReturns the user ID of the file owner.\n\n##### [§](#examples-5)Examples\n\n```\nuse std::fs;\nuse std::io;\nuse std::os::linux::fs::MetadataExt;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    println!(\"{}\", meta.st_uid());\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0Ause+std::io;%0Ause+std::os::linux::fs::MetadataExt;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+meta+=+fs::metadata(%22some_file%22)?;%0A++++println!(%22%7B%7D%22,+meta.st_uid());%0A++++Ok(())%0A%7D&edition=2021)\n\n1.8.0 · [source](about:blank/src/std/os/linux/fs.rs.html#146)\n\nReturns the group ID of the file owner.\n\n##### [§](#examples-6)Examples\n\n```\nuse std::fs;\nuse std::io;\nuse std::os::linux::fs::MetadataExt;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    println!(\"{}\", meta.st_gid());\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0Ause+std::io;%0Ause+std::os::linux::fs::MetadataExt;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+meta+=+fs::metadata(%22some_file%22)?;%0A++++println!(%22%7B%7D%22,+meta.st_gid());%0A++++Ok(())%0A%7D&edition=2021)\n\n1.8.0 · [source](about:blank/src/std/os/linux/fs.rs.html#163)\n\nReturns the device ID that this file represents. Only relevant for special file.\n\n##### [§](#examples-7)Examples\n\n```\nuse std::fs;\nuse std::io;\nuse std::os::linux::fs::MetadataExt;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    println!(\"{}\", meta.st_rdev());\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0Ause+std::io;%0Ause+std::os::linux::fs::MetadataExt;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+meta+=+fs::metadata(%22some_file%22)?;%0A++++println!(%22%7B%7D%22,+meta.st_rdev());%0A++++Ok(())%0A%7D&edition=2021)\n\n1.8.0 · [source](about:blank/src/std/os/linux/fs.rs.html#183)\n\nReturns the size of the file (if it is a regular file or a symbolic link) in bytes.\n\nThe size of a symbolic link is the length of the pathname it contains, without a terminating null byte.\n\n##### [§](#examples-8)Examples\n\n```\nuse std::fs;\nuse std::io;\nuse std::os::linux::fs::MetadataExt;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    println!(\"{}\", meta.st_size());\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0Ause+std::io;%0Ause+std::os::linux::fs::MetadataExt;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+meta+=+fs::metadata(%22some_file%22)?;%0A++++println!(%22%7B%7D%22,+meta.st_size());%0A++++Ok(())%0A%7D&edition=2021)\n\n1.8.0 · [source](about:blank/src/std/os/linux/fs.rs.html#200)\n\nReturns the last access time of the file, in seconds since Unix Epoch.\n\n##### [§](#examples-9)Examples\n\n```\nuse std::fs;\nuse std::io;\nuse std::os::linux::fs::MetadataExt;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    println!(\"{}\", meta.st_atime());\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0Ause+std::io;%0Ause+std::os::linux::fs::MetadataExt;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+meta+=+fs::metadata(%22some_file%22)?;%0A++++println!(%22%7B%7D%22,+meta.st_atime());%0A++++Ok(())%0A%7D&edition=2021)\n\n1.8.0 · [source](about:blank/src/std/os/linux/fs.rs.html#219)\n\nReturns the last access time of the file, in nanoseconds since [`st_atime`](about:blank/trait.MetadataExt.html#tymethod.st_atime).\n\n##### [§](#examples-10)Examples\n\n```\nuse std::fs;\nuse std::io;\nuse std::os::linux::fs::MetadataExt;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    println!(\"{}\", meta.st_atime_nsec());\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0Ause+std::io;%0Ause+std::os::linux::fs::MetadataExt;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+meta+=+fs::metadata(%22some_file%22)?;%0A++++println!(%22%7B%7D%22,+meta.st_atime_nsec());%0A++++Ok(())%0A%7D&edition=2021)\n\n1.8.0 · [source](about:blank/src/std/os/linux/fs.rs.html#236)\n\nReturns the last modification time of the file, in seconds since Unix Epoch.\n\n##### [§](#examples-11)Examples\n\n```\nuse std::fs;\nuse std::io;\nuse std::os::linux::fs::MetadataExt;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    println!(\"{}\", meta.st_mtime());\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0Ause+std::io;%0Ause+std::os::linux::fs::MetadataExt;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+meta+=+fs::metadata(%22some_file%22)?;%0A++++println!(%22%7B%7D%22,+meta.st_mtime());%0A++++Ok(())%0A%7D&edition=2021)\n\n1.8.0 · [source](about:blank/src/std/os/linux/fs.rs.html#255)\n\nReturns the last modification time of the file, in nanoseconds since [`st_mtime`](about:blank/trait.MetadataExt.html#tymethod.st_mtime).\n\n##### [§](#examples-12)Examples\n\n```\nuse std::fs;\nuse std::io;\nuse std::os::linux::fs::MetadataExt;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    println!(\"{}\", meta.st_mtime_nsec());\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0Ause+std::io;%0Ause+std::os::linux::fs::MetadataExt;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+meta+=+fs::metadata(%22some_file%22)?;%0A++++println!(%22%7B%7D%22,+meta.st_mtime_nsec());%0A++++Ok(())%0A%7D&edition=2021)\n\n1.8.0 · [source](about:blank/src/std/os/linux/fs.rs.html#272)\n\nReturns the last status change time of the file, in seconds since Unix Epoch.\n\n##### [§](#examples-13)Examples\n\n```\nuse std::fs;\nuse std::io;\nuse std::os::linux::fs::MetadataExt;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    println!(\"{}\", meta.st_ctime());\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0Ause+std::io;%0Ause+std::os::linux::fs::MetadataExt;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+meta+=+fs::metadata(%22some_file%22)?;%0A++++println!(%22%7B%7D%22,+meta.st_ctime());%0A++++Ok(())%0A%7D&edition=2021)\n\n1.8.0 · [source](about:blank/src/std/os/linux/fs.rs.html#291)\n\nReturns the last status change time of the file, in nanoseconds since [`st_ctime`](about:blank/trait.MetadataExt.html#tymethod.st_ctime).\n\n##### [§](#examples-14)Examples\n\n```\nuse std::fs;\nuse std::io;\nuse std::os::linux::fs::MetadataExt;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    println!(\"{}\", meta.st_ctime_nsec());\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0Ause+std::io;%0Ause+std::os::linux::fs::MetadataExt;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+meta+=+fs::metadata(%22some_file%22)?;%0A++++println!(%22%7B%7D%22,+meta.st_ctime_nsec());%0A++++Ok(())%0A%7D&edition=2021)\n\n1.8.0 · [source](about:blank/src/std/os/linux/fs.rs.html#308)\n\nReturns the “preferred” block size for efficient filesystem I/O.\n\n##### [§](#examples-15)Examples\n\n```\nuse std::fs;\nuse std::io;\nuse std::os::linux::fs::MetadataExt;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    println!(\"{}\", meta.st_blksize());\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0Ause+std::io;%0Ause+std::os::linux::fs::MetadataExt;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+meta+=+fs::metadata(%22some_file%22)?;%0A++++println!(%22%7B%7D%22,+meta.st_blksize());%0A++++Ok(())%0A%7D&edition=2021)\n\n1.8.0 · [source](about:blank/src/std/os/linux/fs.rs.html#325)\n\nReturns the number of blocks allocated to the file, 512-byte units.\n\n##### [§](#examples-16)Examples\n\n```\nuse std::fs;\nuse std::io;\nuse std::os::linux::fs::MetadataExt;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    println!(\"{}\", meta.st_blocks());\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0Ause+std::io;%0Ause+std::os::linux::fs::MetadataExt;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+meta+=+fs::metadata(%22some_file%22)?;%0A++++println!(%22%7B%7D%22,+meta.st_blocks());%0A++++Ok(())%0A%7D&edition=2021)\n\n1.1.0 · [source](about:blank/src/std/os/linux/fs.rs.html#329-404)[§](#impl-MetadataExt-for-Metadata)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"OS-specific extensions to `fs::Metadata`.\"><title>MetadataExt in std::os::linux::fs - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../../../\" data-static-root-path=\"../../../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc trait\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">MetadataExt</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">MetadataExt</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#required-methods\">Required Methods</a></h3><ul class=\"block\"><li><a href=\"#tymethod.as_raw_stat\">as_raw_stat</a></li><li><a href=\"#tymethod.st_atime\">st_atime</a></li><li><a href=\"#tymethod.st_atime_nsec\">st_atime_nsec</a></li><li><a href=\"#tymethod.st_blksize\">st_blksize</a></li><li><a href=\"#tymethod.st_blocks\">st_blocks</a></li><li><a href=\"#tymethod.st_ctime\">st_ctime</a></li><li><a href=\"#tymethod.st_ctime_nsec\">st_ctime_nsec</a></li><li><a href=\"#tymethod.st_dev\">st_dev</a></li><li><a href=\"#tymethod.st_gid\">st_gid</a></li><li><a href=\"#tymethod.st_ino\">st_ino</a></li><li><a href=\"#tymethod.st_mode\">st_mode</a></li><li><a href=\"#tymethod.st_mtime\">st_mtime</a></li><li><a href=\"#tymethod.st_mtime_nsec\">st_mtime_nsec</a></li><li><a href=\"#tymethod.st_nlink\">st_nlink</a></li><li><a href=\"#tymethod.st_rdev\">st_rdev</a></li><li><a href=\"#tymethod.st_size\">st_size</a></li><li><a href=\"#tymethod.st_uid\">st_uid</a></li></ul><h3><a href=\"#implementors\">Implementors</a></h3></section><h2><a href=\"index.html\">In std::os::linux::fs</a></h2><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.MetadataExt.html\">MetadataExt</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Trait <a href=\"../../../index.html\">std</a>::<wbr><a href=\"../../index.html\">os</a>::<wbr><a href=\"../index.html\">linux</a>::<wbr><a href=\"index.html\">fs</a>::<wbr><a class=\"trait\" href=\"#\">MetadataExt</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.1.0\">1.1.0</span> · <a class=\"src\" href=\"../../../../src/std/os/linux/fs.rs.html#17-326\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub trait MetadataExt {\n<details class=\"toggle type-contents-toggle\"><summary class=\"hideme\"><span>Show 17 methods</span></summary>    // Required methods\n    fn <a href=\"#tymethod.as_raw_stat\" class=\"fn\">as_raw_stat</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"../raw/struct.stat.html\" title=\"struct std::os::linux::raw::stat\">stat</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.st_dev\" class=\"fn\">st_dev</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.u64.html\">u64</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.st_ino\" class=\"fn\">st_ino</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.u64.html\">u64</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.st_mode\" class=\"fn\">st_mode</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.u32.html\">u32</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.st_nlink\" class=\"fn\">st_nlink</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.u64.html\">u64</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.st_uid\" class=\"fn\">st_uid</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.u32.html\">u32</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.st_gid\" class=\"fn\">st_gid</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.u32.html\">u32</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.st_rdev\" class=\"fn\">st_rdev</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.u64.html\">u64</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.st_size\" class=\"fn\">st_size</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.u64.html\">u64</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.st_atime\" class=\"fn\">st_atime</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.i64.html\">i64</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.st_atime_nsec\" class=\"fn\">st_atime_nsec</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.i64.html\">i64</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.st_mtime\" class=\"fn\">st_mtime</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.i64.html\">i64</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.st_mtime_nsec\" class=\"fn\">st_mtime_nsec</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.i64.html\">i64</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.st_ctime\" class=\"fn\">st_ctime</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.i64.html\">i64</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.st_ctime_nsec\" class=\"fn\">st_ctime_nsec</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.i64.html\">i64</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.st_blksize\" class=\"fn\">st_blksize</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.u64.html\">u64</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.st_blocks\" class=\"fn\">st_blocks</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.u64.html\">u64</a>;\n</details>}</code></pre><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Linux</strong> only.</div></span><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>OS-specific extensions to <a href=\"../../../fs/struct.Metadata.html\" title=\"struct std::fs::Metadata\"><code>fs::Metadata</code></a>.</p>\n</div></details><h2 id=\"required-methods\" class=\"section-header\">Required Methods<a href=\"#required-methods\" class=\"anchor\">§</a></h2><div class=\"methods\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.as_raw_stat\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.1.0\">1.1.0</span> · <a class=\"src\" href=\"../../../../src/std/os/linux/fs.rs.html#43\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.as_raw_stat\" class=\"fn\">as_raw_stat</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"../raw/struct.stat.html\" title=\"struct std::os::linux::raw::stat\">stat</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 1.8.0: other methods of this trait are now preferred</span></div></span></summary><div class=\"docblock\"><p>Gain a reference to the underlying <code>stat</code> structure which contains\nthe raw information returned by the OS.</p>\n<p>The contents of the returned <a href=\"../raw/struct.stat.html\" title=\"struct std::os::linux::raw::stat\"><code>stat</code></a> are <strong>not</strong> consistent across\nUnix platforms. The <code>os::unix::fs::MetadataExt</code> trait contains the\ncross-Unix abstractions contained within the raw stat.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs;\n<span class=\"kw\">use </span>std::io;\n<span class=\"kw\">use </span>std::os::linux::fs::MetadataExt;\n\n<span class=\"kw\">fn </span>main() -&gt; io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>meta = fs::metadata(<span class=\"string\">\"some_file\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span>stat = meta.as_raw_stat();\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0Ause+std::io;%0Ause+std::os::linux::fs::MetadataExt;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+meta+=+fs::metadata(%22some_file%22)?;%0A++++let+stat+=+meta.as_raw_stat();%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.st_dev\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../../../src/std/os/linux/fs.rs.html#61\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.st_dev\" class=\"fn\">st_dev</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\"><p>Returns the device ID on which this file resides.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs;\n<span class=\"kw\">use </span>std::io;\n<span class=\"kw\">use </span>std::os::linux::fs::MetadataExt;\n\n<span class=\"kw\">fn </span>main() -&gt; io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>meta = fs::metadata(<span class=\"string\">\"some_file\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, meta.st_dev());\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0Ause+std::io;%0Ause+std::os::linux::fs::MetadataExt;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+meta+=+fs::metadata(%22some_file%22)?;%0A++++println!(%22%7B%7D%22,+meta.st_dev());%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.st_ino\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../../../src/std/os/linux/fs.rs.html#78\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.st_ino\" class=\"fn\">st_ino</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\"><p>Returns the inode number.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs;\n<span class=\"kw\">use </span>std::io;\n<span class=\"kw\">use </span>std::os::linux::fs::MetadataExt;\n\n<span class=\"kw\">fn </span>main() -&gt; io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>meta = fs::metadata(<span class=\"string\">\"some_file\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, meta.st_ino());\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0Ause+std::io;%0Ause+std::os::linux::fs::MetadataExt;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+meta+=+fs::metadata(%22some_file%22)?;%0A++++println!(%22%7B%7D%22,+meta.st_ino());%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.st_mode\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../../../src/std/os/linux/fs.rs.html#95\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.st_mode\" class=\"fn\">st_mode</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the file type and mode.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs;\n<span class=\"kw\">use </span>std::io;\n<span class=\"kw\">use </span>std::os::linux::fs::MetadataExt;\n\n<span class=\"kw\">fn </span>main() -&gt; io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>meta = fs::metadata(<span class=\"string\">\"some_file\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, meta.st_mode());\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0Ause+std::io;%0Ause+std::os::linux::fs::MetadataExt;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+meta+=+fs::metadata(%22some_file%22)?;%0A++++println!(%22%7B%7D%22,+meta.st_mode());%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.st_nlink\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../../../src/std/os/linux/fs.rs.html#112\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.st_nlink\" class=\"fn\">st_nlink</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of hard links to file.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs;\n<span class=\"kw\">use </span>std::io;\n<span class=\"kw\">use </span>std::os::linux::fs::MetadataExt;\n\n<span class=\"kw\">fn </span>main() -&gt; io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>meta = fs::metadata(<span class=\"string\">\"some_file\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, meta.st_nlink());\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0Ause+std::io;%0Ause+std::os::linux::fs::MetadataExt;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+meta+=+fs::metadata(%22some_file%22)?;%0A++++println!(%22%7B%7D%22,+meta.st_nlink());%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.st_uid\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../../../src/std/os/linux/fs.rs.html#129\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.st_uid\" class=\"fn\">st_uid</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the user ID of the file owner.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs;\n<span class=\"kw\">use </span>std::io;\n<span class=\"kw\">use </span>std::os::linux::fs::MetadataExt;\n\n<span class=\"kw\">fn </span>main() -&gt; io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>meta = fs::metadata(<span class=\"string\">\"some_file\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, meta.st_uid());\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0Ause+std::io;%0Ause+std::os::linux::fs::MetadataExt;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+meta+=+fs::metadata(%22some_file%22)?;%0A++++println!(%22%7B%7D%22,+meta.st_uid());%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.st_gid\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../../../src/std/os/linux/fs.rs.html#146\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.st_gid\" class=\"fn\">st_gid</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the group ID of the file owner.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs;\n<span class=\"kw\">use </span>std::io;\n<span class=\"kw\">use </span>std::os::linux::fs::MetadataExt;\n\n<span class=\"kw\">fn </span>main() -&gt; io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>meta = fs::metadata(<span class=\"string\">\"some_file\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, meta.st_gid());\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0Ause+std::io;%0Ause+std::os::linux::fs::MetadataExt;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+meta+=+fs::metadata(%22some_file%22)?;%0A++++println!(%22%7B%7D%22,+meta.st_gid());%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.st_rdev\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../../../src/std/os/linux/fs.rs.html#163\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.st_rdev\" class=\"fn\">st_rdev</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\"><p>Returns the device ID that this file represents. Only relevant for special file.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs;\n<span class=\"kw\">use </span>std::io;\n<span class=\"kw\">use </span>std::os::linux::fs::MetadataExt;\n\n<span class=\"kw\">fn </span>main() -&gt; io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>meta = fs::metadata(<span class=\"string\">\"some_file\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, meta.st_rdev());\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0Ause+std::io;%0Ause+std::os::linux::fs::MetadataExt;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+meta+=+fs::metadata(%22some_file%22)?;%0A++++println!(%22%7B%7D%22,+meta.st_rdev());%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.st_size\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../../../src/std/os/linux/fs.rs.html#183\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.st_size\" class=\"fn\">st_size</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\"><p>Returns the size of the file (if it is a regular file or a symbolic link) in bytes.</p>\n<p>The size of a symbolic link is the length of the pathname it contains,\nwithout a terminating null byte.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs;\n<span class=\"kw\">use </span>std::io;\n<span class=\"kw\">use </span>std::os::linux::fs::MetadataExt;\n\n<span class=\"kw\">fn </span>main() -&gt; io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>meta = fs::metadata(<span class=\"string\">\"some_file\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, meta.st_size());\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0Ause+std::io;%0Ause+std::os::linux::fs::MetadataExt;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+meta+=+fs::metadata(%22some_file%22)?;%0A++++println!(%22%7B%7D%22,+meta.st_size());%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.st_atime\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../../../src/std/os/linux/fs.rs.html#200\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.st_atime\" class=\"fn\">st_atime</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Returns the last access time of the file, in seconds since Unix Epoch.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs;\n<span class=\"kw\">use </span>std::io;\n<span class=\"kw\">use </span>std::os::linux::fs::MetadataExt;\n\n<span class=\"kw\">fn </span>main() -&gt; io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>meta = fs::metadata(<span class=\"string\">\"some_file\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, meta.st_atime());\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0Ause+std::io;%0Ause+std::os::linux::fs::MetadataExt;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+meta+=+fs::metadata(%22some_file%22)?;%0A++++println!(%22%7B%7D%22,+meta.st_atime());%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.st_atime_nsec\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../../../src/std/os/linux/fs.rs.html#219\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.st_atime_nsec\" class=\"fn\">st_atime_nsec</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Returns the last access time of the file, in nanoseconds since <a href=\"trait.MetadataExt.html#tymethod.st_atime\"><code>st_atime</code></a>.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs;\n<span class=\"kw\">use </span>std::io;\n<span class=\"kw\">use </span>std::os::linux::fs::MetadataExt;\n\n<span class=\"kw\">fn </span>main() -&gt; io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>meta = fs::metadata(<span class=\"string\">\"some_file\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, meta.st_atime_nsec());\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0Ause+std::io;%0Ause+std::os::linux::fs::MetadataExt;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+meta+=+fs::metadata(%22some_file%22)?;%0A++++println!(%22%7B%7D%22,+meta.st_atime_nsec());%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.st_mtime\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../../../src/std/os/linux/fs.rs.html#236\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.st_mtime\" class=\"fn\">st_mtime</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Returns the last modification time of the file, in seconds since Unix Epoch.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs;\n<span class=\"kw\">use </span>std::io;\n<span class=\"kw\">use </span>std::os::linux::fs::MetadataExt;\n\n<span class=\"kw\">fn </span>main() -&gt; io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>meta = fs::metadata(<span class=\"string\">\"some_file\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, meta.st_mtime());\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0Ause+std::io;%0Ause+std::os::linux::fs::MetadataExt;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+meta+=+fs::metadata(%22some_file%22)?;%0A++++println!(%22%7B%7D%22,+meta.st_mtime());%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.st_mtime_nsec\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../../../src/std/os/linux/fs.rs.html#255\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.st_mtime_nsec\" class=\"fn\">st_mtime_nsec</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Returns the last modification time of the file, in nanoseconds since <a href=\"trait.MetadataExt.html#tymethod.st_mtime\"><code>st_mtime</code></a>.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs;\n<span class=\"kw\">use </span>std::io;\n<span class=\"kw\">use </span>std::os::linux::fs::MetadataExt;\n\n<span class=\"kw\">fn </span>main() -&gt; io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>meta = fs::metadata(<span class=\"string\">\"some_file\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, meta.st_mtime_nsec());\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0Ause+std::io;%0Ause+std::os::linux::fs::MetadataExt;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+meta+=+fs::metadata(%22some_file%22)?;%0A++++println!(%22%7B%7D%22,+meta.st_mtime_nsec());%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.st_ctime\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../../../src/std/os/linux/fs.rs.html#272\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.st_ctime\" class=\"fn\">st_ctime</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Returns the last status change time of the file, in seconds since Unix Epoch.</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs;\n<span class=\"kw\">use </span>std::io;\n<span class=\"kw\">use </span>std::os::linux::fs::MetadataExt;\n\n<span class=\"kw\">fn </span>main() -&gt; io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>meta = fs::metadata(<span class=\"string\">\"some_file\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, meta.st_ctime());\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0Ause+std::io;%0Ause+std::os::linux::fs::MetadataExt;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+meta+=+fs::metadata(%22some_file%22)?;%0A++++println!(%22%7B%7D%22,+meta.st_ctime());%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.st_ctime_nsec\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../../../src/std/os/linux/fs.rs.html#291\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.st_ctime_nsec\" class=\"fn\">st_ctime_nsec</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Returns the last status change time of the file, in nanoseconds since <a href=\"trait.MetadataExt.html#tymethod.st_ctime\"><code>st_ctime</code></a>.</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs;\n<span class=\"kw\">use </span>std::io;\n<span class=\"kw\">use </span>std::os::linux::fs::MetadataExt;\n\n<span class=\"kw\">fn </span>main() -&gt; io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>meta = fs::metadata(<span class=\"string\">\"some_file\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, meta.st_ctime_nsec());\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0Ause+std::io;%0Ause+std::os::linux::fs::MetadataExt;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+meta+=+fs::metadata(%22some_file%22)?;%0A++++println!(%22%7B%7D%22,+meta.st_ctime_nsec());%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.st_blksize\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../../../src/std/os/linux/fs.rs.html#308\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.st_blksize\" class=\"fn\">st_blksize</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\"><p>Returns the “preferred” block size for efficient filesystem I/O.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs;\n<span class=\"kw\">use </span>std::io;\n<span class=\"kw\">use </span>std::os::linux::fs::MetadataExt;\n\n<span class=\"kw\">fn </span>main() -&gt; io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>meta = fs::metadata(<span class=\"string\">\"some_file\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, meta.st_blksize());\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0Ause+std::io;%0Ause+std::os::linux::fs::MetadataExt;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+meta+=+fs::metadata(%22some_file%22)?;%0A++++println!(%22%7B%7D%22,+meta.st_blksize());%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.st_blocks\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../../../src/std/os/linux/fs.rs.html#325\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.st_blocks\" class=\"fn\">st_blocks</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of blocks allocated to the file, 512-byte units.</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs;\n<span class=\"kw\">use </span>std::io;\n<span class=\"kw\">use </span>std::os::linux::fs::MetadataExt;\n\n<span class=\"kw\">fn </span>main() -&gt; io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>meta = fs::metadata(<span class=\"string\">\"some_file\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, meta.st_blocks());\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0Ause+std::io;%0Ause+std::os::linux::fs::MetadataExt;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+meta+=+fs::metadata(%22some_file%22)?;%0A++++println!(%22%7B%7D%22,+meta.st_blocks());%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div><h2 id=\"implementors\" class=\"section-header\">Implementors<a href=\"#implementors\" class=\"anchor\">§</a></h2><div id=\"implementors-list\"><section id=\"impl-MetadataExt-for-Metadata\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.1.0\">1.1.0</span> · <a class=\"src\" href=\"../../../../src/std/os/linux/fs.rs.html#329-404\">source</a></span><a href=\"#impl-MetadataExt-for-Metadata\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.MetadataExt.html\" title=\"trait std::os::linux::fs::MetadataExt\">MetadataExt</a> for <a class=\"struct\" href=\"../../../fs/struct.Metadata.html\" title=\"struct std::fs::Metadata\">Metadata</a></h3></section></div><script src=\"../../../../trait.impl/std/os/linux/fs/trait.MetadataExt.js\" async=\"\"></script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:26:24.753Z"
}