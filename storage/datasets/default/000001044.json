{
	"title": "fence in std::sync::atomic - Rust",
	"url": "https://doc.rust-lang.org/stable/std/sync/atomic/fn.fence.html",
	"markdown": "# fence in std::sync::atomic - Rust\n\n## Function [std](../../index.html)::[sync](../index.html)::[atomic](index.html)::[fence](#)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/sync/atomic.rs.html#3637) ·\n\n```\npub fn fence(order: Ordering)\n```\n\nExpand description\n\nAn atomic fence.\n\nDepending on the specified order, a fence prevents the compiler and CPU from reordering certain types of memory operations around it. That creates synchronizes-with relationships between it and atomic operations or fences in other threads.\n\nA fence ‘A’ which has (at least) [`Release`](about:blank/enum.Ordering.html#variant.Release \"variant std::sync::atomic::Ordering::Release\") ordering semantics, synchronizes with a fence ‘B’ with (at least) [`Acquire`](about:blank/enum.Ordering.html#variant.Acquire \"variant std::sync::atomic::Ordering::Acquire\") semantics, if and only if there exist operations X and Y, both operating on some atomic object ‘M’ such that A is sequenced before X, Y is sequenced before B and Y observes the change to M. This provides a happens-before dependence between A and B.\n\n```text\n    Thread 1                                          Thread 2\n\nfence(Release);      A --------------\nx.store(3, Relaxed); X ---------    |\n                               |    |\n                               |    |\n                               -------------> Y  if x.load(Relaxed) == 3 {\n                                    |-------> B      fence(Acquire);\n                                                     ...\n                                                 }\n\n```\n\nAtomic operations with [`Release`](about:blank/enum.Ordering.html#variant.Release \"variant std::sync::atomic::Ordering::Release\") or [`Acquire`](about:blank/enum.Ordering.html#variant.Acquire \"variant std::sync::atomic::Ordering::Acquire\") semantics can also synchronize with a fence.\n\nA fence which has [`SeqCst`](about:blank/enum.Ordering.html#variant.SeqCst \"variant std::sync::atomic::Ordering::SeqCst\") ordering, in addition to having both [`Acquire`](about:blank/enum.Ordering.html#variant.Acquire \"variant std::sync::atomic::Ordering::Acquire\") and [`Release`](about:blank/enum.Ordering.html#variant.Release \"variant std::sync::atomic::Ordering::Release\") semantics, participates in the global program order of the other [`SeqCst`](about:blank/enum.Ordering.html#variant.SeqCst \"variant std::sync::atomic::Ordering::SeqCst\") operations and/or fences.\n\nAccepts [`Acquire`](about:blank/enum.Ordering.html#variant.Acquire \"variant std::sync::atomic::Ordering::Acquire\"), [`Release`](about:blank/enum.Ordering.html#variant.Release \"variant std::sync::atomic::Ordering::Release\"), [`AcqRel`](about:blank/enum.Ordering.html#variant.AcqRel \"variant std::sync::atomic::Ordering::AcqRel\") and [`SeqCst`](about:blank/enum.Ordering.html#variant.SeqCst \"variant std::sync::atomic::Ordering::SeqCst\") orderings.\n\n## [§](#panics)Panics\n\nPanics if `order` is [`Relaxed`](about:blank/enum.Ordering.html#variant.Relaxed \"variant std::sync::atomic::Ordering::Relaxed\").\n\n## [§](#examples)Examples\n\n```\nuse std::sync::atomic::AtomicBool;\nuse std::sync::atomic::fence;\nuse std::sync::atomic::Ordering;\n\n// A mutual exclusion primitive based on spinlock.\npub struct Mutex {\n    flag: AtomicBool,\n}\n\nimpl Mutex {\n    pub fn new() -> Mutex {\n        Mutex {\n            flag: AtomicBool::new(false),\n        }\n    }\n\n    pub fn lock(&self) {\n        // Wait until the old value is `false`.\n        while self\n            .flag\n            .compare_exchange_weak(false, true, Ordering::Relaxed, Ordering::Relaxed)\n            .is_err()\n        {}\n        // This fence synchronizes-with store in `unlock`.\n        fence(Ordering::Acquire);\n    }\n\n    pub fn unlock(&self) {\n        self.flag.store(false, Ordering::Release);\n    }\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::atomic::AtomicBool;%0A++++use+std::sync::atomic::fence;%0A++++use+std::sync::atomic::Ordering;%0A++++%0A++++//+A+mutual+exclusion+primitive+based+on+spinlock.%0A++++pub+struct+Mutex+%7B%0A++++++++flag:+AtomicBool,%0A++++%7D%0A++++%0A++++impl+Mutex+%7B%0A++++++++pub+fn+new()+-%3E+Mutex+%7B%0A++++++++++++Mutex+%7B%0A++++++++++++++++flag:+AtomicBool::new(false),%0A++++++++++++%7D%0A++++++++%7D%0A++++%0A++++++++pub+fn+lock(%26self)+%7B%0A++++++++++++//+Wait+until+the+old+value+is+%60false%60.%0A++++++++++++while+self%0A++++++++++++++++.flag%0A++++++++++++++++.compare_exchange_weak(false,+true,+Ordering::Relaxed,+Ordering::Relaxed)%0A++++++++++++++++.is_err()%0A++++++++++++%7B%7D%0A++++++++++++//+This+fence+synchronizes-with+store+in+%60unlock%60.%0A++++++++++++fence(Ordering::Acquire);%0A++++++++%7D%0A++++%0A++++++++pub+fn+unlock(%26self)+%7B%0A++++++++++++self.flag.store(false,+Ordering::Release);%0A++++++++%7D%0A++++%7D%0A%7D&edition=2021)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"An atomic fence.\"><title>fence in std::sync::atomic - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../../\" data-static-root-path=\"../../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc fn\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><div class=\"sidebar-elems\"><h2><a href=\"index.html\">In std::sync::atomic</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.AtomicBool.html\">AtomicBool</a></li><li><a href=\"struct.AtomicI16.html\">AtomicI16</a></li><li><a href=\"struct.AtomicI32.html\">AtomicI32</a></li><li><a href=\"struct.AtomicI64.html\">AtomicI64</a></li><li><a href=\"struct.AtomicI8.html\">AtomicI8</a></li><li><a href=\"struct.AtomicIsize.html\">AtomicIsize</a></li><li><a href=\"struct.AtomicPtr.html\">AtomicPtr</a></li><li><a href=\"struct.AtomicU16.html\">AtomicU16</a></li><li><a href=\"struct.AtomicU32.html\">AtomicU32</a></li><li><a href=\"struct.AtomicU64.html\">AtomicU64</a></li><li><a href=\"struct.AtomicU8.html\">AtomicU8</a></li><li><a href=\"struct.AtomicUsize.html\">AtomicUsize</a></li></ul><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.Ordering.html\">Ordering</a></li></ul><h3><a href=\"index.html#constants\">Constants</a></h3><ul class=\"block constant\"><li><a href=\"constant.ATOMIC_BOOL_INIT.html\">ATOMIC_BOOL_INIT</a></li><li><a href=\"constant.ATOMIC_ISIZE_INIT.html\">ATOMIC_ISIZE_INIT</a></li><li><a href=\"constant.ATOMIC_USIZE_INIT.html\">ATOMIC_USIZE_INIT</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.compiler_fence.html\">compiler_fence</a></li><li><a href=\"fn.fence.html\">fence</a></li><li><a href=\"fn.spin_loop_hint.html\">spin_loop_hint</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Function <a href=\"../../index.html\">std</a>::<wbr><a href=\"../index.html\">sync</a>::<wbr><a href=\"index.html\">atomic</a>::<wbr><a class=\"fn\" href=\"#\">fence</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/sync/atomic.rs.html#3637\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub fn fence(order: <a class=\"enum\" href=\"enum.Ordering.html\" title=\"enum std::sync::atomic::Ordering\">Ordering</a>)</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>An atomic fence.</p>\n<p>Depending on the specified order, a fence prevents the compiler and CPU from\nreordering certain types of memory operations around it.\nThat creates synchronizes-with relationships between it and atomic operations\nor fences in other threads.</p>\n<p>A fence ‘A’ which has (at least) <a href=\"enum.Ordering.html#variant.Release\" title=\"variant std::sync::atomic::Ordering::Release\"><code>Release</code></a> ordering semantics, synchronizes\nwith a fence ‘B’ with (at least) <a href=\"enum.Ordering.html#variant.Acquire\" title=\"variant std::sync::atomic::Ordering::Acquire\"><code>Acquire</code></a> semantics, if and only if there\nexist operations X and Y, both operating on some atomic object ‘M’ such\nthat A is sequenced before X, Y is sequenced before B and Y observes\nthe change to M. This provides a happens-before dependence between A and B.</p>\n<div class=\"example-wrap\"><pre class=\"language-text\"><code>    Thread 1                                          Thread 2\n\nfence(Release);      A --------------\nx.store(3, Relaxed); X ---------    |\n                               |    |\n                               |    |\n                               -------------&gt; Y  if x.load(Relaxed) == 3 {\n                                    |-------&gt; B      fence(Acquire);\n                                                     ...\n                                                 }\n</code></pre></div>\n<p>Atomic operations with <a href=\"enum.Ordering.html#variant.Release\" title=\"variant std::sync::atomic::Ordering::Release\"><code>Release</code></a> or <a href=\"enum.Ordering.html#variant.Acquire\" title=\"variant std::sync::atomic::Ordering::Acquire\"><code>Acquire</code></a> semantics can also synchronize\nwith a fence.</p>\n<p>A fence which has <a href=\"enum.Ordering.html#variant.SeqCst\" title=\"variant std::sync::atomic::Ordering::SeqCst\"><code>SeqCst</code></a> ordering, in addition to having both <a href=\"enum.Ordering.html#variant.Acquire\" title=\"variant std::sync::atomic::Ordering::Acquire\"><code>Acquire</code></a>\nand <a href=\"enum.Ordering.html#variant.Release\" title=\"variant std::sync::atomic::Ordering::Release\"><code>Release</code></a> semantics, participates in the global program order of the\nother <a href=\"enum.Ordering.html#variant.SeqCst\" title=\"variant std::sync::atomic::Ordering::SeqCst\"><code>SeqCst</code></a> operations and/or fences.</p>\n<p>Accepts <a href=\"enum.Ordering.html#variant.Acquire\" title=\"variant std::sync::atomic::Ordering::Acquire\"><code>Acquire</code></a>, <a href=\"enum.Ordering.html#variant.Release\" title=\"variant std::sync::atomic::Ordering::Release\"><code>Release</code></a>, <a href=\"enum.Ordering.html#variant.AcqRel\" title=\"variant std::sync::atomic::Ordering::AcqRel\"><code>AcqRel</code></a> and <a href=\"enum.Ordering.html#variant.SeqCst\" title=\"variant std::sync::atomic::Ordering::SeqCst\"><code>SeqCst</code></a> orderings.</p>\n<h2 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h2>\n<p>Panics if <code>order</code> is <a href=\"enum.Ordering.html#variant.Relaxed\" title=\"variant std::sync::atomic::Ordering::Relaxed\"><code>Relaxed</code></a>.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::atomic::AtomicBool;\n<span class=\"kw\">use </span>std::sync::atomic::fence;\n<span class=\"kw\">use </span>std::sync::atomic::Ordering;\n\n<span class=\"comment\">// A mutual exclusion primitive based on spinlock.\n</span><span class=\"kw\">pub struct </span>Mutex {\n    flag: AtomicBool,\n}\n\n<span class=\"kw\">impl </span>Mutex {\n    <span class=\"kw\">pub fn </span>new() -&gt; Mutex {\n        Mutex {\n            flag: AtomicBool::new(<span class=\"bool-val\">false</span>),\n        }\n    }\n\n    <span class=\"kw\">pub fn </span>lock(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) {\n        <span class=\"comment\">// Wait until the old value is `false`.\n        </span><span class=\"kw\">while </span><span class=\"self\">self\n            </span>.flag\n            .compare_exchange_weak(<span class=\"bool-val\">false</span>, <span class=\"bool-val\">true</span>, Ordering::Relaxed, Ordering::Relaxed)\n            .is_err()\n        {}\n        <span class=\"comment\">// This fence synchronizes-with store in `unlock`.\n        </span>fence(Ordering::Acquire);\n    }\n\n    <span class=\"kw\">pub fn </span>unlock(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) {\n        <span class=\"self\">self</span>.flag.store(<span class=\"bool-val\">false</span>, Ordering::Release);\n    }\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::atomic::AtomicBool;%0A++++use+std::sync::atomic::fence;%0A++++use+std::sync::atomic::Ordering;%0A++++%0A++++//+A+mutual+exclusion+primitive+based+on+spinlock.%0A++++pub+struct+Mutex+%7B%0A++++++++flag:+AtomicBool,%0A++++%7D%0A++++%0A++++impl+Mutex+%7B%0A++++++++pub+fn+new()+-%3E+Mutex+%7B%0A++++++++++++Mutex+%7B%0A++++++++++++++++flag:+AtomicBool::new(false),%0A++++++++++++%7D%0A++++++++%7D%0A++++%0A++++++++pub+fn+lock(%26self)+%7B%0A++++++++++++//+Wait+until+the+old+value+is+%60false%60.%0A++++++++++++while+self%0A++++++++++++++++.flag%0A++++++++++++++++.compare_exchange_weak(false,+true,+Ordering::Relaxed,+Ordering::Relaxed)%0A++++++++++++++++.is_err()%0A++++++++++++%7B%7D%0A++++++++++++//+This+fence+synchronizes-with+store+in+%60unlock%60.%0A++++++++++++fence(Ordering::Acquire);%0A++++++++%7D%0A++++%0A++++++++pub+fn+unlock(%26self)+%7B%0A++++++++++++self.flag.store(false,+Ordering::Release);%0A++++++++%7D%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:14:53.335Z"
}