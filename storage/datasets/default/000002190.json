{
	"title": "DebugMap in std::fmt - Rust",
	"url": "https://doc.rust-lang.org/stable/std/fmt/struct.DebugMap.html",
	"markdown": "# DebugMap in std::fmt - Rust\n\n## Struct [std](../index.html)::[fmt](index.html)::[DebugMap](#)\n\n1.2.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/fmt/builders.rs.html#756) ·\n\n```\npub struct DebugMap<'a, 'b>where\n    'b: 'a,{ /* private fields */ }\n```\n\nExpand description\n\nA struct to help with [`fmt::Debug`](trait.Debug.html \"trait std::fmt::Debug\") implementations.\n\nThis is useful when you wish to output a formatted map as a part of your [`Debug::fmt`](about:blank/trait.Debug.html#tymethod.fmt \"method std::fmt::Debug::fmt\") implementation.\n\nThis can be constructed by the [`Formatter::debug_map`](about:blank/struct.Formatter.html#method.debug_map \"method std::fmt::Formatter::debug_map\") method.\n\n## [§](#examples)Examples\n\n```\nuse std::fmt;\n\nstruct Foo(Vec<(String, i32)>);\n\nimpl fmt::Debug for Foo {\n    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n        fmt.debug_map().entries(self.0.iter().map(|&(ref k, ref v)| (k, v))).finish()\n    }\n}\n\nassert_eq!(\n    format!(\"{:?}\", Foo(vec![(\"A\".to_string(), 10), (\"B\".to_string(), 11)])),\n    \"{\\\"A\\\": 10, \\\"B\\\": 11}\",\n);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fmt;%0A++++%0A++++struct+Foo(Vec%3C(String,+i32)%3E);%0A++++%0A++++impl+fmt::Debug+for+Foo+%7B%0A++++++++fn+fmt(%26self,+fmt:+%26mut+fmt::Formatter%3C%27_%3E)+-%3E+fmt::Result+%7B%0A++++++++++++fmt.debug_map().entries(self.0.iter().map(%7C%26(ref+k,+ref+v)%7C+(k,+v))).finish()%0A++++++++%7D%0A++++%7D%0A++++%0A++++assert_eq!(%0A++++++++format!(%22%7B:?%7D%22,+Foo(vec!%5B(%22A%22.to_string(),+10),+(%22B%22.to_string(),+11)%5D)),%0A++++++++%22%7B%5C%22A%5C%22:+10,+%5C%22B%5C%22:+11%7D%22,%0A++++);%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/fmt/builders.rs.html#770)[§](#impl-DebugMap%3C'a,+'b%3E)\n\n1.2.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/fmt/builders.rs.html#794)\n\nAdds a new entry to the map output.\n\n##### [§](#examples-1)Examples\n\n```\nuse std::fmt;\n\nstruct Foo(Vec<(String, i32)>);\n\nimpl fmt::Debug for Foo {\n    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n        fmt.debug_map()\n           .entry(&\"whole\", &self.0) // We add the \"whole\" entry.\n           .finish()\n    }\n}\n\nassert_eq!(\n    format!(\"{:?}\", Foo(vec![(\"A\".to_string(), 10), (\"B\".to_string(), 11)])),\n    \"{\\\"whole\\\": [(\\\"A\\\", 10), (\\\"B\\\", 11)]}\",\n);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fmt;%0A++++%0A++++struct+Foo(Vec%3C(String,+i32)%3E);%0A++++%0A++++impl+fmt::Debug+for+Foo+%7B%0A++++++++fn+fmt(%26self,+fmt:+%26mut+fmt::Formatter%3C%27_%3E)+-%3E+fmt::Result+%7B%0A++++++++++++fmt.debug_map()%0A+++++++++++++++.entry(%26%22whole%22,+%26self.0)+//+We+add+the+%22whole%22+entry.%0A+++++++++++++++.finish()%0A++++++++%7D%0A++++%7D%0A++++%0A++++assert_eq!(%0A++++++++format!(%22%7B:?%7D%22,+Foo(vec!%5B(%22A%22.to_string(),+10),+(%22B%22.to_string(),+11)%5D)),%0A++++++++%22%7B%5C%22whole%5C%22:+%5B(%5C%22A%5C%22,+10),+(%5C%22B%5C%22,+11)%5D%7D%22,%0A++++);%0A%7D&edition=2021)\n\n1.42.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/fmt/builders.rs.html#830)\n\nAdds the key part of a new entry to the map output.\n\nThis method, together with `value`, is an alternative to `entry` that can be used when the complete entry isn’t known upfront. Prefer the `entry` method when it’s possible to use.\n\n##### [§](#panics)Panics\n\n`key` must be called before `value` and each call to `key` must be followed by a corresponding call to `value`. Otherwise this method will panic.\n\n##### [§](#examples-2)Examples\n\n```\nuse std::fmt;\n\nstruct Foo(Vec<(String, i32)>);\n\nimpl fmt::Debug for Foo {\n    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n        fmt.debug_map()\n           .key(&\"whole\").value(&self.0) // We add the \"whole\" entry.\n           .finish()\n    }\n}\n\nassert_eq!(\n    format!(\"{:?}\", Foo(vec![(\"A\".to_string(), 10), (\"B\".to_string(), 11)])),\n    \"{\\\"whole\\\": [(\\\"A\\\", 10), (\\\"B\\\", 11)]}\",\n);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fmt;%0A++++%0A++++struct+Foo(Vec%3C(String,+i32)%3E);%0A++++%0A++++impl+fmt::Debug+for+Foo+%7B%0A++++++++fn+fmt(%26self,+fmt:+%26mut+fmt::Formatter%3C%27_%3E)+-%3E+fmt::Result+%7B%0A++++++++++++fmt.debug_map()%0A+++++++++++++++.key(%26%22whole%22).value(%26self.0)+//+We+add+the+%22whole%22+entry.%0A+++++++++++++++.finish()%0A++++++++%7D%0A++++%7D%0A++++%0A++++assert_eq!(%0A++++++++format!(%22%7B:?%7D%22,+Foo(vec!%5B(%22A%22.to_string(),+10),+(%22B%22.to_string(),+11)%5D)),%0A++++++++%22%7B%5C%22whole%5C%22:+%5B(%5C%22A%5C%22,+10),+(%5C%22B%5C%22,+11)%5D%7D%22,%0A++++);%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/fmt/builders.rs.html#839-841)\n\n🔬This is a nightly-only experimental API. (`debug_closure_helpers` [#117729](https://github.com/rust-lang/rust/issues/117729))\n\nAdds the key part of a new entry to the map output.\n\nThis method is equivalent to [`DebugMap::key`](about:blank/struct.DebugMap.html#method.key \"method std::fmt::DebugMap::key\"), but formats the key using a provided closure rather than by calling [`Debug::fmt`](about:blank/trait.Debug.html#tymethod.fmt \"method std::fmt::Debug::fmt\").\n\n1.42.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/fmt/builders.rs.html#906)\n\nAdds the value part of a new entry to the map output.\n\nThis method, together with `key`, is an alternative to `entry` that can be used when the complete entry isn’t known upfront. Prefer the `entry` method when it’s possible to use.\n\n##### [§](#panics-1)Panics\n\n`key` must be called before `value` and each call to `key` must be followed by a corresponding call to `value`. Otherwise this method will panic.\n\n##### [§](#examples-3)Examples\n\n```\nuse std::fmt;\n\nstruct Foo(Vec<(String, i32)>);\n\nimpl fmt::Debug for Foo {\n    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n        fmt.debug_map()\n           .key(&\"whole\").value(&self.0) // We add the \"whole\" entry.\n           .finish()\n    }\n}\n\nassert_eq!(\n    format!(\"{:?}\", Foo(vec![(\"A\".to_string(), 10), (\"B\".to_string(), 11)])),\n    \"{\\\"whole\\\": [(\\\"A\\\", 10), (\\\"B\\\", 11)]}\",\n);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fmt;%0A++++%0A++++struct+Foo(Vec%3C(String,+i32)%3E);%0A++++%0A++++impl+fmt::Debug+for+Foo+%7B%0A++++++++fn+fmt(%26self,+fmt:+%26mut+fmt::Formatter%3C%27_%3E)+-%3E+fmt::Result+%7B%0A++++++++++++fmt.debug_map()%0A+++++++++++++++.key(%26%22whole%22).value(%26self.0)+//+We+add+the+%22whole%22+entry.%0A+++++++++++++++.finish()%0A++++++++%7D%0A++++%7D%0A++++%0A++++assert_eq!(%0A++++++++format!(%22%7B:?%7D%22,+Foo(vec!%5B(%22A%22.to_string(),+10),+(%22B%22.to_string(),+11)%5D)),%0A++++++++%22%7B%5C%22whole%5C%22:+%5B(%5C%22A%5C%22,+10),+(%5C%22B%5C%22,+11)%5D%7D%22,%0A++++);%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/fmt/builders.rs.html#915-917)\n\n🔬This is a nightly-only experimental API. (`debug_closure_helpers` [#117729](https://github.com/rust-lang/rust/issues/117729))\n\nAdds the value part of a new entry to the map output.\n\nThis method is equivalent to [`DebugMap::value`](about:blank/struct.DebugMap.html#method.value \"method std::fmt::DebugMap::value\"), but formats the value using a provided closure rather than by calling [`Debug::fmt`](about:blank/trait.Debug.html#tymethod.fmt \"method std::fmt::Debug::fmt\").\n\n1.2.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/fmt/builders.rs.html#964-968)\n\nAdds the contents of an iterator of entries to the map output.\n\n##### [§](#examples-4)Examples\n\n```\nuse std::fmt;\n\nstruct Foo(Vec<(String, i32)>);\n\nimpl fmt::Debug for Foo {\n    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n        fmt.debug_map()\n           // We map our vec so each entries' first field will become\n           // the \"key\".\n           .entries(self.0.iter().map(|&(ref k, ref v)| (k, v)))\n           .finish()\n    }\n}\n\nassert_eq!(\n    format!(\"{:?}\", Foo(vec![(\"A\".to_string(), 10), (\"B\".to_string(), 11)])),\n    \"{\\\"A\\\": 10, \\\"B\\\": 11}\",\n);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fmt;%0A++++%0A++++struct+Foo(Vec%3C(String,+i32)%3E);%0A++++%0A++++impl+fmt::Debug+for+Foo+%7B%0A++++++++fn+fmt(%26self,+fmt:+%26mut+fmt::Formatter%3C%27_%3E)+-%3E+fmt::Result+%7B%0A++++++++++++fmt.debug_map()%0A+++++++++++++++//+We+map+our+vec+so+each+entries%27+first+field+will+become%0A+++++++++++++++//+the+%22key%22.%0A+++++++++++++++.entries(self.0.iter().map(%7C%26(ref+k,+ref+v)%7C+(k,+v)))%0A+++++++++++++++.finish()%0A++++++++%7D%0A++++%7D%0A++++%0A++++assert_eq!(%0A++++++++format!(%22%7B:?%7D%22,+Foo(vec!%5B(%22A%22.to_string(),+10),+(%22B%22.to_string(),+11)%5D)),%0A++++++++%22%7B%5C%22A%5C%22:+10,+%5C%22B%5C%22:+11%7D%22,%0A++++);%0A%7D&edition=2021)\n\n1.2.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/fmt/builders.rs.html#1004)\n\nFinishes output and returns any error encountered.\n\n##### [§](#panics-2)Panics\n\n`key` must be called before `value` and each call to `key` must be followed by a corresponding call to `value`. Otherwise this method will panic.\n\n##### [§](#examples-5)Examples\n\n```\nuse std::fmt;\n\nstruct Foo(Vec<(String, i32)>);\n\nimpl fmt::Debug for Foo {\n    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n        fmt.debug_map()\n           .entries(self.0.iter().map(|&(ref k, ref v)| (k, v)))\n           .finish() // Ends the map formatting.\n    }\n}\n\nassert_eq!(\n    format!(\"{:?}\", Foo(vec![(\"A\".to_string(), 10), (\"B\".to_string(), 11)])),\n    \"{\\\"A\\\": 10, \\\"B\\\": 11}\",\n);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fmt;%0A++++%0A++++struct+Foo(Vec%3C(String,+i32)%3E);%0A++++%0A++++impl+fmt::Debug+for+Foo+%7B%0A++++++++fn+fmt(%26self,+fmt:+%26mut+fmt::Formatter%3C%27_%3E)+-%3E+fmt::Result+%7B%0A++++++++++++fmt.debug_map()%0A+++++++++++++++.entries(self.0.iter().map(%7C%26(ref+k,+ref+v)%7C+(k,+v)))%0A+++++++++++++++.finish()+//+Ends+the+map+formatting.%0A++++++++%7D%0A++++%7D%0A++++%0A++++assert_eq!(%0A++++++++format!(%22%7B:?%7D%22,+Foo(vec!%5B(%22A%22.to_string(),+10),+(%22B%22.to_string(),+11)%5D)),%0A++++++++%22%7B%5C%22A%5C%22:+10,+%5C%22B%5C%22:+11%7D%22,%0A++++);%0A%7D&edition=2021)\n\n[§](#impl-Freeze-for-DebugMap%3C'a,+'b%3E)\n\n[§](#impl-RefUnwindSafe-for-DebugMap%3C'a,+'b%3E)\n\n[§](#impl-Send-for-DebugMap%3C'a,+'b%3E)\n\n[§](#impl-Sync-for-DebugMap%3C'a,+'b%3E)\n\n[§](#impl-Unpin-for-DebugMap%3C'a,+'b%3E)\n\n[§](#impl-UnwindSafe-for-DebugMap%3C'a,+'b%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140)[§](#impl-Any-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208)[§](#impl-Borrow%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216)[§](#impl-BorrowMut%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765)[§](#impl-From%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768)[§](#method.from)\n\nReturns the argument unchanged.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750)[§](#impl-Into%3CU%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758)[§](#method.into)\n\nCalls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of `[From](../convert/trait.From.html \"trait std::convert::From\")<T> for U` chooses to do.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807)[§](#impl-TryFrom%3CU%3E-for-T)\n\n[§](#associatedtype.Error-1)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812)[§](#method.try_from)\n\nPerforms the conversion.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792)[§](#impl-TryInto%3CU%3E-for-T)\n\n[§](#associatedtype.Error)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797)[§](#method.try_into)\n\nPerforms the conversion.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"A struct to help with `fmt::Debug` implementations.\"><title>DebugMap in std::fmt - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc struct\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">DebugMap</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">DebugMap</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#implementations\">Methods</a></h3><ul class=\"block method\"><li><a href=\"#method.entries\">entries</a></li><li><a href=\"#method.entry\">entry</a></li><li><a href=\"#method.finish\">finish</a></li><li><a href=\"#method.key\">key</a></li><li><a href=\"#method.key_with\">key_with</a></li><li><a href=\"#method.value\">value</a></li><li><a href=\"#method.value_with\">value_with</a></li></ul><h3><a href=\"#synthetic-implementations\">Auto Trait Implementations</a></h3><ul class=\"block synthetic-implementation\"><li><a href=\"#impl-RefUnwindSafe-for-DebugMap%3C'a,+'b%3E\">!RefUnwindSafe</a></li><li><a href=\"#impl-Send-for-DebugMap%3C'a,+'b%3E\">!Send</a></li><li><a href=\"#impl-Sync-for-DebugMap%3C'a,+'b%3E\">!Sync</a></li><li><a href=\"#impl-UnwindSafe-for-DebugMap%3C'a,+'b%3E\">!UnwindSafe</a></li><li><a href=\"#impl-Freeze-for-DebugMap%3C'a,+'b%3E\">Freeze</a></li><li><a href=\"#impl-Unpin-for-DebugMap%3C'a,+'b%3E\">Unpin</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-Any-for-T\">Any</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-T\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-T\">BorrowMut&lt;T&gt;</a></li><li><a href=\"#impl-From%3CT%3E-for-T\">From&lt;T&gt;</a></li><li><a href=\"#impl-Into%3CU%3E-for-T\">Into&lt;U&gt;</a></li><li><a href=\"#impl-TryFrom%3CU%3E-for-T\">TryFrom&lt;U&gt;</a></li><li><a href=\"#impl-TryInto%3CU%3E-for-T\">TryInto&lt;U&gt;</a></li></ul></section><h2><a href=\"index.html\">In std::fmt</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.Arguments.html\">Arguments</a></li><li><a href=\"struct.DebugList.html\">DebugList</a></li><li><a href=\"struct.DebugMap.html\">DebugMap</a></li><li><a href=\"struct.DebugSet.html\">DebugSet</a></li><li><a href=\"struct.DebugStruct.html\">DebugStruct</a></li><li><a href=\"struct.DebugTuple.html\">DebugTuple</a></li><li><a href=\"struct.Error.html\">Error</a></li><li><a href=\"struct.Formatter.html\">Formatter</a></li><li><a href=\"struct.FormatterFn.html\">FormatterFn</a></li></ul><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.Alignment.html\">Alignment</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.Binary.html\">Binary</a></li><li><a href=\"trait.Debug.html\">Debug</a></li><li><a href=\"trait.Display.html\">Display</a></li><li><a href=\"trait.LowerExp.html\">LowerExp</a></li><li><a href=\"trait.LowerHex.html\">LowerHex</a></li><li><a href=\"trait.Octal.html\">Octal</a></li><li><a href=\"trait.Pointer.html\">Pointer</a></li><li><a href=\"trait.UpperExp.html\">UpperExp</a></li><li><a href=\"trait.UpperHex.html\">UpperHex</a></li><li><a href=\"trait.Write.html\">Write</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.format.html\">format</a></li><li><a href=\"fn.write.html\">write</a></li></ul><h3><a href=\"index.html#types\">Type Aliases</a></h3><ul class=\"block type\"><li><a href=\"type.Result.html\">Result</a></li></ul><h3><a href=\"index.html#derives\">Derive Macros</a></h3><ul class=\"block derive\"><li><a href=\"derive.Debug.html\">Debug</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Struct <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">fmt</a>::<wbr><a class=\"struct\" href=\"#\">DebugMap</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.2.0\">1.2.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/builders.rs.html#756\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub struct DebugMap&lt;'a, 'b&gt;<div class=\"where\">where\n    'b: 'a,</div>{ <span class=\"comment\">/* private fields */</span> }</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>A struct to help with <a href=\"trait.Debug.html\" title=\"trait std::fmt::Debug\"><code>fmt::Debug</code></a> implementations.</p>\n<p>This is useful when you wish to output a formatted map as a part of your\n<a href=\"trait.Debug.html#tymethod.fmt\" title=\"method std::fmt::Debug::fmt\"><code>Debug::fmt</code></a> implementation.</p>\n<p>This can be constructed by the <a href=\"struct.Formatter.html#method.debug_map\" title=\"method std::fmt::Formatter::debug_map\"><code>Formatter::debug_map</code></a> method.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fmt;\n\n<span class=\"kw\">struct </span>Foo(Vec&lt;(String, i32)&gt;);\n\n<span class=\"kw\">impl </span>fmt::Debug <span class=\"kw\">for </span>Foo {\n    <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, fmt: <span class=\"kw-2\">&amp;mut </span>fmt::Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; fmt::Result {\n        fmt.debug_map().entries(<span class=\"self\">self</span>.<span class=\"number\">0</span>.iter().map(|<span class=\"kw-2\">&amp;</span>(<span class=\"kw-2\">ref </span>k, <span class=\"kw-2\">ref </span>v)| (k, v))).finish()\n    }\n}\n\n<span class=\"macro\">assert_eq!</span>(\n    <span class=\"macro\">format!</span>(<span class=\"string\">\"{:?}\"</span>, Foo(<span class=\"macro\">vec!</span>[(<span class=\"string\">\"A\"</span>.to_string(), <span class=\"number\">10</span>), (<span class=\"string\">\"B\"</span>.to_string(), <span class=\"number\">11</span>)])),\n    <span class=\"string\">\"{\\\"A\\\": 10, \\\"B\\\": 11}\"</span>,\n);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fmt;%0A++++%0A++++struct+Foo(Vec%3C(String,+i32)%3E);%0A++++%0A++++impl+fmt::Debug+for+Foo+%7B%0A++++++++fn+fmt(%26self,+fmt:+%26mut+fmt::Formatter%3C'_%3E)+-%3E+fmt::Result+%7B%0A++++++++++++fmt.debug_map().entries(self.0.iter().map(%7C%26(ref+k,+ref+v)%7C+(k,+v))).finish()%0A++++++++%7D%0A++++%7D%0A++++%0A++++assert_eq!(%0A++++++++format!(%22%7B:?%7D%22,+Foo(vec!%5B(%22A%22.to_string(),+10),+(%22B%22.to_string(),+11)%5D)),%0A++++++++%22%7B%5C%22A%5C%22:+10,+%5C%22B%5C%22:+11%7D%22,%0A++++);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><h2 id=\"implementations\" class=\"section-header\">Implementations<a href=\"#implementations\" class=\"anchor\">§</a></h2><div id=\"implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-DebugMap%3C'a,+'b%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/builders.rs.html#770\">source</a><a href=\"#impl-DebugMap%3C'a,+'b%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; <a class=\"struct\" href=\"struct.DebugMap.html\" title=\"struct std::fmt::DebugMap\">DebugMap</a>&lt;'a, 'b&gt;<div class=\"where\">where\n    'b: 'a,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.entry\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0\">1.2.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/builders.rs.html#794\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.entry\" class=\"fn\">entry</a>(\n    &amp;mut self,\n    key: &amp;dyn <a class=\"trait\" href=\"trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a>,\n    value: &amp;dyn <a class=\"trait\" href=\"trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a>,\n) -&gt; &amp;mut <a class=\"struct\" href=\"struct.DebugMap.html\" title=\"struct std::fmt::DebugMap\">DebugMap</a>&lt;'a, 'b&gt;</h4></section></summary><div class=\"docblock\"><p>Adds a new entry to the map output.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fmt;\n\n<span class=\"kw\">struct </span>Foo(Vec&lt;(String, i32)&gt;);\n\n<span class=\"kw\">impl </span>fmt::Debug <span class=\"kw\">for </span>Foo {\n    <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, fmt: <span class=\"kw-2\">&amp;mut </span>fmt::Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; fmt::Result {\n        fmt.debug_map()\n           .entry(<span class=\"kw-2\">&amp;</span><span class=\"string\">\"whole\"</span>, <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.<span class=\"number\">0</span>) <span class=\"comment\">// We add the \"whole\" entry.\n           </span>.finish()\n    }\n}\n\n<span class=\"macro\">assert_eq!</span>(\n    <span class=\"macro\">format!</span>(<span class=\"string\">\"{:?}\"</span>, Foo(<span class=\"macro\">vec!</span>[(<span class=\"string\">\"A\"</span>.to_string(), <span class=\"number\">10</span>), (<span class=\"string\">\"B\"</span>.to_string(), <span class=\"number\">11</span>)])),\n    <span class=\"string\">\"{\\\"whole\\\": [(\\\"A\\\", 10), (\\\"B\\\", 11)]}\"</span>,\n);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fmt;%0A++++%0A++++struct+Foo(Vec%3C(String,+i32)%3E);%0A++++%0A++++impl+fmt::Debug+for+Foo+%7B%0A++++++++fn+fmt(%26self,+fmt:+%26mut+fmt::Formatter%3C'_%3E)+-%3E+fmt::Result+%7B%0A++++++++++++fmt.debug_map()%0A+++++++++++++++.entry(%26%22whole%22,+%26self.0)+//+We+add+the+%22whole%22+entry.%0A+++++++++++++++.finish()%0A++++++++%7D%0A++++%7D%0A++++%0A++++assert_eq!(%0A++++++++format!(%22%7B:?%7D%22,+Foo(vec!%5B(%22A%22.to_string(),+10),+(%22B%22.to_string(),+11)%5D)),%0A++++++++%22%7B%5C%22whole%5C%22:+%5B(%5C%22A%5C%22,+10),+(%5C%22B%5C%22,+11)%5D%7D%22,%0A++++);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.key\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.42.0\">1.42.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/builders.rs.html#830\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.key\" class=\"fn\">key</a>(&amp;mut self, key: &amp;dyn <a class=\"trait\" href=\"trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a>) -&gt; &amp;mut <a class=\"struct\" href=\"struct.DebugMap.html\" title=\"struct std::fmt::DebugMap\">DebugMap</a>&lt;'a, 'b&gt;</h4></section></summary><div class=\"docblock\"><p>Adds the key part of a new entry to the map output.</p>\n<p>This method, together with <code>value</code>, is an alternative to <code>entry</code> that\ncan be used when the complete entry isn’t known upfront. Prefer the <code>entry</code>\nmethod when it’s possible to use.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p><code>key</code> must be called before <code>value</code> and each call to <code>key</code> must be followed\nby a corresponding call to <code>value</code>. Otherwise this method will panic.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fmt;\n\n<span class=\"kw\">struct </span>Foo(Vec&lt;(String, i32)&gt;);\n\n<span class=\"kw\">impl </span>fmt::Debug <span class=\"kw\">for </span>Foo {\n    <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, fmt: <span class=\"kw-2\">&amp;mut </span>fmt::Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; fmt::Result {\n        fmt.debug_map()\n           .key(<span class=\"kw-2\">&amp;</span><span class=\"string\">\"whole\"</span>).value(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.<span class=\"number\">0</span>) <span class=\"comment\">// We add the \"whole\" entry.\n           </span>.finish()\n    }\n}\n\n<span class=\"macro\">assert_eq!</span>(\n    <span class=\"macro\">format!</span>(<span class=\"string\">\"{:?}\"</span>, Foo(<span class=\"macro\">vec!</span>[(<span class=\"string\">\"A\"</span>.to_string(), <span class=\"number\">10</span>), (<span class=\"string\">\"B\"</span>.to_string(), <span class=\"number\">11</span>)])),\n    <span class=\"string\">\"{\\\"whole\\\": [(\\\"A\\\", 10), (\\\"B\\\", 11)]}\"</span>,\n);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fmt;%0A++++%0A++++struct+Foo(Vec%3C(String,+i32)%3E);%0A++++%0A++++impl+fmt::Debug+for+Foo+%7B%0A++++++++fn+fmt(%26self,+fmt:+%26mut+fmt::Formatter%3C'_%3E)+-%3E+fmt::Result+%7B%0A++++++++++++fmt.debug_map()%0A+++++++++++++++.key(%26%22whole%22).value(%26self.0)+//+We+add+the+%22whole%22+entry.%0A+++++++++++++++.finish()%0A++++++++%7D%0A++++%7D%0A++++%0A++++assert_eq!(%0A++++++++format!(%22%7B:?%7D%22,+Foo(vec!%5B(%22A%22.to_string(),+10),+(%22B%22.to_string(),+11)%5D)),%0A++++++++%22%7B%5C%22whole%5C%22:+%5B(%5C%22A%5C%22,+10),+(%5C%22B%5C%22,+11)%5D%7D%22,%0A++++);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.key_with\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/builders.rs.html#839-841\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.key_with\" class=\"fn\">key_with</a>&lt;F&gt;(&amp;mut self, key_fmt: F) -&gt; &amp;mut <a class=\"struct\" href=\"struct.DebugMap.html\" title=\"struct std::fmt::DebugMap\">DebugMap</a>&lt;'a, 'b&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnOnce.html\" title=\"trait std::ops::FnOnce\">FnOnce</a>(&amp;mut <a class=\"struct\" href=\"struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>debug_closure_helpers</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/117729\">#117729</a>)</span></div></span></summary><div class=\"docblock\"><p>Adds the key part of a new entry to the map output.</p>\n<p>This method is equivalent to <a href=\"struct.DebugMap.html#method.key\" title=\"method std::fmt::DebugMap::key\"><code>DebugMap::key</code></a>, but formats the\nkey using a provided closure rather than by calling <a href=\"trait.Debug.html#tymethod.fmt\" title=\"method std::fmt::Debug::fmt\"><code>Debug::fmt</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.value\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.42.0\">1.42.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/builders.rs.html#906\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.value\" class=\"fn\">value</a>(&amp;mut self, value: &amp;dyn <a class=\"trait\" href=\"trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a>) -&gt; &amp;mut <a class=\"struct\" href=\"struct.DebugMap.html\" title=\"struct std::fmt::DebugMap\">DebugMap</a>&lt;'a, 'b&gt;</h4></section></summary><div class=\"docblock\"><p>Adds the value part of a new entry to the map output.</p>\n<p>This method, together with <code>key</code>, is an alternative to <code>entry</code> that\ncan be used when the complete entry isn’t known upfront. Prefer the <code>entry</code>\nmethod when it’s possible to use.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p><code>key</code> must be called before <code>value</code> and each call to <code>key</code> must be followed\nby a corresponding call to <code>value</code>. Otherwise this method will panic.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fmt;\n\n<span class=\"kw\">struct </span>Foo(Vec&lt;(String, i32)&gt;);\n\n<span class=\"kw\">impl </span>fmt::Debug <span class=\"kw\">for </span>Foo {\n    <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, fmt: <span class=\"kw-2\">&amp;mut </span>fmt::Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; fmt::Result {\n        fmt.debug_map()\n           .key(<span class=\"kw-2\">&amp;</span><span class=\"string\">\"whole\"</span>).value(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.<span class=\"number\">0</span>) <span class=\"comment\">// We add the \"whole\" entry.\n           </span>.finish()\n    }\n}\n\n<span class=\"macro\">assert_eq!</span>(\n    <span class=\"macro\">format!</span>(<span class=\"string\">\"{:?}\"</span>, Foo(<span class=\"macro\">vec!</span>[(<span class=\"string\">\"A\"</span>.to_string(), <span class=\"number\">10</span>), (<span class=\"string\">\"B\"</span>.to_string(), <span class=\"number\">11</span>)])),\n    <span class=\"string\">\"{\\\"whole\\\": [(\\\"A\\\", 10), (\\\"B\\\", 11)]}\"</span>,\n);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fmt;%0A++++%0A++++struct+Foo(Vec%3C(String,+i32)%3E);%0A++++%0A++++impl+fmt::Debug+for+Foo+%7B%0A++++++++fn+fmt(%26self,+fmt:+%26mut+fmt::Formatter%3C'_%3E)+-%3E+fmt::Result+%7B%0A++++++++++++fmt.debug_map()%0A+++++++++++++++.key(%26%22whole%22).value(%26self.0)+//+We+add+the+%22whole%22+entry.%0A+++++++++++++++.finish()%0A++++++++%7D%0A++++%7D%0A++++%0A++++assert_eq!(%0A++++++++format!(%22%7B:?%7D%22,+Foo(vec!%5B(%22A%22.to_string(),+10),+(%22B%22.to_string(),+11)%5D)),%0A++++++++%22%7B%5C%22whole%5C%22:+%5B(%5C%22A%5C%22,+10),+(%5C%22B%5C%22,+11)%5D%7D%22,%0A++++);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.value_with\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/builders.rs.html#915-917\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.value_with\" class=\"fn\">value_with</a>&lt;F&gt;(&amp;mut self, value_fmt: F) -&gt; &amp;mut <a class=\"struct\" href=\"struct.DebugMap.html\" title=\"struct std::fmt::DebugMap\">DebugMap</a>&lt;'a, 'b&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnOnce.html\" title=\"trait std::ops::FnOnce\">FnOnce</a>(&amp;mut <a class=\"struct\" href=\"struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>debug_closure_helpers</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/117729\">#117729</a>)</span></div></span></summary><div class=\"docblock\"><p>Adds the value part of a new entry to the map output.</p>\n<p>This method is equivalent to <a href=\"struct.DebugMap.html#method.value\" title=\"method std::fmt::DebugMap::value\"><code>DebugMap::value</code></a>, but formats the\nvalue using a provided closure rather than by calling <a href=\"trait.Debug.html#tymethod.fmt\" title=\"method std::fmt::Debug::fmt\"><code>Debug::fmt</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.entries\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0\">1.2.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/builders.rs.html#964-968\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.entries\" class=\"fn\">entries</a>&lt;K, V, I&gt;(&amp;mut self, entries: I) -&gt; &amp;mut <a class=\"struct\" href=\"struct.DebugMap.html\" title=\"struct std::fmt::DebugMap\">DebugMap</a>&lt;'a, 'b&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a>,\n    V: <a class=\"trait\" href=\"trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a>,\n    I: <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"../primitive.tuple.html\">(K, V)</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Adds the contents of an iterator of entries to the map output.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fmt;\n\n<span class=\"kw\">struct </span>Foo(Vec&lt;(String, i32)&gt;);\n\n<span class=\"kw\">impl </span>fmt::Debug <span class=\"kw\">for </span>Foo {\n    <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, fmt: <span class=\"kw-2\">&amp;mut </span>fmt::Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; fmt::Result {\n        fmt.debug_map()\n           <span class=\"comment\">// We map our vec so each entries' first field will become\n           // the \"key\".\n           </span>.entries(<span class=\"self\">self</span>.<span class=\"number\">0</span>.iter().map(|<span class=\"kw-2\">&amp;</span>(<span class=\"kw-2\">ref </span>k, <span class=\"kw-2\">ref </span>v)| (k, v)))\n           .finish()\n    }\n}\n\n<span class=\"macro\">assert_eq!</span>(\n    <span class=\"macro\">format!</span>(<span class=\"string\">\"{:?}\"</span>, Foo(<span class=\"macro\">vec!</span>[(<span class=\"string\">\"A\"</span>.to_string(), <span class=\"number\">10</span>), (<span class=\"string\">\"B\"</span>.to_string(), <span class=\"number\">11</span>)])),\n    <span class=\"string\">\"{\\\"A\\\": 10, \\\"B\\\": 11}\"</span>,\n);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fmt;%0A++++%0A++++struct+Foo(Vec%3C(String,+i32)%3E);%0A++++%0A++++impl+fmt::Debug+for+Foo+%7B%0A++++++++fn+fmt(%26self,+fmt:+%26mut+fmt::Formatter%3C'_%3E)+-%3E+fmt::Result+%7B%0A++++++++++++fmt.debug_map()%0A+++++++++++++++//+We+map+our+vec+so+each+entries'+first+field+will+become%0A+++++++++++++++//+the+%22key%22.%0A+++++++++++++++.entries(self.0.iter().map(%7C%26(ref+k,+ref+v)%7C+(k,+v)))%0A+++++++++++++++.finish()%0A++++++++%7D%0A++++%7D%0A++++%0A++++assert_eq!(%0A++++++++format!(%22%7B:?%7D%22,+Foo(vec!%5B(%22A%22.to_string(),+10),+(%22B%22.to_string(),+11)%5D)),%0A++++++++%22%7B%5C%22A%5C%22:+10,+%5C%22B%5C%22:+11%7D%22,%0A++++);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.finish\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0\">1.2.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/builders.rs.html#1004\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.finish\" class=\"fn\">finish</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Finishes output and returns any error encountered.</p>\n<h5 id=\"panics-2\"><a class=\"doc-anchor\" href=\"#panics-2\">§</a>Panics</h5>\n<p><code>key</code> must be called before <code>value</code> and each call to <code>key</code> must be followed\nby a corresponding call to <code>value</code>. Otherwise this method will panic.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fmt;\n\n<span class=\"kw\">struct </span>Foo(Vec&lt;(String, i32)&gt;);\n\n<span class=\"kw\">impl </span>fmt::Debug <span class=\"kw\">for </span>Foo {\n    <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, fmt: <span class=\"kw-2\">&amp;mut </span>fmt::Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; fmt::Result {\n        fmt.debug_map()\n           .entries(<span class=\"self\">self</span>.<span class=\"number\">0</span>.iter().map(|<span class=\"kw-2\">&amp;</span>(<span class=\"kw-2\">ref </span>k, <span class=\"kw-2\">ref </span>v)| (k, v)))\n           .finish() <span class=\"comment\">// Ends the map formatting.\n    </span>}\n}\n\n<span class=\"macro\">assert_eq!</span>(\n    <span class=\"macro\">format!</span>(<span class=\"string\">\"{:?}\"</span>, Foo(<span class=\"macro\">vec!</span>[(<span class=\"string\">\"A\"</span>.to_string(), <span class=\"number\">10</span>), (<span class=\"string\">\"B\"</span>.to_string(), <span class=\"number\">11</span>)])),\n    <span class=\"string\">\"{\\\"A\\\": 10, \\\"B\\\": 11}\"</span>,\n);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fmt;%0A++++%0A++++struct+Foo(Vec%3C(String,+i32)%3E);%0A++++%0A++++impl+fmt::Debug+for+Foo+%7B%0A++++++++fn+fmt(%26self,+fmt:+%26mut+fmt::Formatter%3C'_%3E)+-%3E+fmt::Result+%7B%0A++++++++++++fmt.debug_map()%0A+++++++++++++++.entries(self.0.iter().map(%7C%26(ref+k,+ref+v)%7C+(k,+v)))%0A+++++++++++++++.finish()+//+Ends+the+map+formatting.%0A++++++++%7D%0A++++%7D%0A++++%0A++++assert_eq!(%0A++++++++format!(%22%7B:?%7D%22,+Foo(vec!%5B(%22A%22.to_string(),+10),+(%22B%22.to_string(),+11)%5D)),%0A++++++++%22%7B%5C%22A%5C%22:+10,+%5C%22B%5C%22:+11%7D%22,%0A++++);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details></div><h2 id=\"synthetic-implementations\" class=\"section-header\">Auto Trait Implementations<a href=\"#synthetic-implementations\" class=\"anchor\">§</a></h2><div id=\"synthetic-implementations-list\"><section id=\"impl-Freeze-for-DebugMap%3C'a,+'b%3E\" class=\"impl\"><a href=\"#impl-Freeze-for-DebugMap%3C'a,+'b%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; <a class=\"trait\" href=\"../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"struct\" href=\"struct.DebugMap.html\" title=\"struct std::fmt::DebugMap\">DebugMap</a>&lt;'a, 'b&gt;</h3></section><section id=\"impl-RefUnwindSafe-for-DebugMap%3C'a,+'b%3E\" class=\"impl\"><a href=\"#impl-RefUnwindSafe-for-DebugMap%3C'a,+'b%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; !<a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"struct\" href=\"struct.DebugMap.html\" title=\"struct std::fmt::DebugMap\">DebugMap</a>&lt;'a, 'b&gt;</h3></section><section id=\"impl-Send-for-DebugMap%3C'a,+'b%3E\" class=\"impl\"><a href=\"#impl-Send-for-DebugMap%3C'a,+'b%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; !<a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"struct\" href=\"struct.DebugMap.html\" title=\"struct std::fmt::DebugMap\">DebugMap</a>&lt;'a, 'b&gt;</h3></section><section id=\"impl-Sync-for-DebugMap%3C'a,+'b%3E\" class=\"impl\"><a href=\"#impl-Sync-for-DebugMap%3C'a,+'b%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; !<a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"struct.DebugMap.html\" title=\"struct std::fmt::DebugMap\">DebugMap</a>&lt;'a, 'b&gt;</h3></section><section id=\"impl-Unpin-for-DebugMap%3C'a,+'b%3E\" class=\"impl\"><a href=\"#impl-Unpin-for-DebugMap%3C'a,+'b%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"struct\" href=\"struct.DebugMap.html\" title=\"struct std::fmt::DebugMap\">DebugMap</a>&lt;'a, 'b&gt;</h3></section><section id=\"impl-UnwindSafe-for-DebugMap%3C'a,+'b%3E\" class=\"impl\"><a href=\"#impl-UnwindSafe-for-DebugMap%3C'a,+'b%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; !<a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"struct.DebugMap.html\" title=\"struct std::fmt::DebugMap\">DebugMap</a>&lt;'a, 'b&gt;</h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">§</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Any-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a><a href=\"#impl-Any-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#141\">source</a><a href=\"#method.type_id\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../any/trait.Any.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\">Gets the <code>TypeId</code> of <code>self</code>. <a href=\"../any/trait.Any.html#tymethod.type_id\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Borrow%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208\">source</a><a href=\"#impl-Borrow%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#210\">source</a><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216\">source</a><a href=\"#impl-BorrowMut%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#217\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765\">source</a><a href=\"#impl-From%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the argument unchanged.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Into%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750\">source</a><a href=\"#impl-Into%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758\">source</a><a href=\"#method.into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; U</h4></section></summary><div class=\"docblock\"><p>Calls <code>U::from(self)</code>.</p>\n<p>That is, this conversion is whatever the implementation of\n<code><a href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for U</code> chooses to do.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryFrom%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807\">source</a><a href=\"#impl-TryFrom%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812\">source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: U) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, &lt;T as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryInto%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792\">source</a><a href=\"#impl-TryInto%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryInto.html\" title=\"trait std::convert::TryInto\">TryInto</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryInto.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797\">source</a><a href=\"#method.try_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryInto.html#tymethod.try_into\" class=\"fn\">try_into</a>(self) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;U, &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details></div></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:23:09.559Z"
}