{
	"title": "join_paths in std::env - Rust",
	"url": "https://doc.rust-lang.org/stable/std/env/fn.join_paths.html",
	"markdown": "# join\\_paths in std::env - Rust\n\n## Function [std](../index.html)::[env](index.html)::[join\\_paths](#)\n\n1.0.0 · [source](about:blank/src/std/env.rs.html#598-604) ·\n\n```\npub fn join_paths<I, T>(paths: I) -> Result<OsString, JoinPathsError>where\n    I: IntoIterator<Item = T>,\n    T: AsRef<OsStr>,\n```\n\nExpand description\n\nJoins a collection of [`Path`](../path/struct.Path.html \"struct std::path::Path\")s appropriately for the `PATH` environment variable.\n\n## [§](#errors)Errors\n\nReturns an [`Err`](about:blank/result/enum.Result.html#variant.Err \"variant std::result::Result::Err\") (containing an error message) if one of the input [`Path`](../path/struct.Path.html \"struct std::path::Path\")s contains an invalid character for constructing the `PATH` variable (a double quote on Windows or a colon on Unix), or if the system does not have a `PATH`\\-like variable (e.g. UEFI or WASI).\n\n## [§](#examples)Examples\n\nJoining paths on a Unix-like platform:\n\n```\nuse std::env;\nuse std::ffi::OsString;\nuse std::path::Path;\n\nfn main() -> Result<(), env::JoinPathsError> {\n    let paths = [Path::new(\"/bin\"), Path::new(\"/usr/bin\")];\n    let path_os_string = env::join_paths(paths.iter())?;\n    assert_eq!(path_os_string, OsString::from(\"/bin:/usr/bin\"));\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::env;%0Ause+std::ffi::OsString;%0Ause+std::path::Path;%0A%0Afn+main()+-%3E+Result%3C(),+env::JoinPathsError%3E+%7B%0Aif+cfg!(unix)+%7B%0A++++let+paths+=+%5BPath::new(%22/bin%22),+Path::new(%22/usr/bin%22)%5D;%0A++++let+path_os_string+=+env::join_paths(paths.iter())?;%0A++++assert_eq!(path_os_string,+OsString::from(%22/bin:/usr/bin%22));%0A%7D%0A++++Ok(())%0A%7D&edition=2021)\n\nJoining a path containing a colon on a Unix-like platform results in an error:\n\n```\nuse std::env;\nuse std::path::Path;\n\nlet paths = [Path::new(\"/bin\"), Path::new(\"/usr/bi:n\")];\nassert!(env::join_paths(paths.iter()).is_err());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++if+cfg!(unix)+%7B%0A++++use+std::env;%0A++++use+std::path::Path;%0A++++%0A++++let+paths+=+%5BPath::new(%22/bin%22),+Path::new(%22/usr/bi:n%22)%5D;%0A++++assert!(env::join_paths(paths.iter()).is_err());%0A++++%7D%0A%7D&edition=2021)\n\nUsing `env::join_paths()` with [`env::split_paths()`](fn.split_paths.html \"fn std::env::split_paths\") to append an item to the `PATH` environment variable:\n\n```\nuse std::env;\nuse std::path::PathBuf;\n\nfn main() -> Result<(), env::JoinPathsError> {\n    if let Some(path) = env::var_os(\"PATH\") {\n        let mut paths = env::split_paths(&path).collect::<Vec<_>>();\n        paths.push(PathBuf::from(\"/home/xyz/bin\"));\n        let new_path = env::join_paths(paths)?;\n        env::set_var(\"PATH\", &new_path);\n    }\n\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::env;%0Ause+std::path::PathBuf;%0A%0Afn+main()+-%3E+Result%3C(),+env::JoinPathsError%3E+%7B%0A++++if+let+Some(path)+=+env::var_os(%22PATH%22)+%7B%0A++++++++let+mut+paths+=+env::split_paths(%26path).collect::%3CVec%3C_%3E%3E();%0A++++++++paths.push(PathBuf::from(%22/home/xyz/bin%22));%0A++++++++let+new_path+=+env::join_paths(paths)?;%0A++++++++env::set_var(%22PATH%22,+%26new_path);%0A++++%7D%0A%0A++++Ok(())%0A%7D&edition=2021)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Joins a collection of `Path`s appropriately for the `PATH` environment variable.\"><title>join_paths in std::env - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc fn\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><div class=\"sidebar-elems\"><h2><a href=\"index.html\">In std::env</a></h2><h3><a href=\"index.html#modules\">Modules</a></h3><ul class=\"block mod\"><li><a href=\"consts/index.html\">consts</a></li></ul><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.Args.html\">Args</a></li><li><a href=\"struct.ArgsOs.html\">ArgsOs</a></li><li><a href=\"struct.JoinPathsError.html\">JoinPathsError</a></li><li><a href=\"struct.SplitPaths.html\">SplitPaths</a></li><li><a href=\"struct.Vars.html\">Vars</a></li><li><a href=\"struct.VarsOs.html\">VarsOs</a></li></ul><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.VarError.html\">VarError</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.args.html\">args</a></li><li><a href=\"fn.args_os.html\">args_os</a></li><li><a href=\"fn.current_dir.html\">current_dir</a></li><li><a href=\"fn.current_exe.html\">current_exe</a></li><li><a href=\"fn.home_dir.html\">home_dir</a></li><li><a href=\"fn.join_paths.html\">join_paths</a></li><li><a href=\"fn.remove_var.html\">remove_var</a></li><li><a href=\"fn.set_current_dir.html\">set_current_dir</a></li><li><a href=\"fn.set_var.html\">set_var</a></li><li><a href=\"fn.split_paths.html\">split_paths</a></li><li><a href=\"fn.temp_dir.html\">temp_dir</a></li><li><a href=\"fn.var.html\">var</a></li><li><a href=\"fn.var_os.html\">var_os</a></li><li><a href=\"fn.vars.html\">vars</a></li><li><a href=\"fn.vars_os.html\">vars_os</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Function <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">env</a>::<wbr><a class=\"fn\" href=\"#\">join_paths</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/env.rs.html#598-604\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub fn join_paths&lt;I, T&gt;(paths: I) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"../ffi/struct.OsString.html\" title=\"struct std::ffi::OsString\">OsString</a>, <a class=\"struct\" href=\"struct.JoinPathsError.html\" title=\"struct std::env::JoinPathsError\">JoinPathsError</a>&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&lt;Item = T&gt;,\n    T: <a class=\"trait\" href=\"../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;,</div></code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Joins a collection of <a href=\"../path/struct.Path.html\" title=\"struct std::path::Path\"><code>Path</code></a>s appropriately for the <code>PATH</code>\nenvironment variable.</p>\n<h2 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h2>\n<p>Returns an <a href=\"../result/enum.Result.html#variant.Err\" title=\"variant std::result::Result::Err\"><code>Err</code></a> (containing an error message) if one of the input\n<a href=\"../path/struct.Path.html\" title=\"struct std::path::Path\"><code>Path</code></a>s contains an invalid character for constructing the <code>PATH</code>\nvariable (a double quote on Windows or a colon on Unix), or if the system\ndoes not have a <code>PATH</code>-like variable (e.g. UEFI or WASI).</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<p>Joining paths on a Unix-like platform:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::env;\n<span class=\"kw\">use </span>std::ffi::OsString;\n<span class=\"kw\">use </span>std::path::Path;\n\n<span class=\"kw\">fn </span>main() -&gt; <span class=\"prelude-ty\">Result</span>&lt;(), env::JoinPathsError&gt; {\n    <span class=\"kw\">let </span>paths = [Path::new(<span class=\"string\">\"/bin\"</span>), Path::new(<span class=\"string\">\"/usr/bin\"</span>)];\n    <span class=\"kw\">let </span>path_os_string = env::join_paths(paths.iter())<span class=\"question-mark\">?</span>;\n    <span class=\"macro\">assert_eq!</span>(path_os_string, OsString::from(<span class=\"string\">\"/bin:/usr/bin\"</span>));\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::env;%0Ause+std::ffi::OsString;%0Ause+std::path::Path;%0A%0Afn+main()+-%3E+Result%3C(),+env::JoinPathsError%3E+%7B%0Aif+cfg!(unix)+%7B%0A++++let+paths+=+%5BPath::new(%22/bin%22),+Path::new(%22/usr/bin%22)%5D;%0A++++let+path_os_string+=+env::join_paths(paths.iter())?;%0A++++assert_eq!(path_os_string,+OsString::from(%22/bin:/usr/bin%22));%0A%7D%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Joining a path containing a colon on a Unix-like platform results in an\nerror:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::env;\n<span class=\"kw\">use </span>std::path::Path;\n\n<span class=\"kw\">let </span>paths = [Path::new(<span class=\"string\">\"/bin\"</span>), Path::new(<span class=\"string\">\"/usr/bi:n\"</span>)];\n<span class=\"macro\">assert!</span>(env::join_paths(paths.iter()).is_err());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++if+cfg!(unix)+%7B%0A++++use+std::env;%0A++++use+std::path::Path;%0A++++%0A++++let+paths+=+%5BPath::new(%22/bin%22),+Path::new(%22/usr/bi:n%22)%5D;%0A++++assert!(env::join_paths(paths.iter()).is_err());%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Using <code>env::join_paths()</code> with <a href=\"fn.split_paths.html\" title=\"fn std::env::split_paths\"><code>env::split_paths()</code></a> to append an item to\nthe <code>PATH</code> environment variable:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::env;\n<span class=\"kw\">use </span>std::path::PathBuf;\n\n<span class=\"kw\">fn </span>main() -&gt; <span class=\"prelude-ty\">Result</span>&lt;(), env::JoinPathsError&gt; {\n    <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(path) = env::var_os(<span class=\"string\">\"PATH\"</span>) {\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>paths = env::split_paths(<span class=\"kw-2\">&amp;</span>path).collect::&lt;Vec&lt;<span class=\"kw\">_</span>&gt;&gt;();\n        paths.push(PathBuf::from(<span class=\"string\">\"/home/xyz/bin\"</span>));\n        <span class=\"kw\">let </span>new_path = env::join_paths(paths)<span class=\"question-mark\">?</span>;\n        env::set_var(<span class=\"string\">\"PATH\"</span>, <span class=\"kw-2\">&amp;</span>new_path);\n    }\n\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::env;%0Ause+std::path::PathBuf;%0A%0Afn+main()+-%3E+Result%3C(),+env::JoinPathsError%3E+%7B%0A++++if+let+Some(path)+=+env::var_os(%22PATH%22)+%7B%0A++++++++let+mut+paths+=+env::split_paths(%26path).collect::%3CVec%3C_%3E%3E();%0A++++++++paths.push(PathBuf::from(%22/home/xyz/bin%22));%0A++++++++let+new_path+=+env::join_paths(paths)?;%0A++++++++env::set_var(%22PATH%22,+%26new_path);%0A++++%7D%0A%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:22:55.472Z"
}