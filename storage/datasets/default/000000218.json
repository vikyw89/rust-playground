{
	"title": "FAQ - The Cargo Book",
	"url": "https://doc.rust-lang.org/cargo/faq.html",
	"markdown": "# FAQ - The Cargo Book\n\n## [Frequently Asked Questions](#frequently-asked-questions)\n\n## [Is the plan to use GitHub as a package repository?](#is-the-plan-to-use-github-as-a-package-repository)\n\nNo. The plan for Cargo is to use [crates.io](https://crates.io/), like npm or Rubygems do with [npmjs.com](https://www.npmjs.com/) and [rubygems.org](https://rubygems.org/).\n\nWe plan to support git repositories as a source of packages forever, because they can be used for early development and temporary patches, even when people use the registry as the primary source of packages.\n\n## [Why build crates.io rather than use GitHub as a registry?](#why-build-cratesio-rather-than-use-github-as-a-registry)\n\nWe think that it’s very important to support multiple ways to download packages, including downloading from GitHub and copying packages into your package itself.\n\nThat said, we think that [crates.io](https://crates.io/) offers a number of important benefits, and will likely become the primary way that people download packages in Cargo.\n\nFor precedent, both Node.js’s [npm](https://www.npmjs.com/) and Ruby’s [bundler](https://bundler.io/) support both a central registry model as well as a Git-based model, and most packages are downloaded through the registry in those ecosystems, with an important minority of packages making use of git-based packages.\n\nSome of the advantages that make a central registry popular in other languages include:\n\n-   **Discoverability**. A central registry provides an easy place to look for existing packages. Combined with tagging, this also makes it possible for a registry to provide ecosystem-wide information, such as a list of the most popular or most-depended-on packages.\n-   **Speed**. A central registry makes it possible to easily fetch just the metadata for packages quickly and efficiently, and then to efficiently download just the published package, and not other bloat that happens to exist in the repository. This adds up to a significant improvement in the speed of dependency resolution and fetching. As dependency graphs scale up, downloading all of the git repositories bogs down fast. Also remember that not everybody has a high-speed, low-latency Internet connection.\n\n## [Will Cargo work with C code (or other languages)?](#will-cargo-work-with-c-code-or-other-languages)\n\nYes!\n\nCargo handles compiling Rust code, but we know that many Rust packages link against C code. We also know that there are decades of tooling built up around compiling languages other than Rust.\n\nOur solution: Cargo allows a package to [specify a script](reference/build-scripts.html) (written in Rust) to run before invoking `rustc`. Rust is leveraged to implement platform-specific configuration and refactor out common build functionality among packages.\n\n## [Can Cargo be used inside of `make` (or `ninja`, or …)](#can-cargo-be-used-inside-of-make-or-ninja-or-)\n\nIndeed. While we intend Cargo to be useful as a standalone way to compile Rust packages at the top-level, we know that some people will want to invoke Cargo from other build tools.\n\nWe have designed Cargo to work well in those contexts, paying attention to things like error codes and machine-readable output modes. We still have some work to do on those fronts, but using Cargo in the context of conventional scripts is something we designed for from the beginning and will continue to prioritize.\n\n## [Does Cargo handle multi-platform packages or cross-compilation?](#does-cargo-handle-multi-platform-packages-or-cross-compilation)\n\nRust itself provides facilities for configuring sections of code based on the platform. Cargo also supports [platform-specific dependencies](about:blank/reference/specifying-dependencies.html#platform-specific-dependencies), and we plan to support more per-platform configuration in `Cargo.toml` in the future.\n\nIn the longer-term, we’re looking at ways to conveniently cross-compile packages using Cargo.\n\n## [Does Cargo support environments, like `production` or `test`?](#does-cargo-support-environments-like-production-or-test)\n\nWe support environments through the use of [profiles](reference/profiles.html) to support:\n\n-   environment-specific flags (like `-g --opt-level=0` for development and `--opt-level=3` for production).\n-   environment-specific dependencies (like `hamcrest` for test assertions).\n-   environment-specific `#[cfg]`\n-   a `cargo test` command\n\n## [Does Cargo work on Windows?](#does-cargo-work-on-windows)\n\nYes!\n\nAll commits to Cargo are required to pass the local test suite on Windows. If you encounter an issue while running on Windows, we consider it a bug, so [please file an issue](https://github.com/rust-lang/cargo/issues).\n\n## [Why have `Cargo.lock` in version control?](#why-have-cargolock-in-version-control)\n\nWhile [`cargo new`](commands/cargo-new.html) defaults to tracking `Cargo.lock` in version control, whether you do is dependent on the needs of your package.\n\nThe purpose of a `Cargo.lock` lockfile is to describe the state of the world at the time of a successful build. Cargo uses the lockfile to provide deterministic builds at different times and on different systems, by ensuring that the exact same dependencies and versions are used as when the `Cargo.lock` file was originally generated.\n\nDeterministic builds help with\n\n-   Running `git bisect` to find the root cause of a bug\n-   Ensuring CI only fails due to new commits and not external factors\n-   Reducing confusion when contributors see different behavior as compared to other contributors or CI\n\nHaving this snapshot of dependencies can also help when projects need to be verified against consistent versions of dependencies, like when\n\n-   Verifying a minimum-supported Rust version (MSRV) that is less than the latest version of a dependency supports\n-   Verifying human readable output which won’t have compatibility guarantees (e.g. snapshot testing error messages to ensure they are “understandable”, a metric too fuzzy to automate)\n\nHowever, this determinism can give a false sense of security because `Cargo.lock` does not affect the consumers of your package, only `Cargo.toml` does that. For example:\n\n-   [`cargo install`](commands/cargo-install.html) will select the latest dependencies unless `--locked` is passed in.\n-   New dependencies, like those added with [`cargo add`](commands/cargo-add.html), will be locked to the latest version\n\nThe lockfile can also be a source of merge conflicts.\n\nFor strategies to verify newer versions of dependencies via CI, see [Verifying Latest Dependencies](about:blank/guide/continuous-integration.html#verifying-latest-dependencies).\n\n## [Can libraries use `*` as a version for their dependencies?](#can-libraries-use--as-a-version-for-their-dependencies)\n\n**As of January 22nd, 2016, [crates.io](https://crates.io/) rejects all packages (not just libraries) with wildcard dependency constraints.**\n\nWhile libraries _can_, strictly speaking, they should not. A version requirement of `*` says “This will work with every version ever”, which is never going to be true. Libraries should always specify the range that they do work with, even if it’s something as general as “every 1.x.y version”.\n\n## [Why `Cargo.toml`?](#why-cargotoml)\n\nAs one of the most frequent interactions with Cargo, the question of why the configuration file is named `Cargo.toml` arises from time to time. The leading capital-`C` was chosen to ensure that the manifest was grouped with other similar configuration files in directory listings. Sorting files often puts capital letters before lowercase letters, ensuring files like `Makefile` and `Cargo.toml` are placed together. The trailing `.toml` was chosen to emphasize the fact that the file is in the [TOML configuration format](https://toml.io/).\n\nCargo does not allow other names such as `cargo.toml` or `Cargofile` to emphasize the ease of how a Cargo repository can be identified. An option of many possible names has historically led to confusion where one case was handled but others were accidentally forgotten.\n\n## [How can Cargo work offline?](#how-can-cargo-work-offline)\n\nCargo is often used in situations with limited or no network access such as airplanes, CI environments, or embedded in large production deployments. Users are often surprised when Cargo attempts to fetch resources from the network, and hence the request for Cargo to work offline comes up frequently.\n\nCargo, at its heart, will not attempt to access the network unless told to do so. That is, if no crates come from crates.io, a git repository, or some other network location, Cargo will never attempt to make a network connection. As a result, if Cargo attempts to touch the network, then it’s because it needs to fetch a required resource.\n\nCargo is also quite aggressive about caching information to minimize the amount of network activity. It will guarantee, for example, that if `cargo build` (or an equivalent) is run to completion then the next `cargo build` is guaranteed to not touch the network so long as `Cargo.toml` has not been modified in the meantime. This avoidance of the network boils down to a `Cargo.lock` existing and a populated cache of the crates reflected in the lock file. If either of these components are missing, then they’re required for the build to succeed and must be fetched remotely.\n\nAs of Rust 1.11.0, Cargo understands a new flag, `--frozen`, which is an assertion that it shouldn’t touch the network. When passed, Cargo will immediately return an error if it would otherwise attempt a network request. The error should include contextual information about why the network request is being made in the first place to help debug as well. Note that this flag _does not change the behavior of Cargo_, it simply asserts that Cargo shouldn’t touch the network as a previous command has been run to ensure that network activity shouldn’t be necessary.\n\nThe `--offline` flag was added in Rust 1.36.0. This flag tells Cargo to not access the network, and try to proceed with available cached data if possible. You can use [`cargo fetch`](commands/cargo-fetch.html) in one project to download dependencies before going offline, and then use those same dependencies in another project with the `--offline` flag (or [configuration value](about:blank/reference/config.html#netoffline)).\n\nFor more information about vendoring, see documentation on [source replacement](reference/source-replacement.html).\n\n## [Why is Cargo rebuilding my code?](#why-is-cargo-rebuilding-my-code)\n\nCargo is responsible for incrementally compiling crates in your project. This means that if you type `cargo build` twice the second one shouldn’t rebuild your crates.io dependencies, for example. Nevertheless bugs arise and Cargo can sometimes rebuild code when you’re not expecting it!\n\nWe’ve long [wanted to provide better diagnostics about this](https://github.com/rust-lang/cargo/issues/2904) but unfortunately haven’t been able to make progress on that issue in quite some time. In the meantime, however, you can debug a rebuild at least a little by setting the `CARGO_LOG` environment variable:\n\n```sh\n$ CARGO_LOG=cargo::core::compiler::fingerprint=info cargo build\n\n```\n\nThis will cause Cargo to print out a lot of information about diagnostics and rebuilding. This can often contain clues as to why your project is getting rebuilt, although you’ll often need to connect some dots yourself since this output isn’t super easy to read just yet. Note that the `CARGO_LOG` needs to be set for the command that rebuilds when you think it should not. Unfortunately Cargo has no way right now of after-the-fact debugging “why was that rebuilt?”\n\nSome issues we’ve seen historically which can cause crates to get rebuilt are:\n\n-   A build script prints `cargo::rerun-if-changed=foo` where `foo` is a file that doesn’t exist and nothing generates it. In this case Cargo will keep running the build script thinking it will generate the file but nothing ever does. The fix is to avoid printing `rerun-if-changed` in this scenario.\n    \n-   Two successive Cargo builds may differ in the set of features enabled for some dependencies. For example if the first build command builds the whole workspace and the second command builds only one crate, this may cause a dependency on crates.io to have a different set of features enabled, causing it and everything that depends on it to get rebuilt. There’s unfortunately not really a great fix for this, although if possible it’s best to have the set of features enabled on a crate constant regardless of what you’re building in your workspace.\n    \n-   Some filesystems exhibit unusual behavior around timestamps. Cargo primarily uses timestamps on files to govern whether rebuilding needs to happen, but if you’re using a nonstandard filesystem it may be affecting the timestamps somehow (e.g. truncating them, causing them to drift, etc). In this scenario, feel free to open an issue and we can see if we can accommodate the filesystem somehow.\n    \n-   A concurrent build process is either deleting artifacts or modifying files. Sometimes you might have a background process that either tries to build or check your project. These background processes might surprisingly delete some build artifacts or touch files (or maybe just by accident), which can cause rebuilds to look spurious! The best fix here would be to wrangle the background process to avoid clashing with your work.\n    \n\nIf after trying to debug your issue, however, you’re still running into problems then feel free to [open an issue](https://github.com/rust-lang/cargo/issues/new)!\n\n## [What does “version conflict” mean and how to resolve it?](#what-does-version-conflict-mean-and-how-to-resolve-it)\n\n> failed to select a version for `x` which could resolve this conflict\n\nHave you seen the error message above?\n\nThis is one of the most annoying error message for Cargo users. There are several situations may lead us to a version conflict. Below we’ll walk through possible causes and provide diagnostic techniques to help you out there:\n\n-   The project and its dependencies use [links](https://doc.rust-lang.org/cargo/reference/resolver.html#links) to repeatedly link the local library. Cargo forbids linking two packages with the same native library, so even with multiple layers of dependencies it is not allowed. In this case, the error message will prompt: `Only one package in the dependency graph may specify the same links value`, you may need to manually check and delete duplicate link values. The community also have [conventions in place](https://doc.rust-lang.org/cargo/reference/build-scripts.html#-sys-packages) to alleviate this.\n    \n-   When depending on different crates in the project, if these crates use the same dependent library, but the version used is restricted, making it impossible to determine the correct version, it will also cause conflicts. The error message will prompt: `all possible versions conflict with previously selected packages`. You may need to modify the version requirements to make them consistent.\n    \n-   If there are multiple versions of dependencies in the project, when using [`direct-minimal-versions`](https://doc.rust-lang.org/nightly/cargo/reference/unstable.html#direct-minimal-versions), the minimum version requirements cannot be met, which will cause conflicts. You may need to modify version requirements of your direct dependencies to meet the minimum SemVer version accordingly.\n    \n-   If the dependent crate does not have the features you choose, it will also cause conflicts. At this time, you need to check the dependent version and its features.\n    \n-   Conflicts may occur when merging branches or PRs, if there are non-trivial conflicts, you can reset all “yours” changes, fix all other conflicts in the branch, and then run some cargo command (like `cargo tree` or `cargo check`), which should re-update the lockfile with your own local changes. If you previously ran some `cargo update` commands in your branch, you can re-run them that this time. The community has been looking to resolve merge conflicts with `Cargo.lock` and `Cargo.toml` using a [custom merge tool](https://github.com/rust-lang/cargo/issues/1818).",
	"html": "<!DOCTYPE html><html lang=\"en\" class=\"light\" dir=\"ltr\"><head>\n        <!-- Book generated using mdBook -->\n        <meta charset=\"UTF-8\">\n        <title>FAQ - The Cargo Book</title>\n\n\n        <!-- Custom HTML head -->\n        <style>\n            dd {\n                margin-bottom: 1em;\n            }\n        </style>\n\n        <meta name=\"description\" content=\"\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <meta name=\"theme-color\" content=\"rgb(255, 255, 255)\">\n\n        <link rel=\"shortcut icon\" href=\"favicon.png\">\n        <link rel=\"stylesheet\" href=\"css/variables.css\">\n        <link rel=\"stylesheet\" href=\"css/general.css\">\n        <link rel=\"stylesheet\" href=\"css/chrome.css\">\n        <link rel=\"stylesheet\" href=\"css/print.css\" media=\"print\">\n\n        <!-- Fonts -->\n        <link rel=\"stylesheet\" href=\"FontAwesome/css/font-awesome.css\">\n        <link rel=\"stylesheet\" href=\"fonts/fonts.css\">\n\n        <!-- Highlight.js Stylesheets -->\n        <link rel=\"stylesheet\" href=\"highlight.css\">\n        <link rel=\"stylesheet\" href=\"tomorrow-night.css\" disabled=\"\">\n        <link rel=\"stylesheet\" href=\"ayu-highlight.css\" disabled=\"\">\n\n        <!-- Custom theme stylesheets -->\n\n    </head>\n    <body class=\"js sidebar-visible\">\n    <div id=\"body-container\">\n        <!-- Provide site root to javascript -->\n        <script>\n            var path_to_root = \"\";\n            var default_theme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"navy\" : \"light\";\n        </script>\n\n        <!-- Work around some values being stored in localStorage wrapped in quotes -->\n        <script>\n            try {\n                var theme = localStorage.getItem('mdbook-theme');\n                var sidebar = localStorage.getItem('mdbook-sidebar');\n\n                if (theme.startsWith('\"') && theme.endsWith('\"')) {\n                    localStorage.setItem('mdbook-theme', theme.slice(1, theme.length - 1));\n                }\n\n                if (sidebar.startsWith('\"') && sidebar.endsWith('\"')) {\n                    localStorage.setItem('mdbook-sidebar', sidebar.slice(1, sidebar.length - 1));\n                }\n            } catch (e) { }\n        </script>\n\n        <!-- Set the theme before any content is loaded, prevents flash -->\n        <script>\n            var theme;\n            try { theme = localStorage.getItem('mdbook-theme'); } catch(e) { }\n            if (theme === null || theme === undefined) { theme = default_theme; }\n            var html = document.querySelector('html');\n            html.classList.remove('light')\n            html.classList.add(theme);\n            var body = document.querySelector('body');\n            body.classList.remove('no-js')\n            body.classList.add('js');\n        </script>\n\n        <input type=\"checkbox\" id=\"sidebar-toggle-anchor\" class=\"hidden\">\n\n        <!-- Hide / unhide sidebar before it is displayed -->\n        <script>\n            var body = document.querySelector('body');\n            var sidebar = null;\n            var sidebar_toggle = document.getElementById(\"sidebar-toggle-anchor\");\n            if (document.body.clientWidth >= 1080) {\n                try { sidebar = localStorage.getItem('mdbook-sidebar'); } catch(e) { }\n                sidebar = sidebar || 'visible';\n            } else {\n                sidebar = 'hidden';\n            }\n            sidebar_toggle.checked = sidebar === 'visible';\n            body.classList.remove('sidebar-visible');\n            body.classList.add(\"sidebar-\" + sidebar);\n        </script>\n\n        <nav id=\"sidebar\" class=\"sidebar\" aria-label=\"Table of contents\" aria-hidden=\"false\">\n            <div class=\"sidebar-scrollbox\">\n                <ol class=\"chapter\"><li class=\"chapter-item expanded affix \"><a href=\"index.html\" tabindex=\"0\">Introduction</a></li><li class=\"chapter-item expanded \"><a href=\"getting-started/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.</strong> Getting Started</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"getting-started/installation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.1.</strong> Installation</a></li><li class=\"chapter-item expanded \"><a href=\"getting-started/first-steps.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.2.</strong> First Steps with Cargo</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"guide/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.</strong> Cargo Guide</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"guide/why-cargo-exists.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.1.</strong> Why Cargo Exists</a></li><li class=\"chapter-item expanded \"><a href=\"guide/creating-a-new-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.2.</strong> Creating a New Package</a></li><li class=\"chapter-item expanded \"><a href=\"guide/working-on-an-existing-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.3.</strong> Working on an Existing Package</a></li><li class=\"chapter-item expanded \"><a href=\"guide/dependencies.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.4.</strong> Dependencies</a></li><li class=\"chapter-item expanded \"><a href=\"guide/project-layout.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.5.</strong> Package Layout</a></li><li class=\"chapter-item expanded \"><a href=\"guide/cargo-toml-vs-cargo-lock.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.6.</strong> Cargo.toml vs Cargo.lock</a></li><li class=\"chapter-item expanded \"><a href=\"guide/tests.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.7.</strong> Tests</a></li><li class=\"chapter-item expanded \"><a href=\"guide/continuous-integration.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.8.</strong> Continuous Integration</a></li><li class=\"chapter-item expanded \"><a href=\"guide/cargo-home.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.9.</strong> Cargo Home</a></li><li class=\"chapter-item expanded \"><a href=\"guide/build-cache.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.10.</strong> Build Cache</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"reference/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.</strong> Cargo Reference</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"reference/specifying-dependencies.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.1.</strong> Specifying Dependencies</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"reference/overriding-dependencies.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.1.1.</strong> Overriding Dependencies</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"reference/manifest.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.2.</strong> The Manifest Format</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"reference/cargo-targets.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.2.1.</strong> Cargo Targets</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"reference/workspaces.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.3.</strong> Workspaces</a></li><li class=\"chapter-item expanded \"><a href=\"reference/features.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.4.</strong> Features</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"reference/features-examples.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.4.1.</strong> Features Examples</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"reference/profiles.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.5.</strong> Profiles</a></li><li class=\"chapter-item expanded \"><a href=\"reference/config.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.6.</strong> Configuration</a></li><li class=\"chapter-item expanded \"><a href=\"reference/environment-variables.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.7.</strong> Environment Variables</a></li><li class=\"chapter-item expanded \"><a href=\"reference/build-scripts.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.8.</strong> Build Scripts</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"reference/build-script-examples.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.8.1.</strong> Build Script Examples</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"reference/publishing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.9.</strong> Publishing on crates.io</a></li><li class=\"chapter-item expanded \"><a href=\"reference/pkgid-spec.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.10.</strong> Package ID Specifications</a></li><li class=\"chapter-item expanded \"><a href=\"reference/source-replacement.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.11.</strong> Source Replacement</a></li><li class=\"chapter-item expanded \"><a href=\"reference/external-tools.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.12.</strong> External Tools</a></li><li class=\"chapter-item expanded \"><a href=\"reference/registries.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.</strong> Registries</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"reference/registry-authentication.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.1.</strong> Registry Authentication</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"reference/credential-provider-protocol.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.1.1.</strong> Credential Provider Protocol</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"reference/running-a-registry.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.2.</strong> Running a Registry</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"reference/registry-index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.2.1.</strong> Registry Index</a></li><li class=\"chapter-item expanded \"><a href=\"reference/registry-web-api.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.2.2.</strong> Registry Web API</a></li></ol></li></ol></li><li class=\"chapter-item expanded \"><a href=\"reference/resolver.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.14.</strong> Dependency Resolution</a></li><li class=\"chapter-item expanded \"><a href=\"reference/semver.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.15.</strong> SemVer Compatibility</a></li><li class=\"chapter-item expanded \"><a href=\"reference/future-incompat-report.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.16.</strong> Future incompat report</a></li><li class=\"chapter-item expanded \"><a href=\"reference/timings.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.17.</strong> Reporting build timings</a></li><li class=\"chapter-item expanded \"><a href=\"reference/unstable.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.18.</strong> Unstable Features</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"commands/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.</strong> Cargo Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"commands/general-commands.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.</strong> General Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"commands/cargo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.1.</strong> cargo</a></li><li class=\"chapter-item expanded \"><a href=\"commands/cargo-help.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.2.</strong> cargo help</a></li><li class=\"chapter-item expanded \"><a href=\"commands/cargo-version.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.3.</strong> cargo version</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"commands/build-commands.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.</strong> Build Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"commands/cargo-bench.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.1.</strong> cargo bench</a></li><li class=\"chapter-item expanded \"><a href=\"commands/cargo-build.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.2.</strong> cargo build</a></li><li class=\"chapter-item expanded \"><a href=\"commands/cargo-check.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.3.</strong> cargo check</a></li><li class=\"chapter-item expanded \"><a href=\"commands/cargo-clean.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.4.</strong> cargo clean</a></li><li class=\"chapter-item expanded \"><a href=\"commands/cargo-doc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.5.</strong> cargo doc</a></li><li class=\"chapter-item expanded \"><a href=\"commands/cargo-fetch.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.6.</strong> cargo fetch</a></li><li class=\"chapter-item expanded \"><a href=\"commands/cargo-fix.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.7.</strong> cargo fix</a></li><li class=\"chapter-item expanded \"><a href=\"commands/cargo-run.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.8.</strong> cargo run</a></li><li class=\"chapter-item expanded \"><a href=\"commands/cargo-rustc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.9.</strong> cargo rustc</a></li><li class=\"chapter-item expanded \"><a href=\"commands/cargo-rustdoc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.10.</strong> cargo rustdoc</a></li><li class=\"chapter-item expanded \"><a href=\"commands/cargo-test.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.11.</strong> cargo test</a></li><li class=\"chapter-item expanded \"><a href=\"commands/cargo-report.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.12.</strong> cargo report</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"commands/manifest-commands.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.</strong> Manifest Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"commands/cargo-add.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.1.</strong> cargo add</a></li><li class=\"chapter-item expanded \"><a href=\"commands/cargo-generate-lockfile.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.2.</strong> cargo generate-lockfile</a></li><li class=\"chapter-item expanded \"><a href=\"commands/cargo-locate-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.3.</strong> cargo locate-project</a></li><li class=\"chapter-item expanded \"><a href=\"commands/cargo-metadata.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.4.</strong> cargo metadata</a></li><li class=\"chapter-item expanded \"><a href=\"commands/cargo-pkgid.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.5.</strong> cargo pkgid</a></li><li class=\"chapter-item expanded \"><a href=\"commands/cargo-remove.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.6.</strong> cargo remove</a></li><li class=\"chapter-item expanded \"><a href=\"commands/cargo-tree.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.7.</strong> cargo tree</a></li><li class=\"chapter-item expanded \"><a href=\"commands/cargo-update.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.8.</strong> cargo update</a></li><li class=\"chapter-item expanded \"><a href=\"commands/cargo-vendor.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.9.</strong> cargo vendor</a></li><li class=\"chapter-item expanded \"><a href=\"commands/cargo-verify-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.10.</strong> cargo verify-project</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"commands/package-commands.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.</strong> Package Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"commands/cargo-init.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.1.</strong> cargo init</a></li><li class=\"chapter-item expanded \"><a href=\"commands/cargo-install.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.2.</strong> cargo install</a></li><li class=\"chapter-item expanded \"><a href=\"commands/cargo-new.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.3.</strong> cargo new</a></li><li class=\"chapter-item expanded \"><a href=\"commands/cargo-search.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.4.</strong> cargo search</a></li><li class=\"chapter-item expanded \"><a href=\"commands/cargo-uninstall.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.5.</strong> cargo uninstall</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"commands/publishing-commands.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.</strong> Publishing Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"commands/cargo-login.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.1.</strong> cargo login</a></li><li class=\"chapter-item expanded \"><a href=\"commands/cargo-logout.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.2.</strong> cargo logout</a></li><li class=\"chapter-item expanded \"><a href=\"commands/cargo-owner.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.3.</strong> cargo owner</a></li><li class=\"chapter-item expanded \"><a href=\"commands/cargo-package.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.4.</strong> cargo package</a></li><li class=\"chapter-item expanded \"><a href=\"commands/cargo-publish.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.5.</strong> cargo publish</a></li><li class=\"chapter-item expanded \"><a href=\"commands/cargo-yank.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.6.</strong> cargo yank</a></li></ol></li></ol></li><li class=\"chapter-item expanded \"><a href=\"faq.html\" class=\"active\" tabindex=\"0\"><strong aria-hidden=\"true\">5.</strong> FAQ</a></li><li class=\"chapter-item expanded \"><a href=\"appendix/glossary.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.</strong> Appendix: Glossary</a></li><li class=\"chapter-item expanded \"><a href=\"appendix/git-authentication.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.</strong> Appendix: Git Authentication</a></li></ol>\n            </div>\n            <div id=\"sidebar-resize-handle\" class=\"sidebar-resize-handle\">\n                <div class=\"sidebar-resize-indicator\"></div>\n            </div>\n        </nav>\n\n        <!-- Track and set sidebar scroll position -->\n        <script>\n            var sidebarScrollbox = document.querySelector('#sidebar .sidebar-scrollbox');\n            sidebarScrollbox.addEventListener('click', function(e) {\n                if (e.target.tagName === 'A') {\n                    sessionStorage.setItem('sidebar-scroll', sidebarScrollbox.scrollTop);\n                }\n            }, { passive: true });\n            var sidebarScrollTop = sessionStorage.getItem('sidebar-scroll');\n            sessionStorage.removeItem('sidebar-scroll');\n            if (sidebarScrollTop) {\n                // preserve sidebar scroll position when navigating via links within sidebar\n                sidebarScrollbox.scrollTop = sidebarScrollTop;\n            } else {\n                // scroll sidebar to current active section when navigating via \"next/previous chapter\" buttons\n                var activeSection = document.querySelector('#sidebar .active');\n                if (activeSection) {\n                    activeSection.scrollIntoView({ block: 'center' });\n                }\n            }\n        </script>\n\n        <div id=\"page-wrapper\" class=\"page-wrapper\">\n\n            <div class=\"page\">\n                                <div id=\"menu-bar-hover-placeholder\"></div>\n                <div id=\"menu-bar\" class=\"menu-bar\" style=\"top: 0px;\">\n                    <div class=\"left-buttons\">\n                        <label id=\"sidebar-toggle\" class=\"icon-button\" for=\"sidebar-toggle-anchor\" title=\"Toggle Table of Contents\" aria-label=\"Toggle Table of Contents\" aria-controls=\"sidebar\" aria-expanded=\"true\">\n                            <i class=\"fa fa-bars\"></i>\n                        </label>\n                        <button id=\"theme-toggle\" class=\"icon-button\" type=\"button\" title=\"Change theme\" aria-label=\"Change theme\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-controls=\"theme-list\">\n                            <i class=\"fa fa-paint-brush\"></i>\n                        </button>\n                        <ul id=\"theme-list\" class=\"theme-popup\" aria-label=\"Themes\" role=\"menu\">\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme theme-selected\" id=\"light\">Light</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"rust\">Rust</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"coal\">Coal</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"navy\">Navy</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"ayu\">Ayu</button></li>\n                        </ul>\n                        <button id=\"search-toggle\" class=\"icon-button\" type=\"button\" title=\"Search. (Shortkey: s)\" aria-label=\"Toggle Searchbar\" aria-expanded=\"false\" aria-keyshortcuts=\"S\" aria-controls=\"searchbar\">\n                            <i class=\"fa fa-search\"></i>\n                        </button>\n                    </div>\n\n                    <h1 class=\"menu-title\">The Cargo Book</h1>\n\n                    <div class=\"right-buttons\">\n                        <a href=\"print.html\" title=\"Print this book\" aria-label=\"Print this book\">\n                            <i id=\"print-button\" class=\"fa fa-print\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/cargo/tree/master/src/doc/src\" title=\"Git repository\" aria-label=\"Git repository\">\n                            <i id=\"git-repository-button\" class=\"fa fa-github\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/cargo/edit/master/src/doc/src/faq.md\" title=\"Suggest an edit\" aria-label=\"Suggest an edit\">\n                            <i id=\"git-edit-button\" class=\"fa fa-edit\"></i>\n                        </a>\n\n                    </div>\n                </div>\n\n                <div id=\"search-wrapper\" class=\"hidden\">\n                    <form id=\"searchbar-outer\" class=\"searchbar-outer\">\n                        <input type=\"search\" id=\"searchbar\" name=\"searchbar\" placeholder=\"Search this book ...\" aria-controls=\"searchresults-outer\" aria-describedby=\"searchresults-header\">\n                    </form>\n                    <div id=\"searchresults-outer\" class=\"searchresults-outer hidden\">\n                        <div id=\"searchresults-header\" class=\"searchresults-header\"></div>\n                        <ul id=\"searchresults\">\n                        </ul>\n                    </div>\n                </div>\n\n                <!-- Apply ARIA attributes after the sidebar and the sidebar toggle button are added to the DOM -->\n                <script>\n                    document.getElementById('sidebar-toggle').setAttribute('aria-expanded', sidebar === 'visible');\n                    document.getElementById('sidebar').setAttribute('aria-hidden', sidebar !== 'visible');\n                    Array.from(document.querySelectorAll('#sidebar a')).forEach(function(link) {\n                        link.setAttribute('tabIndex', sidebar === 'visible' ? 0 : -1);\n                    });\n                </script>\n\n                <div id=\"content\" class=\"content\">\n                    <main>\n                        <h1 id=\"frequently-asked-questions\"><a class=\"header\" href=\"#frequently-asked-questions\">Frequently Asked Questions</a></h1>\n<h2 id=\"is-the-plan-to-use-github-as-a-package-repository\"><a class=\"header\" href=\"#is-the-plan-to-use-github-as-a-package-repository\">Is the plan to use GitHub as a package repository?</a></h2>\n<p>No. The plan for Cargo is to use <a href=\"https://crates.io/\">crates.io</a>, like npm or Rubygems do with\n<a href=\"https://www.npmjs.com\">npmjs.com</a> and <a href=\"https://rubygems.org\">rubygems.org</a>.</p>\n<p>We plan to support git repositories as a source of packages forever,\nbecause they can be used for early development and temporary patches,\neven when people use the registry as the primary source of packages.</p>\n<h2 id=\"why-build-cratesio-rather-than-use-github-as-a-registry\"><a class=\"header\" href=\"#why-build-cratesio-rather-than-use-github-as-a-registry\">Why build crates.io rather than use GitHub as a registry?</a></h2>\n<p>We think that it’s very important to support multiple ways to download\npackages, including downloading from GitHub and copying packages into\nyour package itself.</p>\n<p>That said, we think that <a href=\"https://crates.io/\">crates.io</a> offers a number of important benefits, and\nwill likely become the primary way that people download packages in Cargo.</p>\n<p>For precedent, both Node.js’s <a href=\"https://www.npmjs.com\">npm</a> and Ruby’s <a href=\"https://bundler.io\">bundler</a> support both a\ncentral registry model as well as a Git-based model, and most packages\nare downloaded through the registry in those ecosystems, with an\nimportant minority of packages making use of git-based packages.</p>\n<p>Some of the advantages that make a central registry popular in other\nlanguages include:</p>\n<ul>\n<li><strong>Discoverability</strong>. A central registry provides an easy place to look\nfor existing packages. Combined with tagging, this also makes it\npossible for a registry to provide ecosystem-wide information, such as a\nlist of the most popular or most-depended-on packages.</li>\n<li><strong>Speed</strong>. A central registry makes it possible to easily fetch just\nthe metadata for packages quickly and efficiently, and then to\nefficiently download just the published package, and not other bloat\nthat happens to exist in the repository. This adds up to a significant\nimprovement in the speed of dependency resolution and fetching. As\ndependency graphs scale up, downloading all of the git repositories bogs\ndown fast. Also remember that not everybody has a high-speed,\nlow-latency Internet connection.</li>\n</ul>\n<h2 id=\"will-cargo-work-with-c-code-or-other-languages\"><a class=\"header\" href=\"#will-cargo-work-with-c-code-or-other-languages\">Will Cargo work with C code (or other languages)?</a></h2>\n<p>Yes!</p>\n<p>Cargo handles compiling Rust code, but we know that many Rust packages\nlink against C code. We also know that there are decades of tooling\nbuilt up around compiling languages other than Rust.</p>\n<p>Our solution: Cargo allows a package to <a href=\"reference/build-scripts.html\">specify a script</a>\n(written in Rust) to run before invoking <code class=\"hljs\">rustc</code>. Rust is leveraged to\nimplement platform-specific configuration and refactor out common build\nfunctionality among packages.</p>\n<h2 id=\"can-cargo-be-used-inside-of-make-or-ninja-or-\"><a class=\"header\" href=\"#can-cargo-be-used-inside-of-make-or-ninja-or-\">Can Cargo be used inside of <code>make</code> (or <code>ninja</code>, or …)</a></h2>\n<p>Indeed. While we intend Cargo to be useful as a standalone way to\ncompile Rust packages at the top-level, we know that some people will\nwant to invoke Cargo from other build tools.</p>\n<p>We have designed Cargo to work well in those contexts, paying attention\nto things like error codes and machine-readable output modes. We still\nhave some work to do on those fronts, but using Cargo in the context of\nconventional scripts is something we designed for from the beginning and\nwill continue to prioritize.</p>\n<h2 id=\"does-cargo-handle-multi-platform-packages-or-cross-compilation\"><a class=\"header\" href=\"#does-cargo-handle-multi-platform-packages-or-cross-compilation\">Does Cargo handle multi-platform packages or cross-compilation?</a></h2>\n<p>Rust itself provides facilities for configuring sections of code based\non the platform. Cargo also supports <a href=\"reference/specifying-dependencies.html#platform-specific-dependencies\">platform-specific\ndependencies</a>, and we plan to support more per-platform\nconfiguration in <code class=\"hljs\">Cargo.toml</code> in the future.</p>\n<p>In the longer-term, we’re looking at ways to conveniently cross-compile\npackages using Cargo.</p>\n<h2 id=\"does-cargo-support-environments-like-production-or-test\"><a class=\"header\" href=\"#does-cargo-support-environments-like-production-or-test\">Does Cargo support environments, like <code>production</code> or <code>test</code>?</a></h2>\n<p>We support environments through the use of <a href=\"reference/profiles.html\">profiles</a> to support:</p>\n<ul>\n<li>environment-specific flags (like <code class=\"hljs\">-g --opt-level=0</code> for development\nand <code class=\"hljs\">--opt-level=3</code> for production).</li>\n<li>environment-specific dependencies (like <code class=\"hljs\">hamcrest</code> for test assertions).</li>\n<li>environment-specific <code class=\"hljs\">#[cfg]</code></li>\n<li>a <code class=\"hljs\">cargo test</code> command</li>\n</ul>\n<h2 id=\"does-cargo-work-on-windows\"><a class=\"header\" href=\"#does-cargo-work-on-windows\">Does Cargo work on Windows?</a></h2>\n<p>Yes!</p>\n<p>All commits to Cargo are required to pass the local test suite on Windows.\nIf you encounter an issue while running on Windows, we consider it a bug, so <a href=\"https://github.com/rust-lang/cargo/issues\">please file an\nissue</a>.</p>\n<h2 id=\"why-have-cargolock-in-version-control\"><a class=\"header\" href=\"#why-have-cargolock-in-version-control\">Why have <code>Cargo.lock</code> in version control?</a></h2>\n<p>While <a href=\"commands/cargo-new.html\"><code class=\"hljs\">cargo new</code></a> defaults to tracking <code class=\"hljs\">Cargo.lock</code> in version control,\nwhether you do is dependent on the needs of your package.</p>\n<p>The purpose of a <code class=\"hljs\">Cargo.lock</code> lockfile is to describe the state of the world at\nthe time of a successful build.\nCargo uses the lockfile to provide deterministic builds at different times and\non different systems,\nby ensuring that the exact same dependencies and versions are used as when the\n<code class=\"hljs\">Cargo.lock</code> file was originally generated.</p>\n<p>Deterministic builds help with</p>\n<ul>\n<li>Running <code class=\"hljs\">git bisect</code> to find the root cause of a bug</li>\n<li>Ensuring CI only fails due to new commits and not external factors</li>\n<li>Reducing confusion when contributors see different behavior as compared to\nother contributors or CI</li>\n</ul>\n<p>Having this snapshot of dependencies can also help when projects need to be\nverified against consistent versions of dependencies, like when</p>\n<ul>\n<li>Verifying a minimum-supported Rust version (MSRV) that is less than the latest\nversion of a dependency supports</li>\n<li>Verifying human readable output which won’t have compatibility guarantees\n(e.g. snapshot testing error messages to ensure they are “understandable”, a\nmetric too fuzzy to automate)</li>\n</ul>\n<p>However, this determinism can give a false sense of security because\n<code class=\"hljs\">Cargo.lock</code> does not affect the consumers of your package, only <code class=\"hljs\">Cargo.toml</code> does that.\nFor example:</p>\n<ul>\n<li><a href=\"commands/cargo-install.html\"><code class=\"hljs\">cargo install</code></a> will select the latest dependencies unless <code class=\"hljs\">--locked</code> is\npassed in.</li>\n<li>New dependencies, like those added with <a href=\"commands/cargo-add.html\"><code class=\"hljs\">cargo add</code></a>, will be locked to the latest version</li>\n</ul>\n<p>The lockfile can also be a source of merge conflicts.</p>\n<p>For strategies to verify newer versions of dependencies via CI,\nsee <a href=\"guide/continuous-integration.html#verifying-latest-dependencies\">Verifying Latest Dependencies</a>.</p>\n<h2 id=\"can-libraries-use--as-a-version-for-their-dependencies\"><a class=\"header\" href=\"#can-libraries-use--as-a-version-for-their-dependencies\">Can libraries use <code>*</code> as a version for their dependencies?</a></h2>\n<p><strong>As of January 22nd, 2016, <a href=\"https://crates.io/\">crates.io</a> rejects all packages (not just libraries)\nwith wildcard dependency constraints.</strong></p>\n<p>While libraries <em>can</em>, strictly speaking, they should not. A version requirement\nof <code class=\"hljs\">*</code> says “This will work with every version ever”, which is never going\nto be true. Libraries should always specify the range that they do work with,\neven if it’s something as general as “every 1.x.y version”.</p>\n<h2 id=\"why-cargotoml\"><a class=\"header\" href=\"#why-cargotoml\">Why <code>Cargo.toml</code>?</a></h2>\n<p>As one of the most frequent interactions with Cargo, the question of why the\nconfiguration file is named <code class=\"hljs\">Cargo.toml</code> arises from time to time. The leading\ncapital-<code class=\"hljs\">C</code> was chosen to ensure that the manifest was grouped with other\nsimilar configuration files in directory listings. Sorting files often puts\ncapital letters before lowercase letters, ensuring files like <code class=\"hljs\">Makefile</code> and\n<code class=\"hljs\">Cargo.toml</code> are placed together. The trailing <code class=\"hljs\">.toml</code> was chosen to emphasize\nthe fact that the file is in the <a href=\"https://toml.io/\">TOML configuration\nformat</a>.</p>\n<p>Cargo does not allow other names such as <code class=\"hljs\">cargo.toml</code> or <code class=\"hljs\">Cargofile</code> to\nemphasize the ease of how a Cargo repository can be identified. An option of\nmany possible names has historically led to confusion where one case was handled\nbut others were accidentally forgotten.</p>\n<h2 id=\"how-can-cargo-work-offline\"><a class=\"header\" href=\"#how-can-cargo-work-offline\">How can Cargo work offline?</a></h2>\n<p>Cargo is often used in situations with limited or no network access such as\nairplanes, CI environments, or embedded in large production deployments. Users\nare often surprised when Cargo attempts to fetch resources from the network, and\nhence the request for Cargo to work offline comes up frequently.</p>\n<p>Cargo, at its heart, will not attempt to access the network unless told to do\nso. That is, if no crates come from crates.io, a git repository, or some other\nnetwork location, Cargo will never attempt to make a network connection. As a\nresult, if Cargo attempts to touch the network, then it’s because it needs to\nfetch a required resource.</p>\n<p>Cargo is also quite aggressive about caching information to minimize the amount\nof network activity. It will guarantee, for example, that if <code class=\"hljs\">cargo build</code> (or\nan equivalent) is run to completion then the next <code class=\"hljs\">cargo build</code> is guaranteed to\nnot touch the network so long as <code class=\"hljs\">Cargo.toml</code> has not been modified in the\nmeantime. This avoidance of the network boils down to a <code class=\"hljs\">Cargo.lock</code> existing\nand a populated cache of the crates reflected in the lock file. If either of\nthese components are missing, then they’re required for the build to succeed and\nmust be fetched remotely.</p>\n<p>As of Rust 1.11.0, Cargo understands a new flag, <code class=\"hljs\">--frozen</code>, which is an\nassertion that it shouldn’t touch the network. When passed, Cargo will\nimmediately return an error if it would otherwise attempt a network request.\nThe error should include contextual information about why the network request is\nbeing made in the first place to help debug as well. Note that this flag <em>does\nnot change the behavior of Cargo</em>, it simply asserts that Cargo shouldn’t touch\nthe network as a previous command has been run to ensure that network activity\nshouldn’t be necessary.</p>\n<p>The <code class=\"hljs\">--offline</code> flag was added in Rust 1.36.0. This flag tells Cargo to not\naccess the network, and try to proceed with available cached data if possible.\nYou can use <a href=\"commands/cargo-fetch.html\"><code class=\"hljs\">cargo fetch</code></a> in one project to download dependencies before\ngoing offline, and then use those same dependencies in another project with\nthe <code class=\"hljs\">--offline</code> flag (or <a href=\"reference/config.html#netoffline\">configuration value</a>).</p>\n<p>For more information about vendoring, see documentation on <a href=\"reference/source-replacement.html\">source\nreplacement</a>.</p>\n<h2 id=\"why-is-cargo-rebuilding-my-code\"><a class=\"header\" href=\"#why-is-cargo-rebuilding-my-code\">Why is Cargo rebuilding my code?</a></h2>\n<p>Cargo is responsible for incrementally compiling crates in your project. This\nmeans that if you type <code class=\"hljs\">cargo build</code> twice the second one shouldn’t rebuild your\ncrates.io dependencies, for example. Nevertheless bugs arise and Cargo can\nsometimes rebuild code when you’re not expecting it!</p>\n<p>We’ve long <a href=\"https://github.com/rust-lang/cargo/issues/2904\">wanted to provide better diagnostics about\nthis</a> but unfortunately haven’t\nbeen able to make progress on that issue in quite some time. In the meantime,\nhowever, you can debug a rebuild at least a little by setting the <code class=\"hljs\">CARGO_LOG</code>\nenvironment variable:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-sh hljs bash\">$ CARGO_LOG=cargo::core::compiler::fingerprint=info cargo build\n</code></pre>\n<p>This will cause Cargo to print out a lot of information about diagnostics and\nrebuilding. This can often contain clues as to why your project is getting\nrebuilt, although you’ll often need to connect some dots yourself since this\noutput isn’t super easy to read just yet. Note that the <code class=\"hljs\">CARGO_LOG</code> needs to be\nset for the command that rebuilds when you think it should not. Unfortunately\nCargo has no way right now of after-the-fact debugging “why was that rebuilt?”</p>\n<p>Some issues we’ve seen historically which can cause crates to get rebuilt are:</p>\n<ul>\n<li>\n<p>A build script prints <code class=\"hljs\">cargo::rerun-if-changed=foo</code> where <code class=\"hljs\">foo</code> is a file that\ndoesn’t exist and nothing generates it. In this case Cargo will keep running\nthe build script thinking it will generate the file but nothing ever does. The\nfix is to avoid printing <code class=\"hljs\">rerun-if-changed</code> in this scenario.</p>\n</li>\n<li>\n<p>Two successive Cargo builds may differ in the set of features enabled for some\ndependencies. For example if the first build command builds the whole\nworkspace and the second command builds only one crate, this may cause a\ndependency on crates.io to have a different set of features enabled, causing\nit and everything that depends on it to get rebuilt. There’s unfortunately not\nreally a great fix for this, although if possible it’s best to have the set of\nfeatures enabled on a crate constant regardless of what you’re building in\nyour workspace.</p>\n</li>\n<li>\n<p>Some filesystems exhibit unusual behavior around timestamps. Cargo primarily\nuses timestamps on files to govern whether rebuilding needs to happen, but if\nyou’re using a nonstandard filesystem it may be affecting the timestamps\nsomehow (e.g. truncating them, causing them to drift, etc). In this scenario,\nfeel free to open an issue and we can see if we can accommodate the filesystem\nsomehow.</p>\n</li>\n<li>\n<p>A concurrent build process is either deleting artifacts or modifying files.\nSometimes you might have a background process that either tries to build or\ncheck your project. These background processes might surprisingly delete some\nbuild artifacts or touch files (or maybe just by accident), which can cause\nrebuilds to look spurious! The best fix here would be to wrangle the\nbackground process to avoid clashing with your work.</p>\n</li>\n</ul>\n<p>If after trying to debug your issue, however, you’re still running into problems\nthen feel free to <a href=\"https://github.com/rust-lang/cargo/issues/new\">open an\nissue</a>!</p>\n<h2 id=\"what-does-version-conflict-mean-and-how-to-resolve-it\"><a class=\"header\" href=\"#what-does-version-conflict-mean-and-how-to-resolve-it\">What does “version conflict” mean and how to resolve it?</a></h2>\n<blockquote>\n<p>failed to select a version for <code class=\"hljs\">x</code> which could resolve this conflict</p>\n</blockquote>\n<p>Have you seen the error message above?</p>\n<p>This is one of the most annoying error message for Cargo users. There are several\nsituations may lead us to a version conflict. Below we’ll walk through possible\ncauses and provide diagnostic techniques to help you out there:</p>\n<ul>\n<li>\n<p>The project and its dependencies use <a href=\"https://doc.rust-lang.org/cargo/reference/resolver.html#links\">links</a> to repeatedly link the local\nlibrary. Cargo forbids linking two packages with the same native library, so\neven with multiple layers of dependencies it is not allowed. In this case, the\nerror message will prompt: <code class=\"hljs\">Only one package in the dependency graph may specify the same links value</code>, you may need to manually check and delete duplicate link\nvalues. The community also have <a href=\"https://doc.rust-lang.org/cargo/reference/build-scripts.html#-sys-packages\">conventions in place</a> to alleviate this.</p>\n</li>\n<li>\n<p>When depending on different crates in the project, if these crates use the same\ndependent library, but the version used is restricted, making it impossible to\ndetermine the correct version, it will also cause conflicts. The error message\nwill prompt: <code class=\"hljs\">all possible versions conflict with previously selected packages</code>.\nYou may need to modify the version requirements to make them consistent.</p>\n</li>\n<li>\n<p>If there are multiple versions of dependencies in the project, when using\n<a href=\"https://doc.rust-lang.org/nightly/cargo/reference/unstable.html#direct-minimal-versions\"><code class=\"hljs\">direct-minimal-versions</code></a>, the minimum version requirements cannot be met,\nwhich will cause conflicts. You may need to modify version requirements of your\ndirect dependencies to meet the minimum SemVer version accordingly.</p>\n</li>\n<li>\n<p>If the dependent crate does not have the features you choose, it will also\ncause conflicts. At this time, you need to check the dependent version and its\nfeatures.</p>\n</li>\n<li>\n<p>Conflicts may occur when merging branches or PRs, if there are non-trivial\nconflicts, you can reset all “yours” changes, fix all other conflicts in the\nbranch, and then run some cargo command (like <code class=\"hljs\">cargo tree</code> or <code class=\"hljs\">cargo check</code>),\nwhich should re-update the lockfile with your own local changes. If you previously\nran some <code class=\"hljs\">cargo update</code> commands in your branch, you can re-run them that this\ntime. The community has been looking to resolve merge conflicts with <code class=\"hljs\">Cargo.lock</code>\nand <code class=\"hljs\">Cargo.toml</code> using a <a href=\"https://github.com/rust-lang/cargo/issues/1818\">custom merge tool</a>.</p>\n</li>\n</ul>\n\n                    </main>\n\n                    <nav class=\"nav-wrapper\" aria-label=\"Page navigation\">\n                        <!-- Mobile navigation buttons -->\n                            <a rel=\"prev\" href=\"commands/cargo-yank.html\" class=\"mobile-nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                                <i class=\"fa fa-angle-left\"></i>\n                            </a>\n\n                            <a rel=\"next prefetch\" href=\"appendix/glossary.html\" class=\"mobile-nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                                <i class=\"fa fa-angle-right\"></i>\n                            </a>\n\n                        <div style=\"clear: both\"></div>\n                    </nav>\n                </div>\n            </div>\n\n            <nav class=\"nav-wide-wrapper\" aria-label=\"Page navigation\">\n                    <a rel=\"prev\" href=\"commands/cargo-yank.html\" class=\"nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                        <i class=\"fa fa-angle-left\"></i>\n                    </a>\n\n                    <a rel=\"next prefetch\" href=\"appendix/glossary.html\" class=\"nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                        <i class=\"fa fa-angle-right\"></i>\n                    </a>\n            </nav>\n\n        </div>\n\n\n\n\n        <script>\n            window.playground_copyable = true;\n        </script>\n\n\n        <script src=\"elasticlunr.min.js\"></script>\n        <script src=\"mark.min.js\"></script>\n        <script src=\"searcher.js\"></script>\n\n        <script src=\"clipboard.min.js\"></script>\n        <script src=\"highlight.js\"></script>\n        <script src=\"book.js\"></script>\n\n        <!-- Custom JS scripts -->\n\n\n    </div>\n    \n\n</body></html>",
	"crawlDate": "2024-07-28T05:09:31.710Z"
}