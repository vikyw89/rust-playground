{
	"title": "size_of in std::mem - Rust",
	"url": "https://doc.rust-lang.org/stable/std/mem/fn.size_of.html",
	"markdown": "# size\\_of in std::mem - Rust\n\n## Function [std](../index.html)::[mem](index.html)::[size\\_of](#)\n\n1.0.0 (const: 1.24.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/mem/mod.rs.html#312) ·\n\n```\npub const fn size_of<T>() -> usize\n```\n\nExpand description\n\nReturns the size of a type in bytes.\n\nMore specifically, this is the offset in bytes between successive elements in an array with that item type including alignment padding. Thus, for any type `T` and length `n`, `[T; n]` has a size of `n * size_of::<T>()`.\n\nIn general, the size of a type is not stable across compilations, but specific types such as primitives are.\n\nThe following table gives the size for primitives.\n\n| Type | `size_of::<Type>()` |\n| --- | --- |\n| () | 0 |\n| bool | 1 |\n| u8 | 1 |\n| u16 | 2 |\n| u32 | 4 |\n| u64 | 8 |\n| u128 | 16 |\n| i8 | 1 |\n| i16 | 2 |\n| i32 | 4 |\n| i64 | 8 |\n| i128 | 16 |\n| f32 | 4 |\n| f64 | 8 |\n| char | 4 |\n\nFurthermore, `usize` and `isize` have the same size.\n\nThe types [`*const T`](../primitive.pointer.html \"primitive pointer\"), `&T`, [`Box<T>`](../../std/boxed/struct.Box.html), [`Option<&T>`](../option/enum.Option.html \"enum std::option::Option\"), and `Option<Box<T>>` all have the same size. If `T` is `Sized`, all of those types have the same size as `usize`.\n\nThe mutability of a pointer does not change its size. As such, `&T` and `&mut T` have the same size. Likewise for `*const T` and `*mut T`.\n\n## [§](#size-of-reprc-items)Size of `#[repr(C)]` items\n\nThe `C` representation for items has a defined layout. With this layout, the size of items is also stable as long as all fields have a stable size.\n\n### [§](#size-of-structs)Size of Structs\n\nFor `struct`s, the size is determined by the following algorithm.\n\nFor each field in the struct ordered by declaration order:\n\n1.  Add the size of the field.\n2.  Round up the current size to the nearest multiple of the next field’s [alignment](fn.align_of.html \"fn std::mem::align_of\").\n\nFinally, round the size of the struct to the nearest multiple of its [alignment](fn.align_of.html \"fn std::mem::align_of\"). The alignment of the struct is usually the largest alignment of all its fields; this can be changed with the use of `repr(align(N))`.\n\nUnlike `C`, zero sized structs are not rounded up to one byte in size.\n\n### [§](#size-of-enums)Size of Enums\n\nEnums that carry no data other than the discriminant have the same size as C enums on the platform they are compiled for.\n\n### [§](#size-of-unions)Size of Unions\n\nThe size of a union is the size of its largest field.\n\nUnlike `C`, zero sized unions are not rounded up to one byte in size.\n\n## [§](#examples)Examples\n\n```\nuse std::mem;\n\n// Some primitives\nassert_eq!(4, mem::size_of::<i32>());\nassert_eq!(8, mem::size_of::<f64>());\nassert_eq!(0, mem::size_of::<()>());\n\n// Some arrays\nassert_eq!(8, mem::size_of::<[i32; 2]>());\nassert_eq!(12, mem::size_of::<[i32; 3]>());\nassert_eq!(0, mem::size_of::<[i32; 0]>());\n\n\n// Pointer size equality\nassert_eq!(mem::size_of::<&i32>(), mem::size_of::<*const i32>());\nassert_eq!(mem::size_of::<&i32>(), mem::size_of::<Box<i32>>());\nassert_eq!(mem::size_of::<&i32>(), mem::size_of::<Option<&i32>>());\nassert_eq!(mem::size_of::<Box<i32>>(), mem::size_of::<Option<Box<i32>>>());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::mem;%0A++++%0A++++//+Some+primitives%0A++++assert_eq!(4,+mem::size_of::%3Ci32%3E());%0A++++assert_eq!(8,+mem::size_of::%3Cf64%3E());%0A++++assert_eq!(0,+mem::size_of::%3C()%3E());%0A++++%0A++++//+Some+arrays%0A++++assert_eq!(8,+mem::size_of::%3C%5Bi32;+2%5D%3E());%0A++++assert_eq!(12,+mem::size_of::%3C%5Bi32;+3%5D%3E());%0A++++assert_eq!(0,+mem::size_of::%3C%5Bi32;+0%5D%3E());%0A++++%0A++++%0A++++//+Pointer+size+equality%0A++++assert_eq!(mem::size_of::%3C%26i32%3E(),+mem::size_of::%3C*const+i32%3E());%0A++++assert_eq!(mem::size_of::%3C%26i32%3E(),+mem::size_of::%3CBox%3Ci32%3E%3E());%0A++++assert_eq!(mem::size_of::%3C%26i32%3E(),+mem::size_of::%3COption%3C%26i32%3E%3E());%0A++++assert_eq!(mem::size_of::%3CBox%3Ci32%3E%3E(),+mem::size_of::%3COption%3CBox%3Ci32%3E%3E%3E());%0A%7D&edition=2021)\n\nUsing `#[repr(C)]`.\n\n```\nuse std::mem;\n\n#[repr(C)]\nstruct FieldStruct {\n    first: u8,\n    second: u16,\n    third: u8\n}\n\n// The size of the first field is 1, so add 1 to the size. Size is 1.\n// The alignment of the second field is 2, so add 1 to the size for padding. Size is 2.\n// The size of the second field is 2, so add 2 to the size. Size is 4.\n// The alignment of the third field is 1, so add 0 to the size for padding. Size is 4.\n// The size of the third field is 1, so add 1 to the size. Size is 5.\n// Finally, the alignment of the struct is 2 (because the largest alignment amongst its\n// fields is 2), so add 1 to the size for padding. Size is 6.\nassert_eq!(6, mem::size_of::<FieldStruct>());\n\n#[repr(C)]\nstruct TupleStruct(u8, u16, u8);\n\n// Tuple structs follow the same rules.\nassert_eq!(6, mem::size_of::<TupleStruct>());\n\n// Note that reordering the fields can lower the size. We can remove both padding bytes\n// by putting `third` before `second`.\n#[repr(C)]\nstruct FieldStructOptimized {\n    first: u8,\n    third: u8,\n    second: u16\n}\n\nassert_eq!(4, mem::size_of::<FieldStructOptimized>());\n\n// Union size is the size of the largest field.\n#[repr(C)]\nunion ExampleUnion {\n    smaller: u8,\n    larger: u16\n}\n\nassert_eq!(2, mem::size_of::<ExampleUnion>());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::mem;%0A++++%0A++++%23%5Brepr(C)%5D%0A++++struct+FieldStruct+%7B%0A++++++++first:+u8,%0A++++++++second:+u16,%0A++++++++third:+u8%0A++++%7D%0A++++%0A++++//+The+size+of+the+first+field+is+1,+so+add+1+to+the+size.+Size+is+1.%0A++++//+The+alignment+of+the+second+field+is+2,+so+add+1+to+the+size+for+padding.+Size+is+2.%0A++++//+The+size+of+the+second+field+is+2,+so+add+2+to+the+size.+Size+is+4.%0A++++//+The+alignment+of+the+third+field+is+1,+so+add+0+to+the+size+for+padding.+Size+is+4.%0A++++//+The+size+of+the+third+field+is+1,+so+add+1+to+the+size.+Size+is+5.%0A++++//+Finally,+the+alignment+of+the+struct+is+2+(because+the+largest+alignment+amongst+its%0A++++//+fields+is+2),+so+add+1+to+the+size+for+padding.+Size+is+6.%0A++++assert_eq!(6,+mem::size_of::%3CFieldStruct%3E());%0A++++%0A++++%23%5Brepr(C)%5D%0A++++struct+TupleStruct(u8,+u16,+u8);%0A++++%0A++++//+Tuple+structs+follow+the+same+rules.%0A++++assert_eq!(6,+mem::size_of::%3CTupleStruct%3E());%0A++++%0A++++//+Note+that+reordering+the+fields+can+lower+the+size.+We+can+remove+both+padding+bytes%0A++++//+by+putting+%60third%60+before+%60second%60.%0A++++%23%5Brepr(C)%5D%0A++++struct+FieldStructOptimized+%7B%0A++++++++first:+u8,%0A++++++++third:+u8,%0A++++++++second:+u16%0A++++%7D%0A++++%0A++++assert_eq!(4,+mem::size_of::%3CFieldStructOptimized%3E());%0A++++%0A++++//+Union+size+is+the+size+of+the+largest+field.%0A++++%23%5Brepr(C)%5D%0A++++union+ExampleUnion+%7B%0A++++++++smaller:+u8,%0A++++++++larger:+u16%0A++++%7D%0A++++%0A++++assert_eq!(2,+mem::size_of::%3CExampleUnion%3E());%0A%7D&edition=2021)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Returns the size of a type in bytes.\"><title>size_of in std::mem - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc fn\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><div class=\"sidebar-elems\"><h2><a href=\"index.html\">In std::mem</a></h2><h3><a href=\"index.html#macros\">Macros</a></h3><ul class=\"block macro\"><li><a href=\"macro.offset_of.html\">offset_of</a></li></ul><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.Assume.html\">Assume</a></li><li><a href=\"struct.Discriminant.html\">Discriminant</a></li><li><a href=\"struct.ManuallyDrop.html\">ManuallyDrop</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.BikeshedIntrinsicFrom.html\">BikeshedIntrinsicFrom</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.align_of.html\">align_of</a></li><li><a href=\"fn.align_of_val.html\">align_of_val</a></li><li><a href=\"fn.align_of_val_raw.html\">align_of_val_raw</a></li><li><a href=\"fn.copy.html\">copy</a></li><li><a href=\"fn.discriminant.html\">discriminant</a></li><li><a href=\"fn.drop.html\">drop</a></li><li><a href=\"fn.forget.html\">forget</a></li><li><a href=\"fn.forget_unsized.html\">forget_unsized</a></li><li><a href=\"fn.min_align_of.html\">min_align_of</a></li><li><a href=\"fn.min_align_of_val.html\">min_align_of_val</a></li><li><a href=\"fn.needs_drop.html\">needs_drop</a></li><li><a href=\"fn.replace.html\">replace</a></li><li><a href=\"fn.size_of.html\">size_of</a></li><li><a href=\"fn.size_of_val.html\">size_of_val</a></li><li><a href=\"fn.size_of_val_raw.html\">size_of_val_raw</a></li><li><a href=\"fn.swap.html\">swap</a></li><li><a href=\"fn.take.html\">take</a></li><li><a href=\"fn.transmute.html\">transmute</a></li><li><a href=\"fn.transmute_copy.html\">transmute_copy</a></li><li><a href=\"fn.uninitialized.html\">uninitialized</a></li><li><a href=\"fn.variant_count.html\">variant_count</a></li><li><a href=\"fn.zeroed.html\">zeroed</a></li></ul><h3><a href=\"index.html#unions\">Unions</a></h3><ul class=\"block union\"><li><a href=\"union.MaybeUninit.html\">MaybeUninit</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Function <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">mem</a>::<wbr><a class=\"fn\" href=\"#\">size_of</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.24.0\">1.0.0 (const: 1.24.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/mem/mod.rs.html#312\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub const fn size_of&lt;T&gt;() -&gt; <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a></code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Returns the size of a type in bytes.</p>\n<p>More specifically, this is the offset in bytes between successive elements\nin an array with that item type including alignment padding. Thus, for any\ntype <code>T</code> and length <code>n</code>, <code>[T; n]</code> has a size of <code>n * size_of::&lt;T&gt;()</code>.</p>\n<p>In general, the size of a type is not stable across compilations, but\nspecific types such as primitives are.</p>\n<p>The following table gives the size for primitives.</p>\n<div><table><thead><tr><th>Type</th><th><code>size_of::&lt;Type&gt;()</code></th></tr></thead><tbody>\n<tr><td>()</td><td>0</td></tr>\n<tr><td>bool</td><td>1</td></tr>\n<tr><td>u8</td><td>1</td></tr>\n<tr><td>u16</td><td>2</td></tr>\n<tr><td>u32</td><td>4</td></tr>\n<tr><td>u64</td><td>8</td></tr>\n<tr><td>u128</td><td>16</td></tr>\n<tr><td>i8</td><td>1</td></tr>\n<tr><td>i16</td><td>2</td></tr>\n<tr><td>i32</td><td>4</td></tr>\n<tr><td>i64</td><td>8</td></tr>\n<tr><td>i128</td><td>16</td></tr>\n<tr><td>f32</td><td>4</td></tr>\n<tr><td>f64</td><td>8</td></tr>\n<tr><td>char</td><td>4</td></tr>\n</tbody></table>\n</div>\n<p>Furthermore, <code>usize</code> and <code>isize</code> have the same size.</p>\n<p>The types <a href=\"../primitive.pointer.html\" title=\"primitive pointer\"><code>*const T</code></a>, <code>&amp;T</code>, <a href=\"../../std/boxed/struct.Box.html\"><code>Box&lt;T&gt;</code></a>, <a href=\"../option/enum.Option.html\" title=\"enum std::option::Option\"><code>Option&lt;&amp;T&gt;</code></a>, and <code>Option&lt;Box&lt;T&gt;&gt;</code> all have\nthe same size. If <code>T</code> is <code>Sized</code>, all of those types have the same size as <code>usize</code>.</p>\n<p>The mutability of a pointer does not change its size. As such, <code>&amp;T</code> and <code>&amp;mut T</code>\nhave the same size. Likewise for <code>*const T</code> and <code>*mut T</code>.</p>\n<h2 id=\"size-of-reprc-items\"><a class=\"doc-anchor\" href=\"#size-of-reprc-items\">§</a>Size of <code>#[repr(C)]</code> items</h2>\n<p>The <code>C</code> representation for items has a defined layout. With this layout,\nthe size of items is also stable as long as all fields have a stable size.</p>\n<h3 id=\"size-of-structs\"><a class=\"doc-anchor\" href=\"#size-of-structs\">§</a>Size of Structs</h3>\n<p>For <code>struct</code>s, the size is determined by the following algorithm.</p>\n<p>For each field in the struct ordered by declaration order:</p>\n<ol>\n<li>Add the size of the field.</li>\n<li>Round up the current size to the nearest multiple of the next field’s <a href=\"fn.align_of.html\" title=\"fn std::mem::align_of\">alignment</a>.</li>\n</ol>\n<p>Finally, round the size of the struct to the nearest multiple of its <a href=\"fn.align_of.html\" title=\"fn std::mem::align_of\">alignment</a>.\nThe alignment of the struct is usually the largest alignment of all its\nfields; this can be changed with the use of <code>repr(align(N))</code>.</p>\n<p>Unlike <code>C</code>, zero sized structs are not rounded up to one byte in size.</p>\n<h3 id=\"size-of-enums\"><a class=\"doc-anchor\" href=\"#size-of-enums\">§</a>Size of Enums</h3>\n<p>Enums that carry no data other than the discriminant have the same size as C enums\non the platform they are compiled for.</p>\n<h3 id=\"size-of-unions\"><a class=\"doc-anchor\" href=\"#size-of-unions\">§</a>Size of Unions</h3>\n<p>The size of a union is the size of its largest field.</p>\n<p>Unlike <code>C</code>, zero sized unions are not rounded up to one byte in size.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::mem;\n\n<span class=\"comment\">// Some primitives\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">4</span>, mem::size_of::&lt;i32&gt;());\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">8</span>, mem::size_of::&lt;f64&gt;());\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0</span>, mem::size_of::&lt;()&gt;());\n\n<span class=\"comment\">// Some arrays\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">8</span>, mem::size_of::&lt;[i32; <span class=\"number\">2</span>]&gt;());\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">12</span>, mem::size_of::&lt;[i32; <span class=\"number\">3</span>]&gt;());\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0</span>, mem::size_of::&lt;[i32; <span class=\"number\">0</span>]&gt;());\n\n\n<span class=\"comment\">// Pointer size equality\n</span><span class=\"macro\">assert_eq!</span>(mem::size_of::&lt;<span class=\"kw-2\">&amp;</span>i32&gt;(), mem::size_of::&lt;<span class=\"kw-2\">*const </span>i32&gt;());\n<span class=\"macro\">assert_eq!</span>(mem::size_of::&lt;<span class=\"kw-2\">&amp;</span>i32&gt;(), mem::size_of::&lt;Box&lt;i32&gt;&gt;());\n<span class=\"macro\">assert_eq!</span>(mem::size_of::&lt;<span class=\"kw-2\">&amp;</span>i32&gt;(), mem::size_of::&lt;<span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>i32&gt;&gt;());\n<span class=\"macro\">assert_eq!</span>(mem::size_of::&lt;Box&lt;i32&gt;&gt;(), mem::size_of::&lt;<span class=\"prelude-ty\">Option</span>&lt;Box&lt;i32&gt;&gt;&gt;());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::mem;%0A++++%0A++++//+Some+primitives%0A++++assert_eq!(4,+mem::size_of::%3Ci32%3E());%0A++++assert_eq!(8,+mem::size_of::%3Cf64%3E());%0A++++assert_eq!(0,+mem::size_of::%3C()%3E());%0A++++%0A++++//+Some+arrays%0A++++assert_eq!(8,+mem::size_of::%3C%5Bi32;+2%5D%3E());%0A++++assert_eq!(12,+mem::size_of::%3C%5Bi32;+3%5D%3E());%0A++++assert_eq!(0,+mem::size_of::%3C%5Bi32;+0%5D%3E());%0A++++%0A++++%0A++++//+Pointer+size+equality%0A++++assert_eq!(mem::size_of::%3C%26i32%3E(),+mem::size_of::%3C*const+i32%3E());%0A++++assert_eq!(mem::size_of::%3C%26i32%3E(),+mem::size_of::%3CBox%3Ci32%3E%3E());%0A++++assert_eq!(mem::size_of::%3C%26i32%3E(),+mem::size_of::%3COption%3C%26i32%3E%3E());%0A++++assert_eq!(mem::size_of::%3CBox%3Ci32%3E%3E(),+mem::size_of::%3COption%3CBox%3Ci32%3E%3E%3E());%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Using <code>#[repr(C)]</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::mem;\n\n<span class=\"attr\">#[repr(C)]\n</span><span class=\"kw\">struct </span>FieldStruct {\n    first: u8,\n    second: u16,\n    third: u8\n}\n\n<span class=\"comment\">// The size of the first field is 1, so add 1 to the size. Size is 1.\n// The alignment of the second field is 2, so add 1 to the size for padding. Size is 2.\n// The size of the second field is 2, so add 2 to the size. Size is 4.\n// The alignment of the third field is 1, so add 0 to the size for padding. Size is 4.\n// The size of the third field is 1, so add 1 to the size. Size is 5.\n// Finally, the alignment of the struct is 2 (because the largest alignment amongst its\n// fields is 2), so add 1 to the size for padding. Size is 6.\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">6</span>, mem::size_of::&lt;FieldStruct&gt;());\n\n<span class=\"attr\">#[repr(C)]\n</span><span class=\"kw\">struct </span>TupleStruct(u8, u16, u8);\n\n<span class=\"comment\">// Tuple structs follow the same rules.\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">6</span>, mem::size_of::&lt;TupleStruct&gt;());\n\n<span class=\"comment\">// Note that reordering the fields can lower the size. We can remove both padding bytes\n// by putting `third` before `second`.\n</span><span class=\"attr\">#[repr(C)]\n</span><span class=\"kw\">struct </span>FieldStructOptimized {\n    first: u8,\n    third: u8,\n    second: u16\n}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">4</span>, mem::size_of::&lt;FieldStructOptimized&gt;());\n\n<span class=\"comment\">// Union size is the size of the largest field.\n</span><span class=\"attr\">#[repr(C)]\n</span><span class=\"kw\">union </span>ExampleUnion {\n    smaller: u8,\n    larger: u16\n}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">2</span>, mem::size_of::&lt;ExampleUnion&gt;());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::mem;%0A++++%0A++++%23%5Brepr(C)%5D%0A++++struct+FieldStruct+%7B%0A++++++++first:+u8,%0A++++++++second:+u16,%0A++++++++third:+u8%0A++++%7D%0A++++%0A++++//+The+size+of+the+first+field+is+1,+so+add+1+to+the+size.+Size+is+1.%0A++++//+The+alignment+of+the+second+field+is+2,+so+add+1+to+the+size+for+padding.+Size+is+2.%0A++++//+The+size+of+the+second+field+is+2,+so+add+2+to+the+size.+Size+is+4.%0A++++//+The+alignment+of+the+third+field+is+1,+so+add+0+to+the+size+for+padding.+Size+is+4.%0A++++//+The+size+of+the+third+field+is+1,+so+add+1+to+the+size.+Size+is+5.%0A++++//+Finally,+the+alignment+of+the+struct+is+2+(because+the+largest+alignment+amongst+its%0A++++//+fields+is+2),+so+add+1+to+the+size+for+padding.+Size+is+6.%0A++++assert_eq!(6,+mem::size_of::%3CFieldStruct%3E());%0A++++%0A++++%23%5Brepr(C)%5D%0A++++struct+TupleStruct(u8,+u16,+u8);%0A++++%0A++++//+Tuple+structs+follow+the+same+rules.%0A++++assert_eq!(6,+mem::size_of::%3CTupleStruct%3E());%0A++++%0A++++//+Note+that+reordering+the+fields+can+lower+the+size.+We+can+remove+both+padding+bytes%0A++++//+by+putting+%60third%60+before+%60second%60.%0A++++%23%5Brepr(C)%5D%0A++++struct+FieldStructOptimized+%7B%0A++++++++first:+u8,%0A++++++++third:+u8,%0A++++++++second:+u16%0A++++%7D%0A++++%0A++++assert_eq!(4,+mem::size_of::%3CFieldStructOptimized%3E());%0A++++%0A++++//+Union+size+is+the+size+of+the+largest+field.%0A++++%23%5Brepr(C)%5D%0A++++union+ExampleUnion+%7B%0A++++++++smaller:+u8,%0A++++++++larger:+u16%0A++++%7D%0A++++%0A++++assert_eq!(2,+mem::size_of::%3CExampleUnion%3E());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:11:41.709Z"
}