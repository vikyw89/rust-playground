{
	"title": "ControlFlow in std::ops - Rust",
	"url": "https://doc.rust-lang.org/stable/std/ops/enum.ControlFlow.html",
	"markdown": "# ControlFlow in std::ops - Rust\n\n```\npub enum ControlFlow<B, C = ()> {\n    Continue(C),\n    Break(B),\n}\n```\n\nExpand description\n\nUsed to tell an operation whether it should exit early or go on as usual.\n\nThis is used when exposing things (like graph traversals or visitors) where you want the user to be able to choose whether to exit early. Having the enum makes it clearer ‚Äì no more wondering ‚Äúwait, what did `false` mean again?‚Äù ‚Äì and allows including a value.\n\nSimilar to [`Option`](../option/enum.Option.html \"enum std::option::Option\") and [`Result`](../result/enum.Result.html \"enum std::result::Result\"), this enum can be used with the `?` operator to return immediately if the [`Break`](about:blank/enum.ControlFlow.html#variant.Break \"variant std::ops::ControlFlow::Break\") variant is present or otherwise continue normally with the value inside the [`Continue`](about:blank/enum.ControlFlow.html#variant.Continue \"variant std::ops::ControlFlow::Continue\") variant.\n\n## [¬ß](#examples)Examples\n\nEarly-exiting from [`Iterator::try_for_each`](about:blank/iter/trait.Iterator.html#method.try_for_each \"method std::iter::Iterator::try_for_each\"):\n\n```\nuse std::ops::ControlFlow;\n\nlet r = (2..100).try_for_each(|x| {\n    if 403 % x == 0 {\n        return ControlFlow::Break(x)\n    }\n\n    ControlFlow::Continue(())\n});\nassert_eq!(r, ControlFlow::Break(13));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ops::ControlFlow;%0A++++%0A++++let+r+=+(2..100).try_for_each(%7Cx%7C+%7B%0A++++++++if+403+%25+x+==+0+%7B%0A++++++++++++return+ControlFlow::Break(x)%0A++++++++%7D%0A++++%0A++++++++ControlFlow::Continue(())%0A++++%7D);%0A++++assert_eq!(r,+ControlFlow::Break(13));%0A%7D&edition=2021)\n\nA basic tree traversal:\n\n```\nuse std::ops::ControlFlow;\n\npub struct TreeNode<T> {\n    value: T,\n    left: Option<Box<TreeNode<T>>>,\n    right: Option<Box<TreeNode<T>>>,\n}\n\nimpl<T> TreeNode<T> {\n    pub fn traverse_inorder<B>(&self, f: &mut impl FnMut(&T) -> ControlFlow<B>) -> ControlFlow<B> {\n        if let Some(left) = &self.left {\n            left.traverse_inorder(f)?;\n        }\n        f(&self.value)?;\n        if let Some(right) = &self.right {\n            right.traverse_inorder(f)?;\n        }\n        ControlFlow::Continue(())\n    }\n    fn leaf(value: T) -> Option<Box<TreeNode<T>>> {\n        Some(Box::new(Self { value, left: None, right: None }))\n    }\n}\n\nlet node = TreeNode {\n    value: 0,\n    left: TreeNode::leaf(1),\n    right: Some(Box::new(TreeNode {\n        value: -1,\n        left: TreeNode::leaf(5),\n        right: TreeNode::leaf(2),\n    }))\n};\nlet mut sum = 0;\n\nlet res = node.traverse_inorder(&mut |val| {\n    if *val < 0 {\n        ControlFlow::Break(*val)\n    } else {\n        sum += *val;\n        ControlFlow::Continue(())\n    }\n});\nassert_eq!(res, ControlFlow::Break(-1));\nassert_eq!(sum, 6);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ops::ControlFlow;%0A++++%0A++++pub+struct+TreeNode%3CT%3E+%7B%0A++++++++value:+T,%0A++++++++left:+Option%3CBox%3CTreeNode%3CT%3E%3E%3E,%0A++++++++right:+Option%3CBox%3CTreeNode%3CT%3E%3E%3E,%0A++++%7D%0A++++%0A++++impl%3CT%3E+TreeNode%3CT%3E+%7B%0A++++++++pub+fn+traverse_inorder%3CB%3E(%26self,+f:+%26mut+impl+FnMut(%26T)+-%3E+ControlFlow%3CB%3E)+-%3E+ControlFlow%3CB%3E+%7B%0A++++++++++++if+let+Some(left)+=+%26self.left+%7B%0A++++++++++++++++left.traverse_inorder(f)?;%0A++++++++++++%7D%0A++++++++++++f(%26self.value)?;%0A++++++++++++if+let+Some(right)+=+%26self.right+%7B%0A++++++++++++++++right.traverse_inorder(f)?;%0A++++++++++++%7D%0A++++++++++++ControlFlow::Continue(())%0A++++++++%7D%0A++++++++fn+leaf(value:+T)+-%3E+Option%3CBox%3CTreeNode%3CT%3E%3E%3E+%7B%0A++++++++++++Some(Box::new(Self+%7B+value,+left:+None,+right:+None+%7D))%0A++++++++%7D%0A++++%7D%0A++++%0A++++let+node+=+TreeNode+%7B%0A++++++++value:+0,%0A++++++++left:+TreeNode::leaf(1),%0A++++++++right:+Some(Box::new(TreeNode+%7B%0A++++++++++++value:+-1,%0A++++++++++++left:+TreeNode::leaf(5),%0A++++++++++++right:+TreeNode::leaf(2),%0A++++++++%7D))%0A++++%7D;%0A++++let+mut+sum+=+0;%0A++++%0A++++let+res+=+node.traverse_inorder(%26mut+%7Cval%7C+%7B%0A++++++++if+*val+%3C+0+%7B%0A++++++++++++ControlFlow::Break(*val)%0A++++++++%7D+else+%7B%0A++++++++++++sum+%2B=+*val;%0A++++++++++++ControlFlow::Continue(())%0A++++++++%7D%0A++++%7D);%0A++++assert_eq!(res,+ControlFlow::Break(-1));%0A++++assert_eq!(sum,+6);%0A%7D&edition=2021)\n\n[¬ß](#variant.Continue)1.55.0\n\nMove on to the next phase of the operation as normal.\n\n[¬ß](#variant.Break)1.55.0\n\nExit the operation without running subsequent phases.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ops/control_flow.rs.html#133)[¬ß](#impl-ControlFlow%3CB,+C%3E)\n\n1.59.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/ops/control_flow.rs.html#146)\n\nReturns `true` if this is a `Break` variant.\n\n##### [¬ß](#examples-1)Examples\n\n```\nuse std::ops::ControlFlow;\n\nassert!(ControlFlow::<i32, String>::Break(3).is_break());\nassert!(!ControlFlow::<String, i32>::Continue(3).is_break());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ops::ControlFlow;%0A++++%0A++++assert!(ControlFlow::%3Ci32,+String%3E::Break(3).is_break());%0A++++assert!(!ControlFlow::%3CString,+i32%3E::Continue(3).is_break());%0A%7D&edition=2021)\n\n1.59.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/ops/control_flow.rs.html#162)\n\nReturns `true` if this is a `Continue` variant.\n\n##### [¬ß](#examples-2)Examples\n\n```\nuse std::ops::ControlFlow;\n\nassert!(!ControlFlow::<i32, String>::Break(3).is_continue());\nassert!(ControlFlow::<String, i32>::Continue(3).is_continue());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ops::ControlFlow;%0A++++%0A++++assert!(!ControlFlow::%3Ci32,+String%3E::Break(3).is_continue());%0A++++assert!(ControlFlow::%3CString,+i32%3E::Continue(3).is_continue());%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ops/control_flow.rs.html#180)\n\nüî¨This is a nightly-only experimental API. (`control_flow_enum`¬†[#75744](https://github.com/rust-lang/rust/issues/75744))\n\nConverts the `ControlFlow` into an `Option` which is `Some` if the `ControlFlow` was `Break` and `None` otherwise.\n\n##### [¬ß](#examples-3)Examples\n\n```\n#![feature(control_flow_enum)]\nuse std::ops::ControlFlow;\n\nassert_eq!(ControlFlow::<i32, String>::Break(3).break_value(), Some(3));\nassert_eq!(ControlFlow::<String, i32>::Continue(3).break_value(), None);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(control_flow_enum)%5D%0Afn+main()+%7B%0A++++use+std::ops::ControlFlow;%0A++++%0A++++assert_eq!(ControlFlow::%3Ci32,+String%3E::Break(3).break_value(),+Some(3));%0A++++assert_eq!(ControlFlow::%3CString,+i32%3E::Continue(3).break_value(),+None);%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ops/control_flow.rs.html#191-193)\n\nüî¨This is a nightly-only experimental API. (`control_flow_enum`¬†[#75744](https://github.com/rust-lang/rust/issues/75744))\n\nMaps `ControlFlow<B, C>` to `ControlFlow<T, C>` by applying a function to the break value in case it exists.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ops/control_flow.rs.html#215)\n\nüî¨This is a nightly-only experimental API. (`control_flow_enum`¬†[#75744](https://github.com/rust-lang/rust/issues/75744))\n\nConverts the `ControlFlow` into an `Option` which is `Some` if the `ControlFlow` was `Continue` and `None` otherwise.\n\n##### [¬ß](#examples-4)Examples\n\n```\n#![feature(control_flow_enum)]\nuse std::ops::ControlFlow;\n\nassert_eq!(ControlFlow::<i32, String>::Break(3).continue_value(), None);\nassert_eq!(ControlFlow::<String, i32>::Continue(3).continue_value(), Some(3));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(control_flow_enum)%5D%0Afn+main()+%7B%0A++++use+std::ops::ControlFlow;%0A++++%0A++++assert_eq!(ControlFlow::%3Ci32,+String%3E::Break(3).continue_value(),+None);%0A++++assert_eq!(ControlFlow::%3CString,+i32%3E::Continue(3).continue_value(),+Some(3));%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ops/control_flow.rs.html#226-228)\n\nüî¨This is a nightly-only experimental API. (`control_flow_enum`¬†[#75744](https://github.com/rust-lang/rust/issues/75744))\n\nMaps `ControlFlow<B, C>` to `ControlFlow<B, T>` by applying a function to the continue value in case it exists.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ops/control_flow.rs.html#240)[¬ß](#impl-ControlFlow%3CR,+%3CR+as+Try%3E::Output%3E)\n\nThis impl block contains no items.\n\nThese are used only as part of implementing the iterator adapters. They have mediocre names and non-obvious semantics, so aren‚Äôt currently on a path to potential stabilization.\n\n1.55.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/ops/control_flow.rs.html#84)[¬ß](#impl-Clone-for-ControlFlow%3CB,+C%3E)\n\n1.55.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/ops/control_flow.rs.html#84)[¬ß](#impl-Debug-for-ControlFlow%3CB,+C%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ops/control_flow.rs.html#119)[¬ß](#impl-FromResidual-for-ControlFlow%3CB,+C%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ops/control_flow.rs.html#121)[¬ß](#method.from_residual)\n\nüî¨This is a nightly-only experimental API. (`try_trait_v2`¬†[#84277](https://github.com/rust-lang/rust/issues/84277))\n\nConstructs the type from a compatible `Residual` type. [Read more](about:blank/trait.FromResidual.html#tymethod.from_residual)\n\n1.55.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/ops/control_flow.rs.html#84)[¬ß](#impl-Hash-for-ControlFlow%3CB,+C%3E)\n\n1.55.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/ops/control_flow.rs.html#84)[¬ß](#impl-PartialEq-for-ControlFlow%3CB,+C%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ops/control_flow.rs.html#84)[¬ß](#method.eq)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[¬ß](#method.ne)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ops/control_flow.rs.html#129)[¬ß](#impl-Residual%3CC%3E-for-ControlFlow%3CB,+Infallible%3E)\n\n[¬ß](#associatedtype.TryType)\n\nüî¨This is a nightly-only experimental API. (`try_trait_v2_residual`¬†[#91285](https://github.com/rust-lang/rust/issues/91285))\n\nThe ‚Äúreturn‚Äù type of this meta-function.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ops/control_flow.rs.html#100)[¬ß](#impl-Try-for-ControlFlow%3CB,+C%3E)\n\n[¬ß](#associatedtype.Output)\n\nüî¨This is a nightly-only experimental API. (`try_trait_v2`¬†[#84277](https://github.com/rust-lang/rust/issues/84277))\n\nThe type of the value produced by `?` when _not_ short-circuiting.\n\n[¬ß](#associatedtype.Residual)\n\nüî¨This is a nightly-only experimental API. (`try_trait_v2`¬†[#84277](https://github.com/rust-lang/rust/issues/84277))\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ops/control_flow.rs.html#105)[¬ß](#method.from_output)\n\nüî¨This is a nightly-only experimental API. (`try_trait_v2`¬†[#84277](https://github.com/rust-lang/rust/issues/84277))\n\nConstructs the type from its `Output` type. [Read more](about:blank/trait.Try.html#tymethod.from_output)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ops/control_flow.rs.html#110)[¬ß](#method.branch)\n\nüî¨This is a nightly-only experimental API. (`try_trait_v2`¬†[#84277](https://github.com/rust-lang/rust/issues/84277))\n\nUsed in `?` to decide whether the operator should produce a value (because this returned [`ControlFlow::Continue`](about:blank/enum.ControlFlow.html#variant.Continue \"variant std::ops::ControlFlow::Continue\")) or propagate a value back to the caller (because this returned [`ControlFlow::Break`](about:blank/enum.ControlFlow.html#variant.Break \"variant std::ops::ControlFlow::Break\")). [Read more](about:blank/trait.Try.html#tymethod.branch)\n\n1.55.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/ops/control_flow.rs.html#84)[¬ß](#impl-Copy-for-ControlFlow%3CB,+C%3E)\n\n1.55.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/ops/control_flow.rs.html#84)[¬ß](#impl-Eq-for-ControlFlow%3CB,+C%3E)\n\n1.55.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/ops/control_flow.rs.html#84)[¬ß](#impl-StructuralPartialEq-for-ControlFlow%3CB,+C%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140)[¬ß](#impl-Any-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208)[¬ß](#impl-Borrow%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216)[¬ß](#impl-BorrowMut%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765)[¬ß](#impl-From%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768)[¬ß](#method.from)\n\nReturns the argument unchanged.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750)[¬ß](#impl-Into%3CU%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758)[¬ß](#method.into)\n\nCalls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of `[From](../convert/trait.From.html \"trait std::convert::From\")<T> for U` chooses to do.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85)[¬ß](#impl-ToOwned-for-T)\n\n[¬ß](#associatedtype.Owned)\n\nThe resulting type after obtaining ownership.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88)[¬ß](#method.to_owned)\n\nCreates owned data from borrowed data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#tymethod.to_owned)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92)[¬ß](#method.clone_into)\n\nUses borrowed data to replace owned data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#method.clone_into)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807)[¬ß](#impl-TryFrom%3CU%3E-for-T)\n\n[¬ß](#associatedtype.Error-1)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812)[¬ß](#method.try_from)\n\nPerforms the conversion.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792)[¬ß](#impl-TryInto%3CU%3E-for-T)\n\n[¬ß](#associatedtype.Error)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797)[¬ß](#method.try_into)\n\nPerforms the conversion.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Used to tell an operation whether it should exit early or go on as usual.\"><title>ControlFlow in std::ops - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc enum\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">ControlFlow</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">ControlFlow</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#variants\">Variants</a></h3><ul class=\"block variant\"><li><a href=\"#variant.Break\">Break</a></li><li><a href=\"#variant.Continue\">Continue</a></li></ul><h3><a href=\"#implementations\">Methods</a></h3><ul class=\"block method\"><li><a href=\"#method.break_value\">break_value</a></li><li><a href=\"#method.continue_value\">continue_value</a></li><li><a href=\"#method.is_break\">is_break</a></li><li><a href=\"#method.is_continue\">is_continue</a></li><li><a href=\"#method.map_break\">map_break</a></li><li><a href=\"#method.map_continue\">map_continue</a></li></ul><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-Clone-for-ControlFlow%3CB,+C%3E\">Clone</a></li><li><a href=\"#impl-Copy-for-ControlFlow%3CB,+C%3E\">Copy</a></li><li><a href=\"#impl-Debug-for-ControlFlow%3CB,+C%3E\">Debug</a></li><li><a href=\"#impl-Eq-for-ControlFlow%3CB,+C%3E\">Eq</a></li><li><a href=\"#impl-FromResidual-for-ControlFlow%3CB,+C%3E\">FromResidual</a></li><li><a href=\"#impl-Hash-for-ControlFlow%3CB,+C%3E\">Hash</a></li><li><a href=\"#impl-PartialEq-for-ControlFlow%3CB,+C%3E\">PartialEq</a></li><li><a href=\"#impl-Residual%3CC%3E-for-ControlFlow%3CB,+Infallible%3E\">Residual&lt;C&gt;</a></li><li><a href=\"#impl-StructuralPartialEq-for-ControlFlow%3CB,+C%3E\">StructuralPartialEq</a></li><li><a href=\"#impl-Try-for-ControlFlow%3CB,+C%3E\">Try</a></li></ul><h3><a href=\"#synthetic-implementations\">Auto Trait Implementations</a></h3><ul class=\"block synthetic-implementation\"><li><a href=\"#impl-Freeze-for-ControlFlow%3CB,+C%3E\">Freeze</a></li><li><a href=\"#impl-RefUnwindSafe-for-ControlFlow%3CB,+C%3E\">RefUnwindSafe</a></li><li><a href=\"#impl-Send-for-ControlFlow%3CB,+C%3E\">Send</a></li><li><a href=\"#impl-Sync-for-ControlFlow%3CB,+C%3E\">Sync</a></li><li><a href=\"#impl-Unpin-for-ControlFlow%3CB,+C%3E\">Unpin</a></li><li><a href=\"#impl-UnwindSafe-for-ControlFlow%3CB,+C%3E\">UnwindSafe</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-Any-for-T\">Any</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-T\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-T\">BorrowMut&lt;T&gt;</a></li><li><a href=\"#impl-From%3CT%3E-for-T\">From&lt;T&gt;</a></li><li><a href=\"#impl-Into%3CU%3E-for-T\">Into&lt;U&gt;</a></li><li><a href=\"#impl-ToOwned-for-T\">ToOwned</a></li><li><a href=\"#impl-TryFrom%3CU%3E-for-T\">TryFrom&lt;U&gt;</a></li><li><a href=\"#impl-TryInto%3CU%3E-for-T\">TryInto&lt;U&gt;</a></li></ul></section><h2><a href=\"index.html\">In std::ops</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.Range.html\">Range</a></li><li><a href=\"struct.RangeFrom.html\">RangeFrom</a></li><li><a href=\"struct.RangeFull.html\">RangeFull</a></li><li><a href=\"struct.RangeInclusive.html\">RangeInclusive</a></li><li><a href=\"struct.RangeTo.html\">RangeTo</a></li><li><a href=\"struct.RangeToInclusive.html\">RangeToInclusive</a></li><li><a href=\"struct.Yeet.html\">Yeet</a></li></ul><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.Bound.html\">Bound</a></li><li><a href=\"enum.ControlFlow.html\">ControlFlow</a></li><li><a href=\"enum.CoroutineState.html\">CoroutineState</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.Add.html\">Add</a></li><li><a href=\"trait.AddAssign.html\">AddAssign</a></li><li><a href=\"trait.AsyncFn.html\">AsyncFn</a></li><li><a href=\"trait.AsyncFnMut.html\">AsyncFnMut</a></li><li><a href=\"trait.AsyncFnOnce.html\">AsyncFnOnce</a></li><li><a href=\"trait.BitAnd.html\">BitAnd</a></li><li><a href=\"trait.BitAndAssign.html\">BitAndAssign</a></li><li><a href=\"trait.BitOr.html\">BitOr</a></li><li><a href=\"trait.BitOrAssign.html\">BitOrAssign</a></li><li><a href=\"trait.BitXor.html\">BitXor</a></li><li><a href=\"trait.BitXorAssign.html\">BitXorAssign</a></li><li><a href=\"trait.CoerceUnsized.html\">CoerceUnsized</a></li><li><a href=\"trait.Coroutine.html\">Coroutine</a></li><li><a href=\"trait.Deref.html\">Deref</a></li><li><a href=\"trait.DerefMut.html\">DerefMut</a></li><li><a href=\"trait.DerefPure.html\">DerefPure</a></li><li><a href=\"trait.DispatchFromDyn.html\">DispatchFromDyn</a></li><li><a href=\"trait.Div.html\">Div</a></li><li><a href=\"trait.DivAssign.html\">DivAssign</a></li><li><a href=\"trait.Drop.html\">Drop</a></li><li><a href=\"trait.Fn.html\">Fn</a></li><li><a href=\"trait.FnMut.html\">FnMut</a></li><li><a href=\"trait.FnOnce.html\">FnOnce</a></li><li><a href=\"trait.FromResidual.html\">FromResidual</a></li><li><a href=\"trait.Index.html\">Index</a></li><li><a href=\"trait.IndexMut.html\">IndexMut</a></li><li><a href=\"trait.Mul.html\">Mul</a></li><li><a href=\"trait.MulAssign.html\">MulAssign</a></li><li><a href=\"trait.Neg.html\">Neg</a></li><li><a href=\"trait.Not.html\">Not</a></li><li><a href=\"trait.OneSidedRange.html\">OneSidedRange</a></li><li><a href=\"trait.RangeBounds.html\">RangeBounds</a></li><li><a href=\"trait.Rem.html\">Rem</a></li><li><a href=\"trait.RemAssign.html\">RemAssign</a></li><li><a href=\"trait.Residual.html\">Residual</a></li><li><a href=\"trait.Shl.html\">Shl</a></li><li><a href=\"trait.ShlAssign.html\">ShlAssign</a></li><li><a href=\"trait.Shr.html\">Shr</a></li><li><a href=\"trait.ShrAssign.html\">ShrAssign</a></li><li><a href=\"trait.Sub.html\">Sub</a></li><li><a href=\"trait.SubAssign.html\">SubAssign</a></li><li><a href=\"trait.Try.html\">Try</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‚ÄòS‚Äô or ‚Äò/‚Äô to search, ‚Äò?‚Äô for more options‚Ä¶\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Enum <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">ops</a>::<wbr><a class=\"enum\" href=\"#\">ControlFlow</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.55.0\">1.55.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/control_flow.rs.html#85\">source</a> ¬∑ <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>‚àí</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub enum ControlFlow&lt;B, C = <a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt; {\n    Continue(C),\n    Break(B),\n}</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Used to tell an operation whether it should exit early or go on as usual.</p>\n<p>This is used when exposing things (like graph traversals or visitors) where\nyou want the user to be able to choose whether to exit early.\nHaving the enum makes it clearer ‚Äì no more wondering ‚Äúwait, what did <code>false</code>\nmean again?‚Äù ‚Äì and allows including a value.</p>\n<p>Similar to <a href=\"../option/enum.Option.html\" title=\"enum std::option::Option\"><code>Option</code></a> and <a href=\"../result/enum.Result.html\" title=\"enum std::result::Result\"><code>Result</code></a>, this enum can be used with the <code>?</code> operator\nto return immediately if the <a href=\"enum.ControlFlow.html#variant.Break\" title=\"variant std::ops::ControlFlow::Break\"><code>Break</code></a> variant is present or otherwise continue normally\nwith the value inside the <a href=\"enum.ControlFlow.html#variant.Continue\" title=\"variant std::ops::ControlFlow::Continue\"><code>Continue</code></a> variant.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">¬ß</a>Examples</h2>\n<p>Early-exiting from <a href=\"../iter/trait.Iterator.html#method.try_for_each\" title=\"method std::iter::Iterator::try_for_each\"><code>Iterator::try_for_each</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ops::ControlFlow;\n\n<span class=\"kw\">let </span>r = (<span class=\"number\">2</span>..<span class=\"number\">100</span>).try_for_each(|x| {\n    <span class=\"kw\">if </span><span class=\"number\">403 </span>% x == <span class=\"number\">0 </span>{\n        <span class=\"kw\">return </span>ControlFlow::Break(x)\n    }\n\n    ControlFlow::Continue(())\n});\n<span class=\"macro\">assert_eq!</span>(r, ControlFlow::Break(<span class=\"number\">13</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ops::ControlFlow;%0A++++%0A++++let+r+=+(2..100).try_for_each(%7Cx%7C+%7B%0A++++++++if+403+%25+x+==+0+%7B%0A++++++++++++return+ControlFlow::Break(x)%0A++++++++%7D%0A++++%0A++++++++ControlFlow::Continue(())%0A++++%7D);%0A++++assert_eq!(r,+ControlFlow::Break(13));%0A%7D&amp;edition=2021\">Run</a></div>\n<p>A basic tree traversal:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ops::ControlFlow;\n\n<span class=\"kw\">pub struct </span>TreeNode&lt;T&gt; {\n    value: T,\n    left: <span class=\"prelude-ty\">Option</span>&lt;Box&lt;TreeNode&lt;T&gt;&gt;&gt;,\n    right: <span class=\"prelude-ty\">Option</span>&lt;Box&lt;TreeNode&lt;T&gt;&gt;&gt;,\n}\n\n<span class=\"kw\">impl</span>&lt;T&gt; TreeNode&lt;T&gt; {\n    <span class=\"kw\">pub fn </span>traverse_inorder&lt;B&gt;(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, f: <span class=\"kw-2\">&amp;mut </span><span class=\"kw\">impl </span>FnMut(<span class=\"kw-2\">&amp;</span>T) -&gt; ControlFlow&lt;B&gt;) -&gt; ControlFlow&lt;B&gt; {\n        <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(left) = <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.left {\n            left.traverse_inorder(f)<span class=\"question-mark\">?</span>;\n        }\n        f(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.value)<span class=\"question-mark\">?</span>;\n        <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(right) = <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.right {\n            right.traverse_inorder(f)<span class=\"question-mark\">?</span>;\n        }\n        ControlFlow::Continue(())\n    }\n    <span class=\"kw\">fn </span>leaf(value: T) -&gt; <span class=\"prelude-ty\">Option</span>&lt;Box&lt;TreeNode&lt;T&gt;&gt;&gt; {\n        <span class=\"prelude-val\">Some</span>(Box::new(<span class=\"self\">Self </span>{ value, left: <span class=\"prelude-val\">None</span>, right: <span class=\"prelude-val\">None </span>}))\n    }\n}\n\n<span class=\"kw\">let </span>node = TreeNode {\n    value: <span class=\"number\">0</span>,\n    left: TreeNode::leaf(<span class=\"number\">1</span>),\n    right: <span class=\"prelude-val\">Some</span>(Box::new(TreeNode {\n        value: -<span class=\"number\">1</span>,\n        left: TreeNode::leaf(<span class=\"number\">5</span>),\n        right: TreeNode::leaf(<span class=\"number\">2</span>),\n    }))\n};\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>sum = <span class=\"number\">0</span>;\n\n<span class=\"kw\">let </span>res = node.traverse_inorder(<span class=\"kw-2\">&amp;mut </span>|val| {\n    <span class=\"kw\">if </span><span class=\"kw-2\">*</span>val &lt; <span class=\"number\">0 </span>{\n        ControlFlow::Break(<span class=\"kw-2\">*</span>val)\n    } <span class=\"kw\">else </span>{\n        sum += <span class=\"kw-2\">*</span>val;\n        ControlFlow::Continue(())\n    }\n});\n<span class=\"macro\">assert_eq!</span>(res, ControlFlow::Break(-<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(sum, <span class=\"number\">6</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ops::ControlFlow;%0A++++%0A++++pub+struct+TreeNode%3CT%3E+%7B%0A++++++++value:+T,%0A++++++++left:+Option%3CBox%3CTreeNode%3CT%3E%3E%3E,%0A++++++++right:+Option%3CBox%3CTreeNode%3CT%3E%3E%3E,%0A++++%7D%0A++++%0A++++impl%3CT%3E+TreeNode%3CT%3E+%7B%0A++++++++pub+fn+traverse_inorder%3CB%3E(%26self,+f:+%26mut+impl+FnMut(%26T)+-%3E+ControlFlow%3CB%3E)+-%3E+ControlFlow%3CB%3E+%7B%0A++++++++++++if+let+Some(left)+=+%26self.left+%7B%0A++++++++++++++++left.traverse_inorder(f)?;%0A++++++++++++%7D%0A++++++++++++f(%26self.value)?;%0A++++++++++++if+let+Some(right)+=+%26self.right+%7B%0A++++++++++++++++right.traverse_inorder(f)?;%0A++++++++++++%7D%0A++++++++++++ControlFlow::Continue(())%0A++++++++%7D%0A++++++++fn+leaf(value:+T)+-%3E+Option%3CBox%3CTreeNode%3CT%3E%3E%3E+%7B%0A++++++++++++Some(Box::new(Self+%7B+value,+left:+None,+right:+None+%7D))%0A++++++++%7D%0A++++%7D%0A++++%0A++++let+node+=+TreeNode+%7B%0A++++++++value:+0,%0A++++++++left:+TreeNode::leaf(1),%0A++++++++right:+Some(Box::new(TreeNode+%7B%0A++++++++++++value:+-1,%0A++++++++++++left:+TreeNode::leaf(5),%0A++++++++++++right:+TreeNode::leaf(2),%0A++++++++%7D))%0A++++%7D;%0A++++let+mut+sum+=+0;%0A++++%0A++++let+res+=+node.traverse_inorder(%26mut+%7Cval%7C+%7B%0A++++++++if+*val+%3C+0+%7B%0A++++++++++++ControlFlow::Break(*val)%0A++++++++%7D+else+%7B%0A++++++++++++sum+%2B=+*val;%0A++++++++++++ControlFlow::Continue(())%0A++++++++%7D%0A++++%7D);%0A++++assert_eq!(res,+ControlFlow::Break(-1));%0A++++assert_eq!(sum,+6);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><h2 id=\"variants\" class=\"variants section-header\">Variants<a href=\"#variants\" class=\"anchor\">¬ß</a></h2><div class=\"variants\"><section id=\"variant.Continue\" class=\"variant\"><a href=\"#variant.Continue\" class=\"anchor\">¬ß</a><span class=\"since rightside\" title=\"Stable since Rust version 1.55.0\">1.55.0</span><h3 class=\"code-header\">Continue(C)</h3></section><div class=\"docblock\"><p>Move on to the next phase of the operation as normal.</p>\n</div><section id=\"variant.Break\" class=\"variant\"><a href=\"#variant.Break\" class=\"anchor\">¬ß</a><span class=\"since rightside\" title=\"Stable since Rust version 1.55.0\">1.55.0</span><h3 class=\"code-header\">Break(B)</h3></section><div class=\"docblock\"><p>Exit the operation without running subsequent phases.</p>\n</div></div><h2 id=\"implementations\" class=\"section-header\">Implementations<a href=\"#implementations\" class=\"anchor\">¬ß</a></h2><div id=\"implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-ControlFlow%3CB,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/control_flow.rs.html#133\">source</a><a href=\"#impl-ControlFlow%3CB,+C%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;B, C&gt; <a class=\"enum\" href=\"enum.ControlFlow.html\" title=\"enum std::ops::ControlFlow\">ControlFlow</a>&lt;B, C&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_break\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.59.0\">1.59.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/control_flow.rs.html#146\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.is_break\" class=\"fn\">is_break</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if this is a <code>Break</code> variant.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ops::ControlFlow;\n\n<span class=\"macro\">assert!</span>(ControlFlow::&lt;i32, String&gt;::Break(<span class=\"number\">3</span>).is_break());\n<span class=\"macro\">assert!</span>(!ControlFlow::&lt;String, i32&gt;::Continue(<span class=\"number\">3</span>).is_break());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ops::ControlFlow;%0A++++%0A++++assert!(ControlFlow::%3Ci32,+String%3E::Break(3).is_break());%0A++++assert!(!ControlFlow::%3CString,+i32%3E::Continue(3).is_break());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_continue\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.59.0\">1.59.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/control_flow.rs.html#162\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.is_continue\" class=\"fn\">is_continue</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if this is a <code>Continue</code> variant.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ops::ControlFlow;\n\n<span class=\"macro\">assert!</span>(!ControlFlow::&lt;i32, String&gt;::Break(<span class=\"number\">3</span>).is_continue());\n<span class=\"macro\">assert!</span>(ControlFlow::&lt;String, i32&gt;::Continue(<span class=\"number\">3</span>).is_continue());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ops::ControlFlow;%0A++++%0A++++assert!(!ControlFlow::%3Ci32,+String%3E::Break(3).is_continue());%0A++++assert!(ControlFlow::%3CString,+i32%3E::Continue(3).is_continue());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.break_value\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/control_flow.rs.html#180\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.break_value\" class=\"fn\">break_value</a>(self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;B&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>control_flow_enum</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/75744\">#75744</a>)</span></div></span></summary><div class=\"docblock\"><p>Converts the <code>ControlFlow</code> into an <code>Option</code> which is <code>Some</code> if the\n<code>ControlFlow</code> was <code>Break</code> and <code>None</code> otherwise.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(control_flow_enum)]\n</span><span class=\"kw\">use </span>std::ops::ControlFlow;\n\n<span class=\"macro\">assert_eq!</span>(ControlFlow::&lt;i32, String&gt;::Break(<span class=\"number\">3</span>).break_value(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(ControlFlow::&lt;String, i32&gt;::Continue(<span class=\"number\">3</span>).break_value(), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(control_flow_enum)%5D%0Afn+main()+%7B%0A++++use+std::ops::ControlFlow;%0A++++%0A++++assert_eq!(ControlFlow::%3Ci32,+String%3E::Break(3).break_value(),+Some(3));%0A++++assert_eq!(ControlFlow::%3CString,+i32%3E::Continue(3).break_value(),+None);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.map_break\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/control_flow.rs.html#191-193\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.map_break\" class=\"fn\">map_break</a>&lt;T, F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"enum.ControlFlow.html\" title=\"enum std::ops::ControlFlow\">ControlFlow</a>&lt;T, C&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"trait.FnOnce.html\" title=\"trait std::ops::FnOnce\">FnOnce</a>(B) -&gt; T,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>control_flow_enum</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/75744\">#75744</a>)</span></div></span></summary><div class=\"docblock\"><p>Maps <code>ControlFlow&lt;B, C&gt;</code> to <code>ControlFlow&lt;T, C&gt;</code> by applying a function\nto the break value in case it exists.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.continue_value\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/control_flow.rs.html#215\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.continue_value\" class=\"fn\">continue_value</a>(self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;C&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>control_flow_enum</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/75744\">#75744</a>)</span></div></span></summary><div class=\"docblock\"><p>Converts the <code>ControlFlow</code> into an <code>Option</code> which is <code>Some</code> if the\n<code>ControlFlow</code> was <code>Continue</code> and <code>None</code> otherwise.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(control_flow_enum)]\n</span><span class=\"kw\">use </span>std::ops::ControlFlow;\n\n<span class=\"macro\">assert_eq!</span>(ControlFlow::&lt;i32, String&gt;::Break(<span class=\"number\">3</span>).continue_value(), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(ControlFlow::&lt;String, i32&gt;::Continue(<span class=\"number\">3</span>).continue_value(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(control_flow_enum)%5D%0Afn+main()+%7B%0A++++use+std::ops::ControlFlow;%0A++++%0A++++assert_eq!(ControlFlow::%3Ci32,+String%3E::Break(3).continue_value(),+None);%0A++++assert_eq!(ControlFlow::%3CString,+i32%3E::Continue(3).continue_value(),+Some(3));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.map_continue\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/control_flow.rs.html#226-228\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.map_continue\" class=\"fn\">map_continue</a>&lt;T, F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"enum.ControlFlow.html\" title=\"enum std::ops::ControlFlow\">ControlFlow</a>&lt;B, T&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"trait.FnOnce.html\" title=\"trait std::ops::FnOnce\">FnOnce</a>(C) -&gt; T,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>control_flow_enum</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/75744\">#75744</a>)</span></div></span></summary><div class=\"docblock\"><p>Maps <code>ControlFlow&lt;B, C&gt;</code> to <code>ControlFlow&lt;B, T&gt;</code> by applying a function\nto the continue value in case it exists.</p>\n</div></details></div></details><section id=\"impl-ControlFlow%3CR,+%3CR+as+Try%3E::Output%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/control_flow.rs.html#240\">source</a><a href=\"#impl-ControlFlow%3CR,+%3CR+as+Try%3E::Output%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;R&gt; <a class=\"enum\" href=\"enum.ControlFlow.html\" title=\"enum std::ops::ControlFlow\">ControlFlow</a>&lt;R, &lt;R as <a class=\"trait\" href=\"trait.Try.html\" title=\"trait std::ops::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"trait.Try.html#associatedtype.Output\" title=\"type std::ops::Try::Output\">Output</a>&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"trait.Try.html\" title=\"trait std::ops::Try\">Try</a>,</div></h3></section><div class=\"item-info\"><div class=\"stab empty-impl\">This impl block contains no items.</div></div><div class=\"docblock\"><p>These are used only as part of implementing the iterator adapters.\nThey have mediocre names and non-obvious semantics, so aren‚Äôt\ncurrently on a path to potential stabilization.</p>\n</div></div><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">¬ß</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Clone-for-ControlFlow%3CB,+C%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.55.0\">1.55.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/control_flow.rs.html#84\">source</a></span><a href=\"#impl-Clone-for-ControlFlow%3CB,+C%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;B, C&gt; <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a> for <a class=\"enum\" href=\"enum.ControlFlow.html\" title=\"enum std::ops::ControlFlow\">ControlFlow</a>&lt;B, C&gt;<div class=\"where\">where\n    B: <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,\n    C: <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/control_flow.rs.html#84\">source</a><a href=\"#method.clone\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"enum\" href=\"enum.ControlFlow.html\" title=\"enum std::ops::ControlFlow\">ControlFlow</a>&lt;B, C&gt;</h4></section></summary><div class=\"docblock\">Returns a copy of the value. <a href=\"../clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class=\"docblock\">Performs copy-assignment from <code>source</code>. <a href=\"../clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-ControlFlow%3CB,+C%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.55.0\">1.55.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/control_flow.rs.html#84\">source</a></span><a href=\"#impl-Debug-for-ControlFlow%3CB,+C%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;B, C&gt; <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"enum\" href=\"enum.ControlFlow.html\" title=\"enum std::ops::ControlFlow\">ControlFlow</a>&lt;B, C&gt;<div class=\"where\">where\n    B: <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a>,\n    C: <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/control_flow.rs.html#84\">source</a><a href=\"#method.fmt\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"../fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-FromResidual-for-ControlFlow%3CB,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/control_flow.rs.html#119\">source</a><a href=\"#impl-FromResidual-for-ControlFlow%3CB,+C%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;B, C&gt; <a class=\"trait\" href=\"trait.FromResidual.html\" title=\"trait std::ops::FromResidual\">FromResidual</a> for <a class=\"enum\" href=\"enum.ControlFlow.html\" title=\"enum std::ops::ControlFlow\">ControlFlow</a>&lt;B, C&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_residual\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/control_flow.rs.html#121\">source</a><a href=\"#method.from_residual\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.FromResidual.html#tymethod.from_residual\" class=\"fn\">from_residual</a>(residual: <a class=\"enum\" href=\"enum.ControlFlow.html\" title=\"enum std::ops::ControlFlow\">ControlFlow</a>&lt;B, <a class=\"enum\" href=\"../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a>&gt;) -&gt; <a class=\"enum\" href=\"enum.ControlFlow.html\" title=\"enum std::ops::ControlFlow\">ControlFlow</a>&lt;B, C&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/84277\">#84277</a>)</span></div></span><div class=\"docblock\">Constructs the type from a compatible <code>Residual</code> type. <a href=\"trait.FromResidual.html#tymethod.from_residual\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Hash-for-ControlFlow%3CB,+C%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.55.0\">1.55.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/control_flow.rs.html#84\">source</a></span><a href=\"#impl-Hash-for-ControlFlow%3CB,+C%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;B, C&gt; <a class=\"trait\" href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"enum\" href=\"enum.ControlFlow.html\" title=\"enum std::ops::ControlFlow\">ControlFlow</a>&lt;B, C&gt;<div class=\"where\">where\n    B: <a class=\"trait\" href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a>,\n    C: <a class=\"trait\" href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/control_flow.rs.html#84\">source</a><a href=\"#method.hash\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;__H&gt;(&amp;self, state: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut __H</a>)<div class=\"where\">where\n    __H: <a class=\"trait\" href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class=\"docblock\">Feeds this value into the given <a href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"../hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#238-240\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Feeds a slice of this type into the given <a href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"../hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq-for-ControlFlow%3CB,+C%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.55.0\">1.55.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/control_flow.rs.html#84\">source</a></span><a href=\"#impl-PartialEq-for-ControlFlow%3CB,+C%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;B, C&gt; <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a> for <a class=\"enum\" href=\"enum.ControlFlow.html\" title=\"enum std::ops::ControlFlow\">ControlFlow</a>&lt;B, C&gt;<div class=\"where\">where\n    B: <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>,\n    C: <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/control_flow.rs.html#84\">source</a><a href=\"#method.eq\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"enum.ControlFlow.html\" title=\"enum std::ops::ControlFlow\">ControlFlow</a>&lt;B, C&gt;) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Residual%3CC%3E-for-ControlFlow%3CB,+Infallible%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/control_flow.rs.html#129\">source</a><a href=\"#impl-Residual%3CC%3E-for-ControlFlow%3CB,+Infallible%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;B, C&gt; <a class=\"trait\" href=\"trait.Residual.html\" title=\"trait std::ops::Residual\">Residual</a>&lt;C&gt; for <a class=\"enum\" href=\"enum.ControlFlow.html\" title=\"enum std::ops::ControlFlow\">ControlFlow</a>&lt;B, <a class=\"enum\" href=\"../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.TryType\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.TryType\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"trait.Residual.html#associatedtype.TryType\" class=\"associatedtype\">TryType</a> = <a class=\"enum\" href=\"enum.ControlFlow.html\" title=\"enum std::ops::ControlFlow\">ControlFlow</a>&lt;B, C&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>try_trait_v2_residual</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/91285\">#91285</a>)</span></div></span><div class=\"docblock\">The ‚Äúreturn‚Äù type of this meta-function.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Try-for-ControlFlow%3CB,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/control_flow.rs.html#100\">source</a><a href=\"#impl-Try-for-ControlFlow%3CB,+C%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;B, C&gt; <a class=\"trait\" href=\"trait.Try.html\" title=\"trait std::ops::Try\">Try</a> for <a class=\"enum\" href=\"enum.ControlFlow.html\" title=\"enum std::ops::ControlFlow\">ControlFlow</a>&lt;B, C&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"trait.Try.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = C</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/84277\">#84277</a>)</span></div></span><div class=\"docblock\">The type of the value produced by <code>?</code> when <em>not</em> short-circuiting.</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Residual\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Residual\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"trait.Try.html#associatedtype.Residual\" class=\"associatedtype\">Residual</a> = <a class=\"enum\" href=\"enum.ControlFlow.html\" title=\"enum std::ops::ControlFlow\">ControlFlow</a>&lt;B, <a class=\"enum\" href=\"../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/84277\">#84277</a>)</span></div></span><div class=\"docblock\">The type of the value passed to <a href=\"trait.FromResidual.html#tymethod.from_residual\" title=\"associated function std::ops::FromResidual::from_residual\"><code>FromResidual::from_residual</code></a>\nas part of <code>?</code> when short-circuiting. <a href=\"trait.Try.html#associatedtype.Residual\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_output\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/control_flow.rs.html#105\">source</a><a href=\"#method.from_output\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.Try.html#tymethod.from_output\" class=\"fn\">from_output</a>(output: &lt;<a class=\"enum\" href=\"enum.ControlFlow.html\" title=\"enum std::ops::ControlFlow\">ControlFlow</a>&lt;B, C&gt; as <a class=\"trait\" href=\"trait.Try.html\" title=\"trait std::ops::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"trait.Try.html#associatedtype.Output\" title=\"type std::ops::Try::Output\">Output</a>) -&gt; <a class=\"enum\" href=\"enum.ControlFlow.html\" title=\"enum std::ops::ControlFlow\">ControlFlow</a>&lt;B, C&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/84277\">#84277</a>)</span></div></span><div class=\"docblock\">Constructs the type from its <code>Output</code> type. <a href=\"trait.Try.html#tymethod.from_output\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.branch\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/control_flow.rs.html#110\">source</a><a href=\"#method.branch\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.Try.html#tymethod.branch\" class=\"fn\">branch</a>(\n    self,\n) -&gt; <a class=\"enum\" href=\"enum.ControlFlow.html\" title=\"enum std::ops::ControlFlow\">ControlFlow</a>&lt;&lt;<a class=\"enum\" href=\"enum.ControlFlow.html\" title=\"enum std::ops::ControlFlow\">ControlFlow</a>&lt;B, C&gt; as <a class=\"trait\" href=\"trait.Try.html\" title=\"trait std::ops::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"trait.Try.html#associatedtype.Residual\" title=\"type std::ops::Try::Residual\">Residual</a>, &lt;<a class=\"enum\" href=\"enum.ControlFlow.html\" title=\"enum std::ops::ControlFlow\">ControlFlow</a>&lt;B, C&gt; as <a class=\"trait\" href=\"trait.Try.html\" title=\"trait std::ops::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"trait.Try.html#associatedtype.Output\" title=\"type std::ops::Try::Output\">Output</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/84277\">#84277</a>)</span></div></span><div class=\"docblock\">Used in <code>?</code> to decide whether the operator should produce a value\n(because this returned <a href=\"enum.ControlFlow.html#variant.Continue\" title=\"variant std::ops::ControlFlow::Continue\"><code>ControlFlow::Continue</code></a>)\nor propagate a value back to the caller\n(because this returned <a href=\"enum.ControlFlow.html#variant.Break\" title=\"variant std::ops::ControlFlow::Break\"><code>ControlFlow::Break</code></a>). <a href=\"trait.Try.html#tymethod.branch\">Read more</a></div></details></div></details><section id=\"impl-Copy-for-ControlFlow%3CB,+C%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.55.0\">1.55.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/control_flow.rs.html#84\">source</a></span><a href=\"#impl-Copy-for-ControlFlow%3CB,+C%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;B, C&gt; <a class=\"trait\" href=\"../marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a> for <a class=\"enum\" href=\"enum.ControlFlow.html\" title=\"enum std::ops::ControlFlow\">ControlFlow</a>&lt;B, C&gt;<div class=\"where\">where\n    B: <a class=\"trait\" href=\"../marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a>,\n    C: <a class=\"trait\" href=\"../marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a>,</div></h3></section><section id=\"impl-Eq-for-ControlFlow%3CB,+C%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.55.0\">1.55.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/control_flow.rs.html#84\">source</a></span><a href=\"#impl-Eq-for-ControlFlow%3CB,+C%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;B, C&gt; <a class=\"trait\" href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> for <a class=\"enum\" href=\"enum.ControlFlow.html\" title=\"enum std::ops::ControlFlow\">ControlFlow</a>&lt;B, C&gt;<div class=\"where\">where\n    B: <a class=\"trait\" href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a>,\n    C: <a class=\"trait\" href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a>,</div></h3></section><section id=\"impl-StructuralPartialEq-for-ControlFlow%3CB,+C%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.55.0\">1.55.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/control_flow.rs.html#84\">source</a></span><a href=\"#impl-StructuralPartialEq-for-ControlFlow%3CB,+C%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;B, C&gt; <a class=\"trait\" href=\"../marker/trait.StructuralPartialEq.html\" title=\"trait std::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"enum\" href=\"enum.ControlFlow.html\" title=\"enum std::ops::ControlFlow\">ControlFlow</a>&lt;B, C&gt;</h3></section></div><h2 id=\"synthetic-implementations\" class=\"section-header\">Auto Trait Implementations<a href=\"#synthetic-implementations\" class=\"anchor\">¬ß</a></h2><div id=\"synthetic-implementations-list\"><section id=\"impl-Freeze-for-ControlFlow%3CB,+C%3E\" class=\"impl\"><a href=\"#impl-Freeze-for-ControlFlow%3CB,+C%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;B, C&gt; <a class=\"trait\" href=\"../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"enum\" href=\"enum.ControlFlow.html\" title=\"enum std::ops::ControlFlow\">ControlFlow</a>&lt;B, C&gt;<div class=\"where\">where\n    C: <a class=\"trait\" href=\"../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a>,\n    B: <a class=\"trait\" href=\"../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a>,</div></h3></section><section id=\"impl-RefUnwindSafe-for-ControlFlow%3CB,+C%3E\" class=\"impl\"><a href=\"#impl-RefUnwindSafe-for-ControlFlow%3CB,+C%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;B, C&gt; <a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"enum\" href=\"enum.ControlFlow.html\" title=\"enum std::ops::ControlFlow\">ControlFlow</a>&lt;B, C&gt;<div class=\"where\">where\n    C: <a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a>,\n    B: <a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a>,</div></h3></section><section id=\"impl-Send-for-ControlFlow%3CB,+C%3E\" class=\"impl\"><a href=\"#impl-Send-for-ControlFlow%3CB,+C%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;B, C&gt; <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"enum\" href=\"enum.ControlFlow.html\" title=\"enum std::ops::ControlFlow\">ControlFlow</a>&lt;B, C&gt;<div class=\"where\">where\n    C: <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a>,\n    B: <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a>,</div></h3></section><section id=\"impl-Sync-for-ControlFlow%3CB,+C%3E\" class=\"impl\"><a href=\"#impl-Sync-for-ControlFlow%3CB,+C%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;B, C&gt; <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"enum\" href=\"enum.ControlFlow.html\" title=\"enum std::ops::ControlFlow\">ControlFlow</a>&lt;B, C&gt;<div class=\"where\">where\n    C: <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a>,\n    B: <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a>,</div></h3></section><section id=\"impl-Unpin-for-ControlFlow%3CB,+C%3E\" class=\"impl\"><a href=\"#impl-Unpin-for-ControlFlow%3CB,+C%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;B, C&gt; <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"enum\" href=\"enum.ControlFlow.html\" title=\"enum std::ops::ControlFlow\">ControlFlow</a>&lt;B, C&gt;<div class=\"where\">where\n    C: <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a>,\n    B: <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a>,</div></h3></section><section id=\"impl-UnwindSafe-for-ControlFlow%3CB,+C%3E\" class=\"impl\"><a href=\"#impl-UnwindSafe-for-ControlFlow%3CB,+C%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;B, C&gt; <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"enum\" href=\"enum.ControlFlow.html\" title=\"enum std::ops::ControlFlow\">ControlFlow</a>&lt;B, C&gt;<div class=\"where\">where\n    C: <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a>,\n    B: <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a>,</div></h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">¬ß</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Any-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a><a href=\"#impl-Any-for-T\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#141\">source</a><a href=\"#method.type_id\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../any/trait.Any.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\">Gets the <code>TypeId</code> of <code>self</code>. <a href=\"../any/trait.Any.html#tymethod.type_id\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Borrow%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208\">source</a><a href=\"#impl-Borrow%3CT%3E-for-T\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#210\">source</a><a href=\"#method.borrow\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216\">source</a><a href=\"#impl-BorrowMut%3CT%3E-for-T\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#217\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765\">source</a><a href=\"#impl-From%3CT%3E-for-T\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768\">source</a><a href=\"#method.from\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the argument unchanged.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Into%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750\">source</a><a href=\"#impl-Into%3CU%3E-for-T\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758\">source</a><a href=\"#method.into\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; U</h4></section></summary><div class=\"docblock\"><p>Calls <code>U::from(self)</code>.</p>\n<p>That is, this conversion is whatever the implementation of\n<code><a href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for U</code> chooses to do.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-ToOwned-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85\">source</a><a href=\"#impl-ToOwned-for-T\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.ToOwned.html\" title=\"trait std::borrow::ToOwned\">ToOwned</a> for T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Owned\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Owned\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../borrow/trait.ToOwned.html#associatedtype.Owned\" class=\"associatedtype\">Owned</a> = T</h4></section></summary><div class=\"docblock\">The resulting type after obtaining ownership.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_owned\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88\">source</a><a href=\"#method.to_owned\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.ToOwned.html#tymethod.to_owned\" class=\"fn\">to_owned</a>(&amp;self) -&gt; T</h4></section></summary><div class=\"docblock\">Creates owned data from borrowed data, usually by cloning. <a href=\"../borrow/trait.ToOwned.html#tymethod.to_owned\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92\">source</a><a href=\"#method.clone_into\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.ToOwned.html#method.clone_into\" class=\"fn\">clone_into</a>(&amp;self, target: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>)</h4></section></summary><div class=\"docblock\">Uses borrowed data to replace owned data, usually by cloning. <a href=\"../borrow/trait.ToOwned.html#method.clone_into\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryFrom%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807\">source</a><a href=\"#impl-TryFrom%3CU%3E-for-T\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812\">source</a><a href=\"#method.try_from\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: U) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, &lt;T as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryInto%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792\">source</a><a href=\"#impl-TryInto%3CU%3E-for-T\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryInto.html\" title=\"trait std::convert::TryInto\">TryInto</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryInto.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797\">source</a><a href=\"#method.try_into\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryInto.html#tymethod.try_into\" class=\"fn\">try_into</a>(self) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;U, &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details></div></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:12:38.394Z"
}