{
	"title": "array - Rust",
	"url": "https://doc.rust-lang.org/std/primitive.array.html",
	"markdown": "# array - Rust\n\n## Primitive Type [array](#)\n\n1.0.0 ·\n\nExpand description\n\nA fixed-size array, denoted `[T; N]`, for the element type, `T`, and the non-negative compile-time constant size, `N`.\n\nThere are two syntactic forms for creating an array:\n\n-   A list with each element, i.e., `[x, y, z]`.\n    \n-   A repeat expression `[expr; N]` where `N` is how many times to repeat `expr` in the array. `expr` must either be:\n    \n    -   A value of a type implementing the [`Copy`](marker/trait.Copy.html \"trait std::marker::Copy\") trait\n    -   A `const` value\n\nNote that `[expr; 0]` is allowed, and produces an empty array. This will still evaluate `expr`, however, and immediately drop the resulting value, so be mindful of side effects.\n\nArrays of _any_ size implement the following traits if the element type allows it:\n\n-   [`Copy`](marker/trait.Copy.html \"trait std::marker::Copy\")\n-   [`Clone`](clone/trait.Clone.html \"trait std::clone::Clone\")\n-   [`Debug`](fmt/trait.Debug.html \"trait std::fmt::Debug\")\n-   [`IntoIterator`](iter/trait.IntoIterator.html \"trait std::iter::IntoIterator\") (implemented for `[T; N]`, `&[T; N]` and `&mut [T; N]`)\n-   [`PartialEq`](cmp/trait.PartialEq.html \"trait std::cmp::PartialEq\"), [`PartialOrd`](cmp/trait.PartialOrd.html \"trait std::cmp::PartialOrd\"), [`Eq`](cmp/trait.Eq.html \"trait std::cmp::Eq\"), [`Ord`](cmp/trait.Ord.html \"trait std::cmp::Ord\")\n-   [`Hash`](hash/trait.Hash.html \"trait std::hash::Hash\")\n-   [`AsRef`](convert/trait.AsRef.html \"trait std::convert::AsRef\"), [`AsMut`](convert/trait.AsMut.html \"trait std::convert::AsMut\")\n-   [`Borrow`](borrow/trait.Borrow.html \"trait std::borrow::Borrow\"), [`BorrowMut`](borrow/trait.BorrowMut.html \"trait std::borrow::BorrowMut\")\n\nArrays of sizes from 0 to 32 (inclusive) implement the [`Default`](default/trait.Default.html \"trait std::default::Default\") trait if the element type allows it. As a stopgap, trait implementations are statically generated up to size 32.\n\nArrays of sizes from 1 to 12 (inclusive) implement [`From<Tuple>`](convert/trait.From.html \"trait std::convert::From\"), where `Tuple` is a homogeneous [tuple](primitive.tuple.html \"primitive tuple\") of appropriate length.\n\nArrays coerce to [slices (`[T]`)](primitive.slice.html \"primitive slice\"), so a slice method may be called on an array. Indeed, this provides most of the API for working with arrays.\n\nSlices have a dynamic size and do not coerce to arrays. Instead, use `slice.try_into().unwrap()` or `<ArrayType>::try_from(slice).unwrap()`.\n\nArray’s `try_from(slice)` implementations (and the corresponding `slice.try_into()` array implementations) succeed if the input slice length is the same as the result array length. They optimize especially well when the optimizer can easily determine the slice length, e.g. `<[u8; 4]>::try_from(&slice[4..8]).unwrap()`. Array implements [TryFrom](convert/trait.TryFrom.html \"trait std::convert::TryFrom\") returning:\n\n-   `[T; N]` copies from the slice’s elements\n-   `&[T; N]` references the original slice’s elements\n-   `&mut [T; N]` references the original slice’s elements\n\nYou can move elements out of an array with a [slice pattern](about:blank/reference/patterns.html#slice-patterns). If you want one element, see [`mem::replace`](mem/fn.replace.html \"fn std::mem::replace\").\n\n## [§](#examples)Examples\n\n```\nlet mut array: [i32; 3] = [0; 3];\n\narray[1] = 1;\narray[2] = 2;\n\nassert_eq!([1, 2], &array[1..]);\n\n// This loop prints: 0 1 2\nfor x in array {\n    print!(\"{x} \");\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+array:+%5Bi32;+3%5D+=+%5B0;+3%5D;%0A++++%0A++++array%5B1%5D+=+1;%0A++++array%5B2%5D+=+2;%0A++++%0A++++assert_eq!(%5B1,+2%5D,+%26array%5B1..%5D);%0A++++%0A++++//+This+loop+prints:+0+1+2%0A++++for+x+in+array+%7B%0A++++++++print!(%22%7Bx%7D+%22);%0A++++%7D%0A%7D&edition=2021)\n\nYou can also iterate over reference to the array’s elements:\n\n```\nlet array: [i32; 3] = [0; 3];\n\nfor x in &array { }\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+array:+%5Bi32;+3%5D+=+%5B0;+3%5D;%0A++++%0A++++for+x+in+%26array+%7B+%7D%0A%7D&edition=2021)\n\nYou can use `<ArrayType>::try_from(slice)` or `slice.try_into()` to get an array from a slice:\n\n```\nlet bytes: [u8; 3] = [1, 0, 2];\nassert_eq!(1, u16::from_le_bytes(<[u8; 2]>::try_from(&bytes[0..2]).unwrap()));\nassert_eq!(512, u16::from_le_bytes(bytes[1..3].try_into().unwrap()));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+bytes:+%5Bu8;+3%5D+=+%5B1,+0,+2%5D;%0A++++assert_eq!(1,+u16::from_le_bytes(%3C%5Bu8;+2%5D%3E::try_from(%26bytes%5B0..2%5D).unwrap()));%0A++++assert_eq!(512,+u16::from_le_bytes(bytes%5B1..3%5D.try_into().unwrap()));%0A%7D&edition=2021)\n\nYou can use a [slice pattern](about:blank/reference/patterns.html#slice-patterns) to move elements out of an array:\n\n```\nfn move_away(_: String) { /* Do interesting things. */ }\n\nlet [john, roa] = [\"John\".to_string(), \"Roa\".to_string()];\nmove_away(john);\nmove_away(roa);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++fn+move_away(_:+String)+%7B+/*+Do+interesting+things.+*/+%7D%0A++++%0A++++let+%5Bjohn,+roa%5D+=+%5B%22John%22.to_string(),+%22Roa%22.to_string()%5D;%0A++++move_away(john);%0A++++move_away(roa);%0A%7D&edition=2021)\n\nArrays can be created from homogeneous tuples of appropriate length:\n\n```\nlet tuple: (u32, u32, u32) = (1, 2, 3);\nlet array: [u32; 3] = tuple.into();\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+tuple:+(u32,+u32,+u32)+=+(1,+2,+3);%0A++++let+array:+%5Bu32;+3%5D+=+tuple.into();%0A%7D&edition=2021)\n\n## [§](#editions)Editions\n\nPrior to Rust 1.53, arrays did not implement [`IntoIterator`](iter/trait.IntoIterator.html \"trait std::iter::IntoIterator\") by value, so the method call `array.into_iter()` auto-referenced into a [slice iterator](about:blank/primitive.slice.html#method.iter \"method slice::iter\"). Right now, the old behavior is preserved in the 2015 and 2018 editions of Rust for compatibility, ignoring [`IntoIterator`](iter/trait.IntoIterator.html \"trait std::iter::IntoIterator\") by value. In the future, the behavior on the 2015 and 2018 edition might be made consistent to the behavior of later editions.\n\n[ⓘ](# \"This example runs with edition 2018\")\n\n```\n// Rust 2015 and 2018:\n\nlet array: [i32; 3] = [0; 3];\n\n// This creates a slice iterator, producing references to each value.\nfor item in array.into_iter().enumerate() {\n    let (i, x): (usize, &i32) = item;\n    println!(\"array[{i}] = {x}\");\n}\n\n// The `array_into_iter` lint suggests this change for future compatibility:\nfor item in array.iter().enumerate() {\n    let (i, x): (usize, &i32) = item;\n    println!(\"array[{i}] = {x}\");\n}\n\n// You can explicitly iterate an array by value using `IntoIterator::into_iter`\nfor item in IntoIterator::into_iter(array).enumerate() {\n    let (i, x): (usize, i32) = item;\n    println!(\"array[{i}] = {x}\");\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A//+Rust+2015+and+2018:%0A%0A%23!%5Ballow(array_into_iter)%5D+//+override+our+%60deny(warnings)%60%0Afn+main()+%7B%0A++++let+array:+%5Bi32;+3%5D+=+%5B0;+3%5D;%0A++++%0A++++//+This+creates+a+slice+iterator,+producing+references+to+each+value.%0A++++for+item+in+array.into_iter().enumerate()+%7B%0A++++++++let+(i,+x):+(usize,+%26i32)+=+item;%0A++++++++println!(%22array%5B%7Bi%7D%5D+=+%7Bx%7D%22);%0A++++%7D%0A++++%0A++++//+The+%60array_into_iter%60+lint+suggests+this+change+for+future+compatibility:%0A++++for+item+in+array.iter().enumerate()+%7B%0A++++++++let+(i,+x):+(usize,+%26i32)+=+item;%0A++++++++println!(%22array%5B%7Bi%7D%5D+=+%7Bx%7D%22);%0A++++%7D%0A++++%0A++++//+You+can+explicitly+iterate+an+array+by+value+using+%60IntoIterator::into_iter%60%0A++++for+item+in+IntoIterator::into_iter(array).enumerate()+%7B%0A++++++++let+(i,+x):+(usize,+i32)+=+item;%0A++++++++println!(%22array%5B%7Bi%7D%5D+=+%7Bx%7D%22);%0A++++%7D%0A%7D&edition=2018)\n\nStarting in the 2021 edition, `array.into_iter()` uses `IntoIterator` normally to iterate by value, and `iter()` should be used to iterate by reference like previous editions.\n\n[ⓘ](# \"This example runs with edition 2021\")\n\n```\n// Rust 2021:\n\nlet array: [i32; 3] = [0; 3];\n\n// This iterates by reference:\nfor item in array.iter().enumerate() {\n    let (i, x): (usize, &i32) = item;\n    println!(\"array[{i}] = {x}\");\n}\n\n// This iterates by value:\nfor item in array.into_iter().enumerate() {\n    let (i, x): (usize, i32) = item;\n    println!(\"array[{i}] = {x}\");\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A//+Rust+2021:%0A%0Afn+main()+%7B%0A++++let+array:+%5Bi32;+3%5D+=+%5B0;+3%5D;%0A++++%0A++++//+This+iterates+by+reference:%0A++++for+item+in+array.iter().enumerate()+%7B%0A++++++++let+(i,+x):+(usize,+%26i32)+=+item;%0A++++++++println!(%22array%5B%7Bi%7D%5D+=+%7Bx%7D%22);%0A++++%7D%0A++++%0A++++//+This+iterates+by+value:%0A++++for+item+in+array.into_iter().enumerate()+%7B%0A++++++++let+(i,+x):+(usize,+i32)+=+item;%0A++++++++println!(%22array%5B%7Bi%7D%5D+=+%7Bx%7D%22);%0A++++%7D%0A%7D&edition=2021)\n\nFuture language versions might start treating the `array.into_iter()` syntax on editions 2015 and 2018 the same as on edition 2021. So code using those older editions should still be written with this change in mind, to prevent breakage in the future. The safest way to accomplish this is to avoid the `into_iter` syntax on those editions. If an edition update is not viable/desired, there are multiple alternatives:\n\n-   use `iter`, equivalent to the old behavior, creating references\n-   use [`IntoIterator::into_iter`](about:blank/iter/trait.IntoIterator.html#tymethod.into_iter \"method std::iter::IntoIterator::into_iter\"), equivalent to the post-2021 behavior (Rust 1.53+)\n-   replace `for ... in array.into_iter() {` with `for ... in array {`, equivalent to the post-2021 behavior (Rust 1.53+)\n\n[ⓘ](# \"This example runs with edition 2018\")\n\n```\n// Rust 2015 and 2018:\n\nlet array: [i32; 3] = [0; 3];\n\n// This iterates by reference:\nfor item in array.iter() {\n    let x: &i32 = item;\n    println!(\"{x}\");\n}\n\n// This iterates by value:\nfor item in IntoIterator::into_iter(array) {\n    let x: i32 = item;\n    println!(\"{x}\");\n}\n\n// This iterates by value:\nfor item in array {\n    let x: i32 = item;\n    println!(\"{x}\");\n}\n\n// IntoIter can also start a chain.\n// This iterates by value:\nfor item in IntoIterator::into_iter(array).enumerate() {\n    let (i, x): (usize, i32) = item;\n    println!(\"array[{i}] = {x}\");\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A//+Rust+2015+and+2018:%0A%0Afn+main()+%7B%0A++++let+array:+%5Bi32;+3%5D+=+%5B0;+3%5D;%0A++++%0A++++//+This+iterates+by+reference:%0A++++for+item+in+array.iter()+%7B%0A++++++++let+x:+%26i32+=+item;%0A++++++++println!(%22%7Bx%7D%22);%0A++++%7D%0A++++%0A++++//+This+iterates+by+value:%0A++++for+item+in+IntoIterator::into_iter(array)+%7B%0A++++++++let+x:+i32+=+item;%0A++++++++println!(%22%7Bx%7D%22);%0A++++%7D%0A++++%0A++++//+This+iterates+by+value:%0A++++for+item+in+array+%7B%0A++++++++let+x:+i32+=+item;%0A++++++++println!(%22%7Bx%7D%22);%0A++++%7D%0A++++%0A++++//+IntoIter+can+also+start+a+chain.%0A++++//+This+iterates+by+value:%0A++++for+item+in+IntoIterator::into_iter(array).enumerate()+%7B%0A++++++++let+(i,+x):+(usize,+i32)+=+item;%0A++++++++println!(%22array%5B%7Bi%7D%5D+=+%7Bx%7D%22);%0A++++%7D%0A%7D&edition=2018)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/array/ascii.rs.html#4)[§](#impl-%5Bu8;+N%5D)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/array/ascii.rs.html#23)\n\n🔬This is a nightly-only experimental API. (`ascii_char` [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nConverts this array of bytes into a array of ASCII characters, or returns `None` if any of the characters is non-ASCII.\n\n##### [§](#examples-1)Examples\n\n```\n#![feature(ascii_char)]\n#![feature(const_option)]\n\nconst HEX_DIGITS: [std::ascii::Char; 16] =\n    *b\"0123456789abcdef\".as_ascii().unwrap();\n\nassert_eq!(HEX_DIGITS[1].as_str(), \"1\");\nassert_eq!(HEX_DIGITS[10].as_str(), \"a\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(ascii_char)%5D%0A%23!%5Bfeature(const_option)%5D%0A%0Afn+main()+%7B%0A++++const+HEX_DIGITS:+%5Bstd::ascii::Char;+16%5D+=%0A++++++++*b%220123456789abcdef%22.as_ascii().unwrap();%0A++++%0A++++assert_eq!(HEX_DIGITS%5B1%5D.as_str(),+%221%22);%0A++++assert_eq!(HEX_DIGITS%5B10%5D.as_str(),+%22a%22);%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/array/ascii.rs.html#41)\n\n🔬This is a nightly-only experimental API. (`ascii_char` [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nConverts this array of bytes into a array of ASCII characters, without checking whether they’re valid.\n\n##### [§](#safety)Safety\n\nEvery byte in the array must be in `0..=127`, or else this is UB.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#455)[§](#impl-%5BT;+N%5D)\n\n1.55.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#498-500)\n\nReturns an array of the same size as `self`, with function `f` applied to each element in order.\n\nIf you don’t necessarily need a new fixed-size array, consider using [`Iterator::map`](about:blank/iter/trait.Iterator.html#method.map \"method std::iter::Iterator::map\") instead.\n\n##### [§](#note-on-performance-and-stack-usage)Note on performance and stack usage\n\nUnfortunately, usages of this method are currently not always optimized as well as they could be. This mainly concerns large arrays, as mapping over small arrays seem to be optimized just fine. Also note that in debug mode (i.e. without any optimizations), this method can use a lot of stack space (a few times the size of the array or more).\n\nTherefore, in performance-critical code, try to avoid using this method on large arrays or check the emitted code. Also try to avoid chained maps (e.g. `arr.map(...).map(...)`).\n\nIn many cases, you can instead use [`Iterator::map`](about:blank/iter/trait.Iterator.html#method.map \"method std::iter::Iterator::map\") by calling `.iter()` or `.into_iter()` on your array. `[T; N]::map` is only necessary if you really need a new array of the same size as the result. Rust’s lazy iterators tend to get optimized very well.\n\n##### [§](#examples-2)Examples\n\n```\nlet x = [1, 2, 3];\nlet y = x.map(|v| v + 1);\nassert_eq!(y, [2, 3, 4]);\n\nlet x = [1, 2, 3];\nlet mut temp = 0;\nlet y = x.map(|v| { temp += 1; v * temp });\nassert_eq!(y, [1, 4, 9]);\n\nlet x = [\"Ferris\", \"Bueller's\", \"Day\", \"Off\"];\nlet y = x.map(|v| v.len());\nassert_eq!(y, [6, 9, 3, 3]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+%5B1,+2,+3%5D;%0A++++let+y+=+x.map(%7Cv%7C+v+%2B+1);%0A++++assert_eq!(y,+%5B2,+3,+4%5D);%0A++++%0A++++let+x+=+%5B1,+2,+3%5D;%0A++++let+mut+temp+=+0;%0A++++let+y+=+x.map(%7Cv%7C+%7B+temp+%2B=+1;+v+*+temp+%7D);%0A++++assert_eq!(y,+%5B1,+4,+9%5D);%0A++++%0A++++let+x+=+%5B%22Ferris%22,+%22Bueller%27s%22,+%22Day%22,+%22Off%22%5D;%0A++++let+y+=+x.map(%7Cv%7C+v.len());%0A++++assert_eq!(y,+%5B6,+9,+3,+3%5D);%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#536-540)\n\n🔬This is a nightly-only experimental API. (`array_try_map` [#79711](https://github.com/rust-lang/rust/issues/79711))\n\nA fallible function `f` applied to each element on array `self` in order to return an array the same size as `self` or the first error encountered.\n\nThe return type of this function depends on the return type of the closure. If you return `Result<T, E>` from the closure, you’ll get a `Result<[T; N], E>`. If you return `Option<T>` from the closure, you’ll get an `Option<[T; N]>`.\n\n##### [§](#examples-3)Examples\n\n```\n#![feature(array_try_map)]\n\nlet a = [\"1\", \"2\", \"3\"];\nlet b = a.try_map(|v| v.parse::<u32>()).unwrap().map(|v| v + 1);\nassert_eq!(b, [2, 3, 4]);\n\nlet a = [\"1\", \"2a\", \"3\"];\nlet b = a.try_map(|v| v.parse::<u32>());\nassert!(b.is_err());\n\nuse std::num::NonZero;\n\nlet z = [1, 2, 0, 3, 4];\nassert_eq!(z.try_map(NonZero::new), None);\n\nlet a = [1, 2, 3];\nlet b = a.try_map(NonZero::new);\nlet c = b.map(|x| x.map(NonZero::get));\nassert_eq!(c, Some(a));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(array_try_map)%5D%0A%0Afn+main()+%7B%0A++++let+a+=+%5B%221%22,+%222%22,+%223%22%5D;%0A++++let+b+=+a.try_map(%7Cv%7C+v.parse::%3Cu32%3E()).unwrap().map(%7Cv%7C+v+%2B+1);%0A++++assert_eq!(b,+%5B2,+3,+4%5D);%0A++++%0A++++let+a+=+%5B%221%22,+%222a%22,+%223%22%5D;%0A++++let+b+=+a.try_map(%7Cv%7C+v.parse::%3Cu32%3E());%0A++++assert!(b.is_err());%0A++++%0A++++use+std::num::NonZero;%0A++++%0A++++let+z+=+%5B1,+2,+0,+3,+4%5D;%0A++++assert_eq!(z.try_map(NonZero::new),+None);%0A++++%0A++++let+a+=+%5B1,+2,+3%5D;%0A++++let+b+=+a.try_map(NonZero::new);%0A++++let+c+=+b.map(%7Cx%7C+x.map(NonZero::get));%0A++++assert_eq!(c,+Some(a));%0A%7D&version=nightly&edition=2021)\n\n1.57.0 (const: 1.57.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#548)\n\nReturns a slice containing the entire array. Equivalent to `&s[..]`.\n\n1.57.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#555)\n\nReturns a mutable slice containing the entire array. Equivalent to `&mut s[..]`.\n\n1.77.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#584)\n\nBorrows each element and returns an array of references with the same size as `self`.\n\n##### [§](#example)Example\n\n```\nlet floats = [3.1, 2.7, -1.0];\nlet float_refs: [&f64; 3] = floats.each_ref();\nassert_eq!(float_refs, [&3.1, &2.7, &-1.0]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+floats+=+%5B3.1,+2.7,+-1.0%5D;%0A++++let+float_refs:+%5B%26f64;+3%5D+=+floats.each_ref();%0A++++assert_eq!(float_refs,+%5B%263.1,+%262.7,+%26-1.0%5D);%0A%7D&edition=2021)\n\nThis method is particularly useful if combined with other methods, like [`map`](#method.map). This way, you can avoid moving the original array if its elements are not [`Copy`](marker/trait.Copy.html \"trait std::marker::Copy\").\n\n```\nlet strings = [\"Ferris\".to_string(), \"♥\".to_string(), \"Rust\".to_string()];\nlet is_ascii = strings.each_ref().map(|s| s.is_ascii());\nassert_eq!(is_ascii, [true, false, true]);\n\n// We can still access the original array: it has not been moved.\nassert_eq!(strings.len(), 3);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+strings+=+%5B%22Ferris%22.to_string(),+%22%E2%99%A5%22.to_string(),+%22Rust%22.to_string()%5D;%0A++++let+is_ascii+=+strings.each_ref().map(%7Cs%7C+s.is_ascii());%0A++++assert_eq!(is_ascii,+%5Btrue,+false,+true%5D);%0A++++%0A++++//+We+can+still+access+the+original+array:+it+has+not+been+moved.%0A++++assert_eq!(strings.len(),+3);%0A%7D&edition=2021)\n\n1.77.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#603)\n\nBorrows each element mutably and returns an array of mutable references with the same size as `self`.\n\n##### [§](#example-1)Example\n\n```\n\nlet mut floats = [3.1, 2.7, -1.0];\nlet float_refs: [&mut f64; 3] = floats.each_mut();\n*float_refs[0] = 0.0;\nassert_eq!(float_refs, [&mut 0.0, &mut 2.7, &mut -1.0]);\nassert_eq!(floats, [0.0, 2.7, -1.0]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%0Afn+main()+%7B%0A++++let+mut+floats+=+%5B3.1,+2.7,+-1.0%5D;%0A++++let+float_refs:+%5B%26mut+f64;+3%5D+=+floats.each_mut();%0A++++*float_refs%5B0%5D+=+0.0;%0A++++assert_eq!(float_refs,+%5B%26mut+0.0,+%26mut+2.7,+%26mut+-1.0%5D);%0A++++assert_eq!(floats,+%5B0.0,+2.7,+-1.0%5D);%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#648)\n\n🔬This is a nightly-only experimental API. (`split_array` [#90091](https://github.com/rust-lang/rust/issues/90091))\n\nDivides one array reference into two at an index.\n\nThe first will contain all indices from `[0, M)` (excluding the index `M` itself) and the second will contain all indices from `[M, N)` (excluding the index `N` itself).\n\n##### [§](#panics)Panics\n\nPanics if `M > N`.\n\n##### [§](#examples-4)Examples\n\n```\n#![feature(split_array)]\n\nlet v = [1, 2, 3, 4, 5, 6];\n\n{\n   let (left, right) = v.split_array_ref::<0>();\n   assert_eq!(left, &[]);\n   assert_eq!(right, &[1, 2, 3, 4, 5, 6]);\n}\n\n{\n    let (left, right) = v.split_array_ref::<2>();\n    assert_eq!(left, &[1, 2]);\n    assert_eq!(right, &[3, 4, 5, 6]);\n}\n\n{\n    let (left, right) = v.split_array_ref::<6>();\n    assert_eq!(left, &[1, 2, 3, 4, 5, 6]);\n    assert_eq!(right, &[]);\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(split_array)%5D%0A%0Afn+main()+%7B%0A++++let+v+=+%5B1,+2,+3,+4,+5,+6%5D;%0A++++%0A++++%7B%0A+++++++let+(left,+right)+=+v.split_array_ref::%3C0%3E();%0A+++++++assert_eq!(left,+%26%5B%5D);%0A+++++++assert_eq!(right,+%26%5B1,+2,+3,+4,+5,+6%5D);%0A++++%7D%0A++++%0A++++%7B%0A++++++++let+(left,+right)+=+v.split_array_ref::%3C2%3E();%0A++++++++assert_eq!(left,+%26%5B1,+2%5D);%0A++++++++assert_eq!(right,+%26%5B3,+4,+5,+6%5D);%0A++++%7D%0A++++%0A++++%7B%0A++++++++let+(left,+right)+=+v.split_array_ref::%3C6%3E();%0A++++++++assert_eq!(left,+%26%5B1,+2,+3,+4,+5,+6%5D);%0A++++++++assert_eq!(right,+%26%5B%5D);%0A++++%7D%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#681)\n\n🔬This is a nightly-only experimental API. (`split_array` [#90091](https://github.com/rust-lang/rust/issues/90091))\n\nDivides one mutable array reference into two at an index.\n\nThe first will contain all indices from `[0, M)` (excluding the index `M` itself) and the second will contain all indices from `[M, N)` (excluding the index `N` itself).\n\n##### [§](#panics-1)Panics\n\nPanics if `M > N`.\n\n##### [§](#examples-5)Examples\n\n```\n#![feature(split_array)]\n\nlet mut v = [1, 0, 3, 0, 5, 6];\nlet (left, right) = v.split_array_mut::<2>();\nassert_eq!(left, &mut [1, 0][..]);\nassert_eq!(right, &mut [3, 0, 5, 6]);\nleft[1] = 2;\nright[1] = 4;\nassert_eq!(v, [1, 2, 3, 4, 5, 6]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(split_array)%5D%0A%0Afn+main()+%7B%0A++++let+mut+v+=+%5B1,+0,+3,+0,+5,+6%5D;%0A++++let+(left,+right)+=+v.split_array_mut::%3C2%3E();%0A++++assert_eq!(left,+%26mut+%5B1,+0%5D%5B..%5D);%0A++++assert_eq!(right,+%26mut+%5B3,+0,+5,+6%5D);%0A++++left%5B1%5D+=+2;%0A++++right%5B1%5D+=+4;%0A++++assert_eq!(v,+%5B1,+2,+3,+4,+5,+6%5D);%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#726)\n\n🔬This is a nightly-only experimental API. (`split_array` [#90091](https://github.com/rust-lang/rust/issues/90091))\n\nDivides one array reference into two at an index from the end.\n\nThe first will contain all indices from `[0, N - M)` (excluding the index `N - M` itself) and the second will contain all indices from `[N - M, N)` (excluding the index `N` itself).\n\n##### [§](#panics-2)Panics\n\nPanics if `M > N`.\n\n##### [§](#examples-6)Examples\n\n```\n#![feature(split_array)]\n\nlet v = [1, 2, 3, 4, 5, 6];\n\n{\n   let (left, right) = v.rsplit_array_ref::<0>();\n   assert_eq!(left, &[1, 2, 3, 4, 5, 6]);\n   assert_eq!(right, &[]);\n}\n\n{\n    let (left, right) = v.rsplit_array_ref::<2>();\n    assert_eq!(left, &[1, 2, 3, 4]);\n    assert_eq!(right, &[5, 6]);\n}\n\n{\n    let (left, right) = v.rsplit_array_ref::<6>();\n    assert_eq!(left, &[]);\n    assert_eq!(right, &[1, 2, 3, 4, 5, 6]);\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(split_array)%5D%0A%0Afn+main()+%7B%0A++++let+v+=+%5B1,+2,+3,+4,+5,+6%5D;%0A++++%0A++++%7B%0A+++++++let+(left,+right)+=+v.rsplit_array_ref::%3C0%3E();%0A+++++++assert_eq!(left,+%26%5B1,+2,+3,+4,+5,+6%5D);%0A+++++++assert_eq!(right,+%26%5B%5D);%0A++++%7D%0A++++%0A++++%7B%0A++++++++let+(left,+right)+=+v.rsplit_array_ref::%3C2%3E();%0A++++++++assert_eq!(left,+%26%5B1,+2,+3,+4%5D);%0A++++++++assert_eq!(right,+%26%5B5,+6%5D);%0A++++%7D%0A++++%0A++++%7B%0A++++++++let+(left,+right)+=+v.rsplit_array_ref::%3C6%3E();%0A++++++++assert_eq!(left,+%26%5B%5D);%0A++++++++assert_eq!(right,+%26%5B1,+2,+3,+4,+5,+6%5D);%0A++++%7D%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#759)\n\n🔬This is a nightly-only experimental API. (`split_array` [#90091](https://github.com/rust-lang/rust/issues/90091))\n\nDivides one mutable array reference into two at an index from the end.\n\nThe first will contain all indices from `[0, N - M)` (excluding the index `N - M` itself) and the second will contain all indices from `[N - M, N)` (excluding the index `N` itself).\n\n##### [§](#panics-3)Panics\n\nPanics if `M > N`.\n\n##### [§](#examples-7)Examples\n\n```\n#![feature(split_array)]\n\nlet mut v = [1, 0, 3, 0, 5, 6];\nlet (left, right) = v.rsplit_array_mut::<4>();\nassert_eq!(left, &mut [1, 0]);\nassert_eq!(right, &mut [3, 0, 5, 6][..]);\nleft[1] = 2;\nright[1] = 4;\nassert_eq!(v, [1, 2, 3, 4, 5, 6]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(split_array)%5D%0A%0Afn+main()+%7B%0A++++let+mut+v+=+%5B1,+0,+3,+0,+5,+6%5D;%0A++++let+(left,+right)+=+v.rsplit_array_mut::%3C4%3E();%0A++++assert_eq!(left,+%26mut+%5B1,+0%5D);%0A++++assert_eq!(right,+%26mut+%5B3,+0,+5,+6%5D%5B..%5D);%0A++++left%5B1%5D+=+2;%0A++++right%5B1%5D+=+4;%0A++++assert_eq!(v,+%5B1,+2,+3,+4,+5,+6%5D);%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/mem/maybe_uninit.rs.html#1421)[§](#impl-%5BMaybeUninit%3CT%3E;+N%5D)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/mem/maybe_uninit.rs.html#1435)\n\n🔬This is a nightly-only experimental API. (`maybe_uninit_uninit_array_transpose` [#96097](https://github.com/rust-lang/rust/issues/96097))\n\nTransposes a `[MaybeUninit<T>; N]` into a `MaybeUninit<[T; N]>`.\n\n##### [§](#examples-8)Examples\n\n```\n#![feature(maybe_uninit_uninit_array_transpose)]\n\nlet data = [MaybeUninit::<u8>::uninit(); 1000];\nlet data: MaybeUninit<[u8; 1000]> = data.transpose();\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(maybe_uninit_uninit_array_transpose)%5D%0Afn+main()+%7B%0A++++use+std::mem::MaybeUninit;%0A++++%0A++++let+data+=+%5BMaybeUninit::%3Cu8%3E::uninit();+1000%5D;%0A++++let+data:+MaybeUninit%3C%5Bu8;+1000%5D%3E+=+data.transpose();%0A%7D&version=nightly&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#167)[§](#impl-AsMut%3C%5BT%5D%3E-for-%5BT;+N%5D)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#169)[§](#method.as_mut-1)\n\nConverts this type into a mutable reference of the (usually inferred) input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#984-987)[§](#impl-AsMut%3C%5BT;+N%5D%3E-for-Simd%3CT,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#990)[§](#method.as_mut)\n\nConverts this type into a mutable reference of the (usually inferred) input type.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#159)[§](#impl-AsRef%3C%5BT%5D%3E-for-%5BT;+N%5D)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#161)[§](#method.as_ref-1)\n\nConverts this type into a shared reference of the (usually inferred) input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#973-976)[§](#impl-AsRef%3C%5BT;+N%5D%3E-for-Simd%3CT,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#979)[§](#method.as_ref)\n\nConverts this type into a shared reference of the (usually inferred) input type.\n\n1.4.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#175)[§](#impl-Borrow%3C%5BT%5D%3E-for-%5BT;+N%5D)\n\n1.4.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#182)[§](#impl-BorrowMut%3C%5BT%5D%3E-for-%5BT;+N%5D)\n\n1.58.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#401)[§](#impl-Clone-for-%5BT;+N%5D)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#313)[§](#impl-Debug-for-%5BT;+N%5D)\n\n1.4.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453)[§](#impl-Default-for-%5BT;+32%5D)\n\n1.4.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453)[§](#impl-Default-for-%5BT;+core::::array::%7Bimpl%2330%7D::%7Bconstant%230%7D%5D)\n\n1.4.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453)[§](#impl-Default-for-%5BT;+core::::array::%7Bimpl%2331%7D::%7Bconstant%230%7D%5D)\n\n1.4.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453)[§](#impl-Default-for-%5BT;+core::::array::%7Bimpl%2332%7D::%7Bconstant%230%7D%5D)\n\n1.4.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453)[§](#impl-Default-for-%5BT;+core::::array::%7Bimpl%2333%7D::%7Bconstant%230%7D%5D)\n\n1.4.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453)[§](#impl-Default-for-%5BT;+core::::array::%7Bimpl%2334%7D::%7Bconstant%230%7D%5D)\n\n1.4.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453)[§](#impl-Default-for-%5BT;+core::::array::%7Bimpl%2335%7D::%7Bconstant%230%7D%5D)\n\n1.4.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453)[§](#impl-Default-for-%5BT;+core::::array::%7Bimpl%2336%7D::%7Bconstant%230%7D%5D)\n\n1.4.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453)[§](#impl-Default-for-%5BT;+core::::array::%7Bimpl%2337%7D::%7Bconstant%230%7D%5D)\n\n1.4.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453)[§](#impl-Default-for-%5BT;+core::::array::%7Bimpl%2338%7D::%7Bconstant%230%7D%5D)\n\n1.4.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453)[§](#impl-Default-for-%5BT;+core::::array::%7Bimpl%2339%7D::%7Bconstant%230%7D%5D)\n\n1.4.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453)[§](#impl-Default-for-%5BT;+core::::array::%7Bimpl%2340%7D::%7Bconstant%230%7D%5D)\n\n1.4.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453)[§](#impl-Default-for-%5BT;+core::::array::%7Bimpl%2341%7D::%7Bconstant%230%7D%5D)\n\n1.4.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453)[§](#impl-Default-for-%5BT;+core::::array::%7Bimpl%2342%7D::%7Bconstant%230%7D%5D)\n\n1.4.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453)[§](#impl-Default-for-%5BT;+core::::array::%7Bimpl%2343%7D::%7Bconstant%230%7D%5D)\n\n1.4.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453)[§](#impl-Default-for-%5BT;+core::::array::%7Bimpl%2344%7D::%7Bconstant%230%7D%5D)\n\n1.4.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453)[§](#impl-Default-for-%5BT;+core::::array::%7Bimpl%2345%7D::%7Bconstant%230%7D%5D)\n\n1.4.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453)[§](#impl-Default-for-%5BT;+core::::array::%7Bimpl%2346%7D::%7Bconstant%230%7D%5D)\n\n1.4.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453)[§](#impl-Default-for-%5BT;+core::::array::%7Bimpl%2347%7D::%7Bconstant%230%7D%5D)\n\n1.4.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453)[§](#impl-Default-for-%5BT;+core::::array::%7Bimpl%2348%7D::%7Bconstant%230%7D%5D)\n\n1.4.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453)[§](#impl-Default-for-%5BT;+core::::array::%7Bimpl%2349%7D::%7Bconstant%230%7D%5D)\n\n1.4.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453)[§](#impl-Default-for-%5BT;+core::::array::%7Bimpl%2350%7D::%7Bconstant%230%7D%5D)\n\n1.4.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453)[§](#impl-Default-for-%5BT;+core::::array::%7Bimpl%2351%7D::%7Bconstant%230%7D%5D)\n\n1.4.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453)[§](#impl-Default-for-%5BT;+core::::array::%7Bimpl%2352%7D::%7Bconstant%230%7D%5D)\n\n1.4.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453)[§](#impl-Default-for-%5BT;+core::::array::%7Bimpl%2353%7D::%7Bconstant%230%7D%5D)\n\n1.4.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453)[§](#impl-Default-for-%5BT;+core::::array::%7Bimpl%2354%7D::%7Bconstant%230%7D%5D)\n\n1.4.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453)[§](#impl-Default-for-%5BT;+core::::array::%7Bimpl%2355%7D::%7Bconstant%230%7D%5D)\n\n1.4.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453)[§](#impl-Default-for-%5BT;+core::::array::%7Bimpl%2356%7D::%7Bconstant%230%7D%5D)\n\n1.4.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453)[§](#impl-Default-for-%5BT;+core::::array::%7Bimpl%2357%7D::%7Bconstant%230%7D%5D)\n\n1.4.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453)[§](#impl-Default-for-%5BT;+core::::array::%7Bimpl%2358%7D::%7Bconstant%230%7D%5D)\n\n1.4.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453)[§](#impl-Default-for-%5BT;+core::::array::%7Bimpl%2359%7D::%7Bconstant%230%7D%5D)\n\n1.4.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453)[§](#impl-Default-for-%5BT;+core::::array::%7Bimpl%2360%7D::%7Bconstant%230%7D%5D)\n\n1.4.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453)[§](#impl-Default-for-%5BT;+core::::array::%7Bimpl%2361%7D::%7Bconstant%230%7D%5D)\n\n1.77.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/cow.rs.html#19)[§](#impl-From%3C%26%5BT;+N%5D%3E-for-Cow%3C'a,+%5BT%5D%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/cow.rs.html#26)[§](#method.from-42)\n\nCreates a [`Borrowed`](about:blank/borrow/enum.Cow.html#variant.Borrowed \"variant std::borrow::Cow::Borrowed\") variant of [`Cow`](borrow/enum.Cow.html \"enum std::borrow::Cow\") from a reference to an array.\n\nThis conversion does not allocate or clone the data.\n\n1.74.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3374)[§](#impl-From%3C%26%5BT;+N%5D%3E-for-Vec%3CT%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3382)[§](#method.from-34)\n\nAllocate a `Vec<T>` and fill it by cloning `s`’s items.\n\n##### [§](#examples-19)Examples\n\n```\nassert_eq!(Vec::from(&[1, 2, 3]), vec![1, 2, 3]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(Vec::from(%26%5B1,+2,+3%5D),+vec!%5B1,+2,+3%5D);%0A%7D&edition=2021)\n\n1.74.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3389)[§](#impl-From%3C%26mut+%5BT;+N%5D%3E-for-Vec%3CT%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3397)[§](#method.from-44)\n\nAllocate a `Vec<T>` and fill it by cloning `s`’s items.\n\n##### [§](#examples-21)Examples\n\n```\nassert_eq!(Vec::from(&mut [1, 2, 3]), vec![1, 2, 3]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(Vec::from(%26mut+%5B1,+2,+3%5D),+vec!%5B1,+2,+3%5D);%0A%7D&edition=2021)\n\n1.56.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/map.rs.html#2338)[§](#impl-From%3C%5B(K,+V);+N%5D%3E-for-BTreeMap%3CK,+V%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/map.rs.html#2348)[§](#method.from-38)\n\nConverts a `[(K, V); N]` into a `BTreeMap<(K, V)>`.\n\n```\nuse std::collections::BTreeMap;\n\nlet map1 = BTreeMap::from([(1, 2), (3, 4)]);\nlet map2: BTreeMap<_, _> = [(1, 2), (3, 4)].into();\nassert_eq!(map1, map2);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::BTreeMap;%0A++++%0A++++let+map1+=+BTreeMap::from(%5B(1,+2),+(3,+4)%5D);%0A++++let+map2:+BTreeMap%3C_,+_%3E+=+%5B(1,+2),+(3,+4)%5D.into();%0A++++assert_eq!(map1,+map2);%0A%7D&edition=2021)\n\n1.56.0 · [source](about:blank/src/std/collections/hash/map.rs.html#1360-1376)[§](#impl-From%3C%5B(K,+V);+N%5D%3E-for-HashMap%3CK,+V%3E)\n\n[source](about:blank/src/std/collections/hash/map.rs.html#1373-1375)[§](#method.from-47)\n\n##### [§](#examples-24)Examples\n\n```\nuse std::collections::HashMap;\n\nlet map1 = HashMap::from([(1, 2), (3, 4)]);\nlet map2: HashMap<_, _> = [(1, 2), (3, 4)].into();\nassert_eq!(map1, map2);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashMap;%0A++++%0A++++let+map1+=+HashMap::from(%5B(1,+2),+(3,+4)%5D);%0A++++let+map2:+HashMap%3C_,+_%3E+=+%5B(1,+2),+(3,+4)%5D.into();%0A++++assert_eq!(map1,+map2);%0A%7D&edition=2021)\n\n1.71.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#impl-From%3C%5BT;+1%5D%3E-for-(T,))\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#method.from-27)\n\nConverts to this type from the input type.\n\n1.71.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#impl-From%3C%5BT;+10%5D%3E-for-(T,+T,+T,+T,+T,+T,+T,+T,+T,+T))\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#method.from-7)\n\nConverts to this type from the input type.\n\n1.71.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#impl-From%3C%5BT;+11%5D%3E-for-(T,+T,+T,+T,+T,+T,+T,+T,+T,+T,+T))\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#method.from-17)\n\nConverts to this type from the input type.\n\n1.71.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#impl-From%3C%5BT;+12%5D%3E-for-(T,+T,+T,+T,+T,+T,+T,+T,+T,+T,+T,+T))\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#method.from-22)\n\nConverts to this type from the input type.\n\n1.71.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#impl-From%3C%5BT;+2%5D%3E-for-(T,+T))\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#method.from-15)\n\nConverts to this type from the input type.\n\n1.71.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#impl-From%3C%5BT;+3%5D%3E-for-(T,+T,+T))\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#method.from-30)\n\nConverts to this type from the input type.\n\n1.71.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#impl-From%3C%5BT;+4%5D%3E-for-(T,+T,+T,+T))\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#method.from-31)\n\nConverts to this type from the input type.\n\n1.71.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#impl-From%3C%5BT;+5%5D%3E-for-(T,+T,+T,+T,+T))\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#method.from-2)\n\nConverts to this type from the input type.\n\n1.71.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#impl-From%3C%5BT;+6%5D%3E-for-(T,+T,+T,+T,+T,+T))\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#method.from-13)\n\nConverts to this type from the input type.\n\n1.71.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#impl-From%3C%5BT;+7%5D%3E-for-(T,+T,+T,+T,+T,+T,+T))\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#method.from-14)\n\nConverts to this type from the input type.\n\n1.71.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#impl-From%3C%5BT;+8%5D%3E-for-(T,+T,+T,+T,+T,+T,+T,+T))\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#method.from-8)\n\nConverts to this type from the input type.\n\n1.71.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#impl-From%3C%5BT;+9%5D%3E-for-(T,+T,+T,+T,+T,+T,+T,+T,+T))\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#method.from-24)\n\nConverts to this type from the input type.\n\n1.74.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/sync.rs.html#3499)[§](#impl-From%3C%5BT;+N%5D%3E-for-Arc%3C%5BT%5D%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/sync.rs.html#3513)[§](#method.from-40)\n\nConverts a [`[T; N]`](primitive.array.html \"primitive array\") into an `Arc<[T]>`.\n\nThe conversion moves the array into a newly allocated `Arc`.\n\n##### [§](#example-2)Example\n\n```\nlet original: [i32; 3] = [1, 2, 3];\nlet shared: Arc<[i32]> = Arc::from(original);\nassert_eq!(&[1, 2, 3], &shared[..]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::Arc;%0A++++let+original:+%5Bi32;+3%5D+=+%5B1,+2,+3%5D;%0A++++let+shared:+Arc%3C%5Bi32%5D%3E+=+Arc::from(original);%0A++++assert_eq!(%26%5B1,+2,+3%5D,+%26shared%5B..%5D);%0A%7D&edition=2021)\n\n1.56.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#1212)[§](#impl-From%3C%5BT;+N%5D%3E-for-BTreeSet%3CT%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#1222)[§](#method.from-35)\n\nConverts a `[T; N]` into a `BTreeSet<T>`.\n\n```\nuse std::collections::BTreeSet;\n\nlet set1 = BTreeSet::from([1, 2, 3, 4]);\nlet set2: BTreeSet<_> = [1, 2, 3, 4].into();\nassert_eq!(set1, set2);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::BTreeSet;%0A++++%0A++++let+set1+=+BTreeSet::from(%5B1,+2,+3,+4%5D);%0A++++let+set2:+BTreeSet%3C_%3E+=+%5B1,+2,+3,+4%5D.into();%0A++++assert_eq!(set1,+set2);%0A%7D&edition=2021)\n\n1.56.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/binary_heap/mod.rs.html#1780)[§](#impl-From%3C%5BT;+N%5D%3E-for-BinaryHeap%3CT%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/binary_heap/mod.rs.html#1790)[§](#method.from-37)\n\n```\nuse std::collections::BinaryHeap;\n\nlet mut h1 = BinaryHeap::from([1, 4, 2, 3]);\nlet mut h2: BinaryHeap<_> = [1, 4, 2, 3].into();\nwhile let Some((a, b)) = h1.pop().zip(h2.pop()) {\n    assert_eq!(a, b);\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::BinaryHeap;%0A++++%0A++++let+mut+h1+=+BinaryHeap::from(%5B1,+4,+2,+3%5D);%0A++++let+mut+h2:+BinaryHeap%3C_%3E+=+%5B1,+4,+2,+3%5D.into();%0A++++while+let+Some((a,+b))+=+h1.pop().zip(h2.pop())+%7B%0A++++++++assert_eq!(a,+b);%0A++++%7D%0A%7D&edition=2021)\n\n1.45.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1682)[§](#impl-From%3C%5BT;+N%5D%3E-for-Box%3C%5BT%5D%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1693)[§](#method.from-45)\n\nConverts a `[T; N]` into a `Box<[T]>`\n\nThis conversion moves the array to newly heap-allocated memory.\n\n##### [§](#examples-22)Examples\n\n```\nlet boxed: Box<[u8]> = Box::from([4, 2]);\nprintln!(\"{boxed:?}\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+boxed:+Box%3C%5Bu8%5D%3E+=+Box::from(%5B4,+2%5D);%0A++++println!(%22%7Bboxed:?%7D%22);%0A%7D&edition=2021)\n\n1.56.0 · [source](about:blank/src/std/collections/hash/set.rs.html#1051-1067)[§](#impl-From%3C%5BT;+N%5D%3E-for-HashSet%3CT%3E)\n\n[source](about:blank/src/std/collections/hash/set.rs.html#1064-1066)[§](#method.from-46)\n\n##### [§](#examples-23)Examples\n\n```\nuse std::collections::HashSet;\n\nlet set1 = HashSet::from([1, 2, 3, 4]);\nlet set2: HashSet<_> = [1, 2, 3, 4].into();\nassert_eq!(set1, set2);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashSet;%0A++++%0A++++let+set1+=+HashSet::from(%5B1,+2,+3,+4%5D);%0A++++let+set2:+HashSet%3C_%3E+=+%5B1,+2,+3,+4%5D.into();%0A++++assert_eq!(set1,+set2);%0A%7D&edition=2021)\n\n1.56.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#2167)[§](#impl-From%3C%5BT;+N%5D%3E-for-LinkedList%3CT%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#2177)[§](#method.from-41)\n\nConverts a `[T; N]` into a `LinkedList<T>`.\n\n```\nuse std::collections::LinkedList;\n\nlet list1 = LinkedList::from([1, 2, 3, 4]);\nlet list2: LinkedList<_> = [1, 2, 3, 4].into();\nassert_eq!(list1, list2);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::LinkedList;%0A++++%0A++++let+list1+=+LinkedList::from(%5B1,+2,+3,+4%5D);%0A++++let+list2:+LinkedList%3C_%3E+=+%5B1,+2,+3,+4%5D.into();%0A++++assert_eq!(list1,+list2);%0A%7D&edition=2021)\n\n1.74.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/rc.rs.html#2540)[§](#impl-From%3C%5BT;+N%5D%3E-for-Rc%3C%5BT%5D%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/rc.rs.html#2554)[§](#method.from-43)\n\nConverts a [`[T; N]`](primitive.array.html \"primitive array\") into an `Rc<[T]>`.\n\nThe conversion moves the array into a newly allocated `Rc`.\n\n##### [§](#example-3)Example\n\n```\nlet original: [i32; 3] = [1, 2, 3];\nlet shared: Rc<[i32]> = Rc::from(original);\nassert_eq!(&[1, 2, 3], &shared[..]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::rc::Rc;%0A++++let+original:+%5Bi32;+3%5D+=+%5B1,+2,+3%5D;%0A++++let+shared:+Rc%3C%5Bi32%5D%3E+=+Rc::from(original);%0A++++assert_eq!(%26%5B1,+2,+3%5D,+%26shared%5B..%5D);%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#1019-1022)[§](#impl-From%3C%5BT;+N%5D%3E-for-Simd%3CT,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#1025)[§](#method.from-9)\n\nConverts to this type from the input type.\n\n1.44.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3404)[§](#impl-From%3C%5BT;+N%5D%3E-for-Vec%3CT%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3413)[§](#method.from-36)\n\nAllocate a `Vec<T>` and move `s`’s items into it.\n\n##### [§](#examples-20)Examples\n\n```\nassert_eq!(Vec::from([1, 2, 3]), vec![1, 2, 3]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(Vec::from(%5B1,+2,+3%5D),+vec!%5B1,+2,+3%5D);%0A%7D&edition=2021)\n\n1.56.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#3007)[§](#impl-From%3C%5BT;+N%5D%3E-for-VecDeque%3CT%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#3017)[§](#method.from-39)\n\nConverts a `[T; N]` into a `VecDeque<T>`.\n\n```\nuse std::collections::VecDeque;\n\nlet deq1 = VecDeque::from([1, 2, 3, 4]);\nlet deq2: VecDeque<_> = [1, 2, 3, 4].into();\nassert_eq!(deq1, deq2);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+deq1+=+VecDeque::from(%5B1,+2,+3,+4%5D);%0A++++let+deq2:+VecDeque%3C_%3E+=+%5B1,+2,+3,+4%5D.into();%0A++++assert_eq!(deq1,+deq2);%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#418-421)[§](#impl-From%3C%5Bbool;+N%5D%3E-for-Mask%3CT,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#424)[§](#method.from-3)\n\nConverts to this type from the input type.\n\n1.17.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#2171)[§](#impl-From%3C%5Bu16;+8%5D%3E-for-IpAddr)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#2194)[§](#method.from-26)\n\nCreates an `IpAddr::V6` from an eight element 16-bit array.\n\n##### [§](#examples-12)Examples\n\n```\nuse std::net::{IpAddr, Ipv6Addr};\n\nlet addr = IpAddr::from([\n    525u16, 524u16, 523u16, 522u16,\n    521u16, 520u16, 519u16, 518u16,\n]);\nassert_eq!(\n    IpAddr::V6(Ipv6Addr::new(\n        0x20d, 0x20c,\n        0x20b, 0x20a,\n        0x209, 0x208,\n        0x207, 0x206\n    )),\n    addr\n);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::%7BIpAddr,+Ipv6Addr%7D;%0A++++%0A++++let+addr+=+IpAddr::from(%5B%0A++++++++525u16,+524u16,+523u16,+522u16,%0A++++++++521u16,+520u16,+519u16,+518u16,%0A++++%5D);%0A++++assert_eq!(%0A++++++++IpAddr::V6(Ipv6Addr::new(%0A++++++++++++0x20d,+0x20c,%0A++++++++++++0x20b,+0x20a,%0A++++++++++++0x209,+0x208,%0A++++++++++++0x207,+0x206%0A++++++++)),%0A++++++++addr%0A++++);%0A%7D&edition=2021)\n\n1.16.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#2112)[§](#impl-From%3C%5Bu16;+8%5D%3E-for-Ipv6Addr)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#2135)[§](#method.from-19)\n\nCreates an `Ipv6Addr` from an eight element 16-bit array.\n\n##### [§](#examples-10)Examples\n\n```\nuse std::net::Ipv6Addr;\n\nlet addr = Ipv6Addr::from([\n    525u16, 524u16, 523u16, 522u16,\n    521u16, 520u16, 519u16, 518u16,\n]);\nassert_eq!(\n    Ipv6Addr::new(\n        0x20d, 0x20c,\n        0x20b, 0x20a,\n        0x209, 0x208,\n        0x207, 0x206\n    ),\n    addr\n);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::Ipv6Addr;%0A++++%0A++++let+addr+=+Ipv6Addr::from(%5B%0A++++++++525u16,+524u16,+523u16,+522u16,%0A++++++++521u16,+520u16,+519u16,+518u16,%0A++++%5D);%0A++++assert_eq!(%0A++++++++Ipv6Addr::new(%0A++++++++++++0x20d,+0x20c,%0A++++++++++++0x20b,+0x20a,%0A++++++++++++0x209,+0x208,%0A++++++++++++0x207,+0x206%0A++++++++),%0A++++++++addr%0A++++);%0A%7D&edition=2021)\n\n1.17.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#2142)[§](#impl-From%3C%5Bu8;+16%5D%3E-for-IpAddr)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#2165)[§](#method.from)\n\nCreates an `IpAddr::V6` from a sixteen element byte array.\n\n##### [§](#examples-9)Examples\n\n```\nuse std::net::{IpAddr, Ipv6Addr};\n\nlet addr = IpAddr::from([\n    25u8, 24u8, 23u8, 22u8, 21u8, 20u8, 19u8, 18u8,\n    17u8, 16u8, 15u8, 14u8, 13u8, 12u8, 11u8, 10u8,\n]);\nassert_eq!(\n    IpAddr::V6(Ipv6Addr::new(\n        0x1918, 0x1716,\n        0x1514, 0x1312,\n        0x1110, 0x0f0e,\n        0x0d0c, 0x0b0a\n    )),\n    addr\n);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::%7BIpAddr,+Ipv6Addr%7D;%0A++++%0A++++let+addr+=+IpAddr::from(%5B%0A++++++++25u8,+24u8,+23u8,+22u8,+21u8,+20u8,+19u8,+18u8,%0A++++++++17u8,+16u8,+15u8,+14u8,+13u8,+12u8,+11u8,+10u8,%0A++++%5D);%0A++++assert_eq!(%0A++++++++IpAddr::V6(Ipv6Addr::new(%0A++++++++++++0x1918,+0x1716,%0A++++++++++++0x1514,+0x1312,%0A++++++++++++0x1110,+0x0f0e,%0A++++++++++++0x0d0c,+0x0b0a%0A++++++++)),%0A++++++++addr%0A++++);%0A%7D&edition=2021)\n\n1.9.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#2083)[§](#impl-From%3C%5Bu8;+16%5D%3E-for-Ipv6Addr)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#2106)[§](#method.from-29)\n\nCreates an `Ipv6Addr` from a sixteen element byte array.\n\n##### [§](#examples-13)Examples\n\n```\nuse std::net::Ipv6Addr;\n\nlet addr = Ipv6Addr::from([\n    25u8, 24u8, 23u8, 22u8, 21u8, 20u8, 19u8, 18u8,\n    17u8, 16u8, 15u8, 14u8, 13u8, 12u8, 11u8, 10u8,\n]);\nassert_eq!(\n    Ipv6Addr::new(\n        0x1918, 0x1716,\n        0x1514, 0x1312,\n        0x1110, 0x0f0e,\n        0x0d0c, 0x0b0a\n    ),\n    addr\n);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::Ipv6Addr;%0A++++%0A++++let+addr+=+Ipv6Addr::from(%5B%0A++++++++25u8,+24u8,+23u8,+22u8,+21u8,+20u8,+19u8,+18u8,%0A++++++++17u8,+16u8,+15u8,+14u8,+13u8,+12u8,+11u8,+10u8,%0A++++%5D);%0A++++assert_eq!(%0A++++++++Ipv6Addr::new(%0A++++++++++++0x1918,+0x1716,%0A++++++++++++0x1514,+0x1312,%0A++++++++++++0x1110,+0x0f0e,%0A++++++++++++0x0d0c,+0x0b0a%0A++++++++),%0A++++++++addr%0A++++);%0A%7D&edition=2021)\n\n1.17.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#1181)[§](#impl-From%3C%5Bu8;+4%5D%3E-for-IpAddr)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#1193)[§](#method.from-21)\n\nCreates an `IpAddr::V4` from a four element byte array.\n\n##### [§](#examples-11)Examples\n\n```\nuse std::net::{IpAddr, Ipv4Addr};\n\nlet addr = IpAddr::from([13u8, 12u8, 11u8, 10u8]);\nassert_eq!(IpAddr::V4(Ipv4Addr::new(13, 12, 11, 10)), addr);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::%7BIpAddr,+Ipv4Addr%7D;%0A++++%0A++++let+addr+=+IpAddr::from(%5B13u8,+12u8,+11u8,+10u8%5D);%0A++++assert_eq!(IpAddr::V4(Ipv4Addr::new(13,+12,+11,+10)),+addr);%0A%7D&edition=2021)\n\n1.9.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#1163)[§](#impl-From%3C%5Bu8;+4%5D%3E-for-Ipv4Addr)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#1175)[§](#method.from-32)\n\nCreates an `Ipv4Addr` from a four element byte array.\n\n##### [§](#examples-14)Examples\n\n```\nuse std::net::Ipv4Addr;\n\nlet addr = Ipv4Addr::from([13u8, 12u8, 11u8, 10u8]);\nassert_eq!(Ipv4Addr::new(13, 12, 11, 10), addr);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::Ipv4Addr;%0A++++%0A++++let+addr+=+Ipv4Addr::from(%5B13u8,+12u8,+11u8,+10u8%5D);%0A++++assert_eq!(Ipv4Addr::new(13,+12,+11,+10),+addr);%0A%7D&edition=2021)\n\n1.71.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#impl-From%3C(T,)%3E-for-%5BT;+1%5D)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#method.from-1)\n\nConverts to this type from the input type.\n\n1.71.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#impl-From%3C(T,+T)%3E-for-%5BT;+2%5D)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#method.from-6)\n\nConverts to this type from the input type.\n\n1.71.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#impl-From%3C(T,+T,+T)%3E-for-%5BT;+3%5D)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#method.from-5)\n\nConverts to this type from the input type.\n\n1.71.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#impl-From%3C(T,+T,+T,+T)%3E-for-%5BT;+4%5D)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#method.from-28)\n\nConverts to this type from the input type.\n\n1.71.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#impl-From%3C(T,+T,+T,+T,+T)%3E-for-%5BT;+5%5D)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#method.from-16)\n\nConverts to this type from the input type.\n\n1.71.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#impl-From%3C(T,+T,+T,+T,+T,+T)%3E-for-%5BT;+6%5D)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#method.from-10)\n\nConverts to this type from the input type.\n\n1.71.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#impl-From%3C(T,+T,+T,+T,+T,+T,+T)%3E-for-%5BT;+7%5D)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#method.from-4)\n\nConverts to this type from the input type.\n\n1.71.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#impl-From%3C(T,+T,+T,+T,+T,+T,+T,+T)%3E-for-%5BT;+8%5D)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#method.from-25)\n\nConverts to this type from the input type.\n\n1.71.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#impl-From%3C(T,+T,+T,+T,+T,+T,+T,+T,+T)%3E-for-%5BT;+9%5D)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#method.from-12)\n\nConverts to this type from the input type.\n\n1.71.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#impl-From%3C(T,+T,+T,+T,+T,+T,+T,+T,+T,+T)%3E-for-%5BT;+10%5D)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#method.from-23)\n\nConverts to this type from the input type.\n\n1.71.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#impl-From%3C(T,+T,+T,+T,+T,+T,+T,+T,+T,+T,+T)%3E-for-%5BT;+11%5D)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#method.from-33)\n\nConverts to this type from the input type.\n\n1.71.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#impl-From%3C(T,+T,+T,+T,+T,+T,+T,+T,+T,+T,+T,+T)%3E-for-%5BT;+12%5D)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#method.from-11)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#429-432)[§](#impl-From%3CMask%3CT,+N%3E%3E-for-%5Bbool;+N%5D)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#435)[§](#method.from-18)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#1030-1033)[§](#impl-From%3CSimd%3CT,+N%3E%3E-for-%5BT;+N%5D)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#1036)[§](#method.from-20)\n\nConverts to this type from the input type.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#306)[§](#impl-Hash-for-%5BT;+N%5D)\n\nThe hash of an array is the same as that of the corresponding slice, as required by the `Borrow` implementation.\n\n```\nuse std::hash::BuildHasher;\n\nlet b = std::hash::RandomState::new();\nlet a: [u8; 3] = [0xa8, 0x3c, 0x09];\nlet s: &[u8] = &[0xa8, 0x3c, 0x09];\nassert_eq!(b.hash_one(a), b.hash_one(s));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::hash::BuildHasher;%0A++++%0A++++let+b+=+std::hash::RandomState::new();%0A++++let+a:+%5Bu8;+3%5D+=+%5B0xa8,+0x3c,+0x09%5D;%0A++++let+s:+%26%5Bu8%5D+=+%26%5B0xa8,+0x3c,+0x09%5D;%0A++++assert_eq!(b.hash_one(a),+b.hash_one(s));%0A%7D&edition=2021)\n\n1.50.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#340-342)[§](#impl-Index%3CI%3E-for-%5BT;+N%5D)\n\n[§](#associatedtype.Output)\n\nThe returned type after indexing.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#347)[§](#method.index)\n\nPerforms the indexing (`container[index]`) operation. [Read more](about:blank/ops/trait.Index.html#tymethod.index)\n\n1.50.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#353-355)[§](#impl-IndexMut%3CI%3E-for-%5BT;+N%5D)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#320)[§](#impl-IntoIterator-for-%26%5BT;+N%5D)\n\n[§](#associatedtype.Item-1)\n\nThe type of the elements being iterated over.\n\n[§](#associatedtype.IntoIter-1)\n\nWhich kind of iterator are we turning this into?\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#324)[§](#method.into_iter-1)\n\nCreates an iterator from a value. [Read more](about:blank/iter/trait.IntoIterator.html#tymethod.into_iter)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#330)[§](#impl-IntoIterator-for-%26mut+%5BT;+N%5D)\n\n[§](#associatedtype.Item)\n\nThe type of the elements being iterated over.\n\n[§](#associatedtype.IntoIter)\n\nWhich kind of iterator are we turning this into?\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#334)[§](#method.into_iter)\n\nCreates an iterator from a value. [Read more](about:blank/iter/trait.IntoIterator.html#tymethod.into_iter)\n\n1.53.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/array/iter.rs.html#45)[§](#impl-IntoIterator-for-%5BT;+N%5D)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/array/iter.rs.html#57)[§](#method.into_iter-2)\n\nCreates a consuming iterator, that is, one that moves each value out of the array (from start to end). The array cannot be used after calling this unless `T` implements `Copy`, so the whole array is copied.\n\nArrays have special behavior when calling `.into_iter()` prior to the 2021 edition – see the [array](primitive.array.html \"primitive array\") Editions section for more information.\n\n[§](#associatedtype.Item-2)\n\nThe type of the elements being iterated over.\n\n[§](#associatedtype.IntoIter-2)\n\nWhich kind of iterator are we turning this into?\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#390)[§](#impl-Ord-for-%5BT;+N%5D)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/array/equality.rs.html#65-67)[§](#impl-PartialEq%3C%26%5BU%5D%3E-for-%5BT;+N%5D)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/array/equality.rs.html#70)[§](#method.eq-4)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/array/equality.rs.html#74)[§](#method.ne-4)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/partial_eq.rs.html#37)[§](#impl-PartialEq%3C%26%5BU;+N%5D%3E-for-Vec%3CT,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/partial_eq.rs.html#37)[§](#method.eq-11)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/partial_eq.rs.html#37)[§](#method.ne-11)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.17.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2810)[§](#impl-PartialEq%3C%26%5BU;+N%5D%3E-for-VecDeque%3CT,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2810)[§](#method.eq-8)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[§](#method.ne-8)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/array/equality.rs.html#95-97)[§](#impl-PartialEq%3C%26mut+%5BU%5D%3E-for-%5BT;+N%5D)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/array/equality.rs.html#100)[§](#method.eq-3)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/array/equality.rs.html#104)[§](#method.ne-3)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.17.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2811)[§](#impl-PartialEq%3C%26mut+%5BU;+N%5D%3E-for-VecDeque%3CT,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2811)[§](#method.eq-9)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[§](#method.ne-9)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/array/equality.rs.html#19-21)[§](#impl-PartialEq%3C%5BU%5D%3E-for-%5BT;+N%5D)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/array/equality.rs.html#24)[§](#method.eq-1)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/array/equality.rs.html#32)[§](#method.ne-1)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/array/equality.rs.html#80-82)[§](#impl-PartialEq%3C%5BU;+N%5D%3E-for-%26%5BT%5D)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/array/equality.rs.html#85)[§](#method.eq-5)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/array/equality.rs.html#89)[§](#method.ne-5)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/array/equality.rs.html#110-112)[§](#impl-PartialEq%3C%5BU;+N%5D%3E-for-%26mut+%5BT%5D)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/array/equality.rs.html#115)[§](#method.eq-6)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/array/equality.rs.html#119)[§](#method.ne-6)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/array/equality.rs.html#42-44)[§](#impl-PartialEq%3C%5BU;+N%5D%3E-for-%5BT%5D)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/array/equality.rs.html#47)[§](#method.eq-2)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/array/equality.rs.html#55)[§](#method.ne-2)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/array/equality.rs.html#4-6)[§](#impl-PartialEq%3C%5BU;+N%5D%3E-for-%5BT;+N%5D)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/array/equality.rs.html#9)[§](#method.eq)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/array/equality.rs.html#13)[§](#method.ne)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/partial_eq.rs.html#36)[§](#impl-PartialEq%3C%5BU;+N%5D%3E-for-Vec%3CT,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/partial_eq.rs.html#36)[§](#method.eq-10)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/partial_eq.rs.html#36)[§](#method.ne-10)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.17.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2809)[§](#impl-PartialEq%3C%5BU;+N%5D%3E-for-VecDeque%3CT,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2809)[§](#method.eq-7)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[§](#method.ne-7)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#365)[§](#impl-PartialOrd-for-%5BT;+N%5D)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#367)[§](#method.partial_cmp)\n\nThis method returns an ordering between `self` and `other` values if one exists. [Read more](about:blank/cmp/trait.PartialOrd.html#tymethod.partial_cmp)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#371)[§](#method.lt)\n\nThis method tests less than (for `self` and `other`) and is used by the `<` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.lt)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#375)[§](#method.le)\n\nThis method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.le)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#379)[§](#method.ge)\n\nThis method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.ge)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#383)[§](#method.gt)\n\nThis method tests greater than (for `self` and `other`) and is used by the `>` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.gt)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#831)[§](#impl-Pattern%3C'a%3E-for-%26%5Bchar;+N%5D)\n\nSearches for chars that are equal to any of the [`char`](primitive.char.html \"primitive char\")s in the array.\n\n#### [§](#examples-16)Examples\n\n```\nassert_eq!(\"Hello world\".find(&['o', 'l']), Some(2));\nassert_eq!(\"Hello world\".find(&['h', 'w']), Some(6));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(%22Hello+world%22.find(%26%5B%27o%27,+%27l%27%5D),+Some(2));%0A++++assert_eq!(%22Hello+world%22.find(%26%5B%27h%27,+%27w%27%5D),+Some(6));%0A%7D&edition=2021)\n\n[§](#associatedtype.Searcher-1)\n\n🔬This is a nightly-only experimental API. (`pattern` [#27721](https://github.com/rust-lang/rust/issues/27721))\n\nAssociated searcher for this pattern\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#832)[§](#method.into_searcher-1)\n\n🔬This is a nightly-only experimental API. (`pattern` [#27721](https://github.com/rust-lang/rust/issues/27721))\n\nConstructs the associated searcher from `self` and the `haystack` to search in.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#832)[§](#method.is_contained_in-1)\n\n🔬This is a nightly-only experimental API. (`pattern` [#27721](https://github.com/rust-lang/rust/issues/27721))\n\nChecks whether the pattern matches anywhere in the haystack\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#832)[§](#method.is_prefix_of-1)\n\n🔬This is a nightly-only experimental API. (`pattern` [#27721](https://github.com/rust-lang/rust/issues/27721))\n\nChecks whether the pattern matches at the front of the haystack\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#832)[§](#method.strip_prefix_of-1)\n\n🔬This is a nightly-only experimental API. (`pattern` [#27721](https://github.com/rust-lang/rust/issues/27721))\n\nRemoves the pattern from the front of haystack, if it matches.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#832)[§](#method.is_suffix_of-1)\n\n🔬This is a nightly-only experimental API. (`pattern` [#27721](https://github.com/rust-lang/rust/issues/27721))\n\nChecks whether the pattern matches at the back of the haystack\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#832)[§](#method.strip_suffix_of-1)\n\n🔬This is a nightly-only experimental API. (`pattern` [#27721](https://github.com/rust-lang/rust/issues/27721))\n\nRemoves the pattern from the back of haystack, if it matches.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#809)[§](#impl-Pattern%3C'a%3E-for-%5Bchar;+N%5D)\n\nSearches for chars that are equal to any of the [`char`](primitive.char.html \"primitive char\")s in the array.\n\n#### [§](#examples-15)Examples\n\n```\nassert_eq!(\"Hello world\".find(['o', 'l']), Some(2));\nassert_eq!(\"Hello world\".find(['h', 'w']), Some(6));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(%22Hello+world%22.find(%5B%27o%27,+%27l%27%5D),+Some(2));%0A++++assert_eq!(%22Hello+world%22.find(%5B%27h%27,+%27w%27%5D),+Some(6));%0A%7D&edition=2021)\n\n[§](#associatedtype.Searcher)\n\n🔬This is a nightly-only experimental API. (`pattern` [#27721](https://github.com/rust-lang/rust/issues/27721))\n\nAssociated searcher for this pattern\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#810)[§](#method.into_searcher)\n\n🔬This is a nightly-only experimental API. (`pattern` [#27721](https://github.com/rust-lang/rust/issues/27721))\n\nConstructs the associated searcher from `self` and the `haystack` to search in.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#810)[§](#method.is_contained_in)\n\n🔬This is a nightly-only experimental API. (`pattern` [#27721](https://github.com/rust-lang/rust/issues/27721))\n\nChecks whether the pattern matches anywhere in the haystack\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#810)[§](#method.is_prefix_of)\n\n🔬This is a nightly-only experimental API. (`pattern` [#27721](https://github.com/rust-lang/rust/issues/27721))\n\nChecks whether the pattern matches at the front of the haystack\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#810)[§](#method.strip_prefix_of)\n\n🔬This is a nightly-only experimental API. (`pattern` [#27721](https://github.com/rust-lang/rust/issues/27721))\n\nRemoves the pattern from the front of haystack, if it matches.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#810)[§](#method.is_suffix_of)\n\n🔬This is a nightly-only experimental API. (`pattern` [#27721](https://github.com/rust-lang/rust/issues/27721))\n\nChecks whether the pattern matches at the back of the haystack\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#810)[§](#method.strip_suffix_of)\n\n🔬This is a nightly-only experimental API. (`pattern` [#27721](https://github.com/rust-lang/rust/issues/27721))\n\nRemoves the pattern from the back of haystack, if it matches.\n\n1.51.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#4727)[§](#impl-SlicePattern-for-%5BT;+N%5D)\n\n[§](#associatedtype.Item-3)\n\n🔬This is a nightly-only experimental API. (`slice_pattern` [#56345](https://github.com/rust-lang/rust/issues/56345))\n\nThe element type of the slice being matched on.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#4731)[§](#method.as_slice-1)\n\n🔬This is a nightly-only experimental API. (`slice_pattern` [#56345](https://github.com/rust-lang/rust/issues/56345))\n\nCurrently, the consumers of `SlicePattern` need a slice.\n\n1.34.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#251)[§](#impl-TryFrom%3C%26%5BT%5D%3E-for-%26%5BT;+N%5D)\n\nTries to create an array ref `&[T; N]` from a slice ref `&[T]`. Succeeds if `slice.len() == N`.\n\n```\nlet bytes: [u8; 3] = [1, 0, 2];\n\nlet bytes_head: &[u8; 2] = <&[u8; 2]>::try_from(&bytes[0..2]).unwrap();\nassert_eq!(1, u16::from_le_bytes(*bytes_head));\n\nlet bytes_tail: &[u8; 2] = bytes[1..3].try_into().unwrap();\nassert_eq!(512, u16::from_le_bytes(*bytes_tail));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+bytes:+%5Bu8;+3%5D+=+%5B1,+0,+2%5D;%0A++++%0A++++let+bytes_head:+%26%5Bu8;+2%5D+=+%3C%26%5Bu8;+2%5D%3E::try_from(%26bytes%5B0..2%5D).unwrap();%0A++++assert_eq!(1,+u16::from_le_bytes(*bytes_head));%0A++++%0A++++let+bytes_tail:+%26%5Bu8;+2%5D+=+bytes%5B1..3%5D.try_into().unwrap();%0A++++assert_eq!(512,+u16::from_le_bytes(*bytes_tail));%0A%7D&edition=2021)\n\n[§](#associatedtype.Error)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#255)[§](#method.try_from)\n\nPerforms the conversion.\n\n1.34.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#201-203)[§](#impl-TryFrom%3C%26%5BT%5D%3E-for-%5BT;+N%5D)\n\nTries to create an array `[T; N]` by copying from a slice `&[T]`. Succeeds if `slice.len() == N`.\n\n```\nlet bytes: [u8; 3] = [1, 0, 2];\n\nlet bytes_head: [u8; 2] = <[u8; 2]>::try_from(&bytes[0..2]).unwrap();\nassert_eq!(1, u16::from_le_bytes(bytes_head));\n\nlet bytes_tail: [u8; 2] = bytes[1..3].try_into().unwrap();\nassert_eq!(512, u16::from_le_bytes(bytes_tail));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+bytes:+%5Bu8;+3%5D+=+%5B1,+0,+2%5D;%0A++++%0A++++let+bytes_head:+%5Bu8;+2%5D+=+%3C%5Bu8;+2%5D%3E::try_from(%26bytes%5B0..2%5D).unwrap();%0A++++assert_eq!(1,+u16::from_le_bytes(bytes_head));%0A++++%0A++++let+bytes_tail:+%5Bu8;+2%5D+=+bytes%5B1..3%5D.try_into().unwrap();%0A++++assert_eq!(512,+u16::from_le_bytes(bytes_tail));%0A%7D&edition=2021)\n\n[§](#associatedtype.Error-2)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#208)[§](#method.try_from-2)\n\nPerforms the conversion.\n\n1.34.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#279)[§](#impl-TryFrom%3C%26mut+%5BT%5D%3E-for-%26mut+%5BT;+N%5D)\n\nTries to create a mutable array ref `&mut [T; N]` from a mutable slice ref `&mut [T]`. Succeeds if `slice.len() == N`.\n\n```\nlet mut bytes: [u8; 3] = [1, 0, 2];\n\nlet bytes_head: &mut [u8; 2] = <&mut [u8; 2]>::try_from(&mut bytes[0..2]).unwrap();\nassert_eq!(1, u16::from_le_bytes(*bytes_head));\n\nlet bytes_tail: &mut [u8; 2] = (&mut bytes[1..3]).try_into().unwrap();\nassert_eq!(512, u16::from_le_bytes(*bytes_tail));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+bytes:+%5Bu8;+3%5D+=+%5B1,+0,+2%5D;%0A++++%0A++++let+bytes_head:+%26mut+%5Bu8;+2%5D+=+%3C%26mut+%5Bu8;+2%5D%3E::try_from(%26mut+bytes%5B0..2%5D).unwrap();%0A++++assert_eq!(1,+u16::from_le_bytes(*bytes_head));%0A++++%0A++++let+bytes_tail:+%26mut+%5Bu8;+2%5D+=+(%26mut+bytes%5B1..3%5D).try_into().unwrap();%0A++++assert_eq!(512,+u16::from_le_bytes(*bytes_tail));%0A%7D&edition=2021)\n\n[§](#associatedtype.Error-3)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#283)[§](#method.try_from-3)\n\nPerforms the conversion.\n\n1.59.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#226-228)[§](#impl-TryFrom%3C%26mut+%5BT%5D%3E-for-%5BT;+N%5D)\n\nTries to create an array `[T; N]` by copying from a mutable slice `&mut [T]`. Succeeds if `slice.len() == N`.\n\n```\nlet mut bytes: [u8; 3] = [1, 0, 2];\n\nlet bytes_head: [u8; 2] = <[u8; 2]>::try_from(&mut bytes[0..2]).unwrap();\nassert_eq!(1, u16::from_le_bytes(bytes_head));\n\nlet bytes_tail: [u8; 2] = (&mut bytes[1..3]).try_into().unwrap();\nassert_eq!(512, u16::from_le_bytes(bytes_tail));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+bytes:+%5Bu8;+3%5D+=+%5B1,+0,+2%5D;%0A++++%0A++++let+bytes_head:+%5Bu8;+2%5D+=+%3C%5Bu8;+2%5D%3E::try_from(%26mut+bytes%5B0..2%5D).unwrap();%0A++++assert_eq!(1,+u16::from_le_bytes(bytes_head));%0A++++%0A++++let+bytes_tail:+%5Bu8;+2%5D+=+(%26mut+bytes%5B1..3%5D).try_into().unwrap();%0A++++assert_eq!(512,+u16::from_le_bytes(bytes_tail));%0A%7D&edition=2021)\n\n[§](#associatedtype.Error-1)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#233)[§](#method.try_from-1)\n\nPerforms the conversion.\n\n1.43.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1715)[§](#impl-TryFrom%3CBox%3C%5BT%5D%3E%3E-for-Box%3C%5BT;+N%5D%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1727)[§](#method.try_from-5)\n\nAttempts to convert a `Box<[T]>` into a `Box<[T; N]>`.\n\nThe conversion occurs in-place and does not require a new memory allocation.\n\n##### [§](#errors-1)Errors\n\nReturns the old `Box<[T]>` in the `Err` variant if `boxed_slice.len()` does not equal `N`.\n\n[§](#associatedtype.Error-5)\n\nThe type returned in the event of a conversion error.\n\n1.66.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1738)[§](#impl-TryFrom%3CVec%3CT%3E%3E-for-Box%3C%5BT;+N%5D%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1759)[§](#method.try_from-4)\n\nAttempts to convert a `Vec<T>` into a `Box<[T; N]>`.\n\nLike [`Vec::into_boxed_slice`](about:blank/vec/struct.Vec.html#method.into_boxed_slice \"method std::vec::Vec::into_boxed_slice\"), this is in-place if `vec.capacity() == N`, but will require a reallocation otherwise.\n\n##### [§](#errors)Errors\n\nReturns the original `Vec<T>` in the `Err` variant if `boxed_slice.len()` does not equal `N`.\n\n##### [§](#examples-17)Examples\n\nThis can be used with [`vec!`](macro.vec.html \"macro std::vec\") to create an array on the heap:\n\n```\nlet state: Box<[f32; 100]> = vec![1.0; 100].try_into().unwrap();\nassert_eq!(state.len(), 100);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+state:+Box%3C%5Bf32;+100%5D%3E+=+vec!%5B1.0;+100%5D.try_into().unwrap();%0A++++assert_eq!(state.len(),+100);%0A%7D&edition=2021)\n\n[§](#associatedtype.Error-4)\n\nThe type returned in the event of a conversion error.\n\n1.48.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3511)[§](#impl-TryFrom%3CVec%3CT,+A%3E%3E-for-%5BT;+N%5D)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3540)[§](#method.try_from-6)\n\nGets the entire contents of the `Vec<T>` as an array, if its size exactly matches that of the requested array.\n\n##### [§](#examples-18)Examples\n\n```\nassert_eq!(vec![1, 2, 3].try_into(), Ok([1, 2, 3]));\nassert_eq!(<Vec<i32>>::new().try_into(), Ok([]));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(vec!%5B1,+2,+3%5D.try_into(),+Ok(%5B1,+2,+3%5D));%0A++++assert_eq!(%3CVec%3Ci32%3E%3E::new().try_into(),+Ok(%5B%5D));%0A%7D&edition=2021)\n\nIf the length doesn’t match, the input comes back in `Err`:\n\n```\nlet r: Result<[i32; 4], _> = (0..10).collect::<Vec<_>>().try_into();\nassert_eq!(r, Err(vec![0, 1, 2, 3, 4, 5, 6, 7, 8, 9]));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+r:+Result%3C%5Bi32;+4%5D,+_%3E+=+(0..10).collect::%3CVec%3C_%3E%3E().try_into();%0A++++assert_eq!(r,+Err(vec!%5B0,+1,+2,+3,+4,+5,+6,+7,+8,+9%5D));%0A%7D&edition=2021)\n\nIf you’re fine with just getting a prefix of the `Vec<T>`, you can call [`.truncate(N)`](about:blank/vec/struct.Vec.html#method.truncate \"method std::vec::Vec::truncate\") first.\n\n```\nlet mut v = String::from(\"hello world\").into_bytes();\nv.sort();\nv.truncate(2);\nlet [a, b]: [_; 2] = v.try_into().unwrap();\nassert_eq!(a, b' ');\nassert_eq!(b, b'd');\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+v+=+String::from(%22hello+world%22).into_bytes();%0A++++v.sort();%0A++++v.truncate(2);%0A++++let+%5Ba,+b%5D:+%5B_;+2%5D+=+v.try_into().unwrap();%0A++++assert_eq!(a,+b%27+%27);%0A++++assert_eq!(b,+b%27d%27);%0A%7D&edition=2021)\n\n[§](#associatedtype.Error-6)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/marker.rs.html#992-1003)[§](#impl-ConstParamTy-for-%5BT;+N%5D)\n\n1.58.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#398)[§](#impl-Copy-for-%5BT;+N%5D)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/array/equality.rs.html#129)[§](#impl-Eq-for-%5BT;+N%5D)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/marker.rs.html#214-226)[§](#impl-StructuralPartialEq-for-%5BT;+N%5D)\n\n[§](#impl-Freeze-for-%5Bu8;+N%5D)\n\n[§](#impl-RefUnwindSafe-for-%5Bu8;+N%5D)\n\n[§](#impl-Send-for-%5Bu8;+N%5D)\n\n[§](#impl-Sync-for-%5Bu8;+N%5D)\n\n[§](#impl-Unpin-for-%5Bu8;+N%5D)\n\n[§](#impl-UnwindSafe-for-%5Bu8;+N%5D)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140)[§](#impl-Any-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208)[§](#impl-Borrow%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216)[§](#impl-BorrowMut%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765)[§](#impl-From%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768)[§](#method.from-48)\n\nReturns the argument unchanged.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750)[§](#impl-Into%3CU%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758)[§](#method.into)\n\nCalls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of `[From](convert/trait.From.html \"trait std::convert::From\")<T> for U` chooses to do.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85)[§](#impl-ToOwned-for-T)\n\n[§](#associatedtype.Owned)\n\nThe resulting type after obtaining ownership.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88)[§](#method.to_owned)\n\nCreates owned data from borrowed data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#tymethod.to_owned)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92)[§](#method.clone_into)\n\nUses borrowed data to replace owned data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#method.clone_into)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807)[§](#impl-TryFrom%3CU%3E-for-T)\n\n[§](#associatedtype.Error-8)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812)[§](#method.try_from-7)\n\nPerforms the conversion.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792)[§](#impl-TryInto%3CU%3E-for-T)\n\n[§](#associatedtype.Error-7)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797)[§](#method.try_into)\n\nPerforms the conversion.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"A fixed-size array, denoted `[T; N]`, for the element type, `T`, and the non-negative compile-time constant size, `N`.\"><title>array - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../\" data-static-root-path=\"../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc primitive\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../std/index.html\"><img class=\"rust-logo\" src=\"../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">array</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../std/index.html\"><img class=\"rust-logo\" src=\"../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">array</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#implementations\">Methods</a></h3><ul class=\"block method\"><li><a href=\"#method.as_ascii\">as_ascii</a></li><li><a href=\"#method.as_ascii_unchecked\">as_ascii_unchecked</a></li><li><a href=\"#method.as_mut_slice\">as_mut_slice</a></li><li><a href=\"#method.as_slice\">as_slice</a></li><li><a href=\"#method.each_mut\">each_mut</a></li><li><a href=\"#method.each_ref\">each_ref</a></li><li><a href=\"#method.map\">map</a></li><li><a href=\"#method.rsplit_array_mut\">rsplit_array_mut</a></li><li><a href=\"#method.rsplit_array_ref\">rsplit_array_ref</a></li><li><a href=\"#method.split_array_mut\">split_array_mut</a></li><li><a href=\"#method.split_array_ref\">split_array_ref</a></li><li><a href=\"#method.transpose\">transpose</a></li><li><a href=\"#method.try_map\">try_map</a></li></ul><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-AsMut%3C%5BT;+N%5D%3E-for-Simd%3CT,+N%3E\">AsMut&lt;[T; N]&gt;</a></li><li><a href=\"#impl-AsMut%3C%5BT%5D%3E-for-%5BT;+N%5D\">AsMut&lt;[T]&gt;</a></li><li><a href=\"#impl-AsRef%3C%5BT;+N%5D%3E-for-Simd%3CT,+N%3E\">AsRef&lt;[T; N]&gt;</a></li><li><a href=\"#impl-AsRef%3C%5BT%5D%3E-for-%5BT;+N%5D\">AsRef&lt;[T]&gt;</a></li><li><a href=\"#impl-Borrow%3C%5BT%5D%3E-for-%5BT;+N%5D\">Borrow&lt;[T]&gt;</a></li><li><a href=\"#impl-BorrowMut%3C%5BT%5D%3E-for-%5BT;+N%5D\">BorrowMut&lt;[T]&gt;</a></li><li><a href=\"#impl-Clone-for-%5BT;+N%5D\">Clone</a></li><li><a href=\"#impl-ConstParamTy-for-%5BT;+N%5D\">ConstParamTy</a></li><li><a href=\"#impl-Copy-for-%5BT;+N%5D\">Copy</a></li><li><a href=\"#impl-Debug-for-%5BT;+N%5D\">Debug</a></li><li><a href=\"#impl-Default-for-%5BT;+32%5D\">Default</a></li><li><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2330%7D::%7Bconstant%230%7D%5D\">Default</a></li><li><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2331%7D::%7Bconstant%230%7D%5D\">Default</a></li><li><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2332%7D::%7Bconstant%230%7D%5D\">Default</a></li><li><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2333%7D::%7Bconstant%230%7D%5D\">Default</a></li><li><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2334%7D::%7Bconstant%230%7D%5D\">Default</a></li><li><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2335%7D::%7Bconstant%230%7D%5D\">Default</a></li><li><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2336%7D::%7Bconstant%230%7D%5D\">Default</a></li><li><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2337%7D::%7Bconstant%230%7D%5D\">Default</a></li><li><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2338%7D::%7Bconstant%230%7D%5D\">Default</a></li><li><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2339%7D::%7Bconstant%230%7D%5D\">Default</a></li><li><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2340%7D::%7Bconstant%230%7D%5D\">Default</a></li><li><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2341%7D::%7Bconstant%230%7D%5D\">Default</a></li><li><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2342%7D::%7Bconstant%230%7D%5D\">Default</a></li><li><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2343%7D::%7Bconstant%230%7D%5D\">Default</a></li><li><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2344%7D::%7Bconstant%230%7D%5D\">Default</a></li><li><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2345%7D::%7Bconstant%230%7D%5D\">Default</a></li><li><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2346%7D::%7Bconstant%230%7D%5D\">Default</a></li><li><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2347%7D::%7Bconstant%230%7D%5D\">Default</a></li><li><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2348%7D::%7Bconstant%230%7D%5D\">Default</a></li><li><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2349%7D::%7Bconstant%230%7D%5D\">Default</a></li><li><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2350%7D::%7Bconstant%230%7D%5D\">Default</a></li><li><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2351%7D::%7Bconstant%230%7D%5D\">Default</a></li><li><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2352%7D::%7Bconstant%230%7D%5D\">Default</a></li><li><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2353%7D::%7Bconstant%230%7D%5D\">Default</a></li><li><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2354%7D::%7Bconstant%230%7D%5D\">Default</a></li><li><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2355%7D::%7Bconstant%230%7D%5D\">Default</a></li><li><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2356%7D::%7Bconstant%230%7D%5D\">Default</a></li><li><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2357%7D::%7Bconstant%230%7D%5D\">Default</a></li><li><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2358%7D::%7Bconstant%230%7D%5D\">Default</a></li><li><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2359%7D::%7Bconstant%230%7D%5D\">Default</a></li><li><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2360%7D::%7Bconstant%230%7D%5D\">Default</a></li><li><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2361%7D::%7Bconstant%230%7D%5D\">Default</a></li><li><a href=\"#impl-Eq-for-%5BT;+N%5D\">Eq</a></li><li><a href=\"#impl-From%3C%26%5BT;+N%5D%3E-for-Cow%3C'a,+%5BT%5D%3E\">From&lt;&amp;'a [T; N]&gt;</a></li><li><a href=\"#impl-From%3C%26%5BT;+N%5D%3E-for-Vec%3CT%3E\">From&lt;&amp;[T; N]&gt;</a></li><li><a href=\"#impl-From%3C%26mut+%5BT;+N%5D%3E-for-Vec%3CT%3E\">From&lt;&amp;mut [T; N]&gt;</a></li><li><a href=\"#impl-From%3C(T,+T)%3E-for-%5BT;+2%5D\">From&lt;(T, T)&gt;</a></li><li><a href=\"#impl-From%3C(T,+T,+T)%3E-for-%5BT;+3%5D\">From&lt;(T, T, T)&gt;</a></li><li><a href=\"#impl-From%3C(T,+T,+T,+T)%3E-for-%5BT;+4%5D\">From&lt;(T, T, T, T)&gt;</a></li><li><a href=\"#impl-From%3C(T,+T,+T,+T,+T)%3E-for-%5BT;+5%5D\">From&lt;(T, T, T, T, T)&gt;</a></li><li><a href=\"#impl-From%3C(T,+T,+T,+T,+T,+T)%3E-for-%5BT;+6%5D\">From&lt;(T, T, T, T, T, T)&gt;</a></li><li><a href=\"#impl-From%3C(T,+T,+T,+T,+T,+T,+T)%3E-for-%5BT;+7%5D\">From&lt;(T, T, T, T, T, T, T)&gt;</a></li><li><a href=\"#impl-From%3C(T,+T,+T,+T,+T,+T,+T,+T)%3E-for-%5BT;+8%5D\">From&lt;(T, T, T, T, T, T, T, T)&gt;</a></li><li><a href=\"#impl-From%3C(T,+T,+T,+T,+T,+T,+T,+T,+T)%3E-for-%5BT;+9%5D\">From&lt;(T, T, T, T, T, T, T, T, T)&gt;</a></li><li><a href=\"#impl-From%3C(T,+T,+T,+T,+T,+T,+T,+T,+T,+T)%3E-for-%5BT;+10%5D\">From&lt;(T, T, T, T, T, T, T, T, T, T)&gt;</a></li><li><a href=\"#impl-From%3C(T,+T,+T,+T,+T,+T,+T,+T,+T,+T,+T)%3E-for-%5BT;+11%5D\">From&lt;(T, T, T, T, T, T, T, T, T, T, T)&gt;</a></li><li><a href=\"#impl-From%3C(T,+T,+T,+T,+T,+T,+T,+T,+T,+T,+T,+T)%3E-for-%5BT;+12%5D\">From&lt;(T, T, T, T, T, T, T, T, T, T, T, T)&gt;</a></li><li><a href=\"#impl-From%3C(T,)%3E-for-%5BT;+1%5D\">From&lt;(T,)&gt;</a></li><li><a href=\"#impl-From%3CMask%3CT,+N%3E%3E-for-%5Bbool;+N%5D\">From&lt;Mask&lt;T, N&gt;&gt;</a></li><li><a href=\"#impl-From%3CSimd%3CT,+N%3E%3E-for-%5BT;+N%5D\">From&lt;Simd&lt;T, N&gt;&gt;</a></li><li><a href=\"#impl-From%3C%5B(K,+V);+N%5D%3E-for-BTreeMap%3CK,+V%3E\">From&lt;[(K, V); N]&gt;</a></li><li><a href=\"#impl-From%3C%5B(K,+V);+N%5D%3E-for-HashMap%3CK,+V%3E\">From&lt;[(K, V); N]&gt;</a></li><li><a href=\"#impl-From%3C%5BT;+10%5D%3E-for-(T,+T,+T,+T,+T,+T,+T,+T,+T,+T)\">From&lt;[T; 10]&gt;</a></li><li><a href=\"#impl-From%3C%5BT;+11%5D%3E-for-(T,+T,+T,+T,+T,+T,+T,+T,+T,+T,+T)\">From&lt;[T; 11]&gt;</a></li><li><a href=\"#impl-From%3C%5BT;+12%5D%3E-for-(T,+T,+T,+T,+T,+T,+T,+T,+T,+T,+T,+T)\">From&lt;[T; 12]&gt;</a></li><li><a href=\"#impl-From%3C%5BT;+1%5D%3E-for-(T,)\">From&lt;[T; 1]&gt;</a></li><li><a href=\"#impl-From%3C%5BT;+2%5D%3E-for-(T,+T)\">From&lt;[T; 2]&gt;</a></li><li><a href=\"#impl-From%3C%5BT;+3%5D%3E-for-(T,+T,+T)\">From&lt;[T; 3]&gt;</a></li><li><a href=\"#impl-From%3C%5BT;+4%5D%3E-for-(T,+T,+T,+T)\">From&lt;[T; 4]&gt;</a></li><li><a href=\"#impl-From%3C%5BT;+5%5D%3E-for-(T,+T,+T,+T,+T)\">From&lt;[T; 5]&gt;</a></li><li><a href=\"#impl-From%3C%5BT;+6%5D%3E-for-(T,+T,+T,+T,+T,+T)\">From&lt;[T; 6]&gt;</a></li><li><a href=\"#impl-From%3C%5BT;+7%5D%3E-for-(T,+T,+T,+T,+T,+T,+T)\">From&lt;[T; 7]&gt;</a></li><li><a href=\"#impl-From%3C%5BT;+8%5D%3E-for-(T,+T,+T,+T,+T,+T,+T,+T)\">From&lt;[T; 8]&gt;</a></li><li><a href=\"#impl-From%3C%5BT;+9%5D%3E-for-(T,+T,+T,+T,+T,+T,+T,+T,+T)\">From&lt;[T; 9]&gt;</a></li><li><a href=\"#impl-From%3C%5BT;+N%5D%3E-for-Arc%3C%5BT%5D%3E\">From&lt;[T; N]&gt;</a></li><li><a href=\"#impl-From%3C%5BT;+N%5D%3E-for-BTreeSet%3CT%3E\">From&lt;[T; N]&gt;</a></li><li><a href=\"#impl-From%3C%5BT;+N%5D%3E-for-BinaryHeap%3CT%3E\">From&lt;[T; N]&gt;</a></li><li><a href=\"#impl-From%3C%5BT;+N%5D%3E-for-Box%3C%5BT%5D%3E\">From&lt;[T; N]&gt;</a></li><li><a href=\"#impl-From%3C%5BT;+N%5D%3E-for-HashSet%3CT%3E\">From&lt;[T; N]&gt;</a></li><li><a href=\"#impl-From%3C%5BT;+N%5D%3E-for-LinkedList%3CT%3E\">From&lt;[T; N]&gt;</a></li><li><a href=\"#impl-From%3C%5BT;+N%5D%3E-for-Rc%3C%5BT%5D%3E\">From&lt;[T; N]&gt;</a></li><li><a href=\"#impl-From%3C%5BT;+N%5D%3E-for-Simd%3CT,+N%3E\">From&lt;[T; N]&gt;</a></li><li><a href=\"#impl-From%3C%5BT;+N%5D%3E-for-Vec%3CT%3E\">From&lt;[T; N]&gt;</a></li><li><a href=\"#impl-From%3C%5BT;+N%5D%3E-for-VecDeque%3CT%3E\">From&lt;[T; N]&gt;</a></li><li><a href=\"#impl-From%3C%5Bbool;+N%5D%3E-for-Mask%3CT,+N%3E\">From&lt;[bool; N]&gt;</a></li><li><a href=\"#impl-From%3C%5Bu16;+8%5D%3E-for-IpAddr\">From&lt;[u16; 8]&gt;</a></li><li><a href=\"#impl-From%3C%5Bu16;+8%5D%3E-for-Ipv6Addr\">From&lt;[u16; 8]&gt;</a></li><li><a href=\"#impl-From%3C%5Bu8;+16%5D%3E-for-IpAddr\">From&lt;[u8; 16]&gt;</a></li><li><a href=\"#impl-From%3C%5Bu8;+16%5D%3E-for-Ipv6Addr\">From&lt;[u8; 16]&gt;</a></li><li><a href=\"#impl-From%3C%5Bu8;+4%5D%3E-for-IpAddr\">From&lt;[u8; 4]&gt;</a></li><li><a href=\"#impl-From%3C%5Bu8;+4%5D%3E-for-Ipv4Addr\">From&lt;[u8; 4]&gt;</a></li><li><a href=\"#impl-Hash-for-%5BT;+N%5D\">Hash</a></li><li><a href=\"#impl-Index%3CI%3E-for-%5BT;+N%5D\">Index&lt;I&gt;</a></li><li><a href=\"#impl-IndexMut%3CI%3E-for-%5BT;+N%5D\">IndexMut&lt;I&gt;</a></li><li><a href=\"#impl-IntoIterator-for-%26%5BT;+N%5D\">IntoIterator</a></li><li><a href=\"#impl-IntoIterator-for-%26mut+%5BT;+N%5D\">IntoIterator</a></li><li><a href=\"#impl-IntoIterator-for-%5BT;+N%5D\">IntoIterator</a></li><li><a href=\"#impl-Ord-for-%5BT;+N%5D\">Ord</a></li><li><a href=\"#impl-PartialEq%3C%26%5BU;+N%5D%3E-for-Vec%3CT,+A%3E\">PartialEq&lt;&amp;[U; N]&gt;</a></li><li><a href=\"#impl-PartialEq%3C%26%5BU;+N%5D%3E-for-VecDeque%3CT,+A%3E\">PartialEq&lt;&amp;[U; N]&gt;</a></li><li><a href=\"#impl-PartialEq%3C%26%5BU%5D%3E-for-%5BT;+N%5D\">PartialEq&lt;&amp;[U]&gt;</a></li><li><a href=\"#impl-PartialEq%3C%26mut+%5BU;+N%5D%3E-for-VecDeque%3CT,+A%3E\">PartialEq&lt;&amp;mut [U; N]&gt;</a></li><li><a href=\"#impl-PartialEq%3C%26mut+%5BU%5D%3E-for-%5BT;+N%5D\">PartialEq&lt;&amp;mut [U]&gt;</a></li><li><a href=\"#impl-PartialEq%3C%5BU;+N%5D%3E-for-%26%5BT%5D\">PartialEq&lt;[U; N]&gt;</a></li><li><a href=\"#impl-PartialEq%3C%5BU;+N%5D%3E-for-%26mut+%5BT%5D\">PartialEq&lt;[U; N]&gt;</a></li><li><a href=\"#impl-PartialEq%3C%5BU;+N%5D%3E-for-%5BT%5D\">PartialEq&lt;[U; N]&gt;</a></li><li><a href=\"#impl-PartialEq%3C%5BU;+N%5D%3E-for-%5BT;+N%5D\">PartialEq&lt;[U; N]&gt;</a></li><li><a href=\"#impl-PartialEq%3C%5BU;+N%5D%3E-for-Vec%3CT,+A%3E\">PartialEq&lt;[U; N]&gt;</a></li><li><a href=\"#impl-PartialEq%3C%5BU;+N%5D%3E-for-VecDeque%3CT,+A%3E\">PartialEq&lt;[U; N]&gt;</a></li><li><a href=\"#impl-PartialEq%3C%5BU%5D%3E-for-%5BT;+N%5D\">PartialEq&lt;[U]&gt;</a></li><li><a href=\"#impl-PartialOrd-for-%5BT;+N%5D\">PartialOrd</a></li><li><a href=\"#impl-Pattern%3C'a%3E-for-%26%5Bchar;+N%5D\">Pattern&lt;'a&gt;</a></li><li><a href=\"#impl-Pattern%3C'a%3E-for-%5Bchar;+N%5D\">Pattern&lt;'a&gt;</a></li><li><a href=\"#impl-SlicePattern-for-%5BT;+N%5D\">SlicePattern</a></li><li><a href=\"#impl-StructuralPartialEq-for-%5BT;+N%5D\">StructuralPartialEq</a></li><li><a href=\"#impl-TryFrom%3C%26%5BT%5D%3E-for-%26%5BT;+N%5D\">TryFrom&lt;&amp;'a [T]&gt;</a></li><li><a href=\"#impl-TryFrom%3C%26mut+%5BT%5D%3E-for-%26mut+%5BT;+N%5D\">TryFrom&lt;&amp;'a mut [T]&gt;</a></li><li><a href=\"#impl-TryFrom%3C%26%5BT%5D%3E-for-%5BT;+N%5D\">TryFrom&lt;&amp;[T]&gt;</a></li><li><a href=\"#impl-TryFrom%3C%26mut+%5BT%5D%3E-for-%5BT;+N%5D\">TryFrom&lt;&amp;mut [T]&gt;</a></li><li><a href=\"#impl-TryFrom%3CBox%3C%5BT%5D%3E%3E-for-Box%3C%5BT;+N%5D%3E\">TryFrom&lt;Box&lt;[T]&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CVec%3CT,+A%3E%3E-for-%5BT;+N%5D\">TryFrom&lt;Vec&lt;T, A&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CVec%3CT%3E%3E-for-Box%3C%5BT;+N%5D%3E\">TryFrom&lt;Vec&lt;T&gt;&gt;</a></li></ul><h3><a href=\"#synthetic-implementations\">Auto Trait Implementations</a></h3><ul class=\"block synthetic-implementation\"><li><a href=\"#impl-Freeze-for-%5Bu8;+N%5D\">Freeze</a></li><li><a href=\"#impl-RefUnwindSafe-for-%5Bu8;+N%5D\">RefUnwindSafe</a></li><li><a href=\"#impl-Send-for-%5Bu8;+N%5D\">Send</a></li><li><a href=\"#impl-Sync-for-%5Bu8;+N%5D\">Sync</a></li><li><a href=\"#impl-Unpin-for-%5Bu8;+N%5D\">Unpin</a></li><li><a href=\"#impl-UnwindSafe-for-%5Bu8;+N%5D\">UnwindSafe</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-Any-for-T\">Any</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-T\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-T\">BorrowMut&lt;T&gt;</a></li><li><a href=\"#impl-From%3CT%3E-for-T\">From&lt;T&gt;</a></li><li><a href=\"#impl-Into%3CU%3E-for-T\">Into&lt;U&gt;</a></li><li><a href=\"#impl-ToOwned-for-T\">ToOwned</a></li><li><a href=\"#impl-TryFrom%3CU%3E-for-T\">TryFrom&lt;U&gt;</a></li><li><a href=\"#impl-TryInto%3CU%3E-for-T\">TryInto&lt;U&gt;</a></li></ul></section><h2><a href=\"index.html\">In crate std</a></h2><h3><a href=\"index.html#primitives\">Primitive Types</a></h3><ul class=\"block primitive\"><li><a href=\"primitive.array.html\">array</a></li><li><a href=\"primitive.bool.html\">bool</a></li><li><a href=\"primitive.char.html\">char</a></li><li><a href=\"primitive.f128.html\">f128</a></li><li><a href=\"primitive.f16.html\">f16</a></li><li><a href=\"primitive.f32.html\">f32</a></li><li><a href=\"primitive.f64.html\">f64</a></li><li><a href=\"primitive.fn.html\">fn</a></li><li><a href=\"primitive.i128.html\">i128</a></li><li><a href=\"primitive.i16.html\">i16</a></li><li><a href=\"primitive.i32.html\">i32</a></li><li><a href=\"primitive.i64.html\">i64</a></li><li><a href=\"primitive.i8.html\">i8</a></li><li><a href=\"primitive.isize.html\">isize</a></li><li><a href=\"primitive.never.html\">never</a></li><li><a href=\"primitive.pointer.html\">pointer</a></li><li><a href=\"primitive.reference.html\">reference</a></li><li><a href=\"primitive.slice.html\">slice</a></li><li><a href=\"primitive.str.html\">str</a></li><li><a href=\"primitive.tuple.html\">tuple</a></li><li><a href=\"primitive.u128.html\">u128</a></li><li><a href=\"primitive.u16.html\">u16</a></li><li><a href=\"primitive.u32.html\">u32</a></li><li><a href=\"primitive.u64.html\">u64</a></li><li><a href=\"primitive.u8.html\">u8</a></li><li><a href=\"primitive.unit.html\">unit</a></li><li><a href=\"primitive.usize.html\">usize</a></li></ul><h3><a href=\"index.html#modules\">Modules</a></h3><ul class=\"block mod\"><li><a href=\"alloc/index.html\">alloc</a></li><li><a href=\"any/index.html\">any</a></li><li><a href=\"arch/index.html\">arch</a></li><li><a href=\"array/index.html\">array</a></li><li><a href=\"ascii/index.html\">ascii</a></li><li><a href=\"assert_matches/index.html\">assert_matches</a></li><li><a href=\"async_iter/index.html\">async_iter</a></li><li><a href=\"backtrace/index.html\">backtrace</a></li><li><a href=\"borrow/index.html\">borrow</a></li><li><a href=\"boxed/index.html\">boxed</a></li><li><a href=\"cell/index.html\">cell</a></li><li><a href=\"char/index.html\">char</a></li><li><a href=\"clone/index.html\">clone</a></li><li><a href=\"cmp/index.html\">cmp</a></li><li><a href=\"collections/index.html\">collections</a></li><li><a href=\"convert/index.html\">convert</a></li><li><a href=\"default/index.html\">default</a></li><li><a href=\"env/index.html\">env</a></li><li><a href=\"error/index.html\">error</a></li><li><a href=\"f128/index.html\">f128</a></li><li><a href=\"f16/index.html\">f16</a></li><li><a href=\"f32/index.html\">f32</a></li><li><a href=\"f64/index.html\">f64</a></li><li><a href=\"ffi/index.html\">ffi</a></li><li><a href=\"fmt/index.html\">fmt</a></li><li><a href=\"fs/index.html\">fs</a></li><li><a href=\"future/index.html\">future</a></li><li><a href=\"hash/index.html\">hash</a></li><li><a href=\"hint/index.html\">hint</a></li><li><a href=\"i128/index.html\">i128</a></li><li><a href=\"i16/index.html\">i16</a></li><li><a href=\"i32/index.html\">i32</a></li><li><a href=\"i64/index.html\">i64</a></li><li><a href=\"i8/index.html\">i8</a></li><li><a href=\"intrinsics/index.html\">intrinsics</a></li><li><a href=\"io/index.html\">io</a></li><li><a href=\"isize/index.html\">isize</a></li><li><a href=\"iter/index.html\">iter</a></li><li><a href=\"marker/index.html\">marker</a></li><li><a href=\"mem/index.html\">mem</a></li><li><a href=\"net/index.html\">net</a></li><li><a href=\"num/index.html\">num</a></li><li><a href=\"ops/index.html\">ops</a></li><li><a href=\"option/index.html\">option</a></li><li><a href=\"os/index.html\">os</a></li><li><a href=\"panic/index.html\">panic</a></li><li><a href=\"pat/index.html\">pat</a></li><li><a href=\"path/index.html\">path</a></li><li><a href=\"pin/index.html\">pin</a></li><li><a href=\"prelude/index.html\">prelude</a></li><li><a href=\"primitive/index.html\">primitive</a></li><li><a href=\"process/index.html\">process</a></li><li><a href=\"ptr/index.html\">ptr</a></li><li><a href=\"rc/index.html\">rc</a></li><li><a href=\"result/index.html\">result</a></li><li><a href=\"simd/index.html\">simd</a></li><li><a href=\"slice/index.html\">slice</a></li><li><a href=\"str/index.html\">str</a></li><li><a href=\"string/index.html\">string</a></li><li><a href=\"sync/index.html\">sync</a></li><li><a href=\"task/index.html\">task</a></li><li><a href=\"thread/index.html\">thread</a></li><li><a href=\"time/index.html\">time</a></li><li><a href=\"u128/index.html\">u128</a></li><li><a href=\"u16/index.html\">u16</a></li><li><a href=\"u32/index.html\">u32</a></li><li><a href=\"u64/index.html\">u64</a></li><li><a href=\"u8/index.html\">u8</a></li><li><a href=\"usize/index.html\">usize</a></li><li><a href=\"vec/index.html\">vec</a></li></ul><h3><a href=\"index.html#macros\">Macros</a></h3><ul class=\"block macro\"><li><a href=\"macro.assert.html\">assert</a></li><li><a href=\"macro.assert_eq.html\">assert_eq</a></li><li><a href=\"macro.assert_ne.html\">assert_ne</a></li><li><a href=\"macro.cfg.html\">cfg</a></li><li><a href=\"macro.cfg_match.html\">cfg_match</a></li><li><a href=\"macro.column.html\">column</a></li><li><a href=\"macro.compile_error.html\">compile_error</a></li><li><a href=\"macro.concat.html\">concat</a></li><li><a href=\"macro.concat_bytes.html\">concat_bytes</a></li><li><a href=\"macro.concat_idents.html\">concat_idents</a></li><li><a href=\"macro.const_format_args.html\">const_format_args</a></li><li><a href=\"macro.dbg.html\">dbg</a></li><li><a href=\"macro.debug_assert.html\">debug_assert</a></li><li><a href=\"macro.debug_assert_eq.html\">debug_assert_eq</a></li><li><a href=\"macro.debug_assert_ne.html\">debug_assert_ne</a></li><li><a href=\"macro.env.html\">env</a></li><li><a href=\"macro.eprint.html\">eprint</a></li><li><a href=\"macro.eprintln.html\">eprintln</a></li><li><a href=\"macro.file.html\">file</a></li><li><a href=\"macro.format.html\">format</a></li><li><a href=\"macro.format_args.html\">format_args</a></li><li><a href=\"macro.format_args_nl.html\">format_args_nl</a></li><li><a href=\"macro.include.html\">include</a></li><li><a href=\"macro.include_bytes.html\">include_bytes</a></li><li><a href=\"macro.include_str.html\">include_str</a></li><li><a href=\"macro.is_x86_feature_detected.html\">is_x86_feature_detected</a></li><li><a href=\"macro.line.html\">line</a></li><li><a href=\"macro.log_syntax.html\">log_syntax</a></li><li><a href=\"macro.matches.html\">matches</a></li><li><a href=\"macro.module_path.html\">module_path</a></li><li><a href=\"macro.option_env.html\">option_env</a></li><li><a href=\"macro.panic.html\">panic</a></li><li><a href=\"macro.print.html\">print</a></li><li><a href=\"macro.println.html\">println</a></li><li><a href=\"macro.stringify.html\">stringify</a></li><li><a href=\"macro.thread_local.html\">thread_local</a></li><li><a href=\"macro.todo.html\">todo</a></li><li><a href=\"macro.trace_macros.html\">trace_macros</a></li><li><a href=\"macro.try.html\">try</a></li><li><a href=\"macro.unimplemented.html\">unimplemented</a></li><li><a href=\"macro.unreachable.html\">unreachable</a></li><li><a href=\"macro.vec.html\">vec</a></li><li><a href=\"macro.write.html\">write</a></li><li><a href=\"macro.writeln.html\">writeln</a></li></ul><h3><a href=\"index.html#keywords\">Keywords</a></h3><ul class=\"block keyword\"><li><a href=\"keyword.SelfTy.html\">SelfTy</a></li><li><a href=\"keyword.as.html\">as</a></li><li><a href=\"keyword.async.html\">async</a></li><li><a href=\"keyword.await.html\">await</a></li><li><a href=\"keyword.break.html\">break</a></li><li><a href=\"keyword.const.html\">const</a></li><li><a href=\"keyword.continue.html\">continue</a></li><li><a href=\"keyword.crate.html\">crate</a></li><li><a href=\"keyword.dyn.html\">dyn</a></li><li><a href=\"keyword.else.html\">else</a></li><li><a href=\"keyword.enum.html\">enum</a></li><li><a href=\"keyword.extern.html\">extern</a></li><li><a href=\"keyword.false.html\">false</a></li><li><a href=\"keyword.fn.html\">fn</a></li><li><a href=\"keyword.for.html\">for</a></li><li><a href=\"keyword.if.html\">if</a></li><li><a href=\"keyword.impl.html\">impl</a></li><li><a href=\"keyword.in.html\">in</a></li><li><a href=\"keyword.let.html\">let</a></li><li><a href=\"keyword.loop.html\">loop</a></li><li><a href=\"keyword.match.html\">match</a></li><li><a href=\"keyword.mod.html\">mod</a></li><li><a href=\"keyword.move.html\">move</a></li><li><a href=\"keyword.mut.html\">mut</a></li><li><a href=\"keyword.pub.html\">pub</a></li><li><a href=\"keyword.ref.html\">ref</a></li><li><a href=\"keyword.return.html\">return</a></li><li><a href=\"keyword.self.html\">self</a></li><li><a href=\"keyword.static.html\">static</a></li><li><a href=\"keyword.struct.html\">struct</a></li><li><a href=\"keyword.super.html\">super</a></li><li><a href=\"keyword.trait.html\">trait</a></li><li><a href=\"keyword.true.html\">true</a></li><li><a href=\"keyword.type.html\">type</a></li><li><a href=\"keyword.union.html\">union</a></li><li><a href=\"keyword.unsafe.html\">unsafe</a></li><li><a href=\"keyword.use.html\">use</a></li><li><a href=\"keyword.where.html\">where</a></li><li><a href=\"keyword.while.html\">while</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Primitive Type <a class=\"primitive\" href=\"#\">array</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>A fixed-size array, denoted <code>[T; N]</code>, for the element type, <code>T</code>, and the\nnon-negative compile-time constant size, <code>N</code>.</p>\n<p>There are two syntactic forms for creating an array:</p>\n<ul>\n<li>\n<p>A list with each element, i.e., <code>[x, y, z]</code>.</p>\n</li>\n<li>\n<p>A repeat expression <code>[expr; N]</code> where <code>N</code> is how many times to repeat <code>expr</code> in the array. <code>expr</code> must either be:</p>\n<ul>\n<li>A value of a type implementing the <a href=\"marker/trait.Copy.html\" title=\"trait std::marker::Copy\"><code>Copy</code></a> trait</li>\n<li>A <code>const</code> value</li>\n</ul>\n</li>\n</ul>\n<p>Note that <code>[expr; 0]</code> is allowed, and produces an empty array.\nThis will still evaluate <code>expr</code>, however, and immediately drop the resulting value, so\nbe mindful of side effects.</p>\n<p>Arrays of <em>any</em> size implement the following traits if the element type allows it:</p>\n<ul>\n<li><a href=\"marker/trait.Copy.html\" title=\"trait std::marker::Copy\"><code>Copy</code></a></li>\n<li><a href=\"clone/trait.Clone.html\" title=\"trait std::clone::Clone\"><code>Clone</code></a></li>\n<li><a href=\"fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\"><code>Debug</code></a></li>\n<li><a href=\"iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\"><code>IntoIterator</code></a> (implemented for <code>[T; N]</code>, <code>&amp;[T; N]</code> and <code>&amp;mut [T; N]</code>)</li>\n<li><a href=\"cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\"><code>PartialEq</code></a>, <a href=\"cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\"><code>PartialOrd</code></a>, <a href=\"cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\"><code>Eq</code></a>, <a href=\"cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\"><code>Ord</code></a></li>\n<li><a href=\"hash/trait.Hash.html\" title=\"trait std::hash::Hash\"><code>Hash</code></a></li>\n<li><a href=\"convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\"><code>AsRef</code></a>, <a href=\"convert/trait.AsMut.html\" title=\"trait std::convert::AsMut\"><code>AsMut</code></a></li>\n<li><a href=\"borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\"><code>Borrow</code></a>, <a href=\"borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\"><code>BorrowMut</code></a></li>\n</ul>\n<p>Arrays of sizes from 0 to 32 (inclusive) implement the <a href=\"default/trait.Default.html\" title=\"trait std::default::Default\"><code>Default</code></a> trait\nif the element type allows it. As a stopgap, trait implementations are\nstatically generated up to size 32.</p>\n<p>Arrays of sizes from 1 to 12 (inclusive) implement <a href=\"convert/trait.From.html\" title=\"trait std::convert::From\"><code>From&lt;Tuple&gt;</code></a>, where <code>Tuple</code>\nis a homogeneous <a href=\"primitive.tuple.html\" title=\"primitive tuple\">tuple</a> of appropriate length.</p>\n<p>Arrays coerce to <a href=\"primitive.slice.html\" title=\"primitive slice\">slices (<code>[T]</code>)</a>, so a slice method may be called on\nan array. Indeed, this provides most of the API for working with arrays.</p>\n<p>Slices have a dynamic size and do not coerce to arrays. Instead, use\n<code>slice.try_into().unwrap()</code> or <code>&lt;ArrayType&gt;::try_from(slice).unwrap()</code>.</p>\n<p>Array’s <code>try_from(slice)</code> implementations (and the corresponding <code>slice.try_into()</code>\narray implementations) succeed if the input slice length is the same as the result\narray length. They optimize especially well when the optimizer can easily determine\nthe slice length, e.g. <code>&lt;[u8; 4]&gt;::try_from(&amp;slice[4..8]).unwrap()</code>. Array implements\n<a href=\"convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a> returning:</p>\n<ul>\n<li><code>[T; N]</code> copies from the slice’s elements</li>\n<li><code>&amp;[T; N]</code> references the original slice’s elements</li>\n<li><code>&amp;mut [T; N]</code> references the original slice’s elements</li>\n</ul>\n<p>You can move elements out of an array with a <a href=\"../reference/patterns.html#slice-patterns\">slice pattern</a>. If you want\none element, see <a href=\"mem/fn.replace.html\" title=\"fn std::mem::replace\"><code>mem::replace</code></a>.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>array: [i32; <span class=\"number\">3</span>] = [<span class=\"number\">0</span>; <span class=\"number\">3</span>];\n\narray[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;\narray[<span class=\"number\">2</span>] = <span class=\"number\">2</span>;\n\n<span class=\"macro\">assert_eq!</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>], <span class=\"kw-2\">&amp;</span>array[<span class=\"number\">1</span>..]);\n\n<span class=\"comment\">// This loop prints: 0 1 2\n</span><span class=\"kw\">for </span>x <span class=\"kw\">in </span>array {\n    <span class=\"macro\">print!</span>(<span class=\"string\">\"{x} \"</span>);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+array:+%5Bi32;+3%5D+=+%5B0;+3%5D;%0A++++%0A++++array%5B1%5D+=+1;%0A++++array%5B2%5D+=+2;%0A++++%0A++++assert_eq!(%5B1,+2%5D,+%26array%5B1..%5D);%0A++++%0A++++//+This+loop+prints:+0+1+2%0A++++for+x+in+array+%7B%0A++++++++print!(%22%7Bx%7D+%22);%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<p>You can also iterate over reference to the array’s elements:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>array: [i32; <span class=\"number\">3</span>] = [<span class=\"number\">0</span>; <span class=\"number\">3</span>];\n\n<span class=\"kw\">for </span>x <span class=\"kw\">in </span><span class=\"kw-2\">&amp;</span>array { }</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+array:+%5Bi32;+3%5D+=+%5B0;+3%5D;%0A++++%0A++++for+x+in+%26array+%7B+%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<p>You can use <code>&lt;ArrayType&gt;::try_from(slice)</code> or <code>slice.try_into()</code> to get an array from\na slice:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bytes: [u8; <span class=\"number\">3</span>] = [<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>];\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1</span>, u16::from_le_bytes(&lt;[u8; <span class=\"number\">2</span>]&gt;::try_from(<span class=\"kw-2\">&amp;</span>bytes[<span class=\"number\">0</span>..<span class=\"number\">2</span>]).unwrap()));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">512</span>, u16::from_le_bytes(bytes[<span class=\"number\">1</span>..<span class=\"number\">3</span>].try_into().unwrap()));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+bytes:+%5Bu8;+3%5D+=+%5B1,+0,+2%5D;%0A++++assert_eq!(1,+u16::from_le_bytes(%3C%5Bu8;+2%5D%3E::try_from(%26bytes%5B0..2%5D).unwrap()));%0A++++assert_eq!(512,+u16::from_le_bytes(bytes%5B1..3%5D.try_into().unwrap()));%0A%7D&amp;edition=2021\">Run</a></div>\n<p>You can use a <a href=\"../reference/patterns.html#slice-patterns\">slice pattern</a> to move elements out of an array:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>move_away(<span class=\"kw\">_</span>: String) { <span class=\"comment\">/* Do interesting things. */ </span>}\n\n<span class=\"kw\">let </span>[john, roa] = [<span class=\"string\">\"John\"</span>.to_string(), <span class=\"string\">\"Roa\"</span>.to_string()];\nmove_away(john);\nmove_away(roa);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++fn+move_away(_:+String)+%7B+/*+Do+interesting+things.+*/+%7D%0A++++%0A++++let+%5Bjohn,+roa%5D+=+%5B%22John%22.to_string(),+%22Roa%22.to_string()%5D;%0A++++move_away(john);%0A++++move_away(roa);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Arrays can be created from homogeneous tuples of appropriate length:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>tuple: (u32, u32, u32) = (<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);\n<span class=\"kw\">let </span>array: [u32; <span class=\"number\">3</span>] = tuple.into();</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+tuple:+(u32,+u32,+u32)+=+(1,+2,+3);%0A++++let+array:+%5Bu32;+3%5D+=+tuple.into();%0A%7D&amp;edition=2021\">Run</a></div>\n<h2 id=\"editions\"><a class=\"doc-anchor\" href=\"#editions\">§</a>Editions</h2>\n<p>Prior to Rust 1.53, arrays did not implement <a href=\"iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\"><code>IntoIterator</code></a> by value, so the method call\n<code>array.into_iter()</code> auto-referenced into a <a href=\"primitive.slice.html#method.iter\" title=\"method slice::iter\">slice iterator</a>. Right now, the old\nbehavior is preserved in the 2015 and 2018 editions of Rust for compatibility, ignoring\n<a href=\"iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\"><code>IntoIterator</code></a> by value. In the future, the behavior on the 2015 and 2018 edition\nmight be made consistent to the behavior of later editions.</p>\n\n<div class=\"example-wrap edition\"><a href=\"#\" class=\"tooltip\" title=\"This example runs with edition 2018\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"comment\">// Rust 2015 and 2018:\n\n</span><span class=\"kw\">let </span>array: [i32; <span class=\"number\">3</span>] = [<span class=\"number\">0</span>; <span class=\"number\">3</span>];\n\n<span class=\"comment\">// This creates a slice iterator, producing references to each value.\n</span><span class=\"kw\">for </span>item <span class=\"kw\">in </span>array.into_iter().enumerate() {\n    <span class=\"kw\">let </span>(i, x): (usize, <span class=\"kw-2\">&amp;</span>i32) = item;\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"array[{i}] = {x}\"</span>);\n}\n\n<span class=\"comment\">// The `array_into_iter` lint suggests this change for future compatibility:\n</span><span class=\"kw\">for </span>item <span class=\"kw\">in </span>array.iter().enumerate() {\n    <span class=\"kw\">let </span>(i, x): (usize, <span class=\"kw-2\">&amp;</span>i32) = item;\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"array[{i}] = {x}\"</span>);\n}\n\n<span class=\"comment\">// You can explicitly iterate an array by value using `IntoIterator::into_iter`\n</span><span class=\"kw\">for </span>item <span class=\"kw\">in </span>IntoIterator::into_iter(array).enumerate() {\n    <span class=\"kw\">let </span>(i, x): (usize, i32) = item;\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"array[{i}] = {x}\"</span>);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A//+Rust+2015+and+2018:%0A%0A%23!%5Ballow(array_into_iter)%5D+//+override+our+%60deny(warnings)%60%0Afn+main()+%7B%0A++++let+array:+%5Bi32;+3%5D+=+%5B0;+3%5D;%0A++++%0A++++//+This+creates+a+slice+iterator,+producing+references+to+each+value.%0A++++for+item+in+array.into_iter().enumerate()+%7B%0A++++++++let+(i,+x):+(usize,+%26i32)+=+item;%0A++++++++println!(%22array%5B%7Bi%7D%5D+=+%7Bx%7D%22);%0A++++%7D%0A++++%0A++++//+The+%60array_into_iter%60+lint+suggests+this+change+for+future+compatibility:%0A++++for+item+in+array.iter().enumerate()+%7B%0A++++++++let+(i,+x):+(usize,+%26i32)+=+item;%0A++++++++println!(%22array%5B%7Bi%7D%5D+=+%7Bx%7D%22);%0A++++%7D%0A++++%0A++++//+You+can+explicitly+iterate+an+array+by+value+using+%60IntoIterator::into_iter%60%0A++++for+item+in+IntoIterator::into_iter(array).enumerate()+%7B%0A++++++++let+(i,+x):+(usize,+i32)+=+item;%0A++++++++println!(%22array%5B%7Bi%7D%5D+=+%7Bx%7D%22);%0A++++%7D%0A%7D&amp;edition=2018\">Run</a></div>\n<p>Starting in the 2021 edition, <code>array.into_iter()</code> uses <code>IntoIterator</code> normally to iterate\nby value, and <code>iter()</code> should be used to iterate by reference like previous editions.</p>\n\n<div class=\"example-wrap edition\"><a href=\"#\" class=\"tooltip\" title=\"This example runs with edition 2021\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"comment\">// Rust 2021:\n\n</span><span class=\"kw\">let </span>array: [i32; <span class=\"number\">3</span>] = [<span class=\"number\">0</span>; <span class=\"number\">3</span>];\n\n<span class=\"comment\">// This iterates by reference:\n</span><span class=\"kw\">for </span>item <span class=\"kw\">in </span>array.iter().enumerate() {\n    <span class=\"kw\">let </span>(i, x): (usize, <span class=\"kw-2\">&amp;</span>i32) = item;\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"array[{i}] = {x}\"</span>);\n}\n\n<span class=\"comment\">// This iterates by value:\n</span><span class=\"kw\">for </span>item <span class=\"kw\">in </span>array.into_iter().enumerate() {\n    <span class=\"kw\">let </span>(i, x): (usize, i32) = item;\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"array[{i}] = {x}\"</span>);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A//+Rust+2021:%0A%0Afn+main()+%7B%0A++++let+array:+%5Bi32;+3%5D+=+%5B0;+3%5D;%0A++++%0A++++//+This+iterates+by+reference:%0A++++for+item+in+array.iter().enumerate()+%7B%0A++++++++let+(i,+x):+(usize,+%26i32)+=+item;%0A++++++++println!(%22array%5B%7Bi%7D%5D+=+%7Bx%7D%22);%0A++++%7D%0A++++%0A++++//+This+iterates+by+value:%0A++++for+item+in+array.into_iter().enumerate()+%7B%0A++++++++let+(i,+x):+(usize,+i32)+=+item;%0A++++++++println!(%22array%5B%7Bi%7D%5D+=+%7Bx%7D%22);%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Future language versions might start treating the <code>array.into_iter()</code>\nsyntax on editions 2015 and 2018 the same as on edition 2021. So code using\nthose older editions should still be written with this change in mind, to\nprevent breakage in the future. The safest way to accomplish this is to\navoid the <code>into_iter</code> syntax on those editions. If an edition update is not\nviable/desired, there are multiple alternatives:</p>\n<ul>\n<li>use <code>iter</code>, equivalent to the old behavior, creating references</li>\n<li>use <a href=\"iter/trait.IntoIterator.html#tymethod.into_iter\" title=\"method std::iter::IntoIterator::into_iter\"><code>IntoIterator::into_iter</code></a>, equivalent to the post-2021 behavior (Rust 1.53+)</li>\n<li>replace <code>for ... in array.into_iter() {</code> with <code>for ... in array {</code>,\nequivalent to the post-2021 behavior (Rust 1.53+)</li>\n</ul>\n\n<div class=\"example-wrap edition\"><a href=\"#\" class=\"tooltip\" title=\"This example runs with edition 2018\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"comment\">// Rust 2015 and 2018:\n\n</span><span class=\"kw\">let </span>array: [i32; <span class=\"number\">3</span>] = [<span class=\"number\">0</span>; <span class=\"number\">3</span>];\n\n<span class=\"comment\">// This iterates by reference:\n</span><span class=\"kw\">for </span>item <span class=\"kw\">in </span>array.iter() {\n    <span class=\"kw\">let </span>x: <span class=\"kw-2\">&amp;</span>i32 = item;\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{x}\"</span>);\n}\n\n<span class=\"comment\">// This iterates by value:\n</span><span class=\"kw\">for </span>item <span class=\"kw\">in </span>IntoIterator::into_iter(array) {\n    <span class=\"kw\">let </span>x: i32 = item;\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{x}\"</span>);\n}\n\n<span class=\"comment\">// This iterates by value:\n</span><span class=\"kw\">for </span>item <span class=\"kw\">in </span>array {\n    <span class=\"kw\">let </span>x: i32 = item;\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{x}\"</span>);\n}\n\n<span class=\"comment\">// IntoIter can also start a chain.\n// This iterates by value:\n</span><span class=\"kw\">for </span>item <span class=\"kw\">in </span>IntoIterator::into_iter(array).enumerate() {\n    <span class=\"kw\">let </span>(i, x): (usize, i32) = item;\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"array[{i}] = {x}\"</span>);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A//+Rust+2015+and+2018:%0A%0Afn+main()+%7B%0A++++let+array:+%5Bi32;+3%5D+=+%5B0;+3%5D;%0A++++%0A++++//+This+iterates+by+reference:%0A++++for+item+in+array.iter()+%7B%0A++++++++let+x:+%26i32+=+item;%0A++++++++println!(%22%7Bx%7D%22);%0A++++%7D%0A++++%0A++++//+This+iterates+by+value:%0A++++for+item+in+IntoIterator::into_iter(array)+%7B%0A++++++++let+x:+i32+=+item;%0A++++++++println!(%22%7Bx%7D%22);%0A++++%7D%0A++++%0A++++//+This+iterates+by+value:%0A++++for+item+in+array+%7B%0A++++++++let+x:+i32+=+item;%0A++++++++println!(%22%7Bx%7D%22);%0A++++%7D%0A++++%0A++++//+IntoIter+can+also+start+a+chain.%0A++++//+This+iterates+by+value:%0A++++for+item+in+IntoIterator::into_iter(array).enumerate()+%7B%0A++++++++let+(i,+x):+(usize,+i32)+=+item;%0A++++++++println!(%22array%5B%7Bi%7D%5D+=+%7Bx%7D%22);%0A++++%7D%0A%7D&amp;edition=2018\">Run</a></div>\n</div></details><h2 id=\"implementations\" class=\"section-header\">Implementations<a href=\"#implementations\" class=\"anchor\">§</a></h2><div id=\"implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-%5Bu8;+N%5D\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/ascii.rs.html#4\">source</a><a href=\"#impl-%5Bu8;+N%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">N</a>]</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_ascii\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/ascii.rs.html#23\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.as_ascii\" class=\"fn\">as_ascii</a>(&amp;self) -&gt; <a class=\"enum\" href=\"option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;[<a class=\"enum\" href=\"ascii/enum.Char.html\" title=\"enum std::ascii::Char\">AsciiChar</a>; <a class=\"primitive\" href=\"primitive.array.html\">N</a>]&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>ascii_char</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span></summary><div class=\"docblock\"><p>Converts this array of bytes into a array of ASCII characters,\nor returns <code>None</code> if any of the characters is non-ASCII.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(ascii_char)]\n#![feature(const_option)]\n\n</span><span class=\"kw\">const </span>HEX_DIGITS: [std::ascii::Char; <span class=\"number\">16</span>] =\n    <span class=\"kw-2\">*</span><span class=\"string\">b\"0123456789abcdef\"</span>.as_ascii().unwrap();\n\n<span class=\"macro\">assert_eq!</span>(HEX_DIGITS[<span class=\"number\">1</span>].as_str(), <span class=\"string\">\"1\"</span>);\n<span class=\"macro\">assert_eq!</span>(HEX_DIGITS[<span class=\"number\">10</span>].as_str(), <span class=\"string\">\"a\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(ascii_char)%5D%0A%23!%5Bfeature(const_option)%5D%0A%0Afn+main()+%7B%0A++++const+HEX_DIGITS:+%5Bstd::ascii::Char;+16%5D+=%0A++++++++*b%220123456789abcdef%22.as_ascii().unwrap();%0A++++%0A++++assert_eq!(HEX_DIGITS%5B1%5D.as_str(),+%221%22);%0A++++assert_eq!(HEX_DIGITS%5B10%5D.as_str(),+%22a%22);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_ascii_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/ascii.rs.html#41\">source</a><h4 class=\"code-header\">pub const unsafe fn <a href=\"#method.as_ascii_unchecked\" class=\"fn\">as_ascii_unchecked</a>(&amp;self) -&gt; &amp;[<a class=\"enum\" href=\"ascii/enum.Char.html\" title=\"enum std::ascii::Char\">AsciiChar</a>; <a class=\"primitive\" href=\"primitive.array.html\">N</a>]</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>ascii_char</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span></summary><div class=\"docblock\"><p>Converts this array of bytes into a array of ASCII characters,\nwithout checking whether they’re valid.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>Every byte in the array must be in <code>0..=127</code>, or else this is UB.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-%5BT;+N%5D\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#455\">source</a><a href=\"#impl-%5BT;+N%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; <a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.map\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.55.0\">1.55.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#498-500\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.map\" class=\"fn\">map</a>&lt;F, U&gt;(self, f: F) -&gt; <a class=\"primitive\" href=\"primitive.array.html\">[U; N]</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(T) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Returns an array of the same size as <code>self</code>, with function <code>f</code> applied to each element\nin order.</p>\n<p>If you don’t necessarily need a new fixed-size array, consider using\n<a href=\"iter/trait.Iterator.html#method.map\" title=\"method std::iter::Iterator::map\"><code>Iterator::map</code></a> instead.</p>\n<h5 id=\"note-on-performance-and-stack-usage\"><a class=\"doc-anchor\" href=\"#note-on-performance-and-stack-usage\">§</a>Note on performance and stack usage</h5>\n<p>Unfortunately, usages of this method are currently not always optimized\nas well as they could be. This mainly concerns large arrays, as mapping\nover small arrays seem to be optimized just fine. Also note that in\ndebug mode (i.e. without any optimizations), this method can use a lot\nof stack space (a few times the size of the array or more).</p>\n<p>Therefore, in performance-critical code, try to avoid using this method\non large arrays or check the emitted code. Also try to avoid chained\nmaps (e.g. <code>arr.map(...).map(...)</code>).</p>\n<p>In many cases, you can instead use <a href=\"iter/trait.Iterator.html#method.map\" title=\"method std::iter::Iterator::map\"><code>Iterator::map</code></a> by calling <code>.iter()</code>\nor <code>.into_iter()</code> on your array. <code>[T; N]::map</code> is only necessary if you\nreally need a new array of the same size as the result. Rust’s lazy\niterators tend to get optimized very well.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"kw\">let </span>y = x.map(|v| v + <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(y, [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n\n<span class=\"kw\">let </span>x = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>temp = <span class=\"number\">0</span>;\n<span class=\"kw\">let </span>y = x.map(|v| { temp += <span class=\"number\">1</span>; v * temp });\n<span class=\"macro\">assert_eq!</span>(y, [<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">9</span>]);\n\n<span class=\"kw\">let </span>x = [<span class=\"string\">\"Ferris\"</span>, <span class=\"string\">\"Bueller's\"</span>, <span class=\"string\">\"Day\"</span>, <span class=\"string\">\"Off\"</span>];\n<span class=\"kw\">let </span>y = x.map(|v| v.len());\n<span class=\"macro\">assert_eq!</span>(y, [<span class=\"number\">6</span>, <span class=\"number\">9</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+%5B1,+2,+3%5D;%0A++++let+y+=+x.map(%7Cv%7C+v+%2B+1);%0A++++assert_eq!(y,+%5B2,+3,+4%5D);%0A++++%0A++++let+x+=+%5B1,+2,+3%5D;%0A++++let+mut+temp+=+0;%0A++++let+y+=+x.map(%7Cv%7C+%7B+temp+%2B=+1;+v+*+temp+%7D);%0A++++assert_eq!(y,+%5B1,+4,+9%5D);%0A++++%0A++++let+x+=+%5B%22Ferris%22,+%22Bueller's%22,+%22Day%22,+%22Off%22%5D;%0A++++let+y+=+x.map(%7Cv%7C+v.len());%0A++++assert_eq!(y,+%5B6,+9,+3,+3%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_map\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#536-540\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.try_map\" class=\"fn\">try_map</a>&lt;F, R&gt;(\n    self,\n    f: F,\n) -&gt; &lt;&lt;R as <a class=\"trait\" href=\"ops/trait.Try.html\" title=\"trait std::ops::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"ops/trait.Try.html#associatedtype.Residual\" title=\"type std::ops::Try::Residual\">Residual</a> as <a class=\"trait\" href=\"ops/trait.Residual.html\" title=\"trait std::ops::Residual\">Residual</a>&lt;[&lt;R as <a class=\"trait\" href=\"ops/trait.Try.html\" title=\"trait std::ops::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"ops/trait.Try.html#associatedtype.Output\" title=\"type std::ops::Try::Output\">Output</a>; <a class=\"primitive\" href=\"primitive.array.html\">N</a>]&gt;&gt;::<a class=\"associatedtype\" href=\"ops/trait.Residual.html#associatedtype.TryType\" title=\"type std::ops::Residual::TryType\">TryType</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(T) -&gt; R,\n    R: <a class=\"trait\" href=\"ops/trait.Try.html\" title=\"trait std::ops::Try\">Try</a>,\n    &lt;R as <a class=\"trait\" href=\"ops/trait.Try.html\" title=\"trait std::ops::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"ops/trait.Try.html#associatedtype.Residual\" title=\"type std::ops::Try::Residual\">Residual</a>: <a class=\"trait\" href=\"ops/trait.Residual.html\" title=\"trait std::ops::Residual\">Residual</a>&lt;[&lt;R as <a class=\"trait\" href=\"ops/trait.Try.html\" title=\"trait std::ops::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"ops/trait.Try.html#associatedtype.Output\" title=\"type std::ops::Try::Output\">Output</a>; <a class=\"primitive\" href=\"primitive.array.html\">N</a>]&gt;,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>array_try_map</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/79711\">#79711</a>)</span></div></span></summary><div class=\"docblock\"><p>A fallible function <code>f</code> applied to each element on array <code>self</code> in order to\nreturn an array the same size as <code>self</code> or the first error encountered.</p>\n<p>The return type of this function depends on the return type of the closure.\nIf you return <code>Result&lt;T, E&gt;</code> from the closure, you’ll get a <code>Result&lt;[T; N], E&gt;</code>.\nIf you return <code>Option&lt;T&gt;</code> from the closure, you’ll get an <code>Option&lt;[T; N]&gt;</code>.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(array_try_map)]\n\n</span><span class=\"kw\">let </span>a = [<span class=\"string\">\"1\"</span>, <span class=\"string\">\"2\"</span>, <span class=\"string\">\"3\"</span>];\n<span class=\"kw\">let </span>b = a.try_map(|v| v.parse::&lt;u32&gt;()).unwrap().map(|v| v + <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(b, [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n\n<span class=\"kw\">let </span>a = [<span class=\"string\">\"1\"</span>, <span class=\"string\">\"2a\"</span>, <span class=\"string\">\"3\"</span>];\n<span class=\"kw\">let </span>b = a.try_map(|v| v.parse::&lt;u32&gt;());\n<span class=\"macro\">assert!</span>(b.is_err());\n\n<span class=\"kw\">use </span>std::num::NonZero;\n\n<span class=\"kw\">let </span>z = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];\n<span class=\"macro\">assert_eq!</span>(z.try_map(NonZero::new), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"kw\">let </span>b = a.try_map(NonZero::new);\n<span class=\"kw\">let </span>c = b.map(|x| x.map(NonZero::get));\n<span class=\"macro\">assert_eq!</span>(c, <span class=\"prelude-val\">Some</span>(a));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(array_try_map)%5D%0A%0Afn+main()+%7B%0A++++let+a+=+%5B%221%22,+%222%22,+%223%22%5D;%0A++++let+b+=+a.try_map(%7Cv%7C+v.parse::%3Cu32%3E()).unwrap().map(%7Cv%7C+v+%2B+1);%0A++++assert_eq!(b,+%5B2,+3,+4%5D);%0A++++%0A++++let+a+=+%5B%221%22,+%222a%22,+%223%22%5D;%0A++++let+b+=+a.try_map(%7Cv%7C+v.parse::%3Cu32%3E());%0A++++assert!(b.is_err());%0A++++%0A++++use+std::num::NonZero;%0A++++%0A++++let+z+=+%5B1,+2,+0,+3,+4%5D;%0A++++assert_eq!(z.try_map(NonZero::new),+None);%0A++++%0A++++let+a+=+%5B1,+2,+3%5D;%0A++++let+b+=+a.try_map(NonZero::new);%0A++++let+c+=+b.map(%7Cx%7C+x.map(NonZero::get));%0A++++assert_eq!(c,+Some(a));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_slice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.57.0, const since 1.57.0\">1.57.0 (const: 1.57.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#548\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.as_slice\" class=\"fn\">as_slice</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Returns a slice containing the entire array. Equivalent to <code>&amp;s[..]</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_mut_slice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.57.0\">1.57.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#555\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.as_mut_slice\" class=\"fn\">as_mut_slice</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Returns a mutable slice containing the entire array. Equivalent to\n<code>&amp;mut s[..]</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.each_ref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.77.0\">1.77.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#584\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.each_ref\" class=\"fn\">each_ref</a>(&amp;self) -&gt; [<a class=\"primitive\" href=\"primitive.reference.html\">&amp;T</a>; <a class=\"primitive\" href=\"primitive.array.html\">N</a>]</h4></section></summary><div class=\"docblock\"><p>Borrows each element and returns an array of references with the same\nsize as <code>self</code>.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>floats = [<span class=\"number\">3.1</span>, <span class=\"number\">2.7</span>, -<span class=\"number\">1.0</span>];\n<span class=\"kw\">let </span>float_refs: [<span class=\"kw-2\">&amp;</span>f64; <span class=\"number\">3</span>] = floats.each_ref();\n<span class=\"macro\">assert_eq!</span>(float_refs, [<span class=\"kw-2\">&amp;</span><span class=\"number\">3.1</span>, <span class=\"kw-2\">&amp;</span><span class=\"number\">2.7</span>, <span class=\"kw-2\">&amp;</span>-<span class=\"number\">1.0</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+floats+=+%5B3.1,+2.7,+-1.0%5D;%0A++++let+float_refs:+%5B%26f64;+3%5D+=+floats.each_ref();%0A++++assert_eq!(float_refs,+%5B%263.1,+%262.7,+%26-1.0%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>This method is particularly useful if combined with other methods, like\n<a href=\"#method.map\"><code>map</code></a>. This way, you can avoid moving the original\narray if its elements are not <a href=\"marker/trait.Copy.html\" title=\"trait std::marker::Copy\"><code>Copy</code></a>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>strings = [<span class=\"string\">\"Ferris\"</span>.to_string(), <span class=\"string\">\"♥\"</span>.to_string(), <span class=\"string\">\"Rust\"</span>.to_string()];\n<span class=\"kw\">let </span>is_ascii = strings.each_ref().map(|s| s.is_ascii());\n<span class=\"macro\">assert_eq!</span>(is_ascii, [<span class=\"bool-val\">true</span>, <span class=\"bool-val\">false</span>, <span class=\"bool-val\">true</span>]);\n\n<span class=\"comment\">// We can still access the original array: it has not been moved.\n</span><span class=\"macro\">assert_eq!</span>(strings.len(), <span class=\"number\">3</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+strings+=+%5B%22Ferris%22.to_string(),+%22%E2%99%A5%22.to_string(),+%22Rust%22.to_string()%5D;%0A++++let+is_ascii+=+strings.each_ref().map(%7Cs%7C+s.is_ascii());%0A++++assert_eq!(is_ascii,+%5Btrue,+false,+true%5D);%0A++++%0A++++//+We+can+still+access+the+original+array:+it+has+not+been+moved.%0A++++assert_eq!(strings.len(),+3);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.each_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.77.0\">1.77.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#603\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.each_mut\" class=\"fn\">each_mut</a>(&amp;mut self) -&gt; [<a class=\"primitive\" href=\"primitive.reference.html\">&amp;mut T</a>; <a class=\"primitive\" href=\"primitive.array.html\">N</a>]</h4></section></summary><div class=\"docblock\"><p>Borrows each element mutably and returns an array of mutable references\nwith the same size as <code>self</code>.</p>\n<h5 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>floats = [<span class=\"number\">3.1</span>, <span class=\"number\">2.7</span>, -<span class=\"number\">1.0</span>];\n<span class=\"kw\">let </span>float_refs: [<span class=\"kw-2\">&amp;mut </span>f64; <span class=\"number\">3</span>] = floats.each_mut();\n<span class=\"kw-2\">*</span>float_refs[<span class=\"number\">0</span>] = <span class=\"number\">0.0</span>;\n<span class=\"macro\">assert_eq!</span>(float_refs, [<span class=\"kw-2\">&amp;mut </span><span class=\"number\">0.0</span>, <span class=\"kw-2\">&amp;mut </span><span class=\"number\">2.7</span>, <span class=\"kw-2\">&amp;mut </span>-<span class=\"number\">1.0</span>]);\n<span class=\"macro\">assert_eq!</span>(floats, [<span class=\"number\">0.0</span>, <span class=\"number\">2.7</span>, -<span class=\"number\">1.0</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%0Afn+main()+%7B%0A++++let+mut+floats+=+%5B3.1,+2.7,+-1.0%5D;%0A++++let+float_refs:+%5B%26mut+f64;+3%5D+=+floats.each_mut();%0A++++*float_refs%5B0%5D+=+0.0;%0A++++assert_eq!(float_refs,+%5B%26mut+0.0,+%26mut+2.7,+%26mut+-1.0%5D);%0A++++assert_eq!(floats,+%5B0.0,+2.7,+-1.0%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.split_array_ref\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#648\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.split_array_ref\" class=\"fn\">split_array_ref</a>&lt;const M: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;(&amp;self) -&gt; (&amp;<a class=\"primitive\" href=\"primitive.array.html\">[T; M]</a>, &amp;<a class=\"primitive\" href=\"primitive.slice.html\">[T]</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>split_array</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/90091\">#90091</a>)</span></div></span></summary><div class=\"docblock\"><p>Divides one array reference into two at an index.</p>\n<p>The first will contain all indices from <code>[0, M)</code> (excluding\nthe index <code>M</code> itself) and the second will contain all\nindices from <code>[M, N)</code> (excluding the index <code>N</code> itself).</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>M &gt; N</code>.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(split_array)]\n\n</span><span class=\"kw\">let </span>v = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];\n\n{\n   <span class=\"kw\">let </span>(left, right) = v.split_array_ref::&lt;<span class=\"number\">0</span>&gt;();\n   <span class=\"macro\">assert_eq!</span>(left, <span class=\"kw-2\">&amp;</span>[]);\n   <span class=\"macro\">assert_eq!</span>(right, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]);\n}\n\n{\n    <span class=\"kw\">let </span>(left, right) = v.split_array_ref::&lt;<span class=\"number\">2</span>&gt;();\n    <span class=\"macro\">assert_eq!</span>(left, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>]);\n    <span class=\"macro\">assert_eq!</span>(right, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]);\n}\n\n{\n    <span class=\"kw\">let </span>(left, right) = v.split_array_ref::&lt;<span class=\"number\">6</span>&gt;();\n    <span class=\"macro\">assert_eq!</span>(left, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]);\n    <span class=\"macro\">assert_eq!</span>(right, <span class=\"kw-2\">&amp;</span>[]);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(split_array)%5D%0A%0Afn+main()+%7B%0A++++let+v+=+%5B1,+2,+3,+4,+5,+6%5D;%0A++++%0A++++%7B%0A+++++++let+(left,+right)+=+v.split_array_ref::%3C0%3E();%0A+++++++assert_eq!(left,+%26%5B%5D);%0A+++++++assert_eq!(right,+%26%5B1,+2,+3,+4,+5,+6%5D);%0A++++%7D%0A++++%0A++++%7B%0A++++++++let+(left,+right)+=+v.split_array_ref::%3C2%3E();%0A++++++++assert_eq!(left,+%26%5B1,+2%5D);%0A++++++++assert_eq!(right,+%26%5B3,+4,+5,+6%5D);%0A++++%7D%0A++++%0A++++%7B%0A++++++++let+(left,+right)+=+v.split_array_ref::%3C6%3E();%0A++++++++assert_eq!(left,+%26%5B1,+2,+3,+4,+5,+6%5D);%0A++++++++assert_eq!(right,+%26%5B%5D);%0A++++%7D%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.split_array_mut\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#681\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.split_array_mut\" class=\"fn\">split_array_mut</a>&lt;const M: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;(&amp;mut self) -&gt; (&amp;mut <a class=\"primitive\" href=\"primitive.array.html\">[T; M]</a>, &amp;mut <a class=\"primitive\" href=\"primitive.slice.html\">[T]</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>split_array</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/90091\">#90091</a>)</span></div></span></summary><div class=\"docblock\"><p>Divides one mutable array reference into two at an index.</p>\n<p>The first will contain all indices from <code>[0, M)</code> (excluding\nthe index <code>M</code> itself) and the second will contain all\nindices from <code>[M, N)</code> (excluding the index <code>N</code> itself).</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if <code>M &gt; N</code>.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(split_array)]\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = [<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">0</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];\n<span class=\"kw\">let </span>(left, right) = v.split_array_mut::&lt;<span class=\"number\">2</span>&gt;();\n<span class=\"macro\">assert_eq!</span>(left, <span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">1</span>, <span class=\"number\">0</span>][..]);\n<span class=\"macro\">assert_eq!</span>(right, <span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">3</span>, <span class=\"number\">0</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]);\nleft[<span class=\"number\">1</span>] = <span class=\"number\">2</span>;\nright[<span class=\"number\">1</span>] = <span class=\"number\">4</span>;\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(split_array)%5D%0A%0Afn+main()+%7B%0A++++let+mut+v+=+%5B1,+0,+3,+0,+5,+6%5D;%0A++++let+(left,+right)+=+v.split_array_mut::%3C2%3E();%0A++++assert_eq!(left,+%26mut+%5B1,+0%5D%5B..%5D);%0A++++assert_eq!(right,+%26mut+%5B3,+0,+5,+6%5D);%0A++++left%5B1%5D+=+2;%0A++++right%5B1%5D+=+4;%0A++++assert_eq!(v,+%5B1,+2,+3,+4,+5,+6%5D);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.rsplit_array_ref\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#726\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.rsplit_array_ref\" class=\"fn\">rsplit_array_ref</a>&lt;const M: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;(&amp;self) -&gt; (&amp;<a class=\"primitive\" href=\"primitive.slice.html\">[T]</a>, &amp;<a class=\"primitive\" href=\"primitive.array.html\">[T; M]</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>split_array</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/90091\">#90091</a>)</span></div></span></summary><div class=\"docblock\"><p>Divides one array reference into two at an index from the end.</p>\n<p>The first will contain all indices from <code>[0, N - M)</code> (excluding\nthe index <code>N - M</code> itself) and the second will contain all\nindices from <code>[N - M, N)</code> (excluding the index <code>N</code> itself).</p>\n<h5 id=\"panics-2\"><a class=\"doc-anchor\" href=\"#panics-2\">§</a>Panics</h5>\n<p>Panics if <code>M &gt; N</code>.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(split_array)]\n\n</span><span class=\"kw\">let </span>v = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];\n\n{\n   <span class=\"kw\">let </span>(left, right) = v.rsplit_array_ref::&lt;<span class=\"number\">0</span>&gt;();\n   <span class=\"macro\">assert_eq!</span>(left, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]);\n   <span class=\"macro\">assert_eq!</span>(right, <span class=\"kw-2\">&amp;</span>[]);\n}\n\n{\n    <span class=\"kw\">let </span>(left, right) = v.rsplit_array_ref::&lt;<span class=\"number\">2</span>&gt;();\n    <span class=\"macro\">assert_eq!</span>(left, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n    <span class=\"macro\">assert_eq!</span>(right, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">5</span>, <span class=\"number\">6</span>]);\n}\n\n{\n    <span class=\"kw\">let </span>(left, right) = v.rsplit_array_ref::&lt;<span class=\"number\">6</span>&gt;();\n    <span class=\"macro\">assert_eq!</span>(left, <span class=\"kw-2\">&amp;</span>[]);\n    <span class=\"macro\">assert_eq!</span>(right, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(split_array)%5D%0A%0Afn+main()+%7B%0A++++let+v+=+%5B1,+2,+3,+4,+5,+6%5D;%0A++++%0A++++%7B%0A+++++++let+(left,+right)+=+v.rsplit_array_ref::%3C0%3E();%0A+++++++assert_eq!(left,+%26%5B1,+2,+3,+4,+5,+6%5D);%0A+++++++assert_eq!(right,+%26%5B%5D);%0A++++%7D%0A++++%0A++++%7B%0A++++++++let+(left,+right)+=+v.rsplit_array_ref::%3C2%3E();%0A++++++++assert_eq!(left,+%26%5B1,+2,+3,+4%5D);%0A++++++++assert_eq!(right,+%26%5B5,+6%5D);%0A++++%7D%0A++++%0A++++%7B%0A++++++++let+(left,+right)+=+v.rsplit_array_ref::%3C6%3E();%0A++++++++assert_eq!(left,+%26%5B%5D);%0A++++++++assert_eq!(right,+%26%5B1,+2,+3,+4,+5,+6%5D);%0A++++%7D%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.rsplit_array_mut\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#759\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.rsplit_array_mut\" class=\"fn\">rsplit_array_mut</a>&lt;const M: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;(&amp;mut self) -&gt; (&amp;mut <a class=\"primitive\" href=\"primitive.slice.html\">[T]</a>, &amp;mut <a class=\"primitive\" href=\"primitive.array.html\">[T; M]</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>split_array</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/90091\">#90091</a>)</span></div></span></summary><div class=\"docblock\"><p>Divides one mutable array reference into two at an index from the end.</p>\n<p>The first will contain all indices from <code>[0, N - M)</code> (excluding\nthe index <code>N - M</code> itself) and the second will contain all\nindices from <code>[N - M, N)</code> (excluding the index <code>N</code> itself).</p>\n<h5 id=\"panics-3\"><a class=\"doc-anchor\" href=\"#panics-3\">§</a>Panics</h5>\n<p>Panics if <code>M &gt; N</code>.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(split_array)]\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = [<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">0</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];\n<span class=\"kw\">let </span>(left, right) = v.rsplit_array_mut::&lt;<span class=\"number\">4</span>&gt;();\n<span class=\"macro\">assert_eq!</span>(left, <span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">1</span>, <span class=\"number\">0</span>]);\n<span class=\"macro\">assert_eq!</span>(right, <span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">3</span>, <span class=\"number\">0</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>][..]);\nleft[<span class=\"number\">1</span>] = <span class=\"number\">2</span>;\nright[<span class=\"number\">1</span>] = <span class=\"number\">4</span>;\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(split_array)%5D%0A%0Afn+main()+%7B%0A++++let+mut+v+=+%5B1,+0,+3,+0,+5,+6%5D;%0A++++let+(left,+right)+=+v.rsplit_array_mut::%3C4%3E();%0A++++assert_eq!(left,+%26mut+%5B1,+0%5D);%0A++++assert_eq!(right,+%26mut+%5B3,+0,+5,+6%5D%5B..%5D);%0A++++left%5B1%5D+=+2;%0A++++right%5B1%5D+=+4;%0A++++assert_eq!(v,+%5B1,+2,+3,+4,+5,+6%5D);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-%5BMaybeUninit%3CT%3E;+N%5D\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/mem/maybe_uninit.rs.html#1421\">source</a><a href=\"#impl-%5BMaybeUninit%3CT%3E;+N%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; [<a class=\"union\" href=\"mem/union.MaybeUninit.html\" title=\"union std::mem::MaybeUninit\">MaybeUninit</a>&lt;T&gt;; <a class=\"primitive\" href=\"primitive.array.html\">N</a>]</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.transpose\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/mem/maybe_uninit.rs.html#1435\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.transpose\" class=\"fn\">transpose</a>(self) -&gt; <a class=\"union\" href=\"mem/union.MaybeUninit.html\" title=\"union std::mem::MaybeUninit\">MaybeUninit</a>&lt;<a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>maybe_uninit_uninit_array_transpose</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/96097\">#96097</a>)</span></div></span></summary><div class=\"docblock\"><p>Transposes a <code>[MaybeUninit&lt;T&gt;; N]</code> into a <code>MaybeUninit&lt;[T; N]&gt;</code>.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(maybe_uninit_uninit_array_transpose)]\n\n</span><span class=\"kw\">let </span>data = [MaybeUninit::&lt;u8&gt;::uninit(); <span class=\"number\">1000</span>];\n<span class=\"kw\">let </span>data: MaybeUninit&lt;[u8; <span class=\"number\">1000</span>]&gt; = data.transpose();</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(maybe_uninit_uninit_array_transpose)%5D%0Afn+main()+%7B%0A++++use+std::mem::MaybeUninit;%0A++++%0A++++let+data+=+%5BMaybeUninit::%3Cu8%3E::uninit();+1000%5D;%0A++++let+data:+MaybeUninit%3C%5Bu8;+1000%5D%3E+=+data.transpose();%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details></div></details></div><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">§</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AsMut%3C%5BT%5D%3E-for-%5BT;+N%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#167\">source</a></span><a href=\"#impl-AsMut%3C%5BT%5D%3E-for-%5BT;+N%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"convert/trait.AsMut.html\" title=\"trait std::convert::AsMut\">AsMut</a>&lt;<a class=\"primitive\" href=\"primitive.slice.html\">[T]</a>&gt; for <a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_mut-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#169\">source</a><a href=\"#method.as_mut-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.AsMut.html#tymethod.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\">Converts this type into a mutable reference of the (usually inferred) input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AsMut%3C%5BT;+N%5D%3E-for-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#984-987\">source</a><a href=\"#impl-AsMut%3C%5BT;+N%5D%3E-for-Simd%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"convert/trait.AsMut.html\" title=\"trait std::convert::AsMut\">AsMut</a>&lt;<a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a>&gt; for <a class=\"struct\" href=\"simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"simd/struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"simd/trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,\n    T: <a class=\"trait\" href=\"simd/trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#990\">source</a><a href=\"#method.as_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.AsMut.html#tymethod.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a></h4></section></summary><div class=\"docblock\">Converts this type into a mutable reference of the (usually inferred) input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AsRef%3C%5BT%5D%3E-for-%5BT;+N%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#159\">source</a></span><a href=\"#impl-AsRef%3C%5BT%5D%3E-for-%5BT;+N%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"primitive\" href=\"primitive.slice.html\">[T]</a>&gt; for <a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_ref-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#161\">source</a><a href=\"#method.as_ref-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\">Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AsRef%3C%5BT;+N%5D%3E-for-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#973-976\">source</a><a href=\"#impl-AsRef%3C%5BT;+N%5D%3E-for-Simd%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a>&gt; for <a class=\"struct\" href=\"simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"simd/struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"simd/trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,\n    T: <a class=\"trait\" href=\"simd/trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#979\">source</a><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a></h4></section></summary><div class=\"docblock\">Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Borrow%3C%5BT%5D%3E-for-%5BT;+N%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#175\">source</a></span><a href=\"#impl-Borrow%3C%5BT%5D%3E-for-%5BT;+N%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;<a class=\"primitive\" href=\"primitive.slice.html\">[T]</a>&gt; for <a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#176\">source</a><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BorrowMut%3C%5BT%5D%3E-for-%5BT;+N%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#182\">source</a></span><a href=\"#impl-BorrowMut%3C%5BT%5D%3E-for-%5BT;+N%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;<a class=\"primitive\" href=\"primitive.slice.html\">[T]</a>&gt; for <a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#183\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Clone-for-%5BT;+N%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.58.0\">1.58.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#401\">source</a></span><a href=\"#impl-Clone-for-%5BT;+N%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a> for <a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#403\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a></h4></section></summary><div class=\"docblock\">Returns a copy of the value. <a href=\"clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#408\">source</a><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a>)</h4></section></summary><div class=\"docblock\">Performs copy-assignment from <code>source</code>. <a href=\"clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-%5BT;+N%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#313\">source</a></span><a href=\"#impl-Debug-for-%5BT;+N%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#314\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Default-for-%5BT;+32%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453\">source</a></span><a href=\"#impl-Default-for-%5BT;+32%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for <a class=\"primitive\" href=\"primitive.array.html\">[T; 32]</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"default/trait.Default.html\" title=\"trait std::default::Default\">Default</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.default-13\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453\">source</a><a href=\"#method.default-13\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"primitive\" href=\"primitive.array.html\">[T; 32]</a></h4></section></summary><div class=\"docblock\">Returns the “default value” for a type. <a href=\"default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Default-for-%5BT;+core::::array::%7Bimpl%2330%7D::%7Bconstant%230%7D%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453\">source</a></span><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2330%7D::%7Bconstant%230%7D%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for <a class=\"primitive\" href=\"primitive.array.html\">[T; 31]</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"default/trait.Default.html\" title=\"trait std::default::Default\">Default</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.default-18\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453\">source</a><a href=\"#method.default-18\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"primitive\" href=\"primitive.array.html\">[T; 31]</a></h4></section></summary><div class=\"docblock\">Returns the “default value” for a type. <a href=\"default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Default-for-%5BT;+core::::array::%7Bimpl%2331%7D::%7Bconstant%230%7D%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453\">source</a></span><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2331%7D::%7Bconstant%230%7D%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for <a class=\"primitive\" href=\"primitive.array.html\">[T; 30]</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"default/trait.Default.html\" title=\"trait std::default::Default\">Default</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.default-21\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453\">source</a><a href=\"#method.default-21\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"primitive\" href=\"primitive.array.html\">[T; 30]</a></h4></section></summary><div class=\"docblock\">Returns the “default value” for a type. <a href=\"default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Default-for-%5BT;+core::::array::%7Bimpl%2332%7D::%7Bconstant%230%7D%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453\">source</a></span><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2332%7D::%7Bconstant%230%7D%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for <a class=\"primitive\" href=\"primitive.array.html\">[T; 29]</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"default/trait.Default.html\" title=\"trait std::default::Default\">Default</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.default-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453\">source</a><a href=\"#method.default-7\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"primitive\" href=\"primitive.array.html\">[T; 29]</a></h4></section></summary><div class=\"docblock\">Returns the “default value” for a type. <a href=\"default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Default-for-%5BT;+core::::array::%7Bimpl%2333%7D::%7Bconstant%230%7D%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453\">source</a></span><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2333%7D::%7Bconstant%230%7D%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for <a class=\"primitive\" href=\"primitive.array.html\">[T; 28]</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"default/trait.Default.html\" title=\"trait std::default::Default\">Default</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.default-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453\">source</a><a href=\"#method.default-8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"primitive\" href=\"primitive.array.html\">[T; 28]</a></h4></section></summary><div class=\"docblock\">Returns the “default value” for a type. <a href=\"default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Default-for-%5BT;+core::::array::%7Bimpl%2334%7D::%7Bconstant%230%7D%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453\">source</a></span><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2334%7D::%7Bconstant%230%7D%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for <a class=\"primitive\" href=\"primitive.array.html\">[T; 27]</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"default/trait.Default.html\" title=\"trait std::default::Default\">Default</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.default-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453\">source</a><a href=\"#method.default-6\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"primitive\" href=\"primitive.array.html\">[T; 27]</a></h4></section></summary><div class=\"docblock\">Returns the “default value” for a type. <a href=\"default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Default-for-%5BT;+core::::array::%7Bimpl%2335%7D::%7Bconstant%230%7D%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453\">source</a></span><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2335%7D::%7Bconstant%230%7D%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for <a class=\"primitive\" href=\"primitive.array.html\">[T; 26]</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"default/trait.Default.html\" title=\"trait std::default::Default\">Default</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.default-15\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453\">source</a><a href=\"#method.default-15\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"primitive\" href=\"primitive.array.html\">[T; 26]</a></h4></section></summary><div class=\"docblock\">Returns the “default value” for a type. <a href=\"default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Default-for-%5BT;+core::::array::%7Bimpl%2336%7D::%7Bconstant%230%7D%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453\">source</a></span><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2336%7D::%7Bconstant%230%7D%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for <a class=\"primitive\" href=\"primitive.array.html\">[T; 25]</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"default/trait.Default.html\" title=\"trait std::default::Default\">Default</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.default-12\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453\">source</a><a href=\"#method.default-12\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"primitive\" href=\"primitive.array.html\">[T; 25]</a></h4></section></summary><div class=\"docblock\">Returns the “default value” for a type. <a href=\"default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Default-for-%5BT;+core::::array::%7Bimpl%2337%7D::%7Bconstant%230%7D%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453\">source</a></span><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2337%7D::%7Bconstant%230%7D%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for <a class=\"primitive\" href=\"primitive.array.html\">[T; 24]</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"default/trait.Default.html\" title=\"trait std::default::Default\">Default</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.default-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453\">source</a><a href=\"#method.default-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"primitive\" href=\"primitive.array.html\">[T; 24]</a></h4></section></summary><div class=\"docblock\">Returns the “default value” for a type. <a href=\"default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Default-for-%5BT;+core::::array::%7Bimpl%2338%7D::%7Bconstant%230%7D%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453\">source</a></span><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2338%7D::%7Bconstant%230%7D%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for <a class=\"primitive\" href=\"primitive.array.html\">[T; 23]</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"default/trait.Default.html\" title=\"trait std::default::Default\">Default</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.default-29\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453\">source</a><a href=\"#method.default-29\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"primitive\" href=\"primitive.array.html\">[T; 23]</a></h4></section></summary><div class=\"docblock\">Returns the “default value” for a type. <a href=\"default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Default-for-%5BT;+core::::array::%7Bimpl%2339%7D::%7Bconstant%230%7D%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453\">source</a></span><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2339%7D::%7Bconstant%230%7D%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for <a class=\"primitive\" href=\"primitive.array.html\">[T; 22]</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"default/trait.Default.html\" title=\"trait std::default::Default\">Default</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.default-26\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453\">source</a><a href=\"#method.default-26\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"primitive\" href=\"primitive.array.html\">[T; 22]</a></h4></section></summary><div class=\"docblock\">Returns the “default value” for a type. <a href=\"default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Default-for-%5BT;+core::::array::%7Bimpl%2340%7D::%7Bconstant%230%7D%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453\">source</a></span><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2340%7D::%7Bconstant%230%7D%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for <a class=\"primitive\" href=\"primitive.array.html\">[T; 21]</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"default/trait.Default.html\" title=\"trait std::default::Default\">Default</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.default-9\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453\">source</a><a href=\"#method.default-9\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"primitive\" href=\"primitive.array.html\">[T; 21]</a></h4></section></summary><div class=\"docblock\">Returns the “default value” for a type. <a href=\"default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Default-for-%5BT;+core::::array::%7Bimpl%2341%7D::%7Bconstant%230%7D%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453\">source</a></span><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2341%7D::%7Bconstant%230%7D%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for <a class=\"primitive\" href=\"primitive.array.html\">[T; 20]</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"default/trait.Default.html\" title=\"trait std::default::Default\">Default</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.default-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453\">source</a><a href=\"#method.default-5\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"primitive\" href=\"primitive.array.html\">[T; 20]</a></h4></section></summary><div class=\"docblock\">Returns the “default value” for a type. <a href=\"default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Default-for-%5BT;+core::::array::%7Bimpl%2342%7D::%7Bconstant%230%7D%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453\">source</a></span><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2342%7D::%7Bconstant%230%7D%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for <a class=\"primitive\" href=\"primitive.array.html\">[T; 19]</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"default/trait.Default.html\" title=\"trait std::default::Default\">Default</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.default-11\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453\">source</a><a href=\"#method.default-11\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"primitive\" href=\"primitive.array.html\">[T; 19]</a></h4></section></summary><div class=\"docblock\">Returns the “default value” for a type. <a href=\"default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Default-for-%5BT;+core::::array::%7Bimpl%2343%7D::%7Bconstant%230%7D%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453\">source</a></span><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2343%7D::%7Bconstant%230%7D%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for <a class=\"primitive\" href=\"primitive.array.html\">[T; 18]</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"default/trait.Default.html\" title=\"trait std::default::Default\">Default</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.default-27\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453\">source</a><a href=\"#method.default-27\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"primitive\" href=\"primitive.array.html\">[T; 18]</a></h4></section></summary><div class=\"docblock\">Returns the “default value” for a type. <a href=\"default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Default-for-%5BT;+core::::array::%7Bimpl%2344%7D::%7Bconstant%230%7D%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453\">source</a></span><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2344%7D::%7Bconstant%230%7D%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for <a class=\"primitive\" href=\"primitive.array.html\">[T; 17]</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"default/trait.Default.html\" title=\"trait std::default::Default\">Default</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.default-31\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453\">source</a><a href=\"#method.default-31\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"primitive\" href=\"primitive.array.html\">[T; 17]</a></h4></section></summary><div class=\"docblock\">Returns the “default value” for a type. <a href=\"default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Default-for-%5BT;+core::::array::%7Bimpl%2345%7D::%7Bconstant%230%7D%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453\">source</a></span><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2345%7D::%7Bconstant%230%7D%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for <a class=\"primitive\" href=\"primitive.array.html\">[T; 16]</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"default/trait.Default.html\" title=\"trait std::default::Default\">Default</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.default-22\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453\">source</a><a href=\"#method.default-22\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"primitive\" href=\"primitive.array.html\">[T; 16]</a></h4></section></summary><div class=\"docblock\">Returns the “default value” for a type. <a href=\"default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Default-for-%5BT;+core::::array::%7Bimpl%2346%7D::%7Bconstant%230%7D%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453\">source</a></span><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2346%7D::%7Bconstant%230%7D%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for <a class=\"primitive\" href=\"primitive.array.html\">[T; 15]</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"default/trait.Default.html\" title=\"trait std::default::Default\">Default</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.default-24\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453\">source</a><a href=\"#method.default-24\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"primitive\" href=\"primitive.array.html\">[T; 15]</a></h4></section></summary><div class=\"docblock\">Returns the “default value” for a type. <a href=\"default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Default-for-%5BT;+core::::array::%7Bimpl%2347%7D::%7Bconstant%230%7D%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453\">source</a></span><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2347%7D::%7Bconstant%230%7D%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for <a class=\"primitive\" href=\"primitive.array.html\">[T; 14]</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"default/trait.Default.html\" title=\"trait std::default::Default\">Default</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.default-23\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453\">source</a><a href=\"#method.default-23\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"primitive\" href=\"primitive.array.html\">[T; 14]</a></h4></section></summary><div class=\"docblock\">Returns the “default value” for a type. <a href=\"default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Default-for-%5BT;+core::::array::%7Bimpl%2348%7D::%7Bconstant%230%7D%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453\">source</a></span><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2348%7D::%7Bconstant%230%7D%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for <a class=\"primitive\" href=\"primitive.array.html\">[T; 13]</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"default/trait.Default.html\" title=\"trait std::default::Default\">Default</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.default-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453\">source</a><a href=\"#method.default-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"primitive\" href=\"primitive.array.html\">[T; 13]</a></h4></section></summary><div class=\"docblock\">Returns the “default value” for a type. <a href=\"default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Default-for-%5BT;+core::::array::%7Bimpl%2349%7D::%7Bconstant%230%7D%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453\">source</a></span><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2349%7D::%7Bconstant%230%7D%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for <a class=\"primitive\" href=\"primitive.array.html\">[T; 12]</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"default/trait.Default.html\" title=\"trait std::default::Default\">Default</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.default-32\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453\">source</a><a href=\"#method.default-32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"primitive\" href=\"primitive.array.html\">[T; 12]</a></h4></section></summary><div class=\"docblock\">Returns the “default value” for a type. <a href=\"default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Default-for-%5BT;+core::::array::%7Bimpl%2350%7D::%7Bconstant%230%7D%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453\">source</a></span><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2350%7D::%7Bconstant%230%7D%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for <a class=\"primitive\" href=\"primitive.array.html\">[T; 11]</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"default/trait.Default.html\" title=\"trait std::default::Default\">Default</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.default-20\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453\">source</a><a href=\"#method.default-20\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"primitive\" href=\"primitive.array.html\">[T; 11]</a></h4></section></summary><div class=\"docblock\">Returns the “default value” for a type. <a href=\"default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Default-for-%5BT;+core::::array::%7Bimpl%2351%7D::%7Bconstant%230%7D%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453\">source</a></span><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2351%7D::%7Bconstant%230%7D%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for <a class=\"primitive\" href=\"primitive.array.html\">[T; 10]</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"default/trait.Default.html\" title=\"trait std::default::Default\">Default</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.default-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453\">source</a><a href=\"#method.default-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"primitive\" href=\"primitive.array.html\">[T; 10]</a></h4></section></summary><div class=\"docblock\">Returns the “default value” for a type. <a href=\"default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Default-for-%5BT;+core::::array::%7Bimpl%2352%7D::%7Bconstant%230%7D%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453\">source</a></span><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2352%7D::%7Bconstant%230%7D%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for <a class=\"primitive\" href=\"primitive.array.html\">[T; 9]</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"default/trait.Default.html\" title=\"trait std::default::Default\">Default</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.default-16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453\">source</a><a href=\"#method.default-16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"primitive\" href=\"primitive.array.html\">[T; 9]</a></h4></section></summary><div class=\"docblock\">Returns the “default value” for a type. <a href=\"default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Default-for-%5BT;+core::::array::%7Bimpl%2353%7D::%7Bconstant%230%7D%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453\">source</a></span><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2353%7D::%7Bconstant%230%7D%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for <a class=\"primitive\" href=\"primitive.array.html\">[T; 8]</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"default/trait.Default.html\" title=\"trait std::default::Default\">Default</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.default-10\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453\">source</a><a href=\"#method.default-10\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"primitive\" href=\"primitive.array.html\">[T; 8]</a></h4></section></summary><div class=\"docblock\">Returns the “default value” for a type. <a href=\"default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Default-for-%5BT;+core::::array::%7Bimpl%2354%7D::%7Bconstant%230%7D%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453\">source</a></span><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2354%7D::%7Bconstant%230%7D%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for <a class=\"primitive\" href=\"primitive.array.html\">[T; 7]</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"default/trait.Default.html\" title=\"trait std::default::Default\">Default</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.default-25\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453\">source</a><a href=\"#method.default-25\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"primitive\" href=\"primitive.array.html\">[T; 7]</a></h4></section></summary><div class=\"docblock\">Returns the “default value” for a type. <a href=\"default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Default-for-%5BT;+core::::array::%7Bimpl%2355%7D::%7Bconstant%230%7D%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453\">source</a></span><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2355%7D::%7Bconstant%230%7D%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for <a class=\"primitive\" href=\"primitive.array.html\">[T; 6]</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"default/trait.Default.html\" title=\"trait std::default::Default\">Default</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.default-19\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453\">source</a><a href=\"#method.default-19\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"primitive\" href=\"primitive.array.html\">[T; 6]</a></h4></section></summary><div class=\"docblock\">Returns the “default value” for a type. <a href=\"default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Default-for-%5BT;+core::::array::%7Bimpl%2356%7D::%7Bconstant%230%7D%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453\">source</a></span><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2356%7D::%7Bconstant%230%7D%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for <a class=\"primitive\" href=\"primitive.array.html\">[T; 5]</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"default/trait.Default.html\" title=\"trait std::default::Default\">Default</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.default-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453\">source</a><a href=\"#method.default-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"primitive\" href=\"primitive.array.html\">[T; 5]</a></h4></section></summary><div class=\"docblock\">Returns the “default value” for a type. <a href=\"default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Default-for-%5BT;+core::::array::%7Bimpl%2357%7D::%7Bconstant%230%7D%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453\">source</a></span><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2357%7D::%7Bconstant%230%7D%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for <a class=\"primitive\" href=\"primitive.array.html\">[T; 4]</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"default/trait.Default.html\" title=\"trait std::default::Default\">Default</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.default-17\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453\">source</a><a href=\"#method.default-17\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"primitive\" href=\"primitive.array.html\">[T; 4]</a></h4></section></summary><div class=\"docblock\">Returns the “default value” for a type. <a href=\"default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Default-for-%5BT;+core::::array::%7Bimpl%2358%7D::%7Bconstant%230%7D%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453\">source</a></span><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2358%7D::%7Bconstant%230%7D%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for <a class=\"primitive\" href=\"primitive.array.html\">[T; 3]</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"default/trait.Default.html\" title=\"trait std::default::Default\">Default</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.default-28\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453\">source</a><a href=\"#method.default-28\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"primitive\" href=\"primitive.array.html\">[T; 3]</a></h4></section></summary><div class=\"docblock\">Returns the “default value” for a type. <a href=\"default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Default-for-%5BT;+core::::array::%7Bimpl%2359%7D::%7Bconstant%230%7D%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453\">source</a></span><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2359%7D::%7Bconstant%230%7D%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for <a class=\"primitive\" href=\"primitive.array.html\">[T; 2]</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"default/trait.Default.html\" title=\"trait std::default::Default\">Default</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453\">source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"primitive\" href=\"primitive.array.html\">[T; 2]</a></h4></section></summary><div class=\"docblock\">Returns the “default value” for a type. <a href=\"default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Default-for-%5BT;+core::::array::%7Bimpl%2360%7D::%7Bconstant%230%7D%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453\">source</a></span><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2360%7D::%7Bconstant%230%7D%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for <a class=\"primitive\" href=\"primitive.array.html\">[T; 1]</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"default/trait.Default.html\" title=\"trait std::default::Default\">Default</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.default-30\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453\">source</a><a href=\"#method.default-30\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"primitive\" href=\"primitive.array.html\">[T; 1]</a></h4></section></summary><div class=\"docblock\">Returns the “default value” for a type. <a href=\"default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Default-for-%5BT;+core::::array::%7Bimpl%2361%7D::%7Bconstant%230%7D%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453\">source</a></span><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2361%7D::%7Bconstant%230%7D%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for <a class=\"primitive\" href=\"primitive.array.html\">[T; 0]</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.default-14\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#453\">source</a><a href=\"#method.default-14\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"primitive\" href=\"primitive.array.html\">[T; 0]</a></h4></section></summary><div class=\"docblock\">Returns the “default value” for a type. <a href=\"default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%26%5BT;+N%5D%3E-for-Cow%3C'a,+%5BT%5D%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.77.0\">1.77.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/cow.rs.html#19\">source</a></span><a href=\"#impl-From%3C%26%5BT;+N%5D%3E-for-Cow%3C'a,+%5BT%5D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T, const N: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;&amp;'a <a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a>&gt; for <a class=\"enum\" href=\"borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"primitive\" href=\"primitive.slice.html\">[T]</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-42\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/cow.rs.html#26\">source</a><a href=\"#method.from-42\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: &amp;'a <a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a>) -&gt; <a class=\"enum\" href=\"borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"primitive\" href=\"primitive.slice.html\">[T]</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a <a href=\"borrow/enum.Cow.html#variant.Borrowed\" title=\"variant std::borrow::Cow::Borrowed\"><code>Borrowed</code></a> variant of <a href=\"borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\"><code>Cow</code></a>\nfrom a reference to an array.</p>\n<p>This conversion does not allocate or clone the data.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%26%5BT;+N%5D%3E-for-Vec%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.74.0\">1.74.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3374\">source</a></span><a href=\"#impl-From%3C%26%5BT;+N%5D%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a>&gt; for <a class=\"struct\" href=\"vec/struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-34\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3382\">source</a><a href=\"#method.from-34\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: &amp;<a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a>) -&gt; <a class=\"struct\" href=\"vec/struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Allocate a <code>Vec&lt;T&gt;</code> and fill it by cloning <code>s</code>’s items.</p>\n<h5 id=\"examples-19\"><a class=\"doc-anchor\" href=\"#examples-19\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(Vec::from(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]), <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(Vec::from(%26%5B1,+2,+3%5D),+vec!%5B1,+2,+3%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%26mut+%5BT;+N%5D%3E-for-Vec%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.74.0\">1.74.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3389\">source</a></span><a href=\"#impl-From%3C%26mut+%5BT;+N%5D%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;&amp;mut <a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a>&gt; for <a class=\"struct\" href=\"vec/struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-44\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3397\">source</a><a href=\"#method.from-44\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: &amp;mut <a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a>) -&gt; <a class=\"struct\" href=\"vec/struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Allocate a <code>Vec&lt;T&gt;</code> and fill it by cloning <code>s</code>’s items.</p>\n<h5 id=\"examples-21\"><a class=\"doc-anchor\" href=\"#examples-21\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(Vec::from(<span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]), <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(Vec::from(%26mut+%5B1,+2,+3%5D),+vec!%5B1,+2,+3%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%5B(K,+V);+N%5D%3E-for-BTreeMap%3CK,+V%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.56.0\">1.56.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/map.rs.html#2338\">source</a></span><a href=\"#impl-From%3C%5B(K,+V);+N%5D%3E-for-BTreeMap%3CK,+V%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, const N: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;[<a class=\"primitive\" href=\"primitive.tuple.html\">(K, V)</a>; <a class=\"primitive\" href=\"primitive.array.html\">N</a>]&gt; for <a class=\"struct\" href=\"collections/struct.BTreeMap.html\" title=\"struct std::collections::BTreeMap\">BTreeMap</a>&lt;K, V&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-38\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/map.rs.html#2348\">source</a><a href=\"#method.from-38\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(arr: [<a class=\"primitive\" href=\"primitive.tuple.html\">(K, V)</a>; <a class=\"primitive\" href=\"primitive.array.html\">N</a>]) -&gt; <a class=\"struct\" href=\"collections/struct.BTreeMap.html\" title=\"struct std::collections::BTreeMap\">BTreeMap</a>&lt;K, V&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <code>[(K, V); N]</code> into a <code>BTreeMap&lt;(K, V)&gt;</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::BTreeMap;\n\n<span class=\"kw\">let </span>map1 = BTreeMap::from([(<span class=\"number\">1</span>, <span class=\"number\">2</span>), (<span class=\"number\">3</span>, <span class=\"number\">4</span>)]);\n<span class=\"kw\">let </span>map2: BTreeMap&lt;<span class=\"kw\">_</span>, <span class=\"kw\">_</span>&gt; = [(<span class=\"number\">1</span>, <span class=\"number\">2</span>), (<span class=\"number\">3</span>, <span class=\"number\">4</span>)].into();\n<span class=\"macro\">assert_eq!</span>(map1, map2);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::BTreeMap;%0A++++%0A++++let+map1+=+BTreeMap::from(%5B(1,+2),+(3,+4)%5D);%0A++++let+map2:+BTreeMap%3C_,+_%3E+=+%5B(1,+2),+(3,+4)%5D.into();%0A++++assert_eq!(map1,+map2);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%5B(K,+V);+N%5D%3E-for-HashMap%3CK,+V%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.56.0\">1.56.0</span> · <a class=\"src\" href=\"../src/std/collections/hash/map.rs.html#1360-1376\">source</a></span><a href=\"#impl-From%3C%5B(K,+V);+N%5D%3E-for-HashMap%3CK,+V%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, const N: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;[<a class=\"primitive\" href=\"primitive.tuple.html\">(K, V)</a>; <a class=\"primitive\" href=\"primitive.array.html\">N</a>]&gt; for <a class=\"struct\" href=\"collections/hash_map/struct.HashMap.html\" title=\"struct std::collections::hash_map::HashMap\">HashMap</a>&lt;K, V, <a class=\"struct\" href=\"collections/hash_map/struct.RandomState.html\" title=\"struct std::collections::hash_map::RandomState\">RandomState</a>&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-47\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../src/std/collections/hash/map.rs.html#1373-1375\">source</a><a href=\"#method.from-47\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(arr: [<a class=\"primitive\" href=\"primitive.tuple.html\">(K, V)</a>; <a class=\"primitive\" href=\"primitive.array.html\">N</a>]) -&gt; Self</h4></section></summary><div class=\"docblock\"><h5 id=\"examples-24\"><a class=\"doc-anchor\" href=\"#examples-24\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashMap;\n\n<span class=\"kw\">let </span>map1 = HashMap::from([(<span class=\"number\">1</span>, <span class=\"number\">2</span>), (<span class=\"number\">3</span>, <span class=\"number\">4</span>)]);\n<span class=\"kw\">let </span>map2: HashMap&lt;<span class=\"kw\">_</span>, <span class=\"kw\">_</span>&gt; = [(<span class=\"number\">1</span>, <span class=\"number\">2</span>), (<span class=\"number\">3</span>, <span class=\"number\">4</span>)].into();\n<span class=\"macro\">assert_eq!</span>(map1, map2);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashMap;%0A++++%0A++++let+map1+=+HashMap::from(%5B(1,+2),+(3,+4)%5D);%0A++++let+map2:+HashMap%3C_,+_%3E+=+%5B(1,+2),+(3,+4)%5D.into();%0A++++assert_eq!(map1,+map2);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%5BT;+1%5D%3E-for-(T,)\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0\">1.71.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a></span><a href=\"#impl-From%3C%5BT;+1%5D%3E-for-(T,)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.array.html\">[T; 1]</a>&gt; for <a class=\"primitive\" href=\"primitive.tuple.html\">(T,)</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-27\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a><a href=\"#method.from-27\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(array: <a class=\"primitive\" href=\"primitive.array.html\">[T; 1]</a>) -&gt; <a class=\"primitive\" href=\"primitive.tuple.html\">(T,)</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%5BT;+10%5D%3E-for-(T,+T,+T,+T,+T,+T,+T,+T,+T,+T)\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0\">1.71.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a></span><a href=\"#impl-From%3C%5BT;+10%5D%3E-for-(T,+T,+T,+T,+T,+T,+T,+T,+T,+T)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.array.html\">[T; 10]</a>&gt; for <a class=\"primitive\" href=\"primitive.tuple.html\">(T, T, T, T, T, T, T, T, T, T)</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a><a href=\"#method.from-7\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(array: <a class=\"primitive\" href=\"primitive.array.html\">[T; 10]</a>) -&gt; <a class=\"primitive\" href=\"primitive.tuple.html\">(T, T, T, T, T, T, T, T, T, T)</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%5BT;+11%5D%3E-for-(T,+T,+T,+T,+T,+T,+T,+T,+T,+T,+T)\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0\">1.71.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a></span><a href=\"#impl-From%3C%5BT;+11%5D%3E-for-(T,+T,+T,+T,+T,+T,+T,+T,+T,+T,+T)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.array.html\">[T; 11]</a>&gt; for <a class=\"primitive\" href=\"primitive.tuple.html\">(T, T, T, T, T, T, T, T, T, T, T)</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-17\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a><a href=\"#method.from-17\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(array: <a class=\"primitive\" href=\"primitive.array.html\">[T; 11]</a>) -&gt; <a class=\"primitive\" href=\"primitive.tuple.html\">(T, T, T, T, T, T, T, T, T, T, T)</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%5BT;+12%5D%3E-for-(T,+T,+T,+T,+T,+T,+T,+T,+T,+T,+T,+T)\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0\">1.71.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a></span><a href=\"#impl-From%3C%5BT;+12%5D%3E-for-(T,+T,+T,+T,+T,+T,+T,+T,+T,+T,+T,+T)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.array.html\">[T; 12]</a>&gt; for <a class=\"primitive\" href=\"primitive.tuple.html\">(T, T, T, T, T, T, T, T, T, T, T, T)</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-22\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a><a href=\"#method.from-22\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(array: <a class=\"primitive\" href=\"primitive.array.html\">[T; 12]</a>) -&gt; <a class=\"primitive\" href=\"primitive.tuple.html\">(T, T, T, T, T, T, T, T, T, T, T, T)</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%5BT;+2%5D%3E-for-(T,+T)\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0\">1.71.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a></span><a href=\"#impl-From%3C%5BT;+2%5D%3E-for-(T,+T)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.array.html\">[T; 2]</a>&gt; for <a class=\"primitive\" href=\"primitive.tuple.html\">(T, T)</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-15\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a><a href=\"#method.from-15\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(array: <a class=\"primitive\" href=\"primitive.array.html\">[T; 2]</a>) -&gt; <a class=\"primitive\" href=\"primitive.tuple.html\">(T, T)</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%5BT;+3%5D%3E-for-(T,+T,+T)\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0\">1.71.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a></span><a href=\"#impl-From%3C%5BT;+3%5D%3E-for-(T,+T,+T)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.array.html\">[T; 3]</a>&gt; for <a class=\"primitive\" href=\"primitive.tuple.html\">(T, T, T)</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-30\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a><a href=\"#method.from-30\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(array: <a class=\"primitive\" href=\"primitive.array.html\">[T; 3]</a>) -&gt; <a class=\"primitive\" href=\"primitive.tuple.html\">(T, T, T)</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%5BT;+4%5D%3E-for-(T,+T,+T,+T)\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0\">1.71.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a></span><a href=\"#impl-From%3C%5BT;+4%5D%3E-for-(T,+T,+T,+T)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.array.html\">[T; 4]</a>&gt; for <a class=\"primitive\" href=\"primitive.tuple.html\">(T, T, T, T)</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-31\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a><a href=\"#method.from-31\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(array: <a class=\"primitive\" href=\"primitive.array.html\">[T; 4]</a>) -&gt; <a class=\"primitive\" href=\"primitive.tuple.html\">(T, T, T, T)</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%5BT;+5%5D%3E-for-(T,+T,+T,+T,+T)\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0\">1.71.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a></span><a href=\"#impl-From%3C%5BT;+5%5D%3E-for-(T,+T,+T,+T,+T)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.array.html\">[T; 5]</a>&gt; for <a class=\"primitive\" href=\"primitive.tuple.html\">(T, T, T, T, T)</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a><a href=\"#method.from-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(array: <a class=\"primitive\" href=\"primitive.array.html\">[T; 5]</a>) -&gt; <a class=\"primitive\" href=\"primitive.tuple.html\">(T, T, T, T, T)</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%5BT;+6%5D%3E-for-(T,+T,+T,+T,+T,+T)\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0\">1.71.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a></span><a href=\"#impl-From%3C%5BT;+6%5D%3E-for-(T,+T,+T,+T,+T,+T)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.array.html\">[T; 6]</a>&gt; for <a class=\"primitive\" href=\"primitive.tuple.html\">(T, T, T, T, T, T)</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-13\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a><a href=\"#method.from-13\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(array: <a class=\"primitive\" href=\"primitive.array.html\">[T; 6]</a>) -&gt; <a class=\"primitive\" href=\"primitive.tuple.html\">(T, T, T, T, T, T)</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%5BT;+7%5D%3E-for-(T,+T,+T,+T,+T,+T,+T)\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0\">1.71.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a></span><a href=\"#impl-From%3C%5BT;+7%5D%3E-for-(T,+T,+T,+T,+T,+T,+T)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.array.html\">[T; 7]</a>&gt; for <a class=\"primitive\" href=\"primitive.tuple.html\">(T, T, T, T, T, T, T)</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-14\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a><a href=\"#method.from-14\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(array: <a class=\"primitive\" href=\"primitive.array.html\">[T; 7]</a>) -&gt; <a class=\"primitive\" href=\"primitive.tuple.html\">(T, T, T, T, T, T, T)</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%5BT;+8%5D%3E-for-(T,+T,+T,+T,+T,+T,+T,+T)\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0\">1.71.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a></span><a href=\"#impl-From%3C%5BT;+8%5D%3E-for-(T,+T,+T,+T,+T,+T,+T,+T)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.array.html\">[T; 8]</a>&gt; for <a class=\"primitive\" href=\"primitive.tuple.html\">(T, T, T, T, T, T, T, T)</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a><a href=\"#method.from-8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(array: <a class=\"primitive\" href=\"primitive.array.html\">[T; 8]</a>) -&gt; <a class=\"primitive\" href=\"primitive.tuple.html\">(T, T, T, T, T, T, T, T)</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%5BT;+9%5D%3E-for-(T,+T,+T,+T,+T,+T,+T,+T,+T)\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0\">1.71.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a></span><a href=\"#impl-From%3C%5BT;+9%5D%3E-for-(T,+T,+T,+T,+T,+T,+T,+T,+T)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.array.html\">[T; 9]</a>&gt; for <a class=\"primitive\" href=\"primitive.tuple.html\">(T, T, T, T, T, T, T, T, T)</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-24\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a><a href=\"#method.from-24\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(array: <a class=\"primitive\" href=\"primitive.array.html\">[T; 9]</a>) -&gt; <a class=\"primitive\" href=\"primitive.tuple.html\">(T, T, T, T, T, T, T, T, T)</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%5BT;+N%5D%3E-for-Arc%3C%5BT%5D%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.74.0\">1.74.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/sync.rs.html#3499\">source</a></span><a href=\"#impl-From%3C%5BT;+N%5D%3E-for-Arc%3C%5BT%5D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a>&gt; for <a class=\"struct\" href=\"sync/struct.Arc.html\" title=\"struct std::sync::Arc\">Arc</a>&lt;<a class=\"primitive\" href=\"primitive.slice.html\">[T]</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-40\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/sync.rs.html#3513\">source</a><a href=\"#method.from-40\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(v: <a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a>) -&gt; <a class=\"struct\" href=\"sync/struct.Arc.html\" title=\"struct std::sync::Arc\">Arc</a>&lt;<a class=\"primitive\" href=\"primitive.slice.html\">[T]</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <a href=\"primitive.array.html\" title=\"primitive array\"><code>[T; N]</code></a> into an <code>Arc&lt;[T]&gt;</code>.</p>\n<p>The conversion moves the array into a newly allocated <code>Arc</code>.</p>\n<h5 id=\"example-2\"><a class=\"doc-anchor\" href=\"#example-2\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>original: [i32; <span class=\"number\">3</span>] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"kw\">let </span>shared: Arc&lt;[i32]&gt; = Arc::from(original);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"kw-2\">&amp;</span>shared[..]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::Arc;%0A++++let+original:+%5Bi32;+3%5D+=+%5B1,+2,+3%5D;%0A++++let+shared:+Arc%3C%5Bi32%5D%3E+=+Arc::from(original);%0A++++assert_eq!(%26%5B1,+2,+3%5D,+%26shared%5B..%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%5BT;+N%5D%3E-for-BTreeSet%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.56.0\">1.56.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#1212\">source</a></span><a href=\"#impl-From%3C%5BT;+N%5D%3E-for-BTreeSet%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a>&gt; for <a class=\"struct\" href=\"collections/struct.BTreeSet.html\" title=\"struct std::collections::BTreeSet\">BTreeSet</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-35\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#1222\">source</a><a href=\"#method.from-35\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(arr: <a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a>) -&gt; <a class=\"struct\" href=\"collections/struct.BTreeSet.html\" title=\"struct std::collections::BTreeSet\">BTreeSet</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <code>[T; N]</code> into a <code>BTreeSet&lt;T&gt;</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::BTreeSet;\n\n<span class=\"kw\">let </span>set1 = BTreeSet::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n<span class=\"kw\">let </span>set2: BTreeSet&lt;<span class=\"kw\">_</span>&gt; = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>].into();\n<span class=\"macro\">assert_eq!</span>(set1, set2);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::BTreeSet;%0A++++%0A++++let+set1+=+BTreeSet::from(%5B1,+2,+3,+4%5D);%0A++++let+set2:+BTreeSet%3C_%3E+=+%5B1,+2,+3,+4%5D.into();%0A++++assert_eq!(set1,+set2);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%5BT;+N%5D%3E-for-BinaryHeap%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.56.0\">1.56.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/binary_heap/mod.rs.html#1780\">source</a></span><a href=\"#impl-From%3C%5BT;+N%5D%3E-for-BinaryHeap%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a>&gt; for <a class=\"struct\" href=\"collections/struct.BinaryHeap.html\" title=\"struct std::collections::BinaryHeap\">BinaryHeap</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-37\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/binary_heap/mod.rs.html#1790\">source</a><a href=\"#method.from-37\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(arr: <a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a>) -&gt; <a class=\"struct\" href=\"collections/struct.BinaryHeap.html\" title=\"struct std::collections::BinaryHeap\">BinaryHeap</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\">\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::BinaryHeap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>h1 = BinaryHeap::from([<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>h2: BinaryHeap&lt;<span class=\"kw\">_</span>&gt; = [<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].into();\n<span class=\"kw\">while let </span><span class=\"prelude-val\">Some</span>((a, b)) = h1.pop().zip(h2.pop()) {\n    <span class=\"macro\">assert_eq!</span>(a, b);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::BinaryHeap;%0A++++%0A++++let+mut+h1+=+BinaryHeap::from(%5B1,+4,+2,+3%5D);%0A++++let+mut+h2:+BinaryHeap%3C_%3E+=+%5B1,+4,+2,+3%5D.into();%0A++++while+let+Some((a,+b))+=+h1.pop().zip(h2.pop())+%7B%0A++++++++assert_eq!(a,+b);%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%5BT;+N%5D%3E-for-Box%3C%5BT%5D%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0\">1.45.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1682\">source</a></span><a href=\"#impl-From%3C%5BT;+N%5D%3E-for-Box%3C%5BT%5D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a>&gt; for <a class=\"struct\" href=\"boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"primitive.slice.html\">[T]</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-45\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1693\">source</a><a href=\"#method.from-45\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(array: <a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a>) -&gt; <a class=\"struct\" href=\"boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"primitive.slice.html\">[T]</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <code>[T; N]</code> into a <code>Box&lt;[T]&gt;</code></p>\n<p>This conversion moves the array to newly heap-allocated memory.</p>\n<h5 id=\"examples-22\"><a class=\"doc-anchor\" href=\"#examples-22\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>boxed: Box&lt;[u8]&gt; = Box::from([<span class=\"number\">4</span>, <span class=\"number\">2</span>]);\n<span class=\"macro\">println!</span>(<span class=\"string\">\"{boxed:?}\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+boxed:+Box%3C%5Bu8%5D%3E+=+Box::from(%5B4,+2%5D);%0A++++println!(%22%7Bboxed:?%7D%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%5BT;+N%5D%3E-for-HashSet%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.56.0\">1.56.0</span> · <a class=\"src\" href=\"../src/std/collections/hash/set.rs.html#1051-1067\">source</a></span><a href=\"#impl-From%3C%5BT;+N%5D%3E-for-HashSet%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a>&gt; for <a class=\"struct\" href=\"collections/hash_set/struct.HashSet.html\" title=\"struct std::collections::hash_set::HashSet\">HashSet</a>&lt;T, <a class=\"struct\" href=\"collections/hash_map/struct.RandomState.html\" title=\"struct std::collections::hash_map::RandomState\">RandomState</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-46\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../src/std/collections/hash/set.rs.html#1064-1066\">source</a><a href=\"#method.from-46\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(arr: <a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><h5 id=\"examples-23\"><a class=\"doc-anchor\" href=\"#examples-23\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashSet;\n\n<span class=\"kw\">let </span>set1 = HashSet::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n<span class=\"kw\">let </span>set2: HashSet&lt;<span class=\"kw\">_</span>&gt; = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>].into();\n<span class=\"macro\">assert_eq!</span>(set1, set2);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashSet;%0A++++%0A++++let+set1+=+HashSet::from(%5B1,+2,+3,+4%5D);%0A++++let+set2:+HashSet%3C_%3E+=+%5B1,+2,+3,+4%5D.into();%0A++++assert_eq!(set1,+set2);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%5BT;+N%5D%3E-for-LinkedList%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.56.0\">1.56.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#2167\">source</a></span><a href=\"#impl-From%3C%5BT;+N%5D%3E-for-LinkedList%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a>&gt; for <a class=\"struct\" href=\"collections/struct.LinkedList.html\" title=\"struct std::collections::LinkedList\">LinkedList</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-41\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#2177\">source</a><a href=\"#method.from-41\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(arr: <a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a>) -&gt; <a class=\"struct\" href=\"collections/struct.LinkedList.html\" title=\"struct std::collections::LinkedList\">LinkedList</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <code>[T; N]</code> into a <code>LinkedList&lt;T&gt;</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::LinkedList;\n\n<span class=\"kw\">let </span>list1 = LinkedList::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n<span class=\"kw\">let </span>list2: LinkedList&lt;<span class=\"kw\">_</span>&gt; = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>].into();\n<span class=\"macro\">assert_eq!</span>(list1, list2);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::LinkedList;%0A++++%0A++++let+list1+=+LinkedList::from(%5B1,+2,+3,+4%5D);%0A++++let+list2:+LinkedList%3C_%3E+=+%5B1,+2,+3,+4%5D.into();%0A++++assert_eq!(list1,+list2);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%5BT;+N%5D%3E-for-Rc%3C%5BT%5D%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.74.0\">1.74.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/rc.rs.html#2540\">source</a></span><a href=\"#impl-From%3C%5BT;+N%5D%3E-for-Rc%3C%5BT%5D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a>&gt; for <a class=\"struct\" href=\"rc/struct.Rc.html\" title=\"struct std::rc::Rc\">Rc</a>&lt;<a class=\"primitive\" href=\"primitive.slice.html\">[T]</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-43\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/rc.rs.html#2554\">source</a><a href=\"#method.from-43\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(v: <a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a>) -&gt; <a class=\"struct\" href=\"rc/struct.Rc.html\" title=\"struct std::rc::Rc\">Rc</a>&lt;<a class=\"primitive\" href=\"primitive.slice.html\">[T]</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <a href=\"primitive.array.html\" title=\"primitive array\"><code>[T; N]</code></a> into an <code>Rc&lt;[T]&gt;</code>.</p>\n<p>The conversion moves the array into a newly allocated <code>Rc</code>.</p>\n<h5 id=\"example-3\"><a class=\"doc-anchor\" href=\"#example-3\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>original: [i32; <span class=\"number\">3</span>] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"kw\">let </span>shared: Rc&lt;[i32]&gt; = Rc::from(original);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"kw-2\">&amp;</span>shared[..]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::rc::Rc;%0A++++let+original:+%5Bi32;+3%5D+=+%5B1,+2,+3%5D;%0A++++let+shared:+Rc%3C%5Bi32%5D%3E+=+Rc::from(original);%0A++++assert_eq!(%26%5B1,+2,+3%5D,+%26shared%5B..%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%5BT;+N%5D%3E-for-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#1019-1022\">source</a><a href=\"#impl-From%3C%5BT;+N%5D%3E-for-Simd%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a>&gt; for <a class=\"struct\" href=\"simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"simd/struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"simd/trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,\n    T: <a class=\"trait\" href=\"simd/trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-9\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#1025\">source</a><a href=\"#method.from-9\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(array: <a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a>) -&gt; <a class=\"struct\" href=\"simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%5BT;+N%5D%3E-for-Vec%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.44.0\">1.44.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3404\">source</a></span><a href=\"#impl-From%3C%5BT;+N%5D%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a>&gt; for <a class=\"struct\" href=\"vec/struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-36\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3413\">source</a><a href=\"#method.from-36\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: <a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a>) -&gt; <a class=\"struct\" href=\"vec/struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Allocate a <code>Vec&lt;T&gt;</code> and move <code>s</code>’s items into it.</p>\n<h5 id=\"examples-20\"><a class=\"doc-anchor\" href=\"#examples-20\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(Vec::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]), <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(Vec::from(%5B1,+2,+3%5D),+vec!%5B1,+2,+3%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%5BT;+N%5D%3E-for-VecDeque%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.56.0\">1.56.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#3007\">source</a></span><a href=\"#impl-From%3C%5BT;+N%5D%3E-for-VecDeque%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a>&gt; for <a class=\"struct\" href=\"collections/struct.VecDeque.html\" title=\"struct std::collections::VecDeque\">VecDeque</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-39\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#3017\">source</a><a href=\"#method.from-39\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(arr: <a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a>) -&gt; <a class=\"struct\" href=\"collections/struct.VecDeque.html\" title=\"struct std::collections::VecDeque\">VecDeque</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <code>[T; N]</code> into a <code>VecDeque&lt;T&gt;</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::VecDeque;\n\n<span class=\"kw\">let </span>deq1 = VecDeque::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n<span class=\"kw\">let </span>deq2: VecDeque&lt;<span class=\"kw\">_</span>&gt; = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>].into();\n<span class=\"macro\">assert_eq!</span>(deq1, deq2);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+deq1+=+VecDeque::from(%5B1,+2,+3,+4%5D);%0A++++let+deq2:+VecDeque%3C_%3E+=+%5B1,+2,+3,+4%5D.into();%0A++++assert_eq!(deq1,+deq2);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%5Bbool;+N%5D%3E-for-Mask%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#418-421\">source</a><a href=\"#impl-From%3C%5Bbool;+N%5D%3E-for-Mask%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;[<a class=\"primitive\" href=\"primitive.bool.html\">bool</a>; <a class=\"primitive\" href=\"primitive.array.html\">N</a>]&gt; for <a class=\"struct\" href=\"simd/prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"simd/trait.MaskElement.html\" title=\"trait std::simd::MaskElement\">MaskElement</a>,\n    <a class=\"struct\" href=\"simd/struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"simd/trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#424\">source</a><a href=\"#method.from-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(array: [<a class=\"primitive\" href=\"primitive.bool.html\">bool</a>; <a class=\"primitive\" href=\"primitive.array.html\">N</a>]) -&gt; <a class=\"struct\" href=\"simd/prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%5Bu16;+8%5D%3E-for-IpAddr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.17.0\">1.17.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#2171\">source</a></span><a href=\"#impl-From%3C%5Bu16;+8%5D%3E-for-IpAddr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;[<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>; <a class=\"primitive\" href=\"primitive.array.html\">8</a>]&gt; for <a class=\"enum\" href=\"net/enum.IpAddr.html\" title=\"enum std::net::IpAddr\">IpAddr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-26\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#2194\">source</a><a href=\"#method.from-26\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(segments: [<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>; <a class=\"primitive\" href=\"primitive.array.html\">8</a>]) -&gt; <a class=\"enum\" href=\"net/enum.IpAddr.html\" title=\"enum std::net::IpAddr\">IpAddr</a></h4></section></summary><div class=\"docblock\"><p>Creates an <code>IpAddr::V6</code> from an eight element 16-bit array.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::net::{IpAddr, Ipv6Addr};\n\n<span class=\"kw\">let </span>addr = IpAddr::from([\n    <span class=\"number\">525u16</span>, <span class=\"number\">524u16</span>, <span class=\"number\">523u16</span>, <span class=\"number\">522u16</span>,\n    <span class=\"number\">521u16</span>, <span class=\"number\">520u16</span>, <span class=\"number\">519u16</span>, <span class=\"number\">518u16</span>,\n]);\n<span class=\"macro\">assert_eq!</span>(\n    IpAddr::V6(Ipv6Addr::new(\n        <span class=\"number\">0x20d</span>, <span class=\"number\">0x20c</span>,\n        <span class=\"number\">0x20b</span>, <span class=\"number\">0x20a</span>,\n        <span class=\"number\">0x209</span>, <span class=\"number\">0x208</span>,\n        <span class=\"number\">0x207</span>, <span class=\"number\">0x206\n    </span>)),\n    addr\n);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::%7BIpAddr,+Ipv6Addr%7D;%0A++++%0A++++let+addr+=+IpAddr::from(%5B%0A++++++++525u16,+524u16,+523u16,+522u16,%0A++++++++521u16,+520u16,+519u16,+518u16,%0A++++%5D);%0A++++assert_eq!(%0A++++++++IpAddr::V6(Ipv6Addr::new(%0A++++++++++++0x20d,+0x20c,%0A++++++++++++0x20b,+0x20a,%0A++++++++++++0x209,+0x208,%0A++++++++++++0x207,+0x206%0A++++++++)),%0A++++++++addr%0A++++);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%5Bu16;+8%5D%3E-for-Ipv6Addr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.16.0\">1.16.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#2112\">source</a></span><a href=\"#impl-From%3C%5Bu16;+8%5D%3E-for-Ipv6Addr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;[<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>; <a class=\"primitive\" href=\"primitive.array.html\">8</a>]&gt; for <a class=\"struct\" href=\"net/struct.Ipv6Addr.html\" title=\"struct std::net::Ipv6Addr\">Ipv6Addr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-19\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#2135\">source</a><a href=\"#method.from-19\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(segments: [<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>; <a class=\"primitive\" href=\"primitive.array.html\">8</a>]) -&gt; <a class=\"struct\" href=\"net/struct.Ipv6Addr.html\" title=\"struct std::net::Ipv6Addr\">Ipv6Addr</a></h4></section></summary><div class=\"docblock\"><p>Creates an <code>Ipv6Addr</code> from an eight element 16-bit array.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::net::Ipv6Addr;\n\n<span class=\"kw\">let </span>addr = Ipv6Addr::from([\n    <span class=\"number\">525u16</span>, <span class=\"number\">524u16</span>, <span class=\"number\">523u16</span>, <span class=\"number\">522u16</span>,\n    <span class=\"number\">521u16</span>, <span class=\"number\">520u16</span>, <span class=\"number\">519u16</span>, <span class=\"number\">518u16</span>,\n]);\n<span class=\"macro\">assert_eq!</span>(\n    Ipv6Addr::new(\n        <span class=\"number\">0x20d</span>, <span class=\"number\">0x20c</span>,\n        <span class=\"number\">0x20b</span>, <span class=\"number\">0x20a</span>,\n        <span class=\"number\">0x209</span>, <span class=\"number\">0x208</span>,\n        <span class=\"number\">0x207</span>, <span class=\"number\">0x206\n    </span>),\n    addr\n);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::Ipv6Addr;%0A++++%0A++++let+addr+=+Ipv6Addr::from(%5B%0A++++++++525u16,+524u16,+523u16,+522u16,%0A++++++++521u16,+520u16,+519u16,+518u16,%0A++++%5D);%0A++++assert_eq!(%0A++++++++Ipv6Addr::new(%0A++++++++++++0x20d,+0x20c,%0A++++++++++++0x20b,+0x20a,%0A++++++++++++0x209,+0x208,%0A++++++++++++0x207,+0x206%0A++++++++),%0A++++++++addr%0A++++);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%5Bu8;+16%5D%3E-for-IpAddr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.17.0\">1.17.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#2142\">source</a></span><a href=\"#impl-From%3C%5Bu8;+16%5D%3E-for-IpAddr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;[<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">16</a>]&gt; for <a class=\"enum\" href=\"net/enum.IpAddr.html\" title=\"enum std::net::IpAddr\">IpAddr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#2165\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(octets: [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">16</a>]) -&gt; <a class=\"enum\" href=\"net/enum.IpAddr.html\" title=\"enum std::net::IpAddr\">IpAddr</a></h4></section></summary><div class=\"docblock\"><p>Creates an <code>IpAddr::V6</code> from a sixteen element byte array.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::net::{IpAddr, Ipv6Addr};\n\n<span class=\"kw\">let </span>addr = IpAddr::from([\n    <span class=\"number\">25u8</span>, <span class=\"number\">24u8</span>, <span class=\"number\">23u8</span>, <span class=\"number\">22u8</span>, <span class=\"number\">21u8</span>, <span class=\"number\">20u8</span>, <span class=\"number\">19u8</span>, <span class=\"number\">18u8</span>,\n    <span class=\"number\">17u8</span>, <span class=\"number\">16u8</span>, <span class=\"number\">15u8</span>, <span class=\"number\">14u8</span>, <span class=\"number\">13u8</span>, <span class=\"number\">12u8</span>, <span class=\"number\">11u8</span>, <span class=\"number\">10u8</span>,\n]);\n<span class=\"macro\">assert_eq!</span>(\n    IpAddr::V6(Ipv6Addr::new(\n        <span class=\"number\">0x1918</span>, <span class=\"number\">0x1716</span>,\n        <span class=\"number\">0x1514</span>, <span class=\"number\">0x1312</span>,\n        <span class=\"number\">0x1110</span>, <span class=\"number\">0x0f0e</span>,\n        <span class=\"number\">0x0d0c</span>, <span class=\"number\">0x0b0a\n    </span>)),\n    addr\n);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::%7BIpAddr,+Ipv6Addr%7D;%0A++++%0A++++let+addr+=+IpAddr::from(%5B%0A++++++++25u8,+24u8,+23u8,+22u8,+21u8,+20u8,+19u8,+18u8,%0A++++++++17u8,+16u8,+15u8,+14u8,+13u8,+12u8,+11u8,+10u8,%0A++++%5D);%0A++++assert_eq!(%0A++++++++IpAddr::V6(Ipv6Addr::new(%0A++++++++++++0x1918,+0x1716,%0A++++++++++++0x1514,+0x1312,%0A++++++++++++0x1110,+0x0f0e,%0A++++++++++++0x0d0c,+0x0b0a%0A++++++++)),%0A++++++++addr%0A++++);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%5Bu8;+16%5D%3E-for-Ipv6Addr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.9.0\">1.9.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#2083\">source</a></span><a href=\"#impl-From%3C%5Bu8;+16%5D%3E-for-Ipv6Addr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;[<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">16</a>]&gt; for <a class=\"struct\" href=\"net/struct.Ipv6Addr.html\" title=\"struct std::net::Ipv6Addr\">Ipv6Addr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-29\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#2106\">source</a><a href=\"#method.from-29\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(octets: [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">16</a>]) -&gt; <a class=\"struct\" href=\"net/struct.Ipv6Addr.html\" title=\"struct std::net::Ipv6Addr\">Ipv6Addr</a></h4></section></summary><div class=\"docblock\"><p>Creates an <code>Ipv6Addr</code> from a sixteen element byte array.</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::net::Ipv6Addr;\n\n<span class=\"kw\">let </span>addr = Ipv6Addr::from([\n    <span class=\"number\">25u8</span>, <span class=\"number\">24u8</span>, <span class=\"number\">23u8</span>, <span class=\"number\">22u8</span>, <span class=\"number\">21u8</span>, <span class=\"number\">20u8</span>, <span class=\"number\">19u8</span>, <span class=\"number\">18u8</span>,\n    <span class=\"number\">17u8</span>, <span class=\"number\">16u8</span>, <span class=\"number\">15u8</span>, <span class=\"number\">14u8</span>, <span class=\"number\">13u8</span>, <span class=\"number\">12u8</span>, <span class=\"number\">11u8</span>, <span class=\"number\">10u8</span>,\n]);\n<span class=\"macro\">assert_eq!</span>(\n    Ipv6Addr::new(\n        <span class=\"number\">0x1918</span>, <span class=\"number\">0x1716</span>,\n        <span class=\"number\">0x1514</span>, <span class=\"number\">0x1312</span>,\n        <span class=\"number\">0x1110</span>, <span class=\"number\">0x0f0e</span>,\n        <span class=\"number\">0x0d0c</span>, <span class=\"number\">0x0b0a\n    </span>),\n    addr\n);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::Ipv6Addr;%0A++++%0A++++let+addr+=+Ipv6Addr::from(%5B%0A++++++++25u8,+24u8,+23u8,+22u8,+21u8,+20u8,+19u8,+18u8,%0A++++++++17u8,+16u8,+15u8,+14u8,+13u8,+12u8,+11u8,+10u8,%0A++++%5D);%0A++++assert_eq!(%0A++++++++Ipv6Addr::new(%0A++++++++++++0x1918,+0x1716,%0A++++++++++++0x1514,+0x1312,%0A++++++++++++0x1110,+0x0f0e,%0A++++++++++++0x0d0c,+0x0b0a%0A++++++++),%0A++++++++addr%0A++++);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%5Bu8;+4%5D%3E-for-IpAddr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.17.0\">1.17.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#1181\">source</a></span><a href=\"#impl-From%3C%5Bu8;+4%5D%3E-for-IpAddr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;[<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">4</a>]&gt; for <a class=\"enum\" href=\"net/enum.IpAddr.html\" title=\"enum std::net::IpAddr\">IpAddr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-21\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#1193\">source</a><a href=\"#method.from-21\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(octets: [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">4</a>]) -&gt; <a class=\"enum\" href=\"net/enum.IpAddr.html\" title=\"enum std::net::IpAddr\">IpAddr</a></h4></section></summary><div class=\"docblock\"><p>Creates an <code>IpAddr::V4</code> from a four element byte array.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::net::{IpAddr, Ipv4Addr};\n\n<span class=\"kw\">let </span>addr = IpAddr::from([<span class=\"number\">13u8</span>, <span class=\"number\">12u8</span>, <span class=\"number\">11u8</span>, <span class=\"number\">10u8</span>]);\n<span class=\"macro\">assert_eq!</span>(IpAddr::V4(Ipv4Addr::new(<span class=\"number\">13</span>, <span class=\"number\">12</span>, <span class=\"number\">11</span>, <span class=\"number\">10</span>)), addr);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::%7BIpAddr,+Ipv4Addr%7D;%0A++++%0A++++let+addr+=+IpAddr::from(%5B13u8,+12u8,+11u8,+10u8%5D);%0A++++assert_eq!(IpAddr::V4(Ipv4Addr::new(13,+12,+11,+10)),+addr);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%5Bu8;+4%5D%3E-for-Ipv4Addr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.9.0\">1.9.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#1163\">source</a></span><a href=\"#impl-From%3C%5Bu8;+4%5D%3E-for-Ipv4Addr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;[<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">4</a>]&gt; for <a class=\"struct\" href=\"net/struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-32\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#1175\">source</a><a href=\"#method.from-32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(octets: [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">4</a>]) -&gt; <a class=\"struct\" href=\"net/struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a></h4></section></summary><div class=\"docblock\"><p>Creates an <code>Ipv4Addr</code> from a four element byte array.</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::net::Ipv4Addr;\n\n<span class=\"kw\">let </span>addr = Ipv4Addr::from([<span class=\"number\">13u8</span>, <span class=\"number\">12u8</span>, <span class=\"number\">11u8</span>, <span class=\"number\">10u8</span>]);\n<span class=\"macro\">assert_eq!</span>(Ipv4Addr::new(<span class=\"number\">13</span>, <span class=\"number\">12</span>, <span class=\"number\">11</span>, <span class=\"number\">10</span>), addr);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::Ipv4Addr;%0A++++%0A++++let+addr+=+Ipv4Addr::from(%5B13u8,+12u8,+11u8,+10u8%5D);%0A++++assert_eq!(Ipv4Addr::new(13,+12,+11,+10),+addr);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C(T,)%3E-for-%5BT;+1%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0\">1.71.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a></span><a href=\"#impl-From%3C(T,)%3E-for-%5BT;+1%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.tuple.html\">(T,)</a>&gt; for <a class=\"primitive\" href=\"primitive.array.html\">[T; 1]</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a><a href=\"#method.from-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(tuple: <a class=\"primitive\" href=\"primitive.tuple.html\">(T,)</a>) -&gt; <a class=\"primitive\" href=\"primitive.array.html\">[T; 1]</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C(T,+T)%3E-for-%5BT;+2%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0\">1.71.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a></span><a href=\"#impl-From%3C(T,+T)%3E-for-%5BT;+2%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.tuple.html\">(T, T)</a>&gt; for <a class=\"primitive\" href=\"primitive.array.html\">[T; 2]</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a><a href=\"#method.from-6\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(tuple: <a class=\"primitive\" href=\"primitive.tuple.html\">(T, T)</a>) -&gt; <a class=\"primitive\" href=\"primitive.array.html\">[T; 2]</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C(T,+T,+T)%3E-for-%5BT;+3%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0\">1.71.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a></span><a href=\"#impl-From%3C(T,+T,+T)%3E-for-%5BT;+3%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.tuple.html\">(T, T, T)</a>&gt; for <a class=\"primitive\" href=\"primitive.array.html\">[T; 3]</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a><a href=\"#method.from-5\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(tuple: <a class=\"primitive\" href=\"primitive.tuple.html\">(T, T, T)</a>) -&gt; <a class=\"primitive\" href=\"primitive.array.html\">[T; 3]</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C(T,+T,+T,+T)%3E-for-%5BT;+4%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0\">1.71.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a></span><a href=\"#impl-From%3C(T,+T,+T,+T)%3E-for-%5BT;+4%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.tuple.html\">(T, T, T, T)</a>&gt; for <a class=\"primitive\" href=\"primitive.array.html\">[T; 4]</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-28\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a><a href=\"#method.from-28\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(tuple: <a class=\"primitive\" href=\"primitive.tuple.html\">(T, T, T, T)</a>) -&gt; <a class=\"primitive\" href=\"primitive.array.html\">[T; 4]</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C(T,+T,+T,+T,+T)%3E-for-%5BT;+5%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0\">1.71.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a></span><a href=\"#impl-From%3C(T,+T,+T,+T,+T)%3E-for-%5BT;+5%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.tuple.html\">(T, T, T, T, T)</a>&gt; for <a class=\"primitive\" href=\"primitive.array.html\">[T; 5]</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a><a href=\"#method.from-16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(tuple: <a class=\"primitive\" href=\"primitive.tuple.html\">(T, T, T, T, T)</a>) -&gt; <a class=\"primitive\" href=\"primitive.array.html\">[T; 5]</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C(T,+T,+T,+T,+T,+T)%3E-for-%5BT;+6%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0\">1.71.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a></span><a href=\"#impl-From%3C(T,+T,+T,+T,+T,+T)%3E-for-%5BT;+6%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.tuple.html\">(T, T, T, T, T, T)</a>&gt; for <a class=\"primitive\" href=\"primitive.array.html\">[T; 6]</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-10\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a><a href=\"#method.from-10\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(tuple: <a class=\"primitive\" href=\"primitive.tuple.html\">(T, T, T, T, T, T)</a>) -&gt; <a class=\"primitive\" href=\"primitive.array.html\">[T; 6]</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C(T,+T,+T,+T,+T,+T,+T)%3E-for-%5BT;+7%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0\">1.71.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a></span><a href=\"#impl-From%3C(T,+T,+T,+T,+T,+T,+T)%3E-for-%5BT;+7%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.tuple.html\">(T, T, T, T, T, T, T)</a>&gt; for <a class=\"primitive\" href=\"primitive.array.html\">[T; 7]</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a><a href=\"#method.from-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(tuple: <a class=\"primitive\" href=\"primitive.tuple.html\">(T, T, T, T, T, T, T)</a>) -&gt; <a class=\"primitive\" href=\"primitive.array.html\">[T; 7]</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C(T,+T,+T,+T,+T,+T,+T,+T)%3E-for-%5BT;+8%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0\">1.71.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a></span><a href=\"#impl-From%3C(T,+T,+T,+T,+T,+T,+T,+T)%3E-for-%5BT;+8%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.tuple.html\">(T, T, T, T, T, T, T, T)</a>&gt; for <a class=\"primitive\" href=\"primitive.array.html\">[T; 8]</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-25\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a><a href=\"#method.from-25\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(tuple: <a class=\"primitive\" href=\"primitive.tuple.html\">(T, T, T, T, T, T, T, T)</a>) -&gt; <a class=\"primitive\" href=\"primitive.array.html\">[T; 8]</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C(T,+T,+T,+T,+T,+T,+T,+T,+T)%3E-for-%5BT;+9%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0\">1.71.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a></span><a href=\"#impl-From%3C(T,+T,+T,+T,+T,+T,+T,+T,+T)%3E-for-%5BT;+9%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.tuple.html\">(T, T, T, T, T, T, T, T, T)</a>&gt; for <a class=\"primitive\" href=\"primitive.array.html\">[T; 9]</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-12\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a><a href=\"#method.from-12\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(tuple: <a class=\"primitive\" href=\"primitive.tuple.html\">(T, T, T, T, T, T, T, T, T)</a>) -&gt; <a class=\"primitive\" href=\"primitive.array.html\">[T; 9]</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C(T,+T,+T,+T,+T,+T,+T,+T,+T,+T)%3E-for-%5BT;+10%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0\">1.71.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a></span><a href=\"#impl-From%3C(T,+T,+T,+T,+T,+T,+T,+T,+T,+T)%3E-for-%5BT;+10%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.tuple.html\">(T, T, T, T, T, T, T, T, T, T)</a>&gt; for <a class=\"primitive\" href=\"primitive.array.html\">[T; 10]</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-23\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a><a href=\"#method.from-23\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(tuple: <a class=\"primitive\" href=\"primitive.tuple.html\">(T, T, T, T, T, T, T, T, T, T)</a>) -&gt; <a class=\"primitive\" href=\"primitive.array.html\">[T; 10]</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C(T,+T,+T,+T,+T,+T,+T,+T,+T,+T,+T)%3E-for-%5BT;+11%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0\">1.71.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a></span><a href=\"#impl-From%3C(T,+T,+T,+T,+T,+T,+T,+T,+T,+T,+T)%3E-for-%5BT;+11%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.tuple.html\">(T, T, T, T, T, T, T, T, T, T, T)</a>&gt; for <a class=\"primitive\" href=\"primitive.array.html\">[T; 11]</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-33\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a><a href=\"#method.from-33\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(tuple: <a class=\"primitive\" href=\"primitive.tuple.html\">(T, T, T, T, T, T, T, T, T, T, T)</a>) -&gt; <a class=\"primitive\" href=\"primitive.array.html\">[T; 11]</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C(T,+T,+T,+T,+T,+T,+T,+T,+T,+T,+T,+T)%3E-for-%5BT;+12%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0\">1.71.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a></span><a href=\"#impl-From%3C(T,+T,+T,+T,+T,+T,+T,+T,+T,+T,+T,+T)%3E-for-%5BT;+12%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.tuple.html\">(T, T, T, T, T, T, T, T, T, T, T, T)</a>&gt; for <a class=\"primitive\" href=\"primitive.array.html\">[T; 12]</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-11\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a><a href=\"#method.from-11\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(tuple: <a class=\"primitive\" href=\"primitive.tuple.html\">(T, T, T, T, T, T, T, T, T, T, T, T)</a>) -&gt; <a class=\"primitive\" href=\"primitive.array.html\">[T; 12]</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CMask%3CT,+N%3E%3E-for-%5Bbool;+N%5D\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#429-432\">source</a><a href=\"#impl-From%3CMask%3CT,+N%3E%3E-for-%5Bbool;+N%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"simd/prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;&gt; for [<a class=\"primitive\" href=\"primitive.bool.html\">bool</a>; <a class=\"primitive\" href=\"primitive.array.html\">N</a>]<div class=\"where\">where\n    T: <a class=\"trait\" href=\"simd/trait.MaskElement.html\" title=\"trait std::simd::MaskElement\">MaskElement</a>,\n    <a class=\"struct\" href=\"simd/struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"simd/trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-18\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#435\">source</a><a href=\"#method.from-18\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(vector: <a class=\"struct\" href=\"simd/prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;) -&gt; [<a class=\"primitive\" href=\"primitive.bool.html\">bool</a>; <a class=\"primitive\" href=\"primitive.array.html\">N</a>]</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CSimd%3CT,+N%3E%3E-for-%5BT;+N%5D\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#1030-1033\">source</a><a href=\"#impl-From%3CSimd%3CT,+N%3E%3E-for-%5BT;+N%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt; for <a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a><div class=\"where\">where\n    <a class=\"struct\" href=\"simd/struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"simd/trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,\n    T: <a class=\"trait\" href=\"simd/trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-20\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#1036\">source</a><a href=\"#method.from-20\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(vector: <a class=\"struct\" href=\"simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;) -&gt; <a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Hash-for-%5BT;+N%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#306\">source</a></span><a href=\"#impl-Hash-for-%5BT;+N%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a>,</div></h3></section></summary><div class=\"docblock\"><p>The hash of an array is the same as that of the corresponding slice,\nas required by the <code>Borrow</code> implementation.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::hash::BuildHasher;\n\n<span class=\"kw\">let </span>b = std::hash::RandomState::new();\n<span class=\"kw\">let </span>a: [u8; <span class=\"number\">3</span>] = [<span class=\"number\">0xa8</span>, <span class=\"number\">0x3c</span>, <span class=\"number\">0x09</span>];\n<span class=\"kw\">let </span>s: <span class=\"kw-2\">&amp;</span>[u8] = <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0xa8</span>, <span class=\"number\">0x3c</span>, <span class=\"number\">0x09</span>];\n<span class=\"macro\">assert_eq!</span>(b.hash_one(a), b.hash_one(s));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::hash::BuildHasher;%0A++++%0A++++let+b+=+std::hash::RandomState::new();%0A++++let+a:+%5Bu8;+3%5D+=+%5B0xa8,+0x3c,+0x09%5D;%0A++++let+s:+%26%5Bu8%5D+=+%26%5B0xa8,+0x3c,+0x09%5D;%0A++++assert_eq!(b.hash_one(a),+b.hash_one(s));%0A%7D&amp;edition=2021\">Run</a></div>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#307\">source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;H&gt;(&amp;self, state: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class=\"docblock\">Feeds this value into the given <a href=\"hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#238-240\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Feeds a slice of this type into the given <a href=\"hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Index%3CI%3E-for-%5BT;+N%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#340-342\">source</a></span><a href=\"#impl-Index%3CI%3E-for-%5BT;+N%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, I, const N: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"ops/trait.Index.html\" title=\"trait std::ops::Index\">Index</a>&lt;I&gt; for <a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a><div class=\"where\">where\n    <a class=\"primitive\" href=\"primitive.slice.html\">[T]</a>: <a class=\"trait\" href=\"ops/trait.Index.html\" title=\"trait std::ops::Index\">Index</a>&lt;I&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"ops/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.slice.html\">[T]</a> as <a class=\"trait\" href=\"ops/trait.Index.html\" title=\"trait std::ops::Index\">Index</a>&lt;I&gt;&gt;::<a class=\"associatedtype\" href=\"ops/trait.Index.html#associatedtype.Output\" title=\"type std::ops::Index::Output\">Output</a></h4></section></summary><div class=\"docblock\">The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.index\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#347\">source</a><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ops/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: I) -&gt; &amp;&lt;<a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a> as <a class=\"trait\" href=\"ops/trait.Index.html\" title=\"trait std::ops::Index\">Index</a>&lt;I&gt;&gt;::<a class=\"associatedtype\" href=\"ops/trait.Index.html#associatedtype.Output\" title=\"type std::ops::Index::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the indexing (<code>container[index]</code>) operation. <a href=\"ops/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-IndexMut%3CI%3E-for-%5BT;+N%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#353-355\">source</a></span><a href=\"#impl-IndexMut%3CI%3E-for-%5BT;+N%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, I, const N: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"ops/trait.IndexMut.html\" title=\"trait std::ops::IndexMut\">IndexMut</a>&lt;I&gt; for <a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a><div class=\"where\">where\n    <a class=\"primitive\" href=\"primitive.slice.html\">[T]</a>: <a class=\"trait\" href=\"ops/trait.IndexMut.html\" title=\"trait std::ops::IndexMut\">IndexMut</a>&lt;I&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#358\">source</a><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ops/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(&amp;mut self, index: I) -&gt; &amp;mut &lt;<a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a> as <a class=\"trait\" href=\"ops/trait.Index.html\" title=\"trait std::ops::Index\">Index</a>&lt;I&gt;&gt;::<a class=\"associatedtype\" href=\"ops/trait.Index.html#associatedtype.Output\" title=\"type std::ops::Index::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the mutable indexing (<code>container[index]</code>) operation. <a href=\"ops/trait.IndexMut.html#tymethod.index_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-IntoIterator-for-%26%5BT;+N%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#320\">source</a></span><a href=\"#impl-IntoIterator-for-%26%5BT;+N%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T, const N: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a> for &amp;'a <a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Item-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"iter/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = <a class=\"primitive\" href=\"primitive.reference.html\">&amp;'a T</a></h4></section></summary><div class=\"docblock\">The type of the elements being iterated over.</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.IntoIter-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoIter-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"iter/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"slice/struct.Iter.html\" title=\"struct std::slice::Iter\">Iter</a>&lt;'a, T&gt;</h4></section></summary><div class=\"docblock\">Which kind of iterator are we turning this into?</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_iter-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#324\">source</a><a href=\"#method.into_iter-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"iter/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; <a class=\"struct\" href=\"slice/struct.Iter.html\" title=\"struct std::slice::Iter\">Iter</a>&lt;'a, T&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Iter<'a, T>\">ⓘ</a></h4></section></summary><div class=\"docblock\">Creates an iterator from a value. <a href=\"iter/trait.IntoIterator.html#tymethod.into_iter\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-IntoIterator-for-%26mut+%5BT;+N%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#330\">source</a></span><a href=\"#impl-IntoIterator-for-%26mut+%5BT;+N%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T, const N: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a> for &amp;'a mut <a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"iter/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = <a class=\"primitive\" href=\"primitive.reference.html\">&amp;'a mut T</a></h4></section></summary><div class=\"docblock\">The type of the elements being iterated over.</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"iter/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"slice/struct.IterMut.html\" title=\"struct std::slice::IterMut\">IterMut</a>&lt;'a, T&gt;</h4></section></summary><div class=\"docblock\">Which kind of iterator are we turning this into?</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#334\">source</a><a href=\"#method.into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"iter/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; <a class=\"struct\" href=\"slice/struct.IterMut.html\" title=\"struct std::slice::IterMut\">IterMut</a>&lt;'a, T&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"IterMut<'a, T>\">ⓘ</a></h4></section></summary><div class=\"docblock\">Creates an iterator from a value. <a href=\"iter/trait.IntoIterator.html#tymethod.into_iter\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-IntoIterator-for-%5BT;+N%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0\">1.53.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/iter.rs.html#45\">source</a></span><a href=\"#impl-IntoIterator-for-%5BT;+N%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a> for <a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_iter-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/iter.rs.html#57\">source</a><a href=\"#method.into_iter-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"iter/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; &lt;<a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a> as <a class=\"trait\" href=\"iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"iter/trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type std::iter::IntoIterator::IntoIter\">IntoIter</a></h4></section></summary><div class=\"docblock\"><p>Creates a consuming iterator, that is, one that moves each value out of\nthe array (from start to end). The array cannot be used after calling\nthis unless <code>T</code> implements <code>Copy</code>, so the whole array is copied.</p>\n<p>Arrays have special behavior when calling <code>.into_iter()</code> prior to the\n2021 edition – see the <a href=\"primitive.array.html\" title=\"primitive array\">array</a> Editions section for more information.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Item-2\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item-2\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"iter/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = T</h4></section></summary><div class=\"docblock\">The type of the elements being iterated over.</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.IntoIter-2\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoIter-2\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"iter/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"array/struct.IntoIter.html\" title=\"struct std::array::IntoIter\">IntoIter</a>&lt;T, N&gt;</h4></section></summary><div class=\"docblock\">Which kind of iterator are we turning this into?</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Ord-for-%5BT;+N%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#390\">source</a></span><a href=\"#impl-Ord-for-%5BT;+N%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,</div></h3></section></summary><div class=\"docblock\"><p>Implements comparison of arrays <a href=\"cmp/trait.Ord.html#lexicographical-comparison\" title=\"trait std::cmp::Ord\">lexicographically</a>.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#392\">source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a>) -&gt; <a class=\"enum\" href=\"cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a></h4></section></summary><div class=\"docblock\">This method returns an <a href=\"cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#856-858\">source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Compares and returns the maximum of two values. <a href=\"cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#877-879\">source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Compares and returns the minimum of two values. <a href=\"cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#903-906\">source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>,</div></h4></section></summary><div class=\"docblock\">Restrict a value to a certain interval. <a href=\"cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3C%26%5BU%5D%3E-for-%5BT;+N%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/equality.rs.html#65-67\">source</a></span><a href=\"#impl-PartialEq%3C%26%5BU%5D%3E-for-%5BT;+N%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, const N: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.slice.html\">[U]</a>&gt; for <a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/equality.rs.html#70\">source</a><a href=\"#method.eq-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;<a class=\"primitive\" href=\"primitive.slice.html\">[U]</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/equality.rs.html#74\">source</a><a href=\"#method.ne-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;&amp;<a class=\"primitive\" href=\"primitive.slice.html\">[U]</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3C%26%5BU;+N%5D%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/partial_eq.rs.html#37\">source</a></span><a href=\"#impl-PartialEq%3C%26%5BU;+N%5D%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, A, const N: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.array.html\">[U; N]</a>&gt; for <a class=\"struct\" href=\"vec/struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,\n    T: <a class=\"trait\" href=\"cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-11\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/partial_eq.rs.html#37\">source</a><a href=\"#method.eq-11\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;<a class=\"primitive\" href=\"primitive.array.html\">[U; N]</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-11\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/partial_eq.rs.html#37\">source</a><a href=\"#method.ne-11\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;&amp;<a class=\"primitive\" href=\"primitive.array.html\">[U; N]</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3C%26%5BU;+N%5D%3E-for-VecDeque%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.17.0\">1.17.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2810\">source</a></span><a href=\"#impl-PartialEq%3C%26%5BU;+N%5D%3E-for-VecDeque%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, A, const N: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.array.html\">[U; N]</a>&gt; for <a class=\"struct\" href=\"collections/struct.VecDeque.html\" title=\"struct std::collections::VecDeque\">VecDeque</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,\n    T: <a class=\"trait\" href=\"cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2810\">source</a><a href=\"#method.eq-8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;<a class=\"primitive\" href=\"primitive.array.html\">[U; N]</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-8\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne-8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3C%26mut+%5BU%5D%3E-for-%5BT;+N%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/equality.rs.html#95-97\">source</a></span><a href=\"#impl-PartialEq%3C%26mut+%5BU%5D%3E-for-%5BT;+N%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, const N: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;&amp;mut <a class=\"primitive\" href=\"primitive.slice.html\">[U]</a>&gt; for <a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/equality.rs.html#100\">source</a><a href=\"#method.eq-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;mut <a class=\"primitive\" href=\"primitive.slice.html\">[U]</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/equality.rs.html#104\">source</a><a href=\"#method.ne-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;&amp;mut <a class=\"primitive\" href=\"primitive.slice.html\">[U]</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3C%26mut+%5BU;+N%5D%3E-for-VecDeque%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.17.0\">1.17.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2811\">source</a></span><a href=\"#impl-PartialEq%3C%26mut+%5BU;+N%5D%3E-for-VecDeque%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, A, const N: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;&amp;mut <a class=\"primitive\" href=\"primitive.array.html\">[U; N]</a>&gt; for <a class=\"struct\" href=\"collections/struct.VecDeque.html\" title=\"struct std::collections::VecDeque\">VecDeque</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,\n    T: <a class=\"trait\" href=\"cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-9\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2811\">source</a><a href=\"#method.eq-9\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;mut <a class=\"primitive\" href=\"primitive.array.html\">[U; N]</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-9\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne-9\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3C%5BU%5D%3E-for-%5BT;+N%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/equality.rs.html#19-21\">source</a></span><a href=\"#impl-PartialEq%3C%5BU%5D%3E-for-%5BT;+N%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, const N: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"primitive.slice.html\">[U]</a>&gt; for <a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/equality.rs.html#24\">source</a><a href=\"#method.eq-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.slice.html\">[U]</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/equality.rs.html#32\">source</a><a href=\"#method.ne-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.slice.html\">[U]</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3C%5BU;+N%5D%3E-for-%26%5BT%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/equality.rs.html#80-82\">source</a></span><a href=\"#impl-PartialEq%3C%5BU;+N%5D%3E-for-%26%5BT%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, const N: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"primitive.array.html\">[U; N]</a>&gt; for &amp;<a class=\"primitive\" href=\"primitive.slice.html\">[T]</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/equality.rs.html#85\">source</a><a href=\"#method.eq-5\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.array.html\">[U; N]</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/equality.rs.html#89\">source</a><a href=\"#method.ne-5\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.array.html\">[U; N]</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3C%5BU;+N%5D%3E-for-%26mut+%5BT%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/equality.rs.html#110-112\">source</a></span><a href=\"#impl-PartialEq%3C%5BU;+N%5D%3E-for-%26mut+%5BT%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, const N: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"primitive.array.html\">[U; N]</a>&gt; for &amp;mut <a class=\"primitive\" href=\"primitive.slice.html\">[T]</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/equality.rs.html#115\">source</a><a href=\"#method.eq-6\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.array.html\">[U; N]</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/equality.rs.html#119\">source</a><a href=\"#method.ne-6\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.array.html\">[U; N]</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3C%5BU;+N%5D%3E-for-%5BT%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/equality.rs.html#42-44\">source</a></span><a href=\"#impl-PartialEq%3C%5BU;+N%5D%3E-for-%5BT%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, const N: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"primitive.array.html\">[U; N]</a>&gt; for <a class=\"primitive\" href=\"primitive.slice.html\">[T]</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/equality.rs.html#47\">source</a><a href=\"#method.eq-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.array.html\">[U; N]</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/equality.rs.html#55\">source</a><a href=\"#method.ne-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.array.html\">[U; N]</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3C%5BU;+N%5D%3E-for-%5BT;+N%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/equality.rs.html#4-6\">source</a></span><a href=\"#impl-PartialEq%3C%5BU;+N%5D%3E-for-%5BT;+N%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, const N: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"primitive.array.html\">[U; N]</a>&gt; for <a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/equality.rs.html#9\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.array.html\">[U; N]</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/equality.rs.html#13\">source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.array.html\">[U; N]</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3C%5BU;+N%5D%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/partial_eq.rs.html#36\">source</a></span><a href=\"#impl-PartialEq%3C%5BU;+N%5D%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, A, const N: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"primitive.array.html\">[U; N]</a>&gt; for <a class=\"struct\" href=\"vec/struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,\n    T: <a class=\"trait\" href=\"cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-10\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/partial_eq.rs.html#36\">source</a><a href=\"#method.eq-10\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.array.html\">[U; N]</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-10\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/partial_eq.rs.html#36\">source</a><a href=\"#method.ne-10\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.array.html\">[U; N]</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3C%5BU;+N%5D%3E-for-VecDeque%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.17.0\">1.17.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2809\">source</a></span><a href=\"#impl-PartialEq%3C%5BU;+N%5D%3E-for-VecDeque%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, A, const N: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"primitive.array.html\">[U; N]</a>&gt; for <a class=\"struct\" href=\"collections/struct.VecDeque.html\" title=\"struct std::collections::VecDeque\">VecDeque</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,\n    T: <a class=\"trait\" href=\"cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2809\">source</a><a href=\"#method.eq-7\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.array.html\">[U; N]</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-7\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne-7\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialOrd-for-%5BT;+N%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#365\">source</a></span><a href=\"#impl-PartialOrd-for-%5BT;+N%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a> for <a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>,</div></h3></section></summary><div class=\"docblock\"><p>Implements comparison of arrays <a href=\"cmp/trait.Ord.html#lexicographical-comparison\" title=\"trait std::cmp::Ord\">lexicographically</a>.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#367\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a>) -&gt; <a class=\"enum\" href=\"option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\">This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#371\">source</a><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.le\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#375\">source</a><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ge\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#379\">source</a><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#383\">source</a><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Pattern%3C'a%3E-for-%26%5Bchar;+N%5D\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#831\">source</a><a href=\"#impl-Pattern%3C'a%3E-for-%26%5Bchar;+N%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b, const N: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"str/pattern/trait.Pattern.html\" title=\"trait std::str::pattern::Pattern\">Pattern</a>&lt;'a&gt; for &amp;'b [<a class=\"primitive\" href=\"primitive.char.html\">char</a>; <a class=\"primitive\" href=\"primitive.array.html\">N</a>]</h3></section></summary><div class=\"docblock\"><p>Searches for chars that are equal to any of the <a href=\"primitive.char.html\" title=\"primitive char\"><code>char</code></a>s in the array.</p>\n<h4 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">§</a>Examples</h4>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"Hello world\"</span>.find(<span class=\"kw-2\">&amp;</span>[<span class=\"string\">'o'</span>, <span class=\"string\">'l'</span>]), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"Hello world\"</span>.find(<span class=\"kw-2\">&amp;</span>[<span class=\"string\">'h'</span>, <span class=\"string\">'w'</span>]), <span class=\"prelude-val\">Some</span>(<span class=\"number\">6</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(%22Hello+world%22.find(%26%5B'o',+'l'%5D),+Some(2));%0A++++assert_eq!(%22Hello+world%22.find(%26%5B'h',+'w'%5D),+Some(6));%0A%7D&amp;edition=2021\">Run</a></div>\n</div><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Searcher-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Searcher-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"str/pattern/trait.Pattern.html#associatedtype.Searcher\" class=\"associatedtype\">Searcher</a> = <a class=\"struct\" href=\"str/pattern/struct.CharArrayRefSearcher.html\" title=\"struct std::str::pattern::CharArrayRefSearcher\">CharArrayRefSearcher</a>&lt;'a, 'b, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>pattern</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/27721\">#27721</a>)</span></div></span><div class=\"docblock\">Associated searcher for this pattern</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_searcher-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#832\">source</a><a href=\"#method.into_searcher-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"str/pattern/trait.Pattern.html#tymethod.into_searcher\" class=\"fn\">into_searcher</a>(self, haystack: &amp;'a <a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; <a class=\"struct\" href=\"str/pattern/struct.CharArrayRefSearcher.html\" title=\"struct std::str::pattern::CharArrayRefSearcher\">CharArrayRefSearcher</a>&lt;'a, 'b, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>pattern</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/27721\">#27721</a>)</span></div></span><div class=\"docblock\">Constructs the associated searcher from\n<code>self</code> and the <code>haystack</code> to search in.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_contained_in-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#832\">source</a><a href=\"#method.is_contained_in-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"str/pattern/trait.Pattern.html#method.is_contained_in\" class=\"fn\">is_contained_in</a>(self, haystack: &amp;'a <a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>pattern</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/27721\">#27721</a>)</span></div></span><div class=\"docblock\">Checks whether the pattern matches anywhere in the haystack</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_prefix_of-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#832\">source</a><a href=\"#method.is_prefix_of-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"str/pattern/trait.Pattern.html#method.is_prefix_of\" class=\"fn\">is_prefix_of</a>(self, haystack: &amp;'a <a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>pattern</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/27721\">#27721</a>)</span></div></span><div class=\"docblock\">Checks whether the pattern matches at the front of the haystack</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.strip_prefix_of-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#832\">source</a><a href=\"#method.strip_prefix_of-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"str/pattern/trait.Pattern.html#method.strip_prefix_of\" class=\"fn\">strip_prefix_of</a>(self, haystack: &amp;'a <a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;'a <a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>pattern</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/27721\">#27721</a>)</span></div></span><div class=\"docblock\">Removes the pattern from the front of haystack, if it matches.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_suffix_of-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#832\">source</a><a href=\"#method.is_suffix_of-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"str/pattern/trait.Pattern.html#method.is_suffix_of\" class=\"fn\">is_suffix_of</a>(self, haystack: &amp;'a <a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a><div class=\"where\">where\n    <a class=\"struct\" href=\"str/pattern/struct.CharArrayRefSearcher.html\" title=\"struct std::str::pattern::CharArrayRefSearcher\">CharArrayRefSearcher</a>&lt;'a, 'b, N&gt;: <a class=\"trait\" href=\"str/pattern/trait.ReverseSearcher.html\" title=\"trait std::str::pattern::ReverseSearcher\">ReverseSearcher</a>&lt;'a&gt;,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>pattern</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/27721\">#27721</a>)</span></div></span><div class=\"docblock\">Checks whether the pattern matches at the back of the haystack</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.strip_suffix_of-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#832\">source</a><a href=\"#method.strip_suffix_of-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"str/pattern/trait.Pattern.html#method.strip_suffix_of\" class=\"fn\">strip_suffix_of</a>(self, haystack: &amp;'a <a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;'a <a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"str/pattern/struct.CharArrayRefSearcher.html\" title=\"struct std::str::pattern::CharArrayRefSearcher\">CharArrayRefSearcher</a>&lt;'a, 'b, N&gt;: <a class=\"trait\" href=\"str/pattern/trait.ReverseSearcher.html\" title=\"trait std::str::pattern::ReverseSearcher\">ReverseSearcher</a>&lt;'a&gt;,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>pattern</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/27721\">#27721</a>)</span></div></span><div class=\"docblock\">Removes the pattern from the back of haystack, if it matches.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Pattern%3C'a%3E-for-%5Bchar;+N%5D\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#809\">source</a><a href=\"#impl-Pattern%3C'a%3E-for-%5Bchar;+N%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, const N: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"str/pattern/trait.Pattern.html\" title=\"trait std::str::pattern::Pattern\">Pattern</a>&lt;'a&gt; for [<a class=\"primitive\" href=\"primitive.char.html\">char</a>; <a class=\"primitive\" href=\"primitive.array.html\">N</a>]</h3></section></summary><div class=\"docblock\"><p>Searches for chars that are equal to any of the <a href=\"primitive.char.html\" title=\"primitive char\"><code>char</code></a>s in the array.</p>\n<h4 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">§</a>Examples</h4>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"Hello world\"</span>.find([<span class=\"string\">'o'</span>, <span class=\"string\">'l'</span>]), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"Hello world\"</span>.find([<span class=\"string\">'h'</span>, <span class=\"string\">'w'</span>]), <span class=\"prelude-val\">Some</span>(<span class=\"number\">6</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(%22Hello+world%22.find(%5B'o',+'l'%5D),+Some(2));%0A++++assert_eq!(%22Hello+world%22.find(%5B'h',+'w'%5D),+Some(6));%0A%7D&amp;edition=2021\">Run</a></div>\n</div><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Searcher\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Searcher\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"str/pattern/trait.Pattern.html#associatedtype.Searcher\" class=\"associatedtype\">Searcher</a> = <a class=\"struct\" href=\"str/pattern/struct.CharArraySearcher.html\" title=\"struct std::str::pattern::CharArraySearcher\">CharArraySearcher</a>&lt;'a, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>pattern</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/27721\">#27721</a>)</span></div></span><div class=\"docblock\">Associated searcher for this pattern</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_searcher\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#810\">source</a><a href=\"#method.into_searcher\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"str/pattern/trait.Pattern.html#tymethod.into_searcher\" class=\"fn\">into_searcher</a>(self, haystack: &amp;'a <a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; <a class=\"struct\" href=\"str/pattern/struct.CharArraySearcher.html\" title=\"struct std::str::pattern::CharArraySearcher\">CharArraySearcher</a>&lt;'a, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>pattern</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/27721\">#27721</a>)</span></div></span><div class=\"docblock\">Constructs the associated searcher from\n<code>self</code> and the <code>haystack</code> to search in.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_contained_in\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#810\">source</a><a href=\"#method.is_contained_in\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"str/pattern/trait.Pattern.html#method.is_contained_in\" class=\"fn\">is_contained_in</a>(self, haystack: &amp;'a <a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>pattern</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/27721\">#27721</a>)</span></div></span><div class=\"docblock\">Checks whether the pattern matches anywhere in the haystack</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_prefix_of\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#810\">source</a><a href=\"#method.is_prefix_of\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"str/pattern/trait.Pattern.html#method.is_prefix_of\" class=\"fn\">is_prefix_of</a>(self, haystack: &amp;'a <a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>pattern</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/27721\">#27721</a>)</span></div></span><div class=\"docblock\">Checks whether the pattern matches at the front of the haystack</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.strip_prefix_of\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#810\">source</a><a href=\"#method.strip_prefix_of\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"str/pattern/trait.Pattern.html#method.strip_prefix_of\" class=\"fn\">strip_prefix_of</a>(self, haystack: &amp;'a <a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;'a <a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>pattern</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/27721\">#27721</a>)</span></div></span><div class=\"docblock\">Removes the pattern from the front of haystack, if it matches.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_suffix_of\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#810\">source</a><a href=\"#method.is_suffix_of\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"str/pattern/trait.Pattern.html#method.is_suffix_of\" class=\"fn\">is_suffix_of</a>(self, haystack: &amp;'a <a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a><div class=\"where\">where\n    <a class=\"struct\" href=\"str/pattern/struct.CharArraySearcher.html\" title=\"struct std::str::pattern::CharArraySearcher\">CharArraySearcher</a>&lt;'a, N&gt;: <a class=\"trait\" href=\"str/pattern/trait.ReverseSearcher.html\" title=\"trait std::str::pattern::ReverseSearcher\">ReverseSearcher</a>&lt;'a&gt;,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>pattern</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/27721\">#27721</a>)</span></div></span><div class=\"docblock\">Checks whether the pattern matches at the back of the haystack</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.strip_suffix_of\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#810\">source</a><a href=\"#method.strip_suffix_of\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"str/pattern/trait.Pattern.html#method.strip_suffix_of\" class=\"fn\">strip_suffix_of</a>(self, haystack: &amp;'a <a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;'a <a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"str/pattern/struct.CharArraySearcher.html\" title=\"struct std::str::pattern::CharArraySearcher\">CharArraySearcher</a>&lt;'a, N&gt;: <a class=\"trait\" href=\"str/pattern/trait.ReverseSearcher.html\" title=\"trait std::str::pattern::ReverseSearcher\">ReverseSearcher</a>&lt;'a&gt;,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>pattern</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/27721\">#27721</a>)</span></div></span><div class=\"docblock\">Removes the pattern from the back of haystack, if it matches.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SlicePattern-for-%5BT;+N%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.51.0\">1.51.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#4727\">source</a></span><a href=\"#impl-SlicePattern-for-%5BT;+N%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/slice/trait.SlicePattern.html\" title=\"trait core::slice::SlicePattern\">SlicePattern</a> for <a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Item-3\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item-3\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.80.0/core/slice/trait.SlicePattern.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = T</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_pattern</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/56345\">#56345</a>)</span></div></span><div class=\"docblock\">The element type of the slice being matched on.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_slice-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#4731\">source</a><a href=\"#method.as_slice-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.0/core/slice/trait.SlicePattern.html#tymethod.as_slice\" class=\"fn\">as_slice</a>(&amp;self) -&gt; &amp;[&lt;<a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/slice/trait.SlicePattern.html\" title=\"trait core::slice::SlicePattern\">SlicePattern</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.80.0/core/slice/trait.SlicePattern.html#associatedtype.Item\" title=\"type core::slice::SlicePattern::Item\">Item</a>]</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_pattern</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/56345\">#56345</a>)</span></div></span><div class=\"docblock\">Currently, the consumers of <code>SlicePattern</code> need a slice.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3C%26%5BT%5D%3E-for-%26%5BT;+N%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#251\">source</a></span><a href=\"#impl-TryFrom%3C%26%5BT%5D%3E-for-%26%5BT;+N%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T, const N: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;&amp;'a <a class=\"primitive\" href=\"primitive.slice.html\">[T]</a>&gt; for &amp;'a <a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a></h3></section></summary><div class=\"docblock\"><p>Tries to create an array ref <code>&amp;[T; N]</code> from a slice ref <code>&amp;[T]</code>. Succeeds if\n<code>slice.len() == N</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bytes: [u8; <span class=\"number\">3</span>] = [<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>];\n\n<span class=\"kw\">let </span>bytes_head: <span class=\"kw-2\">&amp;</span>[u8; <span class=\"number\">2</span>] = &lt;<span class=\"kw-2\">&amp;</span>[u8; <span class=\"number\">2</span>]&gt;::try_from(<span class=\"kw-2\">&amp;</span>bytes[<span class=\"number\">0</span>..<span class=\"number\">2</span>]).unwrap();\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1</span>, u16::from_le_bytes(<span class=\"kw-2\">*</span>bytes_head));\n\n<span class=\"kw\">let </span>bytes_tail: <span class=\"kw-2\">&amp;</span>[u8; <span class=\"number\">2</span>] = bytes[<span class=\"number\">1</span>..<span class=\"number\">3</span>].try_into().unwrap();\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">512</span>, u16::from_le_bytes(<span class=\"kw-2\">*</span>bytes_tail));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+bytes:+%5Bu8;+3%5D+=+%5B1,+0,+2%5D;%0A++++%0A++++let+bytes_head:+%26%5Bu8;+2%5D+=+%3C%26%5Bu8;+2%5D%3E::try_from(%26bytes%5B0..2%5D).unwrap();%0A++++assert_eq!(1,+u16::from_le_bytes(*bytes_head));%0A++++%0A++++let+bytes_tail:+%26%5Bu8;+2%5D+=+bytes%5B1..3%5D.try_into().unwrap();%0A++++assert_eq!(512,+u16::from_le_bytes(*bytes_tail));%0A%7D&amp;edition=2021\">Run</a></div>\n</div><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"array/struct.TryFromSliceError.html\" title=\"struct std::array::TryFromSliceError\">TryFromSliceError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#255\">source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(slice: &amp;'a <a class=\"primitive\" href=\"primitive.slice.html\">[T]</a>) -&gt; <a class=\"enum\" href=\"result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;&amp;'a <a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a>, <a class=\"struct\" href=\"array/struct.TryFromSliceError.html\" title=\"struct std::array::TryFromSliceError\">TryFromSliceError</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3C%26%5BT%5D%3E-for-%5BT;+N%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#201-203\">source</a></span><a href=\"#impl-TryFrom%3C%26%5BT%5D%3E-for-%5BT;+N%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.slice.html\">[T]</a>&gt; for <a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a>,</div></h3></section></summary><div class=\"docblock\"><p>Tries to create an array <code>[T; N]</code> by copying from a slice <code>&amp;[T]</code>. Succeeds if\n<code>slice.len() == N</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bytes: [u8; <span class=\"number\">3</span>] = [<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>];\n\n<span class=\"kw\">let </span>bytes_head: [u8; <span class=\"number\">2</span>] = &lt;[u8; <span class=\"number\">2</span>]&gt;::try_from(<span class=\"kw-2\">&amp;</span>bytes[<span class=\"number\">0</span>..<span class=\"number\">2</span>]).unwrap();\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1</span>, u16::from_le_bytes(bytes_head));\n\n<span class=\"kw\">let </span>bytes_tail: [u8; <span class=\"number\">2</span>] = bytes[<span class=\"number\">1</span>..<span class=\"number\">3</span>].try_into().unwrap();\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">512</span>, u16::from_le_bytes(bytes_tail));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+bytes:+%5Bu8;+3%5D+=+%5B1,+0,+2%5D;%0A++++%0A++++let+bytes_head:+%5Bu8;+2%5D+=+%3C%5Bu8;+2%5D%3E::try_from(%26bytes%5B0..2%5D).unwrap();%0A++++assert_eq!(1,+u16::from_le_bytes(bytes_head));%0A++++%0A++++let+bytes_tail:+%5Bu8;+2%5D+=+bytes%5B1..3%5D.try_into().unwrap();%0A++++assert_eq!(512,+u16::from_le_bytes(bytes_tail));%0A%7D&amp;edition=2021\">Run</a></div>\n</div><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-2\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-2\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"array/struct.TryFromSliceError.html\" title=\"struct std::array::TryFromSliceError\">TryFromSliceError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#208\">source</a><a href=\"#method.try_from-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(slice: &amp;<a class=\"primitive\" href=\"primitive.slice.html\">[T]</a>) -&gt; <a class=\"enum\" href=\"result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a>, <a class=\"struct\" href=\"array/struct.TryFromSliceError.html\" title=\"struct std::array::TryFromSliceError\">TryFromSliceError</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3C%26mut+%5BT%5D%3E-for-%26mut+%5BT;+N%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#279\">source</a></span><a href=\"#impl-TryFrom%3C%26mut+%5BT%5D%3E-for-%26mut+%5BT;+N%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T, const N: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;&amp;'a mut <a class=\"primitive\" href=\"primitive.slice.html\">[T]</a>&gt; for &amp;'a mut <a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a></h3></section></summary><div class=\"docblock\"><p>Tries to create a mutable array ref <code>&amp;mut [T; N]</code> from a mutable slice ref\n<code>&amp;mut [T]</code>. Succeeds if <code>slice.len() == N</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bytes: [u8; <span class=\"number\">3</span>] = [<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>];\n\n<span class=\"kw\">let </span>bytes_head: <span class=\"kw-2\">&amp;mut </span>[u8; <span class=\"number\">2</span>] = &lt;<span class=\"kw-2\">&amp;mut </span>[u8; <span class=\"number\">2</span>]&gt;::try_from(<span class=\"kw-2\">&amp;mut </span>bytes[<span class=\"number\">0</span>..<span class=\"number\">2</span>]).unwrap();\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1</span>, u16::from_le_bytes(<span class=\"kw-2\">*</span>bytes_head));\n\n<span class=\"kw\">let </span>bytes_tail: <span class=\"kw-2\">&amp;mut </span>[u8; <span class=\"number\">2</span>] = (<span class=\"kw-2\">&amp;mut </span>bytes[<span class=\"number\">1</span>..<span class=\"number\">3</span>]).try_into().unwrap();\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">512</span>, u16::from_le_bytes(<span class=\"kw-2\">*</span>bytes_tail));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+bytes:+%5Bu8;+3%5D+=+%5B1,+0,+2%5D;%0A++++%0A++++let+bytes_head:+%26mut+%5Bu8;+2%5D+=+%3C%26mut+%5Bu8;+2%5D%3E::try_from(%26mut+bytes%5B0..2%5D).unwrap();%0A++++assert_eq!(1,+u16::from_le_bytes(*bytes_head));%0A++++%0A++++let+bytes_tail:+%26mut+%5Bu8;+2%5D+=+(%26mut+bytes%5B1..3%5D).try_into().unwrap();%0A++++assert_eq!(512,+u16::from_le_bytes(*bytes_tail));%0A%7D&amp;edition=2021\">Run</a></div>\n</div><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-3\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-3\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"array/struct.TryFromSliceError.html\" title=\"struct std::array::TryFromSliceError\">TryFromSliceError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#283\">source</a><a href=\"#method.try_from-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(slice: &amp;'a mut <a class=\"primitive\" href=\"primitive.slice.html\">[T]</a>) -&gt; <a class=\"enum\" href=\"result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;&amp;'a mut <a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a>, <a class=\"struct\" href=\"array/struct.TryFromSliceError.html\" title=\"struct std::array::TryFromSliceError\">TryFromSliceError</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3C%26mut+%5BT%5D%3E-for-%5BT;+N%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.59.0\">1.59.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#226-228\">source</a></span><a href=\"#impl-TryFrom%3C%26mut+%5BT%5D%3E-for-%5BT;+N%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;&amp;mut <a class=\"primitive\" href=\"primitive.slice.html\">[T]</a>&gt; for <a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a>,</div></h3></section></summary><div class=\"docblock\"><p>Tries to create an array <code>[T; N]</code> by copying from a mutable slice <code>&amp;mut [T]</code>.\nSucceeds if <code>slice.len() == N</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bytes: [u8; <span class=\"number\">3</span>] = [<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>];\n\n<span class=\"kw\">let </span>bytes_head: [u8; <span class=\"number\">2</span>] = &lt;[u8; <span class=\"number\">2</span>]&gt;::try_from(<span class=\"kw-2\">&amp;mut </span>bytes[<span class=\"number\">0</span>..<span class=\"number\">2</span>]).unwrap();\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1</span>, u16::from_le_bytes(bytes_head));\n\n<span class=\"kw\">let </span>bytes_tail: [u8; <span class=\"number\">2</span>] = (<span class=\"kw-2\">&amp;mut </span>bytes[<span class=\"number\">1</span>..<span class=\"number\">3</span>]).try_into().unwrap();\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">512</span>, u16::from_le_bytes(bytes_tail));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+bytes:+%5Bu8;+3%5D+=+%5B1,+0,+2%5D;%0A++++%0A++++let+bytes_head:+%5Bu8;+2%5D+=+%3C%5Bu8;+2%5D%3E::try_from(%26mut+bytes%5B0..2%5D).unwrap();%0A++++assert_eq!(1,+u16::from_le_bytes(bytes_head));%0A++++%0A++++let+bytes_tail:+%5Bu8;+2%5D+=+(%26mut+bytes%5B1..3%5D).try_into().unwrap();%0A++++assert_eq!(512,+u16::from_le_bytes(bytes_tail));%0A%7D&amp;edition=2021\">Run</a></div>\n</div><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"array/struct.TryFromSliceError.html\" title=\"struct std::array::TryFromSliceError\">TryFromSliceError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#233\">source</a><a href=\"#method.try_from-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(slice: &amp;mut <a class=\"primitive\" href=\"primitive.slice.html\">[T]</a>) -&gt; <a class=\"enum\" href=\"result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a>, <a class=\"struct\" href=\"array/struct.TryFromSliceError.html\" title=\"struct std::array::TryFromSliceError\">TryFromSliceError</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CBox%3C%5BT%5D%3E%3E-for-Box%3C%5BT;+N%5D%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.43.0\">1.43.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1715\">source</a></span><a href=\"#impl-TryFrom%3CBox%3C%5BT%5D%3E%3E-for-Box%3C%5BT;+N%5D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"primitive.slice.html\">[T]</a>&gt;&gt; for <a class=\"struct\" href=\"boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1727\">source</a><a href=\"#method.try_from-5\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    boxed_slice: <a class=\"struct\" href=\"boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"primitive.slice.html\">[T]</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a>&gt;, &lt;<a class=\"struct\" href=\"boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a>&gt; as <a class=\"trait\" href=\"convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"primitive.slice.html\">[T]</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert a <code>Box&lt;[T]&gt;</code> into a <code>Box&lt;[T; N]&gt;</code>.</p>\n<p>The conversion occurs in-place and does not require a\nnew memory allocation.</p>\n<h5 id=\"errors-1\"><a class=\"doc-anchor\" href=\"#errors-1\">§</a>Errors</h5>\n<p>Returns the old <code>Box&lt;[T]&gt;</code> in the <code>Err</code> variant if\n<code>boxed_slice.len()</code> does not equal <code>N</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-5\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-5\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"primitive.slice.html\">[T]</a>&gt;</h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CVec%3CT%3E%3E-for-Box%3C%5BT;+N%5D%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0\">1.66.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1738\">source</a></span><a href=\"#impl-TryFrom%3CVec%3CT%3E%3E-for-Box%3C%5BT;+N%5D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"vec/struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T&gt;&gt; for <a class=\"struct\" href=\"boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1759\">source</a><a href=\"#method.try_from-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    vec: <a class=\"struct\" href=\"vec/struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T&gt;,\n) -&gt; <a class=\"enum\" href=\"result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a>&gt;, &lt;<a class=\"struct\" href=\"boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a>&gt; as <a class=\"trait\" href=\"convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"vec/struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert a <code>Vec&lt;T&gt;</code> into a <code>Box&lt;[T; N]&gt;</code>.</p>\n<p>Like <a href=\"vec/struct.Vec.html#method.into_boxed_slice\" title=\"method std::vec::Vec::into_boxed_slice\"><code>Vec::into_boxed_slice</code></a>, this is in-place if <code>vec.capacity() == N</code>,\nbut will require a reallocation otherwise.</p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h5>\n<p>Returns the original <code>Vec&lt;T&gt;</code> in the <code>Err</code> variant if\n<code>boxed_slice.len()</code> does not equal <code>N</code>.</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">§</a>Examples</h5>\n<p>This can be used with <a href=\"macro.vec.html\" title=\"macro std::vec\"><code>vec!</code></a> to create an array on the heap:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>state: Box&lt;[f32; <span class=\"number\">100</span>]&gt; = <span class=\"macro\">vec!</span>[<span class=\"number\">1.0</span>; <span class=\"number\">100</span>].try_into().unwrap();\n<span class=\"macro\">assert_eq!</span>(state.len(), <span class=\"number\">100</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+state:+Box%3C%5Bf32;+100%5D%3E+=+vec!%5B1.0;+100%5D.try_into().unwrap();%0A++++assert_eq!(state.len(),+100);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-4\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-4\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"vec/struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CVec%3CT,+A%3E%3E-for-%5BT;+N%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.48.0\">1.48.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3511\">source</a></span><a href=\"#impl-TryFrom%3CVec%3CT,+A%3E%3E-for-%5BT;+N%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A, const N: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"vec/struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;&gt; for <a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a><div class=\"where\">where\n    A: <a class=\"trait\" href=\"alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3540\">source</a><a href=\"#method.try_from-6\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(vec: <a class=\"struct\" href=\"vec/struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;) -&gt; <a class=\"enum\" href=\"result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a>, <a class=\"struct\" href=\"vec/struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Gets the entire contents of the <code>Vec&lt;T&gt;</code> as an array,\nif its size exactly matches that of the requested array.</p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].try_into(), <span class=\"prelude-val\">Ok</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]));\n<span class=\"macro\">assert_eq!</span>(&lt;Vec&lt;i32&gt;&gt;::new().try_into(), <span class=\"prelude-val\">Ok</span>([]));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(vec!%5B1,+2,+3%5D.try_into(),+Ok(%5B1,+2,+3%5D));%0A++++assert_eq!(%3CVec%3Ci32%3E%3E::new().try_into(),+Ok(%5B%5D));%0A%7D&amp;edition=2021\">Run</a></div>\n<p>If the length doesn’t match, the input comes back in <code>Err</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>r: <span class=\"prelude-ty\">Result</span>&lt;[i32; <span class=\"number\">4</span>], <span class=\"kw\">_</span>&gt; = (<span class=\"number\">0</span>..<span class=\"number\">10</span>).collect::&lt;Vec&lt;<span class=\"kw\">_</span>&gt;&gt;().try_into();\n<span class=\"macro\">assert_eq!</span>(r, <span class=\"prelude-val\">Err</span>(<span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>]));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+r:+Result%3C%5Bi32;+4%5D,+_%3E+=+(0..10).collect::%3CVec%3C_%3E%3E().try_into();%0A++++assert_eq!(r,+Err(vec!%5B0,+1,+2,+3,+4,+5,+6,+7,+8,+9%5D));%0A%7D&amp;edition=2021\">Run</a></div>\n<p>If you’re fine with just getting a prefix of the <code>Vec&lt;T&gt;</code>,\nyou can call <a href=\"vec/struct.Vec.html#method.truncate\" title=\"method std::vec::Vec::truncate\"><code>.truncate(N)</code></a> first.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = String::from(<span class=\"string\">\"hello world\"</span>).into_bytes();\nv.sort();\nv.truncate(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>[a, b]: [<span class=\"kw\">_</span>; <span class=\"number\">2</span>] = v.try_into().unwrap();\n<span class=\"macro\">assert_eq!</span>(a, <span class=\"string\">b' '</span>);\n<span class=\"macro\">assert_eq!</span>(b, <span class=\"string\">b'd'</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+v+=+String::from(%22hello+world%22).into_bytes();%0A++++v.sort();%0A++++v.truncate(2);%0A++++let+%5Ba,+b%5D:+%5B_;+2%5D+=+v.try_into().unwrap();%0A++++assert_eq!(a,+b'+');%0A++++assert_eq!(b,+b'd');%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-6\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-6\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"vec/struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;</h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><section id=\"impl-ConstParamTy-for-%5BT;+N%5D\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/marker.rs.html#992-1003\">source</a><a href=\"#impl-ConstParamTy-for-%5BT;+N%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"marker/trait.ConstParamTy.html\" title=\"trait std::marker::ConstParamTy\">ConstParamTy</a> for <a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"marker/trait.ConstParamTy.html\" title=\"trait std::marker::ConstParamTy\">ConstParamTy</a>,</div></h3></section><section id=\"impl-Copy-for-%5BT;+N%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.58.0\">1.58.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#398\">source</a></span><a href=\"#impl-Copy-for-%5BT;+N%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a> for <a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a>,</div></h3></section><section id=\"impl-Eq-for-%5BT;+N%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/equality.rs.html#129\">source</a></span><a href=\"#impl-Eq-for-%5BT;+N%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> for <a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a>,</div></h3></section><section id=\"impl-StructuralPartialEq-for-%5BT;+N%5D\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/marker.rs.html#214-226\">source</a><a href=\"#impl-StructuralPartialEq-for-%5BT;+N%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"marker/trait.StructuralPartialEq.html\" title=\"trait std::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a></h3></section></div><h2 id=\"synthetic-implementations\" class=\"section-header\">Auto Trait Implementations<a href=\"#synthetic-implementations\" class=\"anchor\">§</a></h2><div id=\"synthetic-implementations-list\"><section id=\"impl-Freeze-for-%5Bu8;+N%5D\" class=\"impl\"><a href=\"#impl-Freeze-for-%5Bu8;+N%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">N</a>]</h3></section><section id=\"impl-RefUnwindSafe-for-%5Bu8;+N%5D\" class=\"impl\"><a href=\"#impl-RefUnwindSafe-for-%5Bu8;+N%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">N</a>]</h3></section><section id=\"impl-Send-for-%5Bu8;+N%5D\" class=\"impl\"><a href=\"#impl-Send-for-%5Bu8;+N%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">N</a>]</h3></section><section id=\"impl-Sync-for-%5Bu8;+N%5D\" class=\"impl\"><a href=\"#impl-Sync-for-%5Bu8;+N%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">N</a>]</h3></section><section id=\"impl-Unpin-for-%5Bu8;+N%5D\" class=\"impl\"><a href=\"#impl-Unpin-for-%5Bu8;+N%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">N</a>]</h3></section><section id=\"impl-UnwindSafe-for-%5Bu8;+N%5D\" class=\"impl\"><a href=\"#impl-UnwindSafe-for-%5Bu8;+N%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">N</a>]</h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">§</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Any-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a><a href=\"#impl-Any-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#141\">source</a><a href=\"#method.type_id\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"any/trait.Any.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\">Gets the <code>TypeId</code> of <code>self</code>. <a href=\"any/trait.Any.html#tymethod.type_id\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Borrow%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208\">source</a><a href=\"#impl-Borrow%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#210\">source</a><a href=\"#method.borrow-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216\">source</a><a href=\"#impl-BorrowMut%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#217\">source</a><a href=\"#method.borrow_mut-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765\">source</a><a href=\"#impl-From%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-48\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768\">source</a><a href=\"#method.from-48\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the argument unchanged.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Into%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750\">source</a><a href=\"#impl-Into%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758\">source</a><a href=\"#method.into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; U</h4></section></summary><div class=\"docblock\"><p>Calls <code>U::from(self)</code>.</p>\n<p>That is, this conversion is whatever the implementation of\n<code><a href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for U</code> chooses to do.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-ToOwned-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85\">source</a><a href=\"#impl-ToOwned-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"borrow/trait.ToOwned.html\" title=\"trait std::borrow::ToOwned\">ToOwned</a> for T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Owned\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Owned\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"borrow/trait.ToOwned.html#associatedtype.Owned\" class=\"associatedtype\">Owned</a> = T</h4></section></summary><div class=\"docblock\">The resulting type after obtaining ownership.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_owned\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88\">source</a><a href=\"#method.to_owned\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"borrow/trait.ToOwned.html#tymethod.to_owned\" class=\"fn\">to_owned</a>(&amp;self) -&gt; T</h4></section></summary><div class=\"docblock\">Creates owned data from borrowed data, usually by cloning. <a href=\"borrow/trait.ToOwned.html#tymethod.to_owned\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92\">source</a><a href=\"#method.clone_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"borrow/trait.ToOwned.html#method.clone_into\" class=\"fn\">clone_into</a>(&amp;self, target: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;mut T</a>)</h4></section></summary><div class=\"docblock\">Uses borrowed data to replace owned data, usually by cloning. <a href=\"borrow/trait.ToOwned.html#method.clone_into\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryFrom%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807\">source</a><a href=\"#impl-TryFrom%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-8\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-8\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812\">source</a><a href=\"#method.try_from-7\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: U) -&gt; <a class=\"enum\" href=\"result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, &lt;T as <a class=\"trait\" href=\"convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt;&gt;::<a class=\"associatedtype\" href=\"convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryInto%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792\">source</a><a href=\"#impl-TryInto%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"convert/trait.TryInto.html\" title=\"trait std::convert::TryInto\">TryInto</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-7\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-7\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"convert/trait.TryInto.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = &lt;U as <a class=\"trait\" href=\"convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797\">source</a><a href=\"#method.try_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.TryInto.html#tymethod.try_into\" class=\"fn\">try_into</a>(self) -&gt; <a class=\"enum\" href=\"result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;U, &lt;U as <a class=\"trait\" href=\"convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details></div><script type=\"text/json\" id=\"notable-traits-data\">{\"Iter<'a, T>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"slice/struct.Iter.html\\\" title=\\\"struct std::slice::Iter\\\">Iter</a>&lt;'a, T&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a, T&gt; <a class=\\\"trait\\\" href=\\\"iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"slice/struct.Iter.html\\\" title=\\\"struct std::slice::Iter\\\">Iter</a>&lt;'a, T&gt;</div><div class=\\\"where\\\">    type <a href=\\\"iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = <a class=\\\"primitive\\\" href=\\\"primitive.reference.html\\\">&amp;'a T</a>;</div>\",\"IterMut<'a, T>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"slice/struct.IterMut.html\\\" title=\\\"struct std::slice::IterMut\\\">IterMut</a>&lt;'a, T&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a, T&gt; <a class=\\\"trait\\\" href=\\\"iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"slice/struct.IterMut.html\\\" title=\\\"struct std::slice::IterMut\\\">IterMut</a>&lt;'a, T&gt;</div><div class=\\\"where\\\">    type <a href=\\\"iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = <a class=\\\"primitive\\\" href=\\\"primitive.reference.html\\\">&amp;'a mut T</a>;</div>\"}</script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:26:29.625Z"
}