{
	"title": "FileExt in std::os::windows::fs - Rust",
	"url": "https://doc.rust-lang.org/stable/std/os/windows/fs/trait.FileExt.html",
	"markdown": "# FileExt in std::os::windows::fs - Rust\n\n```\npub trait FileExt {\n    // Required methods\n    fn seek_read(&self, buf: &mut [u8], offset: u64) -> Result<usize>;\n    fn seek_write(&self, buf: &[u8], offset: u64) -> Result<usize>;\n}\n```\n\nAvailable on **Windows** only.\n\nExpand description\n\nWindows-specific extensions to [`fs::File`](../../../fs/struct.File.html \"struct std::fs::File\").\n\n1.15.0 · [source](about:blank/src/std/os/windows/fs.rs.html#51)\n\nSeeks to a given position and reads a number of bytes.\n\nReturns the number of bytes read.\n\nThe offset is relative to the start of the file and thus independent from the current cursor. The current cursor **is** affected by this function, it is set to the end of the read.\n\nReading beyond the end of the file will always return with a length of 0.\n\nNote that similar to `File::read`, it is not an error to return with a short read. When returning from such a short read, the file pointer is still updated.\n\n##### [§](#examples)Examples\n\n```\nuse std::io;\nuse std::fs::File;\nuse std::os::windows::prelude::*;\n\nfn main() -> io::Result<()> {\n    let mut file = File::open(\"foo.txt\")?;\n    let mut buffer = [0; 10];\n\n    // Read 10 bytes, starting 72 bytes from the\n    // start of the file.\n    file.seek_read(&mut buffer[..], 72)?;\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::io;%0Ause+std::fs::File;%0Ause+std::os::windows::prelude::*;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+mut+file+=+File::open(%22foo.txt%22)?;%0A++++let+mut+buffer+=+%5B0;+10%5D;%0A%0A++++//+Read+10+bytes,+starting+72+bytes+from+the%0A++++//+start+of+the+file.%0A++++file.seek_read(%26mut+buffer%5B..%5D,+72)?;%0A++++Ok(())%0A%7D&edition=2021)\n\n1.15.0 · [source](about:blank/src/std/os/windows/fs.rs.html#84)\n\nSeeks to a given position and writes a number of bytes.\n\nReturns the number of bytes written.\n\nThe offset is relative to the start of the file and thus independent from the current cursor. The current cursor **is** affected by this function, it is set to the end of the write.\n\nWhen writing beyond the end of the file, the file is appropriately extended and the intermediate bytes are set to zero.\n\nNote that similar to `File::write`, it is not an error to return a short write. When returning from such a short write, the file pointer is still updated.\n\n##### [§](#examples-1)Examples\n\n```\nuse std::fs::File;\nuse std::os::windows::prelude::*;\n\nfn main() -> std::io::Result<()> {\n    let mut buffer = File::create(\"foo.txt\")?;\n\n    // Write a byte string starting 72 bytes from\n    // the start of the file.\n    buffer.seek_write(b\"some bytes\", 72)?;\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs::File;%0Ause+std::os::windows::prelude::*;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+mut+buffer+=+File::create(%22foo.txt%22)?;%0A%0A++++//+Write+a+byte+string+starting+72+bytes+from%0A++++//+the+start+of+the+file.%0A++++buffer.seek_write(b%22some+bytes%22,+72)?;%0A++++Ok(())%0A%7D&edition=2021)\n\n1.15.0 · [source](about:blank/src/std/os/windows/fs.rs.html#88-96)[§](#impl-FileExt-for-File)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Windows-specific extensions to `fs::File`.\"><title>FileExt in std::os::windows::fs - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../../../\" data-static-root-path=\"../../../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc trait\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">FileExt</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">FileExt</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#required-methods\">Required Methods</a></h3><ul class=\"block\"><li><a href=\"#tymethod.seek_read\">seek_read</a></li><li><a href=\"#tymethod.seek_write\">seek_write</a></li></ul><h3><a href=\"#implementors\">Implementors</a></h3></section><h2><a href=\"index.html\">In std::os::windows::fs</a></h2><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.FileExt.html\">FileExt</a></li><li><a href=\"trait.FileTimesExt.html\">FileTimesExt</a></li><li><a href=\"trait.FileTypeExt.html\">FileTypeExt</a></li><li><a href=\"trait.MetadataExt.html\">MetadataExt</a></li><li><a href=\"trait.OpenOptionsExt.html\">OpenOptionsExt</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.junction_point.html\">junction_point</a></li><li><a href=\"fn.symlink_dir.html\">symlink_dir</a></li><li><a href=\"fn.symlink_file.html\">symlink_file</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Trait <a href=\"../../../index.html\">std</a>::<wbr><a href=\"../../index.html\">os</a>::<wbr><a href=\"../index.html\">windows</a>::<wbr><a href=\"index.html\">fs</a>::<wbr><a class=\"trait\" href=\"#\">FileExt</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.15.0\">1.15.0</span> · <a class=\"src\" href=\"../../../../src/std/os/windows/fs.rs.html#17-85\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub trait FileExt {\n    // Required methods\n    fn <a href=\"#tymethod.seek_read\" class=\"fn\">seek_read</a>(&amp;self, buf: &amp;mut [<a class=\"primitive\" href=\"../../../primitive.u8.html\">u8</a>], offset: <a class=\"primitive\" href=\"../../../primitive.u64.html\">u64</a>) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../../primitive.usize.html\">usize</a>&gt;;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.seek_write\" class=\"fn\">seek_write</a>(&amp;self, buf: &amp;[<a class=\"primitive\" href=\"../../../primitive.u8.html\">u8</a>], offset: <a class=\"primitive\" href=\"../../../primitive.u64.html\">u64</a>) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../../primitive.usize.html\">usize</a>&gt;;\n}</code></pre><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Windows</strong> only.</div></span><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Windows-specific extensions to <a href=\"../../../fs/struct.File.html\" title=\"struct std::fs::File\"><code>fs::File</code></a>.</p>\n</div></details><h2 id=\"required-methods\" class=\"section-header\">Required Methods<a href=\"#required-methods\" class=\"anchor\">§</a></h2><div class=\"methods\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.seek_read\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.15.0\">1.15.0</span> · <a class=\"src\" href=\"../../../../src/std/os/windows/fs.rs.html#51\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.seek_read\" class=\"fn\">seek_read</a>(&amp;self, buf: &amp;mut [<a class=\"primitive\" href=\"../../../primitive.u8.html\">u8</a>], offset: <a class=\"primitive\" href=\"../../../primitive.u64.html\">u64</a>) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Seeks to a given position and reads a number of bytes.</p>\n<p>Returns the number of bytes read.</p>\n<p>The offset is relative to the start of the file and thus independent\nfrom the current cursor. The current cursor <strong>is</strong> affected by this\nfunction, it is set to the end of the read.</p>\n<p>Reading beyond the end of the file will always return with a length of\n0.</p>\n<p>Note that similar to <code>File::read</code>, it is not an error to return with a\nshort read. When returning from such a short read, the file pointer is\nstill updated.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io;\n<span class=\"kw\">use </span>std::fs::File;\n<span class=\"kw\">use </span>std::os::windows::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">fn </span>main() -&gt; io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>file = File::open(<span class=\"string\">\"foo.txt\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buffer = [<span class=\"number\">0</span>; <span class=\"number\">10</span>];\n\n    <span class=\"comment\">// Read 10 bytes, starting 72 bytes from the\n    // start of the file.\n    </span>file.seek_read(<span class=\"kw-2\">&amp;mut </span>buffer[..], <span class=\"number\">72</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::io;%0Ause+std::fs::File;%0Ause+std::os::windows::prelude::*;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+mut+file+=+File::open(%22foo.txt%22)?;%0A++++let+mut+buffer+=+%5B0;+10%5D;%0A%0A++++//+Read+10+bytes,+starting+72+bytes+from+the%0A++++//+start+of+the+file.%0A++++file.seek_read(%26mut+buffer%5B..%5D,+72)?;%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.seek_write\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.15.0\">1.15.0</span> · <a class=\"src\" href=\"../../../../src/std/os/windows/fs.rs.html#84\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.seek_write\" class=\"fn\">seek_write</a>(&amp;self, buf: &amp;[<a class=\"primitive\" href=\"../../../primitive.u8.html\">u8</a>], offset: <a class=\"primitive\" href=\"../../../primitive.u64.html\">u64</a>) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Seeks to a given position and writes a number of bytes.</p>\n<p>Returns the number of bytes written.</p>\n<p>The offset is relative to the start of the file and thus independent\nfrom the current cursor. The current cursor <strong>is</strong> affected by this\nfunction, it is set to the end of the write.</p>\n<p>When writing beyond the end of the file, the file is appropriately\nextended and the intermediate bytes are set to zero.</p>\n<p>Note that similar to <code>File::write</code>, it is not an error to return a\nshort write. When returning from such a short write, the file pointer\nis still updated.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs::File;\n<span class=\"kw\">use </span>std::os::windows::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buffer = File::create(<span class=\"string\">\"foo.txt\"</span>)<span class=\"question-mark\">?</span>;\n\n    <span class=\"comment\">// Write a byte string starting 72 bytes from\n    // the start of the file.\n    </span>buffer.seek_write(<span class=\"string\">b\"some bytes\"</span>, <span class=\"number\">72</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs::File;%0Ause+std::os::windows::prelude::*;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+mut+buffer+=+File::create(%22foo.txt%22)?;%0A%0A++++//+Write+a+byte+string+starting+72+bytes+from%0A++++//+the+start+of+the+file.%0A++++buffer.seek_write(b%22some+bytes%22,+72)?;%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div><h2 id=\"implementors\" class=\"section-header\">Implementors<a href=\"#implementors\" class=\"anchor\">§</a></h2><div id=\"implementors-list\"><section id=\"impl-FileExt-for-File\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.15.0\">1.15.0</span> · <a class=\"src\" href=\"../../../../src/std/os/windows/fs.rs.html#88-96\">source</a></span><a href=\"#impl-FileExt-for-File\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.FileExt.html\" title=\"trait std::os::windows::fs::FileExt\">FileExt</a> for <a class=\"struct\" href=\"../../../fs/struct.File.html\" title=\"struct std::fs::File\">File</a></h3></section></div><script src=\"../../../../trait.impl/std/os/windows/fs/trait.FileExt.js\" async=\"\"></script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:26:27.837Z"
}