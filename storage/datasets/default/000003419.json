{
	"title": "mod.rs - source",
	"url": "https://doc.rust-lang.org/stable/src/alloc/vec/mod.rs.html",
	"markdown": "# mod.rs - source\n\n```\n//! A contiguous growable array type with heap-allocated contents, written\n//! `Vec<T>`.\n//!\n//! Vectors have *O*(1) indexing, amortized *O*(1) push (to the end) and\n//! *O*(1) pop (from the end).\n//!\n//! Vectors ensure they never allocate more than `isize::MAX` bytes.\n//!\n//! # Examples\n//!\n//! You can explicitly create a [`Vec`] with [`Vec::new`]:\n//!\n//! ```\n//! let v: Vec<i32> = Vec::new();\n//! ```\n//!\n//! ...or by using the [`vec!`] macro:\n//!\n//! ```\n//! let v: Vec<i32> = vec![];\n//!\n//! let v = vec![1, 2, 3, 4, 5];\n//!\n//! let v = vec![0; 10]; // ten zeroes\n//! ```\n//!\n//! You can [`push`] values onto the end of a vector (which will grow the vector\n//! as needed):\n//!\n//! ```\n//! let mut v = vec![1, 2];\n//!\n//! v.push(3);\n//! ```\n//!\n//! Popping values works in much the same way:\n//!\n//! ```\n//! let mut v = vec![1, 2];\n//!\n//! let two = v.pop();\n//! ```\n//!\n//! Vectors also support indexing (through the [`Index`] and [`IndexMut`] traits):\n//!\n//! ```\n//! let mut v = vec![1, 2, 3];\n//! let three = v[2];\n//! v[1] = v[1] + 5;\n//! ```\n//!\n//! [`push`]: Vec::push\n\n#![stable(feature = \"rust1\", since = \"1.0.0\")]\n\n#[cfg(not(no_global_oom_handling))]\nuse core::cmp;\nuse core::cmp::Ordering;\nuse core::fmt;\nuse core::hash::{Hash, Hasher};\n#[cfg(not(no_global_oom_handling))]\nuse core::iter;\nuse core::marker::PhantomData;\nuse core::mem::{self, ManuallyDrop, MaybeUninit, SizedTypeProperties};\nuse core::ops::{self, Index, IndexMut, Range, RangeBounds};\nuse core::ptr::{self, NonNull};\nuse core::slice::{self, SliceIndex};\n\nuse crate::alloc::{Allocator, Global};\nuse crate::borrow::{Cow, ToOwned};\nuse crate::boxed::Box;\nuse crate::collections::TryReserveError;\nuse crate::raw_vec::RawVec;\n\n#[unstable(feature = \"extract_if\", reason = \"recently added\", issue = \"43244\")]\npub use self::extract_if::ExtractIf;\n\nmod extract_if;\n\n#[cfg(not(no_global_oom_handling))]\n#[stable(feature = \"vec_splice\", since = \"1.21.0\")]\npub use self::splice::Splice;\n\n#[cfg(not(no_global_oom_handling))]\nmod splice;\n\n#[stable(feature = \"drain\", since = \"1.6.0\")]\npub use self::drain::Drain;\n\nmod drain;\n\n#[cfg(not(no_global_oom_handling))]\nmod cow;\n\n#[cfg(not(no_global_oom_handling))]\npub(crate) use self::in_place_collect::AsVecIntoIter;\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\npub use self::into_iter::IntoIter;\n\nmod into_iter;\n\n#[cfg(not(no_global_oom_handling))]\nuse self::is_zero::IsZero;\n\n#[cfg(not(no_global_oom_handling))]\nmod is_zero;\n\n#[cfg(not(no_global_oom_handling))]\nmod in_place_collect;\n\nmod partial_eq;\n\n#[cfg(not(no_global_oom_handling))]\nuse self::spec_from_elem::SpecFromElem;\n\n#[cfg(not(no_global_oom_handling))]\nmod spec_from_elem;\n\n#[cfg(not(no_global_oom_handling))]\nuse self::set_len_on_drop::SetLenOnDrop;\n\n#[cfg(not(no_global_oom_handling))]\nmod set_len_on_drop;\n\n#[cfg(not(no_global_oom_handling))]\nuse self::in_place_drop::{InPlaceDrop, InPlaceDstDataSrcBufDrop};\n\n#[cfg(not(no_global_oom_handling))]\nmod in_place_drop;\n\n#[cfg(not(no_global_oom_handling))]\nuse self::spec_from_iter_nested::SpecFromIterNested;\n\n#[cfg(not(no_global_oom_handling))]\nmod spec_from_iter_nested;\n\n#[cfg(not(no_global_oom_handling))]\nuse self::spec_from_iter::SpecFromIter;\n\n#[cfg(not(no_global_oom_handling))]\nmod spec_from_iter;\n\n#[cfg(not(no_global_oom_handling))]\nuse self::spec_extend::SpecExtend;\n\n#[cfg(not(no_global_oom_handling))]\nmod spec_extend;\n\n/// A contiguous growable array type, written as `Vec<T>`, short for 'vector'.\n///\n/// # Examples\n///\n/// ```\n/// let mut vec = Vec::new();\n/// vec.push(1);\n/// vec.push(2);\n///\n/// assert_eq!(vec.len(), 2);\n/// assert_eq!(vec[0], 1);\n///\n/// assert_eq!(vec.pop(), Some(2));\n/// assert_eq!(vec.len(), 1);\n///\n/// vec[0] = 7;\n/// assert_eq!(vec[0], 7);\n///\n/// vec.extend([1, 2, 3]);\n///\n/// for x in &vec {\n///     println!(\"{x}\");\n/// }\n/// assert_eq!(vec, [7, 1, 2, 3]);\n/// ```\n///\n/// The [`vec!`] macro is provided for convenient initialization:\n///\n/// ```\n/// let mut vec1 = vec![1, 2, 3];\n/// vec1.push(4);\n/// let vec2 = Vec::from([1, 2, 3, 4]);\n/// assert_eq!(vec1, vec2);\n/// ```\n///\n/// It can also initialize each element of a `Vec<T>` with a given value.\n/// This may be more efficient than performing allocation and initialization\n/// in separate steps, especially when initializing a vector of zeros:\n///\n/// ```\n/// let vec = vec![0; 5];\n/// assert_eq!(vec, [0, 0, 0, 0, 0]);\n///\n/// // The following is equivalent, but potentially slower:\n/// let mut vec = Vec::with_capacity(5);\n/// vec.resize(5, 0);\n/// assert_eq!(vec, [0, 0, 0, 0, 0]);\n/// ```\n///\n/// For more information, see\n/// [Capacity and Reallocation](#capacity-and-reallocation).\n///\n/// Use a `Vec<T>` as an efficient stack:\n///\n/// ```\n/// let mut stack = Vec::new();\n///\n/// stack.push(1);\n/// stack.push(2);\n/// stack.push(3);\n///\n/// while let Some(top) = stack.pop() {\n///     // Prints 3, 2, 1\n///     println!(\"{top}\");\n/// }\n/// ```\n///\n/// # Indexing\n///\n/// The `Vec` type allows access to values by index, because it implements the\n/// [`Index`] trait. An example will be more explicit:\n///\n/// ```\n/// let v = vec![0, 2, 4, 6];\n/// println!(\"{}\", v[1]); // it will display '2'\n/// ```\n///\n/// However be careful: if you try to access an index which isn't in the `Vec`,\n/// your software will panic! You cannot do this:\n///\n/// ```should_panic\n/// let v = vec![0, 2, 4, 6];\n/// println!(\"{}\", v[6]); // it will panic!\n/// ```\n///\n/// Use [`get`] and [`get_mut`] if you want to check whether the index is in\n/// the `Vec`.\n///\n/// # Slicing\n///\n/// A `Vec` can be mutable. On the other hand, slices are read-only objects.\n/// To get a [slice][prim@slice], use [`&`]. Example:\n///\n/// ```\n/// fn read_slice(slice: &[usize]) {\n///     // ...\n/// }\n///\n/// let v = vec![0, 1];\n/// read_slice(&v);\n///\n/// // ... and that's all!\n/// // you can also do it like this:\n/// let u: &[usize] = &v;\n/// // or like this:\n/// let u: &[_] = &v;\n/// ```\n///\n/// In Rust, it's more common to pass slices as arguments rather than vectors\n/// when you just want to provide read access. The same goes for [`String`] and\n/// [`&str`].\n///\n/// # Capacity and reallocation\n///\n/// The capacity of a vector is the amount of space allocated for any future\n/// elements that will be added onto the vector. This is not to be confused with\n/// the *length* of a vector, which specifies the number of actual elements\n/// within the vector. If a vector's length exceeds its capacity, its capacity\n/// will automatically be increased, but its elements will have to be\n/// reallocated.\n///\n/// For example, a vector with capacity 10 and length 0 would be an empty vector\n/// with space for 10 more elements. Pushing 10 or fewer elements onto the\n/// vector will not change its capacity or cause reallocation to occur. However,\n/// if the vector's length is increased to 11, it will have to reallocate, which\n/// can be slow. For this reason, it is recommended to use [`Vec::with_capacity`]\n/// whenever possible to specify how big the vector is expected to get.\n///\n/// # Guarantees\n///\n/// Due to its incredibly fundamental nature, `Vec` makes a lot of guarantees\n/// about its design. This ensures that it's as low-overhead as possible in\n/// the general case, and can be correctly manipulated in primitive ways\n/// by unsafe code. Note that these guarantees refer to an unqualified `Vec<T>`.\n/// If additional type parameters are added (e.g., to support custom allocators),\n/// overriding their defaults may change the behavior.\n///\n/// Most fundamentally, `Vec` is and always will be a (pointer, capacity, length)\n/// triplet. No more, no less. The order of these fields is completely\n/// unspecified, and you should use the appropriate methods to modify these.\n/// The pointer will never be null, so this type is null-pointer-optimized.\n///\n/// However, the pointer might not actually point to allocated memory. In particular,\n/// if you construct a `Vec` with capacity 0 via [`Vec::new`], [`vec![]`][`vec!`],\n/// [`Vec::with_capacity(0)`][`Vec::with_capacity`], or by calling [`shrink_to_fit`]\n/// on an empty Vec, it will not allocate memory. Similarly, if you store zero-sized\n/// types inside a `Vec`, it will not allocate space for them. *Note that in this case\n/// the `Vec` might not report a [`capacity`] of 0*. `Vec` will allocate if and only\n/// if <code>[mem::size_of::\\<T>]\\() * [capacity]\\() > 0</code>. In general, `Vec`'s allocation\n/// details are very subtle --- if you intend to allocate memory using a `Vec`\n/// and use it for something else (either to pass to unsafe code, or to build your\n/// own memory-backed collection), be sure to deallocate this memory by using\n/// `from_raw_parts` to recover the `Vec` and then dropping it.\n///\n/// If a `Vec` *has* allocated memory, then the memory it points to is on the heap\n/// (as defined by the allocator Rust is configured to use by default), and its\n/// pointer points to [`len`] initialized, contiguous elements in order (what\n/// you would see if you coerced it to a slice), followed by <code>[capacity] - [len]</code>\n/// logically uninitialized, contiguous elements.\n///\n/// A vector containing the elements `'a'` and `'b'` with capacity 4 can be\n/// visualized as below. The top part is the `Vec` struct, it contains a\n/// pointer to the head of the allocation in the heap, length and capacity.\n/// The bottom part is the allocation on the heap, a contiguous memory block.\n///\n/// ```text\n///             ptr      len  capacity\n///        +--------+--------+--------+\n///        | 0x0123 |      2 |      4 |\n///        +--------+--------+--------+\n///             |\n///             v\n/// Heap   +--------+--------+--------+--------+\n///        |    'a' |    'b' | uninit | uninit |\n///        +--------+--------+--------+--------+\n/// ```\n///\n/// - **uninit** represents memory that is not initialized, see [`MaybeUninit`].\n/// - Note: the ABI is not stable and `Vec` makes no guarantees about its memory\n///   layout (including the order of fields).\n///\n/// `Vec` will never perform a \"small optimization\" where elements are actually\n/// stored on the stack for two reasons:\n///\n/// * It would make it more difficult for unsafe code to correctly manipulate\n///   a `Vec`. The contents of a `Vec` wouldn't have a stable address if it were\n///   only moved, and it would be more difficult to determine if a `Vec` had\n///   actually allocated memory.\n///\n/// * It would penalize the general case, incurring an additional branch\n///   on every access.\n///\n/// `Vec` will never automatically shrink itself, even if completely empty. This\n/// ensures no unnecessary allocations or deallocations occur. Emptying a `Vec`\n/// and then filling it back up to the same [`len`] should incur no calls to\n/// the allocator. If you wish to free up unused memory, use\n/// [`shrink_to_fit`] or [`shrink_to`].\n///\n/// [`push`] and [`insert`] will never (re)allocate if the reported capacity is\n/// sufficient. [`push`] and [`insert`] *will* (re)allocate if\n/// <code>[len] == [capacity]</code>. That is, the reported capacity is completely\n/// accurate, and can be relied on. It can even be used to manually free the memory\n/// allocated by a `Vec` if desired. Bulk insertion methods *may* reallocate, even\n/// when not necessary.\n///\n/// `Vec` does not guarantee any particular growth strategy when reallocating\n/// when full, nor when [`reserve`] is called. The current strategy is basic\n/// and it may prove desirable to use a non-constant growth factor. Whatever\n/// strategy is used will of course guarantee *O*(1) amortized [`push`].\n///\n/// `vec![x; n]`, `vec![a, b, c, d]`, and\n/// [`Vec::with_capacity(n)`][`Vec::with_capacity`], will all produce a `Vec`\n/// with at least the requested capacity. If <code>[len] == [capacity]</code>,\n/// (as is the case for the [`vec!`] macro), then a `Vec<T>` can be converted to\n/// and from a [`Box<[T]>`][owned slice] without reallocating or moving the elements.\n///\n/// `Vec` will not specifically overwrite any data that is removed from it,\n/// but also won't specifically preserve it. Its uninitialized memory is\n/// scratch space that it may use however it wants. It will generally just do\n/// whatever is most efficient or otherwise easy to implement. Do not rely on\n/// removed data to be erased for security purposes. Even if you drop a `Vec`, its\n/// buffer may simply be reused by another allocation. Even if you zero a `Vec`'s memory\n/// first, that might not actually happen because the optimizer does not consider\n/// this a side-effect that must be preserved. There is one case which we will\n/// not break, however: using `unsafe` code to write to the excess capacity,\n/// and then increasing the length to match, is always valid.\n///\n/// Currently, `Vec` does not guarantee the order in which elements are dropped.\n/// The order has changed in the past and may change again.\n///\n/// [`get`]: slice::get\n/// [`get_mut`]: slice::get_mut\n/// [`String`]: crate::string::String\n/// [`&str`]: type@str\n/// [`shrink_to_fit`]: Vec::shrink_to_fit\n/// [`shrink_to`]: Vec::shrink_to\n/// [capacity]: Vec::capacity\n/// [`capacity`]: Vec::capacity\n/// [mem::size_of::\\<T>]: core::mem::size_of\n/// [len]: Vec::len\n/// [`len`]: Vec::len\n/// [`push`]: Vec::push\n/// [`insert`]: Vec::insert\n/// [`reserve`]: Vec::reserve\n/// [`MaybeUninit`]: core::mem::MaybeUninit\n/// [owned slice]: Box\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\n#[cfg_attr(not(test), rustc_diagnostic_item = \"Vec\")]\n#[rustc_insignificant_dtor]\npub struct Vec<T, #[unstable(feature = \"allocator_api\", issue = \"32838\")] A: Allocator = Global> {\n    buf: RawVec<T, A>,\n    len: usize,\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// Inherent methods\n////////////////////////////////////////////////////////////////////////////////\n\nimpl<T> Vec<T> {\n    /// Constructs a new, empty `Vec<T>`.\n    ///\n    /// The vector will not allocate until elements are pushed onto it.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// # #![allow(unused_mut)]\n    /// let mut vec: Vec<i32> = Vec::new();\n    /// ```\n    #[inline]\n    #[rustc_const_stable(feature = \"const_vec_new\", since = \"1.39.0\")]\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    #[must_use]\n    pub const fn new() -> Self {\n        Vec { buf: RawVec::NEW, len: 0 }\n    }\n\n    /// Constructs a new, empty `Vec<T>` with at least the specified capacity.\n    ///\n    /// The vector will be able to hold at least `capacity` elements without\n    /// reallocating. This method is allowed to allocate for more elements than\n    /// `capacity`. If `capacity` is 0, the vector will not allocate.\n    ///\n    /// It is important to note that although the returned vector has the\n    /// minimum *capacity* specified, the vector will have a zero *length*. For\n    /// an explanation of the difference between length and capacity, see\n    /// *[Capacity and reallocation]*.\n    ///\n    /// If it is important to know the exact allocated capacity of a `Vec`,\n    /// always use the [`capacity`] method after construction.\n    ///\n    /// For `Vec<T>` where `T` is a zero-sized type, there will be no allocation\n    /// and the capacity will always be `usize::MAX`.\n    ///\n    /// [Capacity and reallocation]: #capacity-and-reallocation\n    /// [`capacity`]: Vec::capacity\n    ///\n    /// # Panics\n    ///\n    /// Panics if the new capacity exceeds `isize::MAX` _bytes_.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let mut vec = Vec::with_capacity(10);\n    ///\n    /// // The vector contains no items, even though it has capacity for more\n    /// assert_eq!(vec.len(), 0);\n    /// assert!(vec.capacity() >= 10);\n    ///\n    /// // These are all done without reallocating...\n    /// for i in 0..10 {\n    ///     vec.push(i);\n    /// }\n    /// assert_eq!(vec.len(), 10);\n    /// assert!(vec.capacity() >= 10);\n    ///\n    /// // ...but this may make the vector reallocate\n    /// vec.push(11);\n    /// assert_eq!(vec.len(), 11);\n    /// assert!(vec.capacity() >= 11);\n    ///\n    /// // A vector of a zero-sized type will always over-allocate, since no\n    /// // allocation is necessary\n    /// let vec_units = Vec::<()>::with_capacity(10);\n    /// assert_eq!(vec_units.capacity(), usize::MAX);\n    /// ```\n    #[cfg(not(no_global_oom_handling))]\n    #[inline]\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    #[must_use]\n    pub fn with_capacity(capacity: usize) -> Self {\n        Self::with_capacity_in(capacity, Global)\n    }\n\n    /// Constructs a new, empty `Vec<T>` with at least the specified capacity.\n    ///\n    /// The vector will be able to hold at least `capacity` elements without\n    /// reallocating. This method is allowed to allocate for more elements than\n    /// `capacity`. If `capacity` is 0, the vector will not allocate.\n    ///\n    /// # Errors\n    ///\n    /// Returns an error if the capacity exceeds `isize::MAX` _bytes_,\n    /// or if the allocator reports allocation failure.\n    #[inline]\n    #[unstable(feature = \"try_with_capacity\", issue = \"91913\")]\n    pub fn try_with_capacity(capacity: usize) -> Result<Self, TryReserveError> {\n        Self::try_with_capacity_in(capacity, Global)\n    }\n\n    /// Creates a `Vec<T>` directly from a pointer, a length, and a capacity.\n    ///\n    /// # Safety\n    ///\n    /// This is highly unsafe, due to the number of invariants that aren't\n    /// checked:\n    ///\n    /// * `ptr` must have been allocated using the global allocator, such as via\n    ///   the [`alloc::alloc`] function.\n    /// * `T` needs to have the same alignment as what `ptr` was allocated with.\n    ///   (`T` having a less strict alignment is not sufficient, the alignment really\n    ///   needs to be equal to satisfy the [`dealloc`] requirement that memory must be\n    ///   allocated and deallocated with the same layout.)\n    /// * The size of `T` times the `capacity` (ie. the allocated size in bytes) needs\n    ///   to be the same size as the pointer was allocated with. (Because similar to\n    ///   alignment, [`dealloc`] must be called with the same layout `size`.)\n    /// * `length` needs to be less than or equal to `capacity`.\n    /// * The first `length` values must be properly initialized values of type `T`.\n    /// * `capacity` needs to be the capacity that the pointer was allocated with.\n    /// * The allocated size in bytes must be no larger than `isize::MAX`.\n    ///   See the safety documentation of [`pointer::offset`].\n    ///\n    /// These requirements are always upheld by any `ptr` that has been allocated\n    /// via `Vec<T>`. Other allocation sources are allowed if the invariants are\n    /// upheld.\n    ///\n    /// Violating these may cause problems like corrupting the allocator's\n    /// internal data structures. For example it is normally **not** safe\n    /// to build a `Vec<u8>` from a pointer to a C `char` array with length\n    /// `size_t`, doing so is only safe if the array was initially allocated by\n    /// a `Vec` or `String`.\n    /// It's also not safe to build one from a `Vec<u16>` and its length, because\n    /// the allocator cares about the alignment, and these two types have different\n    /// alignments. The buffer was allocated with alignment 2 (for `u16`), but after\n    /// turning it into a `Vec<u8>` it'll be deallocated with alignment 1. To avoid\n    /// these issues, it is often preferable to do casting/transmuting using\n    /// [`slice::from_raw_parts`] instead.\n    ///\n    /// The ownership of `ptr` is effectively transferred to the\n    /// `Vec<T>` which may then deallocate, reallocate or change the\n    /// contents of memory pointed to by the pointer at will. Ensure\n    /// that nothing else uses the pointer after calling this\n    /// function.\n    ///\n    /// [`String`]: crate::string::String\n    /// [`alloc::alloc`]: crate::alloc::alloc\n    /// [`dealloc`]: crate::alloc::GlobalAlloc::dealloc\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::ptr;\n    /// use std::mem;\n    ///\n    /// let v = vec![1, 2, 3];\n    ///\n    // FIXME Update this when vec_into_raw_parts is stabilized\n    /// // Prevent running `v`'s destructor so we are in complete control\n    /// // of the allocation.\n    /// let mut v = mem::ManuallyDrop::new(v);\n    ///\n    /// // Pull out the various important pieces of information about `v`\n    /// let p = v.as_mut_ptr();\n    /// let len = v.len();\n    /// let cap = v.capacity();\n    ///\n    /// unsafe {\n    ///     // Overwrite memory with 4, 5, 6\n    ///     for i in 0..len {\n    ///         ptr::write(p.add(i), 4 + i);\n    ///     }\n    ///\n    ///     // Put everything back together into a Vec\n    ///     let rebuilt = Vec::from_raw_parts(p, len, cap);\n    ///     assert_eq!(rebuilt, [4, 5, 6]);\n    /// }\n    /// ```\n    ///\n    /// Using memory that was allocated elsewhere:\n    ///\n    /// ```rust\n    /// use std::alloc::{alloc, Layout};\n    ///\n    /// fn main() {\n    ///     let layout = Layout::array::<u32>(16).expect(\"overflow cannot happen\");\n    ///\n    ///     let vec = unsafe {\n    ///         let mem = alloc(layout).cast::<u32>();\n    ///         if mem.is_null() {\n    ///             return;\n    ///         }\n    ///\n    ///         mem.write(1_000_000);\n    ///\n    ///         Vec::from_raw_parts(mem, 1, 16)\n    ///     };\n    ///\n    ///     assert_eq!(vec, &[1_000_000]);\n    ///     assert_eq!(vec.capacity(), 16);\n    /// }\n    /// ```\n    #[inline]\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    pub unsafe fn from_raw_parts(ptr: *mut T, length: usize, capacity: usize) -> Self {\n        unsafe { Self::from_raw_parts_in(ptr, length, capacity, Global) }\n    }\n\n    /// A convenience method for hoisting the non-null precondition out of [`Vec::from_raw_parts`].\n    ///\n    /// # Safety\n    ///\n    /// See [`Vec::from_raw_parts`].\n    #[inline]\n    #[cfg(not(no_global_oom_handling))] // required by tests/run-make/alloc-no-oom-handling\n    pub(crate) unsafe fn from_nonnull(ptr: NonNull<T>, length: usize, capacity: usize) -> Self {\n        unsafe { Self::from_nonnull_in(ptr, length, capacity, Global) }\n    }\n}\n\nimpl<T, A: Allocator> Vec<T, A> {\n    /// Constructs a new, empty `Vec<T, A>`.\n    ///\n    /// The vector will not allocate until elements are pushed onto it.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// #![feature(allocator_api)]\n    ///\n    /// use std::alloc::System;\n    ///\n    /// # #[allow(unused_mut)]\n    /// let mut vec: Vec<i32, _> = Vec::new_in(System);\n    /// ```\n    #[inline]\n    #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n    pub const fn new_in(alloc: A) -> Self {\n        Vec { buf: RawVec::new_in(alloc), len: 0 }\n    }\n\n    /// Constructs a new, empty `Vec<T, A>` with at least the specified capacity\n    /// with the provided allocator.\n    ///\n    /// The vector will be able to hold at least `capacity` elements without\n    /// reallocating. This method is allowed to allocate for more elements than\n    /// `capacity`. If `capacity` is 0, the vector will not allocate.\n    ///\n    /// It is important to note that although the returned vector has the\n    /// minimum *capacity* specified, the vector will have a zero *length*. For\n    /// an explanation of the difference between length and capacity, see\n    /// *[Capacity and reallocation]*.\n    ///\n    /// If it is important to know the exact allocated capacity of a `Vec`,\n    /// always use the [`capacity`] method after construction.\n    ///\n    /// For `Vec<T, A>` where `T` is a zero-sized type, there will be no allocation\n    /// and the capacity will always be `usize::MAX`.\n    ///\n    /// [Capacity and reallocation]: #capacity-and-reallocation\n    /// [`capacity`]: Vec::capacity\n    ///\n    /// # Panics\n    ///\n    /// Panics if the new capacity exceeds `isize::MAX` _bytes_.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// #![feature(allocator_api)]\n    ///\n    /// use std::alloc::System;\n    ///\n    /// let mut vec = Vec::with_capacity_in(10, System);\n    ///\n    /// // The vector contains no items, even though it has capacity for more\n    /// assert_eq!(vec.len(), 0);\n    /// assert!(vec.capacity() >= 10);\n    ///\n    /// // These are all done without reallocating...\n    /// for i in 0..10 {\n    ///     vec.push(i);\n    /// }\n    /// assert_eq!(vec.len(), 10);\n    /// assert!(vec.capacity() >= 10);\n    ///\n    /// // ...but this may make the vector reallocate\n    /// vec.push(11);\n    /// assert_eq!(vec.len(), 11);\n    /// assert!(vec.capacity() >= 11);\n    ///\n    /// // A vector of a zero-sized type will always over-allocate, since no\n    /// // allocation is necessary\n    /// let vec_units = Vec::<(), System>::with_capacity_in(10, System);\n    /// assert_eq!(vec_units.capacity(), usize::MAX);\n    /// ```\n    #[cfg(not(no_global_oom_handling))]\n    #[inline]\n    #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n    pub fn with_capacity_in(capacity: usize, alloc: A) -> Self {\n        Vec { buf: RawVec::with_capacity_in(capacity, alloc), len: 0 }\n    }\n\n    /// Constructs a new, empty `Vec<T, A>` with at least the specified capacity\n    /// with the provided allocator.\n    ///\n    /// The vector will be able to hold at least `capacity` elements without\n    /// reallocating. This method is allowed to allocate for more elements than\n    /// `capacity`. If `capacity` is 0, the vector will not allocate.\n    ///\n    /// # Errors\n    ///\n    /// Returns an error if the capacity exceeds `isize::MAX` _bytes_,\n    /// or if the allocator reports allocation failure.\n    #[inline]\n    #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n    // #[unstable(feature = \"try_with_capacity\", issue = \"91913\")]\n    pub fn try_with_capacity_in(capacity: usize, alloc: A) -> Result<Self, TryReserveError> {\n        Ok(Vec { buf: RawVec::try_with_capacity_in(capacity, alloc)?, len: 0 })\n    }\n\n    /// Creates a `Vec<T, A>` directly from a pointer, a length, a capacity,\n    /// and an allocator.\n    ///\n    /// # Safety\n    ///\n    /// This is highly unsafe, due to the number of invariants that aren't\n    /// checked:\n    ///\n    /// * `ptr` must be [*currently allocated*] via the given allocator `alloc`.\n    /// * `T` needs to have the same alignment as what `ptr` was allocated with.\n    ///   (`T` having a less strict alignment is not sufficient, the alignment really\n    ///   needs to be equal to satisfy the [`dealloc`] requirement that memory must be\n    ///   allocated and deallocated with the same layout.)\n    /// * The size of `T` times the `capacity` (ie. the allocated size in bytes) needs\n    ///   to be the same size as the pointer was allocated with. (Because similar to\n    ///   alignment, [`dealloc`] must be called with the same layout `size`.)\n    /// * `length` needs to be less than or equal to `capacity`.\n    /// * The first `length` values must be properly initialized values of type `T`.\n    /// * `capacity` needs to [*fit*] the layout size that the pointer was allocated with.\n    /// * The allocated size in bytes must be no larger than `isize::MAX`.\n    ///   See the safety documentation of [`pointer::offset`].\n    ///\n    /// These requirements are always upheld by any `ptr` that has been allocated\n    /// via `Vec<T, A>`. Other allocation sources are allowed if the invariants are\n    /// upheld.\n    ///\n    /// Violating these may cause problems like corrupting the allocator's\n    /// internal data structures. For example it is **not** safe\n    /// to build a `Vec<u8>` from a pointer to a C `char` array with length `size_t`.\n    /// It's also not safe to build one from a `Vec<u16>` and its length, because\n    /// the allocator cares about the alignment, and these two types have different\n    /// alignments. The buffer was allocated with alignment 2 (for `u16`), but after\n    /// turning it into a `Vec<u8>` it'll be deallocated with alignment 1.\n    ///\n    /// The ownership of `ptr` is effectively transferred to the\n    /// `Vec<T>` which may then deallocate, reallocate or change the\n    /// contents of memory pointed to by the pointer at will. Ensure\n    /// that nothing else uses the pointer after calling this\n    /// function.\n    ///\n    /// [`String`]: crate::string::String\n    /// [`dealloc`]: crate::alloc::GlobalAlloc::dealloc\n    /// [*currently allocated*]: crate::alloc::Allocator#currently-allocated-memory\n    /// [*fit*]: crate::alloc::Allocator#memory-fitting\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// #![feature(allocator_api)]\n    ///\n    /// use std::alloc::System;\n    ///\n    /// use std::ptr;\n    /// use std::mem;\n    ///\n    /// let mut v = Vec::with_capacity_in(3, System);\n    /// v.push(1);\n    /// v.push(2);\n    /// v.push(3);\n    ///\n    // FIXME Update this when vec_into_raw_parts is stabilized\n    /// // Prevent running `v`'s destructor so we are in complete control\n    /// // of the allocation.\n    /// let mut v = mem::ManuallyDrop::new(v);\n    ///\n    /// // Pull out the various important pieces of information about `v`\n    /// let p = v.as_mut_ptr();\n    /// let len = v.len();\n    /// let cap = v.capacity();\n    /// let alloc = v.allocator();\n    ///\n    /// unsafe {\n    ///     // Overwrite memory with 4, 5, 6\n    ///     for i in 0..len {\n    ///         ptr::write(p.add(i), 4 + i);\n    ///     }\n    ///\n    ///     // Put everything back together into a Vec\n    ///     let rebuilt = Vec::from_raw_parts_in(p, len, cap, alloc.clone());\n    ///     assert_eq!(rebuilt, [4, 5, 6]);\n    /// }\n    /// ```\n    ///\n    /// Using memory that was allocated elsewhere:\n    ///\n    /// ```rust\n    /// #![feature(allocator_api)]\n    ///\n    /// use std::alloc::{AllocError, Allocator, Global, Layout};\n    ///\n    /// fn main() {\n    ///     let layout = Layout::array::<u32>(16).expect(\"overflow cannot happen\");\n    ///\n    ///     let vec = unsafe {\n    ///         let mem = match Global.allocate(layout) {\n    ///             Ok(mem) => mem.cast::<u32>().as_ptr(),\n    ///             Err(AllocError) => return,\n    ///         };\n    ///\n    ///         mem.write(1_000_000);\n    ///\n    ///         Vec::from_raw_parts_in(mem, 1, 16, Global)\n    ///     };\n    ///\n    ///     assert_eq!(vec, &[1_000_000]);\n    ///     assert_eq!(vec.capacity(), 16);\n    /// }\n    /// ```\n    #[inline]\n    #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n    pub unsafe fn from_raw_parts_in(ptr: *mut T, length: usize, capacity: usize, alloc: A) -> Self {\n        unsafe { Vec { buf: RawVec::from_raw_parts_in(ptr, capacity, alloc), len: length } }\n    }\n\n    /// A convenience method for hoisting the non-null precondition out of [`Vec::from_raw_parts_in`].\n    ///\n    /// # Safety\n    ///\n    /// See [`Vec::from_raw_parts_in`].\n    #[inline]\n    #[cfg(not(no_global_oom_handling))] // required by tests/run-make/alloc-no-oom-handling\n    pub(crate) unsafe fn from_nonnull_in(\n        ptr: NonNull<T>,\n        length: usize,\n        capacity: usize,\n        alloc: A,\n    ) -> Self {\n        unsafe { Vec { buf: RawVec::from_nonnull_in(ptr, capacity, alloc), len: length } }\n    }\n\n    /// Decomposes a `Vec<T>` into its raw components: `(pointer, length, capacity)`.\n    ///\n    /// Returns the raw pointer to the underlying data, the length of\n    /// the vector (in elements), and the allocated capacity of the\n    /// data (in elements). These are the same arguments in the same\n    /// order as the arguments to [`from_raw_parts`].\n    ///\n    /// After calling this function, the caller is responsible for the\n    /// memory previously managed by the `Vec`. The only way to do\n    /// this is to convert the raw pointer, length, and capacity back\n    /// into a `Vec` with the [`from_raw_parts`] function, allowing\n    /// the destructor to perform the cleanup.\n    ///\n    /// [`from_raw_parts`]: Vec::from_raw_parts\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// #![feature(vec_into_raw_parts)]\n    /// let v: Vec<i32> = vec![-1, 0, 1];\n    ///\n    /// let (ptr, len, cap) = v.into_raw_parts();\n    ///\n    /// let rebuilt = unsafe {\n    ///     // We can now make changes to the components, such as\n    ///     // transmuting the raw pointer to a compatible type.\n    ///     let ptr = ptr as *mut u32;\n    ///\n    ///     Vec::from_raw_parts(ptr, len, cap)\n    /// };\n    /// assert_eq!(rebuilt, [4294967295, 0, 1]);\n    /// ```\n    #[unstable(feature = \"vec_into_raw_parts\", reason = \"new API\", issue = \"65816\")]\n    pub fn into_raw_parts(self) -> (*mut T, usize, usize) {\n        let mut me = ManuallyDrop::new(self);\n        (me.as_mut_ptr(), me.len(), me.capacity())\n    }\n\n    /// Decomposes a `Vec<T>` into its raw components: `(pointer, length, capacity, allocator)`.\n    ///\n    /// Returns the raw pointer to the underlying data, the length of the vector (in elements),\n    /// the allocated capacity of the data (in elements), and the allocator. These are the same\n    /// arguments in the same order as the arguments to [`from_raw_parts_in`].\n    ///\n    /// After calling this function, the caller is responsible for the\n    /// memory previously managed by the `Vec`. The only way to do\n    /// this is to convert the raw pointer, length, and capacity back\n    /// into a `Vec` with the [`from_raw_parts_in`] function, allowing\n    /// the destructor to perform the cleanup.\n    ///\n    /// [`from_raw_parts_in`]: Vec::from_raw_parts_in\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// #![feature(allocator_api, vec_into_raw_parts)]\n    ///\n    /// use std::alloc::System;\n    ///\n    /// let mut v: Vec<i32, System> = Vec::new_in(System);\n    /// v.push(-1);\n    /// v.push(0);\n    /// v.push(1);\n    ///\n    /// let (ptr, len, cap, alloc) = v.into_raw_parts_with_alloc();\n    ///\n    /// let rebuilt = unsafe {\n    ///     // We can now make changes to the components, such as\n    ///     // transmuting the raw pointer to a compatible type.\n    ///     let ptr = ptr as *mut u32;\n    ///\n    ///     Vec::from_raw_parts_in(ptr, len, cap, alloc)\n    /// };\n    /// assert_eq!(rebuilt, [4294967295, 0, 1]);\n    /// ```\n    #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n    // #[unstable(feature = \"vec_into_raw_parts\", reason = \"new API\", issue = \"65816\")]\n    pub fn into_raw_parts_with_alloc(self) -> (*mut T, usize, usize, A) {\n        let mut me = ManuallyDrop::new(self);\n        let len = me.len();\n        let capacity = me.capacity();\n        let ptr = me.as_mut_ptr();\n        let alloc = unsafe { ptr::read(me.allocator()) };\n        (ptr, len, capacity, alloc)\n    }\n\n    /// Returns the total number of elements the vector can hold without\n    /// reallocating.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let mut vec: Vec<i32> = Vec::with_capacity(10);\n    /// vec.push(42);\n    /// assert!(vec.capacity() >= 10);\n    /// ```\n    #[inline]\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    pub fn capacity(&self) -> usize {\n        self.buf.capacity()\n    }\n\n    /// Reserves capacity for at least `additional` more elements to be inserted\n    /// in the given `Vec<T>`. The collection may reserve more space to\n    /// speculatively avoid frequent reallocations. After calling `reserve`,\n    /// capacity will be greater than or equal to `self.len() + additional`.\n    /// Does nothing if capacity is already sufficient.\n    ///\n    /// # Panics\n    ///\n    /// Panics if the new capacity exceeds `isize::MAX` _bytes_.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let mut vec = vec![1];\n    /// vec.reserve(10);\n    /// assert!(vec.capacity() >= 11);\n    /// ```\n    #[cfg(not(no_global_oom_handling))]\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    pub fn reserve(&mut self, additional: usize) {\n        self.buf.reserve(self.len, additional);\n    }\n\n    /// Reserves the minimum capacity for at least `additional` more elements to\n    /// be inserted in the given `Vec<T>`. Unlike [`reserve`], this will not\n    /// deliberately over-allocate to speculatively avoid frequent allocations.\n    /// After calling `reserve_exact`, capacity will be greater than or equal to\n    /// `self.len() + additional`. Does nothing if the capacity is already\n    /// sufficient.\n    ///\n    /// Note that the allocator may give the collection more space than it\n    /// requests. Therefore, capacity can not be relied upon to be precisely\n    /// minimal. Prefer [`reserve`] if future insertions are expected.\n    ///\n    /// [`reserve`]: Vec::reserve\n    ///\n    /// # Panics\n    ///\n    /// Panics if the new capacity exceeds `isize::MAX` _bytes_.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let mut vec = vec![1];\n    /// vec.reserve_exact(10);\n    /// assert!(vec.capacity() >= 11);\n    /// ```\n    #[cfg(not(no_global_oom_handling))]\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    pub fn reserve_exact(&mut self, additional: usize) {\n        self.buf.reserve_exact(self.len, additional);\n    }\n\n    /// Tries to reserve capacity for at least `additional` more elements to be inserted\n    /// in the given `Vec<T>`. The collection may reserve more space to speculatively avoid\n    /// frequent reallocations. After calling `try_reserve`, capacity will be\n    /// greater than or equal to `self.len() + additional` if it returns\n    /// `Ok(())`. Does nothing if capacity is already sufficient. This method\n    /// preserves the contents even if an error occurs.\n    ///\n    /// # Errors\n    ///\n    /// If the capacity overflows, or the allocator reports a failure, then an error\n    /// is returned.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::collections::TryReserveError;\n    ///\n    /// fn process_data(data: &[u32]) -> Result<Vec<u32>, TryReserveError> {\n    ///     let mut output = Vec::new();\n    ///\n    ///     // Pre-reserve the memory, exiting if we can't\n    ///     output.try_reserve(data.len())?;\n    ///\n    ///     // Now we know this can't OOM in the middle of our complex work\n    ///     output.extend(data.iter().map(|&val| {\n    ///         val * 2 + 5 // very complicated\n    ///     }));\n    ///\n    ///     Ok(output)\n    /// }\n    /// # process_data(&[1, 2, 3]).expect(\"why is the test harness OOMing on 12 bytes?\");\n    /// ```\n    #[stable(feature = \"try_reserve\", since = \"1.57.0\")]\n    pub fn try_reserve(&mut self, additional: usize) -> Result<(), TryReserveError> {\n        self.buf.try_reserve(self.len, additional)\n    }\n\n    /// Tries to reserve the minimum capacity for at least `additional`\n    /// elements to be inserted in the given `Vec<T>`. Unlike [`try_reserve`],\n    /// this will not deliberately over-allocate to speculatively avoid frequent\n    /// allocations. After calling `try_reserve_exact`, capacity will be greater\n    /// than or equal to `self.len() + additional` if it returns `Ok(())`.\n    /// Does nothing if the capacity is already sufficient.\n    ///\n    /// Note that the allocator may give the collection more space than it\n    /// requests. Therefore, capacity can not be relied upon to be precisely\n    /// minimal. Prefer [`try_reserve`] if future insertions are expected.\n    ///\n    /// [`try_reserve`]: Vec::try_reserve\n    ///\n    /// # Errors\n    ///\n    /// If the capacity overflows, or the allocator reports a failure, then an error\n    /// is returned.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::collections::TryReserveError;\n    ///\n    /// fn process_data(data: &[u32]) -> Result<Vec<u32>, TryReserveError> {\n    ///     let mut output = Vec::new();\n    ///\n    ///     // Pre-reserve the memory, exiting if we can't\n    ///     output.try_reserve_exact(data.len())?;\n    ///\n    ///     // Now we know this can't OOM in the middle of our complex work\n    ///     output.extend(data.iter().map(|&val| {\n    ///         val * 2 + 5 // very complicated\n    ///     }));\n    ///\n    ///     Ok(output)\n    /// }\n    /// # process_data(&[1, 2, 3]).expect(\"why is the test harness OOMing on 12 bytes?\");\n    /// ```\n    #[stable(feature = \"try_reserve\", since = \"1.57.0\")]\n    pub fn try_reserve_exact(&mut self, additional: usize) -> Result<(), TryReserveError> {\n        self.buf.try_reserve_exact(self.len, additional)\n    }\n\n    /// Shrinks the capacity of the vector as much as possible.\n    ///\n    /// The behavior of this method depends on the allocator, which may either shrink the vector\n    /// in-place or reallocate. The resulting vector might still have some excess capacity, just as\n    /// is the case for [`with_capacity`]. See [`Allocator::shrink`] for more details.\n    ///\n    /// [`with_capacity`]: Vec::with_capacity\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let mut vec = Vec::with_capacity(10);\n    /// vec.extend([1, 2, 3]);\n    /// assert!(vec.capacity() >= 10);\n    /// vec.shrink_to_fit();\n    /// assert!(vec.capacity() >= 3);\n    /// ```\n    #[cfg(not(no_global_oom_handling))]\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    pub fn shrink_to_fit(&mut self) {\n        // The capacity is never less than the length, and there's nothing to do when\n        // they are equal, so we can avoid the panic case in `RawVec::shrink_to_fit`\n        // by only calling it with a greater capacity.\n        if self.capacity() > self.len {\n            self.buf.shrink_to_fit(self.len);\n        }\n    }\n\n    /// Shrinks the capacity of the vector with a lower bound.\n    ///\n    /// The capacity will remain at least as large as both the length\n    /// and the supplied value.\n    ///\n    /// If the current capacity is less than the lower limit, this is a no-op.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let mut vec = Vec::with_capacity(10);\n    /// vec.extend([1, 2, 3]);\n    /// assert!(vec.capacity() >= 10);\n    /// vec.shrink_to(4);\n    /// assert!(vec.capacity() >= 4);\n    /// vec.shrink_to(0);\n    /// assert!(vec.capacity() >= 3);\n    /// ```\n    #[cfg(not(no_global_oom_handling))]\n    #[stable(feature = \"shrink_to\", since = \"1.56.0\")]\n    pub fn shrink_to(&mut self, min_capacity: usize) {\n        if self.capacity() > min_capacity {\n            self.buf.shrink_to_fit(cmp::max(self.len, min_capacity));\n        }\n    }\n\n    /// Converts the vector into [`Box<[T]>`][owned slice].\n    ///\n    /// Before doing the conversion, this method discards excess capacity like [`shrink_to_fit`].\n    ///\n    /// [owned slice]: Box\n    /// [`shrink_to_fit`]: Vec::shrink_to_fit\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let v = vec![1, 2, 3];\n    ///\n    /// let slice = v.into_boxed_slice();\n    /// ```\n    ///\n    /// Any excess capacity is removed:\n    ///\n    /// ```\n    /// let mut vec = Vec::with_capacity(10);\n    /// vec.extend([1, 2, 3]);\n    ///\n    /// assert!(vec.capacity() >= 10);\n    /// let slice = vec.into_boxed_slice();\n    /// assert_eq!(slice.into_vec().capacity(), 3);\n    /// ```\n    #[cfg(not(no_global_oom_handling))]\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    pub fn into_boxed_slice(mut self) -> Box<[T], A> {\n        unsafe {\n            self.shrink_to_fit();\n            let me = ManuallyDrop::new(self);\n            let buf = ptr::read(&me.buf);\n            let len = me.len();\n            buf.into_box(len).assume_init()\n        }\n    }\n\n    /// Shortens the vector, keeping the first `len` elements and dropping\n    /// the rest.\n    ///\n    /// If `len` is greater or equal to the vector's current length, this has\n    /// no effect.\n    ///\n    /// The [`drain`] method can emulate `truncate`, but causes the excess\n    /// elements to be returned instead of dropped.\n    ///\n    /// Note that this method has no effect on the allocated capacity\n    /// of the vector.\n    ///\n    /// # Examples\n    ///\n    /// Truncating a five element vector to two elements:\n    ///\n    /// ```\n    /// let mut vec = vec![1, 2, 3, 4, 5];\n    /// vec.truncate(2);\n    /// assert_eq!(vec, [1, 2]);\n    /// ```\n    ///\n    /// No truncation occurs when `len` is greater than the vector's current\n    /// length:\n    ///\n    /// ```\n    /// let mut vec = vec![1, 2, 3];\n    /// vec.truncate(8);\n    /// assert_eq!(vec, [1, 2, 3]);\n    /// ```\n    ///\n    /// Truncating when `len == 0` is equivalent to calling the [`clear`]\n    /// method.\n    ///\n    /// ```\n    /// let mut vec = vec![1, 2, 3];\n    /// vec.truncate(0);\n    /// assert_eq!(vec, []);\n    /// ```\n    ///\n    /// [`clear`]: Vec::clear\n    /// [`drain`]: Vec::drain\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    pub fn truncate(&mut self, len: usize) {\n        // This is safe because:\n        //\n        // * the slice passed to `drop_in_place` is valid; the `len > self.len`\n        //   case avoids creating an invalid slice, and\n        // * the `len` of the vector is shrunk before calling `drop_in_place`,\n        //   such that no value will be dropped twice in case `drop_in_place`\n        //   were to panic once (if it panics twice, the program aborts).\n        unsafe {\n            // Note: It's intentional that this is `>` and not `>=`.\n            //       Changing it to `>=` has negative performance\n            //       implications in some cases. See #78884 for more.\n            if len > self.len {\n                return;\n            }\n            let remaining_len = self.len - len;\n            let s = ptr::slice_from_raw_parts_mut(self.as_mut_ptr().add(len), remaining_len);\n            self.len = len;\n            ptr::drop_in_place(s);\n        }\n    }\n\n    /// Extracts a slice containing the entire vector.\n    ///\n    /// Equivalent to `&s[..]`.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::io::{self, Write};\n    /// let buffer = vec![1, 2, 3, 5, 8];\n    /// io::sink().write(buffer.as_slice()).unwrap();\n    /// ```\n    #[inline]\n    #[stable(feature = \"vec_as_slice\", since = \"1.7.0\")]\n    pub fn as_slice(&self) -> &[T] {\n        self\n    }\n\n    /// Extracts a mutable slice of the entire vector.\n    ///\n    /// Equivalent to `&mut s[..]`.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::io::{self, Read};\n    /// let mut buffer = vec![0; 3];\n    /// io::repeat(0b101).read_exact(buffer.as_mut_slice()).unwrap();\n    /// ```\n    #[inline]\n    #[stable(feature = \"vec_as_slice\", since = \"1.7.0\")]\n    pub fn as_mut_slice(&mut self) -> &mut [T] {\n        self\n    }\n\n    /// Returns a raw pointer to the vector's buffer, or a dangling raw pointer\n    /// valid for zero sized reads if the vector didn't allocate.\n    ///\n    /// The caller must ensure that the vector outlives the pointer this\n    /// function returns, or else it will end up pointing to garbage.\n    /// Modifying the vector may cause its buffer to be reallocated,\n    /// which would also make any pointers to it invalid.\n    ///\n    /// The caller must also ensure that the memory the pointer (non-transitively) points to\n    /// is never written to (except inside an `UnsafeCell`) using this pointer or any pointer\n    /// derived from it. If you need to mutate the contents of the slice, use [`as_mut_ptr`].\n    ///\n    /// This method guarantees that for the purpose of the aliasing model, this method\n    /// does not materialize a reference to the underlying slice, and thus the returned pointer\n    /// will remain valid when mixed with other calls to [`as_ptr`] and [`as_mut_ptr`].\n    /// Note that calling other methods that materialize mutable references to the slice,\n    /// or mutable references to specific elements you are planning on accessing through this pointer,\n    /// as well as writing to those elements, may still invalidate this pointer.\n    /// See the second example below for how this guarantee can be used.\n    ///\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let x = vec![1, 2, 4];\n    /// let x_ptr = x.as_ptr();\n    ///\n    /// unsafe {\n    ///     for i in 0..x.len() {\n    ///         assert_eq!(*x_ptr.add(i), 1 << i);\n    ///     }\n    /// }\n    /// ```\n    ///\n    /// Due to the aliasing guarantee, the following code is legal:\n    ///\n    /// ```rust\n    /// unsafe {\n    ///     let mut v = vec![0, 1, 2];\n    ///     let ptr1 = v.as_ptr();\n    ///     let _ = ptr1.read();\n    ///     let ptr2 = v.as_mut_ptr().offset(2);\n    ///     ptr2.write(2);\n    ///     // Notably, the write to `ptr2` did *not* invalidate `ptr1`\n    ///     // because it mutated a different element:\n    ///     let _ = ptr1.read();\n    /// }\n    /// ```\n    ///\n    /// [`as_mut_ptr`]: Vec::as_mut_ptr\n    /// [`as_ptr`]: Vec::as_ptr\n    #[stable(feature = \"vec_as_ptr\", since = \"1.37.0\")]\n    #[rustc_never_returns_null_ptr]\n    #[inline]\n    pub fn as_ptr(&self) -> *const T {\n        // We shadow the slice method of the same name to avoid going through\n        // `deref`, which creates an intermediate reference.\n        self.buf.ptr()\n    }\n\n    /// Returns an unsafe mutable pointer to the vector's buffer, or a dangling\n    /// raw pointer valid for zero sized reads if the vector didn't allocate.\n    ///\n    /// The caller must ensure that the vector outlives the pointer this\n    /// function returns, or else it will end up pointing to garbage.\n    /// Modifying the vector may cause its buffer to be reallocated,\n    /// which would also make any pointers to it invalid.\n    ///\n    /// This method guarantees that for the purpose of the aliasing model, this method\n    /// does not materialize a reference to the underlying slice, and thus the returned pointer\n    /// will remain valid when mixed with other calls to [`as_ptr`] and [`as_mut_ptr`].\n    /// Note that calling other methods that materialize references to the slice,\n    /// or references to specific elements you are planning on accessing through this pointer,\n    /// may still invalidate this pointer.\n    /// See the second example below for how this guarantee can be used.\n    ///\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// // Allocate vector big enough for 4 elements.\n    /// let size = 4;\n    /// let mut x: Vec<i32> = Vec::with_capacity(size);\n    /// let x_ptr = x.as_mut_ptr();\n    ///\n    /// // Initialize elements via raw pointer writes, then set length.\n    /// unsafe {\n    ///     for i in 0..size {\n    ///         *x_ptr.add(i) = i as i32;\n    ///     }\n    ///     x.set_len(size);\n    /// }\n    /// assert_eq!(&*x, &[0, 1, 2, 3]);\n    /// ```\n    ///\n    /// Due to the aliasing guarantee, the following code is legal:\n    ///\n    /// ```rust\n    /// unsafe {\n    ///     let mut v = vec![0];\n    ///     let ptr1 = v.as_mut_ptr();\n    ///     ptr1.write(1);\n    ///     let ptr2 = v.as_mut_ptr();\n    ///     ptr2.write(2);\n    ///     // Notably, the write to `ptr2` did *not* invalidate `ptr1`:\n    ///     ptr1.write(3);\n    /// }\n    /// ```\n    ///\n    /// [`as_mut_ptr`]: Vec::as_mut_ptr\n    /// [`as_ptr`]: Vec::as_ptr\n    #[stable(feature = \"vec_as_ptr\", since = \"1.37.0\")]\n    #[rustc_never_returns_null_ptr]\n    #[inline]\n    pub fn as_mut_ptr(&mut self) -> *mut T {\n        // We shadow the slice method of the same name to avoid going through\n        // `deref_mut`, which creates an intermediate reference.\n        self.buf.ptr()\n    }\n\n    /// Returns a reference to the underlying allocator.\n    #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n    #[inline]\n    pub fn allocator(&self) -> &A {\n        self.buf.allocator()\n    }\n\n    /// Forces the length of the vector to `new_len`.\n    ///\n    /// This is a low-level operation that maintains none of the normal\n    /// invariants of the type. Normally changing the length of a vector\n    /// is done using one of the safe operations instead, such as\n    /// [`truncate`], [`resize`], [`extend`], or [`clear`].\n    ///\n    /// [`truncate`]: Vec::truncate\n    /// [`resize`]: Vec::resize\n    /// [`extend`]: Extend::extend\n    /// [`clear`]: Vec::clear\n    ///\n    /// # Safety\n    ///\n    /// - `new_len` must be less than or equal to [`capacity()`].\n    /// - The elements at `old_len..new_len` must be initialized.\n    ///\n    /// [`capacity()`]: Vec::capacity\n    ///\n    /// # Examples\n    ///\n    /// This method can be useful for situations in which the vector\n    /// is serving as a buffer for other code, particularly over FFI:\n    ///\n    /// ```no_run\n    /// # #![allow(dead_code)]\n    /// # // This is just a minimal skeleton for the doc example;\n    /// # // don't use this as a starting point for a real library.\n    /// # pub struct StreamWrapper { strm: *mut std::ffi::c_void }\n    /// # const Z_OK: i32 = 0;\n    /// # extern \"C\" {\n    /// #     fn deflateGetDictionary(\n    /// #         strm: *mut std::ffi::c_void,\n    /// #         dictionary: *mut u8,\n    /// #         dictLength: *mut usize,\n    /// #     ) -> i32;\n    /// # }\n    /// # impl StreamWrapper {\n    /// pub fn get_dictionary(&self) -> Option<Vec<u8>> {\n    ///     // Per the FFI method's docs, \"32768 bytes is always enough\".\n    ///     let mut dict = Vec::with_capacity(32_768);\n    ///     let mut dict_length = 0;\n    ///     // SAFETY: When `deflateGetDictionary` returns `Z_OK`, it holds that:\n    ///     // 1. `dict_length` elements were initialized.\n    ///     // 2. `dict_length` <= the capacity (32_768)\n    ///     // which makes `set_len` safe to call.\n    ///     unsafe {\n    ///         // Make the FFI call...\n    ///         let r = deflateGetDictionary(self.strm, dict.as_mut_ptr(), &mut dict_length);\n    ///         if r == Z_OK {\n    ///             // ...and update the length to what was initialized.\n    ///             dict.set_len(dict_length);\n    ///             Some(dict)\n    ///         } else {\n    ///             None\n    ///         }\n    ///     }\n    /// }\n    /// # }\n    /// ```\n    ///\n    /// While the following example is sound, there is a memory leak since\n    /// the inner vectors were not freed prior to the `set_len` call:\n    ///\n    /// ```\n    /// let mut vec = vec![vec![1, 0, 0],\n    ///                    vec![0, 1, 0],\n    ///                    vec![0, 0, 1]];\n    /// // SAFETY:\n    /// // 1. `old_len..0` is empty so no elements need to be initialized.\n    /// // 2. `0 <= capacity` always holds whatever `capacity` is.\n    /// unsafe {\n    ///     vec.set_len(0);\n    /// }\n    /// ```\n    ///\n    /// Normally, here, one would use [`clear`] instead to correctly drop\n    /// the contents and thus not leak memory.\n    #[inline]\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    pub unsafe fn set_len(&mut self, new_len: usize) {\n        debug_assert!(new_len <= self.capacity());\n\n        self.len = new_len;\n    }\n\n    /// Removes an element from the vector and returns it.\n    ///\n    /// The removed element is replaced by the last element of the vector.\n    ///\n    /// This does not preserve ordering of the remaining elements, but is *O*(1).\n    /// If you need to preserve the element order, use [`remove`] instead.\n    ///\n    /// [`remove`]: Vec::remove\n    ///\n    /// # Panics\n    ///\n    /// Panics if `index` is out of bounds.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let mut v = vec![\"foo\", \"bar\", \"baz\", \"qux\"];\n    ///\n    /// assert_eq!(v.swap_remove(1), \"bar\");\n    /// assert_eq!(v, [\"foo\", \"qux\", \"baz\"]);\n    ///\n    /// assert_eq!(v.swap_remove(0), \"foo\");\n    /// assert_eq!(v, [\"baz\", \"qux\"]);\n    /// ```\n    #[inline]\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    pub fn swap_remove(&mut self, index: usize) -> T {\n        #[cold]\n        #[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never))]\n        #[track_caller]\n        fn assert_failed(index: usize, len: usize) -> ! {\n            panic!(\"swap_remove index (is {index}) should be < len (is {len})\");\n        }\n\n        let len = self.len();\n        if index >= len {\n            assert_failed(index, len);\n        }\n        unsafe {\n            // We replace self[index] with the last element. Note that if the\n            // bounds check above succeeds there must be a last element (which\n            // can be self[index] itself).\n            let value = ptr::read(self.as_ptr().add(index));\n            let base_ptr = self.as_mut_ptr();\n            ptr::copy(base_ptr.add(len - 1), base_ptr.add(index), 1);\n            self.set_len(len - 1);\n            value\n        }\n    }\n\n    /// Inserts an element at position `index` within the vector, shifting all\n    /// elements after it to the right.\n    ///\n    /// # Panics\n    ///\n    /// Panics if `index > len`.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let mut vec = vec![1, 2, 3];\n    /// vec.insert(1, 4);\n    /// assert_eq!(vec, [1, 4, 2, 3]);\n    /// vec.insert(4, 5);\n    /// assert_eq!(vec, [1, 4, 2, 3, 5]);\n    /// ```\n    ///\n    /// # Time complexity\n    ///\n    /// Takes *O*([`Vec::len`]) time. All items after the insertion index must be\n    /// shifted to the right. In the worst case, all elements are shifted when\n    /// the insertion index is 0.\n    #[cfg(not(no_global_oom_handling))]\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    pub fn insert(&mut self, index: usize, element: T) {\n        #[cold]\n        #[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never))]\n        #[track_caller]\n        fn assert_failed(index: usize, len: usize) -> ! {\n            panic!(\"insertion index (is {index}) should be <= len (is {len})\");\n        }\n\n        let len = self.len();\n        if index > len {\n            assert_failed(index, len);\n        }\n\n        // space for the new element\n        if len == self.buf.capacity() {\n            self.buf.grow_one();\n        }\n\n        unsafe {\n            // infallible\n            // The spot to put the new value\n            {\n                let p = self.as_mut_ptr().add(index);\n                if index < len {\n                    // Shift everything over to make space. (Duplicating the\n                    // `index`th element into two consecutive places.)\n                    ptr::copy(p, p.add(1), len - index);\n                }\n                // Write it in, overwriting the first copy of the `index`th\n                // element.\n                ptr::write(p, element);\n            }\n            self.set_len(len + 1);\n        }\n    }\n\n    /// Removes and returns the element at position `index` within the vector,\n    /// shifting all elements after it to the left.\n    ///\n    /// Note: Because this shifts over the remaining elements, it has a\n    /// worst-case performance of *O*(*n*). If you don't need the order of elements\n    /// to be preserved, use [`swap_remove`] instead. If you'd like to remove\n    /// elements from the beginning of the `Vec`, consider using\n    /// [`VecDeque::pop_front`] instead.\n    ///\n    /// [`swap_remove`]: Vec::swap_remove\n    /// [`VecDeque::pop_front`]: crate::collections::VecDeque::pop_front\n    ///\n    /// # Panics\n    ///\n    /// Panics if `index` is out of bounds.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let mut v = vec![1, 2, 3];\n    /// assert_eq!(v.remove(1), 2);\n    /// assert_eq!(v, [1, 3]);\n    /// ```\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    #[track_caller]\n    #[rustc_confusables(\"delete\", \"take\")]\n    pub fn remove(&mut self, index: usize) -> T {\n        #[cold]\n        #[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never))]\n        #[track_caller]\n        fn assert_failed(index: usize, len: usize) -> ! {\n            panic!(\"removal index (is {index}) should be < len (is {len})\");\n        }\n\n        let len = self.len();\n        if index >= len {\n            assert_failed(index, len);\n        }\n        unsafe {\n            // infallible\n            let ret;\n            {\n                // the place we are taking from.\n                let ptr = self.as_mut_ptr().add(index);\n                // copy it out, unsafely having a copy of the value on\n                // the stack and in the vector at the same time.\n                ret = ptr::read(ptr);\n\n                // Shift everything down to fill in that spot.\n                ptr::copy(ptr.add(1), ptr, len - index - 1);\n            }\n            self.set_len(len - 1);\n            ret\n        }\n    }\n\n    /// Retains only the elements specified by the predicate.\n    ///\n    /// In other words, remove all elements `e` for which `f(&e)` returns `false`.\n    /// This method operates in place, visiting each element exactly once in the\n    /// original order, and preserves the order of the retained elements.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let mut vec = vec![1, 2, 3, 4];\n    /// vec.retain(|&x| x % 2 == 0);\n    /// assert_eq!(vec, [2, 4]);\n    /// ```\n    ///\n    /// Because the elements are visited exactly once in the original order,\n    /// external state may be used to decide which elements to keep.\n    ///\n    /// ```\n    /// let mut vec = vec![1, 2, 3, 4, 5];\n    /// let keep = [false, true, true, false, true];\n    /// let mut iter = keep.iter();\n    /// vec.retain(|_| *iter.next().unwrap());\n    /// assert_eq!(vec, [2, 3, 5]);\n    /// ```\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    pub fn retain<F>(&mut self, mut f: F)\n    where\n        F: FnMut(&T) -> bool,\n    {\n        self.retain_mut(|elem| f(elem));\n    }\n\n    /// Retains only the elements specified by the predicate, passing a mutable reference to it.\n    ///\n    /// In other words, remove all elements `e` such that `f(&mut e)` returns `false`.\n    /// This method operates in place, visiting each element exactly once in the\n    /// original order, and preserves the order of the retained elements.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let mut vec = vec![1, 2, 3, 4];\n    /// vec.retain_mut(|x| if *x <= 3 {\n    ///     *x += 1;\n    ///     true\n    /// } else {\n    ///     false\n    /// });\n    /// assert_eq!(vec, [2, 3, 4]);\n    /// ```\n    #[stable(feature = \"vec_retain_mut\", since = \"1.61.0\")]\n    pub fn retain_mut<F>(&mut self, mut f: F)\n    where\n        F: FnMut(&mut T) -> bool,\n    {\n        let original_len = self.len();\n        // Avoid double drop if the drop guard is not executed,\n        // since we may make some holes during the process.\n        unsafe { self.set_len(0) };\n\n        // Vec: [Kept, Kept, Hole, Hole, Hole, Hole, Unchecked, Unchecked]\n        //      |<-              processed len   ->| ^- next to check\n        //                  |<-  deleted cnt     ->|\n        //      |<-              original_len                          ->|\n        // Kept: Elements which predicate returns true on.\n        // Hole: Moved or dropped element slot.\n        // Unchecked: Unchecked valid elements.\n        //\n        // This drop guard will be invoked when predicate or `drop` of element panicked.\n        // It shifts unchecked elements to cover holes and `set_len` to the correct length.\n        // In cases when predicate and `drop` never panick, it will be optimized out.\n        struct BackshiftOnDrop<'a, T, A: Allocator> {\n            v: &'a mut Vec<T, A>,\n            processed_len: usize,\n            deleted_cnt: usize,\n            original_len: usize,\n        }\n\n        impl<T, A: Allocator> Drop for BackshiftOnDrop<'_, T, A> {\n            fn drop(&mut self) {\n                if self.deleted_cnt > 0 {\n                    // SAFETY: Trailing unchecked items must be valid since we never touch them.\n                    unsafe {\n                        ptr::copy(\n                            self.v.as_ptr().add(self.processed_len),\n                            self.v.as_mut_ptr().add(self.processed_len - self.deleted_cnt),\n                            self.original_len - self.processed_len,\n                        );\n                    }\n                }\n                // SAFETY: After filling holes, all items are in contiguous memory.\n                unsafe {\n                    self.v.set_len(self.original_len - self.deleted_cnt);\n                }\n            }\n        }\n\n        let mut g = BackshiftOnDrop { v: self, processed_len: 0, deleted_cnt: 0, original_len };\n\n        fn process_loop<F, T, A: Allocator, const DELETED: bool>(\n            original_len: usize,\n            f: &mut F,\n            g: &mut BackshiftOnDrop<'_, T, A>,\n        ) where\n            F: FnMut(&mut T) -> bool,\n        {\n            while g.processed_len != original_len {\n                // SAFETY: Unchecked element must be valid.\n                let cur = unsafe { &mut *g.v.as_mut_ptr().add(g.processed_len) };\n                if !f(cur) {\n                    // Advance early to avoid double drop if `drop_in_place` panicked.\n                    g.processed_len += 1;\n                    g.deleted_cnt += 1;\n                    // SAFETY: We never touch this element again after dropped.\n                    unsafe { ptr::drop_in_place(cur) };\n                    // We already advanced the counter.\n                    if DELETED {\n                        continue;\n                    } else {\n                        break;\n                    }\n                }\n                if DELETED {\n                    // SAFETY: `deleted_cnt` > 0, so the hole slot must not overlap with current element.\n                    // We use copy for move, and never touch this element again.\n                    unsafe {\n                        let hole_slot = g.v.as_mut_ptr().add(g.processed_len - g.deleted_cnt);\n                        ptr::copy_nonoverlapping(cur, hole_slot, 1);\n                    }\n                }\n                g.processed_len += 1;\n            }\n        }\n\n        // Stage 1: Nothing was deleted.\n        process_loop::<F, T, A, false>(original_len, &mut f, &mut g);\n\n        // Stage 2: Some elements were deleted.\n        process_loop::<F, T, A, true>(original_len, &mut f, &mut g);\n\n        // All item are processed. This can be optimized to `set_len` by LLVM.\n        drop(g);\n    }\n\n    /// Removes all but the first of consecutive elements in the vector that resolve to the same\n    /// key.\n    ///\n    /// If the vector is sorted, this removes all duplicates.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let mut vec = vec![10, 20, 21, 30, 20];\n    ///\n    /// vec.dedup_by_key(|i| *i / 10);\n    ///\n    /// assert_eq!(vec, [10, 20, 30, 20]);\n    /// ```\n    #[stable(feature = \"dedup_by\", since = \"1.16.0\")]\n    #[inline]\n    pub fn dedup_by_key<F, K>(&mut self, mut key: F)\n    where\n        F: FnMut(&mut T) -> K,\n        K: PartialEq,\n    {\n        self.dedup_by(|a, b| key(a) == key(b))\n    }\n\n    /// Removes all but the first of consecutive elements in the vector satisfying a given equality\n    /// relation.\n    ///\n    /// The `same_bucket` function is passed references to two elements from the vector and\n    /// must determine if the elements compare equal. The elements are passed in opposite order\n    /// from their order in the slice, so if `same_bucket(a, b)` returns `true`, `a` is removed.\n    ///\n    /// If the vector is sorted, this removes all duplicates.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let mut vec = vec![\"foo\", \"bar\", \"Bar\", \"baz\", \"bar\"];\n    ///\n    /// vec.dedup_by(|a, b| a.eq_ignore_ascii_case(b));\n    ///\n    /// assert_eq!(vec, [\"foo\", \"bar\", \"baz\", \"bar\"]);\n    /// ```\n    #[stable(feature = \"dedup_by\", since = \"1.16.0\")]\n    pub fn dedup_by<F>(&mut self, mut same_bucket: F)\n    where\n        F: FnMut(&mut T, &mut T) -> bool,\n    {\n        let len = self.len();\n        if len <= 1 {\n            return;\n        }\n\n        // Check if we ever want to remove anything.\n        // This allows to use copy_non_overlapping in next cycle.\n        // And avoids any memory writes if we don't need to remove anything.\n        let mut first_duplicate_idx: usize = 1;\n        let start = self.as_mut_ptr();\n        while first_duplicate_idx != len {\n            let found_duplicate = unsafe {\n                // SAFETY: first_duplicate always in range [1..len)\n                // Note that we start iteration from 1 so we never overflow.\n                let prev = start.add(first_duplicate_idx.wrapping_sub(1));\n                let current = start.add(first_duplicate_idx);\n                // We explicitly say in docs that references are reversed.\n                same_bucket(&mut *current, &mut *prev)\n            };\n            if found_duplicate {\n                break;\n            }\n            first_duplicate_idx += 1;\n        }\n        // Don't need to remove anything.\n        // We cannot get bigger than len.\n        if first_duplicate_idx == len {\n            return;\n        }\n\n        /* INVARIANT: vec.len() > read > write > write-1 >= 0 */\n        struct FillGapOnDrop<'a, T, A: core::alloc::Allocator> {\n            /* Offset of the element we want to check if it is duplicate */\n            read: usize,\n\n            /* Offset of the place where we want to place the non-duplicate\n             * when we find it. */\n            write: usize,\n\n            /* The Vec that would need correction if `same_bucket` panicked */\n            vec: &'a mut Vec<T, A>,\n        }\n\n        impl<'a, T, A: core::alloc::Allocator> Drop for FillGapOnDrop<'a, T, A> {\n            fn drop(&mut self) {\n                /* This code gets executed when `same_bucket` panics */\n\n                /* SAFETY: invariant guarantees that `read - write`\n                 * and `len - read` never overflow and that the copy is always\n                 * in-bounds. */\n                unsafe {\n                    let ptr = self.vec.as_mut_ptr();\n                    let len = self.vec.len();\n\n                    /* How many items were left when `same_bucket` panicked.\n                     * Basically vec[read..].len() */\n                    let items_left = len.wrapping_sub(self.read);\n\n                    /* Pointer to first item in vec[write..write+items_left] slice */\n                    let dropped_ptr = ptr.add(self.write);\n                    /* Pointer to first item in vec[read..] slice */\n                    let valid_ptr = ptr.add(self.read);\n\n                    /* Copy `vec[read..]` to `vec[write..write+items_left]`.\n                     * The slices can overlap, so `copy_nonoverlapping` cannot be used */\n                    ptr::copy(valid_ptr, dropped_ptr, items_left);\n\n                    /* How many items have been already dropped\n                     * Basically vec[read..write].len() */\n                    let dropped = self.read.wrapping_sub(self.write);\n\n                    self.vec.set_len(len - dropped);\n                }\n            }\n        }\n\n        /* Drop items while going through Vec, it should be more efficient than\n         * doing slice partition_dedup + truncate */\n\n        // Construct gap first and then drop item to avoid memory corruption if `T::drop` panics.\n        let mut gap =\n            FillGapOnDrop { read: first_duplicate_idx + 1, write: first_duplicate_idx, vec: self };\n        unsafe {\n            // SAFETY: we checked that first_duplicate_idx in bounds before.\n            // If drop panics, `gap` would remove this item without drop.\n            ptr::drop_in_place(start.add(first_duplicate_idx));\n        }\n\n        /* SAFETY: Because of the invariant, read_ptr, prev_ptr and write_ptr\n         * are always in-bounds and read_ptr never aliases prev_ptr */\n        unsafe {\n            while gap.read < len {\n                let read_ptr = start.add(gap.read);\n                let prev_ptr = start.add(gap.write.wrapping_sub(1));\n\n                // We explicitly say in docs that references are reversed.\n                let found_duplicate = same_bucket(&mut *read_ptr, &mut *prev_ptr);\n                if found_duplicate {\n                    // Increase `gap.read` now since the drop may panic.\n                    gap.read += 1;\n                    /* We have found duplicate, drop it in-place */\n                    ptr::drop_in_place(read_ptr);\n                } else {\n                    let write_ptr = start.add(gap.write);\n\n                    /* read_ptr cannot be equal to write_ptr because at this point\n                     * we guaranteed to skip at least one element (before loop starts).\n                     */\n                    ptr::copy_nonoverlapping(read_ptr, write_ptr, 1);\n\n                    /* We have filled that place, so go further */\n                    gap.write += 1;\n                    gap.read += 1;\n                }\n            }\n\n            /* Technically we could let `gap` clean up with its Drop, but\n             * when `same_bucket` is guaranteed to not panic, this bloats a little\n             * the codegen, so we just do it manually */\n            gap.vec.set_len(gap.write);\n            mem::forget(gap);\n        }\n    }\n\n    /// Appends an element to the back of a collection.\n    ///\n    /// # Panics\n    ///\n    /// Panics if the new capacity exceeds `isize::MAX` _bytes_.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let mut vec = vec![1, 2];\n    /// vec.push(3);\n    /// assert_eq!(vec, [1, 2, 3]);\n    /// ```\n    ///\n    /// # Time complexity\n    ///\n    /// Takes amortized *O*(1) time. If the vector's length would exceed its\n    /// capacity after the push, *O*(*capacity*) time is taken to copy the\n    /// vector's elements to a larger allocation. This expensive operation is\n    /// offset by the *capacity* *O*(1) insertions it allows.\n    #[cfg(not(no_global_oom_handling))]\n    #[inline]\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    #[rustc_confusables(\"push_back\", \"put\", \"append\")]\n    pub fn push(&mut self, value: T) {\n        // Inform codegen that the length does not change across grow_one().\n        let len = self.len;\n        // This will panic or abort if we would allocate > isize::MAX bytes\n        // or if the length increment would overflow for zero-sized types.\n        if len == self.buf.capacity() {\n            self.buf.grow_one();\n        }\n        unsafe {\n            let end = self.as_mut_ptr().add(len);\n            ptr::write(end, value);\n            self.len = len + 1;\n        }\n    }\n\n    /// Appends an element if there is sufficient spare capacity, otherwise an error is returned\n    /// with the element.\n    ///\n    /// Unlike [`push`] this method will not reallocate when there's insufficient capacity.\n    /// The caller should use [`reserve`] or [`try_reserve`] to ensure that there is enough capacity.\n    ///\n    /// [`push`]: Vec::push\n    /// [`reserve`]: Vec::reserve\n    /// [`try_reserve`]: Vec::try_reserve\n    ///\n    /// # Examples\n    ///\n    /// A manual, panic-free alternative to [`FromIterator`]:\n    ///\n    /// ```\n    /// #![feature(vec_push_within_capacity)]\n    ///\n    /// use std::collections::TryReserveError;\n    /// fn from_iter_fallible<T>(iter: impl Iterator<Item=T>) -> Result<Vec<T>, TryReserveError> {\n    ///     let mut vec = Vec::new();\n    ///     for value in iter {\n    ///         if let Err(value) = vec.push_within_capacity(value) {\n    ///             vec.try_reserve(1)?;\n    ///             // this cannot fail, the previous line either returned or added at least 1 free slot\n    ///             let _ = vec.push_within_capacity(value);\n    ///         }\n    ///     }\n    ///     Ok(vec)\n    /// }\n    /// assert_eq!(from_iter_fallible(0..100), Ok(Vec::from_iter(0..100)));\n    /// ```\n    ///\n    /// # Time complexity\n    ///\n    /// Takes *O*(1) time.\n    #[inline]\n    #[unstable(feature = \"vec_push_within_capacity\", issue = \"100486\")]\n    pub fn push_within_capacity(&mut self, value: T) -> Result<(), T> {\n        if self.len == self.buf.capacity() {\n            return Err(value);\n        }\n        unsafe {\n            let end = self.as_mut_ptr().add(self.len);\n            ptr::write(end, value);\n            self.len += 1;\n        }\n        Ok(())\n    }\n\n    /// Removes the last element from a vector and returns it, or [`None`] if it\n    /// is empty.\n    ///\n    /// If you'd like to pop the first element, consider using\n    /// [`VecDeque::pop_front`] instead.\n    ///\n    /// [`VecDeque::pop_front`]: crate::collections::VecDeque::pop_front\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let mut vec = vec![1, 2, 3];\n    /// assert_eq!(vec.pop(), Some(3));\n    /// assert_eq!(vec, [1, 2]);\n    /// ```\n    ///\n    /// # Time complexity\n    ///\n    /// Takes *O*(1) time.\n    #[inline]\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    pub fn pop(&mut self) -> Option<T> {\n        if self.len == 0 {\n            None\n        } else {\n            unsafe {\n                self.len -= 1;\n                core::hint::assert_unchecked(self.len < self.capacity());\n                Some(ptr::read(self.as_ptr().add(self.len())))\n            }\n        }\n    }\n\n    /// Removes and returns the last element in a vector if the predicate\n    /// returns `true`, or [`None`] if the predicate returns false or the vector\n    /// is empty.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// #![feature(vec_pop_if)]\n    ///\n    /// let mut vec = vec![1, 2, 3, 4];\n    /// let pred = |x: &mut i32| *x % 2 == 0;\n    ///\n    /// assert_eq!(vec.pop_if(pred), Some(4));\n    /// assert_eq!(vec, [1, 2, 3]);\n    /// assert_eq!(vec.pop_if(pred), None);\n    /// ```\n    #[unstable(feature = \"vec_pop_if\", issue = \"122741\")]\n    pub fn pop_if<F>(&mut self, f: F) -> Option<T>\n    where\n        F: FnOnce(&mut T) -> bool,\n    {\n        let last = self.last_mut()?;\n        if f(last) { self.pop() } else { None }\n    }\n\n    /// Moves all the elements of `other` into `self`, leaving `other` empty.\n    ///\n    /// # Panics\n    ///\n    /// Panics if the new capacity exceeds `isize::MAX` _bytes_.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let mut vec = vec![1, 2, 3];\n    /// let mut vec2 = vec![4, 5, 6];\n    /// vec.append(&mut vec2);\n    /// assert_eq!(vec, [1, 2, 3, 4, 5, 6]);\n    /// assert_eq!(vec2, []);\n    /// ```\n    #[cfg(not(no_global_oom_handling))]\n    #[inline]\n    #[stable(feature = \"append\", since = \"1.4.0\")]\n    pub fn append(&mut self, other: &mut Self) {\n        unsafe {\n            self.append_elements(other.as_slice() as _);\n            other.set_len(0);\n        }\n    }\n\n    /// Appends elements to `self` from other buffer.\n    #[cfg(not(no_global_oom_handling))]\n    #[inline]\n    unsafe fn append_elements(&mut self, other: *const [T]) {\n        let count = unsafe { (*other).len() };\n        self.reserve(count);\n        let len = self.len();\n        unsafe { ptr::copy_nonoverlapping(other as *const T, self.as_mut_ptr().add(len), count) };\n        self.len += count;\n    }\n\n    /// Removes the specified range from the vector in bulk, returning all\n    /// removed elements as an iterator. If the iterator is dropped before\n    /// being fully consumed, it drops the remaining removed elements.\n    ///\n    /// The returned iterator keeps a mutable borrow on the vector to optimize\n    /// its implementation.\n    ///\n    /// # Panics\n    ///\n    /// Panics if the starting point is greater than the end point or if\n    /// the end point is greater than the length of the vector.\n    ///\n    /// # Leaking\n    ///\n    /// If the returned iterator goes out of scope without being dropped (due to\n    /// [`mem::forget`], for example), the vector may have lost and leaked\n    /// elements arbitrarily, including elements outside the range.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let mut v = vec![1, 2, 3];\n    /// let u: Vec<_> = v.drain(1..).collect();\n    /// assert_eq!(v, &[1]);\n    /// assert_eq!(u, &[2, 3]);\n    ///\n    /// // A full range clears the vector, like `clear()` does\n    /// v.drain(..);\n    /// assert_eq!(v, &[]);\n    /// ```\n    #[stable(feature = \"drain\", since = \"1.6.0\")]\n    pub fn drain<R>(&mut self, range: R) -> Drain<'_, T, A>\n    where\n        R: RangeBounds<usize>,\n    {\n        // Memory safety\n        //\n        // When the Drain is first created, it shortens the length of\n        // the source vector to make sure no uninitialized or moved-from elements\n        // are accessible at all if the Drain's destructor never gets to run.\n        //\n        // Drain will ptr::read out the values to remove.\n        // When finished, remaining tail of the vec is copied back to cover\n        // the hole, and the vector length is restored to the new length.\n        //\n        let len = self.len();\n        let Range { start, end } = slice::range(range, ..len);\n\n        unsafe {\n            // set self.vec length's to start, to be safe in case Drain is leaked\n            self.set_len(start);\n            let range_slice = slice::from_raw_parts(self.as_ptr().add(start), end - start);\n            Drain {\n                tail_start: end,\n                tail_len: len - end,\n                iter: range_slice.iter(),\n                vec: NonNull::from(self),\n            }\n        }\n    }\n\n    /// Clears the vector, removing all values.\n    ///\n    /// Note that this method has no effect on the allocated capacity\n    /// of the vector.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let mut v = vec![1, 2, 3];\n    ///\n    /// v.clear();\n    ///\n    /// assert!(v.is_empty());\n    /// ```\n    #[inline]\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    pub fn clear(&mut self) {\n        let elems: *mut [T] = self.as_mut_slice();\n\n        // SAFETY:\n        // - `elems` comes directly from `as_mut_slice` and is therefore valid.\n        // - Setting `self.len` before calling `drop_in_place` means that,\n        //   if an element's `Drop` impl panics, the vector's `Drop` impl will\n        //   do nothing (leaking the rest of the elements) instead of dropping\n        //   some twice.\n        unsafe {\n            self.len = 0;\n            ptr::drop_in_place(elems);\n        }\n    }\n\n    /// Returns the number of elements in the vector, also referred to\n    /// as its 'length'.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let a = vec![1, 2, 3];\n    /// assert_eq!(a.len(), 3);\n    /// ```\n    #[inline]\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    #[rustc_confusables(\"length\", \"size\")]\n    pub fn len(&self) -> usize {\n        self.len\n    }\n\n    /// Returns `true` if the vector contains no elements.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let mut v = Vec::new();\n    /// assert!(v.is_empty());\n    ///\n    /// v.push(1);\n    /// assert!(!v.is_empty());\n    /// ```\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    pub fn is_empty(&self) -> bool {\n        self.len() == 0\n    }\n\n    /// Splits the collection into two at the given index.\n    ///\n    /// Returns a newly allocated vector containing the elements in the range\n    /// `[at, len)`. After the call, the original vector will be left containing\n    /// the elements `[0, at)` with its previous capacity unchanged.\n    ///\n    /// - If you want to take ownership of the entire contents and capacity of\n    ///   the vector, see [`mem::take`] or [`mem::replace`].\n    /// - If you don't need the returned vector at all, see [`Vec::truncate`].\n    /// - If you want to take ownership of an arbitrary subslice, or you don't\n    ///   necessarily want to store the removed items in a vector, see [`Vec::drain`].\n    ///\n    /// # Panics\n    ///\n    /// Panics if `at > len`.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let mut vec = vec![1, 2, 3];\n    /// let vec2 = vec.split_off(1);\n    /// assert_eq!(vec, [1]);\n    /// assert_eq!(vec2, [2, 3]);\n    /// ```\n    #[cfg(not(no_global_oom_handling))]\n    #[inline]\n    #[must_use = \"use `.truncate()` if you don't need the other half\"]\n    #[stable(feature = \"split_off\", since = \"1.4.0\")]\n    pub fn split_off(&mut self, at: usize) -> Self\n    where\n        A: Clone,\n    {\n        #[cold]\n        #[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never))]\n        #[track_caller]\n        fn assert_failed(at: usize, len: usize) -> ! {\n            panic!(\"`at` split index (is {at}) should be <= len (is {len})\");\n        }\n\n        if at > self.len() {\n            assert_failed(at, self.len());\n        }\n\n        let other_len = self.len - at;\n        let mut other = Vec::with_capacity_in(other_len, self.allocator().clone());\n\n        // Unsafely `set_len` and copy items to `other`.\n        unsafe {\n            self.set_len(at);\n            other.set_len(other_len);\n\n            ptr::copy_nonoverlapping(self.as_ptr().add(at), other.as_mut_ptr(), other.len());\n        }\n        other\n    }\n\n    /// Resizes the `Vec` in-place so that `len` is equal to `new_len`.\n    ///\n    /// If `new_len` is greater than `len`, the `Vec` is extended by the\n    /// difference, with each additional slot filled with the result of\n    /// calling the closure `f`. The return values from `f` will end up\n    /// in the `Vec` in the order they have been generated.\n    ///\n    /// If `new_len` is less than `len`, the `Vec` is simply truncated.\n    ///\n    /// This method uses a closure to create new values on every push. If\n    /// you'd rather [`Clone`] a given value, use [`Vec::resize`]. If you\n    /// want to use the [`Default`] trait to generate values, you can\n    /// pass [`Default::default`] as the second argument.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let mut vec = vec![1, 2, 3];\n    /// vec.resize_with(5, Default::default);\n    /// assert_eq!(vec, [1, 2, 3, 0, 0]);\n    ///\n    /// let mut vec = vec![];\n    /// let mut p = 1;\n    /// vec.resize_with(4, || { p *= 2; p });\n    /// assert_eq!(vec, [2, 4, 8, 16]);\n    /// ```\n    #[cfg(not(no_global_oom_handling))]\n    #[stable(feature = \"vec_resize_with\", since = \"1.33.0\")]\n    pub fn resize_with<F>(&mut self, new_len: usize, f: F)\n    where\n        F: FnMut() -> T,\n    {\n        let len = self.len();\n        if new_len > len {\n            self.extend_trusted(iter::repeat_with(f).take(new_len - len));\n        } else {\n            self.truncate(new_len);\n        }\n    }\n\n    /// Consumes and leaks the `Vec`, returning a mutable reference to the contents,\n    /// `&'a mut [T]`. Note that the type `T` must outlive the chosen lifetime\n    /// `'a`. If the type has only static references, or none at all, then this\n    /// may be chosen to be `'static`.\n    ///\n    /// As of Rust 1.57, this method does not reallocate or shrink the `Vec`,\n    /// so the leaked allocation may include unused capacity that is not part\n    /// of the returned slice.\n    ///\n    /// This function is mainly useful for data that lives for the remainder of\n    /// the program's life. Dropping the returned reference will cause a memory\n    /// leak.\n    ///\n    /// # Examples\n    ///\n    /// Simple usage:\n    ///\n    /// ```\n    /// let x = vec![1, 2, 3];\n    /// let static_ref: &'static mut [usize] = x.leak();\n    /// static_ref[0] += 1;\n    /// assert_eq!(static_ref, &[2, 2, 3]);\n    /// ```\n    #[stable(feature = \"vec_leak\", since = \"1.47.0\")]\n    #[inline]\n    pub fn leak<'a>(self) -> &'a mut [T]\n    where\n        A: 'a,\n    {\n        let mut me = ManuallyDrop::new(self);\n        unsafe { slice::from_raw_parts_mut(me.as_mut_ptr(), me.len) }\n    }\n\n    /// Returns the remaining spare capacity of the vector as a slice of\n    /// `MaybeUninit<T>`.\n    ///\n    /// The returned slice can be used to fill the vector with data (e.g. by\n    /// reading from a file) before marking the data as initialized using the\n    /// [`set_len`] method.\n    ///\n    /// [`set_len`]: Vec::set_len\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// // Allocate vector big enough for 10 elements.\n    /// let mut v = Vec::with_capacity(10);\n    ///\n    /// // Fill in the first 3 elements.\n    /// let uninit = v.spare_capacity_mut();\n    /// uninit[0].write(0);\n    /// uninit[1].write(1);\n    /// uninit[2].write(2);\n    ///\n    /// // Mark the first 3 elements of the vector as being initialized.\n    /// unsafe {\n    ///     v.set_len(3);\n    /// }\n    ///\n    /// assert_eq!(&v, &[0, 1, 2]);\n    /// ```\n    #[stable(feature = \"vec_spare_capacity\", since = \"1.60.0\")]\n    #[inline]\n    pub fn spare_capacity_mut(&mut self) -> &mut [MaybeUninit<T>] {\n        // Note:\n        // This method is not implemented in terms of `split_at_spare_mut`,\n        // to prevent invalidation of pointers to the buffer.\n        unsafe {\n            slice::from_raw_parts_mut(\n                self.as_mut_ptr().add(self.len) as *mut MaybeUninit<T>,\n                self.buf.capacity() - self.len,\n            )\n        }\n    }\n\n    /// Returns vector content as a slice of `T`, along with the remaining spare\n    /// capacity of the vector as a slice of `MaybeUninit<T>`.\n    ///\n    /// The returned spare capacity slice can be used to fill the vector with data\n    /// (e.g. by reading from a file) before marking the data as initialized using\n    /// the [`set_len`] method.\n    ///\n    /// [`set_len`]: Vec::set_len\n    ///\n    /// Note that this is a low-level API, which should be used with care for\n    /// optimization purposes. If you need to append data to a `Vec`\n    /// you can use [`push`], [`extend`], [`extend_from_slice`],\n    /// [`extend_from_within`], [`insert`], [`append`], [`resize`] or\n    /// [`resize_with`], depending on your exact needs.\n    ///\n    /// [`push`]: Vec::push\n    /// [`extend`]: Vec::extend\n    /// [`extend_from_slice`]: Vec::extend_from_slice\n    /// [`extend_from_within`]: Vec::extend_from_within\n    /// [`insert`]: Vec::insert\n    /// [`append`]: Vec::append\n    /// [`resize`]: Vec::resize\n    /// [`resize_with`]: Vec::resize_with\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// #![feature(vec_split_at_spare)]\n    ///\n    /// let mut v = vec![1, 1, 2];\n    ///\n    /// // Reserve additional space big enough for 10 elements.\n    /// v.reserve(10);\n    ///\n    /// let (init, uninit) = v.split_at_spare_mut();\n    /// let sum = init.iter().copied().sum::<u32>();\n    ///\n    /// // Fill in the next 4 elements.\n    /// uninit[0].write(sum);\n    /// uninit[1].write(sum * 2);\n    /// uninit[2].write(sum * 3);\n    /// uninit[3].write(sum * 4);\n    ///\n    /// // Mark the 4 elements of the vector as being initialized.\n    /// unsafe {\n    ///     let len = v.len();\n    ///     v.set_len(len + 4);\n    /// }\n    ///\n    /// assert_eq!(&v, &[1, 1, 2, 4, 8, 12, 16]);\n    /// ```\n    #[unstable(feature = \"vec_split_at_spare\", issue = \"81944\")]\n    #[inline]\n    pub fn split_at_spare_mut(&mut self) -> (&mut [T], &mut [MaybeUninit<T>]) {\n        // SAFETY:\n        // - len is ignored and so never changed\n        let (init, spare, _) = unsafe { self.split_at_spare_mut_with_len() };\n        (init, spare)\n    }\n\n    /// Safety: changing returned .2 (&mut usize) is considered the same as calling `.set_len(_)`.\n    ///\n    /// This method provides unique access to all vec parts at once in `extend_from_within`.\n    unsafe fn split_at_spare_mut_with_len(\n        &mut self,\n    ) -> (&mut [T], &mut [MaybeUninit<T>], &mut usize) {\n        let ptr = self.as_mut_ptr();\n        // SAFETY:\n        // - `ptr` is guaranteed to be valid for `self.len` elements\n        // - but the allocation extends out to `self.buf.capacity()` elements, possibly\n        // uninitialized\n        let spare_ptr = unsafe { ptr.add(self.len) };\n        let spare_ptr = spare_ptr.cast::<MaybeUninit<T>>();\n        let spare_len = self.buf.capacity() - self.len;\n\n        // SAFETY:\n        // - `ptr` is guaranteed to be valid for `self.len` elements\n        // - `spare_ptr` is pointing one element past the buffer, so it doesn't overlap with `initialized`\n        unsafe {\n            let initialized = slice::from_raw_parts_mut(ptr, self.len);\n            let spare = slice::from_raw_parts_mut(spare_ptr, spare_len);\n\n            (initialized, spare, &mut self.len)\n        }\n    }\n}\n\nimpl<T: Clone, A: Allocator> Vec<T, A> {\n    /// Resizes the `Vec` in-place so that `len` is equal to `new_len`.\n    ///\n    /// If `new_len` is greater than `len`, the `Vec` is extended by the\n    /// difference, with each additional slot filled with `value`.\n    /// If `new_len` is less than `len`, the `Vec` is simply truncated.\n    ///\n    /// This method requires `T` to implement [`Clone`],\n    /// in order to be able to clone the passed value.\n    /// If you need more flexibility (or want to rely on [`Default`] instead of\n    /// [`Clone`]), use [`Vec::resize_with`].\n    /// If you only need to resize to a smaller size, use [`Vec::truncate`].\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let mut vec = vec![\"hello\"];\n    /// vec.resize(3, \"world\");\n    /// assert_eq!(vec, [\"hello\", \"world\", \"world\"]);\n    ///\n    /// let mut vec = vec![1, 2, 3, 4];\n    /// vec.resize(2, 0);\n    /// assert_eq!(vec, [1, 2]);\n    /// ```\n    #[cfg(not(no_global_oom_handling))]\n    #[stable(feature = \"vec_resize\", since = \"1.5.0\")]\n    pub fn resize(&mut self, new_len: usize, value: T) {\n        let len = self.len();\n\n        if new_len > len {\n            self.extend_with(new_len - len, value)\n        } else {\n            self.truncate(new_len);\n        }\n    }\n\n    /// Clones and appends all elements in a slice to the `Vec`.\n    ///\n    /// Iterates over the slice `other`, clones each element, and then appends\n    /// it to this `Vec`. The `other` slice is traversed in-order.\n    ///\n    /// Note that this function is same as [`extend`] except that it is\n    /// specialized to work with slices instead. If and when Rust gets\n    /// specialization this function will likely be deprecated (but still\n    /// available).\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let mut vec = vec![1];\n    /// vec.extend_from_slice(&[2, 3, 4]);\n    /// assert_eq!(vec, [1, 2, 3, 4]);\n    /// ```\n    ///\n    /// [`extend`]: Vec::extend\n    #[cfg(not(no_global_oom_handling))]\n    #[stable(feature = \"vec_extend_from_slice\", since = \"1.6.0\")]\n    pub fn extend_from_slice(&mut self, other: &[T]) {\n        self.spec_extend(other.iter())\n    }\n\n    /// Copies elements from `src` range to the end of the vector.\n    ///\n    /// # Panics\n    ///\n    /// Panics if the starting point is greater than the end point or if\n    /// the end point is greater than the length of the vector.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let mut vec = vec![0, 1, 2, 3, 4];\n    ///\n    /// vec.extend_from_within(2..);\n    /// assert_eq!(vec, [0, 1, 2, 3, 4, 2, 3, 4]);\n    ///\n    /// vec.extend_from_within(..2);\n    /// assert_eq!(vec, [0, 1, 2, 3, 4, 2, 3, 4, 0, 1]);\n    ///\n    /// vec.extend_from_within(4..8);\n    /// assert_eq!(vec, [0, 1, 2, 3, 4, 2, 3, 4, 0, 1, 4, 2, 3, 4]);\n    /// ```\n    #[cfg(not(no_global_oom_handling))]\n    #[stable(feature = \"vec_extend_from_within\", since = \"1.53.0\")]\n    pub fn extend_from_within<R>(&mut self, src: R)\n    where\n        R: RangeBounds<usize>,\n    {\n        let range = slice::range(src, ..self.len());\n        self.reserve(range.len());\n\n        // SAFETY:\n        // - `slice::range` guarantees that the given range is valid for indexing self\n        unsafe {\n            self.spec_extend_from_within(range);\n        }\n    }\n}\n\nimpl<T, A: Allocator, const N: usize> Vec<[T; N], A> {\n    /// Takes a `Vec<[T; N]>` and flattens it into a `Vec<T>`.\n    ///\n    /// # Panics\n    ///\n    /// Panics if the length of the resulting vector would overflow a `usize`.\n    ///\n    /// This is only possible when flattening a vector of arrays of zero-sized\n    /// types, and thus tends to be irrelevant in practice. If\n    /// `size_of::<T>() > 0`, this will never panic.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let mut vec = vec![[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n    /// assert_eq!(vec.pop(), Some([7, 8, 9]));\n    ///\n    /// let mut flattened = vec.into_flattened();\n    /// assert_eq!(flattened.pop(), Some(6));\n    /// ```\n    #[stable(feature = \"slice_flatten\", since = \"1.80.0\")]\n    pub fn into_flattened(self) -> Vec<T, A> {\n        let (ptr, len, cap, alloc) = self.into_raw_parts_with_alloc();\n        let (new_len, new_cap) = if T::IS_ZST {\n            (len.checked_mul(N).expect(\"vec len overflow\"), usize::MAX)\n        } else {\n            // SAFETY:\n            // - `cap * N` cannot overflow because the allocation is already in\n            // the address space.\n            // - Each `[T; N]` has `N` valid elements, so there are `len * N`\n            // valid elements in the allocation.\n            unsafe { (len.unchecked_mul(N), cap.unchecked_mul(N)) }\n        };\n        // SAFETY:\n        // - `ptr` was allocated by `self`\n        // - `ptr` is well-aligned because `[T; N]` has the same alignment as `T`.\n        // - `new_cap` refers to the same sized allocation as `cap` because\n        // `new_cap * size_of::<T>()` == `cap * size_of::<[T; N]>()`\n        // - `len` <= `cap`, so `len * N` <= `cap * N`.\n        unsafe { Vec::<T, A>::from_raw_parts_in(ptr.cast(), new_len, new_cap, alloc) }\n    }\n}\n\nimpl<T: Clone, A: Allocator> Vec<T, A> {\n    #[cfg(not(no_global_oom_handling))]\n    /// Extend the vector by `n` clones of value.\n    fn extend_with(&mut self, n: usize, value: T) {\n        self.reserve(n);\n\n        unsafe {\n            let mut ptr = self.as_mut_ptr().add(self.len());\n            // Use SetLenOnDrop to work around bug where compiler\n            // might not realize the store through `ptr` through self.set_len()\n            // don't alias.\n            let mut local_len = SetLenOnDrop::new(&mut self.len);\n\n            // Write all elements except the last one\n            for _ in 1..n {\n                ptr::write(ptr, value.clone());\n                ptr = ptr.add(1);\n                // Increment the length in every step in case clone() panics\n                local_len.increment_len(1);\n            }\n\n            if n > 0 {\n                // We can write the last element directly without cloning needlessly\n                ptr::write(ptr, value);\n                local_len.increment_len(1);\n            }\n\n            // len set by scope guard\n        }\n    }\n}\n\nimpl<T: PartialEq, A: Allocator> Vec<T, A> {\n    /// Removes consecutive repeated elements in the vector according to the\n    /// [`PartialEq`] trait implementation.\n    ///\n    /// If the vector is sorted, this removes all duplicates.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let mut vec = vec![1, 2, 2, 3, 2];\n    ///\n    /// vec.dedup();\n    ///\n    /// assert_eq!(vec, [1, 2, 3, 2]);\n    /// ```\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    #[inline]\n    pub fn dedup(&mut self) {\n        self.dedup_by(|a, b| a == b)\n    }\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// Internal methods and functions\n////////////////////////////////////////////////////////////////////////////////\n\n#[doc(hidden)]\n#[cfg(not(no_global_oom_handling))]\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\npub fn from_elem<T: Clone>(elem: T, n: usize) -> Vec<T> {\n    <T as SpecFromElem>::from_elem(elem, n, Global)\n}\n\n#[doc(hidden)]\n#[cfg(not(no_global_oom_handling))]\n#[unstable(feature = \"allocator_api\", issue = \"32838\")]\npub fn from_elem_in<T: Clone, A: Allocator>(elem: T, n: usize, alloc: A) -> Vec<T, A> {\n    <T as SpecFromElem>::from_elem(elem, n, alloc)\n}\n\n#[cfg(not(no_global_oom_handling))]\ntrait ExtendFromWithinSpec {\n    /// # Safety\n    ///\n    /// - `src` needs to be valid index\n    /// - `self.capacity() - self.len()` must be `>= src.len()`\n    unsafe fn spec_extend_from_within(&mut self, src: Range<usize>);\n}\n\n#[cfg(not(no_global_oom_handling))]\nimpl<T: Clone, A: Allocator> ExtendFromWithinSpec for Vec<T, A> {\n    default unsafe fn spec_extend_from_within(&mut self, src: Range<usize>) {\n        // SAFETY:\n        // - len is increased only after initializing elements\n        let (this, spare, len) = unsafe { self.split_at_spare_mut_with_len() };\n\n        // SAFETY:\n        // - caller guarantees that src is a valid index\n        let to_clone = unsafe { this.get_unchecked(src) };\n\n        iter::zip(to_clone, spare)\n            .map(|(src, dst)| dst.write(src.clone()))\n            // Note:\n            // - Element was just initialized with `MaybeUninit::write`, so it's ok to increase len\n            // - len is increased after each element to prevent leaks (see issue #82533)\n            .for_each(|_| *len += 1);\n    }\n}\n\n#[cfg(not(no_global_oom_handling))]\nimpl<T: Copy, A: Allocator> ExtendFromWithinSpec for Vec<T, A> {\n    unsafe fn spec_extend_from_within(&mut self, src: Range<usize>) {\n        let count = src.len();\n        {\n            let (init, spare) = self.split_at_spare_mut();\n\n            // SAFETY:\n            // - caller guarantees that `src` is a valid index\n            let source = unsafe { init.get_unchecked(src) };\n\n            // SAFETY:\n            // - Both pointers are created from unique slice references (`&mut [_]`)\n            //   so they are valid and do not overlap.\n            // - Elements are :Copy so it's OK to copy them, without doing\n            //   anything with the original values\n            // - `count` is equal to the len of `source`, so source is valid for\n            //   `count` reads\n            // - `.reserve(count)` guarantees that `spare.len() >= count` so spare\n            //   is valid for `count` writes\n            unsafe { ptr::copy_nonoverlapping(source.as_ptr(), spare.as_mut_ptr() as _, count) };\n        }\n\n        // SAFETY:\n        // - The elements were just initialized by `copy_nonoverlapping`\n        self.len += count;\n    }\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// Common trait implementations for Vec\n////////////////////////////////////////////////////////////////////////////////\n\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl<T, A: Allocator> ops::Deref for Vec<T, A> {\n    type Target = [T];\n\n    #[inline]\n    fn deref(&self) -> &[T] {\n        unsafe { slice::from_raw_parts(self.as_ptr(), self.len) }\n    }\n}\n\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl<T, A: Allocator> ops::DerefMut for Vec<T, A> {\n    #[inline]\n    fn deref_mut(&mut self) -> &mut [T] {\n        unsafe { slice::from_raw_parts_mut(self.as_mut_ptr(), self.len) }\n    }\n}\n\n#[unstable(feature = \"deref_pure_trait\", issue = \"87121\")]\nunsafe impl<T, A: Allocator> ops::DerefPure for Vec<T, A> {}\n\n#[cfg(not(no_global_oom_handling))]\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl<T: Clone, A: Allocator + Clone> Clone for Vec<T, A> {\n    #[cfg(not(test))]\n    fn clone(&self) -> Self {\n        let alloc = self.allocator().clone();\n        <[T]>::to_vec_in(&**self, alloc)\n    }\n\n    // HACK(japaric): with cfg(test) the inherent `[T]::to_vec` method, which is\n    // required for this method definition, is not available. Instead use the\n    // `slice::to_vec` function which is only available with cfg(test)\n    // NB see the slice::hack module in slice.rs for more information\n    #[cfg(test)]\n    fn clone(&self) -> Self {\n        let alloc = self.allocator().clone();\n        crate::slice::to_vec(&**self, alloc)\n    }\n\n    /// Overwrites the contents of `self` with a clone of the contents of `source`.\n    ///\n    /// This method is preferred over simply assigning `source.clone()` to `self`,\n    /// as it avoids reallocation if possible. Additionally, if the element type\n    /// `T` overrides `clone_from()`, this will reuse the resources of `self`'s\n    /// elements as well.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let x = vec![5, 6, 7];\n    /// let mut y = vec![8, 9, 10];\n    /// let yp: *const i32 = y.as_ptr();\n    ///\n    /// y.clone_from(&x);\n    ///\n    /// // The value is the same\n    /// assert_eq!(x, y);\n    ///\n    /// // And no reallocation occurred\n    /// assert_eq!(yp, y.as_ptr());\n    /// ```\n    fn clone_from(&mut self, source: &Self) {\n        crate::slice::SpecCloneIntoVec::clone_into(source.as_slice(), self);\n    }\n}\n\n/// The hash of a vector is the same as that of the corresponding slice,\n/// as required by the `core::borrow::Borrow` implementation.\n///\n/// ```\n/// use std::hash::BuildHasher;\n///\n/// let b = std::hash::RandomState::new();\n/// let v: Vec<u8> = vec![0xa8, 0x3c, 0x09];\n/// let s: &[u8] = &[0xa8, 0x3c, 0x09];\n/// assert_eq!(b.hash_one(v), b.hash_one(s));\n/// ```\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl<T: Hash, A: Allocator> Hash for Vec<T, A> {\n    #[inline]\n    fn hash<H: Hasher>(&self, state: &mut H) {\n        Hash::hash(&**self, state)\n    }\n}\n\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\n#[rustc_on_unimplemented(\n    message = \"vector indices are of type `usize` or ranges of `usize`\",\n    label = \"vector indices are of type `usize` or ranges of `usize`\"\n)]\nimpl<T, I: SliceIndex<[T]>, A: Allocator> Index<I> for Vec<T, A> {\n    type Output = I::Output;\n\n    #[inline]\n    fn index(&self, index: I) -> &Self::Output {\n        Index::index(&**self, index)\n    }\n}\n\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\n#[rustc_on_unimplemented(\n    message = \"vector indices are of type `usize` or ranges of `usize`\",\n    label = \"vector indices are of type `usize` or ranges of `usize`\"\n)]\nimpl<T, I: SliceIndex<[T]>, A: Allocator> IndexMut<I> for Vec<T, A> {\n    #[inline]\n    fn index_mut(&mut self, index: I) -> &mut Self::Output {\n        IndexMut::index_mut(&mut **self, index)\n    }\n}\n\n/// Collects an iterator into a Vec, commonly called via [`Iterator::collect()`]\n///\n/// # Allocation behavior\n///\n/// In general `Vec` does not guarantee any particular growth or allocation strategy.\n/// That also applies to this trait impl.\n///\n/// **Note:** This section covers implementation details and is therefore exempt from\n/// stability guarantees.\n///\n/// Vec may use any or none of the following strategies,\n/// depending on the supplied iterator:\n///\n/// * preallocate based on [`Iterator::size_hint()`]\n///   * and panic if the number of items is outside the provided lower/upper bounds\n/// * use an amortized growth strategy similar to `pushing` one item at a time\n/// * perform the iteration in-place on the original allocation backing the iterator\n///\n/// The last case warrants some attention. It is an optimization that in many cases reduces peak memory\n/// consumption and improves cache locality. But when big, short-lived allocations are created,\n/// only a small fraction of their items get collected, no further use is made of the spare capacity\n/// and the resulting `Vec` is moved into a longer-lived structure, then this can lead to the large\n/// allocations having their lifetimes unnecessarily extended which can result in increased memory\n/// footprint.\n///\n/// In cases where this is an issue, the excess capacity can be discarded with [`Vec::shrink_to()`],\n/// [`Vec::shrink_to_fit()`] or by collecting into [`Box<[T]>`][owned slice] instead, which additionally reduces\n/// the size of the long-lived struct.\n///\n/// [owned slice]: Box\n///\n/// ```rust\n/// # use std::sync::Mutex;\n/// static LONG_LIVED: Mutex<Vec<Vec<u16>>> = Mutex::new(Vec::new());\n///\n/// for i in 0..10 {\n///     let big_temporary: Vec<u16> = (0..1024).collect();\n///     // discard most items\n///     let mut result: Vec<_> = big_temporary.into_iter().filter(|i| i % 100 == 0).collect();\n///     // without this a lot of unused capacity might be moved into the global\n///     result.shrink_to_fit();\n///     LONG_LIVED.lock().unwrap().push(result);\n/// }\n/// ```\n#[cfg(not(no_global_oom_handling))]\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl<T> FromIterator<T> for Vec<T> {\n    #[inline]\n    fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Vec<T> {\n        <Self as SpecFromIter<T, I::IntoIter>>::from_iter(iter.into_iter())\n    }\n}\n\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl<T, A: Allocator> IntoIterator for Vec<T, A> {\n    type Item = T;\n    type IntoIter = IntoIter<T, A>;\n\n    /// Creates a consuming iterator, that is, one that moves each value out of\n    /// the vector (from start to end). The vector cannot be used after calling\n    /// this.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let v = vec![\"a\".to_string(), \"b\".to_string()];\n    /// let mut v_iter = v.into_iter();\n    ///\n    /// let first_element: Option<String> = v_iter.next();\n    ///\n    /// assert_eq!(first_element, Some(\"a\".to_string()));\n    /// assert_eq!(v_iter.next(), Some(\"b\".to_string()));\n    /// assert_eq!(v_iter.next(), None);\n    /// ```\n    #[inline]\n    fn into_iter(self) -> Self::IntoIter {\n        unsafe {\n            let me = ManuallyDrop::new(self);\n            let alloc = ManuallyDrop::new(ptr::read(me.allocator()));\n            let buf = me.buf.non_null();\n            let begin = buf.as_ptr();\n            let end = if T::IS_ZST {\n                begin.wrapping_byte_add(me.len())\n            } else {\n                begin.add(me.len()) as *const T\n            };\n            let cap = me.buf.capacity();\n            IntoIter { buf, phantom: PhantomData, cap, alloc, ptr: buf, end }\n        }\n    }\n}\n\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl<'a, T, A: Allocator> IntoIterator for &'a Vec<T, A> {\n    type Item = &'a T;\n    type IntoIter = slice::Iter<'a, T>;\n\n    fn into_iter(self) -> Self::IntoIter {\n        self.iter()\n    }\n}\n\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl<'a, T, A: Allocator> IntoIterator for &'a mut Vec<T, A> {\n    type Item = &'a mut T;\n    type IntoIter = slice::IterMut<'a, T>;\n\n    fn into_iter(self) -> Self::IntoIter {\n        self.iter_mut()\n    }\n}\n\n#[cfg(not(no_global_oom_handling))]\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl<T, A: Allocator> Extend<T> for Vec<T, A> {\n    #[inline]\n    fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {\n        <Self as SpecExtend<T, I::IntoIter>>::spec_extend(self, iter.into_iter())\n    }\n\n    #[inline]\n    fn extend_one(&mut self, item: T) {\n        self.push(item);\n    }\n\n    #[inline]\n    fn extend_reserve(&mut self, additional: usize) {\n        self.reserve(additional);\n    }\n}\n\nimpl<T, A: Allocator> Vec<T, A> {\n    // leaf method to which various SpecFrom/SpecExtend implementations delegate when\n    // they have no further optimizations to apply\n    #[cfg(not(no_global_oom_handling))]\n    fn extend_desugared<I: Iterator<Item = T>>(&mut self, mut iterator: I) {\n        // This is the case for a general iterator.\n        //\n        // This function should be the moral equivalent of:\n        //\n        //      for item in iterator {\n        //          self.push(item);\n        //      }\n        while let Some(element) = iterator.next() {\n            let len = self.len();\n            if len == self.capacity() {\n                let (lower, _) = iterator.size_hint();\n                self.reserve(lower.saturating_add(1));\n            }\n            unsafe {\n                ptr::write(self.as_mut_ptr().add(len), element);\n                // Since next() executes user code which can panic we have to bump the length\n                // after each step.\n                // NB can't overflow since we would have had to alloc the address space\n                self.set_len(len + 1);\n            }\n        }\n    }\n\n    // specific extend for `TrustedLen` iterators, called both by the specializations\n    // and internal places where resolving specialization makes compilation slower\n    #[cfg(not(no_global_oom_handling))]\n    fn extend_trusted(&mut self, iterator: impl iter::TrustedLen<Item = T>) {\n        let (low, high) = iterator.size_hint();\n        if let Some(additional) = high {\n            debug_assert_eq!(\n                low,\n                additional,\n                \"TrustedLen iterator's size hint is not exact: {:?}\",\n                (low, high)\n            );\n            self.reserve(additional);\n            unsafe {\n                let ptr = self.as_mut_ptr();\n                let mut local_len = SetLenOnDrop::new(&mut self.len);\n                iterator.for_each(move |element| {\n                    ptr::write(ptr.add(local_len.current_len()), element);\n                    // Since the loop executes user code which can panic we have to update\n                    // the length every step to correctly drop what we've written.\n                    // NB can't overflow since we would have had to alloc the address space\n                    local_len.increment_len(1);\n                });\n            }\n        } else {\n            // Per TrustedLen contract a `None` upper bound means that the iterator length\n            // truly exceeds usize::MAX, which would eventually lead to a capacity overflow anyway.\n            // Since the other branch already panics eagerly (via `reserve()`) we do the same here.\n            // This avoids additional codegen for a fallback code path which would eventually\n            // panic anyway.\n            panic!(\"capacity overflow\");\n        }\n    }\n\n    /// Creates a splicing iterator that replaces the specified range in the vector\n    /// with the given `replace_with` iterator and yields the removed items.\n    /// `replace_with` does not need to be the same length as `range`.\n    ///\n    /// `range` is removed even if the iterator is not consumed until the end.\n    ///\n    /// It is unspecified how many elements are removed from the vector\n    /// if the `Splice` value is leaked.\n    ///\n    /// The input iterator `replace_with` is only consumed when the `Splice` value is dropped.\n    ///\n    /// This is optimal if:\n    ///\n    /// * The tail (elements in the vector after `range`) is empty,\n    /// * or `replace_with` yields fewer or equal elements than `range`’s length\n    /// * or the lower bound of its `size_hint()` is exact.\n    ///\n    /// Otherwise, a temporary vector is allocated and the tail is moved twice.\n    ///\n    /// # Panics\n    ///\n    /// Panics if the starting point is greater than the end point or if\n    /// the end point is greater than the length of the vector.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let mut v = vec![1, 2, 3, 4];\n    /// let new = [7, 8, 9];\n    /// let u: Vec<_> = v.splice(1..3, new).collect();\n    /// assert_eq!(v, &[1, 7, 8, 9, 4]);\n    /// assert_eq!(u, &[2, 3]);\n    /// ```\n    #[cfg(not(no_global_oom_handling))]\n    #[inline]\n    #[stable(feature = \"vec_splice\", since = \"1.21.0\")]\n    pub fn splice<R, I>(&mut self, range: R, replace_with: I) -> Splice<'_, I::IntoIter, A>\n    where\n        R: RangeBounds<usize>,\n        I: IntoIterator<Item = T>,\n    {\n        Splice { drain: self.drain(range), replace_with: replace_with.into_iter() }\n    }\n\n    /// Creates an iterator which uses a closure to determine if an element should be removed.\n    ///\n    /// If the closure returns true, then the element is removed and yielded.\n    /// If the closure returns false, the element will remain in the vector and will not be yielded\n    /// by the iterator.\n    ///\n    /// If the returned `ExtractIf` is not exhausted, e.g. because it is dropped without iterating\n    /// or the iteration short-circuits, then the remaining elements will be retained.\n    /// Use [`retain`] with a negated predicate if you do not need the returned iterator.\n    ///\n    /// [`retain`]: Vec::retain\n    ///\n    /// Using this method is equivalent to the following code:\n    ///\n    /// ```\n    /// # let some_predicate = |x: &mut i32| { *x == 2 || *x == 3 || *x == 6 };\n    /// # let mut vec = vec![1, 2, 3, 4, 5, 6];\n    /// let mut i = 0;\n    /// while i < vec.len() {\n    ///     if some_predicate(&mut vec[i]) {\n    ///         let val = vec.remove(i);\n    ///         // your code here\n    ///     } else {\n    ///         i += 1;\n    ///     }\n    /// }\n    ///\n    /// # assert_eq!(vec, vec![1, 4, 5]);\n    /// ```\n    ///\n    /// But `extract_if` is easier to use. `extract_if` is also more efficient,\n    /// because it can backshift the elements of the array in bulk.\n    ///\n    /// Note that `extract_if` also lets you mutate every element in the filter closure,\n    /// regardless of whether you choose to keep or remove it.\n    ///\n    /// # Examples\n    ///\n    /// Splitting an array into evens and odds, reusing the original allocation:\n    ///\n    /// ```\n    /// #![feature(extract_if)]\n    /// let mut numbers = vec![1, 2, 3, 4, 5, 6, 8, 9, 11, 13, 14, 15];\n    ///\n    /// let evens = numbers.extract_if(|x| *x % 2 == 0).collect::<Vec<_>>();\n    /// let odds = numbers;\n    ///\n    /// assert_eq!(evens, vec![2, 4, 6, 8, 14]);\n    /// assert_eq!(odds, vec![1, 3, 5, 9, 11, 13, 15]);\n    /// ```\n    #[unstable(feature = \"extract_if\", reason = \"recently added\", issue = \"43244\")]\n    pub fn extract_if<F>(&mut self, filter: F) -> ExtractIf<'_, T, F, A>\n    where\n        F: FnMut(&mut T) -> bool,\n    {\n        let old_len = self.len();\n\n        // Guard against us getting leaked (leak amplification)\n        unsafe {\n            self.set_len(0);\n        }\n\n        ExtractIf { vec: self, idx: 0, del: 0, old_len, pred: filter }\n    }\n}\n\n/// Extend implementation that copies elements out of references before pushing them onto the Vec.\n///\n/// This implementation is specialized for slice iterators, where it uses [`copy_from_slice`] to\n/// append the entire slice at once.\n///\n/// [`copy_from_slice`]: slice::copy_from_slice\n#[cfg(not(no_global_oom_handling))]\n#[stable(feature = \"extend_ref\", since = \"1.2.0\")]\nimpl<'a, T: Copy + 'a, A: Allocator> Extend<&'a T> for Vec<T, A> {\n    fn extend<I: IntoIterator<Item = &'a T>>(&mut self, iter: I) {\n        self.spec_extend(iter.into_iter())\n    }\n\n    #[inline]\n    fn extend_one(&mut self, &item: &'a T) {\n        self.push(item);\n    }\n\n    #[inline]\n    fn extend_reserve(&mut self, additional: usize) {\n        self.reserve(additional);\n    }\n}\n\n/// Implements comparison of vectors, [lexicographically](Ord#lexicographical-comparison).\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl<T, A1, A2> PartialOrd<Vec<T, A2>> for Vec<T, A1>\nwhere\n    T: PartialOrd,\n    A1: Allocator,\n    A2: Allocator,\n{\n    #[inline]\n    fn partial_cmp(&self, other: &Vec<T, A2>) -> Option<Ordering> {\n        PartialOrd::partial_cmp(&**self, &**other)\n    }\n}\n\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl<T: Eq, A: Allocator> Eq for Vec<T, A> {}\n\n/// Implements ordering of vectors, [lexicographically](Ord#lexicographical-comparison).\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl<T: Ord, A: Allocator> Ord for Vec<T, A> {\n    #[inline]\n    fn cmp(&self, other: &Self) -> Ordering {\n        Ord::cmp(&**self, &**other)\n    }\n}\n\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nunsafe impl<#[may_dangle] T, A: Allocator> Drop for Vec<T, A> {\n    fn drop(&mut self) {\n        unsafe {\n            // use drop for [T]\n            // use a raw slice to refer to the elements of the vector as weakest necessary type;\n            // could avoid questions of validity in certain cases\n            ptr::drop_in_place(ptr::slice_from_raw_parts_mut(self.as_mut_ptr(), self.len))\n        }\n        // RawVec handles deallocation\n    }\n}\n\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl<T> Default for Vec<T> {\n    /// Creates an empty `Vec<T>`.\n    ///\n    /// The vector will not allocate until elements are pushed onto it.\n    fn default() -> Vec<T> {\n        Vec::new()\n    }\n}\n\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl<T: fmt::Debug, A: Allocator> fmt::Debug for Vec<T, A> {\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        fmt::Debug::fmt(&**self, f)\n    }\n}\n\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl<T, A: Allocator> AsRef<Vec<T, A>> for Vec<T, A> {\n    fn as_ref(&self) -> &Vec<T, A> {\n        self\n    }\n}\n\n#[stable(feature = \"vec_as_mut\", since = \"1.5.0\")]\nimpl<T, A: Allocator> AsMut<Vec<T, A>> for Vec<T, A> {\n    fn as_mut(&mut self) -> &mut Vec<T, A> {\n        self\n    }\n}\n\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl<T, A: Allocator> AsRef<[T]> for Vec<T, A> {\n    fn as_ref(&self) -> &[T] {\n        self\n    }\n}\n\n#[stable(feature = \"vec_as_mut\", since = \"1.5.0\")]\nimpl<T, A: Allocator> AsMut<[T]> for Vec<T, A> {\n    fn as_mut(&mut self) -> &mut [T] {\n        self\n    }\n}\n\n#[cfg(not(no_global_oom_handling))]\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl<T: Clone> From<&[T]> for Vec<T> {\n    /// Allocate a `Vec<T>` and fill it by cloning `s`'s items.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// assert_eq!(Vec::from(&[1, 2, 3][..]), vec![1, 2, 3]);\n    /// ```\n    #[cfg(not(test))]\n    fn from(s: &[T]) -> Vec<T> {\n        s.to_vec()\n    }\n    #[cfg(test)]\n    fn from(s: &[T]) -> Vec<T> {\n        crate::slice::to_vec(s, Global)\n    }\n}\n\n#[cfg(not(no_global_oom_handling))]\n#[stable(feature = \"vec_from_mut\", since = \"1.19.0\")]\nimpl<T: Clone> From<&mut [T]> for Vec<T> {\n    /// Allocate a `Vec<T>` and fill it by cloning `s`'s items.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// assert_eq!(Vec::from(&mut [1, 2, 3][..]), vec![1, 2, 3]);\n    /// ```\n    #[cfg(not(test))]\n    fn from(s: &mut [T]) -> Vec<T> {\n        s.to_vec()\n    }\n    #[cfg(test)]\n    fn from(s: &mut [T]) -> Vec<T> {\n        crate::slice::to_vec(s, Global)\n    }\n}\n\n#[cfg(not(no_global_oom_handling))]\n#[stable(feature = \"vec_from_array_ref\", since = \"1.74.0\")]\nimpl<T: Clone, const N: usize> From<&[T; N]> for Vec<T> {\n    /// Allocate a `Vec<T>` and fill it by cloning `s`'s items.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// assert_eq!(Vec::from(&[1, 2, 3]), vec![1, 2, 3]);\n    /// ```\n    fn from(s: &[T; N]) -> Vec<T> {\n        Self::from(s.as_slice())\n    }\n}\n\n#[cfg(not(no_global_oom_handling))]\n#[stable(feature = \"vec_from_array_ref\", since = \"1.74.0\")]\nimpl<T: Clone, const N: usize> From<&mut [T; N]> for Vec<T> {\n    /// Allocate a `Vec<T>` and fill it by cloning `s`'s items.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// assert_eq!(Vec::from(&mut [1, 2, 3]), vec![1, 2, 3]);\n    /// ```\n    fn from(s: &mut [T; N]) -> Vec<T> {\n        Self::from(s.as_mut_slice())\n    }\n}\n\n#[cfg(not(no_global_oom_handling))]\n#[stable(feature = \"vec_from_array\", since = \"1.44.0\")]\nimpl<T, const N: usize> From<[T; N]> for Vec<T> {\n    /// Allocate a `Vec<T>` and move `s`'s items into it.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// assert_eq!(Vec::from([1, 2, 3]), vec![1, 2, 3]);\n    /// ```\n    #[cfg(not(test))]\n    fn from(s: [T; N]) -> Vec<T> {\n        <[T]>::into_vec(Box::new(s))\n    }\n\n    #[cfg(test)]\n    fn from(s: [T; N]) -> Vec<T> {\n        crate::slice::into_vec(Box::new(s))\n    }\n}\n\n#[stable(feature = \"vec_from_cow_slice\", since = \"1.14.0\")]\nimpl<'a, T> From<Cow<'a, [T]>> for Vec<T>\nwhere\n    [T]: ToOwned<Owned = Vec<T>>,\n{\n    /// Convert a clone-on-write slice into a vector.\n    ///\n    /// If `s` already owns a `Vec<T>`, it will be returned directly.\n    /// If `s` is borrowing a slice, a new `Vec<T>` will be allocated and\n    /// filled by cloning `s`'s items into it.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// # use std::borrow::Cow;\n    /// let o: Cow<'_, [i32]> = Cow::Owned(vec![1, 2, 3]);\n    /// let b: Cow<'_, [i32]> = Cow::Borrowed(&[1, 2, 3]);\n    /// assert_eq!(Vec::from(o), Vec::from(b));\n    /// ```\n    fn from(s: Cow<'a, [T]>) -> Vec<T> {\n        s.into_owned()\n    }\n}\n\n// note: test pulls in std, which causes errors here\n#[cfg(not(test))]\n#[stable(feature = \"vec_from_box\", since = \"1.18.0\")]\nimpl<T, A: Allocator> From<Box<[T], A>> for Vec<T, A> {\n    /// Convert a boxed slice into a vector by transferring ownership of\n    /// the existing heap allocation.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let b: Box<[i32]> = vec![1, 2, 3].into_boxed_slice();\n    /// assert_eq!(Vec::from(b), vec![1, 2, 3]);\n    /// ```\n    fn from(s: Box<[T], A>) -> Self {\n        s.into_vec()\n    }\n}\n\n// note: test pulls in std, which causes errors here\n#[cfg(not(no_global_oom_handling))]\n#[cfg(not(test))]\n#[stable(feature = \"box_from_vec\", since = \"1.20.0\")]\nimpl<T, A: Allocator> From<Vec<T, A>> for Box<[T], A> {\n    /// Convert a vector into a boxed slice.\n    ///\n    /// Before doing the conversion, this method discards excess capacity like [`Vec::shrink_to_fit`].\n    ///\n    /// [owned slice]: Box\n    /// [`Vec::shrink_to_fit`]: Vec::shrink_to_fit\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// assert_eq!(Box::from(vec![1, 2, 3]), vec![1, 2, 3].into_boxed_slice());\n    /// ```\n    ///\n    /// Any excess capacity is removed:\n    /// ```\n    /// let mut vec = Vec::with_capacity(10);\n    /// vec.extend([1, 2, 3]);\n    ///\n    /// assert_eq!(Box::from(vec), vec![1, 2, 3].into_boxed_slice());\n    /// ```\n    fn from(v: Vec<T, A>) -> Self {\n        v.into_boxed_slice()\n    }\n}\n\n#[cfg(not(no_global_oom_handling))]\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl From<&str> for Vec<u8> {\n    /// Allocate a `Vec<u8>` and fill it with a UTF-8 string.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// assert_eq!(Vec::from(\"123\"), vec![b'1', b'2', b'3']);\n    /// ```\n    fn from(s: &str) -> Vec<u8> {\n        From::from(s.as_bytes())\n    }\n}\n\n#[stable(feature = \"array_try_from_vec\", since = \"1.48.0\")]\nimpl<T, A: Allocator, const N: usize> TryFrom<Vec<T, A>> for [T; N] {\n    type Error = Vec<T, A>;\n\n    /// Gets the entire contents of the `Vec<T>` as an array,\n    /// if its size exactly matches that of the requested array.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// assert_eq!(vec![1, 2, 3].try_into(), Ok([1, 2, 3]));\n    /// assert_eq!(<Vec<i32>>::new().try_into(), Ok([]));\n    /// ```\n    ///\n    /// If the length doesn't match, the input comes back in `Err`:\n    /// ```\n    /// let r: Result<[i32; 4], _> = (0..10).collect::<Vec<_>>().try_into();\n    /// assert_eq!(r, Err(vec![0, 1, 2, 3, 4, 5, 6, 7, 8, 9]));\n    /// ```\n    ///\n    /// If you're fine with just getting a prefix of the `Vec<T>`,\n    /// you can call [`.truncate(N)`](Vec::truncate) first.\n    /// ```\n    /// let mut v = String::from(\"hello world\").into_bytes();\n    /// v.sort();\n    /// v.truncate(2);\n    /// let [a, b]: [_; 2] = v.try_into().unwrap();\n    /// assert_eq!(a, b' ');\n    /// assert_eq!(b, b'd');\n    /// ```\n    fn try_from(mut vec: Vec<T, A>) -> Result<[T; N], Vec<T, A>> {\n        if vec.len() != N {\n            return Err(vec);\n        }\n\n        // SAFETY: `.set_len(0)` is always sound.\n        unsafe { vec.set_len(0) };\n\n        // SAFETY: A `Vec`'s pointer is always aligned properly, and\n        // the alignment the array needs is the same as the items.\n        // We checked earlier that we have sufficient items.\n        // The items will not double-drop as the `set_len`\n        // tells the `Vec` not to also drop them.\n        let array = unsafe { ptr::read(vec.as_ptr() as *const [T; N]) };\n        Ok(array)\n    }\n}\n\n```",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Source of the Rust file `library/alloc/src/vec/mod.rs`.\"><title>mod.rs - source</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../../\" data-static-root-path=\"../../../static.files/\" data-current-crate=\"alloc\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"../../../static.files/src-script-e66d777a5a92e9b2.js\"></script><script defer=\"\" src=\"../../../src-files1.80.0.js\"></script><script defer=\"\" src=\"../../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc src\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"sidebar\"><div class=\"src-sidebar-title\"><h2>Files</h2></div><div id=\"src-sidebar\"><details class=\"dir-entry\" open=\"\"><summary>alloc</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>boxed</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/alloc/boxed/thin.rs.html\">thin.rs</a></div></details><details class=\"dir-entry\"><summary>collections</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>binary_heap</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/alloc/collections/binary_heap/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>btree</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>map</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/alloc/collections/btree/map/entry.rs.html\">entry.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/alloc/collections/btree/append.rs.html\">append.rs</a><a href=\"../../../src/alloc/collections/btree/borrow.rs.html\">borrow.rs</a><a href=\"../../../src/alloc/collections/btree/dedup_sorted_iter.rs.html\">dedup_sorted_iter.rs</a><a href=\"../../../src/alloc/collections/btree/fix.rs.html\">fix.rs</a><a href=\"../../../src/alloc/collections/btree/map.rs.html\">map.rs</a><a href=\"../../../src/alloc/collections/btree/mem.rs.html\">mem.rs</a><a href=\"../../../src/alloc/collections/btree/merge_iter.rs.html\">merge_iter.rs</a><a href=\"../../../src/alloc/collections/btree/mod.rs.html\">mod.rs</a><a href=\"../../../src/alloc/collections/btree/navigate.rs.html\">navigate.rs</a><a href=\"../../../src/alloc/collections/btree/node.rs.html\">node.rs</a><a href=\"../../../src/alloc/collections/btree/remove.rs.html\">remove.rs</a><a href=\"../../../src/alloc/collections/btree/search.rs.html\">search.rs</a><a href=\"../../../src/alloc/collections/btree/set.rs.html\">set.rs</a><a href=\"../../../src/alloc/collections/btree/set_val.rs.html\">set_val.rs</a><a href=\"../../../src/alloc/collections/btree/split.rs.html\">split.rs</a></div></details><details class=\"dir-entry\"><summary>vec_deque</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/alloc/collections/vec_deque/drain.rs.html\">drain.rs</a><a href=\"../../../src/alloc/collections/vec_deque/into_iter.rs.html\">into_iter.rs</a><a href=\"../../../src/alloc/collections/vec_deque/iter.rs.html\">iter.rs</a><a href=\"../../../src/alloc/collections/vec_deque/iter_mut.rs.html\">iter_mut.rs</a><a href=\"../../../src/alloc/collections/vec_deque/macros.rs.html\">macros.rs</a><a href=\"../../../src/alloc/collections/vec_deque/mod.rs.html\">mod.rs</a><a href=\"../../../src/alloc/collections/vec_deque/spec_extend.rs.html\">spec_extend.rs</a><a href=\"../../../src/alloc/collections/vec_deque/spec_from_iter.rs.html\">spec_from_iter.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/alloc/collections/linked_list.rs.html\">linked_list.rs</a><a href=\"../../../src/alloc/collections/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>ffi</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/alloc/ffi/c_str.rs.html\">c_str.rs</a><a href=\"../../../src/alloc/ffi/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\" open=\"\"><summary>vec</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/alloc/vec/cow.rs.html\">cow.rs</a><a href=\"../../../src/alloc/vec/drain.rs.html\">drain.rs</a><a href=\"../../../src/alloc/vec/extract_if.rs.html\">extract_if.rs</a><a href=\"../../../src/alloc/vec/in_place_collect.rs.html\">in_place_collect.rs</a><a href=\"../../../src/alloc/vec/in_place_drop.rs.html\">in_place_drop.rs</a><a href=\"../../../src/alloc/vec/into_iter.rs.html\">into_iter.rs</a><a href=\"../../../src/alloc/vec/is_zero.rs.html\">is_zero.rs</a><a href=\"../../../src/alloc/vec/mod.rs.html\" class=\"selected\">mod.rs</a><a href=\"../../../src/alloc/vec/partial_eq.rs.html\">partial_eq.rs</a><a href=\"../../../src/alloc/vec/set_len_on_drop.rs.html\">set_len_on_drop.rs</a><a href=\"../../../src/alloc/vec/spec_extend.rs.html\">spec_extend.rs</a><a href=\"../../../src/alloc/vec/spec_from_elem.rs.html\">spec_from_elem.rs</a><a href=\"../../../src/alloc/vec/spec_from_iter.rs.html\">spec_from_iter.rs</a><a href=\"../../../src/alloc/vec/spec_from_iter_nested.rs.html\">spec_from_iter_nested.rs</a><a href=\"../../../src/alloc/vec/splice.rs.html\">splice.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/alloc/alloc.rs.html\">alloc.rs</a><a href=\"../../../src/alloc/borrow.rs.html\">borrow.rs</a><a href=\"../../../src/alloc/boxed.rs.html\">boxed.rs</a><a href=\"../../../src/alloc/fmt.rs.html\">fmt.rs</a><a href=\"../../../src/alloc/lib.rs.html\">lib.rs</a><a href=\"../../../src/alloc/macros.rs.html\">macros.rs</a><a href=\"../../../src/alloc/raw_vec.rs.html\">raw_vec.rs</a><a href=\"../../../src/alloc/rc.rs.html\">rc.rs</a><a href=\"../../../src/alloc/slice.rs.html\">slice.rs</a><a href=\"../../../src/alloc/str.rs.html\">str.rs</a><a href=\"../../../src/alloc/string.rs.html\">string.rs</a><a href=\"../../../src/alloc/sync.rs.html\">sync.rs</a><a href=\"../../../src/alloc/task.rs.html\">task.rs</a></div></details><details class=\"dir-entry\"><summary>core</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>alloc</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/alloc/global.rs.html\">global.rs</a><a href=\"../../../src/core/alloc/layout.rs.html\">layout.rs</a><a href=\"../../../src/core/alloc/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>array</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/array/ascii.rs.html\">ascii.rs</a><a href=\"../../../src/core/array/drain.rs.html\">drain.rs</a><a href=\"../../../src/core/array/equality.rs.html\">equality.rs</a><a href=\"../../../src/core/array/iter.rs.html\">iter.rs</a><a href=\"../../../src/core/array/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>ascii</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/ascii/ascii_char.rs.html\">ascii_char.rs</a></div></details><details class=\"dir-entry\"><summary>async_iter</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/async_iter/async_iter.rs.html\">async_iter.rs</a><a href=\"../../../src/core/async_iter/from_iter.rs.html\">from_iter.rs</a><a href=\"../../../src/core/async_iter/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>cell</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/cell/lazy.rs.html\">lazy.rs</a><a href=\"../../../src/core/cell/once.rs.html\">once.rs</a></div></details><details class=\"dir-entry\"><summary>char</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/char/convert.rs.html\">convert.rs</a><a href=\"../../../src/core/char/decode.rs.html\">decode.rs</a><a href=\"../../../src/core/char/methods.rs.html\">methods.rs</a><a href=\"../../../src/core/char/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>cmp</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/cmp/bytewise.rs.html\">bytewise.rs</a></div></details><details class=\"dir-entry\"><summary>convert</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/convert/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/convert/num.rs.html\">num.rs</a></div></details><details class=\"dir-entry\"><summary>ffi</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/ffi/c_str.rs.html\">c_str.rs</a><a href=\"../../../src/core/ffi/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>fmt</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/fmt/builders.rs.html\">builders.rs</a><a href=\"../../../src/core/fmt/float.rs.html\">float.rs</a><a href=\"../../../src/core/fmt/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/fmt/num.rs.html\">num.rs</a><a href=\"../../../src/core/fmt/rt.rs.html\">rt.rs</a></div></details><details class=\"dir-entry\"><summary>future</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/future/async_drop.rs.html\">async_drop.rs</a><a href=\"../../../src/core/future/future.rs.html\">future.rs</a><a href=\"../../../src/core/future/into_future.rs.html\">into_future.rs</a><a href=\"../../../src/core/future/join.rs.html\">join.rs</a><a href=\"../../../src/core/future/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/future/pending.rs.html\">pending.rs</a><a href=\"../../../src/core/future/poll_fn.rs.html\">poll_fn.rs</a><a href=\"../../../src/core/future/ready.rs.html\">ready.rs</a></div></details><details class=\"dir-entry\"><summary>hash</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/hash/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/hash/sip.rs.html\">sip.rs</a></div></details><details class=\"dir-entry\"><summary>intrinsics</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/intrinsics/mir.rs.html\">mir.rs</a><a href=\"../../../src/core/intrinsics/simd.rs.html\">simd.rs</a></div></details><details class=\"dir-entry\"><summary>io</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/io/borrowed_buf.rs.html\">borrowed_buf.rs</a><a href=\"../../../src/core/io/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>iter</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>adapters</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/iter/adapters/array_chunks.rs.html\">array_chunks.rs</a><a href=\"../../../src/core/iter/adapters/by_ref_sized.rs.html\">by_ref_sized.rs</a><a href=\"../../../src/core/iter/adapters/chain.rs.html\">chain.rs</a><a href=\"../../../src/core/iter/adapters/cloned.rs.html\">cloned.rs</a><a href=\"../../../src/core/iter/adapters/copied.rs.html\">copied.rs</a><a href=\"../../../src/core/iter/adapters/cycle.rs.html\">cycle.rs</a><a href=\"../../../src/core/iter/adapters/enumerate.rs.html\">enumerate.rs</a><a href=\"../../../src/core/iter/adapters/filter.rs.html\">filter.rs</a><a href=\"../../../src/core/iter/adapters/filter_map.rs.html\">filter_map.rs</a><a href=\"../../../src/core/iter/adapters/flatten.rs.html\">flatten.rs</a><a href=\"../../../src/core/iter/adapters/fuse.rs.html\">fuse.rs</a><a href=\"../../../src/core/iter/adapters/inspect.rs.html\">inspect.rs</a><a href=\"../../../src/core/iter/adapters/intersperse.rs.html\">intersperse.rs</a><a href=\"../../../src/core/iter/adapters/map.rs.html\">map.rs</a><a href=\"../../../src/core/iter/adapters/map_while.rs.html\">map_while.rs</a><a href=\"../../../src/core/iter/adapters/map_windows.rs.html\">map_windows.rs</a><a href=\"../../../src/core/iter/adapters/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/iter/adapters/peekable.rs.html\">peekable.rs</a><a href=\"../../../src/core/iter/adapters/rev.rs.html\">rev.rs</a><a href=\"../../../src/core/iter/adapters/scan.rs.html\">scan.rs</a><a href=\"../../../src/core/iter/adapters/skip.rs.html\">skip.rs</a><a href=\"../../../src/core/iter/adapters/skip_while.rs.html\">skip_while.rs</a><a href=\"../../../src/core/iter/adapters/step_by.rs.html\">step_by.rs</a><a href=\"../../../src/core/iter/adapters/take.rs.html\">take.rs</a><a href=\"../../../src/core/iter/adapters/take_while.rs.html\">take_while.rs</a><a href=\"../../../src/core/iter/adapters/zip.rs.html\">zip.rs</a></div></details><details class=\"dir-entry\"><summary>sources</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/iter/sources/empty.rs.html\">empty.rs</a><a href=\"../../../src/core/iter/sources/from_coroutine.rs.html\">from_coroutine.rs</a><a href=\"../../../src/core/iter/sources/from_fn.rs.html\">from_fn.rs</a><a href=\"../../../src/core/iter/sources/once.rs.html\">once.rs</a><a href=\"../../../src/core/iter/sources/once_with.rs.html\">once_with.rs</a><a href=\"../../../src/core/iter/sources/repeat.rs.html\">repeat.rs</a><a href=\"../../../src/core/iter/sources/repeat_n.rs.html\">repeat_n.rs</a><a href=\"../../../src/core/iter/sources/repeat_with.rs.html\">repeat_with.rs</a><a href=\"../../../src/core/iter/sources/successors.rs.html\">successors.rs</a></div></details><details class=\"dir-entry\"><summary>traits</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/iter/traits/accum.rs.html\">accum.rs</a><a href=\"../../../src/core/iter/traits/collect.rs.html\">collect.rs</a><a href=\"../../../src/core/iter/traits/double_ended.rs.html\">double_ended.rs</a><a href=\"../../../src/core/iter/traits/exact_size.rs.html\">exact_size.rs</a><a href=\"../../../src/core/iter/traits/iterator.rs.html\">iterator.rs</a><a href=\"../../../src/core/iter/traits/marker.rs.html\">marker.rs</a><a href=\"../../../src/core/iter/traits/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/iter/traits/unchecked_iterator.rs.html\">unchecked_iterator.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/iter/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/iter/range.rs.html\">range.rs</a><a href=\"../../../src/core/iter/sources.rs.html\">sources.rs</a></div></details><details class=\"dir-entry\"><summary>macros</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/macros/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>mem</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/mem/manually_drop.rs.html\">manually_drop.rs</a><a href=\"../../../src/core/mem/maybe_uninit.rs.html\">maybe_uninit.rs</a><a href=\"../../../src/core/mem/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/mem/transmutability.rs.html\">transmutability.rs</a></div></details><details class=\"dir-entry\"><summary>net</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/net/display_buffer.rs.html\">display_buffer.rs</a><a href=\"../../../src/core/net/ip_addr.rs.html\">ip_addr.rs</a><a href=\"../../../src/core/net/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/net/parser.rs.html\">parser.rs</a><a href=\"../../../src/core/net/socket_addr.rs.html\">socket_addr.rs</a></div></details><details class=\"dir-entry\"><summary>num</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>dec2flt</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/num/dec2flt/common.rs.html\">common.rs</a><a href=\"../../../src/core/num/dec2flt/decimal.rs.html\">decimal.rs</a><a href=\"../../../src/core/num/dec2flt/float.rs.html\">float.rs</a><a href=\"../../../src/core/num/dec2flt/fpu.rs.html\">fpu.rs</a><a href=\"../../../src/core/num/dec2flt/lemire.rs.html\">lemire.rs</a><a href=\"../../../src/core/num/dec2flt/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/num/dec2flt/number.rs.html\">number.rs</a><a href=\"../../../src/core/num/dec2flt/parse.rs.html\">parse.rs</a><a href=\"../../../src/core/num/dec2flt/slow.rs.html\">slow.rs</a><a href=\"../../../src/core/num/dec2flt/table.rs.html\">table.rs</a></div></details><details class=\"dir-entry\"><summary>flt2dec</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>strategy</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/num/flt2dec/strategy/dragon.rs.html\">dragon.rs</a><a href=\"../../../src/core/num/flt2dec/strategy/grisu.rs.html\">grisu.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/num/flt2dec/decoder.rs.html\">decoder.rs</a><a href=\"../../../src/core/num/flt2dec/estimator.rs.html\">estimator.rs</a><a href=\"../../../src/core/num/flt2dec/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>shells</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/num/shells/i128.rs.html\">i128.rs</a><a href=\"../../../src/core/num/shells/i16.rs.html\">i16.rs</a><a href=\"../../../src/core/num/shells/i32.rs.html\">i32.rs</a><a href=\"../../../src/core/num/shells/i64.rs.html\">i64.rs</a><a href=\"../../../src/core/num/shells/i8.rs.html\">i8.rs</a><a href=\"../../../src/core/num/shells/int_macros.rs.html\">int_macros.rs</a><a href=\"../../../src/core/num/shells/isize.rs.html\">isize.rs</a><a href=\"../../../src/core/num/shells/u128.rs.html\">u128.rs</a><a href=\"../../../src/core/num/shells/u16.rs.html\">u16.rs</a><a href=\"../../../src/core/num/shells/u32.rs.html\">u32.rs</a><a href=\"../../../src/core/num/shells/u64.rs.html\">u64.rs</a><a href=\"../../../src/core/num/shells/u8.rs.html\">u8.rs</a><a href=\"../../../src/core/num/shells/usize.rs.html\">usize.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/num/bignum.rs.html\">bignum.rs</a><a href=\"../../../src/core/num/diy_float.rs.html\">diy_float.rs</a><a href=\"../../../src/core/num/error.rs.html\">error.rs</a><a href=\"../../../src/core/num/f128.rs.html\">f128.rs</a><a href=\"../../../src/core/num/f16.rs.html\">f16.rs</a><a href=\"../../../src/core/num/f32.rs.html\">f32.rs</a><a href=\"../../../src/core/num/f64.rs.html\">f64.rs</a><a href=\"../../../src/core/num/fmt.rs.html\">fmt.rs</a><a href=\"../../../src/core/num/int_log10.rs.html\">int_log10.rs</a><a href=\"../../../src/core/num/int_macros.rs.html\">int_macros.rs</a><a href=\"../../../src/core/num/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/num/nonzero.rs.html\">nonzero.rs</a><a href=\"../../../src/core/num/overflow_panic.rs.html\">overflow_panic.rs</a><a href=\"../../../src/core/num/saturating.rs.html\">saturating.rs</a><a href=\"../../../src/core/num/uint_macros.rs.html\">uint_macros.rs</a><a href=\"../../../src/core/num/wrapping.rs.html\">wrapping.rs</a></div></details><details class=\"dir-entry\"><summary>ops</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/ops/arith.rs.html\">arith.rs</a><a href=\"../../../src/core/ops/async_function.rs.html\">async_function.rs</a><a href=\"../../../src/core/ops/bit.rs.html\">bit.rs</a><a href=\"../../../src/core/ops/control_flow.rs.html\">control_flow.rs</a><a href=\"../../../src/core/ops/coroutine.rs.html\">coroutine.rs</a><a href=\"../../../src/core/ops/deref.rs.html\">deref.rs</a><a href=\"../../../src/core/ops/drop.rs.html\">drop.rs</a><a href=\"../../../src/core/ops/function.rs.html\">function.rs</a><a href=\"../../../src/core/ops/index.rs.html\">index.rs</a><a href=\"../../../src/core/ops/index_range.rs.html\">index_range.rs</a><a href=\"../../../src/core/ops/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/ops/range.rs.html\">range.rs</a><a href=\"../../../src/core/ops/try_trait.rs.html\">try_trait.rs</a><a href=\"../../../src/core/ops/unsize.rs.html\">unsize.rs</a></div></details><details class=\"dir-entry\"><summary>panic</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/panic/location.rs.html\">location.rs</a><a href=\"../../../src/core/panic/panic_info.rs.html\">panic_info.rs</a><a href=\"../../../src/core/panic/unwind_safe.rs.html\">unwind_safe.rs</a></div></details><details class=\"dir-entry\"><summary>portable-simd</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>crates</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>core_simd</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>src</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>masks</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/portable-simd/crates/core_simd/src/masks/full_masks.rs.html\">full_masks.rs</a></div></details><details class=\"dir-entry\"><summary>ops</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/portable-simd/crates/core_simd/src/ops/assign.rs.html\">assign.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html\">deref.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html\">shift_scalar.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html\">unary.rs</a></div></details><details class=\"dir-entry\"><summary>simd</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>cmp</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html\">eq.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html\">ord.rs</a></div></details><details class=\"dir-entry\"><summary>num</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html\">float.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html\">int.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html\">uint.rs</a></div></details><details class=\"dir-entry\"><summary>ptr</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/ptr/const_ptr.rs.html\">const_ptr.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/ptr/mut_ptr.rs.html\">mut_ptr.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/cmp.rs.html\">cmp.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/num.rs.html\">num.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/prelude.rs.html\">prelude.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/ptr.rs.html\">ptr.rs</a></div></details><details class=\"dir-entry\"><summary>vendor</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html\">x86.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/portable-simd/crates/core_simd/src/alias.rs.html\">alias.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/cast.rs.html\">cast.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/fmt.rs.html\">fmt.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/iter.rs.html\">iter.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/lane_count.rs.html\">lane_count.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/masks.rs.html\">masks.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/ops.rs.html\">ops.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/select.rs.html\">select.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/swizzle.rs.html\">swizzle.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/swizzle_dyn.rs.html\">swizzle_dyn.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html\">to_bytes.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/vector.rs.html\">vector.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/vendor.rs.html\">vendor.rs</a></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details><details class=\"dir-entry\"><summary>prelude</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/prelude/common.rs.html\">common.rs</a><a href=\"../../../src/core/prelude/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>ptr</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/ptr/alignment.rs.html\">alignment.rs</a><a href=\"../../../src/core/ptr/const_ptr.rs.html\">const_ptr.rs</a><a href=\"../../../src/core/ptr/metadata.rs.html\">metadata.rs</a><a href=\"../../../src/core/ptr/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/ptr/mut_ptr.rs.html\">mut_ptr.rs</a><a href=\"../../../src/core/ptr/non_null.rs.html\">non_null.rs</a><a href=\"../../../src/core/ptr/unique.rs.html\">unique.rs</a></div></details><details class=\"dir-entry\"><summary>slice</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>iter</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/slice/iter/macros.rs.html\">macros.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/slice/ascii.rs.html\">ascii.rs</a><a href=\"../../../src/core/slice/cmp.rs.html\">cmp.rs</a><a href=\"../../../src/core/slice/index.rs.html\">index.rs</a><a href=\"../../../src/core/slice/iter.rs.html\">iter.rs</a><a href=\"../../../src/core/slice/memchr.rs.html\">memchr.rs</a><a href=\"../../../src/core/slice/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/slice/raw.rs.html\">raw.rs</a><a href=\"../../../src/core/slice/rotate.rs.html\">rotate.rs</a><a href=\"../../../src/core/slice/select.rs.html\">select.rs</a><a href=\"../../../src/core/slice/sort.rs.html\">sort.rs</a><a href=\"../../../src/core/slice/specialize.rs.html\">specialize.rs</a></div></details><details class=\"dir-entry\"><summary>stdarch</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>crates</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>core_arch</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>src</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>aarch64</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>neon</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/aarch64/neon/generated.rs.html\">generated.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/aarch64/neon/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/aarch64/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/aarch64/prefetch.rs.html\">prefetch.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/aarch64/tme.rs.html\">tme.rs</a></div></details><details class=\"dir-entry\"><summary>arm</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm/dsp.rs.html\">dsp.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm/neon.rs.html\">neon.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm/sat.rs.html\">sat.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm/simd32.rs.html\">simd32.rs</a></div></details><details class=\"dir-entry\"><summary>arm_shared</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>barrier</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm_shared/barrier/cp15.rs.html\">cp15.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm_shared/barrier/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>neon</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm_shared/neon/generated.rs.html\">generated.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm_shared/neon/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm_shared/crc.rs.html\">crc.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm_shared/crypto.rs.html\">crypto.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm_shared/hints.rs.html\">hints.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm_shared/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>loongarch64</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>lasx</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/loongarch64/lasx/generated.rs.html\">generated.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/loongarch64/lasx/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/loongarch64/lasx/types.rs.html\">types.rs</a></div></details><details class=\"dir-entry\"><summary>lsx</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/loongarch64/lsx/generated.rs.html\">generated.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/loongarch64/lsx/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/loongarch64/lsx/types.rs.html\">types.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/loongarch64/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>mips</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/mips/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>nvptx</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/nvptx/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>powerpc</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/powerpc/altivec.rs.html\">altivec.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/powerpc/macros.rs.html\">macros.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/powerpc/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/powerpc/vsx.rs.html\">vsx.rs</a></div></details><details class=\"dir-entry\"><summary>powerpc64</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/powerpc64/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/powerpc64/vsx.rs.html\">vsx.rs</a></div></details><details class=\"dir-entry\"><summary>riscv32</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/riscv32/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/riscv32/zk.rs.html\">zk.rs</a></div></details><details class=\"dir-entry\"><summary>riscv64</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/riscv64/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/riscv64/zk.rs.html\">zk.rs</a></div></details><details class=\"dir-entry\"><summary>riscv_shared</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/riscv_shared/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/riscv_shared/p.rs.html\">p.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/riscv_shared/zb.rs.html\">zb.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/riscv_shared/zk.rs.html\">zk.rs</a></div></details><details class=\"dir-entry\"><summary>wasm32</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/wasm32/atomic.rs.html\">atomic.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/wasm32/memory.rs.html\">memory.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/wasm32/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/wasm32/relaxed_simd.rs.html\">relaxed_simd.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/wasm32/simd128.rs.html\">simd128.rs</a></div></details><details class=\"dir-entry\"><summary>x86</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/abm.rs.html\">abm.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/adx.rs.html\">adx.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/aes.rs.html\">aes.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx.rs.html\">avx.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx2.rs.html\">avx2.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx512bf16.rs.html\">avx512bf16.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx512bitalg.rs.html\">avx512bitalg.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx512bw.rs.html\">avx512bw.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx512cd.rs.html\">avx512cd.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx512f.rs.html\">avx512f.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx512ifma.rs.html\">avx512ifma.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx512vbmi.rs.html\">avx512vbmi.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx512vbmi2.rs.html\">avx512vbmi2.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx512vnni.rs.html\">avx512vnni.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx512vpopcntdq.rs.html\">avx512vpopcntdq.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/bmi1.rs.html\">bmi1.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/bmi2.rs.html\">bmi2.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/bswap.rs.html\">bswap.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/bt.rs.html\">bt.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/cpuid.rs.html\">cpuid.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/eflags.rs.html\">eflags.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/f16c.rs.html\">f16c.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/fma.rs.html\">fma.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/fxsr.rs.html\">fxsr.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/gfni.rs.html\">gfni.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/macros.rs.html\">macros.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/pclmulqdq.rs.html\">pclmulqdq.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/rdrand.rs.html\">rdrand.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/rdtsc.rs.html\">rdtsc.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/rtm.rs.html\">rtm.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/sha.rs.html\">sha.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/sse.rs.html\">sse.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/sse2.rs.html\">sse2.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/sse3.rs.html\">sse3.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/sse41.rs.html\">sse41.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/sse42.rs.html\">sse42.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/sse4a.rs.html\">sse4a.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/ssse3.rs.html\">ssse3.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/tbm.rs.html\">tbm.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/vaes.rs.html\">vaes.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/vpclmulqdq.rs.html\">vpclmulqdq.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/xsave.rs.html\">xsave.rs</a></div></details><details class=\"dir-entry\"><summary>x86_64</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/abm.rs.html\">abm.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/adx.rs.html\">adx.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/avx.rs.html\">avx.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/avx2.rs.html\">avx2.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/avx512f.rs.html\">avx512f.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/bmi.rs.html\">bmi.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/bmi2.rs.html\">bmi2.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/bswap.rs.html\">bswap.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/bt.rs.html\">bt.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/cmpxchg16b.rs.html\">cmpxchg16b.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/fxsr.rs.html\">fxsr.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/macros.rs.html\">macros.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/rdrand.rs.html\">rdrand.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/sse.rs.html\">sse.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/sse2.rs.html\">sse2.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/sse41.rs.html\">sse41.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/sse42.rs.html\">sse42.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/xsave.rs.html\">xsave.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/macros.rs.html\">macros.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/simd.rs.html\">simd.rs</a></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details><details class=\"dir-entry\"><summary>str</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/str/converts.rs.html\">converts.rs</a><a href=\"../../../src/core/str/count.rs.html\">count.rs</a><a href=\"../../../src/core/str/error.rs.html\">error.rs</a><a href=\"../../../src/core/str/iter.rs.html\">iter.rs</a><a href=\"../../../src/core/str/lossy.rs.html\">lossy.rs</a><a href=\"../../../src/core/str/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/str/pattern.rs.html\">pattern.rs</a><a href=\"../../../src/core/str/traits.rs.html\">traits.rs</a><a href=\"../../../src/core/str/validations.rs.html\">validations.rs</a></div></details><details class=\"dir-entry\"><summary>sync</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/sync/atomic.rs.html\">atomic.rs</a><a href=\"../../../src/core/sync/exclusive.rs.html\">exclusive.rs</a><a href=\"../../../src/core/sync/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>task</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/task/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/task/poll.rs.html\">poll.rs</a><a href=\"../../../src/core/task/ready.rs.html\">ready.rs</a><a href=\"../../../src/core/task/wake.rs.html\">wake.rs</a></div></details><details class=\"dir-entry\"><summary>unicode</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/unicode/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/unicode/printable.rs.html\">printable.rs</a><a href=\"../../../src/core/unicode/unicode_data.rs.html\">unicode_data.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/any.rs.html\">any.rs</a><a href=\"../../../src/core/arch.rs.html\">arch.rs</a><a href=\"../../../src/core/ascii.rs.html\">ascii.rs</a><a href=\"../../../src/core/asserting.rs.html\">asserting.rs</a><a href=\"../../../src/core/bool.rs.html\">bool.rs</a><a href=\"../../../src/core/borrow.rs.html\">borrow.rs</a><a href=\"../../../src/core/cell.rs.html\">cell.rs</a><a href=\"../../../src/core/clone.rs.html\">clone.rs</a><a href=\"../../../src/core/cmp.rs.html\">cmp.rs</a><a href=\"../../../src/core/default.rs.html\">default.rs</a><a href=\"../../../src/core/error.rs.html\">error.rs</a><a href=\"../../../src/core/escape.rs.html\">escape.rs</a><a href=\"../../../src/core/hint.rs.html\">hint.rs</a><a href=\"../../../src/core/internal_macros.rs.html\">internal_macros.rs</a><a href=\"../../../src/core/intrinsics.rs.html\">intrinsics.rs</a><a href=\"../../../src/core/lib.rs.html\">lib.rs</a><a href=\"../../../src/core/marker.rs.html\">marker.rs</a><a href=\"../../../src/core/option.rs.html\">option.rs</a><a href=\"../../../src/core/panic.rs.html\">panic.rs</a><a href=\"../../../src/core/panicking.rs.html\">panicking.rs</a><a href=\"../../../src/core/pat.rs.html\">pat.rs</a><a href=\"../../../src/core/pin.rs.html\">pin.rs</a><a href=\"../../../src/core/primitive.rs.html\">primitive.rs</a><a href=\"../../../src/core/primitive_docs.rs.html\">primitive_docs.rs</a><a href=\"../../../src/core/result.rs.html\">result.rs</a><a href=\"../../../src/core/time.rs.html\">time.rs</a><a href=\"../../../src/core/tuple.rs.html\">tuple.rs</a><a href=\"../../../src/core/ub_checks.rs.html\">ub_checks.rs</a><a href=\"../../../src/core/unit.rs.html\">unit.rs</a></div></details><details class=\"dir-entry\"><summary>proc_macro</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>bridge</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/proc_macro/bridge/arena.rs.html\">arena.rs</a><a href=\"../../../src/proc_macro/bridge/buffer.rs.html\">buffer.rs</a><a href=\"../../../src/proc_macro/bridge/client.rs.html\">client.rs</a><a href=\"../../../src/proc_macro/bridge/closure.rs.html\">closure.rs</a><a href=\"../../../src/proc_macro/bridge/fxhash.rs.html\">fxhash.rs</a><a href=\"../../../src/proc_macro/bridge/handle.rs.html\">handle.rs</a><a href=\"../../../src/proc_macro/bridge/mod.rs.html\">mod.rs</a><a href=\"../../../src/proc_macro/bridge/rpc.rs.html\">rpc.rs</a><a href=\"../../../src/proc_macro/bridge/selfless_reify.rs.html\">selfless_reify.rs</a><a href=\"../../../src/proc_macro/bridge/server.rs.html\">server.rs</a><a href=\"../../../src/proc_macro/bridge/symbol.rs.html\">symbol.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/proc_macro/diagnostic.rs.html\">diagnostic.rs</a><a href=\"../../../src/proc_macro/lib.rs.html\">lib.rs</a><a href=\"../../../src/proc_macro/quote.rs.html\">quote.rs</a></div></details><details class=\"dir-entry\"><summary>std</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>backtrace</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>src</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>backtrace</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/backtrace/src/backtrace/libunwind.rs.html\">libunwind.rs</a><a href=\"../../../src/std/backtrace/src/backtrace/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>symbolize</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>gimli</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/backtrace/src/symbolize/gimli/elf.rs.html\">elf.rs</a><a href=\"../../../src/std/backtrace/src/symbolize/gimli/libs_dl_iterate_phdr.rs.html\">libs_dl_iterate_phdr.rs</a><a href=\"../../../src/std/backtrace/src/symbolize/gimli/mmap_unix.rs.html\">mmap_unix.rs</a><a href=\"../../../src/std/backtrace/src/symbolize/gimli/parse_running_mmaps_unix.rs.html\">parse_running_mmaps_unix.rs</a><a href=\"../../../src/std/backtrace/src/symbolize/gimli/stash.rs.html\">stash.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/backtrace/src/symbolize/gimli.rs.html\">gimli.rs</a><a href=\"../../../src/std/backtrace/src/symbolize/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/backtrace/src/lib.rs.html\">lib.rs</a><a href=\"../../../src/std/backtrace/src/print.rs.html\">print.rs</a><a href=\"../../../src/std/backtrace/src/types.rs.html\">types.rs</a></div></details></div><div class=\"files\"></div></details><details class=\"dir-entry\"><summary>collections</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>hash</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/collections/hash/map.rs.html\">map.rs</a><a href=\"../../../src/std/collections/hash/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/collections/hash/set.rs.html\">set.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/collections/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>core</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>src</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/core/src/primitive_docs.rs.html\">primitive_docs.rs</a></div></details></div><div class=\"files\"></div></details><details class=\"dir-entry\"><summary>ffi</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/ffi/c_str.rs.html\">c_str.rs</a><a href=\"../../../src/std/ffi/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/ffi/os_str.rs.html\">os_str.rs</a></div></details><details class=\"dir-entry\"><summary>hash</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/hash/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/hash/random.rs.html\">random.rs</a></div></details><details class=\"dir-entry\"><summary>io</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>buffered</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>bufreader</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/io/buffered/bufreader/buffer.rs.html\">buffer.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/io/buffered/bufreader.rs.html\">bufreader.rs</a><a href=\"../../../src/std/io/buffered/bufwriter.rs.html\">bufwriter.rs</a><a href=\"../../../src/std/io/buffered/linewriter.rs.html\">linewriter.rs</a><a href=\"../../../src/std/io/buffered/linewritershim.rs.html\">linewritershim.rs</a><a href=\"../../../src/std/io/buffered/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>error</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/io/error/repr_bitpacked.rs.html\">repr_bitpacked.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/io/copy.rs.html\">copy.rs</a><a href=\"../../../src/std/io/cursor.rs.html\">cursor.rs</a><a href=\"../../../src/std/io/error.rs.html\">error.rs</a><a href=\"../../../src/std/io/impls.rs.html\">impls.rs</a><a href=\"../../../src/std/io/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/io/prelude.rs.html\">prelude.rs</a><a href=\"../../../src/std/io/stdio.rs.html\">stdio.rs</a><a href=\"../../../src/std/io/util.rs.html\">util.rs</a></div></details><details class=\"dir-entry\"><summary>net</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/net/ip_addr.rs.html\">ip_addr.rs</a><a href=\"../../../src/std/net/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/net/socket_addr.rs.html\">socket_addr.rs</a><a href=\"../../../src/std/net/tcp.rs.html\">tcp.rs</a><a href=\"../../../src/std/net/udp.rs.html\">udp.rs</a></div></details><details class=\"dir-entry\"><summary>os</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>fd</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/fd/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/os/fd/net.rs.html\">net.rs</a><a href=\"../../../src/std/os/fd/owned.rs.html\">owned.rs</a><a href=\"../../../src/std/os/fd/raw.rs.html\">raw.rs</a></div></details><details class=\"dir-entry\"><summary>linux</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/linux/fs.rs.html\">fs.rs</a><a href=\"../../../src/std/os/linux/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/os/linux/net.rs.html\">net.rs</a><a href=\"../../../src/std/os/linux/process.rs.html\">process.rs</a><a href=\"../../../src/std/os/linux/raw.rs.html\">raw.rs</a></div></details><details class=\"dir-entry\"><summary>net</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>linux_ext</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/net/linux_ext/addr.rs.html\">addr.rs</a><a href=\"../../../src/std/os/net/linux_ext/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/os/net/linux_ext/socket.rs.html\">socket.rs</a><a href=\"../../../src/std/os/net/linux_ext/tcp.rs.html\">tcp.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/os/net/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>raw</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/raw/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>unix</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>ffi</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/unix/ffi/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/os/unix/ffi/os_str.rs.html\">os_str.rs</a></div></details><details class=\"dir-entry\"><summary>io</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/unix/io/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>net</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/unix/net/addr.rs.html\">addr.rs</a><a href=\"../../../src/std/os/unix/net/ancillary.rs.html\">ancillary.rs</a><a href=\"../../../src/std/os/unix/net/datagram.rs.html\">datagram.rs</a><a href=\"../../../src/std/os/unix/net/listener.rs.html\">listener.rs</a><a href=\"../../../src/std/os/unix/net/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/os/unix/net/stream.rs.html\">stream.rs</a><a href=\"../../../src/std/os/unix/net/ucred.rs.html\">ucred.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/os/unix/fs.rs.html\">fs.rs</a><a href=\"../../../src/std/os/unix/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/os/unix/process.rs.html\">process.rs</a><a href=\"../../../src/std/os/unix/raw.rs.html\">raw.rs</a><a href=\"../../../src/std/os/unix/thread.rs.html\">thread.rs</a></div></details><details class=\"dir-entry\"><summary>wasi</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>io</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/wasi/io/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>net</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/wasi/net/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/os/wasi/ffi.rs.html\">ffi.rs</a><a href=\"../../../src/std/os/wasi/fs.rs.html\">fs.rs</a><a href=\"../../../src/std/os/wasi/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>wasip2</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/wasip2/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>windows</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>io</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/windows/io/handle.rs.html\">handle.rs</a><a href=\"../../../src/std/os/windows/io/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/os/windows/io/raw.rs.html\">raw.rs</a><a href=\"../../../src/std/os/windows/io/socket.rs.html\">socket.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/os/windows/ffi.rs.html\">ffi.rs</a><a href=\"../../../src/std/os/windows/fs.rs.html\">fs.rs</a><a href=\"../../../src/std/os/windows/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/os/windows/process.rs.html\">process.rs</a><a href=\"../../../src/std/os/windows/raw.rs.html\">raw.rs</a><a href=\"../../../src/std/os/windows/thread.rs.html\">thread.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/os/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>portable-simd</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>crates</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>std_float</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>src</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/portable-simd/crates/std_float/src/lib.rs.html\">lib.rs</a></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details><details class=\"dir-entry\"><summary>prelude</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/prelude/common.rs.html\">common.rs</a><a href=\"../../../src/std/prelude/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>sync</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>mpmc</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sync/mpmc/array.rs.html\">array.rs</a><a href=\"../../../src/std/sync/mpmc/context.rs.html\">context.rs</a><a href=\"../../../src/std/sync/mpmc/counter.rs.html\">counter.rs</a><a href=\"../../../src/std/sync/mpmc/error.rs.html\">error.rs</a><a href=\"../../../src/std/sync/mpmc/list.rs.html\">list.rs</a><a href=\"../../../src/std/sync/mpmc/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/sync/mpmc/select.rs.html\">select.rs</a><a href=\"../../../src/std/sync/mpmc/utils.rs.html\">utils.rs</a><a href=\"../../../src/std/sync/mpmc/waker.rs.html\">waker.rs</a><a href=\"../../../src/std/sync/mpmc/zero.rs.html\">zero.rs</a></div></details><details class=\"dir-entry\"><summary>mpsc</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sync/mpsc/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/sync/barrier.rs.html\">barrier.rs</a><a href=\"../../../src/std/sync/condvar.rs.html\">condvar.rs</a><a href=\"../../../src/std/sync/lazy_lock.rs.html\">lazy_lock.rs</a><a href=\"../../../src/std/sync/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/sync/mutex.rs.html\">mutex.rs</a><a href=\"../../../src/std/sync/once.rs.html\">once.rs</a><a href=\"../../../src/std/sync/once_lock.rs.html\">once_lock.rs</a><a href=\"../../../src/std/sync/poison.rs.html\">poison.rs</a><a href=\"../../../src/std/sync/reentrant_lock.rs.html\">reentrant_lock.rs</a><a href=\"../../../src/std/sync/rwlock.rs.html\">rwlock.rs</a></div></details><details class=\"dir-entry\"><summary>sys</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>os_str</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/os_str/bytes.rs.html\">bytes.rs</a><a href=\"../../../src/std/sys/os_str/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>pal</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>common</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/pal/common/alloc.rs.html\">alloc.rs</a><a href=\"../../../src/std/sys/pal/common/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/sys/pal/common/small_c_string.rs.html\">small_c_string.rs</a></div></details><details class=\"dir-entry\"><summary>unix</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>process</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/pal/unix/process/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/sys/pal/unix/process/process_common.rs.html\">process_common.rs</a><a href=\"../../../src/std/sys/pal/unix/process/process_unix.rs.html\">process_unix.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/sys/pal/unix/alloc.rs.html\">alloc.rs</a><a href=\"../../../src/std/sys/pal/unix/args.rs.html\">args.rs</a><a href=\"../../../src/std/sys/pal/unix/env.rs.html\">env.rs</a><a href=\"../../../src/std/sys/pal/unix/fd.rs.html\">fd.rs</a><a href=\"../../../src/std/sys/pal/unix/fs.rs.html\">fs.rs</a><a href=\"../../../src/std/sys/pal/unix/futex.rs.html\">futex.rs</a><a href=\"../../../src/std/sys/pal/unix/io.rs.html\">io.rs</a><a href=\"../../../src/std/sys/pal/unix/kernel_copy.rs.html\">kernel_copy.rs</a><a href=\"../../../src/std/sys/pal/unix/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/sys/pal/unix/net.rs.html\">net.rs</a><a href=\"../../../src/std/sys/pal/unix/os.rs.html\">os.rs</a><a href=\"../../../src/std/sys/pal/unix/pipe.rs.html\">pipe.rs</a><a href=\"../../../src/std/sys/pal/unix/rand.rs.html\">rand.rs</a><a href=\"../../../src/std/sys/pal/unix/stack_overflow.rs.html\">stack_overflow.rs</a><a href=\"../../../src/std/sys/pal/unix/stdio.rs.html\">stdio.rs</a><a href=\"../../../src/std/sys/pal/unix/thread.rs.html\">thread.rs</a><a href=\"../../../src/std/sys/pal/unix/thread_local_dtor.rs.html\">thread_local_dtor.rs</a><a href=\"../../../src/std/sys/pal/unix/thread_local_key.rs.html\">thread_local_key.rs</a><a href=\"../../../src/std/sys/pal/unix/time.rs.html\">time.rs</a><a href=\"../../../src/std/sys/pal/unix/weak.rs.html\">weak.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/sys/pal/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>path</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/path/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/sys/path/unix.rs.html\">unix.rs</a></div></details><details class=\"dir-entry\"><summary>personality</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>dwarf</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/personality/dwarf/eh.rs.html\">eh.rs</a><a href=\"../../../src/std/sys/personality/dwarf/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/sys/personality/gcc.rs.html\">gcc.rs</a><a href=\"../../../src/std/sys/personality/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>sync</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>condvar</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/sync/condvar/futex.rs.html\">futex.rs</a><a href=\"../../../src/std/sys/sync/condvar/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>mutex</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/sync/mutex/futex.rs.html\">futex.rs</a><a href=\"../../../src/std/sys/sync/mutex/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>once</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/sync/once/futex.rs.html\">futex.rs</a><a href=\"../../../src/std/sys/sync/once/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>rwlock</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/sync/rwlock/futex.rs.html\">futex.rs</a><a href=\"../../../src/std/sys/sync/rwlock/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>thread_parking</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/sync/thread_parking/futex.rs.html\">futex.rs</a><a href=\"../../../src/std/sys/sync/thread_parking/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/sys/sync/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>thread_local</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>fast_local</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/thread_local/fast_local/eager.rs.html\">eager.rs</a><a href=\"../../../src/std/sys/thread_local/fast_local/lazy.rs.html\">lazy.rs</a><a href=\"../../../src/std/sys/thread_local/fast_local/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/sys/thread_local/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/sys/cmath.rs.html\">cmath.rs</a><a href=\"../../../src/std/sys/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>sys_common</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys_common/backtrace.rs.html\">backtrace.rs</a><a href=\"../../../src/std/sys_common/fs.rs.html\">fs.rs</a><a href=\"../../../src/std/sys_common/io.rs.html\">io.rs</a><a href=\"../../../src/std/sys_common/lazy_box.rs.html\">lazy_box.rs</a><a href=\"../../../src/std/sys_common/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/sys_common/net.rs.html\">net.rs</a><a href=\"../../../src/std/sys_common/process.rs.html\">process.rs</a><a href=\"../../../src/std/sys_common/thread_local_dtor.rs.html\">thread_local_dtor.rs</a><a href=\"../../../src/std/sys_common/thread_local_key.rs.html\">thread_local_key.rs</a><a href=\"../../../src/std/sys_common/wstr.rs.html\">wstr.rs</a><a href=\"../../../src/std/sys_common/wtf8.rs.html\">wtf8.rs</a></div></details><details class=\"dir-entry\"><summary>thread</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/thread/local.rs.html\">local.rs</a><a href=\"../../../src/std/thread/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/thread/scoped.rs.html\">scoped.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/alloc.rs.html\">alloc.rs</a><a href=\"../../../src/std/ascii.rs.html\">ascii.rs</a><a href=\"../../../src/std/backtrace.rs.html\">backtrace.rs</a><a href=\"../../../src/std/env.rs.html\">env.rs</a><a href=\"../../../src/std/error.rs.html\">error.rs</a><a href=\"../../../src/std/f128.rs.html\">f128.rs</a><a href=\"../../../src/std/f16.rs.html\">f16.rs</a><a href=\"../../../src/std/f32.rs.html\">f32.rs</a><a href=\"../../../src/std/f64.rs.html\">f64.rs</a><a href=\"../../../src/std/fs.rs.html\">fs.rs</a><a href=\"../../../src/std/keyword_docs.rs.html\">keyword_docs.rs</a><a href=\"../../../src/std/lib.rs.html\">lib.rs</a><a href=\"../../../src/std/macros.rs.html\">macros.rs</a><a href=\"../../../src/std/num.rs.html\">num.rs</a><a href=\"../../../src/std/panic.rs.html\">panic.rs</a><a href=\"../../../src/std/panicking.rs.html\">panicking.rs</a><a href=\"../../../src/std/pat.rs.html\">pat.rs</a><a href=\"../../../src/std/path.rs.html\">path.rs</a><a href=\"../../../src/std/process.rs.html\">process.rs</a><a href=\"../../../src/std/rt.rs.html\">rt.rs</a><a href=\"../../../src/std/time.rs.html\">time.rs</a></div></details><details class=\"dir-entry\"><summary>test</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>formatters</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/test/formatters/json.rs.html\">json.rs</a><a href=\"../../../src/test/formatters/junit.rs.html\">junit.rs</a><a href=\"../../../src/test/formatters/mod.rs.html\">mod.rs</a><a href=\"../../../src/test/formatters/pretty.rs.html\">pretty.rs</a><a href=\"../../../src/test/formatters/terse.rs.html\">terse.rs</a></div></details><details class=\"dir-entry\"><summary>helpers</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/test/helpers/concurrency.rs.html\">concurrency.rs</a><a href=\"../../../src/test/helpers/metrics.rs.html\">metrics.rs</a><a href=\"../../../src/test/helpers/mod.rs.html\">mod.rs</a><a href=\"../../../src/test/helpers/shuffle.rs.html\">shuffle.rs</a></div></details><details class=\"dir-entry\"><summary>term</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>terminfo</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>parser</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/test/term/terminfo/parser/compiled.rs.html\">compiled.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/test/term/terminfo/mod.rs.html\">mod.rs</a><a href=\"../../../src/test/term/terminfo/parm.rs.html\">parm.rs</a><a href=\"../../../src/test/term/terminfo/searcher.rs.html\">searcher.rs</a></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"><a href=\"../../../src/test/bench.rs.html\">bench.rs</a><a href=\"../../../src/test/cli.rs.html\">cli.rs</a><a href=\"../../../src/test/console.rs.html\">console.rs</a><a href=\"../../../src/test/event.rs.html\">event.rs</a><a href=\"../../../src/test/lib.rs.html\">lib.rs</a><a href=\"../../../src/test/options.rs.html\">options.rs</a><a href=\"../../../src/test/stats.rs.html\">stats.rs</a><a href=\"../../../src/test/term.rs.html\">term.rs</a><a href=\"../../../src/test/test_result.rs.html\">test_result.rs</a><a href=\"../../../src/test/time.rs.html\">time.rs</a><a href=\"../../../src/test/types.rs.html\">types.rs</a></div></details></div></nav><div class=\"sidebar-resizer\"></div><main><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../../alloc/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"example-wrap\"><div data-nosnippet=\"\"><pre class=\"src-line-numbers\"><a href=\"#1\" id=\"1\">1</a>\n<a href=\"#2\" id=\"2\">2</a>\n<a href=\"#3\" id=\"3\">3</a>\n<a href=\"#4\" id=\"4\">4</a>\n<a href=\"#5\" id=\"5\">5</a>\n<a href=\"#6\" id=\"6\">6</a>\n<a href=\"#7\" id=\"7\">7</a>\n<a href=\"#8\" id=\"8\">8</a>\n<a href=\"#9\" id=\"9\">9</a>\n<a href=\"#10\" id=\"10\">10</a>\n<a href=\"#11\" id=\"11\">11</a>\n<a href=\"#12\" id=\"12\">12</a>\n<a href=\"#13\" id=\"13\">13</a>\n<a href=\"#14\" id=\"14\">14</a>\n<a href=\"#15\" id=\"15\">15</a>\n<a href=\"#16\" id=\"16\">16</a>\n<a href=\"#17\" id=\"17\">17</a>\n<a href=\"#18\" id=\"18\">18</a>\n<a href=\"#19\" id=\"19\">19</a>\n<a href=\"#20\" id=\"20\">20</a>\n<a href=\"#21\" id=\"21\">21</a>\n<a href=\"#22\" id=\"22\">22</a>\n<a href=\"#23\" id=\"23\">23</a>\n<a href=\"#24\" id=\"24\">24</a>\n<a href=\"#25\" id=\"25\">25</a>\n<a href=\"#26\" id=\"26\">26</a>\n<a href=\"#27\" id=\"27\">27</a>\n<a href=\"#28\" id=\"28\">28</a>\n<a href=\"#29\" id=\"29\">29</a>\n<a href=\"#30\" id=\"30\">30</a>\n<a href=\"#31\" id=\"31\">31</a>\n<a href=\"#32\" id=\"32\">32</a>\n<a href=\"#33\" id=\"33\">33</a>\n<a href=\"#34\" id=\"34\">34</a>\n<a href=\"#35\" id=\"35\">35</a>\n<a href=\"#36\" id=\"36\">36</a>\n<a href=\"#37\" id=\"37\">37</a>\n<a href=\"#38\" id=\"38\">38</a>\n<a href=\"#39\" id=\"39\">39</a>\n<a href=\"#40\" id=\"40\">40</a>\n<a href=\"#41\" id=\"41\">41</a>\n<a href=\"#42\" id=\"42\">42</a>\n<a href=\"#43\" id=\"43\">43</a>\n<a href=\"#44\" id=\"44\">44</a>\n<a href=\"#45\" id=\"45\">45</a>\n<a href=\"#46\" id=\"46\">46</a>\n<a href=\"#47\" id=\"47\">47</a>\n<a href=\"#48\" id=\"48\">48</a>\n<a href=\"#49\" id=\"49\">49</a>\n<a href=\"#50\" id=\"50\">50</a>\n<a href=\"#51\" id=\"51\">51</a>\n<a href=\"#52\" id=\"52\">52</a>\n<a href=\"#53\" id=\"53\">53</a>\n<a href=\"#54\" id=\"54\">54</a>\n<a href=\"#55\" id=\"55\">55</a>\n<a href=\"#56\" id=\"56\">56</a>\n<a href=\"#57\" id=\"57\">57</a>\n<a href=\"#58\" id=\"58\">58</a>\n<a href=\"#59\" id=\"59\">59</a>\n<a href=\"#60\" id=\"60\">60</a>\n<a href=\"#61\" id=\"61\">61</a>\n<a href=\"#62\" id=\"62\">62</a>\n<a href=\"#63\" id=\"63\">63</a>\n<a href=\"#64\" id=\"64\">64</a>\n<a href=\"#65\" id=\"65\">65</a>\n<a href=\"#66\" id=\"66\">66</a>\n<a href=\"#67\" id=\"67\">67</a>\n<a href=\"#68\" id=\"68\">68</a>\n<a href=\"#69\" id=\"69\">69</a>\n<a href=\"#70\" id=\"70\">70</a>\n<a href=\"#71\" id=\"71\">71</a>\n<a href=\"#72\" id=\"72\">72</a>\n<a href=\"#73\" id=\"73\">73</a>\n<a href=\"#74\" id=\"74\">74</a>\n<a href=\"#75\" id=\"75\">75</a>\n<a href=\"#76\" id=\"76\">76</a>\n<a href=\"#77\" id=\"77\">77</a>\n<a href=\"#78\" id=\"78\">78</a>\n<a href=\"#79\" id=\"79\">79</a>\n<a href=\"#80\" id=\"80\">80</a>\n<a href=\"#81\" id=\"81\">81</a>\n<a href=\"#82\" id=\"82\">82</a>\n<a href=\"#83\" id=\"83\">83</a>\n<a href=\"#84\" id=\"84\">84</a>\n<a href=\"#85\" id=\"85\">85</a>\n<a href=\"#86\" id=\"86\">86</a>\n<a href=\"#87\" id=\"87\">87</a>\n<a href=\"#88\" id=\"88\">88</a>\n<a href=\"#89\" id=\"89\">89</a>\n<a href=\"#90\" id=\"90\">90</a>\n<a href=\"#91\" id=\"91\">91</a>\n<a href=\"#92\" id=\"92\">92</a>\n<a href=\"#93\" id=\"93\">93</a>\n<a href=\"#94\" id=\"94\">94</a>\n<a href=\"#95\" id=\"95\">95</a>\n<a href=\"#96\" id=\"96\">96</a>\n<a href=\"#97\" id=\"97\">97</a>\n<a href=\"#98\" id=\"98\">98</a>\n<a href=\"#99\" id=\"99\">99</a>\n<a href=\"#100\" id=\"100\">100</a>\n<a href=\"#101\" id=\"101\">101</a>\n<a href=\"#102\" id=\"102\">102</a>\n<a href=\"#103\" id=\"103\">103</a>\n<a href=\"#104\" id=\"104\">104</a>\n<a href=\"#105\" id=\"105\">105</a>\n<a href=\"#106\" id=\"106\">106</a>\n<a href=\"#107\" id=\"107\">107</a>\n<a href=\"#108\" id=\"108\">108</a>\n<a href=\"#109\" id=\"109\">109</a>\n<a href=\"#110\" id=\"110\">110</a>\n<a href=\"#111\" id=\"111\">111</a>\n<a href=\"#112\" id=\"112\">112</a>\n<a href=\"#113\" id=\"113\">113</a>\n<a href=\"#114\" id=\"114\">114</a>\n<a href=\"#115\" id=\"115\">115</a>\n<a href=\"#116\" id=\"116\">116</a>\n<a href=\"#117\" id=\"117\">117</a>\n<a href=\"#118\" id=\"118\">118</a>\n<a href=\"#119\" id=\"119\">119</a>\n<a href=\"#120\" id=\"120\">120</a>\n<a href=\"#121\" id=\"121\">121</a>\n<a href=\"#122\" id=\"122\">122</a>\n<a href=\"#123\" id=\"123\">123</a>\n<a href=\"#124\" id=\"124\">124</a>\n<a href=\"#125\" id=\"125\">125</a>\n<a href=\"#126\" id=\"126\">126</a>\n<a href=\"#127\" id=\"127\">127</a>\n<a href=\"#128\" id=\"128\">128</a>\n<a href=\"#129\" id=\"129\">129</a>\n<a href=\"#130\" id=\"130\">130</a>\n<a href=\"#131\" id=\"131\">131</a>\n<a href=\"#132\" id=\"132\">132</a>\n<a href=\"#133\" id=\"133\">133</a>\n<a href=\"#134\" id=\"134\">134</a>\n<a href=\"#135\" id=\"135\">135</a>\n<a href=\"#136\" id=\"136\">136</a>\n<a href=\"#137\" id=\"137\">137</a>\n<a href=\"#138\" id=\"138\">138</a>\n<a href=\"#139\" id=\"139\">139</a>\n<a href=\"#140\" id=\"140\">140</a>\n<a href=\"#141\" id=\"141\">141</a>\n<a href=\"#142\" id=\"142\">142</a>\n<a href=\"#143\" id=\"143\">143</a>\n<a href=\"#144\" id=\"144\">144</a>\n<a href=\"#145\" id=\"145\">145</a>\n<a href=\"#146\" id=\"146\">146</a>\n<a href=\"#147\" id=\"147\">147</a>\n<a href=\"#148\" id=\"148\">148</a>\n<a href=\"#149\" id=\"149\">149</a>\n<a href=\"#150\" id=\"150\">150</a>\n<a href=\"#151\" id=\"151\">151</a>\n<a href=\"#152\" id=\"152\">152</a>\n<a href=\"#153\" id=\"153\">153</a>\n<a href=\"#154\" id=\"154\">154</a>\n<a href=\"#155\" id=\"155\">155</a>\n<a href=\"#156\" id=\"156\">156</a>\n<a href=\"#157\" id=\"157\">157</a>\n<a href=\"#158\" id=\"158\">158</a>\n<a href=\"#159\" id=\"159\">159</a>\n<a href=\"#160\" id=\"160\">160</a>\n<a href=\"#161\" id=\"161\">161</a>\n<a href=\"#162\" id=\"162\">162</a>\n<a href=\"#163\" id=\"163\">163</a>\n<a href=\"#164\" id=\"164\">164</a>\n<a href=\"#165\" id=\"165\">165</a>\n<a href=\"#166\" id=\"166\">166</a>\n<a href=\"#167\" id=\"167\">167</a>\n<a href=\"#168\" id=\"168\">168</a>\n<a href=\"#169\" id=\"169\">169</a>\n<a href=\"#170\" id=\"170\">170</a>\n<a href=\"#171\" id=\"171\">171</a>\n<a href=\"#172\" id=\"172\">172</a>\n<a href=\"#173\" id=\"173\">173</a>\n<a href=\"#174\" id=\"174\">174</a>\n<a href=\"#175\" id=\"175\">175</a>\n<a href=\"#176\" id=\"176\">176</a>\n<a href=\"#177\" id=\"177\">177</a>\n<a href=\"#178\" id=\"178\">178</a>\n<a href=\"#179\" id=\"179\">179</a>\n<a href=\"#180\" id=\"180\">180</a>\n<a href=\"#181\" id=\"181\">181</a>\n<a href=\"#182\" id=\"182\">182</a>\n<a href=\"#183\" id=\"183\">183</a>\n<a href=\"#184\" id=\"184\">184</a>\n<a href=\"#185\" id=\"185\">185</a>\n<a href=\"#186\" id=\"186\">186</a>\n<a href=\"#187\" id=\"187\">187</a>\n<a href=\"#188\" id=\"188\">188</a>\n<a href=\"#189\" id=\"189\">189</a>\n<a href=\"#190\" id=\"190\">190</a>\n<a href=\"#191\" id=\"191\">191</a>\n<a href=\"#192\" id=\"192\">192</a>\n<a href=\"#193\" id=\"193\">193</a>\n<a href=\"#194\" id=\"194\">194</a>\n<a href=\"#195\" id=\"195\">195</a>\n<a href=\"#196\" id=\"196\">196</a>\n<a href=\"#197\" id=\"197\">197</a>\n<a href=\"#198\" id=\"198\">198</a>\n<a href=\"#199\" id=\"199\">199</a>\n<a href=\"#200\" id=\"200\">200</a>\n<a href=\"#201\" id=\"201\">201</a>\n<a href=\"#202\" id=\"202\">202</a>\n<a href=\"#203\" id=\"203\">203</a>\n<a href=\"#204\" id=\"204\">204</a>\n<a href=\"#205\" id=\"205\">205</a>\n<a href=\"#206\" id=\"206\">206</a>\n<a href=\"#207\" id=\"207\">207</a>\n<a href=\"#208\" id=\"208\">208</a>\n<a href=\"#209\" id=\"209\">209</a>\n<a href=\"#210\" id=\"210\">210</a>\n<a href=\"#211\" id=\"211\">211</a>\n<a href=\"#212\" id=\"212\">212</a>\n<a href=\"#213\" id=\"213\">213</a>\n<a href=\"#214\" id=\"214\">214</a>\n<a href=\"#215\" id=\"215\">215</a>\n<a href=\"#216\" id=\"216\">216</a>\n<a href=\"#217\" id=\"217\">217</a>\n<a href=\"#218\" id=\"218\">218</a>\n<a href=\"#219\" id=\"219\">219</a>\n<a href=\"#220\" id=\"220\">220</a>\n<a href=\"#221\" id=\"221\">221</a>\n<a href=\"#222\" id=\"222\">222</a>\n<a href=\"#223\" id=\"223\">223</a>\n<a href=\"#224\" id=\"224\">224</a>\n<a href=\"#225\" id=\"225\">225</a>\n<a href=\"#226\" id=\"226\">226</a>\n<a href=\"#227\" id=\"227\">227</a>\n<a href=\"#228\" id=\"228\">228</a>\n<a href=\"#229\" id=\"229\">229</a>\n<a href=\"#230\" id=\"230\">230</a>\n<a href=\"#231\" id=\"231\">231</a>\n<a href=\"#232\" id=\"232\">232</a>\n<a href=\"#233\" id=\"233\">233</a>\n<a href=\"#234\" id=\"234\">234</a>\n<a href=\"#235\" id=\"235\">235</a>\n<a href=\"#236\" id=\"236\">236</a>\n<a href=\"#237\" id=\"237\">237</a>\n<a href=\"#238\" id=\"238\">238</a>\n<a href=\"#239\" id=\"239\">239</a>\n<a href=\"#240\" id=\"240\">240</a>\n<a href=\"#241\" id=\"241\">241</a>\n<a href=\"#242\" id=\"242\">242</a>\n<a href=\"#243\" id=\"243\">243</a>\n<a href=\"#244\" id=\"244\">244</a>\n<a href=\"#245\" id=\"245\">245</a>\n<a href=\"#246\" id=\"246\">246</a>\n<a href=\"#247\" id=\"247\">247</a>\n<a href=\"#248\" id=\"248\">248</a>\n<a href=\"#249\" id=\"249\">249</a>\n<a href=\"#250\" id=\"250\">250</a>\n<a href=\"#251\" id=\"251\">251</a>\n<a href=\"#252\" id=\"252\">252</a>\n<a href=\"#253\" id=\"253\">253</a>\n<a href=\"#254\" id=\"254\">254</a>\n<a href=\"#255\" id=\"255\">255</a>\n<a href=\"#256\" id=\"256\">256</a>\n<a href=\"#257\" id=\"257\">257</a>\n<a href=\"#258\" id=\"258\">258</a>\n<a href=\"#259\" id=\"259\">259</a>\n<a href=\"#260\" id=\"260\">260</a>\n<a href=\"#261\" id=\"261\">261</a>\n<a href=\"#262\" id=\"262\">262</a>\n<a href=\"#263\" id=\"263\">263</a>\n<a href=\"#264\" id=\"264\">264</a>\n<a href=\"#265\" id=\"265\">265</a>\n<a href=\"#266\" id=\"266\">266</a>\n<a href=\"#267\" id=\"267\">267</a>\n<a href=\"#268\" id=\"268\">268</a>\n<a href=\"#269\" id=\"269\">269</a>\n<a href=\"#270\" id=\"270\">270</a>\n<a href=\"#271\" id=\"271\">271</a>\n<a href=\"#272\" id=\"272\">272</a>\n<a href=\"#273\" id=\"273\">273</a>\n<a href=\"#274\" id=\"274\">274</a>\n<a href=\"#275\" id=\"275\">275</a>\n<a href=\"#276\" id=\"276\">276</a>\n<a href=\"#277\" id=\"277\">277</a>\n<a href=\"#278\" id=\"278\">278</a>\n<a href=\"#279\" id=\"279\">279</a>\n<a href=\"#280\" id=\"280\">280</a>\n<a href=\"#281\" id=\"281\">281</a>\n<a href=\"#282\" id=\"282\">282</a>\n<a href=\"#283\" id=\"283\">283</a>\n<a href=\"#284\" id=\"284\">284</a>\n<a href=\"#285\" id=\"285\">285</a>\n<a href=\"#286\" id=\"286\">286</a>\n<a href=\"#287\" id=\"287\">287</a>\n<a href=\"#288\" id=\"288\">288</a>\n<a href=\"#289\" id=\"289\">289</a>\n<a href=\"#290\" id=\"290\">290</a>\n<a href=\"#291\" id=\"291\">291</a>\n<a href=\"#292\" id=\"292\">292</a>\n<a href=\"#293\" id=\"293\">293</a>\n<a href=\"#294\" id=\"294\">294</a>\n<a href=\"#295\" id=\"295\">295</a>\n<a href=\"#296\" id=\"296\">296</a>\n<a href=\"#297\" id=\"297\">297</a>\n<a href=\"#298\" id=\"298\">298</a>\n<a href=\"#299\" id=\"299\">299</a>\n<a href=\"#300\" id=\"300\">300</a>\n<a href=\"#301\" id=\"301\">301</a>\n<a href=\"#302\" id=\"302\">302</a>\n<a href=\"#303\" id=\"303\">303</a>\n<a href=\"#304\" id=\"304\">304</a>\n<a href=\"#305\" id=\"305\">305</a>\n<a href=\"#306\" id=\"306\">306</a>\n<a href=\"#307\" id=\"307\">307</a>\n<a href=\"#308\" id=\"308\">308</a>\n<a href=\"#309\" id=\"309\">309</a>\n<a href=\"#310\" id=\"310\">310</a>\n<a href=\"#311\" id=\"311\">311</a>\n<a href=\"#312\" id=\"312\">312</a>\n<a href=\"#313\" id=\"313\">313</a>\n<a href=\"#314\" id=\"314\">314</a>\n<a href=\"#315\" id=\"315\">315</a>\n<a href=\"#316\" id=\"316\">316</a>\n<a href=\"#317\" id=\"317\">317</a>\n<a href=\"#318\" id=\"318\">318</a>\n<a href=\"#319\" id=\"319\">319</a>\n<a href=\"#320\" id=\"320\">320</a>\n<a href=\"#321\" id=\"321\">321</a>\n<a href=\"#322\" id=\"322\">322</a>\n<a href=\"#323\" id=\"323\">323</a>\n<a href=\"#324\" id=\"324\">324</a>\n<a href=\"#325\" id=\"325\">325</a>\n<a href=\"#326\" id=\"326\">326</a>\n<a href=\"#327\" id=\"327\">327</a>\n<a href=\"#328\" id=\"328\">328</a>\n<a href=\"#329\" id=\"329\">329</a>\n<a href=\"#330\" id=\"330\">330</a>\n<a href=\"#331\" id=\"331\">331</a>\n<a href=\"#332\" id=\"332\">332</a>\n<a href=\"#333\" id=\"333\">333</a>\n<a href=\"#334\" id=\"334\">334</a>\n<a href=\"#335\" id=\"335\">335</a>\n<a href=\"#336\" id=\"336\">336</a>\n<a href=\"#337\" id=\"337\">337</a>\n<a href=\"#338\" id=\"338\">338</a>\n<a href=\"#339\" id=\"339\">339</a>\n<a href=\"#340\" id=\"340\">340</a>\n<a href=\"#341\" id=\"341\">341</a>\n<a href=\"#342\" id=\"342\">342</a>\n<a href=\"#343\" id=\"343\">343</a>\n<a href=\"#344\" id=\"344\">344</a>\n<a href=\"#345\" id=\"345\">345</a>\n<a href=\"#346\" id=\"346\">346</a>\n<a href=\"#347\" id=\"347\">347</a>\n<a href=\"#348\" id=\"348\">348</a>\n<a href=\"#349\" id=\"349\">349</a>\n<a href=\"#350\" id=\"350\">350</a>\n<a href=\"#351\" id=\"351\">351</a>\n<a href=\"#352\" id=\"352\">352</a>\n<a href=\"#353\" id=\"353\">353</a>\n<a href=\"#354\" id=\"354\">354</a>\n<a href=\"#355\" id=\"355\">355</a>\n<a href=\"#356\" id=\"356\">356</a>\n<a href=\"#357\" id=\"357\">357</a>\n<a href=\"#358\" id=\"358\">358</a>\n<a href=\"#359\" id=\"359\">359</a>\n<a href=\"#360\" id=\"360\">360</a>\n<a href=\"#361\" id=\"361\">361</a>\n<a href=\"#362\" id=\"362\">362</a>\n<a href=\"#363\" id=\"363\">363</a>\n<a href=\"#364\" id=\"364\">364</a>\n<a href=\"#365\" id=\"365\">365</a>\n<a href=\"#366\" id=\"366\">366</a>\n<a href=\"#367\" id=\"367\">367</a>\n<a href=\"#368\" id=\"368\">368</a>\n<a href=\"#369\" id=\"369\">369</a>\n<a href=\"#370\" id=\"370\">370</a>\n<a href=\"#371\" id=\"371\">371</a>\n<a href=\"#372\" id=\"372\">372</a>\n<a href=\"#373\" id=\"373\">373</a>\n<a href=\"#374\" id=\"374\">374</a>\n<a href=\"#375\" id=\"375\">375</a>\n<a href=\"#376\" id=\"376\">376</a>\n<a href=\"#377\" id=\"377\">377</a>\n<a href=\"#378\" id=\"378\">378</a>\n<a href=\"#379\" id=\"379\">379</a>\n<a href=\"#380\" id=\"380\">380</a>\n<a href=\"#381\" id=\"381\">381</a>\n<a href=\"#382\" id=\"382\">382</a>\n<a href=\"#383\" id=\"383\">383</a>\n<a href=\"#384\" id=\"384\">384</a>\n<a href=\"#385\" id=\"385\">385</a>\n<a href=\"#386\" id=\"386\">386</a>\n<a href=\"#387\" id=\"387\">387</a>\n<a href=\"#388\" id=\"388\">388</a>\n<a href=\"#389\" id=\"389\">389</a>\n<a href=\"#390\" id=\"390\">390</a>\n<a href=\"#391\" id=\"391\">391</a>\n<a href=\"#392\" id=\"392\">392</a>\n<a href=\"#393\" id=\"393\">393</a>\n<a href=\"#394\" id=\"394\">394</a>\n<a href=\"#395\" id=\"395\">395</a>\n<a href=\"#396\" id=\"396\">396</a>\n<a href=\"#397\" id=\"397\">397</a>\n<a href=\"#398\" id=\"398\">398</a>\n<a href=\"#399\" id=\"399\">399</a>\n<a href=\"#400\" id=\"400\">400</a>\n<a href=\"#401\" id=\"401\">401</a>\n<a href=\"#402\" id=\"402\">402</a>\n<a href=\"#403\" id=\"403\">403</a>\n<a href=\"#404\" id=\"404\">404</a>\n<a href=\"#405\" id=\"405\">405</a>\n<a href=\"#406\" id=\"406\">406</a>\n<a href=\"#407\" id=\"407\">407</a>\n<a href=\"#408\" id=\"408\">408</a>\n<a href=\"#409\" id=\"409\">409</a>\n<a href=\"#410\" id=\"410\">410</a>\n<a href=\"#411\" id=\"411\">411</a>\n<a href=\"#412\" id=\"412\">412</a>\n<a href=\"#413\" id=\"413\">413</a>\n<a href=\"#414\" id=\"414\">414</a>\n<a href=\"#415\" id=\"415\">415</a>\n<a href=\"#416\" id=\"416\">416</a>\n<a href=\"#417\" id=\"417\">417</a>\n<a href=\"#418\" id=\"418\">418</a>\n<a href=\"#419\" id=\"419\">419</a>\n<a href=\"#420\" id=\"420\">420</a>\n<a href=\"#421\" id=\"421\">421</a>\n<a href=\"#422\" id=\"422\">422</a>\n<a href=\"#423\" id=\"423\">423</a>\n<a href=\"#424\" id=\"424\">424</a>\n<a href=\"#425\" id=\"425\">425</a>\n<a href=\"#426\" id=\"426\">426</a>\n<a href=\"#427\" id=\"427\">427</a>\n<a href=\"#428\" id=\"428\">428</a>\n<a href=\"#429\" id=\"429\">429</a>\n<a href=\"#430\" id=\"430\">430</a>\n<a href=\"#431\" id=\"431\">431</a>\n<a href=\"#432\" id=\"432\">432</a>\n<a href=\"#433\" id=\"433\">433</a>\n<a href=\"#434\" id=\"434\">434</a>\n<a href=\"#435\" id=\"435\">435</a>\n<a href=\"#436\" id=\"436\">436</a>\n<a href=\"#437\" id=\"437\">437</a>\n<a href=\"#438\" id=\"438\">438</a>\n<a href=\"#439\" id=\"439\">439</a>\n<a href=\"#440\" id=\"440\">440</a>\n<a href=\"#441\" id=\"441\">441</a>\n<a href=\"#442\" id=\"442\">442</a>\n<a href=\"#443\" id=\"443\">443</a>\n<a href=\"#444\" id=\"444\">444</a>\n<a href=\"#445\" id=\"445\">445</a>\n<a href=\"#446\" id=\"446\">446</a>\n<a href=\"#447\" id=\"447\">447</a>\n<a href=\"#448\" id=\"448\">448</a>\n<a href=\"#449\" id=\"449\">449</a>\n<a href=\"#450\" id=\"450\">450</a>\n<a href=\"#451\" id=\"451\">451</a>\n<a href=\"#452\" id=\"452\">452</a>\n<a href=\"#453\" id=\"453\">453</a>\n<a href=\"#454\" id=\"454\">454</a>\n<a href=\"#455\" id=\"455\">455</a>\n<a href=\"#456\" id=\"456\">456</a>\n<a href=\"#457\" id=\"457\">457</a>\n<a href=\"#458\" id=\"458\">458</a>\n<a href=\"#459\" id=\"459\">459</a>\n<a href=\"#460\" id=\"460\">460</a>\n<a href=\"#461\" id=\"461\">461</a>\n<a href=\"#462\" id=\"462\">462</a>\n<a href=\"#463\" id=\"463\">463</a>\n<a href=\"#464\" id=\"464\">464</a>\n<a href=\"#465\" id=\"465\">465</a>\n<a href=\"#466\" id=\"466\">466</a>\n<a href=\"#467\" id=\"467\">467</a>\n<a href=\"#468\" id=\"468\">468</a>\n<a href=\"#469\" id=\"469\">469</a>\n<a href=\"#470\" id=\"470\">470</a>\n<a href=\"#471\" id=\"471\">471</a>\n<a href=\"#472\" id=\"472\">472</a>\n<a href=\"#473\" id=\"473\">473</a>\n<a href=\"#474\" id=\"474\">474</a>\n<a href=\"#475\" id=\"475\">475</a>\n<a href=\"#476\" id=\"476\">476</a>\n<a href=\"#477\" id=\"477\">477</a>\n<a href=\"#478\" id=\"478\">478</a>\n<a href=\"#479\" id=\"479\">479</a>\n<a href=\"#480\" id=\"480\">480</a>\n<a href=\"#481\" id=\"481\">481</a>\n<a href=\"#482\" id=\"482\">482</a>\n<a href=\"#483\" id=\"483\">483</a>\n<a href=\"#484\" id=\"484\">484</a>\n<a href=\"#485\" id=\"485\">485</a>\n<a href=\"#486\" id=\"486\">486</a>\n<a href=\"#487\" id=\"487\">487</a>\n<a href=\"#488\" id=\"488\">488</a>\n<a href=\"#489\" id=\"489\">489</a>\n<a href=\"#490\" id=\"490\">490</a>\n<a href=\"#491\" id=\"491\">491</a>\n<a href=\"#492\" id=\"492\">492</a>\n<a href=\"#493\" id=\"493\">493</a>\n<a href=\"#494\" id=\"494\">494</a>\n<a href=\"#495\" id=\"495\">495</a>\n<a href=\"#496\" id=\"496\">496</a>\n<a href=\"#497\" id=\"497\">497</a>\n<a href=\"#498\" id=\"498\">498</a>\n<a href=\"#499\" id=\"499\">499</a>\n<a href=\"#500\" id=\"500\">500</a>\n<a href=\"#501\" id=\"501\">501</a>\n<a href=\"#502\" id=\"502\">502</a>\n<a href=\"#503\" id=\"503\">503</a>\n<a href=\"#504\" id=\"504\">504</a>\n<a href=\"#505\" id=\"505\">505</a>\n<a href=\"#506\" id=\"506\">506</a>\n<a href=\"#507\" id=\"507\">507</a>\n<a href=\"#508\" id=\"508\">508</a>\n<a href=\"#509\" id=\"509\">509</a>\n<a href=\"#510\" id=\"510\">510</a>\n<a href=\"#511\" id=\"511\">511</a>\n<a href=\"#512\" id=\"512\">512</a>\n<a href=\"#513\" id=\"513\">513</a>\n<a href=\"#514\" id=\"514\">514</a>\n<a href=\"#515\" id=\"515\">515</a>\n<a href=\"#516\" id=\"516\">516</a>\n<a href=\"#517\" id=\"517\">517</a>\n<a href=\"#518\" id=\"518\">518</a>\n<a href=\"#519\" id=\"519\">519</a>\n<a href=\"#520\" id=\"520\">520</a>\n<a href=\"#521\" id=\"521\">521</a>\n<a href=\"#522\" id=\"522\">522</a>\n<a href=\"#523\" id=\"523\">523</a>\n<a href=\"#524\" id=\"524\">524</a>\n<a href=\"#525\" id=\"525\">525</a>\n<a href=\"#526\" id=\"526\">526</a>\n<a href=\"#527\" id=\"527\">527</a>\n<a href=\"#528\" id=\"528\">528</a>\n<a href=\"#529\" id=\"529\">529</a>\n<a href=\"#530\" id=\"530\">530</a>\n<a href=\"#531\" id=\"531\">531</a>\n<a href=\"#532\" id=\"532\">532</a>\n<a href=\"#533\" id=\"533\">533</a>\n<a href=\"#534\" id=\"534\">534</a>\n<a href=\"#535\" id=\"535\">535</a>\n<a href=\"#536\" id=\"536\">536</a>\n<a href=\"#537\" id=\"537\">537</a>\n<a href=\"#538\" id=\"538\">538</a>\n<a href=\"#539\" id=\"539\">539</a>\n<a href=\"#540\" id=\"540\">540</a>\n<a href=\"#541\" id=\"541\">541</a>\n<a href=\"#542\" id=\"542\">542</a>\n<a href=\"#543\" id=\"543\">543</a>\n<a href=\"#544\" id=\"544\">544</a>\n<a href=\"#545\" id=\"545\">545</a>\n<a href=\"#546\" id=\"546\">546</a>\n<a href=\"#547\" id=\"547\">547</a>\n<a href=\"#548\" id=\"548\">548</a>\n<a href=\"#549\" id=\"549\">549</a>\n<a href=\"#550\" id=\"550\">550</a>\n<a href=\"#551\" id=\"551\">551</a>\n<a href=\"#552\" id=\"552\">552</a>\n<a href=\"#553\" id=\"553\">553</a>\n<a href=\"#554\" id=\"554\">554</a>\n<a href=\"#555\" id=\"555\">555</a>\n<a href=\"#556\" id=\"556\">556</a>\n<a href=\"#557\" id=\"557\">557</a>\n<a href=\"#558\" id=\"558\">558</a>\n<a href=\"#559\" id=\"559\">559</a>\n<a href=\"#560\" id=\"560\">560</a>\n<a href=\"#561\" id=\"561\">561</a>\n<a href=\"#562\" id=\"562\">562</a>\n<a href=\"#563\" id=\"563\">563</a>\n<a href=\"#564\" id=\"564\">564</a>\n<a href=\"#565\" id=\"565\">565</a>\n<a href=\"#566\" id=\"566\">566</a>\n<a href=\"#567\" id=\"567\">567</a>\n<a href=\"#568\" id=\"568\">568</a>\n<a href=\"#569\" id=\"569\">569</a>\n<a href=\"#570\" id=\"570\">570</a>\n<a href=\"#571\" id=\"571\">571</a>\n<a href=\"#572\" id=\"572\">572</a>\n<a href=\"#573\" id=\"573\">573</a>\n<a href=\"#574\" id=\"574\">574</a>\n<a href=\"#575\" id=\"575\">575</a>\n<a href=\"#576\" id=\"576\">576</a>\n<a href=\"#577\" id=\"577\">577</a>\n<a href=\"#578\" id=\"578\">578</a>\n<a href=\"#579\" id=\"579\">579</a>\n<a href=\"#580\" id=\"580\">580</a>\n<a href=\"#581\" id=\"581\">581</a>\n<a href=\"#582\" id=\"582\">582</a>\n<a href=\"#583\" id=\"583\">583</a>\n<a href=\"#584\" id=\"584\">584</a>\n<a href=\"#585\" id=\"585\">585</a>\n<a href=\"#586\" id=\"586\">586</a>\n<a href=\"#587\" id=\"587\">587</a>\n<a href=\"#588\" id=\"588\">588</a>\n<a href=\"#589\" id=\"589\">589</a>\n<a href=\"#590\" id=\"590\">590</a>\n<a href=\"#591\" id=\"591\">591</a>\n<a href=\"#592\" id=\"592\">592</a>\n<a href=\"#593\" id=\"593\">593</a>\n<a href=\"#594\" id=\"594\">594</a>\n<a href=\"#595\" id=\"595\">595</a>\n<a href=\"#596\" id=\"596\">596</a>\n<a href=\"#597\" id=\"597\">597</a>\n<a href=\"#598\" id=\"598\">598</a>\n<a href=\"#599\" id=\"599\">599</a>\n<a href=\"#600\" id=\"600\">600</a>\n<a href=\"#601\" id=\"601\">601</a>\n<a href=\"#602\" id=\"602\">602</a>\n<a href=\"#603\" id=\"603\">603</a>\n<a href=\"#604\" id=\"604\">604</a>\n<a href=\"#605\" id=\"605\">605</a>\n<a href=\"#606\" id=\"606\">606</a>\n<a href=\"#607\" id=\"607\">607</a>\n<a href=\"#608\" id=\"608\">608</a>\n<a href=\"#609\" id=\"609\">609</a>\n<a href=\"#610\" id=\"610\">610</a>\n<a href=\"#611\" id=\"611\">611</a>\n<a href=\"#612\" id=\"612\">612</a>\n<a href=\"#613\" id=\"613\">613</a>\n<a href=\"#614\" id=\"614\">614</a>\n<a href=\"#615\" id=\"615\">615</a>\n<a href=\"#616\" id=\"616\">616</a>\n<a href=\"#617\" id=\"617\">617</a>\n<a href=\"#618\" id=\"618\">618</a>\n<a href=\"#619\" id=\"619\">619</a>\n<a href=\"#620\" id=\"620\">620</a>\n<a href=\"#621\" id=\"621\">621</a>\n<a href=\"#622\" id=\"622\">622</a>\n<a href=\"#623\" id=\"623\">623</a>\n<a href=\"#624\" id=\"624\">624</a>\n<a href=\"#625\" id=\"625\">625</a>\n<a href=\"#626\" id=\"626\">626</a>\n<a href=\"#627\" id=\"627\">627</a>\n<a href=\"#628\" id=\"628\">628</a>\n<a href=\"#629\" id=\"629\">629</a>\n<a href=\"#630\" id=\"630\">630</a>\n<a href=\"#631\" id=\"631\">631</a>\n<a href=\"#632\" id=\"632\">632</a>\n<a href=\"#633\" id=\"633\">633</a>\n<a href=\"#634\" id=\"634\">634</a>\n<a href=\"#635\" id=\"635\">635</a>\n<a href=\"#636\" id=\"636\">636</a>\n<a href=\"#637\" id=\"637\">637</a>\n<a href=\"#638\" id=\"638\">638</a>\n<a href=\"#639\" id=\"639\">639</a>\n<a href=\"#640\" id=\"640\">640</a>\n<a href=\"#641\" id=\"641\">641</a>\n<a href=\"#642\" id=\"642\">642</a>\n<a href=\"#643\" id=\"643\">643</a>\n<a href=\"#644\" id=\"644\">644</a>\n<a href=\"#645\" id=\"645\">645</a>\n<a href=\"#646\" id=\"646\">646</a>\n<a href=\"#647\" id=\"647\">647</a>\n<a href=\"#648\" id=\"648\">648</a>\n<a href=\"#649\" id=\"649\">649</a>\n<a href=\"#650\" id=\"650\">650</a>\n<a href=\"#651\" id=\"651\">651</a>\n<a href=\"#652\" id=\"652\">652</a>\n<a href=\"#653\" id=\"653\">653</a>\n<a href=\"#654\" id=\"654\">654</a>\n<a href=\"#655\" id=\"655\">655</a>\n<a href=\"#656\" id=\"656\">656</a>\n<a href=\"#657\" id=\"657\">657</a>\n<a href=\"#658\" id=\"658\">658</a>\n<a href=\"#659\" id=\"659\">659</a>\n<a href=\"#660\" id=\"660\">660</a>\n<a href=\"#661\" id=\"661\">661</a>\n<a href=\"#662\" id=\"662\">662</a>\n<a href=\"#663\" id=\"663\">663</a>\n<a href=\"#664\" id=\"664\">664</a>\n<a href=\"#665\" id=\"665\">665</a>\n<a href=\"#666\" id=\"666\">666</a>\n<a href=\"#667\" id=\"667\">667</a>\n<a href=\"#668\" id=\"668\">668</a>\n<a href=\"#669\" id=\"669\">669</a>\n<a href=\"#670\" id=\"670\">670</a>\n<a href=\"#671\" id=\"671\">671</a>\n<a href=\"#672\" id=\"672\">672</a>\n<a href=\"#673\" id=\"673\">673</a>\n<a href=\"#674\" id=\"674\">674</a>\n<a href=\"#675\" id=\"675\">675</a>\n<a href=\"#676\" id=\"676\">676</a>\n<a href=\"#677\" id=\"677\">677</a>\n<a href=\"#678\" id=\"678\">678</a>\n<a href=\"#679\" id=\"679\">679</a>\n<a href=\"#680\" id=\"680\">680</a>\n<a href=\"#681\" id=\"681\">681</a>\n<a href=\"#682\" id=\"682\">682</a>\n<a href=\"#683\" id=\"683\">683</a>\n<a href=\"#684\" id=\"684\">684</a>\n<a href=\"#685\" id=\"685\">685</a>\n<a href=\"#686\" id=\"686\">686</a>\n<a href=\"#687\" id=\"687\">687</a>\n<a href=\"#688\" id=\"688\">688</a>\n<a href=\"#689\" id=\"689\">689</a>\n<a href=\"#690\" id=\"690\">690</a>\n<a href=\"#691\" id=\"691\">691</a>\n<a href=\"#692\" id=\"692\">692</a>\n<a href=\"#693\" id=\"693\">693</a>\n<a href=\"#694\" id=\"694\">694</a>\n<a href=\"#695\" id=\"695\">695</a>\n<a href=\"#696\" id=\"696\">696</a>\n<a href=\"#697\" id=\"697\">697</a>\n<a href=\"#698\" id=\"698\">698</a>\n<a href=\"#699\" id=\"699\">699</a>\n<a href=\"#700\" id=\"700\">700</a>\n<a href=\"#701\" id=\"701\">701</a>\n<a href=\"#702\" id=\"702\">702</a>\n<a href=\"#703\" id=\"703\">703</a>\n<a href=\"#704\" id=\"704\">704</a>\n<a href=\"#705\" id=\"705\">705</a>\n<a href=\"#706\" id=\"706\">706</a>\n<a href=\"#707\" id=\"707\">707</a>\n<a href=\"#708\" id=\"708\">708</a>\n<a href=\"#709\" id=\"709\">709</a>\n<a href=\"#710\" id=\"710\">710</a>\n<a href=\"#711\" id=\"711\">711</a>\n<a href=\"#712\" id=\"712\">712</a>\n<a href=\"#713\" id=\"713\">713</a>\n<a href=\"#714\" id=\"714\">714</a>\n<a href=\"#715\" id=\"715\">715</a>\n<a href=\"#716\" id=\"716\">716</a>\n<a href=\"#717\" id=\"717\">717</a>\n<a href=\"#718\" id=\"718\">718</a>\n<a href=\"#719\" id=\"719\">719</a>\n<a href=\"#720\" id=\"720\">720</a>\n<a href=\"#721\" id=\"721\">721</a>\n<a href=\"#722\" id=\"722\">722</a>\n<a href=\"#723\" id=\"723\">723</a>\n<a href=\"#724\" id=\"724\">724</a>\n<a href=\"#725\" id=\"725\">725</a>\n<a href=\"#726\" id=\"726\">726</a>\n<a href=\"#727\" id=\"727\">727</a>\n<a href=\"#728\" id=\"728\">728</a>\n<a href=\"#729\" id=\"729\">729</a>\n<a href=\"#730\" id=\"730\">730</a>\n<a href=\"#731\" id=\"731\">731</a>\n<a href=\"#732\" id=\"732\">732</a>\n<a href=\"#733\" id=\"733\">733</a>\n<a href=\"#734\" id=\"734\">734</a>\n<a href=\"#735\" id=\"735\">735</a>\n<a href=\"#736\" id=\"736\">736</a>\n<a href=\"#737\" id=\"737\">737</a>\n<a href=\"#738\" id=\"738\">738</a>\n<a href=\"#739\" id=\"739\">739</a>\n<a href=\"#740\" id=\"740\">740</a>\n<a href=\"#741\" id=\"741\">741</a>\n<a href=\"#742\" id=\"742\">742</a>\n<a href=\"#743\" id=\"743\">743</a>\n<a href=\"#744\" id=\"744\">744</a>\n<a href=\"#745\" id=\"745\">745</a>\n<a href=\"#746\" id=\"746\">746</a>\n<a href=\"#747\" id=\"747\">747</a>\n<a href=\"#748\" id=\"748\">748</a>\n<a href=\"#749\" id=\"749\">749</a>\n<a href=\"#750\" id=\"750\">750</a>\n<a href=\"#751\" id=\"751\">751</a>\n<a href=\"#752\" id=\"752\">752</a>\n<a href=\"#753\" id=\"753\">753</a>\n<a href=\"#754\" id=\"754\">754</a>\n<a href=\"#755\" id=\"755\">755</a>\n<a href=\"#756\" id=\"756\">756</a>\n<a href=\"#757\" id=\"757\">757</a>\n<a href=\"#758\" id=\"758\">758</a>\n<a href=\"#759\" id=\"759\">759</a>\n<a href=\"#760\" id=\"760\">760</a>\n<a href=\"#761\" id=\"761\">761</a>\n<a href=\"#762\" id=\"762\">762</a>\n<a href=\"#763\" id=\"763\">763</a>\n<a href=\"#764\" id=\"764\">764</a>\n<a href=\"#765\" id=\"765\">765</a>\n<a href=\"#766\" id=\"766\">766</a>\n<a href=\"#767\" id=\"767\">767</a>\n<a href=\"#768\" id=\"768\">768</a>\n<a href=\"#769\" id=\"769\">769</a>\n<a href=\"#770\" id=\"770\">770</a>\n<a href=\"#771\" id=\"771\">771</a>\n<a href=\"#772\" id=\"772\">772</a>\n<a href=\"#773\" id=\"773\">773</a>\n<a href=\"#774\" id=\"774\">774</a>\n<a href=\"#775\" id=\"775\">775</a>\n<a href=\"#776\" id=\"776\">776</a>\n<a href=\"#777\" id=\"777\">777</a>\n<a href=\"#778\" id=\"778\">778</a>\n<a href=\"#779\" id=\"779\">779</a>\n<a href=\"#780\" id=\"780\">780</a>\n<a href=\"#781\" id=\"781\">781</a>\n<a href=\"#782\" id=\"782\">782</a>\n<a href=\"#783\" id=\"783\">783</a>\n<a href=\"#784\" id=\"784\">784</a>\n<a href=\"#785\" id=\"785\">785</a>\n<a href=\"#786\" id=\"786\">786</a>\n<a href=\"#787\" id=\"787\">787</a>\n<a href=\"#788\" id=\"788\">788</a>\n<a href=\"#789\" id=\"789\">789</a>\n<a href=\"#790\" id=\"790\">790</a>\n<a href=\"#791\" id=\"791\">791</a>\n<a href=\"#792\" id=\"792\">792</a>\n<a href=\"#793\" id=\"793\">793</a>\n<a href=\"#794\" id=\"794\">794</a>\n<a href=\"#795\" id=\"795\">795</a>\n<a href=\"#796\" id=\"796\">796</a>\n<a href=\"#797\" id=\"797\">797</a>\n<a href=\"#798\" id=\"798\">798</a>\n<a href=\"#799\" id=\"799\">799</a>\n<a href=\"#800\" id=\"800\">800</a>\n<a href=\"#801\" id=\"801\">801</a>\n<a href=\"#802\" id=\"802\">802</a>\n<a href=\"#803\" id=\"803\">803</a>\n<a href=\"#804\" id=\"804\">804</a>\n<a href=\"#805\" id=\"805\">805</a>\n<a href=\"#806\" id=\"806\">806</a>\n<a href=\"#807\" id=\"807\">807</a>\n<a href=\"#808\" id=\"808\">808</a>\n<a href=\"#809\" id=\"809\">809</a>\n<a href=\"#810\" id=\"810\">810</a>\n<a href=\"#811\" id=\"811\">811</a>\n<a href=\"#812\" id=\"812\">812</a>\n<a href=\"#813\" id=\"813\">813</a>\n<a href=\"#814\" id=\"814\">814</a>\n<a href=\"#815\" id=\"815\">815</a>\n<a href=\"#816\" id=\"816\">816</a>\n<a href=\"#817\" id=\"817\">817</a>\n<a href=\"#818\" id=\"818\">818</a>\n<a href=\"#819\" id=\"819\">819</a>\n<a href=\"#820\" id=\"820\">820</a>\n<a href=\"#821\" id=\"821\">821</a>\n<a href=\"#822\" id=\"822\">822</a>\n<a href=\"#823\" id=\"823\">823</a>\n<a href=\"#824\" id=\"824\">824</a>\n<a href=\"#825\" id=\"825\">825</a>\n<a href=\"#826\" id=\"826\">826</a>\n<a href=\"#827\" id=\"827\">827</a>\n<a href=\"#828\" id=\"828\">828</a>\n<a href=\"#829\" id=\"829\">829</a>\n<a href=\"#830\" id=\"830\">830</a>\n<a href=\"#831\" id=\"831\">831</a>\n<a href=\"#832\" id=\"832\">832</a>\n<a href=\"#833\" id=\"833\">833</a>\n<a href=\"#834\" id=\"834\">834</a>\n<a href=\"#835\" id=\"835\">835</a>\n<a href=\"#836\" id=\"836\">836</a>\n<a href=\"#837\" id=\"837\">837</a>\n<a href=\"#838\" id=\"838\">838</a>\n<a href=\"#839\" id=\"839\">839</a>\n<a href=\"#840\" id=\"840\">840</a>\n<a href=\"#841\" id=\"841\">841</a>\n<a href=\"#842\" id=\"842\">842</a>\n<a href=\"#843\" id=\"843\">843</a>\n<a href=\"#844\" id=\"844\">844</a>\n<a href=\"#845\" id=\"845\">845</a>\n<a href=\"#846\" id=\"846\">846</a>\n<a href=\"#847\" id=\"847\">847</a>\n<a href=\"#848\" id=\"848\">848</a>\n<a href=\"#849\" id=\"849\">849</a>\n<a href=\"#850\" id=\"850\">850</a>\n<a href=\"#851\" id=\"851\">851</a>\n<a href=\"#852\" id=\"852\">852</a>\n<a href=\"#853\" id=\"853\">853</a>\n<a href=\"#854\" id=\"854\">854</a>\n<a href=\"#855\" id=\"855\">855</a>\n<a href=\"#856\" id=\"856\">856</a>\n<a href=\"#857\" id=\"857\">857</a>\n<a href=\"#858\" id=\"858\">858</a>\n<a href=\"#859\" id=\"859\">859</a>\n<a href=\"#860\" id=\"860\">860</a>\n<a href=\"#861\" id=\"861\">861</a>\n<a href=\"#862\" id=\"862\">862</a>\n<a href=\"#863\" id=\"863\">863</a>\n<a href=\"#864\" id=\"864\">864</a>\n<a href=\"#865\" id=\"865\">865</a>\n<a href=\"#866\" id=\"866\">866</a>\n<a href=\"#867\" id=\"867\">867</a>\n<a href=\"#868\" id=\"868\">868</a>\n<a href=\"#869\" id=\"869\">869</a>\n<a href=\"#870\" id=\"870\">870</a>\n<a href=\"#871\" id=\"871\">871</a>\n<a href=\"#872\" id=\"872\">872</a>\n<a href=\"#873\" id=\"873\">873</a>\n<a href=\"#874\" id=\"874\">874</a>\n<a href=\"#875\" id=\"875\">875</a>\n<a href=\"#876\" id=\"876\">876</a>\n<a href=\"#877\" id=\"877\">877</a>\n<a href=\"#878\" id=\"878\">878</a>\n<a href=\"#879\" id=\"879\">879</a>\n<a href=\"#880\" id=\"880\">880</a>\n<a href=\"#881\" id=\"881\">881</a>\n<a href=\"#882\" id=\"882\">882</a>\n<a href=\"#883\" id=\"883\">883</a>\n<a href=\"#884\" id=\"884\">884</a>\n<a href=\"#885\" id=\"885\">885</a>\n<a href=\"#886\" id=\"886\">886</a>\n<a href=\"#887\" id=\"887\">887</a>\n<a href=\"#888\" id=\"888\">888</a>\n<a href=\"#889\" id=\"889\">889</a>\n<a href=\"#890\" id=\"890\">890</a>\n<a href=\"#891\" id=\"891\">891</a>\n<a href=\"#892\" id=\"892\">892</a>\n<a href=\"#893\" id=\"893\">893</a>\n<a href=\"#894\" id=\"894\">894</a>\n<a href=\"#895\" id=\"895\">895</a>\n<a href=\"#896\" id=\"896\">896</a>\n<a href=\"#897\" id=\"897\">897</a>\n<a href=\"#898\" id=\"898\">898</a>\n<a href=\"#899\" id=\"899\">899</a>\n<a href=\"#900\" id=\"900\">900</a>\n<a href=\"#901\" id=\"901\">901</a>\n<a href=\"#902\" id=\"902\">902</a>\n<a href=\"#903\" id=\"903\">903</a>\n<a href=\"#904\" id=\"904\">904</a>\n<a href=\"#905\" id=\"905\">905</a>\n<a href=\"#906\" id=\"906\">906</a>\n<a href=\"#907\" id=\"907\">907</a>\n<a href=\"#908\" id=\"908\">908</a>\n<a href=\"#909\" id=\"909\">909</a>\n<a href=\"#910\" id=\"910\">910</a>\n<a href=\"#911\" id=\"911\">911</a>\n<a href=\"#912\" id=\"912\">912</a>\n<a href=\"#913\" id=\"913\">913</a>\n<a href=\"#914\" id=\"914\">914</a>\n<a href=\"#915\" id=\"915\">915</a>\n<a href=\"#916\" id=\"916\">916</a>\n<a href=\"#917\" id=\"917\">917</a>\n<a href=\"#918\" id=\"918\">918</a>\n<a href=\"#919\" id=\"919\">919</a>\n<a href=\"#920\" id=\"920\">920</a>\n<a href=\"#921\" id=\"921\">921</a>\n<a href=\"#922\" id=\"922\">922</a>\n<a href=\"#923\" id=\"923\">923</a>\n<a href=\"#924\" id=\"924\">924</a>\n<a href=\"#925\" id=\"925\">925</a>\n<a href=\"#926\" id=\"926\">926</a>\n<a href=\"#927\" id=\"927\">927</a>\n<a href=\"#928\" id=\"928\">928</a>\n<a href=\"#929\" id=\"929\">929</a>\n<a href=\"#930\" id=\"930\">930</a>\n<a href=\"#931\" id=\"931\">931</a>\n<a href=\"#932\" id=\"932\">932</a>\n<a href=\"#933\" id=\"933\">933</a>\n<a href=\"#934\" id=\"934\">934</a>\n<a href=\"#935\" id=\"935\">935</a>\n<a href=\"#936\" id=\"936\">936</a>\n<a href=\"#937\" id=\"937\">937</a>\n<a href=\"#938\" id=\"938\">938</a>\n<a href=\"#939\" id=\"939\">939</a>\n<a href=\"#940\" id=\"940\">940</a>\n<a href=\"#941\" id=\"941\">941</a>\n<a href=\"#942\" id=\"942\">942</a>\n<a href=\"#943\" id=\"943\">943</a>\n<a href=\"#944\" id=\"944\">944</a>\n<a href=\"#945\" id=\"945\">945</a>\n<a href=\"#946\" id=\"946\">946</a>\n<a href=\"#947\" id=\"947\">947</a>\n<a href=\"#948\" id=\"948\">948</a>\n<a href=\"#949\" id=\"949\">949</a>\n<a href=\"#950\" id=\"950\">950</a>\n<a href=\"#951\" id=\"951\">951</a>\n<a href=\"#952\" id=\"952\">952</a>\n<a href=\"#953\" id=\"953\">953</a>\n<a href=\"#954\" id=\"954\">954</a>\n<a href=\"#955\" id=\"955\">955</a>\n<a href=\"#956\" id=\"956\">956</a>\n<a href=\"#957\" id=\"957\">957</a>\n<a href=\"#958\" id=\"958\">958</a>\n<a href=\"#959\" id=\"959\">959</a>\n<a href=\"#960\" id=\"960\">960</a>\n<a href=\"#961\" id=\"961\">961</a>\n<a href=\"#962\" id=\"962\">962</a>\n<a href=\"#963\" id=\"963\">963</a>\n<a href=\"#964\" id=\"964\">964</a>\n<a href=\"#965\" id=\"965\">965</a>\n<a href=\"#966\" id=\"966\">966</a>\n<a href=\"#967\" id=\"967\">967</a>\n<a href=\"#968\" id=\"968\">968</a>\n<a href=\"#969\" id=\"969\">969</a>\n<a href=\"#970\" id=\"970\">970</a>\n<a href=\"#971\" id=\"971\">971</a>\n<a href=\"#972\" id=\"972\">972</a>\n<a href=\"#973\" id=\"973\">973</a>\n<a href=\"#974\" id=\"974\">974</a>\n<a href=\"#975\" id=\"975\">975</a>\n<a href=\"#976\" id=\"976\">976</a>\n<a href=\"#977\" id=\"977\">977</a>\n<a href=\"#978\" id=\"978\">978</a>\n<a href=\"#979\" id=\"979\">979</a>\n<a href=\"#980\" id=\"980\">980</a>\n<a href=\"#981\" id=\"981\">981</a>\n<a href=\"#982\" id=\"982\">982</a>\n<a href=\"#983\" id=\"983\">983</a>\n<a href=\"#984\" id=\"984\">984</a>\n<a href=\"#985\" id=\"985\">985</a>\n<a href=\"#986\" id=\"986\">986</a>\n<a href=\"#987\" id=\"987\">987</a>\n<a href=\"#988\" id=\"988\">988</a>\n<a href=\"#989\" id=\"989\">989</a>\n<a href=\"#990\" id=\"990\">990</a>\n<a href=\"#991\" id=\"991\">991</a>\n<a href=\"#992\" id=\"992\">992</a>\n<a href=\"#993\" id=\"993\">993</a>\n<a href=\"#994\" id=\"994\">994</a>\n<a href=\"#995\" id=\"995\">995</a>\n<a href=\"#996\" id=\"996\">996</a>\n<a href=\"#997\" id=\"997\">997</a>\n<a href=\"#998\" id=\"998\">998</a>\n<a href=\"#999\" id=\"999\">999</a>\n<a href=\"#1000\" id=\"1000\">1000</a>\n<a href=\"#1001\" id=\"1001\">1001</a>\n<a href=\"#1002\" id=\"1002\">1002</a>\n<a href=\"#1003\" id=\"1003\">1003</a>\n<a href=\"#1004\" id=\"1004\">1004</a>\n<a href=\"#1005\" id=\"1005\">1005</a>\n<a href=\"#1006\" id=\"1006\">1006</a>\n<a href=\"#1007\" id=\"1007\">1007</a>\n<a href=\"#1008\" id=\"1008\">1008</a>\n<a href=\"#1009\" id=\"1009\">1009</a>\n<a href=\"#1010\" id=\"1010\">1010</a>\n<a href=\"#1011\" id=\"1011\">1011</a>\n<a href=\"#1012\" id=\"1012\">1012</a>\n<a href=\"#1013\" id=\"1013\">1013</a>\n<a href=\"#1014\" id=\"1014\">1014</a>\n<a href=\"#1015\" id=\"1015\">1015</a>\n<a href=\"#1016\" id=\"1016\">1016</a>\n<a href=\"#1017\" id=\"1017\">1017</a>\n<a href=\"#1018\" id=\"1018\">1018</a>\n<a href=\"#1019\" id=\"1019\">1019</a>\n<a href=\"#1020\" id=\"1020\">1020</a>\n<a href=\"#1021\" id=\"1021\">1021</a>\n<a href=\"#1022\" id=\"1022\">1022</a>\n<a href=\"#1023\" id=\"1023\">1023</a>\n<a href=\"#1024\" id=\"1024\">1024</a>\n<a href=\"#1025\" id=\"1025\">1025</a>\n<a href=\"#1026\" id=\"1026\">1026</a>\n<a href=\"#1027\" id=\"1027\">1027</a>\n<a href=\"#1028\" id=\"1028\">1028</a>\n<a href=\"#1029\" id=\"1029\">1029</a>\n<a href=\"#1030\" id=\"1030\">1030</a>\n<a href=\"#1031\" id=\"1031\">1031</a>\n<a href=\"#1032\" id=\"1032\">1032</a>\n<a href=\"#1033\" id=\"1033\">1033</a>\n<a href=\"#1034\" id=\"1034\">1034</a>\n<a href=\"#1035\" id=\"1035\">1035</a>\n<a href=\"#1036\" id=\"1036\">1036</a>\n<a href=\"#1037\" id=\"1037\">1037</a>\n<a href=\"#1038\" id=\"1038\">1038</a>\n<a href=\"#1039\" id=\"1039\">1039</a>\n<a href=\"#1040\" id=\"1040\">1040</a>\n<a href=\"#1041\" id=\"1041\">1041</a>\n<a href=\"#1042\" id=\"1042\">1042</a>\n<a href=\"#1043\" id=\"1043\">1043</a>\n<a href=\"#1044\" id=\"1044\">1044</a>\n<a href=\"#1045\" id=\"1045\">1045</a>\n<a href=\"#1046\" id=\"1046\">1046</a>\n<a href=\"#1047\" id=\"1047\">1047</a>\n<a href=\"#1048\" id=\"1048\">1048</a>\n<a href=\"#1049\" id=\"1049\">1049</a>\n<a href=\"#1050\" id=\"1050\">1050</a>\n<a href=\"#1051\" id=\"1051\">1051</a>\n<a href=\"#1052\" id=\"1052\">1052</a>\n<a href=\"#1053\" id=\"1053\">1053</a>\n<a href=\"#1054\" id=\"1054\">1054</a>\n<a href=\"#1055\" id=\"1055\">1055</a>\n<a href=\"#1056\" id=\"1056\">1056</a>\n<a href=\"#1057\" id=\"1057\">1057</a>\n<a href=\"#1058\" id=\"1058\">1058</a>\n<a href=\"#1059\" id=\"1059\">1059</a>\n<a href=\"#1060\" id=\"1060\">1060</a>\n<a href=\"#1061\" id=\"1061\">1061</a>\n<a href=\"#1062\" id=\"1062\">1062</a>\n<a href=\"#1063\" id=\"1063\">1063</a>\n<a href=\"#1064\" id=\"1064\">1064</a>\n<a href=\"#1065\" id=\"1065\">1065</a>\n<a href=\"#1066\" id=\"1066\">1066</a>\n<a href=\"#1067\" id=\"1067\">1067</a>\n<a href=\"#1068\" id=\"1068\">1068</a>\n<a href=\"#1069\" id=\"1069\">1069</a>\n<a href=\"#1070\" id=\"1070\">1070</a>\n<a href=\"#1071\" id=\"1071\">1071</a>\n<a href=\"#1072\" id=\"1072\">1072</a>\n<a href=\"#1073\" id=\"1073\">1073</a>\n<a href=\"#1074\" id=\"1074\">1074</a>\n<a href=\"#1075\" id=\"1075\">1075</a>\n<a href=\"#1076\" id=\"1076\">1076</a>\n<a href=\"#1077\" id=\"1077\">1077</a>\n<a href=\"#1078\" id=\"1078\">1078</a>\n<a href=\"#1079\" id=\"1079\">1079</a>\n<a href=\"#1080\" id=\"1080\">1080</a>\n<a href=\"#1081\" id=\"1081\">1081</a>\n<a href=\"#1082\" id=\"1082\">1082</a>\n<a href=\"#1083\" id=\"1083\">1083</a>\n<a href=\"#1084\" id=\"1084\">1084</a>\n<a href=\"#1085\" id=\"1085\">1085</a>\n<a href=\"#1086\" id=\"1086\">1086</a>\n<a href=\"#1087\" id=\"1087\">1087</a>\n<a href=\"#1088\" id=\"1088\">1088</a>\n<a href=\"#1089\" id=\"1089\">1089</a>\n<a href=\"#1090\" id=\"1090\">1090</a>\n<a href=\"#1091\" id=\"1091\">1091</a>\n<a href=\"#1092\" id=\"1092\">1092</a>\n<a href=\"#1093\" id=\"1093\">1093</a>\n<a href=\"#1094\" id=\"1094\">1094</a>\n<a href=\"#1095\" id=\"1095\">1095</a>\n<a href=\"#1096\" id=\"1096\">1096</a>\n<a href=\"#1097\" id=\"1097\">1097</a>\n<a href=\"#1098\" id=\"1098\">1098</a>\n<a href=\"#1099\" id=\"1099\">1099</a>\n<a href=\"#1100\" id=\"1100\">1100</a>\n<a href=\"#1101\" id=\"1101\">1101</a>\n<a href=\"#1102\" id=\"1102\">1102</a>\n<a href=\"#1103\" id=\"1103\">1103</a>\n<a href=\"#1104\" id=\"1104\">1104</a>\n<a href=\"#1105\" id=\"1105\">1105</a>\n<a href=\"#1106\" id=\"1106\">1106</a>\n<a href=\"#1107\" id=\"1107\">1107</a>\n<a href=\"#1108\" id=\"1108\">1108</a>\n<a href=\"#1109\" id=\"1109\">1109</a>\n<a href=\"#1110\" id=\"1110\">1110</a>\n<a href=\"#1111\" id=\"1111\">1111</a>\n<a href=\"#1112\" id=\"1112\">1112</a>\n<a href=\"#1113\" id=\"1113\">1113</a>\n<a href=\"#1114\" id=\"1114\">1114</a>\n<a href=\"#1115\" id=\"1115\">1115</a>\n<a href=\"#1116\" id=\"1116\">1116</a>\n<a href=\"#1117\" id=\"1117\">1117</a>\n<a href=\"#1118\" id=\"1118\">1118</a>\n<a href=\"#1119\" id=\"1119\">1119</a>\n<a href=\"#1120\" id=\"1120\">1120</a>\n<a href=\"#1121\" id=\"1121\">1121</a>\n<a href=\"#1122\" id=\"1122\">1122</a>\n<a href=\"#1123\" id=\"1123\">1123</a>\n<a href=\"#1124\" id=\"1124\">1124</a>\n<a href=\"#1125\" id=\"1125\">1125</a>\n<a href=\"#1126\" id=\"1126\">1126</a>\n<a href=\"#1127\" id=\"1127\">1127</a>\n<a href=\"#1128\" id=\"1128\">1128</a>\n<a href=\"#1129\" id=\"1129\">1129</a>\n<a href=\"#1130\" id=\"1130\">1130</a>\n<a href=\"#1131\" id=\"1131\">1131</a>\n<a href=\"#1132\" id=\"1132\">1132</a>\n<a href=\"#1133\" id=\"1133\">1133</a>\n<a href=\"#1134\" id=\"1134\">1134</a>\n<a href=\"#1135\" id=\"1135\">1135</a>\n<a href=\"#1136\" id=\"1136\">1136</a>\n<a href=\"#1137\" id=\"1137\">1137</a>\n<a href=\"#1138\" id=\"1138\">1138</a>\n<a href=\"#1139\" id=\"1139\">1139</a>\n<a href=\"#1140\" id=\"1140\">1140</a>\n<a href=\"#1141\" id=\"1141\">1141</a>\n<a href=\"#1142\" id=\"1142\">1142</a>\n<a href=\"#1143\" id=\"1143\">1143</a>\n<a href=\"#1144\" id=\"1144\">1144</a>\n<a href=\"#1145\" id=\"1145\">1145</a>\n<a href=\"#1146\" id=\"1146\">1146</a>\n<a href=\"#1147\" id=\"1147\">1147</a>\n<a href=\"#1148\" id=\"1148\">1148</a>\n<a href=\"#1149\" id=\"1149\">1149</a>\n<a href=\"#1150\" id=\"1150\">1150</a>\n<a href=\"#1151\" id=\"1151\">1151</a>\n<a href=\"#1152\" id=\"1152\">1152</a>\n<a href=\"#1153\" id=\"1153\">1153</a>\n<a href=\"#1154\" id=\"1154\">1154</a>\n<a href=\"#1155\" id=\"1155\">1155</a>\n<a href=\"#1156\" id=\"1156\">1156</a>\n<a href=\"#1157\" id=\"1157\">1157</a>\n<a href=\"#1158\" id=\"1158\">1158</a>\n<a href=\"#1159\" id=\"1159\">1159</a>\n<a href=\"#1160\" id=\"1160\">1160</a>\n<a href=\"#1161\" id=\"1161\">1161</a>\n<a href=\"#1162\" id=\"1162\">1162</a>\n<a href=\"#1163\" id=\"1163\">1163</a>\n<a href=\"#1164\" id=\"1164\">1164</a>\n<a href=\"#1165\" id=\"1165\">1165</a>\n<a href=\"#1166\" id=\"1166\">1166</a>\n<a href=\"#1167\" id=\"1167\">1167</a>\n<a href=\"#1168\" id=\"1168\">1168</a>\n<a href=\"#1169\" id=\"1169\">1169</a>\n<a href=\"#1170\" id=\"1170\">1170</a>\n<a href=\"#1171\" id=\"1171\">1171</a>\n<a href=\"#1172\" id=\"1172\">1172</a>\n<a href=\"#1173\" id=\"1173\">1173</a>\n<a href=\"#1174\" id=\"1174\">1174</a>\n<a href=\"#1175\" id=\"1175\">1175</a>\n<a href=\"#1176\" id=\"1176\">1176</a>\n<a href=\"#1177\" id=\"1177\">1177</a>\n<a href=\"#1178\" id=\"1178\">1178</a>\n<a href=\"#1179\" id=\"1179\">1179</a>\n<a href=\"#1180\" id=\"1180\">1180</a>\n<a href=\"#1181\" id=\"1181\">1181</a>\n<a href=\"#1182\" id=\"1182\">1182</a>\n<a href=\"#1183\" id=\"1183\">1183</a>\n<a href=\"#1184\" id=\"1184\">1184</a>\n<a href=\"#1185\" id=\"1185\">1185</a>\n<a href=\"#1186\" id=\"1186\">1186</a>\n<a href=\"#1187\" id=\"1187\">1187</a>\n<a href=\"#1188\" id=\"1188\">1188</a>\n<a href=\"#1189\" id=\"1189\">1189</a>\n<a href=\"#1190\" id=\"1190\">1190</a>\n<a href=\"#1191\" id=\"1191\">1191</a>\n<a href=\"#1192\" id=\"1192\">1192</a>\n<a href=\"#1193\" id=\"1193\">1193</a>\n<a href=\"#1194\" id=\"1194\">1194</a>\n<a href=\"#1195\" id=\"1195\">1195</a>\n<a href=\"#1196\" id=\"1196\">1196</a>\n<a href=\"#1197\" id=\"1197\">1197</a>\n<a href=\"#1198\" id=\"1198\">1198</a>\n<a href=\"#1199\" id=\"1199\">1199</a>\n<a href=\"#1200\" id=\"1200\">1200</a>\n<a href=\"#1201\" id=\"1201\">1201</a>\n<a href=\"#1202\" id=\"1202\">1202</a>\n<a href=\"#1203\" id=\"1203\">1203</a>\n<a href=\"#1204\" id=\"1204\">1204</a>\n<a href=\"#1205\" id=\"1205\">1205</a>\n<a href=\"#1206\" id=\"1206\">1206</a>\n<a href=\"#1207\" id=\"1207\">1207</a>\n<a href=\"#1208\" id=\"1208\">1208</a>\n<a href=\"#1209\" id=\"1209\">1209</a>\n<a href=\"#1210\" id=\"1210\">1210</a>\n<a href=\"#1211\" id=\"1211\">1211</a>\n<a href=\"#1212\" id=\"1212\">1212</a>\n<a href=\"#1213\" id=\"1213\">1213</a>\n<a href=\"#1214\" id=\"1214\">1214</a>\n<a href=\"#1215\" id=\"1215\">1215</a>\n<a href=\"#1216\" id=\"1216\">1216</a>\n<a href=\"#1217\" id=\"1217\">1217</a>\n<a href=\"#1218\" id=\"1218\">1218</a>\n<a href=\"#1219\" id=\"1219\">1219</a>\n<a href=\"#1220\" id=\"1220\">1220</a>\n<a href=\"#1221\" id=\"1221\">1221</a>\n<a href=\"#1222\" id=\"1222\">1222</a>\n<a href=\"#1223\" id=\"1223\">1223</a>\n<a href=\"#1224\" id=\"1224\">1224</a>\n<a href=\"#1225\" id=\"1225\">1225</a>\n<a href=\"#1226\" id=\"1226\">1226</a>\n<a href=\"#1227\" id=\"1227\">1227</a>\n<a href=\"#1228\" id=\"1228\">1228</a>\n<a href=\"#1229\" id=\"1229\">1229</a>\n<a href=\"#1230\" id=\"1230\">1230</a>\n<a href=\"#1231\" id=\"1231\">1231</a>\n<a href=\"#1232\" id=\"1232\">1232</a>\n<a href=\"#1233\" id=\"1233\">1233</a>\n<a href=\"#1234\" id=\"1234\">1234</a>\n<a href=\"#1235\" id=\"1235\">1235</a>\n<a href=\"#1236\" id=\"1236\">1236</a>\n<a href=\"#1237\" id=\"1237\">1237</a>\n<a href=\"#1238\" id=\"1238\">1238</a>\n<a href=\"#1239\" id=\"1239\">1239</a>\n<a href=\"#1240\" id=\"1240\">1240</a>\n<a href=\"#1241\" id=\"1241\">1241</a>\n<a href=\"#1242\" id=\"1242\">1242</a>\n<a href=\"#1243\" id=\"1243\">1243</a>\n<a href=\"#1244\" id=\"1244\">1244</a>\n<a href=\"#1245\" id=\"1245\">1245</a>\n<a href=\"#1246\" id=\"1246\">1246</a>\n<a href=\"#1247\" id=\"1247\">1247</a>\n<a href=\"#1248\" id=\"1248\">1248</a>\n<a href=\"#1249\" id=\"1249\">1249</a>\n<a href=\"#1250\" id=\"1250\">1250</a>\n<a href=\"#1251\" id=\"1251\">1251</a>\n<a href=\"#1252\" id=\"1252\">1252</a>\n<a href=\"#1253\" id=\"1253\">1253</a>\n<a href=\"#1254\" id=\"1254\">1254</a>\n<a href=\"#1255\" id=\"1255\">1255</a>\n<a href=\"#1256\" id=\"1256\">1256</a>\n<a href=\"#1257\" id=\"1257\">1257</a>\n<a href=\"#1258\" id=\"1258\">1258</a>\n<a href=\"#1259\" id=\"1259\">1259</a>\n<a href=\"#1260\" id=\"1260\">1260</a>\n<a href=\"#1261\" id=\"1261\">1261</a>\n<a href=\"#1262\" id=\"1262\">1262</a>\n<a href=\"#1263\" id=\"1263\">1263</a>\n<a href=\"#1264\" id=\"1264\">1264</a>\n<a href=\"#1265\" id=\"1265\">1265</a>\n<a href=\"#1266\" id=\"1266\">1266</a>\n<a href=\"#1267\" id=\"1267\">1267</a>\n<a href=\"#1268\" id=\"1268\">1268</a>\n<a href=\"#1269\" id=\"1269\">1269</a>\n<a href=\"#1270\" id=\"1270\">1270</a>\n<a href=\"#1271\" id=\"1271\">1271</a>\n<a href=\"#1272\" id=\"1272\">1272</a>\n<a href=\"#1273\" id=\"1273\">1273</a>\n<a href=\"#1274\" id=\"1274\">1274</a>\n<a href=\"#1275\" id=\"1275\">1275</a>\n<a href=\"#1276\" id=\"1276\">1276</a>\n<a href=\"#1277\" id=\"1277\">1277</a>\n<a href=\"#1278\" id=\"1278\">1278</a>\n<a href=\"#1279\" id=\"1279\">1279</a>\n<a href=\"#1280\" id=\"1280\">1280</a>\n<a href=\"#1281\" id=\"1281\">1281</a>\n<a href=\"#1282\" id=\"1282\">1282</a>\n<a href=\"#1283\" id=\"1283\">1283</a>\n<a href=\"#1284\" id=\"1284\">1284</a>\n<a href=\"#1285\" id=\"1285\">1285</a>\n<a href=\"#1286\" id=\"1286\">1286</a>\n<a href=\"#1287\" id=\"1287\">1287</a>\n<a href=\"#1288\" id=\"1288\">1288</a>\n<a href=\"#1289\" id=\"1289\">1289</a>\n<a href=\"#1290\" id=\"1290\">1290</a>\n<a href=\"#1291\" id=\"1291\">1291</a>\n<a href=\"#1292\" id=\"1292\">1292</a>\n<a href=\"#1293\" id=\"1293\">1293</a>\n<a href=\"#1294\" id=\"1294\">1294</a>\n<a href=\"#1295\" id=\"1295\">1295</a>\n<a href=\"#1296\" id=\"1296\">1296</a>\n<a href=\"#1297\" id=\"1297\">1297</a>\n<a href=\"#1298\" id=\"1298\">1298</a>\n<a href=\"#1299\" id=\"1299\">1299</a>\n<a href=\"#1300\" id=\"1300\">1300</a>\n<a href=\"#1301\" id=\"1301\">1301</a>\n<a href=\"#1302\" id=\"1302\">1302</a>\n<a href=\"#1303\" id=\"1303\">1303</a>\n<a href=\"#1304\" id=\"1304\">1304</a>\n<a href=\"#1305\" id=\"1305\">1305</a>\n<a href=\"#1306\" id=\"1306\">1306</a>\n<a href=\"#1307\" id=\"1307\">1307</a>\n<a href=\"#1308\" id=\"1308\">1308</a>\n<a href=\"#1309\" id=\"1309\">1309</a>\n<a href=\"#1310\" id=\"1310\">1310</a>\n<a href=\"#1311\" id=\"1311\">1311</a>\n<a href=\"#1312\" id=\"1312\">1312</a>\n<a href=\"#1313\" id=\"1313\">1313</a>\n<a href=\"#1314\" id=\"1314\">1314</a>\n<a href=\"#1315\" id=\"1315\">1315</a>\n<a href=\"#1316\" id=\"1316\">1316</a>\n<a href=\"#1317\" id=\"1317\">1317</a>\n<a href=\"#1318\" id=\"1318\">1318</a>\n<a href=\"#1319\" id=\"1319\">1319</a>\n<a href=\"#1320\" id=\"1320\">1320</a>\n<a href=\"#1321\" id=\"1321\">1321</a>\n<a href=\"#1322\" id=\"1322\">1322</a>\n<a href=\"#1323\" id=\"1323\">1323</a>\n<a href=\"#1324\" id=\"1324\">1324</a>\n<a href=\"#1325\" id=\"1325\">1325</a>\n<a href=\"#1326\" id=\"1326\">1326</a>\n<a href=\"#1327\" id=\"1327\">1327</a>\n<a href=\"#1328\" id=\"1328\">1328</a>\n<a href=\"#1329\" id=\"1329\">1329</a>\n<a href=\"#1330\" id=\"1330\">1330</a>\n<a href=\"#1331\" id=\"1331\">1331</a>\n<a href=\"#1332\" id=\"1332\">1332</a>\n<a href=\"#1333\" id=\"1333\">1333</a>\n<a href=\"#1334\" id=\"1334\">1334</a>\n<a href=\"#1335\" id=\"1335\">1335</a>\n<a href=\"#1336\" id=\"1336\">1336</a>\n<a href=\"#1337\" id=\"1337\">1337</a>\n<a href=\"#1338\" id=\"1338\">1338</a>\n<a href=\"#1339\" id=\"1339\">1339</a>\n<a href=\"#1340\" id=\"1340\">1340</a>\n<a href=\"#1341\" id=\"1341\">1341</a>\n<a href=\"#1342\" id=\"1342\">1342</a>\n<a href=\"#1343\" id=\"1343\">1343</a>\n<a href=\"#1344\" id=\"1344\">1344</a>\n<a href=\"#1345\" id=\"1345\">1345</a>\n<a href=\"#1346\" id=\"1346\">1346</a>\n<a href=\"#1347\" id=\"1347\">1347</a>\n<a href=\"#1348\" id=\"1348\">1348</a>\n<a href=\"#1349\" id=\"1349\">1349</a>\n<a href=\"#1350\" id=\"1350\">1350</a>\n<a href=\"#1351\" id=\"1351\">1351</a>\n<a href=\"#1352\" id=\"1352\">1352</a>\n<a href=\"#1353\" id=\"1353\">1353</a>\n<a href=\"#1354\" id=\"1354\">1354</a>\n<a href=\"#1355\" id=\"1355\">1355</a>\n<a href=\"#1356\" id=\"1356\">1356</a>\n<a href=\"#1357\" id=\"1357\">1357</a>\n<a href=\"#1358\" id=\"1358\">1358</a>\n<a href=\"#1359\" id=\"1359\">1359</a>\n<a href=\"#1360\" id=\"1360\">1360</a>\n<a href=\"#1361\" id=\"1361\">1361</a>\n<a href=\"#1362\" id=\"1362\">1362</a>\n<a href=\"#1363\" id=\"1363\">1363</a>\n<a href=\"#1364\" id=\"1364\">1364</a>\n<a href=\"#1365\" id=\"1365\">1365</a>\n<a href=\"#1366\" id=\"1366\">1366</a>\n<a href=\"#1367\" id=\"1367\">1367</a>\n<a href=\"#1368\" id=\"1368\">1368</a>\n<a href=\"#1369\" id=\"1369\">1369</a>\n<a href=\"#1370\" id=\"1370\">1370</a>\n<a href=\"#1371\" id=\"1371\">1371</a>\n<a href=\"#1372\" id=\"1372\">1372</a>\n<a href=\"#1373\" id=\"1373\">1373</a>\n<a href=\"#1374\" id=\"1374\">1374</a>\n<a href=\"#1375\" id=\"1375\">1375</a>\n<a href=\"#1376\" id=\"1376\">1376</a>\n<a href=\"#1377\" id=\"1377\">1377</a>\n<a href=\"#1378\" id=\"1378\">1378</a>\n<a href=\"#1379\" id=\"1379\">1379</a>\n<a href=\"#1380\" id=\"1380\">1380</a>\n<a href=\"#1381\" id=\"1381\">1381</a>\n<a href=\"#1382\" id=\"1382\">1382</a>\n<a href=\"#1383\" id=\"1383\">1383</a>\n<a href=\"#1384\" id=\"1384\">1384</a>\n<a href=\"#1385\" id=\"1385\">1385</a>\n<a href=\"#1386\" id=\"1386\">1386</a>\n<a href=\"#1387\" id=\"1387\">1387</a>\n<a href=\"#1388\" id=\"1388\">1388</a>\n<a href=\"#1389\" id=\"1389\">1389</a>\n<a href=\"#1390\" id=\"1390\">1390</a>\n<a href=\"#1391\" id=\"1391\">1391</a>\n<a href=\"#1392\" id=\"1392\">1392</a>\n<a href=\"#1393\" id=\"1393\">1393</a>\n<a href=\"#1394\" id=\"1394\">1394</a>\n<a href=\"#1395\" id=\"1395\">1395</a>\n<a href=\"#1396\" id=\"1396\">1396</a>\n<a href=\"#1397\" id=\"1397\">1397</a>\n<a href=\"#1398\" id=\"1398\">1398</a>\n<a href=\"#1399\" id=\"1399\">1399</a>\n<a href=\"#1400\" id=\"1400\">1400</a>\n<a href=\"#1401\" id=\"1401\">1401</a>\n<a href=\"#1402\" id=\"1402\">1402</a>\n<a href=\"#1403\" id=\"1403\">1403</a>\n<a href=\"#1404\" id=\"1404\">1404</a>\n<a href=\"#1405\" id=\"1405\">1405</a>\n<a href=\"#1406\" id=\"1406\">1406</a>\n<a href=\"#1407\" id=\"1407\">1407</a>\n<a href=\"#1408\" id=\"1408\">1408</a>\n<a href=\"#1409\" id=\"1409\">1409</a>\n<a href=\"#1410\" id=\"1410\">1410</a>\n<a href=\"#1411\" id=\"1411\">1411</a>\n<a href=\"#1412\" id=\"1412\">1412</a>\n<a href=\"#1413\" id=\"1413\">1413</a>\n<a href=\"#1414\" id=\"1414\">1414</a>\n<a href=\"#1415\" id=\"1415\">1415</a>\n<a href=\"#1416\" id=\"1416\">1416</a>\n<a href=\"#1417\" id=\"1417\">1417</a>\n<a href=\"#1418\" id=\"1418\">1418</a>\n<a href=\"#1419\" id=\"1419\">1419</a>\n<a href=\"#1420\" id=\"1420\">1420</a>\n<a href=\"#1421\" id=\"1421\">1421</a>\n<a href=\"#1422\" id=\"1422\">1422</a>\n<a href=\"#1423\" id=\"1423\">1423</a>\n<a href=\"#1424\" id=\"1424\">1424</a>\n<a href=\"#1425\" id=\"1425\">1425</a>\n<a href=\"#1426\" id=\"1426\">1426</a>\n<a href=\"#1427\" id=\"1427\">1427</a>\n<a href=\"#1428\" id=\"1428\">1428</a>\n<a href=\"#1429\" id=\"1429\">1429</a>\n<a href=\"#1430\" id=\"1430\">1430</a>\n<a href=\"#1431\" id=\"1431\">1431</a>\n<a href=\"#1432\" id=\"1432\">1432</a>\n<a href=\"#1433\" id=\"1433\">1433</a>\n<a href=\"#1434\" id=\"1434\">1434</a>\n<a href=\"#1435\" id=\"1435\">1435</a>\n<a href=\"#1436\" id=\"1436\">1436</a>\n<a href=\"#1437\" id=\"1437\">1437</a>\n<a href=\"#1438\" id=\"1438\">1438</a>\n<a href=\"#1439\" id=\"1439\">1439</a>\n<a href=\"#1440\" id=\"1440\">1440</a>\n<a href=\"#1441\" id=\"1441\">1441</a>\n<a href=\"#1442\" id=\"1442\">1442</a>\n<a href=\"#1443\" id=\"1443\">1443</a>\n<a href=\"#1444\" id=\"1444\">1444</a>\n<a href=\"#1445\" id=\"1445\">1445</a>\n<a href=\"#1446\" id=\"1446\">1446</a>\n<a href=\"#1447\" id=\"1447\">1447</a>\n<a href=\"#1448\" id=\"1448\">1448</a>\n<a href=\"#1449\" id=\"1449\">1449</a>\n<a href=\"#1450\" id=\"1450\">1450</a>\n<a href=\"#1451\" id=\"1451\">1451</a>\n<a href=\"#1452\" id=\"1452\">1452</a>\n<a href=\"#1453\" id=\"1453\">1453</a>\n<a href=\"#1454\" id=\"1454\">1454</a>\n<a href=\"#1455\" id=\"1455\">1455</a>\n<a href=\"#1456\" id=\"1456\">1456</a>\n<a href=\"#1457\" id=\"1457\">1457</a>\n<a href=\"#1458\" id=\"1458\">1458</a>\n<a href=\"#1459\" id=\"1459\">1459</a>\n<a href=\"#1460\" id=\"1460\">1460</a>\n<a href=\"#1461\" id=\"1461\">1461</a>\n<a href=\"#1462\" id=\"1462\">1462</a>\n<a href=\"#1463\" id=\"1463\">1463</a>\n<a href=\"#1464\" id=\"1464\">1464</a>\n<a href=\"#1465\" id=\"1465\">1465</a>\n<a href=\"#1466\" id=\"1466\">1466</a>\n<a href=\"#1467\" id=\"1467\">1467</a>\n<a href=\"#1468\" id=\"1468\">1468</a>\n<a href=\"#1469\" id=\"1469\">1469</a>\n<a href=\"#1470\" id=\"1470\">1470</a>\n<a href=\"#1471\" id=\"1471\">1471</a>\n<a href=\"#1472\" id=\"1472\">1472</a>\n<a href=\"#1473\" id=\"1473\">1473</a>\n<a href=\"#1474\" id=\"1474\">1474</a>\n<a href=\"#1475\" id=\"1475\">1475</a>\n<a href=\"#1476\" id=\"1476\">1476</a>\n<a href=\"#1477\" id=\"1477\">1477</a>\n<a href=\"#1478\" id=\"1478\">1478</a>\n<a href=\"#1479\" id=\"1479\">1479</a>\n<a href=\"#1480\" id=\"1480\">1480</a>\n<a href=\"#1481\" id=\"1481\">1481</a>\n<a href=\"#1482\" id=\"1482\">1482</a>\n<a href=\"#1483\" id=\"1483\">1483</a>\n<a href=\"#1484\" id=\"1484\">1484</a>\n<a href=\"#1485\" id=\"1485\">1485</a>\n<a href=\"#1486\" id=\"1486\">1486</a>\n<a href=\"#1487\" id=\"1487\">1487</a>\n<a href=\"#1488\" id=\"1488\">1488</a>\n<a href=\"#1489\" id=\"1489\">1489</a>\n<a href=\"#1490\" id=\"1490\">1490</a>\n<a href=\"#1491\" id=\"1491\">1491</a>\n<a href=\"#1492\" id=\"1492\">1492</a>\n<a href=\"#1493\" id=\"1493\">1493</a>\n<a href=\"#1494\" id=\"1494\">1494</a>\n<a href=\"#1495\" id=\"1495\">1495</a>\n<a href=\"#1496\" id=\"1496\">1496</a>\n<a href=\"#1497\" id=\"1497\">1497</a>\n<a href=\"#1498\" id=\"1498\">1498</a>\n<a href=\"#1499\" id=\"1499\">1499</a>\n<a href=\"#1500\" id=\"1500\">1500</a>\n<a href=\"#1501\" id=\"1501\">1501</a>\n<a href=\"#1502\" id=\"1502\">1502</a>\n<a href=\"#1503\" id=\"1503\">1503</a>\n<a href=\"#1504\" id=\"1504\">1504</a>\n<a href=\"#1505\" id=\"1505\">1505</a>\n<a href=\"#1506\" id=\"1506\">1506</a>\n<a href=\"#1507\" id=\"1507\">1507</a>\n<a href=\"#1508\" id=\"1508\">1508</a>\n<a href=\"#1509\" id=\"1509\">1509</a>\n<a href=\"#1510\" id=\"1510\">1510</a>\n<a href=\"#1511\" id=\"1511\">1511</a>\n<a href=\"#1512\" id=\"1512\">1512</a>\n<a href=\"#1513\" id=\"1513\">1513</a>\n<a href=\"#1514\" id=\"1514\">1514</a>\n<a href=\"#1515\" id=\"1515\">1515</a>\n<a href=\"#1516\" id=\"1516\">1516</a>\n<a href=\"#1517\" id=\"1517\">1517</a>\n<a href=\"#1518\" id=\"1518\">1518</a>\n<a href=\"#1519\" id=\"1519\">1519</a>\n<a href=\"#1520\" id=\"1520\">1520</a>\n<a href=\"#1521\" id=\"1521\">1521</a>\n<a href=\"#1522\" id=\"1522\">1522</a>\n<a href=\"#1523\" id=\"1523\">1523</a>\n<a href=\"#1524\" id=\"1524\">1524</a>\n<a href=\"#1525\" id=\"1525\">1525</a>\n<a href=\"#1526\" id=\"1526\">1526</a>\n<a href=\"#1527\" id=\"1527\">1527</a>\n<a href=\"#1528\" id=\"1528\">1528</a>\n<a href=\"#1529\" id=\"1529\">1529</a>\n<a href=\"#1530\" id=\"1530\">1530</a>\n<a href=\"#1531\" id=\"1531\">1531</a>\n<a href=\"#1532\" id=\"1532\">1532</a>\n<a href=\"#1533\" id=\"1533\">1533</a>\n<a href=\"#1534\" id=\"1534\">1534</a>\n<a href=\"#1535\" id=\"1535\">1535</a>\n<a href=\"#1536\" id=\"1536\">1536</a>\n<a href=\"#1537\" id=\"1537\">1537</a>\n<a href=\"#1538\" id=\"1538\">1538</a>\n<a href=\"#1539\" id=\"1539\">1539</a>\n<a href=\"#1540\" id=\"1540\">1540</a>\n<a href=\"#1541\" id=\"1541\">1541</a>\n<a href=\"#1542\" id=\"1542\">1542</a>\n<a href=\"#1543\" id=\"1543\">1543</a>\n<a href=\"#1544\" id=\"1544\">1544</a>\n<a href=\"#1545\" id=\"1545\">1545</a>\n<a href=\"#1546\" id=\"1546\">1546</a>\n<a href=\"#1547\" id=\"1547\">1547</a>\n<a href=\"#1548\" id=\"1548\">1548</a>\n<a href=\"#1549\" id=\"1549\">1549</a>\n<a href=\"#1550\" id=\"1550\">1550</a>\n<a href=\"#1551\" id=\"1551\">1551</a>\n<a href=\"#1552\" id=\"1552\">1552</a>\n<a href=\"#1553\" id=\"1553\">1553</a>\n<a href=\"#1554\" id=\"1554\">1554</a>\n<a href=\"#1555\" id=\"1555\">1555</a>\n<a href=\"#1556\" id=\"1556\">1556</a>\n<a href=\"#1557\" id=\"1557\">1557</a>\n<a href=\"#1558\" id=\"1558\">1558</a>\n<a href=\"#1559\" id=\"1559\">1559</a>\n<a href=\"#1560\" id=\"1560\">1560</a>\n<a href=\"#1561\" id=\"1561\">1561</a>\n<a href=\"#1562\" id=\"1562\">1562</a>\n<a href=\"#1563\" id=\"1563\">1563</a>\n<a href=\"#1564\" id=\"1564\">1564</a>\n<a href=\"#1565\" id=\"1565\">1565</a>\n<a href=\"#1566\" id=\"1566\">1566</a>\n<a href=\"#1567\" id=\"1567\">1567</a>\n<a href=\"#1568\" id=\"1568\">1568</a>\n<a href=\"#1569\" id=\"1569\">1569</a>\n<a href=\"#1570\" id=\"1570\">1570</a>\n<a href=\"#1571\" id=\"1571\">1571</a>\n<a href=\"#1572\" id=\"1572\">1572</a>\n<a href=\"#1573\" id=\"1573\">1573</a>\n<a href=\"#1574\" id=\"1574\">1574</a>\n<a href=\"#1575\" id=\"1575\">1575</a>\n<a href=\"#1576\" id=\"1576\">1576</a>\n<a href=\"#1577\" id=\"1577\">1577</a>\n<a href=\"#1578\" id=\"1578\">1578</a>\n<a href=\"#1579\" id=\"1579\">1579</a>\n<a href=\"#1580\" id=\"1580\">1580</a>\n<a href=\"#1581\" id=\"1581\">1581</a>\n<a href=\"#1582\" id=\"1582\">1582</a>\n<a href=\"#1583\" id=\"1583\">1583</a>\n<a href=\"#1584\" id=\"1584\">1584</a>\n<a href=\"#1585\" id=\"1585\">1585</a>\n<a href=\"#1586\" id=\"1586\">1586</a>\n<a href=\"#1587\" id=\"1587\">1587</a>\n<a href=\"#1588\" id=\"1588\">1588</a>\n<a href=\"#1589\" id=\"1589\">1589</a>\n<a href=\"#1590\" id=\"1590\">1590</a>\n<a href=\"#1591\" id=\"1591\">1591</a>\n<a href=\"#1592\" id=\"1592\">1592</a>\n<a href=\"#1593\" id=\"1593\">1593</a>\n<a href=\"#1594\" id=\"1594\">1594</a>\n<a href=\"#1595\" id=\"1595\">1595</a>\n<a href=\"#1596\" id=\"1596\">1596</a>\n<a href=\"#1597\" id=\"1597\">1597</a>\n<a href=\"#1598\" id=\"1598\">1598</a>\n<a href=\"#1599\" id=\"1599\">1599</a>\n<a href=\"#1600\" id=\"1600\">1600</a>\n<a href=\"#1601\" id=\"1601\">1601</a>\n<a href=\"#1602\" id=\"1602\">1602</a>\n<a href=\"#1603\" id=\"1603\">1603</a>\n<a href=\"#1604\" id=\"1604\">1604</a>\n<a href=\"#1605\" id=\"1605\">1605</a>\n<a href=\"#1606\" id=\"1606\">1606</a>\n<a href=\"#1607\" id=\"1607\">1607</a>\n<a href=\"#1608\" id=\"1608\">1608</a>\n<a href=\"#1609\" id=\"1609\">1609</a>\n<a href=\"#1610\" id=\"1610\">1610</a>\n<a href=\"#1611\" id=\"1611\">1611</a>\n<a href=\"#1612\" id=\"1612\">1612</a>\n<a href=\"#1613\" id=\"1613\">1613</a>\n<a href=\"#1614\" id=\"1614\">1614</a>\n<a href=\"#1615\" id=\"1615\">1615</a>\n<a href=\"#1616\" id=\"1616\">1616</a>\n<a href=\"#1617\" id=\"1617\">1617</a>\n<a href=\"#1618\" id=\"1618\">1618</a>\n<a href=\"#1619\" id=\"1619\">1619</a>\n<a href=\"#1620\" id=\"1620\">1620</a>\n<a href=\"#1621\" id=\"1621\">1621</a>\n<a href=\"#1622\" id=\"1622\">1622</a>\n<a href=\"#1623\" id=\"1623\">1623</a>\n<a href=\"#1624\" id=\"1624\">1624</a>\n<a href=\"#1625\" id=\"1625\">1625</a>\n<a href=\"#1626\" id=\"1626\">1626</a>\n<a href=\"#1627\" id=\"1627\">1627</a>\n<a href=\"#1628\" id=\"1628\">1628</a>\n<a href=\"#1629\" id=\"1629\">1629</a>\n<a href=\"#1630\" id=\"1630\">1630</a>\n<a href=\"#1631\" id=\"1631\">1631</a>\n<a href=\"#1632\" id=\"1632\">1632</a>\n<a href=\"#1633\" id=\"1633\">1633</a>\n<a href=\"#1634\" id=\"1634\">1634</a>\n<a href=\"#1635\" id=\"1635\">1635</a>\n<a href=\"#1636\" id=\"1636\">1636</a>\n<a href=\"#1637\" id=\"1637\">1637</a>\n<a href=\"#1638\" id=\"1638\">1638</a>\n<a href=\"#1639\" id=\"1639\">1639</a>\n<a href=\"#1640\" id=\"1640\">1640</a>\n<a href=\"#1641\" id=\"1641\">1641</a>\n<a href=\"#1642\" id=\"1642\">1642</a>\n<a href=\"#1643\" id=\"1643\">1643</a>\n<a href=\"#1644\" id=\"1644\">1644</a>\n<a href=\"#1645\" id=\"1645\">1645</a>\n<a href=\"#1646\" id=\"1646\">1646</a>\n<a href=\"#1647\" id=\"1647\">1647</a>\n<a href=\"#1648\" id=\"1648\">1648</a>\n<a href=\"#1649\" id=\"1649\">1649</a>\n<a href=\"#1650\" id=\"1650\">1650</a>\n<a href=\"#1651\" id=\"1651\">1651</a>\n<a href=\"#1652\" id=\"1652\">1652</a>\n<a href=\"#1653\" id=\"1653\">1653</a>\n<a href=\"#1654\" id=\"1654\">1654</a>\n<a href=\"#1655\" id=\"1655\">1655</a>\n<a href=\"#1656\" id=\"1656\">1656</a>\n<a href=\"#1657\" id=\"1657\">1657</a>\n<a href=\"#1658\" id=\"1658\">1658</a>\n<a href=\"#1659\" id=\"1659\">1659</a>\n<a href=\"#1660\" id=\"1660\">1660</a>\n<a href=\"#1661\" id=\"1661\">1661</a>\n<a href=\"#1662\" id=\"1662\">1662</a>\n<a href=\"#1663\" id=\"1663\">1663</a>\n<a href=\"#1664\" id=\"1664\">1664</a>\n<a href=\"#1665\" id=\"1665\">1665</a>\n<a href=\"#1666\" id=\"1666\">1666</a>\n<a href=\"#1667\" id=\"1667\">1667</a>\n<a href=\"#1668\" id=\"1668\">1668</a>\n<a href=\"#1669\" id=\"1669\">1669</a>\n<a href=\"#1670\" id=\"1670\">1670</a>\n<a href=\"#1671\" id=\"1671\">1671</a>\n<a href=\"#1672\" id=\"1672\">1672</a>\n<a href=\"#1673\" id=\"1673\">1673</a>\n<a href=\"#1674\" id=\"1674\">1674</a>\n<a href=\"#1675\" id=\"1675\">1675</a>\n<a href=\"#1676\" id=\"1676\">1676</a>\n<a href=\"#1677\" id=\"1677\">1677</a>\n<a href=\"#1678\" id=\"1678\">1678</a>\n<a href=\"#1679\" id=\"1679\">1679</a>\n<a href=\"#1680\" id=\"1680\">1680</a>\n<a href=\"#1681\" id=\"1681\">1681</a>\n<a href=\"#1682\" id=\"1682\">1682</a>\n<a href=\"#1683\" id=\"1683\">1683</a>\n<a href=\"#1684\" id=\"1684\">1684</a>\n<a href=\"#1685\" id=\"1685\">1685</a>\n<a href=\"#1686\" id=\"1686\">1686</a>\n<a href=\"#1687\" id=\"1687\">1687</a>\n<a href=\"#1688\" id=\"1688\">1688</a>\n<a href=\"#1689\" id=\"1689\">1689</a>\n<a href=\"#1690\" id=\"1690\">1690</a>\n<a href=\"#1691\" id=\"1691\">1691</a>\n<a href=\"#1692\" id=\"1692\">1692</a>\n<a href=\"#1693\" id=\"1693\">1693</a>\n<a href=\"#1694\" id=\"1694\">1694</a>\n<a href=\"#1695\" id=\"1695\">1695</a>\n<a href=\"#1696\" id=\"1696\">1696</a>\n<a href=\"#1697\" id=\"1697\">1697</a>\n<a href=\"#1698\" id=\"1698\">1698</a>\n<a href=\"#1699\" id=\"1699\">1699</a>\n<a href=\"#1700\" id=\"1700\">1700</a>\n<a href=\"#1701\" id=\"1701\">1701</a>\n<a href=\"#1702\" id=\"1702\">1702</a>\n<a href=\"#1703\" id=\"1703\">1703</a>\n<a href=\"#1704\" id=\"1704\">1704</a>\n<a href=\"#1705\" id=\"1705\">1705</a>\n<a href=\"#1706\" id=\"1706\">1706</a>\n<a href=\"#1707\" id=\"1707\">1707</a>\n<a href=\"#1708\" id=\"1708\">1708</a>\n<a href=\"#1709\" id=\"1709\">1709</a>\n<a href=\"#1710\" id=\"1710\">1710</a>\n<a href=\"#1711\" id=\"1711\">1711</a>\n<a href=\"#1712\" id=\"1712\">1712</a>\n<a href=\"#1713\" id=\"1713\">1713</a>\n<a href=\"#1714\" id=\"1714\">1714</a>\n<a href=\"#1715\" id=\"1715\">1715</a>\n<a href=\"#1716\" id=\"1716\">1716</a>\n<a href=\"#1717\" id=\"1717\">1717</a>\n<a href=\"#1718\" id=\"1718\">1718</a>\n<a href=\"#1719\" id=\"1719\">1719</a>\n<a href=\"#1720\" id=\"1720\">1720</a>\n<a href=\"#1721\" id=\"1721\">1721</a>\n<a href=\"#1722\" id=\"1722\">1722</a>\n<a href=\"#1723\" id=\"1723\">1723</a>\n<a href=\"#1724\" id=\"1724\">1724</a>\n<a href=\"#1725\" id=\"1725\">1725</a>\n<a href=\"#1726\" id=\"1726\">1726</a>\n<a href=\"#1727\" id=\"1727\">1727</a>\n<a href=\"#1728\" id=\"1728\">1728</a>\n<a href=\"#1729\" id=\"1729\">1729</a>\n<a href=\"#1730\" id=\"1730\">1730</a>\n<a href=\"#1731\" id=\"1731\">1731</a>\n<a href=\"#1732\" id=\"1732\">1732</a>\n<a href=\"#1733\" id=\"1733\">1733</a>\n<a href=\"#1734\" id=\"1734\">1734</a>\n<a href=\"#1735\" id=\"1735\">1735</a>\n<a href=\"#1736\" id=\"1736\">1736</a>\n<a href=\"#1737\" id=\"1737\">1737</a>\n<a href=\"#1738\" id=\"1738\">1738</a>\n<a href=\"#1739\" id=\"1739\">1739</a>\n<a href=\"#1740\" id=\"1740\">1740</a>\n<a href=\"#1741\" id=\"1741\">1741</a>\n<a href=\"#1742\" id=\"1742\">1742</a>\n<a href=\"#1743\" id=\"1743\">1743</a>\n<a href=\"#1744\" id=\"1744\">1744</a>\n<a href=\"#1745\" id=\"1745\">1745</a>\n<a href=\"#1746\" id=\"1746\">1746</a>\n<a href=\"#1747\" id=\"1747\">1747</a>\n<a href=\"#1748\" id=\"1748\">1748</a>\n<a href=\"#1749\" id=\"1749\">1749</a>\n<a href=\"#1750\" id=\"1750\">1750</a>\n<a href=\"#1751\" id=\"1751\">1751</a>\n<a href=\"#1752\" id=\"1752\">1752</a>\n<a href=\"#1753\" id=\"1753\">1753</a>\n<a href=\"#1754\" id=\"1754\">1754</a>\n<a href=\"#1755\" id=\"1755\">1755</a>\n<a href=\"#1756\" id=\"1756\">1756</a>\n<a href=\"#1757\" id=\"1757\">1757</a>\n<a href=\"#1758\" id=\"1758\">1758</a>\n<a href=\"#1759\" id=\"1759\">1759</a>\n<a href=\"#1760\" id=\"1760\">1760</a>\n<a href=\"#1761\" id=\"1761\">1761</a>\n<a href=\"#1762\" id=\"1762\">1762</a>\n<a href=\"#1763\" id=\"1763\">1763</a>\n<a href=\"#1764\" id=\"1764\">1764</a>\n<a href=\"#1765\" id=\"1765\">1765</a>\n<a href=\"#1766\" id=\"1766\">1766</a>\n<a href=\"#1767\" id=\"1767\">1767</a>\n<a href=\"#1768\" id=\"1768\">1768</a>\n<a href=\"#1769\" id=\"1769\">1769</a>\n<a href=\"#1770\" id=\"1770\">1770</a>\n<a href=\"#1771\" id=\"1771\">1771</a>\n<a href=\"#1772\" id=\"1772\">1772</a>\n<a href=\"#1773\" id=\"1773\">1773</a>\n<a href=\"#1774\" id=\"1774\">1774</a>\n<a href=\"#1775\" id=\"1775\">1775</a>\n<a href=\"#1776\" id=\"1776\">1776</a>\n<a href=\"#1777\" id=\"1777\">1777</a>\n<a href=\"#1778\" id=\"1778\">1778</a>\n<a href=\"#1779\" id=\"1779\">1779</a>\n<a href=\"#1780\" id=\"1780\">1780</a>\n<a href=\"#1781\" id=\"1781\">1781</a>\n<a href=\"#1782\" id=\"1782\">1782</a>\n<a href=\"#1783\" id=\"1783\">1783</a>\n<a href=\"#1784\" id=\"1784\">1784</a>\n<a href=\"#1785\" id=\"1785\">1785</a>\n<a href=\"#1786\" id=\"1786\">1786</a>\n<a href=\"#1787\" id=\"1787\">1787</a>\n<a href=\"#1788\" id=\"1788\">1788</a>\n<a href=\"#1789\" id=\"1789\">1789</a>\n<a href=\"#1790\" id=\"1790\">1790</a>\n<a href=\"#1791\" id=\"1791\">1791</a>\n<a href=\"#1792\" id=\"1792\">1792</a>\n<a href=\"#1793\" id=\"1793\">1793</a>\n<a href=\"#1794\" id=\"1794\">1794</a>\n<a href=\"#1795\" id=\"1795\">1795</a>\n<a href=\"#1796\" id=\"1796\">1796</a>\n<a href=\"#1797\" id=\"1797\">1797</a>\n<a href=\"#1798\" id=\"1798\">1798</a>\n<a href=\"#1799\" id=\"1799\">1799</a>\n<a href=\"#1800\" id=\"1800\">1800</a>\n<a href=\"#1801\" id=\"1801\">1801</a>\n<a href=\"#1802\" id=\"1802\">1802</a>\n<a href=\"#1803\" id=\"1803\">1803</a>\n<a href=\"#1804\" id=\"1804\">1804</a>\n<a href=\"#1805\" id=\"1805\">1805</a>\n<a href=\"#1806\" id=\"1806\">1806</a>\n<a href=\"#1807\" id=\"1807\">1807</a>\n<a href=\"#1808\" id=\"1808\">1808</a>\n<a href=\"#1809\" id=\"1809\">1809</a>\n<a href=\"#1810\" id=\"1810\">1810</a>\n<a href=\"#1811\" id=\"1811\">1811</a>\n<a href=\"#1812\" id=\"1812\">1812</a>\n<a href=\"#1813\" id=\"1813\">1813</a>\n<a href=\"#1814\" id=\"1814\">1814</a>\n<a href=\"#1815\" id=\"1815\">1815</a>\n<a href=\"#1816\" id=\"1816\">1816</a>\n<a href=\"#1817\" id=\"1817\">1817</a>\n<a href=\"#1818\" id=\"1818\">1818</a>\n<a href=\"#1819\" id=\"1819\">1819</a>\n<a href=\"#1820\" id=\"1820\">1820</a>\n<a href=\"#1821\" id=\"1821\">1821</a>\n<a href=\"#1822\" id=\"1822\">1822</a>\n<a href=\"#1823\" id=\"1823\">1823</a>\n<a href=\"#1824\" id=\"1824\">1824</a>\n<a href=\"#1825\" id=\"1825\">1825</a>\n<a href=\"#1826\" id=\"1826\">1826</a>\n<a href=\"#1827\" id=\"1827\">1827</a>\n<a href=\"#1828\" id=\"1828\">1828</a>\n<a href=\"#1829\" id=\"1829\">1829</a>\n<a href=\"#1830\" id=\"1830\">1830</a>\n<a href=\"#1831\" id=\"1831\">1831</a>\n<a href=\"#1832\" id=\"1832\">1832</a>\n<a href=\"#1833\" id=\"1833\">1833</a>\n<a href=\"#1834\" id=\"1834\">1834</a>\n<a href=\"#1835\" id=\"1835\">1835</a>\n<a href=\"#1836\" id=\"1836\">1836</a>\n<a href=\"#1837\" id=\"1837\">1837</a>\n<a href=\"#1838\" id=\"1838\">1838</a>\n<a href=\"#1839\" id=\"1839\">1839</a>\n<a href=\"#1840\" id=\"1840\">1840</a>\n<a href=\"#1841\" id=\"1841\">1841</a>\n<a href=\"#1842\" id=\"1842\">1842</a>\n<a href=\"#1843\" id=\"1843\">1843</a>\n<a href=\"#1844\" id=\"1844\">1844</a>\n<a href=\"#1845\" id=\"1845\">1845</a>\n<a href=\"#1846\" id=\"1846\">1846</a>\n<a href=\"#1847\" id=\"1847\">1847</a>\n<a href=\"#1848\" id=\"1848\">1848</a>\n<a href=\"#1849\" id=\"1849\">1849</a>\n<a href=\"#1850\" id=\"1850\">1850</a>\n<a href=\"#1851\" id=\"1851\">1851</a>\n<a href=\"#1852\" id=\"1852\">1852</a>\n<a href=\"#1853\" id=\"1853\">1853</a>\n<a href=\"#1854\" id=\"1854\">1854</a>\n<a href=\"#1855\" id=\"1855\">1855</a>\n<a href=\"#1856\" id=\"1856\">1856</a>\n<a href=\"#1857\" id=\"1857\">1857</a>\n<a href=\"#1858\" id=\"1858\">1858</a>\n<a href=\"#1859\" id=\"1859\">1859</a>\n<a href=\"#1860\" id=\"1860\">1860</a>\n<a href=\"#1861\" id=\"1861\">1861</a>\n<a href=\"#1862\" id=\"1862\">1862</a>\n<a href=\"#1863\" id=\"1863\">1863</a>\n<a href=\"#1864\" id=\"1864\">1864</a>\n<a href=\"#1865\" id=\"1865\">1865</a>\n<a href=\"#1866\" id=\"1866\">1866</a>\n<a href=\"#1867\" id=\"1867\">1867</a>\n<a href=\"#1868\" id=\"1868\">1868</a>\n<a href=\"#1869\" id=\"1869\">1869</a>\n<a href=\"#1870\" id=\"1870\">1870</a>\n<a href=\"#1871\" id=\"1871\">1871</a>\n<a href=\"#1872\" id=\"1872\">1872</a>\n<a href=\"#1873\" id=\"1873\">1873</a>\n<a href=\"#1874\" id=\"1874\">1874</a>\n<a href=\"#1875\" id=\"1875\">1875</a>\n<a href=\"#1876\" id=\"1876\">1876</a>\n<a href=\"#1877\" id=\"1877\">1877</a>\n<a href=\"#1878\" id=\"1878\">1878</a>\n<a href=\"#1879\" id=\"1879\">1879</a>\n<a href=\"#1880\" id=\"1880\">1880</a>\n<a href=\"#1881\" id=\"1881\">1881</a>\n<a href=\"#1882\" id=\"1882\">1882</a>\n<a href=\"#1883\" id=\"1883\">1883</a>\n<a href=\"#1884\" id=\"1884\">1884</a>\n<a href=\"#1885\" id=\"1885\">1885</a>\n<a href=\"#1886\" id=\"1886\">1886</a>\n<a href=\"#1887\" id=\"1887\">1887</a>\n<a href=\"#1888\" id=\"1888\">1888</a>\n<a href=\"#1889\" id=\"1889\">1889</a>\n<a href=\"#1890\" id=\"1890\">1890</a>\n<a href=\"#1891\" id=\"1891\">1891</a>\n<a href=\"#1892\" id=\"1892\">1892</a>\n<a href=\"#1893\" id=\"1893\">1893</a>\n<a href=\"#1894\" id=\"1894\">1894</a>\n<a href=\"#1895\" id=\"1895\">1895</a>\n<a href=\"#1896\" id=\"1896\">1896</a>\n<a href=\"#1897\" id=\"1897\">1897</a>\n<a href=\"#1898\" id=\"1898\">1898</a>\n<a href=\"#1899\" id=\"1899\">1899</a>\n<a href=\"#1900\" id=\"1900\">1900</a>\n<a href=\"#1901\" id=\"1901\">1901</a>\n<a href=\"#1902\" id=\"1902\">1902</a>\n<a href=\"#1903\" id=\"1903\">1903</a>\n<a href=\"#1904\" id=\"1904\">1904</a>\n<a href=\"#1905\" id=\"1905\">1905</a>\n<a href=\"#1906\" id=\"1906\">1906</a>\n<a href=\"#1907\" id=\"1907\">1907</a>\n<a href=\"#1908\" id=\"1908\">1908</a>\n<a href=\"#1909\" id=\"1909\">1909</a>\n<a href=\"#1910\" id=\"1910\">1910</a>\n<a href=\"#1911\" id=\"1911\">1911</a>\n<a href=\"#1912\" id=\"1912\">1912</a>\n<a href=\"#1913\" id=\"1913\">1913</a>\n<a href=\"#1914\" id=\"1914\">1914</a>\n<a href=\"#1915\" id=\"1915\">1915</a>\n<a href=\"#1916\" id=\"1916\">1916</a>\n<a href=\"#1917\" id=\"1917\">1917</a>\n<a href=\"#1918\" id=\"1918\">1918</a>\n<a href=\"#1919\" id=\"1919\">1919</a>\n<a href=\"#1920\" id=\"1920\">1920</a>\n<a href=\"#1921\" id=\"1921\">1921</a>\n<a href=\"#1922\" id=\"1922\">1922</a>\n<a href=\"#1923\" id=\"1923\">1923</a>\n<a href=\"#1924\" id=\"1924\">1924</a>\n<a href=\"#1925\" id=\"1925\">1925</a>\n<a href=\"#1926\" id=\"1926\">1926</a>\n<a href=\"#1927\" id=\"1927\">1927</a>\n<a href=\"#1928\" id=\"1928\">1928</a>\n<a href=\"#1929\" id=\"1929\">1929</a>\n<a href=\"#1930\" id=\"1930\">1930</a>\n<a href=\"#1931\" id=\"1931\">1931</a>\n<a href=\"#1932\" id=\"1932\">1932</a>\n<a href=\"#1933\" id=\"1933\">1933</a>\n<a href=\"#1934\" id=\"1934\">1934</a>\n<a href=\"#1935\" id=\"1935\">1935</a>\n<a href=\"#1936\" id=\"1936\">1936</a>\n<a href=\"#1937\" id=\"1937\">1937</a>\n<a href=\"#1938\" id=\"1938\">1938</a>\n<a href=\"#1939\" id=\"1939\">1939</a>\n<a href=\"#1940\" id=\"1940\">1940</a>\n<a href=\"#1941\" id=\"1941\">1941</a>\n<a href=\"#1942\" id=\"1942\">1942</a>\n<a href=\"#1943\" id=\"1943\">1943</a>\n<a href=\"#1944\" id=\"1944\">1944</a>\n<a href=\"#1945\" id=\"1945\">1945</a>\n<a href=\"#1946\" id=\"1946\">1946</a>\n<a href=\"#1947\" id=\"1947\">1947</a>\n<a href=\"#1948\" id=\"1948\">1948</a>\n<a href=\"#1949\" id=\"1949\">1949</a>\n<a href=\"#1950\" id=\"1950\">1950</a>\n<a href=\"#1951\" id=\"1951\">1951</a>\n<a href=\"#1952\" id=\"1952\">1952</a>\n<a href=\"#1953\" id=\"1953\">1953</a>\n<a href=\"#1954\" id=\"1954\">1954</a>\n<a href=\"#1955\" id=\"1955\">1955</a>\n<a href=\"#1956\" id=\"1956\">1956</a>\n<a href=\"#1957\" id=\"1957\">1957</a>\n<a href=\"#1958\" id=\"1958\">1958</a>\n<a href=\"#1959\" id=\"1959\">1959</a>\n<a href=\"#1960\" id=\"1960\">1960</a>\n<a href=\"#1961\" id=\"1961\">1961</a>\n<a href=\"#1962\" id=\"1962\">1962</a>\n<a href=\"#1963\" id=\"1963\">1963</a>\n<a href=\"#1964\" id=\"1964\">1964</a>\n<a href=\"#1965\" id=\"1965\">1965</a>\n<a href=\"#1966\" id=\"1966\">1966</a>\n<a href=\"#1967\" id=\"1967\">1967</a>\n<a href=\"#1968\" id=\"1968\">1968</a>\n<a href=\"#1969\" id=\"1969\">1969</a>\n<a href=\"#1970\" id=\"1970\">1970</a>\n<a href=\"#1971\" id=\"1971\">1971</a>\n<a href=\"#1972\" id=\"1972\">1972</a>\n<a href=\"#1973\" id=\"1973\">1973</a>\n<a href=\"#1974\" id=\"1974\">1974</a>\n<a href=\"#1975\" id=\"1975\">1975</a>\n<a href=\"#1976\" id=\"1976\">1976</a>\n<a href=\"#1977\" id=\"1977\">1977</a>\n<a href=\"#1978\" id=\"1978\">1978</a>\n<a href=\"#1979\" id=\"1979\">1979</a>\n<a href=\"#1980\" id=\"1980\">1980</a>\n<a href=\"#1981\" id=\"1981\">1981</a>\n<a href=\"#1982\" id=\"1982\">1982</a>\n<a href=\"#1983\" id=\"1983\">1983</a>\n<a href=\"#1984\" id=\"1984\">1984</a>\n<a href=\"#1985\" id=\"1985\">1985</a>\n<a href=\"#1986\" id=\"1986\">1986</a>\n<a href=\"#1987\" id=\"1987\">1987</a>\n<a href=\"#1988\" id=\"1988\">1988</a>\n<a href=\"#1989\" id=\"1989\">1989</a>\n<a href=\"#1990\" id=\"1990\">1990</a>\n<a href=\"#1991\" id=\"1991\">1991</a>\n<a href=\"#1992\" id=\"1992\">1992</a>\n<a href=\"#1993\" id=\"1993\">1993</a>\n<a href=\"#1994\" id=\"1994\">1994</a>\n<a href=\"#1995\" id=\"1995\">1995</a>\n<a href=\"#1996\" id=\"1996\">1996</a>\n<a href=\"#1997\" id=\"1997\">1997</a>\n<a href=\"#1998\" id=\"1998\">1998</a>\n<a href=\"#1999\" id=\"1999\">1999</a>\n<a href=\"#2000\" id=\"2000\">2000</a>\n<a href=\"#2001\" id=\"2001\">2001</a>\n<a href=\"#2002\" id=\"2002\">2002</a>\n<a href=\"#2003\" id=\"2003\">2003</a>\n<a href=\"#2004\" id=\"2004\">2004</a>\n<a href=\"#2005\" id=\"2005\">2005</a>\n<a href=\"#2006\" id=\"2006\">2006</a>\n<a href=\"#2007\" id=\"2007\">2007</a>\n<a href=\"#2008\" id=\"2008\">2008</a>\n<a href=\"#2009\" id=\"2009\">2009</a>\n<a href=\"#2010\" id=\"2010\">2010</a>\n<a href=\"#2011\" id=\"2011\">2011</a>\n<a href=\"#2012\" id=\"2012\">2012</a>\n<a href=\"#2013\" id=\"2013\">2013</a>\n<a href=\"#2014\" id=\"2014\">2014</a>\n<a href=\"#2015\" id=\"2015\">2015</a>\n<a href=\"#2016\" id=\"2016\">2016</a>\n<a href=\"#2017\" id=\"2017\">2017</a>\n<a href=\"#2018\" id=\"2018\">2018</a>\n<a href=\"#2019\" id=\"2019\">2019</a>\n<a href=\"#2020\" id=\"2020\">2020</a>\n<a href=\"#2021\" id=\"2021\">2021</a>\n<a href=\"#2022\" id=\"2022\">2022</a>\n<a href=\"#2023\" id=\"2023\">2023</a>\n<a href=\"#2024\" id=\"2024\">2024</a>\n<a href=\"#2025\" id=\"2025\">2025</a>\n<a href=\"#2026\" id=\"2026\">2026</a>\n<a href=\"#2027\" id=\"2027\">2027</a>\n<a href=\"#2028\" id=\"2028\">2028</a>\n<a href=\"#2029\" id=\"2029\">2029</a>\n<a href=\"#2030\" id=\"2030\">2030</a>\n<a href=\"#2031\" id=\"2031\">2031</a>\n<a href=\"#2032\" id=\"2032\">2032</a>\n<a href=\"#2033\" id=\"2033\">2033</a>\n<a href=\"#2034\" id=\"2034\">2034</a>\n<a href=\"#2035\" id=\"2035\">2035</a>\n<a href=\"#2036\" id=\"2036\">2036</a>\n<a href=\"#2037\" id=\"2037\">2037</a>\n<a href=\"#2038\" id=\"2038\">2038</a>\n<a href=\"#2039\" id=\"2039\">2039</a>\n<a href=\"#2040\" id=\"2040\">2040</a>\n<a href=\"#2041\" id=\"2041\">2041</a>\n<a href=\"#2042\" id=\"2042\">2042</a>\n<a href=\"#2043\" id=\"2043\">2043</a>\n<a href=\"#2044\" id=\"2044\">2044</a>\n<a href=\"#2045\" id=\"2045\">2045</a>\n<a href=\"#2046\" id=\"2046\">2046</a>\n<a href=\"#2047\" id=\"2047\">2047</a>\n<a href=\"#2048\" id=\"2048\">2048</a>\n<a href=\"#2049\" id=\"2049\">2049</a>\n<a href=\"#2050\" id=\"2050\">2050</a>\n<a href=\"#2051\" id=\"2051\">2051</a>\n<a href=\"#2052\" id=\"2052\">2052</a>\n<a href=\"#2053\" id=\"2053\">2053</a>\n<a href=\"#2054\" id=\"2054\">2054</a>\n<a href=\"#2055\" id=\"2055\">2055</a>\n<a href=\"#2056\" id=\"2056\">2056</a>\n<a href=\"#2057\" id=\"2057\">2057</a>\n<a href=\"#2058\" id=\"2058\">2058</a>\n<a href=\"#2059\" id=\"2059\">2059</a>\n<a href=\"#2060\" id=\"2060\">2060</a>\n<a href=\"#2061\" id=\"2061\">2061</a>\n<a href=\"#2062\" id=\"2062\">2062</a>\n<a href=\"#2063\" id=\"2063\">2063</a>\n<a href=\"#2064\" id=\"2064\">2064</a>\n<a href=\"#2065\" id=\"2065\">2065</a>\n<a href=\"#2066\" id=\"2066\">2066</a>\n<a href=\"#2067\" id=\"2067\">2067</a>\n<a href=\"#2068\" id=\"2068\">2068</a>\n<a href=\"#2069\" id=\"2069\">2069</a>\n<a href=\"#2070\" id=\"2070\">2070</a>\n<a href=\"#2071\" id=\"2071\">2071</a>\n<a href=\"#2072\" id=\"2072\">2072</a>\n<a href=\"#2073\" id=\"2073\">2073</a>\n<a href=\"#2074\" id=\"2074\">2074</a>\n<a href=\"#2075\" id=\"2075\">2075</a>\n<a href=\"#2076\" id=\"2076\">2076</a>\n<a href=\"#2077\" id=\"2077\">2077</a>\n<a href=\"#2078\" id=\"2078\">2078</a>\n<a href=\"#2079\" id=\"2079\">2079</a>\n<a href=\"#2080\" id=\"2080\">2080</a>\n<a href=\"#2081\" id=\"2081\">2081</a>\n<a href=\"#2082\" id=\"2082\">2082</a>\n<a href=\"#2083\" id=\"2083\">2083</a>\n<a href=\"#2084\" id=\"2084\">2084</a>\n<a href=\"#2085\" id=\"2085\">2085</a>\n<a href=\"#2086\" id=\"2086\">2086</a>\n<a href=\"#2087\" id=\"2087\">2087</a>\n<a href=\"#2088\" id=\"2088\">2088</a>\n<a href=\"#2089\" id=\"2089\">2089</a>\n<a href=\"#2090\" id=\"2090\">2090</a>\n<a href=\"#2091\" id=\"2091\">2091</a>\n<a href=\"#2092\" id=\"2092\">2092</a>\n<a href=\"#2093\" id=\"2093\">2093</a>\n<a href=\"#2094\" id=\"2094\">2094</a>\n<a href=\"#2095\" id=\"2095\">2095</a>\n<a href=\"#2096\" id=\"2096\">2096</a>\n<a href=\"#2097\" id=\"2097\">2097</a>\n<a href=\"#2098\" id=\"2098\">2098</a>\n<a href=\"#2099\" id=\"2099\">2099</a>\n<a href=\"#2100\" id=\"2100\">2100</a>\n<a href=\"#2101\" id=\"2101\">2101</a>\n<a href=\"#2102\" id=\"2102\">2102</a>\n<a href=\"#2103\" id=\"2103\">2103</a>\n<a href=\"#2104\" id=\"2104\">2104</a>\n<a href=\"#2105\" id=\"2105\">2105</a>\n<a href=\"#2106\" id=\"2106\">2106</a>\n<a href=\"#2107\" id=\"2107\">2107</a>\n<a href=\"#2108\" id=\"2108\">2108</a>\n<a href=\"#2109\" id=\"2109\">2109</a>\n<a href=\"#2110\" id=\"2110\">2110</a>\n<a href=\"#2111\" id=\"2111\">2111</a>\n<a href=\"#2112\" id=\"2112\">2112</a>\n<a href=\"#2113\" id=\"2113\">2113</a>\n<a href=\"#2114\" id=\"2114\">2114</a>\n<a href=\"#2115\" id=\"2115\">2115</a>\n<a href=\"#2116\" id=\"2116\">2116</a>\n<a href=\"#2117\" id=\"2117\">2117</a>\n<a href=\"#2118\" id=\"2118\">2118</a>\n<a href=\"#2119\" id=\"2119\">2119</a>\n<a href=\"#2120\" id=\"2120\">2120</a>\n<a href=\"#2121\" id=\"2121\">2121</a>\n<a href=\"#2122\" id=\"2122\">2122</a>\n<a href=\"#2123\" id=\"2123\">2123</a>\n<a href=\"#2124\" id=\"2124\">2124</a>\n<a href=\"#2125\" id=\"2125\">2125</a>\n<a href=\"#2126\" id=\"2126\">2126</a>\n<a href=\"#2127\" id=\"2127\">2127</a>\n<a href=\"#2128\" id=\"2128\">2128</a>\n<a href=\"#2129\" id=\"2129\">2129</a>\n<a href=\"#2130\" id=\"2130\">2130</a>\n<a href=\"#2131\" id=\"2131\">2131</a>\n<a href=\"#2132\" id=\"2132\">2132</a>\n<a href=\"#2133\" id=\"2133\">2133</a>\n<a href=\"#2134\" id=\"2134\">2134</a>\n<a href=\"#2135\" id=\"2135\">2135</a>\n<a href=\"#2136\" id=\"2136\">2136</a>\n<a href=\"#2137\" id=\"2137\">2137</a>\n<a href=\"#2138\" id=\"2138\">2138</a>\n<a href=\"#2139\" id=\"2139\">2139</a>\n<a href=\"#2140\" id=\"2140\">2140</a>\n<a href=\"#2141\" id=\"2141\">2141</a>\n<a href=\"#2142\" id=\"2142\">2142</a>\n<a href=\"#2143\" id=\"2143\">2143</a>\n<a href=\"#2144\" id=\"2144\">2144</a>\n<a href=\"#2145\" id=\"2145\">2145</a>\n<a href=\"#2146\" id=\"2146\">2146</a>\n<a href=\"#2147\" id=\"2147\">2147</a>\n<a href=\"#2148\" id=\"2148\">2148</a>\n<a href=\"#2149\" id=\"2149\">2149</a>\n<a href=\"#2150\" id=\"2150\">2150</a>\n<a href=\"#2151\" id=\"2151\">2151</a>\n<a href=\"#2152\" id=\"2152\">2152</a>\n<a href=\"#2153\" id=\"2153\">2153</a>\n<a href=\"#2154\" id=\"2154\">2154</a>\n<a href=\"#2155\" id=\"2155\">2155</a>\n<a href=\"#2156\" id=\"2156\">2156</a>\n<a href=\"#2157\" id=\"2157\">2157</a>\n<a href=\"#2158\" id=\"2158\">2158</a>\n<a href=\"#2159\" id=\"2159\">2159</a>\n<a href=\"#2160\" id=\"2160\">2160</a>\n<a href=\"#2161\" id=\"2161\">2161</a>\n<a href=\"#2162\" id=\"2162\">2162</a>\n<a href=\"#2163\" id=\"2163\">2163</a>\n<a href=\"#2164\" id=\"2164\">2164</a>\n<a href=\"#2165\" id=\"2165\">2165</a>\n<a href=\"#2166\" id=\"2166\">2166</a>\n<a href=\"#2167\" id=\"2167\">2167</a>\n<a href=\"#2168\" id=\"2168\">2168</a>\n<a href=\"#2169\" id=\"2169\">2169</a>\n<a href=\"#2170\" id=\"2170\">2170</a>\n<a href=\"#2171\" id=\"2171\">2171</a>\n<a href=\"#2172\" id=\"2172\">2172</a>\n<a href=\"#2173\" id=\"2173\">2173</a>\n<a href=\"#2174\" id=\"2174\">2174</a>\n<a href=\"#2175\" id=\"2175\">2175</a>\n<a href=\"#2176\" id=\"2176\">2176</a>\n<a href=\"#2177\" id=\"2177\">2177</a>\n<a href=\"#2178\" id=\"2178\">2178</a>\n<a href=\"#2179\" id=\"2179\">2179</a>\n<a href=\"#2180\" id=\"2180\">2180</a>\n<a href=\"#2181\" id=\"2181\">2181</a>\n<a href=\"#2182\" id=\"2182\">2182</a>\n<a href=\"#2183\" id=\"2183\">2183</a>\n<a href=\"#2184\" id=\"2184\">2184</a>\n<a href=\"#2185\" id=\"2185\">2185</a>\n<a href=\"#2186\" id=\"2186\">2186</a>\n<a href=\"#2187\" id=\"2187\">2187</a>\n<a href=\"#2188\" id=\"2188\">2188</a>\n<a href=\"#2189\" id=\"2189\">2189</a>\n<a href=\"#2190\" id=\"2190\">2190</a>\n<a href=\"#2191\" id=\"2191\">2191</a>\n<a href=\"#2192\" id=\"2192\">2192</a>\n<a href=\"#2193\" id=\"2193\">2193</a>\n<a href=\"#2194\" id=\"2194\">2194</a>\n<a href=\"#2195\" id=\"2195\">2195</a>\n<a href=\"#2196\" id=\"2196\">2196</a>\n<a href=\"#2197\" id=\"2197\">2197</a>\n<a href=\"#2198\" id=\"2198\">2198</a>\n<a href=\"#2199\" id=\"2199\">2199</a>\n<a href=\"#2200\" id=\"2200\">2200</a>\n<a href=\"#2201\" id=\"2201\">2201</a>\n<a href=\"#2202\" id=\"2202\">2202</a>\n<a href=\"#2203\" id=\"2203\">2203</a>\n<a href=\"#2204\" id=\"2204\">2204</a>\n<a href=\"#2205\" id=\"2205\">2205</a>\n<a href=\"#2206\" id=\"2206\">2206</a>\n<a href=\"#2207\" id=\"2207\">2207</a>\n<a href=\"#2208\" id=\"2208\">2208</a>\n<a href=\"#2209\" id=\"2209\">2209</a>\n<a href=\"#2210\" id=\"2210\">2210</a>\n<a href=\"#2211\" id=\"2211\">2211</a>\n<a href=\"#2212\" id=\"2212\">2212</a>\n<a href=\"#2213\" id=\"2213\">2213</a>\n<a href=\"#2214\" id=\"2214\">2214</a>\n<a href=\"#2215\" id=\"2215\">2215</a>\n<a href=\"#2216\" id=\"2216\">2216</a>\n<a href=\"#2217\" id=\"2217\">2217</a>\n<a href=\"#2218\" id=\"2218\">2218</a>\n<a href=\"#2219\" id=\"2219\">2219</a>\n<a href=\"#2220\" id=\"2220\">2220</a>\n<a href=\"#2221\" id=\"2221\">2221</a>\n<a href=\"#2222\" id=\"2222\">2222</a>\n<a href=\"#2223\" id=\"2223\">2223</a>\n<a href=\"#2224\" id=\"2224\">2224</a>\n<a href=\"#2225\" id=\"2225\">2225</a>\n<a href=\"#2226\" id=\"2226\">2226</a>\n<a href=\"#2227\" id=\"2227\">2227</a>\n<a href=\"#2228\" id=\"2228\">2228</a>\n<a href=\"#2229\" id=\"2229\">2229</a>\n<a href=\"#2230\" id=\"2230\">2230</a>\n<a href=\"#2231\" id=\"2231\">2231</a>\n<a href=\"#2232\" id=\"2232\">2232</a>\n<a href=\"#2233\" id=\"2233\">2233</a>\n<a href=\"#2234\" id=\"2234\">2234</a>\n<a href=\"#2235\" id=\"2235\">2235</a>\n<a href=\"#2236\" id=\"2236\">2236</a>\n<a href=\"#2237\" id=\"2237\">2237</a>\n<a href=\"#2238\" id=\"2238\">2238</a>\n<a href=\"#2239\" id=\"2239\">2239</a>\n<a href=\"#2240\" id=\"2240\">2240</a>\n<a href=\"#2241\" id=\"2241\">2241</a>\n<a href=\"#2242\" id=\"2242\">2242</a>\n<a href=\"#2243\" id=\"2243\">2243</a>\n<a href=\"#2244\" id=\"2244\">2244</a>\n<a href=\"#2245\" id=\"2245\">2245</a>\n<a href=\"#2246\" id=\"2246\">2246</a>\n<a href=\"#2247\" id=\"2247\">2247</a>\n<a href=\"#2248\" id=\"2248\">2248</a>\n<a href=\"#2249\" id=\"2249\">2249</a>\n<a href=\"#2250\" id=\"2250\">2250</a>\n<a href=\"#2251\" id=\"2251\">2251</a>\n<a href=\"#2252\" id=\"2252\">2252</a>\n<a href=\"#2253\" id=\"2253\">2253</a>\n<a href=\"#2254\" id=\"2254\">2254</a>\n<a href=\"#2255\" id=\"2255\">2255</a>\n<a href=\"#2256\" id=\"2256\">2256</a>\n<a href=\"#2257\" id=\"2257\">2257</a>\n<a href=\"#2258\" id=\"2258\">2258</a>\n<a href=\"#2259\" id=\"2259\">2259</a>\n<a href=\"#2260\" id=\"2260\">2260</a>\n<a href=\"#2261\" id=\"2261\">2261</a>\n<a href=\"#2262\" id=\"2262\">2262</a>\n<a href=\"#2263\" id=\"2263\">2263</a>\n<a href=\"#2264\" id=\"2264\">2264</a>\n<a href=\"#2265\" id=\"2265\">2265</a>\n<a href=\"#2266\" id=\"2266\">2266</a>\n<a href=\"#2267\" id=\"2267\">2267</a>\n<a href=\"#2268\" id=\"2268\">2268</a>\n<a href=\"#2269\" id=\"2269\">2269</a>\n<a href=\"#2270\" id=\"2270\">2270</a>\n<a href=\"#2271\" id=\"2271\">2271</a>\n<a href=\"#2272\" id=\"2272\">2272</a>\n<a href=\"#2273\" id=\"2273\">2273</a>\n<a href=\"#2274\" id=\"2274\">2274</a>\n<a href=\"#2275\" id=\"2275\">2275</a>\n<a href=\"#2276\" id=\"2276\">2276</a>\n<a href=\"#2277\" id=\"2277\">2277</a>\n<a href=\"#2278\" id=\"2278\">2278</a>\n<a href=\"#2279\" id=\"2279\">2279</a>\n<a href=\"#2280\" id=\"2280\">2280</a>\n<a href=\"#2281\" id=\"2281\">2281</a>\n<a href=\"#2282\" id=\"2282\">2282</a>\n<a href=\"#2283\" id=\"2283\">2283</a>\n<a href=\"#2284\" id=\"2284\">2284</a>\n<a href=\"#2285\" id=\"2285\">2285</a>\n<a href=\"#2286\" id=\"2286\">2286</a>\n<a href=\"#2287\" id=\"2287\">2287</a>\n<a href=\"#2288\" id=\"2288\">2288</a>\n<a href=\"#2289\" id=\"2289\">2289</a>\n<a href=\"#2290\" id=\"2290\">2290</a>\n<a href=\"#2291\" id=\"2291\">2291</a>\n<a href=\"#2292\" id=\"2292\">2292</a>\n<a href=\"#2293\" id=\"2293\">2293</a>\n<a href=\"#2294\" id=\"2294\">2294</a>\n<a href=\"#2295\" id=\"2295\">2295</a>\n<a href=\"#2296\" id=\"2296\">2296</a>\n<a href=\"#2297\" id=\"2297\">2297</a>\n<a href=\"#2298\" id=\"2298\">2298</a>\n<a href=\"#2299\" id=\"2299\">2299</a>\n<a href=\"#2300\" id=\"2300\">2300</a>\n<a href=\"#2301\" id=\"2301\">2301</a>\n<a href=\"#2302\" id=\"2302\">2302</a>\n<a href=\"#2303\" id=\"2303\">2303</a>\n<a href=\"#2304\" id=\"2304\">2304</a>\n<a href=\"#2305\" id=\"2305\">2305</a>\n<a href=\"#2306\" id=\"2306\">2306</a>\n<a href=\"#2307\" id=\"2307\">2307</a>\n<a href=\"#2308\" id=\"2308\">2308</a>\n<a href=\"#2309\" id=\"2309\">2309</a>\n<a href=\"#2310\" id=\"2310\">2310</a>\n<a href=\"#2311\" id=\"2311\">2311</a>\n<a href=\"#2312\" id=\"2312\">2312</a>\n<a href=\"#2313\" id=\"2313\">2313</a>\n<a href=\"#2314\" id=\"2314\">2314</a>\n<a href=\"#2315\" id=\"2315\">2315</a>\n<a href=\"#2316\" id=\"2316\">2316</a>\n<a href=\"#2317\" id=\"2317\">2317</a>\n<a href=\"#2318\" id=\"2318\">2318</a>\n<a href=\"#2319\" id=\"2319\">2319</a>\n<a href=\"#2320\" id=\"2320\">2320</a>\n<a href=\"#2321\" id=\"2321\">2321</a>\n<a href=\"#2322\" id=\"2322\">2322</a>\n<a href=\"#2323\" id=\"2323\">2323</a>\n<a href=\"#2324\" id=\"2324\">2324</a>\n<a href=\"#2325\" id=\"2325\">2325</a>\n<a href=\"#2326\" id=\"2326\">2326</a>\n<a href=\"#2327\" id=\"2327\">2327</a>\n<a href=\"#2328\" id=\"2328\">2328</a>\n<a href=\"#2329\" id=\"2329\">2329</a>\n<a href=\"#2330\" id=\"2330\">2330</a>\n<a href=\"#2331\" id=\"2331\">2331</a>\n<a href=\"#2332\" id=\"2332\">2332</a>\n<a href=\"#2333\" id=\"2333\">2333</a>\n<a href=\"#2334\" id=\"2334\">2334</a>\n<a href=\"#2335\" id=\"2335\">2335</a>\n<a href=\"#2336\" id=\"2336\">2336</a>\n<a href=\"#2337\" id=\"2337\">2337</a>\n<a href=\"#2338\" id=\"2338\">2338</a>\n<a href=\"#2339\" id=\"2339\">2339</a>\n<a href=\"#2340\" id=\"2340\">2340</a>\n<a href=\"#2341\" id=\"2341\">2341</a>\n<a href=\"#2342\" id=\"2342\">2342</a>\n<a href=\"#2343\" id=\"2343\">2343</a>\n<a href=\"#2344\" id=\"2344\">2344</a>\n<a href=\"#2345\" id=\"2345\">2345</a>\n<a href=\"#2346\" id=\"2346\">2346</a>\n<a href=\"#2347\" id=\"2347\">2347</a>\n<a href=\"#2348\" id=\"2348\">2348</a>\n<a href=\"#2349\" id=\"2349\">2349</a>\n<a href=\"#2350\" id=\"2350\">2350</a>\n<a href=\"#2351\" id=\"2351\">2351</a>\n<a href=\"#2352\" id=\"2352\">2352</a>\n<a href=\"#2353\" id=\"2353\">2353</a>\n<a href=\"#2354\" id=\"2354\">2354</a>\n<a href=\"#2355\" id=\"2355\">2355</a>\n<a href=\"#2356\" id=\"2356\">2356</a>\n<a href=\"#2357\" id=\"2357\">2357</a>\n<a href=\"#2358\" id=\"2358\">2358</a>\n<a href=\"#2359\" id=\"2359\">2359</a>\n<a href=\"#2360\" id=\"2360\">2360</a>\n<a href=\"#2361\" id=\"2361\">2361</a>\n<a href=\"#2362\" id=\"2362\">2362</a>\n<a href=\"#2363\" id=\"2363\">2363</a>\n<a href=\"#2364\" id=\"2364\">2364</a>\n<a href=\"#2365\" id=\"2365\">2365</a>\n<a href=\"#2366\" id=\"2366\">2366</a>\n<a href=\"#2367\" id=\"2367\">2367</a>\n<a href=\"#2368\" id=\"2368\">2368</a>\n<a href=\"#2369\" id=\"2369\">2369</a>\n<a href=\"#2370\" id=\"2370\">2370</a>\n<a href=\"#2371\" id=\"2371\">2371</a>\n<a href=\"#2372\" id=\"2372\">2372</a>\n<a href=\"#2373\" id=\"2373\">2373</a>\n<a href=\"#2374\" id=\"2374\">2374</a>\n<a href=\"#2375\" id=\"2375\">2375</a>\n<a href=\"#2376\" id=\"2376\">2376</a>\n<a href=\"#2377\" id=\"2377\">2377</a>\n<a href=\"#2378\" id=\"2378\">2378</a>\n<a href=\"#2379\" id=\"2379\">2379</a>\n<a href=\"#2380\" id=\"2380\">2380</a>\n<a href=\"#2381\" id=\"2381\">2381</a>\n<a href=\"#2382\" id=\"2382\">2382</a>\n<a href=\"#2383\" id=\"2383\">2383</a>\n<a href=\"#2384\" id=\"2384\">2384</a>\n<a href=\"#2385\" id=\"2385\">2385</a>\n<a href=\"#2386\" id=\"2386\">2386</a>\n<a href=\"#2387\" id=\"2387\">2387</a>\n<a href=\"#2388\" id=\"2388\">2388</a>\n<a href=\"#2389\" id=\"2389\">2389</a>\n<a href=\"#2390\" id=\"2390\">2390</a>\n<a href=\"#2391\" id=\"2391\">2391</a>\n<a href=\"#2392\" id=\"2392\">2392</a>\n<a href=\"#2393\" id=\"2393\">2393</a>\n<a href=\"#2394\" id=\"2394\">2394</a>\n<a href=\"#2395\" id=\"2395\">2395</a>\n<a href=\"#2396\" id=\"2396\">2396</a>\n<a href=\"#2397\" id=\"2397\">2397</a>\n<a href=\"#2398\" id=\"2398\">2398</a>\n<a href=\"#2399\" id=\"2399\">2399</a>\n<a href=\"#2400\" id=\"2400\">2400</a>\n<a href=\"#2401\" id=\"2401\">2401</a>\n<a href=\"#2402\" id=\"2402\">2402</a>\n<a href=\"#2403\" id=\"2403\">2403</a>\n<a href=\"#2404\" id=\"2404\">2404</a>\n<a href=\"#2405\" id=\"2405\">2405</a>\n<a href=\"#2406\" id=\"2406\">2406</a>\n<a href=\"#2407\" id=\"2407\">2407</a>\n<a href=\"#2408\" id=\"2408\">2408</a>\n<a href=\"#2409\" id=\"2409\">2409</a>\n<a href=\"#2410\" id=\"2410\">2410</a>\n<a href=\"#2411\" id=\"2411\">2411</a>\n<a href=\"#2412\" id=\"2412\">2412</a>\n<a href=\"#2413\" id=\"2413\">2413</a>\n<a href=\"#2414\" id=\"2414\">2414</a>\n<a href=\"#2415\" id=\"2415\">2415</a>\n<a href=\"#2416\" id=\"2416\">2416</a>\n<a href=\"#2417\" id=\"2417\">2417</a>\n<a href=\"#2418\" id=\"2418\">2418</a>\n<a href=\"#2419\" id=\"2419\">2419</a>\n<a href=\"#2420\" id=\"2420\">2420</a>\n<a href=\"#2421\" id=\"2421\">2421</a>\n<a href=\"#2422\" id=\"2422\">2422</a>\n<a href=\"#2423\" id=\"2423\">2423</a>\n<a href=\"#2424\" id=\"2424\">2424</a>\n<a href=\"#2425\" id=\"2425\">2425</a>\n<a href=\"#2426\" id=\"2426\">2426</a>\n<a href=\"#2427\" id=\"2427\">2427</a>\n<a href=\"#2428\" id=\"2428\">2428</a>\n<a href=\"#2429\" id=\"2429\">2429</a>\n<a href=\"#2430\" id=\"2430\">2430</a>\n<a href=\"#2431\" id=\"2431\">2431</a>\n<a href=\"#2432\" id=\"2432\">2432</a>\n<a href=\"#2433\" id=\"2433\">2433</a>\n<a href=\"#2434\" id=\"2434\">2434</a>\n<a href=\"#2435\" id=\"2435\">2435</a>\n<a href=\"#2436\" id=\"2436\">2436</a>\n<a href=\"#2437\" id=\"2437\">2437</a>\n<a href=\"#2438\" id=\"2438\">2438</a>\n<a href=\"#2439\" id=\"2439\">2439</a>\n<a href=\"#2440\" id=\"2440\">2440</a>\n<a href=\"#2441\" id=\"2441\">2441</a>\n<a href=\"#2442\" id=\"2442\">2442</a>\n<a href=\"#2443\" id=\"2443\">2443</a>\n<a href=\"#2444\" id=\"2444\">2444</a>\n<a href=\"#2445\" id=\"2445\">2445</a>\n<a href=\"#2446\" id=\"2446\">2446</a>\n<a href=\"#2447\" id=\"2447\">2447</a>\n<a href=\"#2448\" id=\"2448\">2448</a>\n<a href=\"#2449\" id=\"2449\">2449</a>\n<a href=\"#2450\" id=\"2450\">2450</a>\n<a href=\"#2451\" id=\"2451\">2451</a>\n<a href=\"#2452\" id=\"2452\">2452</a>\n<a href=\"#2453\" id=\"2453\">2453</a>\n<a href=\"#2454\" id=\"2454\">2454</a>\n<a href=\"#2455\" id=\"2455\">2455</a>\n<a href=\"#2456\" id=\"2456\">2456</a>\n<a href=\"#2457\" id=\"2457\">2457</a>\n<a href=\"#2458\" id=\"2458\">2458</a>\n<a href=\"#2459\" id=\"2459\">2459</a>\n<a href=\"#2460\" id=\"2460\">2460</a>\n<a href=\"#2461\" id=\"2461\">2461</a>\n<a href=\"#2462\" id=\"2462\">2462</a>\n<a href=\"#2463\" id=\"2463\">2463</a>\n<a href=\"#2464\" id=\"2464\">2464</a>\n<a href=\"#2465\" id=\"2465\">2465</a>\n<a href=\"#2466\" id=\"2466\">2466</a>\n<a href=\"#2467\" id=\"2467\">2467</a>\n<a href=\"#2468\" id=\"2468\">2468</a>\n<a href=\"#2469\" id=\"2469\">2469</a>\n<a href=\"#2470\" id=\"2470\">2470</a>\n<a href=\"#2471\" id=\"2471\">2471</a>\n<a href=\"#2472\" id=\"2472\">2472</a>\n<a href=\"#2473\" id=\"2473\">2473</a>\n<a href=\"#2474\" id=\"2474\">2474</a>\n<a href=\"#2475\" id=\"2475\">2475</a>\n<a href=\"#2476\" id=\"2476\">2476</a>\n<a href=\"#2477\" id=\"2477\">2477</a>\n<a href=\"#2478\" id=\"2478\">2478</a>\n<a href=\"#2479\" id=\"2479\">2479</a>\n<a href=\"#2480\" id=\"2480\">2480</a>\n<a href=\"#2481\" id=\"2481\">2481</a>\n<a href=\"#2482\" id=\"2482\">2482</a>\n<a href=\"#2483\" id=\"2483\">2483</a>\n<a href=\"#2484\" id=\"2484\">2484</a>\n<a href=\"#2485\" id=\"2485\">2485</a>\n<a href=\"#2486\" id=\"2486\">2486</a>\n<a href=\"#2487\" id=\"2487\">2487</a>\n<a href=\"#2488\" id=\"2488\">2488</a>\n<a href=\"#2489\" id=\"2489\">2489</a>\n<a href=\"#2490\" id=\"2490\">2490</a>\n<a href=\"#2491\" id=\"2491\">2491</a>\n<a href=\"#2492\" id=\"2492\">2492</a>\n<a href=\"#2493\" id=\"2493\">2493</a>\n<a href=\"#2494\" id=\"2494\">2494</a>\n<a href=\"#2495\" id=\"2495\">2495</a>\n<a href=\"#2496\" id=\"2496\">2496</a>\n<a href=\"#2497\" id=\"2497\">2497</a>\n<a href=\"#2498\" id=\"2498\">2498</a>\n<a href=\"#2499\" id=\"2499\">2499</a>\n<a href=\"#2500\" id=\"2500\">2500</a>\n<a href=\"#2501\" id=\"2501\">2501</a>\n<a href=\"#2502\" id=\"2502\">2502</a>\n<a href=\"#2503\" id=\"2503\">2503</a>\n<a href=\"#2504\" id=\"2504\">2504</a>\n<a href=\"#2505\" id=\"2505\">2505</a>\n<a href=\"#2506\" id=\"2506\">2506</a>\n<a href=\"#2507\" id=\"2507\">2507</a>\n<a href=\"#2508\" id=\"2508\">2508</a>\n<a href=\"#2509\" id=\"2509\">2509</a>\n<a href=\"#2510\" id=\"2510\">2510</a>\n<a href=\"#2511\" id=\"2511\">2511</a>\n<a href=\"#2512\" id=\"2512\">2512</a>\n<a href=\"#2513\" id=\"2513\">2513</a>\n<a href=\"#2514\" id=\"2514\">2514</a>\n<a href=\"#2515\" id=\"2515\">2515</a>\n<a href=\"#2516\" id=\"2516\">2516</a>\n<a href=\"#2517\" id=\"2517\">2517</a>\n<a href=\"#2518\" id=\"2518\">2518</a>\n<a href=\"#2519\" id=\"2519\">2519</a>\n<a href=\"#2520\" id=\"2520\">2520</a>\n<a href=\"#2521\" id=\"2521\">2521</a>\n<a href=\"#2522\" id=\"2522\">2522</a>\n<a href=\"#2523\" id=\"2523\">2523</a>\n<a href=\"#2524\" id=\"2524\">2524</a>\n<a href=\"#2525\" id=\"2525\">2525</a>\n<a href=\"#2526\" id=\"2526\">2526</a>\n<a href=\"#2527\" id=\"2527\">2527</a>\n<a href=\"#2528\" id=\"2528\">2528</a>\n<a href=\"#2529\" id=\"2529\">2529</a>\n<a href=\"#2530\" id=\"2530\">2530</a>\n<a href=\"#2531\" id=\"2531\">2531</a>\n<a href=\"#2532\" id=\"2532\">2532</a>\n<a href=\"#2533\" id=\"2533\">2533</a>\n<a href=\"#2534\" id=\"2534\">2534</a>\n<a href=\"#2535\" id=\"2535\">2535</a>\n<a href=\"#2536\" id=\"2536\">2536</a>\n<a href=\"#2537\" id=\"2537\">2537</a>\n<a href=\"#2538\" id=\"2538\">2538</a>\n<a href=\"#2539\" id=\"2539\">2539</a>\n<a href=\"#2540\" id=\"2540\">2540</a>\n<a href=\"#2541\" id=\"2541\">2541</a>\n<a href=\"#2542\" id=\"2542\">2542</a>\n<a href=\"#2543\" id=\"2543\">2543</a>\n<a href=\"#2544\" id=\"2544\">2544</a>\n<a href=\"#2545\" id=\"2545\">2545</a>\n<a href=\"#2546\" id=\"2546\">2546</a>\n<a href=\"#2547\" id=\"2547\">2547</a>\n<a href=\"#2548\" id=\"2548\">2548</a>\n<a href=\"#2549\" id=\"2549\">2549</a>\n<a href=\"#2550\" id=\"2550\">2550</a>\n<a href=\"#2551\" id=\"2551\">2551</a>\n<a href=\"#2552\" id=\"2552\">2552</a>\n<a href=\"#2553\" id=\"2553\">2553</a>\n<a href=\"#2554\" id=\"2554\">2554</a>\n<a href=\"#2555\" id=\"2555\">2555</a>\n<a href=\"#2556\" id=\"2556\">2556</a>\n<a href=\"#2557\" id=\"2557\">2557</a>\n<a href=\"#2558\" id=\"2558\">2558</a>\n<a href=\"#2559\" id=\"2559\">2559</a>\n<a href=\"#2560\" id=\"2560\">2560</a>\n<a href=\"#2561\" id=\"2561\">2561</a>\n<a href=\"#2562\" id=\"2562\">2562</a>\n<a href=\"#2563\" id=\"2563\">2563</a>\n<a href=\"#2564\" id=\"2564\">2564</a>\n<a href=\"#2565\" id=\"2565\">2565</a>\n<a href=\"#2566\" id=\"2566\">2566</a>\n<a href=\"#2567\" id=\"2567\">2567</a>\n<a href=\"#2568\" id=\"2568\">2568</a>\n<a href=\"#2569\" id=\"2569\">2569</a>\n<a href=\"#2570\" id=\"2570\">2570</a>\n<a href=\"#2571\" id=\"2571\">2571</a>\n<a href=\"#2572\" id=\"2572\">2572</a>\n<a href=\"#2573\" id=\"2573\">2573</a>\n<a href=\"#2574\" id=\"2574\">2574</a>\n<a href=\"#2575\" id=\"2575\">2575</a>\n<a href=\"#2576\" id=\"2576\">2576</a>\n<a href=\"#2577\" id=\"2577\">2577</a>\n<a href=\"#2578\" id=\"2578\">2578</a>\n<a href=\"#2579\" id=\"2579\">2579</a>\n<a href=\"#2580\" id=\"2580\">2580</a>\n<a href=\"#2581\" id=\"2581\">2581</a>\n<a href=\"#2582\" id=\"2582\">2582</a>\n<a href=\"#2583\" id=\"2583\">2583</a>\n<a href=\"#2584\" id=\"2584\">2584</a>\n<a href=\"#2585\" id=\"2585\">2585</a>\n<a href=\"#2586\" id=\"2586\">2586</a>\n<a href=\"#2587\" id=\"2587\">2587</a>\n<a href=\"#2588\" id=\"2588\">2588</a>\n<a href=\"#2589\" id=\"2589\">2589</a>\n<a href=\"#2590\" id=\"2590\">2590</a>\n<a href=\"#2591\" id=\"2591\">2591</a>\n<a href=\"#2592\" id=\"2592\">2592</a>\n<a href=\"#2593\" id=\"2593\">2593</a>\n<a href=\"#2594\" id=\"2594\">2594</a>\n<a href=\"#2595\" id=\"2595\">2595</a>\n<a href=\"#2596\" id=\"2596\">2596</a>\n<a href=\"#2597\" id=\"2597\">2597</a>\n<a href=\"#2598\" id=\"2598\">2598</a>\n<a href=\"#2599\" id=\"2599\">2599</a>\n<a href=\"#2600\" id=\"2600\">2600</a>\n<a href=\"#2601\" id=\"2601\">2601</a>\n<a href=\"#2602\" id=\"2602\">2602</a>\n<a href=\"#2603\" id=\"2603\">2603</a>\n<a href=\"#2604\" id=\"2604\">2604</a>\n<a href=\"#2605\" id=\"2605\">2605</a>\n<a href=\"#2606\" id=\"2606\">2606</a>\n<a href=\"#2607\" id=\"2607\">2607</a>\n<a href=\"#2608\" id=\"2608\">2608</a>\n<a href=\"#2609\" id=\"2609\">2609</a>\n<a href=\"#2610\" id=\"2610\">2610</a>\n<a href=\"#2611\" id=\"2611\">2611</a>\n<a href=\"#2612\" id=\"2612\">2612</a>\n<a href=\"#2613\" id=\"2613\">2613</a>\n<a href=\"#2614\" id=\"2614\">2614</a>\n<a href=\"#2615\" id=\"2615\">2615</a>\n<a href=\"#2616\" id=\"2616\">2616</a>\n<a href=\"#2617\" id=\"2617\">2617</a>\n<a href=\"#2618\" id=\"2618\">2618</a>\n<a href=\"#2619\" id=\"2619\">2619</a>\n<a href=\"#2620\" id=\"2620\">2620</a>\n<a href=\"#2621\" id=\"2621\">2621</a>\n<a href=\"#2622\" id=\"2622\">2622</a>\n<a href=\"#2623\" id=\"2623\">2623</a>\n<a href=\"#2624\" id=\"2624\">2624</a>\n<a href=\"#2625\" id=\"2625\">2625</a>\n<a href=\"#2626\" id=\"2626\">2626</a>\n<a href=\"#2627\" id=\"2627\">2627</a>\n<a href=\"#2628\" id=\"2628\">2628</a>\n<a href=\"#2629\" id=\"2629\">2629</a>\n<a href=\"#2630\" id=\"2630\">2630</a>\n<a href=\"#2631\" id=\"2631\">2631</a>\n<a href=\"#2632\" id=\"2632\">2632</a>\n<a href=\"#2633\" id=\"2633\">2633</a>\n<a href=\"#2634\" id=\"2634\">2634</a>\n<a href=\"#2635\" id=\"2635\">2635</a>\n<a href=\"#2636\" id=\"2636\">2636</a>\n<a href=\"#2637\" id=\"2637\">2637</a>\n<a href=\"#2638\" id=\"2638\">2638</a>\n<a href=\"#2639\" id=\"2639\">2639</a>\n<a href=\"#2640\" id=\"2640\">2640</a>\n<a href=\"#2641\" id=\"2641\">2641</a>\n<a href=\"#2642\" id=\"2642\">2642</a>\n<a href=\"#2643\" id=\"2643\">2643</a>\n<a href=\"#2644\" id=\"2644\">2644</a>\n<a href=\"#2645\" id=\"2645\">2645</a>\n<a href=\"#2646\" id=\"2646\">2646</a>\n<a href=\"#2647\" id=\"2647\">2647</a>\n<a href=\"#2648\" id=\"2648\">2648</a>\n<a href=\"#2649\" id=\"2649\">2649</a>\n<a href=\"#2650\" id=\"2650\">2650</a>\n<a href=\"#2651\" id=\"2651\">2651</a>\n<a href=\"#2652\" id=\"2652\">2652</a>\n<a href=\"#2653\" id=\"2653\">2653</a>\n<a href=\"#2654\" id=\"2654\">2654</a>\n<a href=\"#2655\" id=\"2655\">2655</a>\n<a href=\"#2656\" id=\"2656\">2656</a>\n<a href=\"#2657\" id=\"2657\">2657</a>\n<a href=\"#2658\" id=\"2658\">2658</a>\n<a href=\"#2659\" id=\"2659\">2659</a>\n<a href=\"#2660\" id=\"2660\">2660</a>\n<a href=\"#2661\" id=\"2661\">2661</a>\n<a href=\"#2662\" id=\"2662\">2662</a>\n<a href=\"#2663\" id=\"2663\">2663</a>\n<a href=\"#2664\" id=\"2664\">2664</a>\n<a href=\"#2665\" id=\"2665\">2665</a>\n<a href=\"#2666\" id=\"2666\">2666</a>\n<a href=\"#2667\" id=\"2667\">2667</a>\n<a href=\"#2668\" id=\"2668\">2668</a>\n<a href=\"#2669\" id=\"2669\">2669</a>\n<a href=\"#2670\" id=\"2670\">2670</a>\n<a href=\"#2671\" id=\"2671\">2671</a>\n<a href=\"#2672\" id=\"2672\">2672</a>\n<a href=\"#2673\" id=\"2673\">2673</a>\n<a href=\"#2674\" id=\"2674\">2674</a>\n<a href=\"#2675\" id=\"2675\">2675</a>\n<a href=\"#2676\" id=\"2676\">2676</a>\n<a href=\"#2677\" id=\"2677\">2677</a>\n<a href=\"#2678\" id=\"2678\">2678</a>\n<a href=\"#2679\" id=\"2679\">2679</a>\n<a href=\"#2680\" id=\"2680\">2680</a>\n<a href=\"#2681\" id=\"2681\">2681</a>\n<a href=\"#2682\" id=\"2682\">2682</a>\n<a href=\"#2683\" id=\"2683\">2683</a>\n<a href=\"#2684\" id=\"2684\">2684</a>\n<a href=\"#2685\" id=\"2685\">2685</a>\n<a href=\"#2686\" id=\"2686\">2686</a>\n<a href=\"#2687\" id=\"2687\">2687</a>\n<a href=\"#2688\" id=\"2688\">2688</a>\n<a href=\"#2689\" id=\"2689\">2689</a>\n<a href=\"#2690\" id=\"2690\">2690</a>\n<a href=\"#2691\" id=\"2691\">2691</a>\n<a href=\"#2692\" id=\"2692\">2692</a>\n<a href=\"#2693\" id=\"2693\">2693</a>\n<a href=\"#2694\" id=\"2694\">2694</a>\n<a href=\"#2695\" id=\"2695\">2695</a>\n<a href=\"#2696\" id=\"2696\">2696</a>\n<a href=\"#2697\" id=\"2697\">2697</a>\n<a href=\"#2698\" id=\"2698\">2698</a>\n<a href=\"#2699\" id=\"2699\">2699</a>\n<a href=\"#2700\" id=\"2700\">2700</a>\n<a href=\"#2701\" id=\"2701\">2701</a>\n<a href=\"#2702\" id=\"2702\">2702</a>\n<a href=\"#2703\" id=\"2703\">2703</a>\n<a href=\"#2704\" id=\"2704\">2704</a>\n<a href=\"#2705\" id=\"2705\">2705</a>\n<a href=\"#2706\" id=\"2706\">2706</a>\n<a href=\"#2707\" id=\"2707\">2707</a>\n<a href=\"#2708\" id=\"2708\">2708</a>\n<a href=\"#2709\" id=\"2709\">2709</a>\n<a href=\"#2710\" id=\"2710\">2710</a>\n<a href=\"#2711\" id=\"2711\">2711</a>\n<a href=\"#2712\" id=\"2712\">2712</a>\n<a href=\"#2713\" id=\"2713\">2713</a>\n<a href=\"#2714\" id=\"2714\">2714</a>\n<a href=\"#2715\" id=\"2715\">2715</a>\n<a href=\"#2716\" id=\"2716\">2716</a>\n<a href=\"#2717\" id=\"2717\">2717</a>\n<a href=\"#2718\" id=\"2718\">2718</a>\n<a href=\"#2719\" id=\"2719\">2719</a>\n<a href=\"#2720\" id=\"2720\">2720</a>\n<a href=\"#2721\" id=\"2721\">2721</a>\n<a href=\"#2722\" id=\"2722\">2722</a>\n<a href=\"#2723\" id=\"2723\">2723</a>\n<a href=\"#2724\" id=\"2724\">2724</a>\n<a href=\"#2725\" id=\"2725\">2725</a>\n<a href=\"#2726\" id=\"2726\">2726</a>\n<a href=\"#2727\" id=\"2727\">2727</a>\n<a href=\"#2728\" id=\"2728\">2728</a>\n<a href=\"#2729\" id=\"2729\">2729</a>\n<a href=\"#2730\" id=\"2730\">2730</a>\n<a href=\"#2731\" id=\"2731\">2731</a>\n<a href=\"#2732\" id=\"2732\">2732</a>\n<a href=\"#2733\" id=\"2733\">2733</a>\n<a href=\"#2734\" id=\"2734\">2734</a>\n<a href=\"#2735\" id=\"2735\">2735</a>\n<a href=\"#2736\" id=\"2736\">2736</a>\n<a href=\"#2737\" id=\"2737\">2737</a>\n<a href=\"#2738\" id=\"2738\">2738</a>\n<a href=\"#2739\" id=\"2739\">2739</a>\n<a href=\"#2740\" id=\"2740\">2740</a>\n<a href=\"#2741\" id=\"2741\">2741</a>\n<a href=\"#2742\" id=\"2742\">2742</a>\n<a href=\"#2743\" id=\"2743\">2743</a>\n<a href=\"#2744\" id=\"2744\">2744</a>\n<a href=\"#2745\" id=\"2745\">2745</a>\n<a href=\"#2746\" id=\"2746\">2746</a>\n<a href=\"#2747\" id=\"2747\">2747</a>\n<a href=\"#2748\" id=\"2748\">2748</a>\n<a href=\"#2749\" id=\"2749\">2749</a>\n<a href=\"#2750\" id=\"2750\">2750</a>\n<a href=\"#2751\" id=\"2751\">2751</a>\n<a href=\"#2752\" id=\"2752\">2752</a>\n<a href=\"#2753\" id=\"2753\">2753</a>\n<a href=\"#2754\" id=\"2754\">2754</a>\n<a href=\"#2755\" id=\"2755\">2755</a>\n<a href=\"#2756\" id=\"2756\">2756</a>\n<a href=\"#2757\" id=\"2757\">2757</a>\n<a href=\"#2758\" id=\"2758\">2758</a>\n<a href=\"#2759\" id=\"2759\">2759</a>\n<a href=\"#2760\" id=\"2760\">2760</a>\n<a href=\"#2761\" id=\"2761\">2761</a>\n<a href=\"#2762\" id=\"2762\">2762</a>\n<a href=\"#2763\" id=\"2763\">2763</a>\n<a href=\"#2764\" id=\"2764\">2764</a>\n<a href=\"#2765\" id=\"2765\">2765</a>\n<a href=\"#2766\" id=\"2766\">2766</a>\n<a href=\"#2767\" id=\"2767\">2767</a>\n<a href=\"#2768\" id=\"2768\">2768</a>\n<a href=\"#2769\" id=\"2769\">2769</a>\n<a href=\"#2770\" id=\"2770\">2770</a>\n<a href=\"#2771\" id=\"2771\">2771</a>\n<a href=\"#2772\" id=\"2772\">2772</a>\n<a href=\"#2773\" id=\"2773\">2773</a>\n<a href=\"#2774\" id=\"2774\">2774</a>\n<a href=\"#2775\" id=\"2775\">2775</a>\n<a href=\"#2776\" id=\"2776\">2776</a>\n<a href=\"#2777\" id=\"2777\">2777</a>\n<a href=\"#2778\" id=\"2778\">2778</a>\n<a href=\"#2779\" id=\"2779\">2779</a>\n<a href=\"#2780\" id=\"2780\">2780</a>\n<a href=\"#2781\" id=\"2781\">2781</a>\n<a href=\"#2782\" id=\"2782\">2782</a>\n<a href=\"#2783\" id=\"2783\">2783</a>\n<a href=\"#2784\" id=\"2784\">2784</a>\n<a href=\"#2785\" id=\"2785\">2785</a>\n<a href=\"#2786\" id=\"2786\">2786</a>\n<a href=\"#2787\" id=\"2787\">2787</a>\n<a href=\"#2788\" id=\"2788\">2788</a>\n<a href=\"#2789\" id=\"2789\">2789</a>\n<a href=\"#2790\" id=\"2790\">2790</a>\n<a href=\"#2791\" id=\"2791\">2791</a>\n<a href=\"#2792\" id=\"2792\">2792</a>\n<a href=\"#2793\" id=\"2793\">2793</a>\n<a href=\"#2794\" id=\"2794\">2794</a>\n<a href=\"#2795\" id=\"2795\">2795</a>\n<a href=\"#2796\" id=\"2796\">2796</a>\n<a href=\"#2797\" id=\"2797\">2797</a>\n<a href=\"#2798\" id=\"2798\">2798</a>\n<a href=\"#2799\" id=\"2799\">2799</a>\n<a href=\"#2800\" id=\"2800\">2800</a>\n<a href=\"#2801\" id=\"2801\">2801</a>\n<a href=\"#2802\" id=\"2802\">2802</a>\n<a href=\"#2803\" id=\"2803\">2803</a>\n<a href=\"#2804\" id=\"2804\">2804</a>\n<a href=\"#2805\" id=\"2805\">2805</a>\n<a href=\"#2806\" id=\"2806\">2806</a>\n<a href=\"#2807\" id=\"2807\">2807</a>\n<a href=\"#2808\" id=\"2808\">2808</a>\n<a href=\"#2809\" id=\"2809\">2809</a>\n<a href=\"#2810\" id=\"2810\">2810</a>\n<a href=\"#2811\" id=\"2811\">2811</a>\n<a href=\"#2812\" id=\"2812\">2812</a>\n<a href=\"#2813\" id=\"2813\">2813</a>\n<a href=\"#2814\" id=\"2814\">2814</a>\n<a href=\"#2815\" id=\"2815\">2815</a>\n<a href=\"#2816\" id=\"2816\">2816</a>\n<a href=\"#2817\" id=\"2817\">2817</a>\n<a href=\"#2818\" id=\"2818\">2818</a>\n<a href=\"#2819\" id=\"2819\">2819</a>\n<a href=\"#2820\" id=\"2820\">2820</a>\n<a href=\"#2821\" id=\"2821\">2821</a>\n<a href=\"#2822\" id=\"2822\">2822</a>\n<a href=\"#2823\" id=\"2823\">2823</a>\n<a href=\"#2824\" id=\"2824\">2824</a>\n<a href=\"#2825\" id=\"2825\">2825</a>\n<a href=\"#2826\" id=\"2826\">2826</a>\n<a href=\"#2827\" id=\"2827\">2827</a>\n<a href=\"#2828\" id=\"2828\">2828</a>\n<a href=\"#2829\" id=\"2829\">2829</a>\n<a href=\"#2830\" id=\"2830\">2830</a>\n<a href=\"#2831\" id=\"2831\">2831</a>\n<a href=\"#2832\" id=\"2832\">2832</a>\n<a href=\"#2833\" id=\"2833\">2833</a>\n<a href=\"#2834\" id=\"2834\">2834</a>\n<a href=\"#2835\" id=\"2835\">2835</a>\n<a href=\"#2836\" id=\"2836\">2836</a>\n<a href=\"#2837\" id=\"2837\">2837</a>\n<a href=\"#2838\" id=\"2838\">2838</a>\n<a href=\"#2839\" id=\"2839\">2839</a>\n<a href=\"#2840\" id=\"2840\">2840</a>\n<a href=\"#2841\" id=\"2841\">2841</a>\n<a href=\"#2842\" id=\"2842\">2842</a>\n<a href=\"#2843\" id=\"2843\">2843</a>\n<a href=\"#2844\" id=\"2844\">2844</a>\n<a href=\"#2845\" id=\"2845\">2845</a>\n<a href=\"#2846\" id=\"2846\">2846</a>\n<a href=\"#2847\" id=\"2847\">2847</a>\n<a href=\"#2848\" id=\"2848\">2848</a>\n<a href=\"#2849\" id=\"2849\">2849</a>\n<a href=\"#2850\" id=\"2850\">2850</a>\n<a href=\"#2851\" id=\"2851\">2851</a>\n<a href=\"#2852\" id=\"2852\">2852</a>\n<a href=\"#2853\" id=\"2853\">2853</a>\n<a href=\"#2854\" id=\"2854\">2854</a>\n<a href=\"#2855\" id=\"2855\">2855</a>\n<a href=\"#2856\" id=\"2856\">2856</a>\n<a href=\"#2857\" id=\"2857\">2857</a>\n<a href=\"#2858\" id=\"2858\">2858</a>\n<a href=\"#2859\" id=\"2859\">2859</a>\n<a href=\"#2860\" id=\"2860\">2860</a>\n<a href=\"#2861\" id=\"2861\">2861</a>\n<a href=\"#2862\" id=\"2862\">2862</a>\n<a href=\"#2863\" id=\"2863\">2863</a>\n<a href=\"#2864\" id=\"2864\">2864</a>\n<a href=\"#2865\" id=\"2865\">2865</a>\n<a href=\"#2866\" id=\"2866\">2866</a>\n<a href=\"#2867\" id=\"2867\">2867</a>\n<a href=\"#2868\" id=\"2868\">2868</a>\n<a href=\"#2869\" id=\"2869\">2869</a>\n<a href=\"#2870\" id=\"2870\">2870</a>\n<a href=\"#2871\" id=\"2871\">2871</a>\n<a href=\"#2872\" id=\"2872\">2872</a>\n<a href=\"#2873\" id=\"2873\">2873</a>\n<a href=\"#2874\" id=\"2874\">2874</a>\n<a href=\"#2875\" id=\"2875\">2875</a>\n<a href=\"#2876\" id=\"2876\">2876</a>\n<a href=\"#2877\" id=\"2877\">2877</a>\n<a href=\"#2878\" id=\"2878\">2878</a>\n<a href=\"#2879\" id=\"2879\">2879</a>\n<a href=\"#2880\" id=\"2880\">2880</a>\n<a href=\"#2881\" id=\"2881\">2881</a>\n<a href=\"#2882\" id=\"2882\">2882</a>\n<a href=\"#2883\" id=\"2883\">2883</a>\n<a href=\"#2884\" id=\"2884\">2884</a>\n<a href=\"#2885\" id=\"2885\">2885</a>\n<a href=\"#2886\" id=\"2886\">2886</a>\n<a href=\"#2887\" id=\"2887\">2887</a>\n<a href=\"#2888\" id=\"2888\">2888</a>\n<a href=\"#2889\" id=\"2889\">2889</a>\n<a href=\"#2890\" id=\"2890\">2890</a>\n<a href=\"#2891\" id=\"2891\">2891</a>\n<a href=\"#2892\" id=\"2892\">2892</a>\n<a href=\"#2893\" id=\"2893\">2893</a>\n<a href=\"#2894\" id=\"2894\">2894</a>\n<a href=\"#2895\" id=\"2895\">2895</a>\n<a href=\"#2896\" id=\"2896\">2896</a>\n<a href=\"#2897\" id=\"2897\">2897</a>\n<a href=\"#2898\" id=\"2898\">2898</a>\n<a href=\"#2899\" id=\"2899\">2899</a>\n<a href=\"#2900\" id=\"2900\">2900</a>\n<a href=\"#2901\" id=\"2901\">2901</a>\n<a href=\"#2902\" id=\"2902\">2902</a>\n<a href=\"#2903\" id=\"2903\">2903</a>\n<a href=\"#2904\" id=\"2904\">2904</a>\n<a href=\"#2905\" id=\"2905\">2905</a>\n<a href=\"#2906\" id=\"2906\">2906</a>\n<a href=\"#2907\" id=\"2907\">2907</a>\n<a href=\"#2908\" id=\"2908\">2908</a>\n<a href=\"#2909\" id=\"2909\">2909</a>\n<a href=\"#2910\" id=\"2910\">2910</a>\n<a href=\"#2911\" id=\"2911\">2911</a>\n<a href=\"#2912\" id=\"2912\">2912</a>\n<a href=\"#2913\" id=\"2913\">2913</a>\n<a href=\"#2914\" id=\"2914\">2914</a>\n<a href=\"#2915\" id=\"2915\">2915</a>\n<a href=\"#2916\" id=\"2916\">2916</a>\n<a href=\"#2917\" id=\"2917\">2917</a>\n<a href=\"#2918\" id=\"2918\">2918</a>\n<a href=\"#2919\" id=\"2919\">2919</a>\n<a href=\"#2920\" id=\"2920\">2920</a>\n<a href=\"#2921\" id=\"2921\">2921</a>\n<a href=\"#2922\" id=\"2922\">2922</a>\n<a href=\"#2923\" id=\"2923\">2923</a>\n<a href=\"#2924\" id=\"2924\">2924</a>\n<a href=\"#2925\" id=\"2925\">2925</a>\n<a href=\"#2926\" id=\"2926\">2926</a>\n<a href=\"#2927\" id=\"2927\">2927</a>\n<a href=\"#2928\" id=\"2928\">2928</a>\n<a href=\"#2929\" id=\"2929\">2929</a>\n<a href=\"#2930\" id=\"2930\">2930</a>\n<a href=\"#2931\" id=\"2931\">2931</a>\n<a href=\"#2932\" id=\"2932\">2932</a>\n<a href=\"#2933\" id=\"2933\">2933</a>\n<a href=\"#2934\" id=\"2934\">2934</a>\n<a href=\"#2935\" id=\"2935\">2935</a>\n<a href=\"#2936\" id=\"2936\">2936</a>\n<a href=\"#2937\" id=\"2937\">2937</a>\n<a href=\"#2938\" id=\"2938\">2938</a>\n<a href=\"#2939\" id=\"2939\">2939</a>\n<a href=\"#2940\" id=\"2940\">2940</a>\n<a href=\"#2941\" id=\"2941\">2941</a>\n<a href=\"#2942\" id=\"2942\">2942</a>\n<a href=\"#2943\" id=\"2943\">2943</a>\n<a href=\"#2944\" id=\"2944\">2944</a>\n<a href=\"#2945\" id=\"2945\">2945</a>\n<a href=\"#2946\" id=\"2946\">2946</a>\n<a href=\"#2947\" id=\"2947\">2947</a>\n<a href=\"#2948\" id=\"2948\">2948</a>\n<a href=\"#2949\" id=\"2949\">2949</a>\n<a href=\"#2950\" id=\"2950\">2950</a>\n<a href=\"#2951\" id=\"2951\">2951</a>\n<a href=\"#2952\" id=\"2952\">2952</a>\n<a href=\"#2953\" id=\"2953\">2953</a>\n<a href=\"#2954\" id=\"2954\">2954</a>\n<a href=\"#2955\" id=\"2955\">2955</a>\n<a href=\"#2956\" id=\"2956\">2956</a>\n<a href=\"#2957\" id=\"2957\">2957</a>\n<a href=\"#2958\" id=\"2958\">2958</a>\n<a href=\"#2959\" id=\"2959\">2959</a>\n<a href=\"#2960\" id=\"2960\">2960</a>\n<a href=\"#2961\" id=\"2961\">2961</a>\n<a href=\"#2962\" id=\"2962\">2962</a>\n<a href=\"#2963\" id=\"2963\">2963</a>\n<a href=\"#2964\" id=\"2964\">2964</a>\n<a href=\"#2965\" id=\"2965\">2965</a>\n<a href=\"#2966\" id=\"2966\">2966</a>\n<a href=\"#2967\" id=\"2967\">2967</a>\n<a href=\"#2968\" id=\"2968\">2968</a>\n<a href=\"#2969\" id=\"2969\">2969</a>\n<a href=\"#2970\" id=\"2970\">2970</a>\n<a href=\"#2971\" id=\"2971\">2971</a>\n<a href=\"#2972\" id=\"2972\">2972</a>\n<a href=\"#2973\" id=\"2973\">2973</a>\n<a href=\"#2974\" id=\"2974\">2974</a>\n<a href=\"#2975\" id=\"2975\">2975</a>\n<a href=\"#2976\" id=\"2976\">2976</a>\n<a href=\"#2977\" id=\"2977\">2977</a>\n<a href=\"#2978\" id=\"2978\">2978</a>\n<a href=\"#2979\" id=\"2979\">2979</a>\n<a href=\"#2980\" id=\"2980\">2980</a>\n<a href=\"#2981\" id=\"2981\">2981</a>\n<a href=\"#2982\" id=\"2982\">2982</a>\n<a href=\"#2983\" id=\"2983\">2983</a>\n<a href=\"#2984\" id=\"2984\">2984</a>\n<a href=\"#2985\" id=\"2985\">2985</a>\n<a href=\"#2986\" id=\"2986\">2986</a>\n<a href=\"#2987\" id=\"2987\">2987</a>\n<a href=\"#2988\" id=\"2988\">2988</a>\n<a href=\"#2989\" id=\"2989\">2989</a>\n<a href=\"#2990\" id=\"2990\">2990</a>\n<a href=\"#2991\" id=\"2991\">2991</a>\n<a href=\"#2992\" id=\"2992\">2992</a>\n<a href=\"#2993\" id=\"2993\">2993</a>\n<a href=\"#2994\" id=\"2994\">2994</a>\n<a href=\"#2995\" id=\"2995\">2995</a>\n<a href=\"#2996\" id=\"2996\">2996</a>\n<a href=\"#2997\" id=\"2997\">2997</a>\n<a href=\"#2998\" id=\"2998\">2998</a>\n<a href=\"#2999\" id=\"2999\">2999</a>\n<a href=\"#3000\" id=\"3000\">3000</a>\n<a href=\"#3001\" id=\"3001\">3001</a>\n<a href=\"#3002\" id=\"3002\">3002</a>\n<a href=\"#3003\" id=\"3003\">3003</a>\n<a href=\"#3004\" id=\"3004\">3004</a>\n<a href=\"#3005\" id=\"3005\">3005</a>\n<a href=\"#3006\" id=\"3006\">3006</a>\n<a href=\"#3007\" id=\"3007\">3007</a>\n<a href=\"#3008\" id=\"3008\">3008</a>\n<a href=\"#3009\" id=\"3009\">3009</a>\n<a href=\"#3010\" id=\"3010\">3010</a>\n<a href=\"#3011\" id=\"3011\">3011</a>\n<a href=\"#3012\" id=\"3012\">3012</a>\n<a href=\"#3013\" id=\"3013\">3013</a>\n<a href=\"#3014\" id=\"3014\">3014</a>\n<a href=\"#3015\" id=\"3015\">3015</a>\n<a href=\"#3016\" id=\"3016\">3016</a>\n<a href=\"#3017\" id=\"3017\">3017</a>\n<a href=\"#3018\" id=\"3018\">3018</a>\n<a href=\"#3019\" id=\"3019\">3019</a>\n<a href=\"#3020\" id=\"3020\">3020</a>\n<a href=\"#3021\" id=\"3021\">3021</a>\n<a href=\"#3022\" id=\"3022\">3022</a>\n<a href=\"#3023\" id=\"3023\">3023</a>\n<a href=\"#3024\" id=\"3024\">3024</a>\n<a href=\"#3025\" id=\"3025\">3025</a>\n<a href=\"#3026\" id=\"3026\">3026</a>\n<a href=\"#3027\" id=\"3027\">3027</a>\n<a href=\"#3028\" id=\"3028\">3028</a>\n<a href=\"#3029\" id=\"3029\">3029</a>\n<a href=\"#3030\" id=\"3030\">3030</a>\n<a href=\"#3031\" id=\"3031\">3031</a>\n<a href=\"#3032\" id=\"3032\">3032</a>\n<a href=\"#3033\" id=\"3033\">3033</a>\n<a href=\"#3034\" id=\"3034\">3034</a>\n<a href=\"#3035\" id=\"3035\">3035</a>\n<a href=\"#3036\" id=\"3036\">3036</a>\n<a href=\"#3037\" id=\"3037\">3037</a>\n<a href=\"#3038\" id=\"3038\">3038</a>\n<a href=\"#3039\" id=\"3039\">3039</a>\n<a href=\"#3040\" id=\"3040\">3040</a>\n<a href=\"#3041\" id=\"3041\">3041</a>\n<a href=\"#3042\" id=\"3042\">3042</a>\n<a href=\"#3043\" id=\"3043\">3043</a>\n<a href=\"#3044\" id=\"3044\">3044</a>\n<a href=\"#3045\" id=\"3045\">3045</a>\n<a href=\"#3046\" id=\"3046\">3046</a>\n<a href=\"#3047\" id=\"3047\">3047</a>\n<a href=\"#3048\" id=\"3048\">3048</a>\n<a href=\"#3049\" id=\"3049\">3049</a>\n<a href=\"#3050\" id=\"3050\">3050</a>\n<a href=\"#3051\" id=\"3051\">3051</a>\n<a href=\"#3052\" id=\"3052\">3052</a>\n<a href=\"#3053\" id=\"3053\">3053</a>\n<a href=\"#3054\" id=\"3054\">3054</a>\n<a href=\"#3055\" id=\"3055\">3055</a>\n<a href=\"#3056\" id=\"3056\">3056</a>\n<a href=\"#3057\" id=\"3057\">3057</a>\n<a href=\"#3058\" id=\"3058\">3058</a>\n<a href=\"#3059\" id=\"3059\">3059</a>\n<a href=\"#3060\" id=\"3060\">3060</a>\n<a href=\"#3061\" id=\"3061\">3061</a>\n<a href=\"#3062\" id=\"3062\">3062</a>\n<a href=\"#3063\" id=\"3063\">3063</a>\n<a href=\"#3064\" id=\"3064\">3064</a>\n<a href=\"#3065\" id=\"3065\">3065</a>\n<a href=\"#3066\" id=\"3066\">3066</a>\n<a href=\"#3067\" id=\"3067\">3067</a>\n<a href=\"#3068\" id=\"3068\">3068</a>\n<a href=\"#3069\" id=\"3069\">3069</a>\n<a href=\"#3070\" id=\"3070\">3070</a>\n<a href=\"#3071\" id=\"3071\">3071</a>\n<a href=\"#3072\" id=\"3072\">3072</a>\n<a href=\"#3073\" id=\"3073\">3073</a>\n<a href=\"#3074\" id=\"3074\">3074</a>\n<a href=\"#3075\" id=\"3075\">3075</a>\n<a href=\"#3076\" id=\"3076\">3076</a>\n<a href=\"#3077\" id=\"3077\">3077</a>\n<a href=\"#3078\" id=\"3078\">3078</a>\n<a href=\"#3079\" id=\"3079\">3079</a>\n<a href=\"#3080\" id=\"3080\">3080</a>\n<a href=\"#3081\" id=\"3081\">3081</a>\n<a href=\"#3082\" id=\"3082\">3082</a>\n<a href=\"#3083\" id=\"3083\">3083</a>\n<a href=\"#3084\" id=\"3084\">3084</a>\n<a href=\"#3085\" id=\"3085\">3085</a>\n<a href=\"#3086\" id=\"3086\">3086</a>\n<a href=\"#3087\" id=\"3087\">3087</a>\n<a href=\"#3088\" id=\"3088\">3088</a>\n<a href=\"#3089\" id=\"3089\">3089</a>\n<a href=\"#3090\" id=\"3090\">3090</a>\n<a href=\"#3091\" id=\"3091\">3091</a>\n<a href=\"#3092\" id=\"3092\">3092</a>\n<a href=\"#3093\" id=\"3093\">3093</a>\n<a href=\"#3094\" id=\"3094\">3094</a>\n<a href=\"#3095\" id=\"3095\">3095</a>\n<a href=\"#3096\" id=\"3096\">3096</a>\n<a href=\"#3097\" id=\"3097\">3097</a>\n<a href=\"#3098\" id=\"3098\">3098</a>\n<a href=\"#3099\" id=\"3099\">3099</a>\n<a href=\"#3100\" id=\"3100\">3100</a>\n<a href=\"#3101\" id=\"3101\">3101</a>\n<a href=\"#3102\" id=\"3102\">3102</a>\n<a href=\"#3103\" id=\"3103\">3103</a>\n<a href=\"#3104\" id=\"3104\">3104</a>\n<a href=\"#3105\" id=\"3105\">3105</a>\n<a href=\"#3106\" id=\"3106\">3106</a>\n<a href=\"#3107\" id=\"3107\">3107</a>\n<a href=\"#3108\" id=\"3108\">3108</a>\n<a href=\"#3109\" id=\"3109\">3109</a>\n<a href=\"#3110\" id=\"3110\">3110</a>\n<a href=\"#3111\" id=\"3111\">3111</a>\n<a href=\"#3112\" id=\"3112\">3112</a>\n<a href=\"#3113\" id=\"3113\">3113</a>\n<a href=\"#3114\" id=\"3114\">3114</a>\n<a href=\"#3115\" id=\"3115\">3115</a>\n<a href=\"#3116\" id=\"3116\">3116</a>\n<a href=\"#3117\" id=\"3117\">3117</a>\n<a href=\"#3118\" id=\"3118\">3118</a>\n<a href=\"#3119\" id=\"3119\">3119</a>\n<a href=\"#3120\" id=\"3120\">3120</a>\n<a href=\"#3121\" id=\"3121\">3121</a>\n<a href=\"#3122\" id=\"3122\">3122</a>\n<a href=\"#3123\" id=\"3123\">3123</a>\n<a href=\"#3124\" id=\"3124\">3124</a>\n<a href=\"#3125\" id=\"3125\">3125</a>\n<a href=\"#3126\" id=\"3126\">3126</a>\n<a href=\"#3127\" id=\"3127\">3127</a>\n<a href=\"#3128\" id=\"3128\">3128</a>\n<a href=\"#3129\" id=\"3129\">3129</a>\n<a href=\"#3130\" id=\"3130\">3130</a>\n<a href=\"#3131\" id=\"3131\">3131</a>\n<a href=\"#3132\" id=\"3132\">3132</a>\n<a href=\"#3133\" id=\"3133\">3133</a>\n<a href=\"#3134\" id=\"3134\">3134</a>\n<a href=\"#3135\" id=\"3135\">3135</a>\n<a href=\"#3136\" id=\"3136\">3136</a>\n<a href=\"#3137\" id=\"3137\">3137</a>\n<a href=\"#3138\" id=\"3138\">3138</a>\n<a href=\"#3139\" id=\"3139\">3139</a>\n<a href=\"#3140\" id=\"3140\">3140</a>\n<a href=\"#3141\" id=\"3141\">3141</a>\n<a href=\"#3142\" id=\"3142\">3142</a>\n<a href=\"#3143\" id=\"3143\">3143</a>\n<a href=\"#3144\" id=\"3144\">3144</a>\n<a href=\"#3145\" id=\"3145\">3145</a>\n<a href=\"#3146\" id=\"3146\">3146</a>\n<a href=\"#3147\" id=\"3147\">3147</a>\n<a href=\"#3148\" id=\"3148\">3148</a>\n<a href=\"#3149\" id=\"3149\">3149</a>\n<a href=\"#3150\" id=\"3150\">3150</a>\n<a href=\"#3151\" id=\"3151\">3151</a>\n<a href=\"#3152\" id=\"3152\">3152</a>\n<a href=\"#3153\" id=\"3153\">3153</a>\n<a href=\"#3154\" id=\"3154\">3154</a>\n<a href=\"#3155\" id=\"3155\">3155</a>\n<a href=\"#3156\" id=\"3156\">3156</a>\n<a href=\"#3157\" id=\"3157\">3157</a>\n<a href=\"#3158\" id=\"3158\">3158</a>\n<a href=\"#3159\" id=\"3159\">3159</a>\n<a href=\"#3160\" id=\"3160\">3160</a>\n<a href=\"#3161\" id=\"3161\">3161</a>\n<a href=\"#3162\" id=\"3162\">3162</a>\n<a href=\"#3163\" id=\"3163\">3163</a>\n<a href=\"#3164\" id=\"3164\">3164</a>\n<a href=\"#3165\" id=\"3165\">3165</a>\n<a href=\"#3166\" id=\"3166\">3166</a>\n<a href=\"#3167\" id=\"3167\">3167</a>\n<a href=\"#3168\" id=\"3168\">3168</a>\n<a href=\"#3169\" id=\"3169\">3169</a>\n<a href=\"#3170\" id=\"3170\">3170</a>\n<a href=\"#3171\" id=\"3171\">3171</a>\n<a href=\"#3172\" id=\"3172\">3172</a>\n<a href=\"#3173\" id=\"3173\">3173</a>\n<a href=\"#3174\" id=\"3174\">3174</a>\n<a href=\"#3175\" id=\"3175\">3175</a>\n<a href=\"#3176\" id=\"3176\">3176</a>\n<a href=\"#3177\" id=\"3177\">3177</a>\n<a href=\"#3178\" id=\"3178\">3178</a>\n<a href=\"#3179\" id=\"3179\">3179</a>\n<a href=\"#3180\" id=\"3180\">3180</a>\n<a href=\"#3181\" id=\"3181\">3181</a>\n<a href=\"#3182\" id=\"3182\">3182</a>\n<a href=\"#3183\" id=\"3183\">3183</a>\n<a href=\"#3184\" id=\"3184\">3184</a>\n<a href=\"#3185\" id=\"3185\">3185</a>\n<a href=\"#3186\" id=\"3186\">3186</a>\n<a href=\"#3187\" id=\"3187\">3187</a>\n<a href=\"#3188\" id=\"3188\">3188</a>\n<a href=\"#3189\" id=\"3189\">3189</a>\n<a href=\"#3190\" id=\"3190\">3190</a>\n<a href=\"#3191\" id=\"3191\">3191</a>\n<a href=\"#3192\" id=\"3192\">3192</a>\n<a href=\"#3193\" id=\"3193\">3193</a>\n<a href=\"#3194\" id=\"3194\">3194</a>\n<a href=\"#3195\" id=\"3195\">3195</a>\n<a href=\"#3196\" id=\"3196\">3196</a>\n<a href=\"#3197\" id=\"3197\">3197</a>\n<a href=\"#3198\" id=\"3198\">3198</a>\n<a href=\"#3199\" id=\"3199\">3199</a>\n<a href=\"#3200\" id=\"3200\">3200</a>\n<a href=\"#3201\" id=\"3201\">3201</a>\n<a href=\"#3202\" id=\"3202\">3202</a>\n<a href=\"#3203\" id=\"3203\">3203</a>\n<a href=\"#3204\" id=\"3204\">3204</a>\n<a href=\"#3205\" id=\"3205\">3205</a>\n<a href=\"#3206\" id=\"3206\">3206</a>\n<a href=\"#3207\" id=\"3207\">3207</a>\n<a href=\"#3208\" id=\"3208\">3208</a>\n<a href=\"#3209\" id=\"3209\">3209</a>\n<a href=\"#3210\" id=\"3210\">3210</a>\n<a href=\"#3211\" id=\"3211\">3211</a>\n<a href=\"#3212\" id=\"3212\">3212</a>\n<a href=\"#3213\" id=\"3213\">3213</a>\n<a href=\"#3214\" id=\"3214\">3214</a>\n<a href=\"#3215\" id=\"3215\">3215</a>\n<a href=\"#3216\" id=\"3216\">3216</a>\n<a href=\"#3217\" id=\"3217\">3217</a>\n<a href=\"#3218\" id=\"3218\">3218</a>\n<a href=\"#3219\" id=\"3219\">3219</a>\n<a href=\"#3220\" id=\"3220\">3220</a>\n<a href=\"#3221\" id=\"3221\">3221</a>\n<a href=\"#3222\" id=\"3222\">3222</a>\n<a href=\"#3223\" id=\"3223\">3223</a>\n<a href=\"#3224\" id=\"3224\">3224</a>\n<a href=\"#3225\" id=\"3225\">3225</a>\n<a href=\"#3226\" id=\"3226\">3226</a>\n<a href=\"#3227\" id=\"3227\">3227</a>\n<a href=\"#3228\" id=\"3228\">3228</a>\n<a href=\"#3229\" id=\"3229\">3229</a>\n<a href=\"#3230\" id=\"3230\">3230</a>\n<a href=\"#3231\" id=\"3231\">3231</a>\n<a href=\"#3232\" id=\"3232\">3232</a>\n<a href=\"#3233\" id=\"3233\">3233</a>\n<a href=\"#3234\" id=\"3234\">3234</a>\n<a href=\"#3235\" id=\"3235\">3235</a>\n<a href=\"#3236\" id=\"3236\">3236</a>\n<a href=\"#3237\" id=\"3237\">3237</a>\n<a href=\"#3238\" id=\"3238\">3238</a>\n<a href=\"#3239\" id=\"3239\">3239</a>\n<a href=\"#3240\" id=\"3240\">3240</a>\n<a href=\"#3241\" id=\"3241\">3241</a>\n<a href=\"#3242\" id=\"3242\">3242</a>\n<a href=\"#3243\" id=\"3243\">3243</a>\n<a href=\"#3244\" id=\"3244\">3244</a>\n<a href=\"#3245\" id=\"3245\">3245</a>\n<a href=\"#3246\" id=\"3246\">3246</a>\n<a href=\"#3247\" id=\"3247\">3247</a>\n<a href=\"#3248\" id=\"3248\">3248</a>\n<a href=\"#3249\" id=\"3249\">3249</a>\n<a href=\"#3250\" id=\"3250\">3250</a>\n<a href=\"#3251\" id=\"3251\">3251</a>\n<a href=\"#3252\" id=\"3252\">3252</a>\n<a href=\"#3253\" id=\"3253\">3253</a>\n<a href=\"#3254\" id=\"3254\">3254</a>\n<a href=\"#3255\" id=\"3255\">3255</a>\n<a href=\"#3256\" id=\"3256\">3256</a>\n<a href=\"#3257\" id=\"3257\">3257</a>\n<a href=\"#3258\" id=\"3258\">3258</a>\n<a href=\"#3259\" id=\"3259\">3259</a>\n<a href=\"#3260\" id=\"3260\">3260</a>\n<a href=\"#3261\" id=\"3261\">3261</a>\n<a href=\"#3262\" id=\"3262\">3262</a>\n<a href=\"#3263\" id=\"3263\">3263</a>\n<a href=\"#3264\" id=\"3264\">3264</a>\n<a href=\"#3265\" id=\"3265\">3265</a>\n<a href=\"#3266\" id=\"3266\">3266</a>\n<a href=\"#3267\" id=\"3267\">3267</a>\n<a href=\"#3268\" id=\"3268\">3268</a>\n<a href=\"#3269\" id=\"3269\">3269</a>\n<a href=\"#3270\" id=\"3270\">3270</a>\n<a href=\"#3271\" id=\"3271\">3271</a>\n<a href=\"#3272\" id=\"3272\">3272</a>\n<a href=\"#3273\" id=\"3273\">3273</a>\n<a href=\"#3274\" id=\"3274\">3274</a>\n<a href=\"#3275\" id=\"3275\">3275</a>\n<a href=\"#3276\" id=\"3276\">3276</a>\n<a href=\"#3277\" id=\"3277\">3277</a>\n<a href=\"#3278\" id=\"3278\">3278</a>\n<a href=\"#3279\" id=\"3279\">3279</a>\n<a href=\"#3280\" id=\"3280\">3280</a>\n<a href=\"#3281\" id=\"3281\">3281</a>\n<a href=\"#3282\" id=\"3282\">3282</a>\n<a href=\"#3283\" id=\"3283\">3283</a>\n<a href=\"#3284\" id=\"3284\">3284</a>\n<a href=\"#3285\" id=\"3285\">3285</a>\n<a href=\"#3286\" id=\"3286\">3286</a>\n<a href=\"#3287\" id=\"3287\">3287</a>\n<a href=\"#3288\" id=\"3288\">3288</a>\n<a href=\"#3289\" id=\"3289\">3289</a>\n<a href=\"#3290\" id=\"3290\">3290</a>\n<a href=\"#3291\" id=\"3291\">3291</a>\n<a href=\"#3292\" id=\"3292\">3292</a>\n<a href=\"#3293\" id=\"3293\">3293</a>\n<a href=\"#3294\" id=\"3294\">3294</a>\n<a href=\"#3295\" id=\"3295\">3295</a>\n<a href=\"#3296\" id=\"3296\">3296</a>\n<a href=\"#3297\" id=\"3297\">3297</a>\n<a href=\"#3298\" id=\"3298\">3298</a>\n<a href=\"#3299\" id=\"3299\">3299</a>\n<a href=\"#3300\" id=\"3300\">3300</a>\n<a href=\"#3301\" id=\"3301\">3301</a>\n<a href=\"#3302\" id=\"3302\">3302</a>\n<a href=\"#3303\" id=\"3303\">3303</a>\n<a href=\"#3304\" id=\"3304\">3304</a>\n<a href=\"#3305\" id=\"3305\">3305</a>\n<a href=\"#3306\" id=\"3306\">3306</a>\n<a href=\"#3307\" id=\"3307\">3307</a>\n<a href=\"#3308\" id=\"3308\">3308</a>\n<a href=\"#3309\" id=\"3309\">3309</a>\n<a href=\"#3310\" id=\"3310\">3310</a>\n<a href=\"#3311\" id=\"3311\">3311</a>\n<a href=\"#3312\" id=\"3312\">3312</a>\n<a href=\"#3313\" id=\"3313\">3313</a>\n<a href=\"#3314\" id=\"3314\">3314</a>\n<a href=\"#3315\" id=\"3315\">3315</a>\n<a href=\"#3316\" id=\"3316\">3316</a>\n<a href=\"#3317\" id=\"3317\">3317</a>\n<a href=\"#3318\" id=\"3318\">3318</a>\n<a href=\"#3319\" id=\"3319\">3319</a>\n<a href=\"#3320\" id=\"3320\">3320</a>\n<a href=\"#3321\" id=\"3321\">3321</a>\n<a href=\"#3322\" id=\"3322\">3322</a>\n<a href=\"#3323\" id=\"3323\">3323</a>\n<a href=\"#3324\" id=\"3324\">3324</a>\n<a href=\"#3325\" id=\"3325\">3325</a>\n<a href=\"#3326\" id=\"3326\">3326</a>\n<a href=\"#3327\" id=\"3327\">3327</a>\n<a href=\"#3328\" id=\"3328\">3328</a>\n<a href=\"#3329\" id=\"3329\">3329</a>\n<a href=\"#3330\" id=\"3330\">3330</a>\n<a href=\"#3331\" id=\"3331\">3331</a>\n<a href=\"#3332\" id=\"3332\">3332</a>\n<a href=\"#3333\" id=\"3333\">3333</a>\n<a href=\"#3334\" id=\"3334\">3334</a>\n<a href=\"#3335\" id=\"3335\">3335</a>\n<a href=\"#3336\" id=\"3336\">3336</a>\n<a href=\"#3337\" id=\"3337\">3337</a>\n<a href=\"#3338\" id=\"3338\">3338</a>\n<a href=\"#3339\" id=\"3339\">3339</a>\n<a href=\"#3340\" id=\"3340\">3340</a>\n<a href=\"#3341\" id=\"3341\">3341</a>\n<a href=\"#3342\" id=\"3342\">3342</a>\n<a href=\"#3343\" id=\"3343\">3343</a>\n<a href=\"#3344\" id=\"3344\">3344</a>\n<a href=\"#3345\" id=\"3345\">3345</a>\n<a href=\"#3346\" id=\"3346\">3346</a>\n<a href=\"#3347\" id=\"3347\">3347</a>\n<a href=\"#3348\" id=\"3348\">3348</a>\n<a href=\"#3349\" id=\"3349\">3349</a>\n<a href=\"#3350\" id=\"3350\">3350</a>\n<a href=\"#3351\" id=\"3351\">3351</a>\n<a href=\"#3352\" id=\"3352\">3352</a>\n<a href=\"#3353\" id=\"3353\">3353</a>\n<a href=\"#3354\" id=\"3354\">3354</a>\n<a href=\"#3355\" id=\"3355\">3355</a>\n<a href=\"#3356\" id=\"3356\">3356</a>\n<a href=\"#3357\" id=\"3357\">3357</a>\n<a href=\"#3358\" id=\"3358\">3358</a>\n<a href=\"#3359\" id=\"3359\">3359</a>\n<a href=\"#3360\" id=\"3360\">3360</a>\n<a href=\"#3361\" id=\"3361\">3361</a>\n<a href=\"#3362\" id=\"3362\">3362</a>\n<a href=\"#3363\" id=\"3363\">3363</a>\n<a href=\"#3364\" id=\"3364\">3364</a>\n<a href=\"#3365\" id=\"3365\">3365</a>\n<a href=\"#3366\" id=\"3366\">3366</a>\n<a href=\"#3367\" id=\"3367\">3367</a>\n<a href=\"#3368\" id=\"3368\">3368</a>\n<a href=\"#3369\" id=\"3369\">3369</a>\n<a href=\"#3370\" id=\"3370\">3370</a>\n<a href=\"#3371\" id=\"3371\">3371</a>\n<a href=\"#3372\" id=\"3372\">3372</a>\n<a href=\"#3373\" id=\"3373\">3373</a>\n<a href=\"#3374\" id=\"3374\">3374</a>\n<a href=\"#3375\" id=\"3375\">3375</a>\n<a href=\"#3376\" id=\"3376\">3376</a>\n<a href=\"#3377\" id=\"3377\">3377</a>\n<a href=\"#3378\" id=\"3378\">3378</a>\n<a href=\"#3379\" id=\"3379\">3379</a>\n<a href=\"#3380\" id=\"3380\">3380</a>\n<a href=\"#3381\" id=\"3381\">3381</a>\n<a href=\"#3382\" id=\"3382\">3382</a>\n<a href=\"#3383\" id=\"3383\">3383</a>\n<a href=\"#3384\" id=\"3384\">3384</a>\n<a href=\"#3385\" id=\"3385\">3385</a>\n<a href=\"#3386\" id=\"3386\">3386</a>\n<a href=\"#3387\" id=\"3387\">3387</a>\n<a href=\"#3388\" id=\"3388\">3388</a>\n<a href=\"#3389\" id=\"3389\">3389</a>\n<a href=\"#3390\" id=\"3390\">3390</a>\n<a href=\"#3391\" id=\"3391\">3391</a>\n<a href=\"#3392\" id=\"3392\">3392</a>\n<a href=\"#3393\" id=\"3393\">3393</a>\n<a href=\"#3394\" id=\"3394\">3394</a>\n<a href=\"#3395\" id=\"3395\">3395</a>\n<a href=\"#3396\" id=\"3396\">3396</a>\n<a href=\"#3397\" id=\"3397\">3397</a>\n<a href=\"#3398\" id=\"3398\">3398</a>\n<a href=\"#3399\" id=\"3399\">3399</a>\n<a href=\"#3400\" id=\"3400\">3400</a>\n<a href=\"#3401\" id=\"3401\">3401</a>\n<a href=\"#3402\" id=\"3402\">3402</a>\n<a href=\"#3403\" id=\"3403\">3403</a>\n<a href=\"#3404\" id=\"3404\">3404</a>\n<a href=\"#3405\" id=\"3405\">3405</a>\n<a href=\"#3406\" id=\"3406\">3406</a>\n<a href=\"#3407\" id=\"3407\">3407</a>\n<a href=\"#3408\" id=\"3408\">3408</a>\n<a href=\"#3409\" id=\"3409\">3409</a>\n<a href=\"#3410\" id=\"3410\">3410</a>\n<a href=\"#3411\" id=\"3411\">3411</a>\n<a href=\"#3412\" id=\"3412\">3412</a>\n<a href=\"#3413\" id=\"3413\">3413</a>\n<a href=\"#3414\" id=\"3414\">3414</a>\n<a href=\"#3415\" id=\"3415\">3415</a>\n<a href=\"#3416\" id=\"3416\">3416</a>\n<a href=\"#3417\" id=\"3417\">3417</a>\n<a href=\"#3418\" id=\"3418\">3418</a>\n<a href=\"#3419\" id=\"3419\">3419</a>\n<a href=\"#3420\" id=\"3420\">3420</a>\n<a href=\"#3421\" id=\"3421\">3421</a>\n<a href=\"#3422\" id=\"3422\">3422</a>\n<a href=\"#3423\" id=\"3423\">3423</a>\n<a href=\"#3424\" id=\"3424\">3424</a>\n<a href=\"#3425\" id=\"3425\">3425</a>\n<a href=\"#3426\" id=\"3426\">3426</a>\n<a href=\"#3427\" id=\"3427\">3427</a>\n<a href=\"#3428\" id=\"3428\">3428</a>\n<a href=\"#3429\" id=\"3429\">3429</a>\n<a href=\"#3430\" id=\"3430\">3430</a>\n<a href=\"#3431\" id=\"3431\">3431</a>\n<a href=\"#3432\" id=\"3432\">3432</a>\n<a href=\"#3433\" id=\"3433\">3433</a>\n<a href=\"#3434\" id=\"3434\">3434</a>\n<a href=\"#3435\" id=\"3435\">3435</a>\n<a href=\"#3436\" id=\"3436\">3436</a>\n<a href=\"#3437\" id=\"3437\">3437</a>\n<a href=\"#3438\" id=\"3438\">3438</a>\n<a href=\"#3439\" id=\"3439\">3439</a>\n<a href=\"#3440\" id=\"3440\">3440</a>\n<a href=\"#3441\" id=\"3441\">3441</a>\n<a href=\"#3442\" id=\"3442\">3442</a>\n<a href=\"#3443\" id=\"3443\">3443</a>\n<a href=\"#3444\" id=\"3444\">3444</a>\n<a href=\"#3445\" id=\"3445\">3445</a>\n<a href=\"#3446\" id=\"3446\">3446</a>\n<a href=\"#3447\" id=\"3447\">3447</a>\n<a href=\"#3448\" id=\"3448\">3448</a>\n<a href=\"#3449\" id=\"3449\">3449</a>\n<a href=\"#3450\" id=\"3450\">3450</a>\n<a href=\"#3451\" id=\"3451\">3451</a>\n<a href=\"#3452\" id=\"3452\">3452</a>\n<a href=\"#3453\" id=\"3453\">3453</a>\n<a href=\"#3454\" id=\"3454\">3454</a>\n<a href=\"#3455\" id=\"3455\">3455</a>\n<a href=\"#3456\" id=\"3456\">3456</a>\n<a href=\"#3457\" id=\"3457\">3457</a>\n<a href=\"#3458\" id=\"3458\">3458</a>\n<a href=\"#3459\" id=\"3459\">3459</a>\n<a href=\"#3460\" id=\"3460\">3460</a>\n<a href=\"#3461\" id=\"3461\">3461</a>\n<a href=\"#3462\" id=\"3462\">3462</a>\n<a href=\"#3463\" id=\"3463\">3463</a>\n<a href=\"#3464\" id=\"3464\">3464</a>\n<a href=\"#3465\" id=\"3465\">3465</a>\n<a href=\"#3466\" id=\"3466\">3466</a>\n<a href=\"#3467\" id=\"3467\">3467</a>\n<a href=\"#3468\" id=\"3468\">3468</a>\n<a href=\"#3469\" id=\"3469\">3469</a>\n<a href=\"#3470\" id=\"3470\">3470</a>\n<a href=\"#3471\" id=\"3471\">3471</a>\n<a href=\"#3472\" id=\"3472\">3472</a>\n<a href=\"#3473\" id=\"3473\">3473</a>\n<a href=\"#3474\" id=\"3474\">3474</a>\n<a href=\"#3475\" id=\"3475\">3475</a>\n<a href=\"#3476\" id=\"3476\">3476</a>\n<a href=\"#3477\" id=\"3477\">3477</a>\n<a href=\"#3478\" id=\"3478\">3478</a>\n<a href=\"#3479\" id=\"3479\">3479</a>\n<a href=\"#3480\" id=\"3480\">3480</a>\n<a href=\"#3481\" id=\"3481\">3481</a>\n<a href=\"#3482\" id=\"3482\">3482</a>\n<a href=\"#3483\" id=\"3483\">3483</a>\n<a href=\"#3484\" id=\"3484\">3484</a>\n<a href=\"#3485\" id=\"3485\">3485</a>\n<a href=\"#3486\" id=\"3486\">3486</a>\n<a href=\"#3487\" id=\"3487\">3487</a>\n<a href=\"#3488\" id=\"3488\">3488</a>\n<a href=\"#3489\" id=\"3489\">3489</a>\n<a href=\"#3490\" id=\"3490\">3490</a>\n<a href=\"#3491\" id=\"3491\">3491</a>\n<a href=\"#3492\" id=\"3492\">3492</a>\n<a href=\"#3493\" id=\"3493\">3493</a>\n<a href=\"#3494\" id=\"3494\">3494</a>\n<a href=\"#3495\" id=\"3495\">3495</a>\n<a href=\"#3496\" id=\"3496\">3496</a>\n<a href=\"#3497\" id=\"3497\">3497</a>\n<a href=\"#3498\" id=\"3498\">3498</a>\n<a href=\"#3499\" id=\"3499\">3499</a>\n<a href=\"#3500\" id=\"3500\">3500</a>\n<a href=\"#3501\" id=\"3501\">3501</a>\n<a href=\"#3502\" id=\"3502\">3502</a>\n<a href=\"#3503\" id=\"3503\">3503</a>\n<a href=\"#3504\" id=\"3504\">3504</a>\n<a href=\"#3505\" id=\"3505\">3505</a>\n<a href=\"#3506\" id=\"3506\">3506</a>\n<a href=\"#3507\" id=\"3507\">3507</a>\n<a href=\"#3508\" id=\"3508\">3508</a>\n<a href=\"#3509\" id=\"3509\">3509</a>\n<a href=\"#3510\" id=\"3510\">3510</a>\n<a href=\"#3511\" id=\"3511\">3511</a>\n<a href=\"#3512\" id=\"3512\">3512</a>\n<a href=\"#3513\" id=\"3513\">3513</a>\n<a href=\"#3514\" id=\"3514\">3514</a>\n<a href=\"#3515\" id=\"3515\">3515</a>\n<a href=\"#3516\" id=\"3516\">3516</a>\n<a href=\"#3517\" id=\"3517\">3517</a>\n<a href=\"#3518\" id=\"3518\">3518</a>\n<a href=\"#3519\" id=\"3519\">3519</a>\n<a href=\"#3520\" id=\"3520\">3520</a>\n<a href=\"#3521\" id=\"3521\">3521</a>\n<a href=\"#3522\" id=\"3522\">3522</a>\n<a href=\"#3523\" id=\"3523\">3523</a>\n<a href=\"#3524\" id=\"3524\">3524</a>\n<a href=\"#3525\" id=\"3525\">3525</a>\n<a href=\"#3526\" id=\"3526\">3526</a>\n<a href=\"#3527\" id=\"3527\">3527</a>\n<a href=\"#3528\" id=\"3528\">3528</a>\n<a href=\"#3529\" id=\"3529\">3529</a>\n<a href=\"#3530\" id=\"3530\">3530</a>\n<a href=\"#3531\" id=\"3531\">3531</a>\n<a href=\"#3532\" id=\"3532\">3532</a>\n<a href=\"#3533\" id=\"3533\">3533</a>\n<a href=\"#3534\" id=\"3534\">3534</a>\n<a href=\"#3535\" id=\"3535\">3535</a>\n<a href=\"#3536\" id=\"3536\">3536</a>\n<a href=\"#3537\" id=\"3537\">3537</a>\n<a href=\"#3538\" id=\"3538\">3538</a>\n<a href=\"#3539\" id=\"3539\">3539</a>\n<a href=\"#3540\" id=\"3540\">3540</a>\n<a href=\"#3541\" id=\"3541\">3541</a>\n<a href=\"#3542\" id=\"3542\">3542</a>\n<a href=\"#3543\" id=\"3543\">3543</a>\n<a href=\"#3544\" id=\"3544\">3544</a>\n<a href=\"#3545\" id=\"3545\">3545</a>\n<a href=\"#3546\" id=\"3546\">3546</a>\n<a href=\"#3547\" id=\"3547\">3547</a>\n<a href=\"#3548\" id=\"3548\">3548</a>\n<a href=\"#3549\" id=\"3549\">3549</a>\n<a href=\"#3550\" id=\"3550\">3550</a>\n<a href=\"#3551\" id=\"3551\">3551</a>\n<a href=\"#3552\" id=\"3552\">3552</a>\n<a href=\"#3553\" id=\"3553\">3553</a>\n<a href=\"#3554\" id=\"3554\">3554</a>\n<a href=\"#3555\" id=\"3555\">3555</a>\n<a href=\"#3556\" id=\"3556\">3556</a>\n</pre></div><pre class=\"rust\"><code><span class=\"doccomment\">//! A contiguous growable array type with heap-allocated contents, written\n//! `Vec&lt;T&gt;`.\n//!\n//! Vectors have *O*(1) indexing, amortized *O*(1) push (to the end) and\n//! *O*(1) pop (from the end).\n//!\n//! Vectors ensure they never allocate more than `isize::MAX` bytes.\n//!\n//! # Examples\n//!\n//! You can explicitly create a [`Vec`] with [`Vec::new`]:\n//!\n//! ```\n//! let v: Vec&lt;i32&gt; = Vec::new();\n//! ```\n//!\n//! ...or by using the [`vec!`] macro:\n//!\n//! ```\n//! let v: Vec&lt;i32&gt; = vec![];\n//!\n//! let v = vec![1, 2, 3, 4, 5];\n//!\n//! let v = vec![0; 10]; // ten zeroes\n//! ```\n//!\n//! You can [`push`] values onto the end of a vector (which will grow the vector\n//! as needed):\n//!\n//! ```\n//! let mut v = vec![1, 2];\n//!\n//! v.push(3);\n//! ```\n//!\n//! Popping values works in much the same way:\n//!\n//! ```\n//! let mut v = vec![1, 2];\n//!\n//! let two = v.pop();\n//! ```\n//!\n//! Vectors also support indexing (through the [`Index`] and [`IndexMut`] traits):\n//!\n//! ```\n//! let mut v = vec![1, 2, 3];\n//! let three = v[2];\n//! v[1] = v[1] + 5;\n//! ```\n//!\n//! [`push`]: Vec::push\n\n</span><span class=\"attr\">#![stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n\n#[cfg(not(no_global_oom_handling))]\n</span><span class=\"kw\">use </span>core::cmp;\n<span class=\"kw\">use </span>core::cmp::Ordering;\n<span class=\"kw\">use </span>core::fmt;\n<span class=\"kw\">use </span>core::hash::{Hash, Hasher};\n<span class=\"attr\">#[cfg(not(no_global_oom_handling))]\n</span><span class=\"kw\">use </span>core::iter;\n<span class=\"kw\">use </span>core::marker::PhantomData;\n<span class=\"kw\">use </span>core::mem::{<span class=\"self\">self</span>, ManuallyDrop, MaybeUninit, SizedTypeProperties};\n<span class=\"kw\">use </span>core::ops::{<span class=\"self\">self</span>, Index, IndexMut, Range, RangeBounds};\n<span class=\"kw\">use </span>core::ptr::{<span class=\"self\">self</span>, NonNull};\n<span class=\"kw\">use </span>core::slice::{<span class=\"self\">self</span>, SliceIndex};\n\n<span class=\"kw\">use </span><span class=\"kw\">crate</span>::alloc::{Allocator, Global};\n<span class=\"kw\">use </span><span class=\"kw\">crate</span>::borrow::{Cow, ToOwned};\n<span class=\"kw\">use </span><span class=\"kw\">crate</span>::boxed::Box;\n<span class=\"kw\">use </span><span class=\"kw\">crate</span>::collections::TryReserveError;\n<span class=\"kw\">use </span><span class=\"kw\">crate</span>::raw_vec::RawVec;\n\n<span class=\"attr\">#[unstable(feature = <span class=\"string\">\"extract_if\"</span>, reason = <span class=\"string\">\"recently added\"</span>, issue = <span class=\"string\">\"43244\"</span>)]\n</span><span class=\"kw\">pub use </span><span class=\"self\">self</span>::extract_if::ExtractIf;\n\n<span class=\"kw\">mod </span>extract_if;\n\n<span class=\"attr\">#[cfg(not(no_global_oom_handling))]\n#[stable(feature = <span class=\"string\">\"vec_splice\"</span>, since = <span class=\"string\">\"1.21.0\"</span>)]\n</span><span class=\"kw\">pub use </span><span class=\"self\">self</span>::splice::Splice;\n\n<span class=\"attr\">#[cfg(not(no_global_oom_handling))]\n</span><span class=\"kw\">mod </span>splice;\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"drain\"</span>, since = <span class=\"string\">\"1.6.0\"</span>)]\n</span><span class=\"kw\">pub use </span><span class=\"self\">self</span>::drain::Drain;\n\n<span class=\"kw\">mod </span>drain;\n\n<span class=\"attr\">#[cfg(not(no_global_oom_handling))]\n</span><span class=\"kw\">mod </span>cow;\n\n<span class=\"attr\">#[cfg(not(no_global_oom_handling))]\n</span><span class=\"kw\">pub</span>(<span class=\"kw\">crate</span>) <span class=\"kw\">use </span><span class=\"self\">self</span>::in_place_collect::AsVecIntoIter;\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">pub use </span><span class=\"self\">self</span>::into_iter::IntoIter;\n\n<span class=\"kw\">mod </span>into_iter;\n\n<span class=\"attr\">#[cfg(not(no_global_oom_handling))]\n</span><span class=\"kw\">use </span><span class=\"self\">self</span>::is_zero::IsZero;\n\n<span class=\"attr\">#[cfg(not(no_global_oom_handling))]\n</span><span class=\"kw\">mod </span>is_zero;\n\n<span class=\"attr\">#[cfg(not(no_global_oom_handling))]\n</span><span class=\"kw\">mod </span>in_place_collect;\n\n<span class=\"kw\">mod </span>partial_eq;\n\n<span class=\"attr\">#[cfg(not(no_global_oom_handling))]\n</span><span class=\"kw\">use </span><span class=\"self\">self</span>::spec_from_elem::SpecFromElem;\n\n<span class=\"attr\">#[cfg(not(no_global_oom_handling))]\n</span><span class=\"kw\">mod </span>spec_from_elem;\n\n<span class=\"attr\">#[cfg(not(no_global_oom_handling))]\n</span><span class=\"kw\">use </span><span class=\"self\">self</span>::set_len_on_drop::SetLenOnDrop;\n\n<span class=\"attr\">#[cfg(not(no_global_oom_handling))]\n</span><span class=\"kw\">mod </span>set_len_on_drop;\n\n<span class=\"attr\">#[cfg(not(no_global_oom_handling))]\n</span><span class=\"kw\">use </span><span class=\"self\">self</span>::in_place_drop::{InPlaceDrop, InPlaceDstDataSrcBufDrop};\n\n<span class=\"attr\">#[cfg(not(no_global_oom_handling))]\n</span><span class=\"kw\">mod </span>in_place_drop;\n\n<span class=\"attr\">#[cfg(not(no_global_oom_handling))]\n</span><span class=\"kw\">use </span><span class=\"self\">self</span>::spec_from_iter_nested::SpecFromIterNested;\n\n<span class=\"attr\">#[cfg(not(no_global_oom_handling))]\n</span><span class=\"kw\">mod </span>spec_from_iter_nested;\n\n<span class=\"attr\">#[cfg(not(no_global_oom_handling))]\n</span><span class=\"kw\">use </span><span class=\"self\">self</span>::spec_from_iter::SpecFromIter;\n\n<span class=\"attr\">#[cfg(not(no_global_oom_handling))]\n</span><span class=\"kw\">mod </span>spec_from_iter;\n\n<span class=\"attr\">#[cfg(not(no_global_oom_handling))]\n</span><span class=\"kw\">use </span><span class=\"self\">self</span>::spec_extend::SpecExtend;\n\n<span class=\"attr\">#[cfg(not(no_global_oom_handling))]\n</span><span class=\"kw\">mod </span>spec_extend;\n\n<span class=\"doccomment\">/// A contiguous growable array type, written as `Vec&lt;T&gt;`, short for 'vector'.\n///\n/// # Examples\n///\n/// ```\n/// let mut vec = Vec::new();\n/// vec.push(1);\n/// vec.push(2);\n///\n/// assert_eq!(vec.len(), 2);\n/// assert_eq!(vec[0], 1);\n///\n/// assert_eq!(vec.pop(), Some(2));\n/// assert_eq!(vec.len(), 1);\n///\n/// vec[0] = 7;\n/// assert_eq!(vec[0], 7);\n///\n/// vec.extend([1, 2, 3]);\n///\n/// for x in &amp;vec {\n///     println!(\"{x}\");\n/// }\n/// assert_eq!(vec, [7, 1, 2, 3]);\n/// ```\n///\n/// The [`vec!`] macro is provided for convenient initialization:\n///\n/// ```\n/// let mut vec1 = vec![1, 2, 3];\n/// vec1.push(4);\n/// let vec2 = Vec::from([1, 2, 3, 4]);\n/// assert_eq!(vec1, vec2);\n/// ```\n///\n/// It can also initialize each element of a `Vec&lt;T&gt;` with a given value.\n/// This may be more efficient than performing allocation and initialization\n/// in separate steps, especially when initializing a vector of zeros:\n///\n/// ```\n/// let vec = vec![0; 5];\n/// assert_eq!(vec, [0, 0, 0, 0, 0]);\n///\n/// // The following is equivalent, but potentially slower:\n/// let mut vec = Vec::with_capacity(5);\n/// vec.resize(5, 0);\n/// assert_eq!(vec, [0, 0, 0, 0, 0]);\n/// ```\n///\n/// For more information, see\n/// [Capacity and Reallocation](#capacity-and-reallocation).\n///\n/// Use a `Vec&lt;T&gt;` as an efficient stack:\n///\n/// ```\n/// let mut stack = Vec::new();\n///\n/// stack.push(1);\n/// stack.push(2);\n/// stack.push(3);\n///\n/// while let Some(top) = stack.pop() {\n///     // Prints 3, 2, 1\n///     println!(\"{top}\");\n/// }\n/// ```\n///\n/// # Indexing\n///\n/// The `Vec` type allows access to values by index, because it implements the\n/// [`Index`] trait. An example will be more explicit:\n///\n/// ```\n/// let v = vec![0, 2, 4, 6];\n/// println!(\"{}\", v[1]); // it will display '2'\n/// ```\n///\n/// However be careful: if you try to access an index which isn't in the `Vec`,\n/// your software will panic! You cannot do this:\n///\n/// ```should_panic\n/// let v = vec![0, 2, 4, 6];\n/// println!(\"{}\", v[6]); // it will panic!\n/// ```\n///\n/// Use [`get`] and [`get_mut`] if you want to check whether the index is in\n/// the `Vec`.\n///\n/// # Slicing\n///\n/// A `Vec` can be mutable. On the other hand, slices are read-only objects.\n/// To get a [slice][prim@slice], use [`&amp;`]. Example:\n///\n/// ```\n/// fn read_slice(slice: &amp;[usize]) {\n///     // ...\n/// }\n///\n/// let v = vec![0, 1];\n/// read_slice(&amp;v);\n///\n/// // ... and that's all!\n/// // you can also do it like this:\n/// let u: &amp;[usize] = &amp;v;\n/// // or like this:\n/// let u: &amp;[_] = &amp;v;\n/// ```\n///\n/// In Rust, it's more common to pass slices as arguments rather than vectors\n/// when you just want to provide read access. The same goes for [`String`] and\n/// [`&amp;str`].\n///\n/// # Capacity and reallocation\n///\n/// The capacity of a vector is the amount of space allocated for any future\n/// elements that will be added onto the vector. This is not to be confused with\n/// the *length* of a vector, which specifies the number of actual elements\n/// within the vector. If a vector's length exceeds its capacity, its capacity\n/// will automatically be increased, but its elements will have to be\n/// reallocated.\n///\n/// For example, a vector with capacity 10 and length 0 would be an empty vector\n/// with space for 10 more elements. Pushing 10 or fewer elements onto the\n/// vector will not change its capacity or cause reallocation to occur. However,\n/// if the vector's length is increased to 11, it will have to reallocate, which\n/// can be slow. For this reason, it is recommended to use [`Vec::with_capacity`]\n/// whenever possible to specify how big the vector is expected to get.\n///\n/// # Guarantees\n///\n/// Due to its incredibly fundamental nature, `Vec` makes a lot of guarantees\n/// about its design. This ensures that it's as low-overhead as possible in\n/// the general case, and can be correctly manipulated in primitive ways\n/// by unsafe code. Note that these guarantees refer to an unqualified `Vec&lt;T&gt;`.\n/// If additional type parameters are added (e.g., to support custom allocators),\n/// overriding their defaults may change the behavior.\n///\n/// Most fundamentally, `Vec` is and always will be a (pointer, capacity, length)\n/// triplet. No more, no less. The order of these fields is completely\n/// unspecified, and you should use the appropriate methods to modify these.\n/// The pointer will never be null, so this type is null-pointer-optimized.\n///\n/// However, the pointer might not actually point to allocated memory. In particular,\n/// if you construct a `Vec` with capacity 0 via [`Vec::new`], [`vec![]`][`vec!`],\n/// [`Vec::with_capacity(0)`][`Vec::with_capacity`], or by calling [`shrink_to_fit`]\n/// on an empty Vec, it will not allocate memory. Similarly, if you store zero-sized\n/// types inside a `Vec`, it will not allocate space for them. *Note that in this case\n/// the `Vec` might not report a [`capacity`] of 0*. `Vec` will allocate if and only\n/// if &lt;code&gt;[mem::size_of::\\&lt;T&gt;]\\() * [capacity]\\() &gt; 0&lt;/code&gt;. In general, `Vec`'s allocation\n/// details are very subtle --- if you intend to allocate memory using a `Vec`\n/// and use it for something else (either to pass to unsafe code, or to build your\n/// own memory-backed collection), be sure to deallocate this memory by using\n/// `from_raw_parts` to recover the `Vec` and then dropping it.\n///\n/// If a `Vec` *has* allocated memory, then the memory it points to is on the heap\n/// (as defined by the allocator Rust is configured to use by default), and its\n/// pointer points to [`len`] initialized, contiguous elements in order (what\n/// you would see if you coerced it to a slice), followed by &lt;code&gt;[capacity] - [len]&lt;/code&gt;\n/// logically uninitialized, contiguous elements.\n///\n/// A vector containing the elements `'a'` and `'b'` with capacity 4 can be\n/// visualized as below. The top part is the `Vec` struct, it contains a\n/// pointer to the head of the allocation in the heap, length and capacity.\n/// The bottom part is the allocation on the heap, a contiguous memory block.\n///\n/// ```text\n///             ptr      len  capacity\n///        +--------+--------+--------+\n///        | 0x0123 |      2 |      4 |\n///        +--------+--------+--------+\n///             |\n///             v\n/// Heap   +--------+--------+--------+--------+\n///        |    'a' |    'b' | uninit | uninit |\n///        +--------+--------+--------+--------+\n/// ```\n///\n/// - **uninit** represents memory that is not initialized, see [`MaybeUninit`].\n/// - Note: the ABI is not stable and `Vec` makes no guarantees about its memory\n///   layout (including the order of fields).\n///\n/// `Vec` will never perform a \"small optimization\" where elements are actually\n/// stored on the stack for two reasons:\n///\n/// * It would make it more difficult for unsafe code to correctly manipulate\n///   a `Vec`. The contents of a `Vec` wouldn't have a stable address if it were\n///   only moved, and it would be more difficult to determine if a `Vec` had\n///   actually allocated memory.\n///\n/// * It would penalize the general case, incurring an additional branch\n///   on every access.\n///\n/// `Vec` will never automatically shrink itself, even if completely empty. This\n/// ensures no unnecessary allocations or deallocations occur. Emptying a `Vec`\n/// and then filling it back up to the same [`len`] should incur no calls to\n/// the allocator. If you wish to free up unused memory, use\n/// [`shrink_to_fit`] or [`shrink_to`].\n///\n/// [`push`] and [`insert`] will never (re)allocate if the reported capacity is\n/// sufficient. [`push`] and [`insert`] *will* (re)allocate if\n/// &lt;code&gt;[len] == [capacity]&lt;/code&gt;. That is, the reported capacity is completely\n/// accurate, and can be relied on. It can even be used to manually free the memory\n/// allocated by a `Vec` if desired. Bulk insertion methods *may* reallocate, even\n/// when not necessary.\n///\n/// `Vec` does not guarantee any particular growth strategy when reallocating\n/// when full, nor when [`reserve`] is called. The current strategy is basic\n/// and it may prove desirable to use a non-constant growth factor. Whatever\n/// strategy is used will of course guarantee *O*(1) amortized [`push`].\n///\n/// `vec![x; n]`, `vec![a, b, c, d]`, and\n/// [`Vec::with_capacity(n)`][`Vec::with_capacity`], will all produce a `Vec`\n/// with at least the requested capacity. If &lt;code&gt;[len] == [capacity]&lt;/code&gt;,\n/// (as is the case for the [`vec!`] macro), then a `Vec&lt;T&gt;` can be converted to\n/// and from a [`Box&lt;[T]&gt;`][owned slice] without reallocating or moving the elements.\n///\n/// `Vec` will not specifically overwrite any data that is removed from it,\n/// but also won't specifically preserve it. Its uninitialized memory is\n/// scratch space that it may use however it wants. It will generally just do\n/// whatever is most efficient or otherwise easy to implement. Do not rely on\n/// removed data to be erased for security purposes. Even if you drop a `Vec`, its\n/// buffer may simply be reused by another allocation. Even if you zero a `Vec`'s memory\n/// first, that might not actually happen because the optimizer does not consider\n/// this a side-effect that must be preserved. There is one case which we will\n/// not break, however: using `unsafe` code to write to the excess capacity,\n/// and then increasing the length to match, is always valid.\n///\n/// Currently, `Vec` does not guarantee the order in which elements are dropped.\n/// The order has changed in the past and may change again.\n///\n/// [`get`]: slice::get\n/// [`get_mut`]: slice::get_mut\n/// [`String`]: crate::string::String\n/// [`&amp;str`]: type@str\n/// [`shrink_to_fit`]: Vec::shrink_to_fit\n/// [`shrink_to`]: Vec::shrink_to\n/// [capacity]: Vec::capacity\n/// [`capacity`]: Vec::capacity\n/// [mem::size_of::\\&lt;T&gt;]: core::mem::size_of\n/// [len]: Vec::len\n/// [`len`]: Vec::len\n/// [`push`]: Vec::push\n/// [`insert`]: Vec::insert\n/// [`reserve`]: Vec::reserve\n/// [`MaybeUninit`]: core::mem::MaybeUninit\n/// [owned slice]: Box\n</span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n#[cfg_attr(not(test), rustc_diagnostic_item = <span class=\"string\">\"Vec\"</span>)]\n#[rustc_insignificant_dtor]\n</span><span class=\"kw\">pub struct </span>Vec&lt;T, <span class=\"attr\">#[unstable(feature = <span class=\"string\">\"allocator_api\"</span>, issue = <span class=\"string\">\"32838\"</span>)] </span>A: Allocator = Global&gt; {\n    buf: RawVec&lt;T, A&gt;,\n    len: usize,\n}\n\n<span class=\"comment\">////////////////////////////////////////////////////////////////////////////////\n// Inherent methods\n////////////////////////////////////////////////////////////////////////////////\n\n</span><span class=\"kw\">impl</span>&lt;T&gt; Vec&lt;T&gt; {\n    <span class=\"doccomment\">/// Constructs a new, empty `Vec&lt;T&gt;`.\n    ///\n    /// The vector will not allocate until elements are pushed onto it.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// # #![allow(unused_mut)]\n    /// let mut vec: Vec&lt;i32&gt; = Vec::new();\n    /// ```\n    </span><span class=\"attr\">#[inline]\n    #[rustc_const_stable(feature = <span class=\"string\">\"const_vec_new\"</span>, since = <span class=\"string\">\"1.39.0\"</span>)]\n    #[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    #[must_use]\n    </span><span class=\"kw\">pub const fn </span>new() -&gt; <span class=\"self\">Self </span>{\n        Vec { buf: RawVec::NEW, len: <span class=\"number\">0 </span>}\n    }\n\n    <span class=\"doccomment\">/// Constructs a new, empty `Vec&lt;T&gt;` with at least the specified capacity.\n    ///\n    /// The vector will be able to hold at least `capacity` elements without\n    /// reallocating. This method is allowed to allocate for more elements than\n    /// `capacity`. If `capacity` is 0, the vector will not allocate.\n    ///\n    /// It is important to note that although the returned vector has the\n    /// minimum *capacity* specified, the vector will have a zero *length*. For\n    /// an explanation of the difference between length and capacity, see\n    /// *[Capacity and reallocation]*.\n    ///\n    /// If it is important to know the exact allocated capacity of a `Vec`,\n    /// always use the [`capacity`] method after construction.\n    ///\n    /// For `Vec&lt;T&gt;` where `T` is a zero-sized type, there will be no allocation\n    /// and the capacity will always be `usize::MAX`.\n    ///\n    /// [Capacity and reallocation]: #capacity-and-reallocation\n    /// [`capacity`]: Vec::capacity\n    ///\n    /// # Panics\n    ///\n    /// Panics if the new capacity exceeds `isize::MAX` _bytes_.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let mut vec = Vec::with_capacity(10);\n    ///\n    /// // The vector contains no items, even though it has capacity for more\n    /// assert_eq!(vec.len(), 0);\n    /// assert!(vec.capacity() &gt;= 10);\n    ///\n    /// // These are all done without reallocating...\n    /// for i in 0..10 {\n    ///     vec.push(i);\n    /// }\n    /// assert_eq!(vec.len(), 10);\n    /// assert!(vec.capacity() &gt;= 10);\n    ///\n    /// // ...but this may make the vector reallocate\n    /// vec.push(11);\n    /// assert_eq!(vec.len(), 11);\n    /// assert!(vec.capacity() &gt;= 11);\n    ///\n    /// // A vector of a zero-sized type will always over-allocate, since no\n    /// // allocation is necessary\n    /// let vec_units = Vec::&lt;()&gt;::with_capacity(10);\n    /// assert_eq!(vec_units.capacity(), usize::MAX);\n    /// ```\n    </span><span class=\"attr\">#[cfg(not(no_global_oom_handling))]\n    #[inline]\n    #[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    #[must_use]\n    </span><span class=\"kw\">pub fn </span>with_capacity(capacity: usize) -&gt; <span class=\"self\">Self </span>{\n        <span class=\"self\">Self</span>::with_capacity_in(capacity, Global)\n    }\n\n    <span class=\"doccomment\">/// Constructs a new, empty `Vec&lt;T&gt;` with at least the specified capacity.\n    ///\n    /// The vector will be able to hold at least `capacity` elements without\n    /// reallocating. This method is allowed to allocate for more elements than\n    /// `capacity`. If `capacity` is 0, the vector will not allocate.\n    ///\n    /// # Errors\n    ///\n    /// Returns an error if the capacity exceeds `isize::MAX` _bytes_,\n    /// or if the allocator reports allocation failure.\n    </span><span class=\"attr\">#[inline]\n    #[unstable(feature = <span class=\"string\">\"try_with_capacity\"</span>, issue = <span class=\"string\">\"91913\"</span>)]\n    </span><span class=\"kw\">pub fn </span>try_with_capacity(capacity: usize) -&gt; <span class=\"prelude-ty\">Result</span>&lt;<span class=\"self\">Self</span>, TryReserveError&gt; {\n        <span class=\"self\">Self</span>::try_with_capacity_in(capacity, Global)\n    }\n\n    <span class=\"doccomment\">/// Creates a `Vec&lt;T&gt;` directly from a pointer, a length, and a capacity.\n    ///\n    /// # Safety\n    ///\n    /// This is highly unsafe, due to the number of invariants that aren't\n    /// checked:\n    ///\n    /// * `ptr` must have been allocated using the global allocator, such as via\n    ///   the [`alloc::alloc`] function.\n    /// * `T` needs to have the same alignment as what `ptr` was allocated with.\n    ///   (`T` having a less strict alignment is not sufficient, the alignment really\n    ///   needs to be equal to satisfy the [`dealloc`] requirement that memory must be\n    ///   allocated and deallocated with the same layout.)\n    /// * The size of `T` times the `capacity` (ie. the allocated size in bytes) needs\n    ///   to be the same size as the pointer was allocated with. (Because similar to\n    ///   alignment, [`dealloc`] must be called with the same layout `size`.)\n    /// * `length` needs to be less than or equal to `capacity`.\n    /// * The first `length` values must be properly initialized values of type `T`.\n    /// * `capacity` needs to be the capacity that the pointer was allocated with.\n    /// * The allocated size in bytes must be no larger than `isize::MAX`.\n    ///   See the safety documentation of [`pointer::offset`].\n    ///\n    /// These requirements are always upheld by any `ptr` that has been allocated\n    /// via `Vec&lt;T&gt;`. Other allocation sources are allowed if the invariants are\n    /// upheld.\n    ///\n    /// Violating these may cause problems like corrupting the allocator's\n    /// internal data structures. For example it is normally **not** safe\n    /// to build a `Vec&lt;u8&gt;` from a pointer to a C `char` array with length\n    /// `size_t`, doing so is only safe if the array was initially allocated by\n    /// a `Vec` or `String`.\n    /// It's also not safe to build one from a `Vec&lt;u16&gt;` and its length, because\n    /// the allocator cares about the alignment, and these two types have different\n    /// alignments. The buffer was allocated with alignment 2 (for `u16`), but after\n    /// turning it into a `Vec&lt;u8&gt;` it'll be deallocated with alignment 1. To avoid\n    /// these issues, it is often preferable to do casting/transmuting using\n    /// [`slice::from_raw_parts`] instead.\n    ///\n    /// The ownership of `ptr` is effectively transferred to the\n    /// `Vec&lt;T&gt;` which may then deallocate, reallocate or change the\n    /// contents of memory pointed to by the pointer at will. Ensure\n    /// that nothing else uses the pointer after calling this\n    /// function.\n    ///\n    /// [`String`]: crate::string::String\n    /// [`alloc::alloc`]: crate::alloc::alloc\n    /// [`dealloc`]: crate::alloc::GlobalAlloc::dealloc\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::ptr;\n    /// use std::mem;\n    ///\n    /// let v = vec![1, 2, 3];\n    ///\n    </span><span class=\"comment\">// FIXME Update this when vec_into_raw_parts is stabilized\n    </span><span class=\"doccomment\">/// // Prevent running `v`'s destructor so we are in complete control\n    /// // of the allocation.\n    /// let mut v = mem::ManuallyDrop::new(v);\n    ///\n    /// // Pull out the various important pieces of information about `v`\n    /// let p = v.as_mut_ptr();\n    /// let len = v.len();\n    /// let cap = v.capacity();\n    ///\n    /// unsafe {\n    ///     // Overwrite memory with 4, 5, 6\n    ///     for i in 0..len {\n    ///         ptr::write(p.add(i), 4 + i);\n    ///     }\n    ///\n    ///     // Put everything back together into a Vec\n    ///     let rebuilt = Vec::from_raw_parts(p, len, cap);\n    ///     assert_eq!(rebuilt, [4, 5, 6]);\n    /// }\n    /// ```\n    ///\n    /// Using memory that was allocated elsewhere:\n    ///\n    /// ```rust\n    /// use std::alloc::{alloc, Layout};\n    ///\n    /// fn main() {\n    ///     let layout = Layout::array::&lt;u32&gt;(16).expect(\"overflow cannot happen\");\n    ///\n    ///     let vec = unsafe {\n    ///         let mem = alloc(layout).cast::&lt;u32&gt;();\n    ///         if mem.is_null() {\n    ///             return;\n    ///         }\n    ///\n    ///         mem.write(1_000_000);\n    ///\n    ///         Vec::from_raw_parts(mem, 1, 16)\n    ///     };\n    ///\n    ///     assert_eq!(vec, &amp;[1_000_000]);\n    ///     assert_eq!(vec.capacity(), 16);\n    /// }\n    /// ```\n    </span><span class=\"attr\">#[inline]\n    #[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">pub unsafe fn </span>from_raw_parts(ptr: <span class=\"kw-2\">*mut </span>T, length: usize, capacity: usize) -&gt; <span class=\"self\">Self </span>{\n        <span class=\"kw\">unsafe </span>{ <span class=\"self\">Self</span>::from_raw_parts_in(ptr, length, capacity, Global) }\n    }\n\n    <span class=\"doccomment\">/// A convenience method for hoisting the non-null precondition out of [`Vec::from_raw_parts`].\n    ///\n    /// # Safety\n    ///\n    /// See [`Vec::from_raw_parts`].\n    </span><span class=\"attr\">#[inline]\n    #[cfg(not(no_global_oom_handling))] </span><span class=\"comment\">// required by tests/run-make/alloc-no-oom-handling\n    </span><span class=\"kw\">pub</span>(<span class=\"kw\">crate</span>) <span class=\"kw\">unsafe fn </span>from_nonnull(ptr: NonNull&lt;T&gt;, length: usize, capacity: usize) -&gt; <span class=\"self\">Self </span>{\n        <span class=\"kw\">unsafe </span>{ <span class=\"self\">Self</span>::from_nonnull_in(ptr, length, capacity, Global) }\n    }\n}\n\n<span class=\"kw\">impl</span>&lt;T, A: Allocator&gt; Vec&lt;T, A&gt; {\n    <span class=\"doccomment\">/// Constructs a new, empty `Vec&lt;T, A&gt;`.\n    ///\n    /// The vector will not allocate until elements are pushed onto it.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// #![feature(allocator_api)]\n    ///\n    /// use std::alloc::System;\n    ///\n    /// # #[allow(unused_mut)]\n    /// let mut vec: Vec&lt;i32, _&gt; = Vec::new_in(System);\n    /// ```\n    </span><span class=\"attr\">#[inline]\n    #[unstable(feature = <span class=\"string\">\"allocator_api\"</span>, issue = <span class=\"string\">\"32838\"</span>)]\n    </span><span class=\"kw\">pub const fn </span>new_in(alloc: A) -&gt; <span class=\"self\">Self </span>{\n        Vec { buf: RawVec::new_in(alloc), len: <span class=\"number\">0 </span>}\n    }\n\n    <span class=\"doccomment\">/// Constructs a new, empty `Vec&lt;T, A&gt;` with at least the specified capacity\n    /// with the provided allocator.\n    ///\n    /// The vector will be able to hold at least `capacity` elements without\n    /// reallocating. This method is allowed to allocate for more elements than\n    /// `capacity`. If `capacity` is 0, the vector will not allocate.\n    ///\n    /// It is important to note that although the returned vector has the\n    /// minimum *capacity* specified, the vector will have a zero *length*. For\n    /// an explanation of the difference between length and capacity, see\n    /// *[Capacity and reallocation]*.\n    ///\n    /// If it is important to know the exact allocated capacity of a `Vec`,\n    /// always use the [`capacity`] method after construction.\n    ///\n    /// For `Vec&lt;T, A&gt;` where `T` is a zero-sized type, there will be no allocation\n    /// and the capacity will always be `usize::MAX`.\n    ///\n    /// [Capacity and reallocation]: #capacity-and-reallocation\n    /// [`capacity`]: Vec::capacity\n    ///\n    /// # Panics\n    ///\n    /// Panics if the new capacity exceeds `isize::MAX` _bytes_.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// #![feature(allocator_api)]\n    ///\n    /// use std::alloc::System;\n    ///\n    /// let mut vec = Vec::with_capacity_in(10, System);\n    ///\n    /// // The vector contains no items, even though it has capacity for more\n    /// assert_eq!(vec.len(), 0);\n    /// assert!(vec.capacity() &gt;= 10);\n    ///\n    /// // These are all done without reallocating...\n    /// for i in 0..10 {\n    ///     vec.push(i);\n    /// }\n    /// assert_eq!(vec.len(), 10);\n    /// assert!(vec.capacity() &gt;= 10);\n    ///\n    /// // ...but this may make the vector reallocate\n    /// vec.push(11);\n    /// assert_eq!(vec.len(), 11);\n    /// assert!(vec.capacity() &gt;= 11);\n    ///\n    /// // A vector of a zero-sized type will always over-allocate, since no\n    /// // allocation is necessary\n    /// let vec_units = Vec::&lt;(), System&gt;::with_capacity_in(10, System);\n    /// assert_eq!(vec_units.capacity(), usize::MAX);\n    /// ```\n    </span><span class=\"attr\">#[cfg(not(no_global_oom_handling))]\n    #[inline]\n    #[unstable(feature = <span class=\"string\">\"allocator_api\"</span>, issue = <span class=\"string\">\"32838\"</span>)]\n    </span><span class=\"kw\">pub fn </span>with_capacity_in(capacity: usize, alloc: A) -&gt; <span class=\"self\">Self </span>{\n        Vec { buf: RawVec::with_capacity_in(capacity, alloc), len: <span class=\"number\">0 </span>}\n    }\n\n    <span class=\"doccomment\">/// Constructs a new, empty `Vec&lt;T, A&gt;` with at least the specified capacity\n    /// with the provided allocator.\n    ///\n    /// The vector will be able to hold at least `capacity` elements without\n    /// reallocating. This method is allowed to allocate for more elements than\n    /// `capacity`. If `capacity` is 0, the vector will not allocate.\n    ///\n    /// # Errors\n    ///\n    /// Returns an error if the capacity exceeds `isize::MAX` _bytes_,\n    /// or if the allocator reports allocation failure.\n    </span><span class=\"attr\">#[inline]\n    #[unstable(feature = <span class=\"string\">\"allocator_api\"</span>, issue = <span class=\"string\">\"32838\"</span>)]\n    </span><span class=\"comment\">// #[unstable(feature = \"try_with_capacity\", issue = \"91913\")]\n    </span><span class=\"kw\">pub fn </span>try_with_capacity_in(capacity: usize, alloc: A) -&gt; <span class=\"prelude-ty\">Result</span>&lt;<span class=\"self\">Self</span>, TryReserveError&gt; {\n        <span class=\"prelude-val\">Ok</span>(Vec { buf: RawVec::try_with_capacity_in(capacity, alloc)<span class=\"question-mark\">?</span>, len: <span class=\"number\">0 </span>})\n    }\n\n    <span class=\"doccomment\">/// Creates a `Vec&lt;T, A&gt;` directly from a pointer, a length, a capacity,\n    /// and an allocator.\n    ///\n    /// # Safety\n    ///\n    /// This is highly unsafe, due to the number of invariants that aren't\n    /// checked:\n    ///\n    /// * `ptr` must be [*currently allocated*] via the given allocator `alloc`.\n    /// * `T` needs to have the same alignment as what `ptr` was allocated with.\n    ///   (`T` having a less strict alignment is not sufficient, the alignment really\n    ///   needs to be equal to satisfy the [`dealloc`] requirement that memory must be\n    ///   allocated and deallocated with the same layout.)\n    /// * The size of `T` times the `capacity` (ie. the allocated size in bytes) needs\n    ///   to be the same size as the pointer was allocated with. (Because similar to\n    ///   alignment, [`dealloc`] must be called with the same layout `size`.)\n    /// * `length` needs to be less than or equal to `capacity`.\n    /// * The first `length` values must be properly initialized values of type `T`.\n    /// * `capacity` needs to [*fit*] the layout size that the pointer was allocated with.\n    /// * The allocated size in bytes must be no larger than `isize::MAX`.\n    ///   See the safety documentation of [`pointer::offset`].\n    ///\n    /// These requirements are always upheld by any `ptr` that has been allocated\n    /// via `Vec&lt;T, A&gt;`. Other allocation sources are allowed if the invariants are\n    /// upheld.\n    ///\n    /// Violating these may cause problems like corrupting the allocator's\n    /// internal data structures. For example it is **not** safe\n    /// to build a `Vec&lt;u8&gt;` from a pointer to a C `char` array with length `size_t`.\n    /// It's also not safe to build one from a `Vec&lt;u16&gt;` and its length, because\n    /// the allocator cares about the alignment, and these two types have different\n    /// alignments. The buffer was allocated with alignment 2 (for `u16`), but after\n    /// turning it into a `Vec&lt;u8&gt;` it'll be deallocated with alignment 1.\n    ///\n    /// The ownership of `ptr` is effectively transferred to the\n    /// `Vec&lt;T&gt;` which may then deallocate, reallocate or change the\n    /// contents of memory pointed to by the pointer at will. Ensure\n    /// that nothing else uses the pointer after calling this\n    /// function.\n    ///\n    /// [`String`]: crate::string::String\n    /// [`dealloc`]: crate::alloc::GlobalAlloc::dealloc\n    /// [*currently allocated*]: crate::alloc::Allocator#currently-allocated-memory\n    /// [*fit*]: crate::alloc::Allocator#memory-fitting\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// #![feature(allocator_api)]\n    ///\n    /// use std::alloc::System;\n    ///\n    /// use std::ptr;\n    /// use std::mem;\n    ///\n    /// let mut v = Vec::with_capacity_in(3, System);\n    /// v.push(1);\n    /// v.push(2);\n    /// v.push(3);\n    ///\n    </span><span class=\"comment\">// FIXME Update this when vec_into_raw_parts is stabilized\n    </span><span class=\"doccomment\">/// // Prevent running `v`'s destructor so we are in complete control\n    /// // of the allocation.\n    /// let mut v = mem::ManuallyDrop::new(v);\n    ///\n    /// // Pull out the various important pieces of information about `v`\n    /// let p = v.as_mut_ptr();\n    /// let len = v.len();\n    /// let cap = v.capacity();\n    /// let alloc = v.allocator();\n    ///\n    /// unsafe {\n    ///     // Overwrite memory with 4, 5, 6\n    ///     for i in 0..len {\n    ///         ptr::write(p.add(i), 4 + i);\n    ///     }\n    ///\n    ///     // Put everything back together into a Vec\n    ///     let rebuilt = Vec::from_raw_parts_in(p, len, cap, alloc.clone());\n    ///     assert_eq!(rebuilt, [4, 5, 6]);\n    /// }\n    /// ```\n    ///\n    /// Using memory that was allocated elsewhere:\n    ///\n    /// ```rust\n    /// #![feature(allocator_api)]\n    ///\n    /// use std::alloc::{AllocError, Allocator, Global, Layout};\n    ///\n    /// fn main() {\n    ///     let layout = Layout::array::&lt;u32&gt;(16).expect(\"overflow cannot happen\");\n    ///\n    ///     let vec = unsafe {\n    ///         let mem = match Global.allocate(layout) {\n    ///             Ok(mem) =&gt; mem.cast::&lt;u32&gt;().as_ptr(),\n    ///             Err(AllocError) =&gt; return,\n    ///         };\n    ///\n    ///         mem.write(1_000_000);\n    ///\n    ///         Vec::from_raw_parts_in(mem, 1, 16, Global)\n    ///     };\n    ///\n    ///     assert_eq!(vec, &amp;[1_000_000]);\n    ///     assert_eq!(vec.capacity(), 16);\n    /// }\n    /// ```\n    </span><span class=\"attr\">#[inline]\n    #[unstable(feature = <span class=\"string\">\"allocator_api\"</span>, issue = <span class=\"string\">\"32838\"</span>)]\n    </span><span class=\"kw\">pub unsafe fn </span>from_raw_parts_in(ptr: <span class=\"kw-2\">*mut </span>T, length: usize, capacity: usize, alloc: A) -&gt; <span class=\"self\">Self </span>{\n        <span class=\"kw\">unsafe </span>{ Vec { buf: RawVec::from_raw_parts_in(ptr, capacity, alloc), len: length } }\n    }\n\n    <span class=\"doccomment\">/// A convenience method for hoisting the non-null precondition out of [`Vec::from_raw_parts_in`].\n    ///\n    /// # Safety\n    ///\n    /// See [`Vec::from_raw_parts_in`].\n    </span><span class=\"attr\">#[inline]\n    #[cfg(not(no_global_oom_handling))] </span><span class=\"comment\">// required by tests/run-make/alloc-no-oom-handling\n    </span><span class=\"kw\">pub</span>(<span class=\"kw\">crate</span>) <span class=\"kw\">unsafe fn </span>from_nonnull_in(\n        ptr: NonNull&lt;T&gt;,\n        length: usize,\n        capacity: usize,\n        alloc: A,\n    ) -&gt; <span class=\"self\">Self </span>{\n        <span class=\"kw\">unsafe </span>{ Vec { buf: RawVec::from_nonnull_in(ptr, capacity, alloc), len: length } }\n    }\n\n    <span class=\"doccomment\">/// Decomposes a `Vec&lt;T&gt;` into its raw components: `(pointer, length, capacity)`.\n    ///\n    /// Returns the raw pointer to the underlying data, the length of\n    /// the vector (in elements), and the allocated capacity of the\n    /// data (in elements). These are the same arguments in the same\n    /// order as the arguments to [`from_raw_parts`].\n    ///\n    /// After calling this function, the caller is responsible for the\n    /// memory previously managed by the `Vec`. The only way to do\n    /// this is to convert the raw pointer, length, and capacity back\n    /// into a `Vec` with the [`from_raw_parts`] function, allowing\n    /// the destructor to perform the cleanup.\n    ///\n    /// [`from_raw_parts`]: Vec::from_raw_parts\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// #![feature(vec_into_raw_parts)]\n    /// let v: Vec&lt;i32&gt; = vec![-1, 0, 1];\n    ///\n    /// let (ptr, len, cap) = v.into_raw_parts();\n    ///\n    /// let rebuilt = unsafe {\n    ///     // We can now make changes to the components, such as\n    ///     // transmuting the raw pointer to a compatible type.\n    ///     let ptr = ptr as *mut u32;\n    ///\n    ///     Vec::from_raw_parts(ptr, len, cap)\n    /// };\n    /// assert_eq!(rebuilt, [4294967295, 0, 1]);\n    /// ```\n    </span><span class=\"attr\">#[unstable(feature = <span class=\"string\">\"vec_into_raw_parts\"</span>, reason = <span class=\"string\">\"new API\"</span>, issue = <span class=\"string\">\"65816\"</span>)]\n    </span><span class=\"kw\">pub fn </span>into_raw_parts(<span class=\"self\">self</span>) -&gt; (<span class=\"kw-2\">*mut </span>T, usize, usize) {\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>me = ManuallyDrop::new(<span class=\"self\">self</span>);\n        (me.as_mut_ptr(), me.len(), me.capacity())\n    }\n\n    <span class=\"doccomment\">/// Decomposes a `Vec&lt;T&gt;` into its raw components: `(pointer, length, capacity, allocator)`.\n    ///\n    /// Returns the raw pointer to the underlying data, the length of the vector (in elements),\n    /// the allocated capacity of the data (in elements), and the allocator. These are the same\n    /// arguments in the same order as the arguments to [`from_raw_parts_in`].\n    ///\n    /// After calling this function, the caller is responsible for the\n    /// memory previously managed by the `Vec`. The only way to do\n    /// this is to convert the raw pointer, length, and capacity back\n    /// into a `Vec` with the [`from_raw_parts_in`] function, allowing\n    /// the destructor to perform the cleanup.\n    ///\n    /// [`from_raw_parts_in`]: Vec::from_raw_parts_in\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// #![feature(allocator_api, vec_into_raw_parts)]\n    ///\n    /// use std::alloc::System;\n    ///\n    /// let mut v: Vec&lt;i32, System&gt; = Vec::new_in(System);\n    /// v.push(-1);\n    /// v.push(0);\n    /// v.push(1);\n    ///\n    /// let (ptr, len, cap, alloc) = v.into_raw_parts_with_alloc();\n    ///\n    /// let rebuilt = unsafe {\n    ///     // We can now make changes to the components, such as\n    ///     // transmuting the raw pointer to a compatible type.\n    ///     let ptr = ptr as *mut u32;\n    ///\n    ///     Vec::from_raw_parts_in(ptr, len, cap, alloc)\n    /// };\n    /// assert_eq!(rebuilt, [4294967295, 0, 1]);\n    /// ```\n    </span><span class=\"attr\">#[unstable(feature = <span class=\"string\">\"allocator_api\"</span>, issue = <span class=\"string\">\"32838\"</span>)]\n    </span><span class=\"comment\">// #[unstable(feature = \"vec_into_raw_parts\", reason = \"new API\", issue = \"65816\")]\n    </span><span class=\"kw\">pub fn </span>into_raw_parts_with_alloc(<span class=\"self\">self</span>) -&gt; (<span class=\"kw-2\">*mut </span>T, usize, usize, A) {\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>me = ManuallyDrop::new(<span class=\"self\">self</span>);\n        <span class=\"kw\">let </span>len = me.len();\n        <span class=\"kw\">let </span>capacity = me.capacity();\n        <span class=\"kw\">let </span>ptr = me.as_mut_ptr();\n        <span class=\"kw\">let </span>alloc = <span class=\"kw\">unsafe </span>{ ptr::read(me.allocator()) };\n        (ptr, len, capacity, alloc)\n    }\n\n    <span class=\"doccomment\">/// Returns the total number of elements the vector can hold without\n    /// reallocating.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let mut vec: Vec&lt;i32&gt; = Vec::with_capacity(10);\n    /// vec.push(42);\n    /// assert!(vec.capacity() &gt;= 10);\n    /// ```\n    </span><span class=\"attr\">#[inline]\n    #[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>capacity(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; usize {\n        <span class=\"self\">self</span>.buf.capacity()\n    }\n\n    <span class=\"doccomment\">/// Reserves capacity for at least `additional` more elements to be inserted\n    /// in the given `Vec&lt;T&gt;`. The collection may reserve more space to\n    /// speculatively avoid frequent reallocations. After calling `reserve`,\n    /// capacity will be greater than or equal to `self.len() + additional`.\n    /// Does nothing if capacity is already sufficient.\n    ///\n    /// # Panics\n    ///\n    /// Panics if the new capacity exceeds `isize::MAX` _bytes_.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let mut vec = vec![1];\n    /// vec.reserve(10);\n    /// assert!(vec.capacity() &gt;= 11);\n    /// ```\n    </span><span class=\"attr\">#[cfg(not(no_global_oom_handling))]\n    #[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>reserve(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, additional: usize) {\n        <span class=\"self\">self</span>.buf.reserve(<span class=\"self\">self</span>.len, additional);\n    }\n\n    <span class=\"doccomment\">/// Reserves the minimum capacity for at least `additional` more elements to\n    /// be inserted in the given `Vec&lt;T&gt;`. Unlike [`reserve`], this will not\n    /// deliberately over-allocate to speculatively avoid frequent allocations.\n    /// After calling `reserve_exact`, capacity will be greater than or equal to\n    /// `self.len() + additional`. Does nothing if the capacity is already\n    /// sufficient.\n    ///\n    /// Note that the allocator may give the collection more space than it\n    /// requests. Therefore, capacity can not be relied upon to be precisely\n    /// minimal. Prefer [`reserve`] if future insertions are expected.\n    ///\n    /// [`reserve`]: Vec::reserve\n    ///\n    /// # Panics\n    ///\n    /// Panics if the new capacity exceeds `isize::MAX` _bytes_.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let mut vec = vec![1];\n    /// vec.reserve_exact(10);\n    /// assert!(vec.capacity() &gt;= 11);\n    /// ```\n    </span><span class=\"attr\">#[cfg(not(no_global_oom_handling))]\n    #[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>reserve_exact(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, additional: usize) {\n        <span class=\"self\">self</span>.buf.reserve_exact(<span class=\"self\">self</span>.len, additional);\n    }\n\n    <span class=\"doccomment\">/// Tries to reserve capacity for at least `additional` more elements to be inserted\n    /// in the given `Vec&lt;T&gt;`. The collection may reserve more space to speculatively avoid\n    /// frequent reallocations. After calling `try_reserve`, capacity will be\n    /// greater than or equal to `self.len() + additional` if it returns\n    /// `Ok(())`. Does nothing if capacity is already sufficient. This method\n    /// preserves the contents even if an error occurs.\n    ///\n    /// # Errors\n    ///\n    /// If the capacity overflows, or the allocator reports a failure, then an error\n    /// is returned.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::collections::TryReserveError;\n    ///\n    /// fn process_data(data: &amp;[u32]) -&gt; Result&lt;Vec&lt;u32&gt;, TryReserveError&gt; {\n    ///     let mut output = Vec::new();\n    ///\n    ///     // Pre-reserve the memory, exiting if we can't\n    ///     output.try_reserve(data.len())?;\n    ///\n    ///     // Now we know this can't OOM in the middle of our complex work\n    ///     output.extend(data.iter().map(|&amp;val| {\n    ///         val * 2 + 5 // very complicated\n    ///     }));\n    ///\n    ///     Ok(output)\n    /// }\n    /// # process_data(&amp;[1, 2, 3]).expect(\"why is the test harness OOMing on 12 bytes?\");\n    /// ```\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"try_reserve\"</span>, since = <span class=\"string\">\"1.57.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>try_reserve(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, additional: usize) -&gt; <span class=\"prelude-ty\">Result</span>&lt;(), TryReserveError&gt; {\n        <span class=\"self\">self</span>.buf.try_reserve(<span class=\"self\">self</span>.len, additional)\n    }\n\n    <span class=\"doccomment\">/// Tries to reserve the minimum capacity for at least `additional`\n    /// elements to be inserted in the given `Vec&lt;T&gt;`. Unlike [`try_reserve`],\n    /// this will not deliberately over-allocate to speculatively avoid frequent\n    /// allocations. After calling `try_reserve_exact`, capacity will be greater\n    /// than or equal to `self.len() + additional` if it returns `Ok(())`.\n    /// Does nothing if the capacity is already sufficient.\n    ///\n    /// Note that the allocator may give the collection more space than it\n    /// requests. Therefore, capacity can not be relied upon to be precisely\n    /// minimal. Prefer [`try_reserve`] if future insertions are expected.\n    ///\n    /// [`try_reserve`]: Vec::try_reserve\n    ///\n    /// # Errors\n    ///\n    /// If the capacity overflows, or the allocator reports a failure, then an error\n    /// is returned.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::collections::TryReserveError;\n    ///\n    /// fn process_data(data: &amp;[u32]) -&gt; Result&lt;Vec&lt;u32&gt;, TryReserveError&gt; {\n    ///     let mut output = Vec::new();\n    ///\n    ///     // Pre-reserve the memory, exiting if we can't\n    ///     output.try_reserve_exact(data.len())?;\n    ///\n    ///     // Now we know this can't OOM in the middle of our complex work\n    ///     output.extend(data.iter().map(|&amp;val| {\n    ///         val * 2 + 5 // very complicated\n    ///     }));\n    ///\n    ///     Ok(output)\n    /// }\n    /// # process_data(&amp;[1, 2, 3]).expect(\"why is the test harness OOMing on 12 bytes?\");\n    /// ```\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"try_reserve\"</span>, since = <span class=\"string\">\"1.57.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>try_reserve_exact(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, additional: usize) -&gt; <span class=\"prelude-ty\">Result</span>&lt;(), TryReserveError&gt; {\n        <span class=\"self\">self</span>.buf.try_reserve_exact(<span class=\"self\">self</span>.len, additional)\n    }\n\n    <span class=\"doccomment\">/// Shrinks the capacity of the vector as much as possible.\n    ///\n    /// The behavior of this method depends on the allocator, which may either shrink the vector\n    /// in-place or reallocate. The resulting vector might still have some excess capacity, just as\n    /// is the case for [`with_capacity`]. See [`Allocator::shrink`] for more details.\n    ///\n    /// [`with_capacity`]: Vec::with_capacity\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let mut vec = Vec::with_capacity(10);\n    /// vec.extend([1, 2, 3]);\n    /// assert!(vec.capacity() &gt;= 10);\n    /// vec.shrink_to_fit();\n    /// assert!(vec.capacity() &gt;= 3);\n    /// ```\n    </span><span class=\"attr\">#[cfg(not(no_global_oom_handling))]\n    #[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>shrink_to_fit(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) {\n        <span class=\"comment\">// The capacity is never less than the length, and there's nothing to do when\n        // they are equal, so we can avoid the panic case in `RawVec::shrink_to_fit`\n        // by only calling it with a greater capacity.\n        </span><span class=\"kw\">if </span><span class=\"self\">self</span>.capacity() &gt; <span class=\"self\">self</span>.len {\n            <span class=\"self\">self</span>.buf.shrink_to_fit(<span class=\"self\">self</span>.len);\n        }\n    }\n\n    <span class=\"doccomment\">/// Shrinks the capacity of the vector with a lower bound.\n    ///\n    /// The capacity will remain at least as large as both the length\n    /// and the supplied value.\n    ///\n    /// If the current capacity is less than the lower limit, this is a no-op.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let mut vec = Vec::with_capacity(10);\n    /// vec.extend([1, 2, 3]);\n    /// assert!(vec.capacity() &gt;= 10);\n    /// vec.shrink_to(4);\n    /// assert!(vec.capacity() &gt;= 4);\n    /// vec.shrink_to(0);\n    /// assert!(vec.capacity() &gt;= 3);\n    /// ```\n    </span><span class=\"attr\">#[cfg(not(no_global_oom_handling))]\n    #[stable(feature = <span class=\"string\">\"shrink_to\"</span>, since = <span class=\"string\">\"1.56.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>shrink_to(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, min_capacity: usize) {\n        <span class=\"kw\">if </span><span class=\"self\">self</span>.capacity() &gt; min_capacity {\n            <span class=\"self\">self</span>.buf.shrink_to_fit(cmp::max(<span class=\"self\">self</span>.len, min_capacity));\n        }\n    }\n\n    <span class=\"doccomment\">/// Converts the vector into [`Box&lt;[T]&gt;`][owned slice].\n    ///\n    /// Before doing the conversion, this method discards excess capacity like [`shrink_to_fit`].\n    ///\n    /// [owned slice]: Box\n    /// [`shrink_to_fit`]: Vec::shrink_to_fit\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let v = vec![1, 2, 3];\n    ///\n    /// let slice = v.into_boxed_slice();\n    /// ```\n    ///\n    /// Any excess capacity is removed:\n    ///\n    /// ```\n    /// let mut vec = Vec::with_capacity(10);\n    /// vec.extend([1, 2, 3]);\n    ///\n    /// assert!(vec.capacity() &gt;= 10);\n    /// let slice = vec.into_boxed_slice();\n    /// assert_eq!(slice.into_vec().capacity(), 3);\n    /// ```\n    </span><span class=\"attr\">#[cfg(not(no_global_oom_handling))]\n    #[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>into_boxed_slice(<span class=\"kw-2\">mut </span><span class=\"self\">self</span>) -&gt; Box&lt;[T], A&gt; {\n        <span class=\"kw\">unsafe </span>{\n            <span class=\"self\">self</span>.shrink_to_fit();\n            <span class=\"kw\">let </span>me = ManuallyDrop::new(<span class=\"self\">self</span>);\n            <span class=\"kw\">let </span>buf = ptr::read(<span class=\"kw-2\">&amp;</span>me.buf);\n            <span class=\"kw\">let </span>len = me.len();\n            buf.into_box(len).assume_init()\n        }\n    }\n\n    <span class=\"doccomment\">/// Shortens the vector, keeping the first `len` elements and dropping\n    /// the rest.\n    ///\n    /// If `len` is greater or equal to the vector's current length, this has\n    /// no effect.\n    ///\n    /// The [`drain`] method can emulate `truncate`, but causes the excess\n    /// elements to be returned instead of dropped.\n    ///\n    /// Note that this method has no effect on the allocated capacity\n    /// of the vector.\n    ///\n    /// # Examples\n    ///\n    /// Truncating a five element vector to two elements:\n    ///\n    /// ```\n    /// let mut vec = vec![1, 2, 3, 4, 5];\n    /// vec.truncate(2);\n    /// assert_eq!(vec, [1, 2]);\n    /// ```\n    ///\n    /// No truncation occurs when `len` is greater than the vector's current\n    /// length:\n    ///\n    /// ```\n    /// let mut vec = vec![1, 2, 3];\n    /// vec.truncate(8);\n    /// assert_eq!(vec, [1, 2, 3]);\n    /// ```\n    ///\n    /// Truncating when `len == 0` is equivalent to calling the [`clear`]\n    /// method.\n    ///\n    /// ```\n    /// let mut vec = vec![1, 2, 3];\n    /// vec.truncate(0);\n    /// assert_eq!(vec, []);\n    /// ```\n    ///\n    /// [`clear`]: Vec::clear\n    /// [`drain`]: Vec::drain\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>truncate(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, len: usize) {\n        <span class=\"comment\">// This is safe because:\n        //\n        // * the slice passed to `drop_in_place` is valid; the `len &gt; self.len`\n        //   case avoids creating an invalid slice, and\n        // * the `len` of the vector is shrunk before calling `drop_in_place`,\n        //   such that no value will be dropped twice in case `drop_in_place`\n        //   were to panic once (if it panics twice, the program aborts).\n        </span><span class=\"kw\">unsafe </span>{\n            <span class=\"comment\">// Note: It's intentional that this is `&gt;` and not `&gt;=`.\n            //       Changing it to `&gt;=` has negative performance\n            //       implications in some cases. See #78884 for more.\n            </span><span class=\"kw\">if </span>len &gt; <span class=\"self\">self</span>.len {\n                <span class=\"kw\">return</span>;\n            }\n            <span class=\"kw\">let </span>remaining_len = <span class=\"self\">self</span>.len - len;\n            <span class=\"kw\">let </span>s = ptr::slice_from_raw_parts_mut(<span class=\"self\">self</span>.as_mut_ptr().add(len), remaining_len);\n            <span class=\"self\">self</span>.len = len;\n            ptr::drop_in_place(s);\n        }\n    }\n\n    <span class=\"doccomment\">/// Extracts a slice containing the entire vector.\n    ///\n    /// Equivalent to `&amp;s[..]`.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::io::{self, Write};\n    /// let buffer = vec![1, 2, 3, 5, 8];\n    /// io::sink().write(buffer.as_slice()).unwrap();\n    /// ```\n    </span><span class=\"attr\">#[inline]\n    #[stable(feature = <span class=\"string\">\"vec_as_slice\"</span>, since = <span class=\"string\">\"1.7.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>as_slice(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; <span class=\"kw-2\">&amp;</span>[T] {\n        <span class=\"self\">self\n    </span>}\n\n    <span class=\"doccomment\">/// Extracts a mutable slice of the entire vector.\n    ///\n    /// Equivalent to `&amp;mut s[..]`.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::io::{self, Read};\n    /// let mut buffer = vec![0; 3];\n    /// io::repeat(0b101).read_exact(buffer.as_mut_slice()).unwrap();\n    /// ```\n    </span><span class=\"attr\">#[inline]\n    #[stable(feature = <span class=\"string\">\"vec_as_slice\"</span>, since = <span class=\"string\">\"1.7.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>as_mut_slice(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) -&gt; <span class=\"kw-2\">&amp;mut </span>[T] {\n        <span class=\"self\">self\n    </span>}\n\n    <span class=\"doccomment\">/// Returns a raw pointer to the vector's buffer, or a dangling raw pointer\n    /// valid for zero sized reads if the vector didn't allocate.\n    ///\n    /// The caller must ensure that the vector outlives the pointer this\n    /// function returns, or else it will end up pointing to garbage.\n    /// Modifying the vector may cause its buffer to be reallocated,\n    /// which would also make any pointers to it invalid.\n    ///\n    /// The caller must also ensure that the memory the pointer (non-transitively) points to\n    /// is never written to (except inside an `UnsafeCell`) using this pointer or any pointer\n    /// derived from it. If you need to mutate the contents of the slice, use [`as_mut_ptr`].\n    ///\n    /// This method guarantees that for the purpose of the aliasing model, this method\n    /// does not materialize a reference to the underlying slice, and thus the returned pointer\n    /// will remain valid when mixed with other calls to [`as_ptr`] and [`as_mut_ptr`].\n    /// Note that calling other methods that materialize mutable references to the slice,\n    /// or mutable references to specific elements you are planning on accessing through this pointer,\n    /// as well as writing to those elements, may still invalidate this pointer.\n    /// See the second example below for how this guarantee can be used.\n    ///\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let x = vec![1, 2, 4];\n    /// let x_ptr = x.as_ptr();\n    ///\n    /// unsafe {\n    ///     for i in 0..x.len() {\n    ///         assert_eq!(*x_ptr.add(i), 1 &lt;&lt; i);\n    ///     }\n    /// }\n    /// ```\n    ///\n    /// Due to the aliasing guarantee, the following code is legal:\n    ///\n    /// ```rust\n    /// unsafe {\n    ///     let mut v = vec![0, 1, 2];\n    ///     let ptr1 = v.as_ptr();\n    ///     let _ = ptr1.read();\n    ///     let ptr2 = v.as_mut_ptr().offset(2);\n    ///     ptr2.write(2);\n    ///     // Notably, the write to `ptr2` did *not* invalidate `ptr1`\n    ///     // because it mutated a different element:\n    ///     let _ = ptr1.read();\n    /// }\n    /// ```\n    ///\n    /// [`as_mut_ptr`]: Vec::as_mut_ptr\n    /// [`as_ptr`]: Vec::as_ptr\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"vec_as_ptr\"</span>, since = <span class=\"string\">\"1.37.0\"</span>)]\n    #[rustc_never_returns_null_ptr]\n    #[inline]\n    </span><span class=\"kw\">pub fn </span>as_ptr(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; <span class=\"kw-2\">*const </span>T {\n        <span class=\"comment\">// We shadow the slice method of the same name to avoid going through\n        // `deref`, which creates an intermediate reference.\n        </span><span class=\"self\">self</span>.buf.ptr()\n    }\n\n    <span class=\"doccomment\">/// Returns an unsafe mutable pointer to the vector's buffer, or a dangling\n    /// raw pointer valid for zero sized reads if the vector didn't allocate.\n    ///\n    /// The caller must ensure that the vector outlives the pointer this\n    /// function returns, or else it will end up pointing to garbage.\n    /// Modifying the vector may cause its buffer to be reallocated,\n    /// which would also make any pointers to it invalid.\n    ///\n    /// This method guarantees that for the purpose of the aliasing model, this method\n    /// does not materialize a reference to the underlying slice, and thus the returned pointer\n    /// will remain valid when mixed with other calls to [`as_ptr`] and [`as_mut_ptr`].\n    /// Note that calling other methods that materialize references to the slice,\n    /// or references to specific elements you are planning on accessing through this pointer,\n    /// may still invalidate this pointer.\n    /// See the second example below for how this guarantee can be used.\n    ///\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// // Allocate vector big enough for 4 elements.\n    /// let size = 4;\n    /// let mut x: Vec&lt;i32&gt; = Vec::with_capacity(size);\n    /// let x_ptr = x.as_mut_ptr();\n    ///\n    /// // Initialize elements via raw pointer writes, then set length.\n    /// unsafe {\n    ///     for i in 0..size {\n    ///         *x_ptr.add(i) = i as i32;\n    ///     }\n    ///     x.set_len(size);\n    /// }\n    /// assert_eq!(&amp;*x, &amp;[0, 1, 2, 3]);\n    /// ```\n    ///\n    /// Due to the aliasing guarantee, the following code is legal:\n    ///\n    /// ```rust\n    /// unsafe {\n    ///     let mut v = vec![0];\n    ///     let ptr1 = v.as_mut_ptr();\n    ///     ptr1.write(1);\n    ///     let ptr2 = v.as_mut_ptr();\n    ///     ptr2.write(2);\n    ///     // Notably, the write to `ptr2` did *not* invalidate `ptr1`:\n    ///     ptr1.write(3);\n    /// }\n    /// ```\n    ///\n    /// [`as_mut_ptr`]: Vec::as_mut_ptr\n    /// [`as_ptr`]: Vec::as_ptr\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"vec_as_ptr\"</span>, since = <span class=\"string\">\"1.37.0\"</span>)]\n    #[rustc_never_returns_null_ptr]\n    #[inline]\n    </span><span class=\"kw\">pub fn </span>as_mut_ptr(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) -&gt; <span class=\"kw-2\">*mut </span>T {\n        <span class=\"comment\">// We shadow the slice method of the same name to avoid going through\n        // `deref_mut`, which creates an intermediate reference.\n        </span><span class=\"self\">self</span>.buf.ptr()\n    }\n\n    <span class=\"doccomment\">/// Returns a reference to the underlying allocator.\n    </span><span class=\"attr\">#[unstable(feature = <span class=\"string\">\"allocator_api\"</span>, issue = <span class=\"string\">\"32838\"</span>)]\n    #[inline]\n    </span><span class=\"kw\">pub fn </span>allocator(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; <span class=\"kw-2\">&amp;</span>A {\n        <span class=\"self\">self</span>.buf.allocator()\n    }\n\n    <span class=\"doccomment\">/// Forces the length of the vector to `new_len`.\n    ///\n    /// This is a low-level operation that maintains none of the normal\n    /// invariants of the type. Normally changing the length of a vector\n    /// is done using one of the safe operations instead, such as\n    /// [`truncate`], [`resize`], [`extend`], or [`clear`].\n    ///\n    /// [`truncate`]: Vec::truncate\n    /// [`resize`]: Vec::resize\n    /// [`extend`]: Extend::extend\n    /// [`clear`]: Vec::clear\n    ///\n    /// # Safety\n    ///\n    /// - `new_len` must be less than or equal to [`capacity()`].\n    /// - The elements at `old_len..new_len` must be initialized.\n    ///\n    /// [`capacity()`]: Vec::capacity\n    ///\n    /// # Examples\n    ///\n    /// This method can be useful for situations in which the vector\n    /// is serving as a buffer for other code, particularly over FFI:\n    ///\n    /// ```no_run\n    /// # #![allow(dead_code)]\n    /// # // This is just a minimal skeleton for the doc example;\n    /// # // don't use this as a starting point for a real library.\n    /// # pub struct StreamWrapper { strm: *mut std::ffi::c_void }\n    /// # const Z_OK: i32 = 0;\n    /// # extern \"C\" {\n    /// #     fn deflateGetDictionary(\n    /// #         strm: *mut std::ffi::c_void,\n    /// #         dictionary: *mut u8,\n    /// #         dictLength: *mut usize,\n    /// #     ) -&gt; i32;\n    /// # }\n    /// # impl StreamWrapper {\n    /// pub fn get_dictionary(&amp;self) -&gt; Option&lt;Vec&lt;u8&gt;&gt; {\n    ///     // Per the FFI method's docs, \"32768 bytes is always enough\".\n    ///     let mut dict = Vec::with_capacity(32_768);\n    ///     let mut dict_length = 0;\n    ///     // SAFETY: When `deflateGetDictionary` returns `Z_OK`, it holds that:\n    ///     // 1. `dict_length` elements were initialized.\n    ///     // 2. `dict_length` &lt;= the capacity (32_768)\n    ///     // which makes `set_len` safe to call.\n    ///     unsafe {\n    ///         // Make the FFI call...\n    ///         let r = deflateGetDictionary(self.strm, dict.as_mut_ptr(), &amp;mut dict_length);\n    ///         if r == Z_OK {\n    ///             // ...and update the length to what was initialized.\n    ///             dict.set_len(dict_length);\n    ///             Some(dict)\n    ///         } else {\n    ///             None\n    ///         }\n    ///     }\n    /// }\n    /// # }\n    /// ```\n    ///\n    /// While the following example is sound, there is a memory leak since\n    /// the inner vectors were not freed prior to the `set_len` call:\n    ///\n    /// ```\n    /// let mut vec = vec![vec![1, 0, 0],\n    ///                    vec![0, 1, 0],\n    ///                    vec![0, 0, 1]];\n    /// // SAFETY:\n    /// // 1. `old_len..0` is empty so no elements need to be initialized.\n    /// // 2. `0 &lt;= capacity` always holds whatever `capacity` is.\n    /// unsafe {\n    ///     vec.set_len(0);\n    /// }\n    /// ```\n    ///\n    /// Normally, here, one would use [`clear`] instead to correctly drop\n    /// the contents and thus not leak memory.\n    </span><span class=\"attr\">#[inline]\n    #[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">pub unsafe fn </span>set_len(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, new_len: usize) {\n        <span class=\"macro\">debug_assert!</span>(new_len &lt;= <span class=\"self\">self</span>.capacity());\n\n        <span class=\"self\">self</span>.len = new_len;\n    }\n\n    <span class=\"doccomment\">/// Removes an element from the vector and returns it.\n    ///\n    /// The removed element is replaced by the last element of the vector.\n    ///\n    /// This does not preserve ordering of the remaining elements, but is *O*(1).\n    /// If you need to preserve the element order, use [`remove`] instead.\n    ///\n    /// [`remove`]: Vec::remove\n    ///\n    /// # Panics\n    ///\n    /// Panics if `index` is out of bounds.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let mut v = vec![\"foo\", \"bar\", \"baz\", \"qux\"];\n    ///\n    /// assert_eq!(v.swap_remove(1), \"bar\");\n    /// assert_eq!(v, [\"foo\", \"qux\", \"baz\"]);\n    ///\n    /// assert_eq!(v.swap_remove(0), \"foo\");\n    /// assert_eq!(v, [\"baz\", \"qux\"]);\n    /// ```\n    </span><span class=\"attr\">#[inline]\n    #[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>swap_remove(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, index: usize) -&gt; T {\n        <span class=\"attr\">#[cold]\n        #[cfg_attr(not(feature = <span class=\"string\">\"panic_immediate_abort\"</span>), inline(never))]\n        #[track_caller]\n        </span><span class=\"kw\">fn </span>assert_failed(index: usize, len: usize) -&gt; ! {\n            <span class=\"macro\">panic!</span>(<span class=\"string\">\"swap_remove index (is {index}) should be &lt; len (is {len})\"</span>);\n        }\n\n        <span class=\"kw\">let </span>len = <span class=\"self\">self</span>.len();\n        <span class=\"kw\">if </span>index &gt;= len {\n            assert_failed(index, len);\n        }\n        <span class=\"kw\">unsafe </span>{\n            <span class=\"comment\">// We replace self[index] with the last element. Note that if the\n            // bounds check above succeeds there must be a last element (which\n            // can be self[index] itself).\n            </span><span class=\"kw\">let </span>value = ptr::read(<span class=\"self\">self</span>.as_ptr().add(index));\n            <span class=\"kw\">let </span>base_ptr = <span class=\"self\">self</span>.as_mut_ptr();\n            ptr::copy(base_ptr.add(len - <span class=\"number\">1</span>), base_ptr.add(index), <span class=\"number\">1</span>);\n            <span class=\"self\">self</span>.set_len(len - <span class=\"number\">1</span>);\n            value\n        }\n    }\n\n    <span class=\"doccomment\">/// Inserts an element at position `index` within the vector, shifting all\n    /// elements after it to the right.\n    ///\n    /// # Panics\n    ///\n    /// Panics if `index &gt; len`.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let mut vec = vec![1, 2, 3];\n    /// vec.insert(1, 4);\n    /// assert_eq!(vec, [1, 4, 2, 3]);\n    /// vec.insert(4, 5);\n    /// assert_eq!(vec, [1, 4, 2, 3, 5]);\n    /// ```\n    ///\n    /// # Time complexity\n    ///\n    /// Takes *O*([`Vec::len`]) time. All items after the insertion index must be\n    /// shifted to the right. In the worst case, all elements are shifted when\n    /// the insertion index is 0.\n    </span><span class=\"attr\">#[cfg(not(no_global_oom_handling))]\n    #[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>insert(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, index: usize, element: T) {\n        <span class=\"attr\">#[cold]\n        #[cfg_attr(not(feature = <span class=\"string\">\"panic_immediate_abort\"</span>), inline(never))]\n        #[track_caller]\n        </span><span class=\"kw\">fn </span>assert_failed(index: usize, len: usize) -&gt; ! {\n            <span class=\"macro\">panic!</span>(<span class=\"string\">\"insertion index (is {index}) should be &lt;= len (is {len})\"</span>);\n        }\n\n        <span class=\"kw\">let </span>len = <span class=\"self\">self</span>.len();\n        <span class=\"kw\">if </span>index &gt; len {\n            assert_failed(index, len);\n        }\n\n        <span class=\"comment\">// space for the new element\n        </span><span class=\"kw\">if </span>len == <span class=\"self\">self</span>.buf.capacity() {\n            <span class=\"self\">self</span>.buf.grow_one();\n        }\n\n        <span class=\"kw\">unsafe </span>{\n            <span class=\"comment\">// infallible\n            // The spot to put the new value\n            </span>{\n                <span class=\"kw\">let </span>p = <span class=\"self\">self</span>.as_mut_ptr().add(index);\n                <span class=\"kw\">if </span>index &lt; len {\n                    <span class=\"comment\">// Shift everything over to make space. (Duplicating the\n                    // `index`th element into two consecutive places.)\n                    </span>ptr::copy(p, p.add(<span class=\"number\">1</span>), len - index);\n                }\n                <span class=\"comment\">// Write it in, overwriting the first copy of the `index`th\n                // element.\n                </span>ptr::write(p, element);\n            }\n            <span class=\"self\">self</span>.set_len(len + <span class=\"number\">1</span>);\n        }\n    }\n\n    <span class=\"doccomment\">/// Removes and returns the element at position `index` within the vector,\n    /// shifting all elements after it to the left.\n    ///\n    /// Note: Because this shifts over the remaining elements, it has a\n    /// worst-case performance of *O*(*n*). If you don't need the order of elements\n    /// to be preserved, use [`swap_remove`] instead. If you'd like to remove\n    /// elements from the beginning of the `Vec`, consider using\n    /// [`VecDeque::pop_front`] instead.\n    ///\n    /// [`swap_remove`]: Vec::swap_remove\n    /// [`VecDeque::pop_front`]: crate::collections::VecDeque::pop_front\n    ///\n    /// # Panics\n    ///\n    /// Panics if `index` is out of bounds.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let mut v = vec![1, 2, 3];\n    /// assert_eq!(v.remove(1), 2);\n    /// assert_eq!(v, [1, 3]);\n    /// ```\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    #[track_caller]\n    #[rustc_confusables(<span class=\"string\">\"delete\"</span>, <span class=\"string\">\"take\"</span>)]\n    </span><span class=\"kw\">pub fn </span>remove(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, index: usize) -&gt; T {\n        <span class=\"attr\">#[cold]\n        #[cfg_attr(not(feature = <span class=\"string\">\"panic_immediate_abort\"</span>), inline(never))]\n        #[track_caller]\n        </span><span class=\"kw\">fn </span>assert_failed(index: usize, len: usize) -&gt; ! {\n            <span class=\"macro\">panic!</span>(<span class=\"string\">\"removal index (is {index}) should be &lt; len (is {len})\"</span>);\n        }\n\n        <span class=\"kw\">let </span>len = <span class=\"self\">self</span>.len();\n        <span class=\"kw\">if </span>index &gt;= len {\n            assert_failed(index, len);\n        }\n        <span class=\"kw\">unsafe </span>{\n            <span class=\"comment\">// infallible\n            </span><span class=\"kw\">let </span>ret;\n            {\n                <span class=\"comment\">// the place we are taking from.\n                </span><span class=\"kw\">let </span>ptr = <span class=\"self\">self</span>.as_mut_ptr().add(index);\n                <span class=\"comment\">// copy it out, unsafely having a copy of the value on\n                // the stack and in the vector at the same time.\n                </span>ret = ptr::read(ptr);\n\n                <span class=\"comment\">// Shift everything down to fill in that spot.\n                </span>ptr::copy(ptr.add(<span class=\"number\">1</span>), ptr, len - index - <span class=\"number\">1</span>);\n            }\n            <span class=\"self\">self</span>.set_len(len - <span class=\"number\">1</span>);\n            ret\n        }\n    }\n\n    <span class=\"doccomment\">/// Retains only the elements specified by the predicate.\n    ///\n    /// In other words, remove all elements `e` for which `f(&amp;e)` returns `false`.\n    /// This method operates in place, visiting each element exactly once in the\n    /// original order, and preserves the order of the retained elements.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let mut vec = vec![1, 2, 3, 4];\n    /// vec.retain(|&amp;x| x % 2 == 0);\n    /// assert_eq!(vec, [2, 4]);\n    /// ```\n    ///\n    /// Because the elements are visited exactly once in the original order,\n    /// external state may be used to decide which elements to keep.\n    ///\n    /// ```\n    /// let mut vec = vec![1, 2, 3, 4, 5];\n    /// let keep = [false, true, true, false, true];\n    /// let mut iter = keep.iter();\n    /// vec.retain(|_| *iter.next().unwrap());\n    /// assert_eq!(vec, [2, 3, 5]);\n    /// ```\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>retain&lt;F&gt;(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, <span class=\"kw-2\">mut </span>f: F)\n    <span class=\"kw\">where\n        </span>F: FnMut(<span class=\"kw-2\">&amp;</span>T) -&gt; bool,\n    {\n        <span class=\"self\">self</span>.retain_mut(|elem| f(elem));\n    }\n\n    <span class=\"doccomment\">/// Retains only the elements specified by the predicate, passing a mutable reference to it.\n    ///\n    /// In other words, remove all elements `e` such that `f(&amp;mut e)` returns `false`.\n    /// This method operates in place, visiting each element exactly once in the\n    /// original order, and preserves the order of the retained elements.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let mut vec = vec![1, 2, 3, 4];\n    /// vec.retain_mut(|x| if *x &lt;= 3 {\n    ///     *x += 1;\n    ///     true\n    /// } else {\n    ///     false\n    /// });\n    /// assert_eq!(vec, [2, 3, 4]);\n    /// ```\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"vec_retain_mut\"</span>, since = <span class=\"string\">\"1.61.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>retain_mut&lt;F&gt;(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, <span class=\"kw-2\">mut </span>f: F)\n    <span class=\"kw\">where\n        </span>F: FnMut(<span class=\"kw-2\">&amp;mut </span>T) -&gt; bool,\n    {\n        <span class=\"kw\">let </span>original_len = <span class=\"self\">self</span>.len();\n        <span class=\"comment\">// Avoid double drop if the drop guard is not executed,\n        // since we may make some holes during the process.\n        </span><span class=\"kw\">unsafe </span>{ <span class=\"self\">self</span>.set_len(<span class=\"number\">0</span>) };\n\n        <span class=\"comment\">// Vec: [Kept, Kept, Hole, Hole, Hole, Hole, Unchecked, Unchecked]\n        //      |&lt;-              processed len   -&gt;| ^- next to check\n        //                  |&lt;-  deleted cnt     -&gt;|\n        //      |&lt;-              original_len                          -&gt;|\n        // Kept: Elements which predicate returns true on.\n        // Hole: Moved or dropped element slot.\n        // Unchecked: Unchecked valid elements.\n        //\n        // This drop guard will be invoked when predicate or `drop` of element panicked.\n        // It shifts unchecked elements to cover holes and `set_len` to the correct length.\n        // In cases when predicate and `drop` never panick, it will be optimized out.\n        </span><span class=\"kw\">struct </span>BackshiftOnDrop&lt;<span class=\"lifetime\">'a</span>, T, A: Allocator&gt; {\n            v: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span><span class=\"kw-2\">mut </span>Vec&lt;T, A&gt;,\n            processed_len: usize,\n            deleted_cnt: usize,\n            original_len: usize,\n        }\n\n        <span class=\"kw\">impl</span>&lt;T, A: Allocator&gt; Drop <span class=\"kw\">for </span>BackshiftOnDrop&lt;<span class=\"lifetime\">'_</span>, T, A&gt; {\n            <span class=\"kw\">fn </span>drop(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) {\n                <span class=\"kw\">if </span><span class=\"self\">self</span>.deleted_cnt &gt; <span class=\"number\">0 </span>{\n                    <span class=\"comment\">// SAFETY: Trailing unchecked items must be valid since we never touch them.\n                    </span><span class=\"kw\">unsafe </span>{\n                        ptr::copy(\n                            <span class=\"self\">self</span>.v.as_ptr().add(<span class=\"self\">self</span>.processed_len),\n                            <span class=\"self\">self</span>.v.as_mut_ptr().add(<span class=\"self\">self</span>.processed_len - <span class=\"self\">self</span>.deleted_cnt),\n                            <span class=\"self\">self</span>.original_len - <span class=\"self\">self</span>.processed_len,\n                        );\n                    }\n                }\n                <span class=\"comment\">// SAFETY: After filling holes, all items are in contiguous memory.\n                </span><span class=\"kw\">unsafe </span>{\n                    <span class=\"self\">self</span>.v.set_len(<span class=\"self\">self</span>.original_len - <span class=\"self\">self</span>.deleted_cnt);\n                }\n            }\n        }\n\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>g = BackshiftOnDrop { v: <span class=\"self\">self</span>, processed_len: <span class=\"number\">0</span>, deleted_cnt: <span class=\"number\">0</span>, original_len };\n\n        <span class=\"kw\">fn </span>process_loop&lt;F, T, A: Allocator, <span class=\"kw\">const </span>DELETED: bool&gt;(\n            original_len: usize,\n            f: <span class=\"kw-2\">&amp;mut </span>F,\n            g: <span class=\"kw-2\">&amp;mut </span>BackshiftOnDrop&lt;<span class=\"lifetime\">'_</span>, T, A&gt;,\n        ) <span class=\"kw\">where\n            </span>F: FnMut(<span class=\"kw-2\">&amp;mut </span>T) -&gt; bool,\n        {\n            <span class=\"kw\">while </span>g.processed_len != original_len {\n                <span class=\"comment\">// SAFETY: Unchecked element must be valid.\n                </span><span class=\"kw\">let </span>cur = <span class=\"kw\">unsafe </span>{ <span class=\"kw-2\">&amp;mut *</span>g.v.as_mut_ptr().add(g.processed_len) };\n                <span class=\"kw\">if </span>!f(cur) {\n                    <span class=\"comment\">// Advance early to avoid double drop if `drop_in_place` panicked.\n                    </span>g.processed_len += <span class=\"number\">1</span>;\n                    g.deleted_cnt += <span class=\"number\">1</span>;\n                    <span class=\"comment\">// SAFETY: We never touch this element again after dropped.\n                    </span><span class=\"kw\">unsafe </span>{ ptr::drop_in_place(cur) };\n                    <span class=\"comment\">// We already advanced the counter.\n                    </span><span class=\"kw\">if </span>DELETED {\n                        <span class=\"kw\">continue</span>;\n                    } <span class=\"kw\">else </span>{\n                        <span class=\"kw\">break</span>;\n                    }\n                }\n                <span class=\"kw\">if </span>DELETED {\n                    <span class=\"comment\">// SAFETY: `deleted_cnt` &gt; 0, so the hole slot must not overlap with current element.\n                    // We use copy for move, and never touch this element again.\n                    </span><span class=\"kw\">unsafe </span>{\n                        <span class=\"kw\">let </span>hole_slot = g.v.as_mut_ptr().add(g.processed_len - g.deleted_cnt);\n                        ptr::copy_nonoverlapping(cur, hole_slot, <span class=\"number\">1</span>);\n                    }\n                }\n                g.processed_len += <span class=\"number\">1</span>;\n            }\n        }\n\n        <span class=\"comment\">// Stage 1: Nothing was deleted.\n        </span>process_loop::&lt;F, T, A, <span class=\"bool-val\">false</span>&gt;(original_len, <span class=\"kw-2\">&amp;mut </span>f, <span class=\"kw-2\">&amp;mut </span>g);\n\n        <span class=\"comment\">// Stage 2: Some elements were deleted.\n        </span>process_loop::&lt;F, T, A, <span class=\"bool-val\">true</span>&gt;(original_len, <span class=\"kw-2\">&amp;mut </span>f, <span class=\"kw-2\">&amp;mut </span>g);\n\n        <span class=\"comment\">// All item are processed. This can be optimized to `set_len` by LLVM.\n        </span>drop(g);\n    }\n\n    <span class=\"doccomment\">/// Removes all but the first of consecutive elements in the vector that resolve to the same\n    /// key.\n    ///\n    /// If the vector is sorted, this removes all duplicates.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let mut vec = vec![10, 20, 21, 30, 20];\n    ///\n    /// vec.dedup_by_key(|i| *i / 10);\n    ///\n    /// assert_eq!(vec, [10, 20, 30, 20]);\n    /// ```\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"dedup_by\"</span>, since = <span class=\"string\">\"1.16.0\"</span>)]\n    #[inline]\n    </span><span class=\"kw\">pub fn </span>dedup_by_key&lt;F, K&gt;(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, <span class=\"kw-2\">mut </span>key: F)\n    <span class=\"kw\">where\n        </span>F: FnMut(<span class=\"kw-2\">&amp;mut </span>T) -&gt; K,\n        K: PartialEq,\n    {\n        <span class=\"self\">self</span>.dedup_by(|a, b| key(a) == key(b))\n    }\n\n    <span class=\"doccomment\">/// Removes all but the first of consecutive elements in the vector satisfying a given equality\n    /// relation.\n    ///\n    /// The `same_bucket` function is passed references to two elements from the vector and\n    /// must determine if the elements compare equal. The elements are passed in opposite order\n    /// from their order in the slice, so if `same_bucket(a, b)` returns `true`, `a` is removed.\n    ///\n    /// If the vector is sorted, this removes all duplicates.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let mut vec = vec![\"foo\", \"bar\", \"Bar\", \"baz\", \"bar\"];\n    ///\n    /// vec.dedup_by(|a, b| a.eq_ignore_ascii_case(b));\n    ///\n    /// assert_eq!(vec, [\"foo\", \"bar\", \"baz\", \"bar\"]);\n    /// ```\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"dedup_by\"</span>, since = <span class=\"string\">\"1.16.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>dedup_by&lt;F&gt;(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, <span class=\"kw-2\">mut </span>same_bucket: F)\n    <span class=\"kw\">where\n        </span>F: FnMut(<span class=\"kw-2\">&amp;mut </span>T, <span class=\"kw-2\">&amp;mut </span>T) -&gt; bool,\n    {\n        <span class=\"kw\">let </span>len = <span class=\"self\">self</span>.len();\n        <span class=\"kw\">if </span>len &lt;= <span class=\"number\">1 </span>{\n            <span class=\"kw\">return</span>;\n        }\n\n        <span class=\"comment\">// Check if we ever want to remove anything.\n        // This allows to use copy_non_overlapping in next cycle.\n        // And avoids any memory writes if we don't need to remove anything.\n        </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>first_duplicate_idx: usize = <span class=\"number\">1</span>;\n        <span class=\"kw\">let </span>start = <span class=\"self\">self</span>.as_mut_ptr();\n        <span class=\"kw\">while </span>first_duplicate_idx != len {\n            <span class=\"kw\">let </span>found_duplicate = <span class=\"kw\">unsafe </span>{\n                <span class=\"comment\">// SAFETY: first_duplicate always in range [1..len)\n                // Note that we start iteration from 1 so we never overflow.\n                </span><span class=\"kw\">let </span>prev = start.add(first_duplicate_idx.wrapping_sub(<span class=\"number\">1</span>));\n                <span class=\"kw\">let </span>current = start.add(first_duplicate_idx);\n                <span class=\"comment\">// We explicitly say in docs that references are reversed.\n                </span>same_bucket(<span class=\"kw-2\">&amp;mut *</span>current, <span class=\"kw-2\">&amp;mut *</span>prev)\n            };\n            <span class=\"kw\">if </span>found_duplicate {\n                <span class=\"kw\">break</span>;\n            }\n            first_duplicate_idx += <span class=\"number\">1</span>;\n        }\n        <span class=\"comment\">// Don't need to remove anything.\n        // We cannot get bigger than len.\n        </span><span class=\"kw\">if </span>first_duplicate_idx == len {\n            <span class=\"kw\">return</span>;\n        }\n\n        <span class=\"comment\">/* INVARIANT: vec.len() &gt; read &gt; write &gt; write-1 &gt;= 0 */\n        </span><span class=\"kw\">struct </span>FillGapOnDrop&lt;<span class=\"lifetime\">'a</span>, T, A: core::alloc::Allocator&gt; {\n            <span class=\"comment\">/* Offset of the element we want to check if it is duplicate */\n            </span>read: usize,\n\n            <span class=\"comment\">/* Offset of the place where we want to place the non-duplicate\n             * when we find it. */\n            </span>write: usize,\n\n            <span class=\"comment\">/* The Vec that would need correction if `same_bucket` panicked */\n            </span>vec: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span><span class=\"kw-2\">mut </span>Vec&lt;T, A&gt;,\n        }\n\n        <span class=\"kw\">impl</span>&lt;<span class=\"lifetime\">'a</span>, T, A: core::alloc::Allocator&gt; Drop <span class=\"kw\">for </span>FillGapOnDrop&lt;<span class=\"lifetime\">'a</span>, T, A&gt; {\n            <span class=\"kw\">fn </span>drop(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) {\n                <span class=\"comment\">/* This code gets executed when `same_bucket` panics */\n\n                /* SAFETY: invariant guarantees that `read - write`\n                 * and `len - read` never overflow and that the copy is always\n                 * in-bounds. */\n                </span><span class=\"kw\">unsafe </span>{\n                    <span class=\"kw\">let </span>ptr = <span class=\"self\">self</span>.vec.as_mut_ptr();\n                    <span class=\"kw\">let </span>len = <span class=\"self\">self</span>.vec.len();\n\n                    <span class=\"comment\">/* How many items were left when `same_bucket` panicked.\n                     * Basically vec[read..].len() */\n                    </span><span class=\"kw\">let </span>items_left = len.wrapping_sub(<span class=\"self\">self</span>.read);\n\n                    <span class=\"comment\">/* Pointer to first item in vec[write..write+items_left] slice */\n                    </span><span class=\"kw\">let </span>dropped_ptr = ptr.add(<span class=\"self\">self</span>.write);\n                    <span class=\"comment\">/* Pointer to first item in vec[read..] slice */\n                    </span><span class=\"kw\">let </span>valid_ptr = ptr.add(<span class=\"self\">self</span>.read);\n\n                    <span class=\"comment\">/* Copy `vec[read..]` to `vec[write..write+items_left]`.\n                     * The slices can overlap, so `copy_nonoverlapping` cannot be used */\n                    </span>ptr::copy(valid_ptr, dropped_ptr, items_left);\n\n                    <span class=\"comment\">/* How many items have been already dropped\n                     * Basically vec[read..write].len() */\n                    </span><span class=\"kw\">let </span>dropped = <span class=\"self\">self</span>.read.wrapping_sub(<span class=\"self\">self</span>.write);\n\n                    <span class=\"self\">self</span>.vec.set_len(len - dropped);\n                }\n            }\n        }\n\n        <span class=\"comment\">/* Drop items while going through Vec, it should be more efficient than\n         * doing slice partition_dedup + truncate */\n\n        // Construct gap first and then drop item to avoid memory corruption if `T::drop` panics.\n        </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>gap =\n            FillGapOnDrop { read: first_duplicate_idx + <span class=\"number\">1</span>, write: first_duplicate_idx, vec: <span class=\"self\">self </span>};\n        <span class=\"kw\">unsafe </span>{\n            <span class=\"comment\">// SAFETY: we checked that first_duplicate_idx in bounds before.\n            // If drop panics, `gap` would remove this item without drop.\n            </span>ptr::drop_in_place(start.add(first_duplicate_idx));\n        }\n\n        <span class=\"comment\">/* SAFETY: Because of the invariant, read_ptr, prev_ptr and write_ptr\n         * are always in-bounds and read_ptr never aliases prev_ptr */\n        </span><span class=\"kw\">unsafe </span>{\n            <span class=\"kw\">while </span>gap.read &lt; len {\n                <span class=\"kw\">let </span>read_ptr = start.add(gap.read);\n                <span class=\"kw\">let </span>prev_ptr = start.add(gap.write.wrapping_sub(<span class=\"number\">1</span>));\n\n                <span class=\"comment\">// We explicitly say in docs that references are reversed.\n                </span><span class=\"kw\">let </span>found_duplicate = same_bucket(<span class=\"kw-2\">&amp;mut *</span>read_ptr, <span class=\"kw-2\">&amp;mut *</span>prev_ptr);\n                <span class=\"kw\">if </span>found_duplicate {\n                    <span class=\"comment\">// Increase `gap.read` now since the drop may panic.\n                    </span>gap.read += <span class=\"number\">1</span>;\n                    <span class=\"comment\">/* We have found duplicate, drop it in-place */\n                    </span>ptr::drop_in_place(read_ptr);\n                } <span class=\"kw\">else </span>{\n                    <span class=\"kw\">let </span>write_ptr = start.add(gap.write);\n\n                    <span class=\"comment\">/* read_ptr cannot be equal to write_ptr because at this point\n                     * we guaranteed to skip at least one element (before loop starts).\n                     */\n                    </span>ptr::copy_nonoverlapping(read_ptr, write_ptr, <span class=\"number\">1</span>);\n\n                    <span class=\"comment\">/* We have filled that place, so go further */\n                    </span>gap.write += <span class=\"number\">1</span>;\n                    gap.read += <span class=\"number\">1</span>;\n                }\n            }\n\n            <span class=\"comment\">/* Technically we could let `gap` clean up with its Drop, but\n             * when `same_bucket` is guaranteed to not panic, this bloats a little\n             * the codegen, so we just do it manually */\n            </span>gap.vec.set_len(gap.write);\n            mem::forget(gap);\n        }\n    }\n\n    <span class=\"doccomment\">/// Appends an element to the back of a collection.\n    ///\n    /// # Panics\n    ///\n    /// Panics if the new capacity exceeds `isize::MAX` _bytes_.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let mut vec = vec![1, 2];\n    /// vec.push(3);\n    /// assert_eq!(vec, [1, 2, 3]);\n    /// ```\n    ///\n    /// # Time complexity\n    ///\n    /// Takes amortized *O*(1) time. If the vector's length would exceed its\n    /// capacity after the push, *O*(*capacity*) time is taken to copy the\n    /// vector's elements to a larger allocation. This expensive operation is\n    /// offset by the *capacity* *O*(1) insertions it allows.\n    </span><span class=\"attr\">#[cfg(not(no_global_oom_handling))]\n    #[inline]\n    #[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    #[rustc_confusables(<span class=\"string\">\"push_back\"</span>, <span class=\"string\">\"put\"</span>, <span class=\"string\">\"append\"</span>)]\n    </span><span class=\"kw\">pub fn </span>push(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, value: T) {\n        <span class=\"comment\">// Inform codegen that the length does not change across grow_one().\n        </span><span class=\"kw\">let </span>len = <span class=\"self\">self</span>.len;\n        <span class=\"comment\">// This will panic or abort if we would allocate &gt; isize::MAX bytes\n        // or if the length increment would overflow for zero-sized types.\n        </span><span class=\"kw\">if </span>len == <span class=\"self\">self</span>.buf.capacity() {\n            <span class=\"self\">self</span>.buf.grow_one();\n        }\n        <span class=\"kw\">unsafe </span>{\n            <span class=\"kw\">let </span>end = <span class=\"self\">self</span>.as_mut_ptr().add(len);\n            ptr::write(end, value);\n            <span class=\"self\">self</span>.len = len + <span class=\"number\">1</span>;\n        }\n    }\n\n    <span class=\"doccomment\">/// Appends an element if there is sufficient spare capacity, otherwise an error is returned\n    /// with the element.\n    ///\n    /// Unlike [`push`] this method will not reallocate when there's insufficient capacity.\n    /// The caller should use [`reserve`] or [`try_reserve`] to ensure that there is enough capacity.\n    ///\n    /// [`push`]: Vec::push\n    /// [`reserve`]: Vec::reserve\n    /// [`try_reserve`]: Vec::try_reserve\n    ///\n    /// # Examples\n    ///\n    /// A manual, panic-free alternative to [`FromIterator`]:\n    ///\n    /// ```\n    /// #![feature(vec_push_within_capacity)]\n    ///\n    /// use std::collections::TryReserveError;\n    /// fn from_iter_fallible&lt;T&gt;(iter: impl Iterator&lt;Item=T&gt;) -&gt; Result&lt;Vec&lt;T&gt;, TryReserveError&gt; {\n    ///     let mut vec = Vec::new();\n    ///     for value in iter {\n    ///         if let Err(value) = vec.push_within_capacity(value) {\n    ///             vec.try_reserve(1)?;\n    ///             // this cannot fail, the previous line either returned or added at least 1 free slot\n    ///             let _ = vec.push_within_capacity(value);\n    ///         }\n    ///     }\n    ///     Ok(vec)\n    /// }\n    /// assert_eq!(from_iter_fallible(0..100), Ok(Vec::from_iter(0..100)));\n    /// ```\n    ///\n    /// # Time complexity\n    ///\n    /// Takes *O*(1) time.\n    </span><span class=\"attr\">#[inline]\n    #[unstable(feature = <span class=\"string\">\"vec_push_within_capacity\"</span>, issue = <span class=\"string\">\"100486\"</span>)]\n    </span><span class=\"kw\">pub fn </span>push_within_capacity(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, value: T) -&gt; <span class=\"prelude-ty\">Result</span>&lt;(), T&gt; {\n        <span class=\"kw\">if </span><span class=\"self\">self</span>.len == <span class=\"self\">self</span>.buf.capacity() {\n            <span class=\"kw\">return </span><span class=\"prelude-val\">Err</span>(value);\n        }\n        <span class=\"kw\">unsafe </span>{\n            <span class=\"kw\">let </span>end = <span class=\"self\">self</span>.as_mut_ptr().add(<span class=\"self\">self</span>.len);\n            ptr::write(end, value);\n            <span class=\"self\">self</span>.len += <span class=\"number\">1</span>;\n        }\n        <span class=\"prelude-val\">Ok</span>(())\n    }\n\n    <span class=\"doccomment\">/// Removes the last element from a vector and returns it, or [`None`] if it\n    /// is empty.\n    ///\n    /// If you'd like to pop the first element, consider using\n    /// [`VecDeque::pop_front`] instead.\n    ///\n    /// [`VecDeque::pop_front`]: crate::collections::VecDeque::pop_front\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let mut vec = vec![1, 2, 3];\n    /// assert_eq!(vec.pop(), Some(3));\n    /// assert_eq!(vec, [1, 2]);\n    /// ```\n    ///\n    /// # Time complexity\n    ///\n    /// Takes *O*(1) time.\n    </span><span class=\"attr\">#[inline]\n    #[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>pop(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Option</span>&lt;T&gt; {\n        <span class=\"kw\">if </span><span class=\"self\">self</span>.len == <span class=\"number\">0 </span>{\n            <span class=\"prelude-val\">None\n        </span>} <span class=\"kw\">else </span>{\n            <span class=\"kw\">unsafe </span>{\n                <span class=\"self\">self</span>.len -= <span class=\"number\">1</span>;\n                core::hint::assert_unchecked(<span class=\"self\">self</span>.len &lt; <span class=\"self\">self</span>.capacity());\n                <span class=\"prelude-val\">Some</span>(ptr::read(<span class=\"self\">self</span>.as_ptr().add(<span class=\"self\">self</span>.len())))\n            }\n        }\n    }\n\n    <span class=\"doccomment\">/// Removes and returns the last element in a vector if the predicate\n    /// returns `true`, or [`None`] if the predicate returns false or the vector\n    /// is empty.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// #![feature(vec_pop_if)]\n    ///\n    /// let mut vec = vec![1, 2, 3, 4];\n    /// let pred = |x: &amp;mut i32| *x % 2 == 0;\n    ///\n    /// assert_eq!(vec.pop_if(pred), Some(4));\n    /// assert_eq!(vec, [1, 2, 3]);\n    /// assert_eq!(vec.pop_if(pred), None);\n    /// ```\n    </span><span class=\"attr\">#[unstable(feature = <span class=\"string\">\"vec_pop_if\"</span>, issue = <span class=\"string\">\"122741\"</span>)]\n    </span><span class=\"kw\">pub fn </span>pop_if&lt;F&gt;(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, f: F) -&gt; <span class=\"prelude-ty\">Option</span>&lt;T&gt;\n    <span class=\"kw\">where\n        </span>F: FnOnce(<span class=\"kw-2\">&amp;mut </span>T) -&gt; bool,\n    {\n        <span class=\"kw\">let </span>last = <span class=\"self\">self</span>.last_mut()<span class=\"question-mark\">?</span>;\n        <span class=\"kw\">if </span>f(last) { <span class=\"self\">self</span>.pop() } <span class=\"kw\">else </span>{ <span class=\"prelude-val\">None </span>}\n    }\n\n    <span class=\"doccomment\">/// Moves all the elements of `other` into `self`, leaving `other` empty.\n    ///\n    /// # Panics\n    ///\n    /// Panics if the new capacity exceeds `isize::MAX` _bytes_.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let mut vec = vec![1, 2, 3];\n    /// let mut vec2 = vec![4, 5, 6];\n    /// vec.append(&amp;mut vec2);\n    /// assert_eq!(vec, [1, 2, 3, 4, 5, 6]);\n    /// assert_eq!(vec2, []);\n    /// ```\n    </span><span class=\"attr\">#[cfg(not(no_global_oom_handling))]\n    #[inline]\n    #[stable(feature = <span class=\"string\">\"append\"</span>, since = <span class=\"string\">\"1.4.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>append(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, other: <span class=\"kw-2\">&amp;mut </span><span class=\"self\">Self</span>) {\n        <span class=\"kw\">unsafe </span>{\n            <span class=\"self\">self</span>.append_elements(other.as_slice() <span class=\"kw\">as _</span>);\n            other.set_len(<span class=\"number\">0</span>);\n        }\n    }\n\n    <span class=\"doccomment\">/// Appends elements to `self` from other buffer.\n    </span><span class=\"attr\">#[cfg(not(no_global_oom_handling))]\n    #[inline]\n    </span><span class=\"kw\">unsafe fn </span>append_elements(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, other: <span class=\"kw-2\">*const </span>[T]) {\n        <span class=\"kw\">let </span>count = <span class=\"kw\">unsafe </span>{ (<span class=\"kw-2\">*</span>other).len() };\n        <span class=\"self\">self</span>.reserve(count);\n        <span class=\"kw\">let </span>len = <span class=\"self\">self</span>.len();\n        <span class=\"kw\">unsafe </span>{ ptr::copy_nonoverlapping(other <span class=\"kw\">as </span><span class=\"kw-2\">*const </span>T, <span class=\"self\">self</span>.as_mut_ptr().add(len), count) };\n        <span class=\"self\">self</span>.len += count;\n    }\n\n    <span class=\"doccomment\">/// Removes the specified range from the vector in bulk, returning all\n    /// removed elements as an iterator. If the iterator is dropped before\n    /// being fully consumed, it drops the remaining removed elements.\n    ///\n    /// The returned iterator keeps a mutable borrow on the vector to optimize\n    /// its implementation.\n    ///\n    /// # Panics\n    ///\n    /// Panics if the starting point is greater than the end point or if\n    /// the end point is greater than the length of the vector.\n    ///\n    /// # Leaking\n    ///\n    /// If the returned iterator goes out of scope without being dropped (due to\n    /// [`mem::forget`], for example), the vector may have lost and leaked\n    /// elements arbitrarily, including elements outside the range.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let mut v = vec![1, 2, 3];\n    /// let u: Vec&lt;_&gt; = v.drain(1..).collect();\n    /// assert_eq!(v, &amp;[1]);\n    /// assert_eq!(u, &amp;[2, 3]);\n    ///\n    /// // A full range clears the vector, like `clear()` does\n    /// v.drain(..);\n    /// assert_eq!(v, &amp;[]);\n    /// ```\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"drain\"</span>, since = <span class=\"string\">\"1.6.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>drain&lt;R&gt;(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, range: R) -&gt; Drain&lt;<span class=\"lifetime\">'_</span>, T, A&gt;\n    <span class=\"kw\">where\n        </span>R: RangeBounds&lt;usize&gt;,\n    {\n        <span class=\"comment\">// Memory safety\n        //\n        // When the Drain is first created, it shortens the length of\n        // the source vector to make sure no uninitialized or moved-from elements\n        // are accessible at all if the Drain's destructor never gets to run.\n        //\n        // Drain will ptr::read out the values to remove.\n        // When finished, remaining tail of the vec is copied back to cover\n        // the hole, and the vector length is restored to the new length.\n        //\n        </span><span class=\"kw\">let </span>len = <span class=\"self\">self</span>.len();\n        <span class=\"kw\">let </span>Range { start, end } = slice::range(range, ..len);\n\n        <span class=\"kw\">unsafe </span>{\n            <span class=\"comment\">// set self.vec length's to start, to be safe in case Drain is leaked\n            </span><span class=\"self\">self</span>.set_len(start);\n            <span class=\"kw\">let </span>range_slice = slice::from_raw_parts(<span class=\"self\">self</span>.as_ptr().add(start), end - start);\n            Drain {\n                tail_start: end,\n                tail_len: len - end,\n                iter: range_slice.iter(),\n                vec: NonNull::from(<span class=\"self\">self</span>),\n            }\n        }\n    }\n\n    <span class=\"doccomment\">/// Clears the vector, removing all values.\n    ///\n    /// Note that this method has no effect on the allocated capacity\n    /// of the vector.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let mut v = vec![1, 2, 3];\n    ///\n    /// v.clear();\n    ///\n    /// assert!(v.is_empty());\n    /// ```\n    </span><span class=\"attr\">#[inline]\n    #[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>clear(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) {\n        <span class=\"kw\">let </span>elems: <span class=\"kw-2\">*mut </span>[T] = <span class=\"self\">self</span>.as_mut_slice();\n\n        <span class=\"comment\">// SAFETY:\n        // - `elems` comes directly from `as_mut_slice` and is therefore valid.\n        // - Setting `self.len` before calling `drop_in_place` means that,\n        //   if an element's `Drop` impl panics, the vector's `Drop` impl will\n        //   do nothing (leaking the rest of the elements) instead of dropping\n        //   some twice.\n        </span><span class=\"kw\">unsafe </span>{\n            <span class=\"self\">self</span>.len = <span class=\"number\">0</span>;\n            ptr::drop_in_place(elems);\n        }\n    }\n\n    <span class=\"doccomment\">/// Returns the number of elements in the vector, also referred to\n    /// as its 'length'.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let a = vec![1, 2, 3];\n    /// assert_eq!(a.len(), 3);\n    /// ```\n    </span><span class=\"attr\">#[inline]\n    #[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    #[rustc_confusables(<span class=\"string\">\"length\"</span>, <span class=\"string\">\"size\"</span>)]\n    </span><span class=\"kw\">pub fn </span>len(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; usize {\n        <span class=\"self\">self</span>.len\n    }\n\n    <span class=\"doccomment\">/// Returns `true` if the vector contains no elements.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let mut v = Vec::new();\n    /// assert!(v.is_empty());\n    ///\n    /// v.push(1);\n    /// assert!(!v.is_empty());\n    /// ```\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>is_empty(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; bool {\n        <span class=\"self\">self</span>.len() == <span class=\"number\">0\n    </span>}\n\n    <span class=\"doccomment\">/// Splits the collection into two at the given index.\n    ///\n    /// Returns a newly allocated vector containing the elements in the range\n    /// `[at, len)`. After the call, the original vector will be left containing\n    /// the elements `[0, at)` with its previous capacity unchanged.\n    ///\n    /// - If you want to take ownership of the entire contents and capacity of\n    ///   the vector, see [`mem::take`] or [`mem::replace`].\n    /// - If you don't need the returned vector at all, see [`Vec::truncate`].\n    /// - If you want to take ownership of an arbitrary subslice, or you don't\n    ///   necessarily want to store the removed items in a vector, see [`Vec::drain`].\n    ///\n    /// # Panics\n    ///\n    /// Panics if `at &gt; len`.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let mut vec = vec![1, 2, 3];\n    /// let vec2 = vec.split_off(1);\n    /// assert_eq!(vec, [1]);\n    /// assert_eq!(vec2, [2, 3]);\n    /// ```\n    </span><span class=\"attr\">#[cfg(not(no_global_oom_handling))]\n    #[inline]\n    #[must_use = <span class=\"string\">\"use `.truncate()` if you don't need the other half\"</span>]\n    #[stable(feature = <span class=\"string\">\"split_off\"</span>, since = <span class=\"string\">\"1.4.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>split_off(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, at: usize) -&gt; <span class=\"self\">Self\n    </span><span class=\"kw\">where\n        </span>A: Clone,\n    {\n        <span class=\"attr\">#[cold]\n        #[cfg_attr(not(feature = <span class=\"string\">\"panic_immediate_abort\"</span>), inline(never))]\n        #[track_caller]\n        </span><span class=\"kw\">fn </span>assert_failed(at: usize, len: usize) -&gt; ! {\n            <span class=\"macro\">panic!</span>(<span class=\"string\">\"`at` split index (is {at}) should be &lt;= len (is {len})\"</span>);\n        }\n\n        <span class=\"kw\">if </span>at &gt; <span class=\"self\">self</span>.len() {\n            assert_failed(at, <span class=\"self\">self</span>.len());\n        }\n\n        <span class=\"kw\">let </span>other_len = <span class=\"self\">self</span>.len - at;\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>other = Vec::with_capacity_in(other_len, <span class=\"self\">self</span>.allocator().clone());\n\n        <span class=\"comment\">// Unsafely `set_len` and copy items to `other`.\n        </span><span class=\"kw\">unsafe </span>{\n            <span class=\"self\">self</span>.set_len(at);\n            other.set_len(other_len);\n\n            ptr::copy_nonoverlapping(<span class=\"self\">self</span>.as_ptr().add(at), other.as_mut_ptr(), other.len());\n        }\n        other\n    }\n\n    <span class=\"doccomment\">/// Resizes the `Vec` in-place so that `len` is equal to `new_len`.\n    ///\n    /// If `new_len` is greater than `len`, the `Vec` is extended by the\n    /// difference, with each additional slot filled with the result of\n    /// calling the closure `f`. The return values from `f` will end up\n    /// in the `Vec` in the order they have been generated.\n    ///\n    /// If `new_len` is less than `len`, the `Vec` is simply truncated.\n    ///\n    /// This method uses a closure to create new values on every push. If\n    /// you'd rather [`Clone`] a given value, use [`Vec::resize`]. If you\n    /// want to use the [`Default`] trait to generate values, you can\n    /// pass [`Default::default`] as the second argument.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let mut vec = vec![1, 2, 3];\n    /// vec.resize_with(5, Default::default);\n    /// assert_eq!(vec, [1, 2, 3, 0, 0]);\n    ///\n    /// let mut vec = vec![];\n    /// let mut p = 1;\n    /// vec.resize_with(4, || { p *= 2; p });\n    /// assert_eq!(vec, [2, 4, 8, 16]);\n    /// ```\n    </span><span class=\"attr\">#[cfg(not(no_global_oom_handling))]\n    #[stable(feature = <span class=\"string\">\"vec_resize_with\"</span>, since = <span class=\"string\">\"1.33.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>resize_with&lt;F&gt;(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, new_len: usize, f: F)\n    <span class=\"kw\">where\n        </span>F: FnMut() -&gt; T,\n    {\n        <span class=\"kw\">let </span>len = <span class=\"self\">self</span>.len();\n        <span class=\"kw\">if </span>new_len &gt; len {\n            <span class=\"self\">self</span>.extend_trusted(iter::repeat_with(f).take(new_len - len));\n        } <span class=\"kw\">else </span>{\n            <span class=\"self\">self</span>.truncate(new_len);\n        }\n    }\n\n    <span class=\"doccomment\">/// Consumes and leaks the `Vec`, returning a mutable reference to the contents,\n    /// `&amp;'a mut [T]`. Note that the type `T` must outlive the chosen lifetime\n    /// `'a`. If the type has only static references, or none at all, then this\n    /// may be chosen to be `'static`.\n    ///\n    /// As of Rust 1.57, this method does not reallocate or shrink the `Vec`,\n    /// so the leaked allocation may include unused capacity that is not part\n    /// of the returned slice.\n    ///\n    /// This function is mainly useful for data that lives for the remainder of\n    /// the program's life. Dropping the returned reference will cause a memory\n    /// leak.\n    ///\n    /// # Examples\n    ///\n    /// Simple usage:\n    ///\n    /// ```\n    /// let x = vec![1, 2, 3];\n    /// let static_ref: &amp;'static mut [usize] = x.leak();\n    /// static_ref[0] += 1;\n    /// assert_eq!(static_ref, &amp;[2, 2, 3]);\n    /// ```\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"vec_leak\"</span>, since = <span class=\"string\">\"1.47.0\"</span>)]\n    #[inline]\n    </span><span class=\"kw\">pub fn </span>leak&lt;<span class=\"lifetime\">'a</span>&gt;(<span class=\"self\">self</span>) -&gt; <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span><span class=\"kw-2\">mut </span>[T]\n    <span class=\"kw\">where\n        </span>A: <span class=\"lifetime\">'a</span>,\n    {\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>me = ManuallyDrop::new(<span class=\"self\">self</span>);\n        <span class=\"kw\">unsafe </span>{ slice::from_raw_parts_mut(me.as_mut_ptr(), me.len) }\n    }\n\n    <span class=\"doccomment\">/// Returns the remaining spare capacity of the vector as a slice of\n    /// `MaybeUninit&lt;T&gt;`.\n    ///\n    /// The returned slice can be used to fill the vector with data (e.g. by\n    /// reading from a file) before marking the data as initialized using the\n    /// [`set_len`] method.\n    ///\n    /// [`set_len`]: Vec::set_len\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// // Allocate vector big enough for 10 elements.\n    /// let mut v = Vec::with_capacity(10);\n    ///\n    /// // Fill in the first 3 elements.\n    /// let uninit = v.spare_capacity_mut();\n    /// uninit[0].write(0);\n    /// uninit[1].write(1);\n    /// uninit[2].write(2);\n    ///\n    /// // Mark the first 3 elements of the vector as being initialized.\n    /// unsafe {\n    ///     v.set_len(3);\n    /// }\n    ///\n    /// assert_eq!(&amp;v, &amp;[0, 1, 2]);\n    /// ```\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"vec_spare_capacity\"</span>, since = <span class=\"string\">\"1.60.0\"</span>)]\n    #[inline]\n    </span><span class=\"kw\">pub fn </span>spare_capacity_mut(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) -&gt; <span class=\"kw-2\">&amp;mut </span>[MaybeUninit&lt;T&gt;] {\n        <span class=\"comment\">// Note:\n        // This method is not implemented in terms of `split_at_spare_mut`,\n        // to prevent invalidation of pointers to the buffer.\n        </span><span class=\"kw\">unsafe </span>{\n            slice::from_raw_parts_mut(\n                <span class=\"self\">self</span>.as_mut_ptr().add(<span class=\"self\">self</span>.len) <span class=\"kw\">as </span><span class=\"kw-2\">*mut </span>MaybeUninit&lt;T&gt;,\n                <span class=\"self\">self</span>.buf.capacity() - <span class=\"self\">self</span>.len,\n            )\n        }\n    }\n\n    <span class=\"doccomment\">/// Returns vector content as a slice of `T`, along with the remaining spare\n    /// capacity of the vector as a slice of `MaybeUninit&lt;T&gt;`.\n    ///\n    /// The returned spare capacity slice can be used to fill the vector with data\n    /// (e.g. by reading from a file) before marking the data as initialized using\n    /// the [`set_len`] method.\n    ///\n    /// [`set_len`]: Vec::set_len\n    ///\n    /// Note that this is a low-level API, which should be used with care for\n    /// optimization purposes. If you need to append data to a `Vec`\n    /// you can use [`push`], [`extend`], [`extend_from_slice`],\n    /// [`extend_from_within`], [`insert`], [`append`], [`resize`] or\n    /// [`resize_with`], depending on your exact needs.\n    ///\n    /// [`push`]: Vec::push\n    /// [`extend`]: Vec::extend\n    /// [`extend_from_slice`]: Vec::extend_from_slice\n    /// [`extend_from_within`]: Vec::extend_from_within\n    /// [`insert`]: Vec::insert\n    /// [`append`]: Vec::append\n    /// [`resize`]: Vec::resize\n    /// [`resize_with`]: Vec::resize_with\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// #![feature(vec_split_at_spare)]\n    ///\n    /// let mut v = vec![1, 1, 2];\n    ///\n    /// // Reserve additional space big enough for 10 elements.\n    /// v.reserve(10);\n    ///\n    /// let (init, uninit) = v.split_at_spare_mut();\n    /// let sum = init.iter().copied().sum::&lt;u32&gt;();\n    ///\n    /// // Fill in the next 4 elements.\n    /// uninit[0].write(sum);\n    /// uninit[1].write(sum * 2);\n    /// uninit[2].write(sum * 3);\n    /// uninit[3].write(sum * 4);\n    ///\n    /// // Mark the 4 elements of the vector as being initialized.\n    /// unsafe {\n    ///     let len = v.len();\n    ///     v.set_len(len + 4);\n    /// }\n    ///\n    /// assert_eq!(&amp;v, &amp;[1, 1, 2, 4, 8, 12, 16]);\n    /// ```\n    </span><span class=\"attr\">#[unstable(feature = <span class=\"string\">\"vec_split_at_spare\"</span>, issue = <span class=\"string\">\"81944\"</span>)]\n    #[inline]\n    </span><span class=\"kw\">pub fn </span>split_at_spare_mut(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) -&gt; (<span class=\"kw-2\">&amp;mut </span>[T], <span class=\"kw-2\">&amp;mut </span>[MaybeUninit&lt;T&gt;]) {\n        <span class=\"comment\">// SAFETY:\n        // - len is ignored and so never changed\n        </span><span class=\"kw\">let </span>(init, spare, <span class=\"kw\">_</span>) = <span class=\"kw\">unsafe </span>{ <span class=\"self\">self</span>.split_at_spare_mut_with_len() };\n        (init, spare)\n    }\n\n    <span class=\"doccomment\">/// Safety: changing returned .2 (&amp;mut usize) is considered the same as calling `.set_len(_)`.\n    ///\n    /// This method provides unique access to all vec parts at once in `extend_from_within`.\n    </span><span class=\"kw\">unsafe fn </span>split_at_spare_mut_with_len(\n        <span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>,\n    ) -&gt; (<span class=\"kw-2\">&amp;mut </span>[T], <span class=\"kw-2\">&amp;mut </span>[MaybeUninit&lt;T&gt;], <span class=\"kw-2\">&amp;mut </span>usize) {\n        <span class=\"kw\">let </span>ptr = <span class=\"self\">self</span>.as_mut_ptr();\n        <span class=\"comment\">// SAFETY:\n        // - `ptr` is guaranteed to be valid for `self.len` elements\n        // - but the allocation extends out to `self.buf.capacity()` elements, possibly\n        // uninitialized\n        </span><span class=\"kw\">let </span>spare_ptr = <span class=\"kw\">unsafe </span>{ ptr.add(<span class=\"self\">self</span>.len) };\n        <span class=\"kw\">let </span>spare_ptr = spare_ptr.cast::&lt;MaybeUninit&lt;T&gt;&gt;();\n        <span class=\"kw\">let </span>spare_len = <span class=\"self\">self</span>.buf.capacity() - <span class=\"self\">self</span>.len;\n\n        <span class=\"comment\">// SAFETY:\n        // - `ptr` is guaranteed to be valid for `self.len` elements\n        // - `spare_ptr` is pointing one element past the buffer, so it doesn't overlap with `initialized`\n        </span><span class=\"kw\">unsafe </span>{\n            <span class=\"kw\">let </span>initialized = slice::from_raw_parts_mut(ptr, <span class=\"self\">self</span>.len);\n            <span class=\"kw\">let </span>spare = slice::from_raw_parts_mut(spare_ptr, spare_len);\n\n            (initialized, spare, <span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>.len)\n        }\n    }\n}\n\n<span class=\"kw\">impl</span>&lt;T: Clone, A: Allocator&gt; Vec&lt;T, A&gt; {\n    <span class=\"doccomment\">/// Resizes the `Vec` in-place so that `len` is equal to `new_len`.\n    ///\n    /// If `new_len` is greater than `len`, the `Vec` is extended by the\n    /// difference, with each additional slot filled with `value`.\n    /// If `new_len` is less than `len`, the `Vec` is simply truncated.\n    ///\n    /// This method requires `T` to implement [`Clone`],\n    /// in order to be able to clone the passed value.\n    /// If you need more flexibility (or want to rely on [`Default`] instead of\n    /// [`Clone`]), use [`Vec::resize_with`].\n    /// If you only need to resize to a smaller size, use [`Vec::truncate`].\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let mut vec = vec![\"hello\"];\n    /// vec.resize(3, \"world\");\n    /// assert_eq!(vec, [\"hello\", \"world\", \"world\"]);\n    ///\n    /// let mut vec = vec![1, 2, 3, 4];\n    /// vec.resize(2, 0);\n    /// assert_eq!(vec, [1, 2]);\n    /// ```\n    </span><span class=\"attr\">#[cfg(not(no_global_oom_handling))]\n    #[stable(feature = <span class=\"string\">\"vec_resize\"</span>, since = <span class=\"string\">\"1.5.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>resize(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, new_len: usize, value: T) {\n        <span class=\"kw\">let </span>len = <span class=\"self\">self</span>.len();\n\n        <span class=\"kw\">if </span>new_len &gt; len {\n            <span class=\"self\">self</span>.extend_with(new_len - len, value)\n        } <span class=\"kw\">else </span>{\n            <span class=\"self\">self</span>.truncate(new_len);\n        }\n    }\n\n    <span class=\"doccomment\">/// Clones and appends all elements in a slice to the `Vec`.\n    ///\n    /// Iterates over the slice `other`, clones each element, and then appends\n    /// it to this `Vec`. The `other` slice is traversed in-order.\n    ///\n    /// Note that this function is same as [`extend`] except that it is\n    /// specialized to work with slices instead. If and when Rust gets\n    /// specialization this function will likely be deprecated (but still\n    /// available).\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let mut vec = vec![1];\n    /// vec.extend_from_slice(&amp;[2, 3, 4]);\n    /// assert_eq!(vec, [1, 2, 3, 4]);\n    /// ```\n    ///\n    /// [`extend`]: Vec::extend\n    </span><span class=\"attr\">#[cfg(not(no_global_oom_handling))]\n    #[stable(feature = <span class=\"string\">\"vec_extend_from_slice\"</span>, since = <span class=\"string\">\"1.6.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>extend_from_slice(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, other: <span class=\"kw-2\">&amp;</span>[T]) {\n        <span class=\"self\">self</span>.spec_extend(other.iter())\n    }\n\n    <span class=\"doccomment\">/// Copies elements from `src` range to the end of the vector.\n    ///\n    /// # Panics\n    ///\n    /// Panics if the starting point is greater than the end point or if\n    /// the end point is greater than the length of the vector.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let mut vec = vec![0, 1, 2, 3, 4];\n    ///\n    /// vec.extend_from_within(2..);\n    /// assert_eq!(vec, [0, 1, 2, 3, 4, 2, 3, 4]);\n    ///\n    /// vec.extend_from_within(..2);\n    /// assert_eq!(vec, [0, 1, 2, 3, 4, 2, 3, 4, 0, 1]);\n    ///\n    /// vec.extend_from_within(4..8);\n    /// assert_eq!(vec, [0, 1, 2, 3, 4, 2, 3, 4, 0, 1, 4, 2, 3, 4]);\n    /// ```\n    </span><span class=\"attr\">#[cfg(not(no_global_oom_handling))]\n    #[stable(feature = <span class=\"string\">\"vec_extend_from_within\"</span>, since = <span class=\"string\">\"1.53.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>extend_from_within&lt;R&gt;(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, src: R)\n    <span class=\"kw\">where\n        </span>R: RangeBounds&lt;usize&gt;,\n    {\n        <span class=\"kw\">let </span>range = slice::range(src, ..<span class=\"self\">self</span>.len());\n        <span class=\"self\">self</span>.reserve(range.len());\n\n        <span class=\"comment\">// SAFETY:\n        // - `slice::range` guarantees that the given range is valid for indexing self\n        </span><span class=\"kw\">unsafe </span>{\n            <span class=\"self\">self</span>.spec_extend_from_within(range);\n        }\n    }\n}\n\n<span class=\"kw\">impl</span>&lt;T, A: Allocator, <span class=\"kw\">const </span>N: usize&gt; Vec&lt;[T; N], A&gt; {\n    <span class=\"doccomment\">/// Takes a `Vec&lt;[T; N]&gt;` and flattens it into a `Vec&lt;T&gt;`.\n    ///\n    /// # Panics\n    ///\n    /// Panics if the length of the resulting vector would overflow a `usize`.\n    ///\n    /// This is only possible when flattening a vector of arrays of zero-sized\n    /// types, and thus tends to be irrelevant in practice. If\n    /// `size_of::&lt;T&gt;() &gt; 0`, this will never panic.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let mut vec = vec![[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n    /// assert_eq!(vec.pop(), Some([7, 8, 9]));\n    ///\n    /// let mut flattened = vec.into_flattened();\n    /// assert_eq!(flattened.pop(), Some(6));\n    /// ```\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"slice_flatten\"</span>, since = <span class=\"string\">\"1.80.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>into_flattened(<span class=\"self\">self</span>) -&gt; Vec&lt;T, A&gt; {\n        <span class=\"kw\">let </span>(ptr, len, cap, alloc) = <span class=\"self\">self</span>.into_raw_parts_with_alloc();\n        <span class=\"kw\">let </span>(new_len, new_cap) = <span class=\"kw\">if </span>T::IS_ZST {\n            (len.checked_mul(N).expect(<span class=\"string\">\"vec len overflow\"</span>), usize::MAX)\n        } <span class=\"kw\">else </span>{\n            <span class=\"comment\">// SAFETY:\n            // - `cap * N` cannot overflow because the allocation is already in\n            // the address space.\n            // - Each `[T; N]` has `N` valid elements, so there are `len * N`\n            // valid elements in the allocation.\n            </span><span class=\"kw\">unsafe </span>{ (len.unchecked_mul(N), cap.unchecked_mul(N)) }\n        };\n        <span class=\"comment\">// SAFETY:\n        // - `ptr` was allocated by `self`\n        // - `ptr` is well-aligned because `[T; N]` has the same alignment as `T`.\n        // - `new_cap` refers to the same sized allocation as `cap` because\n        // `new_cap * size_of::&lt;T&gt;()` == `cap * size_of::&lt;[T; N]&gt;()`\n        // - `len` &lt;= `cap`, so `len * N` &lt;= `cap * N`.\n        </span><span class=\"kw\">unsafe </span>{ Vec::&lt;T, A&gt;::from_raw_parts_in(ptr.cast(), new_len, new_cap, alloc) }\n    }\n}\n\n<span class=\"kw\">impl</span>&lt;T: Clone, A: Allocator&gt; Vec&lt;T, A&gt; {\n    <span class=\"attr\">#[cfg(not(no_global_oom_handling))]\n    </span><span class=\"doccomment\">/// Extend the vector by `n` clones of value.\n    </span><span class=\"kw\">fn </span>extend_with(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, n: usize, value: T) {\n        <span class=\"self\">self</span>.reserve(n);\n\n        <span class=\"kw\">unsafe </span>{\n            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>ptr = <span class=\"self\">self</span>.as_mut_ptr().add(<span class=\"self\">self</span>.len());\n            <span class=\"comment\">// Use SetLenOnDrop to work around bug where compiler\n            // might not realize the store through `ptr` through self.set_len()\n            // don't alias.\n            </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>local_len = SetLenOnDrop::new(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>.len);\n\n            <span class=\"comment\">// Write all elements except the last one\n            </span><span class=\"kw\">for _ in </span><span class=\"number\">1</span>..n {\n                ptr::write(ptr, value.clone());\n                ptr = ptr.add(<span class=\"number\">1</span>);\n                <span class=\"comment\">// Increment the length in every step in case clone() panics\n                </span>local_len.increment_len(<span class=\"number\">1</span>);\n            }\n\n            <span class=\"kw\">if </span>n &gt; <span class=\"number\">0 </span>{\n                <span class=\"comment\">// We can write the last element directly without cloning needlessly\n                </span>ptr::write(ptr, value);\n                local_len.increment_len(<span class=\"number\">1</span>);\n            }\n\n            <span class=\"comment\">// len set by scope guard\n        </span>}\n    }\n}\n\n<span class=\"kw\">impl</span>&lt;T: PartialEq, A: Allocator&gt; Vec&lt;T, A&gt; {\n    <span class=\"doccomment\">/// Removes consecutive repeated elements in the vector according to the\n    /// [`PartialEq`] trait implementation.\n    ///\n    /// If the vector is sorted, this removes all duplicates.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let mut vec = vec![1, 2, 2, 3, 2];\n    ///\n    /// vec.dedup();\n    ///\n    /// assert_eq!(vec, [1, 2, 3, 2]);\n    /// ```\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    #[inline]\n    </span><span class=\"kw\">pub fn </span>dedup(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) {\n        <span class=\"self\">self</span>.dedup_by(|a, b| a == b)\n    }\n}\n\n<span class=\"comment\">////////////////////////////////////////////////////////////////////////////////\n// Internal methods and functions\n////////////////////////////////////////////////////////////////////////////////\n\n</span><span class=\"attr\">#[doc(hidden)]\n#[cfg(not(no_global_oom_handling))]\n#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">pub fn </span>from_elem&lt;T: Clone&gt;(elem: T, n: usize) -&gt; Vec&lt;T&gt; {\n    &lt;T <span class=\"kw\">as </span>SpecFromElem&gt;::from_elem(elem, n, Global)\n}\n\n<span class=\"attr\">#[doc(hidden)]\n#[cfg(not(no_global_oom_handling))]\n#[unstable(feature = <span class=\"string\">\"allocator_api\"</span>, issue = <span class=\"string\">\"32838\"</span>)]\n</span><span class=\"kw\">pub fn </span>from_elem_in&lt;T: Clone, A: Allocator&gt;(elem: T, n: usize, alloc: A) -&gt; Vec&lt;T, A&gt; {\n    &lt;T <span class=\"kw\">as </span>SpecFromElem&gt;::from_elem(elem, n, alloc)\n}\n\n<span class=\"attr\">#[cfg(not(no_global_oom_handling))]\n</span><span class=\"kw\">trait </span>ExtendFromWithinSpec {\n    <span class=\"doccomment\">/// # Safety\n    ///\n    /// - `src` needs to be valid index\n    /// - `self.capacity() - self.len()` must be `&gt;= src.len()`\n    </span><span class=\"kw\">unsafe fn </span>spec_extend_from_within(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, src: Range&lt;usize&gt;);\n}\n\n<span class=\"attr\">#[cfg(not(no_global_oom_handling))]\n</span><span class=\"kw\">impl</span>&lt;T: Clone, A: Allocator&gt; ExtendFromWithinSpec <span class=\"kw\">for </span>Vec&lt;T, A&gt; {\n    default <span class=\"kw\">unsafe fn </span>spec_extend_from_within(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, src: Range&lt;usize&gt;) {\n        <span class=\"comment\">// SAFETY:\n        // - len is increased only after initializing elements\n        </span><span class=\"kw\">let </span>(this, spare, len) = <span class=\"kw\">unsafe </span>{ <span class=\"self\">self</span>.split_at_spare_mut_with_len() };\n\n        <span class=\"comment\">// SAFETY:\n        // - caller guarantees that src is a valid index\n        </span><span class=\"kw\">let </span>to_clone = <span class=\"kw\">unsafe </span>{ this.get_unchecked(src) };\n\n        iter::zip(to_clone, spare)\n            .map(|(src, dst)| dst.write(src.clone()))\n            <span class=\"comment\">// Note:\n            // - Element was just initialized with `MaybeUninit::write`, so it's ok to increase len\n            // - len is increased after each element to prevent leaks (see issue #82533)\n            </span>.for_each(|<span class=\"kw\">_</span>| <span class=\"kw-2\">*</span>len += <span class=\"number\">1</span>);\n    }\n}\n\n<span class=\"attr\">#[cfg(not(no_global_oom_handling))]\n</span><span class=\"kw\">impl</span>&lt;T: Copy, A: Allocator&gt; ExtendFromWithinSpec <span class=\"kw\">for </span>Vec&lt;T, A&gt; {\n    <span class=\"kw\">unsafe fn </span>spec_extend_from_within(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, src: Range&lt;usize&gt;) {\n        <span class=\"kw\">let </span>count = src.len();\n        {\n            <span class=\"kw\">let </span>(init, spare) = <span class=\"self\">self</span>.split_at_spare_mut();\n\n            <span class=\"comment\">// SAFETY:\n            // - caller guarantees that `src` is a valid index\n            </span><span class=\"kw\">let </span>source = <span class=\"kw\">unsafe </span>{ init.get_unchecked(src) };\n\n            <span class=\"comment\">// SAFETY:\n            // - Both pointers are created from unique slice references (`&amp;mut [_]`)\n            //   so they are valid and do not overlap.\n            // - Elements are :Copy so it's OK to copy them, without doing\n            //   anything with the original values\n            // - `count` is equal to the len of `source`, so source is valid for\n            //   `count` reads\n            // - `.reserve(count)` guarantees that `spare.len() &gt;= count` so spare\n            //   is valid for `count` writes\n            </span><span class=\"kw\">unsafe </span>{ ptr::copy_nonoverlapping(source.as_ptr(), spare.as_mut_ptr() <span class=\"kw\">as _</span>, count) };\n        }\n\n        <span class=\"comment\">// SAFETY:\n        // - The elements were just initialized by `copy_nonoverlapping`\n        </span><span class=\"self\">self</span>.len += count;\n    }\n}\n\n<span class=\"comment\">////////////////////////////////////////////////////////////////////////////////\n// Common trait implementations for Vec\n////////////////////////////////////////////////////////////////////////////////\n\n</span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;T, A: Allocator&gt; ops::Deref <span class=\"kw\">for </span>Vec&lt;T, A&gt; {\n    <span class=\"kw\">type </span>Target = [T];\n\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>deref(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; <span class=\"kw-2\">&amp;</span>[T] {\n        <span class=\"kw\">unsafe </span>{ slice::from_raw_parts(<span class=\"self\">self</span>.as_ptr(), <span class=\"self\">self</span>.len) }\n    }\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;T, A: Allocator&gt; ops::DerefMut <span class=\"kw\">for </span>Vec&lt;T, A&gt; {\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>deref_mut(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) -&gt; <span class=\"kw-2\">&amp;mut </span>[T] {\n        <span class=\"kw\">unsafe </span>{ slice::from_raw_parts_mut(<span class=\"self\">self</span>.as_mut_ptr(), <span class=\"self\">self</span>.len) }\n    }\n}\n\n<span class=\"attr\">#[unstable(feature = <span class=\"string\">\"deref_pure_trait\"</span>, issue = <span class=\"string\">\"87121\"</span>)]\n</span><span class=\"kw\">unsafe impl</span>&lt;T, A: Allocator&gt; ops::DerefPure <span class=\"kw\">for </span>Vec&lt;T, A&gt; {}\n\n<span class=\"attr\">#[cfg(not(no_global_oom_handling))]\n#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;T: Clone, A: Allocator + Clone&gt; Clone <span class=\"kw\">for </span>Vec&lt;T, A&gt; {\n    <span class=\"attr\">#[cfg(not(test))]\n    </span><span class=\"kw\">fn </span>clone(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; <span class=\"self\">Self </span>{\n        <span class=\"kw\">let </span>alloc = <span class=\"self\">self</span>.allocator().clone();\n        &lt;[T]&gt;::to_vec_in(<span class=\"kw-2\">&amp;**</span><span class=\"self\">self</span>, alloc)\n    }\n\n    <span class=\"comment\">// HACK(japaric): with cfg(test) the inherent `[T]::to_vec` method, which is\n    // required for this method definition, is not available. Instead use the\n    // `slice::to_vec` function which is only available with cfg(test)\n    // NB see the slice::hack module in slice.rs for more information\n    </span><span class=\"attr\">#[cfg(test)]\n    </span><span class=\"kw\">fn </span>clone(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; <span class=\"self\">Self </span>{\n        <span class=\"kw\">let </span>alloc = <span class=\"self\">self</span>.allocator().clone();\n        <span class=\"kw\">crate</span>::slice::to_vec(<span class=\"kw-2\">&amp;**</span><span class=\"self\">self</span>, alloc)\n    }\n\n    <span class=\"doccomment\">/// Overwrites the contents of `self` with a clone of the contents of `source`.\n    ///\n    /// This method is preferred over simply assigning `source.clone()` to `self`,\n    /// as it avoids reallocation if possible. Additionally, if the element type\n    /// `T` overrides `clone_from()`, this will reuse the resources of `self`'s\n    /// elements as well.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let x = vec![5, 6, 7];\n    /// let mut y = vec![8, 9, 10];\n    /// let yp: *const i32 = y.as_ptr();\n    ///\n    /// y.clone_from(&amp;x);\n    ///\n    /// // The value is the same\n    /// assert_eq!(x, y);\n    ///\n    /// // And no reallocation occurred\n    /// assert_eq!(yp, y.as_ptr());\n    /// ```\n    </span><span class=\"kw\">fn </span>clone_from(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, source: <span class=\"kw-2\">&amp;</span><span class=\"self\">Self</span>) {\n        <span class=\"kw\">crate</span>::slice::SpecCloneIntoVec::clone_into(source.as_slice(), <span class=\"self\">self</span>);\n    }\n}\n\n<span class=\"doccomment\">/// The hash of a vector is the same as that of the corresponding slice,\n/// as required by the `core::borrow::Borrow` implementation.\n///\n/// ```\n/// use std::hash::BuildHasher;\n///\n/// let b = std::hash::RandomState::new();\n/// let v: Vec&lt;u8&gt; = vec![0xa8, 0x3c, 0x09];\n/// let s: &amp;[u8] = &amp;[0xa8, 0x3c, 0x09];\n/// assert_eq!(b.hash_one(v), b.hash_one(s));\n/// ```\n</span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;T: Hash, A: Allocator&gt; Hash <span class=\"kw\">for </span>Vec&lt;T, A&gt; {\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>hash&lt;H: Hasher&gt;(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, state: <span class=\"kw-2\">&amp;mut </span>H) {\n        Hash::hash(<span class=\"kw-2\">&amp;**</span><span class=\"self\">self</span>, state)\n    }\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n#[rustc_on_unimplemented(\n    message = <span class=\"string\">\"vector indices are of type `usize` or ranges of `usize`\"</span>,\n    label = <span class=\"string\">\"vector indices are of type `usize` or ranges of `usize`\"\n</span>)]\n</span><span class=\"kw\">impl</span>&lt;T, I: SliceIndex&lt;[T]&gt;, A: Allocator&gt; Index&lt;I&gt; <span class=\"kw\">for </span>Vec&lt;T, A&gt; {\n    <span class=\"kw\">type </span>Output = I::Output;\n\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>index(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, index: I) -&gt; <span class=\"kw-2\">&amp;</span><span class=\"self\">Self</span>::Output {\n        Index::index(<span class=\"kw-2\">&amp;**</span><span class=\"self\">self</span>, index)\n    }\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n#[rustc_on_unimplemented(\n    message = <span class=\"string\">\"vector indices are of type `usize` or ranges of `usize`\"</span>,\n    label = <span class=\"string\">\"vector indices are of type `usize` or ranges of `usize`\"\n</span>)]\n</span><span class=\"kw\">impl</span>&lt;T, I: SliceIndex&lt;[T]&gt;, A: Allocator&gt; IndexMut&lt;I&gt; <span class=\"kw\">for </span>Vec&lt;T, A&gt; {\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>index_mut(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, index: I) -&gt; <span class=\"kw-2\">&amp;mut </span><span class=\"self\">Self</span>::Output {\n        IndexMut::index_mut(<span class=\"kw-2\">&amp;mut **</span><span class=\"self\">self</span>, index)\n    }\n}\n\n<span class=\"doccomment\">/// Collects an iterator into a Vec, commonly called via [`Iterator::collect()`]\n///\n/// # Allocation behavior\n///\n/// In general `Vec` does not guarantee any particular growth or allocation strategy.\n/// That also applies to this trait impl.\n///\n/// **Note:** This section covers implementation details and is therefore exempt from\n/// stability guarantees.\n///\n/// Vec may use any or none of the following strategies,\n/// depending on the supplied iterator:\n///\n/// * preallocate based on [`Iterator::size_hint()`]\n///   * and panic if the number of items is outside the provided lower/upper bounds\n/// * use an amortized growth strategy similar to `pushing` one item at a time\n/// * perform the iteration in-place on the original allocation backing the iterator\n///\n/// The last case warrants some attention. It is an optimization that in many cases reduces peak memory\n/// consumption and improves cache locality. But when big, short-lived allocations are created,\n/// only a small fraction of their items get collected, no further use is made of the spare capacity\n/// and the resulting `Vec` is moved into a longer-lived structure, then this can lead to the large\n/// allocations having their lifetimes unnecessarily extended which can result in increased memory\n/// footprint.\n///\n/// In cases where this is an issue, the excess capacity can be discarded with [`Vec::shrink_to()`],\n/// [`Vec::shrink_to_fit()`] or by collecting into [`Box&lt;[T]&gt;`][owned slice] instead, which additionally reduces\n/// the size of the long-lived struct.\n///\n/// [owned slice]: Box\n///\n/// ```rust\n/// # use std::sync::Mutex;\n/// static LONG_LIVED: Mutex&lt;Vec&lt;Vec&lt;u16&gt;&gt;&gt; = Mutex::new(Vec::new());\n///\n/// for i in 0..10 {\n///     let big_temporary: Vec&lt;u16&gt; = (0..1024).collect();\n///     // discard most items\n///     let mut result: Vec&lt;_&gt; = big_temporary.into_iter().filter(|i| i % 100 == 0).collect();\n///     // without this a lot of unused capacity might be moved into the global\n///     result.shrink_to_fit();\n///     LONG_LIVED.lock().unwrap().push(result);\n/// }\n/// ```\n</span><span class=\"attr\">#[cfg(not(no_global_oom_handling))]\n#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;T&gt; FromIterator&lt;T&gt; <span class=\"kw\">for </span>Vec&lt;T&gt; {\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>from_iter&lt;I: IntoIterator&lt;Item = T&gt;&gt;(iter: I) -&gt; Vec&lt;T&gt; {\n        &lt;<span class=\"self\">Self </span><span class=\"kw\">as </span>SpecFromIter&lt;T, I::IntoIter&gt;&gt;::from_iter(iter.into_iter())\n    }\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;T, A: Allocator&gt; IntoIterator <span class=\"kw\">for </span>Vec&lt;T, A&gt; {\n    <span class=\"kw\">type </span>Item = T;\n    <span class=\"kw\">type </span>IntoIter = IntoIter&lt;T, A&gt;;\n\n    <span class=\"doccomment\">/// Creates a consuming iterator, that is, one that moves each value out of\n    /// the vector (from start to end). The vector cannot be used after calling\n    /// this.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let v = vec![\"a\".to_string(), \"b\".to_string()];\n    /// let mut v_iter = v.into_iter();\n    ///\n    /// let first_element: Option&lt;String&gt; = v_iter.next();\n    ///\n    /// assert_eq!(first_element, Some(\"a\".to_string()));\n    /// assert_eq!(v_iter.next(), Some(\"b\".to_string()));\n    /// assert_eq!(v_iter.next(), None);\n    /// ```\n    </span><span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>into_iter(<span class=\"self\">self</span>) -&gt; <span class=\"self\">Self</span>::IntoIter {\n        <span class=\"kw\">unsafe </span>{\n            <span class=\"kw\">let </span>me = ManuallyDrop::new(<span class=\"self\">self</span>);\n            <span class=\"kw\">let </span>alloc = ManuallyDrop::new(ptr::read(me.allocator()));\n            <span class=\"kw\">let </span>buf = me.buf.non_null();\n            <span class=\"kw\">let </span>begin = buf.as_ptr();\n            <span class=\"kw\">let </span>end = <span class=\"kw\">if </span>T::IS_ZST {\n                begin.wrapping_byte_add(me.len())\n            } <span class=\"kw\">else </span>{\n                begin.add(me.len()) <span class=\"kw\">as </span><span class=\"kw-2\">*const </span>T\n            };\n            <span class=\"kw\">let </span>cap = me.buf.capacity();\n            IntoIter { buf, phantom: PhantomData, cap, alloc, ptr: buf, end }\n        }\n    }\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;<span class=\"lifetime\">'a</span>, T, A: Allocator&gt; IntoIterator <span class=\"kw\">for </span><span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>Vec&lt;T, A&gt; {\n    <span class=\"kw\">type </span>Item = <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>T;\n    <span class=\"kw\">type </span>IntoIter = slice::Iter&lt;<span class=\"lifetime\">'a</span>, T&gt;;\n\n    <span class=\"kw\">fn </span>into_iter(<span class=\"self\">self</span>) -&gt; <span class=\"self\">Self</span>::IntoIter {\n        <span class=\"self\">self</span>.iter()\n    }\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;<span class=\"lifetime\">'a</span>, T, A: Allocator&gt; IntoIterator <span class=\"kw\">for </span><span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span><span class=\"kw-2\">mut </span>Vec&lt;T, A&gt; {\n    <span class=\"kw\">type </span>Item = <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span><span class=\"kw-2\">mut </span>T;\n    <span class=\"kw\">type </span>IntoIter = slice::IterMut&lt;<span class=\"lifetime\">'a</span>, T&gt;;\n\n    <span class=\"kw\">fn </span>into_iter(<span class=\"self\">self</span>) -&gt; <span class=\"self\">Self</span>::IntoIter {\n        <span class=\"self\">self</span>.iter_mut()\n    }\n}\n\n<span class=\"attr\">#[cfg(not(no_global_oom_handling))]\n#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;T, A: Allocator&gt; Extend&lt;T&gt; <span class=\"kw\">for </span>Vec&lt;T, A&gt; {\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>extend&lt;I: IntoIterator&lt;Item = T&gt;&gt;(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, iter: I) {\n        &lt;<span class=\"self\">Self </span><span class=\"kw\">as </span>SpecExtend&lt;T, I::IntoIter&gt;&gt;::spec_extend(<span class=\"self\">self</span>, iter.into_iter())\n    }\n\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>extend_one(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, item: T) {\n        <span class=\"self\">self</span>.push(item);\n    }\n\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>extend_reserve(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, additional: usize) {\n        <span class=\"self\">self</span>.reserve(additional);\n    }\n}\n\n<span class=\"kw\">impl</span>&lt;T, A: Allocator&gt; Vec&lt;T, A&gt; {\n    <span class=\"comment\">// leaf method to which various SpecFrom/SpecExtend implementations delegate when\n    // they have no further optimizations to apply\n    </span><span class=\"attr\">#[cfg(not(no_global_oom_handling))]\n    </span><span class=\"kw\">fn </span>extend_desugared&lt;I: Iterator&lt;Item = T&gt;&gt;(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, <span class=\"kw-2\">mut </span>iterator: I) {\n        <span class=\"comment\">// This is the case for a general iterator.\n        //\n        // This function should be the moral equivalent of:\n        //\n        //      for item in iterator {\n        //          self.push(item);\n        //      }\n        </span><span class=\"kw\">while let </span><span class=\"prelude-val\">Some</span>(element) = iterator.next() {\n            <span class=\"kw\">let </span>len = <span class=\"self\">self</span>.len();\n            <span class=\"kw\">if </span>len == <span class=\"self\">self</span>.capacity() {\n                <span class=\"kw\">let </span>(lower, <span class=\"kw\">_</span>) = iterator.size_hint();\n                <span class=\"self\">self</span>.reserve(lower.saturating_add(<span class=\"number\">1</span>));\n            }\n            <span class=\"kw\">unsafe </span>{\n                ptr::write(<span class=\"self\">self</span>.as_mut_ptr().add(len), element);\n                <span class=\"comment\">// Since next() executes user code which can panic we have to bump the length\n                // after each step.\n                // NB can't overflow since we would have had to alloc the address space\n                </span><span class=\"self\">self</span>.set_len(len + <span class=\"number\">1</span>);\n            }\n        }\n    }\n\n    <span class=\"comment\">// specific extend for `TrustedLen` iterators, called both by the specializations\n    // and internal places where resolving specialization makes compilation slower\n    </span><span class=\"attr\">#[cfg(not(no_global_oom_handling))]\n    </span><span class=\"kw\">fn </span>extend_trusted(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, iterator: <span class=\"kw\">impl </span>iter::TrustedLen&lt;Item = T&gt;) {\n        <span class=\"kw\">let </span>(low, high) = iterator.size_hint();\n        <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(additional) = high {\n            <span class=\"macro\">debug_assert_eq!</span>(\n                low,\n                additional,\n                <span class=\"string\">\"TrustedLen iterator's size hint is not exact: {:?}\"</span>,\n                (low, high)\n            );\n            <span class=\"self\">self</span>.reserve(additional);\n            <span class=\"kw\">unsafe </span>{\n                <span class=\"kw\">let </span>ptr = <span class=\"self\">self</span>.as_mut_ptr();\n                <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>local_len = SetLenOnDrop::new(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>.len);\n                iterator.for_each(<span class=\"kw\">move </span>|element| {\n                    ptr::write(ptr.add(local_len.current_len()), element);\n                    <span class=\"comment\">// Since the loop executes user code which can panic we have to update\n                    // the length every step to correctly drop what we've written.\n                    // NB can't overflow since we would have had to alloc the address space\n                    </span>local_len.increment_len(<span class=\"number\">1</span>);\n                });\n            }\n        } <span class=\"kw\">else </span>{\n            <span class=\"comment\">// Per TrustedLen contract a `None` upper bound means that the iterator length\n            // truly exceeds usize::MAX, which would eventually lead to a capacity overflow anyway.\n            // Since the other branch already panics eagerly (via `reserve()`) we do the same here.\n            // This avoids additional codegen for a fallback code path which would eventually\n            // panic anyway.\n            </span><span class=\"macro\">panic!</span>(<span class=\"string\">\"capacity overflow\"</span>);\n        }\n    }\n\n    <span class=\"doccomment\">/// Creates a splicing iterator that replaces the specified range in the vector\n    /// with the given `replace_with` iterator and yields the removed items.\n    /// `replace_with` does not need to be the same length as `range`.\n    ///\n    /// `range` is removed even if the iterator is not consumed until the end.\n    ///\n    /// It is unspecified how many elements are removed from the vector\n    /// if the `Splice` value is leaked.\n    ///\n    /// The input iterator `replace_with` is only consumed when the `Splice` value is dropped.\n    ///\n    /// This is optimal if:\n    ///\n    /// * The tail (elements in the vector after `range`) is empty,\n    /// * or `replace_with` yields fewer or equal elements than `range`’s length\n    /// * or the lower bound of its `size_hint()` is exact.\n    ///\n    /// Otherwise, a temporary vector is allocated and the tail is moved twice.\n    ///\n    /// # Panics\n    ///\n    /// Panics if the starting point is greater than the end point or if\n    /// the end point is greater than the length of the vector.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let mut v = vec![1, 2, 3, 4];\n    /// let new = [7, 8, 9];\n    /// let u: Vec&lt;_&gt; = v.splice(1..3, new).collect();\n    /// assert_eq!(v, &amp;[1, 7, 8, 9, 4]);\n    /// assert_eq!(u, &amp;[2, 3]);\n    /// ```\n    </span><span class=\"attr\">#[cfg(not(no_global_oom_handling))]\n    #[inline]\n    #[stable(feature = <span class=\"string\">\"vec_splice\"</span>, since = <span class=\"string\">\"1.21.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>splice&lt;R, I&gt;(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, range: R, replace_with: I) -&gt; Splice&lt;<span class=\"lifetime\">'_</span>, I::IntoIter, A&gt;\n    <span class=\"kw\">where\n        </span>R: RangeBounds&lt;usize&gt;,\n        I: IntoIterator&lt;Item = T&gt;,\n    {\n        Splice { drain: <span class=\"self\">self</span>.drain(range), replace_with: replace_with.into_iter() }\n    }\n\n    <span class=\"doccomment\">/// Creates an iterator which uses a closure to determine if an element should be removed.\n    ///\n    /// If the closure returns true, then the element is removed and yielded.\n    /// If the closure returns false, the element will remain in the vector and will not be yielded\n    /// by the iterator.\n    ///\n    /// If the returned `ExtractIf` is not exhausted, e.g. because it is dropped without iterating\n    /// or the iteration short-circuits, then the remaining elements will be retained.\n    /// Use [`retain`] with a negated predicate if you do not need the returned iterator.\n    ///\n    /// [`retain`]: Vec::retain\n    ///\n    /// Using this method is equivalent to the following code:\n    ///\n    /// ```\n    /// # let some_predicate = |x: &amp;mut i32| { *x == 2 || *x == 3 || *x == 6 };\n    /// # let mut vec = vec![1, 2, 3, 4, 5, 6];\n    /// let mut i = 0;\n    /// while i &lt; vec.len() {\n    ///     if some_predicate(&amp;mut vec[i]) {\n    ///         let val = vec.remove(i);\n    ///         // your code here\n    ///     } else {\n    ///         i += 1;\n    ///     }\n    /// }\n    ///\n    /// # assert_eq!(vec, vec![1, 4, 5]);\n    /// ```\n    ///\n    /// But `extract_if` is easier to use. `extract_if` is also more efficient,\n    /// because it can backshift the elements of the array in bulk.\n    ///\n    /// Note that `extract_if` also lets you mutate every element in the filter closure,\n    /// regardless of whether you choose to keep or remove it.\n    ///\n    /// # Examples\n    ///\n    /// Splitting an array into evens and odds, reusing the original allocation:\n    ///\n    /// ```\n    /// #![feature(extract_if)]\n    /// let mut numbers = vec![1, 2, 3, 4, 5, 6, 8, 9, 11, 13, 14, 15];\n    ///\n    /// let evens = numbers.extract_if(|x| *x % 2 == 0).collect::&lt;Vec&lt;_&gt;&gt;();\n    /// let odds = numbers;\n    ///\n    /// assert_eq!(evens, vec![2, 4, 6, 8, 14]);\n    /// assert_eq!(odds, vec![1, 3, 5, 9, 11, 13, 15]);\n    /// ```\n    </span><span class=\"attr\">#[unstable(feature = <span class=\"string\">\"extract_if\"</span>, reason = <span class=\"string\">\"recently added\"</span>, issue = <span class=\"string\">\"43244\"</span>)]\n    </span><span class=\"kw\">pub fn </span>extract_if&lt;F&gt;(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, filter: F) -&gt; ExtractIf&lt;<span class=\"lifetime\">'_</span>, T, F, A&gt;\n    <span class=\"kw\">where\n        </span>F: FnMut(<span class=\"kw-2\">&amp;mut </span>T) -&gt; bool,\n    {\n        <span class=\"kw\">let </span>old_len = <span class=\"self\">self</span>.len();\n\n        <span class=\"comment\">// Guard against us getting leaked (leak amplification)\n        </span><span class=\"kw\">unsafe </span>{\n            <span class=\"self\">self</span>.set_len(<span class=\"number\">0</span>);\n        }\n\n        ExtractIf { vec: <span class=\"self\">self</span>, idx: <span class=\"number\">0</span>, del: <span class=\"number\">0</span>, old_len, pred: filter }\n    }\n}\n\n<span class=\"doccomment\">/// Extend implementation that copies elements out of references before pushing them onto the Vec.\n///\n/// This implementation is specialized for slice iterators, where it uses [`copy_from_slice`] to\n/// append the entire slice at once.\n///\n/// [`copy_from_slice`]: slice::copy_from_slice\n</span><span class=\"attr\">#[cfg(not(no_global_oom_handling))]\n#[stable(feature = <span class=\"string\">\"extend_ref\"</span>, since = <span class=\"string\">\"1.2.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;<span class=\"lifetime\">'a</span>, T: Copy + <span class=\"lifetime\">'a</span>, A: Allocator&gt; Extend&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>T&gt; <span class=\"kw\">for </span>Vec&lt;T, A&gt; {\n    <span class=\"kw\">fn </span>extend&lt;I: IntoIterator&lt;Item = <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>T&gt;&gt;(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, iter: I) {\n        <span class=\"self\">self</span>.spec_extend(iter.into_iter())\n    }\n\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>extend_one(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, <span class=\"kw-2\">&amp;</span>item: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>T) {\n        <span class=\"self\">self</span>.push(item);\n    }\n\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>extend_reserve(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, additional: usize) {\n        <span class=\"self\">self</span>.reserve(additional);\n    }\n}\n\n<span class=\"doccomment\">/// Implements comparison of vectors, [lexicographically](Ord#lexicographical-comparison).\n</span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;T, A1, A2&gt; PartialOrd&lt;Vec&lt;T, A2&gt;&gt; <span class=\"kw\">for </span>Vec&lt;T, A1&gt;\n<span class=\"kw\">where\n    </span>T: PartialOrd,\n    A1: Allocator,\n    A2: Allocator,\n{\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>partial_cmp(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, other: <span class=\"kw-2\">&amp;</span>Vec&lt;T, A2&gt;) -&gt; <span class=\"prelude-ty\">Option</span>&lt;Ordering&gt; {\n        PartialOrd::partial_cmp(<span class=\"kw-2\">&amp;**</span><span class=\"self\">self</span>, <span class=\"kw-2\">&amp;**</span>other)\n    }\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;T: Eq, A: Allocator&gt; Eq <span class=\"kw\">for </span>Vec&lt;T, A&gt; {}\n\n<span class=\"doccomment\">/// Implements ordering of vectors, [lexicographically](Ord#lexicographical-comparison).\n</span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;T: Ord, A: Allocator&gt; Ord <span class=\"kw\">for </span>Vec&lt;T, A&gt; {\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>cmp(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, other: <span class=\"kw-2\">&amp;</span><span class=\"self\">Self</span>) -&gt; Ordering {\n        Ord::cmp(<span class=\"kw-2\">&amp;**</span><span class=\"self\">self</span>, <span class=\"kw-2\">&amp;**</span>other)\n    }\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">unsafe impl</span>&lt;<span class=\"attr\">#[may_dangle] </span>T, A: Allocator&gt; Drop <span class=\"kw\">for </span>Vec&lt;T, A&gt; {\n    <span class=\"kw\">fn </span>drop(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) {\n        <span class=\"kw\">unsafe </span>{\n            <span class=\"comment\">// use drop for [T]\n            // use a raw slice to refer to the elements of the vector as weakest necessary type;\n            // could avoid questions of validity in certain cases\n            </span>ptr::drop_in_place(ptr::slice_from_raw_parts_mut(<span class=\"self\">self</span>.as_mut_ptr(), <span class=\"self\">self</span>.len))\n        }\n        <span class=\"comment\">// RawVec handles deallocation\n    </span>}\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;T&gt; Default <span class=\"kw\">for </span>Vec&lt;T&gt; {\n    <span class=\"doccomment\">/// Creates an empty `Vec&lt;T&gt;`.\n    ///\n    /// The vector will not allocate until elements are pushed onto it.\n    </span><span class=\"kw\">fn </span>default() -&gt; Vec&lt;T&gt; {\n        Vec::new()\n    }\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;T: fmt::Debug, A: Allocator&gt; fmt::Debug <span class=\"kw\">for </span>Vec&lt;T, A&gt; {\n    <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, f: <span class=\"kw-2\">&amp;mut </span>fmt::Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; fmt::Result {\n        fmt::Debug::fmt(<span class=\"kw-2\">&amp;**</span><span class=\"self\">self</span>, f)\n    }\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;T, A: Allocator&gt; AsRef&lt;Vec&lt;T, A&gt;&gt; <span class=\"kw\">for </span>Vec&lt;T, A&gt; {\n    <span class=\"kw\">fn </span>as_ref(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; <span class=\"kw-2\">&amp;</span>Vec&lt;T, A&gt; {\n        <span class=\"self\">self\n    </span>}\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"vec_as_mut\"</span>, since = <span class=\"string\">\"1.5.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;T, A: Allocator&gt; AsMut&lt;Vec&lt;T, A&gt;&gt; <span class=\"kw\">for </span>Vec&lt;T, A&gt; {\n    <span class=\"kw\">fn </span>as_mut(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) -&gt; <span class=\"kw-2\">&amp;mut </span>Vec&lt;T, A&gt; {\n        <span class=\"self\">self\n    </span>}\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;T, A: Allocator&gt; AsRef&lt;[T]&gt; <span class=\"kw\">for </span>Vec&lt;T, A&gt; {\n    <span class=\"kw\">fn </span>as_ref(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; <span class=\"kw-2\">&amp;</span>[T] {\n        <span class=\"self\">self\n    </span>}\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"vec_as_mut\"</span>, since = <span class=\"string\">\"1.5.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;T, A: Allocator&gt; AsMut&lt;[T]&gt; <span class=\"kw\">for </span>Vec&lt;T, A&gt; {\n    <span class=\"kw\">fn </span>as_mut(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) -&gt; <span class=\"kw-2\">&amp;mut </span>[T] {\n        <span class=\"self\">self\n    </span>}\n}\n\n<span class=\"attr\">#[cfg(not(no_global_oom_handling))]\n#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;T: Clone&gt; From&lt;<span class=\"kw-2\">&amp;</span>[T]&gt; <span class=\"kw\">for </span>Vec&lt;T&gt; {\n    <span class=\"doccomment\">/// Allocate a `Vec&lt;T&gt;` and fill it by cloning `s`'s items.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// assert_eq!(Vec::from(&amp;[1, 2, 3][..]), vec![1, 2, 3]);\n    /// ```\n    </span><span class=\"attr\">#[cfg(not(test))]\n    </span><span class=\"kw\">fn </span>from(s: <span class=\"kw-2\">&amp;</span>[T]) -&gt; Vec&lt;T&gt; {\n        s.to_vec()\n    }\n    <span class=\"attr\">#[cfg(test)]\n    </span><span class=\"kw\">fn </span>from(s: <span class=\"kw-2\">&amp;</span>[T]) -&gt; Vec&lt;T&gt; {\n        <span class=\"kw\">crate</span>::slice::to_vec(s, Global)\n    }\n}\n\n<span class=\"attr\">#[cfg(not(no_global_oom_handling))]\n#[stable(feature = <span class=\"string\">\"vec_from_mut\"</span>, since = <span class=\"string\">\"1.19.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;T: Clone&gt; From&lt;<span class=\"kw-2\">&amp;mut </span>[T]&gt; <span class=\"kw\">for </span>Vec&lt;T&gt; {\n    <span class=\"doccomment\">/// Allocate a `Vec&lt;T&gt;` and fill it by cloning `s`'s items.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// assert_eq!(Vec::from(&amp;mut [1, 2, 3][..]), vec![1, 2, 3]);\n    /// ```\n    </span><span class=\"attr\">#[cfg(not(test))]\n    </span><span class=\"kw\">fn </span>from(s: <span class=\"kw-2\">&amp;mut </span>[T]) -&gt; Vec&lt;T&gt; {\n        s.to_vec()\n    }\n    <span class=\"attr\">#[cfg(test)]\n    </span><span class=\"kw\">fn </span>from(s: <span class=\"kw-2\">&amp;mut </span>[T]) -&gt; Vec&lt;T&gt; {\n        <span class=\"kw\">crate</span>::slice::to_vec(s, Global)\n    }\n}\n\n<span class=\"attr\">#[cfg(not(no_global_oom_handling))]\n#[stable(feature = <span class=\"string\">\"vec_from_array_ref\"</span>, since = <span class=\"string\">\"1.74.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;T: Clone, <span class=\"kw\">const </span>N: usize&gt; From&lt;<span class=\"kw-2\">&amp;</span>[T; N]&gt; <span class=\"kw\">for </span>Vec&lt;T&gt; {\n    <span class=\"doccomment\">/// Allocate a `Vec&lt;T&gt;` and fill it by cloning `s`'s items.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// assert_eq!(Vec::from(&amp;[1, 2, 3]), vec![1, 2, 3]);\n    /// ```\n    </span><span class=\"kw\">fn </span>from(s: <span class=\"kw-2\">&amp;</span>[T; N]) -&gt; Vec&lt;T&gt; {\n        <span class=\"self\">Self</span>::from(s.as_slice())\n    }\n}\n\n<span class=\"attr\">#[cfg(not(no_global_oom_handling))]\n#[stable(feature = <span class=\"string\">\"vec_from_array_ref\"</span>, since = <span class=\"string\">\"1.74.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;T: Clone, <span class=\"kw\">const </span>N: usize&gt; From&lt;<span class=\"kw-2\">&amp;mut </span>[T; N]&gt; <span class=\"kw\">for </span>Vec&lt;T&gt; {\n    <span class=\"doccomment\">/// Allocate a `Vec&lt;T&gt;` and fill it by cloning `s`'s items.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// assert_eq!(Vec::from(&amp;mut [1, 2, 3]), vec![1, 2, 3]);\n    /// ```\n    </span><span class=\"kw\">fn </span>from(s: <span class=\"kw-2\">&amp;mut </span>[T; N]) -&gt; Vec&lt;T&gt; {\n        <span class=\"self\">Self</span>::from(s.as_mut_slice())\n    }\n}\n\n<span class=\"attr\">#[cfg(not(no_global_oom_handling))]\n#[stable(feature = <span class=\"string\">\"vec_from_array\"</span>, since = <span class=\"string\">\"1.44.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;T, <span class=\"kw\">const </span>N: usize&gt; From&lt;[T; N]&gt; <span class=\"kw\">for </span>Vec&lt;T&gt; {\n    <span class=\"doccomment\">/// Allocate a `Vec&lt;T&gt;` and move `s`'s items into it.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// assert_eq!(Vec::from([1, 2, 3]), vec![1, 2, 3]);\n    /// ```\n    </span><span class=\"attr\">#[cfg(not(test))]\n    </span><span class=\"kw\">fn </span>from(s: [T; N]) -&gt; Vec&lt;T&gt; {\n        &lt;[T]&gt;::into_vec(Box::new(s))\n    }\n\n    <span class=\"attr\">#[cfg(test)]\n    </span><span class=\"kw\">fn </span>from(s: [T; N]) -&gt; Vec&lt;T&gt; {\n        <span class=\"kw\">crate</span>::slice::into_vec(Box::new(s))\n    }\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"vec_from_cow_slice\"</span>, since = <span class=\"string\">\"1.14.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;<span class=\"lifetime\">'a</span>, T&gt; From&lt;Cow&lt;<span class=\"lifetime\">'a</span>, [T]&gt;&gt; <span class=\"kw\">for </span>Vec&lt;T&gt;\n<span class=\"kw\">where\n    </span>[T]: ToOwned&lt;Owned = Vec&lt;T&gt;&gt;,\n{\n    <span class=\"doccomment\">/// Convert a clone-on-write slice into a vector.\n    ///\n    /// If `s` already owns a `Vec&lt;T&gt;`, it will be returned directly.\n    /// If `s` is borrowing a slice, a new `Vec&lt;T&gt;` will be allocated and\n    /// filled by cloning `s`'s items into it.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// # use std::borrow::Cow;\n    /// let o: Cow&lt;'_, [i32]&gt; = Cow::Owned(vec![1, 2, 3]);\n    /// let b: Cow&lt;'_, [i32]&gt; = Cow::Borrowed(&amp;[1, 2, 3]);\n    /// assert_eq!(Vec::from(o), Vec::from(b));\n    /// ```\n    </span><span class=\"kw\">fn </span>from(s: Cow&lt;<span class=\"lifetime\">'a</span>, [T]&gt;) -&gt; Vec&lt;T&gt; {\n        s.into_owned()\n    }\n}\n\n<span class=\"comment\">// note: test pulls in std, which causes errors here\n</span><span class=\"attr\">#[cfg(not(test))]\n#[stable(feature = <span class=\"string\">\"vec_from_box\"</span>, since = <span class=\"string\">\"1.18.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;T, A: Allocator&gt; From&lt;Box&lt;[T], A&gt;&gt; <span class=\"kw\">for </span>Vec&lt;T, A&gt; {\n    <span class=\"doccomment\">/// Convert a boxed slice into a vector by transferring ownership of\n    /// the existing heap allocation.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let b: Box&lt;[i32]&gt; = vec![1, 2, 3].into_boxed_slice();\n    /// assert_eq!(Vec::from(b), vec![1, 2, 3]);\n    /// ```\n    </span><span class=\"kw\">fn </span>from(s: Box&lt;[T], A&gt;) -&gt; <span class=\"self\">Self </span>{\n        s.into_vec()\n    }\n}\n\n<span class=\"comment\">// note: test pulls in std, which causes errors here\n</span><span class=\"attr\">#[cfg(not(no_global_oom_handling))]\n#[cfg(not(test))]\n#[stable(feature = <span class=\"string\">\"box_from_vec\"</span>, since = <span class=\"string\">\"1.20.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;T, A: Allocator&gt; From&lt;Vec&lt;T, A&gt;&gt; <span class=\"kw\">for </span>Box&lt;[T], A&gt; {\n    <span class=\"doccomment\">/// Convert a vector into a boxed slice.\n    ///\n    /// Before doing the conversion, this method discards excess capacity like [`Vec::shrink_to_fit`].\n    ///\n    /// [owned slice]: Box\n    /// [`Vec::shrink_to_fit`]: Vec::shrink_to_fit\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// assert_eq!(Box::from(vec![1, 2, 3]), vec![1, 2, 3].into_boxed_slice());\n    /// ```\n    ///\n    /// Any excess capacity is removed:\n    /// ```\n    /// let mut vec = Vec::with_capacity(10);\n    /// vec.extend([1, 2, 3]);\n    ///\n    /// assert_eq!(Box::from(vec), vec![1, 2, 3].into_boxed_slice());\n    /// ```\n    </span><span class=\"kw\">fn </span>from(v: Vec&lt;T, A&gt;) -&gt; <span class=\"self\">Self </span>{\n        v.into_boxed_slice()\n    }\n}\n\n<span class=\"attr\">#[cfg(not(no_global_oom_handling))]\n#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl </span>From&lt;<span class=\"kw-2\">&amp;</span>str&gt; <span class=\"kw\">for </span>Vec&lt;u8&gt; {\n    <span class=\"doccomment\">/// Allocate a `Vec&lt;u8&gt;` and fill it with a UTF-8 string.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// assert_eq!(Vec::from(\"123\"), vec![b'1', b'2', b'3']);\n    /// ```\n    </span><span class=\"kw\">fn </span>from(s: <span class=\"kw-2\">&amp;</span>str) -&gt; Vec&lt;u8&gt; {\n        From::from(s.as_bytes())\n    }\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"array_try_from_vec\"</span>, since = <span class=\"string\">\"1.48.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;T, A: Allocator, <span class=\"kw\">const </span>N: usize&gt; TryFrom&lt;Vec&lt;T, A&gt;&gt; <span class=\"kw\">for </span>[T; N] {\n    <span class=\"kw\">type </span>Error = Vec&lt;T, A&gt;;\n\n    <span class=\"doccomment\">/// Gets the entire contents of the `Vec&lt;T&gt;` as an array,\n    /// if its size exactly matches that of the requested array.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// assert_eq!(vec![1, 2, 3].try_into(), Ok([1, 2, 3]));\n    /// assert_eq!(&lt;Vec&lt;i32&gt;&gt;::new().try_into(), Ok([]));\n    /// ```\n    ///\n    /// If the length doesn't match, the input comes back in `Err`:\n    /// ```\n    /// let r: Result&lt;[i32; 4], _&gt; = (0..10).collect::&lt;Vec&lt;_&gt;&gt;().try_into();\n    /// assert_eq!(r, Err(vec![0, 1, 2, 3, 4, 5, 6, 7, 8, 9]));\n    /// ```\n    ///\n    /// If you're fine with just getting a prefix of the `Vec&lt;T&gt;`,\n    /// you can call [`.truncate(N)`](Vec::truncate) first.\n    /// ```\n    /// let mut v = String::from(\"hello world\").into_bytes();\n    /// v.sort();\n    /// v.truncate(2);\n    /// let [a, b]: [_; 2] = v.try_into().unwrap();\n    /// assert_eq!(a, b' ');\n    /// assert_eq!(b, b'd');\n    /// ```\n    </span><span class=\"kw\">fn </span>try_from(<span class=\"kw-2\">mut </span>vec: Vec&lt;T, A&gt;) -&gt; <span class=\"prelude-ty\">Result</span>&lt;[T; N], Vec&lt;T, A&gt;&gt; {\n        <span class=\"kw\">if </span>vec.len() != N {\n            <span class=\"kw\">return </span><span class=\"prelude-val\">Err</span>(vec);\n        }\n\n        <span class=\"comment\">// SAFETY: `.set_len(0)` is always sound.\n        </span><span class=\"kw\">unsafe </span>{ vec.set_len(<span class=\"number\">0</span>) };\n\n        <span class=\"comment\">// SAFETY: A `Vec`'s pointer is always aligned properly, and\n        // the alignment the array needs is the same as the items.\n        // We checked earlier that we have sufficient items.\n        // The items will not double-drop as the `set_len`\n        // tells the `Vec` not to also drop them.\n        </span><span class=\"kw\">let </span>array = <span class=\"kw\">unsafe </span>{ ptr::read(vec.as_ptr() <span class=\"kw\">as </span><span class=\"kw-2\">*const </span>[T; N]) };\n        <span class=\"prelude-val\">Ok</span>(array)\n    }\n}\n</code></pre></div></section></main></body></html>",
	"crawlDate": "2024-07-28T05:28:45.547Z"
}