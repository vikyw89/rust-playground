{
	"title": "Profiles - The Cargo Book",
	"url": "https://doc.rust-lang.org/cargo/reference/profiles.html",
	"markdown": "# Profiles - The Cargo Book\n\nProfiles provide a way to alter the compiler settings, influencing things like optimizations and debugging symbols.\n\nCargo has 4 built-in profiles: `dev`, `release`, `test`, and `bench`. The profile is automatically chosen based on which command is being run if a profile is not specified on the command-line. In addition to the built-in profiles, custom user-defined profiles can also be specified.\n\nProfile settings can be changed in [`Cargo.toml`](manifest.html) with the `[profile]` table. Within each named profile, individual settings can be changed with key/value pairs like this:\n\n```toml\n[profile.dev]\nopt-level = 1               # Use slightly better optimizations.\noverflow-checks = false     # Disable integer overflow checks.\n\n```\n\nCargo only looks at the profile settings in the `Cargo.toml` manifest at the root of the workspace. Profile settings defined in dependencies will be ignored.\n\nAdditionally, profiles can be overridden from a [config](config.html) definition. Specifying a profile in a config file or environment variable will override the settings from `Cargo.toml`.\n\n## [Profile settings](#profile-settings)\n\nThe following is a list of settings that can be controlled in a profile.\n\n### [opt-level](#opt-level)\n\nThe `opt-level` setting controls the [`-C opt-level` flag](about:blank/rustc/codegen-options/index.html#opt-level) which controls the level of optimization. Higher optimization levels may produce faster runtime code at the expense of longer compiler times. Higher levels may also change and rearrange the compiled code which may make it harder to use with a debugger.\n\nThe valid options are:\n\n-   `0`: no optimizations\n-   `1`: basic optimizations\n-   `2`: some optimizations\n-   `3`: all optimizations\n-   `\"s\"`: optimize for binary size\n-   `\"z\"`: optimize for binary size, but also turn off loop vectorization.\n\nIt is recommended to experiment with different levels to find the right balance for your project. There may be surprising results, such as level `3` being slower than `2`, or the `\"s\"` and `\"z\"` levels not being necessarily smaller. You may also want to reevaluate your settings over time as newer versions of `rustc` change optimization behavior.\n\nSee also [Profile Guided Optimization](../../rustc/profile-guided-optimization.html) for more advanced optimization techniques.\n\n### [debug](#debug)\n\nThe `debug` setting controls the [`-C debuginfo` flag](about:blank/rustc/codegen-options/index.html#debuginfo) which controls the amount of debug information included in the compiled binary.\n\nThe valid options are:\n\n-   `0`, `false`, or `\"none\"`: no debug info at all, default for [`release`](#release)\n-   `\"line-directives-only\"`: line info directives only. For the nvptx\\* targets this enables [profiling](https://reviews.llvm.org/D46061). For other use cases, `line-tables-only` is the better, more compatible choice.\n-   `\"line-tables-only\"`: line tables only. Generates the minimal amount of debug info for backtraces with filename/line number info, but not anything else, i.e. no variable or function parameter info.\n-   `1` or `\"limited\"`: debug info without type or variable-level information. Generates more detailed module-level info than `line-tables-only`.\n-   `2`, `true`, or `\"full\"`: full debug info, default for [`dev`](#dev)\n\nFor more information on what each option does see `rustc`’s docs on [debuginfo](about:blank/rustc/codegen-options/index.html#debuginfo).\n\nYou may wish to also configure the [`split-debuginfo`](#split-debuginfo) option depending on your needs as well.\n\n### [split-debuginfo](#split-debuginfo)\n\nThe `split-debuginfo` setting controls the [`-C split-debuginfo` flag](about:blank/rustc/codegen-options/index.html#split-debuginfo) which controls whether debug information, if generated, is either placed in the executable itself or adjacent to it.\n\nThis option is a string and acceptable values are the same as those the [compiler accepts](about:blank/rustc/codegen-options/index.html#split-debuginfo). The default value for this option is `unpacked` on macOS for profiles that have debug information otherwise enabled. Otherwise the default for this option is [documented with rustc](about:blank/rustc/codegen-options/index.html#split-debuginfo) and is platform-specific. Some options are only available on the [nightly channel](../../book/appendix-07-nightly-rust.html). The Cargo default may change in the future once more testing has been performed, and support for DWARF is stabilized.\n\nBe aware that Cargo and rustc have different defaults for this option. This option exists to allow Cargo to experiment on different combinations of flags thus providing better debugging and developer experience.\n\n### [strip](#strip)\n\nThe `strip` option controls the [`-C strip` flag](about:blank/rustc/codegen-options/index.html#strip), which directs rustc to strip either symbols or debuginfo from a binary. This can be enabled like so:\n\n```toml\n[package]\n# ...\n\n[profile.release]\nstrip = \"debuginfo\"\n\n```\n\nPossible string values of `strip` are `\"none\"`, `\"debuginfo\"`, and `\"symbols\"`. The default is `\"none\"`.\n\nYou can also configure this option with the boolean values `true` or `false`. `strip = true` is equivalent to `strip = \"symbols\"`. `strip = false` is equivalent to `strip = \"none\"` and disables `strip` completely.\n\n### [debug-assertions](#debug-assertions)\n\nThe `debug-assertions` setting controls the [`-C debug-assertions` flag](about:blank/rustc/codegen-options/index.html#debug-assertions) which turns `cfg(debug_assertions)` [conditional compilation](about:blank/reference/conditional-compilation.html#debug_assertions) on or off. Debug assertions are intended to include runtime validation which is only available in debug/development builds. These may be things that are too expensive or otherwise undesirable in a release build. Debug assertions enables the [`debug_assert!` macro](../../std/macro.debug_assert.html) in the standard library.\n\nThe valid options are:\n\n-   `true`: enabled\n-   `false`: disabled\n\n### [overflow-checks](#overflow-checks)\n\nThe `overflow-checks` setting controls the [`-C overflow-checks` flag](about:blank/rustc/codegen-options/index.html#overflow-checks) which controls the behavior of [runtime integer overflow](about:blank/reference/expressions/operator-expr.html#overflow). When overflow-checks are enabled, a panic will occur on overflow.\n\nThe valid options are:\n\n-   `true`: enabled\n-   `false`: disabled\n\n### [lto](#lto)\n\nThe `lto` setting controls `rustc`’s [`-C lto`](about:blank/rustc/codegen-options/index.html#lto), [`-C linker-plugin-lto`](about:blank/rustc/codegen-options/index.html#linker-plugin-lto), and [`-C embed-bitcode`](about:blank/rustc/codegen-options/index.html#embed-bitcode) options, which control LLVM’s [link time optimizations](https://llvm.org/docs/LinkTimeOptimization.html). LTO can produce better optimized code, using whole-program analysis, at the cost of longer linking time.\n\nThe valid options are:\n\n-   `false`: Performs “thin local LTO” which performs “thin” LTO on the local crate only across its [codegen units](#codegen-units). No LTO is performed if codegen units is 1 or [opt-level](#opt-level) is 0.\n-   `true` or `\"fat\"`: Performs “fat” LTO which attempts to perform optimizations across all crates within the dependency graph.\n-   `\"thin\"`: Performs [“thin” LTO](http://blog.llvm.org/2016/06/thinlto-scalable-and-incremental-lto.html). This is similar to “fat”, but takes substantially less time to run while still achieving performance gains similar to “fat”.\n-   `\"off\"`: Disables LTO.\n\nSee the [linker-plugin-lto chapter](../../rustc/linker-plugin-lto.html) if you are interested in cross-language LTO. This is not yet supported natively in Cargo, but can be performed via `RUSTFLAGS`.\n\n### [panic](#panic)\n\nThe `panic` setting controls the [`-C panic` flag](about:blank/rustc/codegen-options/index.html#panic) which controls which panic strategy to use.\n\nThe valid options are:\n\n-   `\"unwind\"`: Unwind the stack upon panic.\n-   `\"abort\"`: Terminate the process upon panic.\n\nWhen set to `\"unwind\"`, the actual value depends on the default of the target platform. For example, the NVPTX platform does not support unwinding, so it always uses `\"abort\"`.\n\nTests, benchmarks, build scripts, and proc macros ignore the `panic` setting. The `rustc` test harness currently requires `unwind` behavior. See the [`panic-abort-tests`](about:blank/unstable.html#panic-abort-tests) unstable flag which enables `abort` behavior.\n\nAdditionally, when using the `abort` strategy and building a test, all of the dependencies will also be forced to build with the `unwind` strategy.\n\n### [incremental](#incremental)\n\nThe `incremental` setting controls the [`-C incremental` flag](about:blank/rustc/codegen-options/index.html#incremental) which controls whether or not incremental compilation is enabled. Incremental compilation causes `rustc` to save additional information to disk which will be reused when recompiling the crate, improving re-compile times. The additional information is stored in the `target` directory.\n\nThe valid options are:\n\n-   `true`: enabled\n-   `false`: disabled\n\nIncremental compilation is only used for workspace members and “path” dependencies.\n\nThe incremental value can be overridden globally with the `CARGO_INCREMENTAL` [environment variable](environment-variables.html) or the [`build.incremental`](about:blank/config.html#buildincremental) config variable.\n\n### [codegen-units](#codegen-units)\n\nThe `codegen-units` setting controls the [`-C codegen-units` flag](about:blank/rustc/codegen-options/index.html#codegen-units) which controls how many “code generation units” a crate will be split into. More code generation units allows more of a crate to be processed in parallel possibly reducing compile time, but may produce slower code.\n\nThis option takes an integer greater than 0.\n\nThe default is 256 for [incremental](#incremental) builds, and 16 for non-incremental builds.\n\n### [rpath](#rpath)\n\nThe `rpath` setting controls the [`-C rpath` flag](about:blank/rustc/codegen-options/index.html#rpath) which controls whether or not [`rpath`](https://en.wikipedia.org/wiki/Rpath) is enabled.\n\n## [Default profiles](#default-profiles)\n\n### [dev](#dev)\n\nThe `dev` profile is used for normal development and debugging. It is the default for build commands like [`cargo build`](../commands/cargo-build.html), and is used for `cargo install --debug`.\n\nThe default settings for the `dev` profile are:\n\n```toml\n[profile.dev]\nopt-level = 0\ndebug = true\nsplit-debuginfo = '...'  # Platform-specific.\nstrip = \"none\"\ndebug-assertions = true\noverflow-checks = true\nlto = false\npanic = 'unwind'\nincremental = true\ncodegen-units = 256\nrpath = false\n\n```\n\n### [release](#release)\n\nThe `release` profile is intended for optimized artifacts used for releases and in production. This profile is used when the `--release` flag is used, and is the default for [`cargo install`](../commands/cargo-install.html).\n\nThe default settings for the `release` profile are:\n\n```toml\n[profile.release]\nopt-level = 3\ndebug = false\nsplit-debuginfo = '...'  # Platform-specific.\nstrip = \"none\"\ndebug-assertions = false\noverflow-checks = false\nlto = false\npanic = 'unwind'\nincremental = false\ncodegen-units = 16\nrpath = false\n\n```\n\n### [test](#test)\n\nThe `test` profile is the default profile used by [`cargo test`](../commands/cargo-test.html). The `test` profile inherits the settings from the [`dev`](#dev) profile.\n\n### [bench](#bench)\n\nThe `bench` profile is the default profile used by [`cargo bench`](../commands/cargo-bench.html). The `bench` profile inherits the settings from the [`release`](#release) profile.\n\n### [Build Dependencies](#build-dependencies)\n\nTo compile quickly, all profiles, by default, do not optimize build dependencies (build scripts, proc macros, and their dependencies), and avoid computing debug info when a build dependency is not used as a runtime dependency. The default settings for build overrides are:\n\n```toml\n[profile.dev.build-override]\nopt-level = 0\ncodegen-units = 256\ndebug = false # when possible\n\n[profile.release.build-override]\nopt-level = 0\ncodegen-units = 256\n\n```\n\nHowever, if errors occur while running build dependencies, turning full debug info on will improve backtraces and debuggability when needed:\n\n```toml\ndebug = true\n\n```\n\nBuild dependencies otherwise inherit settings from the active profile in use, as described in [Profile selection](#profile-selection).\n\n## [Custom profiles](#custom-profiles)\n\nIn addition to the built-in profiles, additional custom profiles can be defined. These may be useful for setting up multiple workflows and build modes. When defining a custom profile, you must specify the `inherits` key to specify which profile the custom profile inherits settings from when the setting is not specified.\n\nFor example, let’s say you want to compare a normal release build with a release build with [LTO](#lto) optimizations, you can specify something like the following in `Cargo.toml`:\n\n```toml\n[profile.release-lto]\ninherits = \"release\"\nlto = true\n\n```\n\nThe `--profile` flag can then be used to choose this custom profile:\n\n```console\ncargo build --profile release-lto\n\n```\n\nThe output for each profile will be placed in a directory of the same name as the profile in the [`target` directory](../guide/build-cache.html). As in the example above, the output would go into the `target/release-lto` directory.\n\n## [Profile selection](#profile-selection)\n\nThe profile used depends on the command, the command-line flags like `--release` or `--profile`, and the package (in the case of [overrides](#overrides)). The default profile if none is specified is:\n\nYou can switch to a different profile using the `--profile=NAME` option which will used the given profile. The `--release` flag is equivalent to `--profile=release`.\n\nThe selected profile applies to all Cargo targets, including [library](about:blank/cargo-targets.html#library), [binary](about:blank/cargo-targets.html#binaries), [example](about:blank/cargo-targets.html#examples), [test](about:blank/cargo-targets.html#tests), and [benchmark](about:blank/cargo-targets.html#benchmarks).\n\nThe profile for specific packages can be specified with [overrides](#overrides), described below.\n\n## [Overrides](#overrides)\n\nProfile settings can be overridden for specific packages and build-time crates. To override the settings for a specific package, use the `package` table to change the settings for the named package:\n\n```toml\n# The `foo` package will use the -Copt-level=3 flag.\n[profile.dev.package.foo]\nopt-level = 3\n\n```\n\nThe package name is actually a [Package ID Spec](pkgid-spec.html), so you can target individual versions of a package with syntax such as `[profile.dev.package.\"foo:2.1.0\"]`.\n\nTo override the settings for all dependencies (but not any workspace member), use the `\"*\"` package name:\n\n```toml\n# Set the default for dependencies.\n[profile.dev.package.\"*\"]\nopt-level = 2\n\n```\n\nTo override the settings for build scripts, proc macros, and their dependencies, use the `build-override` table:\n\n```toml\n# Set the settings for build scripts and proc-macros.\n[profile.dev.build-override]\nopt-level = 3\n\n```\n\n> Note: When a dependency is both a normal dependency and a build dependency, Cargo will try to only build it once when `--target` is not specified. When using `build-override`, the dependency may need to be built twice, once as a normal dependency and once with the overridden build settings. This may increase initial build times.\n\nThe precedence for which value is used is done in the following order (first match wins):\n\n1.  `[profile.dev.package.name]` — A named package.\n2.  `[profile.dev.package.\"*\"]` — For any non-workspace member.\n3.  `[profile.dev.build-override]` — Only for build scripts, proc macros, and their dependencies.\n4.  `[profile.dev]` — Settings in `Cargo.toml`.\n5.  Default values built-in to Cargo.\n\nOverrides cannot specify the `panic`, `lto`, or `rpath` settings.\n\n### [Overrides and generics](#overrides-and-generics)\n\nThe location where generic code is instantiated will influence the optimization settings used for that generic code. This can cause subtle interactions when using profile overrides to change the optimization level of a specific crate. If you attempt to raise the optimization level of a dependency which defines generic functions, those generic functions may not be optimized when used in your local crate. This is because the code may be generated in the crate where it is instantiated, and thus may use the optimization settings of that crate.\n\nFor example, [nalgebra](https://crates.io/crates/nalgebra) is a library which defines vectors and matrices making heavy use of generic parameters. If your local code defines concrete nalgebra types like `Vector4<f64>` and uses their methods, the corresponding nalgebra code will be instantiated and built within your crate. Thus, if you attempt to increase the optimization level of `nalgebra` using a profile override, it may not result in faster performance.\n\nFurther complicating the issue, `rustc` has some optimizations where it will attempt to share monomorphized generics between crates. If the opt-level is 2 or 3, then a crate will not use monomorphized generics from other crates, nor will it export locally defined monomorphized items to be shared with other crates. When experimenting with optimizing dependencies for development, consider trying opt-level 1, which will apply some optimizations while still allowing monomorphized items to be shared.",
	"html": "<!DOCTYPE html><html lang=\"en\" class=\"light\" dir=\"ltr\"><head>\n        <!-- Book generated using mdBook -->\n        <meta charset=\"UTF-8\">\n        <title>Profiles - The Cargo Book</title>\n\n\n        <!-- Custom HTML head -->\n        <style>\n            dd {\n                margin-bottom: 1em;\n            }\n        </style>\n\n        <meta name=\"description\" content=\"\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <meta name=\"theme-color\" content=\"rgb(255, 255, 255)\">\n\n        <link rel=\"shortcut icon\" href=\"../favicon.png\">\n        <link rel=\"stylesheet\" href=\"../css/variables.css\">\n        <link rel=\"stylesheet\" href=\"../css/general.css\">\n        <link rel=\"stylesheet\" href=\"../css/chrome.css\">\n        <link rel=\"stylesheet\" href=\"../css/print.css\" media=\"print\">\n\n        <!-- Fonts -->\n        <link rel=\"stylesheet\" href=\"../FontAwesome/css/font-awesome.css\">\n        <link rel=\"stylesheet\" href=\"../fonts/fonts.css\">\n\n        <!-- Highlight.js Stylesheets -->\n        <link rel=\"stylesheet\" href=\"../highlight.css\">\n        <link rel=\"stylesheet\" href=\"../tomorrow-night.css\" disabled=\"\">\n        <link rel=\"stylesheet\" href=\"../ayu-highlight.css\" disabled=\"\">\n\n        <!-- Custom theme stylesheets -->\n\n    </head>\n    <body class=\"js sidebar-visible\">\n    <div id=\"body-container\">\n        <!-- Provide site root to javascript -->\n        <script>\n            var path_to_root = \"../\";\n            var default_theme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"navy\" : \"light\";\n        </script>\n\n        <!-- Work around some values being stored in localStorage wrapped in quotes -->\n        <script>\n            try {\n                var theme = localStorage.getItem('mdbook-theme');\n                var sidebar = localStorage.getItem('mdbook-sidebar');\n\n                if (theme.startsWith('\"') && theme.endsWith('\"')) {\n                    localStorage.setItem('mdbook-theme', theme.slice(1, theme.length - 1));\n                }\n\n                if (sidebar.startsWith('\"') && sidebar.endsWith('\"')) {\n                    localStorage.setItem('mdbook-sidebar', sidebar.slice(1, sidebar.length - 1));\n                }\n            } catch (e) { }\n        </script>\n\n        <!-- Set the theme before any content is loaded, prevents flash -->\n        <script>\n            var theme;\n            try { theme = localStorage.getItem('mdbook-theme'); } catch(e) { }\n            if (theme === null || theme === undefined) { theme = default_theme; }\n            var html = document.querySelector('html');\n            html.classList.remove('light')\n            html.classList.add(theme);\n            var body = document.querySelector('body');\n            body.classList.remove('no-js')\n            body.classList.add('js');\n        </script>\n\n        <input type=\"checkbox\" id=\"sidebar-toggle-anchor\" class=\"hidden\">\n\n        <!-- Hide / unhide sidebar before it is displayed -->\n        <script>\n            var body = document.querySelector('body');\n            var sidebar = null;\n            var sidebar_toggle = document.getElementById(\"sidebar-toggle-anchor\");\n            if (document.body.clientWidth >= 1080) {\n                try { sidebar = localStorage.getItem('mdbook-sidebar'); } catch(e) { }\n                sidebar = sidebar || 'visible';\n            } else {\n                sidebar = 'hidden';\n            }\n            sidebar_toggle.checked = sidebar === 'visible';\n            body.classList.remove('sidebar-visible');\n            body.classList.add(\"sidebar-\" + sidebar);\n        </script>\n\n        <nav id=\"sidebar\" class=\"sidebar\" aria-label=\"Table of contents\" aria-hidden=\"false\">\n            <div class=\"sidebar-scrollbox\">\n                <ol class=\"chapter\"><li class=\"chapter-item expanded affix \"><a href=\"../index.html\" tabindex=\"0\">Introduction</a></li><li class=\"chapter-item expanded \"><a href=\"../getting-started/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.</strong> Getting Started</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../getting-started/installation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.1.</strong> Installation</a></li><li class=\"chapter-item expanded \"><a href=\"../getting-started/first-steps.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.2.</strong> First Steps with Cargo</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../guide/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.</strong> Cargo Guide</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../guide/why-cargo-exists.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.1.</strong> Why Cargo Exists</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/creating-a-new-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.2.</strong> Creating a New Package</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/working-on-an-existing-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.3.</strong> Working on an Existing Package</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/dependencies.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.4.</strong> Dependencies</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/project-layout.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.5.</strong> Package Layout</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/cargo-toml-vs-cargo-lock.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.6.</strong> Cargo.toml vs Cargo.lock</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/tests.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.7.</strong> Tests</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/continuous-integration.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.8.</strong> Continuous Integration</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/cargo-home.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.9.</strong> Cargo Home</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/build-cache.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.10.</strong> Build Cache</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.</strong> Cargo Reference</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/specifying-dependencies.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.1.</strong> Specifying Dependencies</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/overriding-dependencies.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.1.1.</strong> Overriding Dependencies</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/manifest.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.2.</strong> The Manifest Format</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/cargo-targets.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.2.1.</strong> Cargo Targets</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/workspaces.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.3.</strong> Workspaces</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/features.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.4.</strong> Features</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/features-examples.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.4.1.</strong> Features Examples</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/profiles.html\" class=\"active\" tabindex=\"0\"><strong aria-hidden=\"true\">3.5.</strong> Profiles</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/config.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.6.</strong> Configuration</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/environment-variables.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.7.</strong> Environment Variables</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/build-scripts.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.8.</strong> Build Scripts</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/build-script-examples.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.8.1.</strong> Build Script Examples</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/publishing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.9.</strong> Publishing on crates.io</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/pkgid-spec.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.10.</strong> Package ID Specifications</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/source-replacement.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.11.</strong> Source Replacement</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/external-tools.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.12.</strong> External Tools</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/registries.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.</strong> Registries</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/registry-authentication.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.1.</strong> Registry Authentication</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/credential-provider-protocol.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.1.1.</strong> Credential Provider Protocol</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/running-a-registry.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.2.</strong> Running a Registry</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/registry-index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.2.1.</strong> Registry Index</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/registry-web-api.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.2.2.</strong> Registry Web API</a></li></ol></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/resolver.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.14.</strong> Dependency Resolution</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/semver.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.15.</strong> SemVer Compatibility</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/future-incompat-report.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.16.</strong> Future incompat report</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/timings.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.17.</strong> Reporting build timings</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/unstable.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.18.</strong> Unstable Features</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../commands/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.</strong> Cargo Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../commands/general-commands.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.</strong> General Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../commands/cargo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.1.</strong> cargo</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-help.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.2.</strong> cargo help</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-version.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.3.</strong> cargo version</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../commands/build-commands.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.</strong> Build Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-bench.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.1.</strong> cargo bench</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-build.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.2.</strong> cargo build</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-check.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.3.</strong> cargo check</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-clean.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.4.</strong> cargo clean</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-doc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.5.</strong> cargo doc</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-fetch.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.6.</strong> cargo fetch</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-fix.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.7.</strong> cargo fix</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-run.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.8.</strong> cargo run</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-rustc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.9.</strong> cargo rustc</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-rustdoc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.10.</strong> cargo rustdoc</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-test.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.11.</strong> cargo test</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-report.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.12.</strong> cargo report</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../commands/manifest-commands.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.</strong> Manifest Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-add.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.1.</strong> cargo add</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-generate-lockfile.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.2.</strong> cargo generate-lockfile</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-locate-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.3.</strong> cargo locate-project</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-metadata.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.4.</strong> cargo metadata</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-pkgid.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.5.</strong> cargo pkgid</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-remove.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.6.</strong> cargo remove</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-tree.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.7.</strong> cargo tree</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-update.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.8.</strong> cargo update</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-vendor.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.9.</strong> cargo vendor</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-verify-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.10.</strong> cargo verify-project</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../commands/package-commands.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.</strong> Package Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-init.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.1.</strong> cargo init</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-install.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.2.</strong> cargo install</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-new.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.3.</strong> cargo new</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-search.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.4.</strong> cargo search</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-uninstall.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.5.</strong> cargo uninstall</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../commands/publishing-commands.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.</strong> Publishing Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-login.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.1.</strong> cargo login</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-logout.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.2.</strong> cargo logout</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-owner.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.3.</strong> cargo owner</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-package.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.4.</strong> cargo package</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-publish.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.5.</strong> cargo publish</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-yank.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.6.</strong> cargo yank</a></li></ol></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../faq.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.</strong> FAQ</a></li><li class=\"chapter-item expanded \"><a href=\"../appendix/glossary.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.</strong> Appendix: Glossary</a></li><li class=\"chapter-item expanded \"><a href=\"../appendix/git-authentication.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.</strong> Appendix: Git Authentication</a></li></ol>\n            </div>\n            <div id=\"sidebar-resize-handle\" class=\"sidebar-resize-handle\">\n                <div class=\"sidebar-resize-indicator\"></div>\n            </div>\n        </nav>\n\n        <!-- Track and set sidebar scroll position -->\n        <script>\n            var sidebarScrollbox = document.querySelector('#sidebar .sidebar-scrollbox');\n            sidebarScrollbox.addEventListener('click', function(e) {\n                if (e.target.tagName === 'A') {\n                    sessionStorage.setItem('sidebar-scroll', sidebarScrollbox.scrollTop);\n                }\n            }, { passive: true });\n            var sidebarScrollTop = sessionStorage.getItem('sidebar-scroll');\n            sessionStorage.removeItem('sidebar-scroll');\n            if (sidebarScrollTop) {\n                // preserve sidebar scroll position when navigating via links within sidebar\n                sidebarScrollbox.scrollTop = sidebarScrollTop;\n            } else {\n                // scroll sidebar to current active section when navigating via \"next/previous chapter\" buttons\n                var activeSection = document.querySelector('#sidebar .active');\n                if (activeSection) {\n                    activeSection.scrollIntoView({ block: 'center' });\n                }\n            }\n        </script>\n\n        <div id=\"page-wrapper\" class=\"page-wrapper\">\n\n            <div class=\"page\">\n                                <div id=\"menu-bar-hover-placeholder\"></div>\n                <div id=\"menu-bar\" class=\"menu-bar\" style=\"top: 0px;\">\n                    <div class=\"left-buttons\">\n                        <label id=\"sidebar-toggle\" class=\"icon-button\" for=\"sidebar-toggle-anchor\" title=\"Toggle Table of Contents\" aria-label=\"Toggle Table of Contents\" aria-controls=\"sidebar\" aria-expanded=\"true\">\n                            <i class=\"fa fa-bars\"></i>\n                        </label>\n                        <button id=\"theme-toggle\" class=\"icon-button\" type=\"button\" title=\"Change theme\" aria-label=\"Change theme\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-controls=\"theme-list\">\n                            <i class=\"fa fa-paint-brush\"></i>\n                        </button>\n                        <ul id=\"theme-list\" class=\"theme-popup\" aria-label=\"Themes\" role=\"menu\">\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme theme-selected\" id=\"light\">Light</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"rust\">Rust</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"coal\">Coal</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"navy\">Navy</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"ayu\">Ayu</button></li>\n                        </ul>\n                        <button id=\"search-toggle\" class=\"icon-button\" type=\"button\" title=\"Search. (Shortkey: s)\" aria-label=\"Toggle Searchbar\" aria-expanded=\"false\" aria-keyshortcuts=\"S\" aria-controls=\"searchbar\">\n                            <i class=\"fa fa-search\"></i>\n                        </button>\n                    </div>\n\n                    <h1 class=\"menu-title\">The Cargo Book</h1>\n\n                    <div class=\"right-buttons\">\n                        <a href=\"../print.html\" title=\"Print this book\" aria-label=\"Print this book\">\n                            <i id=\"print-button\" class=\"fa fa-print\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/cargo/tree/master/src/doc/src\" title=\"Git repository\" aria-label=\"Git repository\">\n                            <i id=\"git-repository-button\" class=\"fa fa-github\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/cargo/edit/master/src/doc/src/reference/profiles.md\" title=\"Suggest an edit\" aria-label=\"Suggest an edit\">\n                            <i id=\"git-edit-button\" class=\"fa fa-edit\"></i>\n                        </a>\n\n                    </div>\n                </div>\n\n                <div id=\"search-wrapper\" class=\"hidden\">\n                    <form id=\"searchbar-outer\" class=\"searchbar-outer\">\n                        <input type=\"search\" id=\"searchbar\" name=\"searchbar\" placeholder=\"Search this book ...\" aria-controls=\"searchresults-outer\" aria-describedby=\"searchresults-header\">\n                    </form>\n                    <div id=\"searchresults-outer\" class=\"searchresults-outer hidden\">\n                        <div id=\"searchresults-header\" class=\"searchresults-header\"></div>\n                        <ul id=\"searchresults\">\n                        </ul>\n                    </div>\n                </div>\n\n                <!-- Apply ARIA attributes after the sidebar and the sidebar toggle button are added to the DOM -->\n                <script>\n                    document.getElementById('sidebar-toggle').setAttribute('aria-expanded', sidebar === 'visible');\n                    document.getElementById('sidebar').setAttribute('aria-hidden', sidebar !== 'visible');\n                    Array.from(document.querySelectorAll('#sidebar a')).forEach(function(link) {\n                        link.setAttribute('tabIndex', sidebar === 'visible' ? 0 : -1);\n                    });\n                </script>\n\n                <div id=\"content\" class=\"content\">\n                    <main>\n                        <h1 id=\"profiles\"><a class=\"header\" href=\"#profiles\">Profiles</a></h1>\n<p>Profiles provide a way to alter the compiler settings, influencing things like\noptimizations and debugging symbols.</p>\n<p>Cargo has 4 built-in profiles: <code class=\"hljs\">dev</code>, <code class=\"hljs\">release</code>, <code class=\"hljs\">test</code>, and <code class=\"hljs\">bench</code>. The\nprofile is automatically chosen based on which command is being run if a\nprofile is not specified on the command-line. In addition to the built-in\nprofiles, custom user-defined profiles can also be specified.</p>\n<p>Profile settings can be changed in <a href=\"manifest.html\"><code class=\"hljs\">Cargo.toml</code></a> with the\n<code class=\"hljs\">[profile]</code> table. Within each named profile, individual settings can be changed\nwith key/value pairs like this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[profile.dev]</span>\n<span class=\"hljs-attr\">opt-level</span> = <span class=\"hljs-number\">1</span>               <span class=\"hljs-comment\"># Use slightly better optimizations.</span>\n<span class=\"hljs-attr\">overflow-checks</span> = <span class=\"hljs-literal\">false</span>     <span class=\"hljs-comment\"># Disable integer overflow checks.</span>\n</code></pre>\n<p>Cargo only looks at the profile settings in the <code class=\"hljs\">Cargo.toml</code> manifest at the\nroot of the workspace. Profile settings defined in dependencies will be\nignored.</p>\n<p>Additionally, profiles can be overridden from a <a href=\"config.html\">config</a> definition.\nSpecifying a profile in a config file or environment variable will override\nthe settings from <code class=\"hljs\">Cargo.toml</code>.</p>\n<h2 id=\"profile-settings\"><a class=\"header\" href=\"#profile-settings\">Profile settings</a></h2>\n<p>The following is a list of settings that can be controlled in a profile.</p>\n<h3 id=\"opt-level\"><a class=\"header\" href=\"#opt-level\">opt-level</a></h3>\n<p>The <code class=\"hljs\">opt-level</code> setting controls the <a href=\"../../rustc/codegen-options/index.html#opt-level\"><code class=\"hljs\">-C opt-level</code> flag</a> which controls the level\nof optimization. Higher optimization levels may produce faster runtime code at\nthe expense of longer compiler times. Higher levels may also change and\nrearrange the compiled code which may make it harder to use with a debugger.</p>\n<p>The valid options are:</p>\n<ul>\n<li><code class=\"hljs\">0</code>: no optimizations</li>\n<li><code class=\"hljs\">1</code>: basic optimizations</li>\n<li><code class=\"hljs\">2</code>: some optimizations</li>\n<li><code class=\"hljs\">3</code>: all optimizations</li>\n<li><code class=\"hljs\">\"s\"</code>: optimize for binary size</li>\n<li><code class=\"hljs\">\"z\"</code>: optimize for binary size, but also turn off loop vectorization.</li>\n</ul>\n<p>It is recommended to experiment with different levels to find the right\nbalance for your project. There may be surprising results, such as level <code class=\"hljs\">3</code>\nbeing slower than <code class=\"hljs\">2</code>, or the <code class=\"hljs\">\"s\"</code> and <code class=\"hljs\">\"z\"</code> levels not being necessarily\nsmaller. You may also want to reevaluate your settings over time as newer\nversions of <code class=\"hljs\">rustc</code> change optimization behavior.</p>\n<p>See also <a href=\"../../rustc/profile-guided-optimization.html\">Profile Guided Optimization</a> for more advanced optimization\ntechniques.</p>\n<h3 id=\"debug\"><a class=\"header\" href=\"#debug\">debug</a></h3>\n<p>The <code class=\"hljs\">debug</code> setting controls the <a href=\"../../rustc/codegen-options/index.html#debuginfo\"><code class=\"hljs\">-C debuginfo</code> flag</a> which controls the\namount of debug information included in the compiled binary.</p>\n<p>The valid options are:</p>\n<ul>\n<li><code class=\"hljs\">0</code>, <code class=\"hljs\">false</code>, or <code class=\"hljs\">\"none\"</code>: no debug info at all, default for <a href=\"#release\"><code class=\"hljs\">release</code></a></li>\n<li><code class=\"hljs\">\"line-directives-only\"</code>: line info directives only. For the nvptx* targets this enables <a href=\"https://reviews.llvm.org/D46061\">profiling</a>. For other use cases, <code class=\"hljs\">line-tables-only</code> is the better, more compatible choice.</li>\n<li><code class=\"hljs\">\"line-tables-only\"</code>: line tables only. Generates the minimal amount of debug info for backtraces with filename/line number info, but not anything else, i.e. no variable or function parameter info.</li>\n<li><code class=\"hljs\">1</code> or <code class=\"hljs\">\"limited\"</code>: debug info without type or variable-level information. Generates more detailed module-level info than <code class=\"hljs\">line-tables-only</code>.</li>\n<li><code class=\"hljs\">2</code>, <code class=\"hljs\">true</code>, or <code class=\"hljs\">\"full\"</code>: full debug info, default for <a href=\"#dev\"><code class=\"hljs\">dev</code></a></li>\n</ul>\n<p>For more information on what each option does see <code class=\"hljs\">rustc</code>’s docs on <a href=\"../../rustc/codegen-options/index.html#debuginfo\">debuginfo</a>.</p>\n<p>You may wish to also configure the <a href=\"#split-debuginfo\"><code class=\"hljs\">split-debuginfo</code></a> option\ndepending on your needs as well.</p>\n<h3 id=\"split-debuginfo\"><a class=\"header\" href=\"#split-debuginfo\">split-debuginfo</a></h3>\n<p>The <code class=\"hljs\">split-debuginfo</code> setting controls the <a href=\"../../rustc/codegen-options/index.html#split-debuginfo\"><code class=\"hljs\">-C split-debuginfo</code> flag</a> which\ncontrols whether debug information, if generated, is either placed in the\nexecutable itself or adjacent to it.</p>\n<p>This option is a string and acceptable values are the same as those the\n<a href=\"../../rustc/codegen-options/index.html#split-debuginfo\">compiler accepts</a>. The default value for this option\nis <code class=\"hljs\">unpacked</code> on macOS for profiles that have debug information otherwise\nenabled. Otherwise the default for this option is <a href=\"../../rustc/codegen-options/index.html#split-debuginfo\">documented with rustc</a> and is platform-specific. Some options are only\navailable on the <a href=\"../../book/appendix-07-nightly-rust.html\">nightly channel</a>. The Cargo default may change in the future\nonce more testing has been performed, and support for DWARF is stabilized.</p>\n<p>Be aware that Cargo and rustc have different defaults for this option. This\noption exists to allow Cargo to experiment on different combinations of flags\nthus providing better debugging and developer experience.</p>\n<h3 id=\"strip\"><a class=\"header\" href=\"#strip\">strip</a></h3>\n<p>The <code class=\"hljs\">strip</code> option controls the <a href=\"../../rustc/codegen-options/index.html#strip\"><code class=\"hljs\">-C strip</code> flag</a>, which directs rustc to\nstrip either symbols or debuginfo from a binary. This can be enabled like so:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-comment\"># ...</span>\n\n<span class=\"hljs-section\">[profile.release]</span>\n<span class=\"hljs-attr\">strip</span> = <span class=\"hljs-string\">\"debuginfo\"</span>\n</code></pre>\n<p>Possible string values of <code class=\"hljs\">strip</code> are <code class=\"hljs\">\"none\"</code>, <code class=\"hljs\">\"debuginfo\"</code>, and <code class=\"hljs\">\"symbols\"</code>.\nThe default is <code class=\"hljs\">\"none\"</code>.</p>\n<p>You can also configure this option with the boolean values <code class=\"hljs\">true</code> or <code class=\"hljs\">false</code>.\n<code class=\"hljs\">strip = true</code> is equivalent to <code class=\"hljs\">strip = \"symbols\"</code>. <code class=\"hljs\">strip = false</code> is\nequivalent to <code class=\"hljs\">strip = \"none\"</code> and disables <code class=\"hljs\">strip</code> completely.</p>\n<h3 id=\"debug-assertions\"><a class=\"header\" href=\"#debug-assertions\">debug-assertions</a></h3>\n<p>The <code class=\"hljs\">debug-assertions</code> setting controls the <a href=\"../../rustc/codegen-options/index.html#debug-assertions\"><code class=\"hljs\">-C debug-assertions</code> flag</a> which\nturns <code class=\"hljs\">cfg(debug_assertions)</code> <a href=\"../../reference/conditional-compilation.html#debug_assertions\">conditional compilation</a> on or off. Debug\nassertions are intended to include runtime validation which is only available\nin debug/development builds. These may be things that are too expensive or\notherwise undesirable in a release build. Debug assertions enables the\n<a href=\"../../std/macro.debug_assert.html\"><code class=\"hljs\">debug_assert!</code> macro</a> in the standard library.</p>\n<p>The valid options are:</p>\n<ul>\n<li><code class=\"hljs\">true</code>: enabled</li>\n<li><code class=\"hljs\">false</code>: disabled</li>\n</ul>\n<h3 id=\"overflow-checks\"><a class=\"header\" href=\"#overflow-checks\">overflow-checks</a></h3>\n<p>The <code class=\"hljs\">overflow-checks</code> setting controls the <a href=\"../../rustc/codegen-options/index.html#overflow-checks\"><code class=\"hljs\">-C overflow-checks</code> flag</a> which\ncontrols the behavior of <a href=\"../../reference/expressions/operator-expr.html#overflow\">runtime integer overflow</a>. When overflow-checks are\nenabled, a panic will occur on overflow.</p>\n<p>The valid options are:</p>\n<ul>\n<li><code class=\"hljs\">true</code>: enabled</li>\n<li><code class=\"hljs\">false</code>: disabled</li>\n</ul>\n<h3 id=\"lto\"><a class=\"header\" href=\"#lto\">lto</a></h3>\n<p>The <code class=\"hljs\">lto</code> setting controls <code class=\"hljs\">rustc</code>’s <a href=\"../../rustc/codegen-options/index.html#lto\"><code class=\"hljs\">-C lto</code></a>, <a href=\"../../rustc/codegen-options/index.html#linker-plugin-lto\"><code class=\"hljs\">-C linker-plugin-lto</code></a>, and\n<a href=\"../../rustc/codegen-options/index.html#embed-bitcode\"><code class=\"hljs\">-C embed-bitcode</code></a> options, which control LLVM’s <a href=\"https://llvm.org/docs/LinkTimeOptimization.html\">link time optimizations</a>.\nLTO can produce better optimized code, using whole-program analysis, at the cost\nof longer linking time.</p>\n<p>The valid options are:</p>\n<ul>\n<li><code class=\"hljs\">false</code>: Performs “thin local LTO” which performs “thin” LTO on the local\ncrate only across its <a href=\"#codegen-units\">codegen units</a>. No LTO is performed\nif codegen units is 1 or <a href=\"#opt-level\">opt-level</a> is 0.</li>\n<li><code class=\"hljs\">true</code> or <code class=\"hljs\">\"fat\"</code>: Performs “fat” LTO which attempts to perform\noptimizations across all crates within the dependency graph.</li>\n<li><code class=\"hljs\">\"thin\"</code>: Performs <a href=\"http://blog.llvm.org/2016/06/thinlto-scalable-and-incremental-lto.html\">“thin” LTO</a>. This is similar to “fat”, but takes\nsubstantially less time to run while still achieving performance gains\nsimilar to “fat”.</li>\n<li><code class=\"hljs\">\"off\"</code>: Disables LTO.</li>\n</ul>\n<p>See the <a href=\"../../rustc/linker-plugin-lto.html\">linker-plugin-lto chapter</a> if you are interested in cross-language LTO.\nThis is not yet supported natively in Cargo, but can be performed via\n<code class=\"hljs\">RUSTFLAGS</code>.</p>\n<h3 id=\"panic\"><a class=\"header\" href=\"#panic\">panic</a></h3>\n<p>The <code class=\"hljs\">panic</code> setting controls the <a href=\"../../rustc/codegen-options/index.html#panic\"><code class=\"hljs\">-C panic</code> flag</a> which controls which panic\nstrategy to use.</p>\n<p>The valid options are:</p>\n<ul>\n<li><code class=\"hljs\">\"unwind\"</code>: Unwind the stack upon panic.</li>\n<li><code class=\"hljs\">\"abort\"</code>: Terminate the process upon panic.</li>\n</ul>\n<p>When set to <code class=\"hljs\">\"unwind\"</code>, the actual value depends on the default of the target\nplatform. For example, the NVPTX platform does not support unwinding, so it\nalways uses <code class=\"hljs\">\"abort\"</code>.</p>\n<p>Tests, benchmarks, build scripts, and proc macros ignore the <code class=\"hljs\">panic</code> setting.\nThe <code class=\"hljs\">rustc</code> test harness currently requires <code class=\"hljs\">unwind</code> behavior. See the\n<a href=\"unstable.html#panic-abort-tests\"><code class=\"hljs\">panic-abort-tests</code></a> unstable flag which enables <code class=\"hljs\">abort</code> behavior.</p>\n<p>Additionally, when using the <code class=\"hljs\">abort</code> strategy and building a test, all of the\ndependencies will also be forced to build with the <code class=\"hljs\">unwind</code> strategy.</p>\n<h3 id=\"incremental\"><a class=\"header\" href=\"#incremental\">incremental</a></h3>\n<p>The <code class=\"hljs\">incremental</code> setting controls the <a href=\"../../rustc/codegen-options/index.html#incremental\"><code class=\"hljs\">-C incremental</code> flag</a> which controls\nwhether or not incremental compilation is enabled. Incremental compilation\ncauses <code class=\"hljs\">rustc</code> to save additional information to disk which will be reused\nwhen recompiling the crate, improving re-compile times. The additional\ninformation is stored in the <code class=\"hljs\">target</code> directory.</p>\n<p>The valid options are:</p>\n<ul>\n<li><code class=\"hljs\">true</code>: enabled</li>\n<li><code class=\"hljs\">false</code>: disabled</li>\n</ul>\n<p>Incremental compilation is only used for workspace members and “path”\ndependencies.</p>\n<p>The incremental value can be overridden globally with the <code class=\"hljs\">CARGO_INCREMENTAL</code>\n<a href=\"environment-variables.html\">environment variable</a> or the <a href=\"config.html#buildincremental\"><code class=\"hljs\">build.incremental</code></a> config variable.</p>\n<h3 id=\"codegen-units\"><a class=\"header\" href=\"#codegen-units\">codegen-units</a></h3>\n<p>The <code class=\"hljs\">codegen-units</code> setting controls the <a href=\"../../rustc/codegen-options/index.html#codegen-units\"><code class=\"hljs\">-C codegen-units</code> flag</a> which\ncontrols how many “code generation units” a crate will be split into. More\ncode generation units allows more of a crate to be processed in parallel\npossibly reducing compile time, but may produce slower code.</p>\n<p>This option takes an integer greater than 0.</p>\n<p>The default is 256 for <a href=\"#incremental\">incremental</a> builds, and 16 for\nnon-incremental builds.</p>\n<h3 id=\"rpath\"><a class=\"header\" href=\"#rpath\">rpath</a></h3>\n<p>The <code class=\"hljs\">rpath</code> setting controls the <a href=\"../../rustc/codegen-options/index.html#rpath\"><code class=\"hljs\">-C rpath</code> flag</a> which controls\nwhether or not <a href=\"https://en.wikipedia.org/wiki/Rpath\"><code class=\"hljs\">rpath</code></a> is enabled.</p>\n<h2 id=\"default-profiles\"><a class=\"header\" href=\"#default-profiles\">Default profiles</a></h2>\n<h3 id=\"dev\"><a class=\"header\" href=\"#dev\">dev</a></h3>\n<p>The <code class=\"hljs\">dev</code> profile is used for normal development and debugging. It is the\ndefault for build commands like <a href=\"../commands/cargo-build.html\"><code class=\"hljs\">cargo build</code></a>, and is used for <code class=\"hljs\">cargo install --debug</code>.</p>\n<p>The default settings for the <code class=\"hljs\">dev</code> profile are:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[profile.dev]</span>\n<span class=\"hljs-attr\">opt-level</span> = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-attr\">debug</span> = <span class=\"hljs-literal\">true</span>\n<span class=\"hljs-attr\">split-debuginfo</span> = <span class=\"hljs-string\">'...'</span>  <span class=\"hljs-comment\"># Platform-specific.</span>\n<span class=\"hljs-attr\">strip</span> = <span class=\"hljs-string\">\"none\"</span>\n<span class=\"hljs-attr\">debug-assertions</span> = <span class=\"hljs-literal\">true</span>\n<span class=\"hljs-attr\">overflow-checks</span> = <span class=\"hljs-literal\">true</span>\n<span class=\"hljs-attr\">lto</span> = <span class=\"hljs-literal\">false</span>\n<span class=\"hljs-attr\">panic</span> = <span class=\"hljs-string\">'unwind'</span>\n<span class=\"hljs-attr\">incremental</span> = <span class=\"hljs-literal\">true</span>\n<span class=\"hljs-attr\">codegen-units</span> = <span class=\"hljs-number\">256</span>\n<span class=\"hljs-attr\">rpath</span> = <span class=\"hljs-literal\">false</span>\n</code></pre>\n<h3 id=\"release\"><a class=\"header\" href=\"#release\">release</a></h3>\n<p>The <code class=\"hljs\">release</code> profile is intended for optimized artifacts used for releases\nand in production. This profile is used when the <code class=\"hljs\">--release</code> flag is used, and\nis the default for <a href=\"../commands/cargo-install.html\"><code class=\"hljs\">cargo install</code></a>.</p>\n<p>The default settings for the <code class=\"hljs\">release</code> profile are:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[profile.release]</span>\n<span class=\"hljs-attr\">opt-level</span> = <span class=\"hljs-number\">3</span>\n<span class=\"hljs-attr\">debug</span> = <span class=\"hljs-literal\">false</span>\n<span class=\"hljs-attr\">split-debuginfo</span> = <span class=\"hljs-string\">'...'</span>  <span class=\"hljs-comment\"># Platform-specific.</span>\n<span class=\"hljs-attr\">strip</span> = <span class=\"hljs-string\">\"none\"</span>\n<span class=\"hljs-attr\">debug-assertions</span> = <span class=\"hljs-literal\">false</span>\n<span class=\"hljs-attr\">overflow-checks</span> = <span class=\"hljs-literal\">false</span>\n<span class=\"hljs-attr\">lto</span> = <span class=\"hljs-literal\">false</span>\n<span class=\"hljs-attr\">panic</span> = <span class=\"hljs-string\">'unwind'</span>\n<span class=\"hljs-attr\">incremental</span> = <span class=\"hljs-literal\">false</span>\n<span class=\"hljs-attr\">codegen-units</span> = <span class=\"hljs-number\">16</span>\n<span class=\"hljs-attr\">rpath</span> = <span class=\"hljs-literal\">false</span>\n</code></pre>\n<h3 id=\"test\"><a class=\"header\" href=\"#test\">test</a></h3>\n<p>The <code class=\"hljs\">test</code> profile is the default profile used by <a href=\"../commands/cargo-test.html\"><code class=\"hljs\">cargo test</code></a>.\nThe <code class=\"hljs\">test</code> profile inherits the settings from the <a href=\"#dev\"><code class=\"hljs\">dev</code></a> profile.</p>\n<h3 id=\"bench\"><a class=\"header\" href=\"#bench\">bench</a></h3>\n<p>The <code class=\"hljs\">bench</code> profile is the default profile used by <a href=\"../commands/cargo-bench.html\"><code class=\"hljs\">cargo bench</code></a>.\nThe <code class=\"hljs\">bench</code> profile inherits the settings from the <a href=\"#release\"><code class=\"hljs\">release</code></a> profile.</p>\n<h3 id=\"build-dependencies\"><a class=\"header\" href=\"#build-dependencies\">Build Dependencies</a></h3>\n<p>To compile quickly, all profiles, by default, do not optimize build\ndependencies (build scripts, proc macros, and their dependencies), and avoid\ncomputing debug info when a build dependency is not used as a runtime\ndependency. The default settings for build overrides are:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[profile.dev.build-override]</span>\n<span class=\"hljs-attr\">opt-level</span> = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-attr\">codegen-units</span> = <span class=\"hljs-number\">256</span>\n<span class=\"hljs-attr\">debug</span> = <span class=\"hljs-literal\">false</span> <span class=\"hljs-comment\"># when possible</span>\n\n<span class=\"hljs-section\">[profile.release.build-override]</span>\n<span class=\"hljs-attr\">opt-level</span> = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-attr\">codegen-units</span> = <span class=\"hljs-number\">256</span>\n</code></pre>\n<p>However, if errors occur while running build dependencies, turning full debug\ninfo on will improve backtraces and debuggability when needed:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-attr\">debug</span> = <span class=\"hljs-literal\">true</span>\n</code></pre>\n<p>Build dependencies otherwise inherit settings from the active profile in use, as\ndescribed in <a href=\"#profile-selection\">Profile selection</a>.</p>\n<h2 id=\"custom-profiles\"><a class=\"header\" href=\"#custom-profiles\">Custom profiles</a></h2>\n<p>In addition to the built-in profiles, additional custom profiles can be\ndefined. These may be useful for setting up multiple workflows and build\nmodes. When defining a custom profile, you must specify the <code class=\"hljs\">inherits</code> key to\nspecify which profile the custom profile inherits settings from when the\nsetting is not specified.</p>\n<p>For example, let’s say you want to compare a normal release build with a\nrelease build with <a href=\"#lto\">LTO</a> optimizations, you can specify something like\nthe following in <code class=\"hljs\">Cargo.toml</code>:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[profile.release-lto]</span>\n<span class=\"hljs-attr\">inherits</span> = <span class=\"hljs-string\">\"release\"</span>\n<span class=\"hljs-attr\">lto</span> = <span class=\"hljs-literal\">true</span>\n</code></pre>\n<p>The <code class=\"hljs\">--profile</code> flag can then be used to choose this custom profile:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\">cargo build --profile release-lto\n</code></pre>\n<p>The output for each profile will be placed in a directory of the same name\nas the profile in the <a href=\"../guide/build-cache.html\"><code class=\"hljs\">target</code> directory</a>. As in the example above, the\noutput would go into the <code class=\"hljs\">target/release-lto</code> directory.</p>\n<h2 id=\"profile-selection\"><a class=\"header\" href=\"#profile-selection\">Profile selection</a></h2>\n<p>The profile used depends on the command, the command-line flags like\n<code class=\"hljs\">--release</code> or <code class=\"hljs\">--profile</code>, and the package (in the case of\n<a href=\"#overrides\">overrides</a>). The default profile if none is specified is:</p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Command</th><th>Default Profile</th></tr></thead><tbody>\n<tr><td><a href=\"../commands/cargo-run.html\"><code class=\"hljs\">cargo run</code></a>, <a href=\"../commands/cargo-build.html\"><code class=\"hljs\">cargo build</code></a>,<br><a href=\"../commands/cargo-check.html\"><code class=\"hljs\">cargo check</code></a>, <a href=\"../commands/cargo-rustc.html\"><code class=\"hljs\">cargo rustc</code></a></td><td><a href=\"#dev\"><code class=\"hljs\">dev</code> profile</a></td></tr>\n<tr><td><a href=\"../commands/cargo-test.html\"><code class=\"hljs\">cargo test</code></a></td><td><a href=\"#test\"><code class=\"hljs\">test</code> profile</a></td></tr>\n<tr><td><a href=\"../commands/cargo-bench.html\"><code class=\"hljs\">cargo bench</code></a></td><td><a href=\"#bench\"><code class=\"hljs\">bench</code> profile</a></td></tr>\n<tr><td><a href=\"../commands/cargo-install.html\"><code class=\"hljs\">cargo install</code></a></td><td><a href=\"#release\"><code class=\"hljs\">release</code> profile</a></td></tr>\n</tbody></table>\n</div>\n<p>You can switch to a different profile using the <code class=\"hljs\">--profile=NAME</code> option which will used the given profile.\nThe <code class=\"hljs\">--release</code> flag is equivalent to <code class=\"hljs\">--profile=release</code>.</p>\n<p>The selected profile applies to all Cargo targets,\nincluding <a href=\"./cargo-targets.html#library\">library</a>,\n<a href=\"./cargo-targets.html#binaries\">binary</a>,\n<a href=\"./cargo-targets.html#examples\">example</a>,\n<a href=\"./cargo-targets.html#tests\">test</a>,\nand <a href=\"./cargo-targets.html#benchmarks\">benchmark</a>.</p>\n<p>The profile for specific packages can be specified with\n<a href=\"#overrides\">overrides</a>, described below.</p>\n<h2 id=\"overrides\"><a class=\"header\" href=\"#overrides\">Overrides</a></h2>\n<p>Profile settings can be overridden for specific packages and build-time\ncrates. To override the settings for a specific package, use the <code class=\"hljs\">package</code>\ntable to change the settings for the named package:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-comment\"># The `foo` package will use the -Copt-level=3 flag.</span>\n<span class=\"hljs-section\">[profile.dev.package.foo]</span>\n<span class=\"hljs-attr\">opt-level</span> = <span class=\"hljs-number\">3</span>\n</code></pre>\n<p>The package name is actually a <a href=\"pkgid-spec.html\">Package ID Spec</a>, so you can\ntarget individual versions of a package with syntax such as\n<code class=\"hljs\">[profile.dev.package.\"foo:2.1.0\"]</code>.</p>\n<p>To override the settings for all dependencies (but not any workspace member),\nuse the <code class=\"hljs\">\"*\"</code> package name:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-comment\"># Set the default for dependencies.</span>\n<span class=\"hljs-section\">[profile.dev.package.\"*\"]</span>\n<span class=\"hljs-attr\">opt-level</span> = <span class=\"hljs-number\">2</span>\n</code></pre>\n<p>To override the settings for build scripts, proc macros, and their\ndependencies, use the <code class=\"hljs\">build-override</code> table:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-comment\"># Set the settings for build scripts and proc-macros.</span>\n<span class=\"hljs-section\">[profile.dev.build-override]</span>\n<span class=\"hljs-attr\">opt-level</span> = <span class=\"hljs-number\">3</span>\n</code></pre>\n<blockquote>\n<p>Note: When a dependency is both a normal dependency and a build dependency,\nCargo will try to only build it once when <code class=\"hljs\">--target</code> is not specified. When\nusing <code class=\"hljs\">build-override</code>, the dependency may need to be built twice, once as a\nnormal dependency and once with the overridden build settings. This may\nincrease initial build times.</p>\n</blockquote>\n<p>The precedence for which value is used is done in the following order (first\nmatch wins):</p>\n<ol>\n<li><code class=\"hljs\">[profile.dev.package.name]</code> — A named package.</li>\n<li><code class=\"hljs\">[profile.dev.package.\"*\"]</code> — For any non-workspace member.</li>\n<li><code class=\"hljs\">[profile.dev.build-override]</code> — Only for build scripts, proc macros, and\ntheir dependencies.</li>\n<li><code class=\"hljs\">[profile.dev]</code> — Settings in <code class=\"hljs\">Cargo.toml</code>.</li>\n<li>Default values built-in to Cargo.</li>\n</ol>\n<p>Overrides cannot specify the <code class=\"hljs\">panic</code>, <code class=\"hljs\">lto</code>, or <code class=\"hljs\">rpath</code> settings.</p>\n<h3 id=\"overrides-and-generics\"><a class=\"header\" href=\"#overrides-and-generics\">Overrides and generics</a></h3>\n<p>The location where generic code is instantiated will influence the\noptimization settings used for that generic code. This can cause subtle\ninteractions when using profile overrides to change the optimization level of\na specific crate. If you attempt to raise the optimization level of a\ndependency which defines generic functions, those generic functions may not be\noptimized when used in your local crate. This is because the code may be\ngenerated in the crate where it is instantiated, and thus may use the\noptimization settings of that crate.</p>\n<p>For example, <a href=\"https://crates.io/crates/nalgebra\">nalgebra</a> is a library which defines vectors and matrices making\nheavy use of generic parameters. If your local code defines concrete nalgebra\ntypes like <code class=\"hljs\">Vector4&lt;f64&gt;</code> and uses their methods, the corresponding nalgebra\ncode will be instantiated and built within your crate. Thus, if you attempt to\nincrease the optimization level of <code class=\"hljs\">nalgebra</code> using a profile override, it may\nnot result in faster performance.</p>\n<p>Further complicating the issue, <code class=\"hljs\">rustc</code> has some optimizations where it will\nattempt to share monomorphized generics between crates. If the opt-level is 2\nor 3, then a crate will not use monomorphized generics from other crates, nor\nwill it export locally defined monomorphized items to be shared with other\ncrates. When experimenting with optimizing dependencies for development,\nconsider trying opt-level 1, which will apply some optimizations while still\nallowing monomorphized items to be shared.</p>\n\n                    </main>\n\n                    <nav class=\"nav-wrapper\" aria-label=\"Page navigation\">\n                        <!-- Mobile navigation buttons -->\n                            <a rel=\"prev\" href=\"../reference/features-examples.html\" class=\"mobile-nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                                <i class=\"fa fa-angle-left\"></i>\n                            </a>\n\n                            <a rel=\"next prefetch\" href=\"../reference/config.html\" class=\"mobile-nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                                <i class=\"fa fa-angle-right\"></i>\n                            </a>\n\n                        <div style=\"clear: both\"></div>\n                    </nav>\n                </div>\n            </div>\n\n            <nav class=\"nav-wide-wrapper\" aria-label=\"Page navigation\">\n                    <a rel=\"prev\" href=\"../reference/features-examples.html\" class=\"nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                        <i class=\"fa fa-angle-left\"></i>\n                    </a>\n\n                    <a rel=\"next prefetch\" href=\"../reference/config.html\" class=\"nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                        <i class=\"fa fa-angle-right\"></i>\n                    </a>\n            </nav>\n\n        </div>\n\n\n\n\n        <script>\n            window.playground_copyable = true;\n        </script>\n\n\n        <script src=\"../elasticlunr.min.js\"></script>\n        <script src=\"../mark.min.js\"></script>\n        <script src=\"../searcher.js\"></script>\n\n        <script src=\"../clipboard.min.js\"></script>\n        <script src=\"../highlight.js\"></script>\n        <script src=\"../book.js\"></script>\n\n        <!-- Custom JS scripts -->\n\n\n    </div>\n    \n\n</body></html>",
	"crawlDate": "2024-07-28T05:09:16.987Z"
}