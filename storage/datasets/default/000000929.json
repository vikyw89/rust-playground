{
	"title": "alloc in std::alloc - Rust",
	"url": "https://doc.rust-lang.org/stable/std/alloc/fn.alloc.html",
	"markdown": "# alloc in std::alloc - Rust\n\n## Function [std](../index.html)::[alloc](index.html)::[alloc](#)\n\n1.28.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/alloc.rs.html#94) ·\n\n```\npub unsafe fn alloc(layout: Layout) -> *mut u8\n```\n\nExpand description\n\nAllocate memory with the global allocator.\n\nThis function forwards calls to the [`GlobalAlloc::alloc`](about:blank/trait.GlobalAlloc.html#tymethod.alloc \"method std::alloc::GlobalAlloc::alloc\") method of the allocator registered with the `#[global_allocator]` attribute if there is one, or the `std` crate’s default.\n\nThis function is expected to be deprecated in favor of the `alloc` method of the [`Global`](struct.Global.html \"struct std::alloc::Global\") type when it and the [`Allocator`](trait.Allocator.html \"trait std::alloc::Allocator\") trait become stable.\n\n## [§](#safety)Safety\n\nSee [`GlobalAlloc::alloc`](about:blank/trait.GlobalAlloc.html#tymethod.alloc \"method std::alloc::GlobalAlloc::alloc\").\n\n## [§](#examples)Examples\n\n```\nuse std::alloc::{alloc, dealloc, handle_alloc_error, Layout};\n\nunsafe {\n    let layout = Layout::new::<u16>();\n    let ptr = alloc(layout);\n    if ptr.is_null() {\n        handle_alloc_error(layout);\n    }\n\n    *(ptr as *mut u16) = 42;\n    assert_eq!(*(ptr as *mut u16), 42);\n\n    dealloc(ptr, layout);\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::alloc::%7Balloc,+dealloc,+handle_alloc_error,+Layout%7D;%0A++++%0A++++unsafe+%7B%0A++++++++let+layout+=+Layout::new::%3Cu16%3E();%0A++++++++let+ptr+=+alloc(layout);%0A++++++++if+ptr.is_null()+%7B%0A++++++++++++handle_alloc_error(layout);%0A++++++++%7D%0A++++%0A++++++++*(ptr+as+*mut+u16)+=+42;%0A++++++++assert_eq!(*(ptr+as+*mut+u16),+42);%0A++++%0A++++++++dealloc(ptr,+layout);%0A++++%7D%0A%7D&edition=2021)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Allocate memory with the global allocator.\"><title>alloc in std::alloc - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc fn\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><div class=\"sidebar-elems\"><h2><a href=\"index.html\">In std::alloc</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.AllocError.html\">AllocError</a></li><li><a href=\"struct.Global.html\">Global</a></li><li><a href=\"struct.Layout.html\">Layout</a></li><li><a href=\"struct.LayoutError.html\">LayoutError</a></li><li><a href=\"struct.System.html\">System</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.Allocator.html\">Allocator</a></li><li><a href=\"trait.GlobalAlloc.html\">GlobalAlloc</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.alloc.html\">alloc</a></li><li><a href=\"fn.alloc_zeroed.html\">alloc_zeroed</a></li><li><a href=\"fn.dealloc.html\">dealloc</a></li><li><a href=\"fn.handle_alloc_error.html\">handle_alloc_error</a></li><li><a href=\"fn.realloc.html\">realloc</a></li><li><a href=\"fn.set_alloc_error_hook.html\">set_alloc_error_hook</a></li><li><a href=\"fn.take_alloc_error_hook.html\">take_alloc_error_hook</a></li></ul><h3><a href=\"index.html#types\">Type Aliases</a></h3><ul class=\"block type\"><li><a href=\"type.LayoutErr.html\">LayoutErr</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Function <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">alloc</a>::<wbr><a class=\"fn\" href=\"#\">alloc</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/alloc.rs.html#94\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub unsafe fn alloc(layout: <a class=\"struct\" href=\"struct.Layout.html\" title=\"struct std::alloc::Layout\">Layout</a>) -&gt; <a class=\"primitive\" href=\"../primitive.pointer.html\">*mut </a><a class=\"primitive\" href=\"../primitive.u8.html\">u8</a></code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Allocate memory with the global allocator.</p>\n<p>This function forwards calls to the <a href=\"trait.GlobalAlloc.html#tymethod.alloc\" title=\"method std::alloc::GlobalAlloc::alloc\"><code>GlobalAlloc::alloc</code></a> method\nof the allocator registered with the <code>#[global_allocator]</code> attribute\nif there is one, or the <code>std</code> crate’s default.</p>\n<p>This function is expected to be deprecated in favor of the <code>alloc</code> method\nof the <a href=\"struct.Global.html\" title=\"struct std::alloc::Global\"><code>Global</code></a> type when it and the <a href=\"trait.Allocator.html\" title=\"trait std::alloc::Allocator\"><code>Allocator</code></a> trait become stable.</p>\n<h2 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h2>\n<p>See <a href=\"trait.GlobalAlloc.html#tymethod.alloc\" title=\"method std::alloc::GlobalAlloc::alloc\"><code>GlobalAlloc::alloc</code></a>.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::alloc::{alloc, dealloc, handle_alloc_error, Layout};\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">let </span>layout = Layout::new::&lt;u16&gt;();\n    <span class=\"kw\">let </span>ptr = alloc(layout);\n    <span class=\"kw\">if </span>ptr.is_null() {\n        handle_alloc_error(layout);\n    }\n\n    <span class=\"kw-2\">*</span>(ptr <span class=\"kw\">as </span><span class=\"kw-2\">*mut </span>u16) = <span class=\"number\">42</span>;\n    <span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>(ptr <span class=\"kw\">as </span><span class=\"kw-2\">*mut </span>u16), <span class=\"number\">42</span>);\n\n    dealloc(ptr, layout);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::alloc::%7Balloc,+dealloc,+handle_alloc_error,+Layout%7D;%0A++++%0A++++unsafe+%7B%0A++++++++let+layout+=+Layout::new::%3Cu16%3E();%0A++++++++let+ptr+=+alloc(layout);%0A++++++++if+ptr.is_null()+%7B%0A++++++++++++handle_alloc_error(layout);%0A++++++++%7D%0A++++%0A++++++++*(ptr+as+*mut+u16)+=+42;%0A++++++++assert_eq!(*(ptr+as+*mut+u16),+42);%0A++++%0A++++++++dealloc(ptr,+layout);%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:14:13.602Z"
}