{
	"title": "try_from_fn in std::array - Rust",
	"url": "https://doc.rust-lang.org/stable/std/array/fn.try_from_fn.html",
	"markdown": "# try\\_from\\_fn in std::array - Rust\n\n```\npub fn try_from_fn<R, const N: usize, F>(\n    cb: F,\n) -> <<R as Try>::Residual as Residual<[<R as Try>::Output; N]>>::TryTypewhere\n    F: FnMut(usize) -> R,\n    R: Try,\n    <R as Try>::Residual: Residual<[<R as Try>::Output; N]>,\n```\n\nðŸ”¬This is a nightly-only experimental API. (`array_try_from_fn`Â [#89379](https://github.com/rust-lang/rust/issues/89379))\n\nExpand description\n\nCreates an array `[T; N]` where each fallible array element `T` is returned by the `cb` call. Unlike [`from_fn`](fn.from_fn.html \"fn std::array::from_fn\"), where the element creation canâ€™t fail, this version will return an error if any element creation was unsuccessful.\n\nThe return type of this function depends on the return type of the closure. If you return `Result<T, E>` from the closure, youâ€™ll get a `Result<[T; N], E>`. If you return `Option<T>` from the closure, youâ€™ll get an `Option<[T; N]>`.\n\n## [Â§](#arguments)Arguments\n\n-   `cb`: Callback where the passed argument is the current array index.\n\n## [Â§](#example)Example\n\n```\n#![feature(array_try_from_fn)]\n\nlet array: Result<[u8; 5], _> = std::array::try_from_fn(|i| i.try_into());\nassert_eq!(array, Ok([0, 1, 2, 3, 4]));\n\nlet array: Result<[i8; 200], _> = std::array::try_from_fn(|i| i.try_into());\nassert!(array.is_err());\n\nlet array: Option<[_; 4]> = std::array::try_from_fn(|i| i.checked_add(100));\nassert_eq!(array, Some([100, 101, 102, 103]));\n\nlet array: Option<[_; 4]> = std::array::try_from_fn(|i| i.checked_sub(100));\nassert_eq!(array, None);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(array_try_from_fn)%5D%0A%0Afn+main()+%7B%0A++++let+array:+Result%3C%5Bu8;+5%5D,+_%3E+=+std::array::try_from_fn(%7Ci%7C+i.try_into());%0A++++assert_eq!(array,+Ok(%5B0,+1,+2,+3,+4%5D));%0A++++%0A++++let+array:+Result%3C%5Bi8;+200%5D,+_%3E+=+std::array::try_from_fn(%7Ci%7C+i.try_into());%0A++++assert!(array.is_err());%0A++++%0A++++let+array:+Option%3C%5B_;+4%5D%3E+=+std::array::try_from_fn(%7Ci%7C+i.checked_add(100));%0A++++assert_eq!(array,+Some(%5B100,+101,+102,+103%5D));%0A++++%0A++++let+array:+Option%3C%5B_;+4%5D%3E+=+std::array::try_from_fn(%7Ci%7C+i.checked_sub(100));%0A++++assert_eq!(array,+None);%0A%7D&version=nightly&edition=2021)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Creates an array `[T; N]` where each fallible array element `T` is returned by the `cb` call. Unlike `from_fn`, where the element creation canâ€™t fail, this version will return an error if any element creation was unsuccessful.\"><title>try_from_fn in std::array - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc fn\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><div class=\"sidebar-elems\"><h2><a href=\"index.html\">In std::array</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.IntoIter.html\">IntoIter</a></li><li><a href=\"struct.TryFromSliceError.html\">TryFromSliceError</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.from_fn.html\">from_fn</a></li><li><a href=\"fn.from_mut.html\">from_mut</a></li><li><a href=\"fn.from_ref.html\">from_ref</a></li><li><a href=\"fn.try_from_fn.html\">try_from_fn</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type â€˜Sâ€™ or â€˜/â€™ to search, â€˜?â€™ for more optionsâ€¦\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Function <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">array</a>::<wbr><a class=\"fn\" href=\"#\">try_from_fn</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#97-101\">source</a> Â· <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>âˆ’</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub fn try_from_fn&lt;R, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, F&gt;(\n    cb: F,\n) -&gt; &lt;&lt;R as <a class=\"trait\" href=\"../ops/trait.Try.html\" title=\"trait std::ops::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Try.html#associatedtype.Residual\" title=\"type std::ops::Try::Residual\">Residual</a> as <a class=\"trait\" href=\"../ops/trait.Residual.html\" title=\"trait std::ops::Residual\">Residual</a>&lt;[&lt;R as <a class=\"trait\" href=\"../ops/trait.Try.html\" title=\"trait std::ops::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Try.html#associatedtype.Output\" title=\"type std::ops::Try::Output\">Output</a>; <a class=\"primitive\" href=\"../primitive.array.html\">N</a>]&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Residual.html#associatedtype.TryType\" title=\"type std::ops::Residual::TryType\">TryType</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; R,\n    R: <a class=\"trait\" href=\"../ops/trait.Try.html\" title=\"trait std::ops::Try\">Try</a>,\n    &lt;R as <a class=\"trait\" href=\"../ops/trait.Try.html\" title=\"trait std::ops::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Try.html#associatedtype.Residual\" title=\"type std::ops::Try::Residual\">Residual</a>: <a class=\"trait\" href=\"../ops/trait.Residual.html\" title=\"trait std::ops::Residual\">Residual</a>&lt;[&lt;R as <a class=\"trait\" href=\"../ops/trait.Try.html\" title=\"trait std::ops::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Try.html#associatedtype.Output\" title=\"type std::ops::Try::Output\">Output</a>; <a class=\"primitive\" href=\"../primitive.array.html\">N</a>]&gt;,</div></code></pre><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>array_try_from_fn</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/89379\">#89379</a>)</span></div></span><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Creates an array <code>[T; N]</code> where each fallible array element <code>T</code> is returned by the <code>cb</code> call.\nUnlike <a href=\"fn.from_fn.html\" title=\"fn std::array::from_fn\"><code>from_fn</code></a>, where the element creation canâ€™t fail, this version will return an error\nif any element creation was unsuccessful.</p>\n<p>The return type of this function depends on the return type of the closure.\nIf you return <code>Result&lt;T, E&gt;</code> from the closure, youâ€™ll get a <code>Result&lt;[T; N], E&gt;</code>.\nIf you return <code>Option&lt;T&gt;</code> from the closure, youâ€™ll get an <code>Option&lt;[T; N]&gt;</code>.</p>\n<h2 id=\"arguments\"><a class=\"doc-anchor\" href=\"#arguments\">Â§</a>Arguments</h2>\n<ul>\n<li><code>cb</code>: Callback where the passed argument is the current array index.</li>\n</ul>\n<h2 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">Â§</a>Example</h2>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(array_try_from_fn)]\n\n</span><span class=\"kw\">let </span>array: <span class=\"prelude-ty\">Result</span>&lt;[u8; <span class=\"number\">5</span>], <span class=\"kw\">_</span>&gt; = std::array::try_from_fn(|i| i.try_into());\n<span class=\"macro\">assert_eq!</span>(array, <span class=\"prelude-val\">Ok</span>([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]));\n\n<span class=\"kw\">let </span>array: <span class=\"prelude-ty\">Result</span>&lt;[i8; <span class=\"number\">200</span>], <span class=\"kw\">_</span>&gt; = std::array::try_from_fn(|i| i.try_into());\n<span class=\"macro\">assert!</span>(array.is_err());\n\n<span class=\"kw\">let </span>array: <span class=\"prelude-ty\">Option</span>&lt;[<span class=\"kw\">_</span>; <span class=\"number\">4</span>]&gt; = std::array::try_from_fn(|i| i.checked_add(<span class=\"number\">100</span>));\n<span class=\"macro\">assert_eq!</span>(array, <span class=\"prelude-val\">Some</span>([<span class=\"number\">100</span>, <span class=\"number\">101</span>, <span class=\"number\">102</span>, <span class=\"number\">103</span>]));\n\n<span class=\"kw\">let </span>array: <span class=\"prelude-ty\">Option</span>&lt;[<span class=\"kw\">_</span>; <span class=\"number\">4</span>]&gt; = std::array::try_from_fn(|i| i.checked_sub(<span class=\"number\">100</span>));\n<span class=\"macro\">assert_eq!</span>(array, <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(array_try_from_fn)%5D%0A%0Afn+main()+%7B%0A++++let+array:+Result%3C%5Bu8;+5%5D,+_%3E+=+std::array::try_from_fn(%7Ci%7C+i.try_into());%0A++++assert_eq!(array,+Ok(%5B0,+1,+2,+3,+4%5D));%0A++++%0A++++let+array:+Result%3C%5Bi8;+200%5D,+_%3E+=+std::array::try_from_fn(%7Ci%7C+i.try_into());%0A++++assert!(array.is_err());%0A++++%0A++++let+array:+Option%3C%5B_;+4%5D%3E+=+std::array::try_from_fn(%7Ci%7C+i.checked_add(100));%0A++++assert_eq!(array,+Some(%5B100,+101,+102,+103%5D));%0A++++%0A++++let+array:+Option%3C%5B_;+4%5D%3E+=+std::array::try_from_fn(%7Ci%7C+i.checked_sub(100));%0A++++assert_eq!(array,+None);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:22:47.771Z"
}