{
	"title": "Glossary - The Rust Reference",
	"url": "https://doc.rust-lang.org/stable/reference/glossary.html",
	"markdown": "# Glossary - The Rust Reference\n\n### [Abstract syntax tree](#abstract-syntax-tree)\n\nAn ‘abstract syntax tree’, or ‘AST’, is an intermediate representation of the structure of the program when the compiler is compiling it.\n\n### [Alignment](#alignment)\n\nThe alignment of a value specifies what addresses values are preferred to start at. Always a power of two. References to a value must be aligned. [More](about:blank/type-layout.html#size-and-alignment).\n\n### [Arity](#arity)\n\nArity refers to the number of arguments a function or operator takes. For some examples, `f(2, 3)` and `g(4, 6)` have arity 2, while `h(8, 2, 6)` has arity 3. The `!` operator has arity 1.\n\n### [Array](#array)\n\nAn array, sometimes also called a fixed-size array or an inline array, is a value describing a collection of elements, each selected by an index that can be computed at run time by the program. It occupies a contiguous region of memory.\n\n### [Associated item](#associated-item)\n\nAn associated item is an item that is associated with another item. Associated items are defined in [implementations](items/implementations.html) and declared in [traits](items/traits.html). Only functions, constants, and type aliases can be associated. Contrast to a [free item](#free-item).\n\n### [Blanket implementation](#blanket-implementation)\n\nAny implementation where a type appears [uncovered](#uncovered-type). `impl<T> Foo for T`, `impl<T> Bar<T> for T`, `impl<T> Bar<Vec<T>> for T`, and `impl<T> Bar<T> for Vec<T>` are considered blanket impls. However, `impl<T> Bar<Vec<T>> for Vec<T>` is not a blanket impl, as all instances of `T` which appear in this `impl` are covered by `Vec`.\n\n### [Bound](#bound)\n\nBounds are constraints on a type or trait. For example, if a bound is placed on the argument a function takes, types passed to that function must abide by that constraint.\n\n### [Combinator](#combinator)\n\nCombinators are higher-order functions that apply only functions and earlier defined combinators to provide a result from its arguments. They can be used to manage control flow in a modular fashion.\n\n### [Crate](#crate)\n\nA crate is the unit of compilation and linking. There are different [types of crates](linkage.html), such as libraries or executables. Crates may link and refer to other library crates, called external crates. A crate has a self-contained tree of [modules](items/modules.html), starting from an unnamed root module called the crate root. [Items](items.html) may be made visible to other crates by marking them as public in the crate root, including through [paths](paths.html) of public modules. [More](crates-and-source-files.html).\n\n### [Dispatch](#dispatch)\n\nDispatch is the mechanism to determine which specific version of code is actually run when it involves polymorphism. Two major forms of dispatch are static dispatch and dynamic dispatch. While Rust favors static dispatch, it also supports dynamic dispatch through a mechanism called ‘trait objects’.\n\n### [Dynamically sized type](#dynamically-sized-type)\n\nA dynamically sized type (DST) is a type without a statically known size or alignment.\n\n### [Entity](#entity)\n\nAn [_entity_](names.html) is a language construct that can be referred to in some way within the source program, usually via a [path](paths.html). Entities include [types](types.html), [items](items.html), [generic parameters](items/generics.html), [variable bindings](patterns.html), [loop labels](about:blank/tokens.html#lifetimes-and-loop-labels), [lifetimes](about:blank/tokens.html#lifetimes-and-loop-labels), [fields](expressions/field-expr.html), [attributes](attributes.html), and [lints](about:blank/attributes/diagnostics.html#lint-check-attributes).\n\n### [Expression](#expression)\n\nAn expression is a combination of values, constants, variables, operators and functions that evaluate to a single value, with or without side-effects.\n\nFor example, `2 + (3 * 4)` is an expression that returns the value 14.\n\n### [Free item](#free-item)\n\nAn [item](items.html) that is not a member of an [implementation](items/implementations.html), such as a _free function_ or a _free const_. Contrast to an [associated item](#associated-item).\n\n### [Fundamental traits](#fundamental-traits)\n\nA fundamental trait is one where adding an impl of it for an existing type is a breaking change. The `Fn` traits and `Sized` are fundamental.\n\n### [Fundamental type constructors](#fundamental-type-constructors)\n\nA fundamental type constructor is a type where implementing a [blanket implementation](#blanket-implementation) over it is a breaking change. `&`, `&mut`, `Box`, and `Pin` are fundamental.\n\nAny time a type `T` is considered [local](#local-type), `&T`, `&mut T`, `Box<T>`, and `Pin<T>` are also considered local. Fundamental type constructors cannot [cover](#uncovered-type) other types. Any time the term \"covered type\" is used, the `T` in `&T`, `&mut T`, `Box<T>`, and `Pin<T>` is not considered covered.\n\n### [Inhabited](#inhabited)\n\nA type is inhabited if it has constructors and therefore can be instantiated. An inhabited type is not \"empty\" in the sense that there can be values of the type. Opposite of [Uninhabited](#uninhabited).\n\n### [Inherent implementation](#inherent-implementation)\n\nAn [implementation](items/implementations.html) that applies to a nominal type, not to a trait-type pair. [More](about:blank/items/implementations.html#inherent-implementations).\n\n### [Inherent method](#inherent-method)\n\nA [method](about:blank/items/associated-items.html#methods) defined in an [inherent implementation](about:blank/items/implementations.html#inherent-implementations), not in a trait implementation.\n\n### [Initialized](#initialized)\n\nA variable is initialized if it has been assigned a value and hasn't since been moved from. All other memory locations are assumed to be uninitialized. Only unsafe Rust can create a memory location without initializing it.\n\n### [Local trait](#local-trait)\n\nA `trait` which was defined in the current crate. A trait definition is local or not independent of applied type arguments. Given `trait Foo<T, U>`, `Foo` is always local, regardless of the types substituted for `T` and `U`.\n\n### [Local type](#local-type)\n\nA `struct`, `enum`, or `union` which was defined in the current crate. This is not affected by applied type arguments. `struct Foo` is considered local, but `Vec<Foo>` is not. `LocalType<ForeignType>` is local. Type aliases do not affect locality.\n\n### [Module](#module)\n\nA module is a container for zero or more [items](items.html). Modules are organized in a tree, starting from an unnamed module at the root called the crate root or the root module. [Paths](paths.html) may be used to refer to items from other modules, which may be restricted by [visibility rules](visibility-and-privacy.html). [More](items/modules.html)\n\n### [Name](#name)\n\nA [_name_](names.html) is an [identifier](identifiers.html) or [lifetime or loop label](about:blank/tokens.html#lifetimes-and-loop-labels) that refers to an [entity](#entity). A _name binding_ is when an entity declaration introduces an identifier or label associated with that entity. [Paths](paths.html), identifiers, and labels are used to refer to an entity.\n\n### [Name resolution](#name-resolution)\n\n[_Name resolution_](names/name-resolution.html) is the compile-time process of tying [paths](paths.html), [identifiers](identifiers.html), and [labels](about:blank/tokens.html#lifetimes-and-loop-labels) to [entity](#entity) declarations.\n\n### [Namespace](#namespace)\n\nA _namespace_ is a logical grouping of declared [names](#name) based on the kind of [entity](#entity) the name refers to. Namespaces allow the occurrence of a name in one namespace to not conflict with the same name in another namespace.\n\nWithin a namespace, names are organized in a hierarchy, where each level of the hierarchy has its own collection of named entities.\n\n### [Nominal types](#nominal-types)\n\nTypes that can be referred to by a path directly. Specifically [enums](items/enumerations.html), [structs](items/structs.html), [unions](items/unions.html), and [trait objects](types/trait-object.html).\n\n### [Object safe traits](#object-safe-traits)\n\n[Traits](items/traits.html) that can be used as [trait objects](types/trait-object.html). Only traits that follow specific [rules](about:blank/items/traits.html#object-safety) are object safe.\n\n### [Path](#path)\n\nA [_path_](paths.html) is a sequence of one or more path segments used to refer to an [entity](#entity) in the current scope or other levels of a [namespace](#namespace) hierarchy.\n\n### [Prelude](#prelude)\n\nPrelude, or The Rust Prelude, is a small collection of items - mostly traits - that are imported into every module of every crate. The traits in the prelude are pervasive.\n\n### [Scope](#scope)\n\nA [_scope_](names/scopes.html) is the region of source text where a named [entity](#entity) may be referenced with that name.\n\n### [Scrutinee](#scrutinee)\n\nA scrutinee is the expression that is matched on in `match` expressions and similar pattern matching constructs. For example, in `match x { A => 1, B => 2 }`, the expression `x` is the scrutinee.\n\n### [Size](#size)\n\nThe size of a value has two definitions.\n\nThe first is that it is how much memory must be allocated to store that value.\n\nThe second is that it is the offset in bytes between successive elements in an array with that item type.\n\nIt is a multiple of the alignment, including zero. The size can change depending on compiler version (as new optimizations are made) and target platform (similar to how `usize` varies per-platform).\n\n[More](about:blank/type-layout.html#size-and-alignment).\n\n### [Slice](#slice)\n\nA slice is dynamically-sized view into a contiguous sequence, written as `[T]`.\n\nIt is often seen in its borrowed forms, either mutable or shared. The shared slice type is `&[T]`, while the mutable slice type is `&mut [T]`, where `T` represents the element type.\n\n### [Statement](#statement)\n\nA statement is the smallest standalone element of a programming language that commands a computer to perform an action.\n\n### [String literal](#string-literal)\n\nA string literal is a string stored directly in the final binary, and so will be valid for the `'static` duration.\n\nIts type is `'static` duration borrowed string slice, `&'static str`.\n\n### [String slice](#string-slice)\n\nA string slice is the most primitive string type in Rust, written as `str`. It is often seen in its borrowed forms, either mutable or shared. The shared string slice type is `&str`, while the mutable string slice type is `&mut str`.\n\nStrings slices are always valid UTF-8.\n\n### [Trait](#trait)\n\nA trait is a language item that is used for describing the functionalities a type must provide. It allows a type to make certain promises about its behavior.\n\nGeneric functions and generic structs can use traits to constrain, or bound, the types they accept.\n\n### [Turbofish](#turbofish)\n\nPaths with generic parameters in expressions must prefix the opening brackets with a `::`. Combined with the angular brackets for generics, this looks like a fish `::<>`. As such, this syntax is colloquially referred to as turbofish syntax.\n\nExamples:\n\n```rust\n#![allow(unused)]\nfn main() {\nlet ok_num = Ok::<_, ()>(5);\nlet vec = [1, 2, 3].iter().map(|n| n * 2).collect::<Vec<_>>();\n}\n```\n\nThis `::` prefix is required to disambiguate generic paths with multiple comparisons in a comma-separate list. See [the bastion of the turbofish](https://github.com/rust-lang/rust/blob/1.58.0/src/test/ui/parser/bastion-of-the-turbofish.rs) for an example where not having the prefix would be ambiguous.\n\n### [Uncovered type](#uncovered-type)\n\nA type which does not appear as an argument to another type. For example, `T` is uncovered, but the `T` in `Vec<T>` is covered. This is only relevant for type arguments.\n\n### [Undefined behavior](#undefined-behavior)\n\nCompile-time or run-time behavior that is not specified. This may result in, but is not limited to: process termination or corruption; improper, incorrect, or unintended computation; or platform-specific results. [More](behavior-considered-undefined.html).\n\n### [Uninhabited](#uninhabited)\n\nA type is uninhabited if it has no constructors and therefore can never be instantiated. An uninhabited type is \"empty\" in the sense that there are no values of the type. The canonical example of an uninhabited type is the [never type](types/never.html) `!`, or an enum with no variants `enum Never { }`. Opposite of [Inhabited](#inhabited).",
	"html": "<!DOCTYPE html><html lang=\"en\" class=\"light\" dir=\"ltr\"><head>\n        <!-- Book generated using mdBook -->\n        <meta charset=\"UTF-8\">\n        <title>Glossary - The Rust Reference</title>\n\n\n        <!-- Custom HTML head -->\n        \n        <meta name=\"description\" content=\"\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <meta name=\"theme-color\" content=\"rgb(255, 255, 255)\">\n\n        <link rel=\"icon\" href=\"favicon.svg\">\n        <link rel=\"shortcut icon\" href=\"favicon.png\">\n        <link rel=\"stylesheet\" href=\"css/variables.css\">\n        <link rel=\"stylesheet\" href=\"css/general.css\">\n        <link rel=\"stylesheet\" href=\"css/chrome.css\">\n        <link rel=\"stylesheet\" href=\"css/print.css\" media=\"print\">\n\n        <!-- Fonts -->\n        <link rel=\"stylesheet\" href=\"FontAwesome/css/font-awesome.css\">\n        <link rel=\"stylesheet\" href=\"fonts/fonts.css\">\n\n        <!-- Highlight.js Stylesheets -->\n        <link rel=\"stylesheet\" href=\"highlight.css\">\n        <link rel=\"stylesheet\" href=\"tomorrow-night.css\" disabled=\"\">\n        <link rel=\"stylesheet\" href=\"ayu-highlight.css\" disabled=\"\">\n\n        <!-- Custom theme stylesheets -->\n        <link rel=\"stylesheet\" href=\"theme/reference.css\">\n\n    </head>\n    <body class=\"js sidebar-visible\">\n    <div id=\"body-container\">\n        <!-- Provide site root to javascript -->\n        <script>\n            var path_to_root = \"\";\n            var default_theme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"navy\" : \"light\";\n        </script>\n\n        <!-- Work around some values being stored in localStorage wrapped in quotes -->\n        <script>\n            try {\n                var theme = localStorage.getItem('mdbook-theme');\n                var sidebar = localStorage.getItem('mdbook-sidebar');\n\n                if (theme.startsWith('\"') && theme.endsWith('\"')) {\n                    localStorage.setItem('mdbook-theme', theme.slice(1, theme.length - 1));\n                }\n\n                if (sidebar.startsWith('\"') && sidebar.endsWith('\"')) {\n                    localStorage.setItem('mdbook-sidebar', sidebar.slice(1, sidebar.length - 1));\n                }\n            } catch (e) { }\n        </script>\n\n        <!-- Set the theme before any content is loaded, prevents flash -->\n        <script>\n            var theme;\n            try { theme = localStorage.getItem('mdbook-theme'); } catch(e) { }\n            if (theme === null || theme === undefined) { theme = default_theme; }\n            var html = document.querySelector('html');\n            html.classList.remove('light')\n            html.classList.add(theme);\n            var body = document.querySelector('body');\n            body.classList.remove('no-js')\n            body.classList.add('js');\n        </script>\n\n        <input type=\"checkbox\" id=\"sidebar-toggle-anchor\" class=\"hidden\">\n\n        <!-- Hide / unhide sidebar before it is displayed -->\n        <script>\n            var body = document.querySelector('body');\n            var sidebar = null;\n            var sidebar_toggle = document.getElementById(\"sidebar-toggle-anchor\");\n            if (document.body.clientWidth >= 1080) {\n                try { sidebar = localStorage.getItem('mdbook-sidebar'); } catch(e) { }\n                sidebar = sidebar || 'visible';\n            } else {\n                sidebar = 'hidden';\n            }\n            sidebar_toggle.checked = sidebar === 'visible';\n            body.classList.remove('sidebar-visible');\n            body.classList.add(\"sidebar-\" + sidebar);\n        </script>\n\n        <nav id=\"sidebar\" class=\"sidebar\" aria-label=\"Table of contents\" aria-hidden=\"false\">\n            <div class=\"sidebar-scrollbox\">\n                <ol class=\"chapter\"><li class=\"chapter-item expanded affix \"><a href=\"introduction.html\" tabindex=\"0\">Introduction</a></li><li class=\"chapter-item expanded \"><a href=\"notation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.</strong> Notation</a></li><li class=\"chapter-item expanded \"><a href=\"lexical-structure.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.</strong> Lexical structure</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"input-format.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.1.</strong> Input format</a></li><li class=\"chapter-item expanded \"><a href=\"keywords.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.2.</strong> Keywords</a></li><li class=\"chapter-item expanded \"><a href=\"identifiers.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.3.</strong> Identifiers</a></li><li class=\"chapter-item expanded \"><a href=\"comments.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.4.</strong> Comments</a></li><li class=\"chapter-item expanded \"><a href=\"whitespace.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.5.</strong> Whitespace</a></li><li class=\"chapter-item expanded \"><a href=\"tokens.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.6.</strong> Tokens</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"macros.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.</strong> Macros</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"macros-by-example.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.1.</strong> Macros By Example</a></li><li class=\"chapter-item expanded \"><a href=\"procedural-macros.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.2.</strong> Procedural Macros</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"crates-and-source-files.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.</strong> Crates and source files</a></li><li class=\"chapter-item expanded \"><a href=\"conditional-compilation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.</strong> Conditional compilation</a></li><li class=\"chapter-item expanded \"><a href=\"items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.</strong> Items</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"items/modules.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.1.</strong> Modules</a></li><li class=\"chapter-item expanded \"><a href=\"items/extern-crates.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.2.</strong> Extern crates</a></li><li class=\"chapter-item expanded \"><a href=\"items/use-declarations.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.3.</strong> Use declarations</a></li><li class=\"chapter-item expanded \"><a href=\"items/functions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.4.</strong> Functions</a></li><li class=\"chapter-item expanded \"><a href=\"items/type-aliases.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.5.</strong> Type aliases</a></li><li class=\"chapter-item expanded \"><a href=\"items/structs.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.6.</strong> Structs</a></li><li class=\"chapter-item expanded \"><a href=\"items/enumerations.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.7.</strong> Enumerations</a></li><li class=\"chapter-item expanded \"><a href=\"items/unions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.8.</strong> Unions</a></li><li class=\"chapter-item expanded \"><a href=\"items/constant-items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.9.</strong> Constant items</a></li><li class=\"chapter-item expanded \"><a href=\"items/static-items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.10.</strong> Static items</a></li><li class=\"chapter-item expanded \"><a href=\"items/traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.11.</strong> Traits</a></li><li class=\"chapter-item expanded \"><a href=\"items/implementations.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.12.</strong> Implementations</a></li><li class=\"chapter-item expanded \"><a href=\"items/external-blocks.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.13.</strong> External blocks</a></li><li class=\"chapter-item expanded \"><a href=\"items/generics.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.14.</strong> Generic parameters</a></li><li class=\"chapter-item expanded \"><a href=\"items/associated-items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.15.</strong> Associated Items</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"attributes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.</strong> Attributes</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"attributes/testing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.1.</strong> Testing</a></li><li class=\"chapter-item expanded \"><a href=\"attributes/derive.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.2.</strong> Derive</a></li><li class=\"chapter-item expanded \"><a href=\"attributes/diagnostics.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.3.</strong> Diagnostics</a></li><li class=\"chapter-item expanded \"><a href=\"attributes/codegen.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.4.</strong> Code generation</a></li><li class=\"chapter-item expanded \"><a href=\"attributes/limits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.5.</strong> Limits</a></li><li class=\"chapter-item expanded \"><a href=\"attributes/type_system.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.6.</strong> Type System</a></li><li class=\"chapter-item expanded \"><a href=\"attributes/debugger.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.7.</strong> Debugger</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"statements-and-expressions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.</strong> Statements and expressions</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"statements.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.1.</strong> Statements</a></li><li class=\"chapter-item expanded \"><a href=\"expressions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.</strong> Expressions</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"expressions/literal-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.1.</strong> Literal expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/path-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.2.</strong> Path expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/block-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.3.</strong> Block expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/operator-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.4.</strong> Operator expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/grouped-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.5.</strong> Grouped expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/array-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.6.</strong> Array and index expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/tuple-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.7.</strong> Tuple and index expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/struct-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.8.</strong> Struct expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/call-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.9.</strong> Call expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/method-call-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.10.</strong> Method call expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/field-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.11.</strong> Field access expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/closure-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.12.</strong> Closure expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/loop-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.13.</strong> Loop expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/range-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.14.</strong> Range expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/if-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.15.</strong> If and if let expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/match-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.16.</strong> Match expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/return-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.17.</strong> Return expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/await-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.18.</strong> Await expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/underscore-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.19.</strong> Underscore expressions</a></li></ol></li></ol></li><li class=\"chapter-item expanded \"><a href=\"patterns.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.</strong> Patterns</a></li><li class=\"chapter-item expanded \"><a href=\"type-system.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.</strong> Type system</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"types.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.</strong> Types</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"types/boolean.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.1.</strong> Boolean type</a></li><li class=\"chapter-item expanded \"><a href=\"types/numeric.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.2.</strong> Numeric types</a></li><li class=\"chapter-item expanded \"><a href=\"types/textual.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.3.</strong> Textual types</a></li><li class=\"chapter-item expanded \"><a href=\"types/never.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.4.</strong> Never type</a></li><li class=\"chapter-item expanded \"><a href=\"types/tuple.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.5.</strong> Tuple types</a></li><li class=\"chapter-item expanded \"><a href=\"types/array.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.6.</strong> Array types</a></li><li class=\"chapter-item expanded \"><a href=\"types/slice.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.7.</strong> Slice types</a></li><li class=\"chapter-item expanded \"><a href=\"types/struct.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.8.</strong> Struct types</a></li><li class=\"chapter-item expanded \"><a href=\"types/enum.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.9.</strong> Enumerated types</a></li><li class=\"chapter-item expanded \"><a href=\"types/union.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.10.</strong> Union types</a></li><li class=\"chapter-item expanded \"><a href=\"types/function-item.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.11.</strong> Function item types</a></li><li class=\"chapter-item expanded \"><a href=\"types/closure.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.12.</strong> Closure types</a></li><li class=\"chapter-item expanded \"><a href=\"types/pointer.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.13.</strong> Pointer types</a></li><li class=\"chapter-item expanded \"><a href=\"types/function-pointer.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.14.</strong> Function pointer types</a></li><li class=\"chapter-item expanded \"><a href=\"types/trait-object.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.15.</strong> Trait object types</a></li><li class=\"chapter-item expanded \"><a href=\"types/impl-trait.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.16.</strong> Impl trait type</a></li><li class=\"chapter-item expanded \"><a href=\"types/parameters.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.17.</strong> Type parameters</a></li><li class=\"chapter-item expanded \"><a href=\"types/inferred.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.18.</strong> Inferred type</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"dynamically-sized-types.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.2.</strong> Dynamically Sized Types</a></li><li class=\"chapter-item expanded \"><a href=\"type-layout.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.3.</strong> Type layout</a></li><li class=\"chapter-item expanded \"><a href=\"interior-mutability.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.4.</strong> Interior mutability</a></li><li class=\"chapter-item expanded \"><a href=\"subtyping.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.5.</strong> Subtyping and Variance</a></li><li class=\"chapter-item expanded \"><a href=\"trait-bounds.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.6.</strong> Trait and lifetime bounds</a></li><li class=\"chapter-item expanded \"><a href=\"type-coercions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.7.</strong> Type coercions</a></li><li class=\"chapter-item expanded \"><a href=\"destructors.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.8.</strong> Destructors</a></li><li class=\"chapter-item expanded \"><a href=\"lifetime-elision.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.9.</strong> Lifetime elision</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"special-types-and-traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.</strong> Special types and traits</a></li><li class=\"chapter-item expanded \"><a href=\"names.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.</strong> Names</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"names/namespaces.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.1.</strong> Namespaces</a></li><li class=\"chapter-item expanded \"><a href=\"names/scopes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.2.</strong> Scopes</a></li><li class=\"chapter-item expanded \"><a href=\"names/preludes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.3.</strong> Preludes</a></li><li class=\"chapter-item expanded \"><a href=\"paths.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.4.</strong> Paths</a></li><li class=\"chapter-item expanded \"><a href=\"names/name-resolution.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.5.</strong> Name resolution</a></li><li class=\"chapter-item expanded \"><a href=\"visibility-and-privacy.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.6.</strong> Visibility and privacy</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"memory-model.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.</strong> Memory model</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"memory-allocation-and-lifetime.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.1.</strong> Memory allocation and lifetime</a></li><li class=\"chapter-item expanded \"><a href=\"variables.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.2.</strong> Variables</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"linkage.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.</strong> Linkage</a></li><li class=\"chapter-item expanded \"><a href=\"inline-assembly.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.</strong> Inline assembly</a></li><li class=\"chapter-item expanded \"><a href=\"unsafety.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.</strong> Unsafety</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"unsafe-keyword.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.1.</strong> The unsafe keyword</a></li><li class=\"chapter-item expanded \"><a href=\"behavior-considered-undefined.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.2.</strong> Behavior considered undefined</a></li><li class=\"chapter-item expanded \"><a href=\"behavior-not-considered-unsafe.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.3.</strong> Behavior not considered unsafe</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"const_eval.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.</strong> Constant Evaluation</a></li><li class=\"chapter-item expanded \"><a href=\"abi.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.</strong> Application Binary Interface</a></li><li class=\"chapter-item expanded \"><a href=\"runtime.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.</strong> The Rust runtime</a></li><li class=\"chapter-item expanded \"><a href=\"appendices.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.</strong> Appendices</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"macro-ambiguity.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.1.</strong> Macro Follow-Set Ambiguity Formal Specification</a></li><li class=\"chapter-item expanded \"><a href=\"influences.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.2.</strong> Influences</a></li><li class=\"chapter-item expanded \"><a href=\"glossary.html\" class=\"active\" tabindex=\"0\"><strong aria-hidden=\"true\">20.3.</strong> Glossary</a></li></ol></li></ol>\n            </div>\n            <div id=\"sidebar-resize-handle\" class=\"sidebar-resize-handle\">\n                <div class=\"sidebar-resize-indicator\"></div>\n            </div>\n        </nav>\n\n        <!-- Track and set sidebar scroll position -->\n        <script>\n            var sidebarScrollbox = document.querySelector('#sidebar .sidebar-scrollbox');\n            sidebarScrollbox.addEventListener('click', function(e) {\n                if (e.target.tagName === 'A') {\n                    sessionStorage.setItem('sidebar-scroll', sidebarScrollbox.scrollTop);\n                }\n            }, { passive: true });\n            var sidebarScrollTop = sessionStorage.getItem('sidebar-scroll');\n            sessionStorage.removeItem('sidebar-scroll');\n            if (sidebarScrollTop) {\n                // preserve sidebar scroll position when navigating via links within sidebar\n                sidebarScrollbox.scrollTop = sidebarScrollTop;\n            } else {\n                // scroll sidebar to current active section when navigating via \"next/previous chapter\" buttons\n                var activeSection = document.querySelector('#sidebar .active');\n                if (activeSection) {\n                    activeSection.scrollIntoView({ block: 'center' });\n                }\n            }\n        </script>\n\n        <div id=\"page-wrapper\" class=\"page-wrapper\">\n\n            <div class=\"page\">\n                                <div id=\"menu-bar-hover-placeholder\"></div>\n                <div id=\"menu-bar\" class=\"menu-bar\" style=\"top: 0px;\">\n                    <div class=\"left-buttons\">\n                        <label id=\"sidebar-toggle\" class=\"icon-button\" for=\"sidebar-toggle-anchor\" title=\"Toggle Table of Contents\" aria-label=\"Toggle Table of Contents\" aria-controls=\"sidebar\" aria-expanded=\"true\">\n                            <i class=\"fa fa-bars\"></i>\n                        </label>\n                        <button id=\"theme-toggle\" class=\"icon-button\" type=\"button\" title=\"Change theme\" aria-label=\"Change theme\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-controls=\"theme-list\">\n                            <i class=\"fa fa-paint-brush\"></i>\n                        </button>\n                        <ul id=\"theme-list\" class=\"theme-popup\" aria-label=\"Themes\" role=\"menu\">\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme theme-selected\" id=\"light\">Light</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"rust\">Rust</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"coal\">Coal</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"navy\">Navy</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"ayu\">Ayu</button></li>\n                        </ul>\n                        <button id=\"search-toggle\" class=\"icon-button\" type=\"button\" title=\"Search. (Shortkey: s)\" aria-label=\"Toggle Searchbar\" aria-expanded=\"false\" aria-keyshortcuts=\"S\" aria-controls=\"searchbar\">\n                            <i class=\"fa fa-search\"></i>\n                        </button>\n                    </div>\n\n                    <h1 class=\"menu-title\">The Rust Reference</h1>\n\n                    <div class=\"right-buttons\">\n                        <a href=\"print.html\" title=\"Print this book\" aria-label=\"Print this book\">\n                            <i id=\"print-button\" class=\"fa fa-print\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/reference/\" title=\"Git repository\" aria-label=\"Git repository\">\n                            <i id=\"git-repository-button\" class=\"fa fa-github\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/reference/edit/master/src/glossary.md\" title=\"Suggest an edit\" aria-label=\"Suggest an edit\">\n                            <i id=\"git-edit-button\" class=\"fa fa-edit\"></i>\n                        </a>\n\n                    </div>\n                </div>\n\n                <div id=\"search-wrapper\" class=\"hidden\">\n                    <form id=\"searchbar-outer\" class=\"searchbar-outer\">\n                        <input type=\"search\" id=\"searchbar\" name=\"searchbar\" placeholder=\"Search this book ...\" aria-controls=\"searchresults-outer\" aria-describedby=\"searchresults-header\">\n                    </form>\n                    <div id=\"searchresults-outer\" class=\"searchresults-outer hidden\">\n                        <div id=\"searchresults-header\" class=\"searchresults-header\"></div>\n                        <ul id=\"searchresults\">\n                        </ul>\n                    </div>\n                </div>\n\n                <!-- Apply ARIA attributes after the sidebar and the sidebar toggle button are added to the DOM -->\n                <script>\n                    document.getElementById('sidebar-toggle').setAttribute('aria-expanded', sidebar === 'visible');\n                    document.getElementById('sidebar').setAttribute('aria-hidden', sidebar !== 'visible');\n                    Array.from(document.querySelectorAll('#sidebar a')).forEach(function(link) {\n                        link.setAttribute('tabIndex', sidebar === 'visible' ? 0 : -1);\n                    });\n                </script>\n\n                <div id=\"content\" class=\"content\">\n                    <main>\n                        <h1 id=\"glossary\"><a class=\"header\" href=\"#glossary\">Glossary</a></h1>\n<h3 id=\"abstract-syntax-tree\"><a class=\"header\" href=\"#abstract-syntax-tree\">Abstract syntax tree</a></h3>\n<p>An ‘abstract syntax tree’, or ‘AST’, is an intermediate representation of\nthe structure of the program when the compiler is compiling it.</p>\n<h3 id=\"alignment\"><a class=\"header\" href=\"#alignment\">Alignment</a></h3>\n<p>The alignment of a value specifies what addresses values are preferred to\nstart at. Always a power of two. References to a value must be aligned.\n<a href=\"type-layout.html#size-and-alignment\">More</a>.</p>\n<h3 id=\"arity\"><a class=\"header\" href=\"#arity\">Arity</a></h3>\n<p>Arity refers to the number of arguments a function or operator takes.\nFor some examples, <code class=\"hljs\">f(2, 3)</code> and <code class=\"hljs\">g(4, 6)</code> have arity 2, while <code class=\"hljs\">h(8, 2, 6)</code>\nhas arity 3. The <code class=\"hljs\">!</code> operator has arity 1.</p>\n<h3 id=\"array\"><a class=\"header\" href=\"#array\">Array</a></h3>\n<p>An array, sometimes also called a fixed-size array or an inline array, is a value\ndescribing a collection of elements, each selected by an index that can be computed\nat run time by the program. It occupies a contiguous region of memory.</p>\n<h3 id=\"associated-item\"><a class=\"header\" href=\"#associated-item\">Associated item</a></h3>\n<p>An associated item is an item that is associated with another item. Associated\nitems are defined in <a href=\"items/implementations.html\">implementations</a> and declared in <a href=\"items/traits.html\">traits</a>. Only\nfunctions, constants, and type aliases can be associated. Contrast to a <a href=\"#free-item\">free\nitem</a>.</p>\n<h3 id=\"blanket-implementation\"><a class=\"header\" href=\"#blanket-implementation\">Blanket implementation</a></h3>\n<p>Any implementation where a type appears <a href=\"#uncovered-type\">uncovered</a>. <code class=\"hljs\">impl&lt;T&gt; Foo for T</code>, <code class=\"hljs\">impl&lt;T&gt; Bar&lt;T&gt; for T</code>, <code class=\"hljs\">impl&lt;T&gt; Bar&lt;Vec&lt;T&gt;&gt; for T</code>, and <code class=\"hljs\">impl&lt;T&gt; Bar&lt;T&gt; for Vec&lt;T&gt;</code> are considered blanket impls. However, <code class=\"hljs\">impl&lt;T&gt; Bar&lt;Vec&lt;T&gt;&gt; for Vec&lt;T&gt;</code> is not a blanket impl, as all instances of <code class=\"hljs\">T</code> which appear in this <code class=\"hljs\">impl</code>\nare covered by <code class=\"hljs\">Vec</code>.</p>\n<h3 id=\"bound\"><a class=\"header\" href=\"#bound\">Bound</a></h3>\n<p>Bounds are constraints on a type or trait. For example, if a bound\nis placed on the argument a function takes, types passed to that function\nmust abide by that constraint.</p>\n<h3 id=\"combinator\"><a class=\"header\" href=\"#combinator\">Combinator</a></h3>\n<p>Combinators are higher-order functions that apply only functions and\nearlier defined combinators to provide a result from its arguments.\nThey can be used to manage control flow in a modular fashion.</p>\n<h3 id=\"crate\"><a class=\"header\" href=\"#crate\">Crate</a></h3>\n<p>A crate is the unit of compilation and linking. There are different <a href=\"linkage.html\">types of\ncrates</a>, such as libraries or executables. Crates may link and refer to other\nlibrary crates, called external crates. A crate has a self-contained tree of\n<a href=\"items/modules.html\">modules</a>, starting from an unnamed root module called the crate root. <a href=\"items.html\">Items</a>\nmay be made visible to other crates by marking them as public in the crate\nroot, including through <a href=\"paths.html\">paths</a> of public modules.\n<a href=\"crates-and-source-files.html\">More</a>.</p>\n<h3 id=\"dispatch\"><a class=\"header\" href=\"#dispatch\">Dispatch</a></h3>\n<p>Dispatch is the mechanism to determine which specific version of code is actually\nrun when it involves polymorphism. Two major forms of dispatch are static dispatch and\ndynamic dispatch. While Rust favors static dispatch, it also supports dynamic dispatch\nthrough a mechanism called ‘trait objects’.</p>\n<h3 id=\"dynamically-sized-type\"><a class=\"header\" href=\"#dynamically-sized-type\">Dynamically sized type</a></h3>\n<p>A dynamically sized type (DST) is a type without a statically known size or alignment.</p>\n<h3 id=\"entity\"><a class=\"header\" href=\"#entity\">Entity</a></h3>\n<p>An <a href=\"names.html\"><em>entity</em></a> is a language construct that can be referred to in some way\nwithin the source program, usually via a <a href=\"paths.html\">path</a>. Entities include\n<a href=\"types.html\">types</a>, <a href=\"items.html\">items</a>, <a href=\"items/generics.html\">generic parameters</a>, <a href=\"patterns.html\">variable bindings</a>, <a href=\"tokens.html#lifetimes-and-loop-labels\">loop labels</a>,\n<a href=\"tokens.html#lifetimes-and-loop-labels\">lifetimes</a>, <a href=\"expressions/field-expr.html\">fields</a>, <a href=\"attributes.html\">attributes</a>, and <a href=\"attributes/diagnostics.html#lint-check-attributes\">lints</a>.</p>\n<h3 id=\"expression\"><a class=\"header\" href=\"#expression\">Expression</a></h3>\n<p>An expression is a combination of values, constants, variables, operators\nand functions that evaluate to a single value, with or without side-effects.</p>\n<p>For example, <code class=\"hljs\">2 + (3 * 4)</code> is an expression that returns the value 14.</p>\n<h3 id=\"free-item\"><a class=\"header\" href=\"#free-item\">Free item</a></h3>\n<p>An <a href=\"items.html\">item</a> that is not a member of an <a href=\"items/implementations.html\">implementation</a>, such as a <em>free\nfunction</em> or a <em>free const</em>. Contrast to an <a href=\"#associated-item\">associated item</a>.</p>\n<h3 id=\"fundamental-traits\"><a class=\"header\" href=\"#fundamental-traits\">Fundamental traits</a></h3>\n<p>A fundamental trait is one where adding an impl of it for an existing type is a breaking change.\nThe <code class=\"hljs\">Fn</code> traits and <code class=\"hljs\">Sized</code> are fundamental.</p>\n<h3 id=\"fundamental-type-constructors\"><a class=\"header\" href=\"#fundamental-type-constructors\">Fundamental type constructors</a></h3>\n<p>A fundamental type constructor is a type where implementing a <a href=\"#blanket-implementation\">blanket implementation</a> over it\nis a breaking change. <code class=\"hljs\">&amp;</code>, <code class=\"hljs\">&amp;mut</code>, <code class=\"hljs\">Box</code>, and <code class=\"hljs\">Pin</code>  are fundamental.</p>\n<p>Any time a type <code class=\"hljs\">T</code> is considered <a href=\"#local-type\">local</a>, <code class=\"hljs\">&amp;T</code>, <code class=\"hljs\">&amp;mut T</code>, <code class=\"hljs\">Box&lt;T&gt;</code>, and <code class=\"hljs\">Pin&lt;T&gt;</code>\nare also considered local. Fundamental type constructors cannot <a href=\"#uncovered-type\">cover</a> other types.\nAny time the term \"covered type\" is used,\nthe <code class=\"hljs\">T</code> in <code class=\"hljs\">&amp;T</code>, <code class=\"hljs\">&amp;mut T</code>, <code class=\"hljs\">Box&lt;T&gt;</code>, and <code class=\"hljs\">Pin&lt;T&gt;</code> is not considered covered.</p>\n<h3 id=\"inhabited\"><a class=\"header\" href=\"#inhabited\">Inhabited</a></h3>\n<p>A type is inhabited if it has constructors and therefore can be instantiated. An inhabited type is\nnot \"empty\" in the sense that there can be values of the type. Opposite of\n<a href=\"#uninhabited\">Uninhabited</a>.</p>\n<h3 id=\"inherent-implementation\"><a class=\"header\" href=\"#inherent-implementation\">Inherent implementation</a></h3>\n<p>An <a href=\"items/implementations.html\">implementation</a> that applies to a nominal type, not to a trait-type pair.\n<a href=\"items/implementations.html#inherent-implementations\">More</a>.</p>\n<h3 id=\"inherent-method\"><a class=\"header\" href=\"#inherent-method\">Inherent method</a></h3>\n<p>A <a href=\"items/associated-items.html#methods\">method</a> defined in an <a href=\"items/implementations.html#inherent-implementations\">inherent implementation</a>, not in a trait\nimplementation.</p>\n<h3 id=\"initialized\"><a class=\"header\" href=\"#initialized\">Initialized</a></h3>\n<p>A variable is initialized if it has been assigned a value and hasn't since been\nmoved from. All other memory locations are assumed to be uninitialized. Only\nunsafe Rust can create a memory location without initializing it.</p>\n<h3 id=\"local-trait\"><a class=\"header\" href=\"#local-trait\">Local trait</a></h3>\n<p>A <code class=\"hljs\">trait</code> which was defined in the current crate. A trait definition is local\nor not independent of applied type arguments. Given <code class=\"hljs\">trait Foo&lt;T, U&gt;</code>,\n<code class=\"hljs\">Foo</code> is always local, regardless of the types substituted for <code class=\"hljs\">T</code> and <code class=\"hljs\">U</code>.</p>\n<h3 id=\"local-type\"><a class=\"header\" href=\"#local-type\">Local type</a></h3>\n<p>A <code class=\"hljs\">struct</code>, <code class=\"hljs\">enum</code>, or <code class=\"hljs\">union</code> which was defined in the current crate.\nThis is not affected by applied type arguments. <code class=\"hljs\">struct Foo</code> is considered local, but\n<code class=\"hljs\">Vec&lt;Foo&gt;</code> is not. <code class=\"hljs\">LocalType&lt;ForeignType&gt;</code> is local. Type aliases do not\naffect locality.</p>\n<h3 id=\"module\"><a class=\"header\" href=\"#module\">Module</a></h3>\n<p>A module is a container for zero or more <a href=\"items.html\">items</a>. Modules are organized in a\ntree, starting from an unnamed module at the root called the crate root or the\nroot module. <a href=\"paths.html\">Paths</a> may be used to refer to items from other modules, which\nmay be restricted by <a href=\"visibility-and-privacy.html\">visibility rules</a>.\n<a href=\"items/modules.html\">More</a></p>\n<h3 id=\"name\"><a class=\"header\" href=\"#name\">Name</a></h3>\n<p>A <a href=\"names.html\"><em>name</em></a> is an <a href=\"identifiers.html\">identifier</a> or <a href=\"tokens.html#lifetimes-and-loop-labels\">lifetime or loop label</a> that refers to an\n<a href=\"#entity\">entity</a>. A <em>name binding</em> is when an entity declaration introduces\nan identifier or label associated with that entity. <a href=\"paths.html\">Paths</a>,\nidentifiers, and labels are used to refer to an entity.</p>\n<h3 id=\"name-resolution\"><a class=\"header\" href=\"#name-resolution\">Name resolution</a></h3>\n<p><a href=\"names/name-resolution.html\"><em>Name resolution</em></a> is the compile-time process of tying <a href=\"paths.html\">paths</a>,\n<a href=\"identifiers.html\">identifiers</a>, and <a href=\"tokens.html#lifetimes-and-loop-labels\">labels</a> to <a href=\"#entity\">entity</a> declarations.</p>\n<h3 id=\"namespace\"><a class=\"header\" href=\"#namespace\">Namespace</a></h3>\n<p>A <em>namespace</em> is a logical grouping of declared <a href=\"#name\">names</a> based on the\nkind of <a href=\"#entity\">entity</a> the name refers to. Namespaces allow the occurrence\nof a name in one namespace to not conflict with the same name in another\nnamespace.</p>\n<p>Within a namespace, names are organized in a hierarchy, where each level of\nthe hierarchy has its own collection of named entities.</p>\n<h3 id=\"nominal-types\"><a class=\"header\" href=\"#nominal-types\">Nominal types</a></h3>\n<p>Types that can be referred to by a path directly. Specifically <a href=\"items/enumerations.html\">enums</a>,\n<a href=\"items/structs.html\">structs</a>, <a href=\"items/unions.html\">unions</a>, and <a href=\"types/trait-object.html\">trait objects</a>.</p>\n<h3 id=\"object-safe-traits\"><a class=\"header\" href=\"#object-safe-traits\">Object safe traits</a></h3>\n<p><a href=\"items/traits.html\">Traits</a> that can be used as <a href=\"types/trait-object.html\">trait objects</a>. Only traits that follow specific\n<a href=\"items/traits.html#object-safety\">rules</a> are object safe.</p>\n<h3 id=\"path\"><a class=\"header\" href=\"#path\">Path</a></h3>\n<p>A <a href=\"paths.html\"><em>path</em></a> is a sequence of one or more path segments used to refer to an\n<a href=\"#entity\">entity</a> in the current scope or other levels of a\n<a href=\"#namespace\">namespace</a> hierarchy.</p>\n<h3 id=\"prelude\"><a class=\"header\" href=\"#prelude\">Prelude</a></h3>\n<p>Prelude, or The Rust Prelude, is a small collection of items - mostly traits - that are\nimported into every module of every crate. The traits in the prelude are pervasive.</p>\n<h3 id=\"scope\"><a class=\"header\" href=\"#scope\">Scope</a></h3>\n<p>A <a href=\"names/scopes.html\"><em>scope</em></a> is the region of source text where a named <a href=\"#entity\">entity</a> may\nbe referenced with that name.</p>\n<h3 id=\"scrutinee\"><a class=\"header\" href=\"#scrutinee\">Scrutinee</a></h3>\n<p>A scrutinee is the expression that is matched on in <code class=\"hljs\">match</code> expressions and\nsimilar pattern matching constructs. For example, in <code class=\"hljs\">match x { A =&gt; 1, B =&gt; 2 }</code>,\nthe expression <code class=\"hljs\">x</code> is the scrutinee.</p>\n<h3 id=\"size\"><a class=\"header\" href=\"#size\">Size</a></h3>\n<p>The size of a value has two definitions.</p>\n<p>The first is that it is how much memory must be allocated to store that value.</p>\n<p>The second is that it is the offset in bytes between successive elements in an\narray with that item type.</p>\n<p>It is a multiple of the alignment, including zero. The size can change\ndepending on compiler version (as new optimizations are made) and target\nplatform (similar to how <code class=\"hljs\">usize</code> varies per-platform).</p>\n<p><a href=\"type-layout.html#size-and-alignment\">More</a>.</p>\n<h3 id=\"slice\"><a class=\"header\" href=\"#slice\">Slice</a></h3>\n<p>A slice is dynamically-sized view into a contiguous sequence, written as <code class=\"hljs\">[T]</code>.</p>\n<p>It is often seen in its borrowed forms, either mutable or shared. The shared\nslice type is <code class=\"hljs\">&amp;[T]</code>, while the mutable slice type is <code class=\"hljs\">&amp;mut [T]</code>, where <code class=\"hljs\">T</code> represents\nthe element type.</p>\n<h3 id=\"statement\"><a class=\"header\" href=\"#statement\">Statement</a></h3>\n<p>A statement is the smallest standalone element of a programming language\nthat commands a computer to perform an action.</p>\n<h3 id=\"string-literal\"><a class=\"header\" href=\"#string-literal\">String literal</a></h3>\n<p>A string literal is a string stored directly in the final binary, and so will be\nvalid for the <code class=\"hljs\">'static</code> duration.</p>\n<p>Its type is <code class=\"hljs\">'static</code> duration borrowed string slice, <code class=\"hljs\">&amp;'static str</code>.</p>\n<h3 id=\"string-slice\"><a class=\"header\" href=\"#string-slice\">String slice</a></h3>\n<p>A string slice is the most primitive string type in Rust, written as <code class=\"hljs\">str</code>. It is\noften seen in its borrowed forms, either mutable or shared. The shared\nstring slice type is <code class=\"hljs\">&amp;str</code>, while the mutable string slice type is <code class=\"hljs\">&amp;mut str</code>.</p>\n<p>Strings slices are always valid UTF-8.</p>\n<h3 id=\"trait\"><a class=\"header\" href=\"#trait\">Trait</a></h3>\n<p>A trait is a language item that is used for describing the functionalities a type must provide.\nIt allows a type to make certain promises about its behavior.</p>\n<p>Generic functions and generic structs can use traits to constrain, or bound, the types they accept.</p>\n<h3 id=\"turbofish\"><a class=\"header\" href=\"#turbofish\">Turbofish</a></h3>\n<p>Paths with generic parameters in expressions must prefix the opening brackets with a <code class=\"hljs\">::</code>.\nCombined with the angular brackets for generics, this looks like a fish <code class=\"hljs\">::&lt;&gt;</code>.\nAs such, this syntax is colloquially referred to as turbofish syntax.</p>\n<p>Examples:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> ok_num = Ok::&lt;_, ()&gt;(<span class=\"hljs-number\">5</span>);\n<span class=\"hljs-keyword\">let</span> vec = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>].iter().map(|n| n * <span class=\"hljs-number\">2</span>).collect::&lt;<span class=\"hljs-built_in\">Vec</span>&lt;_&gt;&gt;();\n<span class=\"boring\">}</span></code></pre></pre>\n<p>This <code class=\"hljs\">::</code> prefix is required to disambiguate generic paths with multiple comparisons in a comma-separate list.\nSee <a href=\"https://github.com/rust-lang/rust/blob/1.58.0/src/test/ui/parser/bastion-of-the-turbofish.rs\">the bastion of the turbofish</a> for an example where not having the prefix would be ambiguous.</p>\n<h3 id=\"uncovered-type\"><a class=\"header\" href=\"#uncovered-type\">Uncovered type</a></h3>\n<p>A type which does not appear as an argument to another type. For example,\n<code class=\"hljs\">T</code> is uncovered, but the <code class=\"hljs\">T</code> in <code class=\"hljs\">Vec&lt;T&gt;</code> is covered. This is only relevant for\ntype arguments.</p>\n<h3 id=\"undefined-behavior\"><a class=\"header\" href=\"#undefined-behavior\">Undefined behavior</a></h3>\n<p>Compile-time or run-time behavior that is not specified. This may result in,\nbut is not limited to: process termination or corruption; improper, incorrect,\nor unintended computation; or platform-specific results.\n<a href=\"behavior-considered-undefined.html\">More</a>.</p>\n<h3 id=\"uninhabited\"><a class=\"header\" href=\"#uninhabited\">Uninhabited</a></h3>\n<p>A type is uninhabited if it has no constructors and therefore can never be instantiated. An\nuninhabited type is \"empty\" in the sense that there are no values of the type. The canonical\nexample of an uninhabited type is the <a href=\"types/never.html\">never type</a> <code class=\"hljs\">!</code>, or an enum with no variants\n<code class=\"hljs\">enum Never { }</code>. Opposite of <a href=\"#inhabited\">Inhabited</a>.</p>\n\n                    </main>\n\n                    <nav class=\"nav-wrapper\" aria-label=\"Page navigation\">\n                        <!-- Mobile navigation buttons -->\n                            <a rel=\"prev\" href=\"influences.html\" class=\"mobile-nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                                <i class=\"fa fa-angle-left\"></i>\n                            </a>\n\n\n                        <div style=\"clear: both\"></div>\n                    </nav>\n                </div>\n            </div>\n\n            <nav class=\"nav-wide-wrapper\" aria-label=\"Page navigation\">\n                    <a rel=\"prev\" href=\"influences.html\" class=\"nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                        <i class=\"fa fa-angle-left\"></i>\n                    </a>\n\n            </nav>\n\n        </div>\n\n\n\n\n        <script>\n            window.playground_copyable = true;\n        </script>\n\n\n        <script src=\"elasticlunr.min.js\"></script>\n        <script src=\"mark.min.js\"></script>\n        <script src=\"searcher.js\"></script>\n\n        <script src=\"clipboard.min.js\"></script>\n        <script src=\"highlight.js\"></script>\n        <script src=\"book.js\"></script>\n\n        <!-- Custom JS scripts -->\n\n\n    </div>\n    \n\n</body></html>",
	"crawlDate": "2024-07-28T05:13:39.822Z"
}