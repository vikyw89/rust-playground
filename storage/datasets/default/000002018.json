{
	"title": "type_name_of_val in std::any - Rust",
	"url": "https://doc.rust-lang.org/stable/std/any/fn.type_name_of_val.html",
	"markdown": "# type\\_name\\_of\\_val in std::any - Rust\n\n```\npub fn type_name_of_val<T>(_val: &T) -> &'static strwhere\n    T: ?Sized,\n```\n\nExpand description\n\nReturns the type name of the pointed-to value as a string slice.\n\nThis is the same as `type_name::<T>()`, but can be used where the type of a variable is not easily available.\n\n## [§](#note)Note\n\nLike [`type_name`](fn.type_name.html \"fn std::any::type_name\"), this is intended for diagnostic use and the exact output is not guaranteed. It provides a best-effort description, but the output may change between versions of the compiler.\n\nIn short: use this for debugging, avoid using the output to affect program behavior. More information is available at [`type_name`](fn.type_name.html \"fn std::any::type_name\").\n\nAdditionally, this function does not resolve trait objects. This means that `type_name_of_val(&7u32 as &dyn Debug)` may return `\"dyn Debug\"`, but will not return `\"u32\"` at this time.\n\n## [§](#examples)Examples\n\nPrints the default integer and float types.\n\n```\nuse std::any::type_name_of_val;\n\nlet s = \"foo\";\nlet x: i32 = 1;\nlet y: f32 = 1.0;\n\nassert!(type_name_of_val(&s).contains(\"str\"));\nassert!(type_name_of_val(&x).contains(\"i32\"));\nassert!(type_name_of_val(&y).contains(\"f32\"));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::any::type_name_of_val;%0A++++%0A++++let+s+=+%22foo%22;%0A++++let+x:+i32+=+1;%0A++++let+y:+f32+=+1.0;%0A++++%0A++++assert!(type_name_of_val(%26s).contains(%22str%22));%0A++++assert!(type_name_of_val(%26x).contains(%22i32%22));%0A++++assert!(type_name_of_val(%26y).contains(%22f32%22));%0A%7D&edition=2021)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Returns the type name of the pointed-to value as a string slice.\"><title>type_name_of_val in std::any - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc fn\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><div class=\"sidebar-elems\"><h2><a href=\"index.html\">In std::any</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.TypeId.html\">TypeId</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.Any.html\">Any</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.type_name.html\">type_name</a></li><li><a href=\"fn.type_name_of_val.html\">type_name_of_val</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Function <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">any</a>::<wbr><a class=\"fn\" href=\"#\">type_name_of_val</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.76.0, const unstable\">1.76.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/63084\" title=\"Tracking issue for const_type_name\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#739\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub fn type_name_of_val&lt;T&gt;(_val: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>) -&gt; &amp;'static <a class=\"primitive\" href=\"../primitive.str.html\">str</a><div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Returns the type name of the pointed-to value as a string slice.</p>\n<p>This is the same as <code>type_name::&lt;T&gt;()</code>, but can be used where the type of a\nvariable is not easily available.</p>\n<h2 id=\"note\"><a class=\"doc-anchor\" href=\"#note\">§</a>Note</h2>\n<p>Like <a href=\"fn.type_name.html\" title=\"fn std::any::type_name\"><code>type_name</code></a>, this is intended for diagnostic use and the exact output is not\nguaranteed. It provides a best-effort description, but the output may change between\nversions of the compiler.</p>\n<p>In short: use this for debugging, avoid using the output to affect program behavior. More\ninformation is available at <a href=\"fn.type_name.html\" title=\"fn std::any::type_name\"><code>type_name</code></a>.</p>\n<p>Additionally, this function does not resolve trait objects. This means that\n<code>type_name_of_val(&amp;7u32 as &amp;dyn Debug)</code> may return <code>\"dyn Debug\"</code>, but will not return <code>\"u32\"</code>\nat this time.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<p>Prints the default integer and float types.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::any::type_name_of_val;\n\n<span class=\"kw\">let </span>s = <span class=\"string\">\"foo\"</span>;\n<span class=\"kw\">let </span>x: i32 = <span class=\"number\">1</span>;\n<span class=\"kw\">let </span>y: f32 = <span class=\"number\">1.0</span>;\n\n<span class=\"macro\">assert!</span>(type_name_of_val(<span class=\"kw-2\">&amp;</span>s).contains(<span class=\"string\">\"str\"</span>));\n<span class=\"macro\">assert!</span>(type_name_of_val(<span class=\"kw-2\">&amp;</span>x).contains(<span class=\"string\">\"i32\"</span>));\n<span class=\"macro\">assert!</span>(type_name_of_val(<span class=\"kw-2\">&amp;</span>y).contains(<span class=\"string\">\"f32\"</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::any::type_name_of_val;%0A++++%0A++++let+s+=+%22foo%22;%0A++++let+x:+i32+=+1;%0A++++let+y:+f32+=+1.0;%0A++++%0A++++assert!(type_name_of_val(%26s).contains(%22str%22));%0A++++assert!(type_name_of_val(%26x).contains(%22i32%22));%0A++++assert!(type_name_of_val(%26y).contains(%22f32%22));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:21:58.838Z"
}