{
	"title": "Coroutine in std::ops - Rust",
	"url": "https://doc.rust-lang.org/stable/std/ops/trait.Coroutine.html",
	"markdown": "# Coroutine in std::ops - Rust\n\n```\npub trait Coroutine<R = ()> {\n    type Yield;\n    type Return;\n\n    // Required method\n    fn resume(\n        self: Pin<&mut Self>,\n        arg: R,\n    ) -> CoroutineState<Self::Yield, Self::Return>;\n}\n```\n\nðŸ”¬This is a nightly-only experimental API. (`coroutine_trait`Â [#43122](https://github.com/rust-lang/rust/issues/43122))\n\nExpand description\n\nThe trait implemented by builtin coroutine types.\n\nCoroutines are currently an experimental language feature in Rust. Added in [RFC 2033](https://github.com/rust-lang/rfcs/pull/2033) coroutines are currently intended to primarily provide a building block for async/await syntax but will likely extend to also providing an ergonomic definition for iterators and other primitives.\n\nThe syntax and semantics for coroutines is unstable and will require a further RFC for stabilization. At this time, though, the syntax is closure-like:\n\n```\n#![feature(coroutines)]\n#![feature(coroutine_trait)]\n#![feature(stmt_expr_attributes)]\n\nuse std::ops::{Coroutine, CoroutineState};\nuse std::pin::Pin;\n\nfn main() {\n    let mut coroutine = #[coroutine] || {\n        yield 1;\n        \"foo\"\n    };\n\n    match Pin::new(&mut coroutine).resume(()) {\n        CoroutineState::Yielded(1) => {}\n        _ => panic!(\"unexpected return from resume\"),\n    }\n    match Pin::new(&mut coroutine).resume(()) {\n        CoroutineState::Complete(\"foo\") => {}\n        _ => panic!(\"unexpected return from resume\"),\n    }\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(coroutines)%5D%0A%23!%5Bfeature(coroutine_trait)%5D%0A%23!%5Bfeature(stmt_expr_attributes)%5D%0A%0Ause+std::ops::%7BCoroutine,+CoroutineState%7D;%0Ause+std::pin::Pin;%0A%0Afn+main()+%7B%0A++++let+mut+coroutine+=+%23%5Bcoroutine%5D+%7C%7C+%7B%0A++++++++yield+1;%0A++++++++%22foo%22%0A++++%7D;%0A%0A++++match+Pin::new(%26mut+coroutine).resume(())+%7B%0A++++++++CoroutineState::Yielded(1)+=%3E+%7B%7D%0A++++++++_+=%3E+panic!(%22unexpected+return+from+resume%22),%0A++++%7D%0A++++match+Pin::new(%26mut+coroutine).resume(())+%7B%0A++++++++CoroutineState::Complete(%22foo%22)+=%3E+%7B%7D%0A++++++++_+=%3E+panic!(%22unexpected+return+from+resume%22),%0A++++%7D%0A%7D&version=nightly&edition=2021)\n\nMore documentation of coroutines can be found in the [unstable book](../../unstable-book/language-features/coroutines.html).\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ops/coroutine.rs.html#79)\n\nðŸ”¬This is a nightly-only experimental API. (`coroutine_trait`Â [#43122](https://github.com/rust-lang/rust/issues/43122))\n\nThe type of value this coroutine yields.\n\nThis associated type corresponds to the `yield` expression and the values which are allowed to be returned each time a coroutine yields. For example an iterator-as-a-coroutine would likely have this type as `T`, the type being iterated over.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ops/coroutine.rs.html#87)\n\nðŸ”¬This is a nightly-only experimental API. (`coroutine_trait`Â [#43122](https://github.com/rust-lang/rust/issues/43122))\n\nThe type of value this coroutine returns.\n\nThis corresponds to the type returned from a coroutine either with a `return` statement or implicitly as the last expression of a coroutine literal. For example futures would use this as `Result<T, E>` as it represents a completed future.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ops/coroutine.rs.html#116)\n\nðŸ”¬This is a nightly-only experimental API. (`coroutine_trait`Â [#43122](https://github.com/rust-lang/rust/issues/43122))\n\nResumes the execution of this coroutine.\n\nThis function will resume execution of the coroutine or start execution if it hasnâ€™t already. This call will return back into the coroutineâ€™s last suspension point, resuming execution from the latest `yield`. The coroutine will continue executing until it either yields or returns, at which point this function will return.\n\n##### [Â§](#return-value)Return value\n\nThe `CoroutineState` enum returned from this function indicates what state the coroutine is in upon returning. If the `Yielded` variant is returned then the coroutine has reached a suspension point and a value has been yielded out. Coroutines in this state are available for resumption at a later point.\n\nIf `Complete` is returned then the coroutine has completely finished with the value provided. It is invalid for the coroutine to be resumed again.\n\n##### [Â§](#panics)Panics\n\nThis function may panic if it is called after the `Complete` variant has been returned previously. While coroutine literals in the language are guaranteed to panic on resuming after `Complete`, this is not guaranteed for all implementations of the `Coroutine` trait.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"The trait implemented by builtin coroutine types.\"><title>Coroutine in std::ops - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc trait\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">Coroutine</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">Coroutine</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#required-associated-types\">Required Associated Types</a></h3><ul class=\"block\"><li><a href=\"#associatedtype.Return\">Return</a></li><li><a href=\"#associatedtype.Yield\">Yield</a></li></ul><h3><a href=\"#required-methods\">Required Methods</a></h3><ul class=\"block\"><li><a href=\"#tymethod.resume\">resume</a></li></ul><h3><a href=\"#implementors\">Implementors</a></h3></section><h2><a href=\"index.html\">In std::ops</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.Range.html\">Range</a></li><li><a href=\"struct.RangeFrom.html\">RangeFrom</a></li><li><a href=\"struct.RangeFull.html\">RangeFull</a></li><li><a href=\"struct.RangeInclusive.html\">RangeInclusive</a></li><li><a href=\"struct.RangeTo.html\">RangeTo</a></li><li><a href=\"struct.RangeToInclusive.html\">RangeToInclusive</a></li><li><a href=\"struct.Yeet.html\">Yeet</a></li></ul><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.Bound.html\">Bound</a></li><li><a href=\"enum.ControlFlow.html\">ControlFlow</a></li><li><a href=\"enum.CoroutineState.html\">CoroutineState</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.Add.html\">Add</a></li><li><a href=\"trait.AddAssign.html\">AddAssign</a></li><li><a href=\"trait.AsyncFn.html\">AsyncFn</a></li><li><a href=\"trait.AsyncFnMut.html\">AsyncFnMut</a></li><li><a href=\"trait.AsyncFnOnce.html\">AsyncFnOnce</a></li><li><a href=\"trait.BitAnd.html\">BitAnd</a></li><li><a href=\"trait.BitAndAssign.html\">BitAndAssign</a></li><li><a href=\"trait.BitOr.html\">BitOr</a></li><li><a href=\"trait.BitOrAssign.html\">BitOrAssign</a></li><li><a href=\"trait.BitXor.html\">BitXor</a></li><li><a href=\"trait.BitXorAssign.html\">BitXorAssign</a></li><li><a href=\"trait.CoerceUnsized.html\">CoerceUnsized</a></li><li><a href=\"trait.Coroutine.html\">Coroutine</a></li><li><a href=\"trait.Deref.html\">Deref</a></li><li><a href=\"trait.DerefMut.html\">DerefMut</a></li><li><a href=\"trait.DerefPure.html\">DerefPure</a></li><li><a href=\"trait.DispatchFromDyn.html\">DispatchFromDyn</a></li><li><a href=\"trait.Div.html\">Div</a></li><li><a href=\"trait.DivAssign.html\">DivAssign</a></li><li><a href=\"trait.Drop.html\">Drop</a></li><li><a href=\"trait.Fn.html\">Fn</a></li><li><a href=\"trait.FnMut.html\">FnMut</a></li><li><a href=\"trait.FnOnce.html\">FnOnce</a></li><li><a href=\"trait.FromResidual.html\">FromResidual</a></li><li><a href=\"trait.Index.html\">Index</a></li><li><a href=\"trait.IndexMut.html\">IndexMut</a></li><li><a href=\"trait.Mul.html\">Mul</a></li><li><a href=\"trait.MulAssign.html\">MulAssign</a></li><li><a href=\"trait.Neg.html\">Neg</a></li><li><a href=\"trait.Not.html\">Not</a></li><li><a href=\"trait.OneSidedRange.html\">OneSidedRange</a></li><li><a href=\"trait.RangeBounds.html\">RangeBounds</a></li><li><a href=\"trait.Rem.html\">Rem</a></li><li><a href=\"trait.RemAssign.html\">RemAssign</a></li><li><a href=\"trait.Residual.html\">Residual</a></li><li><a href=\"trait.Shl.html\">Shl</a></li><li><a href=\"trait.ShlAssign.html\">ShlAssign</a></li><li><a href=\"trait.Shr.html\">Shr</a></li><li><a href=\"trait.ShrAssign.html\">ShrAssign</a></li><li><a href=\"trait.Sub.html\">Sub</a></li><li><a href=\"trait.SubAssign.html\">SubAssign</a></li><li><a href=\"trait.Try.html\">Try</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type â€˜Sâ€™ or â€˜/â€™ to search, â€˜?â€™ for more optionsâ€¦\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Trait <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">ops</a>::<wbr><a class=\"trait\" href=\"#\">Coroutine</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/coroutine.rs.html#72\">source</a> Â· <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>âˆ’</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub trait Coroutine&lt;R = <a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt; {\n    type <a href=\"#associatedtype.Yield\" class=\"associatedtype\">Yield</a>;\n    type <a href=\"#associatedtype.Return\" class=\"associatedtype\">Return</a>;\n\n    // Required method\n    fn <a href=\"#tymethod.resume\" class=\"fn\">resume</a>(\n        self: <a class=\"struct\" href=\"../pin/struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut Self</a>&gt;,\n        arg: R,\n    ) -&gt; <a class=\"enum\" href=\"enum.CoroutineState.html\" title=\"enum std::ops::CoroutineState\">CoroutineState</a>&lt;Self::<a class=\"associatedtype\" href=\"trait.Coroutine.html#associatedtype.Yield\" title=\"type std::ops::Coroutine::Yield\">Yield</a>, Self::<a class=\"associatedtype\" href=\"trait.Coroutine.html#associatedtype.Return\" title=\"type std::ops::Coroutine::Return\">Return</a>&gt;;\n}</code></pre><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>coroutine_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/43122\">#43122</a>)</span></div></span><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>The trait implemented by builtin coroutine types.</p>\n<p>Coroutines are currently an\nexperimental language feature in Rust. Added in <a href=\"https://github.com/rust-lang/rfcs/pull/2033\">RFC 2033</a> coroutines are\ncurrently intended to primarily provide a building block for async/await\nsyntax but will likely extend to also providing an ergonomic definition for\niterators and other primitives.</p>\n<p>The syntax and semantics for coroutines is unstable and will require a\nfurther RFC for stabilization. At this time, though, the syntax is\nclosure-like:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(coroutines)]\n#![feature(coroutine_trait)]\n#![feature(stmt_expr_attributes)]\n\n</span><span class=\"kw\">use </span>std::ops::{Coroutine, CoroutineState};\n<span class=\"kw\">use </span>std::pin::Pin;\n\n<span class=\"kw\">fn </span>main() {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>coroutine = <span class=\"attr\">#[coroutine] </span>|| {\n        <span class=\"kw\">yield </span><span class=\"number\">1</span>;\n        <span class=\"string\">\"foo\"\n    </span>};\n\n    <span class=\"kw\">match </span>Pin::new(<span class=\"kw-2\">&amp;mut </span>coroutine).resume(()) {\n        CoroutineState::Yielded(<span class=\"number\">1</span>) =&gt; {}\n        <span class=\"kw\">_ </span>=&gt; <span class=\"macro\">panic!</span>(<span class=\"string\">\"unexpected return from resume\"</span>),\n    }\n    <span class=\"kw\">match </span>Pin::new(<span class=\"kw-2\">&amp;mut </span>coroutine).resume(()) {\n        CoroutineState::Complete(<span class=\"string\">\"foo\"</span>) =&gt; {}\n        <span class=\"kw\">_ </span>=&gt; <span class=\"macro\">panic!</span>(<span class=\"string\">\"unexpected return from resume\"</span>),\n    }\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(coroutines)%5D%0A%23!%5Bfeature(coroutine_trait)%5D%0A%23!%5Bfeature(stmt_expr_attributes)%5D%0A%0Ause+std::ops::%7BCoroutine,+CoroutineState%7D;%0Ause+std::pin::Pin;%0A%0Afn+main()+%7B%0A++++let+mut+coroutine+=+%23%5Bcoroutine%5D+%7C%7C+%7B%0A++++++++yield+1;%0A++++++++%22foo%22%0A++++%7D;%0A%0A++++match+Pin::new(%26mut+coroutine).resume(())+%7B%0A++++++++CoroutineState::Yielded(1)+=%3E+%7B%7D%0A++++++++_+=%3E+panic!(%22unexpected+return+from+resume%22),%0A++++%7D%0A++++match+Pin::new(%26mut+coroutine).resume(())+%7B%0A++++++++CoroutineState::Complete(%22foo%22)+=%3E+%7B%7D%0A++++++++_+=%3E+panic!(%22unexpected+return+from+resume%22),%0A++++%7D%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<p>More documentation of coroutines can be found in the <a href=\"../../unstable-book/language-features/coroutines.html\">unstable book</a>.</p>\n</div></details><h2 id=\"required-associated-types\" class=\"section-header\">Required Associated Types<a href=\"#required-associated-types\" class=\"anchor\">Â§</a></h2><div class=\"methods\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Yield\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/coroutine.rs.html#79\">source</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Yield\" class=\"associatedtype\">Yield</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>coroutine_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/43122\">#43122</a>)</span></div></span></summary><div class=\"docblock\"><p>The type of value this coroutine yields.</p>\n<p>This associated type corresponds to the <code>yield</code> expression and the\nvalues which are allowed to be returned each time a coroutine yields.\nFor example an iterator-as-a-coroutine would likely have this type as\n<code>T</code>, the type being iterated over.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Return\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/coroutine.rs.html#87\">source</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Return\" class=\"associatedtype\">Return</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>coroutine_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/43122\">#43122</a>)</span></div></span></summary><div class=\"docblock\"><p>The type of value this coroutine returns.</p>\n<p>This corresponds to the type returned from a coroutine either with a\n<code>return</code> statement or implicitly as the last expression of a coroutine\nliteral. For example futures would use this as <code>Result&lt;T, E&gt;</code> as it\nrepresents a completed future.</p>\n</div></details></div><h2 id=\"required-methods\" class=\"section-header\">Required Methods<a href=\"#required-methods\" class=\"anchor\">Â§</a></h2><div class=\"methods\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.resume\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/coroutine.rs.html#116\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.resume\" class=\"fn\">resume</a>(\n    self: <a class=\"struct\" href=\"../pin/struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut Self</a>&gt;,\n    arg: R,\n) -&gt; <a class=\"enum\" href=\"enum.CoroutineState.html\" title=\"enum std::ops::CoroutineState\">CoroutineState</a>&lt;Self::<a class=\"associatedtype\" href=\"trait.Coroutine.html#associatedtype.Yield\" title=\"type std::ops::Coroutine::Yield\">Yield</a>, Self::<a class=\"associatedtype\" href=\"trait.Coroutine.html#associatedtype.Return\" title=\"type std::ops::Coroutine::Return\">Return</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>coroutine_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/43122\">#43122</a>)</span></div></span></summary><div class=\"docblock\"><p>Resumes the execution of this coroutine.</p>\n<p>This function will resume execution of the coroutine or start execution\nif it hasnâ€™t already. This call will return back into the coroutineâ€™s\nlast suspension point, resuming execution from the latest <code>yield</code>. The\ncoroutine will continue executing until it either yields or returns, at\nwhich point this function will return.</p>\n<h5 id=\"return-value\"><a class=\"doc-anchor\" href=\"#return-value\">Â§</a>Return value</h5>\n<p>The <code>CoroutineState</code> enum returned from this function indicates what\nstate the coroutine is in upon returning. If the <code>Yielded</code> variant is\nreturned then the coroutine has reached a suspension point and a value\nhas been yielded out. Coroutines in this state are available for\nresumption at a later point.</p>\n<p>If <code>Complete</code> is returned then the coroutine has completely finished\nwith the value provided. It is invalid for the coroutine to be resumed\nagain.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">Â§</a>Panics</h5>\n<p>This function may panic if it is called after the <code>Complete</code> variant has\nbeen returned previously. While coroutine literals in the language are\nguaranteed to panic on resuming after <code>Complete</code>, this is not guaranteed\nfor all implementations of the <code>Coroutine</code> trait.</p>\n</div></details></div><h2 id=\"implementors\" class=\"section-header\">Implementors<a href=\"#implementors\" class=\"anchor\">Â§</a></h2><div id=\"implementors-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Coroutine%3CR%3E-for-%26mut+G\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/coroutine.rs.html#130\">source</a><a href=\"#impl-Coroutine%3CR%3E-for-%26mut+G\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;G, R&gt; <a class=\"trait\" href=\"trait.Coroutine.html\" title=\"trait std::ops::Coroutine\">Coroutine</a>&lt;R&gt; for <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut G</a><div class=\"where\">where\n    G: <a class=\"trait\" href=\"trait.Coroutine.html\" title=\"trait std::ops::Coroutine\">Coroutine</a>&lt;R&gt; + <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Yield-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Yield-1\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Yield\" class=\"associatedtype\">Yield</a> = &lt;G as <a class=\"trait\" href=\"trait.Coroutine.html\" title=\"trait std::ops::Coroutine\">Coroutine</a>&lt;R&gt;&gt;::<a class=\"associatedtype\" href=\"trait.Coroutine.html#associatedtype.Yield\" title=\"type std::ops::Coroutine::Yield\">Yield</a></h4></section><section id=\"associatedtype.Return-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Return-1\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Return\" class=\"associatedtype\">Return</a> = &lt;G as <a class=\"trait\" href=\"trait.Coroutine.html\" title=\"trait std::ops::Coroutine\">Coroutine</a>&lt;R&gt;&gt;::<a class=\"associatedtype\" href=\"trait.Coroutine.html#associatedtype.Return\" title=\"type std::ops::Coroutine::Return\">Return</a></h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Coroutine%3CR%3E-for-Pin%3C%26mut+G%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/coroutine.rs.html#120\">source</a><a href=\"#impl-Coroutine%3CR%3E-for-Pin%3C%26mut+G%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;G, R&gt; <a class=\"trait\" href=\"trait.Coroutine.html\" title=\"trait std::ops::Coroutine\">Coroutine</a>&lt;R&gt; for <a class=\"struct\" href=\"../pin/struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut G</a>&gt;<div class=\"where\">where\n    G: <a class=\"trait\" href=\"trait.Coroutine.html\" title=\"trait std::ops::Coroutine\">Coroutine</a>&lt;R&gt; + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Yield-2\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Yield-2\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Yield\" class=\"associatedtype\">Yield</a> = &lt;G as <a class=\"trait\" href=\"trait.Coroutine.html\" title=\"trait std::ops::Coroutine\">Coroutine</a>&lt;R&gt;&gt;::<a class=\"associatedtype\" href=\"trait.Coroutine.html#associatedtype.Yield\" title=\"type std::ops::Coroutine::Yield\">Yield</a></h4></section><section id=\"associatedtype.Return-2\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Return-2\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Return\" class=\"associatedtype\">Return</a> = &lt;G as <a class=\"trait\" href=\"trait.Coroutine.html\" title=\"trait std::ops::Coroutine\">Coroutine</a>&lt;R&gt;&gt;::<a class=\"associatedtype\" href=\"trait.Coroutine.html#associatedtype.Return\" title=\"type std::ops::Coroutine::Return\">Return</a></h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Coroutine%3CR%3E-for-Box%3CG,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2306\">source</a><a href=\"#impl-Coroutine%3CR%3E-for-Box%3CG,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;G, R, A&gt; <a class=\"trait\" href=\"trait.Coroutine.html\" title=\"trait std::ops::Coroutine\">Coroutine</a>&lt;R&gt; for <a class=\"struct\" href=\"../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;G, A&gt;<div class=\"where\">where\n    G: <a class=\"trait\" href=\"trait.Coroutine.html\" title=\"trait std::ops::Coroutine\">Coroutine</a>&lt;R&gt; + <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Yield-3\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Yield-3\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Yield\" class=\"associatedtype\">Yield</a> = &lt;G as <a class=\"trait\" href=\"trait.Coroutine.html\" title=\"trait std::ops::Coroutine\">Coroutine</a>&lt;R&gt;&gt;::<a class=\"associatedtype\" href=\"trait.Coroutine.html#associatedtype.Yield\" title=\"type std::ops::Coroutine::Yield\">Yield</a></h4></section><section id=\"associatedtype.Return-3\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Return-3\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Return\" class=\"associatedtype\">Return</a> = &lt;G as <a class=\"trait\" href=\"trait.Coroutine.html\" title=\"trait std::ops::Coroutine\">Coroutine</a>&lt;R&gt;&gt;::<a class=\"associatedtype\" href=\"trait.Coroutine.html#associatedtype.Return\" title=\"type std::ops::Coroutine::Return\">Return</a></h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Coroutine%3CR%3E-for-Pin%3CBox%3CG,+A%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2316-2318\">source</a><a href=\"#impl-Coroutine%3CR%3E-for-Pin%3CBox%3CG,+A%3E%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;G, R, A&gt; <a class=\"trait\" href=\"trait.Coroutine.html\" title=\"trait std::ops::Coroutine\">Coroutine</a>&lt;R&gt; for <a class=\"struct\" href=\"../pin/struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;<a class=\"struct\" href=\"../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;G, A&gt;&gt;<div class=\"where\">where\n    G: <a class=\"trait\" href=\"trait.Coroutine.html\" title=\"trait std::ops::Coroutine\">Coroutine</a>&lt;R&gt; + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a> + 'static,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Yield-4\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Yield-4\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Yield\" class=\"associatedtype\">Yield</a> = &lt;G as <a class=\"trait\" href=\"trait.Coroutine.html\" title=\"trait std::ops::Coroutine\">Coroutine</a>&lt;R&gt;&gt;::<a class=\"associatedtype\" href=\"trait.Coroutine.html#associatedtype.Yield\" title=\"type std::ops::Coroutine::Yield\">Yield</a></h4></section><section id=\"associatedtype.Return-4\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Return-4\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Return\" class=\"associatedtype\">Return</a> = &lt;G as <a class=\"trait\" href=\"trait.Coroutine.html\" title=\"trait std::ops::Coroutine\">Coroutine</a>&lt;R&gt;&gt;::<a class=\"associatedtype\" href=\"trait.Coroutine.html#associatedtype.Return\" title=\"type std::ops::Coroutine::Return\">Return</a></h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Coroutine%3CR%3E-for-Exclusive%3CG%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/sync/exclusive.rs.html#210-212\">source</a><a href=\"#impl-Coroutine%3CR%3E-for-Exclusive%3CG%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;R, G&gt; <a class=\"trait\" href=\"trait.Coroutine.html\" title=\"trait std::ops::Coroutine\">Coroutine</a>&lt;R&gt; for <a class=\"struct\" href=\"../sync/struct.Exclusive.html\" title=\"struct std::sync::Exclusive\">Exclusive</a>&lt;G&gt;<div class=\"where\">where\n    G: <a class=\"trait\" href=\"trait.Coroutine.html\" title=\"trait std::ops::Coroutine\">Coroutine</a>&lt;R&gt; + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Yield-5\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Yield-5\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Yield\" class=\"associatedtype\">Yield</a> = &lt;G as <a class=\"trait\" href=\"trait.Coroutine.html\" title=\"trait std::ops::Coroutine\">Coroutine</a>&lt;R&gt;&gt;::<a class=\"associatedtype\" href=\"trait.Coroutine.html#associatedtype.Yield\" title=\"type std::ops::Coroutine::Yield\">Yield</a></h4></section><section id=\"associatedtype.Return-5\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Return-5\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Return\" class=\"associatedtype\">Return</a> = &lt;G as <a class=\"trait\" href=\"trait.Coroutine.html\" title=\"trait std::ops::Coroutine\">Coroutine</a>&lt;R&gt;&gt;::<a class=\"associatedtype\" href=\"trait.Coroutine.html#associatedtype.Return\" title=\"type std::ops::Coroutine::Return\">Return</a></h4></section></div></details></div><script src=\"../../trait.impl/core/ops/coroutine/trait.Coroutine.js\" data-ignore-extern-crates=\"alloc,core\" async=\"\"></script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:12:51.662Z"
}