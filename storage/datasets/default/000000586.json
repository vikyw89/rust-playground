{
	"title": "Write in std::fmt - Rust",
	"url": "https://doc.rust-lang.org/stable/std/fmt/trait.Write.html",
	"markdown": "# Write in std::fmt - Rust\n\n## Trait [std](../index.html)::[fmt](index.html)::[Write](#)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#118) ·\n\n```\npub trait Write {\n    // Required method\n    fn write_str(&mut self, s: &str) -> Result<(), Error>;\n\n    // Provided methods\n    fn write_char(&mut self, c: char) -> Result<(), Error> { ... }\n    fn write_fmt(&mut self, args: Arguments<'_>) -> Result<(), Error> { ... }\n}\n```\n\nExpand description\n\nA trait for writing or formatting into Unicode-accepting buffers or streams.\n\nThis trait only accepts UTF-8–encoded data and is not [flushable](about:blank/std/io/trait.Write.html#tymethod.flush). If you only want to accept Unicode and you don’t need flushing, you should implement this trait; otherwise you should implement [`std::io::Write`](../../std/io/trait.Write.html).\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#150)\n\nWrites a string slice into this writer, returning whether the write succeeded.\n\nThis method can only succeed if the entire string slice was successfully written, and this method will not return until all data has been written or an error occurs.\n\n##### [§](#errors)Errors\n\nThis function will return an instance of [`std::fmt::Error`](struct.Error.html \"struct std::fmt::Error\") on error.\n\nThe purpose of that error is to abort the formatting operation when the underlying destination encounters some error preventing it from accepting more text; in particular, it does not communicate any information about _what_ error occurred. It should generally be propagated rather than handled, at least when implementing formatting traits.\n\n##### [§](#examples)Examples\n\n```\nuse std::fmt::{Error, Write};\n\nfn writer<W: Write>(f: &mut W, s: &str) -> Result<(), Error> {\n    f.write_str(s)\n}\n\nlet mut buf = String::new();\nwriter(&mut buf, \"hola\").unwrap();\nassert_eq!(&buf, \"hola\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fmt::%7BError,+Write%7D;%0A++++%0A++++fn+writer%3CW:+Write%3E(f:+%26mut+W,+s:+%26str)+-%3E+Result%3C(),+Error%3E+%7B%0A++++++++f.write_str(s)%0A++++%7D%0A++++%0A++++let+mut+buf+=+String::new();%0A++++writer(%26mut+buf,+%22hola%22).unwrap();%0A++++assert_eq!(%26buf,+%22hola%22);%0A%7D&edition=2021)\n\n1.1.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#178)\n\nWrites a [`char`](../primitive.char.html \"primitive char\") into this writer, returning whether the write succeeded.\n\nA single [`char`](../primitive.char.html \"primitive char\") may be encoded as more than one byte. This method can only succeed if the entire byte sequence was successfully written, and this method will not return until all data has been written or an error occurs.\n\n##### [§](#errors-1)Errors\n\nThis function will return an instance of [`Error`](struct.Error.html \"struct std::fmt::Error\") on error.\n\n##### [§](#examples-1)Examples\n\n```\nuse std::fmt::{Error, Write};\n\nfn writer<W: Write>(f: &mut W, c: char) -> Result<(), Error> {\n    f.write_char(c)\n}\n\nlet mut buf = String::new();\nwriter(&mut buf, 'a').unwrap();\nwriter(&mut buf, 'b').unwrap();\nassert_eq!(&buf, \"ab\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fmt::%7BError,+Write%7D;%0A++++%0A++++fn+writer%3CW:+Write%3E(f:+%26mut+W,+c:+char)+-%3E+Result%3C(),+Error%3E+%7B%0A++++++++f.write_char(c)%0A++++%7D%0A++++%0A++++let+mut+buf+=+String::new();%0A++++writer(%26mut+buf,+%27a%27).unwrap();%0A++++writer(%26mut+buf,+%27b%27).unwrap();%0A++++assert_eq!(%26buf,+%22ab%22);%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#206)\n\nGlue for usage of the [`write!`](../macro.write.html \"macro std::write\") macro with implementors of this trait.\n\nThis method should generally not be invoked manually, but rather through the [`write!`](../macro.write.html \"macro std::write\") macro itself.\n\n##### [§](#errors-2)Errors\n\nThis function will return an instance of [`Error`](struct.Error.html \"struct std::fmt::Error\") on error. Please see [write\\_str](about:blank/trait.Write.html#tymethod.write_str \"method std::fmt::Write::write_str\") for details.\n\n##### [§](#examples-2)Examples\n\n```\nuse std::fmt::{Error, Write};\n\nfn writer<W: Write>(f: &mut W, s: &str) -> Result<(), Error> {\n    f.write_fmt(format_args!(\"{s}\"))\n}\n\nlet mut buf = String::new();\nwriter(&mut buf, \"world\").unwrap();\nassert_eq!(&buf, \"world\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fmt::%7BError,+Write%7D;%0A++++%0A++++fn+writer%3CW:+Write%3E(f:+%26mut+W,+s:+%26str)+-%3E+Result%3C(),+Error%3E+%7B%0A++++++++f.write_fmt(format_args!(%22%7Bs%7D%22))%0A++++%7D%0A++++%0A++++let+mut+buf+=+String::new();%0A++++writer(%26mut+buf,+%22world%22).unwrap();%0A++++assert_eq!(%26buf,+%22world%22);%0A%7D&edition=2021)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"A trait for writing or formatting into Unicode-accepting buffers or streams.\"><title>Write in std::fmt - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc trait\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">Write</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">Write</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#required-methods\">Required Methods</a></h3><ul class=\"block\"><li><a href=\"#tymethod.write_str\">write_str</a></li></ul><h3><a href=\"#provided-methods\">Provided Methods</a></h3><ul class=\"block\"><li><a href=\"#method.write_char\">write_char</a></li><li><a href=\"#method.write_fmt\">write_fmt</a></li></ul><h3><a href=\"#implementors\">Implementors</a></h3></section><h2><a href=\"index.html\">In std::fmt</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.Arguments.html\">Arguments</a></li><li><a href=\"struct.DebugList.html\">DebugList</a></li><li><a href=\"struct.DebugMap.html\">DebugMap</a></li><li><a href=\"struct.DebugSet.html\">DebugSet</a></li><li><a href=\"struct.DebugStruct.html\">DebugStruct</a></li><li><a href=\"struct.DebugTuple.html\">DebugTuple</a></li><li><a href=\"struct.Error.html\">Error</a></li><li><a href=\"struct.Formatter.html\">Formatter</a></li><li><a href=\"struct.FormatterFn.html\">FormatterFn</a></li></ul><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.Alignment.html\">Alignment</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.Binary.html\">Binary</a></li><li><a href=\"trait.Debug.html\">Debug</a></li><li><a href=\"trait.Display.html\">Display</a></li><li><a href=\"trait.LowerExp.html\">LowerExp</a></li><li><a href=\"trait.LowerHex.html\">LowerHex</a></li><li><a href=\"trait.Octal.html\">Octal</a></li><li><a href=\"trait.Pointer.html\">Pointer</a></li><li><a href=\"trait.UpperExp.html\">UpperExp</a></li><li><a href=\"trait.UpperHex.html\">UpperHex</a></li><li><a href=\"trait.Write.html\">Write</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.format.html\">format</a></li><li><a href=\"fn.write.html\">write</a></li></ul><h3><a href=\"index.html#types\">Type Aliases</a></h3><ul class=\"block type\"><li><a href=\"type.Result.html\">Result</a></li></ul><h3><a href=\"index.html#derives\">Derive Macros</a></h3><ul class=\"block derive\"><li><a href=\"derive.Debug.html\">Debug</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Trait <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">fmt</a>::<wbr><a class=\"trait\" href=\"#\">Write</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#118\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub trait Write {\n    // Required method\n    fn <a href=\"#tymethod.write_str\" class=\"fn\">write_str</a>(&amp;mut self, s: &amp;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;;\n\n    // Provided methods\n    fn <a href=\"#method.write_char\" class=\"fn\">write_char</a>(&amp;mut self, c: <a class=\"primitive\" href=\"../primitive.char.html\">char</a>) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt; { ... }\n<span class=\"item-spacer\"></span>    fn <a href=\"#method.write_fmt\" class=\"fn\">write_fmt</a>(&amp;mut self, args: <a class=\"struct\" href=\"struct.Arguments.html\" title=\"struct std::fmt::Arguments\">Arguments</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt; { ... }\n}</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>A trait for writing or formatting into Unicode-accepting buffers or streams.</p>\n<p>This trait only accepts UTF-8–encoded data and is not <a href=\"../../std/io/trait.Write.html#tymethod.flush\">flushable</a>. If you only\nwant to accept Unicode and you don’t need flushing, you should implement this trait;\notherwise you should implement <a href=\"../../std/io/trait.Write.html\"><code>std::io::Write</code></a>.</p>\n</div></details><h2 id=\"required-methods\" class=\"section-header\">Required Methods<a href=\"#required-methods\" class=\"anchor\">§</a></h2><div class=\"methods\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.write_str\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#150\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.write_str\" class=\"fn\">write_str</a>(&amp;mut self, s: &amp;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Writes a string slice into this writer, returning whether the write\nsucceeded.</p>\n<p>This method can only succeed if the entire string slice was successfully\nwritten, and this method will not return until all data has been\nwritten or an error occurs.</p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h5>\n<p>This function will return an instance of <a href=\"struct.Error.html\" title=\"struct std::fmt::Error\"><code>std::fmt::Error</code></a> on error.</p>\n<p>The purpose of that error is to abort the formatting operation when the underlying\ndestination encounters some error preventing it from accepting more text;\nin particular, it does not communicate any information about <em>what</em> error occurred.\nIt should generally be propagated rather than handled, at least when implementing\nformatting traits.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fmt::{Error, Write};\n\n<span class=\"kw\">fn </span>writer&lt;W: Write&gt;(f: <span class=\"kw-2\">&amp;mut </span>W, s: <span class=\"kw-2\">&amp;</span>str) -&gt; <span class=\"prelude-ty\">Result</span>&lt;(), Error&gt; {\n    f.write_str(s)\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buf = String::new();\nwriter(<span class=\"kw-2\">&amp;mut </span>buf, <span class=\"string\">\"hola\"</span>).unwrap();\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>buf, <span class=\"string\">\"hola\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fmt::%7BError,+Write%7D;%0A++++%0A++++fn+writer%3CW:+Write%3E(f:+%26mut+W,+s:+%26str)+-%3E+Result%3C(),+Error%3E+%7B%0A++++++++f.write_str(s)%0A++++%7D%0A++++%0A++++let+mut+buf+=+String::new();%0A++++writer(%26mut+buf,+%22hola%22).unwrap();%0A++++assert_eq!(%26buf,+%22hola%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div><h2 id=\"provided-methods\" class=\"section-header\">Provided Methods<a href=\"#provided-methods\" class=\"anchor\">§</a></h2><div class=\"methods\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_char\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.1.0\">1.1.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#178\">source</a></span><h4 class=\"code-header\">fn <a href=\"#method.write_char\" class=\"fn\">write_char</a>(&amp;mut self, c: <a class=\"primitive\" href=\"../primitive.char.html\">char</a>) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Writes a <a href=\"../primitive.char.html\" title=\"primitive char\"><code>char</code></a> into this writer, returning whether the write succeeded.</p>\n<p>A single <a href=\"../primitive.char.html\" title=\"primitive char\"><code>char</code></a> may be encoded as more than one byte.\nThis method can only succeed if the entire byte sequence was successfully\nwritten, and this method will not return until all data has been\nwritten or an error occurs.</p>\n<h5 id=\"errors-1\"><a class=\"doc-anchor\" href=\"#errors-1\">§</a>Errors</h5>\n<p>This function will return an instance of <a href=\"struct.Error.html\" title=\"struct std::fmt::Error\"><code>Error</code></a> on error.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fmt::{Error, Write};\n\n<span class=\"kw\">fn </span>writer&lt;W: Write&gt;(f: <span class=\"kw-2\">&amp;mut </span>W, c: char) -&gt; <span class=\"prelude-ty\">Result</span>&lt;(), Error&gt; {\n    f.write_char(c)\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buf = String::new();\nwriter(<span class=\"kw-2\">&amp;mut </span>buf, <span class=\"string\">'a'</span>).unwrap();\nwriter(<span class=\"kw-2\">&amp;mut </span>buf, <span class=\"string\">'b'</span>).unwrap();\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>buf, <span class=\"string\">\"ab\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fmt::%7BError,+Write%7D;%0A++++%0A++++fn+writer%3CW:+Write%3E(f:+%26mut+W,+c:+char)+-%3E+Result%3C(),+Error%3E+%7B%0A++++++++f.write_char(c)%0A++++%7D%0A++++%0A++++let+mut+buf+=+String::new();%0A++++writer(%26mut+buf,+'a').unwrap();%0A++++writer(%26mut+buf,+'b').unwrap();%0A++++assert_eq!(%26buf,+%22ab%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_fmt\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#206\">source</a></span><h4 class=\"code-header\">fn <a href=\"#method.write_fmt\" class=\"fn\">write_fmt</a>(&amp;mut self, args: <a class=\"struct\" href=\"struct.Arguments.html\" title=\"struct std::fmt::Arguments\">Arguments</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Glue for usage of the <a href=\"../macro.write.html\" title=\"macro std::write\"><code>write!</code></a> macro with implementors of this trait.</p>\n<p>This method should generally not be invoked manually, but rather through\nthe <a href=\"../macro.write.html\" title=\"macro std::write\"><code>write!</code></a> macro itself.</p>\n<h5 id=\"errors-2\"><a class=\"doc-anchor\" href=\"#errors-2\">§</a>Errors</h5>\n<p>This function will return an instance of <a href=\"struct.Error.html\" title=\"struct std::fmt::Error\"><code>Error</code></a> on error. Please see\n<a href=\"trait.Write.html#tymethod.write_str\" title=\"method std::fmt::Write::write_str\">write_str</a> for details.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fmt::{Error, Write};\n\n<span class=\"kw\">fn </span>writer&lt;W: Write&gt;(f: <span class=\"kw-2\">&amp;mut </span>W, s: <span class=\"kw-2\">&amp;</span>str) -&gt; <span class=\"prelude-ty\">Result</span>&lt;(), Error&gt; {\n    f.write_fmt(<span class=\"macro\">format_args!</span>(<span class=\"string\">\"{s}\"</span>))\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buf = String::new();\nwriter(<span class=\"kw-2\">&amp;mut </span>buf, <span class=\"string\">\"world\"</span>).unwrap();\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>buf, <span class=\"string\">\"world\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fmt::%7BError,+Write%7D;%0A++++%0A++++fn+writer%3CW:+Write%3E(f:+%26mut+W,+s:+%26str)+-%3E+Result%3C(),+Error%3E+%7B%0A++++++++f.write_fmt(format_args!(%22%7Bs%7D%22))%0A++++%7D%0A++++%0A++++let+mut+buf+=+String::new();%0A++++writer(%26mut+buf,+%22world%22).unwrap();%0A++++assert_eq!(%26buf,+%22world%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div><h2 id=\"implementors\" class=\"section-header\">Implementors<a href=\"#implementors\" class=\"anchor\">§</a></h2><div id=\"implementors-list\"><section id=\"impl-Write-for-OsString\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0\">1.64.0</span> · <a class=\"src\" href=\"../../src/std/ffi/os_str.rs.html#724-729\">source</a></span><a href=\"#impl-Write-for-OsString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Write.html\" title=\"trait std::fmt::Write\">Write</a> for <a class=\"struct\" href=\"../ffi/struct.OsString.html\" title=\"struct std::ffi::OsString\">OsString</a></h3></section><section id=\"impl-Write-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2918\">source</a></span><a href=\"#impl-Write-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Write.html\" title=\"trait std::fmt::Write\">Write</a> for <a class=\"struct\" href=\"../string/struct.String.html\" title=\"struct std::string::String\">String</a></h3></section><section id=\"impl-Write-for-Formatter%3C'_%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0\">1.2.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#2321\">source</a></span><a href=\"#impl-Write-for-Formatter%3C'_%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Write.html\" title=\"trait std::fmt::Write\">Write</a> for <a class=\"struct\" href=\"struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;</h3></section><section id=\"impl-Write-for-%26mut+W\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#240\">source</a></span><a href=\"#impl-Write-for-%26mut+W\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;W&gt; <a class=\"trait\" href=\"trait.Write.html\" title=\"trait std::fmt::Write\">Write</a> for <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut W</a><div class=\"where\">where\n    W: <a class=\"trait\" href=\"trait.Write.html\" title=\"trait std::fmt::Write\">Write</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></div><script src=\"../../trait.impl/core/fmt/trait.Write.js\" data-ignore-extern-crates=\"alloc,core\" async=\"\"></script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:12:33.666Z"
}