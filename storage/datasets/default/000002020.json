{
	"title": "set_alloc_error_hook in std::alloc - Rust",
	"url": "https://doc.rust-lang.org/stable/std/alloc/fn.set_alloc_error_hook.html",
	"markdown": "# set\\_alloc\\_error\\_hook in std::alloc - Rust\n\n```\npub fn set_alloc_error_hook(hook: fn(_: Layout))\n```\n\nðŸ”¬This is a nightly-only experimental API. (`alloc_error_hook`Â [#51245](https://github.com/rust-lang/rust/issues/51245))\n\nExpand description\n\nRegisters a custom allocation error hook, replacing any that was previously registered.\n\nThe allocation error hook is invoked when an infallible memory allocation fails â€” that is, as a consequence of calling [`handle_alloc_error`](fn.handle_alloc_error.html \"fn std::alloc::handle_alloc_error\") â€” before the runtime aborts.\n\nThe allocation error hook is a global resource. [`take_alloc_error_hook`](fn.take_alloc_error_hook.html \"fn std::alloc::take_alloc_error_hook\") may be used to retrieve a previously registered hook and wrap or discard it.\n\n## [Â§](#what-the-provided-hook-function-should-expect)What the provided `hook` function should expect\n\nThe hook function is provided with a [`Layout`](struct.Layout.html \"struct std::alloc::Layout\") struct which contains information about the allocation that failed.\n\nThe hook function may choose to panic or abort; in the event that it returns normally, this will cause an immediate abort.\n\nSince [`take_alloc_error_hook`](fn.take_alloc_error_hook.html \"fn std::alloc::take_alloc_error_hook\") is a safe function that allows retrieving the hook, the hook function must be _sound_ to call even if no memory allocations were attempted.\n\n## [Â§](#the-default-hook)The default hook\n\nThe default hook, used if [`set_alloc_error_hook`](fn.set_alloc_error_hook.html \"fn std::alloc::set_alloc_error_hook\") is never called, prints a message to standard error (and then returns, causing the runtime to abort the process). Compiler options may cause it to panic instead, and the default behavior may be changed to panicking in future versions of Rust.\n\n## [Â§](#examples)Examples\n\n```\n#![feature(alloc_error_hook)]\n\nuse std::alloc::{Layout, set_alloc_error_hook};\n\nfn custom_alloc_error_hook(layout: Layout) {\n   panic!(\"memory allocation of {} bytes failed\", layout.size());\n}\n\nset_alloc_error_hook(custom_alloc_error_hook);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(alloc_error_hook)%5D%0A%0Afn+main()+%7B%0A++++use+std::alloc::%7BLayout,+set_alloc_error_hook%7D;%0A++++%0A++++fn+custom_alloc_error_hook(layout:+Layout)+%7B%0A+++++++panic!(%22memory+allocation+of+%7B%7D+bytes+failed%22,+layout.size());%0A++++%7D%0A++++%0A++++set_alloc_error_hook(custom_alloc_error_hook);%0A%7D&version=nightly&edition=2021)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Registers a custom allocation error hook, replacing any that was previously registered.\"><title>set_alloc_error_hook in std::alloc - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc fn\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><div class=\"sidebar-elems\"><h2><a href=\"index.html\">In std::alloc</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.AllocError.html\">AllocError</a></li><li><a href=\"struct.Global.html\">Global</a></li><li><a href=\"struct.Layout.html\">Layout</a></li><li><a href=\"struct.LayoutError.html\">LayoutError</a></li><li><a href=\"struct.System.html\">System</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.Allocator.html\">Allocator</a></li><li><a href=\"trait.GlobalAlloc.html\">GlobalAlloc</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.alloc.html\">alloc</a></li><li><a href=\"fn.alloc_zeroed.html\">alloc_zeroed</a></li><li><a href=\"fn.dealloc.html\">dealloc</a></li><li><a href=\"fn.handle_alloc_error.html\">handle_alloc_error</a></li><li><a href=\"fn.realloc.html\">realloc</a></li><li><a href=\"fn.set_alloc_error_hook.html\">set_alloc_error_hook</a></li><li><a href=\"fn.take_alloc_error_hook.html\">take_alloc_error_hook</a></li></ul><h3><a href=\"index.html#types\">Type Aliases</a></h3><ul class=\"block type\"><li><a href=\"type.LayoutErr.html\">LayoutErr</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type â€˜Sâ€™ or â€˜/â€™ to search, â€˜?â€™ for more optionsâ€¦\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Function <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">alloc</a>::<wbr><a class=\"fn\" href=\"#\">set_alloc_error_hook</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><a class=\"src\" href=\"../../src/std/alloc.rs.html#331-333\">source</a> Â· <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>âˆ’</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub fn set_alloc_error_hook(hook: <a class=\"primitive\" href=\"../primitive.fn.html\">fn</a>(_: <a class=\"struct\" href=\"struct.Layout.html\" title=\"struct std::alloc::Layout\">Layout</a>))</code></pre><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>alloc_error_hook</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/51245\">#51245</a>)</span></div></span><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Registers a custom allocation error hook, replacing any that was previously registered.</p>\n<p>The allocation error hook is invoked when an infallible memory allocation fails â€” that is,\nas a consequence of calling <a href=\"fn.handle_alloc_error.html\" title=\"fn std::alloc::handle_alloc_error\"><code>handle_alloc_error</code></a> â€” before the runtime aborts.</p>\n<p>The allocation error hook is a global resource. <a href=\"fn.take_alloc_error_hook.html\" title=\"fn std::alloc::take_alloc_error_hook\"><code>take_alloc_error_hook</code></a> may be used to\nretrieve a previously registered hook and wrap or discard it.</p>\n<h2 id=\"what-the-provided-hook-function-should-expect\"><a class=\"doc-anchor\" href=\"#what-the-provided-hook-function-should-expect\">Â§</a>What the provided <code>hook</code> function should expect</h2>\n<p>The hook function is provided with a <a href=\"struct.Layout.html\" title=\"struct std::alloc::Layout\"><code>Layout</code></a> struct which contains information\nabout the allocation that failed.</p>\n<p>The hook function may choose to panic or abort; in the event that it returns normally, this\nwill cause an immediate abort.</p>\n<p>Since <a href=\"fn.take_alloc_error_hook.html\" title=\"fn std::alloc::take_alloc_error_hook\"><code>take_alloc_error_hook</code></a> is a safe function that allows retrieving the hook, the hook\nfunction must be <em>sound</em> to call even if no memory allocations were attempted.</p>\n<h2 id=\"the-default-hook\"><a class=\"doc-anchor\" href=\"#the-default-hook\">Â§</a>The default hook</h2>\n<p>The default hook, used if <a href=\"fn.set_alloc_error_hook.html\" title=\"fn std::alloc::set_alloc_error_hook\"><code>set_alloc_error_hook</code></a> is never called, prints a message to\nstandard error (and then returns, causing the runtime to abort the process).\nCompiler options may cause it to panic instead, and the default behavior may be changed\nto panicking in future versions of Rust.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">Â§</a>Examples</h2>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(alloc_error_hook)]\n\n</span><span class=\"kw\">use </span>std::alloc::{Layout, set_alloc_error_hook};\n\n<span class=\"kw\">fn </span>custom_alloc_error_hook(layout: Layout) {\n   <span class=\"macro\">panic!</span>(<span class=\"string\">\"memory allocation of {} bytes failed\"</span>, layout.size());\n}\n\nset_alloc_error_hook(custom_alloc_error_hook);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(alloc_error_hook)%5D%0A%0Afn+main()+%7B%0A++++use+std::alloc::%7BLayout,+set_alloc_error_hook%7D;%0A++++%0A++++fn+custom_alloc_error_hook(layout:+Layout)+%7B%0A+++++++panic!(%22memory+allocation+of+%7B%7D+bytes+failed%22,+layout.size());%0A++++%7D%0A++++%0A++++set_alloc_error_hook(custom_alloc_error_hook);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:21:59.120Z"
}