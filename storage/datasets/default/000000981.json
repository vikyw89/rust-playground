{
	"title": "ExitStatusError in std::process - Rust",
	"url": "https://doc.rust-lang.org/stable/std/process/struct.ExitStatusError.html",
	"markdown": "# ExitStatusError in std::process - Rust\n\n```\npub struct ExitStatusError(/* private fields */);\n```\n\nðŸ”¬This is a nightly-only experimental API. (`exit_status_error`Â [#84908](https://github.com/rust-lang/rust/issues/84908))\n\nExpand description\n\nDescribes the result of a process after it has failed\n\nProduced by the [`.exit_ok`](about:blank/struct.ExitStatus.html#method.exit_ok \"method std::process::ExitStatus::exit_ok\") method on [`ExitStatus`](struct.ExitStatus.html \"struct std::process::ExitStatus\").\n\n## [Â§](#examples)Examples\n\n```\n#![feature(exit_status_error)]\nuse std::process::{Command, ExitStatusError};\n\nfn run(cmd: &str) -> Result<(),ExitStatusError> {\n    Command::new(cmd).status().unwrap().exit_ok()?;\n    Ok(())\n}\n\nrun(\"true\").unwrap();\nrun(\"false\").unwrap_err();\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(exit_status_error)%5D%0Afn+main()+%7B%0A++++if+cfg!(unix)+%7B%0A++++use+std::process::%7BCommand,+ExitStatusError%7D;%0A++++%0A++++fn+run(cmd:+%26str)+-%3E+Result%3C(),ExitStatusError%3E+%7B%0A++++++++Command::new(cmd).status().unwrap().exit_ok()?;%0A++++++++Ok(())%0A++++%7D%0A++++%0A++++run(%22true%22).unwrap();%0A++++run(%22false%22).unwrap_err();%0A++++%7D+//+cfg!(unix)%0A%7D&version=nightly&edition=2021)\n\n[source](about:blank/src/std/process.rs.html#1831-1898)[Â§](#impl-ExitStatusError)\n\n[source](about:blank/src/std/process.rs.html#1863-1865)\n\nðŸ”¬This is a nightly-only experimental API. (`exit_status_error`Â [#84908](https://github.com/rust-lang/rust/issues/84908))\n\nReports the exit code, if applicable, from an `ExitStatusError`.\n\nIn Unix terms the return value is the **exit status**: the value passed to `exit`, if the process finished by calling `exit`. Note that on Unix the exit status is truncated to 8 bits, and that values that didnâ€™t come from a programâ€™s call to `exit` may be invented by the runtime system (often, for example, 255, 254, 127 or 126).\n\nOn Unix, this will return `None` if the process was terminated by a signal. If you want to handle such situations specially, consider using methods from [`ExitStatusExt`](../os/unix/process/trait.ExitStatusExt.html \"trait std::os::unix::process::ExitStatusExt\").\n\nIf the process finished by calling `exit` with a nonzero value, this will return that exit status.\n\nIf the error was something else, it will return `None`.\n\nIf the process exited successfully (ie, by calling `exit(0)`), there is no `ExitStatusError`. So the return value from `ExitStatusError::code()` is always nonzero.\n\n##### [Â§](#examples-1)Examples\n\n```\n#![feature(exit_status_error)]\nuse std::process::Command;\n\nlet bad = Command::new(\"false\").status().unwrap().exit_ok().unwrap_err();\nassert_eq!(bad.code(), Some(1));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(exit_status_error)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(unix)%5D+%7B%0A++++use+std::process::Command;%0A++++%0A++++let+bad+=+Command::new(%22false%22).status().unwrap().exit_ok().unwrap_err();%0A++++assert_eq!(bad.code(),+Some(1));%0A++++%7D+//+%23%5Bcfg(unix)%5D%0A%7D&version=nightly&edition=2021)\n\n[source](about:blank/src/std/process.rs.html#1889-1891)\n\nðŸ”¬This is a nightly-only experimental API. (`exit_status_error`Â [#84908](https://github.com/rust-lang/rust/issues/84908))\n\nReports the exit code, if applicable, from an `ExitStatusError`, as a [`NonZero`](../num/struct.NonZero.html \"struct std::num::NonZero\").\n\nThis is exactly like [`code()`](about:blank/struct.ExitStatusError.html#method.code \"method std::process::ExitStatusError::code\"), except that it returns a `[NonZero](../num/struct.NonZero.html \"struct std::num::NonZero\")<[i32](../primitive.i32.html \"primitive i32\")>`.\n\nPlain `code`, returning a plain integer, is provided because it is often more convenient. The returned value from `code()` is indeed also nonzero; use `code_nonzero()` when you want a type-level guarantee of nonzeroness.\n\n##### [Â§](#examples-2)Examples\n\n```\n#![feature(exit_status_error)]\n\nuse std::num::NonZero;\nuse std::process::Command;\n\nlet bad = Command::new(\"false\").status().unwrap().exit_ok().unwrap_err();\nassert_eq!(bad.code_nonzero().unwrap(), NonZero::new(1).unwrap());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(exit_status_error)%5D%0A%0Afn+main()+%7B%0A++++if+cfg!(unix)+%7B%0A++++use+std::num::NonZero;%0A++++use+std::process::Command;%0A++++%0A++++let+bad+=+Command::new(%22false%22).status().unwrap().exit_ok().unwrap_err();%0A++++assert_eq!(bad.code_nonzero().unwrap(),+NonZero::new(1).unwrap());%0A++++%7D+//+cfg!(unix)%0A%7D&version=nightly&edition=2021)\n\n[source](about:blank/src/std/process.rs.html#1895-1897)\n\nðŸ”¬This is a nightly-only experimental API. (`exit_status_error`Â [#84908](https://github.com/rust-lang/rust/issues/84908))\n\nConverts an `ExitStatusError` (back) to an `ExitStatus`.\n\n[source](about:blank/src/std/process.rs.html#1824)[Â§](#impl-Clone-for-ExitStatusError)\n\n[source](about:blank/src/std/process.rs.html#1824)[Â§](#impl-Debug-for-ExitStatusError)\n\n[source](about:blank/src/std/process.rs.html#1908-1912)[Â§](#impl-Display-for-ExitStatusError)\n\n[source](about:blank/src/std/process.rs.html#1915)[Â§](#impl-Error-for-ExitStatusError)\n\n1.30.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/error.rs.html#84)[Â§](#method.source)\n\nThe lower-level source of this error, if any. [Read more](about:blank/error/trait.Error.html#method.source)\n\n1.0.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/error.rs.html#110)[Â§](#method.description)\n\nðŸ‘ŽDeprecated since 1.42.0: use the Display impl or to\\_string()\n\n1.0.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/error.rs.html#120)[Â§](#method.cause)\n\nðŸ‘ŽDeprecated since 1.33.0: replaced by Error::source, which can support downcasting\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/error.rs.html#184)[Â§](#method.provide)\n\nðŸ”¬This is a nightly-only experimental API. (`error_generic_member_access`Â [#99301](https://github.com/rust-lang/rust/issues/99301))\n\nProvides type based access to context intended for error reports. [Read more](about:blank/error/trait.Error.html#method.provide)\n\n[source](about:blank/src/std/os/unix/process.rs.html#332-358)[Â§](#impl-ExitStatusExt-for-ExitStatusError)\n\nAvailable on **Unix** only.\n\n[source](about:blank/src/std/os/unix/process.rs.html#333-337)[Â§](#method.from_raw)\n\nCreates a new `ExitStatus` or `ExitStatusError` from the raw underlying integer status value from `wait` [Read more](about:blank/os/unix/process/trait.ExitStatusExt.html#tymethod.from_raw)\n\n[source](about:blank/src/std/os/unix/process.rs.html#339-341)[Â§](#method.signal)\n\nIf the process was terminated by a signal, returns that signal. [Read more](about:blank/os/unix/process/trait.ExitStatusExt.html#tymethod.signal)\n\n[source](about:blank/src/std/os/unix/process.rs.html#343-345)[Â§](#method.core_dumped)\n\nIf the process was terminated by a signal, says whether it dumped core.\n\n[source](about:blank/src/std/os/unix/process.rs.html#347-349)[Â§](#method.stopped_signal)\n\nIf the process was stopped by a signal, returns that signal. [Read more](about:blank/os/unix/process/trait.ExitStatusExt.html#tymethod.stopped_signal)\n\n[source](about:blank/src/std/os/unix/process.rs.html#351-353)[Â§](#method.continued)\n\nWhether the process was continued from a stopped status. [Read more](about:blank/os/unix/process/trait.ExitStatusExt.html#tymethod.continued)\n\n[source](about:blank/src/std/os/unix/process.rs.html#355-357)[Â§](#method.into_raw)\n\nReturns the underlying raw `wait` status. [Read more](about:blank/os/unix/process/trait.ExitStatusExt.html#tymethod.into_raw)\n\n[source](about:blank/src/std/process.rs.html#1901-1905)[Â§](#impl-From%3CExitStatusError%3E-for-ExitStatus)\n\n[source](about:blank/src/std/process.rs.html#1902-1904)[Â§](#method.from)\n\nConverts to this type from the input type.\n\n[source](about:blank/src/std/process.rs.html#1824)[Â§](#impl-PartialEq-for-ExitStatusError)\n\n[source](about:blank/src/std/process.rs.html#1824)[Â§](#method.eq)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[Â§](#method.ne)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n[source](about:blank/src/std/process.rs.html#1824)[Â§](#impl-Copy-for-ExitStatusError)\n\n[source](about:blank/src/std/process.rs.html#1824)[Â§](#impl-Eq-for-ExitStatusError)\n\n[source](about:blank/src/std/process.rs.html#1824)[Â§](#impl-StructuralPartialEq-for-ExitStatusError)\n\n[Â§](#impl-Freeze-for-ExitStatusError)\n\n[Â§](#impl-RefUnwindSafe-for-ExitStatusError)\n\n[Â§](#impl-Send-for-ExitStatusError)\n\n[Â§](#impl-Sync-for-ExitStatusError)\n\n[Â§](#impl-Unpin-for-ExitStatusError)\n\n[Â§](#impl-UnwindSafe-for-ExitStatusError)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Describes the result of a process after it has failed\"><title>ExitStatusError in std::process - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc struct\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">ExitStatusError</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">ExitStatusError</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#implementations\">Methods</a></h3><ul class=\"block method\"><li><a href=\"#method.code\">code</a></li><li><a href=\"#method.code_nonzero\">code_nonzero</a></li><li><a href=\"#method.into_status\">into_status</a></li></ul><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-Clone-for-ExitStatusError\">Clone</a></li><li><a href=\"#impl-Copy-for-ExitStatusError\">Copy</a></li><li><a href=\"#impl-Debug-for-ExitStatusError\">Debug</a></li><li><a href=\"#impl-Display-for-ExitStatusError\">Display</a></li><li><a href=\"#impl-Eq-for-ExitStatusError\">Eq</a></li><li><a href=\"#impl-Error-for-ExitStatusError\">Error</a></li><li><a href=\"#impl-ExitStatusExt-for-ExitStatusError\">ExitStatusExt</a></li><li><a href=\"#impl-From%3CExitStatusError%3E-for-ExitStatus\">From&lt;ExitStatusError&gt;</a></li><li><a href=\"#impl-PartialEq-for-ExitStatusError\">PartialEq</a></li><li><a href=\"#impl-StructuralPartialEq-for-ExitStatusError\">StructuralPartialEq</a></li></ul><h3><a href=\"#synthetic-implementations\">Auto Trait Implementations</a></h3><ul class=\"block synthetic-implementation\"><li><a href=\"#impl-Freeze-for-ExitStatusError\">Freeze</a></li><li><a href=\"#impl-RefUnwindSafe-for-ExitStatusError\">RefUnwindSafe</a></li><li><a href=\"#impl-Send-for-ExitStatusError\">Send</a></li><li><a href=\"#impl-Sync-for-ExitStatusError\">Sync</a></li><li><a href=\"#impl-Unpin-for-ExitStatusError\">Unpin</a></li><li><a href=\"#impl-UnwindSafe-for-ExitStatusError\">UnwindSafe</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-Any-for-T\">Any</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-T\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-T\">BorrowMut&lt;T&gt;</a></li><li><a href=\"#impl-From%3CT%3E-for-T\">From&lt;T&gt;</a></li><li><a href=\"#impl-Into%3CU%3E-for-T\">Into&lt;U&gt;</a></li><li><a href=\"#impl-ToOwned-for-T\">ToOwned</a></li><li><a href=\"#impl-ToString-for-T\">ToString</a></li><li><a href=\"#impl-TryFrom%3CU%3E-for-T\">TryFrom&lt;U&gt;</a></li><li><a href=\"#impl-TryInto%3CU%3E-for-T\">TryInto&lt;U&gt;</a></li></ul></section><h2><a href=\"index.html\">In std::process</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.Child.html\">Child</a></li><li><a href=\"struct.ChildStderr.html\">ChildStderr</a></li><li><a href=\"struct.ChildStdin.html\">ChildStdin</a></li><li><a href=\"struct.ChildStdout.html\">ChildStdout</a></li><li><a href=\"struct.Command.html\">Command</a></li><li><a href=\"struct.CommandArgs.html\">CommandArgs</a></li><li><a href=\"struct.CommandEnvs.html\">CommandEnvs</a></li><li><a href=\"struct.ExitCode.html\">ExitCode</a></li><li><a href=\"struct.ExitStatus.html\">ExitStatus</a></li><li><a href=\"struct.ExitStatusError.html\">ExitStatusError</a></li><li><a href=\"struct.Output.html\">Output</a></li><li><a href=\"struct.Stdio.html\">Stdio</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.Termination.html\">Termination</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.abort.html\">abort</a></li><li><a href=\"fn.exit.html\">exit</a></li><li><a href=\"fn.id.html\">id</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type â€˜Sâ€™ or â€˜/â€™ to search, â€˜?â€™ for more optionsâ€¦\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Struct <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">process</a>::<wbr><a class=\"struct\" href=\"#\">ExitStatusError</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><a class=\"src\" href=\"../../src/std/process.rs.html#1828\">source</a> Â· <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>âˆ’</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub struct ExitStatusError(<span class=\"comment\">/* private fields */</span>);</code></pre><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>exit_status_error</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/84908\">#84908</a>)</span></div></span><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Describes the result of a process after it has failed</p>\n<p>Produced by the <a href=\"struct.ExitStatus.html#method.exit_ok\" title=\"method std::process::ExitStatus::exit_ok\"><code>.exit_ok</code></a> method on <a href=\"struct.ExitStatus.html\" title=\"struct std::process::ExitStatus\"><code>ExitStatus</code></a>.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">Â§</a>Examples</h2>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(exit_status_error)]\n</span><span class=\"kw\">use </span>std::process::{Command, ExitStatusError};\n\n<span class=\"kw\">fn </span>run(cmd: <span class=\"kw-2\">&amp;</span>str) -&gt; <span class=\"prelude-ty\">Result</span>&lt;(),ExitStatusError&gt; {\n    Command::new(cmd).status().unwrap().exit_ok()<span class=\"question-mark\">?</span>;\n    <span class=\"prelude-val\">Ok</span>(())\n}\n\nrun(<span class=\"string\">\"true\"</span>).unwrap();\nrun(<span class=\"string\">\"false\"</span>).unwrap_err();</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(exit_status_error)%5D%0Afn+main()+%7B%0A++++if+cfg!(unix)+%7B%0A++++use+std::process::%7BCommand,+ExitStatusError%7D;%0A++++%0A++++fn+run(cmd:+%26str)+-%3E+Result%3C(),ExitStatusError%3E+%7B%0A++++++++Command::new(cmd).status().unwrap().exit_ok()?;%0A++++++++Ok(())%0A++++%7D%0A++++%0A++++run(%22true%22).unwrap();%0A++++run(%22false%22).unwrap_err();%0A++++%7D+//+cfg!(unix)%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><h2 id=\"implementations\" class=\"section-header\">Implementations<a href=\"#implementations\" class=\"anchor\">Â§</a></h2><div id=\"implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-ExitStatusError\" class=\"impl\"><a class=\"src rightside\" href=\"../../src/std/process.rs.html#1831-1898\">source</a><a href=\"#impl-ExitStatusError\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"struct.ExitStatusError.html\" title=\"struct std::process::ExitStatusError\">ExitStatusError</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.code\" class=\"method\"><a class=\"src rightside\" href=\"../../src/std/process.rs.html#1863-1865\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.code\" class=\"fn\">code</a>(&amp;self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>exit_status_error</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/84908\">#84908</a>)</span></div></span></summary><div class=\"docblock\"><p>Reports the exit code, if applicable, from an <code>ExitStatusError</code>.</p>\n<p>In Unix terms the return value is the <strong>exit status</strong>: the value passed to <code>exit</code>, if the\nprocess finished by calling <code>exit</code>.  Note that on Unix the exit status is truncated to 8\nbits, and that values that didnâ€™t come from a programâ€™s call to <code>exit</code> may be invented by the\nruntime system (often, for example, 255, 254, 127 or 126).</p>\n<p>On Unix, this will return <code>None</code> if the process was terminated by a signal.  If you want to\nhandle such situations specially, consider using methods from\n<a href=\"../os/unix/process/trait.ExitStatusExt.html\" title=\"trait std::os::unix::process::ExitStatusExt\"><code>ExitStatusExt</code></a>.</p>\n<p>If the process finished by calling <code>exit</code> with a nonzero value, this will return\nthat exit status.</p>\n<p>If the error was something else, it will return <code>None</code>.</p>\n<p>If the process exited successfully (ie, by calling <code>exit(0)</code>), there is no\n<code>ExitStatusError</code>.  So the return value from <code>ExitStatusError::code()</code> is always nonzero.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(exit_status_error)]\n</span><span class=\"kw\">use </span>std::process::Command;\n\n<span class=\"kw\">let </span>bad = Command::new(<span class=\"string\">\"false\"</span>).status().unwrap().exit_ok().unwrap_err();\n<span class=\"macro\">assert_eq!</span>(bad.code(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(exit_status_error)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(unix)%5D+%7B%0A++++use+std::process::Command;%0A++++%0A++++let+bad+=+Command::new(%22false%22).status().unwrap().exit_ok().unwrap_err();%0A++++assert_eq!(bad.code(),+Some(1));%0A++++%7D+//+%23%5Bcfg(unix)%5D%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.code_nonzero\" class=\"method\"><a class=\"src rightside\" href=\"../../src/std/process.rs.html#1889-1891\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.code_nonzero\" class=\"fn\">code_nonzero</a>(&amp;self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"../num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>exit_status_error</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/84908\">#84908</a>)</span></div></span></summary><div class=\"docblock\"><p>Reports the exit code, if applicable, from an <code>ExitStatusError</code>, as a <a href=\"../num/struct.NonZero.html\" title=\"struct std::num::NonZero\"><code>NonZero</code></a>.</p>\n<p>This is exactly like <a href=\"struct.ExitStatusError.html#method.code\" title=\"method std::process::ExitStatusError::code\"><code>code()</code></a>, except that it returns a <code><a href=\"../num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i32.html\" title=\"primitive i32\">i32</a>&gt;</code>.</p>\n<p>Plain <code>code</code>, returning a plain integer, is provided because it is often more convenient.\nThe returned value from <code>code()</code> is indeed also nonzero; use <code>code_nonzero()</code> when you want\na type-level guarantee of nonzeroness.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(exit_status_error)]\n\n</span><span class=\"kw\">use </span>std::num::NonZero;\n<span class=\"kw\">use </span>std::process::Command;\n\n<span class=\"kw\">let </span>bad = Command::new(<span class=\"string\">\"false\"</span>).status().unwrap().exit_ok().unwrap_err();\n<span class=\"macro\">assert_eq!</span>(bad.code_nonzero().unwrap(), NonZero::new(<span class=\"number\">1</span>).unwrap());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(exit_status_error)%5D%0A%0Afn+main()+%7B%0A++++if+cfg!(unix)+%7B%0A++++use+std::num::NonZero;%0A++++use+std::process::Command;%0A++++%0A++++let+bad+=+Command::new(%22false%22).status().unwrap().exit_ok().unwrap_err();%0A++++assert_eq!(bad.code_nonzero().unwrap(),+NonZero::new(1).unwrap());%0A++++%7D+//+cfg!(unix)%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_status\" class=\"method\"><a class=\"src rightside\" href=\"../../src/std/process.rs.html#1895-1897\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.into_status\" class=\"fn\">into_status</a>(&amp;self) -&gt; <a class=\"struct\" href=\"struct.ExitStatus.html\" title=\"struct std::process::ExitStatus\">ExitStatus</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>exit_status_error</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/84908\">#84908</a>)</span></div></span></summary><div class=\"docblock\"><p>Converts an <code>ExitStatusError</code> (back) to an <code>ExitStatus</code>.</p>\n</div></details></div></details></div><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">Â§</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Clone-for-ExitStatusError\" class=\"impl\"><a class=\"src rightside\" href=\"../../src/std/process.rs.html#1824\">source</a><a href=\"#impl-Clone-for-ExitStatusError\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"struct.ExitStatusError.html\" title=\"struct std::process::ExitStatusError\">ExitStatusError</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/process.rs.html#1824\">source</a><a href=\"#method.clone\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"struct.ExitStatusError.html\" title=\"struct std::process::ExitStatusError\">ExitStatusError</a></h4></section></summary><div class=\"docblock\">Returns a copy of the value. <a href=\"../clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class=\"docblock\">Performs copy-assignment from <code>source</code>. <a href=\"../clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-ExitStatusError\" class=\"impl\"><a class=\"src rightside\" href=\"../../src/std/process.rs.html#1824\">source</a><a href=\"#impl-Debug-for-ExitStatusError\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"struct.ExitStatusError.html\" title=\"struct std::process::ExitStatusError\">ExitStatusError</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/process.rs.html#1824\">source</a><a href=\"#method.fmt-1\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"../fmt/type.Result.html\" title=\"type std::fmt::Result\">Result</a></h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Display-for-ExitStatusError\" class=\"impl\"><a class=\"src rightside\" href=\"../../src/std/process.rs.html#1908-1912\">source</a><a href=\"#impl-Display-for-ExitStatusError\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../fmt/trait.Display.html\" title=\"trait std::fmt::Display\">Display</a> for <a class=\"struct\" href=\"struct.ExitStatusError.html\" title=\"struct std::process::ExitStatusError\">ExitStatusError</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/process.rs.html#1909-1911\">source</a><a href=\"#method.fmt\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../fmt/trait.Display.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"../fmt/type.Result.html\" title=\"type std::fmt::Result\">Result</a></h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../fmt/trait.Display.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Error-for-ExitStatusError\" class=\"impl\"><a class=\"src rightside\" href=\"../../src/std/process.rs.html#1915\">source</a><a href=\"#impl-Error-for-ExitStatusError\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../error/trait.Error.html\" title=\"trait std::error::Error\">Error</a> for <a class=\"struct\" href=\"struct.ExitStatusError.html\" title=\"struct std::process::ExitStatusError\">ExitStatusError</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.source\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.30.0\">1.30.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/error.rs.html#84\">source</a></span><a href=\"#method.source\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../error/trait.Error.html#method.source\" class=\"fn\">source</a>(&amp;self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;(dyn <a class=\"trait\" href=\"../error/trait.Error.html\" title=\"trait std::error::Error\">Error</a> + 'static)&gt;</h4></section></summary><div class=\"docblock\">The lower-level source of this error, if any. <a href=\"../error/trait.Error.html#method.source\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.description\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/error.rs.html#110\">source</a></span><a href=\"#method.description\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../error/trait.Error.html#method.description\" class=\"fn\">description</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"../primitive.str.html\">str</a></h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">ðŸ‘Ž</span><span>Deprecated since 1.42.0: use the Display impl or to_string()</span></div></span><div class=\"docblock\"> <a href=\"../error/trait.Error.html#method.description\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.cause\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/error.rs.html#120\">source</a></span><a href=\"#method.cause\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../error/trait.Error.html#method.cause\" class=\"fn\">cause</a>(&amp;self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;dyn <a class=\"trait\" href=\"../error/trait.Error.html\" title=\"trait std::error::Error\">Error</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">ðŸ‘Ž</span><span>Deprecated since 1.33.0: replaced by Error::source, which can support downcasting</span></div></span></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.provide\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/error.rs.html#184\">source</a><a href=\"#method.provide\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../error/trait.Error.html#method.provide\" class=\"fn\">provide</a>&lt;'a&gt;(&amp;'a self, request: &amp;mut <a class=\"struct\" href=\"../error/struct.Request.html\" title=\"struct std::error::Request\">Request</a>&lt;'a&gt;)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>error_generic_member_access</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/99301\">#99301</a>)</span></div></span><div class=\"docblock\">Provides type based access to context intended for error reports. <a href=\"../error/trait.Error.html#method.provide\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-ExitStatusExt-for-ExitStatusError\" class=\"impl\"><a class=\"src rightside\" href=\"../../src/std/os/unix/process.rs.html#332-358\">source</a><a href=\"#impl-ExitStatusExt-for-ExitStatusError\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../os/unix/process/trait.ExitStatusExt.html\" title=\"trait std::os::unix::process::ExitStatusExt\">ExitStatusExt</a> for <a class=\"struct\" href=\"struct.ExitStatusError.html\" title=\"struct std::process::ExitStatusError\">ExitStatusError</a></h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Unix</strong> only.</div></span></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_raw\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/unix/process.rs.html#333-337\">source</a><a href=\"#method.from_raw\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../os/unix/process/trait.ExitStatusExt.html#tymethod.from_raw\" class=\"fn\">from_raw</a>(raw: <a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>) -&gt; Self</h4></section></summary><div class=\"docblock\">Creates a new <code>ExitStatus</code> or <code>ExitStatusError</code> from the raw underlying integer status\nvalue from <code>wait</code> <a href=\"../os/unix/process/trait.ExitStatusExt.html#tymethod.from_raw\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.signal\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/unix/process.rs.html#339-341\">source</a><a href=\"#method.signal\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../os/unix/process/trait.ExitStatusExt.html#tymethod.signal\" class=\"fn\">signal</a>(&amp;self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;</h4></section></summary><div class=\"docblock\">If the process was terminated by a signal, returns that signal. <a href=\"../os/unix/process/trait.ExitStatusExt.html#tymethod.signal\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.core_dumped\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/unix/process.rs.html#343-345\">source</a><a href=\"#method.core_dumped\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../os/unix/process/trait.ExitStatusExt.html#tymethod.core_dumped\" class=\"fn\">core_dumped</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">If the process was terminated by a signal, says whether it dumped core.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.stopped_signal\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/unix/process.rs.html#347-349\">source</a><a href=\"#method.stopped_signal\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../os/unix/process/trait.ExitStatusExt.html#tymethod.stopped_signal\" class=\"fn\">stopped_signal</a>(&amp;self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;</h4></section></summary><div class=\"docblock\">If the process was stopped by a signal, returns that signal. <a href=\"../os/unix/process/trait.ExitStatusExt.html#tymethod.stopped_signal\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.continued\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/unix/process.rs.html#351-353\">source</a><a href=\"#method.continued\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../os/unix/process/trait.ExitStatusExt.html#tymethod.continued\" class=\"fn\">continued</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">Whether the process was continued from a stopped status. <a href=\"../os/unix/process/trait.ExitStatusExt.html#tymethod.continued\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_raw\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/unix/process.rs.html#355-357\">source</a><a href=\"#method.into_raw\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../os/unix/process/trait.ExitStatusExt.html#tymethod.into_raw\" class=\"fn\">into_raw</a>(self) -&gt; <a class=\"primitive\" href=\"../primitive.i32.html\">i32</a></h4></section></summary><div class=\"docblock\">Returns the underlying raw <code>wait</code> status. <a href=\"../os/unix/process/trait.ExitStatusExt.html#tymethod.into_raw\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CExitStatusError%3E-for-ExitStatus\" class=\"impl\"><a class=\"src rightside\" href=\"../../src/std/process.rs.html#1901-1905\">source</a><a href=\"#impl-From%3CExitStatusError%3E-for-ExitStatus\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.ExitStatusError.html\" title=\"struct std::process::ExitStatusError\">ExitStatusError</a>&gt; for <a class=\"struct\" href=\"struct.ExitStatus.html\" title=\"struct std::process::ExitStatus\">ExitStatus</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/process.rs.html#1902-1904\">source</a><a href=\"#method.from\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(error: <a class=\"struct\" href=\"struct.ExitStatusError.html\" title=\"struct std::process::ExitStatusError\">ExitStatusError</a>) -&gt; Self</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq-for-ExitStatusError\" class=\"impl\"><a class=\"src rightside\" href=\"../../src/std/process.rs.html#1824\">source</a><a href=\"#impl-PartialEq-for-ExitStatusError\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"struct.ExitStatusError.html\" title=\"struct std::process::ExitStatusError\">ExitStatusError</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/process.rs.html#1824\">source</a><a href=\"#method.eq\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.ExitStatusError.html\" title=\"struct std::process::ExitStatusError\">ExitStatusError</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><section id=\"impl-Copy-for-ExitStatusError\" class=\"impl\"><a class=\"src rightside\" href=\"../../src/std/process.rs.html#1824\">source</a><a href=\"#impl-Copy-for-ExitStatusError\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a> for <a class=\"struct\" href=\"struct.ExitStatusError.html\" title=\"struct std::process::ExitStatusError\">ExitStatusError</a></h3></section><section id=\"impl-Eq-for-ExitStatusError\" class=\"impl\"><a class=\"src rightside\" href=\"../../src/std/process.rs.html#1824\">source</a><a href=\"#impl-Eq-for-ExitStatusError\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"struct.ExitStatusError.html\" title=\"struct std::process::ExitStatusError\">ExitStatusError</a></h3></section><section id=\"impl-StructuralPartialEq-for-ExitStatusError\" class=\"impl\"><a class=\"src rightside\" href=\"../../src/std/process.rs.html#1824\">source</a><a href=\"#impl-StructuralPartialEq-for-ExitStatusError\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.StructuralPartialEq.html\" title=\"trait std::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"struct\" href=\"struct.ExitStatusError.html\" title=\"struct std::process::ExitStatusError\">ExitStatusError</a></h3></section></div><h2 id=\"synthetic-implementations\" class=\"section-header\">Auto Trait Implementations<a href=\"#synthetic-implementations\" class=\"anchor\">Â§</a></h2><div id=\"synthetic-implementations-list\"><section id=\"impl-Freeze-for-ExitStatusError\" class=\"impl\"><a href=\"#impl-Freeze-for-ExitStatusError\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"struct\" href=\"struct.ExitStatusError.html\" title=\"struct std::process::ExitStatusError\">ExitStatusError</a></h3></section><section id=\"impl-RefUnwindSafe-for-ExitStatusError\" class=\"impl\"><a href=\"#impl-RefUnwindSafe-for-ExitStatusError\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"struct\" href=\"struct.ExitStatusError.html\" title=\"struct std::process::ExitStatusError\">ExitStatusError</a></h3></section><section id=\"impl-Send-for-ExitStatusError\" class=\"impl\"><a href=\"#impl-Send-for-ExitStatusError\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"struct\" href=\"struct.ExitStatusError.html\" title=\"struct std::process::ExitStatusError\">ExitStatusError</a></h3></section><section id=\"impl-Sync-for-ExitStatusError\" class=\"impl\"><a href=\"#impl-Sync-for-ExitStatusError\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"struct.ExitStatusError.html\" title=\"struct std::process::ExitStatusError\">ExitStatusError</a></h3></section><section id=\"impl-Unpin-for-ExitStatusError\" class=\"impl\"><a href=\"#impl-Unpin-for-ExitStatusError\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"struct\" href=\"struct.ExitStatusError.html\" title=\"struct std::process::ExitStatusError\">ExitStatusError</a></h3></section><section id=\"impl-UnwindSafe-for-ExitStatusError\" class=\"impl\"><a href=\"#impl-UnwindSafe-for-ExitStatusError\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"struct.ExitStatusError.html\" title=\"struct std::process::ExitStatusError\">ExitStatusError</a></h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">Â§</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Any-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a><a href=\"#impl-Any-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#141\">source</a><a href=\"#method.type_id\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../any/trait.Any.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\">Gets the <code>TypeId</code> of <code>self</code>. <a href=\"../any/trait.Any.html#tymethod.type_id\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Borrow%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208\">source</a><a href=\"#impl-Borrow%3CT%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#210\">source</a><a href=\"#method.borrow\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216\">source</a><a href=\"#impl-BorrowMut%3CT%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#217\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765\">source</a><a href=\"#impl-From%3CT%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768\">source</a><a href=\"#method.from-1\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the argument unchanged.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Into%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750\">source</a><a href=\"#impl-Into%3CU%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758\">source</a><a href=\"#method.into\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; U</h4></section></summary><div class=\"docblock\"><p>Calls <code>U::from(self)</code>.</p>\n<p>That is, this conversion is whatever the implementation of\n<code><a href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for U</code> chooses to do.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-ToOwned-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85\">source</a><a href=\"#impl-ToOwned-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.ToOwned.html\" title=\"trait std::borrow::ToOwned\">ToOwned</a> for T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Owned\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Owned\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"../borrow/trait.ToOwned.html#associatedtype.Owned\" class=\"associatedtype\">Owned</a> = T</h4></section></summary><div class=\"docblock\">The resulting type after obtaining ownership.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_owned\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88\">source</a><a href=\"#method.to_owned\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.ToOwned.html#tymethod.to_owned\" class=\"fn\">to_owned</a>(&amp;self) -&gt; T</h4></section></summary><div class=\"docblock\">Creates owned data from borrowed data, usually by cloning. <a href=\"../borrow/trait.ToOwned.html#tymethod.to_owned\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92\">source</a><a href=\"#method.clone_into\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.ToOwned.html#method.clone_into\" class=\"fn\">clone_into</a>(&amp;self, target: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>)</h4></section></summary><div class=\"docblock\">Uses borrowed data to replace owned data, usually by cloning. <a href=\"../borrow/trait.ToOwned.html#method.clone_into\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-ToString-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2552\">source</a><a href=\"#impl-ToString-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../string/trait.ToString.html\" title=\"trait std::string::ToString\">ToString</a> for T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../fmt/trait.Display.html\" title=\"trait std::fmt::Display\">Display</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_string\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2558\">source</a><a href=\"#method.to_string\" class=\"anchor\">Â§</a><h4 class=\"code-header\">default fn <a href=\"../string/trait.ToString.html#tymethod.to_string\" class=\"fn\">to_string</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../string/struct.String.html\" title=\"struct std::string::String\">String</a></h4></section></summary><div class=\"docblock\">Converts the given value to a <code>String</code>. <a href=\"../string/trait.ToString.html#tymethod.to_string\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryFrom%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807\">source</a><a href=\"#impl-TryFrom%3CU%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812\">source</a><a href=\"#method.try_from\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: U) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, &lt;T as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryInto%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792\">source</a><a href=\"#impl-TryInto%3CU%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryInto.html\" title=\"trait std::convert::TryInto\">TryInto</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryInto.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797\">source</a><a href=\"#method.try_into\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryInto.html#tymethod.try_into\" class=\"fn\">try_into</a>(self) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;U, &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details></div></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:14:39.415Z"
}