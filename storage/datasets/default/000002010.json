{
	"title": "System in std::alloc - Rust",
	"url": "https://doc.rust-lang.org/stable/std/alloc/struct.System.html",
	"markdown": "# System in std::alloc - Rust\n\n## Struct [std](../index.html)::[alloc](index.html)::[System](#)\n\n1.28.0 · [source](about:blank/src/std/alloc.rs.html#131) ·\n\n```\npub struct System;\n```\n\nExpand description\n\nThe default memory allocator provided by the operating system.\n\nThis is based on `malloc` on Unix platforms and `HeapAlloc` on Windows, plus related functions. However, it is not valid to mix use of the backing system allocator with `System`, as this implementation may include extra work, such as to serve alignment requests greater than the alignment provided directly by the backing system allocator.\n\nThis type implements the `GlobalAlloc` trait and Rust programs by default work as if they had this definition:\n\n```\nuse std::alloc::System;\n\n#[global_allocator]\nstatic A: System = System;\n\nfn main() {\n    let a = Box::new(4); // Allocates from the system allocator.\n    println!(\"{a}\");\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::alloc::System;%0A%0A%23%5Bglobal_allocator%5D%0Astatic+A:+System+=+System;%0A%0Afn+main()+%7B%0A++++let+a+=+Box::new(4);+//+Allocates+from+the+system+allocator.%0A++++println!(%22%7Ba%7D%22);%0A%7D&edition=2021)\n\nYou can also define your own wrapper around `System` if you’d like, such as keeping track of the number of all bytes allocated:\n\n```\nuse std::alloc::{System, GlobalAlloc, Layout};\nuse std::sync::atomic::{AtomicUsize, Ordering::Relaxed};\n\nstruct Counter;\n\nstatic ALLOCATED: AtomicUsize = AtomicUsize::new(0);\n\nunsafe impl GlobalAlloc for Counter {\n    unsafe fn alloc(&self, layout: Layout) -> *mut u8 {\n        let ret = System.alloc(layout);\n        if !ret.is_null() {\n            ALLOCATED.fetch_add(layout.size(), Relaxed);\n        }\n        ret\n    }\n\n    unsafe fn dealloc(&self, ptr: *mut u8, layout: Layout) {\n        System.dealloc(ptr, layout);\n        ALLOCATED.fetch_sub(layout.size(), Relaxed);\n    }\n}\n\n#[global_allocator]\nstatic A: Counter = Counter;\n\nfn main() {\n    println!(\"allocated bytes before main: {}\", ALLOCATED.load(Relaxed));\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::alloc::%7BSystem,+GlobalAlloc,+Layout%7D;%0Ause+std::sync::atomic::%7BAtomicUsize,+Ordering::Relaxed%7D;%0A%0Astruct+Counter;%0A%0Astatic+ALLOCATED:+AtomicUsize+=+AtomicUsize::new(0);%0A%0Aunsafe+impl+GlobalAlloc+for+Counter+%7B%0A++++unsafe+fn+alloc(%26self,+layout:+Layout)+-%3E+*mut+u8+%7B%0A++++++++let+ret+=+System.alloc(layout);%0A++++++++if+!ret.is_null()+%7B%0A++++++++++++ALLOCATED.fetch_add(layout.size(),+Relaxed);%0A++++++++%7D%0A++++++++ret%0A++++%7D%0A%0A++++unsafe+fn+dealloc(%26self,+ptr:+*mut+u8,+layout:+Layout)+%7B%0A++++++++System.dealloc(ptr,+layout);%0A++++++++ALLOCATED.fetch_sub(layout.size(),+Relaxed);%0A++++%7D%0A%7D%0A%0A%23%5Bglobal_allocator%5D%0Astatic+A:+Counter+=+Counter;%0A%0Afn+main()+%7B%0A++++println!(%22allocated+bytes+before+main:+%7B%7D%22,+ALLOCATED.load(Relaxed));%0A%7D&edition=2021)\n\nIt can also be used directly to allocate memory independently of whatever global allocator has been selected for a Rust program. For example if a Rust program opts in to using jemalloc as the global allocator, `System` will still allocate memory using `malloc` and `HeapAlloc`.\n\n[source](about:blank/src/std/alloc.rs.html#203-287)[§](#impl-Allocator-for-System)\n\n[source](about:blank/src/std/alloc.rs.html#205-207)[§](#method.allocate)\n\n🔬This is a nightly-only experimental API. (`allocator_api` [#32838](https://github.com/rust-lang/rust/issues/32838))\n\nAttempts to allocate a block of memory. [Read more](about:blank/trait.Allocator.html#tymethod.allocate)\n\n[source](about:blank/src/std/alloc.rs.html#210-212)[§](#method.allocate_zeroed)\n\n🔬This is a nightly-only experimental API. (`allocator_api` [#32838](https://github.com/rust-lang/rust/issues/32838))\n\nBehaves like `allocate`, but also ensures that the returned memory is zero-initialized. [Read more](about:blank/trait.Allocator.html#method.allocate_zeroed)\n\n[source](about:blank/src/std/alloc.rs.html#215-221)[§](#method.deallocate)\n\n🔬This is a nightly-only experimental API. (`allocator_api` [#32838](https://github.com/rust-lang/rust/issues/32838))\n\nDeallocates the memory referenced by `ptr`. [Read more](about:blank/trait.Allocator.html#tymethod.deallocate)\n\n[source](about:blank/src/std/alloc.rs.html#224-232)[§](#method.grow)\n\n🔬This is a nightly-only experimental API. (`allocator_api` [#32838](https://github.com/rust-lang/rust/issues/32838))\n\nAttempts to extend the memory block. [Read more](about:blank/trait.Allocator.html#method.grow)\n\n[source](about:blank/src/std/alloc.rs.html#235-243)[§](#method.grow_zeroed)\n\n🔬This is a nightly-only experimental API. (`allocator_api` [#32838](https://github.com/rust-lang/rust/issues/32838))\n\nBehaves like `grow`, but also ensures that the new contents are set to zero before being returned. [Read more](about:blank/trait.Allocator.html#method.grow_zeroed)\n\n[source](about:blank/src/std/alloc.rs.html#246-286)[§](#method.shrink)\n\n🔬This is a nightly-only experimental API. (`allocator_api` [#32838](https://github.com/rust-lang/rust/issues/32838))\n\nAttempts to shrink the memory block. [Read more](about:blank/trait.Allocator.html#method.shrink)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/alloc/mod.rs.html#366-368)[§](#method.by_ref)\n\n🔬This is a nightly-only experimental API. (`allocator_api` [#32838](https://github.com/rust-lang/rust/issues/32838))\n\nCreates a “by reference” adapter for this instance of `Allocator`. [Read more](about:blank/trait.Allocator.html#method.by_ref)\n\n1.28.0 · [source](about:blank/src/std/alloc.rs.html#130)[§](#impl-Clone-for-System)\n\n1.28.0 · [source](about:blank/src/std/alloc.rs.html#130)[§](#impl-Debug-for-System)\n\n1.28.0 · [source](about:blank/src/std/alloc.rs.html#130)[§](#impl-Default-for-System)\n\n1.28.0 · [source](about:blank/src/std/sys/pal/unix/alloc.rs.html#6-59)[§](#impl-GlobalAlloc-for-System)\n\n[source](about:blank/src/std/sys/pal/unix/alloc.rs.html#8-30)[§](#method.alloc)\n\nAllocate memory as described by the given `layout`. [Read more](about:blank/trait.GlobalAlloc.html#tymethod.alloc)\n\n[source](about:blank/src/std/sys/pal/unix/alloc.rs.html#33-44)[§](#method.alloc_zeroed)\n\nBehaves like `alloc`, but also ensures that the contents are set to zero before being returned. [Read more](about:blank/trait.GlobalAlloc.html#method.alloc_zeroed)\n\n[source](about:blank/src/std/sys/pal/unix/alloc.rs.html#47-49)[§](#method.dealloc)\n\nDeallocate the block of memory at the given `ptr` pointer with the given `layout`. [Read more](about:blank/trait.GlobalAlloc.html#tymethod.dealloc)\n\n[source](about:blank/src/std/sys/pal/unix/alloc.rs.html#52-58)[§](#method.realloc)\n\nShrink or grow a block of memory to the given `new_size` in bytes. The block is described by the given `ptr` pointer and `layout`. [Read more](about:blank/trait.GlobalAlloc.html#method.realloc)\n\n1.28.0 · [source](about:blank/src/std/alloc.rs.html#130)[§](#impl-Copy-for-System)\n\n[§](#impl-Freeze-for-System)\n\n[§](#impl-RefUnwindSafe-for-System)\n\n[§](#impl-Send-for-System)\n\n[§](#impl-Sync-for-System)\n\n[§](#impl-Unpin-for-System)\n\n[§](#impl-UnwindSafe-for-System)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140)[§](#impl-Any-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208)[§](#impl-Borrow%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216)[§](#impl-BorrowMut%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765)[§](#impl-From%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768)[§](#method.from)\n\nReturns the argument unchanged.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750)[§](#impl-Into%3CU%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758)[§](#method.into)\n\nCalls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of `[From](../convert/trait.From.html \"trait std::convert::From\")<T> for U` chooses to do.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85)[§](#impl-ToOwned-for-T)\n\n[§](#associatedtype.Owned)\n\nThe resulting type after obtaining ownership.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88)[§](#method.to_owned)\n\nCreates owned data from borrowed data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#tymethod.to_owned)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92)[§](#method.clone_into)\n\nUses borrowed data to replace owned data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#method.clone_into)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807)[§](#impl-TryFrom%3CU%3E-for-T)\n\n[§](#associatedtype.Error-1)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812)[§](#method.try_from)\n\nPerforms the conversion.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792)[§](#impl-TryInto%3CU%3E-for-T)\n\n[§](#associatedtype.Error)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797)[§](#method.try_into)\n\nPerforms the conversion.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"The default memory allocator provided by the operating system.\"><title>System in std::alloc - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc struct\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">System</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">System</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-Allocator-for-System\">Allocator</a></li><li><a href=\"#impl-Clone-for-System\">Clone</a></li><li><a href=\"#impl-Copy-for-System\">Copy</a></li><li><a href=\"#impl-Debug-for-System\">Debug</a></li><li><a href=\"#impl-Default-for-System\">Default</a></li><li><a href=\"#impl-GlobalAlloc-for-System\">GlobalAlloc</a></li></ul><h3><a href=\"#synthetic-implementations\">Auto Trait Implementations</a></h3><ul class=\"block synthetic-implementation\"><li><a href=\"#impl-Freeze-for-System\">Freeze</a></li><li><a href=\"#impl-RefUnwindSafe-for-System\">RefUnwindSafe</a></li><li><a href=\"#impl-Send-for-System\">Send</a></li><li><a href=\"#impl-Sync-for-System\">Sync</a></li><li><a href=\"#impl-Unpin-for-System\">Unpin</a></li><li><a href=\"#impl-UnwindSafe-for-System\">UnwindSafe</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-Any-for-T\">Any</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-T\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-T\">BorrowMut&lt;T&gt;</a></li><li><a href=\"#impl-From%3CT%3E-for-T\">From&lt;T&gt;</a></li><li><a href=\"#impl-Into%3CU%3E-for-T\">Into&lt;U&gt;</a></li><li><a href=\"#impl-ToOwned-for-T\">ToOwned</a></li><li><a href=\"#impl-TryFrom%3CU%3E-for-T\">TryFrom&lt;U&gt;</a></li><li><a href=\"#impl-TryInto%3CU%3E-for-T\">TryInto&lt;U&gt;</a></li></ul></section><h2><a href=\"index.html\">In std::alloc</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.AllocError.html\">AllocError</a></li><li><a href=\"struct.Global.html\">Global</a></li><li><a href=\"struct.Layout.html\">Layout</a></li><li><a href=\"struct.LayoutError.html\">LayoutError</a></li><li><a href=\"struct.System.html\">System</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.Allocator.html\">Allocator</a></li><li><a href=\"trait.GlobalAlloc.html\">GlobalAlloc</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.alloc.html\">alloc</a></li><li><a href=\"fn.alloc_zeroed.html\">alloc_zeroed</a></li><li><a href=\"fn.dealloc.html\">dealloc</a></li><li><a href=\"fn.handle_alloc_error.html\">handle_alloc_error</a></li><li><a href=\"fn.realloc.html\">realloc</a></li><li><a href=\"fn.set_alloc_error_hook.html\">set_alloc_error_hook</a></li><li><a href=\"fn.take_alloc_error_hook.html\">take_alloc_error_hook</a></li></ul><h3><a href=\"index.html#types\">Type Aliases</a></h3><ul class=\"block type\"><li><a href=\"type.LayoutErr.html\">LayoutErr</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Struct <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">alloc</a>::<wbr><a class=\"struct\" href=\"#\">System</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> · <a class=\"src\" href=\"../../src/std/alloc.rs.html#131\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub struct System;</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>The default memory allocator provided by the operating system.</p>\n<p>This is based on <code>malloc</code> on Unix platforms and <code>HeapAlloc</code> on Windows,\nplus related functions. However, it is not valid to mix use of the backing\nsystem allocator with <code>System</code>, as this implementation may include extra\nwork, such as to serve alignment requests greater than the alignment\nprovided directly by the backing system allocator.</p>\n<p>This type implements the <code>GlobalAlloc</code> trait and Rust programs by default\nwork as if they had this definition:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::alloc::System;\n\n<span class=\"attr\">#[global_allocator]\n</span><span class=\"kw\">static </span>A: System = System;\n\n<span class=\"kw\">fn </span>main() {\n    <span class=\"kw\">let </span>a = Box::new(<span class=\"number\">4</span>); <span class=\"comment\">// Allocates from the system allocator.\n    </span><span class=\"macro\">println!</span>(<span class=\"string\">\"{a}\"</span>);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::alloc::System;%0A%0A%23%5Bglobal_allocator%5D%0Astatic+A:+System+=+System;%0A%0Afn+main()+%7B%0A++++let+a+=+Box::new(4);+//+Allocates+from+the+system+allocator.%0A++++println!(%22%7Ba%7D%22);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>You can also define your own wrapper around <code>System</code> if you’d like, such as\nkeeping track of the number of all bytes allocated:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::alloc::{System, GlobalAlloc, Layout};\n<span class=\"kw\">use </span>std::sync::atomic::{AtomicUsize, Ordering::Relaxed};\n\n<span class=\"kw\">struct </span>Counter;\n\n<span class=\"kw\">static </span>ALLOCATED: AtomicUsize = AtomicUsize::new(<span class=\"number\">0</span>);\n\n<span class=\"kw\">unsafe impl </span>GlobalAlloc <span class=\"kw\">for </span>Counter {\n    <span class=\"kw\">unsafe fn </span>alloc(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, layout: Layout) -&gt; <span class=\"kw-2\">*mut </span>u8 {\n        <span class=\"kw\">let </span>ret = System.alloc(layout);\n        <span class=\"kw\">if </span>!ret.is_null() {\n            ALLOCATED.fetch_add(layout.size(), Relaxed);\n        }\n        ret\n    }\n\n    <span class=\"kw\">unsafe fn </span>dealloc(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, ptr: <span class=\"kw-2\">*mut </span>u8, layout: Layout) {\n        System.dealloc(ptr, layout);\n        ALLOCATED.fetch_sub(layout.size(), Relaxed);\n    }\n}\n\n<span class=\"attr\">#[global_allocator]\n</span><span class=\"kw\">static </span>A: Counter = Counter;\n\n<span class=\"kw\">fn </span>main() {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"allocated bytes before main: {}\"</span>, ALLOCATED.load(Relaxed));\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::alloc::%7BSystem,+GlobalAlloc,+Layout%7D;%0Ause+std::sync::atomic::%7BAtomicUsize,+Ordering::Relaxed%7D;%0A%0Astruct+Counter;%0A%0Astatic+ALLOCATED:+AtomicUsize+=+AtomicUsize::new(0);%0A%0Aunsafe+impl+GlobalAlloc+for+Counter+%7B%0A++++unsafe+fn+alloc(%26self,+layout:+Layout)+-%3E+*mut+u8+%7B%0A++++++++let+ret+=+System.alloc(layout);%0A++++++++if+!ret.is_null()+%7B%0A++++++++++++ALLOCATED.fetch_add(layout.size(),+Relaxed);%0A++++++++%7D%0A++++++++ret%0A++++%7D%0A%0A++++unsafe+fn+dealloc(%26self,+ptr:+*mut+u8,+layout:+Layout)+%7B%0A++++++++System.dealloc(ptr,+layout);%0A++++++++ALLOCATED.fetch_sub(layout.size(),+Relaxed);%0A++++%7D%0A%7D%0A%0A%23%5Bglobal_allocator%5D%0Astatic+A:+Counter+=+Counter;%0A%0Afn+main()+%7B%0A++++println!(%22allocated+bytes+before+main:+%7B%7D%22,+ALLOCATED.load(Relaxed));%0A%7D&amp;edition=2021\">Run</a></div>\n<p>It can also be used directly to allocate memory independently of whatever\nglobal allocator has been selected for a Rust program. For example if a Rust\nprogram opts in to using jemalloc as the global allocator, <code>System</code> will\nstill allocate memory using <code>malloc</code> and <code>HeapAlloc</code>.</p>\n</div></details><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">§</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Allocator-for-System\" class=\"impl\"><a class=\"src rightside\" href=\"../../src/std/alloc.rs.html#203-287\">source</a><a href=\"#impl-Allocator-for-System\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a> for <a class=\"struct\" href=\"struct.System.html\" title=\"struct std::alloc::System\">System</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.allocate\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/alloc.rs.html#205-207\">source</a><a href=\"#method.allocate\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.Allocator.html#tymethod.allocate\" class=\"fn\">allocate</a>(&amp;self, layout: <a class=\"struct\" href=\"struct.Layout.html\" title=\"struct std::alloc::Layout\">Layout</a>) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"../ptr/struct.NonNull.html\" title=\"struct std::ptr::NonNull\">NonNull</a>&lt;[<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>]&gt;, <a class=\"struct\" href=\"struct.AllocError.html\" title=\"struct std::alloc::AllocError\">AllocError</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/32838\">#32838</a>)</span></div></span><div class=\"docblock\">Attempts to allocate a block of memory. <a href=\"trait.Allocator.html#tymethod.allocate\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.allocate_zeroed\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/alloc.rs.html#210-212\">source</a><a href=\"#method.allocate_zeroed\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.Allocator.html#method.allocate_zeroed\" class=\"fn\">allocate_zeroed</a>(&amp;self, layout: <a class=\"struct\" href=\"struct.Layout.html\" title=\"struct std::alloc::Layout\">Layout</a>) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"../ptr/struct.NonNull.html\" title=\"struct std::ptr::NonNull\">NonNull</a>&lt;[<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>]&gt;, <a class=\"struct\" href=\"struct.AllocError.html\" title=\"struct std::alloc::AllocError\">AllocError</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/32838\">#32838</a>)</span></div></span><div class=\"docblock\">Behaves like <code>allocate</code>, but also ensures that the returned memory is zero-initialized. <a href=\"trait.Allocator.html#method.allocate_zeroed\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.deallocate\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/alloc.rs.html#215-221\">source</a><a href=\"#method.deallocate\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"trait.Allocator.html#tymethod.deallocate\" class=\"fn\">deallocate</a>(&amp;self, ptr: <a class=\"struct\" href=\"../ptr/struct.NonNull.html\" title=\"struct std::ptr::NonNull\">NonNull</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;, layout: <a class=\"struct\" href=\"struct.Layout.html\" title=\"struct std::alloc::Layout\">Layout</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/32838\">#32838</a>)</span></div></span><div class=\"docblock\">Deallocates the memory referenced by <code>ptr</code>. <a href=\"trait.Allocator.html#tymethod.deallocate\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.grow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/alloc.rs.html#224-232\">source</a><a href=\"#method.grow\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"trait.Allocator.html#method.grow\" class=\"fn\">grow</a>(\n    &amp;self,\n    ptr: <a class=\"struct\" href=\"../ptr/struct.NonNull.html\" title=\"struct std::ptr::NonNull\">NonNull</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;,\n    old_layout: <a class=\"struct\" href=\"struct.Layout.html\" title=\"struct std::alloc::Layout\">Layout</a>,\n    new_layout: <a class=\"struct\" href=\"struct.Layout.html\" title=\"struct std::alloc::Layout\">Layout</a>,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"../ptr/struct.NonNull.html\" title=\"struct std::ptr::NonNull\">NonNull</a>&lt;[<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>]&gt;, <a class=\"struct\" href=\"struct.AllocError.html\" title=\"struct std::alloc::AllocError\">AllocError</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/32838\">#32838</a>)</span></div></span><div class=\"docblock\">Attempts to extend the memory block. <a href=\"trait.Allocator.html#method.grow\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.grow_zeroed\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/alloc.rs.html#235-243\">source</a><a href=\"#method.grow_zeroed\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"trait.Allocator.html#method.grow_zeroed\" class=\"fn\">grow_zeroed</a>(\n    &amp;self,\n    ptr: <a class=\"struct\" href=\"../ptr/struct.NonNull.html\" title=\"struct std::ptr::NonNull\">NonNull</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;,\n    old_layout: <a class=\"struct\" href=\"struct.Layout.html\" title=\"struct std::alloc::Layout\">Layout</a>,\n    new_layout: <a class=\"struct\" href=\"struct.Layout.html\" title=\"struct std::alloc::Layout\">Layout</a>,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"../ptr/struct.NonNull.html\" title=\"struct std::ptr::NonNull\">NonNull</a>&lt;[<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>]&gt;, <a class=\"struct\" href=\"struct.AllocError.html\" title=\"struct std::alloc::AllocError\">AllocError</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/32838\">#32838</a>)</span></div></span><div class=\"docblock\">Behaves like <code>grow</code>, but also ensures that the new contents are set to zero before being\nreturned. <a href=\"trait.Allocator.html#method.grow_zeroed\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shrink\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/alloc.rs.html#246-286\">source</a><a href=\"#method.shrink\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"trait.Allocator.html#method.shrink\" class=\"fn\">shrink</a>(\n    &amp;self,\n    ptr: <a class=\"struct\" href=\"../ptr/struct.NonNull.html\" title=\"struct std::ptr::NonNull\">NonNull</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;,\n    old_layout: <a class=\"struct\" href=\"struct.Layout.html\" title=\"struct std::alloc::Layout\">Layout</a>,\n    new_layout: <a class=\"struct\" href=\"struct.Layout.html\" title=\"struct std::alloc::Layout\">Layout</a>,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"../ptr/struct.NonNull.html\" title=\"struct std::ptr::NonNull\">NonNull</a>&lt;[<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>]&gt;, <a class=\"struct\" href=\"struct.AllocError.html\" title=\"struct std::alloc::AllocError\">AllocError</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/32838\">#32838</a>)</span></div></span><div class=\"docblock\">Attempts to shrink the memory block. <a href=\"trait.Allocator.html#method.shrink\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.by_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/alloc/mod.rs.html#366-368\">source</a><a href=\"#method.by_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.Allocator.html#method.by_ref\" class=\"fn\">by_ref</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Self</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/32838\">#32838</a>)</span></div></span><div class=\"docblock\">Creates a “by reference” adapter for this instance of <code>Allocator</code>. <a href=\"trait.Allocator.html#method.by_ref\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Clone-for-System\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> · <a class=\"src\" href=\"../../src/std/alloc.rs.html#130\">source</a></span><a href=\"#impl-Clone-for-System\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"struct.System.html\" title=\"struct std::alloc::System\">System</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/alloc.rs.html#130\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"struct.System.html\" title=\"struct std::alloc::System\">System</a></h4></section></summary><div class=\"docblock\">Returns a copy of the value. <a href=\"../clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class=\"docblock\">Performs copy-assignment from <code>source</code>. <a href=\"../clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-System\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> · <a class=\"src\" href=\"../../src/std/alloc.rs.html#130\">source</a></span><a href=\"#impl-Debug-for-System\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"struct.System.html\" title=\"struct std::alloc::System\">System</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/alloc.rs.html#130\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"../fmt/type.Result.html\" title=\"type std::fmt::Result\">Result</a></h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Default-for-System\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> · <a class=\"src\" href=\"../../src/std/alloc.rs.html#130\">source</a></span><a href=\"#impl-Default-for-System\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for <a class=\"struct\" href=\"struct.System.html\" title=\"struct std::alloc::System\">System</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/alloc.rs.html#130\">source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"struct\" href=\"struct.System.html\" title=\"struct std::alloc::System\">System</a></h4></section></summary><div class=\"docblock\">Returns the “default value” for a type. <a href=\"../default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-GlobalAlloc-for-System\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> · <a class=\"src\" href=\"../../src/std/sys/pal/unix/alloc.rs.html#6-59\">source</a></span><a href=\"#impl-GlobalAlloc-for-System\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.GlobalAlloc.html\" title=\"trait std::alloc::GlobalAlloc\">GlobalAlloc</a> for <a class=\"struct\" href=\"struct.System.html\" title=\"struct std::alloc::System\">System</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.alloc\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/sys/pal/unix/alloc.rs.html#8-30\">source</a><a href=\"#method.alloc\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"trait.GlobalAlloc.html#tymethod.alloc\" class=\"fn\">alloc</a>(&amp;self, layout: <a class=\"struct\" href=\"struct.Layout.html\" title=\"struct std::alloc::Layout\">Layout</a>) -&gt; <a class=\"primitive\" href=\"../primitive.pointer.html\">*mut </a><a class=\"primitive\" href=\"../primitive.u8.html\">u8</a></h4></section></summary><div class=\"docblock\">Allocate memory as described by the given <code>layout</code>. <a href=\"trait.GlobalAlloc.html#tymethod.alloc\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.alloc_zeroed\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/sys/pal/unix/alloc.rs.html#33-44\">source</a><a href=\"#method.alloc_zeroed\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"trait.GlobalAlloc.html#method.alloc_zeroed\" class=\"fn\">alloc_zeroed</a>(&amp;self, layout: <a class=\"struct\" href=\"struct.Layout.html\" title=\"struct std::alloc::Layout\">Layout</a>) -&gt; <a class=\"primitive\" href=\"../primitive.pointer.html\">*mut </a><a class=\"primitive\" href=\"../primitive.u8.html\">u8</a></h4></section></summary><div class=\"docblock\">Behaves like <code>alloc</code>, but also ensures that the contents\nare set to zero before being returned. <a href=\"trait.GlobalAlloc.html#method.alloc_zeroed\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.dealloc\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/sys/pal/unix/alloc.rs.html#47-49\">source</a><a href=\"#method.dealloc\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"trait.GlobalAlloc.html#tymethod.dealloc\" class=\"fn\">dealloc</a>(&amp;self, ptr: <a class=\"primitive\" href=\"../primitive.pointer.html\">*mut </a><a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, _layout: <a class=\"struct\" href=\"struct.Layout.html\" title=\"struct std::alloc::Layout\">Layout</a>)</h4></section></summary><div class=\"docblock\">Deallocate the block of memory at the given <code>ptr</code> pointer with the given <code>layout</code>. <a href=\"trait.GlobalAlloc.html#tymethod.dealloc\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.realloc\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/sys/pal/unix/alloc.rs.html#52-58\">source</a><a href=\"#method.realloc\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"trait.GlobalAlloc.html#method.realloc\" class=\"fn\">realloc</a>(\n    &amp;self,\n    ptr: <a class=\"primitive\" href=\"../primitive.pointer.html\">*mut </a><a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>,\n    layout: <a class=\"struct\" href=\"struct.Layout.html\" title=\"struct std::alloc::Layout\">Layout</a>,\n    new_size: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"primitive\" href=\"../primitive.pointer.html\">*mut </a><a class=\"primitive\" href=\"../primitive.u8.html\">u8</a></h4></section></summary><div class=\"docblock\">Shrink or grow a block of memory to the given <code>new_size</code> in bytes.\nThe block is described by the given <code>ptr</code> pointer and <code>layout</code>. <a href=\"trait.GlobalAlloc.html#method.realloc\">Read more</a></div></details></div></details><section id=\"impl-Copy-for-System\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> · <a class=\"src\" href=\"../../src/std/alloc.rs.html#130\">source</a></span><a href=\"#impl-Copy-for-System\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a> for <a class=\"struct\" href=\"struct.System.html\" title=\"struct std::alloc::System\">System</a></h3></section></div><h2 id=\"synthetic-implementations\" class=\"section-header\">Auto Trait Implementations<a href=\"#synthetic-implementations\" class=\"anchor\">§</a></h2><div id=\"synthetic-implementations-list\"><section id=\"impl-Freeze-for-System\" class=\"impl\"><a href=\"#impl-Freeze-for-System\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"struct\" href=\"struct.System.html\" title=\"struct std::alloc::System\">System</a></h3></section><section id=\"impl-RefUnwindSafe-for-System\" class=\"impl\"><a href=\"#impl-RefUnwindSafe-for-System\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"struct\" href=\"struct.System.html\" title=\"struct std::alloc::System\">System</a></h3></section><section id=\"impl-Send-for-System\" class=\"impl\"><a href=\"#impl-Send-for-System\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"struct\" href=\"struct.System.html\" title=\"struct std::alloc::System\">System</a></h3></section><section id=\"impl-Sync-for-System\" class=\"impl\"><a href=\"#impl-Sync-for-System\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"struct.System.html\" title=\"struct std::alloc::System\">System</a></h3></section><section id=\"impl-Unpin-for-System\" class=\"impl\"><a href=\"#impl-Unpin-for-System\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"struct\" href=\"struct.System.html\" title=\"struct std::alloc::System\">System</a></h3></section><section id=\"impl-UnwindSafe-for-System\" class=\"impl\"><a href=\"#impl-UnwindSafe-for-System\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"struct.System.html\" title=\"struct std::alloc::System\">System</a></h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">§</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Any-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a><a href=\"#impl-Any-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#141\">source</a><a href=\"#method.type_id\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../any/trait.Any.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\">Gets the <code>TypeId</code> of <code>self</code>. <a href=\"../any/trait.Any.html#tymethod.type_id\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Borrow%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208\">source</a><a href=\"#impl-Borrow%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#210\">source</a><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216\">source</a><a href=\"#impl-BorrowMut%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#217\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765\">source</a><a href=\"#impl-From%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the argument unchanged.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Into%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750\">source</a><a href=\"#impl-Into%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758\">source</a><a href=\"#method.into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; U</h4></section></summary><div class=\"docblock\"><p>Calls <code>U::from(self)</code>.</p>\n<p>That is, this conversion is whatever the implementation of\n<code><a href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for U</code> chooses to do.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-ToOwned-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85\">source</a><a href=\"#impl-ToOwned-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.ToOwned.html\" title=\"trait std::borrow::ToOwned\">ToOwned</a> for T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Owned\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Owned\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../borrow/trait.ToOwned.html#associatedtype.Owned\" class=\"associatedtype\">Owned</a> = T</h4></section></summary><div class=\"docblock\">The resulting type after obtaining ownership.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_owned\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88\">source</a><a href=\"#method.to_owned\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.ToOwned.html#tymethod.to_owned\" class=\"fn\">to_owned</a>(&amp;self) -&gt; T</h4></section></summary><div class=\"docblock\">Creates owned data from borrowed data, usually by cloning. <a href=\"../borrow/trait.ToOwned.html#tymethod.to_owned\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92\">source</a><a href=\"#method.clone_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.ToOwned.html#method.clone_into\" class=\"fn\">clone_into</a>(&amp;self, target: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>)</h4></section></summary><div class=\"docblock\">Uses borrowed data to replace owned data, usually by cloning. <a href=\"../borrow/trait.ToOwned.html#method.clone_into\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryFrom%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807\">source</a><a href=\"#impl-TryFrom%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812\">source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: U) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, &lt;T as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryInto%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792\">source</a><a href=\"#impl-TryInto%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryInto.html\" title=\"trait std::convert::TryInto\">TryInto</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryInto.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797\">source</a><a href=\"#method.try_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryInto.html#tymethod.try_into\" class=\"fn\">try_into</a>(self) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;U, &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details></div></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:21:57.780Z"
}