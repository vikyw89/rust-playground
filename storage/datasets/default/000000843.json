{
	"title": "BTreeSet in std::collections - Rust",
	"url": "https://doc.rust-lang.org/stable/std/collections/struct.BTreeSet.html",
	"markdown": "# BTreeSet in std::collections - Rust\n\n```\npub struct BTreeSet<T, A = Global>where\n    A: Allocator + Clone,{ /* private fields */ }\n```\n\nExpand description\n\nAn ordered set based on a B-Tree.\n\nSee [`BTreeMap`](struct.BTreeMap.html \"struct std::collections::BTreeMap\")â€™s documentation for a detailed discussion of this collectionâ€™s performance benefits and drawbacks.\n\nIt is a logic error for an item to be modified in such a way that the itemâ€™s ordering relative to any other item, as determined by the [`Ord`](../cmp/trait.Ord.html \"trait std::cmp::Ord\") trait, changes while it is in the set. This is normally only possible through [`Cell`](../cell/struct.Cell.html \"struct std::cell::Cell\"), [`RefCell`](../cell/struct.RefCell.html \"struct std::cell::RefCell\"), global state, I/O, or unsafe code. The behavior resulting from such a logic error is not specified, but will be encapsulated to the `BTreeSet` that observed the logic error and not result in undefined behavior. This could include panics, incorrect results, aborts, memory leaks, and non-termination.\n\nIterators returned by [`BTreeSet::iter`](about:blank/struct.BTreeSet.html#method.iter \"method std::collections::BTreeSet::iter\") and [`BTreeSet::into_iter`](about:blank/struct.BTreeSet.html#method.into_iter \"method std::collections::BTreeSet::into_iter\") produce their items in order, and take worst-case logarithmic and amortized constant time per item returned.\n\n## [Â§](#examples)Examples\n\n```\nuse std::collections::BTreeSet;\n\n// Type inference lets us omit an explicit type signature (which\n// would be `BTreeSet<&str>` in this example).\nlet mut books = BTreeSet::new();\n\n// Add some books.\nbooks.insert(\"A Dance With Dragons\");\nbooks.insert(\"To Kill a Mockingbird\");\nbooks.insert(\"The Odyssey\");\nbooks.insert(\"The Great Gatsby\");\n\n// Check for a specific one.\nif !books.contains(\"The Winds of Winter\") {\n    println!(\"We have {} books, but The Winds of Winter ain't one.\",\n             books.len());\n}\n\n// Remove a book.\nbooks.remove(\"The Odyssey\");\n\n// Iterate over everything.\nfor book in &books {\n    println!(\"{book}\");\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::BTreeSet;%0A++++%0A++++//+Type+inference+lets+us+omit+an+explicit+type+signature+(which%0A++++//+would+be+%60BTreeSet%3C%26str%3E%60+in+this+example).%0A++++let+mut+books+=+BTreeSet::new();%0A++++%0A++++//+Add+some+books.%0A++++books.insert(%22A+Dance+With+Dragons%22);%0A++++books.insert(%22To+Kill+a+Mockingbird%22);%0A++++books.insert(%22The+Odyssey%22);%0A++++books.insert(%22The+Great+Gatsby%22);%0A++++%0A++++//+Check+for+a+specific+one.%0A++++if+!books.contains(%22The+Winds+of+Winter%22)+%7B%0A++++++++println!(%22We+have+%7B%7D+books,+but+The+Winds+of+Winter+ain%27t+one.%22,%0A+++++++++++++++++books.len());%0A++++%7D%0A++++%0A++++//+Remove+a+book.%0A++++books.remove(%22The+Odyssey%22);%0A++++%0A++++//+Iterate+over+everything.%0A++++for+book+in+%26books+%7B%0A++++++++println!(%22%7Bbook%7D%22);%0A++++%7D%0A%7D&edition=2021)\n\nA `BTreeSet` with a known list of items can be initialized from an array:\n\n```\nuse std::collections::BTreeSet;\n\nlet set = BTreeSet::from([1, 2, 3]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::BTreeSet;%0A++++%0A++++let+set+=+BTreeSet::from(%5B1,+2,+3%5D);%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#325)[Â§](#impl-BTreeSet%3CT%3E)\n\n1.0.0 (const: 1.66.0) Â· [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#341)\n\nMakes a new, empty `BTreeSet`.\n\nDoes not allocate anything on its own.\n\n##### [Â§](#examples-1)Examples\n\n```\nuse std::collections::BTreeSet;\n\nlet mut set: BTreeSet<i32> = BTreeSet::new();\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Ballow(unused_mut)%5D%0Afn+main()+%7B%0A++++use+std::collections::BTreeSet;%0A++++%0A++++let+mut+set:+BTreeSet%3Ci32%3E+=+BTreeSet::new();%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#346)[Â§](#impl-BTreeSet%3CT,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#361)\n\nðŸ”¬This is a nightly-only experimental API. (`btreemap_alloc`Â [#32838](https://github.com/rust-lang/rust/issues/32838))\n\nMakes a new `BTreeSet` with a reasonable choice of B.\n\n##### [Â§](#examples-2)Examples\n\n```\nuse std::collections::BTreeSet;\nuse std::alloc::Global;\n\nlet mut set: BTreeSet<i32> = BTreeSet::new_in(Global);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Ballow(unused_mut)%5D%0A%23!%5Bfeature(allocator_api)%5D%0A%23!%5Bfeature(btreemap_alloc)%5D%0Afn+main()+%7B%0A++++use+std::collections::BTreeSet;%0A++++use+std::alloc::Global;%0A++++%0A++++let+mut+set:+BTreeSet%3Ci32%3E+=+BTreeSet::new_in(Global);%0A%7D&version=nightly&edition=2021)\n\n1.17.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#393-397)\n\nConstructs a double-ended iterator over a sub-range of elements in the set. The simplest way is to use the range syntax `min..max`, thus `range(min..max)` will yield elements from min (inclusive) to max (exclusive). The range may also be entered as `(Bound<T>, Bound<T>)`, so for example `range((Excluded(4), Included(10)))` will yield a left-exclusive, right-inclusive range from 4 to 10.\n\n##### [Â§](#panics)Panics\n\nPanics if range `start > end`. Panics if range `start == end` and both bounds are `Excluded`.\n\n##### [Â§](#examples-3)Examples\n\n```\nuse std::collections::BTreeSet;\nuse std::ops::Bound::Included;\n\nlet mut set = BTreeSet::new();\nset.insert(3);\nset.insert(5);\nset.insert(8);\nfor &elem in set.range((Included(&4), Included(&8))) {\n    println!(\"{elem}\");\n}\nassert_eq!(Some(&5), set.range(4..).next());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::BTreeSet;%0A++++use+std::ops::Bound::Included;%0A++++%0A++++let+mut+set+=+BTreeSet::new();%0A++++set.insert(3);%0A++++set.insert(5);%0A++++set.insert(8);%0A++++for+%26elem+in+set.range((Included(%264),+Included(%268)))+%7B%0A++++++++println!(%22%7Belem%7D%22);%0A++++%7D%0A++++assert_eq!(Some(%265),+set.range(4..).next());%0A%7D&edition=2021)\n\n1.0.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#423-425)\n\nVisits the elements representing the difference, i.e., the elements that are in `self` but not in `other`, in ascending order.\n\n##### [Â§](#examples-4)Examples\n\n```\nuse std::collections::BTreeSet;\n\nlet mut a = BTreeSet::new();\na.insert(1);\na.insert(2);\n\nlet mut b = BTreeSet::new();\nb.insert(2);\nb.insert(3);\n\nlet diff: Vec<_> = a.difference(&b).cloned().collect();\nassert_eq!(diff, [1]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::BTreeSet;%0A++++%0A++++let+mut+a+=+BTreeSet::new();%0A++++a.insert(1);%0A++++a.insert(2);%0A++++%0A++++let+mut+b+=+BTreeSet::new();%0A++++b.insert(2);%0A++++b.insert(3);%0A++++%0A++++let+diff:+Vec%3C_%3E+=+a.difference(%26b).cloned().collect();%0A++++assert_eq!(diff,+%5B1%5D);%0A%7D&edition=2021)\n\n1.0.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#484-489)\n\nVisits the elements representing the symmetric difference, i.e., the elements that are in `self` or in `other` but not in both, in ascending order.\n\n##### [Â§](#examples-5)Examples\n\n```\nuse std::collections::BTreeSet;\n\nlet mut a = BTreeSet::new();\na.insert(1);\na.insert(2);\n\nlet mut b = BTreeSet::new();\nb.insert(2);\nb.insert(3);\n\nlet sym_diff: Vec<_> = a.symmetric_difference(&b).cloned().collect();\nassert_eq!(sym_diff, [1, 3]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::BTreeSet;%0A++++%0A++++let+mut+a+=+BTreeSet::new();%0A++++a.insert(1);%0A++++a.insert(2);%0A++++%0A++++let+mut+b+=+BTreeSet::new();%0A++++b.insert(2);%0A++++b.insert(3);%0A++++%0A++++let+sym_diff:+Vec%3C_%3E+=+a.symmetric_difference(%26b).cloned().collect();%0A++++assert_eq!(sym_diff,+%5B1,+3%5D);%0A%7D&edition=2021)\n\n1.0.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#515-517)\n\nVisits the elements representing the intersection, i.e., the elements that are both in `self` and `other`, in ascending order.\n\n##### [Â§](#examples-6)Examples\n\n```\nuse std::collections::BTreeSet;\n\nlet mut a = BTreeSet::new();\na.insert(1);\na.insert(2);\n\nlet mut b = BTreeSet::new();\nb.insert(2);\nb.insert(3);\n\nlet intersection: Vec<_> = a.intersection(&b).cloned().collect();\nassert_eq!(intersection, [2]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::BTreeSet;%0A++++%0A++++let+mut+a+=+BTreeSet::new();%0A++++a.insert(1);%0A++++a.insert(2);%0A++++%0A++++let+mut+b+=+BTreeSet::new();%0A++++b.insert(2);%0A++++b.insert(3);%0A++++%0A++++let+intersection:+Vec%3C_%3E+=+a.intersection(%26b).cloned().collect();%0A++++assert_eq!(intersection,+%5B2%5D);%0A%7D&edition=2021)\n\n1.0.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#566-568)\n\nVisits the elements representing the union, i.e., all the elements in `self` or `other`, without duplicates, in ascending order.\n\n##### [Â§](#examples-7)Examples\n\n```\nuse std::collections::BTreeSet;\n\nlet mut a = BTreeSet::new();\na.insert(1);\n\nlet mut b = BTreeSet::new();\nb.insert(2);\n\nlet union: Vec<_> = a.union(&b).cloned().collect();\nassert_eq!(union, [1, 2]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::BTreeSet;%0A++++%0A++++let+mut+a+=+BTreeSet::new();%0A++++a.insert(1);%0A++++%0A++++let+mut+b+=+BTreeSet::new();%0A++++b.insert(2);%0A++++%0A++++let+union:+Vec%3C_%3E+=+a.union(%26b).cloned().collect();%0A++++assert_eq!(union,+%5B1,+2%5D);%0A%7D&edition=2021)\n\n1.0.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#586-588)\n\nClears the set, removing all elements.\n\n##### [Â§](#examples-8)Examples\n\n```\nuse std::collections::BTreeSet;\n\nlet mut v = BTreeSet::new();\nv.insert(1);\nv.clear();\nassert!(v.is_empty());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::BTreeSet;%0A++++%0A++++let+mut+v+=+BTreeSet::new();%0A++++v.insert(1);%0A++++v.clear();%0A++++assert!(v.is_empty());%0A%7D&edition=2021)\n\n1.0.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#609-612)\n\nReturns `true` if the set contains an element equal to the value.\n\nThe value may be any borrowed form of the setâ€™s element type, but the ordering on the borrowed form _must_ match the ordering on the element type.\n\n##### [Â§](#examples-9)Examples\n\n```\nuse std::collections::BTreeSet;\n\nlet set = BTreeSet::from([1, 2, 3]);\nassert_eq!(set.contains(&1), true);\nassert_eq!(set.contains(&4), false);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::BTreeSet;%0A++++%0A++++let+set+=+BTreeSet::from(%5B1,+2,+3%5D);%0A++++assert_eq!(set.contains(%261),+true);%0A++++assert_eq!(set.contains(%264),+false);%0A%7D&edition=2021)\n\n1.9.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#634-637)\n\nReturns a reference to the element in the set, if any, that is equal to the value.\n\nThe value may be any borrowed form of the setâ€™s element type, but the ordering on the borrowed form _must_ match the ordering on the element type.\n\n##### [Â§](#examples-10)Examples\n\n```\nuse std::collections::BTreeSet;\n\nlet set = BTreeSet::from([1, 2, 3]);\nassert_eq!(set.get(&2), Some(&2));\nassert_eq!(set.get(&4), None);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::BTreeSet;%0A++++%0A++++let+set+=+BTreeSet::from(%5B1,+2,+3%5D);%0A++++assert_eq!(set.get(%262),+Some(%262));%0A++++assert_eq!(set.get(%264),+None);%0A%7D&edition=2021)\n\n1.0.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#661-663)\n\nReturns `true` if `self` has no elements in common with `other`. This is equivalent to checking for an empty intersection.\n\n##### [Â§](#examples-11)Examples\n\n```\nuse std::collections::BTreeSet;\n\nlet a = BTreeSet::from([1, 2, 3]);\nlet mut b = BTreeSet::new();\n\nassert_eq!(a.is_disjoint(&b), true);\nb.insert(4);\nassert_eq!(a.is_disjoint(&b), true);\nb.insert(1);\nassert_eq!(a.is_disjoint(&b), false);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::BTreeSet;%0A++++%0A++++let+a+=+BTreeSet::from(%5B1,+2,+3%5D);%0A++++let+mut+b+=+BTreeSet::new();%0A++++%0A++++assert_eq!(a.is_disjoint(%26b),+true);%0A++++b.insert(4);%0A++++assert_eq!(a.is_disjoint(%26b),+true);%0A++++b.insert(1);%0A++++assert_eq!(a.is_disjoint(%26b),+false);%0A%7D&edition=2021)\n\n1.0.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#687-689)\n\nReturns `true` if the set is a subset of another, i.e., `other` contains at least all the elements in `self`.\n\n##### [Â§](#examples-12)Examples\n\n```\nuse std::collections::BTreeSet;\n\nlet sup = BTreeSet::from([1, 2, 3]);\nlet mut set = BTreeSet::new();\n\nassert_eq!(set.is_subset(&sup), true);\nset.insert(2);\nassert_eq!(set.is_subset(&sup), true);\nset.insert(4);\nassert_eq!(set.is_subset(&sup), false);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::BTreeSet;%0A++++%0A++++let+sup+=+BTreeSet::from(%5B1,+2,+3%5D);%0A++++let+mut+set+=+BTreeSet::new();%0A++++%0A++++assert_eq!(set.is_subset(%26sup),+true);%0A++++set.insert(2);%0A++++assert_eq!(set.is_subset(%26sup),+true);%0A++++set.insert(4);%0A++++assert_eq!(set.is_subset(%26sup),+false);%0A%7D&edition=2021)\n\n1.0.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#767-769)\n\nReturns `true` if the set is a superset of another, i.e., `self` contains at least all the elements in `other`.\n\n##### [Â§](#examples-13)Examples\n\n```\nuse std::collections::BTreeSet;\n\nlet sub = BTreeSet::from([1, 2]);\nlet mut set = BTreeSet::new();\n\nassert_eq!(set.is_superset(&sub), false);\n\nset.insert(0);\nset.insert(1);\nassert_eq!(set.is_superset(&sub), false);\n\nset.insert(2);\nassert_eq!(set.is_superset(&sub), true);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::BTreeSet;%0A++++%0A++++let+sub+=+BTreeSet::from(%5B1,+2%5D);%0A++++let+mut+set+=+BTreeSet::new();%0A++++%0A++++assert_eq!(set.is_superset(%26sub),+false);%0A++++%0A++++set.insert(0);%0A++++set.insert(1);%0A++++assert_eq!(set.is_superset(%26sub),+false);%0A++++%0A++++set.insert(2);%0A++++assert_eq!(set.is_superset(%26sub),+true);%0A%7D&edition=2021)\n\n1.66.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#794-796)\n\nReturns a reference to the first element in the set, if any. This element is always the minimum of all elements in the set.\n\n##### [Â§](#examples-14)Examples\n\nBasic usage:\n\n```\nuse std::collections::BTreeSet;\n\nlet mut set = BTreeSet::new();\nassert_eq!(set.first(), None);\nset.insert(1);\nassert_eq!(set.first(), Some(&1));\nset.insert(2);\nassert_eq!(set.first(), Some(&1));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::BTreeSet;%0A++++%0A++++let+mut+set+=+BTreeSet::new();%0A++++assert_eq!(set.first(),+None);%0A++++set.insert(1);%0A++++assert_eq!(set.first(),+Some(%261));%0A++++set.insert(2);%0A++++assert_eq!(set.first(),+Some(%261));%0A%7D&edition=2021)\n\n1.66.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#821-823)\n\nReturns a reference to the last element in the set, if any. This element is always the maximum of all elements in the set.\n\n##### [Â§](#examples-15)Examples\n\nBasic usage:\n\n```\nuse std::collections::BTreeSet;\n\nlet mut set = BTreeSet::new();\nassert_eq!(set.last(), None);\nset.insert(1);\nassert_eq!(set.last(), Some(&1));\nset.insert(2);\nassert_eq!(set.last(), Some(&2));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::BTreeSet;%0A++++%0A++++let+mut+set+=+BTreeSet::new();%0A++++assert_eq!(set.last(),+None);%0A++++set.insert(1);%0A++++assert_eq!(set.last(),+Some(%261));%0A++++set.insert(2);%0A++++assert_eq!(set.last(),+Some(%262));%0A%7D&edition=2021)\n\n1.66.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#845-847)\n\nRemoves the first element from the set and returns it, if any. The first element is always the minimum element in the set.\n\n##### [Â§](#examples-16)Examples\n\n```\nuse std::collections::BTreeSet;\n\nlet mut set = BTreeSet::new();\n\nset.insert(1);\nwhile let Some(n) = set.pop_first() {\n    assert_eq!(n, 1);\n}\nassert!(set.is_empty());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::BTreeSet;%0A++++%0A++++let+mut+set+=+BTreeSet::new();%0A++++%0A++++set.insert(1);%0A++++while+let+Some(n)+=+set.pop_first()+%7B%0A++++++++assert_eq!(n,+1);%0A++++%7D%0A++++assert!(set.is_empty());%0A%7D&edition=2021)\n\n1.66.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#869-871)\n\nRemoves the last element from the set and returns it, if any. The last element is always the maximum element in the set.\n\n##### [Â§](#examples-17)Examples\n\n```\nuse std::collections::BTreeSet;\n\nlet mut set = BTreeSet::new();\n\nset.insert(1);\nwhile let Some(n) = set.pop_last() {\n    assert_eq!(n, 1);\n}\nassert!(set.is_empty());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::BTreeSet;%0A++++%0A++++let+mut+set+=+BTreeSet::new();%0A++++%0A++++set.insert(1);%0A++++while+let+Some(n)+=+set.pop_last()+%7B%0A++++++++assert_eq!(n,+1);%0A++++%7D%0A++++assert!(set.is_empty());%0A%7D&edition=2021)\n\n1.0.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#902-904)\n\nAdds a value to the set.\n\nReturns whether the value was newly inserted. That is:\n\n-   If the set did not previously contain an equal value, `true` is returned.\n-   If the set already contained an equal value, `false` is returned, and the entry is not updated.\n\nSee the [module-level documentation](about:blank/index.html#insert-and-complex-keys) for more.\n\n##### [Â§](#examples-18)Examples\n\n```\nuse std::collections::BTreeSet;\n\nlet mut set = BTreeSet::new();\n\nassert_eq!(set.insert(2), true);\nassert_eq!(set.insert(2), false);\nassert_eq!(set.len(), 1);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::BTreeSet;%0A++++%0A++++let+mut+set+=+BTreeSet::new();%0A++++%0A++++assert_eq!(set.insert(2),+true);%0A++++assert_eq!(set.insert(2),+false);%0A++++assert_eq!(set.len(),+1);%0A%7D&edition=2021)\n\n1.9.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#926-928)\n\nAdds a value to the set, replacing the existing element, if any, that is equal to the value. Returns the replaced element.\n\n##### [Â§](#examples-19)Examples\n\n```\nuse std::collections::BTreeSet;\n\nlet mut set = BTreeSet::new();\nset.insert(Vec::<i32>::new());\n\nassert_eq!(set.get(&[][..]).unwrap().capacity(), 0);\nset.replace(Vec::with_capacity(10));\nassert_eq!(set.get(&[][..]).unwrap().capacity(), 10);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::BTreeSet;%0A++++%0A++++let+mut+set+=+BTreeSet::new();%0A++++set.insert(Vec::%3Ci32%3E::new());%0A++++%0A++++assert_eq!(set.get(%26%5B%5D%5B..%5D).unwrap().capacity(),+0);%0A++++set.replace(Vec::with_capacity(10));%0A++++assert_eq!(set.get(%26%5B%5D%5B..%5D).unwrap().capacity(),+10);%0A%7D&edition=2021)\n\n1.0.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#952-955)\n\nIf the set contains an element equal to the value, removes it from the set and drops it. Returns whether such an element was present.\n\nThe value may be any borrowed form of the setâ€™s element type, but the ordering on the borrowed form _must_ match the ordering on the element type.\n\n##### [Â§](#examples-20)Examples\n\n```\nuse std::collections::BTreeSet;\n\nlet mut set = BTreeSet::new();\n\nset.insert(2);\nassert_eq!(set.remove(&2), true);\nassert_eq!(set.remove(&2), false);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::BTreeSet;%0A++++%0A++++let+mut+set+=+BTreeSet::new();%0A++++%0A++++set.insert(2);%0A++++assert_eq!(set.remove(%262),+true);%0A++++assert_eq!(set.remove(%262),+false);%0A%7D&edition=2021)\n\n1.9.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#977-980)\n\nRemoves and returns the element in the set, if any, that is equal to the value.\n\nThe value may be any borrowed form of the setâ€™s element type, but the ordering on the borrowed form _must_ match the ordering on the element type.\n\n##### [Â§](#examples-21)Examples\n\n```\nuse std::collections::BTreeSet;\n\nlet mut set = BTreeSet::from([1, 2, 3]);\nassert_eq!(set.take(&2), Some(2));\nassert_eq!(set.take(&2), None);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::BTreeSet;%0A++++%0A++++let+mut+set+=+BTreeSet::from(%5B1,+2,+3%5D);%0A++++assert_eq!(set.take(%262),+Some(2));%0A++++assert_eq!(set.take(%262),+None);%0A%7D&edition=2021)\n\n1.53.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#1001-1004)\n\nRetains only the elements specified by the predicate.\n\nIn other words, remove all elements `e` for which `f(&e)` returns `false`. The elements are visited in ascending order.\n\n##### [Â§](#examples-22)Examples\n\n```\nuse std::collections::BTreeSet;\n\nlet mut set = BTreeSet::from([1, 2, 3, 4, 5, 6]);\n// Keep only the even numbers.\nset.retain(|&k| k % 2 == 0);\nassert!(set.iter().eq([2, 4, 6].iter()));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::BTreeSet;%0A++++%0A++++let+mut+set+=+BTreeSet::from(%5B1,+2,+3,+4,+5,+6%5D);%0A++++//+Keep+only+the+even+numbers.%0A++++set.retain(%7C%26k%7C+k+%25+2+==+0);%0A++++assert!(set.iter().eq(%5B2,+4,+6%5D.iter()));%0A%7D&edition=2021)\n\n1.11.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#1038-1041)\n\nMoves all elements from `other` into `self`, leaving `other` empty.\n\n##### [Â§](#examples-23)Examples\n\n```\nuse std::collections::BTreeSet;\n\nlet mut a = BTreeSet::new();\na.insert(1);\na.insert(2);\na.insert(3);\n\nlet mut b = BTreeSet::new();\nb.insert(3);\nb.insert(4);\nb.insert(5);\n\na.append(&mut b);\n\nassert_eq!(a.len(), 5);\nassert_eq!(b.len(), 0);\n\nassert!(a.contains(&1));\nassert!(a.contains(&2));\nassert!(a.contains(&3));\nassert!(a.contains(&4));\nassert!(a.contains(&5));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::BTreeSet;%0A++++%0A++++let+mut+a+=+BTreeSet::new();%0A++++a.insert(1);%0A++++a.insert(2);%0A++++a.insert(3);%0A++++%0A++++let+mut+b+=+BTreeSet::new();%0A++++b.insert(3);%0A++++b.insert(4);%0A++++b.insert(5);%0A++++%0A++++a.append(%26mut+b);%0A++++%0A++++assert_eq!(a.len(),+5);%0A++++assert_eq!(b.len(),+0);%0A++++%0A++++assert!(a.contains(%261));%0A++++assert!(a.contains(%262));%0A++++assert!(a.contains(%263));%0A++++assert!(a.contains(%264));%0A++++assert!(a.contains(%265));%0A%7D&edition=2021)\n\n1.11.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#1076-1079)\n\nSplits the collection into two at the value. Returns a new collection with all elements greater than or equal to the value.\n\n##### [Â§](#examples-24)Examples\n\nBasic usage:\n\n```\nuse std::collections::BTreeSet;\n\nlet mut a = BTreeSet::new();\na.insert(1);\na.insert(2);\na.insert(3);\na.insert(17);\na.insert(41);\n\nlet b = a.split_off(&3);\n\nassert_eq!(a.len(), 2);\nassert_eq!(b.len(), 3);\n\nassert!(a.contains(&1));\nassert!(a.contains(&2));\n\nassert!(b.contains(&3));\nassert!(b.contains(&17));\nassert!(b.contains(&41));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::BTreeSet;%0A++++%0A++++let+mut+a+=+BTreeSet::new();%0A++++a.insert(1);%0A++++a.insert(2);%0A++++a.insert(3);%0A++++a.insert(17);%0A++++a.insert(41);%0A++++%0A++++let+b+=+a.split_off(%263);%0A++++%0A++++assert_eq!(a.len(),+2);%0A++++assert_eq!(b.len(),+3);%0A++++%0A++++assert!(a.contains(%261));%0A++++assert!(a.contains(%262));%0A++++%0A++++assert!(b.contains(%263));%0A++++assert!(b.contains(%2617));%0A++++assert!(b.contains(%2641));%0A%7D&edition=2021)\n\nðŸ”¬This is a nightly-only experimental API. (`btree_extract_if`Â [#70530](https://github.com/rust-lang/rust/issues/70530))\n\nCreates an iterator that visits all elements in ascending order and uses a closure to determine if an element should be removed.\n\nIf the closure returns `true`, the element is removed from the set and yielded. If the closure returns `false`, or panics, the element remains in the set and will not be yielded.\n\nIf the returned `ExtractIf` is not exhausted, e.g. because it is dropped without iterating or the iteration short-circuits, then the remaining elements will be retained. Use [`retain`](about:blank/struct.BTreeSet.html#method.retain \"method std::collections::BTreeSet::retain\") with a negated predicate if you do not need the returned iterator.\n\n##### [Â§](#examples-25)Examples\n\nSplitting a set into even and odd values, reusing the original set:\n\n```\n#![feature(btree_extract_if)]\nuse std::collections::BTreeSet;\n\nlet mut set: BTreeSet<i32> = (0..8).collect();\nlet evens: BTreeSet<_> = set.extract_if(|v| v % 2 == 0).collect();\nlet odds = set;\nassert_eq!(evens.into_iter().collect::<Vec<_>>(), vec![0, 2, 4, 6]);\nassert_eq!(odds.into_iter().collect::<Vec<_>>(), vec![1, 3, 5, 7]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(btree_extract_if)%5D%0Afn+main()+%7B%0A++++use+std::collections::BTreeSet;%0A++++%0A++++let+mut+set:+BTreeSet%3Ci32%3E+=+(0..8).collect();%0A++++let+evens:+BTreeSet%3C_%3E+=+set.extract_if(%7Cv%7C+v+%25+2+==+0).collect();%0A++++let+odds+=+set;%0A++++assert_eq!(evens.into_iter().collect::%3CVec%3C_%3E%3E(),+vec!%5B0,+2,+4,+6%5D);%0A++++assert_eq!(odds.into_iter().collect::%3CVec%3C_%3E%3E(),+vec!%5B1,+3,+5,+7%5D);%0A%7D&version=nightly&edition=2021)\n\n1.0.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#1136)\n\nGets an iterator that visits the elements in the `BTreeSet` in ascending order.\n\n##### [Â§](#examples-26)Examples\n\n```\nuse std::collections::BTreeSet;\n\nlet set = BTreeSet::from([3, 1, 2]);\nlet mut set_iter = set.iter();\nassert_eq!(set_iter.next(), Some(&1));\nassert_eq!(set_iter.next(), Some(&2));\nassert_eq!(set_iter.next(), Some(&3));\nassert_eq!(set_iter.next(), None);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::BTreeSet;%0A++++%0A++++let+set+=+BTreeSet::from(%5B3,+1,+2%5D);%0A++++let+mut+set_iter+=+set.iter();%0A++++assert_eq!(set_iter.next(),+Some(%261));%0A++++assert_eq!(set_iter.next(),+Some(%262));%0A++++assert_eq!(set_iter.next(),+Some(%263));%0A++++assert_eq!(set_iter.next(),+None);%0A%7D&edition=2021)\n\n1.0.0 (const: [unstable](https://github.com/rust-lang/rust/issues/71835 \"Tracking issue for const_btree_len\")) Â· [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#1160)\n\nReturns the number of elements in the set.\n\n##### [Â§](#examples-27)Examples\n\n```\nuse std::collections::BTreeSet;\n\nlet mut v = BTreeSet::new();\nassert_eq!(v.len(), 0);\nv.insert(1);\nassert_eq!(v.len(), 1);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::BTreeSet;%0A++++%0A++++let+mut+v+=+BTreeSet::new();%0A++++assert_eq!(v.len(),+0);%0A++++v.insert(1);%0A++++assert_eq!(v.len(),+1);%0A%7D&edition=2021)\n\n1.0.0 (const: [unstable](https://github.com/rust-lang/rust/issues/71835 \"Tracking issue for const_btree_len\")) Â· [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#1183)\n\nReturns `true` if the set contains no elements.\n\n##### [Â§](#examples-28)Examples\n\n```\nuse std::collections::BTreeSet;\n\nlet mut v = BTreeSet::new();\nassert!(v.is_empty());\nv.insert(1);\nassert!(!v.is_empty());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::BTreeSet;%0A++++%0A++++let+mut+v+=+BTreeSet::new();%0A++++assert!(v.is_empty());%0A++++v.insert(1);%0A++++assert!(!v.is_empty());%0A%7D&edition=2021)\n\n1.0.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#1403)[Â§](#impl-BitAnd%3C%26BTreeSet%3CT,+A%3E%3E-for-%26BTreeSet%3CT,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#1419)[Â§](#method.bitand)\n\nReturns the intersection of `self` and `rhs` as a new `BTreeSet<T>`.\n\n##### [Â§](#examples-31)Examples\n\n```\nuse std::collections::BTreeSet;\n\nlet a = BTreeSet::from([1, 2, 3]);\nlet b = BTreeSet::from([2, 3, 4]);\n\nlet result = &a & &b;\nassert_eq!(result, BTreeSet::from([2, 3]));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::BTreeSet;%0A++++%0A++++let+a+=+BTreeSet::from(%5B1,+2,+3%5D);%0A++++let+b+=+BTreeSet::from(%5B2,+3,+4%5D);%0A++++%0A++++let+result+=+%26a+%26+%26b;%0A++++assert_eq!(result,+BTreeSet::from(%5B2,+3%5D));%0A%7D&edition=2021)\n\n[Â§](#associatedtype.Output-2)\n\nThe resulting type after applying the `&` operator.\n\n1.0.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#1428)[Â§](#impl-BitOr%3C%26BTreeSet%3CT,+A%3E%3E-for-%26BTreeSet%3CT,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#1444)[Â§](#method.bitor)\n\nReturns the union of `self` and `rhs` as a new `BTreeSet<T>`.\n\n##### [Â§](#examples-29)Examples\n\n```\nuse std::collections::BTreeSet;\n\nlet a = BTreeSet::from([1, 2, 3]);\nlet b = BTreeSet::from([3, 4, 5]);\n\nlet result = &a | &b;\nassert_eq!(result, BTreeSet::from([1, 2, 3, 4, 5]));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::BTreeSet;%0A++++%0A++++let+a+=+BTreeSet::from(%5B1,+2,+3%5D);%0A++++let+b+=+BTreeSet::from(%5B3,+4,+5%5D);%0A++++%0A++++let+result+=+%26a+%7C+%26b;%0A++++assert_eq!(result,+BTreeSet::from(%5B1,+2,+3,+4,+5%5D));%0A%7D&edition=2021)\n\n[Â§](#associatedtype.Output)\n\nThe resulting type after applying the `|` operator.\n\n1.0.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#1378)[Â§](#impl-BitXor%3C%26BTreeSet%3CT,+A%3E%3E-for-%26BTreeSet%3CT,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#1394)[Â§](#method.bitxor)\n\nReturns the symmetric difference of `self` and `rhs` as a new `BTreeSet<T>`.\n\n##### [Â§](#examples-30)Examples\n\n```\nuse std::collections::BTreeSet;\n\nlet a = BTreeSet::from([1, 2, 3]);\nlet b = BTreeSet::from([2, 3, 4]);\n\nlet result = &a ^ &b;\nassert_eq!(result, BTreeSet::from([1, 4]));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::BTreeSet;%0A++++%0A++++let+a+=+BTreeSet::from(%5B1,+2,+3%5D);%0A++++let+b+=+BTreeSet::from(%5B2,+3,+4%5D);%0A++++%0A++++let+result+=+%26a+%5E+%26b;%0A++++assert_eq!(result,+BTreeSet::from(%5B1,+4%5D));%0A%7D&edition=2021)\n\n[Â§](#associatedtype.Output-1)\n\nThe resulting type after applying the `^` operator.\n\n1.0.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#114)[Â§](#impl-Clone-for-BTreeSet%3CT,+A%3E)\n\n1.0.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#1453)[Â§](#impl-Debug-for-BTreeSet%3CT,+A%3E)\n\n1.0.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#1345)[Â§](#impl-Default-for-BTreeSet%3CT%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#1347)[Â§](#method.default)\n\nCreates an empty `BTreeSet`.\n\n1.2.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#1333)[Â§](#impl-Extend%3C%26T%3E-for-BTreeSet%3CT,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#1334)[Â§](#method.extend)\n\nExtends a collection with the contents of an iterator. [Read more](about:blank/iter/trait.Extend.html#tymethod.extend)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#1339)[Â§](#method.extend_one)\n\nðŸ”¬This is a nightly-only experimental API. (`extend_one`Â [#72631](https://github.com/rust-lang/rust/issues/72631))\n\nExtends a collection with exactly one element.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/collect.rs.html#461)[Â§](#method.extend_reserve)\n\nðŸ”¬This is a nightly-only experimental API. (`extend_one`Â [#72631](https://github.com/rust-lang/rust/issues/72631))\n\nReserves capacity in a collection for the given number of additional elements. [Read more](about:blank/iter/trait.Extend.html#method.extend_reserve)\n\n1.0.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#1318)[Â§](#impl-Extend%3CT%3E-for-BTreeSet%3CT,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#1320)[Â§](#method.extend-1)\n\nExtends a collection with the contents of an iterator. [Read more](about:blank/iter/trait.Extend.html#tymethod.extend)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#1327)[Â§](#method.extend_one-1)\n\nðŸ”¬This is a nightly-only experimental API. (`extend_one`Â [#72631](https://github.com/rust-lang/rust/issues/72631))\n\nExtends a collection with exactly one element.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/collect.rs.html#461)[Â§](#method.extend_reserve-1)\n\nðŸ”¬This is a nightly-only experimental API. (`extend_one`Â [#72631](https://github.com/rust-lang/rust/issues/72631))\n\nReserves capacity in a collection for the given number of additional elements. [Read more](about:blank/iter/trait.Extend.html#method.extend_reserve)\n\n1.56.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#1212)[Â§](#impl-From%3C%5BT;+N%5D%3E-for-BTreeSet%3CT%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#1222)[Â§](#method.from)\n\nConverts a `[T; N]` into a `BTreeSet<T>`.\n\n```\nuse std::collections::BTreeSet;\n\nlet set1 = BTreeSet::from([1, 2, 3, 4]);\nlet set2: BTreeSet<_> = [1, 2, 3, 4].into();\nassert_eq!(set1, set2);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::BTreeSet;%0A++++%0A++++let+set1+=+BTreeSet::from(%5B1,+2,+3,+4%5D);%0A++++let+set2:+BTreeSet%3C_%3E+=+%5B1,+2,+3,+4%5D.into();%0A++++assert_eq!(set1,+set2);%0A%7D&edition=2021)\n\n1.0.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#1189)[Â§](#impl-FromIterator%3CT%3E-for-BTreeSet%3CT%3E)\n\n1.0.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#83)[Â§](#impl-Hash-for-BTreeSet%3CT,+A%3E)\n\n1.0.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#1258)[Â§](#impl-IntoIterator-for-%26BTreeSet%3CT,+A%3E)\n\n[Â§](#associatedtype.Item-1)\n\nThe type of the elements being iterated over.\n\n[Â§](#associatedtype.IntoIter-1)\n\nWhich kind of iterator are we turning this into?\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#1262)[Â§](#method.into_iter-1)\n\nCreates an iterator from a value. [Read more](about:blank/iter/trait.IntoIterator.html#tymethod.into_iter)\n\n1.0.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#1236)[Â§](#impl-IntoIterator-for-BTreeSet%3CT,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#1252)[Â§](#method.into_iter)\n\nGets an iterator for moving out the `BTreeSet`â€™s contents in ascending order.\n\n##### [Â§](#examples-33)Examples\n\n```\nuse std::collections::BTreeSet;\n\nlet set = BTreeSet::from([1, 2, 3, 4]);\n\nlet v: Vec<_> = set.into_iter().collect();\nassert_eq!(v, [1, 2, 3, 4]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::BTreeSet;%0A++++%0A++++let+set+=+BTreeSet::from(%5B1,+2,+3,+4%5D);%0A++++%0A++++let+v:+Vec%3C_%3E+=+set.into_iter().collect();%0A++++assert_eq!(v,+%5B1,+2,+3,+4%5D);%0A%7D&edition=2021)\n\n[Â§](#associatedtype.Item)\n\nThe type of the elements being iterated over.\n\n[Â§](#associatedtype.IntoIter)\n\nWhich kind of iterator are we turning this into?\n\n1.0.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#107)[Â§](#impl-Ord-for-BTreeSet%3CT,+A%3E)\n\n1.0.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#90)[Â§](#impl-PartialEq-for-BTreeSet%3CT,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#91)[Â§](#method.eq)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[Â§](#method.ne)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.0.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#100)[Â§](#impl-PartialOrd-for-BTreeSet%3CT,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#101)[Â§](#method.partial_cmp)\n\nThis method returns an ordering between `self` and `other` values if one exists. [Read more](about:blank/cmp/trait.PartialOrd.html#tymethod.partial_cmp)\n\n1.0.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180)[Â§](#method.lt)\n\nThis method tests less than (for `self` and `other`) and is used by the `<` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.lt)\n\n1.0.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198)[Â§](#method.le)\n\nThis method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.le)\n\n1.0.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215)[Â§](#method.gt)\n\nThis method tests greater than (for `self` and `other`) and is used by the `>` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.gt)\n\n1.0.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233)[Â§](#method.ge)\n\nThis method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.ge)\n\n1.0.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#1353)[Â§](#impl-Sub%3C%26BTreeSet%3CT,+A%3E%3E-for-%26BTreeSet%3CT,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#1369)[Â§](#method.sub)\n\nReturns the difference of `self` and `rhs` as a new `BTreeSet<T>`.\n\n##### [Â§](#examples-32)Examples\n\n```\nuse std::collections::BTreeSet;\n\nlet a = BTreeSet::from([1, 2, 3]);\nlet b = BTreeSet::from([3, 4, 5]);\n\nlet result = &a - &b;\nassert_eq!(result, BTreeSet::from([1, 2]));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::BTreeSet;%0A++++%0A++++let+a+=+BTreeSet::from(%5B1,+2,+3%5D);%0A++++let+b+=+BTreeSet::from(%5B3,+4,+5%5D);%0A++++%0A++++let+result+=+%26a+-+%26b;%0A++++assert_eq!(result,+BTreeSet::from(%5B1,+2%5D));%0A%7D&edition=2021)\n\n[Â§](#associatedtype.Output-3)\n\nThe resulting type after applying the `-` operator.\n\n1.0.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#97)[Â§](#impl-Eq-for-BTreeSet%3CT,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140)[Â§](#impl-Any-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208)[Â§](#impl-Borrow%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216)[Â§](#impl-BorrowMut%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765)[Â§](#impl-From%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768)[Â§](#method.from-1)\n\nReturns the argument unchanged.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750)[Â§](#impl-Into%3CU%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758)[Â§](#method.into)\n\nCalls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of `[From](../convert/trait.From.html \"trait std::convert::From\")<T> for U` chooses to do.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85)[Â§](#impl-ToOwned-for-T)\n\n[Â§](#associatedtype.Owned)\n\nThe resulting type after obtaining ownership.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88)[Â§](#method.to_owned)\n\nCreates owned data from borrowed data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#tymethod.to_owned)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92)[Â§](#method.clone_into)\n\nUses borrowed data to replace owned data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#method.clone_into)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807)[Â§](#impl-TryFrom%3CU%3E-for-T)\n\n[Â§](#associatedtype.Error-1)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812)[Â§](#method.try_from)\n\nPerforms the conversion.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792)[Â§](#impl-TryInto%3CU%3E-for-T)\n\n[Â§](#associatedtype.Error)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797)[Â§](#method.try_into)\n\nPerforms the conversion.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"An ordered set based on a B-Tree.\"><title>BTreeSet in std::collections - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc struct\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">BTreeSet</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">BTreeSet</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#implementations\">Methods</a></h3><ul class=\"block method\"><li><a href=\"#method.append\">append</a></li><li><a href=\"#method.clear\">clear</a></li><li><a href=\"#method.contains\">contains</a></li><li><a href=\"#method.difference\">difference</a></li><li><a href=\"#method.extract_if\">extract_if</a></li><li><a href=\"#method.first\">first</a></li><li><a href=\"#method.get\">get</a></li><li><a href=\"#method.insert\">insert</a></li><li><a href=\"#method.intersection\">intersection</a></li><li><a href=\"#method.is_disjoint\">is_disjoint</a></li><li><a href=\"#method.is_empty\">is_empty</a></li><li><a href=\"#method.is_subset\">is_subset</a></li><li><a href=\"#method.is_superset\">is_superset</a></li><li><a href=\"#method.iter\">iter</a></li><li><a href=\"#method.last\">last</a></li><li><a href=\"#method.len\">len</a></li><li><a href=\"#method.new\">new</a></li><li><a href=\"#method.new_in\">new_in</a></li><li><a href=\"#method.pop_first\">pop_first</a></li><li><a href=\"#method.pop_last\">pop_last</a></li><li><a href=\"#method.range\">range</a></li><li><a href=\"#method.remove\">remove</a></li><li><a href=\"#method.replace\">replace</a></li><li><a href=\"#method.retain\">retain</a></li><li><a href=\"#method.split_off\">split_off</a></li><li><a href=\"#method.symmetric_difference\">symmetric_difference</a></li><li><a href=\"#method.take\">take</a></li><li><a href=\"#method.union\">union</a></li></ul><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-BitAnd%3C%26BTreeSet%3CT,+A%3E%3E-for-%26BTreeSet%3CT,+A%3E\">BitAnd&lt;&amp;BTreeSet&lt;T, A&gt;&gt;</a></li><li><a href=\"#impl-BitOr%3C%26BTreeSet%3CT,+A%3E%3E-for-%26BTreeSet%3CT,+A%3E\">BitOr&lt;&amp;BTreeSet&lt;T, A&gt;&gt;</a></li><li><a href=\"#impl-BitXor%3C%26BTreeSet%3CT,+A%3E%3E-for-%26BTreeSet%3CT,+A%3E\">BitXor&lt;&amp;BTreeSet&lt;T, A&gt;&gt;</a></li><li><a href=\"#impl-Clone-for-BTreeSet%3CT,+A%3E\">Clone</a></li><li><a href=\"#impl-Debug-for-BTreeSet%3CT,+A%3E\">Debug</a></li><li><a href=\"#impl-Default-for-BTreeSet%3CT%3E\">Default</a></li><li><a href=\"#impl-Eq-for-BTreeSet%3CT,+A%3E\">Eq</a></li><li><a href=\"#impl-Extend%3C%26T%3E-for-BTreeSet%3CT,+A%3E\">Extend&lt;&amp;'a T&gt;</a></li><li><a href=\"#impl-Extend%3CT%3E-for-BTreeSet%3CT,+A%3E\">Extend&lt;T&gt;</a></li><li><a href=\"#impl-From%3C%5BT;+N%5D%3E-for-BTreeSet%3CT%3E\">From&lt;[T; N]&gt;</a></li><li><a href=\"#impl-FromIterator%3CT%3E-for-BTreeSet%3CT%3E\">FromIterator&lt;T&gt;</a></li><li><a href=\"#impl-Hash-for-BTreeSet%3CT,+A%3E\">Hash</a></li><li><a href=\"#impl-IntoIterator-for-%26BTreeSet%3CT,+A%3E\">IntoIterator</a></li><li><a href=\"#impl-IntoIterator-for-BTreeSet%3CT,+A%3E\">IntoIterator</a></li><li><a href=\"#impl-Ord-for-BTreeSet%3CT,+A%3E\">Ord</a></li><li><a href=\"#impl-PartialEq-for-BTreeSet%3CT,+A%3E\">PartialEq</a></li><li><a href=\"#impl-PartialOrd-for-BTreeSet%3CT,+A%3E\">PartialOrd</a></li><li><a href=\"#impl-Sub%3C%26BTreeSet%3CT,+A%3E%3E-for-%26BTreeSet%3CT,+A%3E\">Sub&lt;&amp;BTreeSet&lt;T, A&gt;&gt;</a></li></ul><h3><a href=\"#synthetic-implementations\">Auto Trait Implementations</a></h3><ul class=\"block synthetic-implementation\"><li><a href=\"#impl-Freeze-for-BTreeSet%3CT,+A%3E\">Freeze</a></li><li><a href=\"#impl-RefUnwindSafe-for-BTreeSet%3CT,+A%3E\">RefUnwindSafe</a></li><li><a href=\"#impl-Send-for-BTreeSet%3CT,+A%3E\">Send</a></li><li><a href=\"#impl-Sync-for-BTreeSet%3CT,+A%3E\">Sync</a></li><li><a href=\"#impl-Unpin-for-BTreeSet%3CT,+A%3E\">Unpin</a></li><li><a href=\"#impl-UnwindSafe-for-BTreeSet%3CT,+A%3E\">UnwindSafe</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-Any-for-T\">Any</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-T\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-T\">BorrowMut&lt;T&gt;</a></li><li><a href=\"#impl-From%3CT%3E-for-T\">From&lt;T&gt;</a></li><li><a href=\"#impl-Into%3CU%3E-for-T\">Into&lt;U&gt;</a></li><li><a href=\"#impl-ToOwned-for-T\">ToOwned</a></li><li><a href=\"#impl-TryFrom%3CU%3E-for-T\">TryFrom&lt;U&gt;</a></li><li><a href=\"#impl-TryInto%3CU%3E-for-T\">TryInto&lt;U&gt;</a></li></ul></section><h2><a href=\"index.html\">In std::collections</a></h2><h3><a href=\"index.html#modules\">Modules</a></h3><ul class=\"block mod\"><li><a href=\"binary_heap/index.html\">binary_heap</a></li><li><a href=\"btree_map/index.html\">btree_map</a></li><li><a href=\"btree_set/index.html\">btree_set</a></li><li><a href=\"hash_map/index.html\">hash_map</a></li><li><a href=\"hash_set/index.html\">hash_set</a></li><li><a href=\"linked_list/index.html\">linked_list</a></li><li><a href=\"vec_deque/index.html\">vec_deque</a></li></ul><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.BTreeMap.html\">BTreeMap</a></li><li><a href=\"struct.BTreeSet.html\">BTreeSet</a></li><li><a href=\"struct.BinaryHeap.html\">BinaryHeap</a></li><li><a href=\"struct.HashMap.html\">HashMap</a></li><li><a href=\"struct.HashSet.html\">HashSet</a></li><li><a href=\"struct.LinkedList.html\">LinkedList</a></li><li><a href=\"struct.TryReserveError.html\">TryReserveError</a></li><li><a href=\"struct.VecDeque.html\">VecDeque</a></li></ul><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.TryReserveErrorKind.html\">TryReserveErrorKind</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type â€˜Sâ€™ or â€˜/â€™ to search, â€˜?â€™ for more optionsâ€¦\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Struct <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">collections</a>::<wbr><a class=\"struct\" href=\"#\">BTreeSet</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#75-78\">source</a> Â· <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>âˆ’</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub struct BTreeSet&lt;T, A = <a class=\"struct\" href=\"../alloc/struct.Global.html\" title=\"struct std::alloc::Global\">Global</a>&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a> + <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div>{ <span class=\"comment\">/* private fields */</span> }</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>An ordered set based on a B-Tree.</p>\n<p>See <a href=\"struct.BTreeMap.html\" title=\"struct std::collections::BTreeMap\"><code>BTreeMap</code></a>â€™s documentation for a detailed discussion of this collectionâ€™s performance\nbenefits and drawbacks.</p>\n<p>It is a logic error for an item to be modified in such a way that the itemâ€™s ordering relative\nto any other item, as determined by the <a href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\"><code>Ord</code></a> trait, changes while it is in the set. This is\nnormally only possible through <a href=\"../cell/struct.Cell.html\" title=\"struct std::cell::Cell\"><code>Cell</code></a>, <a href=\"../cell/struct.RefCell.html\" title=\"struct std::cell::RefCell\"><code>RefCell</code></a>, global state, I/O, or unsafe code.\nThe behavior resulting from such a logic error is not specified, but will be encapsulated to the\n<code>BTreeSet</code> that observed the logic error and not result in undefined behavior. This could\ninclude panics, incorrect results, aborts, memory leaks, and non-termination.</p>\n<p>Iterators returned by <a href=\"struct.BTreeSet.html#method.iter\" title=\"method std::collections::BTreeSet::iter\"><code>BTreeSet::iter</code></a> and <a href=\"struct.BTreeSet.html#method.into_iter\" title=\"method std::collections::BTreeSet::into_iter\"><code>BTreeSet::into_iter</code></a> produce their items in order, and take worst-case\nlogarithmic and amortized constant time per item returned.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">Â§</a>Examples</h2>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::BTreeSet;\n\n<span class=\"comment\">// Type inference lets us omit an explicit type signature (which\n// would be `BTreeSet&lt;&amp;str&gt;` in this example).\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>books = BTreeSet::new();\n\n<span class=\"comment\">// Add some books.\n</span>books.insert(<span class=\"string\">\"A Dance With Dragons\"</span>);\nbooks.insert(<span class=\"string\">\"To Kill a Mockingbird\"</span>);\nbooks.insert(<span class=\"string\">\"The Odyssey\"</span>);\nbooks.insert(<span class=\"string\">\"The Great Gatsby\"</span>);\n\n<span class=\"comment\">// Check for a specific one.\n</span><span class=\"kw\">if </span>!books.contains(<span class=\"string\">\"The Winds of Winter\"</span>) {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"We have {} books, but The Winds of Winter ain't one.\"</span>,\n             books.len());\n}\n\n<span class=\"comment\">// Remove a book.\n</span>books.remove(<span class=\"string\">\"The Odyssey\"</span>);\n\n<span class=\"comment\">// Iterate over everything.\n</span><span class=\"kw\">for </span>book <span class=\"kw\">in </span><span class=\"kw-2\">&amp;</span>books {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{book}\"</span>);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::BTreeSet;%0A++++%0A++++//+Type+inference+lets+us+omit+an+explicit+type+signature+(which%0A++++//+would+be+%60BTreeSet%3C%26str%3E%60+in+this+example).%0A++++let+mut+books+=+BTreeSet::new();%0A++++%0A++++//+Add+some+books.%0A++++books.insert(%22A+Dance+With+Dragons%22);%0A++++books.insert(%22To+Kill+a+Mockingbird%22);%0A++++books.insert(%22The+Odyssey%22);%0A++++books.insert(%22The+Great+Gatsby%22);%0A++++%0A++++//+Check+for+a+specific+one.%0A++++if+!books.contains(%22The+Winds+of+Winter%22)+%7B%0A++++++++println!(%22We+have+%7B%7D+books,+but+The+Winds+of+Winter+ain't+one.%22,%0A+++++++++++++++++books.len());%0A++++%7D%0A++++%0A++++//+Remove+a+book.%0A++++books.remove(%22The+Odyssey%22);%0A++++%0A++++//+Iterate+over+everything.%0A++++for+book+in+%26books+%7B%0A++++++++println!(%22%7Bbook%7D%22);%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<p>A <code>BTreeSet</code> with a known list of items can be initialized from an array:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::BTreeSet;\n\n<span class=\"kw\">let </span>set = BTreeSet::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::BTreeSet;%0A++++%0A++++let+set+=+BTreeSet::from(%5B1,+2,+3%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><h2 id=\"implementations\" class=\"section-header\">Implementations<a href=\"#implementations\" class=\"anchor\">Â§</a></h2><div id=\"implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BTreeSet%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#325\">source</a><a href=\"#impl-BTreeSet%3CT%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"struct.BTreeSet.html\" title=\"struct std::collections::BTreeSet\">BTreeSet</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.new\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.66.0\">1.0.0 (const: 1.66.0)</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#341\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.new\" class=\"fn\">new</a>() -&gt; <a class=\"struct\" href=\"struct.BTreeSet.html\" title=\"struct std::collections::BTreeSet\">BTreeSet</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Makes a new, empty <code>BTreeSet</code>.</p>\n<p>Does not allocate anything on its own.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::BTreeSet;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set: BTreeSet&lt;i32&gt; = BTreeSet::new();</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Ballow(unused_mut)%5D%0Afn+main()+%7B%0A++++use+std::collections::BTreeSet;%0A++++%0A++++let+mut+set:+BTreeSet%3Ci32%3E+=+BTreeSet::new();%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BTreeSet%3CT,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#346\">source</a><a href=\"#impl-BTreeSet%3CT,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"struct\" href=\"struct.BTreeSet.html\" title=\"struct std::collections::BTreeSet\">BTreeSet</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a> + <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.new_in\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#361\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.new_in\" class=\"fn\">new_in</a>(alloc: A) -&gt; <a class=\"struct\" href=\"struct.BTreeSet.html\" title=\"struct std::collections::BTreeSet\">BTreeSet</a>&lt;T, A&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>btreemap_alloc</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/32838\">#32838</a>)</span></div></span></summary><div class=\"docblock\"><p>Makes a new <code>BTreeSet</code> with a reasonable choice of B.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::BTreeSet;\n<span class=\"kw\">use </span>std::alloc::Global;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set: BTreeSet&lt;i32&gt; = BTreeSet::new_in(Global);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Ballow(unused_mut)%5D%0A%23!%5Bfeature(allocator_api)%5D%0A%23!%5Bfeature(btreemap_alloc)%5D%0Afn+main()+%7B%0A++++use+std::collections::BTreeSet;%0A++++use+std::alloc::Global;%0A++++%0A++++let+mut+set:+BTreeSet%3Ci32%3E+=+BTreeSet::new_in(Global);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.range\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.17.0\">1.17.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#393-397\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.range\" class=\"fn\">range</a>&lt;K, R&gt;(&amp;self, range: R) -&gt; <a class=\"struct\" href=\"btree_set/struct.Range.html\" title=\"struct std::collections::btree_set::Range\">Range</a>&lt;'_, T&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Range<'_, T>\">â“˜</a><div class=\"where\">where\n    K: <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    T: <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;K&gt; + <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,\n    R: <a class=\"trait\" href=\"../ops/trait.RangeBounds.html\" title=\"trait std::ops::RangeBounds\">RangeBounds</a>&lt;K&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Constructs a double-ended iterator over a sub-range of elements in the set.\nThe simplest way is to use the range syntax <code>min..max</code>, thus <code>range(min..max)</code> will\nyield elements from min (inclusive) to max (exclusive).\nThe range may also be entered as <code>(Bound&lt;T&gt;, Bound&lt;T&gt;)</code>, so for example\n<code>range((Excluded(4), Included(10)))</code> will yield a left-exclusive, right-inclusive\nrange from 4 to 10.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">Â§</a>Panics</h5>\n<p>Panics if range <code>start &gt; end</code>.\nPanics if range <code>start == end</code> and both bounds are <code>Excluded</code>.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::BTreeSet;\n<span class=\"kw\">use </span>std::ops::Bound::Included;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = BTreeSet::new();\nset.insert(<span class=\"number\">3</span>);\nset.insert(<span class=\"number\">5</span>);\nset.insert(<span class=\"number\">8</span>);\n<span class=\"kw\">for </span><span class=\"kw-2\">&amp;</span>elem <span class=\"kw\">in </span>set.range((Included(<span class=\"kw-2\">&amp;</span><span class=\"number\">4</span>), Included(<span class=\"kw-2\">&amp;</span><span class=\"number\">8</span>))) {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{elem}\"</span>);\n}\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">5</span>), set.range(<span class=\"number\">4</span>..).next());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::BTreeSet;%0A++++use+std::ops::Bound::Included;%0A++++%0A++++let+mut+set+=+BTreeSet::new();%0A++++set.insert(3);%0A++++set.insert(5);%0A++++set.insert(8);%0A++++for+%26elem+in+set.range((Included(%264),+Included(%268)))+%7B%0A++++++++println!(%22%7Belem%7D%22);%0A++++%7D%0A++++assert_eq!(Some(%265),+set.range(4..).next());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.difference\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#423-425\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.difference\" class=\"fn\">difference</a>&lt;'a&gt;(\n    &amp;'a self,\n    other: &amp;'a <a class=\"struct\" href=\"struct.BTreeSet.html\" title=\"struct std::collections::BTreeSet\">BTreeSet</a>&lt;T, A&gt;,\n) -&gt; <a class=\"struct\" href=\"btree_set/struct.Difference.html\" title=\"struct std::collections::btree_set::Difference\">Difference</a>&lt;'a, T, A&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Difference<'a, T, A>\">â“˜</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,</div></h4></section></summary><div class=\"docblock\"><p>Visits the elements representing the difference,\ni.e., the elements that are in <code>self</code> but not in <code>other</code>,\nin ascending order.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::BTreeSet;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>a = BTreeSet::new();\na.insert(<span class=\"number\">1</span>);\na.insert(<span class=\"number\">2</span>);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>b = BTreeSet::new();\nb.insert(<span class=\"number\">2</span>);\nb.insert(<span class=\"number\">3</span>);\n\n<span class=\"kw\">let </span>diff: Vec&lt;<span class=\"kw\">_</span>&gt; = a.difference(<span class=\"kw-2\">&amp;</span>b).cloned().collect();\n<span class=\"macro\">assert_eq!</span>(diff, [<span class=\"number\">1</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::BTreeSet;%0A++++%0A++++let+mut+a+=+BTreeSet::new();%0A++++a.insert(1);%0A++++a.insert(2);%0A++++%0A++++let+mut+b+=+BTreeSet::new();%0A++++b.insert(2);%0A++++b.insert(3);%0A++++%0A++++let+diff:+Vec%3C_%3E+=+a.difference(%26b).cloned().collect();%0A++++assert_eq!(diff,+%5B1%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.symmetric_difference\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#484-489\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.symmetric_difference\" class=\"fn\">symmetric_difference</a>&lt;'a&gt;(\n    &amp;'a self,\n    other: &amp;'a <a class=\"struct\" href=\"struct.BTreeSet.html\" title=\"struct std::collections::BTreeSet\">BTreeSet</a>&lt;T, A&gt;,\n) -&gt; <a class=\"struct\" href=\"btree_set/struct.SymmetricDifference.html\" title=\"struct std::collections::btree_set::SymmetricDifference\">SymmetricDifference</a>&lt;'a, T&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"SymmetricDifference<'a, T>\">â“˜</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,</div></h4></section></summary><div class=\"docblock\"><p>Visits the elements representing the symmetric difference,\ni.e., the elements that are in <code>self</code> or in <code>other</code> but not in both,\nin ascending order.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::BTreeSet;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>a = BTreeSet::new();\na.insert(<span class=\"number\">1</span>);\na.insert(<span class=\"number\">2</span>);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>b = BTreeSet::new();\nb.insert(<span class=\"number\">2</span>);\nb.insert(<span class=\"number\">3</span>);\n\n<span class=\"kw\">let </span>sym_diff: Vec&lt;<span class=\"kw\">_</span>&gt; = a.symmetric_difference(<span class=\"kw-2\">&amp;</span>b).cloned().collect();\n<span class=\"macro\">assert_eq!</span>(sym_diff, [<span class=\"number\">1</span>, <span class=\"number\">3</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::BTreeSet;%0A++++%0A++++let+mut+a+=+BTreeSet::new();%0A++++a.insert(1);%0A++++a.insert(2);%0A++++%0A++++let+mut+b+=+BTreeSet::new();%0A++++b.insert(2);%0A++++b.insert(3);%0A++++%0A++++let+sym_diff:+Vec%3C_%3E+=+a.symmetric_difference(%26b).cloned().collect();%0A++++assert_eq!(sym_diff,+%5B1,+3%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.intersection\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#515-517\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.intersection\" class=\"fn\">intersection</a>&lt;'a&gt;(\n    &amp;'a self,\n    other: &amp;'a <a class=\"struct\" href=\"struct.BTreeSet.html\" title=\"struct std::collections::BTreeSet\">BTreeSet</a>&lt;T, A&gt;,\n) -&gt; <a class=\"struct\" href=\"btree_set/struct.Intersection.html\" title=\"struct std::collections::btree_set::Intersection\">Intersection</a>&lt;'a, T, A&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Intersection<'a, T, A>\">â“˜</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,</div></h4></section></summary><div class=\"docblock\"><p>Visits the elements representing the intersection,\ni.e., the elements that are both in <code>self</code> and <code>other</code>,\nin ascending order.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::BTreeSet;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>a = BTreeSet::new();\na.insert(<span class=\"number\">1</span>);\na.insert(<span class=\"number\">2</span>);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>b = BTreeSet::new();\nb.insert(<span class=\"number\">2</span>);\nb.insert(<span class=\"number\">3</span>);\n\n<span class=\"kw\">let </span>intersection: Vec&lt;<span class=\"kw\">_</span>&gt; = a.intersection(<span class=\"kw-2\">&amp;</span>b).cloned().collect();\n<span class=\"macro\">assert_eq!</span>(intersection, [<span class=\"number\">2</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::BTreeSet;%0A++++%0A++++let+mut+a+=+BTreeSet::new();%0A++++a.insert(1);%0A++++a.insert(2);%0A++++%0A++++let+mut+b+=+BTreeSet::new();%0A++++b.insert(2);%0A++++b.insert(3);%0A++++%0A++++let+intersection:+Vec%3C_%3E+=+a.intersection(%26b).cloned().collect();%0A++++assert_eq!(intersection,+%5B2%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.union\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#566-568\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.union\" class=\"fn\">union</a>&lt;'a&gt;(&amp;'a self, other: &amp;'a <a class=\"struct\" href=\"struct.BTreeSet.html\" title=\"struct std::collections::BTreeSet\">BTreeSet</a>&lt;T, A&gt;) -&gt; <a class=\"struct\" href=\"btree_set/struct.Union.html\" title=\"struct std::collections::btree_set::Union\">Union</a>&lt;'a, T&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Union<'a, T>\">â“˜</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,</div></h4></section></summary><div class=\"docblock\"><p>Visits the elements representing the union,\ni.e., all the elements in <code>self</code> or <code>other</code>, without duplicates,\nin ascending order.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::BTreeSet;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>a = BTreeSet::new();\na.insert(<span class=\"number\">1</span>);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>b = BTreeSet::new();\nb.insert(<span class=\"number\">2</span>);\n\n<span class=\"kw\">let union</span>: Vec&lt;<span class=\"kw\">_</span>&gt; = a.union(<span class=\"kw-2\">&amp;</span>b).cloned().collect();\n<span class=\"macro\">assert_eq!</span>(union, [<span class=\"number\">1</span>, <span class=\"number\">2</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::BTreeSet;%0A++++%0A++++let+mut+a+=+BTreeSet::new();%0A++++a.insert(1);%0A++++%0A++++let+mut+b+=+BTreeSet::new();%0A++++b.insert(2);%0A++++%0A++++let+union:+Vec%3C_%3E+=+a.union(%26b).cloned().collect();%0A++++assert_eq!(union,+%5B1,+2%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clear\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#586-588\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.clear\" class=\"fn\">clear</a>(&amp;mut self)<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h4></section></summary><div class=\"docblock\"><p>Clears the set, removing all elements.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::BTreeSet;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = BTreeSet::new();\nv.insert(<span class=\"number\">1</span>);\nv.clear();\n<span class=\"macro\">assert!</span>(v.is_empty());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::BTreeSet;%0A++++%0A++++let+mut+v+=+BTreeSet::new();%0A++++v.insert(1);%0A++++v.clear();%0A++++assert!(v.is_empty());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.contains\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#609-612\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.contains\" class=\"fn\">contains</a>&lt;Q&gt;(&amp;self, value: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;Q&gt; + <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,\n    Q: <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the set contains an element equal to the value.</p>\n<p>The value may be any borrowed form of the setâ€™s element type,\nbut the ordering on the borrowed form <em>must</em> match the\nordering on the element type.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::BTreeSet;\n\n<span class=\"kw\">let </span>set = BTreeSet::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert_eq!</span>(set.contains(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>), <span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(set.contains(<span class=\"kw-2\">&amp;</span><span class=\"number\">4</span>), <span class=\"bool-val\">false</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::BTreeSet;%0A++++%0A++++let+set+=+BTreeSet::from(%5B1,+2,+3%5D);%0A++++assert_eq!(set.contains(%261),+true);%0A++++assert_eq!(set.contains(%264),+false);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.9.0\">1.9.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#634-637\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.get\" class=\"fn\">get</a>&lt;Q&gt;(&amp;self, value: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;Q&gt; + <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,\n    Q: <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns a reference to the element in the set, if any, that is equal to\nthe value.</p>\n<p>The value may be any borrowed form of the setâ€™s element type,\nbut the ordering on the borrowed form <em>must</em> match the\nordering on the element type.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::BTreeSet;\n\n<span class=\"kw\">let </span>set = BTreeSet::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert_eq!</span>(set.get(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>));\n<span class=\"macro\">assert_eq!</span>(set.get(<span class=\"kw-2\">&amp;</span><span class=\"number\">4</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::BTreeSet;%0A++++%0A++++let+set+=+BTreeSet::from(%5B1,+2,+3%5D);%0A++++assert_eq!(set.get(%262),+Some(%262));%0A++++assert_eq!(set.get(%264),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_disjoint\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#661-663\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.is_disjoint\" class=\"fn\">is_disjoint</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.BTreeSet.html\" title=\"struct std::collections::BTreeSet\">BTreeSet</a>&lt;T, A&gt;) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>.\nThis is equivalent to checking for an empty intersection.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::BTreeSet;\n\n<span class=\"kw\">let </span>a = BTreeSet::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>b = BTreeSet::new();\n\n<span class=\"macro\">assert_eq!</span>(a.is_disjoint(<span class=\"kw-2\">&amp;</span>b), <span class=\"bool-val\">true</span>);\nb.insert(<span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(a.is_disjoint(<span class=\"kw-2\">&amp;</span>b), <span class=\"bool-val\">true</span>);\nb.insert(<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(a.is_disjoint(<span class=\"kw-2\">&amp;</span>b), <span class=\"bool-val\">false</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::BTreeSet;%0A++++%0A++++let+a+=+BTreeSet::from(%5B1,+2,+3%5D);%0A++++let+mut+b+=+BTreeSet::new();%0A++++%0A++++assert_eq!(a.is_disjoint(%26b),+true);%0A++++b.insert(4);%0A++++assert_eq!(a.is_disjoint(%26b),+true);%0A++++b.insert(1);%0A++++assert_eq!(a.is_disjoint(%26b),+false);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_subset\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#687-689\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.is_subset\" class=\"fn\">is_subset</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.BTreeSet.html\" title=\"struct std::collections::BTreeSet\">BTreeSet</a>&lt;T, A&gt;) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the set is a subset of another,\ni.e., <code>other</code> contains at least all the elements in <code>self</code>.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::BTreeSet;\n\n<span class=\"kw\">let </span>sup = BTreeSet::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = BTreeSet::new();\n\n<span class=\"macro\">assert_eq!</span>(set.is_subset(<span class=\"kw-2\">&amp;</span>sup), <span class=\"bool-val\">true</span>);\nset.insert(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(set.is_subset(<span class=\"kw-2\">&amp;</span>sup), <span class=\"bool-val\">true</span>);\nset.insert(<span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(set.is_subset(<span class=\"kw-2\">&amp;</span>sup), <span class=\"bool-val\">false</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::BTreeSet;%0A++++%0A++++let+sup+=+BTreeSet::from(%5B1,+2,+3%5D);%0A++++let+mut+set+=+BTreeSet::new();%0A++++%0A++++assert_eq!(set.is_subset(%26sup),+true);%0A++++set.insert(2);%0A++++assert_eq!(set.is_subset(%26sup),+true);%0A++++set.insert(4);%0A++++assert_eq!(set.is_subset(%26sup),+false);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_superset\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#767-769\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.is_superset\" class=\"fn\">is_superset</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.BTreeSet.html\" title=\"struct std::collections::BTreeSet\">BTreeSet</a>&lt;T, A&gt;) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the set is a superset of another,\ni.e., <code>self</code> contains at least all the elements in <code>other</code>.</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::BTreeSet;\n\n<span class=\"kw\">let </span>sub = BTreeSet::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>]);\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = BTreeSet::new();\n\n<span class=\"macro\">assert_eq!</span>(set.is_superset(<span class=\"kw-2\">&amp;</span>sub), <span class=\"bool-val\">false</span>);\n\nset.insert(<span class=\"number\">0</span>);\nset.insert(<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(set.is_superset(<span class=\"kw-2\">&amp;</span>sub), <span class=\"bool-val\">false</span>);\n\nset.insert(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(set.is_superset(<span class=\"kw-2\">&amp;</span>sub), <span class=\"bool-val\">true</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::BTreeSet;%0A++++%0A++++let+sub+=+BTreeSet::from(%5B1,+2%5D);%0A++++let+mut+set+=+BTreeSet::new();%0A++++%0A++++assert_eq!(set.is_superset(%26sub),+false);%0A++++%0A++++set.insert(0);%0A++++set.insert(1);%0A++++assert_eq!(set.is_superset(%26sub),+false);%0A++++%0A++++set.insert(2);%0A++++assert_eq!(set.is_superset(%26sub),+true);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.first\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0\">1.66.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#794-796\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.first\" class=\"fn\">first</a>(&amp;self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns a reference to the first element in the set, if any.\nThis element is always the minimum of all elements in the set.</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">Â§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::BTreeSet;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = BTreeSet::new();\n<span class=\"macro\">assert_eq!</span>(set.first(), <span class=\"prelude-val\">None</span>);\nset.insert(<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(set.first(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>));\nset.insert(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(set.first(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::BTreeSet;%0A++++%0A++++let+mut+set+=+BTreeSet::new();%0A++++assert_eq!(set.first(),+None);%0A++++set.insert(1);%0A++++assert_eq!(set.first(),+Some(%261));%0A++++set.insert(2);%0A++++assert_eq!(set.first(),+Some(%261));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.last\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0\">1.66.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#821-823\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.last\" class=\"fn\">last</a>(&amp;self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns a reference to the last element in the set, if any.\nThis element is always the maximum of all elements in the set.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">Â§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::BTreeSet;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = BTreeSet::new();\n<span class=\"macro\">assert_eq!</span>(set.last(), <span class=\"prelude-val\">None</span>);\nset.insert(<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(set.last(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>));\nset.insert(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(set.last(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::BTreeSet;%0A++++%0A++++let+mut+set+=+BTreeSet::new();%0A++++assert_eq!(set.last(),+None);%0A++++set.insert(1);%0A++++assert_eq!(set.last(),+Some(%261));%0A++++set.insert(2);%0A++++assert_eq!(set.last(),+Some(%262));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.pop_first\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0\">1.66.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#845-847\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.pop_first\" class=\"fn\">pop_first</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,</div></h4></section></summary><div class=\"docblock\"><p>Removes the first element from the set and returns it, if any.\nThe first element is always the minimum element in the set.</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::BTreeSet;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = BTreeSet::new();\n\nset.insert(<span class=\"number\">1</span>);\n<span class=\"kw\">while let </span><span class=\"prelude-val\">Some</span>(n) = set.pop_first() {\n    <span class=\"macro\">assert_eq!</span>(n, <span class=\"number\">1</span>);\n}\n<span class=\"macro\">assert!</span>(set.is_empty());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::BTreeSet;%0A++++%0A++++let+mut+set+=+BTreeSet::new();%0A++++%0A++++set.insert(1);%0A++++while+let+Some(n)+=+set.pop_first()+%7B%0A++++++++assert_eq!(n,+1);%0A++++%7D%0A++++assert!(set.is_empty());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.pop_last\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0\">1.66.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#869-871\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.pop_last\" class=\"fn\">pop_last</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,</div></h4></section></summary><div class=\"docblock\"><p>Removes the last element from the set and returns it, if any.\nThe last element is always the maximum element in the set.</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::BTreeSet;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = BTreeSet::new();\n\nset.insert(<span class=\"number\">1</span>);\n<span class=\"kw\">while let </span><span class=\"prelude-val\">Some</span>(n) = set.pop_last() {\n    <span class=\"macro\">assert_eq!</span>(n, <span class=\"number\">1</span>);\n}\n<span class=\"macro\">assert!</span>(set.is_empty());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::BTreeSet;%0A++++%0A++++let+mut+set+=+BTreeSet::new();%0A++++%0A++++set.insert(1);%0A++++while+let+Some(n)+=+set.pop_last()+%7B%0A++++++++assert_eq!(n,+1);%0A++++%7D%0A++++assert!(set.is_empty());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.insert\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#902-904\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.insert\" class=\"fn\">insert</a>(&amp;mut self, value: T) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,</div></h4></section></summary><div class=\"docblock\"><p>Adds a value to the set.</p>\n<p>Returns whether the value was newly inserted. That is:</p>\n<ul>\n<li>If the set did not previously contain an equal value, <code>true</code> is\nreturned.</li>\n<li>If the set already contained an equal value, <code>false</code> is returned, and\nthe entry is not updated.</li>\n</ul>\n<p>See the <a href=\"index.html#insert-and-complex-keys\">module-level documentation</a> for more.</p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::BTreeSet;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = BTreeSet::new();\n\n<span class=\"macro\">assert_eq!</span>(set.insert(<span class=\"number\">2</span>), <span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(set.insert(<span class=\"number\">2</span>), <span class=\"bool-val\">false</span>);\n<span class=\"macro\">assert_eq!</span>(set.len(), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::BTreeSet;%0A++++%0A++++let+mut+set+=+BTreeSet::new();%0A++++%0A++++assert_eq!(set.insert(2),+true);%0A++++assert_eq!(set.insert(2),+false);%0A++++assert_eq!(set.len(),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.replace\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.9.0\">1.9.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#926-928\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.replace\" class=\"fn\">replace</a>(&amp;mut self, value: T) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,</div></h4></section></summary><div class=\"docblock\"><p>Adds a value to the set, replacing the existing element, if any, that is\nequal to the value. Returns the replaced element.</p>\n<h5 id=\"examples-19\"><a class=\"doc-anchor\" href=\"#examples-19\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::BTreeSet;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = BTreeSet::new();\nset.insert(Vec::&lt;i32&gt;::new());\n\n<span class=\"macro\">assert_eq!</span>(set.get(<span class=\"kw-2\">&amp;</span>[][..]).unwrap().capacity(), <span class=\"number\">0</span>);\nset.replace(Vec::with_capacity(<span class=\"number\">10</span>));\n<span class=\"macro\">assert_eq!</span>(set.get(<span class=\"kw-2\">&amp;</span>[][..]).unwrap().capacity(), <span class=\"number\">10</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::BTreeSet;%0A++++%0A++++let+mut+set+=+BTreeSet::new();%0A++++set.insert(Vec::%3Ci32%3E::new());%0A++++%0A++++assert_eq!(set.get(%26%5B%5D%5B..%5D).unwrap().capacity(),+0);%0A++++set.replace(Vec::with_capacity(10));%0A++++assert_eq!(set.get(%26%5B%5D%5B..%5D).unwrap().capacity(),+10);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.remove\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#952-955\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.remove\" class=\"fn\">remove</a>&lt;Q&gt;(&amp;mut self, value: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;Q&gt; + <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,\n    Q: <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>If the set contains an element equal to the value, removes it from the\nset and drops it. Returns whether such an element was present.</p>\n<p>The value may be any borrowed form of the setâ€™s element type,\nbut the ordering on the borrowed form <em>must</em> match the\nordering on the element type.</p>\n<h5 id=\"examples-20\"><a class=\"doc-anchor\" href=\"#examples-20\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::BTreeSet;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = BTreeSet::new();\n\nset.insert(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(set.remove(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>), <span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(set.remove(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>), <span class=\"bool-val\">false</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::BTreeSet;%0A++++%0A++++let+mut+set+=+BTreeSet::new();%0A++++%0A++++set.insert(2);%0A++++assert_eq!(set.remove(%262),+true);%0A++++assert_eq!(set.remove(%262),+false);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.take\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.9.0\">1.9.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#977-980\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.take\" class=\"fn\">take</a>&lt;Q&gt;(&amp;mut self, value: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;Q&gt; + <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,\n    Q: <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Removes and returns the element in the set, if any, that is equal to\nthe value.</p>\n<p>The value may be any borrowed form of the setâ€™s element type,\nbut the ordering on the borrowed form <em>must</em> match the\nordering on the element type.</p>\n<h5 id=\"examples-21\"><a class=\"doc-anchor\" href=\"#examples-21\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::BTreeSet;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = BTreeSet::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert_eq!</span>(set.take(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n<span class=\"macro\">assert_eq!</span>(set.take(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::BTreeSet;%0A++++%0A++++let+mut+set+=+BTreeSet::from(%5B1,+2,+3%5D);%0A++++assert_eq!(set.take(%262),+Some(2));%0A++++assert_eq!(set.take(%262),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.retain\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0\">1.53.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#1001-1004\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.retain\" class=\"fn\">retain</a>&lt;F&gt;(&amp;mut self, f: F)<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Retains only the elements specified by the predicate.</p>\n<p>In other words, remove all elements <code>e</code> for which <code>f(&amp;e)</code> returns <code>false</code>.\nThe elements are visited in ascending order.</p>\n<h5 id=\"examples-22\"><a class=\"doc-anchor\" href=\"#examples-22\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::BTreeSet;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = BTreeSet::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]);\n<span class=\"comment\">// Keep only the even numbers.\n</span>set.retain(|<span class=\"kw-2\">&amp;</span>k| k % <span class=\"number\">2 </span>== <span class=\"number\">0</span>);\n<span class=\"macro\">assert!</span>(set.iter().eq([<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>].iter()));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::BTreeSet;%0A++++%0A++++let+mut+set+=+BTreeSet::from(%5B1,+2,+3,+4,+5,+6%5D);%0A++++//+Keep+only+the+even+numbers.%0A++++set.retain(%7C%26k%7C+k+%25+2+==+0);%0A++++assert!(set.iter().eq(%5B2,+4,+6%5D.iter()));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.append\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.11.0\">1.11.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#1038-1041\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.append\" class=\"fn\">append</a>(&amp;mut self, other: &amp;mut <a class=\"struct\" href=\"struct.BTreeSet.html\" title=\"struct std::collections::BTreeSet\">BTreeSet</a>&lt;T, A&gt;)<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,\n    A: <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h4></section></summary><div class=\"docblock\"><p>Moves all elements from <code>other</code> into <code>self</code>, leaving <code>other</code> empty.</p>\n<h5 id=\"examples-23\"><a class=\"doc-anchor\" href=\"#examples-23\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::BTreeSet;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>a = BTreeSet::new();\na.insert(<span class=\"number\">1</span>);\na.insert(<span class=\"number\">2</span>);\na.insert(<span class=\"number\">3</span>);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>b = BTreeSet::new();\nb.insert(<span class=\"number\">3</span>);\nb.insert(<span class=\"number\">4</span>);\nb.insert(<span class=\"number\">5</span>);\n\na.append(<span class=\"kw-2\">&amp;mut </span>b);\n\n<span class=\"macro\">assert_eq!</span>(a.len(), <span class=\"number\">5</span>);\n<span class=\"macro\">assert_eq!</span>(b.len(), <span class=\"number\">0</span>);\n\n<span class=\"macro\">assert!</span>(a.contains(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>));\n<span class=\"macro\">assert!</span>(a.contains(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>));\n<span class=\"macro\">assert!</span>(a.contains(<span class=\"kw-2\">&amp;</span><span class=\"number\">3</span>));\n<span class=\"macro\">assert!</span>(a.contains(<span class=\"kw-2\">&amp;</span><span class=\"number\">4</span>));\n<span class=\"macro\">assert!</span>(a.contains(<span class=\"kw-2\">&amp;</span><span class=\"number\">5</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::BTreeSet;%0A++++%0A++++let+mut+a+=+BTreeSet::new();%0A++++a.insert(1);%0A++++a.insert(2);%0A++++a.insert(3);%0A++++%0A++++let+mut+b+=+BTreeSet::new();%0A++++b.insert(3);%0A++++b.insert(4);%0A++++b.insert(5);%0A++++%0A++++a.append(%26mut+b);%0A++++%0A++++assert_eq!(a.len(),+5);%0A++++assert_eq!(b.len(),+0);%0A++++%0A++++assert!(a.contains(%261));%0A++++assert!(a.contains(%262));%0A++++assert!(a.contains(%263));%0A++++assert!(a.contains(%264));%0A++++assert!(a.contains(%265));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.split_off\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.11.0\">1.11.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#1076-1079\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.split_off\" class=\"fn\">split_off</a>&lt;Q&gt;(&amp;mut self, value: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"struct\" href=\"struct.BTreeSet.html\" title=\"struct std::collections::BTreeSet\">BTreeSet</a>&lt;T, A&gt;<div class=\"where\">where\n    Q: <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    T: <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;Q&gt; + <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,\n    A: <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h4></section></summary><div class=\"docblock\"><p>Splits the collection into two at the value. Returns a new collection\nwith all elements greater than or equal to the value.</p>\n<h5 id=\"examples-24\"><a class=\"doc-anchor\" href=\"#examples-24\">Â§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::BTreeSet;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>a = BTreeSet::new();\na.insert(<span class=\"number\">1</span>);\na.insert(<span class=\"number\">2</span>);\na.insert(<span class=\"number\">3</span>);\na.insert(<span class=\"number\">17</span>);\na.insert(<span class=\"number\">41</span>);\n\n<span class=\"kw\">let </span>b = a.split_off(<span class=\"kw-2\">&amp;</span><span class=\"number\">3</span>);\n\n<span class=\"macro\">assert_eq!</span>(a.len(), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(b.len(), <span class=\"number\">3</span>);\n\n<span class=\"macro\">assert!</span>(a.contains(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>));\n<span class=\"macro\">assert!</span>(a.contains(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>));\n\n<span class=\"macro\">assert!</span>(b.contains(<span class=\"kw-2\">&amp;</span><span class=\"number\">3</span>));\n<span class=\"macro\">assert!</span>(b.contains(<span class=\"kw-2\">&amp;</span><span class=\"number\">17</span>));\n<span class=\"macro\">assert!</span>(b.contains(<span class=\"kw-2\">&amp;</span><span class=\"number\">41</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::BTreeSet;%0A++++%0A++++let+mut+a+=+BTreeSet::new();%0A++++a.insert(1);%0A++++a.insert(2);%0A++++a.insert(3);%0A++++a.insert(17);%0A++++a.insert(41);%0A++++%0A++++let+b+=+a.split_off(%263);%0A++++%0A++++assert_eq!(a.len(),+2);%0A++++assert_eq!(b.len(),+3);%0A++++%0A++++assert!(a.contains(%261));%0A++++assert!(a.contains(%262));%0A++++%0A++++assert!(b.contains(%263));%0A++++assert!(b.contains(%2617));%0A++++assert!(b.contains(%2641));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.extract_if\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#1111-1114\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.extract_if\" class=\"fn\">extract_if</a>&lt;'a, F&gt;(&amp;'a mut self, pred: F) -&gt; <a class=\"struct\" href=\"btree_set/struct.ExtractIf.html\" title=\"struct std::collections::btree_set::ExtractIf\">ExtractIf</a>&lt;'a, T, F, A&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"ExtractIf<'a, T, F, A>\">â“˜</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,\n    F: 'a + <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>btree_extract_if</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/70530\">#70530</a>)</span></div></span></summary><div class=\"docblock\"><p>Creates an iterator that visits all elements in ascending order and\nuses a closure to determine if an element should be removed.</p>\n<p>If the closure returns <code>true</code>, the element is removed from the set and\nyielded. If the closure returns <code>false</code>, or panics, the element remains\nin the set and will not be yielded.</p>\n<p>If the returned <code>ExtractIf</code> is not exhausted, e.g. because it is dropped without iterating\nor the iteration short-circuits, then the remaining elements will be retained.\nUse <a href=\"struct.BTreeSet.html#method.retain\" title=\"method std::collections::BTreeSet::retain\"><code>retain</code></a> with a negated predicate if you do not need the returned iterator.</p>\n<h5 id=\"examples-25\"><a class=\"doc-anchor\" href=\"#examples-25\">Â§</a>Examples</h5>\n<p>Splitting a set into even and odd values, reusing the original set:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(btree_extract_if)]\n</span><span class=\"kw\">use </span>std::collections::BTreeSet;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set: BTreeSet&lt;i32&gt; = (<span class=\"number\">0</span>..<span class=\"number\">8</span>).collect();\n<span class=\"kw\">let </span>evens: BTreeSet&lt;<span class=\"kw\">_</span>&gt; = set.extract_if(|v| v % <span class=\"number\">2 </span>== <span class=\"number\">0</span>).collect();\n<span class=\"kw\">let </span>odds = set;\n<span class=\"macro\">assert_eq!</span>(evens.into_iter().collect::&lt;Vec&lt;<span class=\"kw\">_</span>&gt;&gt;(), <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>]);\n<span class=\"macro\">assert_eq!</span>(odds.into_iter().collect::&lt;Vec&lt;<span class=\"kw\">_</span>&gt;&gt;(), <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(btree_extract_if)%5D%0Afn+main()+%7B%0A++++use+std::collections::BTreeSet;%0A++++%0A++++let+mut+set:+BTreeSet%3Ci32%3E+=+(0..8).collect();%0A++++let+evens:+BTreeSet%3C_%3E+=+set.extract_if(%7Cv%7C+v+%25+2+==+0).collect();%0A++++let+odds+=+set;%0A++++assert_eq!(evens.into_iter().collect::%3CVec%3C_%3E%3E(),+vec!%5B0,+2,+4,+6%5D);%0A++++assert_eq!(odds.into_iter().collect::%3CVec%3C_%3E%3E(),+vec!%5B1,+3,+5,+7%5D);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.iter\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#1136\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.iter\" class=\"fn\">iter</a>(&amp;self) -&gt; <a class=\"struct\" href=\"btree_set/struct.Iter.html\" title=\"struct std::collections::btree_set::Iter\">Iter</a>&lt;'_, T&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Iter<'_, T>\">â“˜</a></h4></section></summary><div class=\"docblock\"><p>Gets an iterator that visits the elements in the <code>BTreeSet</code> in ascending\norder.</p>\n<h5 id=\"examples-26\"><a class=\"doc-anchor\" href=\"#examples-26\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::BTreeSet;\n\n<span class=\"kw\">let </span>set = BTreeSet::from([<span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]);\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set_iter = set.iter();\n<span class=\"macro\">assert_eq!</span>(set_iter.next(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(set_iter.next(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>));\n<span class=\"macro\">assert_eq!</span>(set_iter.next(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(set_iter.next(), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::BTreeSet;%0A++++%0A++++let+set+=+BTreeSet::from(%5B3,+1,+2%5D);%0A++++let+mut+set_iter+=+set.iter();%0A++++assert_eq!(set_iter.next(),+Some(%261));%0A++++assert_eq!(set_iter.next(),+Some(%262));%0A++++assert_eq!(set_iter.next(),+Some(%263));%0A++++assert_eq!(set_iter.next(),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.len\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/71835\" title=\"Tracking issue for const_btree_len\">unstable</a>)</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#1160\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.len\" class=\"fn\">len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of elements in the set.</p>\n<h5 id=\"examples-27\"><a class=\"doc-anchor\" href=\"#examples-27\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::BTreeSet;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = BTreeSet::new();\n<span class=\"macro\">assert_eq!</span>(v.len(), <span class=\"number\">0</span>);\nv.insert(<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(v.len(), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::BTreeSet;%0A++++%0A++++let+mut+v+=+BTreeSet::new();%0A++++assert_eq!(v.len(),+0);%0A++++v.insert(1);%0A++++assert_eq!(v.len(),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_empty\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/71835\" title=\"Tracking issue for const_btree_len\">unstable</a>)</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#1183\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.is_empty\" class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the set contains no elements.</p>\n<h5 id=\"examples-28\"><a class=\"doc-anchor\" href=\"#examples-28\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::BTreeSet;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = BTreeSet::new();\n<span class=\"macro\">assert!</span>(v.is_empty());\nv.insert(<span class=\"number\">1</span>);\n<span class=\"macro\">assert!</span>(!v.is_empty());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::BTreeSet;%0A++++%0A++++let+mut+v+=+BTreeSet::new();%0A++++assert!(v.is_empty());%0A++++v.insert(1);%0A++++assert!(!v.is_empty());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details></div><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">Â§</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitAnd%3C%26BTreeSet%3CT,+A%3E%3E-for-%26BTreeSet%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#1403\">source</a></span><a href=\"#impl-BitAnd%3C%26BTreeSet%3CT,+A%3E%3E-for-%26BTreeSet%3CT,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&lt;&amp;<a class=\"struct\" href=\"struct.BTreeSet.html\" title=\"struct std::collections::BTreeSet\">BTreeSet</a>&lt;T, A&gt;&gt; for &amp;<a class=\"struct\" href=\"struct.BTreeSet.html\" title=\"struct std::collections::BTreeSet\">BTreeSet</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> + <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a> + <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitand\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#1419\">source</a><a href=\"#method.bitand\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.BitAnd.html#tymethod.bitand\" class=\"fn\">bitand</a>(self, rhs: &amp;<a class=\"struct\" href=\"struct.BTreeSet.html\" title=\"struct std::collections::BTreeSet\">BTreeSet</a>&lt;T, A&gt;) -&gt; <a class=\"struct\" href=\"struct.BTreeSet.html\" title=\"struct std::collections::BTreeSet\">BTreeSet</a>&lt;T, A&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the intersection of <code>self</code> and <code>rhs</code> as a new <code>BTreeSet&lt;T&gt;</code>.</p>\n<h5 id=\"examples-31\"><a class=\"doc-anchor\" href=\"#examples-31\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::BTreeSet;\n\n<span class=\"kw\">let </span>a = BTreeSet::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"kw\">let </span>b = BTreeSet::from([<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n\n<span class=\"kw\">let </span>result = <span class=\"kw-2\">&amp;</span>a &amp; <span class=\"kw-2\">&amp;</span>b;\n<span class=\"macro\">assert_eq!</span>(result, BTreeSet::from([<span class=\"number\">2</span>, <span class=\"number\">3</span>]));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::BTreeSet;%0A++++%0A++++let+a+=+BTreeSet::from(%5B1,+2,+3%5D);%0A++++let+b+=+BTreeSet::from(%5B2,+3,+4%5D);%0A++++%0A++++let+result+=+%26a+%26+%26b;%0A++++assert_eq!(result,+BTreeSet::from(%5B2,+3%5D));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-2\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-2\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"../ops/trait.BitAnd.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"struct.BTreeSet.html\" title=\"struct std::collections::BTreeSet\">BTreeSet</a>&lt;T, A&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&amp;</code> operator.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitOr%3C%26BTreeSet%3CT,+A%3E%3E-for-%26BTreeSet%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#1428\">source</a></span><a href=\"#impl-BitOr%3C%26BTreeSet%3CT,+A%3E%3E-for-%26BTreeSet%3CT,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;&amp;<a class=\"struct\" href=\"struct.BTreeSet.html\" title=\"struct std::collections::BTreeSet\">BTreeSet</a>&lt;T, A&gt;&gt; for &amp;<a class=\"struct\" href=\"struct.BTreeSet.html\" title=\"struct std::collections::BTreeSet\">BTreeSet</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> + <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a> + <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitor\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#1444\">source</a><a href=\"#method.bitor\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.BitOr.html#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: &amp;<a class=\"struct\" href=\"struct.BTreeSet.html\" title=\"struct std::collections::BTreeSet\">BTreeSet</a>&lt;T, A&gt;) -&gt; <a class=\"struct\" href=\"struct.BTreeSet.html\" title=\"struct std::collections::BTreeSet\">BTreeSet</a>&lt;T, A&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the union of <code>self</code> and <code>rhs</code> as a new <code>BTreeSet&lt;T&gt;</code>.</p>\n<h5 id=\"examples-29\"><a class=\"doc-anchor\" href=\"#examples-29\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::BTreeSet;\n\n<span class=\"kw\">let </span>a = BTreeSet::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"kw\">let </span>b = BTreeSet::from([<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]);\n\n<span class=\"kw\">let </span>result = <span class=\"kw-2\">&amp;</span>a | <span class=\"kw-2\">&amp;</span>b;\n<span class=\"macro\">assert_eq!</span>(result, BTreeSet::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::BTreeSet;%0A++++%0A++++let+a+=+BTreeSet::from(%5B1,+2,+3%5D);%0A++++let+b+=+BTreeSet::from(%5B3,+4,+5%5D);%0A++++%0A++++let+result+=+%26a+%7C+%26b;%0A++++assert_eq!(result,+BTreeSet::from(%5B1,+2,+3,+4,+5%5D));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"../ops/trait.BitOr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"struct.BTreeSet.html\" title=\"struct std::collections::BTreeSet\">BTreeSet</a>&lt;T, A&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>|</code> operator.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitXor%3C%26BTreeSet%3CT,+A%3E%3E-for-%26BTreeSet%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#1378\">source</a></span><a href=\"#impl-BitXor%3C%26BTreeSet%3CT,+A%3E%3E-for-%26BTreeSet%3CT,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&lt;&amp;<a class=\"struct\" href=\"struct.BTreeSet.html\" title=\"struct std::collections::BTreeSet\">BTreeSet</a>&lt;T, A&gt;&gt; for &amp;<a class=\"struct\" href=\"struct.BTreeSet.html\" title=\"struct std::collections::BTreeSet\">BTreeSet</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> + <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a> + <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitxor\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#1394\">source</a><a href=\"#method.bitxor\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.BitXor.html#tymethod.bitxor\" class=\"fn\">bitxor</a>(self, rhs: &amp;<a class=\"struct\" href=\"struct.BTreeSet.html\" title=\"struct std::collections::BTreeSet\">BTreeSet</a>&lt;T, A&gt;) -&gt; <a class=\"struct\" href=\"struct.BTreeSet.html\" title=\"struct std::collections::BTreeSet\">BTreeSet</a>&lt;T, A&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the symmetric difference of <code>self</code> and <code>rhs</code> as a new <code>BTreeSet&lt;T&gt;</code>.</p>\n<h5 id=\"examples-30\"><a class=\"doc-anchor\" href=\"#examples-30\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::BTreeSet;\n\n<span class=\"kw\">let </span>a = BTreeSet::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"kw\">let </span>b = BTreeSet::from([<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n\n<span class=\"kw\">let </span>result = <span class=\"kw-2\">&amp;</span>a ^ <span class=\"kw-2\">&amp;</span>b;\n<span class=\"macro\">assert_eq!</span>(result, BTreeSet::from([<span class=\"number\">1</span>, <span class=\"number\">4</span>]));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::BTreeSet;%0A++++%0A++++let+a+=+BTreeSet::from(%5B1,+2,+3%5D);%0A++++let+b+=+BTreeSet::from(%5B2,+3,+4%5D);%0A++++%0A++++let+result+=+%26a+%5E+%26b;%0A++++assert_eq!(result,+BTreeSet::from(%5B1,+4%5D));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"../ops/trait.BitXor.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"struct.BTreeSet.html\" title=\"struct std::collections::BTreeSet\">BTreeSet</a>&lt;T, A&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>^</code> operator.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Clone-for-BTreeSet%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#114\">source</a></span><a href=\"#impl-Clone-for-BTreeSet%3CT,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"struct.BTreeSet.html\" title=\"struct std::collections::BTreeSet\">BTreeSet</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a> + <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#115\">source</a><a href=\"#method.clone\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"struct.BTreeSet.html\" title=\"struct std::collections::BTreeSet\">BTreeSet</a>&lt;T, A&gt;</h4></section></summary><div class=\"docblock\">Returns a copy of the value. <a href=\"../clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#119\">source</a><a href=\"#method.clone_from\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;<a class=\"struct\" href=\"struct.BTreeSet.html\" title=\"struct std::collections::BTreeSet\">BTreeSet</a>&lt;T, A&gt;)</h4></section></summary><div class=\"docblock\">Performs copy-assignment from <code>source</code>. <a href=\"../clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-BTreeSet%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#1453\">source</a></span><a href=\"#impl-Debug-for-BTreeSet%3CT,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"struct.BTreeSet.html\" title=\"struct std::collections::BTreeSet\">BTreeSet</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a>,\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a> + <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#1454\">source</a><a href=\"#method.fmt\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"../fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Default-for-BTreeSet%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#1345\">source</a></span><a href=\"#impl-Default-for-BTreeSet%3CT%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for <a class=\"struct\" href=\"struct.BTreeSet.html\" title=\"struct std::collections::BTreeSet\">BTreeSet</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#1347\">source</a><a href=\"#method.default\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"struct\" href=\"struct.BTreeSet.html\" title=\"struct std::collections::BTreeSet\">BTreeSet</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates an empty <code>BTreeSet</code>.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Extend%3C%26T%3E-for-BTreeSet%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0\">1.2.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#1333\">source</a></span><a href=\"#impl-Extend%3C%26T%3E-for-BTreeSet%3CT,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, T, A&gt; <a class=\"trait\" href=\"../iter/trait.Extend.html\" title=\"trait std::iter::Extend\">Extend</a>&lt;<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;'a T</a>&gt; for <a class=\"struct\" href=\"struct.BTreeSet.html\" title=\"struct std::collections::BTreeSet\">BTreeSet</a>&lt;T, A&gt;<div class=\"where\">where\n    T: 'a + <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> + <a class=\"trait\" href=\"../marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a>,\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a> + <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.extend\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#1334\">source</a><a href=\"#method.extend\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;I&gt;(&amp;mut self, iter: I)<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;'a T</a>&gt;,</div></h4></section></summary><div class=\"docblock\">Extends a collection with the contents of an iterator. <a href=\"../iter/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#1339\">source</a><a href=\"#method.extend_one\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, _: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;'a T</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/72631\">#72631</a>)</span></div></span><div class=\"docblock\">Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/collect.rs.html#461\">source</a><a href=\"#method.extend_reserve\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/72631\">#72631</a>)</span></div></span><div class=\"docblock\">Reserves capacity in a collection for the given number of additional elements. <a href=\"../iter/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Extend%3CT%3E-for-BTreeSet%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#1318\">source</a></span><a href=\"#impl-Extend%3CT%3E-for-BTreeSet%3CT,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../iter/trait.Extend.html\" title=\"trait std::iter::Extend\">Extend</a>&lt;T&gt; for <a class=\"struct\" href=\"struct.BTreeSet.html\" title=\"struct std::collections::BTreeSet\">BTreeSet</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a> + <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.extend-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#1320\">source</a><a href=\"#method.extend-1\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;Iter&gt;(&amp;mut self, iter: Iter)<div class=\"where\">where\n    Iter: <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&lt;Item = T&gt;,</div></h4></section></summary><div class=\"docblock\">Extends a collection with the contents of an iterator. <a href=\"../iter/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.extend_one-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#1327\">source</a><a href=\"#method.extend_one-1\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, elem: T)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/72631\">#72631</a>)</span></div></span><div class=\"docblock\">Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.extend_reserve-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/collect.rs.html#461\">source</a><a href=\"#method.extend_reserve-1\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/72631\">#72631</a>)</span></div></span><div class=\"docblock\">Reserves capacity in a collection for the given number of additional elements. <a href=\"../iter/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%5BT;+N%5D%3E-for-BTreeSet%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.56.0\">1.56.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#1212\">source</a></span><a href=\"#impl-From%3C%5BT;+N%5D%3E-for-BTreeSet%3CT%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"../primitive.array.html\">[T; N]</a>&gt; for <a class=\"struct\" href=\"struct.BTreeSet.html\" title=\"struct std::collections::BTreeSet\">BTreeSet</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#1222\">source</a><a href=\"#method.from\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(arr: <a class=\"primitive\" href=\"../primitive.array.html\">[T; N]</a>) -&gt; <a class=\"struct\" href=\"struct.BTreeSet.html\" title=\"struct std::collections::BTreeSet\">BTreeSet</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <code>[T; N]</code> into a <code>BTreeSet&lt;T&gt;</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::BTreeSet;\n\n<span class=\"kw\">let </span>set1 = BTreeSet::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n<span class=\"kw\">let </span>set2: BTreeSet&lt;<span class=\"kw\">_</span>&gt; = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>].into();\n<span class=\"macro\">assert_eq!</span>(set1, set2);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::BTreeSet;%0A++++%0A++++let+set1+=+BTreeSet::from(%5B1,+2,+3,+4%5D);%0A++++let+set2:+BTreeSet%3C_%3E+=+%5B1,+2,+3,+4%5D.into();%0A++++assert_eq!(set1,+set2);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-FromIterator%3CT%3E-for-BTreeSet%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#1189\">source</a></span><a href=\"#impl-FromIterator%3CT%3E-for-BTreeSet%3CT%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../iter/trait.FromIterator.html\" title=\"trait std::iter::FromIterator\">FromIterator</a>&lt;T&gt; for <a class=\"struct\" href=\"struct.BTreeSet.html\" title=\"struct std::collections::BTreeSet\">BTreeSet</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#1190\">source</a><a href=\"#method.from_iter\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"struct.BTreeSet.html\" title=\"struct std::collections::BTreeSet\">BTreeSet</a>&lt;T&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&lt;Item = T&gt;,</div></h4></section></summary><div class=\"docblock\">Creates a value from an iterator. <a href=\"../iter/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Hash-for-BTreeSet%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#83\">source</a></span><a href=\"#impl-Hash-for-BTreeSet%3CT,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"struct.BTreeSet.html\" title=\"struct std::collections::BTreeSet\">BTreeSet</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a>,\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a> + <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#84\">source</a><a href=\"#method.hash\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;H&gt;(&amp;self, state: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class=\"docblock\">Feeds this value into the given <a href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"../hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#238-240\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Feeds a slice of this type into the given <a href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"../hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-IntoIterator-for-%26BTreeSet%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#1258\">source</a></span><a href=\"#impl-IntoIterator-for-%26BTreeSet%3CT,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, T, A&gt; <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a> for &amp;'a <a class=\"struct\" href=\"struct.BTreeSet.html\" title=\"struct std::collections::BTreeSet\">BTreeSet</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a> + <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Item-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item-1\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"../iter/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;'a T</a></h4></section></summary><div class=\"docblock\">The type of the elements being iterated over.</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.IntoIter-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoIter-1\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"../iter/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"btree_set/struct.Iter.html\" title=\"struct std::collections::btree_set::Iter\">Iter</a>&lt;'a, T&gt;</h4></section></summary><div class=\"docblock\">Which kind of iterator are we turning this into?</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_iter-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#1262\">source</a><a href=\"#method.into_iter-1\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; <a class=\"struct\" href=\"btree_set/struct.Iter.html\" title=\"struct std::collections::btree_set::Iter\">Iter</a>&lt;'a, T&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Iter<'a, T>\">â“˜</a></h4></section></summary><div class=\"docblock\">Creates an iterator from a value. <a href=\"../iter/trait.IntoIterator.html#tymethod.into_iter\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-IntoIterator-for-BTreeSet%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#1236\">source</a></span><a href=\"#impl-IntoIterator-for-BTreeSet%3CT,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a> for <a class=\"struct\" href=\"struct.BTreeSet.html\" title=\"struct std::collections::BTreeSet\">BTreeSet</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a> + <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#1252\">source</a><a href=\"#method.into_iter\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; <a class=\"struct\" href=\"btree_set/struct.IntoIter.html\" title=\"struct std::collections::btree_set::IntoIter\">IntoIter</a>&lt;T, A&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"IntoIter<T, A>\">â“˜</a></h4></section></summary><div class=\"docblock\"><p>Gets an iterator for moving out the <code>BTreeSet</code>â€™s contents in ascending order.</p>\n<h5 id=\"examples-33\"><a class=\"doc-anchor\" href=\"#examples-33\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::BTreeSet;\n\n<span class=\"kw\">let </span>set = BTreeSet::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw\">_</span>&gt; = set.into_iter().collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::BTreeSet;%0A++++%0A++++let+set+=+BTreeSet::from(%5B1,+2,+3,+4%5D);%0A++++%0A++++let+v:+Vec%3C_%3E+=+set.into_iter().collect();%0A++++assert_eq!(v,+%5B1,+2,+3,+4%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"../iter/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = T</h4></section></summary><div class=\"docblock\">The type of the elements being iterated over.</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoIter\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"../iter/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"btree_set/struct.IntoIter.html\" title=\"struct std::collections::btree_set::IntoIter\">IntoIter</a>&lt;T, A&gt;</h4></section></summary><div class=\"docblock\">Which kind of iterator are we turning this into?</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Ord-for-BTreeSet%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#107\">source</a></span><a href=\"#impl-Ord-for-BTreeSet%3CT,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"struct.BTreeSet.html\" title=\"struct std::collections::BTreeSet\">BTreeSet</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a> + <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#108\">source</a><a href=\"#method.cmp\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.BTreeSet.html\" title=\"struct std::collections::BTreeSet\">BTreeSet</a>&lt;T, A&gt;) -&gt; <a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a></h4></section></summary><div class=\"docblock\">This method returns an <a href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"../cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#856-858\">source</a></span><a href=\"#method.max\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Compares and returns the maximum of two values. <a href=\"../cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#877-879\">source</a></span><a href=\"#method.min\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Compares and returns the minimum of two values. <a href=\"../cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#903-906\">source</a></span><a href=\"#method.clamp\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>,</div></h4></section></summary><div class=\"docblock\">Restrict a value to a certain interval. <a href=\"../cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq-for-BTreeSet%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#90\">source</a></span><a href=\"#impl-PartialEq-for-BTreeSet%3CT,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"struct.BTreeSet.html\" title=\"struct std::collections::BTreeSet\">BTreeSet</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>,\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a> + <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#91\">source</a><a href=\"#method.eq\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.BTreeSet.html\" title=\"struct std::collections::BTreeSet\">BTreeSet</a>&lt;T, A&gt;) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialOrd-for-BTreeSet%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#100\">source</a></span><a href=\"#impl-PartialOrd-for-BTreeSet%3CT,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a> for <a class=\"struct\" href=\"struct.BTreeSet.html\" title=\"struct std::collections::BTreeSet\">BTreeSet</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>,\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a> + <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#101\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.BTreeSet.html\" title=\"struct std::collections::BTreeSet\">BTreeSet</a>&lt;T, A&gt;) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\">This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"../cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180\">source</a></span><a href=\"#method.lt\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"../cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198\">source</a></span><a href=\"#method.le\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"../cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215\">source</a></span><a href=\"#method.gt\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"../cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233\">source</a></span><a href=\"#method.ge\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"../cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Sub%3C%26BTreeSet%3CT,+A%3E%3E-for-%26BTreeSet%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#1353\">source</a></span><a href=\"#impl-Sub%3C%26BTreeSet%3CT,+A%3E%3E-for-%26BTreeSet%3CT,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a>&lt;&amp;<a class=\"struct\" href=\"struct.BTreeSet.html\" title=\"struct std::collections::BTreeSet\">BTreeSet</a>&lt;T, A&gt;&gt; for &amp;<a class=\"struct\" href=\"struct.BTreeSet.html\" title=\"struct std::collections::BTreeSet\">BTreeSet</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> + <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a> + <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sub\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#1369\">source</a><a href=\"#method.sub\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, rhs: &amp;<a class=\"struct\" href=\"struct.BTreeSet.html\" title=\"struct std::collections::BTreeSet\">BTreeSet</a>&lt;T, A&gt;) -&gt; <a class=\"struct\" href=\"struct.BTreeSet.html\" title=\"struct std::collections::BTreeSet\">BTreeSet</a>&lt;T, A&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the difference of <code>self</code> and <code>rhs</code> as a new <code>BTreeSet&lt;T&gt;</code>.</p>\n<h5 id=\"examples-32\"><a class=\"doc-anchor\" href=\"#examples-32\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::BTreeSet;\n\n<span class=\"kw\">let </span>a = BTreeSet::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"kw\">let </span>b = BTreeSet::from([<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]);\n\n<span class=\"kw\">let </span>result = <span class=\"kw-2\">&amp;</span>a - <span class=\"kw-2\">&amp;</span>b;\n<span class=\"macro\">assert_eq!</span>(result, BTreeSet::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>]));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::BTreeSet;%0A++++%0A++++let+a+=+BTreeSet::from(%5B1,+2,+3%5D);%0A++++let+b+=+BTreeSet::from(%5B3,+4,+5%5D);%0A++++%0A++++let+result+=+%26a+-+%26b;%0A++++assert_eq!(result,+BTreeSet::from(%5B1,+2%5D));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-3\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-3\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"struct.BTreeSet.html\" title=\"struct std::collections::BTreeSet\">BTreeSet</a>&lt;T, A&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>-</code> operator.</div></details></div></details><section id=\"impl-Eq-for-BTreeSet%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#97\">source</a></span><a href=\"#impl-Eq-for-BTreeSet%3CT,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"struct.BTreeSet.html\" title=\"struct std::collections::BTreeSet\">BTreeSet</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a>,\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a> + <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></div><h2 id=\"synthetic-implementations\" class=\"section-header\">Auto Trait Implementations<a href=\"#synthetic-implementations\" class=\"anchor\">Â§</a></h2><div id=\"synthetic-implementations-list\"><section id=\"impl-Freeze-for-BTreeSet%3CT,+A%3E\" class=\"impl\"><a href=\"#impl-Freeze-for-BTreeSet%3CT,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"struct\" href=\"struct.BTreeSet.html\" title=\"struct std::collections::BTreeSet\">BTreeSet</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a>,</div></h3></section><section id=\"impl-RefUnwindSafe-for-BTreeSet%3CT,+A%3E\" class=\"impl\"><a href=\"#impl-RefUnwindSafe-for-BTreeSet%3CT,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"struct\" href=\"struct.BTreeSet.html\" title=\"struct std::collections::BTreeSet\">BTreeSet</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a>,\n    T: <a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a>,</div></h3></section><section id=\"impl-Send-for-BTreeSet%3CT,+A%3E\" class=\"impl\"><a href=\"#impl-Send-for-BTreeSet%3CT,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"struct\" href=\"struct.BTreeSet.html\" title=\"struct std::collections::BTreeSet\">BTreeSet</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a>,\n    T: <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a>,</div></h3></section><section id=\"impl-Sync-for-BTreeSet%3CT,+A%3E\" class=\"impl\"><a href=\"#impl-Sync-for-BTreeSet%3CT,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"struct.BTreeSet.html\" title=\"struct std::collections::BTreeSet\">BTreeSet</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a>,\n    T: <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a>,</div></h3></section><section id=\"impl-Unpin-for-BTreeSet%3CT,+A%3E\" class=\"impl\"><a href=\"#impl-Unpin-for-BTreeSet%3CT,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"struct\" href=\"struct.BTreeSet.html\" title=\"struct std::collections::BTreeSet\">BTreeSet</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a>,</div></h3></section><section id=\"impl-UnwindSafe-for-BTreeSet%3CT,+A%3E\" class=\"impl\"><a href=\"#impl-UnwindSafe-for-BTreeSet%3CT,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"struct.BTreeSet.html\" title=\"struct std::collections::BTreeSet\">BTreeSet</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a>,\n    T: <a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a>,</div></h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">Â§</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Any-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a><a href=\"#impl-Any-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#141\">source</a><a href=\"#method.type_id\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../any/trait.Any.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\">Gets the <code>TypeId</code> of <code>self</code>. <a href=\"../any/trait.Any.html#tymethod.type_id\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Borrow%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208\">source</a><a href=\"#impl-Borrow%3CT%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#210\">source</a><a href=\"#method.borrow\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216\">source</a><a href=\"#impl-BorrowMut%3CT%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#217\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765\">source</a><a href=\"#impl-From%3CT%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768\">source</a><a href=\"#method.from-1\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the argument unchanged.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Into%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750\">source</a><a href=\"#impl-Into%3CU%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758\">source</a><a href=\"#method.into\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; U</h4></section></summary><div class=\"docblock\"><p>Calls <code>U::from(self)</code>.</p>\n<p>That is, this conversion is whatever the implementation of\n<code><a href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for U</code> chooses to do.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-ToOwned-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85\">source</a><a href=\"#impl-ToOwned-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.ToOwned.html\" title=\"trait std::borrow::ToOwned\">ToOwned</a> for T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Owned\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Owned\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"../borrow/trait.ToOwned.html#associatedtype.Owned\" class=\"associatedtype\">Owned</a> = T</h4></section></summary><div class=\"docblock\">The resulting type after obtaining ownership.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_owned\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88\">source</a><a href=\"#method.to_owned\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.ToOwned.html#tymethod.to_owned\" class=\"fn\">to_owned</a>(&amp;self) -&gt; T</h4></section></summary><div class=\"docblock\">Creates owned data from borrowed data, usually by cloning. <a href=\"../borrow/trait.ToOwned.html#tymethod.to_owned\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92\">source</a><a href=\"#method.clone_into\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.ToOwned.html#method.clone_into\" class=\"fn\">clone_into</a>(&amp;self, target: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>)</h4></section></summary><div class=\"docblock\">Uses borrowed data to replace owned data, usually by cloning. <a href=\"../borrow/trait.ToOwned.html#method.clone_into\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryFrom%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807\">source</a><a href=\"#impl-TryFrom%3CU%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812\">source</a><a href=\"#method.try_from\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: U) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, &lt;T as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryInto%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792\">source</a><a href=\"#impl-TryInto%3CU%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryInto.html\" title=\"trait std::convert::TryInto\">TryInto</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryInto.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797\">source</a><a href=\"#method.try_into\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryInto.html#tymethod.try_into\" class=\"fn\">try_into</a>(self) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;U, &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details></div><script type=\"text/json\" id=\"notable-traits-data\">{\"Difference<'a, T, A>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"btree_set/struct.Difference.html\\\" title=\\\"struct std::collections::btree_set::Difference\\\">Difference</a>&lt;'a, T, A&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a, T, A&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"btree_set/struct.Difference.html\\\" title=\\\"struct std::collections::btree_set::Difference\\\">Difference</a>&lt;'a, T, A&gt;<div class=\\\"where\\\">where\\n    T: <a class=\\\"trait\\\" href=\\\"../cmp/trait.Ord.html\\\" title=\\\"trait std::cmp::Ord\\\">Ord</a>,\\n    A: <a class=\\\"trait\\\" href=\\\"../alloc/trait.Allocator.html\\\" title=\\\"trait std::alloc::Allocator\\\">Allocator</a> + <a class=\\\"trait\\\" href=\\\"../clone/trait.Clone.html\\\" title=\\\"trait std::clone::Clone\\\">Clone</a>,</div></div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = <a class=\\\"primitive\\\" href=\\\"../primitive.reference.html\\\">&amp;'a T</a>;</div>\",\"ExtractIf<'a, T, F, A>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"btree_set/struct.ExtractIf.html\\\" title=\\\"struct std::collections::btree_set::ExtractIf\\\">ExtractIf</a>&lt;'_, T, F, A&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a, T, F, A&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"btree_set/struct.ExtractIf.html\\\" title=\\\"struct std::collections::btree_set::ExtractIf\\\">ExtractIf</a>&lt;'_, T, F, A&gt;<div class=\\\"where\\\">where\\n    A: <a class=\\\"trait\\\" href=\\\"../alloc/trait.Allocator.html\\\" title=\\\"trait std::alloc::Allocator\\\">Allocator</a> + <a class=\\\"trait\\\" href=\\\"../clone/trait.Clone.html\\\" title=\\\"trait std::clone::Clone\\\">Clone</a>,\\n    F: 'a + <a class=\\\"trait\\\" href=\\\"../ops/trait.FnMut.html\\\" title=\\\"trait std::ops::FnMut\\\">FnMut</a>(<a class=\\\"primitive\\\" href=\\\"../primitive.reference.html\\\">&amp;T</a>) -&gt; <a class=\\\"primitive\\\" href=\\\"../primitive.bool.html\\\">bool</a>,</div></div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = T;</div>\",\"Intersection<'a, T, A>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"btree_set/struct.Intersection.html\\\" title=\\\"struct std::collections::btree_set::Intersection\\\">Intersection</a>&lt;'a, T, A&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a, T, A&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"btree_set/struct.Intersection.html\\\" title=\\\"struct std::collections::btree_set::Intersection\\\">Intersection</a>&lt;'a, T, A&gt;<div class=\\\"where\\\">where\\n    T: <a class=\\\"trait\\\" href=\\\"../cmp/trait.Ord.html\\\" title=\\\"trait std::cmp::Ord\\\">Ord</a>,\\n    A: <a class=\\\"trait\\\" href=\\\"../alloc/trait.Allocator.html\\\" title=\\\"trait std::alloc::Allocator\\\">Allocator</a> + <a class=\\\"trait\\\" href=\\\"../clone/trait.Clone.html\\\" title=\\\"trait std::clone::Clone\\\">Clone</a>,</div></div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = <a class=\\\"primitive\\\" href=\\\"../primitive.reference.html\\\">&amp;'a T</a>;</div>\",\"IntoIter<T, A>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"btree_set/struct.IntoIter.html\\\" title=\\\"struct std::collections::btree_set::IntoIter\\\">IntoIter</a>&lt;T, A&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;T, A&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"btree_set/struct.IntoIter.html\\\" title=\\\"struct std::collections::btree_set::IntoIter\\\">IntoIter</a>&lt;T, A&gt;<div class=\\\"where\\\">where\\n    A: <a class=\\\"trait\\\" href=\\\"../alloc/trait.Allocator.html\\\" title=\\\"trait std::alloc::Allocator\\\">Allocator</a> + <a class=\\\"trait\\\" href=\\\"../clone/trait.Clone.html\\\" title=\\\"trait std::clone::Clone\\\">Clone</a>,</div></div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = T;</div>\",\"Iter<'_, T>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"btree_set/struct.Iter.html\\\" title=\\\"struct std::collections::btree_set::Iter\\\">Iter</a>&lt;'a, T&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a, T&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"btree_set/struct.Iter.html\\\" title=\\\"struct std::collections::btree_set::Iter\\\">Iter</a>&lt;'a, T&gt;</div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = <a class=\\\"primitive\\\" href=\\\"../primitive.reference.html\\\">&amp;'a T</a>;</div>\",\"Iter<'a, T>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"btree_set/struct.Iter.html\\\" title=\\\"struct std::collections::btree_set::Iter\\\">Iter</a>&lt;'a, T&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a, T&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"btree_set/struct.Iter.html\\\" title=\\\"struct std::collections::btree_set::Iter\\\">Iter</a>&lt;'a, T&gt;</div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = <a class=\\\"primitive\\\" href=\\\"../primitive.reference.html\\\">&amp;'a T</a>;</div>\",\"Range<'_, T>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"btree_set/struct.Range.html\\\" title=\\\"struct std::collections::btree_set::Range\\\">Range</a>&lt;'a, T&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a, T&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"btree_set/struct.Range.html\\\" title=\\\"struct std::collections::btree_set::Range\\\">Range</a>&lt;'a, T&gt;</div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = <a class=\\\"primitive\\\" href=\\\"../primitive.reference.html\\\">&amp;'a T</a>;</div>\",\"SymmetricDifference<'a, T>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"btree_set/struct.SymmetricDifference.html\\\" title=\\\"struct std::collections::btree_set::SymmetricDifference\\\">SymmetricDifference</a>&lt;'a, T&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a, T&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"btree_set/struct.SymmetricDifference.html\\\" title=\\\"struct std::collections::btree_set::SymmetricDifference\\\">SymmetricDifference</a>&lt;'a, T&gt;<div class=\\\"where\\\">where\\n    T: <a class=\\\"trait\\\" href=\\\"../cmp/trait.Ord.html\\\" title=\\\"trait std::cmp::Ord\\\">Ord</a>,</div></div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = <a class=\\\"primitive\\\" href=\\\"../primitive.reference.html\\\">&amp;'a T</a>;</div>\",\"Union<'a, T>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"btree_set/struct.Union.html\\\" title=\\\"struct std::collections::btree_set::Union\\\">Union</a>&lt;'a, T&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a, T&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"btree_set/struct.Union.html\\\" title=\\\"struct std::collections::btree_set::Union\\\">Union</a>&lt;'a, T&gt;<div class=\\\"where\\\">where\\n    T: <a class=\\\"trait\\\" href=\\\"../cmp/trait.Ord.html\\\" title=\\\"trait std::cmp::Ord\\\">Ord</a>,</div></div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = <a class=\\\"primitive\\\" href=\\\"../primitive.reference.html\\\">&amp;'a T</a>;</div>\"}</script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:13:58.148Z"
}