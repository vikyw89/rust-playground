{
	"title": "What is rustdoc? - The rustdoc book",
	"url": "https://doc.rust-lang.org/rustdoc/index.html",
	"markdown": "# What is rustdoc? - The rustdoc book\n\nThe standard Rust distribution ships with a tool called `rustdoc`. Its job is to generate documentation for Rust projects. On a fundamental level, Rustdoc takes as an argument either a crate root or a Markdown file, and produces HTML, CSS, and JavaScript.\n\n## [Basic usage](#basic-usage)\n\nLet's give it a try! Create a new project with Cargo:\n\n```bash\n$ cargo new docs --lib\n$ cd docs\n\n```\n\nIn `src/lib.rs`, Cargo has generated some sample code. Delete it and replace it with this:\n\n```rust\n#![allow(unused)]\nfn main() {\n/// foo is a function\nfn foo() {}\n}\n```\n\nLet's run `rustdoc` on our code. To do so, we can call it with the path to our crate root like this:\n\n```bash\n$ rustdoc src/lib.rs\n\n```\n\nThis will create a new directory, `doc`, with a website inside! In our case, the main page is located in `doc/lib/index.html`. If you open that up in a web browser, you will see a page with a search bar, and \"Crate lib\" at the top, with no contents.\n\nYou can also use `cargo doc` to generate documentation for the whole project. See [Using rustdoc with Cargo](#using-rustdoc-with-cargo).\n\n## [Configuring rustdoc](#configuring-rustdoc)\n\nThere are two problems with this: first, why does it think that our crate is named \"lib\"? Second, why does it not have any contents?\n\nThe first problem is due to `rustdoc` trying to be helpful; like `rustc`, it assumes that our crate's name is the name of the file for the crate root. To fix this, we can pass in a command-line flag:\n\n```bash\n$ rustdoc src/lib.rs --crate-name docs\n\n```\n\nNow, `doc/docs/index.html` will be generated, and the page says \"Crate docs.\"\n\nFor the second issue, it is because our function `foo` is not public; `rustdoc` defaults to generating documentation for only public functions. If we change our code...\n\n```rust\n#![allow(unused)]\nfn main() {\n/// foo is a function\npub fn foo() {}\n}\n```\n\n... and then re-run `rustdoc`:\n\n```bash\n$ rustdoc src/lib.rs --crate-name docs\n\n```\n\nWe now have some generated documentation. Open up `doc/docs/index.html` and check it out! It should show a link to the `foo` function's page, which is located at `doc/docs/fn.foo.html`. On that page, you'll see the \"foo is a function\" we put inside the documentation comment in our crate.\n\n## [Using rustdoc with Cargo](#using-rustdoc-with-cargo)\n\nCargo also has integration with `rustdoc` to make it easier to generate docs. Instead of the `rustdoc` command, we could have done this:\n\n```bash\n$ cargo doc\n\n```\n\nIf you want `cargo` to automatically open the generated documentation, you can use:\n\n```bash\n$ cargo doc --open\n\n```\n\nInternally, `cargo doc` calls out to `rustdoc` like this:\n\n```bash\n$ rustdoc --crate-name docs src/lib.rs -o <path>/docs/target/doc -L\ndependency=<path>/docs/target/debug/deps\n\n```\n\nYou can see this with `cargo doc --verbose`.\n\nIt generates the correct `--crate-name` for us, as well as pointing to `src/lib.rs`. But what about those other arguments?\n\n-   `-o` controls the _o_utput of our docs. Instead of a top-level `doc` directory, notice that Cargo puts generated documentation under `target`. That is the idiomatic place for generated files in Cargo projects.\n-   `-L` flag helps rustdoc find the dependencies your code relies on. If our project used dependencies, we would get documentation for them as well!\n\n## [Outer and inner documentation](#outer-and-inner-documentation)\n\nThe `///` syntax is used to document the item present after it. That's why it is called an outer documentation. There is another syntax: `//!`, which is used to document the item it is present inside. It is called an inner documentation. It is often used when documenting the entire crate, because nothing comes before it: it is the root of the crate. So in order to document an entire crate, you need to use `//!` syntax. For example:\n\n```rust\n#![allow(unused)]\nfn main() {\n//! This is my first rust crate\n}\n```\n\nWhen used in the crate root, it documents the item it is inside, which is the crate itself.\n\nFor more information about the `//!` syntax, see [the Book](https://doc.rust-lang.org/book/ch14-02-publishing-to-crates-io.html#commenting-contained-items).\n\n## [Using standalone Markdown files](#using-standalone-markdown-files)\n\n`rustdoc` can also generate HTML from standalone Markdown files. Let' s give it a try: create a `README.md` file with these contents:\n\n```text\n# Docs\n\nThis is a project to test out `rustdoc`.\n\n[Here is a link!](https://www.rust-lang.org)\n\n## Example\n\n```rust\nfn foo() -> i32 {\n    1 + 1\n}\n```\n\n```\n\nAnd call `rustdoc` on it:\n\n```bash\n$ rustdoc README.md\n\n```\n\nYou will find an HTML file in `docs/doc/README.html` generated from its Markdown contents.\n\nCargo currently does not understand standalone Markdown files, unfortunately.\n\n## [Summary](#summary)\n\nThis covers the simplest use-cases of `rustdoc`. The rest of this book will explain all of the options that `rustdoc` has, and how to use them.",
	"html": "<!DOCTYPE html><html lang=\"en\" class=\"light\" dir=\"ltr\"><head>\n        <!-- Book generated using mdBook -->\n        <meta charset=\"UTF-8\">\n        <title>What is rustdoc? - The rustdoc book</title>\n\n\n        <!-- Custom HTML head -->\n        \n        <meta name=\"description\" content=\"\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <meta name=\"theme-color\" content=\"rgb(255, 255, 255)\">\n\n        <link rel=\"icon\" href=\"favicon.svg\">\n        <link rel=\"shortcut icon\" href=\"favicon.png\">\n        <link rel=\"stylesheet\" href=\"css/variables.css\">\n        <link rel=\"stylesheet\" href=\"css/general.css\">\n        <link rel=\"stylesheet\" href=\"css/chrome.css\">\n        <link rel=\"stylesheet\" href=\"css/print.css\" media=\"print\">\n\n        <!-- Fonts -->\n        <link rel=\"stylesheet\" href=\"FontAwesome/css/font-awesome.css\">\n        <link rel=\"stylesheet\" href=\"fonts/fonts.css\">\n\n        <!-- Highlight.js Stylesheets -->\n        <link rel=\"stylesheet\" href=\"highlight.css\">\n        <link rel=\"stylesheet\" href=\"tomorrow-night.css\" disabled=\"\">\n        <link rel=\"stylesheet\" href=\"ayu-highlight.css\" disabled=\"\">\n\n        <!-- Custom theme stylesheets -->\n\n    </head>\n    <body class=\"js sidebar-visible\">\n    <div id=\"body-container\">\n        <!-- Provide site root to javascript -->\n        <script>\n            var path_to_root = \"\";\n            var default_theme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"navy\" : \"light\";\n        </script>\n\n        <!-- Work around some values being stored in localStorage wrapped in quotes -->\n        <script>\n            try {\n                var theme = localStorage.getItem('mdbook-theme');\n                var sidebar = localStorage.getItem('mdbook-sidebar');\n\n                if (theme.startsWith('\"') && theme.endsWith('\"')) {\n                    localStorage.setItem('mdbook-theme', theme.slice(1, theme.length - 1));\n                }\n\n                if (sidebar.startsWith('\"') && sidebar.endsWith('\"')) {\n                    localStorage.setItem('mdbook-sidebar', sidebar.slice(1, sidebar.length - 1));\n                }\n            } catch (e) { }\n        </script>\n\n        <!-- Set the theme before any content is loaded, prevents flash -->\n        <script>\n            var theme;\n            try { theme = localStorage.getItem('mdbook-theme'); } catch(e) { }\n            if (theme === null || theme === undefined) { theme = default_theme; }\n            var html = document.querySelector('html');\n            html.classList.remove('light')\n            html.classList.add(theme);\n            var body = document.querySelector('body');\n            body.classList.remove('no-js')\n            body.classList.add('js');\n        </script>\n\n        <input type=\"checkbox\" id=\"sidebar-toggle-anchor\" class=\"hidden\">\n\n        <!-- Hide / unhide sidebar before it is displayed -->\n        <script>\n            var body = document.querySelector('body');\n            var sidebar = null;\n            var sidebar_toggle = document.getElementById(\"sidebar-toggle-anchor\");\n            if (document.body.clientWidth >= 1080) {\n                try { sidebar = localStorage.getItem('mdbook-sidebar'); } catch(e) { }\n                sidebar = sidebar || 'visible';\n            } else {\n                sidebar = 'hidden';\n            }\n            sidebar_toggle.checked = sidebar === 'visible';\n            body.classList.remove('sidebar-visible');\n            body.classList.add(\"sidebar-\" + sidebar);\n        </script>\n\n        <nav id=\"sidebar\" class=\"sidebar\" aria-label=\"Table of contents\" aria-hidden=\"false\">\n            <div class=\"sidebar-scrollbox\">\n                <ol class=\"chapter\"><li class=\"chapter-item expanded \"><a href=\"what-is-rustdoc.html\" class=\"active\" tabindex=\"0\"><strong aria-hidden=\"true\">1.</strong> What is rustdoc?</a></li><li class=\"chapter-item expanded \"><a href=\"command-line-arguments.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.</strong> Command-line arguments</a></li><li class=\"chapter-item expanded \"><a href=\"how-to-read-rustdoc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.</strong> How to read rustdoc output</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"read-documentation/in-doc-settings.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.1.</strong> In-doc settings</a></li><li class=\"chapter-item expanded \"><a href=\"read-documentation/search.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.2.</strong> Search</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"how-to-write-documentation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.</strong> How to write documentation</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"write-documentation/what-to-include.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.</strong> What to include (and exclude)</a></li><li class=\"chapter-item expanded \"><a href=\"write-documentation/the-doc-attribute.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.</strong> The #[doc] attribute</a></li><li class=\"chapter-item expanded \"><a href=\"write-documentation/re-exports.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.</strong> Re-exports</a></li><li class=\"chapter-item expanded \"><a href=\"write-documentation/linking-to-items-by-name.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.</strong> Linking to items by name</a></li><li class=\"chapter-item expanded \"><a href=\"write-documentation/documentation-tests.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.</strong> Documentation tests</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"lints.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.</strong> Rustdoc-specific lints</a></li><li class=\"chapter-item expanded \"><a href=\"scraped-examples.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.</strong> Scraped examples</a></li><li class=\"chapter-item expanded \"><a href=\"advanced-features.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.</strong> Advanced features</a></li><li class=\"chapter-item expanded \"><a href=\"unstable-features.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.</strong> Unstable features</a></li><li class=\"chapter-item expanded \"><a href=\"deprecated-features.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.</strong> Deprecated features</a></li><li class=\"chapter-item expanded \"><a href=\"references.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.</strong> References</a></li></ol>\n            </div>\n            <div id=\"sidebar-resize-handle\" class=\"sidebar-resize-handle\">\n                <div class=\"sidebar-resize-indicator\"></div>\n            </div>\n        </nav>\n\n        <!-- Track and set sidebar scroll position -->\n        <script>\n            var sidebarScrollbox = document.querySelector('#sidebar .sidebar-scrollbox');\n            sidebarScrollbox.addEventListener('click', function(e) {\n                if (e.target.tagName === 'A') {\n                    sessionStorage.setItem('sidebar-scroll', sidebarScrollbox.scrollTop);\n                }\n            }, { passive: true });\n            var sidebarScrollTop = sessionStorage.getItem('sidebar-scroll');\n            sessionStorage.removeItem('sidebar-scroll');\n            if (sidebarScrollTop) {\n                // preserve sidebar scroll position when navigating via links within sidebar\n                sidebarScrollbox.scrollTop = sidebarScrollTop;\n            } else {\n                // scroll sidebar to current active section when navigating via \"next/previous chapter\" buttons\n                var activeSection = document.querySelector('#sidebar .active');\n                if (activeSection) {\n                    activeSection.scrollIntoView({ block: 'center' });\n                }\n            }\n        </script>\n\n        <div id=\"page-wrapper\" class=\"page-wrapper\">\n\n            <div class=\"page\">\n                                <div id=\"menu-bar-hover-placeholder\"></div>\n                <div id=\"menu-bar\" class=\"menu-bar\" style=\"top: 0px;\">\n                    <div class=\"left-buttons\">\n                        <label id=\"sidebar-toggle\" class=\"icon-button\" for=\"sidebar-toggle-anchor\" title=\"Toggle Table of Contents\" aria-label=\"Toggle Table of Contents\" aria-controls=\"sidebar\" aria-expanded=\"true\">\n                            <i class=\"fa fa-bars\"></i>\n                        </label>\n                        <button id=\"theme-toggle\" class=\"icon-button\" type=\"button\" title=\"Change theme\" aria-label=\"Change theme\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-controls=\"theme-list\">\n                            <i class=\"fa fa-paint-brush\"></i>\n                        </button>\n                        <ul id=\"theme-list\" class=\"theme-popup\" aria-label=\"Themes\" role=\"menu\">\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme theme-selected\" id=\"light\">Light</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"rust\">Rust</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"coal\">Coal</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"navy\">Navy</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"ayu\">Ayu</button></li>\n                        </ul>\n                        <button id=\"search-toggle\" class=\"icon-button\" type=\"button\" title=\"Search. (Shortkey: s)\" aria-label=\"Toggle Searchbar\" aria-expanded=\"false\" aria-keyshortcuts=\"S\" aria-controls=\"searchbar\">\n                            <i class=\"fa fa-search\"></i>\n                        </button>\n                    </div>\n\n                    <h1 class=\"menu-title\">The rustdoc book</h1>\n\n                    <div class=\"right-buttons\">\n                        <a href=\"print.html\" title=\"Print this book\" aria-label=\"Print this book\">\n                            <i id=\"print-button\" class=\"fa fa-print\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/rust/tree/master/src/doc/rustdoc\" title=\"Git repository\" aria-label=\"Git repository\">\n                            <i id=\"git-repository-button\" class=\"fa fa-github\"></i>\n                        </a>\n\n                    </div>\n                </div>\n\n                <div id=\"search-wrapper\" class=\"hidden\">\n                    <form id=\"searchbar-outer\" class=\"searchbar-outer\">\n                        <input type=\"search\" id=\"searchbar\" name=\"searchbar\" placeholder=\"Search this book ...\" aria-controls=\"searchresults-outer\" aria-describedby=\"searchresults-header\">\n                    </form>\n                    <div id=\"searchresults-outer\" class=\"searchresults-outer hidden\">\n                        <div id=\"searchresults-header\" class=\"searchresults-header\"></div>\n                        <ul id=\"searchresults\">\n                        </ul>\n                    </div>\n                </div>\n\n                <!-- Apply ARIA attributes after the sidebar and the sidebar toggle button are added to the DOM -->\n                <script>\n                    document.getElementById('sidebar-toggle').setAttribute('aria-expanded', sidebar === 'visible');\n                    document.getElementById('sidebar').setAttribute('aria-hidden', sidebar !== 'visible');\n                    Array.from(document.querySelectorAll('#sidebar a')).forEach(function(link) {\n                        link.setAttribute('tabIndex', sidebar === 'visible' ? 0 : -1);\n                    });\n                </script>\n\n                <div id=\"content\" class=\"content\">\n                    <main>\n                        <h1 id=\"what-is-rustdoc\"><a class=\"header\" href=\"#what-is-rustdoc\">What is rustdoc?</a></h1>\n<p>The standard Rust distribution ships with a tool called <code class=\"hljs\">rustdoc</code>. Its job is\nto generate documentation for Rust projects. On a fundamental level, Rustdoc\ntakes as an argument either a crate root or a Markdown file, and produces HTML,\nCSS, and JavaScript.</p>\n<h2 id=\"basic-usage\"><a class=\"header\" href=\"#basic-usage\">Basic usage</a></h2>\n<p>Let's give it a try! Create a new project with Cargo:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-bash hljs\">$ cargo new docs --lib\n$ <span class=\"hljs-built_in\">cd</span> docs\n</code></pre>\n<p>In <code class=\"hljs\">src/lib.rs</code>, Cargo has generated some sample code. Delete\nit and replace it with this:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">/// foo is a function</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>() {}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Let's run <code class=\"hljs\">rustdoc</code> on our code. To do so, we can call it with the path to\nour crate root like this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-bash hljs\">$ rustdoc src/lib.rs\n</code></pre>\n<p>This will create a new directory, <code class=\"hljs\">doc</code>, with a website inside! In our case,\nthe main page is located in <code class=\"hljs\">doc/lib/index.html</code>. If you open that up in\na web browser, you will see a page with a search bar, and \"Crate lib\" at the\ntop, with no contents.</p>\n<p>You can also use <code class=\"hljs\">cargo doc</code> to generate documentation for the whole project.\nSee <a href=\"#using-rustdoc-with-cargo\">Using rustdoc with Cargo</a>.</p>\n<h2 id=\"configuring-rustdoc\"><a class=\"header\" href=\"#configuring-rustdoc\">Configuring rustdoc</a></h2>\n<p>There are two problems with this: first, why does it\nthink that our crate is named \"lib\"? Second, why does it not have any\ncontents?</p>\n<p>The first problem is due to <code class=\"hljs\">rustdoc</code> trying to be helpful; like <code class=\"hljs\">rustc</code>,\nit assumes that our crate's name is the name of the file for the crate\nroot. To fix this, we can pass in a command-line flag:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-bash hljs\">$ rustdoc src/lib.rs --crate-name docs\n</code></pre>\n<p>Now, <code class=\"hljs\">doc/docs/index.html</code> will be generated, and the page says \"Crate docs.\"</p>\n<p>For the second issue, it is because our function <code class=\"hljs\">foo</code> is not public; <code class=\"hljs\">rustdoc</code>\ndefaults to generating documentation for only public functions. If we change\nour code...</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">/// foo is a function</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>() {}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>... and then re-run <code class=\"hljs\">rustdoc</code>:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-bash hljs\">$ rustdoc src/lib.rs --crate-name docs\n</code></pre>\n<p>We now have some generated documentation. Open up <code class=\"hljs\">doc/docs/index.html</code> and\ncheck it out! It should show a link to the <code class=\"hljs\">foo</code> function's page, which\nis located at <code class=\"hljs\">doc/docs/fn.foo.html</code>. On that page, you'll see the \"foo is\na function\" we put inside the documentation comment in our crate.</p>\n<h2 id=\"using-rustdoc-with-cargo\"><a class=\"header\" href=\"#using-rustdoc-with-cargo\">Using rustdoc with Cargo</a></h2>\n<p>Cargo also has integration with <code class=\"hljs\">rustdoc</code> to make it easier to generate\ndocs. Instead of the <code class=\"hljs\">rustdoc</code> command, we could have done this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-bash hljs\">$ cargo doc\n</code></pre>\n<p>If you want <code class=\"hljs\">cargo</code> to automatically open the generated documentation, you can use:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-bash hljs\">$ cargo doc --open\n</code></pre>\n<p>Internally, <code class=\"hljs\">cargo doc</code> calls out to <code class=\"hljs\">rustdoc</code> like this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-bash hljs\">$ rustdoc --crate-name docs src/lib.rs -o &lt;path&gt;/docs/target/doc -L\ndependency=&lt;path&gt;/docs/target/debug/deps\n</code></pre>\n<p>You can see this with <code class=\"hljs\">cargo doc --verbose</code>.</p>\n<p>It generates the correct <code class=\"hljs\">--crate-name</code> for us, as well as pointing to\n<code class=\"hljs\">src/lib.rs</code>. But what about those other arguments?</p>\n<ul>\n<li><code class=\"hljs\">-o</code> controls the <em>o</em>utput of our docs. Instead of a top-level\n<code class=\"hljs\">doc</code> directory, notice that Cargo puts generated documentation under\n<code class=\"hljs\">target</code>. That is the idiomatic place for generated files in Cargo projects.</li>\n<li><code class=\"hljs\">-L</code> flag helps rustdoc find the dependencies your code relies on.\nIf our project used dependencies, we would get documentation for them as well!</li>\n</ul>\n<h2 id=\"outer-and-inner-documentation\"><a class=\"header\" href=\"#outer-and-inner-documentation\">Outer and inner documentation</a></h2>\n<p>The <code class=\"hljs\">///</code> syntax is used to document the item present after it.\nThat's why it is called an outer documentation.\nThere is another syntax: <code class=\"hljs\">//!</code>, which is used to document the\nitem it is present inside. It is called an inner documentation.\nIt is often used when documenting the entire crate,\nbecause nothing comes before it: it is the root of the crate.\nSo in order to document an entire crate, you need to use <code class=\"hljs\">//!</code> syntax.\nFor example:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">//! This is my first rust crate</span>\n<span class=\"boring\">}</span></code></pre></pre>\n<p>When used in the crate root, it documents the item it is inside,\nwhich is the crate itself.</p>\n<p>For more information about the <code class=\"hljs\">//!</code> syntax, see <a href=\"https://doc.rust-lang.org/book/ch14-02-publishing-to-crates-io.html#commenting-contained-items\">the Book</a>.</p>\n<h2 id=\"using-standalone-markdown-files\"><a class=\"header\" href=\"#using-standalone-markdown-files\">Using standalone Markdown files</a></h2>\n<p><code class=\"hljs\">rustdoc</code> can also generate HTML from standalone Markdown files. Let' s\ngive it a try: create a <code class=\"hljs\">README.md</code> file with these contents:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\"># Docs\n\nThis is a project to test out `rustdoc`.\n\n[Here is a link!](https://www.rust-lang.org)\n\n## Example\n\n```rust\nfn foo() -&gt; i32 {\n    1 + 1\n}\n```\n</code></pre>\n<p>And call <code class=\"hljs\">rustdoc</code> on it:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-bash hljs\">$ rustdoc README.md\n</code></pre>\n<p>You will find an HTML file in <code class=\"hljs\">docs/doc/README.html</code> generated from its\nMarkdown contents.</p>\n<p>Cargo currently does not understand standalone Markdown files, unfortunately.</p>\n<h2 id=\"summary\"><a class=\"header\" href=\"#summary\">Summary</a></h2>\n<p>This covers the simplest use-cases of <code class=\"hljs\">rustdoc</code>. The rest of this book will\nexplain all of the options that <code class=\"hljs\">rustdoc</code> has, and how to use them.</p>\n\n                    </main>\n\n                    <nav class=\"nav-wrapper\" aria-label=\"Page navigation\">\n                        <!-- Mobile navigation buttons -->\n\n                            <a rel=\"next prefetch\" href=\"command-line-arguments.html\" class=\"mobile-nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                                <i class=\"fa fa-angle-right\"></i>\n                            </a>\n\n                        <div style=\"clear: both\"></div>\n                    </nav>\n                </div>\n            </div>\n\n            <nav class=\"nav-wide-wrapper\" aria-label=\"Page navigation\">\n\n                    <a rel=\"next prefetch\" href=\"command-line-arguments.html\" class=\"nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                        <i class=\"fa fa-angle-right\"></i>\n                    </a>\n            </nav>\n\n        </div>\n\n\n\n\n        <script>\n            window.playground_copyable = true;\n        </script>\n\n\n        <script src=\"elasticlunr.min.js\"></script>\n        <script src=\"mark.min.js\"></script>\n        <script src=\"searcher.js\"></script>\n\n        <script src=\"clipboard.min.js\"></script>\n        <script src=\"highlight.js\"></script>\n        <script src=\"book.js\"></script>\n\n        <!-- Custom JS scripts -->\n\n\n    </div>\n    \n\n</body></html>",
	"crawlDate": "2024-07-28T05:20:43.804Z"
}