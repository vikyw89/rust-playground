{
	"title": "from_raw_parts_mut in std::slice - Rust",
	"url": "https://doc.rust-lang.org/stable/std/slice/fn.from_raw_parts_mut.html",
	"markdown": "# from\\_raw\\_parts\\_mut in std::slice - Rust\n\n```\npub unsafe fn from_raw_parts_mut<'a, T>(data: *mut T, len: usize) -> &'a mut [T]\n```\n\nExpand description\n\nPerforms the same functionality as [`from_raw_parts`](fn.from_raw_parts.html \"fn std::slice::from_raw_parts\"), except that a mutable slice is returned.\n\n## [§](#safety)Safety\n\nBehavior is undefined if any of the following conditions are violated:\n\n-   `data` must be [valid](about:blank/ptr/index.html#safety \"mod std::ptr\") for both reads and writes for `len * mem::size_of::<T>()` many bytes, and it must be properly aligned. This means in particular:\n    \n    -   The entire memory range of this slice must be contained within a single allocated object! Slices can never span across multiple allocated objects.\n    -   `data` must be non-null and aligned even for zero-length slices. One reason for this is that enum layout optimizations may rely on references (including slices of any length) being aligned and non-null to distinguish them from other data. You can obtain a pointer that is usable as `data` for zero-length slices using [`NonNull::dangling()`](about:blank/ptr/struct.NonNull.html#method.dangling \"associated function std::ptr::NonNull::dangling\").\n-   `data` must point to `len` consecutive properly initialized values of type `T`.\n    \n-   The memory referenced by the returned slice must not be accessed through any other pointer (not derived from the return value) for the duration of lifetime `'a`. Both read and write accesses are forbidden.\n    \n-   The total size `len * mem::size_of::<T>()` of the slice must be no larger than `isize::MAX`, and adding that size to `data` must not “wrap around” the address space. See the safety documentation of [`pointer::offset`](about:blank/primitive.pointer.html#method.offset \"method pointer::offset\").",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Performs the same functionality as `from_raw_parts`, except that a mutable slice is returned.\"><title>from_raw_parts_mut in std::slice - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc fn\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><div class=\"sidebar-elems\"><h2><a href=\"index.html\">In std::slice</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.ArrayChunks.html\">ArrayChunks</a></li><li><a href=\"struct.ArrayChunksMut.html\">ArrayChunksMut</a></li><li><a href=\"struct.ArrayWindows.html\">ArrayWindows</a></li><li><a href=\"struct.ChunkBy.html\">ChunkBy</a></li><li><a href=\"struct.ChunkByMut.html\">ChunkByMut</a></li><li><a href=\"struct.Chunks.html\">Chunks</a></li><li><a href=\"struct.ChunksExact.html\">ChunksExact</a></li><li><a href=\"struct.ChunksExactMut.html\">ChunksExactMut</a></li><li><a href=\"struct.ChunksMut.html\">ChunksMut</a></li><li><a href=\"struct.EscapeAscii.html\">EscapeAscii</a></li><li><a href=\"struct.Iter.html\">Iter</a></li><li><a href=\"struct.IterMut.html\">IterMut</a></li><li><a href=\"struct.RChunks.html\">RChunks</a></li><li><a href=\"struct.RChunksExact.html\">RChunksExact</a></li><li><a href=\"struct.RChunksExactMut.html\">RChunksExactMut</a></li><li><a href=\"struct.RChunksMut.html\">RChunksMut</a></li><li><a href=\"struct.RSplit.html\">RSplit</a></li><li><a href=\"struct.RSplitMut.html\">RSplitMut</a></li><li><a href=\"struct.RSplitN.html\">RSplitN</a></li><li><a href=\"struct.RSplitNMut.html\">RSplitNMut</a></li><li><a href=\"struct.Split.html\">Split</a></li><li><a href=\"struct.SplitInclusive.html\">SplitInclusive</a></li><li><a href=\"struct.SplitInclusiveMut.html\">SplitInclusiveMut</a></li><li><a href=\"struct.SplitMut.html\">SplitMut</a></li><li><a href=\"struct.SplitN.html\">SplitN</a></li><li><a href=\"struct.SplitNMut.html\">SplitNMut</a></li><li><a href=\"struct.Windows.html\">Windows</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.Concat.html\">Concat</a></li><li><a href=\"trait.Join.html\">Join</a></li><li><a href=\"trait.SliceIndex.html\">SliceIndex</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.from_mut.html\">from_mut</a></li><li><a href=\"fn.from_mut_ptr_range.html\">from_mut_ptr_range</a></li><li><a href=\"fn.from_ptr_range.html\">from_ptr_range</a></li><li><a href=\"fn.from_raw_parts.html\">from_raw_parts</a></li><li><a href=\"fn.from_raw_parts_mut.html\">from_raw_parts_mut</a></li><li><a href=\"fn.from_ref.html\">from_ref</a></li><li><a href=\"fn.range.html\">range</a></li><li><a href=\"fn.try_range.html\">try_range</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Function <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">slice</a>::<wbr><a class=\"fn\" href=\"#\">from_raw_parts_mut</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67456\" title=\"Tracking issue for const_slice_from_raw_parts_mut\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/raw.rs.html#146\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub unsafe fn from_raw_parts_mut&lt;'a, T&gt;(data: <a class=\"primitive\" href=\"../primitive.pointer.html\">*mut T</a>, len: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; &amp;'a mut <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a></code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Performs the same functionality as <a href=\"fn.from_raw_parts.html\" title=\"fn std::slice::from_raw_parts\"><code>from_raw_parts</code></a>, except that a\nmutable slice is returned.</p>\n<h2 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h2>\n<p>Behavior is undefined if any of the following conditions are violated:</p>\n<ul>\n<li>\n<p><code>data</code> must be <a href=\"../ptr/index.html#safety\" title=\"mod std::ptr\">valid</a> for both reads and writes for <code>len * mem::size_of::&lt;T&gt;()</code> many bytes,\nand it must be properly aligned. This means in particular:</p>\n<ul>\n<li>The entire memory range of this slice must be contained within a single allocated object!\nSlices can never span across multiple allocated objects.</li>\n<li><code>data</code> must be non-null and aligned even for zero-length slices. One\nreason for this is that enum layout optimizations may rely on references\n(including slices of any length) being aligned and non-null to distinguish\nthem from other data. You can obtain a pointer that is usable as <code>data</code>\nfor zero-length slices using <a href=\"../ptr/struct.NonNull.html#method.dangling\" title=\"associated function std::ptr::NonNull::dangling\"><code>NonNull::dangling()</code></a>.</li>\n</ul>\n</li>\n<li>\n<p><code>data</code> must point to <code>len</code> consecutive properly initialized values of type <code>T</code>.</p>\n</li>\n<li>\n<p>The memory referenced by the returned slice must not be accessed through any other pointer\n(not derived from the return value) for the duration of lifetime <code>'a</code>.\nBoth read and write accesses are forbidden.</p>\n</li>\n<li>\n<p>The total size <code>len * mem::size_of::&lt;T&gt;()</code> of the slice must be no larger than <code>isize::MAX</code>,\nand adding that size to <code>data</code> must not “wrap around” the address space.\nSee the safety documentation of <a href=\"../primitive.pointer.html#method.offset\" title=\"method pointer::offset\"><code>pointer::offset</code></a>.</p>\n</li>\n</ul>\n</div></details></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:21:33.293Z"
}