{
	"title": "std::collections::binary_heap - Rust",
	"url": "https://doc.rust-lang.org/stable/std/collections/binary_heap/index.html",
	"markdown": "# std::collections::binary\\_heap - Rust\n\nExpand description\n\nA priority queue implemented with a binary heap.\n\nInsertion and popping the largest element have _O_(log(_n_)) time complexity. Checking the largest element is _O_(1). Converting a vector to a binary heap can be done in-place, and has _O_(_n_) complexity. A binary heap can also be converted to a sorted vector in-place, allowing it to be used for an _O_(_n_ \\* log(_n_)) in-place heapsort.\n\n## [§](#examples)Examples\n\nThis is a larger example that implements [Dijkstra’s algorithm](https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm) to solve the [shortest path problem](https://en.wikipedia.org/wiki/Shortest_path_problem) on a [directed graph](https://en.wikipedia.org/wiki/Directed_graph). It shows how to use [`BinaryHeap`](../struct.BinaryHeap.html \"struct std::collections::BinaryHeap\") with custom types.\n\n```\nuse std::cmp::Ordering;\nuse std::collections::BinaryHeap;\n\n#[derive(Copy, Clone, Eq, PartialEq)]\nstruct State {\n    cost: usize,\n    position: usize,\n}\n\n// The priority queue depends on `Ord`.\n// Explicitly implement the trait so the queue becomes a min-heap\n// instead of a max-heap.\nimpl Ord for State {\n    fn cmp(&self, other: &Self) -> Ordering {\n        // Notice that we flip the ordering on costs.\n        // In case of a tie we compare positions - this step is necessary\n        // to make implementations of `PartialEq` and `Ord` consistent.\n        other.cost.cmp(&self.cost)\n            .then_with(|| self.position.cmp(&other.position))\n    }\n}\n\n// `PartialOrd` needs to be implemented as well.\nimpl PartialOrd for State {\n    fn partial_cmp(&self, other: &Self) -> Option<Ordering> {\n        Some(self.cmp(other))\n    }\n}\n\n// Each node is represented as a `usize`, for a shorter implementation.\nstruct Edge {\n    node: usize,\n    cost: usize,\n}\n\n// Dijkstra's shortest path algorithm.\n\n// Start at `start` and use `dist` to track the current shortest distance\n// to each node. This implementation isn't memory-efficient as it may leave duplicate\n// nodes in the queue. It also uses `usize::MAX` as a sentinel value,\n// for a simpler implementation.\nfn shortest_path(adj_list: &Vec<Vec<Edge>>, start: usize, goal: usize) -> Option<usize> {\n    // dist[node] = current shortest distance from `start` to `node`\n    let mut dist: Vec<_> = (0..adj_list.len()).map(|_| usize::MAX).collect();\n\n    let mut heap = BinaryHeap::new();\n\n    // We're at `start`, with a zero cost\n    dist[start] = 0;\n    heap.push(State { cost: 0, position: start });\n\n    // Examine the frontier with lower cost nodes first (min-heap)\n    while let Some(State { cost, position }) = heap.pop() {\n        // Alternatively we could have continued to find all shortest paths\n        if position == goal { return Some(cost); }\n\n        // Important as we may have already found a better way\n        if cost > dist[position] { continue; }\n\n        // For each node we can reach, see if we can find a way with\n        // a lower cost going through this node\n        for edge in &adj_list[position] {\n            let next = State { cost: cost + edge.cost, position: edge.node };\n\n            // If so, add it to the frontier and continue\n            if next.cost < dist[next.position] {\n                heap.push(next);\n                // Relaxation, we have now found a better way\n                dist[next.position] = next.cost;\n            }\n        }\n    }\n\n    // Goal not reachable\n    None\n}\n\nfn main() {\n    // This is the directed graph we're going to use.\n    // The node numbers correspond to the different states,\n    // and the edge weights symbolize the cost of moving\n    // from one node to another.\n    // Note that the edges are one-way.\n    //\n    //                  7\n    //          +-----------------+\n    //          |                 |\n    //          v   1        2    |  2\n    //          0 -----> 1 -----> 3 ---> 4\n    //          |        ^        ^      ^\n    //          |        | 1      |      |\n    //          |        |        | 3    | 1\n    //          +------> 2 -------+      |\n    //           10      |               |\n    //                   +---------------+\n    //\n    // The graph is represented as an adjacency list where each index,\n    // corresponding to a node value, has a list of outgoing edges.\n    // Chosen for its efficiency.\n    let graph = vec![\n        // Node 0\n        vec![Edge { node: 2, cost: 10 },\n             Edge { node: 1, cost: 1 }],\n        // Node 1\n        vec![Edge { node: 3, cost: 2 }],\n        // Node 2\n        vec![Edge { node: 1, cost: 1 },\n             Edge { node: 3, cost: 3 },\n             Edge { node: 4, cost: 1 }],\n        // Node 3\n        vec![Edge { node: 0, cost: 7 },\n             Edge { node: 4, cost: 2 }],\n        // Node 4\n        vec![]];\n\n    assert_eq!(shortest_path(&graph, 0, 1), Some(1));\n    assert_eq!(shortest_path(&graph, 0, 3), Some(3));\n    assert_eq!(shortest_path(&graph, 3, 0), Some(7));\n    assert_eq!(shortest_path(&graph, 0, 4), Some(5));\n    assert_eq!(shortest_path(&graph, 4, 0), None);\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::cmp::Ordering;%0Ause+std::collections::BinaryHeap;%0A%0A%23%5Bderive(Copy,+Clone,+Eq,+PartialEq)%5D%0Astruct+State+%7B%0A++++cost:+usize,%0A++++position:+usize,%0A%7D%0A%0A//+The+priority+queue+depends+on+%60Ord%60.%0A//+Explicitly+implement+the+trait+so+the+queue+becomes+a+min-heap%0A//+instead+of+a+max-heap.%0Aimpl+Ord+for+State+%7B%0A++++fn+cmp(%26self,+other:+%26Self)+-%3E+Ordering+%7B%0A++++++++//+Notice+that+we+flip+the+ordering+on+costs.%0A++++++++//+In+case+of+a+tie+we+compare+positions+-+this+step+is+necessary%0A++++++++//+to+make+implementations+of+%60PartialEq%60+and+%60Ord%60+consistent.%0A++++++++other.cost.cmp(%26self.cost)%0A++++++++++++.then_with(%7C%7C+self.position.cmp(%26other.position))%0A++++%7D%0A%7D%0A%0A//+%60PartialOrd%60+needs+to+be+implemented+as+well.%0Aimpl+PartialOrd+for+State+%7B%0A++++fn+partial_cmp(%26self,+other:+%26Self)+-%3E+Option%3COrdering%3E+%7B%0A++++++++Some(self.cmp(other))%0A++++%7D%0A%7D%0A%0A//+Each+node+is+represented+as+a+%60usize%60,+for+a+shorter+implementation.%0Astruct+Edge+%7B%0A++++node:+usize,%0A++++cost:+usize,%0A%7D%0A%0A//+Dijkstra%27s+shortest+path+algorithm.%0A%0A//+Start+at+%60start%60+and+use+%60dist%60+to+track+the+current+shortest+distance%0A//+to+each+node.+This+implementation+isn%27t+memory-efficient+as+it+may+leave+duplicate%0A//+nodes+in+the+queue.+It+also+uses+%60usize::MAX%60+as+a+sentinel+value,%0A//+for+a+simpler+implementation.%0Afn+shortest_path(adj_list:+%26Vec%3CVec%3CEdge%3E%3E,+start:+usize,+goal:+usize)+-%3E+Option%3Cusize%3E+%7B%0A++++//+dist%5Bnode%5D+=+current+shortest+distance+from+%60start%60+to+%60node%60%0A++++let+mut+dist:+Vec%3C_%3E+=+(0..adj_list.len()).map(%7C_%7C+usize::MAX).collect();%0A%0A++++let+mut+heap+=+BinaryHeap::new();%0A%0A++++//+We%27re+at+%60start%60,+with+a+zero+cost%0A++++dist%5Bstart%5D+=+0;%0A++++heap.push(State+%7B+cost:+0,+position:+start+%7D);%0A%0A++++//+Examine+the+frontier+with+lower+cost+nodes+first+(min-heap)%0A++++while+let+Some(State+%7B+cost,+position+%7D)+=+heap.pop()+%7B%0A++++++++//+Alternatively+we+could+have+continued+to+find+all+shortest+paths%0A++++++++if+position+==+goal+%7B+return+Some(cost);+%7D%0A%0A++++++++//+Important+as+we+may+have+already+found+a+better+way%0A++++++++if+cost+%3E+dist%5Bposition%5D+%7B+continue;+%7D%0A%0A++++++++//+For+each+node+we+can+reach,+see+if+we+can+find+a+way+with%0A++++++++//+a+lower+cost+going+through+this+node%0A++++++++for+edge+in+%26adj_list%5Bposition%5D+%7B%0A++++++++++++let+next+=+State+%7B+cost:+cost+%2B+edge.cost,+position:+edge.node+%7D;%0A%0A++++++++++++//+If+so,+add+it+to+the+frontier+and+continue%0A++++++++++++if+next.cost+%3C+dist%5Bnext.position%5D+%7B%0A++++++++++++++++heap.push(next);%0A++++++++++++++++//+Relaxation,+we+have+now+found+a+better+way%0A++++++++++++++++dist%5Bnext.position%5D+=+next.cost;%0A++++++++++++%7D%0A++++++++%7D%0A++++%7D%0A%0A++++//+Goal+not+reachable%0A++++None%0A%7D%0A%0Afn+main()+%7B%0A++++//+This+is+the+directed+graph+we%27re+going+to+use.%0A++++//+The+node+numbers+correspond+to+the+different+states,%0A++++//+and+the+edge+weights+symbolize+the+cost+of+moving%0A++++//+from+one+node+to+another.%0A++++//+Note+that+the+edges+are+one-way.%0A++++//%0A++++//++++++++++++++++++7%0A++++//++++++++++%2B-----------------%2B%0A++++//++++++++++%7C+++++++++++++++++%7C%0A++++//++++++++++v+++1++++++++2++++%7C++2%0A++++//++++++++++0+-----%3E+1+-----%3E+3+---%3E+4%0A++++//++++++++++%7C++++++++%5E++++++++%5E++++++%5E%0A++++//++++++++++%7C++++++++%7C+1++++++%7C++++++%7C%0A++++//++++++++++%7C++++++++%7C++++++++%7C+3++++%7C+1%0A++++//++++++++++%2B------%3E+2+-------%2B++++++%7C%0A++++//+++++++++++10++++++%7C+++++++++++++++%7C%0A++++//+++++++++++++++++++%2B---------------%2B%0A++++//%0A++++//+The+graph+is+represented+as+an+adjacency+list+where+each+index,%0A++++//+corresponding+to+a+node+value,+has+a+list+of+outgoing+edges.%0A++++//+Chosen+for+its+efficiency.%0A++++let+graph+=+vec!%5B%0A++++++++//+Node+0%0A++++++++vec!%5BEdge+%7B+node:+2,+cost:+10+%7D,%0A+++++++++++++Edge+%7B+node:+1,+cost:+1+%7D%5D,%0A++++++++//+Node+1%0A++++++++vec!%5BEdge+%7B+node:+3,+cost:+2+%7D%5D,%0A++++++++//+Node+2%0A++++++++vec!%5BEdge+%7B+node:+1,+cost:+1+%7D,%0A+++++++++++++Edge+%7B+node:+3,+cost:+3+%7D,%0A+++++++++++++Edge+%7B+node:+4,+cost:+1+%7D%5D,%0A++++++++//+Node+3%0A++++++++vec!%5BEdge+%7B+node:+0,+cost:+7+%7D,%0A+++++++++++++Edge+%7B+node:+4,+cost:+2+%7D%5D,%0A++++++++//+Node+4%0A++++++++vec!%5B%5D%5D;%0A%0A++++assert_eq!(shortest_path(%26graph,+0,+1),+Some(1));%0A++++assert_eq!(shortest_path(%26graph,+0,+3),+Some(3));%0A++++assert_eq!(shortest_path(%26graph,+3,+0),+Some(7));%0A++++assert_eq!(shortest_path(%26graph,+0,+4),+Some(5));%0A++++assert_eq!(shortest_path(%26graph,+4,+0),+None);%0A%7D&edition=2021)\n\n-   A priority queue implemented with a binary heap.\n    \n-   A draining iterator over the elements of a `BinaryHeap`.\n    \n-   An owning iterator over the elements of a `BinaryHeap`.\n    \n-   An iterator over the elements of a `BinaryHeap`.\n    \n-   Structure wrapping a mutable reference to the greatest item on a `BinaryHeap`.\n    \n-   A draining iterator over the elements of a `BinaryHeap`.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"A priority queue implemented with a binary heap.\"><title>std::collections::binary_heap - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../../\" data-static-root-path=\"../../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"../sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc mod\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">Module binary_heap</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">Module binary_heap</a></h2><div class=\"sidebar-elems\"><section><ul class=\"block\"><li><a href=\"#structs\">Structs</a></li></ul></section><h2><a href=\"../index.html\">In std::collections</a></h2><h3><a href=\"../index.html#modules\">Modules</a></h3><ul class=\"block mod\"><li><a href=\"../binary_heap/index.html\">binary_heap</a></li><li><a href=\"../btree_map/index.html\">btree_map</a></li><li><a href=\"../btree_set/index.html\">btree_set</a></li><li><a href=\"../hash_map/index.html\">hash_map</a></li><li><a href=\"../hash_set/index.html\">hash_set</a></li><li><a href=\"../linked_list/index.html\">linked_list</a></li><li><a href=\"../vec_deque/index.html\">vec_deque</a></li></ul><h3><a href=\"../index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"../struct.BTreeMap.html\">BTreeMap</a></li><li><a href=\"../struct.BTreeSet.html\">BTreeSet</a></li><li><a href=\"../struct.BinaryHeap.html\">BinaryHeap</a></li><li><a href=\"../struct.HashMap.html\">HashMap</a></li><li><a href=\"../struct.HashSet.html\">HashSet</a></li><li><a href=\"../struct.LinkedList.html\">LinkedList</a></li><li><a href=\"../struct.TryReserveError.html\">TryReserveError</a></li><li><a href=\"../struct.VecDeque.html\">VecDeque</a></li></ul><h3><a href=\"../index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"../enum.TryReserveErrorKind.html\">TryReserveErrorKind</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Module <a href=\"../../index.html\">std</a>::<wbr><a href=\"../index.html\">collections</a>::<wbr><a class=\"mod\" href=\"#\">binary_heap</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/mod.rs.html#6\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>A priority queue implemented with a binary heap.</p>\n<p>Insertion and popping the largest element have <em>O</em>(log(<em>n</em>)) time complexity.\nChecking the largest element is <em>O</em>(1). Converting a vector to a binary heap\ncan be done in-place, and has <em>O</em>(<em>n</em>) complexity. A binary heap can also be\nconverted to a sorted vector in-place, allowing it to be used for an <em>O</em>(<em>n</em> * log(<em>n</em>))\nin-place heapsort.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<p>This is a larger example that implements <a href=\"https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm\">Dijkstra’s algorithm</a>\nto solve the <a href=\"https://en.wikipedia.org/wiki/Shortest_path_problem\">shortest path problem</a> on a <a href=\"https://en.wikipedia.org/wiki/Directed_graph\">directed graph</a>.\nIt shows how to use <a href=\"../struct.BinaryHeap.html\" title=\"struct std::collections::BinaryHeap\"><code>BinaryHeap</code></a> with custom types.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cmp::Ordering;\n<span class=\"kw\">use </span>std::collections::BinaryHeap;\n\n<span class=\"attr\">#[derive(Copy, Clone, Eq, PartialEq)]\n</span><span class=\"kw\">struct </span>State {\n    cost: usize,\n    position: usize,\n}\n\n<span class=\"comment\">// The priority queue depends on `Ord`.\n// Explicitly implement the trait so the queue becomes a min-heap\n// instead of a max-heap.\n</span><span class=\"kw\">impl </span>Ord <span class=\"kw\">for </span>State {\n    <span class=\"kw\">fn </span>cmp(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, other: <span class=\"kw-2\">&amp;</span><span class=\"self\">Self</span>) -&gt; Ordering {\n        <span class=\"comment\">// Notice that we flip the ordering on costs.\n        // In case of a tie we compare positions - this step is necessary\n        // to make implementations of `PartialEq` and `Ord` consistent.\n        </span>other.cost.cmp(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.cost)\n            .then_with(|| <span class=\"self\">self</span>.position.cmp(<span class=\"kw-2\">&amp;</span>other.position))\n    }\n}\n\n<span class=\"comment\">// `PartialOrd` needs to be implemented as well.\n</span><span class=\"kw\">impl </span>PartialOrd <span class=\"kw\">for </span>State {\n    <span class=\"kw\">fn </span>partial_cmp(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, other: <span class=\"kw-2\">&amp;</span><span class=\"self\">Self</span>) -&gt; <span class=\"prelude-ty\">Option</span>&lt;Ordering&gt; {\n        <span class=\"prelude-val\">Some</span>(<span class=\"self\">self</span>.cmp(other))\n    }\n}\n\n<span class=\"comment\">// Each node is represented as a `usize`, for a shorter implementation.\n</span><span class=\"kw\">struct </span>Edge {\n    node: usize,\n    cost: usize,\n}\n\n<span class=\"comment\">// Dijkstra's shortest path algorithm.\n\n// Start at `start` and use `dist` to track the current shortest distance\n// to each node. This implementation isn't memory-efficient as it may leave duplicate\n// nodes in the queue. It also uses `usize::MAX` as a sentinel value,\n// for a simpler implementation.\n</span><span class=\"kw\">fn </span>shortest_path(adj_list: <span class=\"kw-2\">&amp;</span>Vec&lt;Vec&lt;Edge&gt;&gt;, start: usize, goal: usize) -&gt; <span class=\"prelude-ty\">Option</span>&lt;usize&gt; {\n    <span class=\"comment\">// dist[node] = current shortest distance from `start` to `node`\n    </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>dist: Vec&lt;<span class=\"kw\">_</span>&gt; = (<span class=\"number\">0</span>..adj_list.len()).map(|<span class=\"kw\">_</span>| usize::MAX).collect();\n\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>heap = BinaryHeap::new();\n\n    <span class=\"comment\">// We're at `start`, with a zero cost\n    </span>dist[start] = <span class=\"number\">0</span>;\n    heap.push(State { cost: <span class=\"number\">0</span>, position: start });\n\n    <span class=\"comment\">// Examine the frontier with lower cost nodes first (min-heap)\n    </span><span class=\"kw\">while let </span><span class=\"prelude-val\">Some</span>(State { cost, position }) = heap.pop() {\n        <span class=\"comment\">// Alternatively we could have continued to find all shortest paths\n        </span><span class=\"kw\">if </span>position == goal { <span class=\"kw\">return </span><span class=\"prelude-val\">Some</span>(cost); }\n\n        <span class=\"comment\">// Important as we may have already found a better way\n        </span><span class=\"kw\">if </span>cost &gt; dist[position] { <span class=\"kw\">continue</span>; }\n\n        <span class=\"comment\">// For each node we can reach, see if we can find a way with\n        // a lower cost going through this node\n        </span><span class=\"kw\">for </span>edge <span class=\"kw\">in </span><span class=\"kw-2\">&amp;</span>adj_list[position] {\n            <span class=\"kw\">let </span>next = State { cost: cost + edge.cost, position: edge.node };\n\n            <span class=\"comment\">// If so, add it to the frontier and continue\n            </span><span class=\"kw\">if </span>next.cost &lt; dist[next.position] {\n                heap.push(next);\n                <span class=\"comment\">// Relaxation, we have now found a better way\n                </span>dist[next.position] = next.cost;\n            }\n        }\n    }\n\n    <span class=\"comment\">// Goal not reachable\n    </span><span class=\"prelude-val\">None\n</span>}\n\n<span class=\"kw\">fn </span>main() {\n    <span class=\"comment\">// This is the directed graph we're going to use.\n    // The node numbers correspond to the different states,\n    // and the edge weights symbolize the cost of moving\n    // from one node to another.\n    // Note that the edges are one-way.\n    //\n    //                  7\n    //          +-----------------+\n    //          |                 |\n    //          v   1        2    |  2\n    //          0 -----&gt; 1 -----&gt; 3 ---&gt; 4\n    //          |        ^        ^      ^\n    //          |        | 1      |      |\n    //          |        |        | 3    | 1\n    //          +------&gt; 2 -------+      |\n    //           10      |               |\n    //                   +---------------+\n    //\n    // The graph is represented as an adjacency list where each index,\n    // corresponding to a node value, has a list of outgoing edges.\n    // Chosen for its efficiency.\n    </span><span class=\"kw\">let </span>graph = <span class=\"macro\">vec!</span>[\n        <span class=\"comment\">// Node 0\n        </span><span class=\"macro\">vec!</span>[Edge { node: <span class=\"number\">2</span>, cost: <span class=\"number\">10 </span>},\n             Edge { node: <span class=\"number\">1</span>, cost: <span class=\"number\">1 </span>}],\n        <span class=\"comment\">// Node 1\n        </span><span class=\"macro\">vec!</span>[Edge { node: <span class=\"number\">3</span>, cost: <span class=\"number\">2 </span>}],\n        <span class=\"comment\">// Node 2\n        </span><span class=\"macro\">vec!</span>[Edge { node: <span class=\"number\">1</span>, cost: <span class=\"number\">1 </span>},\n             Edge { node: <span class=\"number\">3</span>, cost: <span class=\"number\">3 </span>},\n             Edge { node: <span class=\"number\">4</span>, cost: <span class=\"number\">1 </span>}],\n        <span class=\"comment\">// Node 3\n        </span><span class=\"macro\">vec!</span>[Edge { node: <span class=\"number\">0</span>, cost: <span class=\"number\">7 </span>},\n             Edge { node: <span class=\"number\">4</span>, cost: <span class=\"number\">2 </span>}],\n        <span class=\"comment\">// Node 4\n        </span><span class=\"macro\">vec!</span>[]];\n\n    <span class=\"macro\">assert_eq!</span>(shortest_path(<span class=\"kw-2\">&amp;</span>graph, <span class=\"number\">0</span>, <span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));\n    <span class=\"macro\">assert_eq!</span>(shortest_path(<span class=\"kw-2\">&amp;</span>graph, <span class=\"number\">0</span>, <span class=\"number\">3</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>));\n    <span class=\"macro\">assert_eq!</span>(shortest_path(<span class=\"kw-2\">&amp;</span>graph, <span class=\"number\">3</span>, <span class=\"number\">0</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">7</span>));\n    <span class=\"macro\">assert_eq!</span>(shortest_path(<span class=\"kw-2\">&amp;</span>graph, <span class=\"number\">0</span>, <span class=\"number\">4</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">5</span>));\n    <span class=\"macro\">assert_eq!</span>(shortest_path(<span class=\"kw-2\">&amp;</span>graph, <span class=\"number\">4</span>, <span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::cmp::Ordering;%0Ause+std::collections::BinaryHeap;%0A%0A%23%5Bderive(Copy,+Clone,+Eq,+PartialEq)%5D%0Astruct+State+%7B%0A++++cost:+usize,%0A++++position:+usize,%0A%7D%0A%0A//+The+priority+queue+depends+on+%60Ord%60.%0A//+Explicitly+implement+the+trait+so+the+queue+becomes+a+min-heap%0A//+instead+of+a+max-heap.%0Aimpl+Ord+for+State+%7B%0A++++fn+cmp(%26self,+other:+%26Self)+-%3E+Ordering+%7B%0A++++++++//+Notice+that+we+flip+the+ordering+on+costs.%0A++++++++//+In+case+of+a+tie+we+compare+positions+-+this+step+is+necessary%0A++++++++//+to+make+implementations+of+%60PartialEq%60+and+%60Ord%60+consistent.%0A++++++++other.cost.cmp(%26self.cost)%0A++++++++++++.then_with(%7C%7C+self.position.cmp(%26other.position))%0A++++%7D%0A%7D%0A%0A//+%60PartialOrd%60+needs+to+be+implemented+as+well.%0Aimpl+PartialOrd+for+State+%7B%0A++++fn+partial_cmp(%26self,+other:+%26Self)+-%3E+Option%3COrdering%3E+%7B%0A++++++++Some(self.cmp(other))%0A++++%7D%0A%7D%0A%0A//+Each+node+is+represented+as+a+%60usize%60,+for+a+shorter+implementation.%0Astruct+Edge+%7B%0A++++node:+usize,%0A++++cost:+usize,%0A%7D%0A%0A//+Dijkstra's+shortest+path+algorithm.%0A%0A//+Start+at+%60start%60+and+use+%60dist%60+to+track+the+current+shortest+distance%0A//+to+each+node.+This+implementation+isn't+memory-efficient+as+it+may+leave+duplicate%0A//+nodes+in+the+queue.+It+also+uses+%60usize::MAX%60+as+a+sentinel+value,%0A//+for+a+simpler+implementation.%0Afn+shortest_path(adj_list:+%26Vec%3CVec%3CEdge%3E%3E,+start:+usize,+goal:+usize)+-%3E+Option%3Cusize%3E+%7B%0A++++//+dist%5Bnode%5D+=+current+shortest+distance+from+%60start%60+to+%60node%60%0A++++let+mut+dist:+Vec%3C_%3E+=+(0..adj_list.len()).map(%7C_%7C+usize::MAX).collect();%0A%0A++++let+mut+heap+=+BinaryHeap::new();%0A%0A++++//+We're+at+%60start%60,+with+a+zero+cost%0A++++dist%5Bstart%5D+=+0;%0A++++heap.push(State+%7B+cost:+0,+position:+start+%7D);%0A%0A++++//+Examine+the+frontier+with+lower+cost+nodes+first+(min-heap)%0A++++while+let+Some(State+%7B+cost,+position+%7D)+=+heap.pop()+%7B%0A++++++++//+Alternatively+we+could+have+continued+to+find+all+shortest+paths%0A++++++++if+position+==+goal+%7B+return+Some(cost);+%7D%0A%0A++++++++//+Important+as+we+may+have+already+found+a+better+way%0A++++++++if+cost+%3E+dist%5Bposition%5D+%7B+continue;+%7D%0A%0A++++++++//+For+each+node+we+can+reach,+see+if+we+can+find+a+way+with%0A++++++++//+a+lower+cost+going+through+this+node%0A++++++++for+edge+in+%26adj_list%5Bposition%5D+%7B%0A++++++++++++let+next+=+State+%7B+cost:+cost+%2B+edge.cost,+position:+edge.node+%7D;%0A%0A++++++++++++//+If+so,+add+it+to+the+frontier+and+continue%0A++++++++++++if+next.cost+%3C+dist%5Bnext.position%5D+%7B%0A++++++++++++++++heap.push(next);%0A++++++++++++++++//+Relaxation,+we+have+now+found+a+better+way%0A++++++++++++++++dist%5Bnext.position%5D+=+next.cost;%0A++++++++++++%7D%0A++++++++%7D%0A++++%7D%0A%0A++++//+Goal+not+reachable%0A++++None%0A%7D%0A%0Afn+main()+%7B%0A++++//+This+is+the+directed+graph+we're+going+to+use.%0A++++//+The+node+numbers+correspond+to+the+different+states,%0A++++//+and+the+edge+weights+symbolize+the+cost+of+moving%0A++++//+from+one+node+to+another.%0A++++//+Note+that+the+edges+are+one-way.%0A++++//%0A++++//++++++++++++++++++7%0A++++//++++++++++%2B-----------------%2B%0A++++//++++++++++%7C+++++++++++++++++%7C%0A++++//++++++++++v+++1++++++++2++++%7C++2%0A++++//++++++++++0+-----%3E+1+-----%3E+3+---%3E+4%0A++++//++++++++++%7C++++++++%5E++++++++%5E++++++%5E%0A++++//++++++++++%7C++++++++%7C+1++++++%7C++++++%7C%0A++++//++++++++++%7C++++++++%7C++++++++%7C+3++++%7C+1%0A++++//++++++++++%2B------%3E+2+-------%2B++++++%7C%0A++++//+++++++++++10++++++%7C+++++++++++++++%7C%0A++++//+++++++++++++++++++%2B---------------%2B%0A++++//%0A++++//+The+graph+is+represented+as+an+adjacency+list+where+each+index,%0A++++//+corresponding+to+a+node+value,+has+a+list+of+outgoing+edges.%0A++++//+Chosen+for+its+efficiency.%0A++++let+graph+=+vec!%5B%0A++++++++//+Node+0%0A++++++++vec!%5BEdge+%7B+node:+2,+cost:+10+%7D,%0A+++++++++++++Edge+%7B+node:+1,+cost:+1+%7D%5D,%0A++++++++//+Node+1%0A++++++++vec!%5BEdge+%7B+node:+3,+cost:+2+%7D%5D,%0A++++++++//+Node+2%0A++++++++vec!%5BEdge+%7B+node:+1,+cost:+1+%7D,%0A+++++++++++++Edge+%7B+node:+3,+cost:+3+%7D,%0A+++++++++++++Edge+%7B+node:+4,+cost:+1+%7D%5D,%0A++++++++//+Node+3%0A++++++++vec!%5BEdge+%7B+node:+0,+cost:+7+%7D,%0A+++++++++++++Edge+%7B+node:+4,+cost:+2+%7D%5D,%0A++++++++//+Node+4%0A++++++++vec!%5B%5D%5D;%0A%0A++++assert_eq!(shortest_path(%26graph,+0,+1),+Some(1));%0A++++assert_eq!(shortest_path(%26graph,+0,+3),+Some(3));%0A++++assert_eq!(shortest_path(%26graph,+3,+0),+Some(7));%0A++++assert_eq!(shortest_path(%26graph,+0,+4),+Some(5));%0A++++assert_eq!(shortest_path(%26graph,+4,+0),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><h2 id=\"structs\" class=\"section-header\">Structs<a href=\"#structs\" class=\"anchor\">§</a></h2><ul class=\"item-table\"><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.BinaryHeap.html\" title=\"struct std::collections::binary_heap::BinaryHeap\">BinaryHeap</a></div><div class=\"desc docblock-short\">A priority queue implemented with a binary heap.</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.Drain.html\" title=\"struct std::collections::binary_heap::Drain\">Drain</a></div><div class=\"desc docblock-short\">A draining iterator over the elements of a <code>BinaryHeap</code>.</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.IntoIter.html\" title=\"struct std::collections::binary_heap::IntoIter\">IntoIter</a></div><div class=\"desc docblock-short\">An owning iterator over the elements of a <code>BinaryHeap</code>.</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.Iter.html\" title=\"struct std::collections::binary_heap::Iter\">Iter</a></div><div class=\"desc docblock-short\">An iterator over the elements of a <code>BinaryHeap</code>.</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.PeekMut.html\" title=\"struct std::collections::binary_heap::PeekMut\">PeekMut</a></div><div class=\"desc docblock-short\">Structure wrapping a mutable reference to the greatest item on a\n<code>BinaryHeap</code>.</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.DrainSorted.html\" title=\"struct std::collections::binary_heap::DrainSorted\">DrainSorted</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">A draining iterator over the elements of a <code>BinaryHeap</code>.</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.IntoIterSorted.html\" title=\"struct std::collections::binary_heap::IntoIterSorted\">IntoIterSorted</a><span class=\"stab unstable\" title=\"\">Experimental</span></div></li></ul></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:13:57.743Z"
}