{
	"title": "str - Rust",
	"url": "https://doc.rust-lang.org/stable/std/primitive.str.html#method.parse",
	"markdown": "# str - Rust\n\n## Primitive Type [str](#)\n\n1.0.0 ·\n\nExpand description\n\nString slices.\n\n_[See also the `std::str` module](str/index.html \"mod std::str\")._\n\nThe `str` type, also called a ‘string slice’, is the most primitive string type. It is usually seen in its borrowed form, `&str`. It is also the type of string literals, `&'static str`.\n\n## [§](#basic-usage)Basic Usage\n\nString literals are string slices:\n\n```\nlet hello_world = \"Hello, World!\";\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+hello_world+=+%22Hello,+World!%22;%0A%7D&edition=2021)\n\nHere we have declared a string slice initialized with a string literal. String literals have a static lifetime, which means the string `hello_world` is guaranteed to be valid for the duration of the entire program. We can explicitly specify `hello_world`’s lifetime as well:\n\n```\nlet hello_world: &'static str = \"Hello, world!\";\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+hello_world:+%26%27static+str+=+%22Hello,+world!%22;%0A%7D&edition=2021)\n\n## [§](#representation)Representation\n\nA `&str` is made up of two components: a pointer to some bytes, and a length. You can look at these with the [`as_ptr`](about:blank/primitive.str.html#method.as_ptr \"method str::as_ptr\") and [`len`](about:blank/primitive.str.html#method.len \"method str::len\") methods:\n\n```\nuse std::slice;\nuse std::str;\n\nlet story = \"Once upon a time...\";\n\nlet ptr = story.as_ptr();\nlet len = story.len();\n\n// story has nineteen bytes\nassert_eq!(19, len);\n\n// We can re-build a str out of ptr and len. This is all unsafe because\n// we are responsible for making sure the two components are valid:\nlet s = unsafe {\n    // First, we build a &[u8]...\n    let slice = slice::from_raw_parts(ptr, len);\n\n    // ... and then convert that slice into a string slice\n    str::from_utf8(slice)\n};\n\nassert_eq!(s, Ok(story));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::slice;%0A++++use+std::str;%0A++++%0A++++let+story+=+%22Once+upon+a+time...%22;%0A++++%0A++++let+ptr+=+story.as_ptr();%0A++++let+len+=+story.len();%0A++++%0A++++//+story+has+nineteen+bytes%0A++++assert_eq!(19,+len);%0A++++%0A++++//+We+can+re-build+a+str+out+of+ptr+and+len.+This+is+all+unsafe+because%0A++++//+we+are+responsible+for+making+sure+the+two+components+are+valid:%0A++++let+s+=+unsafe+%7B%0A++++++++//+First,+we+build+a+%26%5Bu8%5D...%0A++++++++let+slice+=+slice::from_raw_parts(ptr,+len);%0A++++%0A++++++++//+...+and+then+convert+that+slice+into+a+string+slice%0A++++++++str::from_utf8(slice)%0A++++%7D;%0A++++%0A++++assert_eq!(s,+Ok(story));%0A%7D&edition=2021)\n\nNote: This example shows the internals of `&str`. `unsafe` should not be used to get a string slice under normal circumstances. Use `as_str` instead.\n\n## [§](#invariant)Invariant\n\nRust libraries may assume that string slices are always valid UTF-8.\n\nConstructing a non-UTF-8 string slice is not immediate undefined behavior, but any function called on a string slice may assume that it is valid UTF-8, which means that a non-UTF-8 string slice can lead to undefined behavior down the road.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#139)[§](#impl-str)\n\n1.0.0 (const: 1.39.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#160)\n\nReturns the length of `self`.\n\nThis length is in bytes, not [`char`](primitive.char.html \"primitive char\")s or graphemes. In other words, it might not be what a human considers the length of the string.\n\n##### [§](#examples)Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+len+=+%22foo%22.len();%0A++++assert_eq!(3,+len);%0A++++%0A++++assert_eq!(%22%C6%92oo%22.len(),+4);+//+fancy+f!%0A++++assert_eq!(%22%C6%92oo%22.chars().count(),+3);%0A%7D&edition=2021)\n\n1.0.0 (const: 1.39.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#179)\n\nReturns `true` if `self` has a length of zero bytes.\n\n##### [§](#examples-1)Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s+=+%22%22;%0A++++assert!(s.is_empty());%0A++++%0A++++let+s+=+%22not+empty%22;%0A++++assert!(!s.is_empty());%0A%7D&edition=2021)\n\n1.9.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#209)\n\nChecks that `index`\\-th byte is the first byte in a UTF-8 code point sequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are considered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n##### [§](#examples-2)Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s+=+%22L%C3%B6we+%E8%80%81%E8%99%8E+L%C3%A9opard%22;%0A++++assert!(s.is_char_boundary(0));%0A++++//+start+of+%60%E8%80%81%60%0A++++assert!(s.is_char_boundary(6));%0A++++assert!(s.is_char_boundary(s.len()));%0A++++%0A++++//+second+byte+of+%60%C3%B6%60%0A++++assert!(!s.is_char_boundary(2));%0A++++%0A++++//+third+byte+of+%60%E8%80%81%60%0A++++assert!(!s.is_char_boundary(8));%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#256)\n\n🔬This is a nightly-only experimental API. (`round_char_boundary` [#93743](https://github.com/rust-lang/rust/issues/93743))\n\nFinds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it’s still valid UTF-8, but doesn’t exceed a given number of bytes. Note that this is done purely at the character level and can still visually split graphemes, even though the underlying characters aren’t split. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only includes 🧑 (person) instead.\n\n##### [§](#examples-3)Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(round_char_boundary)%5D%0Afn+main()+%7B%0A++++let+s+=+%22%E2%9D%A4%EF%B8%8F%F0%9F%A7%A1%F0%9F%92%9B%F0%9F%92%9A%F0%9F%92%99%F0%9F%92%9C%22;%0A++++assert_eq!(s.len(),+26);%0A++++assert!(!s.is_char_boundary(13));%0A++++%0A++++let+closest+=+s.floor_char_boundary(13);%0A++++assert_eq!(closest,+10);%0A++++assert_eq!(%26s%5B..closest%5D,+%22%E2%9D%A4%EF%B8%8F%F0%9F%A7%A1%22);%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#294)\n\n🔬This is a nightly-only experimental API. (`round_char_boundary` [#93743](https://github.com/rust-lang/rust/issues/93743))\n\nFinds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`](about:blank/primitive.str.html#method.floor_char_boundary \"method str::floor_char_boundary\"). See that method for more details.\n\n##### [§](#examples-4)Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(round_char_boundary)%5D%0Afn+main()+%7B%0A++++let+s+=+%22%E2%9D%A4%EF%B8%8F%F0%9F%A7%A1%F0%9F%92%9B%F0%9F%92%9A%F0%9F%92%99%F0%9F%92%9C%22;%0A++++assert_eq!(s.len(),+26);%0A++++assert!(!s.is_char_boundary(13));%0A++++%0A++++let+closest+=+s.ceil_char_boundary(13);%0A++++assert_eq!(closest,+14);%0A++++assert_eq!(%26s%5B..closest%5D,+%22%E2%9D%A4%EF%B8%8F%F0%9F%A7%A1%F0%9F%92%9B%22);%0A%7D&version=nightly&edition=2021)\n\n1.0.0 (const: 1.39.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#320)\n\nConverts a string slice to a byte slice. To convert the byte slice back into a string slice, use the [`from_utf8`](str/fn.from_utf8.html \"fn std::str::from_utf8\") function.\n\n##### [§](#examples-5)Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+bytes+=+%22bors%22.as_bytes();%0A++++assert_eq!(b%22bors%22,+bytes);%0A%7D&edition=2021)\n\n1.20.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#364)\n\nConverts a mutable string slice to a mutable byte slice.\n\n##### [§](#safety)Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8 before the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n##### [§](#examples-6)Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+s+=+String::from(%22Hello%22);%0A++++let+bytes+=+unsafe+%7B+s.as_bytes_mut()+%7D;%0A++++%0A++++assert_eq!(b%22Hello%22,+bytes);%0A%7D&edition=2021)\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+s+=+String::from(%22%F0%9F%97%BB%E2%88%88%F0%9F%8C%8F%22);%0A++++%0A++++unsafe+%7B%0A++++++++let+bytes+=+s.as_bytes_mut();%0A++++%0A++++++++bytes%5B0%5D+=+0xF0;%0A++++++++bytes%5B1%5D+=+0x9F;%0A++++++++bytes%5B2%5D+=+0x8D;%0A++++++++bytes%5B3%5D+=+0x94;%0A++++%7D%0A++++%0A++++assert_eq!(%22%F0%9F%8D%94%E2%88%88%F0%9F%8C%8F%22,+s);%0A%7D&edition=2021)\n\n1.0.0 (const: 1.32.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#394)\n\nConverts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a [`u8`](primitive.u8.html \"primitive u8\"). This pointer will be pointing to the first byte of the string slice.\n\nThe caller must ensure that the returned pointer is never written to. If you need to mutate the contents of the string slice, use [`as_mut_ptr`](about:blank/primitive.str.html#method.as_mut_ptr \"method str::as_mut_ptr\").\n\n##### [§](#examples-7)Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s+=+%22Hello%22;%0A++++let+ptr+=+s.as_ptr();%0A%7D&edition=2021)\n\n1.36.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#410)\n\nConverts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a [`u8`](primitive.u8.html \"primitive u8\"). This pointer will be pointing to the first byte of the string slice.\n\nIt is your responsibility to make sure that the string slice only gets modified in a way that it remains valid UTF-8.\n\n1.20.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#435)\n\nReturns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\") whenever equivalent indexing operation would panic.\n\n##### [§](#examples-8)Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v+=+String::from(%22%F0%9F%97%BB%E2%88%88%F0%9F%8C%8F%22);%0A++++%0A++++assert_eq!(Some(%22%F0%9F%97%BB%22),+v.get(0..4));%0A++++%0A++++//+indices+not+on+UTF-8+sequence+boundaries%0A++++assert!(v.get(1..).is_none());%0A++++assert!(v.get(..8).is_none());%0A++++%0A++++//+out+of+bounds%0A++++assert!(v.get(..42).is_none());%0A%7D&edition=2021)\n\n1.20.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#467)\n\nReturns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\") whenever equivalent indexing operation would panic.\n\n##### [§](#examples-9)Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+v+=+String::from(%22hello%22);%0A++++//+correct+length%0A++++assert!(v.get_mut(0..5).is_some());%0A++++//+out+of+bounds%0A++++assert!(v.get_mut(..42).is_none());%0A++++assert_eq!(Some(%22he%22),+v.get_mut(0..2).map(%7Cv%7C+%26*v));%0A++++%0A++++assert_eq!(%22hello%22,+v);%0A++++%7B%0A++++++++let+s+=+v.get_mut(0..2);%0A++++++++let+s+=+s.map(%7Cs%7C+%7B%0A++++++++++++s.make_ascii_uppercase();%0A++++++++++++%26*s%0A++++++++%7D);%0A++++++++assert_eq!(Some(%22HE%22),+s);%0A++++%7D%0A++++assert_eq!(%22HEllo%22,+v);%0A%7D&edition=2021)\n\n1.20.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#499)\n\nReturns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n##### [§](#safety-1)Safety\n\nCallers of this function are responsible that these preconditions are satisfied:\n\n-   The starting index must not exceed the ending index;\n-   Indexes must be within bounds of the original slice;\n-   Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or violate the invariants communicated by the `str` type.\n\n##### [§](#examples-10)Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v+=+%22%F0%9F%97%BB%E2%88%88%F0%9F%8C%8F%22;%0A++++unsafe+%7B%0A++++++++assert_eq!(%22%F0%9F%97%BB%22,+v.get_unchecked(0..4));%0A++++++++assert_eq!(%22%E2%88%88%22,+v.get_unchecked(4..7));%0A++++++++assert_eq!(%22%F0%9F%8C%8F%22,+v.get_unchecked(7..11));%0A++++%7D%0A%7D&edition=2021)\n\n1.20.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#534)\n\nReturns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n##### [§](#safety-2)Safety\n\nCallers of this function are responsible that these preconditions are satisfied:\n\n-   The starting index must not exceed the ending index;\n-   Indexes must be within bounds of the original slice;\n-   Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or violate the invariants communicated by the `str` type.\n\n##### [§](#examples-11)Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+v+=+String::from(%22%F0%9F%97%BB%E2%88%88%F0%9F%8C%8F%22);%0A++++unsafe+%7B%0A++++++++assert_eq!(%22%F0%9F%97%BB%22,+v.get_unchecked_mut(0..4));%0A++++++++assert_eq!(%22%E2%88%88%22,+v.get_unchecked_mut(4..7));%0A++++++++assert_eq!(%22%F0%9F%8C%8F%22,+v.get_unchecked_mut(7..11));%0A++++%7D%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#585)\n\n👎Deprecated since 1.29.0: use `get_unchecked(begin..end)` instead\n\nCreates a string slice from another string slice, bypassing safety checks.\n\nThis is generally not recommended, use with caution! For a safe alternative see [`str`](primitive.str.html \"primitive str\") and [`Index`](ops/trait.Index.html \"trait std::ops::Index\").\n\nThis new slice goes from `begin` to `end`, including `begin` but excluding `end`.\n\nTo get a mutable string slice instead, see the [`slice_mut_unchecked`](about:blank/primitive.str.html#method.slice_mut_unchecked \"method str::slice_mut_unchecked\") method.\n\n##### [§](#safety-3)Safety\n\nCallers of this function are responsible that three preconditions are satisfied:\n\n-   `begin` must not exceed `end`.\n-   `begin` and `end` must be byte positions within the string slice.\n-   `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n##### [§](#examples-12)Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s+=+%22L%C3%B6we+%E8%80%81%E8%99%8E+L%C3%A9opard%22;%0A++++%0A++++unsafe+%7B%0A++++++++assert_eq!(%22L%C3%B6we+%E8%80%81%E8%99%8E+L%C3%A9opard%22,+s.slice_unchecked(0,+21));%0A++++%7D%0A++++%0A++++let+s+=+%22Hello,+world!%22;%0A++++%0A++++unsafe+%7B%0A++++++++assert_eq!(%22world%22,+s.slice_unchecked(7,+12));%0A++++%7D%0A%7D&edition=2021)\n\n1.5.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#618)\n\n👎Deprecated since 1.29.0: use `get_unchecked_mut(begin..end)` instead\n\nCreates a string slice from another string slice, bypassing safety checks. This is generally not recommended, use with caution! For a safe alternative see [`str`](primitive.str.html \"primitive str\") and [`IndexMut`](ops/trait.IndexMut.html \"trait std::ops::IndexMut\").\n\nThis new slice goes from `begin` to `end`, including `begin` but excluding `end`.\n\nTo get an immutable string slice instead, see the [`slice_unchecked`](about:blank/primitive.str.html#method.slice_unchecked \"method str::slice_unchecked\") method.\n\n##### [§](#safety-4)Safety\n\nCallers of this function are responsible that three preconditions are satisfied:\n\n-   `begin` must not exceed `end`.\n-   `begin` and `end` must be byte positions within the string slice.\n-   `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n1.4.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#657)\n\nDivide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the string. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`, and from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`](about:blank/primitive.str.html#method.split_at_mut \"method str::split_at_mut\") method.\n\n##### [§](#panics)Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past the end of the last code point of the string slice. For a non-panicking alternative see [`split_at_checked`](about:blank/primitive.str.html#method.split_at_checked \"method str::split_at_checked\").\n\n##### [§](#examples-13)Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s+=+%22Per+Martin-L%C3%B6f%22;%0A++++%0A++++let+(first,+last)+=+s.split_at(3);%0A++++%0A++++assert_eq!(%22Per%22,+first);%0A++++assert_eq!(%22+Martin-L%C3%B6f%22,+last);%0A%7D&edition=2021)\n\n1.4.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#697)\n\nDivide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the string. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`, and from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`](about:blank/primitive.str.html#method.split_at \"method str::split_at\") method.\n\n##### [§](#panics-1)Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past the end of the last code point of the string slice. For a non-panicking alternative see [`split_at_mut_checked`](about:blank/primitive.str.html#method.split_at_mut_checked \"method str::split_at_mut_checked\").\n\n##### [§](#examples-14)Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+s+=+%22Per+Martin-L%C3%B6f%22.to_string();%0A++++%7B%0A++++++++let+(first,+last)+=+s.split_at_mut(3);%0A++++++++first.make_ascii_uppercase();%0A++++++++assert_eq!(%22PER%22,+first);%0A++++++++assert_eq!(%22+Martin-L%C3%B6f%22,+last);%0A++++%7D%0A++++assert_eq!(%22PER+Martin-L%C3%B6f%22,+s);%0A%7D&edition=2021)\n\n1.80.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#736)\n\nDivide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the string. It must also be on the boundary of a UTF-8 code point. The method returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`, and from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`](about:blank/primitive.str.html#method.split_at_mut_checked \"method str::split_at_mut_checked\") method.\n\n##### [§](#examples-15)Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s+=+%22Per+Martin-L%C3%B6f%22;%0A++++%0A++++let+(first,+last)+=+s.split_at_checked(3).unwrap();%0A++++assert_eq!(%22Per%22,+first);%0A++++assert_eq!(%22+Martin-L%C3%B6f%22,+last);%0A++++%0A++++assert_eq!(None,+s.split_at_checked(13));++//+Inside+%E2%80%9C%C3%B6%E2%80%9D%0A++++assert_eq!(None,+s.split_at_checked(16));++//+Beyond+the+string+length%0A%7D&edition=2021)\n\n1.80.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#776)\n\nDivide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the string. It must also be on the boundary of a UTF-8 code point. The method returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`, and from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`](about:blank/primitive.str.html#method.split_at_checked \"method str::split_at_checked\") method.\n\n##### [§](#examples-16)Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+s+=+%22Per+Martin-L%C3%B6f%22.to_string();%0A++++if+let+Some((first,+last))+=+s.split_at_mut_checked(3)+%7B%0A++++++++first.make_ascii_uppercase();%0A++++++++assert_eq!(%22PER%22,+first);%0A++++++++assert_eq!(%22+Martin-L%C3%B6f%22,+last);%0A++++%7D%0A++++assert_eq!(%22PER+Martin-L%C3%B6f%22,+s);%0A++++%0A++++assert_eq!(None,+s.split_at_mut_checked(13));++//+Inside+%E2%80%9C%C3%B6%E2%80%9D%0A++++assert_eq!(None,+s.split_at_mut_checked(16));++//+Beyond+the+string+length%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#853)\n\nReturns an iterator over the [`char`](primitive.char.html \"primitive char\")s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a string slice by [`char`](primitive.char.html \"primitive char\"). This method returns such an iterator.\n\nIt’s important to remember that [`char`](primitive.char.html \"primitive char\") represents a Unicode Scalar Value, and might not match your idea of what a ‘character’ is. Iteration over grapheme clusters may be what you actually want. This functionality is not provided by Rust’s standard library, check crates.io instead.\n\n##### [§](#examples-17)Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+word+=+%22goodbye%22;%0A++++%0A++++let+count+=+word.chars().count();%0A++++assert_eq!(7,+count);%0A++++%0A++++let+mut+chars+=+word.chars();%0A++++%0A++++assert_eq!(Some(%27g%27),+chars.next());%0A++++assert_eq!(Some(%27o%27),+chars.next());%0A++++assert_eq!(Some(%27o%27),+chars.next());%0A++++assert_eq!(Some(%27d%27),+chars.next());%0A++++assert_eq!(Some(%27b%27),+chars.next());%0A++++assert_eq!(Some(%27y%27),+chars.next());%0A++++assert_eq!(Some(%27e%27),+chars.next());%0A++++%0A++++assert_eq!(None,+chars.next());%0A%7D&edition=2021)\n\nRemember, [`char`](primitive.char.html \"primitive char\")s might not match your intuition about characters:\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+y+=+%22y%CC%86%22;%0A++++%0A++++let+mut+chars+=+y.chars();%0A++++%0A++++assert_eq!(Some(%27y%27),+chars.next());+//+not+%27y%CC%86%27%0A++++assert_eq!(Some(%27%5Cu%7B0306%7D%27),+chars.next());%0A++++%0A++++assert_eq!(None,+chars.next());%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#910)\n\nReturns an iterator over the [`char`](primitive.char.html \"primitive char\")s of a string slice, and their positions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a string slice by [`char`](primitive.char.html \"primitive char\"). This method returns an iterator of both these [`char`](primitive.char.html \"primitive char\")s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`](primitive.char.html \"primitive char\") is second.\n\n##### [§](#examples-18)Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+word+=+%22goodbye%22;%0A++++%0A++++let+count+=+word.char_indices().count();%0A++++assert_eq!(7,+count);%0A++++%0A++++let+mut+char_indices+=+word.char_indices();%0A++++%0A++++assert_eq!(Some((0,+%27g%27)),+char_indices.next());%0A++++assert_eq!(Some((1,+%27o%27)),+char_indices.next());%0A++++assert_eq!(Some((2,+%27o%27)),+char_indices.next());%0A++++assert_eq!(Some((3,+%27d%27)),+char_indices.next());%0A++++assert_eq!(Some((4,+%27b%27)),+char_indices.next());%0A++++assert_eq!(Some((5,+%27y%27)),+char_indices.next());%0A++++assert_eq!(Some((6,+%27e%27)),+char_indices.next());%0A++++%0A++++assert_eq!(None,+char_indices.next());%0A%7D&edition=2021)\n\nRemember, [`char`](primitive.char.html \"primitive char\")s might not match your intuition about characters:\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+yes+=+%22y%CC%86es%22;%0A++++%0A++++let+mut+char_indices+=+yes.char_indices();%0A++++%0A++++assert_eq!(Some((0,+%27y%27)),+char_indices.next());+//+not+(0,+%27y%CC%86%27)%0A++++assert_eq!(Some((1,+%27%5Cu%7B0306%7D%27)),+char_indices.next());%0A++++%0A++++//+note+the+3+here+-+the+previous+character+took+up+two+bytes%0A++++assert_eq!(Some((3,+%27e%27)),+char_indices.next());%0A++++assert_eq!(Some((4,+%27s%27)),+char_indices.next());%0A++++%0A++++assert_eq!(None,+char_indices.next());%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#933)\n\nAn iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate through a string slice by byte. This method returns such an iterator.\n\n##### [§](#examples-19)Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+bytes+=+%22bors%22.bytes();%0A++++%0A++++assert_eq!(Some(b%27b%27),+bytes.next());%0A++++assert_eq!(Some(b%27o%27),+bytes.next());%0A++++assert_eq!(Some(b%27r%27),+bytes.next());%0A++++assert_eq!(Some(b%27s%27),+bytes.next());%0A++++%0A++++assert_eq!(None,+bytes.next());%0A%7D&edition=2021)\n\n1.1.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#985)\n\nSplits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of the original string slice, separated by any amount of whitespace.\n\n‘Whitespace’ is defined according to the terms of the Unicode Derived Core Property `White_Space`. If you only want to split on ASCII whitespace instead, use [`split_ascii_whitespace`](about:blank/primitive.str.html#method.split_ascii_whitespace \"method str::split_ascii_whitespace\").\n\n##### [§](#examples-20)Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+iter+=+%22A+few+words%22.split_whitespace();%0A++++%0A++++assert_eq!(Some(%22A%22),+iter.next());%0A++++assert_eq!(Some(%22few%22),+iter.next());%0A++++assert_eq!(Some(%22words%22),+iter.next());%0A++++%0A++++assert_eq!(None,+iter.next());%0A%7D&edition=2021)\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+iter+=+%22+Mary+++had%5Cta%5Cu%7B2009%7Dlittle++%5Cn%5Ct+lamb%22.split_whitespace();%0A++++assert_eq!(Some(%22Mary%22),+iter.next());%0A++++assert_eq!(Some(%22had%22),+iter.next());%0A++++assert_eq!(Some(%22a%22),+iter.next());%0A++++assert_eq!(Some(%22little%22),+iter.next());%0A++++assert_eq!(Some(%22lamb%22),+iter.next());%0A++++%0A++++assert_eq!(None,+iter.next());%0A%7D&edition=2021)\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(%22%22.split_whitespace().next(),+None);%0A++++assert_eq!(%22+++%22.split_whitespace().next(),+None);%0A%7D&edition=2021)\n\n1.34.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#1034)\n\nSplits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of the original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`](about:blank/primitive.str.html#method.split_whitespace \"method str::split_whitespace\").\n\n##### [§](#examples-21)Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+iter+=+%22A+few+words%22.split_ascii_whitespace();%0A++++%0A++++assert_eq!(Some(%22A%22),+iter.next());%0A++++assert_eq!(Some(%22few%22),+iter.next());%0A++++assert_eq!(Some(%22words%22),+iter.next());%0A++++%0A++++assert_eq!(None,+iter.next());%0A%7D&edition=2021)\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+iter+=+%22+Mary+++had%5Cta+little++%5Cn%5Ct+lamb%22.split_ascii_whitespace();%0A++++assert_eq!(Some(%22Mary%22),+iter.next());%0A++++assert_eq!(Some(%22had%22),+iter.next());%0A++++assert_eq!(Some(%22a%22),+iter.next());%0A++++assert_eq!(Some(%22little%22),+iter.next());%0A++++assert_eq!(Some(%22lamb%22),+iter.next());%0A++++%0A++++assert_eq!(None,+iter.next());%0A%7D&edition=2021)\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(%22%22.split_ascii_whitespace().next(),+None);%0A++++assert_eq!(%22+++%22.split_ascii_whitespace().next(),+None);%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#1092)\n\nAn iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or sequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a line feed (`\\n`) does not split a line. These carriage returns are thereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line ending will return the same lines as an otherwise identical string without a final line ending.\n\n##### [§](#examples-22)Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+text+=+%22foo%5Cr%5Cnbar%5Cn%5Cnbaz%5Cr%22;%0A++++let+mut+lines+=+text.lines();%0A++++%0A++++assert_eq!(Some(%22foo%22),+lines.next());%0A++++assert_eq!(Some(%22bar%22),+lines.next());%0A++++assert_eq!(Some(%22%22),+lines.next());%0A++++//+Trailing+carriage+return+is+included+in+the+last+line%0A++++assert_eq!(Some(%22baz%5Cr%22),+lines.next());%0A++++%0A++++assert_eq!(None,+lines.next());%0A%7D&edition=2021)\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+text+=+%22foo%5Cnbar%5Cn%5Cr%5Cnbaz%22;%0A++++let+mut+lines+=+text.lines();%0A++++%0A++++assert_eq!(Some(%22foo%22),+lines.next());%0A++++assert_eq!(Some(%22bar%22),+lines.next());%0A++++assert_eq!(Some(%22%22),+lines.next());%0A++++assert_eq!(Some(%22baz%22),+lines.next());%0A++++%0A++++assert_eq!(None,+lines.next());%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#1105)\n\n👎Deprecated since 1.4.0: use lines() instead now\n\nAn iterator over the lines of a string.\n\n1.8.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#1124)\n\nReturns an iterator of `u16` over the string encoded as UTF-16.\n\n##### [§](#examples-23)Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+text+=+%22Za%C5%BC%C3%B3%C5%82%C4%87+g%C4%99%C5%9Bl%C4%85+ja%C5%BA%C5%84%22;%0A++++%0A++++let+utf8_len+=+text.len();%0A++++let+utf16_len+=+text.encode_utf16().count();%0A++++%0A++++assert!(utf16_len+%3C=+utf8_len);%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#1149)\n\nReturns `true` if the given pattern matches a sub-slice of this string slice.\n\nReturns `false` if it does not.\n\nThe [pattern](str/pattern/index.html \"mod std::str::pattern\") can be a `&str`, [`char`](primitive.char.html \"primitive char\"), a slice of [`char`](primitive.char.html \"primitive char\")s, or a function or closure that determines if a character matches.\n\n##### [§](#examples-24)Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+bananas+=+%22bananas%22;%0A++++%0A++++assert!(bananas.contains(%22nana%22));%0A++++assert!(!bananas.contains(%22apples%22));%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#1186)\n\nReturns `true` if the given pattern matches a prefix of this string slice.\n\nReturns `false` if it does not.\n\nThe [pattern](str/pattern/index.html \"mod std::str::pattern\") can be a `&str`, in which case this function will return true if the `&str` is a prefix of this string slice.\n\nThe [pattern](str/pattern/index.html \"mod std::str::pattern\") can also be a [`char`](primitive.char.html \"primitive char\"), a slice of [`char`](primitive.char.html \"primitive char\")s, or a function or closure that determines if a character matches. These will only be checked against the first character of this string slice. Look at the second example below regarding behavior for slices of [`char`](primitive.char.html \"primitive char\")s.\n\n##### [§](#examples-25)Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+bananas+=+%22bananas%22;%0A++++%0A++++assert!(bananas.starts_with(%22bana%22));%0A++++assert!(!bananas.starts_with(%22nana%22));%0A%7D&edition=2021)\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+bananas+=+%22bananas%22;%0A++++%0A++++//+Note+that+both+of+these+assert+successfully.%0A++++assert!(bananas.starts_with(%26%5B%27b%27,+%27a%27,+%27n%27,+%27a%27%5D));%0A++++assert!(bananas.starts_with(%26%5B%27a%27,+%27b%27,+%27c%27,+%27d%27%5D));%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#1210-1212)\n\nReturns `true` if the given pattern matches a suffix of this string slice.\n\nReturns `false` if it does not.\n\nThe [pattern](str/pattern/index.html \"mod std::str::pattern\") can be a `&str`, [`char`](primitive.char.html \"primitive char\"), a slice of [`char`](primitive.char.html \"primitive char\")s, or a function or closure that determines if a character matches.\n\n##### [§](#examples-26)Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+bananas+=+%22bananas%22;%0A++++%0A++++assert!(bananas.ends_with(%22anas%22));%0A++++assert!(!bananas.ends_with(%22nana%22));%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#1261)\n\nReturns the byte index of the first character of this string slice that matches the pattern.\n\nReturns [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\") if the pattern doesn’t match.\n\nThe [pattern](str/pattern/index.html \"mod std::str::pattern\") can be a `&str`, [`char`](primitive.char.html \"primitive char\"), a slice of [`char`](primitive.char.html \"primitive char\")s, or a function or closure that determines if a character matches.\n\n##### [§](#examples-27)Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s+=+%22L%C3%B6we+%E8%80%81%E8%99%8E+L%C3%A9opard+Gepardi%22;%0A++++%0A++++assert_eq!(s.find(%27L%27),+Some(0));%0A++++assert_eq!(s.find(%27%C3%A9%27),+Some(14));%0A++++assert_eq!(s.find(%22pard%22),+Some(17));%0A%7D&edition=2021)\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s+=+%22L%C3%B6we+%E8%80%81%E8%99%8E+L%C3%A9opard%22;%0A++++%0A++++assert_eq!(s.find(char::is_whitespace),+Some(5));%0A++++assert_eq!(s.find(char::is_lowercase),+Some(1));%0A++++assert_eq!(s.find(%7Cc:+char%7C+c.is_whitespace()+%7C%7C+c.is_lowercase()),+Some(1));%0A++++assert_eq!(s.find(%7Cc:+char%7C+(c+%3C+%27o%27)+%26%26+(c+%3E+%27a%27)),+Some(4));%0A%7D&edition=2021)\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s+=+%22L%C3%B6we+%E8%80%81%E8%99%8E+L%C3%A9opard%22;%0A++++let+x:+%26%5B_%5D+=+%26%5B%271%27,+%272%27%5D;%0A++++%0A++++assert_eq!(s.find(x),+None);%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#1307-1309)\n\nReturns the byte index for the first character of the last match of the pattern in this string slice.\n\nReturns [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\") if the pattern doesn’t match.\n\nThe [pattern](str/pattern/index.html \"mod std::str::pattern\") can be a `&str`, [`char`](primitive.char.html \"primitive char\"), a slice of [`char`](primitive.char.html \"primitive char\")s, or a function or closure that determines if a character matches.\n\n##### [§](#examples-28)Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s+=+%22L%C3%B6we+%E8%80%81%E8%99%8E+L%C3%A9opard+Gepardi%22;%0A++++%0A++++assert_eq!(s.rfind(%27L%27),+Some(13));%0A++++assert_eq!(s.rfind(%27%C3%A9%27),+Some(14));%0A++++assert_eq!(s.rfind(%22pard%22),+Some(24));%0A%7D&edition=2021)\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s+=+%22L%C3%B6we+%E8%80%81%E8%99%8E+L%C3%A9opard%22;%0A++++%0A++++assert_eq!(s.rfind(char::is_whitespace),+Some(12));%0A++++assert_eq!(s.rfind(char::is_lowercase),+Some(20));%0A%7D&edition=2021)\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s+=+%22L%C3%B6we+%E8%80%81%E8%99%8E+L%C3%A9opard%22;%0A++++let+x:+%26%5B_%5D+=+%26%5B%271%27,+%272%27%5D;%0A++++%0A++++assert_eq!(s.rfind(x),+None);%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#1429)\n\nAn iterator over substrings of this string slice, separated by characters matched by a pattern.\n\nThe [pattern](str/pattern/index.html \"mod std::str::pattern\") can be a `&str`, [`char`](primitive.char.html \"primitive char\"), a slice of [`char`](primitive.char.html \"primitive char\")s, or a function or closure that determines if a character matches.\n\n##### [§](#iterator-behavior)Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`](iter/trait.DoubleEndedIterator.html \"trait std::iter::DoubleEndedIterator\") if the pattern allows a reverse search and forward/reverse search yields the same elements. This is true for, e.g., [`char`](primitive.char.html \"primitive char\"), but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ from a forward search, the [`rsplit`](about:blank/primitive.str.html#method.rsplit \"method str::rsplit\") method can be used.\n\n##### [§](#examples-29)Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v:+Vec%3C%26str%3E+=+%22Mary+had+a+little+lamb%22.split(%27+%27).collect();%0A++++assert_eq!(v,+%5B%22Mary%22,+%22had%22,+%22a%22,+%22little%22,+%22lamb%22%5D);%0A++++%0A++++let+v:+Vec%3C%26str%3E+=+%22%22.split(%27X%27).collect();%0A++++assert_eq!(v,+%5B%22%22%5D);%0A++++%0A++++let+v:+Vec%3C%26str%3E+=+%22lionXXtigerXleopard%22.split(%27X%27).collect();%0A++++assert_eq!(v,+%5B%22lion%22,+%22%22,+%22tiger%22,+%22leopard%22%5D);%0A++++%0A++++let+v:+Vec%3C%26str%3E+=+%22lion::tiger::leopard%22.split(%22::%22).collect();%0A++++assert_eq!(v,+%5B%22lion%22,+%22tiger%22,+%22leopard%22%5D);%0A++++%0A++++let+v:+Vec%3C%26str%3E+=+%22abc1def2ghi%22.split(char::is_numeric).collect();%0A++++assert_eq!(v,+%5B%22abc%22,+%22def%22,+%22ghi%22%5D);%0A++++%0A++++let+v:+Vec%3C%26str%3E+=+%22lionXtigerXleopard%22.split(char::is_uppercase).collect();%0A++++assert_eq!(v,+%5B%22lion%22,+%22tiger%22,+%22leopard%22%5D);%0A%7D&edition=2021)\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v:+Vec%3C%26str%3E+=+%222020-11-03+23:59%22.split(%26%5B%27-%27,+%27+%27,+%27:%27,+%27%40%27%5D%5B..%5D).collect();%0A++++assert_eq!(v,+%5B%222020%22,+%2211%22,+%2203%22,+%2223%22,+%2259%22%5D);%0A%7D&edition=2021)\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v:+Vec%3C%26str%3E+=+%22abc1defXghi%22.split(%7Cc%7C+c+==+%271%27+%7C%7C+c+==+%27X%27).collect();%0A++++assert_eq!(v,+%5B%22abc%22,+%22def%22,+%22ghi%22%5D);%0A%7D&edition=2021)\n\nIf a string contains multiple contiguous separators, you will end up with empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+%22%7C%7C%7C%7Ca%7C%7Cb%7Cc%22.to_string();%0A++++let+d:+Vec%3C_%3E+=+x.split(%27%7C%27).collect();%0A++++%0A++++assert_eq!(d,+%26%5B%22%22,+%22%22,+%22%22,+%22%22,+%22a%22,+%22%22,+%22b%22,+%22c%22%5D);%0A%7D&edition=2021)\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+%22(///)%22.to_string();%0A++++let+d:+Vec%3C_%3E+=+x.split(%27/%27).collect();%0A++++%0A++++assert_eq!(d,+%26%5B%22(%22,+%22%22,+%22%22,+%22)%22%5D);%0A%7D&edition=2021)\n\nSeparators at the start or end of a string are neighbored by empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+d:+Vec%3C_%3E+=+%22010%22.split(%220%22).collect();%0A++++assert_eq!(d,+%26%5B%22%22,+%221%22,+%22%22%5D);%0A%7D&edition=2021)\n\nWhen the empty string is used as a separator, it separates every character in the string, along with the beginning and end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+f:+Vec%3C_%3E+=+%22rust%22.split(%22%22).collect();%0A++++assert_eq!(f,+%26%5B%22%22,+%22r%22,+%22u%22,+%22s%22,+%22t%22,+%22%22%5D);%0A%7D&edition=2021)\n\nContiguous separators can lead to possibly surprising behavior when whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+%22++++a++b+c%22.to_string();%0A++++let+d:+Vec%3C_%3E+=+x.split(%27+%27).collect();%0A++++%0A++++assert_eq!(d,+%26%5B%22%22,+%22%22,+%22%22,+%22%22,+%22a%22,+%22%22,+%22b%22,+%22c%22%5D);%0A%7D&edition=2021)\n\nIt does _not_ give you:\n\n[ⓘ](# \"This example is not tested\")\n\n```\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(d,+%26%5B%22a%22,+%22b%22,+%22c%22%5D);%0A%7D&edition=2021)\n\nUse [`split_whitespace`](about:blank/primitive.str.html#method.split_whitespace \"method str::split_whitespace\") for this behavior.\n\n1.51.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#1469)\n\nAn iterator over substrings of this string slice, separated by characters matched by a pattern. Differs from the iterator produced by `split` in that `split_inclusive` leaves the matched part as the terminator of the substring.\n\nThe [pattern](str/pattern/index.html \"mod std::str::pattern\") can be a `&str`, [`char`](primitive.char.html \"primitive char\"), a slice of [`char`](primitive.char.html \"primitive char\")s, or a function or closure that determines if a character matches.\n\n##### [§](#examples-30)Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v:+Vec%3C%26str%3E+=+%22Mary+had+a+little+lamb%5Cnlittle+lamb%5Cnlittle+lamb.%22%0A++++++++.split_inclusive(%27%5Cn%27).collect();%0A++++assert_eq!(v,+%5B%22Mary+had+a+little+lamb%5Cn%22,+%22little+lamb%5Cn%22,+%22little+lamb.%22%5D);%0A%7D&edition=2021)\n\nIf the last element of the string is matched, that element will be considered the terminator of the preceding substring. That substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v:+Vec%3C%26str%3E+=+%22Mary+had+a+little+lamb%5Cnlittle+lamb%5Cnlittle+lamb.%5Cn%22%0A++++++++.split_inclusive(%27%5Cn%27).collect();%0A++++assert_eq!(v,+%5B%22Mary+had+a+little+lamb%5Cn%22,+%22little+lamb%5Cn%22,+%22little+lamb.%5Cn%22%5D);%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#1524-1526)\n\nAn iterator over substrings of the given string slice, separated by characters matched by a pattern and yielded in reverse order.\n\nThe [pattern](str/pattern/index.html \"mod std::str::pattern\") can be a `&str`, [`char`](primitive.char.html \"primitive char\"), a slice of [`char`](primitive.char.html \"primitive char\")s, or a function or closure that determines if a character matches.\n\n##### [§](#iterator-behavior-1)Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse search, and it will be a [`DoubleEndedIterator`](iter/trait.DoubleEndedIterator.html \"trait std::iter::DoubleEndedIterator\") if a forward/reverse search yields the same elements.\n\nFor iterating from the front, the [`split`](about:blank/primitive.str.html#method.split \"method str::split\") method can be used.\n\n##### [§](#examples-31)Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v:+Vec%3C%26str%3E+=+%22Mary+had+a+little+lamb%22.rsplit(%27+%27).collect();%0A++++assert_eq!(v,+%5B%22lamb%22,+%22little%22,+%22a%22,+%22had%22,+%22Mary%22%5D);%0A++++%0A++++let+v:+Vec%3C%26str%3E+=+%22%22.rsplit(%27X%27).collect();%0A++++assert_eq!(v,+%5B%22%22%5D);%0A++++%0A++++let+v:+Vec%3C%26str%3E+=+%22lionXXtigerXleopard%22.rsplit(%27X%27).collect();%0A++++assert_eq!(v,+%5B%22leopard%22,+%22tiger%22,+%22%22,+%22lion%22%5D);%0A++++%0A++++let+v:+Vec%3C%26str%3E+=+%22lion::tiger::leopard%22.rsplit(%22::%22).collect();%0A++++assert_eq!(v,+%5B%22leopard%22,+%22tiger%22,+%22lion%22%5D);%0A%7D&edition=2021)\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v:+Vec%3C%26str%3E+=+%22abc1defXghi%22.rsplit(%7Cc%7C+c+==+%271%27+%7C%7C+c+==+%27X%27).collect();%0A++++assert_eq!(v,+%5B%22ghi%22,+%22def%22,+%22abc%22%5D);%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#1573)\n\nAn iterator over substrings of the given string slice, separated by characters matched by a pattern.\n\nThe [pattern](str/pattern/index.html \"mod std::str::pattern\") can be a `&str`, [`char`](primitive.char.html \"primitive char\"), a slice of [`char`](primitive.char.html \"primitive char\")s, or a function or closure that determines if a character matches.\n\nEquivalent to [`split`](about:blank/primitive.str.html#method.split \"method str::split\"), except that the trailing substring is skipped if empty.\n\nThis method can be used for string data that is _terminated_, rather than _separated_ by a pattern.\n\n##### [§](#iterator-behavior-2)Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`](iter/trait.DoubleEndedIterator.html \"trait std::iter::DoubleEndedIterator\") if the pattern allows a reverse search and forward/reverse search yields the same elements. This is true for, e.g., [`char`](primitive.char.html \"primitive char\"), but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ from a forward search, the [`rsplit_terminator`](about:blank/primitive.str.html#method.rsplit_terminator \"method str::rsplit_terminator\") method can be used.\n\n##### [§](#examples-32)Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v:+Vec%3C%26str%3E+=+%22A.B.%22.split_terminator(%27.%27).collect();%0A++++assert_eq!(v,+%5B%22A%22,+%22B%22%5D);%0A++++%0A++++let+v:+Vec%3C%26str%3E+=+%22A..B..%22.split_terminator(%22.%22).collect();%0A++++assert_eq!(v,+%5B%22A%22,+%22%22,+%22B%22,+%22%22%5D);%0A++++%0A++++let+v:+Vec%3C%26str%3E+=+%22A.B:C.D%22.split_terminator(%26%5B%27.%27,+%27:%27%5D%5B..%5D).collect();%0A++++assert_eq!(v,+%5B%22A%22,+%22B%22,+%22C%22,+%22D%22%5D);%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#1619-1621)\n\nAn iterator over substrings of `self`, separated by characters matched by a pattern and yielded in reverse order.\n\nThe [pattern](str/pattern/index.html \"mod std::str::pattern\") can be a `&str`, [`char`](primitive.char.html \"primitive char\"), a slice of [`char`](primitive.char.html \"primitive char\")s, or a function or closure that determines if a character matches.\n\nEquivalent to [`split`](about:blank/primitive.str.html#method.split \"method str::split\"), except that the trailing substring is skipped if empty.\n\nThis method can be used for string data that is _terminated_, rather than _separated_ by a pattern.\n\n##### [§](#iterator-behavior-3)Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse search, and it will be double ended if a forward/reverse search yields the same elements.\n\nFor iterating from the front, the [`split_terminator`](about:blank/primitive.str.html#method.split_terminator \"method str::split_terminator\") method can be used.\n\n##### [§](#examples-33)Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v:+Vec%3C%26str%3E+=+%22A.B.%22.rsplit_terminator(%27.%27).collect();%0A++++assert_eq!(v,+%5B%22B%22,+%22A%22%5D);%0A++++%0A++++let+v:+Vec%3C%26str%3E+=+%22A..B..%22.rsplit_terminator(%22.%22).collect();%0A++++assert_eq!(v,+%5B%22%22,+%22B%22,+%22%22,+%22A%22%5D);%0A++++%0A++++let+v:+Vec%3C%26str%3E+=+%22A.B:C.D%22.rsplit_terminator(%26%5B%27.%27,+%27:%27%5D%5B..%5D).collect();%0A++++assert_eq!(v,+%5B%22D%22,+%22C%22,+%22B%22,+%22A%22%5D);%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#1674)\n\nAn iterator over substrings of the given string slice, separated by a pattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring) will contain the remainder of the string.\n\nThe [pattern](str/pattern/index.html \"mod std::str::pattern\") can be a `&str`, [`char`](primitive.char.html \"primitive char\"), a slice of [`char`](primitive.char.html \"primitive char\")s, or a function or closure that determines if a character matches.\n\n##### [§](#iterator-behavior-4)Iterator behavior\n\nThe returned iterator will not be double ended, because it is not efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`](about:blank/primitive.str.html#method.rsplitn \"method str::rsplitn\") method can be used.\n\n##### [§](#examples-34)Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v:+Vec%3C%26str%3E+=+%22Mary+had+a+little+lambda%22.splitn(3,+%27+%27).collect();%0A++++assert_eq!(v,+%5B%22Mary%22,+%22had%22,+%22a+little+lambda%22%5D);%0A++++%0A++++let+v:+Vec%3C%26str%3E+=+%22lionXXtigerXleopard%22.splitn(3,+%22X%22).collect();%0A++++assert_eq!(v,+%5B%22lion%22,+%22%22,+%22tigerXleopard%22%5D);%0A++++%0A++++let+v:+Vec%3C%26str%3E+=+%22abcXdef%22.splitn(1,+%27X%27).collect();%0A++++assert_eq!(v,+%5B%22abcXdef%22%5D);%0A++++%0A++++let+v:+Vec%3C%26str%3E+=+%22%22.splitn(1,+%27X%27).collect();%0A++++assert_eq!(v,+%5B%22%22%5D);%0A%7D&edition=2021)\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v:+Vec%3C%26str%3E+=+%22abc1defXghi%22.splitn(2,+%7Cc%7C+c+==+%271%27+%7C%7C+c+==+%27X%27).collect();%0A++++assert_eq!(v,+%5B%22abc%22,+%22defXghi%22%5D);%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#1723-1725)\n\nAn iterator over substrings of this string slice, separated by a pattern, starting from the end of the string, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring) will contain the remainder of the string.\n\nThe [pattern](str/pattern/index.html \"mod std::str::pattern\") can be a `&str`, [`char`](primitive.char.html \"primitive char\"), a slice of [`char`](primitive.char.html \"primitive char\")s, or a function or closure that determines if a character matches.\n\n##### [§](#iterator-behavior-5)Iterator behavior\n\nThe returned iterator will not be double ended, because it is not efficient to support.\n\nFor splitting from the front, the [`splitn`](about:blank/primitive.str.html#method.splitn \"method str::splitn\") method can be used.\n\n##### [§](#examples-35)Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v:+Vec%3C%26str%3E+=+%22Mary+had+a+little+lamb%22.rsplitn(3,+%27+%27).collect();%0A++++assert_eq!(v,+%5B%22lamb%22,+%22little%22,+%22Mary+had+a%22%5D);%0A++++%0A++++let+v:+Vec%3C%26str%3E+=+%22lionXXtigerXleopard%22.rsplitn(3,+%27X%27).collect();%0A++++assert_eq!(v,+%5B%22leopard%22,+%22tiger%22,+%22lionX%22%5D);%0A++++%0A++++let+v:+Vec%3C%26str%3E+=+%22lion::tiger::leopard%22.rsplitn(2,+%22::%22).collect();%0A++++assert_eq!(v,+%5B%22leopard%22,+%22lion::tiger%22%5D);%0A%7D&edition=2021)\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v:+Vec%3C%26str%3E+=+%22abc1defXghi%22.rsplitn(2,+%7Cc%7C+c+==+%271%27+%7C%7C+c+==+%27X%27).collect();%0A++++assert_eq!(v,+%5B%22ghi%22,+%22abc1def%22%5D);%0A%7D&edition=2021)\n\n1.52.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#1743)\n\nSplits the string on the first occurrence of the specified delimiter and returns prefix before delimiter and suffix after delimiter.\n\n##### [§](#examples-36)Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(%22cfg%22.split_once(%27=%27),+None);%0A++++assert_eq!(%22cfg=%22.split_once(%27=%27),+Some((%22cfg%22,+%22%22)));%0A++++assert_eq!(%22cfg=foo%22.split_once(%27=%27),+Some((%22cfg%22,+%22foo%22)));%0A++++assert_eq!(%22cfg=foo=bar%22.split_once(%27=%27),+Some((%22cfg%22,+%22foo=bar%22)));%0A%7D&edition=2021)\n\n1.52.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#1761-1763)\n\nSplits the string on the last occurrence of the specified delimiter and returns prefix before delimiter and suffix after delimiter.\n\n##### [§](#examples-37)Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(%22cfg%22.rsplit_once(%27=%27),+None);%0A++++assert_eq!(%22cfg=foo%22.rsplit_once(%27=%27),+Some((%22cfg%22,+%22foo%22)));%0A++++assert_eq!(%22cfg=foo=bar%22.rsplit_once(%27=%27),+Some((%22cfg=foo%22,+%22bar%22)));%0A%7D&edition=2021)\n\n1.2.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#1801)\n\nAn iterator over the disjoint matches of a pattern within the given string slice.\n\nThe [pattern](str/pattern/index.html \"mod std::str::pattern\") can be a `&str`, [`char`](primitive.char.html \"primitive char\"), a slice of [`char`](primitive.char.html \"primitive char\")s, or a function or closure that determines if a character matches.\n\n##### [§](#iterator-behavior-6)Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`](iter/trait.DoubleEndedIterator.html \"trait std::iter::DoubleEndedIterator\") if the pattern allows a reverse search and forward/reverse search yields the same elements. This is true for, e.g., [`char`](primitive.char.html \"primitive char\"), but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ from a forward search, the [`rmatches`](about:blank/primitive.str.html#method.rmatches \"method str::rmatches\") method can be used.\n\n##### [§](#examples-38)Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v:+Vec%3C%26str%3E+=+%22abcXXXabcYYYabc%22.matches(%22abc%22).collect();%0A++++assert_eq!(v,+%5B%22abc%22,+%22abc%22,+%22abc%22%5D);%0A++++%0A++++let+v:+Vec%3C%26str%3E+=+%221abc2abc3%22.matches(char::is_numeric).collect();%0A++++assert_eq!(v,+%5B%221%22,+%222%22,+%223%22%5D);%0A%7D&edition=2021)\n\n1.2.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#1835-1837)\n\nAn iterator over the disjoint matches of a pattern within this string slice, yielded in reverse order.\n\nThe [pattern](str/pattern/index.html \"mod std::str::pattern\") can be a `&str`, [`char`](primitive.char.html \"primitive char\"), a slice of [`char`](primitive.char.html \"primitive char\")s, or a function or closure that determines if a character matches.\n\n##### [§](#iterator-behavior-7)Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse search, and it will be a [`DoubleEndedIterator`](iter/trait.DoubleEndedIterator.html \"trait std::iter::DoubleEndedIterator\") if a forward/reverse search yields the same elements.\n\nFor iterating from the front, the [`matches`](about:blank/primitive.str.html#method.matches \"method str::matches\") method can be used.\n\n##### [§](#examples-39)Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v:+Vec%3C%26str%3E+=+%22abcXXXabcYYYabc%22.rmatches(%22abc%22).collect();%0A++++assert_eq!(v,+%5B%22abc%22,+%22abc%22,+%22abc%22%5D);%0A++++%0A++++let+v:+Vec%3C%26str%3E+=+%221abc2abc3%22.rmatches(char::is_numeric).collect();%0A++++assert_eq!(v,+%5B%223%22,+%222%22,+%221%22%5D);%0A%7D&edition=2021)\n\n1.5.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#1879)\n\nAn iterator over the disjoint matches of a pattern within this string slice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices corresponding to the first match are returned.\n\nThe [pattern](str/pattern/index.html \"mod std::str::pattern\") can be a `&str`, [`char`](primitive.char.html \"primitive char\"), a slice of [`char`](primitive.char.html \"primitive char\")s, or a function or closure that determines if a character matches.\n\n##### [§](#iterator-behavior-8)Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`](iter/trait.DoubleEndedIterator.html \"trait std::iter::DoubleEndedIterator\") if the pattern allows a reverse search and forward/reverse search yields the same elements. This is true for, e.g., [`char`](primitive.char.html \"primitive char\"), but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ from a forward search, the [`rmatch_indices`](about:blank/primitive.str.html#method.rmatch_indices \"method str::rmatch_indices\") method can be used.\n\n##### [§](#examples-40)Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v:+Vec%3C_%3E+=+%22abcXXXabcYYYabc%22.match_indices(%22abc%22).collect();%0A++++assert_eq!(v,+%5B(0,+%22abc%22),+(6,+%22abc%22),+(12,+%22abc%22)%5D);%0A++++%0A++++let+v:+Vec%3C_%3E+=+%221abcabc2%22.match_indices(%22abc%22).collect();%0A++++assert_eq!(v,+%5B(1,+%22abc%22),+(4,+%22abc%22)%5D);%0A++++%0A++++let+v:+Vec%3C_%3E+=+%22ababa%22.match_indices(%22aba%22).collect();%0A++++assert_eq!(v,+%5B(0,+%22aba%22)%5D);+//+only+the+first+%60aba%60%0A%7D&edition=2021)\n\n1.5.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#1919-1921)\n\nAn iterator over the disjoint matches of a pattern within `self`, yielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices corresponding to the last match are returned.\n\nThe [pattern](str/pattern/index.html \"mod std::str::pattern\") can be a `&str`, [`char`](primitive.char.html \"primitive char\"), a slice of [`char`](primitive.char.html \"primitive char\")s, or a function or closure that determines if a character matches.\n\n##### [§](#iterator-behavior-9)Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse search, and it will be a [`DoubleEndedIterator`](iter/trait.DoubleEndedIterator.html \"trait std::iter::DoubleEndedIterator\") if a forward/reverse search yields the same elements.\n\nFor iterating from the front, the [`match_indices`](about:blank/primitive.str.html#method.match_indices \"method str::match_indices\") method can be used.\n\n##### [§](#examples-41)Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v:+Vec%3C_%3E+=+%22abcXXXabcYYYabc%22.rmatch_indices(%22abc%22).collect();%0A++++assert_eq!(v,+%5B(12,+%22abc%22),+(6,+%22abc%22),+(0,+%22abc%22)%5D);%0A++++%0A++++let+v:+Vec%3C_%3E+=+%221abcabc2%22.rmatch_indices(%22abc%22).collect();%0A++++assert_eq!(v,+%5B(4,+%22abc%22),+(1,+%22abc%22)%5D);%0A++++%0A++++let+v:+Vec%3C_%3E+=+%22ababa%22.rmatch_indices(%22aba%22).collect();%0A++++assert_eq!(v,+%5B(2,+%22aba%22)%5D);+//+only+the+last+%60aba%60%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#1943)\n\nReturns a string slice with leading and trailing whitespace removed.\n\n‘Whitespace’ is defined according to the terms of the Unicode Derived Core Property `White_Space`, which includes newlines.\n\n##### [§](#examples-42)Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s+=+%22%5Cn+Hello%5Ctworld%5Ct%5Cn%22;%0A++++%0A++++assert_eq!(%22Hello%5Ctworld%22,+s.trim());%0A%7D&edition=2021)\n\n1.30.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#1982)\n\nReturns a string slice with leading whitespace removed.\n\n‘Whitespace’ is defined according to the terms of the Unicode Derived Core Property `White_Space`, which includes newlines.\n\n##### [§](#text-directionality)Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first position of that byte string; for a left-to-right language like English or Russian, this will be left side, and for right-to-left languages like Arabic or Hebrew, this will be the right side.\n\n##### [§](#examples-43)Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s+=+%22%5Cn+Hello%5Ctworld%5Ct%5Cn%22;%0A++++assert_eq!(%22Hello%5Ctworld%5Ct%5Cn%22,+s.trim_start());%0A%7D&edition=2021)\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s+=+%22++English++%22;%0A++++assert!(Some(%27E%27)+==+s.trim_start().chars().next());%0A++++%0A++++let+s+=+%22++%D7%A2%D7%91%D7%A8%D7%99%D7%AA++%22;%0A++++assert!(Some(%27%D7%A2%27)+==+s.trim_start().chars().next());%0A%7D&edition=2021)\n\n1.30.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#2021)\n\nReturns a string slice with trailing whitespace removed.\n\n‘Whitespace’ is defined according to the terms of the Unicode Derived Core Property `White_Space`, which includes newlines.\n\n##### [§](#text-directionality-1)Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last position of that byte string; for a left-to-right language like English or Russian, this will be right side, and for right-to-left languages like Arabic or Hebrew, this will be the left side.\n\n##### [§](#examples-44)Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s+=+%22%5Cn+Hello%5Ctworld%5Ct%5Cn%22;%0A++++assert_eq!(%22%5Cn+Hello%5Ctworld%22,+s.trim_end());%0A%7D&edition=2021)\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s+=+%22++English++%22;%0A++++assert!(Some(%27h%27)+==+s.trim_end().chars().rev().next());%0A++++%0A++++let+s+=+%22++%D7%A2%D7%91%D7%A8%D7%99%D7%AA++%22;%0A++++assert!(Some(%27%D7%AA%27)+==+s.trim_end().chars().rev().next());%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#2061)\n\n👎Deprecated since 1.33.0: superseded by `trim_start`\n\nReturns a string slice with leading whitespace removed.\n\n‘Whitespace’ is defined according to the terms of the Unicode Derived Core Property `White_Space`.\n\n##### [§](#text-directionality-2)Text directionality\n\nA string is a sequence of bytes. ‘Left’ in this context means the first position of that byte string; for a language like Arabic or Hebrew which are ‘right to left’ rather than ‘left to right’, this will be the _right_ side, not the left.\n\n##### [§](#examples-45)Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s+=+%22+Hello%5Ctworld%5Ct%22;%0A++++%0A++++assert_eq!(%22Hello%5Ctworld%5Ct%22,+s.trim_left());%0A%7D&edition=2021)\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s+=+%22++English%22;%0A++++assert!(Some(%27E%27)+==+s.trim_left().chars().next());%0A++++%0A++++let+s+=+%22++%D7%A2%D7%91%D7%A8%D7%99%D7%AA%22;%0A++++assert!(Some(%27%D7%A2%27)+==+s.trim_left().chars().next());%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#2101)\n\n👎Deprecated since 1.33.0: superseded by `trim_end`\n\nReturns a string slice with trailing whitespace removed.\n\n‘Whitespace’ is defined according to the terms of the Unicode Derived Core Property `White_Space`.\n\n##### [§](#text-directionality-3)Text directionality\n\nA string is a sequence of bytes. ‘Right’ in this context means the last position of that byte string; for a language like Arabic or Hebrew which are ‘right to left’ rather than ‘left to right’, this will be the _left_ side, not the right.\n\n##### [§](#examples-46)Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s+=+%22+Hello%5Ctworld%5Ct%22;%0A++++%0A++++assert_eq!(%22+Hello%5Ctworld%22,+s.trim_right());%0A%7D&edition=2021)\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s+=+%22English++%22;%0A++++assert!(Some(%27h%27)+==+s.trim_right().chars().rev().next());%0A++++%0A++++let+s+=+%22%D7%A2%D7%91%D7%A8%D7%99%D7%AA++%22;%0A++++assert!(Some(%27%D7%AA%27)+==+s.trim_right().chars().rev().next());%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#2134-2136)\n\nReturns a string slice with all prefixes and suffixes that match a pattern repeatedly removed.\n\nThe [pattern](str/pattern/index.html \"mod std::str::pattern\") can be a [`char`](primitive.char.html \"primitive char\"), a slice of [`char`](primitive.char.html \"primitive char\")s, or a function or closure that determines if a character matches.\n\n##### [§](#examples-47)Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(%2211foo1bar11%22.trim_matches(%271%27),+%22foo1bar%22);%0A++++assert_eq!(%22123foo1bar123%22.trim_matches(char::is_numeric),+%22foo1bar%22);%0A++++%0A++++let+x:+%26%5B_%5D+=+%26%5B%271%27,+%272%27%5D;%0A++++assert_eq!(%2212foo1bar12%22.trim_matches(x),+%22foo1bar%22);%0A%7D&edition=2021)\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(%221foo1barXX%22.trim_matches(%7Cc%7C+c+==+%271%27+%7C%7C+c+==+%27X%27),+%22foo1bar%22);%0A%7D&edition=2021)\n\n1.30.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#2181)\n\nReturns a string slice with all prefixes that match a pattern repeatedly removed.\n\nThe [pattern](str/pattern/index.html \"mod std::str::pattern\") can be a `&str`, [`char`](primitive.char.html \"primitive char\"), a slice of [`char`](primitive.char.html \"primitive char\")s, or a function or closure that determines if a character matches.\n\n##### [§](#text-directionality-4)Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first position of that byte string; for a left-to-right language like English or Russian, this will be left side, and for right-to-left languages like Arabic or Hebrew, this will be the right side.\n\n##### [§](#examples-48)Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(%2211foo1bar11%22.trim_start_matches(%271%27),+%22foo1bar11%22);%0A++++assert_eq!(%22123foo1bar123%22.trim_start_matches(char::is_numeric),+%22foo1bar123%22);%0A++++%0A++++let+x:+%26%5B_%5D+=+%26%5B%271%27,+%272%27%5D;%0A++++assert_eq!(%2212foo1bar12%22.trim_start_matches(x),+%22foo1bar12%22);%0A%7D&edition=2021)\n\n1.45.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#2214)\n\nReturns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix, wrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern](str/pattern/index.html \"mod std::str::pattern\") can be a `&str`, [`char`](primitive.char.html \"primitive char\"), a slice of [`char`](primitive.char.html \"primitive char\")s, or a function or closure that determines if a character matches.\n\n##### [§](#examples-49)Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(%22foo:bar%22.strip_prefix(%22foo:%22),+Some(%22bar%22));%0A++++assert_eq!(%22foo:bar%22.strip_prefix(%22bar%22),+None);%0A++++assert_eq!(%22foofoo%22.strip_prefix(%22foo%22),+Some(%22foo%22));%0A%7D&edition=2021)\n\n1.45.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#2241-2244)\n\nReturns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix, wrapped in `Some`. Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern](str/pattern/index.html \"mod std::str::pattern\") can be a `&str`, [`char`](primitive.char.html \"primitive char\"), a slice of [`char`](primitive.char.html \"primitive char\")s, or a function or closure that determines if a character matches.\n\n##### [§](#examples-50)Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(%22bar:foo%22.strip_suffix(%22:foo%22),+Some(%22bar%22));%0A++++assert_eq!(%22bar:foo%22.strip_suffix(%22bar%22),+None);%0A++++assert_eq!(%22foofoo%22.strip_suffix(%22foo%22),+Some(%22foo%22));%0A%7D&edition=2021)\n\n1.30.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#2285-2287)\n\nReturns a string slice with all suffixes that match a pattern repeatedly removed.\n\nThe [pattern](str/pattern/index.html \"mod std::str::pattern\") can be a `&str`, [`char`](primitive.char.html \"primitive char\"), a slice of [`char`](primitive.char.html \"primitive char\")s, or a function or closure that determines if a character matches.\n\n##### [§](#text-directionality-5)Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last position of that byte string; for a left-to-right language like English or Russian, this will be right side, and for right-to-left languages like Arabic or Hebrew, this will be the left side.\n\n##### [§](#examples-51)Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(%2211foo1bar11%22.trim_end_matches(%271%27),+%2211foo1bar%22);%0A++++assert_eq!(%22123foo1bar123%22.trim_end_matches(char::is_numeric),+%22123foo1bar%22);%0A++++%0A++++let+x:+%26%5B_%5D+=+%26%5B%271%27,+%272%27%5D;%0A++++assert_eq!(%2212foo1bar12%22.trim_end_matches(x),+%2212foo1bar%22);%0A%7D&edition=2021)\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(%221fooX%22.trim_end_matches(%7Cc%7C+c+==+%271%27+%7C%7C+c+==+%27X%27),+%221foo%22);%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#2329)\n\n👎Deprecated since 1.33.0: superseded by `trim_start_matches`\n\nReturns a string slice with all prefixes that match a pattern repeatedly removed.\n\nThe [pattern](str/pattern/index.html \"mod std::str::pattern\") can be a `&str`, [`char`](primitive.char.html \"primitive char\"), a slice of [`char`](primitive.char.html \"primitive char\")s, or a function or closure that determines if a character matches.\n\n##### [§](#text-directionality-6)Text directionality\n\nA string is a sequence of bytes. ‘Left’ in this context means the first position of that byte string; for a language like Arabic or Hebrew which are ‘right to left’ rather than ‘left to right’, this will be the _right_ side, not the left.\n\n##### [§](#examples-52)Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(%2211foo1bar11%22.trim_left_matches(%271%27),+%22foo1bar11%22);%0A++++assert_eq!(%22123foo1bar123%22.trim_left_matches(char::is_numeric),+%22foo1bar123%22);%0A++++%0A++++let+x:+%26%5B_%5D+=+%26%5B%271%27,+%272%27%5D;%0A++++assert_eq!(%2212foo1bar12%22.trim_left_matches(x),+%22foo1bar12%22);%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#2372-2374)\n\n👎Deprecated since 1.33.0: superseded by `trim_end_matches`\n\nReturns a string slice with all suffixes that match a pattern repeatedly removed.\n\nThe [pattern](str/pattern/index.html \"mod std::str::pattern\") can be a `&str`, [`char`](primitive.char.html \"primitive char\"), a slice of [`char`](primitive.char.html \"primitive char\")s, or a function or closure that determines if a character matches.\n\n##### [§](#text-directionality-7)Text directionality\n\nA string is a sequence of bytes. ‘Right’ in this context means the last position of that byte string; for a language like Arabic or Hebrew which are ‘right to left’ rather than ‘left to right’, this will be the _left_ side, not the right.\n\n##### [§](#examples-53)Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(%2211foo1bar11%22.trim_right_matches(%271%27),+%2211foo1bar%22);%0A++++assert_eq!(%22123foo1bar123%22.trim_right_matches(char::is_numeric),+%22123foo1bar%22);%0A++++%0A++++let+x:+%26%5B_%5D+=+%26%5B%271%27,+%272%27%5D;%0A++++assert_eq!(%2212foo1bar12%22.trim_right_matches(x),+%2212foo1bar%22);%0A%7D&edition=2021)\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(%221fooX%22.trim_right_matches(%7Cc%7C+c+==+%271%27+%7C%7C+c+==+%27X%27),+%221foo%22);%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#2424)\n\nParses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type inference. As such, `parse` is one of the few times you’ll see the syntax affectionately known as the ‘turbofish’: `::<>`. This helps the inference algorithm understand specifically which type you’re trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`](str/trait.FromStr.html \"trait std::str::FromStr\") trait.\n\n##### [§](#errors)Errors\n\nWill return [`Err`](about:blank/str/trait.FromStr.html#associatedtype.Err \"associated type std::str::FromStr::Err\") if it’s not possible to parse this string slice into the desired type.\n\n##### [§](#examples-54)Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+four:+u32+=+%224%22.parse().unwrap();%0A++++%0A++++assert_eq!(4,+four);%0A%7D&edition=2021)\n\nUsing the ‘turbofish’ instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+four+=+%224%22.parse::%3Cu32%3E();%0A++++%0A++++assert_eq!(Ok(4),+four);%0A%7D&edition=2021)\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+nope+=+%22j%22.parse::%3Cu32%3E();%0A++++%0A++++assert!(nope.is_err());%0A%7D&edition=2021)\n\n1.23.0 (const: 1.74.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#2443)\n\nChecks if all characters in this string are within the ASCII range.\n\n##### [§](#examples-55)Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+ascii+=+%22hello!%5Cn%22;%0A++++let+non_ascii+=+%22Gr%C3%BC%C3%9Fe,+J%C3%BCrgen+%E2%9D%A4%22;%0A++++%0A++++assert!(ascii.is_ascii());%0A++++assert!(!non_ascii.is_ascii());%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#2455)\n\n🔬This is a nightly-only experimental API. (`ascii_char` [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nIf this string slice [`is_ascii`](about:blank/primitive.str.html#method.is_ascii \"method str::is_ascii\"), returns it as a slice of [ASCII characters](ascii/enum.Char.html \"enum std::ascii::Char\"), otherwise returns `None`.\n\n1.23.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#2475)\n\nChecks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`, but without allocating and copying temporaries.\n\n##### [§](#examples-56)Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert!(%22Ferris%22.eq_ignore_ascii_case(%22FERRIS%22));%0A++++assert!(%22Ferr%C3%B6s%22.eq_ignore_ascii_case(%22FERR%C3%B6S%22));%0A++++assert!(!%22Ferr%C3%B6s%22.eq_ignore_ascii_case(%22FERR%C3%96S%22));%0A%7D&edition=2021)\n\n1.23.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#2500)\n\nConverts this string to its ASCII upper case equivalent in-place.\n\nASCII letters ‘a’ to ‘z’ are mapped to ‘A’ to ‘Z’, but non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use [`to_ascii_uppercase()`](#method.to_ascii_uppercase).\n\n##### [§](#examples-57)Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+s+=+String::from(%22Gr%C3%BC%C3%9Fe,+J%C3%BCrgen+%E2%9D%A4%22);%0A++++%0A++++s.make_ascii_uppercase();%0A++++%0A++++assert_eq!(%22GR%C3%BC%C3%9FE,+J%C3%BCRGEN+%E2%9D%A4%22,+s);%0A%7D&edition=2021)\n\n1.23.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#2527)\n\nConverts this string to its ASCII lower case equivalent in-place.\n\nASCII letters ‘A’ to ‘Z’ are mapped to ‘a’ to ‘z’, but non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use [`to_ascii_lowercase()`](#method.to_ascii_lowercase).\n\n##### [§](#examples-58)Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+s+=+String::from(%22GR%C3%9C%C3%9FE,+J%C3%9CRGEN+%E2%9D%A4%22);%0A++++%0A++++s.make_ascii_lowercase();%0A++++%0A++++assert_eq!(%22gr%C3%9C%C3%9Fe,+j%C3%9Crgen+%E2%9D%A4%22,+s);%0A%7D&edition=2021)\n\n1.80.0 (const: 1.80.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#2552)\n\nReturns a string slice with leading ASCII whitespace removed.\n\n‘Whitespace’ refers to the definition used by [`u8::is_ascii_whitespace`](about:blank/primitive.u8.html#method.is_ascii_whitespace \"method u8::is_ascii_whitespace\").\n\n##### [§](#examples-59)Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(%22+%5Ct+%5Cu%7B3000%7Dhello+world%5Cn%22.trim_ascii_start(),+%22%5Cu%7B3000%7Dhello+world%5Cn%22);%0A++++assert_eq!(%22++%22.trim_ascii_start(),+%22%22);%0A++++assert_eq!(%22%22.trim_ascii_start(),+%22%22);%0A%7D&edition=2021)\n\n1.80.0 (const: 1.80.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#2577)\n\nReturns a string slice with trailing ASCII whitespace removed.\n\n‘Whitespace’ refers to the definition used by [`u8::is_ascii_whitespace`](about:blank/primitive.u8.html#method.is_ascii_whitespace \"method u8::is_ascii_whitespace\").\n\n##### [§](#examples-60)Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(%22%5Cr+hello+world%5Cu%7B3000%7D%5Cn+%22.trim_ascii_end(),+%22%5Cr+hello+world%5Cu%7B3000%7D%22);%0A++++assert_eq!(%22++%22.trim_ascii_end(),+%22%22);%0A++++assert_eq!(%22%22.trim_ascii_end(),+%22%22);%0A%7D&edition=2021)\n\n1.80.0 (const: 1.80.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#2603)\n\nReturns a string slice with leading and trailing ASCII whitespace removed.\n\n‘Whitespace’ refers to the definition used by [`u8::is_ascii_whitespace`](about:blank/primitive.u8.html#method.is_ascii_whitespace \"method u8::is_ascii_whitespace\").\n\n##### [§](#examples-61)Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(%22%5Cr+hello+world%5Cn+%22.trim_ascii(),+%22hello+world%22);%0A++++assert_eq!(%22++%22.trim_ascii(),+%22%22);%0A++++assert_eq!(%22%22.trim_ascii(),+%22%22);%0A%7D&edition=2021)\n\n1.34.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#2646)\n\nReturn an iterator that escapes each char in `self` with [`char::escape_debug`](about:blank/primitive.char.html#method.escape_debug \"method char::escape_debug\").\n\nNote: only extended grapheme codepoints that begin the string will be escaped.\n\n##### [§](#examples-62)Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++for+c+in+%22%E2%9D%A4%5Cn!%22.escape_debug()+%7B%0A++++++++print!(%22%7Bc%7D%22);%0A++++%7D%0A++++println!();%0A%7D&edition=2021)\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++println!(%22%7B%7D%22,+%22%E2%9D%A4%5Cn!%22.escape_debug());%0A%7D&edition=2021)\n\nBoth are equivalent to:\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(%22%E2%9D%A4%5Cn!%22.escape_debug().to_string(),+%22%E2%9D%A4%5C%5Cn!%22);%0A%7D&edition=2021)\n\n1.34.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#2697)\n\nReturn an iterator that escapes each char in `self` with [`char::escape_default`](about:blank/primitive.char.html#method.escape_default \"method char::escape_default\").\n\n##### [§](#examples-63)Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++for+c+in+%22%E2%9D%A4%5Cn!%22.escape_default()+%7B%0A++++++++print!(%22%7Bc%7D%22);%0A++++%7D%0A++++println!();%0A%7D&edition=2021)\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++println!(%22%7B%7D%22,+%22%E2%9D%A4%5Cn!%22.escape_default());%0A%7D&edition=2021)\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++println!(%22%5C%5Cu%7B%7B2764%7D%7D%5C%5Cn!%22);%0A%7D&edition=2021)\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(%22%E2%9D%A4%5Cn!%22.escape_default().to_string(),+%22%5C%5Cu%7B2764%7D%5C%5Cn!%22);%0A%7D&edition=2021)\n\n1.34.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#2735)\n\nReturn an iterator that escapes each char in `self` with [`char::escape_unicode`](about:blank/primitive.char.html#method.escape_unicode \"method char::escape_unicode\").\n\n##### [§](#examples-64)Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++for+c+in+%22%E2%9D%A4%5Cn!%22.escape_unicode()+%7B%0A++++++++print!(%22%7Bc%7D%22);%0A++++%7D%0A++++println!();%0A%7D&edition=2021)\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++println!(%22%7B%7D%22,+%22%E2%9D%A4%5Cn!%22.escape_unicode());%0A%7D&edition=2021)\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++println!(%22%5C%5Cu%7B%7B2764%7D%7D%5C%5Cu%7B%7Ba%7D%7D%5C%5Cu%7B%7B21%7D%7D%22);%0A%7D&edition=2021)\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(%22%E2%9D%A4%5Cn!%22.escape_unicode().to_string(),+%22%5C%5Cu%7B2764%7D%5C%5Cu%7Ba%7D%5C%5Cu%7B21%7D%22);%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/str.rs.html#223)[§](#impl-str-1)\n\nMethods for string slices.\n\n1.20.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/str.rs.html#238)\n\nConverts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n##### [§](#examples-65)Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s+=+%22this+is+a+string%22;%0A++++let+boxed_str+=+s.to_owned().into_boxed_str();%0A++++let+boxed_bytes+=+boxed_str.into_boxed_bytes();%0A++++assert_eq!(*boxed_bytes,+*s.as_bytes());%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/str.rs.html#271)\n\nReplaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`](string/struct.String.html \"struct std::string::String\"), and copies the data from this string slice into it. While doing so, it attempts to find matches of a pattern. If it finds any, it replaces them with the replacement string slice.\n\n##### [§](#examples-66)Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s+=+%22this+is+old%22;%0A++++%0A++++assert_eq!(%22this+is+new%22,+s.replace(%22old%22,+%22new%22));%0A++++assert_eq!(%22than+an+old%22,+s.replace(%22is%22,+%22an%22));%0A%7D&edition=2021)\n\nWhen the pattern doesn’t match, it returns this string slice as [`String`](string/struct.String.html \"struct std::string::String\"):\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s+=+%22this+is+old%22;%0A++++assert_eq!(s,+s.replace(%22cookie+monster%22,+%22little+lamb%22));%0A%7D&edition=2021)\n\n1.16.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/str.rs.html#311)\n\nReplaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`](string/struct.String.html \"struct std::string::String\"), and copies the data from this string slice into it. While doing so, it attempts to find matches of a pattern. If it finds any, it replaces them with the replacement string slice at most `count` times.\n\n##### [§](#examples-67)Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s+=+%22foo+foo+123+foo%22;%0A++++assert_eq!(%22new+new+123+foo%22,+s.replacen(%22foo%22,+%22new%22,+2));%0A++++assert_eq!(%22faa+fao+123+foo%22,+s.replacen(%27o%27,+%22a%22,+3));%0A++++assert_eq!(%22foo+foo+new23+foo%22,+s.replacen(char::is_numeric,+%22new%22,+1));%0A%7D&edition=2021)\n\nWhen the pattern doesn’t match, it returns this string slice as [`String`](string/struct.String.html \"struct std::string::String\"):\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s+=+%22this+is+old%22;%0A++++assert_eq!(s,+s.replacen(%22cookie+monster%22,+%22little+lamb%22,+10));%0A%7D&edition=2021)\n\n1.2.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/str.rs.html#368)\n\nReturns the lowercase equivalent of this string slice, as a new [`String`](string/struct.String.html \"struct std::string::String\").\n\n‘Lowercase’ is defined according to the terms of the Unicode Derived Core Property `Lowercase`.\n\nSince some characters can expand into multiple characters when changing the case, this function returns a [`String`](string/struct.String.html \"struct std::string::String\") instead of modifying the parameter in-place.\n\n##### [§](#examples-68)Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s+=+%22HELLO%22;%0A++++%0A++++assert_eq!(%22hello%22,+s.to_lowercase());%0A%7D&edition=2021)\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+sigma+=+%22%CE%A3%22;%0A++++%0A++++assert_eq!(%22%CF%83%22,+sigma.to_lowercase());%0A++++%0A++++//+but+at+the+end+of+a+word,+it%27s+%CF%82,+not+%CF%83:%0A++++let+odysseus+=+%22%E1%BD%88%CE%94%CE%A5%CE%A3%CE%A3%CE%95%CE%8E%CE%A3%22;%0A++++%0A++++assert_eq!(%22%E1%BD%80%CE%B4%CF%85%CF%83%CF%83%CE%B5%CF%8D%CF%82%22,+odysseus.to_lowercase());%0A%7D&edition=2021)\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+new_year+=+%22%E5%86%9C%E5%8E%86%E6%96%B0%E5%B9%B4%22;%0A++++%0A++++assert_eq!(new_year,+new_year.to_lowercase());%0A%7D&edition=2021)\n\n1.2.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/str.rs.html#461)\n\nReturns the uppercase equivalent of this string slice, as a new [`String`](string/struct.String.html \"struct std::string::String\").\n\n‘Uppercase’ is defined according to the terms of the Unicode Derived Core Property `Uppercase`.\n\nSince some characters can expand into multiple characters when changing the case, this function returns a [`String`](string/struct.String.html \"struct std::string::String\") instead of modifying the parameter in-place.\n\n##### [§](#examples-69)Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s+=+%22hello%22;%0A++++%0A++++assert_eq!(%22HELLO%22,+s.to_uppercase());%0A%7D&edition=2021)\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+new_year+=+%22%E5%86%9C%E5%8E%86%E6%96%B0%E5%B9%B4%22;%0A++++%0A++++assert_eq!(new_year,+new_year.to_uppercase());%0A%7D&edition=2021)\n\nOne character can become multiple:\n\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s+=+%22tsch%C3%BC%C3%9F%22;%0A++++%0A++++assert_eq!(%22TSCH%C3%9CSS%22,+s.to_uppercase());%0A%7D&edition=2021)\n\n1.4.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/str.rs.html#502)\n\nConverts a [`Box<str>`](boxed/struct.Box.html \"struct std::boxed::Box\") into a [`String`](string/struct.String.html \"struct std::string::String\") without copying or allocating.\n\n##### [§](#examples-70)Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+string+=+String::from(%22birthday+gift%22);%0A++++let+boxed_str+=+string.clone().into_boxed_str();%0A++++%0A++++assert_eq!(boxed_str.into_string(),+string);%0A%7D&edition=2021)\n\n1.16.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/str.rs.html#531)\n\nCreates a new [`String`](string/struct.String.html \"struct std::string::String\") by repeating a string `n` times.\n\n##### [§](#panics-2)Panics\n\nThis function will panic if the capacity would overflow.\n\n##### [§](#examples-71)Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(%22abc%22.repeat(4),+String::from(%22abcabcabcabc%22));%0A%7D&edition=2021)\n\nA panic upon overflow:\n\n[ⓘ](# \"This example panics\")\n\n```\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A//+this+will+panic+at+runtime%0Afn+main()+%7B%0A++++let+huge+=+%220123456789abcdef%22.repeat(usize::MAX);%0A%7D&edition=2021)\n\n1.23.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/str.rs.html#561)\n\nReturns a copy of this string where each character is mapped to its ASCII upper case equivalent.\n\nASCII letters ‘a’ to ‘z’ are mapped to ‘A’ to ‘Z’, but non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`](about:blank/primitive.str.html#method.make_ascii_uppercase \"method str::make_ascii_uppercase\").\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use [`to_uppercase`](#method.to_uppercase).\n\n##### [§](#examples-72)Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s+=+%22Gr%C3%BC%C3%9Fe,+J%C3%BCrgen+%E2%9D%A4%22;%0A++++%0A++++assert_eq!(%22GR%C3%BC%C3%9FE,+J%C3%BCRGEN+%E2%9D%A4%22,+s.to_ascii_uppercase());%0A%7D&edition=2021)\n\n1.23.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/str.rs.html#593)\n\nReturns a copy of this string where each character is mapped to its ASCII lower case equivalent.\n\nASCII letters ‘A’ to ‘Z’ are mapped to ‘a’ to ‘z’, but non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`](about:blank/primitive.str.html#method.make_ascii_lowercase \"method str::make_ascii_lowercase\").\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use [`to_lowercase`](#method.to_lowercase).\n\n##### [§](#examples-73)Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s+=+%22Gr%C3%BC%C3%9Fe,+J%C3%BCrgen+%E2%9D%A4%22;%0A++++%0A++++assert_eq!(%22gr%C3%BC%C3%9Fe,+j%C3%BCrgen+%E2%9D%A4%22,+s.to_ascii_lowercase());%0A%7D&edition=2021)\n\n1.14.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#443)[§](#impl-Add%3C%26str%3E-for-Cow%3C'a,+str%3E)\n\n[§](#associatedtype.Output-8)\n\nThe resulting type after applying the `+` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#447)[§](#method.add)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2432)[§](#impl-Add%3C%26str%3E-for-String)\n\nImplements the `+` operator for concatenating two strings.\n\nThis consumes the `String` on the left-hand side and re-uses its buffer (growing it if necessary). This is done to avoid allocating a new `String` and copying the entire contents on every operation, which would lead to _O_(_n_^2) running time when building an _n_\\-byte string by repeated concatenation.\n\nThe string on the right-hand side is only borrowed; its contents are copied into the returned `String`.\n\n#### [§](#examples-76)Examples\n\nConcatenating two `String`s takes the first by value and borrows the second:\n\n```\nlet a = String::from(\"hello\");\nlet b = String::from(\" world\");\nlet c = a + &b;\n// `a` is moved and can no longer be used here.\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+a+=+String::from(%22hello%22);%0A++++let+b+=+String::from(%22+world%22);%0A++++let+c+=+a+%2B+%26b;%0A++++//+%60a%60+is+moved+and+can+no+longer+be+used+here.%0A%7D&edition=2021)\n\nIf you want to keep using the first `String`, you can clone it and append to the clone instead:\n\n```\nlet a = String::from(\"hello\");\nlet b = String::from(\" world\");\nlet c = a.clone() + &b;\n// `a` is still valid here.\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+a+=+String::from(%22hello%22);%0A++++let+b+=+String::from(%22+world%22);%0A++++let+c+=+a.clone()+%2B+%26b;%0A++++//+%60a%60+is+still+valid+here.%0A%7D&edition=2021)\n\nConcatenating `&str` slices can be done by converting the first to a `String`:\n\n```\nlet a = \"hello\";\nlet b = \" world\";\nlet c = a.to_string() + b;\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+a+=+%22hello%22;%0A++++let+b+=+%22+world%22;%0A++++let+c+=+a.to_string()+%2B+b;%0A%7D&edition=2021)\n\n[§](#associatedtype.Output-9)\n\nThe resulting type after applying the `+` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2436)[§](#method.add-1)\n\n1.14.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#467)[§](#impl-AddAssign%3C%26str%3E-for-Cow%3C'a,+str%3E)\n\n1.12.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2447)[§](#impl-AddAssign%3C%26str%3E-for-String)\n\nImplements the `+=` operator for appending to a `String`.\n\nThis has the same behavior as the [`push_str`](about:blank/string/struct.String.html#method.push_str \"method std::string::String::push_str\") method.\n\n1.43.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2692)[§](#impl-AsMut%3Cstr%3E-for-String)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2694)[§](#method.as_mut-1)\n\nConverts this type into a mutable reference of the (usually inferred) input type.\n\n1.51.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#846)[§](#impl-AsMut%3Cstr%3E-for-str)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#848)[§](#method.as_mut)\n\nConverts this type into a mutable reference of the (usually inferred) input type.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#2741)[§](#impl-AsRef%3C%5Bu8%5D%3E-for-str)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#2743)[§](#method.as_ref)\n\nConverts this type into a shared reference of the (usually inferred) input type.\n\n1.0.0 · [source](about:blank/src/std/ffi/os_str.rs.html#1576-1581)[§](#impl-AsRef%3COsStr%3E-for-str)\n\n[source](about:blank/src/std/ffi/os_str.rs.html#1578-1580)[§](#method.as_ref-5)\n\nConverts this type into a shared reference of the (usually inferred) input type.\n\n1.0.0 · [source](about:blank/src/std/path.rs.html#3174-3179)[§](#impl-AsRef%3CPath%3E-for-str)\n\n[source](about:blank/src/std/path.rs.html#3176-3178)[§](#method.as_ref-4)\n\nConverts this type into a shared reference of the (usually inferred) input type.\n\n1.55.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2996)[§](#impl-AsRef%3Cstr%3E-for-Drain%3C'a%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2997)[§](#method.as_ref-3)\n\nConverts this type into a shared reference of the (usually inferred) input type.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2684)[§](#impl-AsRef%3Cstr%3E-for-String)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2686)[§](#method.as_ref-2)\n\nConverts this type into a shared reference of the (usually inferred) input type.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#838)[§](#impl-AsRef%3Cstr%3E-for-str)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#840)[§](#method.as_ref-1)\n\nConverts this type into a shared reference of the (usually inferred) input type.\n\n1.0.0 · [source](about:blank/src/std/ascii.rs.html#207-211)[§](#impl-AsciiExt-for-str)\n\n[§](#associatedtype.Owned-1)\n\n👎Deprecated since 1.26.0: use inherent methods instead\n\nContainer type for copied ASCII characters.\n\n[source](about:blank/src/std/ascii.rs.html#210)[§](#method.is_ascii-1)\n\n👎Deprecated since 1.26.0: use inherent methods instead\n\nChecks if the value is within the ASCII range. [Read more](about:blank/ascii/trait.AsciiExt.html#tymethod.is_ascii)\n\n[source](about:blank/src/std/ascii.rs.html#210)[§](#method.to_ascii_uppercase-1)\n\n👎Deprecated since 1.26.0: use inherent methods instead\n\nMakes a copy of the value in its ASCII upper case equivalent. [Read more](about:blank/ascii/trait.AsciiExt.html#tymethod.to_ascii_uppercase)\n\n[source](about:blank/src/std/ascii.rs.html#210)[§](#method.to_ascii_lowercase-1)\n\n👎Deprecated since 1.26.0: use inherent methods instead\n\nMakes a copy of the value in its ASCII lower case equivalent. [Read more](about:blank/ascii/trait.AsciiExt.html#tymethod.to_ascii_lowercase)\n\n[source](about:blank/src/std/ascii.rs.html#210)[§](#method.eq_ignore_ascii_case-1)\n\n👎Deprecated since 1.26.0: use inherent methods instead\n\nChecks that two values are an ASCII case-insensitive match. [Read more](about:blank/ascii/trait.AsciiExt.html#tymethod.eq_ignore_ascii_case)\n\n[source](about:blank/src/std/ascii.rs.html#210)[§](#method.make_ascii_uppercase-1)\n\n👎Deprecated since 1.26.0: use inherent methods instead\n\nConverts this type to its ASCII upper case equivalent in-place. [Read more](about:blank/ascii/trait.AsciiExt.html#tymethod.make_ascii_uppercase)\n\n[source](about:blank/src/std/ascii.rs.html#210)[§](#method.make_ascii_lowercase-1)\n\n👎Deprecated since 1.26.0: use inherent methods instead\n\nConverts this type to its ASCII lower case equivalent in-place. [Read more](about:blank/ascii/trait.AsciiExt.html#tymethod.make_ascii_lowercase)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/str.rs.html#190)[§](#impl-Borrow%3Cstr%3E-for-String)\n\n1.36.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/str.rs.html#198)[§](#impl-BorrowMut%3Cstr%3E-for-String)\n\n1.3.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1380)[§](#impl-Clone-for-Box%3Cstr%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/str.rs.html#63)[§](#impl-Concat%3Cstr%3E-for-%5BS%5D)\n\nNote: `str` in `Concat<str>` is not meaningful here. This type parameter of the trait only exists to enable another impl.\n\n[§](#associatedtype.Output-11)\n\n🔬This is a nightly-only experimental API. (`slice_concat_trait` [#27747](https://github.com/rust-lang/rust/issues/27747))\n\nThe resulting type after concatenation\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/str.rs.html#66)[§](#method.concat)\n\n🔬This is a nightly-only experimental API. (`slice_concat_trait` [#27747](https://github.com/rust-lang/rust/issues/27747))\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#2398)[§](#impl-Debug-for-str)\n\n1.28.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#2758)[§](#impl-Default-for-%26mut+str)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#2761)[§](#method.default-1)\n\nCreates an empty mutable str\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#2749)[§](#impl-Default-for-%26str)\n\n1.17.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1316)[§](#impl-Default-for-Box%3Cstr%3E)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#2447)[§](#impl-Display-for-str)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#2779)[§](#impl-Error-for-%26str)\n\n1.30.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/error.rs.html#84)[§](#method.source)\n\nThe lower-level source of this error, if any. [Read more](about:blank/error/trait.Error.html#method.source)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/error.rs.html#110)[§](#method.description)\n\n👎Deprecated since 1.42.0: use the Display impl or to\\_string()\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/error.rs.html#120)[§](#method.cause)\n\n👎Deprecated since 1.33.0: replaced by Error::source, which can support downcasting\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/error.rs.html#184)[§](#method.provide)\n\n🔬This is a nightly-only experimental API. (`error_generic_member_access` [#99301](https://github.com/rust-lang/rust/issues/99301))\n\nProvides type based access to context intended for error reports. [Read more](about:blank/error/trait.Error.html#method.provide)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2231)[§](#impl-Extend%3C%26str%3E-for-String)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2232)[§](#method.extend)\n\nExtends a collection with the contents of an iterator. [Read more](about:blank/iter/trait.Extend.html#tymethod.extend)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2237)[§](#method.extend_one)\n\n🔬This is a nightly-only experimental API. (`extend_one` [#72631](https://github.com/rust-lang/rust/issues/72631))\n\nExtends a collection with exactly one element.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/collect.rs.html#461)[§](#method.extend_reserve)\n\n🔬This is a nightly-only experimental API. (`extend_one` [#72631](https://github.com/rust-lang/rust/issues/72631))\n\nReserves capacity in a collection for the given number of additional elements. [Read more](about:blank/iter/trait.Extend.html#method.extend_reserve)\n\n1.44.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2721)[§](#impl-From%3C%26mut+str%3E-for-String)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2726)[§](#method.from-2)\n\nConverts a `&mut str` into a [`String`](string/struct.String.html \"struct std::string::String\").\n\nThe result is allocated on the heap.\n\n1.21.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/sync.rs.html#3539)[§](#impl-From%3C%26str%3E-for-Arc%3Cstr%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/sync.rs.html#3550)[§](#method.from-3)\n\nAllocate a reference-counted `str` and copy `v` into it.\n\n##### [§](#example-1)Example\n\n```\nlet shared: Arc<str> = Arc::from(\"eggplant\");\nassert_eq!(\"eggplant\", &shared[..]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::Arc;%0A++++let+shared:+Arc%3Cstr%3E+=+Arc::from(%22eggplant%22);%0A++++assert_eq!(%22eggplant%22,+%26shared%5B..%5D);%0A%7D&edition=2021)\n\n1.6.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2559)[§](#impl-From%3C%26str%3E-for-Box%3Cdyn+Error%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2574)[§](#method.from-4)\n\nConverts a [`str`](primitive.str.html \"primitive str\") into a box of dyn [`Error`](error/trait.Error.html \"trait std::error::Error\").\n\n##### [§](#examples-78)Examples\n\n```\nuse std::error::Error;\nuse std::mem;\n\nlet a_str_error = \"a str error\";\nlet a_boxed_error = Box::<dyn Error>::from(a_str_error);\nassert!(mem::size_of::<Box<dyn Error>>() == mem::size_of_val(&a_boxed_error))\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::error::Error;%0A++++use+std::mem;%0A++++%0A++++let+a_str_error+=+%22a+str+error%22;%0A++++let+a_boxed_error+=+Box::%3Cdyn+Error%3E::from(a_str_error);%0A++++assert!(mem::size_of::%3CBox%3Cdyn+Error%3E%3E()+==+mem::size_of_val(%26a_boxed_error))%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2535)[§](#impl-From%3C%26str%3E-for-Box%3Cdyn+Error+%2B+Send+%2B+Sync%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2552)[§](#method.from-8)\n\nConverts a [`str`](primitive.str.html \"primitive str\") into a box of dyn [`Error`](error/trait.Error.html \"trait std::error::Error\") + [`Send`](marker/trait.Send.html \"trait std::marker::Send\") + [`Sync`](marker/trait.Sync.html \"trait std::marker::Sync\").\n\n##### [§](#examples-81)Examples\n\n```\nuse std::error::Error;\nuse std::mem;\n\nlet a_str_error = \"a str error\";\nlet a_boxed_error = Box::<dyn Error + Send + Sync>::from(a_str_error);\nassert!(\n    mem::size_of::<Box<dyn Error + Send + Sync>>() == mem::size_of_val(&a_boxed_error))\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::error::Error;%0A++++use+std::mem;%0A++++%0A++++let+a_str_error+=+%22a+str+error%22;%0A++++let+a_boxed_error+=+Box::%3Cdyn+Error+%2B+Send+%2B+Sync%3E::from(a_str_error);%0A++++assert!(%0A++++++++mem::size_of::%3CBox%3Cdyn+Error+%2B+Send+%2B+Sync%3E%3E()+==+mem::size_of_val(%26a_boxed_error))%0A%7D&edition=2021)\n\n1.17.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1602)[§](#impl-From%3C%26str%3E-for-Box%3Cstr%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1615)[§](#method.from-10)\n\nConverts a `&str` into a `Box<str>`\n\nThis conversion allocates on the heap and performs a copy of `s`.\n\n##### [§](#examples-82)Examples\n\n```\nlet boxed: Box<str> = Box::from(\"hello\");\nprintln!(\"{boxed}\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+boxed:+Box%3Cstr%3E+=+Box::from(%22hello%22);%0A++++println!(%22%7Bboxed%7D%22);%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2809)[§](#impl-From%3C%26str%3E-for-Cow%3C'a,+str%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2823)[§](#method.from-6)\n\nConverts a string slice into a [`Borrowed`](about:blank/borrow/enum.Cow.html#variant.Borrowed \"borrow::Cow::Borrowed\") variant. No heap allocation is performed, and the string is not copied.\n\n##### [§](#example-2)Example\n\n```\nassert_eq!(Cow::from(\"eggplant\"), Cow::Borrowed(\"eggplant\"));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::borrow::Cow;%0A++++assert_eq!(Cow::from(%22eggplant%22),+Cow::Borrowed(%22eggplant%22));%0A%7D&edition=2021)\n\n1.21.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/rc.rs.html#2580)[§](#impl-From%3C%26str%3E-for-Rc%3Cstr%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/rc.rs.html#2591)[§](#method.from)\n\nAllocate a reference-counted string slice and copy `v` into it.\n\n##### [§](#example)Example\n\n```\nlet shared: Rc<str> = Rc::from(\"statue\");\nassert_eq!(\"statue\", &shared[..]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::rc::Rc;%0A++++let+shared:+Rc%3Cstr%3E+=+Rc::from(%22statue%22);%0A++++assert_eq!(%22statue%22,+%26shared%5B..%5D);%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2709)[§](#impl-From%3C%26str%3E-for-String)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2714)[§](#method.from-9)\n\nConverts a `&str` into a [`String`](string/struct.String.html \"struct std::string::String\").\n\nThe result is allocated on the heap.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3497)[§](#impl-From%3C%26str%3E-for-Vec%3Cu8%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3505)[§](#method.from-7)\n\nAllocate a `Vec<u8>` and fill it with a UTF-8 string.\n\n##### [§](#examples-80)Examples\n\n```\nassert_eq!(Vec::from(\"123\"), vec![b'1', b'2', b'3']);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(Vec::from(%22123%22),+vec!%5Bb%271%27,+b%272%27,+b%273%27%5D);%0A%7D&edition=2021)\n\n1.45.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1622)[§](#impl-From%3CCow%3C'_,+str%3E%3E-for-Box%3Cstr%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1647)[§](#method.from-1)\n\nConverts a `Cow<'_, str>` into a `Box<str>`\n\nWhen `cow` is the `Cow::Borrowed` variant, this conversion allocates on the heap and copies the underlying `str`. Otherwise, it will try to reuse the owned `String`’s allocation.\n\n##### [§](#examples-77)Examples\n\n```\nuse std::borrow::Cow;\n\nlet unboxed = Cow::Borrowed(\"hello\");\nlet boxed: Box<str> = Box::from(unboxed);\nprintln!(\"{boxed}\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::borrow::Cow;%0A++++%0A++++let+unboxed+=+Cow::Borrowed(%22hello%22);%0A++++let+boxed:+Box%3Cstr%3E+=+Box::from(unboxed);%0A++++println!(%22%7Bboxed%7D%22);%0A%7D&edition=2021)\n\n```\nlet unboxed = Cow::Owned(\"hello\".to_string());\nlet boxed: Box<str> = Box::from(unboxed);\nprintln!(\"{boxed}\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::borrow::Cow;%0A++++let+unboxed+=+Cow::Owned(%22hello%22.to_string());%0A++++let+boxed:+Box%3Cstr%3E+=+Box::from(unboxed);%0A++++println!(%22%7Bboxed%7D%22);%0A%7D&edition=2021)\n\n1.20.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2766)[§](#impl-From%3CString%3E-for-Box%3Cstr%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2778)[§](#method.from-5)\n\nConverts the given [`String`](string/struct.String.html \"struct std::string::String\") to a boxed `str` slice that is owned.\n\n##### [§](#examples-79)Examples\n\n```\nlet s1: String = String::from(\"hello world\");\nlet s2: Box<str> = Box::from(s1);\nlet s3: String = String::from(s2);\n\nassert_eq!(\"hello world\", s3)\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s1:+String+=+String::from(%22hello+world%22);%0A++++let+s2:+Box%3Cstr%3E+=+Box::from(s1);%0A++++let+s3:+String+=+String::from(s2);%0A++++%0A++++assert_eq!(%22hello+world%22,+s3)%0A%7D&edition=2021)\n\n1.80.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2179)[§](#impl-FromIterator%3C%26char%3E-for-Box%3Cstr%3E)\n\n1.80.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2187)[§](#impl-FromIterator%3C%26str%3E-for-Box%3Cstr%3E)\n\n1.12.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2883)[§](#impl-FromIterator%3C%26str%3E-for-Cow%3C'a,+str%3E)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2133)[§](#impl-FromIterator%3C%26str%3E-for-String)\n\n1.80.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2203)[§](#impl-FromIterator%3CBox%3Cstr,+A%3E%3E-for-Box%3Cstr%3E)\n\n1.80.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2211)[§](#impl-FromIterator%3CCow%3C'a,+str%3E%3E-for-Box%3Cstr%3E)\n\n1.80.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2195)[§](#impl-FromIterator%3CString%3E-for-Box%3Cstr%3E)\n\n1.80.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2171)[§](#impl-FromIterator%3Cchar%3E-for-Box%3Cstr%3E)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#868)[§](#impl-Hash-for-str)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#54-56)[§](#impl-Index%3CI%3E-for-str)\n\n[§](#associatedtype.Output-7)\n\nThe returned type after indexing.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#61)[§](#method.index-7)\n\nPerforms the indexing (`container[index]`) operation. [Read more](about:blank/ops/trait.Index.html#tymethod.index)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#67-69)[§](#impl-IndexMut%3CI%3E-for-str)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/str.rs.html#73)[§](#impl-Join%3C%26str%3E-for-%5BS%5D)\n\n[§](#associatedtype.Output-10)\n\n🔬This is a nightly-only experimental API. (`slice_concat_trait` [#27747](https://github.com/rust-lang/rust/issues/27747))\n\nThe resulting type after concatenation\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/str.rs.html#76)[§](#method.join)\n\n🔬This is a nightly-only experimental API. (`slice_concat_trait` [#27747](https://github.com/rust-lang/rust/issues/27747))\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#20)[§](#impl-Ord-for-str)\n\nImplements ordering of strings.\n\nStrings are ordered [lexicographically](about:blank/cmp/trait.Ord.html#lexicographical-comparison \"trait std::cmp::Ord\") by their byte values. This orders Unicode code points based on their positions in the code charts. This is not necessarily the same as “alphabetical” order, which varies by language and locale. Sorting strings according to culturally-accepted standards requires locale-specific data that is outside the scope of the `str` type.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2356)[§](#impl-PartialEq%3C%26str%3E-for-Cow%3C'a,+str%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2356)[§](#method.eq-2)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2356)[§](#method.ne-2)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.29.0 · [source](about:blank/src/std/ffi/os_str.rs.html#657-662)[§](#impl-PartialEq%3C%26str%3E-for-OsString)\n\n[source](about:blank/src/std/ffi/os_str.rs.html#659-661)[§](#method.eq-12)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[§](#method.ne-12)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2352)[§](#impl-PartialEq%3C%26str%3E-for-String)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2352)[§](#method.eq-3)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2352)[§](#method.ne-3)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2356)[§](#impl-PartialEq%3CCow%3C'a,+str%3E%3E-for-%26str)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2356)[§](#method.eq-1)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2356)[§](#method.ne-1)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2354)[§](#impl-PartialEq%3CCow%3C'a,+str%3E%3E-for-str)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2354)[§](#method.eq-8)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2354)[§](#method.ne-8)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.0.0 · [source](about:blank/src/std/ffi/os_str.rs.html#1372-1377)[§](#impl-PartialEq%3COsStr%3E-for-str)\n\n[source](about:blank/src/std/ffi/os_str.rs.html#1374-1376)[§](#method.eq-9)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[§](#method.ne-9)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.29.0 · [source](about:blank/src/std/ffi/os_str.rs.html#665-670)[§](#impl-PartialEq%3COsString%3E-for-%26str)\n\n[source](about:blank/src/std/ffi/os_str.rs.html#667-669)[§](#method.eq-13)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[§](#method.ne-13)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.0.0 · [source](about:blank/src/std/ffi/os_str.rs.html#649-654)[§](#impl-PartialEq%3COsString%3E-for-str)\n\n[source](about:blank/src/std/ffi/os_str.rs.html#651-653)[§](#method.eq-11)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[§](#method.ne-11)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2352)[§](#impl-PartialEq%3CString%3E-for-%26str)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2352)[§](#method.eq-5)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2352)[§](#method.ne-5)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2351)[§](#impl-PartialEq%3CString%3E-for-str)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2351)[§](#method.eq-4)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2351)[§](#method.ne-4)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2354)[§](#impl-PartialEq%3Cstr%3E-for-Cow%3C'a,+str%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2354)[§](#method.eq-6)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2354)[§](#method.ne-6)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.0.0 · [source](about:blank/src/std/ffi/os_str.rs.html#1364-1369)[§](#impl-PartialEq%3Cstr%3E-for-OsStr)\n\n[source](about:blank/src/std/ffi/os_str.rs.html#1366-1368)[§](#method.eq-10)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[§](#method.ne-10)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.0.0 · [source](about:blank/src/std/ffi/os_str.rs.html#641-646)[§](#impl-PartialEq%3Cstr%3E-for-OsString)\n\n[source](about:blank/src/std/ffi/os_str.rs.html#643-645)[§](#method.eq-14)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[§](#method.ne-14)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2351)[§](#impl-PartialEq%3Cstr%3E-for-String)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2351)[§](#method.eq-7)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2351)[§](#method.ne-7)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#28)[§](#impl-PartialEq-for-str)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#30)[§](#method.eq)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[§](#method.ne)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.0.0 · [source](about:blank/src/std/ffi/os_str.rs.html#1407-1412)[§](#impl-PartialOrd%3Cstr%3E-for-OsStr)\n\n[source](about:blank/src/std/ffi/os_str.rs.html#1409-1411)[§](#method.partial_cmp-1)\n\nThis method returns an ordering between `self` and `other` values if one exists. [Read more](about:blank/cmp/trait.PartialOrd.html#tymethod.partial_cmp)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180)[§](#method.lt-1)\n\nThis method tests less than (for `self` and `other`) and is used by the `<` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.lt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198)[§](#method.le-1)\n\nThis method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.le)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215)[§](#method.gt-1)\n\nThis method tests greater than (for `self` and `other`) and is used by the `>` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.gt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233)[§](#method.ge-1)\n\nThis method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.ge)\n\n1.0.0 · [source](about:blank/src/std/ffi/os_str.rs.html#700-705)[§](#impl-PartialOrd%3Cstr%3E-for-OsString)\n\n[source](about:blank/src/std/ffi/os_str.rs.html#702-704)[§](#method.partial_cmp-2)\n\nThis method returns an ordering between `self` and `other` values if one exists. [Read more](about:blank/cmp/trait.PartialOrd.html#tymethod.partial_cmp)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180)[§](#method.lt-2)\n\nThis method tests less than (for `self` and `other`) and is used by the `<` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.lt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198)[§](#method.le-2)\n\nThis method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.le)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215)[§](#method.gt-2)\n\nThis method tests greater than (for `self` and `other`) and is used by the `>` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.gt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233)[§](#method.ge-2)\n\nThis method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.ge)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#46)[§](#impl-PartialOrd-for-str)\n\nImplements comparison operations on strings.\n\nStrings are compared [lexicographically](about:blank/cmp/trait.Ord.html#lexicographical-comparison \"trait std::cmp::Ord\") by their byte values. This compares Unicode code points based on their positions in the code charts. This is not necessarily the same as “alphabetical” order, which varies by language and locale. Comparing strings according to culturally-accepted standards requires locale-specific data that is outside the scope of the `str` type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#48)[§](#method.partial_cmp)\n\nThis method returns an ordering between `self` and `other` values if one exists. [Read more](about:blank/cmp/trait.PartialOrd.html#tymethod.partial_cmp)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180)[§](#method.lt)\n\nThis method tests less than (for `self` and `other`) and is used by the `<` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.lt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198)[§](#method.le)\n\nThis method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.le)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215)[§](#method.gt)\n\nThis method tests greater than (for `self` and `other`) and is used by the `>` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.gt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233)[§](#method.ge)\n\nThis method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.ge)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#952)[§](#impl-Pattern%3C'a%3E-for-%26str)\n\nNon-allocating substring search.\n\nWill handle the pattern `\"\"` as returning empty matches at each character boundary.\n\n#### [§](#examples-75)Examples\n\n```\nassert_eq!(\"Hello world\".find(\"world\"), Some(6));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(%22Hello+world%22.find(%22world%22),+Some(6));%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#962)[§](#method.is_prefix_of)\n\n🔬This is a nightly-only experimental API. (`pattern` [#27721](https://github.com/rust-lang/rust/issues/27721))\n\nChecks whether the pattern matches at the front of the haystack.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#968)[§](#method.is_contained_in)\n\n🔬This is a nightly-only experimental API. (`pattern` [#27721](https://github.com/rust-lang/rust/issues/27721))\n\nChecks whether the pattern matches anywhere in the haystack\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#994)[§](#method.strip_prefix_of)\n\n🔬This is a nightly-only experimental API. (`pattern` [#27721](https://github.com/rust-lang/rust/issues/27721))\n\nRemoves the pattern from the front of haystack, if it matches.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#1005)[§](#method.is_suffix_of)\n\n🔬This is a nightly-only experimental API. (`pattern` [#27721](https://github.com/rust-lang/rust/issues/27721))\n\nChecks whether the pattern matches at the back of the haystack.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#1011)[§](#method.strip_suffix_of)\n\n🔬This is a nightly-only experimental API. (`pattern` [#27721](https://github.com/rust-lang/rust/issues/27721))\n\nRemoves the pattern from the back of haystack, if it matches.\n\n[§](#associatedtype.Searcher)\n\n🔬This is a nightly-only experimental API. (`pattern` [#27721](https://github.com/rust-lang/rust/issues/27721))\n\nAssociated searcher for this pattern\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#956)[§](#method.into_searcher)\n\n🔬This is a nightly-only experimental API. (`pattern` [#27721](https://github.com/rust-lang/rust/issues/27721))\n\nConstructs the associated searcher from `self` and the `haystack` to search in.\n\n1.73.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#278)[§](#impl-SliceIndex%3Cstr%3E-for-(Bound%3Cusize%3E,+Bound%3Cusize%3E))\n\nImplements substring slicing for arbitrary bounds.\n\nReturns a slice of the given string bounded by the byte indices provided by each bound.\n\nThis operation is _O_(1).\n\n#### [§](#panics-7)Panics\n\nPanics if `begin` or `end` (if it exists and once adjusted for inclusion/exclusion) does not point to the starting byte offset of a character (as defined by `is_char_boundary`), if `begin > end`, or if `end > len`.\n\n[§](#associatedtype.Output-5)\n\nThe output type returned by methods.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#282)[§](#method.get-6)\n\n🔬This is a nightly-only experimental API. (`slice_index_methods`)\n\nReturns a shared reference to the output at this location, if in bounds.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#287)[§](#method.get_mut-6)\n\n🔬This is a nightly-only experimental API. (`slice_index_methods`)\n\nReturns a mutable reference to the output at this location, if in bounds.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#292)[§](#method.get_unchecked-6)\n\n🔬This is a nightly-only experimental API. (`slice_index_methods`)\n\nReturns a pointer to the output at this location, without performing any bounds checking. Calling this method with an out-of-bounds index or a dangling `slice` pointer is _[undefined behavior](https://doc.rust-lang.org/reference/behavior-considered-undefined.html)_ even if the resulting pointer is not used.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#299)[§](#method.get_unchecked_mut-6)\n\n🔬This is a nightly-only experimental API. (`slice_index_methods`)\n\nReturns a mutable pointer to the output at this location, without performing any bounds checking. Calling this method with an out-of-bounds index or a dangling `slice` pointer is _[undefined behavior](https://doc.rust-lang.org/reference/behavior-considered-undefined.html)_ even if the resulting pointer is not used.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#306)[§](#method.index-5)\n\n🔬This is a nightly-only experimental API. (`slice_index_methods`)\n\nReturns a shared reference to the output at this location, panicking if out of bounds.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#311)[§](#method.index_mut-5)\n\n🔬This is a nightly-only experimental API. (`slice_index_methods`)\n\nReturns a mutable reference to the output at this location, panicking if out of bounds.\n\n1.20.0 (const: unstable) · [source](https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#163)[§](#impl-SliceIndex%3Cstr%3E-for-Range%3Cusize%3E)\n\nImplements substring slicing with syntax `&self[begin .. end]` or `&mut self[begin .. end]`.\n\nReturns a slice of the given string from the byte range \\[`begin`, `end`).\n\nThis operation is _O_(1).\n\nPrior to 1.20.0, these indexing operations were still supported by direct implementation of `Index` and `IndexMut`.\n\n#### [§](#panics-8)Panics\n\nPanics if `begin` or `end` does not point to the starting byte offset of a character (as defined by `is_char_boundary`), if `begin > end`, or if `end > len`.\n\n#### [§](#examples-74)Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert_eq!(&s[0 .. 1], \"L\");\n\nassert_eq!(&s[1 .. 9], \"öwe 老\");\n\n// these will panic:\n// byte 2 lies within `ö`:\n// &s[2 ..3];\n\n// byte 8 lies within `老`\n// &s[1 .. 8];\n\n// byte 100 is outside the string\n// &s[3 .. 100];\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s+=+%22L%C3%B6we+%E8%80%81%E8%99%8E+L%C3%A9opard%22;%0A++++assert_eq!(%26s%5B0+..+1%5D,+%22L%22);%0A++++%0A++++assert_eq!(%26s%5B1+..+9%5D,+%22%C3%B6we+%E8%80%81%22);%0A++++%0A++++//+these+will+panic:%0A++++//+byte+2+lies+within+%60%C3%B6%60:%0A++++//+%26s%5B2+..3%5D;%0A++++%0A++++//+byte+8+lies+within+%60%E8%80%81%60%0A++++//+%26s%5B1+..+8%5D;%0A++++%0A++++//+byte+100+is+outside+the+string%0A++++//+%26s%5B3+..+100%5D;%0A%7D&edition=2021)\n\n[§](#associatedtype.Output-6)\n\nThe output type returned by methods.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#166)[§](#method.get-7)\n\n🔬This is a nightly-only experimental API. (`slice_index_methods`)\n\nReturns a shared reference to the output at this location, if in bounds.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#180)[§](#method.get_mut-7)\n\n🔬This is a nightly-only experimental API. (`slice_index_methods`)\n\nReturns a mutable reference to the output at this location, if in bounds.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#193)[§](#method.get_unchecked-7)\n\n🔬This is a nightly-only experimental API. (`slice_index_methods`)\n\nReturns a pointer to the output at this location, without performing any bounds checking. Calling this method with an out-of-bounds index or a dangling `slice` pointer is _[undefined behavior](https://doc.rust-lang.org/reference/behavior-considered-undefined.html)_ even if the resulting pointer is not used.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#220)[§](#method.get_unchecked_mut-7)\n\n🔬This is a nightly-only experimental API. (`slice_index_methods`)\n\nReturns a mutable pointer to the output at this location, without performing any bounds checking. Calling this method with an out-of-bounds index or a dangling `slice` pointer is _[undefined behavior](https://doc.rust-lang.org/reference/behavior-considered-undefined.html)_ even if the resulting pointer is not used.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#240)[§](#method.index-6)\n\n🔬This is a nightly-only experimental API. (`slice_index_methods`)\n\nReturns a shared reference to the output at this location, panicking if out of bounds.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#248)[§](#method.index_mut-6)\n\n🔬This is a nightly-only experimental API. (`slice_index_methods`)\n\nReturns a mutable reference to the output at this location, panicking if out of bounds.\n\n1.20.0 (const: unstable) · [source](https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#402)[§](#impl-SliceIndex%3Cstr%3E-for-RangeFrom%3Cusize%3E)\n\nImplements substring slicing with syntax `&self[begin ..]` or `&mut self[begin ..]`.\n\nReturns a slice of the given string from the byte range \\[`begin`, `len`). Equivalent to `&self[begin .. len]` or `&mut self[begin .. len]`.\n\nThis operation is _O_(1).\n\nPrior to 1.20.0, these indexing operations were still supported by direct implementation of `Index` and `IndexMut`.\n\n#### [§](#panics-6)Panics\n\nPanics if `begin` does not point to the starting byte offset of a character (as defined by `is_char_boundary`), or if `begin > len`.\n\n[§](#associatedtype.Output-3)\n\nThe output type returned by methods.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#405)[§](#method.get-4)\n\n🔬This is a nightly-only experimental API. (`slice_index_methods`)\n\nReturns a shared reference to the output at this location, if in bounds.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#415)[§](#method.get_mut-4)\n\n🔬This is a nightly-only experimental API. (`slice_index_methods`)\n\nReturns a mutable reference to the output at this location, if in bounds.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#425)[§](#method.get_unchecked-4)\n\n🔬This is a nightly-only experimental API. (`slice_index_methods`)\n\nReturns a pointer to the output at this location, without performing any bounds checking. Calling this method with an out-of-bounds index or a dangling `slice` pointer is _[undefined behavior](https://doc.rust-lang.org/reference/behavior-considered-undefined.html)_ even if the resulting pointer is not used.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#431)[§](#method.get_unchecked_mut-4)\n\n🔬This is a nightly-only experimental API. (`slice_index_methods`)\n\nReturns a mutable pointer to the output at this location, without performing any bounds checking. Calling this method with an out-of-bounds index or a dangling `slice` pointer is _[undefined behavior](https://doc.rust-lang.org/reference/behavior-considered-undefined.html)_ even if the resulting pointer is not used.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#437)[§](#method.index-3)\n\n🔬This is a nightly-only experimental API. (`slice_index_methods`)\n\nReturns a shared reference to the output at this location, panicking if out of bounds.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#445)[§](#method.index_mut-3)\n\n🔬This is a nightly-only experimental API. (`slice_index_methods`)\n\nReturns a mutable reference to the output at this location, panicking if out of bounds.\n\n1.20.0 (const: unstable) · [source](https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#98)[§](#impl-SliceIndex%3Cstr%3E-for-RangeFull)\n\nImplements substring slicing with syntax `&self[..]` or `&mut self[..]`.\n\nReturns a slice of the whole string, i.e., returns `&self` or `&mut self`. Equivalent to `&self[0 .. len]` or `&mut self[0 .. len]`. Unlike other indexing operations, this can never panic.\n\nThis operation is _O_(1).\n\nPrior to 1.20.0, these indexing operations were still supported by direct implementation of `Index` and `IndexMut`.\n\nEquivalent to `&self[0 .. len]` or `&mut self[0 .. len]`.\n\n[§](#associatedtype.Output-4)\n\nThe output type returned by methods.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#101)[§](#method.get-5)\n\n🔬This is a nightly-only experimental API. (`slice_index_methods`)\n\nReturns a shared reference to the output at this location, if in bounds.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#105)[§](#method.get_mut-5)\n\n🔬This is a nightly-only experimental API. (`slice_index_methods`)\n\nReturns a mutable reference to the output at this location, if in bounds.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#109)[§](#method.get_unchecked-5)\n\n🔬This is a nightly-only experimental API. (`slice_index_methods`)\n\nReturns a pointer to the output at this location, without performing any bounds checking. Calling this method with an out-of-bounds index or a dangling `slice` pointer is _[undefined behavior](https://doc.rust-lang.org/reference/behavior-considered-undefined.html)_ even if the resulting pointer is not used.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#113)[§](#method.get_unchecked_mut-5)\n\n🔬This is a nightly-only experimental API. (`slice_index_methods`)\n\nReturns a mutable pointer to the output at this location, without performing any bounds checking. Calling this method with an out-of-bounds index or a dangling `slice` pointer is _[undefined behavior](https://doc.rust-lang.org/reference/behavior-considered-undefined.html)_ even if the resulting pointer is not used.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#117)[§](#method.index-4)\n\n🔬This is a nightly-only experimental API. (`slice_index_methods`)\n\nReturns a shared reference to the output at this location, panicking if out of bounds.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#121)[§](#method.index_mut-4)\n\n🔬This is a nightly-only experimental API. (`slice_index_methods`)\n\nReturns a mutable reference to the output at this location, panicking if out of bounds.\n\n1.26.0 (const: unstable) · [source](https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#474)[§](#impl-SliceIndex%3Cstr%3E-for-RangeInclusive%3Cusize%3E)\n\nImplements substring slicing with syntax `&self[begin ..= end]` or `&mut self[begin ..= end]`.\n\nReturns a slice of the given string from the byte range \\[`begin`, `end`\\]. Equivalent to `&self [begin .. end + 1]` or `&mut self[begin .. end + 1]`, except if `end` has the maximum value for `usize`.\n\nThis operation is _O_(1).\n\n#### [§](#panics-3)Panics\n\nPanics if `begin` does not point to the starting byte offset of a character (as defined by `is_char_boundary`), if `end` does not point to the ending byte offset of a character (`end + 1` is either a starting byte offset or equal to `len`), if `begin > end`, or if `end >= len`.\n\n[§](#associatedtype.Output)\n\nThe output type returned by methods.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#477)[§](#method.get-1)\n\n🔬This is a nightly-only experimental API. (`slice_index_methods`)\n\nReturns a shared reference to the output at this location, if in bounds.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#481)[§](#method.get_mut-1)\n\n🔬This is a nightly-only experimental API. (`slice_index_methods`)\n\nReturns a mutable reference to the output at this location, if in bounds.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#485)[§](#method.get_unchecked-1)\n\n🔬This is a nightly-only experimental API. (`slice_index_methods`)\n\nReturns a pointer to the output at this location, without performing any bounds checking. Calling this method with an out-of-bounds index or a dangling `slice` pointer is _[undefined behavior](https://doc.rust-lang.org/reference/behavior-considered-undefined.html)_ even if the resulting pointer is not used.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#490)[§](#method.get_unchecked_mut-1)\n\n🔬This is a nightly-only experimental API. (`slice_index_methods`)\n\nReturns a mutable pointer to the output at this location, without performing any bounds checking. Calling this method with an out-of-bounds index or a dangling `slice` pointer is _[undefined behavior](https://doc.rust-lang.org/reference/behavior-considered-undefined.html)_ even if the resulting pointer is not used.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#495)[§](#method.index)\n\n🔬This is a nightly-only experimental API. (`slice_index_methods`)\n\nReturns a shared reference to the output at this location, panicking if out of bounds.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#502)[§](#method.index_mut)\n\n🔬This is a nightly-only experimental API. (`slice_index_methods`)\n\nReturns a mutable reference to the output at this location, panicking if out of bounds.\n\n1.20.0 (const: unstable) · [source](https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#333)[§](#impl-SliceIndex%3Cstr%3E-for-RangeTo%3Cusize%3E)\n\nImplements substring slicing with syntax `&self[.. end]` or `&mut self[.. end]`.\n\nReturns a slice of the given string from the byte range \\[0, `end`). Equivalent to `&self[0 .. end]` or `&mut self[0 .. end]`.\n\nThis operation is _O_(1).\n\nPrior to 1.20.0, these indexing operations were still supported by direct implementation of `Index` and `IndexMut`.\n\n#### [§](#panics-5)Panics\n\nPanics if `end` does not point to the starting byte offset of a character (as defined by `is_char_boundary`), or if `end > len`.\n\n[§](#associatedtype.Output-2)\n\nThe output type returned by methods.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#336)[§](#method.get-3)\n\n🔬This is a nightly-only experimental API. (`slice_index_methods`)\n\nReturns a shared reference to the output at this location, if in bounds.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#346)[§](#method.get_mut-3)\n\n🔬This is a nightly-only experimental API. (`slice_index_methods`)\n\nReturns a mutable reference to the output at this location, if in bounds.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#356)[§](#method.get_unchecked-3)\n\n🔬This is a nightly-only experimental API. (`slice_index_methods`)\n\nReturns a pointer to the output at this location, without performing any bounds checking. Calling this method with an out-of-bounds index or a dangling `slice` pointer is _[undefined behavior](https://doc.rust-lang.org/reference/behavior-considered-undefined.html)_ even if the resulting pointer is not used.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#361)[§](#method.get_unchecked_mut-3)\n\n🔬This is a nightly-only experimental API. (`slice_index_methods`)\n\nReturns a mutable pointer to the output at this location, without performing any bounds checking. Calling this method with an out-of-bounds index or a dangling `slice` pointer is _[undefined behavior](https://doc.rust-lang.org/reference/behavior-considered-undefined.html)_ even if the resulting pointer is not used.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#366)[§](#method.index-2)\n\n🔬This is a nightly-only experimental API. (`slice_index_methods`)\n\nReturns a shared reference to the output at this location, panicking if out of bounds.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#374)[§](#method.index_mut-2)\n\n🔬This is a nightly-only experimental API. (`slice_index_methods`)\n\nReturns a mutable reference to the output at this location, panicking if out of bounds.\n\n1.26.0 (const: unstable) · [source](https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#526)[§](#impl-SliceIndex%3Cstr%3E-for-RangeToInclusive%3Cusize%3E)\n\nImplements substring slicing with syntax `&self[..= end]` or `&mut self[..= end]`.\n\nReturns a slice of the given string from the byte range \\[0, `end`\\]. Equivalent to `&self [0 .. end + 1]`, except if `end` has the maximum value for `usize`.\n\nThis operation is _O_(1).\n\n#### [§](#panics-4)Panics\n\nPanics if `end` does not point to the ending byte offset of a character (`end + 1` is either a starting byte offset as defined by `is_char_boundary`, or equal to `len`), or if `end >= len`.\n\n[§](#associatedtype.Output-1)\n\nThe output type returned by methods.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#529)[§](#method.get-2)\n\n🔬This is a nightly-only experimental API. (`slice_index_methods`)\n\nReturns a shared reference to the output at this location, if in bounds.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#533)[§](#method.get_mut-2)\n\n🔬This is a nightly-only experimental API. (`slice_index_methods`)\n\nReturns a mutable reference to the output at this location, if in bounds.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#537)[§](#method.get_unchecked-2)\n\n🔬This is a nightly-only experimental API. (`slice_index_methods`)\n\nReturns a pointer to the output at this location, without performing any bounds checking. Calling this method with an out-of-bounds index or a dangling `slice` pointer is _[undefined behavior](https://doc.rust-lang.org/reference/behavior-considered-undefined.html)_ even if the resulting pointer is not used.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#542)[§](#method.get_unchecked_mut-2)\n\n🔬This is a nightly-only experimental API. (`slice_index_methods`)\n\nReturns a mutable pointer to the output at this location, without performing any bounds checking. Calling this method with an out-of-bounds index or a dangling `slice` pointer is _[undefined behavior](https://doc.rust-lang.org/reference/behavior-considered-undefined.html)_ even if the resulting pointer is not used.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#547)[§](#method.index-1)\n\n🔬This is a nightly-only experimental API. (`slice_index_methods`)\n\nReturns a shared reference to the output at this location, panicking if out of bounds.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#551)[§](#method.index_mut-1)\n\n🔬This is a nightly-only experimental API. (`slice_index_methods`)\n\nReturns a mutable reference to the output at this location, panicking if out of bounds.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/str.rs.html#207)[§](#impl-ToOwned-for-str)\n\n[§](#associatedtype.Owned)\n\nThe resulting type after obtaining ownership.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/str.rs.html#210)[§](#method.to_owned)\n\nCreates owned data from borrowed data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#tymethod.to_owned)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/str.rs.html#214)[§](#method.clone_into)\n\nUses borrowed data to replace owned data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#method.clone_into)\n\n1.0.0 · [source](about:blank/src/std/net/socket_addr.rs.html#280-290)[§](#impl-ToSocketAddrs-for-str)\n\n[§](#associatedtype.Iter)\n\nReturned iterator over socket addresses which this type may correspond to.\n\n[source](about:blank/src/std/net/socket_addr.rs.html#282-289)[§](#method.to_socket_addrs)\n\n1.72.0 · [source](about:blank/src/std/ffi/os_str.rs.html#1320-1335)[§](#impl-TryFrom%3C%26OsStr%3E-for-%26str)\n\n[source](about:blank/src/std/ffi/os_str.rs.html#1332-1334)[§](#method.try_from)\n\nTries to convert an `&OsStr` to a `&str`.\n\n```\nuse std::ffi::OsStr;\n\nlet os_str = OsStr::new(\"foo\");\nlet as_str = <&str>::try_from(os_str).unwrap();\nassert_eq!(as_str, \"foo\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::OsStr;%0A++++%0A++++let+os_str+=+OsStr::new(%22foo%22);%0A++++let+as_str+=+%3C%26str%3E::try_from(os_str).unwrap();%0A++++assert_eq!(as_str,+%22foo%22);%0A%7D&edition=2021)\n\n[§](#associatedtype.Error)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/marker.rs.html#992-1003)[§](#impl-ConstParamTy-for-str)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#36)[§](#impl-Eq-for-str)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/marker.rs.html#214-226)[§](#impl-StructuralPartialEq-for-str)\n\n[§](#impl-Freeze-for-str)\n\n[§](#impl-RefUnwindSafe-for-str)\n\n[§](#impl-Send-for-str)\n\n[§](#impl-Sized-for-str)\n\n[§](#impl-Sync-for-str)\n\n[§](#impl-Unpin-for-str)\n\n[§](#impl-UnwindSafe-for-str)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"String slices.\"><title>str - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../\" data-static-root-path=\"../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc primitive\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../std/index.html\"><img class=\"rust-logo\" src=\"../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">str</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../std/index.html\"><img class=\"rust-logo\" src=\"../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">str</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#implementations\">Methods</a></h3><ul class=\"block method\"><li><a href=\"#method.as_ascii\">as_ascii</a></li><li><a href=\"#method.as_bytes\">as_bytes</a></li><li><a href=\"#method.as_bytes_mut\">as_bytes_mut</a></li><li><a href=\"#method.as_mut_ptr\">as_mut_ptr</a></li><li><a href=\"#method.as_ptr\">as_ptr</a></li><li><a href=\"#method.bytes\">bytes</a></li><li><a href=\"#method.ceil_char_boundary\">ceil_char_boundary</a></li><li><a href=\"#method.char_indices\">char_indices</a></li><li><a href=\"#method.chars\">chars</a></li><li><a href=\"#method.contains\">contains</a></li><li><a href=\"#method.encode_utf16\">encode_utf16</a></li><li><a href=\"#method.ends_with\">ends_with</a></li><li><a href=\"#method.eq_ignore_ascii_case\">eq_ignore_ascii_case</a></li><li><a href=\"#method.escape_debug\">escape_debug</a></li><li><a href=\"#method.escape_default\">escape_default</a></li><li><a href=\"#method.escape_unicode\">escape_unicode</a></li><li><a href=\"#method.find\">find</a></li><li><a href=\"#method.floor_char_boundary\">floor_char_boundary</a></li><li><a href=\"#method.get\">get</a></li><li><a href=\"#method.get_mut\">get_mut</a></li><li><a href=\"#method.get_unchecked\">get_unchecked</a></li><li><a href=\"#method.get_unchecked_mut\">get_unchecked_mut</a></li><li><a href=\"#method.into_boxed_bytes\">into_boxed_bytes</a></li><li><a href=\"#method.into_string\">into_string</a></li><li><a href=\"#method.is_ascii\">is_ascii</a></li><li><a href=\"#method.is_char_boundary\">is_char_boundary</a></li><li><a href=\"#method.is_empty\">is_empty</a></li><li><a href=\"#method.len\">len</a></li><li><a href=\"#method.lines\">lines</a></li><li><a href=\"#method.lines_any\">lines_any</a></li><li><a href=\"#method.make_ascii_lowercase\">make_ascii_lowercase</a></li><li><a href=\"#method.make_ascii_uppercase\">make_ascii_uppercase</a></li><li><a href=\"#method.match_indices\">match_indices</a></li><li><a href=\"#method.matches\">matches</a></li><li><a href=\"#method.parse\">parse</a></li><li><a href=\"#method.repeat\">repeat</a></li><li><a href=\"#method.replace\">replace</a></li><li><a href=\"#method.replacen\">replacen</a></li><li><a href=\"#method.rfind\">rfind</a></li><li><a href=\"#method.rmatch_indices\">rmatch_indices</a></li><li><a href=\"#method.rmatches\">rmatches</a></li><li><a href=\"#method.rsplit\">rsplit</a></li><li><a href=\"#method.rsplit_once\">rsplit_once</a></li><li><a href=\"#method.rsplit_terminator\">rsplit_terminator</a></li><li><a href=\"#method.rsplitn\">rsplitn</a></li><li><a href=\"#method.slice_mut_unchecked\">slice_mut_unchecked</a></li><li><a href=\"#method.slice_unchecked\">slice_unchecked</a></li><li><a href=\"#method.split\">split</a></li><li><a href=\"#method.split_ascii_whitespace\">split_ascii_whitespace</a></li><li><a href=\"#method.split_at\">split_at</a></li><li><a href=\"#method.split_at_checked\">split_at_checked</a></li><li><a href=\"#method.split_at_mut\">split_at_mut</a></li><li><a href=\"#method.split_at_mut_checked\">split_at_mut_checked</a></li><li><a href=\"#method.split_inclusive\">split_inclusive</a></li><li><a href=\"#method.split_once\">split_once</a></li><li><a href=\"#method.split_terminator\">split_terminator</a></li><li><a href=\"#method.split_whitespace\">split_whitespace</a></li><li><a href=\"#method.splitn\">splitn</a></li><li><a href=\"#method.starts_with\">starts_with</a></li><li><a href=\"#method.strip_prefix\">strip_prefix</a></li><li><a href=\"#method.strip_suffix\">strip_suffix</a></li><li><a href=\"#method.to_ascii_lowercase\">to_ascii_lowercase</a></li><li><a href=\"#method.to_ascii_uppercase\">to_ascii_uppercase</a></li><li><a href=\"#method.to_lowercase\">to_lowercase</a></li><li><a href=\"#method.to_uppercase\">to_uppercase</a></li><li><a href=\"#method.trim\">trim</a></li><li><a href=\"#method.trim_ascii\">trim_ascii</a></li><li><a href=\"#method.trim_ascii_end\">trim_ascii_end</a></li><li><a href=\"#method.trim_ascii_start\">trim_ascii_start</a></li><li><a href=\"#method.trim_end\">trim_end</a></li><li><a href=\"#method.trim_end_matches\">trim_end_matches</a></li><li><a href=\"#method.trim_left\">trim_left</a></li><li><a href=\"#method.trim_left_matches\">trim_left_matches</a></li><li><a href=\"#method.trim_matches\">trim_matches</a></li><li><a href=\"#method.trim_right\">trim_right</a></li><li><a href=\"#method.trim_right_matches\">trim_right_matches</a></li><li><a href=\"#method.trim_start\">trim_start</a></li><li><a href=\"#method.trim_start_matches\">trim_start_matches</a></li></ul><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-Error-for-%26str\">!Error</a></li><li><a href=\"#impl-Add%3C%26str%3E-for-Cow%3C'a,+str%3E\">Add&lt;&amp;'a str&gt;</a></li><li><a href=\"#impl-Add%3C%26str%3E-for-String\">Add&lt;&amp;str&gt;</a></li><li><a href=\"#impl-AddAssign%3C%26str%3E-for-Cow%3C'a,+str%3E\">AddAssign&lt;&amp;'a str&gt;</a></li><li><a href=\"#impl-AddAssign%3C%26str%3E-for-String\">AddAssign&lt;&amp;str&gt;</a></li><li><a href=\"#impl-AsMut%3Cstr%3E-for-String\">AsMut&lt;str&gt;</a></li><li><a href=\"#impl-AsMut%3Cstr%3E-for-str\">AsMut&lt;str&gt;</a></li><li><a href=\"#impl-AsRef%3COsStr%3E-for-str\">AsRef&lt;OsStr&gt;</a></li><li><a href=\"#impl-AsRef%3CPath%3E-for-str\">AsRef&lt;Path&gt;</a></li><li><a href=\"#impl-AsRef%3C%5Bu8%5D%3E-for-str\">AsRef&lt;[u8]&gt;</a></li><li><a href=\"#impl-AsRef%3Cstr%3E-for-Drain%3C'a%3E\">AsRef&lt;str&gt;</a></li><li><a href=\"#impl-AsRef%3Cstr%3E-for-String\">AsRef&lt;str&gt;</a></li><li><a href=\"#impl-AsRef%3Cstr%3E-for-str\">AsRef&lt;str&gt;</a></li><li><a href=\"#impl-AsciiExt-for-str\">AsciiExt</a></li><li><a href=\"#impl-Borrow%3Cstr%3E-for-String\">Borrow&lt;str&gt;</a></li><li><a href=\"#impl-BorrowMut%3Cstr%3E-for-String\">BorrowMut&lt;str&gt;</a></li><li><a href=\"#impl-Clone-for-Box%3Cstr%3E\">Clone</a></li><li><a href=\"#impl-Concat%3Cstr%3E-for-%5BS%5D\">Concat&lt;str&gt;</a></li><li><a href=\"#impl-ConstParamTy-for-str\">ConstParamTy</a></li><li><a href=\"#impl-Debug-for-str\">Debug</a></li><li><a href=\"#impl-Default-for-%26mut+str\">Default</a></li><li><a href=\"#impl-Default-for-%26str\">Default</a></li><li><a href=\"#impl-Default-for-Box%3Cstr%3E\">Default</a></li><li><a href=\"#impl-Display-for-str\">Display</a></li><li><a href=\"#impl-Eq-for-str\">Eq</a></li><li><a href=\"#impl-Extend%3C%26str%3E-for-String\">Extend&lt;&amp;'a str&gt;</a></li><li><a href=\"#impl-From%3C%26str%3E-for-Cow%3C'a,+str%3E\">From&lt;&amp;'a str&gt;</a></li><li><a href=\"#impl-From%3C%26mut+str%3E-for-String\">From&lt;&amp;mut str&gt;</a></li><li><a href=\"#impl-From%3C%26str%3E-for-Arc%3Cstr%3E\">From&lt;&amp;str&gt;</a></li><li><a href=\"#impl-From%3C%26str%3E-for-Box%3Cdyn+Error%3E\">From&lt;&amp;str&gt;</a></li><li><a href=\"#impl-From%3C%26str%3E-for-Box%3Cdyn+Error+%2B+Send+%2B+Sync%3E\">From&lt;&amp;str&gt;</a></li><li><a href=\"#impl-From%3C%26str%3E-for-Box%3Cstr%3E\">From&lt;&amp;str&gt;</a></li><li><a href=\"#impl-From%3C%26str%3E-for-Rc%3Cstr%3E\">From&lt;&amp;str&gt;</a></li><li><a href=\"#impl-From%3C%26str%3E-for-String\">From&lt;&amp;str&gt;</a></li><li><a href=\"#impl-From%3C%26str%3E-for-Vec%3Cu8%3E\">From&lt;&amp;str&gt;</a></li><li><a href=\"#impl-From%3CCow%3C'_,+str%3E%3E-for-Box%3Cstr%3E\">From&lt;Cow&lt;'_, str&gt;&gt;</a></li><li><a href=\"#impl-From%3CString%3E-for-Box%3Cstr%3E\">From&lt;String&gt;</a></li><li><a href=\"#impl-FromIterator%3C%26char%3E-for-Box%3Cstr%3E\">FromIterator&lt;&amp;'a char&gt;</a></li><li><a href=\"#impl-FromIterator%3C%26str%3E-for-Box%3Cstr%3E\">FromIterator&lt;&amp;'a str&gt;</a></li><li><a href=\"#impl-FromIterator%3C%26str%3E-for-String\">FromIterator&lt;&amp;'a str&gt;</a></li><li><a href=\"#impl-FromIterator%3C%26str%3E-for-Cow%3C'a,+str%3E\">FromIterator&lt;&amp;'b str&gt;</a></li><li><a href=\"#impl-FromIterator%3CBox%3Cstr,+A%3E%3E-for-Box%3Cstr%3E\">FromIterator&lt;Box&lt;str, A&gt;&gt;</a></li><li><a href=\"#impl-FromIterator%3CCow%3C'a,+str%3E%3E-for-Box%3Cstr%3E\">FromIterator&lt;Cow&lt;'a, str&gt;&gt;</a></li><li><a href=\"#impl-FromIterator%3CString%3E-for-Box%3Cstr%3E\">FromIterator&lt;String&gt;</a></li><li><a href=\"#impl-FromIterator%3Cchar%3E-for-Box%3Cstr%3E\">FromIterator&lt;char&gt;</a></li><li><a href=\"#impl-Hash-for-str\">Hash</a></li><li><a href=\"#impl-Index%3CI%3E-for-str\">Index&lt;I&gt;</a></li><li><a href=\"#impl-IndexMut%3CI%3E-for-str\">IndexMut&lt;I&gt;</a></li><li><a href=\"#impl-Join%3C%26str%3E-for-%5BS%5D\">Join&lt;&amp;str&gt;</a></li><li><a href=\"#impl-Ord-for-str\">Ord</a></li><li><a href=\"#impl-PartialEq-for-str\">PartialEq</a></li><li><a href=\"#impl-PartialEq%3C%26str%3E-for-String\">PartialEq&lt;&amp;'a str&gt;</a></li><li><a href=\"#impl-PartialEq%3C%26str%3E-for-Cow%3C'a,+str%3E\">PartialEq&lt;&amp;'b str&gt;</a></li><li><a href=\"#impl-PartialEq%3C%26str%3E-for-OsString\">PartialEq&lt;&amp;str&gt;</a></li><li><a href=\"#impl-PartialEq%3CCow%3C'a,+str%3E%3E-for-%26str\">PartialEq&lt;Cow&lt;'a, str&gt;&gt;</a></li><li><a href=\"#impl-PartialEq%3CCow%3C'a,+str%3E%3E-for-str\">PartialEq&lt;Cow&lt;'a, str&gt;&gt;</a></li><li><a href=\"#impl-PartialEq%3COsStr%3E-for-str\">PartialEq&lt;OsStr&gt;</a></li><li><a href=\"#impl-PartialEq%3COsString%3E-for-%26str\">PartialEq&lt;OsString&gt;</a></li><li><a href=\"#impl-PartialEq%3COsString%3E-for-str\">PartialEq&lt;OsString&gt;</a></li><li><a href=\"#impl-PartialEq%3CString%3E-for-%26str\">PartialEq&lt;String&gt;</a></li><li><a href=\"#impl-PartialEq%3CString%3E-for-str\">PartialEq&lt;String&gt;</a></li><li><a href=\"#impl-PartialEq%3Cstr%3E-for-Cow%3C'a,+str%3E\">PartialEq&lt;str&gt;</a></li><li><a href=\"#impl-PartialEq%3Cstr%3E-for-OsStr\">PartialEq&lt;str&gt;</a></li><li><a href=\"#impl-PartialEq%3Cstr%3E-for-OsString\">PartialEq&lt;str&gt;</a></li><li><a href=\"#impl-PartialEq%3Cstr%3E-for-String\">PartialEq&lt;str&gt;</a></li><li><a href=\"#impl-PartialOrd-for-str\">PartialOrd</a></li><li><a href=\"#impl-PartialOrd%3Cstr%3E-for-OsStr\">PartialOrd&lt;str&gt;</a></li><li><a href=\"#impl-PartialOrd%3Cstr%3E-for-OsString\">PartialOrd&lt;str&gt;</a></li><li><a href=\"#impl-Pattern%3C'a%3E-for-%26str\">Pattern&lt;'a&gt;</a></li><li><a href=\"#impl-SliceIndex%3Cstr%3E-for-(Bound%3Cusize%3E,+Bound%3Cusize%3E)\">SliceIndex&lt;str&gt;</a></li><li><a href=\"#impl-SliceIndex%3Cstr%3E-for-Range%3Cusize%3E\">SliceIndex&lt;str&gt;</a></li><li><a href=\"#impl-SliceIndex%3Cstr%3E-for-RangeFrom%3Cusize%3E\">SliceIndex&lt;str&gt;</a></li><li><a href=\"#impl-SliceIndex%3Cstr%3E-for-RangeFull\">SliceIndex&lt;str&gt;</a></li><li><a href=\"#impl-SliceIndex%3Cstr%3E-for-RangeInclusive%3Cusize%3E\">SliceIndex&lt;str&gt;</a></li><li><a href=\"#impl-SliceIndex%3Cstr%3E-for-RangeTo%3Cusize%3E\">SliceIndex&lt;str&gt;</a></li><li><a href=\"#impl-SliceIndex%3Cstr%3E-for-RangeToInclusive%3Cusize%3E\">SliceIndex&lt;str&gt;</a></li><li><a href=\"#impl-StructuralPartialEq-for-str\">StructuralPartialEq</a></li><li><a href=\"#impl-ToOwned-for-str\">ToOwned</a></li><li><a href=\"#impl-ToSocketAddrs-for-str\">ToSocketAddrs</a></li><li><a href=\"#impl-TryFrom%3C%26OsStr%3E-for-%26str\">TryFrom&lt;&amp;'a OsStr&gt;</a></li></ul><h3><a href=\"#synthetic-implementations\">Auto Trait Implementations</a></h3><ul class=\"block synthetic-implementation\"><li><a href=\"#impl-Sized-for-str\">!Sized</a></li><li><a href=\"#impl-Freeze-for-str\">Freeze</a></li><li><a href=\"#impl-RefUnwindSafe-for-str\">RefUnwindSafe</a></li><li><a href=\"#impl-Send-for-str\">Send</a></li><li><a href=\"#impl-Sync-for-str\">Sync</a></li><li><a href=\"#impl-Unpin-for-str\">Unpin</a></li><li><a href=\"#impl-UnwindSafe-for-str\">UnwindSafe</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-Any-for-T\">Any</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-T\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-T\">BorrowMut&lt;T&gt;</a></li><li><a href=\"#impl-ToString-for-T\">ToString</a></li></ul></section><h2><a href=\"index.html\">In crate std</a></h2><h3><a href=\"index.html#primitives\">Primitive Types</a></h3><ul class=\"block primitive\"><li><a href=\"primitive.array.html\">array</a></li><li><a href=\"primitive.bool.html\">bool</a></li><li><a href=\"primitive.char.html\">char</a></li><li><a href=\"primitive.f128.html\">f128</a></li><li><a href=\"primitive.f16.html\">f16</a></li><li><a href=\"primitive.f32.html\">f32</a></li><li><a href=\"primitive.f64.html\">f64</a></li><li><a href=\"primitive.fn.html\">fn</a></li><li><a href=\"primitive.i128.html\">i128</a></li><li><a href=\"primitive.i16.html\">i16</a></li><li><a href=\"primitive.i32.html\">i32</a></li><li><a href=\"primitive.i64.html\">i64</a></li><li><a href=\"primitive.i8.html\">i8</a></li><li><a href=\"primitive.isize.html\">isize</a></li><li><a href=\"primitive.never.html\">never</a></li><li><a href=\"primitive.pointer.html\">pointer</a></li><li><a href=\"primitive.reference.html\">reference</a></li><li><a href=\"primitive.slice.html\">slice</a></li><li><a href=\"primitive.str.html\">str</a></li><li><a href=\"primitive.tuple.html\">tuple</a></li><li><a href=\"primitive.u128.html\">u128</a></li><li><a href=\"primitive.u16.html\">u16</a></li><li><a href=\"primitive.u32.html\">u32</a></li><li><a href=\"primitive.u64.html\">u64</a></li><li><a href=\"primitive.u8.html\">u8</a></li><li><a href=\"primitive.unit.html\">unit</a></li><li><a href=\"primitive.usize.html\">usize</a></li></ul><h3><a href=\"index.html#modules\">Modules</a></h3><ul class=\"block mod\"><li><a href=\"alloc/index.html\">alloc</a></li><li><a href=\"any/index.html\">any</a></li><li><a href=\"arch/index.html\">arch</a></li><li><a href=\"array/index.html\">array</a></li><li><a href=\"ascii/index.html\">ascii</a></li><li><a href=\"assert_matches/index.html\">assert_matches</a></li><li><a href=\"async_iter/index.html\">async_iter</a></li><li><a href=\"backtrace/index.html\">backtrace</a></li><li><a href=\"borrow/index.html\">borrow</a></li><li><a href=\"boxed/index.html\">boxed</a></li><li><a href=\"cell/index.html\">cell</a></li><li><a href=\"char/index.html\">char</a></li><li><a href=\"clone/index.html\">clone</a></li><li><a href=\"cmp/index.html\">cmp</a></li><li><a href=\"collections/index.html\">collections</a></li><li><a href=\"convert/index.html\">convert</a></li><li><a href=\"default/index.html\">default</a></li><li><a href=\"env/index.html\">env</a></li><li><a href=\"error/index.html\">error</a></li><li><a href=\"f128/index.html\">f128</a></li><li><a href=\"f16/index.html\">f16</a></li><li><a href=\"f32/index.html\">f32</a></li><li><a href=\"f64/index.html\">f64</a></li><li><a href=\"ffi/index.html\">ffi</a></li><li><a href=\"fmt/index.html\">fmt</a></li><li><a href=\"fs/index.html\">fs</a></li><li><a href=\"future/index.html\">future</a></li><li><a href=\"hash/index.html\">hash</a></li><li><a href=\"hint/index.html\">hint</a></li><li><a href=\"i128/index.html\">i128</a></li><li><a href=\"i16/index.html\">i16</a></li><li><a href=\"i32/index.html\">i32</a></li><li><a href=\"i64/index.html\">i64</a></li><li><a href=\"i8/index.html\">i8</a></li><li><a href=\"intrinsics/index.html\">intrinsics</a></li><li><a href=\"io/index.html\">io</a></li><li><a href=\"isize/index.html\">isize</a></li><li><a href=\"iter/index.html\">iter</a></li><li><a href=\"marker/index.html\">marker</a></li><li><a href=\"mem/index.html\">mem</a></li><li><a href=\"net/index.html\">net</a></li><li><a href=\"num/index.html\">num</a></li><li><a href=\"ops/index.html\">ops</a></li><li><a href=\"option/index.html\">option</a></li><li><a href=\"os/index.html\">os</a></li><li><a href=\"panic/index.html\">panic</a></li><li><a href=\"pat/index.html\">pat</a></li><li><a href=\"path/index.html\">path</a></li><li><a href=\"pin/index.html\">pin</a></li><li><a href=\"prelude/index.html\">prelude</a></li><li><a href=\"primitive/index.html\">primitive</a></li><li><a href=\"process/index.html\">process</a></li><li><a href=\"ptr/index.html\">ptr</a></li><li><a href=\"rc/index.html\">rc</a></li><li><a href=\"result/index.html\">result</a></li><li><a href=\"simd/index.html\">simd</a></li><li><a href=\"slice/index.html\">slice</a></li><li><a href=\"str/index.html\">str</a></li><li><a href=\"string/index.html\">string</a></li><li><a href=\"sync/index.html\">sync</a></li><li><a href=\"task/index.html\">task</a></li><li><a href=\"thread/index.html\">thread</a></li><li><a href=\"time/index.html\">time</a></li><li><a href=\"u128/index.html\">u128</a></li><li><a href=\"u16/index.html\">u16</a></li><li><a href=\"u32/index.html\">u32</a></li><li><a href=\"u64/index.html\">u64</a></li><li><a href=\"u8/index.html\">u8</a></li><li><a href=\"usize/index.html\">usize</a></li><li><a href=\"vec/index.html\">vec</a></li></ul><h3><a href=\"index.html#macros\">Macros</a></h3><ul class=\"block macro\"><li><a href=\"macro.assert.html\">assert</a></li><li><a href=\"macro.assert_eq.html\">assert_eq</a></li><li><a href=\"macro.assert_ne.html\">assert_ne</a></li><li><a href=\"macro.cfg.html\">cfg</a></li><li><a href=\"macro.cfg_match.html\">cfg_match</a></li><li><a href=\"macro.column.html\">column</a></li><li><a href=\"macro.compile_error.html\">compile_error</a></li><li><a href=\"macro.concat.html\">concat</a></li><li><a href=\"macro.concat_bytes.html\">concat_bytes</a></li><li><a href=\"macro.concat_idents.html\">concat_idents</a></li><li><a href=\"macro.const_format_args.html\">const_format_args</a></li><li><a href=\"macro.dbg.html\">dbg</a></li><li><a href=\"macro.debug_assert.html\">debug_assert</a></li><li><a href=\"macro.debug_assert_eq.html\">debug_assert_eq</a></li><li><a href=\"macro.debug_assert_ne.html\">debug_assert_ne</a></li><li><a href=\"macro.env.html\">env</a></li><li><a href=\"macro.eprint.html\">eprint</a></li><li><a href=\"macro.eprintln.html\">eprintln</a></li><li><a href=\"macro.file.html\">file</a></li><li><a href=\"macro.format.html\">format</a></li><li><a href=\"macro.format_args.html\">format_args</a></li><li><a href=\"macro.format_args_nl.html\">format_args_nl</a></li><li><a href=\"macro.include.html\">include</a></li><li><a href=\"macro.include_bytes.html\">include_bytes</a></li><li><a href=\"macro.include_str.html\">include_str</a></li><li><a href=\"macro.is_x86_feature_detected.html\">is_x86_feature_detected</a></li><li><a href=\"macro.line.html\">line</a></li><li><a href=\"macro.log_syntax.html\">log_syntax</a></li><li><a href=\"macro.matches.html\">matches</a></li><li><a href=\"macro.module_path.html\">module_path</a></li><li><a href=\"macro.option_env.html\">option_env</a></li><li><a href=\"macro.panic.html\">panic</a></li><li><a href=\"macro.print.html\">print</a></li><li><a href=\"macro.println.html\">println</a></li><li><a href=\"macro.stringify.html\">stringify</a></li><li><a href=\"macro.thread_local.html\">thread_local</a></li><li><a href=\"macro.todo.html\">todo</a></li><li><a href=\"macro.trace_macros.html\">trace_macros</a></li><li><a href=\"macro.try.html\">try</a></li><li><a href=\"macro.unimplemented.html\">unimplemented</a></li><li><a href=\"macro.unreachable.html\">unreachable</a></li><li><a href=\"macro.vec.html\">vec</a></li><li><a href=\"macro.write.html\">write</a></li><li><a href=\"macro.writeln.html\">writeln</a></li></ul><h3><a href=\"index.html#keywords\">Keywords</a></h3><ul class=\"block keyword\"><li><a href=\"keyword.SelfTy.html\">SelfTy</a></li><li><a href=\"keyword.as.html\">as</a></li><li><a href=\"keyword.async.html\">async</a></li><li><a href=\"keyword.await.html\">await</a></li><li><a href=\"keyword.break.html\">break</a></li><li><a href=\"keyword.const.html\">const</a></li><li><a href=\"keyword.continue.html\">continue</a></li><li><a href=\"keyword.crate.html\">crate</a></li><li><a href=\"keyword.dyn.html\">dyn</a></li><li><a href=\"keyword.else.html\">else</a></li><li><a href=\"keyword.enum.html\">enum</a></li><li><a href=\"keyword.extern.html\">extern</a></li><li><a href=\"keyword.false.html\">false</a></li><li><a href=\"keyword.fn.html\">fn</a></li><li><a href=\"keyword.for.html\">for</a></li><li><a href=\"keyword.if.html\">if</a></li><li><a href=\"keyword.impl.html\">impl</a></li><li><a href=\"keyword.in.html\">in</a></li><li><a href=\"keyword.let.html\">let</a></li><li><a href=\"keyword.loop.html\">loop</a></li><li><a href=\"keyword.match.html\">match</a></li><li><a href=\"keyword.mod.html\">mod</a></li><li><a href=\"keyword.move.html\">move</a></li><li><a href=\"keyword.mut.html\">mut</a></li><li><a href=\"keyword.pub.html\">pub</a></li><li><a href=\"keyword.ref.html\">ref</a></li><li><a href=\"keyword.return.html\">return</a></li><li><a href=\"keyword.self.html\">self</a></li><li><a href=\"keyword.static.html\">static</a></li><li><a href=\"keyword.struct.html\">struct</a></li><li><a href=\"keyword.super.html\">super</a></li><li><a href=\"keyword.trait.html\">trait</a></li><li><a href=\"keyword.true.html\">true</a></li><li><a href=\"keyword.type.html\">type</a></li><li><a href=\"keyword.union.html\">union</a></li><li><a href=\"keyword.unsafe.html\">unsafe</a></li><li><a href=\"keyword.use.html\">use</a></li><li><a href=\"keyword.where.html\">where</a></li><li><a href=\"keyword.while.html\">while</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Primitive Type <a class=\"primitive\" href=\"#\">str</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>String slices.</p>\n<p><em><a href=\"str/index.html\" title=\"mod std::str\">See also the <code>std::str</code> module</a>.</em></p>\n<p>The <code>str</code> type, also called a ‘string slice’, is the most primitive string\ntype. It is usually seen in its borrowed form, <code>&amp;str</code>. It is also the type\nof string literals, <code>&amp;'static str</code>.</p>\n<h2 id=\"basic-usage\"><a class=\"doc-anchor\" href=\"#basic-usage\">§</a>Basic Usage</h2>\n<p>String literals are string slices:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>hello_world = <span class=\"string\">\"Hello, World!\"</span>;</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+hello_world+=+%22Hello,+World!%22;%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Here we have declared a string slice initialized with a string literal.\nString literals have a static lifetime, which means the string <code>hello_world</code>\nis guaranteed to be valid for the duration of the entire program.\nWe can explicitly specify <code>hello_world</code>’s lifetime as well:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>hello_world: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>str = <span class=\"string\">\"Hello, world!\"</span>;</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+hello_world:+%26'static+str+=+%22Hello,+world!%22;%0A%7D&amp;edition=2021\">Run</a></div>\n<h2 id=\"representation\"><a class=\"doc-anchor\" href=\"#representation\">§</a>Representation</h2>\n<p>A <code>&amp;str</code> is made up of two components: a pointer to some bytes, and a\nlength. You can look at these with the <a href=\"primitive.str.html#method.as_ptr\" title=\"method str::as_ptr\"><code>as_ptr</code></a> and <a href=\"primitive.str.html#method.len\" title=\"method str::len\"><code>len</code></a> methods:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::slice;\n<span class=\"kw\">use </span>std::str;\n\n<span class=\"kw\">let </span>story = <span class=\"string\">\"Once upon a time...\"</span>;\n\n<span class=\"kw\">let </span>ptr = story.as_ptr();\n<span class=\"kw\">let </span>len = story.len();\n\n<span class=\"comment\">// story has nineteen bytes\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">19</span>, len);\n\n<span class=\"comment\">// We can re-build a str out of ptr and len. This is all unsafe because\n// we are responsible for making sure the two components are valid:\n</span><span class=\"kw\">let </span>s = <span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// First, we build a &amp;[u8]...\n    </span><span class=\"kw\">let </span>slice = slice::from_raw_parts(ptr, len);\n\n    <span class=\"comment\">// ... and then convert that slice into a string slice\n    </span>str::from_utf8(slice)\n};\n\n<span class=\"macro\">assert_eq!</span>(s, <span class=\"prelude-val\">Ok</span>(story));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::slice;%0A++++use+std::str;%0A++++%0A++++let+story+=+%22Once+upon+a+time...%22;%0A++++%0A++++let+ptr+=+story.as_ptr();%0A++++let+len+=+story.len();%0A++++%0A++++//+story+has+nineteen+bytes%0A++++assert_eq!(19,+len);%0A++++%0A++++//+We+can+re-build+a+str+out+of+ptr+and+len.+This+is+all+unsafe+because%0A++++//+we+are+responsible+for+making+sure+the+two+components+are+valid:%0A++++let+s+=+unsafe+%7B%0A++++++++//+First,+we+build+a+%26%5Bu8%5D...%0A++++++++let+slice+=+slice::from_raw_parts(ptr,+len);%0A++++%0A++++++++//+...+and+then+convert+that+slice+into+a+string+slice%0A++++++++str::from_utf8(slice)%0A++++%7D;%0A++++%0A++++assert_eq!(s,+Ok(story));%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Note: This example shows the internals of <code>&amp;str</code>. <code>unsafe</code> should not be\nused to get a string slice under normal circumstances. Use <code>as_str</code>\ninstead.</p>\n<h2 id=\"invariant\"><a class=\"doc-anchor\" href=\"#invariant\">§</a>Invariant</h2>\n<p>Rust libraries may assume that string slices are always valid UTF-8.</p>\n<p>Constructing a non-UTF-8 string slice is not immediate undefined behavior, but any function\ncalled on a string slice may assume that it is valid UTF-8, which means that a non-UTF-8 string\nslice can lead to undefined behavior down the road.</p>\n</div></details><h2 id=\"implementations\" class=\"section-header\">Implementations<a href=\"#implementations\" class=\"anchor\">§</a></h2><div id=\"implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-str\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#139\">source</a><a href=\"#impl-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"primitive\" href=\"primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.len\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.39.0\">1.0.0 (const: 1.39.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.len\" class=\"fn\">len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the length of <code>self</code>.</p>\n<p>This length is in bytes, not <a href=\"primitive.char.html\" title=\"primitive char\"><code>char</code></a>s or graphemes. In other words,\nit might not be what a human considers the length of the string.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>len = <span class=\"string\">\"foo\"</span>.len();\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">3</span>, len);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"ƒoo\"</span>.len(), <span class=\"number\">4</span>); <span class=\"comment\">// fancy f!\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"ƒoo\"</span>.chars().count(), <span class=\"number\">3</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+len+=+%22foo%22.len();%0A++++assert_eq!(3,+len);%0A++++%0A++++assert_eq!(%22%C6%92oo%22.len(),+4);+//+fancy+f!%0A++++assert_eq!(%22%C6%92oo%22.chars().count(),+3);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_empty\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.39.0\">1.0.0 (const: 1.39.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#179\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.is_empty\" class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if <code>self</code> has a length of zero bytes.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">\"\"</span>;\n<span class=\"macro\">assert!</span>(s.is_empty());\n\n<span class=\"kw\">let </span>s = <span class=\"string\">\"not empty\"</span>;\n<span class=\"macro\">assert!</span>(!s.is_empty());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s+=+%22%22;%0A++++assert!(s.is_empty());%0A++++%0A++++let+s+=+%22not+empty%22;%0A++++assert!(!s.is_empty());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_char_boundary\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.9.0\">1.9.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#209\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.is_char_boundary\" class=\"fn\">is_char_boundary</a>(&amp;self, index: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Checks that <code>index</code>-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.</p>\n<p>The start and end of the string (when <code>index == self.len()</code>) are\nconsidered to be boundaries.</p>\n<p>Returns <code>false</code> if <code>index</code> is greater than <code>self.len()</code>.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">\"Löwe 老虎 Léopard\"</span>;\n<span class=\"macro\">assert!</span>(s.is_char_boundary(<span class=\"number\">0</span>));\n<span class=\"comment\">// start of `老`\n</span><span class=\"macro\">assert!</span>(s.is_char_boundary(<span class=\"number\">6</span>));\n<span class=\"macro\">assert!</span>(s.is_char_boundary(s.len()));\n\n<span class=\"comment\">// second byte of `ö`\n</span><span class=\"macro\">assert!</span>(!s.is_char_boundary(<span class=\"number\">2</span>));\n\n<span class=\"comment\">// third byte of `老`\n</span><span class=\"macro\">assert!</span>(!s.is_char_boundary(<span class=\"number\">8</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s+=+%22L%C3%B6we+%E8%80%81%E8%99%8E+L%C3%A9opard%22;%0A++++assert!(s.is_char_boundary(0));%0A++++//+start+of+%60%E8%80%81%60%0A++++assert!(s.is_char_boundary(6));%0A++++assert!(s.is_char_boundary(s.len()));%0A++++%0A++++//+second+byte+of+%60%C3%B6%60%0A++++assert!(!s.is_char_boundary(2));%0A++++%0A++++//+third+byte+of+%60%E8%80%81%60%0A++++assert!(!s.is_char_boundary(8));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.floor_char_boundary\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#256\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.floor_char_boundary\" class=\"fn\">floor_char_boundary</a>(&amp;self, index: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.usize.html\">usize</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>round_char_boundary</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/93743\">#93743</a>)</span></div></span></summary><div class=\"docblock\"><p>Finds the closest <code>x</code> not exceeding <code>index</code> where <code>is_char_boundary(x)</code> is <code>true</code>.</p>\n<p>This method can help you truncate a string so that it’s still valid UTF-8, but doesn’t\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren’t\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(round_char_boundary)]\n</span><span class=\"kw\">let </span>s = <span class=\"string\">\"❤️🧡💛💚💙💜\"</span>;\n<span class=\"macro\">assert_eq!</span>(s.len(), <span class=\"number\">26</span>);\n<span class=\"macro\">assert!</span>(!s.is_char_boundary(<span class=\"number\">13</span>));\n\n<span class=\"kw\">let </span>closest = s.floor_char_boundary(<span class=\"number\">13</span>);\n<span class=\"macro\">assert_eq!</span>(closest, <span class=\"number\">10</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>s[..closest], <span class=\"string\">\"❤️🧡\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(round_char_boundary)%5D%0Afn+main()+%7B%0A++++let+s+=+%22%E2%9D%A4%EF%B8%8F%F0%9F%A7%A1%F0%9F%92%9B%F0%9F%92%9A%F0%9F%92%99%F0%9F%92%9C%22;%0A++++assert_eq!(s.len(),+26);%0A++++assert!(!s.is_char_boundary(13));%0A++++%0A++++let+closest+=+s.floor_char_boundary(13);%0A++++assert_eq!(closest,+10);%0A++++assert_eq!(%26s%5B..closest%5D,+%22%E2%9D%A4%EF%B8%8F%F0%9F%A7%A1%22);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ceil_char_boundary\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#294\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.ceil_char_boundary\" class=\"fn\">ceil_char_boundary</a>(&amp;self, index: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.usize.html\">usize</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>round_char_boundary</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/93743\">#93743</a>)</span></div></span></summary><div class=\"docblock\"><p>Finds the closest <code>x</code> not below <code>index</code> where <code>is_char_boundary(x)</code> is <code>true</code>.</p>\n<p>If <code>index</code> is greater than the length of the string, this returns the length of the string.</p>\n<p>This method is the natural complement to <a href=\"primitive.str.html#method.floor_char_boundary\" title=\"method str::floor_char_boundary\"><code>floor_char_boundary</code></a>. See that method\nfor more details.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(round_char_boundary)]\n</span><span class=\"kw\">let </span>s = <span class=\"string\">\"❤️🧡💛💚💙💜\"</span>;\n<span class=\"macro\">assert_eq!</span>(s.len(), <span class=\"number\">26</span>);\n<span class=\"macro\">assert!</span>(!s.is_char_boundary(<span class=\"number\">13</span>));\n\n<span class=\"kw\">let </span>closest = s.ceil_char_boundary(<span class=\"number\">13</span>);\n<span class=\"macro\">assert_eq!</span>(closest, <span class=\"number\">14</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>s[..closest], <span class=\"string\">\"❤️🧡💛\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(round_char_boundary)%5D%0Afn+main()+%7B%0A++++let+s+=+%22%E2%9D%A4%EF%B8%8F%F0%9F%A7%A1%F0%9F%92%9B%F0%9F%92%9A%F0%9F%92%99%F0%9F%92%9C%22;%0A++++assert_eq!(s.len(),+26);%0A++++assert!(!s.is_char_boundary(13));%0A++++%0A++++let+closest+=+s.ceil_char_boundary(13);%0A++++assert_eq!(closest,+14);%0A++++assert_eq!(%26s%5B..closest%5D,+%22%E2%9D%A4%EF%B8%8F%F0%9F%A7%A1%F0%9F%92%9B%22);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_bytes\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.39.0\">1.0.0 (const: 1.39.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#320\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.as_bytes\" class=\"fn\">as_bytes</a>(&amp;self) -&gt; &amp;[<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>] <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;[u8]\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the <a href=\"str/fn.from_utf8.html\" title=\"fn std::str::from_utf8\"><code>from_utf8</code></a> function.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bytes = <span class=\"string\">\"bors\"</span>.as_bytes();\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">b\"bors\"</span>, bytes);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+bytes+=+%22bors%22.as_bytes();%0A++++assert_eq!(b%22bors%22,+bytes);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_bytes_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#364\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.as_bytes_mut\" class=\"fn\">as_bytes_mut</a>(&amp;mut self) -&gt; &amp;mut [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>] <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;mut [u8]\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Converts a mutable string slice to a mutable byte slice.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>The caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying <code>str</code> is used.</p>\n<p>Use of a <code>str</code> whose contents are not valid UTF-8 is undefined behavior.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = String::from(<span class=\"string\">\"Hello\"</span>);\n<span class=\"kw\">let </span>bytes = <span class=\"kw\">unsafe </span>{ s.as_bytes_mut() };\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">b\"Hello\"</span>, bytes);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+s+=+String::from(%22Hello%22);%0A++++let+bytes+=+unsafe+%7B+s.as_bytes_mut()+%7D;%0A++++%0A++++assert_eq!(b%22Hello%22,+bytes);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Mutability:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = String::from(<span class=\"string\">\"🗻∈🌏\"</span>);\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">let </span>bytes = s.as_bytes_mut();\n\n    bytes[<span class=\"number\">0</span>] = <span class=\"number\">0xF0</span>;\n    bytes[<span class=\"number\">1</span>] = <span class=\"number\">0x9F</span>;\n    bytes[<span class=\"number\">2</span>] = <span class=\"number\">0x8D</span>;\n    bytes[<span class=\"number\">3</span>] = <span class=\"number\">0x94</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"🍔∈🌏\"</span>, s);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+s+=+String::from(%22%F0%9F%97%BB%E2%88%88%F0%9F%8C%8F%22);%0A++++%0A++++unsafe+%7B%0A++++++++let+bytes+=+s.as_bytes_mut();%0A++++%0A++++++++bytes%5B0%5D+=+0xF0;%0A++++++++bytes%5B1%5D+=+0x9F;%0A++++++++bytes%5B2%5D+=+0x8D;%0A++++++++bytes%5B3%5D+=+0x94;%0A++++%7D%0A++++%0A++++assert_eq!(%22%F0%9F%8D%94%E2%88%88%F0%9F%8C%8F%22,+s);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_ptr\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#394\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.as_ptr\" class=\"fn\">as_ptr</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"primitive.pointer.html\">*const </a><a class=\"primitive\" href=\"primitive.u8.html\">u8</a></h4></section></summary><div class=\"docblock\"><p>Converts a string slice to a raw pointer.</p>\n<p>As string slices are a slice of bytes, the raw pointer points to a\n<a href=\"primitive.u8.html\" title=\"primitive u8\"><code>u8</code></a>. This pointer will be pointing to the first byte of the string\nslice.</p>\n<p>The caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use <a href=\"primitive.str.html#method.as_mut_ptr\" title=\"method str::as_mut_ptr\"><code>as_mut_ptr</code></a>.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">\"Hello\"</span>;\n<span class=\"kw\">let </span>ptr = s.as_ptr();</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s+=+%22Hello%22;%0A++++let+ptr+=+s.as_ptr();%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_mut_ptr\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.36.0\">1.36.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#410\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.as_mut_ptr\" class=\"fn\">as_mut_ptr</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"primitive.pointer.html\">*mut </a><a class=\"primitive\" href=\"primitive.u8.html\">u8</a></h4></section></summary><div class=\"docblock\"><p>Converts a mutable string slice to a raw pointer.</p>\n<p>As string slices are a slice of bytes, the raw pointer points to a\n<a href=\"primitive.u8.html\" title=\"primitive u8\"><code>u8</code></a>. This pointer will be pointing to the first byte of the string\nslice.</p>\n<p>It is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#435\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.get\" class=\"fn\">get</a>&lt;I&gt;(&amp;self, i: I) -&gt; <a class=\"enum\" href=\"option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;&lt;I as <a class=\"trait\" href=\"slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type std::slice::SliceIndex::Output\">Output</a>&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns a subslice of <code>str</code>.</p>\n<p>This is the non-panicking alternative to indexing the <code>str</code>. Returns\n<a href=\"option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a> whenever equivalent indexing operation would panic.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = String::from(<span class=\"string\">\"🗻∈🌏\"</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"🗻\"</span>), v.get(<span class=\"number\">0</span>..<span class=\"number\">4</span>));\n\n<span class=\"comment\">// indices not on UTF-8 sequence boundaries\n</span><span class=\"macro\">assert!</span>(v.get(<span class=\"number\">1</span>..).is_none());\n<span class=\"macro\">assert!</span>(v.get(..<span class=\"number\">8</span>).is_none());\n\n<span class=\"comment\">// out of bounds\n</span><span class=\"macro\">assert!</span>(v.get(..<span class=\"number\">42</span>).is_none());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v+=+String::from(%22%F0%9F%97%BB%E2%88%88%F0%9F%8C%8F%22);%0A++++%0A++++assert_eq!(Some(%22%F0%9F%97%BB%22),+v.get(0..4));%0A++++%0A++++//+indices+not+on+UTF-8+sequence+boundaries%0A++++assert!(v.get(1..).is_none());%0A++++assert!(v.get(..8).is_none());%0A++++%0A++++//+out+of+bounds%0A++++assert!(v.get(..42).is_none());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#467\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.get_mut\" class=\"fn\">get_mut</a>&lt;I&gt;(\n    &amp;mut self,\n    i: I,\n) -&gt; <a class=\"enum\" href=\"option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;mut &lt;I as <a class=\"trait\" href=\"slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type std::slice::SliceIndex::Output\">Output</a>&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns a mutable subslice of <code>str</code>.</p>\n<p>This is the non-panicking alternative to indexing the <code>str</code>. Returns\n<a href=\"option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a> whenever equivalent indexing operation would panic.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = String::from(<span class=\"string\">\"hello\"</span>);\n<span class=\"comment\">// correct length\n</span><span class=\"macro\">assert!</span>(v.get_mut(<span class=\"number\">0</span>..<span class=\"number\">5</span>).is_some());\n<span class=\"comment\">// out of bounds\n</span><span class=\"macro\">assert!</span>(v.get_mut(..<span class=\"number\">42</span>).is_none());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"he\"</span>), v.get_mut(<span class=\"number\">0</span>..<span class=\"number\">2</span>).map(|v| <span class=\"kw-2\">&amp;*</span>v));\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"hello\"</span>, v);\n{\n    <span class=\"kw\">let </span>s = v.get_mut(<span class=\"number\">0</span>..<span class=\"number\">2</span>);\n    <span class=\"kw\">let </span>s = s.map(|s| {\n        s.make_ascii_uppercase();\n        <span class=\"kw-2\">&amp;*</span>s\n    });\n    <span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"HE\"</span>), s);\n}\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"HEllo\"</span>, v);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+v+=+String::from(%22hello%22);%0A++++//+correct+length%0A++++assert!(v.get_mut(0..5).is_some());%0A++++//+out+of+bounds%0A++++assert!(v.get_mut(..42).is_none());%0A++++assert_eq!(Some(%22he%22),+v.get_mut(0..2).map(%7Cv%7C+%26*v));%0A++++%0A++++assert_eq!(%22hello%22,+v);%0A++++%7B%0A++++++++let+s+=+v.get_mut(0..2);%0A++++++++let+s+=+s.map(%7Cs%7C+%7B%0A++++++++++++s.make_ascii_uppercase();%0A++++++++++++%26*s%0A++++++++%7D);%0A++++++++assert_eq!(Some(%22HE%22),+s);%0A++++%7D%0A++++assert_eq!(%22HEllo%22,+v);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_unchecked\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#499\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.get_unchecked\" class=\"fn\">get_unchecked</a>&lt;I&gt;(&amp;self, i: I) -&gt; &amp;&lt;I as <a class=\"trait\" href=\"slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type std::slice::SliceIndex::Output\">Output</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns an unchecked subslice of <code>str</code>.</p>\n<p>This is the unchecked alternative to indexing the <code>str</code>.</p>\n<h5 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">§</a>Safety</h5>\n<p>Callers of this function are responsible that these preconditions are\nsatisfied:</p>\n<ul>\n<li>The starting index must not exceed the ending index;</li>\n<li>Indexes must be within bounds of the original slice;</li>\n<li>Indexes must lie on UTF-8 sequence boundaries.</li>\n</ul>\n<p>Failing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the <code>str</code> type.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = <span class=\"string\">\"🗻∈🌏\"</span>;\n<span class=\"kw\">unsafe </span>{\n    <span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"🗻\"</span>, v.get_unchecked(<span class=\"number\">0</span>..<span class=\"number\">4</span>));\n    <span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"∈\"</span>, v.get_unchecked(<span class=\"number\">4</span>..<span class=\"number\">7</span>));\n    <span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"🌏\"</span>, v.get_unchecked(<span class=\"number\">7</span>..<span class=\"number\">11</span>));\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v+=+%22%F0%9F%97%BB%E2%88%88%F0%9F%8C%8F%22;%0A++++unsafe+%7B%0A++++++++assert_eq!(%22%F0%9F%97%BB%22,+v.get_unchecked(0..4));%0A++++++++assert_eq!(%22%E2%88%88%22,+v.get_unchecked(4..7));%0A++++++++assert_eq!(%22%F0%9F%8C%8F%22,+v.get_unchecked(7..11));%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_unchecked_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#534\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.get_unchecked_mut\" class=\"fn\">get_unchecked_mut</a>&lt;I&gt;(\n    &amp;mut self,\n    i: I,\n) -&gt; &amp;mut &lt;I as <a class=\"trait\" href=\"slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type std::slice::SliceIndex::Output\">Output</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns a mutable, unchecked subslice of <code>str</code>.</p>\n<p>This is the unchecked alternative to indexing the <code>str</code>.</p>\n<h5 id=\"safety-2\"><a class=\"doc-anchor\" href=\"#safety-2\">§</a>Safety</h5>\n<p>Callers of this function are responsible that these preconditions are\nsatisfied:</p>\n<ul>\n<li>The starting index must not exceed the ending index;</li>\n<li>Indexes must be within bounds of the original slice;</li>\n<li>Indexes must lie on UTF-8 sequence boundaries.</li>\n</ul>\n<p>Failing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the <code>str</code> type.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = String::from(<span class=\"string\">\"🗻∈🌏\"</span>);\n<span class=\"kw\">unsafe </span>{\n    <span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"🗻\"</span>, v.get_unchecked_mut(<span class=\"number\">0</span>..<span class=\"number\">4</span>));\n    <span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"∈\"</span>, v.get_unchecked_mut(<span class=\"number\">4</span>..<span class=\"number\">7</span>));\n    <span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"🌏\"</span>, v.get_unchecked_mut(<span class=\"number\">7</span>..<span class=\"number\">11</span>));\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+v+=+String::from(%22%F0%9F%97%BB%E2%88%88%F0%9F%8C%8F%22);%0A++++unsafe+%7B%0A++++++++assert_eq!(%22%F0%9F%97%BB%22,+v.get_unchecked_mut(0..4));%0A++++++++assert_eq!(%22%E2%88%88%22,+v.get_unchecked_mut(4..7));%0A++++++++assert_eq!(%22%F0%9F%8C%8F%22,+v.get_unchecked_mut(7..11));%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.slice_unchecked\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#585\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.slice_unchecked\" class=\"fn\">slice_unchecked</a>(&amp;self, begin: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>, end: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 1.29.0: use <code>get_unchecked(begin..end)</code> instead</span></div></span></summary><div class=\"docblock\"><p>Creates a string slice from another string slice, bypassing safety\nchecks.</p>\n<p>This is generally not recommended, use with caution! For a safe\nalternative see <a href=\"primitive.str.html\" title=\"primitive str\"><code>str</code></a> and <a href=\"ops/trait.Index.html\" title=\"trait std::ops::Index\"><code>Index</code></a>.</p>\n<p>This new slice goes from <code>begin</code> to <code>end</code>, including <code>begin</code> but\nexcluding <code>end</code>.</p>\n<p>To get a mutable string slice instead, see the\n<a href=\"primitive.str.html#method.slice_mut_unchecked\" title=\"method str::slice_mut_unchecked\"><code>slice_mut_unchecked</code></a> method.</p>\n<h5 id=\"safety-3\"><a class=\"doc-anchor\" href=\"#safety-3\">§</a>Safety</h5>\n<p>Callers of this function are responsible that three preconditions are\nsatisfied:</p>\n<ul>\n<li><code>begin</code> must not exceed <code>end</code>.</li>\n<li><code>begin</code> and <code>end</code> must be byte positions within the string slice.</li>\n<li><code>begin</code> and <code>end</code> must lie on UTF-8 sequence boundaries.</li>\n</ul>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">\"Löwe 老虎 Léopard\"</span>;\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"Löwe 老虎 Léopard\"</span>, s.slice_unchecked(<span class=\"number\">0</span>, <span class=\"number\">21</span>));\n}\n\n<span class=\"kw\">let </span>s = <span class=\"string\">\"Hello, world!\"</span>;\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"world\"</span>, s.slice_unchecked(<span class=\"number\">7</span>, <span class=\"number\">12</span>));\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s+=+%22L%C3%B6we+%E8%80%81%E8%99%8E+L%C3%A9opard%22;%0A++++%0A++++unsafe+%7B%0A++++++++assert_eq!(%22L%C3%B6we+%E8%80%81%E8%99%8E+L%C3%A9opard%22,+s.slice_unchecked(0,+21));%0A++++%7D%0A++++%0A++++let+s+=+%22Hello,+world!%22;%0A++++%0A++++unsafe+%7B%0A++++++++assert_eq!(%22world%22,+s.slice_unchecked(7,+12));%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.slice_mut_unchecked\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#618\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.slice_mut_unchecked\" class=\"fn\">slice_mut_unchecked</a>(\n    &amp;mut self,\n    begin: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>,\n    end: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>,\n) -&gt; &amp;mut <a class=\"primitive\" href=\"primitive.str.html\">str</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 1.29.0: use <code>get_unchecked_mut(begin..end)</code> instead</span></div></span></summary><div class=\"docblock\"><p>Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see <a href=\"primitive.str.html\" title=\"primitive str\"><code>str</code></a> and <a href=\"ops/trait.IndexMut.html\" title=\"trait std::ops::IndexMut\"><code>IndexMut</code></a>.</p>\n<p>This new slice goes from <code>begin</code> to <code>end</code>, including <code>begin</code> but\nexcluding <code>end</code>.</p>\n<p>To get an immutable string slice instead, see the\n<a href=\"primitive.str.html#method.slice_unchecked\" title=\"method str::slice_unchecked\"><code>slice_unchecked</code></a> method.</p>\n<h5 id=\"safety-4\"><a class=\"doc-anchor\" href=\"#safety-4\">§</a>Safety</h5>\n<p>Callers of this function are responsible that three preconditions are\nsatisfied:</p>\n<ul>\n<li><code>begin</code> must not exceed <code>end</code>.</li>\n<li><code>begin</code> and <code>end</code> must be byte positions within the string slice.</li>\n<li><code>begin</code> and <code>end</code> must lie on UTF-8 sequence boundaries.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.split_at\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#657\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.split_at\" class=\"fn\">split_at</a>(&amp;self, mid: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; (&amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>, &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>)</h4></section></summary><div class=\"docblock\"><p>Divide one string slice into two at an index.</p>\n<p>The argument, <code>mid</code>, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.</p>\n<p>The two slices returned go from the start of the string slice to <code>mid</code>,\nand from <code>mid</code> to the end of the string slice.</p>\n<p>To get mutable string slices instead, see the <a href=\"primitive.str.html#method.split_at_mut\" title=\"method str::split_at_mut\"><code>split_at_mut</code></a>\nmethod.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>mid</code> is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see <a href=\"primitive.str.html#method.split_at_checked\" title=\"method str::split_at_checked\"><code>split_at_checked</code></a>.</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">\"Per Martin-Löf\"</span>;\n\n<span class=\"kw\">let </span>(first, last) = s.split_at(<span class=\"number\">3</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"Per\"</span>, first);\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\" Martin-Löf\"</span>, last);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s+=+%22Per+Martin-L%C3%B6f%22;%0A++++%0A++++let+(first,+last)+=+s.split_at(3);%0A++++%0A++++assert_eq!(%22Per%22,+first);%0A++++assert_eq!(%22+Martin-L%C3%B6f%22,+last);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.split_at_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#697\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.split_at_mut\" class=\"fn\">split_at_mut</a>(&amp;mut self, mid: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; (&amp;mut <a class=\"primitive\" href=\"primitive.str.html\">str</a>, &amp;mut <a class=\"primitive\" href=\"primitive.str.html\">str</a>)</h4></section></summary><div class=\"docblock\"><p>Divide one mutable string slice into two at an index.</p>\n<p>The argument, <code>mid</code>, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.</p>\n<p>The two slices returned go from the start of the string slice to <code>mid</code>,\nand from <code>mid</code> to the end of the string slice.</p>\n<p>To get immutable string slices instead, see the <a href=\"primitive.str.html#method.split_at\" title=\"method str::split_at\"><code>split_at</code></a> method.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if <code>mid</code> is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see <a href=\"primitive.str.html#method.split_at_mut_checked\" title=\"method str::split_at_mut_checked\"><code>split_at_mut_checked</code></a>.</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = <span class=\"string\">\"Per Martin-Löf\"</span>.to_string();\n{\n    <span class=\"kw\">let </span>(first, last) = s.split_at_mut(<span class=\"number\">3</span>);\n    first.make_ascii_uppercase();\n    <span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"PER\"</span>, first);\n    <span class=\"macro\">assert_eq!</span>(<span class=\"string\">\" Martin-Löf\"</span>, last);\n}\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"PER Martin-Löf\"</span>, s);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+s+=+%22Per+Martin-L%C3%B6f%22.to_string();%0A++++%7B%0A++++++++let+(first,+last)+=+s.split_at_mut(3);%0A++++++++first.make_ascii_uppercase();%0A++++++++assert_eq!(%22PER%22,+first);%0A++++++++assert_eq!(%22+Martin-L%C3%B6f%22,+last);%0A++++%7D%0A++++assert_eq!(%22PER+Martin-L%C3%B6f%22,+s);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.split_at_checked\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0\">1.80.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#736\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.split_at_checked\" class=\"fn\">split_at_checked</a>(&amp;self, mid: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;(&amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>, &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>)&gt;</h4></section></summary><div class=\"docblock\"><p>Divide one string slice into two at an index.</p>\n<p>The argument, <code>mid</code>, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns <code>None</code> if that’s not the case.</p>\n<p>The two slices returned go from the start of the string slice to <code>mid</code>,\nand from <code>mid</code> to the end of the string slice.</p>\n<p>To get mutable string slices instead, see the <a href=\"primitive.str.html#method.split_at_mut_checked\" title=\"method str::split_at_mut_checked\"><code>split_at_mut_checked</code></a>\nmethod.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">\"Per Martin-Löf\"</span>;\n\n<span class=\"kw\">let </span>(first, last) = s.split_at_checked(<span class=\"number\">3</span>).unwrap();\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"Per\"</span>, first);\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\" Martin-Löf\"</span>, last);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, s.split_at_checked(<span class=\"number\">13</span>));  <span class=\"comment\">// Inside “ö”\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, s.split_at_checked(<span class=\"number\">16</span>));  <span class=\"comment\">// Beyond the string length</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s+=+%22Per+Martin-L%C3%B6f%22;%0A++++%0A++++let+(first,+last)+=+s.split_at_checked(3).unwrap();%0A++++assert_eq!(%22Per%22,+first);%0A++++assert_eq!(%22+Martin-L%C3%B6f%22,+last);%0A++++%0A++++assert_eq!(None,+s.split_at_checked(13));++//+Inside+%E2%80%9C%C3%B6%E2%80%9D%0A++++assert_eq!(None,+s.split_at_checked(16));++//+Beyond+the+string+length%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.split_at_mut_checked\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0\">1.80.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#776\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.split_at_mut_checked\" class=\"fn\">split_at_mut_checked</a>(\n    &amp;mut self,\n    mid: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"enum\" href=\"option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;(&amp;mut <a class=\"primitive\" href=\"primitive.str.html\">str</a>, &amp;mut <a class=\"primitive\" href=\"primitive.str.html\">str</a>)&gt;</h4></section></summary><div class=\"docblock\"><p>Divide one mutable string slice into two at an index.</p>\n<p>The argument, <code>mid</code>, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns <code>None</code> if that’s not the case.</p>\n<p>The two slices returned go from the start of the string slice to <code>mid</code>,\nand from <code>mid</code> to the end of the string slice.</p>\n<p>To get immutable string slices instead, see the <a href=\"primitive.str.html#method.split_at_checked\" title=\"method str::split_at_checked\"><code>split_at_checked</code></a> method.</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = <span class=\"string\">\"Per Martin-Löf\"</span>.to_string();\n<span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>((first, last)) = s.split_at_mut_checked(<span class=\"number\">3</span>) {\n    first.make_ascii_uppercase();\n    <span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"PER\"</span>, first);\n    <span class=\"macro\">assert_eq!</span>(<span class=\"string\">\" Martin-Löf\"</span>, last);\n}\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"PER Martin-Löf\"</span>, s);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, s.split_at_mut_checked(<span class=\"number\">13</span>));  <span class=\"comment\">// Inside “ö”\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, s.split_at_mut_checked(<span class=\"number\">16</span>));  <span class=\"comment\">// Beyond the string length</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+s+=+%22Per+Martin-L%C3%B6f%22.to_string();%0A++++if+let+Some((first,+last))+=+s.split_at_mut_checked(3)+%7B%0A++++++++first.make_ascii_uppercase();%0A++++++++assert_eq!(%22PER%22,+first);%0A++++++++assert_eq!(%22+Martin-L%C3%B6f%22,+last);%0A++++%7D%0A++++assert_eq!(%22PER+Martin-L%C3%B6f%22,+s);%0A++++%0A++++assert_eq!(None,+s.split_at_mut_checked(13));++//+Inside+%E2%80%9C%C3%B6%E2%80%9D%0A++++assert_eq!(None,+s.split_at_mut_checked(16));++//+Beyond+the+string+length%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.chars\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#853\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.chars\" class=\"fn\">chars</a>(&amp;self) -&gt; <a class=\"struct\" href=\"str/struct.Chars.html\" title=\"struct std::str::Chars\">Chars</a>&lt;'_&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Chars<'_>\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns an iterator over the <a href=\"primitive.char.html\" title=\"primitive char\"><code>char</code></a>s of a string slice.</p>\n<p>As a string slice consists of valid UTF-8, we can iterate through a\nstring slice by <a href=\"primitive.char.html\" title=\"primitive char\"><code>char</code></a>. This method returns such an iterator.</p>\n<p>It’s important to remember that <a href=\"primitive.char.html\" title=\"primitive char\"><code>char</code></a> represents a Unicode Scalar\nValue, and might not match your idea of what a ‘character’ is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust’s standard library, check crates.io instead.</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>word = <span class=\"string\">\"goodbye\"</span>;\n\n<span class=\"kw\">let </span>count = word.chars().count();\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">7</span>, count);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>chars = word.chars();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">'g'</span>), chars.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">'o'</span>), chars.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">'o'</span>), chars.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">'d'</span>), chars.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">'b'</span>), chars.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">'y'</span>), chars.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">'e'</span>), chars.next());\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, chars.next());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+word+=+%22goodbye%22;%0A++++%0A++++let+count+=+word.chars().count();%0A++++assert_eq!(7,+count);%0A++++%0A++++let+mut+chars+=+word.chars();%0A++++%0A++++assert_eq!(Some('g'),+chars.next());%0A++++assert_eq!(Some('o'),+chars.next());%0A++++assert_eq!(Some('o'),+chars.next());%0A++++assert_eq!(Some('d'),+chars.next());%0A++++assert_eq!(Some('b'),+chars.next());%0A++++assert_eq!(Some('y'),+chars.next());%0A++++assert_eq!(Some('e'),+chars.next());%0A++++%0A++++assert_eq!(None,+chars.next());%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Remember, <a href=\"primitive.char.html\" title=\"primitive char\"><code>char</code></a>s might not match your intuition about characters:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>y = <span class=\"string\">\"y̆\"</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>chars = y.chars();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">'y'</span>), chars.next()); <span class=\"comment\">// not 'y̆'\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">'\\u{0306}'</span>), chars.next());\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, chars.next());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+y+=+%22y%CC%86%22;%0A++++%0A++++let+mut+chars+=+y.chars();%0A++++%0A++++assert_eq!(Some('y'),+chars.next());+//+not+'y%CC%86'%0A++++assert_eq!(Some('%5Cu%7B0306%7D'),+chars.next());%0A++++%0A++++assert_eq!(None,+chars.next());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.char_indices\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#910\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.char_indices\" class=\"fn\">char_indices</a>(&amp;self) -&gt; <a class=\"struct\" href=\"str/struct.CharIndices.html\" title=\"struct std::str::CharIndices\">CharIndices</a>&lt;'_&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"CharIndices<'_>\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns an iterator over the <a href=\"primitive.char.html\" title=\"primitive char\"><code>char</code></a>s of a string slice, and their\npositions.</p>\n<p>As a string slice consists of valid UTF-8, we can iterate through a\nstring slice by <a href=\"primitive.char.html\" title=\"primitive char\"><code>char</code></a>. This method returns an iterator of both\nthese <a href=\"primitive.char.html\" title=\"primitive char\"><code>char</code></a>s, as well as their byte positions.</p>\n<p>The iterator yields tuples. The position is first, the <a href=\"primitive.char.html\" title=\"primitive char\"><code>char</code></a> is\nsecond.</p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>word = <span class=\"string\">\"goodbye\"</span>;\n\n<span class=\"kw\">let </span>count = word.char_indices().count();\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">7</span>, count);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>char_indices = word.char_indices();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>((<span class=\"number\">0</span>, <span class=\"string\">'g'</span>)), char_indices.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>((<span class=\"number\">1</span>, <span class=\"string\">'o'</span>)), char_indices.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>((<span class=\"number\">2</span>, <span class=\"string\">'o'</span>)), char_indices.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>((<span class=\"number\">3</span>, <span class=\"string\">'d'</span>)), char_indices.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>((<span class=\"number\">4</span>, <span class=\"string\">'b'</span>)), char_indices.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>((<span class=\"number\">5</span>, <span class=\"string\">'y'</span>)), char_indices.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>((<span class=\"number\">6</span>, <span class=\"string\">'e'</span>)), char_indices.next());\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, char_indices.next());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+word+=+%22goodbye%22;%0A++++%0A++++let+count+=+word.char_indices().count();%0A++++assert_eq!(7,+count);%0A++++%0A++++let+mut+char_indices+=+word.char_indices();%0A++++%0A++++assert_eq!(Some((0,+'g')),+char_indices.next());%0A++++assert_eq!(Some((1,+'o')),+char_indices.next());%0A++++assert_eq!(Some((2,+'o')),+char_indices.next());%0A++++assert_eq!(Some((3,+'d')),+char_indices.next());%0A++++assert_eq!(Some((4,+'b')),+char_indices.next());%0A++++assert_eq!(Some((5,+'y')),+char_indices.next());%0A++++assert_eq!(Some((6,+'e')),+char_indices.next());%0A++++%0A++++assert_eq!(None,+char_indices.next());%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Remember, <a href=\"primitive.char.html\" title=\"primitive char\"><code>char</code></a>s might not match your intuition about characters:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>yes = <span class=\"string\">\"y̆es\"</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>char_indices = yes.char_indices();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>((<span class=\"number\">0</span>, <span class=\"string\">'y'</span>)), char_indices.next()); <span class=\"comment\">// not (0, 'y̆')\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>((<span class=\"number\">1</span>, <span class=\"string\">'\\u{0306}'</span>)), char_indices.next());\n\n<span class=\"comment\">// note the 3 here - the previous character took up two bytes\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>((<span class=\"number\">3</span>, <span class=\"string\">'e'</span>)), char_indices.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>((<span class=\"number\">4</span>, <span class=\"string\">'s'</span>)), char_indices.next());\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, char_indices.next());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+yes+=+%22y%CC%86es%22;%0A++++%0A++++let+mut+char_indices+=+yes.char_indices();%0A++++%0A++++assert_eq!(Some((0,+'y')),+char_indices.next());+//+not+(0,+'y%CC%86')%0A++++assert_eq!(Some((1,+'%5Cu%7B0306%7D')),+char_indices.next());%0A++++%0A++++//+note+the+3+here+-+the+previous+character+took+up+two+bytes%0A++++assert_eq!(Some((3,+'e')),+char_indices.next());%0A++++assert_eq!(Some((4,+'s')),+char_indices.next());%0A++++%0A++++assert_eq!(None,+char_indices.next());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bytes\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#933\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.bytes\" class=\"fn\">bytes</a>(&amp;self) -&gt; <a class=\"struct\" href=\"str/struct.Bytes.html\" title=\"struct std::str::Bytes\">Bytes</a>&lt;'_&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Bytes<'_>\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>An iterator over the bytes of a string slice.</p>\n<p>As a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.</p>\n<h5 id=\"examples-19\"><a class=\"doc-anchor\" href=\"#examples-19\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bytes = <span class=\"string\">\"bors\"</span>.bytes();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">b'b'</span>), bytes.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">b'o'</span>), bytes.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">b'r'</span>), bytes.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">b's'</span>), bytes.next());\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, bytes.next());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+bytes+=+%22bors%22.bytes();%0A++++%0A++++assert_eq!(Some(b'b'),+bytes.next());%0A++++assert_eq!(Some(b'o'),+bytes.next());%0A++++assert_eq!(Some(b'r'),+bytes.next());%0A++++assert_eq!(Some(b's'),+bytes.next());%0A++++%0A++++assert_eq!(None,+bytes.next());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.split_whitespace\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.1.0\">1.1.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#985\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.split_whitespace\" class=\"fn\">split_whitespace</a>(&amp;self) -&gt; <a class=\"struct\" href=\"str/struct.SplitWhitespace.html\" title=\"struct std::str::SplitWhitespace\">SplitWhitespace</a>&lt;'_&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"SplitWhitespace<'_>\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Splits a string slice by whitespace.</p>\n<p>The iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.</p>\n<p>‘Whitespace’ is defined according to the terms of the Unicode Derived\nCore Property <code>White_Space</code>. If you only want to split on ASCII whitespace\ninstead, use <a href=\"primitive.str.html#method.split_ascii_whitespace\" title=\"method str::split_ascii_whitespace\"><code>split_ascii_whitespace</code></a>.</p>\n<h5 id=\"examples-20\"><a class=\"doc-anchor\" href=\"#examples-20\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = <span class=\"string\">\"A few words\"</span>.split_whitespace();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"A\"</span>), iter.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"few\"</span>), iter.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"words\"</span>), iter.next());\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, iter.next());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+iter+=+%22A+few+words%22.split_whitespace();%0A++++%0A++++assert_eq!(Some(%22A%22),+iter.next());%0A++++assert_eq!(Some(%22few%22),+iter.next());%0A++++assert_eq!(Some(%22words%22),+iter.next());%0A++++%0A++++assert_eq!(None,+iter.next());%0A%7D&amp;edition=2021\">Run</a></div>\n<p>All kinds of whitespace are considered:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = <span class=\"string\">\" Mary   had\\ta\\u{2009}little  \\n\\t lamb\"</span>.split_whitespace();\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"Mary\"</span>), iter.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"had\"</span>), iter.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"a\"</span>), iter.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"little\"</span>), iter.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"lamb\"</span>), iter.next());\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, iter.next());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+iter+=+%22+Mary+++had%5Cta%5Cu%7B2009%7Dlittle++%5Cn%5Ct+lamb%22.split_whitespace();%0A++++assert_eq!(Some(%22Mary%22),+iter.next());%0A++++assert_eq!(Some(%22had%22),+iter.next());%0A++++assert_eq!(Some(%22a%22),+iter.next());%0A++++assert_eq!(Some(%22little%22),+iter.next());%0A++++assert_eq!(Some(%22lamb%22),+iter.next());%0A++++%0A++++assert_eq!(None,+iter.next());%0A%7D&amp;edition=2021\">Run</a></div>\n<p>If the string is empty or all whitespace, the iterator yields no string slices:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"\"</span>.split_whitespace().next(), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"   \"</span>.split_whitespace().next(), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(%22%22.split_whitespace().next(),+None);%0A++++assert_eq!(%22+++%22.split_whitespace().next(),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.split_ascii_whitespace\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#1034\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.split_ascii_whitespace\" class=\"fn\">split_ascii_whitespace</a>(&amp;self) -&gt; <a class=\"struct\" href=\"str/struct.SplitAsciiWhitespace.html\" title=\"struct std::str::SplitAsciiWhitespace\">SplitAsciiWhitespace</a>&lt;'_&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"SplitAsciiWhitespace<'_>\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Splits a string slice by ASCII whitespace.</p>\n<p>The iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.</p>\n<p>To split by Unicode <code>Whitespace</code> instead, use <a href=\"primitive.str.html#method.split_whitespace\" title=\"method str::split_whitespace\"><code>split_whitespace</code></a>.</p>\n<h5 id=\"examples-21\"><a class=\"doc-anchor\" href=\"#examples-21\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = <span class=\"string\">\"A few words\"</span>.split_ascii_whitespace();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"A\"</span>), iter.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"few\"</span>), iter.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"words\"</span>), iter.next());\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, iter.next());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+iter+=+%22A+few+words%22.split_ascii_whitespace();%0A++++%0A++++assert_eq!(Some(%22A%22),+iter.next());%0A++++assert_eq!(Some(%22few%22),+iter.next());%0A++++assert_eq!(Some(%22words%22),+iter.next());%0A++++%0A++++assert_eq!(None,+iter.next());%0A%7D&amp;edition=2021\">Run</a></div>\n<p>All kinds of ASCII whitespace are considered:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = <span class=\"string\">\" Mary   had\\ta little  \\n\\t lamb\"</span>.split_ascii_whitespace();\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"Mary\"</span>), iter.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"had\"</span>), iter.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"a\"</span>), iter.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"little\"</span>), iter.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"lamb\"</span>), iter.next());\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, iter.next());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+iter+=+%22+Mary+++had%5Cta+little++%5Cn%5Ct+lamb%22.split_ascii_whitespace();%0A++++assert_eq!(Some(%22Mary%22),+iter.next());%0A++++assert_eq!(Some(%22had%22),+iter.next());%0A++++assert_eq!(Some(%22a%22),+iter.next());%0A++++assert_eq!(Some(%22little%22),+iter.next());%0A++++assert_eq!(Some(%22lamb%22),+iter.next());%0A++++%0A++++assert_eq!(None,+iter.next());%0A%7D&amp;edition=2021\">Run</a></div>\n<p>If the string is empty or all ASCII whitespace, the iterator yields no string slices:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"\"</span>.split_ascii_whitespace().next(), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"   \"</span>.split_ascii_whitespace().next(), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(%22%22.split_ascii_whitespace().next(),+None);%0A++++assert_eq!(%22+++%22.split_ascii_whitespace().next(),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lines\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#1092\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.lines\" class=\"fn\">lines</a>(&amp;self) -&gt; <a class=\"struct\" href=\"str/struct.Lines.html\" title=\"struct std::str::Lines\">Lines</a>&lt;'_&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Lines<'_>\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>An iterator over the lines of a string, as string slices.</p>\n<p>Lines are split at line endings that are either newlines (<code>\\n</code>) or\nsequences of a carriage return followed by a line feed (<code>\\r\\n</code>).</p>\n<p>Line terminators are not included in the lines returned by the iterator.</p>\n<p>Note that any carriage return (<code>\\r</code>) not immediately followed by a\nline feed (<code>\\n</code>) does not split a line. These carriage returns are\nthereby included in the produced lines.</p>\n<p>The final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.</p>\n<h5 id=\"examples-22\"><a class=\"doc-anchor\" href=\"#examples-22\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>text = <span class=\"string\">\"foo\\r\\nbar\\n\\nbaz\\r\"</span>;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>lines = text.lines();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>), lines.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"bar\"</span>), lines.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"\"</span>), lines.next());\n<span class=\"comment\">// Trailing carriage return is included in the last line\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"baz\\r\"</span>), lines.next());\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, lines.next());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+text+=+%22foo%5Cr%5Cnbar%5Cn%5Cnbaz%5Cr%22;%0A++++let+mut+lines+=+text.lines();%0A++++%0A++++assert_eq!(Some(%22foo%22),+lines.next());%0A++++assert_eq!(Some(%22bar%22),+lines.next());%0A++++assert_eq!(Some(%22%22),+lines.next());%0A++++//+Trailing+carriage+return+is+included+in+the+last+line%0A++++assert_eq!(Some(%22baz%5Cr%22),+lines.next());%0A++++%0A++++assert_eq!(None,+lines.next());%0A%7D&amp;edition=2021\">Run</a></div>\n<p>The final line does not require any ending:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>text = <span class=\"string\">\"foo\\nbar\\n\\r\\nbaz\"</span>;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>lines = text.lines();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>), lines.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"bar\"</span>), lines.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"\"</span>), lines.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"baz\"</span>), lines.next());\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, lines.next());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+text+=+%22foo%5Cnbar%5Cn%5Cr%5Cnbaz%22;%0A++++let+mut+lines+=+text.lines();%0A++++%0A++++assert_eq!(Some(%22foo%22),+lines.next());%0A++++assert_eq!(Some(%22bar%22),+lines.next());%0A++++assert_eq!(Some(%22%22),+lines.next());%0A++++assert_eq!(Some(%22baz%22),+lines.next());%0A++++%0A++++assert_eq!(None,+lines.next());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lines_any\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#1105\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.lines_any\" class=\"fn\">lines_any</a>(&amp;self) -&gt; <a class=\"struct\" href=\"str/struct.LinesAny.html\" title=\"struct std::str::LinesAny\">LinesAny</a>&lt;'_&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"LinesAny<'_>\">ⓘ</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 1.4.0: use lines() instead now</span></div></span></summary><div class=\"docblock\"><p>An iterator over the lines of a string.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.encode_utf16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#1124\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.encode_utf16\" class=\"fn\">encode_utf16</a>(&amp;self) -&gt; <a class=\"struct\" href=\"str/struct.EncodeUtf16.html\" title=\"struct std::str::EncodeUtf16\">EncodeUtf16</a>&lt;'_&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"EncodeUtf16<'_>\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns an iterator of <code>u16</code> over the string encoded as UTF-16.</p>\n<h5 id=\"examples-23\"><a class=\"doc-anchor\" href=\"#examples-23\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>text = <span class=\"string\">\"Zażółć gęślą jaźń\"</span>;\n\n<span class=\"kw\">let </span>utf8_len = text.len();\n<span class=\"kw\">let </span>utf16_len = text.encode_utf16().count();\n\n<span class=\"macro\">assert!</span>(utf16_len &lt;= utf8_len);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+text+=+%22Za%C5%BC%C3%B3%C5%82%C4%87+g%C4%99%C5%9Bl%C4%85+ja%C5%BA%C5%84%22;%0A++++%0A++++let+utf8_len+=+text.len();%0A++++let+utf16_len+=+text.encode_utf16().count();%0A++++%0A++++assert!(utf16_len+%3C=+utf8_len);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.contains\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#1149\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.contains\" class=\"fn\">contains</a>&lt;'a, P&gt;(&amp;'a self, pat: P) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a><div class=\"where\">where\n    P: <a class=\"trait\" href=\"str/pattern/trait.Pattern.html\" title=\"trait std::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the given pattern matches a sub-slice of\nthis string slice.</p>\n<p>Returns <code>false</code> if it does not.</p>\n<p>The <a href=\"str/pattern/index.html\" title=\"mod std::str::pattern\">pattern</a> can be a <code>&amp;str</code>, <a href=\"primitive.char.html\" title=\"primitive char\"><code>char</code></a>, a slice of <a href=\"primitive.char.html\" title=\"primitive char\"><code>char</code></a>s, or a\nfunction or closure that determines if a character matches.</p>\n<h5 id=\"examples-24\"><a class=\"doc-anchor\" href=\"#examples-24\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bananas = <span class=\"string\">\"bananas\"</span>;\n\n<span class=\"macro\">assert!</span>(bananas.contains(<span class=\"string\">\"nana\"</span>));\n<span class=\"macro\">assert!</span>(!bananas.contains(<span class=\"string\">\"apples\"</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+bananas+=+%22bananas%22;%0A++++%0A++++assert!(bananas.contains(%22nana%22));%0A++++assert!(!bananas.contains(%22apples%22));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.starts_with\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#1186\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.starts_with\" class=\"fn\">starts_with</a>&lt;'a, P&gt;(&amp;'a self, pat: P) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a><div class=\"where\">where\n    P: <a class=\"trait\" href=\"str/pattern/trait.Pattern.html\" title=\"trait std::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the given pattern matches a prefix of this\nstring slice.</p>\n<p>Returns <code>false</code> if it does not.</p>\n<p>The <a href=\"str/pattern/index.html\" title=\"mod std::str::pattern\">pattern</a> can be a <code>&amp;str</code>, in which case this function will return true if\nthe <code>&amp;str</code> is a prefix of this string slice.</p>\n<p>The <a href=\"str/pattern/index.html\" title=\"mod std::str::pattern\">pattern</a> can also be a <a href=\"primitive.char.html\" title=\"primitive char\"><code>char</code></a>, a slice of <a href=\"primitive.char.html\" title=\"primitive char\"><code>char</code></a>s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of <a href=\"primitive.char.html\" title=\"primitive char\"><code>char</code></a>s.</p>\n<h5 id=\"examples-25\"><a class=\"doc-anchor\" href=\"#examples-25\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bananas = <span class=\"string\">\"bananas\"</span>;\n\n<span class=\"macro\">assert!</span>(bananas.starts_with(<span class=\"string\">\"bana\"</span>));\n<span class=\"macro\">assert!</span>(!bananas.starts_with(<span class=\"string\">\"nana\"</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+bananas+=+%22bananas%22;%0A++++%0A++++assert!(bananas.starts_with(%22bana%22));%0A++++assert!(!bananas.starts_with(%22nana%22));%0A%7D&amp;edition=2021\">Run</a></div>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bananas = <span class=\"string\">\"bananas\"</span>;\n\n<span class=\"comment\">// Note that both of these assert successfully.\n</span><span class=\"macro\">assert!</span>(bananas.starts_with(<span class=\"kw-2\">&amp;</span>[<span class=\"string\">'b'</span>, <span class=\"string\">'a'</span>, <span class=\"string\">'n'</span>, <span class=\"string\">'a'</span>]));\n<span class=\"macro\">assert!</span>(bananas.starts_with(<span class=\"kw-2\">&amp;</span>[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>]));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+bananas+=+%22bananas%22;%0A++++%0A++++//+Note+that+both+of+these+assert+successfully.%0A++++assert!(bananas.starts_with(%26%5B'b',+'a',+'n',+'a'%5D));%0A++++assert!(bananas.starts_with(%26%5B'a',+'b',+'c',+'d'%5D));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ends_with\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#1210-1212\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.ends_with\" class=\"fn\">ends_with</a>&lt;'a, P&gt;(&amp;'a self, pat: P) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a><div class=\"where\">where\n    P: <a class=\"trait\" href=\"str/pattern/trait.Pattern.html\" title=\"trait std::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,\n    &lt;P as <a class=\"trait\" href=\"str/pattern/trait.Pattern.html\" title=\"trait std::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"str/pattern/trait.Pattern.html#associatedtype.Searcher\" title=\"type std::str::pattern::Pattern::Searcher\">Searcher</a>: <a class=\"trait\" href=\"str/pattern/trait.ReverseSearcher.html\" title=\"trait std::str::pattern::ReverseSearcher\">ReverseSearcher</a>&lt;'a&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the given pattern matches a suffix of this\nstring slice.</p>\n<p>Returns <code>false</code> if it does not.</p>\n<p>The <a href=\"str/pattern/index.html\" title=\"mod std::str::pattern\">pattern</a> can be a <code>&amp;str</code>, <a href=\"primitive.char.html\" title=\"primitive char\"><code>char</code></a>, a slice of <a href=\"primitive.char.html\" title=\"primitive char\"><code>char</code></a>s, or a\nfunction or closure that determines if a character matches.</p>\n<h5 id=\"examples-26\"><a class=\"doc-anchor\" href=\"#examples-26\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bananas = <span class=\"string\">\"bananas\"</span>;\n\n<span class=\"macro\">assert!</span>(bananas.ends_with(<span class=\"string\">\"anas\"</span>));\n<span class=\"macro\">assert!</span>(!bananas.ends_with(<span class=\"string\">\"nana\"</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+bananas+=+%22bananas%22;%0A++++%0A++++assert!(bananas.ends_with(%22anas%22));%0A++++assert!(!bananas.ends_with(%22nana%22));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.find\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#1261\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.find\" class=\"fn\">find</a>&lt;'a, P&gt;(&amp;'a self, pat: P) -&gt; <a class=\"enum\" href=\"option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"str/pattern/trait.Pattern.html\" title=\"trait std::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns the byte index of the first character of this string slice that\nmatches the pattern.</p>\n<p>Returns <a href=\"option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a> if the pattern doesn’t match.</p>\n<p>The <a href=\"str/pattern/index.html\" title=\"mod std::str::pattern\">pattern</a> can be a <code>&amp;str</code>, <a href=\"primitive.char.html\" title=\"primitive char\"><code>char</code></a>, a slice of <a href=\"primitive.char.html\" title=\"primitive char\"><code>char</code></a>s, or a\nfunction or closure that determines if a character matches.</p>\n<h5 id=\"examples-27\"><a class=\"doc-anchor\" href=\"#examples-27\">§</a>Examples</h5>\n<p>Simple patterns:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">\"Löwe 老虎 Léopard Gepardi\"</span>;\n\n<span class=\"macro\">assert_eq!</span>(s.find(<span class=\"string\">'L'</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">0</span>));\n<span class=\"macro\">assert_eq!</span>(s.find(<span class=\"string\">'é'</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">14</span>));\n<span class=\"macro\">assert_eq!</span>(s.find(<span class=\"string\">\"pard\"</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">17</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s+=+%22L%C3%B6we+%E8%80%81%E8%99%8E+L%C3%A9opard+Gepardi%22;%0A++++%0A++++assert_eq!(s.find('L'),+Some(0));%0A++++assert_eq!(s.find('%C3%A9'),+Some(14));%0A++++assert_eq!(s.find(%22pard%22),+Some(17));%0A%7D&amp;edition=2021\">Run</a></div>\n<p>More complex patterns using point-free style and closures:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">\"Löwe 老虎 Léopard\"</span>;\n\n<span class=\"macro\">assert_eq!</span>(s.find(char::is_whitespace), <span class=\"prelude-val\">Some</span>(<span class=\"number\">5</span>));\n<span class=\"macro\">assert_eq!</span>(s.find(char::is_lowercase), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(s.find(|c: char| (c &lt; <span class=\"string\">'o'</span>) &amp;&amp; (c &gt; <span class=\"string\">'a'</span>)), <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s+=+%22L%C3%B6we+%E8%80%81%E8%99%8E+L%C3%A9opard%22;%0A++++%0A++++assert_eq!(s.find(char::is_whitespace),+Some(5));%0A++++assert_eq!(s.find(char::is_lowercase),+Some(1));%0A++++assert_eq!(s.find(%7Cc:+char%7C+c.is_whitespace()+%7C%7C+c.is_lowercase()),+Some(1));%0A++++assert_eq!(s.find(%7Cc:+char%7C+(c+%3C+'o')+%26%26+(c+%3E+'a')),+Some(4));%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Not finding the pattern:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">\"Löwe 老虎 Léopard\"</span>;\n<span class=\"kw\">let </span>x: <span class=\"kw-2\">&amp;</span>[<span class=\"kw\">_</span>] = <span class=\"kw-2\">&amp;</span>[<span class=\"string\">'1'</span>, <span class=\"string\">'2'</span>];\n\n<span class=\"macro\">assert_eq!</span>(s.find(x), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s+=+%22L%C3%B6we+%E8%80%81%E8%99%8E+L%C3%A9opard%22;%0A++++let+x:+%26%5B_%5D+=+%26%5B'1',+'2'%5D;%0A++++%0A++++assert_eq!(s.find(x),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.rfind\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#1307-1309\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.rfind\" class=\"fn\">rfind</a>&lt;'a, P&gt;(&amp;'a self, pat: P) -&gt; <a class=\"enum\" href=\"option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"str/pattern/trait.Pattern.html\" title=\"trait std::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,\n    &lt;P as <a class=\"trait\" href=\"str/pattern/trait.Pattern.html\" title=\"trait std::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"str/pattern/trait.Pattern.html#associatedtype.Searcher\" title=\"type std::str::pattern::Pattern::Searcher\">Searcher</a>: <a class=\"trait\" href=\"str/pattern/trait.ReverseSearcher.html\" title=\"trait std::str::pattern::ReverseSearcher\">ReverseSearcher</a>&lt;'a&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns the byte index for the first character of the last match of the pattern in\nthis string slice.</p>\n<p>Returns <a href=\"option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a> if the pattern doesn’t match.</p>\n<p>The <a href=\"str/pattern/index.html\" title=\"mod std::str::pattern\">pattern</a> can be a <code>&amp;str</code>, <a href=\"primitive.char.html\" title=\"primitive char\"><code>char</code></a>, a slice of <a href=\"primitive.char.html\" title=\"primitive char\"><code>char</code></a>s, or a\nfunction or closure that determines if a character matches.</p>\n<h5 id=\"examples-28\"><a class=\"doc-anchor\" href=\"#examples-28\">§</a>Examples</h5>\n<p>Simple patterns:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">\"Löwe 老虎 Léopard Gepardi\"</span>;\n\n<span class=\"macro\">assert_eq!</span>(s.rfind(<span class=\"string\">'L'</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">13</span>));\n<span class=\"macro\">assert_eq!</span>(s.rfind(<span class=\"string\">'é'</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">14</span>));\n<span class=\"macro\">assert_eq!</span>(s.rfind(<span class=\"string\">\"pard\"</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">24</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s+=+%22L%C3%B6we+%E8%80%81%E8%99%8E+L%C3%A9opard+Gepardi%22;%0A++++%0A++++assert_eq!(s.rfind('L'),+Some(13));%0A++++assert_eq!(s.rfind('%C3%A9'),+Some(14));%0A++++assert_eq!(s.rfind(%22pard%22),+Some(24));%0A%7D&amp;edition=2021\">Run</a></div>\n<p>More complex patterns with closures:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">\"Löwe 老虎 Léopard\"</span>;\n\n<span class=\"macro\">assert_eq!</span>(s.rfind(char::is_whitespace), <span class=\"prelude-val\">Some</span>(<span class=\"number\">12</span>));\n<span class=\"macro\">assert_eq!</span>(s.rfind(char::is_lowercase), <span class=\"prelude-val\">Some</span>(<span class=\"number\">20</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s+=+%22L%C3%B6we+%E8%80%81%E8%99%8E+L%C3%A9opard%22;%0A++++%0A++++assert_eq!(s.rfind(char::is_whitespace),+Some(12));%0A++++assert_eq!(s.rfind(char::is_lowercase),+Some(20));%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Not finding the pattern:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">\"Löwe 老虎 Léopard\"</span>;\n<span class=\"kw\">let </span>x: <span class=\"kw-2\">&amp;</span>[<span class=\"kw\">_</span>] = <span class=\"kw-2\">&amp;</span>[<span class=\"string\">'1'</span>, <span class=\"string\">'2'</span>];\n\n<span class=\"macro\">assert_eq!</span>(s.rfind(x), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s+=+%22L%C3%B6we+%E8%80%81%E8%99%8E+L%C3%A9opard%22;%0A++++let+x:+%26%5B_%5D+=+%26%5B'1',+'2'%5D;%0A++++%0A++++assert_eq!(s.rfind(x),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.split\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#1429\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.split\" class=\"fn\">split</a>&lt;'a, P&gt;(&amp;'a self, pat: P) -&gt; <a class=\"struct\" href=\"str/struct.Split.html\" title=\"struct std::str::Split\">Split</a>&lt;'a, P&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Split<'a, P>\">ⓘ</a><div class=\"where\">where\n    P: <a class=\"trait\" href=\"str/pattern/trait.Pattern.html\" title=\"trait std::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,</div></h4></section></summary><div class=\"docblock\"><p>An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.</p>\n<p>The <a href=\"str/pattern/index.html\" title=\"mod std::str::pattern\">pattern</a> can be a <code>&amp;str</code>, <a href=\"primitive.char.html\" title=\"primitive char\"><code>char</code></a>, a slice of <a href=\"primitive.char.html\" title=\"primitive char\"><code>char</code></a>s, or a\nfunction or closure that determines if a character matches.</p>\n<h5 id=\"iterator-behavior\"><a class=\"doc-anchor\" href=\"#iterator-behavior\">§</a>Iterator behavior</h5>\n<p>The returned iterator will be a <a href=\"iter/trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\"><code>DoubleEndedIterator</code></a> if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., <a href=\"primitive.char.html\" title=\"primitive char\"><code>char</code></a>, but not for <code>&amp;str</code>.</p>\n<p>If the pattern allows a reverse search but its results might differ\nfrom a forward search, the <a href=\"primitive.str.html#method.rsplit\" title=\"method str::rsplit\"><code>rsplit</code></a> method can be used.</p>\n<h5 id=\"examples-29\"><a class=\"doc-anchor\" href=\"#examples-29\">§</a>Examples</h5>\n<p>Simple patterns:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">\"Mary had a little lamb\"</span>.split(<span class=\"string\">' '</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"Mary\"</span>, <span class=\"string\">\"had\"</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"little\"</span>, <span class=\"string\">\"lamb\"</span>]);\n\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">\"\"</span>.split(<span class=\"string\">'X'</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"\"</span>]);\n\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">\"lionXXtigerXleopard\"</span>.split(<span class=\"string\">'X'</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"lion\"</span>, <span class=\"string\">\"\"</span>, <span class=\"string\">\"tiger\"</span>, <span class=\"string\">\"leopard\"</span>]);\n\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">\"lion::tiger::leopard\"</span>.split(<span class=\"string\">\"::\"</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"lion\"</span>, <span class=\"string\">\"tiger\"</span>, <span class=\"string\">\"leopard\"</span>]);\n\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">\"abc1def2ghi\"</span>.split(char::is_numeric).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"abc\"</span>, <span class=\"string\">\"def\"</span>, <span class=\"string\">\"ghi\"</span>]);\n\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">\"lionXtigerXleopard\"</span>.split(char::is_uppercase).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"lion\"</span>, <span class=\"string\">\"tiger\"</span>, <span class=\"string\">\"leopard\"</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v:+Vec%3C%26str%3E+=+%22Mary+had+a+little+lamb%22.split('+').collect();%0A++++assert_eq!(v,+%5B%22Mary%22,+%22had%22,+%22a%22,+%22little%22,+%22lamb%22%5D);%0A++++%0A++++let+v:+Vec%3C%26str%3E+=+%22%22.split('X').collect();%0A++++assert_eq!(v,+%5B%22%22%5D);%0A++++%0A++++let+v:+Vec%3C%26str%3E+=+%22lionXXtigerXleopard%22.split('X').collect();%0A++++assert_eq!(v,+%5B%22lion%22,+%22%22,+%22tiger%22,+%22leopard%22%5D);%0A++++%0A++++let+v:+Vec%3C%26str%3E+=+%22lion::tiger::leopard%22.split(%22::%22).collect();%0A++++assert_eq!(v,+%5B%22lion%22,+%22tiger%22,+%22leopard%22%5D);%0A++++%0A++++let+v:+Vec%3C%26str%3E+=+%22abc1def2ghi%22.split(char::is_numeric).collect();%0A++++assert_eq!(v,+%5B%22abc%22,+%22def%22,+%22ghi%22%5D);%0A++++%0A++++let+v:+Vec%3C%26str%3E+=+%22lionXtigerXleopard%22.split(char::is_uppercase).collect();%0A++++assert_eq!(v,+%5B%22lion%22,+%22tiger%22,+%22leopard%22%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>If the pattern is a slice of chars, split on each occurrence of any of the characters:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">\"2020-11-03 23:59\"</span>.split(<span class=\"kw-2\">&amp;</span>[<span class=\"string\">'-'</span>, <span class=\"string\">' '</span>, <span class=\"string\">':'</span>, <span class=\"string\">'@'</span>][..]).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"2020\"</span>, <span class=\"string\">\"11\"</span>, <span class=\"string\">\"03\"</span>, <span class=\"string\">\"23\"</span>, <span class=\"string\">\"59\"</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v:+Vec%3C%26str%3E+=+%222020-11-03+23:59%22.split(%26%5B'-',+'+',+':',+'%40'%5D%5B..%5D).collect();%0A++++assert_eq!(v,+%5B%222020%22,+%2211%22,+%2203%22,+%2223%22,+%2259%22%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>A more complex pattern, using a closure:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">\"abc1defXghi\"</span>.split(|c| c == <span class=\"string\">'1' </span>|| c == <span class=\"string\">'X'</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"abc\"</span>, <span class=\"string\">\"def\"</span>, <span class=\"string\">\"ghi\"</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v:+Vec%3C%26str%3E+=+%22abc1defXghi%22.split(%7Cc%7C+c+==+'1'+%7C%7C+c+==+'X').collect();%0A++++assert_eq!(v,+%5B%22abc%22,+%22def%22,+%22ghi%22%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>If a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"string\">\"||||a||b|c\"</span>.to_string();\n<span class=\"kw\">let </span>d: Vec&lt;<span class=\"kw\">_</span>&gt; = x.split(<span class=\"string\">'|'</span>).collect();\n\n<span class=\"macro\">assert_eq!</span>(d, <span class=\"kw-2\">&amp;</span>[<span class=\"string\">\"\"</span>, <span class=\"string\">\"\"</span>, <span class=\"string\">\"\"</span>, <span class=\"string\">\"\"</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+%22%7C%7C%7C%7Ca%7C%7Cb%7Cc%22.to_string();%0A++++let+d:+Vec%3C_%3E+=+x.split('%7C').collect();%0A++++%0A++++assert_eq!(d,+%26%5B%22%22,+%22%22,+%22%22,+%22%22,+%22a%22,+%22%22,+%22b%22,+%22c%22%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Contiguous separators are separated by the empty string.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"string\">\"(///)\"</span>.to_string();\n<span class=\"kw\">let </span>d: Vec&lt;<span class=\"kw\">_</span>&gt; = x.split(<span class=\"string\">'/'</span>).collect();\n\n<span class=\"macro\">assert_eq!</span>(d, <span class=\"kw-2\">&amp;</span>[<span class=\"string\">\"(\"</span>, <span class=\"string\">\"\"</span>, <span class=\"string\">\"\"</span>, <span class=\"string\">\")\"</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+%22(///)%22.to_string();%0A++++let+d:+Vec%3C_%3E+=+x.split('/').collect();%0A++++%0A++++assert_eq!(d,+%26%5B%22(%22,+%22%22,+%22%22,+%22)%22%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Separators at the start or end of a string are neighbored\nby empty strings.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>d: Vec&lt;<span class=\"kw\">_</span>&gt; = <span class=\"string\">\"010\"</span>.split(<span class=\"string\">\"0\"</span>).collect();\n<span class=\"macro\">assert_eq!</span>(d, <span class=\"kw-2\">&amp;</span>[<span class=\"string\">\"\"</span>, <span class=\"string\">\"1\"</span>, <span class=\"string\">\"\"</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+d:+Vec%3C_%3E+=+%22010%22.split(%220%22).collect();%0A++++assert_eq!(d,+%26%5B%22%22,+%221%22,+%22%22%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>When the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>f: Vec&lt;<span class=\"kw\">_</span>&gt; = <span class=\"string\">\"rust\"</span>.split(<span class=\"string\">\"\"</span>).collect();\n<span class=\"macro\">assert_eq!</span>(f, <span class=\"kw-2\">&amp;</span>[<span class=\"string\">\"\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"string\">\"u\"</span>, <span class=\"string\">\"s\"</span>, <span class=\"string\">\"t\"</span>, <span class=\"string\">\"\"</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+f:+Vec%3C_%3E+=+%22rust%22.split(%22%22).collect();%0A++++assert_eq!(f,+%26%5B%22%22,+%22r%22,+%22u%22,+%22s%22,+%22t%22,+%22%22%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Contiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"string\">\"    a  b c\"</span>.to_string();\n<span class=\"kw\">let </span>d: Vec&lt;<span class=\"kw\">_</span>&gt; = x.split(<span class=\"string\">' '</span>).collect();\n\n<span class=\"macro\">assert_eq!</span>(d, <span class=\"kw-2\">&amp;</span>[<span class=\"string\">\"\"</span>, <span class=\"string\">\"\"</span>, <span class=\"string\">\"\"</span>, <span class=\"string\">\"\"</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+%22++++a++b+c%22.to_string();%0A++++let+d:+Vec%3C_%3E+=+x.split('+').collect();%0A++++%0A++++assert_eq!(d,+%26%5B%22%22,+%22%22,+%22%22,+%22%22,+%22a%22,+%22%22,+%22b%22,+%22c%22%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>It does <em>not</em> give you:</p>\n\n<div class=\"example-wrap ignore\"><a href=\"#\" class=\"tooltip\" title=\"This example is not tested\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(d, <span class=\"kw-2\">&amp;</span>[<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(d,+%26%5B%22a%22,+%22b%22,+%22c%22%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Use <a href=\"primitive.str.html#method.split_whitespace\" title=\"method str::split_whitespace\"><code>split_whitespace</code></a> for this behavior.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.split_inclusive\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.51.0\">1.51.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#1469\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.split_inclusive\" class=\"fn\">split_inclusive</a>&lt;'a, P&gt;(&amp;'a self, pat: P) -&gt; <a class=\"struct\" href=\"str/struct.SplitInclusive.html\" title=\"struct std::str::SplitInclusive\">SplitInclusive</a>&lt;'a, P&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"SplitInclusive<'a, P>\">ⓘ</a><div class=\"where\">where\n    P: <a class=\"trait\" href=\"str/pattern/trait.Pattern.html\" title=\"trait std::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,</div></h4></section></summary><div class=\"docblock\"><p>An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n<code>split</code> in that <code>split_inclusive</code> leaves the matched part as the\nterminator of the substring.</p>\n<p>The <a href=\"str/pattern/index.html\" title=\"mod std::str::pattern\">pattern</a> can be a <code>&amp;str</code>, <a href=\"primitive.char.html\" title=\"primitive char\"><code>char</code></a>, a slice of <a href=\"primitive.char.html\" title=\"primitive char\"><code>char</code></a>s, or a\nfunction or closure that determines if a character matches.</p>\n<h5 id=\"examples-30\"><a class=\"doc-anchor\" href=\"#examples-30\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">\"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    </span>.split_inclusive(<span class=\"string\">'\\n'</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"Mary had a little lamb\\n\"</span>, <span class=\"string\">\"little lamb\\n\"</span>, <span class=\"string\">\"little lamb.\"</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v:+Vec%3C%26str%3E+=+%22Mary+had+a+little+lamb%5Cnlittle+lamb%5Cnlittle+lamb.%22%0A++++++++.split_inclusive('%5Cn').collect();%0A++++assert_eq!(v,+%5B%22Mary+had+a+little+lamb%5Cn%22,+%22little+lamb%5Cn%22,+%22little+lamb.%22%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>If the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">\"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    </span>.split_inclusive(<span class=\"string\">'\\n'</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"Mary had a little lamb\\n\"</span>, <span class=\"string\">\"little lamb\\n\"</span>, <span class=\"string\">\"little lamb.\\n\"</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v:+Vec%3C%26str%3E+=+%22Mary+had+a+little+lamb%5Cnlittle+lamb%5Cnlittle+lamb.%5Cn%22%0A++++++++.split_inclusive('%5Cn').collect();%0A++++assert_eq!(v,+%5B%22Mary+had+a+little+lamb%5Cn%22,+%22little+lamb%5Cn%22,+%22little+lamb.%5Cn%22%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.rsplit\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#1524-1526\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.rsplit\" class=\"fn\">rsplit</a>&lt;'a, P&gt;(&amp;'a self, pat: P) -&gt; <a class=\"struct\" href=\"str/struct.RSplit.html\" title=\"struct std::str::RSplit\">RSplit</a>&lt;'a, P&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"RSplit<'a, P>\">ⓘ</a><div class=\"where\">where\n    P: <a class=\"trait\" href=\"str/pattern/trait.Pattern.html\" title=\"trait std::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,\n    &lt;P as <a class=\"trait\" href=\"str/pattern/trait.Pattern.html\" title=\"trait std::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"str/pattern/trait.Pattern.html#associatedtype.Searcher\" title=\"type std::str::pattern::Pattern::Searcher\">Searcher</a>: <a class=\"trait\" href=\"str/pattern/trait.ReverseSearcher.html\" title=\"trait std::str::pattern::ReverseSearcher\">ReverseSearcher</a>&lt;'a&gt;,</div></h4></section></summary><div class=\"docblock\"><p>An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.</p>\n<p>The <a href=\"str/pattern/index.html\" title=\"mod std::str::pattern\">pattern</a> can be a <code>&amp;str</code>, <a href=\"primitive.char.html\" title=\"primitive char\"><code>char</code></a>, a slice of <a href=\"primitive.char.html\" title=\"primitive char\"><code>char</code></a>s, or a\nfunction or closure that determines if a character matches.</p>\n<h5 id=\"iterator-behavior-1\"><a class=\"doc-anchor\" href=\"#iterator-behavior-1\">§</a>Iterator behavior</h5>\n<p>The returned iterator requires that the pattern supports a reverse\nsearch, and it will be a <a href=\"iter/trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\"><code>DoubleEndedIterator</code></a> if a forward/reverse\nsearch yields the same elements.</p>\n<p>For iterating from the front, the <a href=\"primitive.str.html#method.split\" title=\"method str::split\"><code>split</code></a> method can be used.</p>\n<h5 id=\"examples-31\"><a class=\"doc-anchor\" href=\"#examples-31\">§</a>Examples</h5>\n<p>Simple patterns:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">\"Mary had a little lamb\"</span>.rsplit(<span class=\"string\">' '</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"lamb\"</span>, <span class=\"string\">\"little\"</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"had\"</span>, <span class=\"string\">\"Mary\"</span>]);\n\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">\"\"</span>.rsplit(<span class=\"string\">'X'</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"\"</span>]);\n\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">\"lionXXtigerXleopard\"</span>.rsplit(<span class=\"string\">'X'</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"leopard\"</span>, <span class=\"string\">\"tiger\"</span>, <span class=\"string\">\"\"</span>, <span class=\"string\">\"lion\"</span>]);\n\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">\"lion::tiger::leopard\"</span>.rsplit(<span class=\"string\">\"::\"</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"leopard\"</span>, <span class=\"string\">\"tiger\"</span>, <span class=\"string\">\"lion\"</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v:+Vec%3C%26str%3E+=+%22Mary+had+a+little+lamb%22.rsplit('+').collect();%0A++++assert_eq!(v,+%5B%22lamb%22,+%22little%22,+%22a%22,+%22had%22,+%22Mary%22%5D);%0A++++%0A++++let+v:+Vec%3C%26str%3E+=+%22%22.rsplit('X').collect();%0A++++assert_eq!(v,+%5B%22%22%5D);%0A++++%0A++++let+v:+Vec%3C%26str%3E+=+%22lionXXtigerXleopard%22.rsplit('X').collect();%0A++++assert_eq!(v,+%5B%22leopard%22,+%22tiger%22,+%22%22,+%22lion%22%5D);%0A++++%0A++++let+v:+Vec%3C%26str%3E+=+%22lion::tiger::leopard%22.rsplit(%22::%22).collect();%0A++++assert_eq!(v,+%5B%22leopard%22,+%22tiger%22,+%22lion%22%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>A more complex pattern, using a closure:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">\"abc1defXghi\"</span>.rsplit(|c| c == <span class=\"string\">'1' </span>|| c == <span class=\"string\">'X'</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"ghi\"</span>, <span class=\"string\">\"def\"</span>, <span class=\"string\">\"abc\"</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v:+Vec%3C%26str%3E+=+%22abc1defXghi%22.rsplit(%7Cc%7C+c+==+'1'+%7C%7C+c+==+'X').collect();%0A++++assert_eq!(v,+%5B%22ghi%22,+%22def%22,+%22abc%22%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.split_terminator\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#1573\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.split_terminator\" class=\"fn\">split_terminator</a>&lt;'a, P&gt;(&amp;'a self, pat: P) -&gt; <a class=\"struct\" href=\"str/struct.SplitTerminator.html\" title=\"struct std::str::SplitTerminator\">SplitTerminator</a>&lt;'a, P&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"SplitTerminator<'a, P>\">ⓘ</a><div class=\"where\">where\n    P: <a class=\"trait\" href=\"str/pattern/trait.Pattern.html\" title=\"trait std::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,</div></h4></section></summary><div class=\"docblock\"><p>An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.</p>\n<p>The <a href=\"str/pattern/index.html\" title=\"mod std::str::pattern\">pattern</a> can be a <code>&amp;str</code>, <a href=\"primitive.char.html\" title=\"primitive char\"><code>char</code></a>, a slice of <a href=\"primitive.char.html\" title=\"primitive char\"><code>char</code></a>s, or a\nfunction or closure that determines if a character matches.</p>\n<p>Equivalent to <a href=\"primitive.str.html#method.split\" title=\"method str::split\"><code>split</code></a>, except that the trailing substring\nis skipped if empty.</p>\n<p>This method can be used for string data that is <em>terminated</em>,\nrather than <em>separated</em> by a pattern.</p>\n<h5 id=\"iterator-behavior-2\"><a class=\"doc-anchor\" href=\"#iterator-behavior-2\">§</a>Iterator behavior</h5>\n<p>The returned iterator will be a <a href=\"iter/trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\"><code>DoubleEndedIterator</code></a> if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., <a href=\"primitive.char.html\" title=\"primitive char\"><code>char</code></a>, but not for <code>&amp;str</code>.</p>\n<p>If the pattern allows a reverse search but its results might differ\nfrom a forward search, the <a href=\"primitive.str.html#method.rsplit_terminator\" title=\"method str::rsplit_terminator\"><code>rsplit_terminator</code></a> method can be used.</p>\n<h5 id=\"examples-32\"><a class=\"doc-anchor\" href=\"#examples-32\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">\"A.B.\"</span>.split_terminator(<span class=\"string\">'.'</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"A\"</span>, <span class=\"string\">\"B\"</span>]);\n\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">\"A..B..\"</span>.split_terminator(<span class=\"string\">\".\"</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"A\"</span>, <span class=\"string\">\"\"</span>, <span class=\"string\">\"B\"</span>, <span class=\"string\">\"\"</span>]);\n\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">\"A.B:C.D\"</span>.split_terminator(<span class=\"kw-2\">&amp;</span>[<span class=\"string\">'.'</span>, <span class=\"string\">':'</span>][..]).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"A\"</span>, <span class=\"string\">\"B\"</span>, <span class=\"string\">\"C\"</span>, <span class=\"string\">\"D\"</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v:+Vec%3C%26str%3E+=+%22A.B.%22.split_terminator('.').collect();%0A++++assert_eq!(v,+%5B%22A%22,+%22B%22%5D);%0A++++%0A++++let+v:+Vec%3C%26str%3E+=+%22A..B..%22.split_terminator(%22.%22).collect();%0A++++assert_eq!(v,+%5B%22A%22,+%22%22,+%22B%22,+%22%22%5D);%0A++++%0A++++let+v:+Vec%3C%26str%3E+=+%22A.B:C.D%22.split_terminator(%26%5B'.',+':'%5D%5B..%5D).collect();%0A++++assert_eq!(v,+%5B%22A%22,+%22B%22,+%22C%22,+%22D%22%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.rsplit_terminator\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#1619-1621\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.rsplit_terminator\" class=\"fn\">rsplit_terminator</a>&lt;'a, P&gt;(&amp;'a self, pat: P) -&gt; <a class=\"struct\" href=\"str/struct.RSplitTerminator.html\" title=\"struct std::str::RSplitTerminator\">RSplitTerminator</a>&lt;'a, P&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"RSplitTerminator<'a, P>\">ⓘ</a><div class=\"where\">where\n    P: <a class=\"trait\" href=\"str/pattern/trait.Pattern.html\" title=\"trait std::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,\n    &lt;P as <a class=\"trait\" href=\"str/pattern/trait.Pattern.html\" title=\"trait std::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"str/pattern/trait.Pattern.html#associatedtype.Searcher\" title=\"type std::str::pattern::Pattern::Searcher\">Searcher</a>: <a class=\"trait\" href=\"str/pattern/trait.ReverseSearcher.html\" title=\"trait std::str::pattern::ReverseSearcher\">ReverseSearcher</a>&lt;'a&gt;,</div></h4></section></summary><div class=\"docblock\"><p>An iterator over substrings of <code>self</code>, separated by characters\nmatched by a pattern and yielded in reverse order.</p>\n<p>The <a href=\"str/pattern/index.html\" title=\"mod std::str::pattern\">pattern</a> can be a <code>&amp;str</code>, <a href=\"primitive.char.html\" title=\"primitive char\"><code>char</code></a>, a slice of <a href=\"primitive.char.html\" title=\"primitive char\"><code>char</code></a>s, or a\nfunction or closure that determines if a character matches.</p>\n<p>Equivalent to <a href=\"primitive.str.html#method.split\" title=\"method str::split\"><code>split</code></a>, except that the trailing substring is\nskipped if empty.</p>\n<p>This method can be used for string data that is <em>terminated</em>,\nrather than <em>separated</em> by a pattern.</p>\n<h5 id=\"iterator-behavior-3\"><a class=\"doc-anchor\" href=\"#iterator-behavior-3\">§</a>Iterator behavior</h5>\n<p>The returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.</p>\n<p>For iterating from the front, the <a href=\"primitive.str.html#method.split_terminator\" title=\"method str::split_terminator\"><code>split_terminator</code></a> method can be\nused.</p>\n<h5 id=\"examples-33\"><a class=\"doc-anchor\" href=\"#examples-33\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">\"A.B.\"</span>.rsplit_terminator(<span class=\"string\">'.'</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"B\"</span>, <span class=\"string\">\"A\"</span>]);\n\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">\"A..B..\"</span>.rsplit_terminator(<span class=\"string\">\".\"</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"\"</span>, <span class=\"string\">\"B\"</span>, <span class=\"string\">\"\"</span>, <span class=\"string\">\"A\"</span>]);\n\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">\"A.B:C.D\"</span>.rsplit_terminator(<span class=\"kw-2\">&amp;</span>[<span class=\"string\">'.'</span>, <span class=\"string\">':'</span>][..]).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"D\"</span>, <span class=\"string\">\"C\"</span>, <span class=\"string\">\"B\"</span>, <span class=\"string\">\"A\"</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v:+Vec%3C%26str%3E+=+%22A.B.%22.rsplit_terminator('.').collect();%0A++++assert_eq!(v,+%5B%22B%22,+%22A%22%5D);%0A++++%0A++++let+v:+Vec%3C%26str%3E+=+%22A..B..%22.rsplit_terminator(%22.%22).collect();%0A++++assert_eq!(v,+%5B%22%22,+%22B%22,+%22%22,+%22A%22%5D);%0A++++%0A++++let+v:+Vec%3C%26str%3E+=+%22A.B:C.D%22.rsplit_terminator(%26%5B'.',+':'%5D%5B..%5D).collect();%0A++++assert_eq!(v,+%5B%22D%22,+%22C%22,+%22B%22,+%22A%22%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.splitn\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#1674\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.splitn\" class=\"fn\">splitn</a>&lt;'a, P&gt;(&amp;'a self, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>, pat: P) -&gt; <a class=\"struct\" href=\"str/struct.SplitN.html\" title=\"struct std::str::SplitN\">SplitN</a>&lt;'a, P&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"SplitN<'a, P>\">ⓘ</a><div class=\"where\">where\n    P: <a class=\"trait\" href=\"str/pattern/trait.Pattern.html\" title=\"trait std::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,</div></h4></section></summary><div class=\"docblock\"><p>An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most <code>n</code> items.</p>\n<p>If <code>n</code> substrings are returned, the last substring (the <code>n</code>th substring)\nwill contain the remainder of the string.</p>\n<p>The <a href=\"str/pattern/index.html\" title=\"mod std::str::pattern\">pattern</a> can be a <code>&amp;str</code>, <a href=\"primitive.char.html\" title=\"primitive char\"><code>char</code></a>, a slice of <a href=\"primitive.char.html\" title=\"primitive char\"><code>char</code></a>s, or a\nfunction or closure that determines if a character matches.</p>\n<h5 id=\"iterator-behavior-4\"><a class=\"doc-anchor\" href=\"#iterator-behavior-4\">§</a>Iterator behavior</h5>\n<p>The returned iterator will not be double ended, because it is\nnot efficient to support.</p>\n<p>If the pattern allows a reverse search, the <a href=\"primitive.str.html#method.rsplitn\" title=\"method str::rsplitn\"><code>rsplitn</code></a> method can be\nused.</p>\n<h5 id=\"examples-34\"><a class=\"doc-anchor\" href=\"#examples-34\">§</a>Examples</h5>\n<p>Simple patterns:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">\"Mary had a little lambda\"</span>.splitn(<span class=\"number\">3</span>, <span class=\"string\">' '</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"Mary\"</span>, <span class=\"string\">\"had\"</span>, <span class=\"string\">\"a little lambda\"</span>]);\n\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">\"lionXXtigerXleopard\"</span>.splitn(<span class=\"number\">3</span>, <span class=\"string\">\"X\"</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"lion\"</span>, <span class=\"string\">\"\"</span>, <span class=\"string\">\"tigerXleopard\"</span>]);\n\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">\"abcXdef\"</span>.splitn(<span class=\"number\">1</span>, <span class=\"string\">'X'</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"abcXdef\"</span>]);\n\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">\"\"</span>.splitn(<span class=\"number\">1</span>, <span class=\"string\">'X'</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"\"</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v:+Vec%3C%26str%3E+=+%22Mary+had+a+little+lambda%22.splitn(3,+'+').collect();%0A++++assert_eq!(v,+%5B%22Mary%22,+%22had%22,+%22a+little+lambda%22%5D);%0A++++%0A++++let+v:+Vec%3C%26str%3E+=+%22lionXXtigerXleopard%22.splitn(3,+%22X%22).collect();%0A++++assert_eq!(v,+%5B%22lion%22,+%22%22,+%22tigerXleopard%22%5D);%0A++++%0A++++let+v:+Vec%3C%26str%3E+=+%22abcXdef%22.splitn(1,+'X').collect();%0A++++assert_eq!(v,+%5B%22abcXdef%22%5D);%0A++++%0A++++let+v:+Vec%3C%26str%3E+=+%22%22.splitn(1,+'X').collect();%0A++++assert_eq!(v,+%5B%22%22%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>A more complex pattern, using a closure:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">\"abc1defXghi\"</span>.splitn(<span class=\"number\">2</span>, |c| c == <span class=\"string\">'1' </span>|| c == <span class=\"string\">'X'</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"abc\"</span>, <span class=\"string\">\"defXghi\"</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v:+Vec%3C%26str%3E+=+%22abc1defXghi%22.splitn(2,+%7Cc%7C+c+==+'1'+%7C%7C+c+==+'X').collect();%0A++++assert_eq!(v,+%5B%22abc%22,+%22defXghi%22%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.rsplitn\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#1723-1725\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.rsplitn\" class=\"fn\">rsplitn</a>&lt;'a, P&gt;(&amp;'a self, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>, pat: P) -&gt; <a class=\"struct\" href=\"str/struct.RSplitN.html\" title=\"struct std::str::RSplitN\">RSplitN</a>&lt;'a, P&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"RSplitN<'a, P>\">ⓘ</a><div class=\"where\">where\n    P: <a class=\"trait\" href=\"str/pattern/trait.Pattern.html\" title=\"trait std::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,\n    &lt;P as <a class=\"trait\" href=\"str/pattern/trait.Pattern.html\" title=\"trait std::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"str/pattern/trait.Pattern.html#associatedtype.Searcher\" title=\"type std::str::pattern::Pattern::Searcher\">Searcher</a>: <a class=\"trait\" href=\"str/pattern/trait.ReverseSearcher.html\" title=\"trait std::str::pattern::ReverseSearcher\">ReverseSearcher</a>&lt;'a&gt;,</div></h4></section></summary><div class=\"docblock\"><p>An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most <code>n</code> items.</p>\n<p>If <code>n</code> substrings are returned, the last substring (the <code>n</code>th substring)\nwill contain the remainder of the string.</p>\n<p>The <a href=\"str/pattern/index.html\" title=\"mod std::str::pattern\">pattern</a> can be a <code>&amp;str</code>, <a href=\"primitive.char.html\" title=\"primitive char\"><code>char</code></a>, a slice of <a href=\"primitive.char.html\" title=\"primitive char\"><code>char</code></a>s, or a\nfunction or closure that determines if a character matches.</p>\n<h5 id=\"iterator-behavior-5\"><a class=\"doc-anchor\" href=\"#iterator-behavior-5\">§</a>Iterator behavior</h5>\n<p>The returned iterator will not be double ended, because it is not\nefficient to support.</p>\n<p>For splitting from the front, the <a href=\"primitive.str.html#method.splitn\" title=\"method str::splitn\"><code>splitn</code></a> method can be used.</p>\n<h5 id=\"examples-35\"><a class=\"doc-anchor\" href=\"#examples-35\">§</a>Examples</h5>\n<p>Simple patterns:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">\"Mary had a little lamb\"</span>.rsplitn(<span class=\"number\">3</span>, <span class=\"string\">' '</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"lamb\"</span>, <span class=\"string\">\"little\"</span>, <span class=\"string\">\"Mary had a\"</span>]);\n\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">\"lionXXtigerXleopard\"</span>.rsplitn(<span class=\"number\">3</span>, <span class=\"string\">'X'</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"leopard\"</span>, <span class=\"string\">\"tiger\"</span>, <span class=\"string\">\"lionX\"</span>]);\n\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">\"lion::tiger::leopard\"</span>.rsplitn(<span class=\"number\">2</span>, <span class=\"string\">\"::\"</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"leopard\"</span>, <span class=\"string\">\"lion::tiger\"</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v:+Vec%3C%26str%3E+=+%22Mary+had+a+little+lamb%22.rsplitn(3,+'+').collect();%0A++++assert_eq!(v,+%5B%22lamb%22,+%22little%22,+%22Mary+had+a%22%5D);%0A++++%0A++++let+v:+Vec%3C%26str%3E+=+%22lionXXtigerXleopard%22.rsplitn(3,+'X').collect();%0A++++assert_eq!(v,+%5B%22leopard%22,+%22tiger%22,+%22lionX%22%5D);%0A++++%0A++++let+v:+Vec%3C%26str%3E+=+%22lion::tiger::leopard%22.rsplitn(2,+%22::%22).collect();%0A++++assert_eq!(v,+%5B%22leopard%22,+%22lion::tiger%22%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>A more complex pattern, using a closure:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">\"abc1defXghi\"</span>.rsplitn(<span class=\"number\">2</span>, |c| c == <span class=\"string\">'1' </span>|| c == <span class=\"string\">'X'</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"ghi\"</span>, <span class=\"string\">\"abc1def\"</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v:+Vec%3C%26str%3E+=+%22abc1defXghi%22.rsplitn(2,+%7Cc%7C+c+==+'1'+%7C%7C+c+==+'X').collect();%0A++++assert_eq!(v,+%5B%22ghi%22,+%22abc1def%22%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.split_once\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.52.0\">1.52.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#1743\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.split_once\" class=\"fn\">split_once</a>&lt;'a, P&gt;(&amp;'a self, delimiter: P) -&gt; <a class=\"enum\" href=\"option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;(&amp;'a <a class=\"primitive\" href=\"primitive.str.html\">str</a>, &amp;'a <a class=\"primitive\" href=\"primitive.str.html\">str</a>)&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"str/pattern/trait.Pattern.html\" title=\"trait std::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.</p>\n<h5 id=\"examples-36\"><a class=\"doc-anchor\" href=\"#examples-36\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"cfg\"</span>.split_once(<span class=\"string\">'='</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"cfg=\"</span>.split_once(<span class=\"string\">'='</span>), <span class=\"prelude-val\">Some</span>((<span class=\"string\">\"cfg\"</span>, <span class=\"string\">\"\"</span>)));\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"cfg=foo\"</span>.split_once(<span class=\"string\">'='</span>), <span class=\"prelude-val\">Some</span>((<span class=\"string\">\"cfg\"</span>, <span class=\"string\">\"foo\"</span>)));\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"cfg=foo=bar\"</span>.split_once(<span class=\"string\">'='</span>), <span class=\"prelude-val\">Some</span>((<span class=\"string\">\"cfg\"</span>, <span class=\"string\">\"foo=bar\"</span>)));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(%22cfg%22.split_once('='),+None);%0A++++assert_eq!(%22cfg=%22.split_once('='),+Some((%22cfg%22,+%22%22)));%0A++++assert_eq!(%22cfg=foo%22.split_once('='),+Some((%22cfg%22,+%22foo%22)));%0A++++assert_eq!(%22cfg=foo=bar%22.split_once('='),+Some((%22cfg%22,+%22foo=bar%22)));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.rsplit_once\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.52.0\">1.52.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#1761-1763\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.rsplit_once\" class=\"fn\">rsplit_once</a>&lt;'a, P&gt;(&amp;'a self, delimiter: P) -&gt; <a class=\"enum\" href=\"option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;(&amp;'a <a class=\"primitive\" href=\"primitive.str.html\">str</a>, &amp;'a <a class=\"primitive\" href=\"primitive.str.html\">str</a>)&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"str/pattern/trait.Pattern.html\" title=\"trait std::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,\n    &lt;P as <a class=\"trait\" href=\"str/pattern/trait.Pattern.html\" title=\"trait std::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"str/pattern/trait.Pattern.html#associatedtype.Searcher\" title=\"type std::str::pattern::Pattern::Searcher\">Searcher</a>: <a class=\"trait\" href=\"str/pattern/trait.ReverseSearcher.html\" title=\"trait std::str::pattern::ReverseSearcher\">ReverseSearcher</a>&lt;'a&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.</p>\n<h5 id=\"examples-37\"><a class=\"doc-anchor\" href=\"#examples-37\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"cfg\"</span>.rsplit_once(<span class=\"string\">'='</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"cfg=foo\"</span>.rsplit_once(<span class=\"string\">'='</span>), <span class=\"prelude-val\">Some</span>((<span class=\"string\">\"cfg\"</span>, <span class=\"string\">\"foo\"</span>)));\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"cfg=foo=bar\"</span>.rsplit_once(<span class=\"string\">'='</span>), <span class=\"prelude-val\">Some</span>((<span class=\"string\">\"cfg=foo\"</span>, <span class=\"string\">\"bar\"</span>)));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(%22cfg%22.rsplit_once('='),+None);%0A++++assert_eq!(%22cfg=foo%22.rsplit_once('='),+Some((%22cfg%22,+%22foo%22)));%0A++++assert_eq!(%22cfg=foo=bar%22.rsplit_once('='),+Some((%22cfg=foo%22,+%22bar%22)));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.matches\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0\">1.2.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#1801\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.matches\" class=\"fn\">matches</a>&lt;'a, P&gt;(&amp;'a self, pat: P) -&gt; <a class=\"struct\" href=\"str/struct.Matches.html\" title=\"struct std::str::Matches\">Matches</a>&lt;'a, P&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Matches<'a, P>\">ⓘ</a><div class=\"where\">where\n    P: <a class=\"trait\" href=\"str/pattern/trait.Pattern.html\" title=\"trait std::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,</div></h4></section></summary><div class=\"docblock\"><p>An iterator over the disjoint matches of a pattern within the given string\nslice.</p>\n<p>The <a href=\"str/pattern/index.html\" title=\"mod std::str::pattern\">pattern</a> can be a <code>&amp;str</code>, <a href=\"primitive.char.html\" title=\"primitive char\"><code>char</code></a>, a slice of <a href=\"primitive.char.html\" title=\"primitive char\"><code>char</code></a>s, or a\nfunction or closure that determines if a character matches.</p>\n<h5 id=\"iterator-behavior-6\"><a class=\"doc-anchor\" href=\"#iterator-behavior-6\">§</a>Iterator behavior</h5>\n<p>The returned iterator will be a <a href=\"iter/trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\"><code>DoubleEndedIterator</code></a> if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., <a href=\"primitive.char.html\" title=\"primitive char\"><code>char</code></a>, but not for <code>&amp;str</code>.</p>\n<p>If the pattern allows a reverse search but its results might differ\nfrom a forward search, the <a href=\"primitive.str.html#method.rmatches\" title=\"method str::rmatches\"><code>rmatches</code></a> method can be used.</p>\n<h5 id=\"examples-38\"><a class=\"doc-anchor\" href=\"#examples-38\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">\"abcXXXabcYYYabc\"</span>.matches(<span class=\"string\">\"abc\"</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"abc\"</span>, <span class=\"string\">\"abc\"</span>, <span class=\"string\">\"abc\"</span>]);\n\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">\"1abc2abc3\"</span>.matches(char::is_numeric).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"1\"</span>, <span class=\"string\">\"2\"</span>, <span class=\"string\">\"3\"</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v:+Vec%3C%26str%3E+=+%22abcXXXabcYYYabc%22.matches(%22abc%22).collect();%0A++++assert_eq!(v,+%5B%22abc%22,+%22abc%22,+%22abc%22%5D);%0A++++%0A++++let+v:+Vec%3C%26str%3E+=+%221abc2abc3%22.matches(char::is_numeric).collect();%0A++++assert_eq!(v,+%5B%221%22,+%222%22,+%223%22%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.rmatches\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0\">1.2.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#1835-1837\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.rmatches\" class=\"fn\">rmatches</a>&lt;'a, P&gt;(&amp;'a self, pat: P) -&gt; <a class=\"struct\" href=\"str/struct.RMatches.html\" title=\"struct std::str::RMatches\">RMatches</a>&lt;'a, P&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"RMatches<'a, P>\">ⓘ</a><div class=\"where\">where\n    P: <a class=\"trait\" href=\"str/pattern/trait.Pattern.html\" title=\"trait std::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,\n    &lt;P as <a class=\"trait\" href=\"str/pattern/trait.Pattern.html\" title=\"trait std::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"str/pattern/trait.Pattern.html#associatedtype.Searcher\" title=\"type std::str::pattern::Pattern::Searcher\">Searcher</a>: <a class=\"trait\" href=\"str/pattern/trait.ReverseSearcher.html\" title=\"trait std::str::pattern::ReverseSearcher\">ReverseSearcher</a>&lt;'a&gt;,</div></h4></section></summary><div class=\"docblock\"><p>An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.</p>\n<p>The <a href=\"str/pattern/index.html\" title=\"mod std::str::pattern\">pattern</a> can be a <code>&amp;str</code>, <a href=\"primitive.char.html\" title=\"primitive char\"><code>char</code></a>, a slice of <a href=\"primitive.char.html\" title=\"primitive char\"><code>char</code></a>s, or a\nfunction or closure that determines if a character matches.</p>\n<h5 id=\"iterator-behavior-7\"><a class=\"doc-anchor\" href=\"#iterator-behavior-7\">§</a>Iterator behavior</h5>\n<p>The returned iterator requires that the pattern supports a reverse\nsearch, and it will be a <a href=\"iter/trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\"><code>DoubleEndedIterator</code></a> if a forward/reverse\nsearch yields the same elements.</p>\n<p>For iterating from the front, the <a href=\"primitive.str.html#method.matches\" title=\"method str::matches\"><code>matches</code></a> method can be used.</p>\n<h5 id=\"examples-39\"><a class=\"doc-anchor\" href=\"#examples-39\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">\"abcXXXabcYYYabc\"</span>.rmatches(<span class=\"string\">\"abc\"</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"abc\"</span>, <span class=\"string\">\"abc\"</span>, <span class=\"string\">\"abc\"</span>]);\n\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">\"1abc2abc3\"</span>.rmatches(char::is_numeric).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"3\"</span>, <span class=\"string\">\"2\"</span>, <span class=\"string\">\"1\"</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v:+Vec%3C%26str%3E+=+%22abcXXXabcYYYabc%22.rmatches(%22abc%22).collect();%0A++++assert_eq!(v,+%5B%22abc%22,+%22abc%22,+%22abc%22%5D);%0A++++%0A++++let+v:+Vec%3C%26str%3E+=+%221abc2abc3%22.rmatches(char::is_numeric).collect();%0A++++assert_eq!(v,+%5B%223%22,+%222%22,+%221%22%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.match_indices\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#1879\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.match_indices\" class=\"fn\">match_indices</a>&lt;'a, P&gt;(&amp;'a self, pat: P) -&gt; <a class=\"struct\" href=\"str/struct.MatchIndices.html\" title=\"struct std::str::MatchIndices\">MatchIndices</a>&lt;'a, P&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"MatchIndices<'a, P>\">ⓘ</a><div class=\"where\">where\n    P: <a class=\"trait\" href=\"str/pattern/trait.Pattern.html\" title=\"trait std::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,</div></h4></section></summary><div class=\"docblock\"><p>An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.</p>\n<p>For matches of <code>pat</code> within <code>self</code> that overlap, only the indices\ncorresponding to the first match are returned.</p>\n<p>The <a href=\"str/pattern/index.html\" title=\"mod std::str::pattern\">pattern</a> can be a <code>&amp;str</code>, <a href=\"primitive.char.html\" title=\"primitive char\"><code>char</code></a>, a slice of <a href=\"primitive.char.html\" title=\"primitive char\"><code>char</code></a>s, or a\nfunction or closure that determines if a character matches.</p>\n<h5 id=\"iterator-behavior-8\"><a class=\"doc-anchor\" href=\"#iterator-behavior-8\">§</a>Iterator behavior</h5>\n<p>The returned iterator will be a <a href=\"iter/trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\"><code>DoubleEndedIterator</code></a> if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., <a href=\"primitive.char.html\" title=\"primitive char\"><code>char</code></a>, but not for <code>&amp;str</code>.</p>\n<p>If the pattern allows a reverse search but its results might differ\nfrom a forward search, the <a href=\"primitive.str.html#method.rmatch_indices\" title=\"method str::rmatch_indices\"><code>rmatch_indices</code></a> method can be used.</p>\n<h5 id=\"examples-40\"><a class=\"doc-anchor\" href=\"#examples-40\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw\">_</span>&gt; = <span class=\"string\">\"abcXXXabcYYYabc\"</span>.match_indices(<span class=\"string\">\"abc\"</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [(<span class=\"number\">0</span>, <span class=\"string\">\"abc\"</span>), (<span class=\"number\">6</span>, <span class=\"string\">\"abc\"</span>), (<span class=\"number\">12</span>, <span class=\"string\">\"abc\"</span>)]);\n\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw\">_</span>&gt; = <span class=\"string\">\"1abcabc2\"</span>.match_indices(<span class=\"string\">\"abc\"</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [(<span class=\"number\">1</span>, <span class=\"string\">\"abc\"</span>), (<span class=\"number\">4</span>, <span class=\"string\">\"abc\"</span>)]);\n\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw\">_</span>&gt; = <span class=\"string\">\"ababa\"</span>.match_indices(<span class=\"string\">\"aba\"</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [(<span class=\"number\">0</span>, <span class=\"string\">\"aba\"</span>)]); <span class=\"comment\">// only the first `aba`</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v:+Vec%3C_%3E+=+%22abcXXXabcYYYabc%22.match_indices(%22abc%22).collect();%0A++++assert_eq!(v,+%5B(0,+%22abc%22),+(6,+%22abc%22),+(12,+%22abc%22)%5D);%0A++++%0A++++let+v:+Vec%3C_%3E+=+%221abcabc2%22.match_indices(%22abc%22).collect();%0A++++assert_eq!(v,+%5B(1,+%22abc%22),+(4,+%22abc%22)%5D);%0A++++%0A++++let+v:+Vec%3C_%3E+=+%22ababa%22.match_indices(%22aba%22).collect();%0A++++assert_eq!(v,+%5B(0,+%22aba%22)%5D);+//+only+the+first+%60aba%60%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.rmatch_indices\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#1919-1921\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.rmatch_indices\" class=\"fn\">rmatch_indices</a>&lt;'a, P&gt;(&amp;'a self, pat: P) -&gt; <a class=\"struct\" href=\"str/struct.RMatchIndices.html\" title=\"struct std::str::RMatchIndices\">RMatchIndices</a>&lt;'a, P&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"RMatchIndices<'a, P>\">ⓘ</a><div class=\"where\">where\n    P: <a class=\"trait\" href=\"str/pattern/trait.Pattern.html\" title=\"trait std::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,\n    &lt;P as <a class=\"trait\" href=\"str/pattern/trait.Pattern.html\" title=\"trait std::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"str/pattern/trait.Pattern.html#associatedtype.Searcher\" title=\"type std::str::pattern::Pattern::Searcher\">Searcher</a>: <a class=\"trait\" href=\"str/pattern/trait.ReverseSearcher.html\" title=\"trait std::str::pattern::ReverseSearcher\">ReverseSearcher</a>&lt;'a&gt;,</div></h4></section></summary><div class=\"docblock\"><p>An iterator over the disjoint matches of a pattern within <code>self</code>,\nyielded in reverse order along with the index of the match.</p>\n<p>For matches of <code>pat</code> within <code>self</code> that overlap, only the indices\ncorresponding to the last match are returned.</p>\n<p>The <a href=\"str/pattern/index.html\" title=\"mod std::str::pattern\">pattern</a> can be a <code>&amp;str</code>, <a href=\"primitive.char.html\" title=\"primitive char\"><code>char</code></a>, a slice of <a href=\"primitive.char.html\" title=\"primitive char\"><code>char</code></a>s, or a\nfunction or closure that determines if a character matches.</p>\n<h5 id=\"iterator-behavior-9\"><a class=\"doc-anchor\" href=\"#iterator-behavior-9\">§</a>Iterator behavior</h5>\n<p>The returned iterator requires that the pattern supports a reverse\nsearch, and it will be a <a href=\"iter/trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\"><code>DoubleEndedIterator</code></a> if a forward/reverse\nsearch yields the same elements.</p>\n<p>For iterating from the front, the <a href=\"primitive.str.html#method.match_indices\" title=\"method str::match_indices\"><code>match_indices</code></a> method can be used.</p>\n<h5 id=\"examples-41\"><a class=\"doc-anchor\" href=\"#examples-41\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw\">_</span>&gt; = <span class=\"string\">\"abcXXXabcYYYabc\"</span>.rmatch_indices(<span class=\"string\">\"abc\"</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [(<span class=\"number\">12</span>, <span class=\"string\">\"abc\"</span>), (<span class=\"number\">6</span>, <span class=\"string\">\"abc\"</span>), (<span class=\"number\">0</span>, <span class=\"string\">\"abc\"</span>)]);\n\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw\">_</span>&gt; = <span class=\"string\">\"1abcabc2\"</span>.rmatch_indices(<span class=\"string\">\"abc\"</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [(<span class=\"number\">4</span>, <span class=\"string\">\"abc\"</span>), (<span class=\"number\">1</span>, <span class=\"string\">\"abc\"</span>)]);\n\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw\">_</span>&gt; = <span class=\"string\">\"ababa\"</span>.rmatch_indices(<span class=\"string\">\"aba\"</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [(<span class=\"number\">2</span>, <span class=\"string\">\"aba\"</span>)]); <span class=\"comment\">// only the last `aba`</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v:+Vec%3C_%3E+=+%22abcXXXabcYYYabc%22.rmatch_indices(%22abc%22).collect();%0A++++assert_eq!(v,+%5B(12,+%22abc%22),+(6,+%22abc%22),+(0,+%22abc%22)%5D);%0A++++%0A++++let+v:+Vec%3C_%3E+=+%221abcabc2%22.rmatch_indices(%22abc%22).collect();%0A++++assert_eq!(v,+%5B(4,+%22abc%22),+(1,+%22abc%22)%5D);%0A++++%0A++++let+v:+Vec%3C_%3E+=+%22ababa%22.rmatch_indices(%22aba%22).collect();%0A++++assert_eq!(v,+%5B(2,+%22aba%22)%5D);+//+only+the+last+%60aba%60%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.trim\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#1943\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.trim\" class=\"fn\">trim</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a></h4></section></summary><div class=\"docblock\"><p>Returns a string slice with leading and trailing whitespace removed.</p>\n<p>‘Whitespace’ is defined according to the terms of the Unicode Derived\nCore Property <code>White_Space</code>, which includes newlines.</p>\n<h5 id=\"examples-42\"><a class=\"doc-anchor\" href=\"#examples-42\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">\"\\n Hello\\tworld\\t\\n\"</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"Hello\\tworld\"</span>, s.trim());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s+=+%22%5Cn+Hello%5Ctworld%5Ct%5Cn%22;%0A++++%0A++++assert_eq!(%22Hello%5Ctworld%22,+s.trim());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.trim_start\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.30.0\">1.30.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#1982\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.trim_start\" class=\"fn\">trim_start</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a></h4></section></summary><div class=\"docblock\"><p>Returns a string slice with leading whitespace removed.</p>\n<p>‘Whitespace’ is defined according to the terms of the Unicode Derived\nCore Property <code>White_Space</code>, which includes newlines.</p>\n<h5 id=\"text-directionality\"><a class=\"doc-anchor\" href=\"#text-directionality\">§</a>Text directionality</h5>\n<p>A string is a sequence of bytes. <code>start</code> in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.</p>\n<h5 id=\"examples-43\"><a class=\"doc-anchor\" href=\"#examples-43\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">\"\\n Hello\\tworld\\t\\n\"</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"Hello\\tworld\\t\\n\"</span>, s.trim_start());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s+=+%22%5Cn+Hello%5Ctworld%5Ct%5Cn%22;%0A++++assert_eq!(%22Hello%5Ctworld%5Ct%5Cn%22,+s.trim_start());%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Directionality:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">\"  English  \"</span>;\n<span class=\"macro\">assert!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">'E'</span>) == s.trim_start().chars().next());\n\n<span class=\"kw\">let </span>s = <span class=\"string\">\"  עברית  \"</span>;\n<span class=\"macro\">assert!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">'ע'</span>) == s.trim_start().chars().next());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s+=+%22++English++%22;%0A++++assert!(Some('E')+==+s.trim_start().chars().next());%0A++++%0A++++let+s+=+%22++%D7%A2%D7%91%D7%A8%D7%99%D7%AA++%22;%0A++++assert!(Some('%D7%A2')+==+s.trim_start().chars().next());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.trim_end\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.30.0\">1.30.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#2021\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.trim_end\" class=\"fn\">trim_end</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a></h4></section></summary><div class=\"docblock\"><p>Returns a string slice with trailing whitespace removed.</p>\n<p>‘Whitespace’ is defined according to the terms of the Unicode Derived\nCore Property <code>White_Space</code>, which includes newlines.</p>\n<h5 id=\"text-directionality-1\"><a class=\"doc-anchor\" href=\"#text-directionality-1\">§</a>Text directionality</h5>\n<p>A string is a sequence of bytes. <code>end</code> in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.</p>\n<h5 id=\"examples-44\"><a class=\"doc-anchor\" href=\"#examples-44\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">\"\\n Hello\\tworld\\t\\n\"</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"\\n Hello\\tworld\"</span>, s.trim_end());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s+=+%22%5Cn+Hello%5Ctworld%5Ct%5Cn%22;%0A++++assert_eq!(%22%5Cn+Hello%5Ctworld%22,+s.trim_end());%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Directionality:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">\"  English  \"</span>;\n<span class=\"macro\">assert!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">'h'</span>) == s.trim_end().chars().rev().next());\n\n<span class=\"kw\">let </span>s = <span class=\"string\">\"  עברית  \"</span>;\n<span class=\"macro\">assert!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">'ת'</span>) == s.trim_end().chars().rev().next());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s+=+%22++English++%22;%0A++++assert!(Some('h')+==+s.trim_end().chars().rev().next());%0A++++%0A++++let+s+=+%22++%D7%A2%D7%91%D7%A8%D7%99%D7%AA++%22;%0A++++assert!(Some('%D7%AA')+==+s.trim_end().chars().rev().next());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.trim_left\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#2061\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.trim_left\" class=\"fn\">trim_left</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 1.33.0: superseded by <code>trim_start</code></span></div></span></summary><div class=\"docblock\"><p>Returns a string slice with leading whitespace removed.</p>\n<p>‘Whitespace’ is defined according to the terms of the Unicode Derived\nCore Property <code>White_Space</code>.</p>\n<h5 id=\"text-directionality-2\"><a class=\"doc-anchor\" href=\"#text-directionality-2\">§</a>Text directionality</h5>\n<p>A string is a sequence of bytes. ‘Left’ in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are ‘right to left’ rather than ‘left to right’, this will be\nthe <em>right</em> side, not the left.</p>\n<h5 id=\"examples-45\"><a class=\"doc-anchor\" href=\"#examples-45\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">\" Hello\\tworld\\t\"</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"Hello\\tworld\\t\"</span>, s.trim_left());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s+=+%22+Hello%5Ctworld%5Ct%22;%0A++++%0A++++assert_eq!(%22Hello%5Ctworld%5Ct%22,+s.trim_left());%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Directionality:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">\"  English\"</span>;\n<span class=\"macro\">assert!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">'E'</span>) == s.trim_left().chars().next());\n\n<span class=\"kw\">let </span>s = <span class=\"string\">\"  עברית\"</span>;\n<span class=\"macro\">assert!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">'ע'</span>) == s.trim_left().chars().next());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s+=+%22++English%22;%0A++++assert!(Some('E')+==+s.trim_left().chars().next());%0A++++%0A++++let+s+=+%22++%D7%A2%D7%91%D7%A8%D7%99%D7%AA%22;%0A++++assert!(Some('%D7%A2')+==+s.trim_left().chars().next());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.trim_right\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#2101\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.trim_right\" class=\"fn\">trim_right</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 1.33.0: superseded by <code>trim_end</code></span></div></span></summary><div class=\"docblock\"><p>Returns a string slice with trailing whitespace removed.</p>\n<p>‘Whitespace’ is defined according to the terms of the Unicode Derived\nCore Property <code>White_Space</code>.</p>\n<h5 id=\"text-directionality-3\"><a class=\"doc-anchor\" href=\"#text-directionality-3\">§</a>Text directionality</h5>\n<p>A string is a sequence of bytes. ‘Right’ in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are ‘right to left’ rather than ‘left to right’, this will be\nthe <em>left</em> side, not the right.</p>\n<h5 id=\"examples-46\"><a class=\"doc-anchor\" href=\"#examples-46\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">\" Hello\\tworld\\t\"</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\" Hello\\tworld\"</span>, s.trim_right());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s+=+%22+Hello%5Ctworld%5Ct%22;%0A++++%0A++++assert_eq!(%22+Hello%5Ctworld%22,+s.trim_right());%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Directionality:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">\"English  \"</span>;\n<span class=\"macro\">assert!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">'h'</span>) == s.trim_right().chars().rev().next());\n\n<span class=\"kw\">let </span>s = <span class=\"string\">\"עברית  \"</span>;\n<span class=\"macro\">assert!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">'ת'</span>) == s.trim_right().chars().rev().next());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s+=+%22English++%22;%0A++++assert!(Some('h')+==+s.trim_right().chars().rev().next());%0A++++%0A++++let+s+=+%22%D7%A2%D7%91%D7%A8%D7%99%D7%AA++%22;%0A++++assert!(Some('%D7%AA')+==+s.trim_right().chars().rev().next());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.trim_matches\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#2134-2136\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.trim_matches\" class=\"fn\">trim_matches</a>&lt;'a, P&gt;(&amp;'a self, pat: P) -&gt; &amp;'a <a class=\"primitive\" href=\"primitive.str.html\">str</a><div class=\"where\">where\n    P: <a class=\"trait\" href=\"str/pattern/trait.Pattern.html\" title=\"trait std::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,\n    &lt;P as <a class=\"trait\" href=\"str/pattern/trait.Pattern.html\" title=\"trait std::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"str/pattern/trait.Pattern.html#associatedtype.Searcher\" title=\"type std::str::pattern::Pattern::Searcher\">Searcher</a>: <a class=\"trait\" href=\"str/pattern/trait.DoubleEndedSearcher.html\" title=\"trait std::str::pattern::DoubleEndedSearcher\">DoubleEndedSearcher</a>&lt;'a&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.</p>\n<p>The <a href=\"str/pattern/index.html\" title=\"mod std::str::pattern\">pattern</a> can be a <a href=\"primitive.char.html\" title=\"primitive char\"><code>char</code></a>, a slice of <a href=\"primitive.char.html\" title=\"primitive char\"><code>char</code></a>s, or a function\nor closure that determines if a character matches.</p>\n<h5 id=\"examples-47\"><a class=\"doc-anchor\" href=\"#examples-47\">§</a>Examples</h5>\n<p>Simple patterns:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"11foo1bar11\"</span>.trim_matches(<span class=\"string\">'1'</span>), <span class=\"string\">\"foo1bar\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"123foo1bar123\"</span>.trim_matches(char::is_numeric), <span class=\"string\">\"foo1bar\"</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"kw-2\">&amp;</span>[<span class=\"kw\">_</span>] = <span class=\"kw-2\">&amp;</span>[<span class=\"string\">'1'</span>, <span class=\"string\">'2'</span>];\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"12foo1bar12\"</span>.trim_matches(x), <span class=\"string\">\"foo1bar\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(%2211foo1bar11%22.trim_matches('1'),+%22foo1bar%22);%0A++++assert_eq!(%22123foo1bar123%22.trim_matches(char::is_numeric),+%22foo1bar%22);%0A++++%0A++++let+x:+%26%5B_%5D+=+%26%5B'1',+'2'%5D;%0A++++assert_eq!(%2212foo1bar12%22.trim_matches(x),+%22foo1bar%22);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>A more complex pattern, using a closure:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"1foo1barXX\"</span>.trim_matches(|c| c == <span class=\"string\">'1' </span>|| c == <span class=\"string\">'X'</span>), <span class=\"string\">\"foo1bar\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(%221foo1barXX%22.trim_matches(%7Cc%7C+c+==+'1'+%7C%7C+c+==+'X'),+%22foo1bar%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.trim_start_matches\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.30.0\">1.30.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#2181\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.trim_start_matches\" class=\"fn\">trim_start_matches</a>&lt;'a, P&gt;(&amp;'a self, pat: P) -&gt; &amp;'a <a class=\"primitive\" href=\"primitive.str.html\">str</a><div class=\"where\">where\n    P: <a class=\"trait\" href=\"str/pattern/trait.Pattern.html\" title=\"trait std::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.</p>\n<p>The <a href=\"str/pattern/index.html\" title=\"mod std::str::pattern\">pattern</a> can be a <code>&amp;str</code>, <a href=\"primitive.char.html\" title=\"primitive char\"><code>char</code></a>, a slice of <a href=\"primitive.char.html\" title=\"primitive char\"><code>char</code></a>s, or a\nfunction or closure that determines if a character matches.</p>\n<h5 id=\"text-directionality-4\"><a class=\"doc-anchor\" href=\"#text-directionality-4\">§</a>Text directionality</h5>\n<p>A string is a sequence of bytes. <code>start</code> in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.</p>\n<h5 id=\"examples-48\"><a class=\"doc-anchor\" href=\"#examples-48\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"11foo1bar11\"</span>.trim_start_matches(<span class=\"string\">'1'</span>), <span class=\"string\">\"foo1bar11\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"123foo1bar123\"</span>.trim_start_matches(char::is_numeric), <span class=\"string\">\"foo1bar123\"</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"kw-2\">&amp;</span>[<span class=\"kw\">_</span>] = <span class=\"kw-2\">&amp;</span>[<span class=\"string\">'1'</span>, <span class=\"string\">'2'</span>];\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"12foo1bar12\"</span>.trim_start_matches(x), <span class=\"string\">\"foo1bar12\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(%2211foo1bar11%22.trim_start_matches('1'),+%22foo1bar11%22);%0A++++assert_eq!(%22123foo1bar123%22.trim_start_matches(char::is_numeric),+%22foo1bar123%22);%0A++++%0A++++let+x:+%26%5B_%5D+=+%26%5B'1',+'2'%5D;%0A++++assert_eq!(%2212foo1bar12%22.trim_start_matches(x),+%22foo1bar12%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.strip_prefix\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0\">1.45.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#2214\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.strip_prefix\" class=\"fn\">strip_prefix</a>&lt;'a, P&gt;(&amp;'a self, prefix: P) -&gt; <a class=\"enum\" href=\"option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;'a <a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"str/pattern/trait.Pattern.html\" title=\"trait std::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns a string slice with the prefix removed.</p>\n<p>If the string starts with the pattern <code>prefix</code>, returns the substring after the prefix,\nwrapped in <code>Some</code>. Unlike <code>trim_start_matches</code>, this method removes the prefix exactly once.</p>\n<p>If the string does not start with <code>prefix</code>, returns <code>None</code>.</p>\n<p>The <a href=\"str/pattern/index.html\" title=\"mod std::str::pattern\">pattern</a> can be a <code>&amp;str</code>, <a href=\"primitive.char.html\" title=\"primitive char\"><code>char</code></a>, a slice of <a href=\"primitive.char.html\" title=\"primitive char\"><code>char</code></a>s, or a\nfunction or closure that determines if a character matches.</p>\n<h5 id=\"examples-49\"><a class=\"doc-anchor\" href=\"#examples-49\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"foo:bar\"</span>.strip_prefix(<span class=\"string\">\"foo:\"</span>), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"bar\"</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"foo:bar\"</span>.strip_prefix(<span class=\"string\">\"bar\"</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"foofoo\"</span>.strip_prefix(<span class=\"string\">\"foo\"</span>), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(%22foo:bar%22.strip_prefix(%22foo:%22),+Some(%22bar%22));%0A++++assert_eq!(%22foo:bar%22.strip_prefix(%22bar%22),+None);%0A++++assert_eq!(%22foofoo%22.strip_prefix(%22foo%22),+Some(%22foo%22));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.strip_suffix\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0\">1.45.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#2241-2244\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.strip_suffix\" class=\"fn\">strip_suffix</a>&lt;'a, P&gt;(&amp;'a self, suffix: P) -&gt; <a class=\"enum\" href=\"option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;'a <a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"str/pattern/trait.Pattern.html\" title=\"trait std::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,\n    &lt;P as <a class=\"trait\" href=\"str/pattern/trait.Pattern.html\" title=\"trait std::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"str/pattern/trait.Pattern.html#associatedtype.Searcher\" title=\"type std::str::pattern::Pattern::Searcher\">Searcher</a>: <a class=\"trait\" href=\"str/pattern/trait.ReverseSearcher.html\" title=\"trait std::str::pattern::ReverseSearcher\">ReverseSearcher</a>&lt;'a&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns a string slice with the suffix removed.</p>\n<p>If the string ends with the pattern <code>suffix</code>, returns the substring before the suffix,\nwrapped in <code>Some</code>.  Unlike <code>trim_end_matches</code>, this method removes the suffix exactly once.</p>\n<p>If the string does not end with <code>suffix</code>, returns <code>None</code>.</p>\n<p>The <a href=\"str/pattern/index.html\" title=\"mod std::str::pattern\">pattern</a> can be a <code>&amp;str</code>, <a href=\"primitive.char.html\" title=\"primitive char\"><code>char</code></a>, a slice of <a href=\"primitive.char.html\" title=\"primitive char\"><code>char</code></a>s, or a\nfunction or closure that determines if a character matches.</p>\n<h5 id=\"examples-50\"><a class=\"doc-anchor\" href=\"#examples-50\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"bar:foo\"</span>.strip_suffix(<span class=\"string\">\":foo\"</span>), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"bar\"</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"bar:foo\"</span>.strip_suffix(<span class=\"string\">\"bar\"</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"foofoo\"</span>.strip_suffix(<span class=\"string\">\"foo\"</span>), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(%22bar:foo%22.strip_suffix(%22:foo%22),+Some(%22bar%22));%0A++++assert_eq!(%22bar:foo%22.strip_suffix(%22bar%22),+None);%0A++++assert_eq!(%22foofoo%22.strip_suffix(%22foo%22),+Some(%22foo%22));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.trim_end_matches\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.30.0\">1.30.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#2285-2287\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.trim_end_matches\" class=\"fn\">trim_end_matches</a>&lt;'a, P&gt;(&amp;'a self, pat: P) -&gt; &amp;'a <a class=\"primitive\" href=\"primitive.str.html\">str</a><div class=\"where\">where\n    P: <a class=\"trait\" href=\"str/pattern/trait.Pattern.html\" title=\"trait std::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,\n    &lt;P as <a class=\"trait\" href=\"str/pattern/trait.Pattern.html\" title=\"trait std::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"str/pattern/trait.Pattern.html#associatedtype.Searcher\" title=\"type std::str::pattern::Pattern::Searcher\">Searcher</a>: <a class=\"trait\" href=\"str/pattern/trait.ReverseSearcher.html\" title=\"trait std::str::pattern::ReverseSearcher\">ReverseSearcher</a>&lt;'a&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.</p>\n<p>The <a href=\"str/pattern/index.html\" title=\"mod std::str::pattern\">pattern</a> can be a <code>&amp;str</code>, <a href=\"primitive.char.html\" title=\"primitive char\"><code>char</code></a>, a slice of <a href=\"primitive.char.html\" title=\"primitive char\"><code>char</code></a>s, or a\nfunction or closure that determines if a character matches.</p>\n<h5 id=\"text-directionality-5\"><a class=\"doc-anchor\" href=\"#text-directionality-5\">§</a>Text directionality</h5>\n<p>A string is a sequence of bytes. <code>end</code> in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.</p>\n<h5 id=\"examples-51\"><a class=\"doc-anchor\" href=\"#examples-51\">§</a>Examples</h5>\n<p>Simple patterns:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"11foo1bar11\"</span>.trim_end_matches(<span class=\"string\">'1'</span>), <span class=\"string\">\"11foo1bar\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"123foo1bar123\"</span>.trim_end_matches(char::is_numeric), <span class=\"string\">\"123foo1bar\"</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"kw-2\">&amp;</span>[<span class=\"kw\">_</span>] = <span class=\"kw-2\">&amp;</span>[<span class=\"string\">'1'</span>, <span class=\"string\">'2'</span>];\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"12foo1bar12\"</span>.trim_end_matches(x), <span class=\"string\">\"12foo1bar\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(%2211foo1bar11%22.trim_end_matches('1'),+%2211foo1bar%22);%0A++++assert_eq!(%22123foo1bar123%22.trim_end_matches(char::is_numeric),+%22123foo1bar%22);%0A++++%0A++++let+x:+%26%5B_%5D+=+%26%5B'1',+'2'%5D;%0A++++assert_eq!(%2212foo1bar12%22.trim_end_matches(x),+%2212foo1bar%22);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>A more complex pattern, using a closure:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"1fooX\"</span>.trim_end_matches(|c| c == <span class=\"string\">'1' </span>|| c == <span class=\"string\">'X'</span>), <span class=\"string\">\"1foo\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(%221fooX%22.trim_end_matches(%7Cc%7C+c+==+'1'+%7C%7C+c+==+'X'),+%221foo%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.trim_left_matches\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#2329\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.trim_left_matches\" class=\"fn\">trim_left_matches</a>&lt;'a, P&gt;(&amp;'a self, pat: P) -&gt; &amp;'a <a class=\"primitive\" href=\"primitive.str.html\">str</a><div class=\"where\">where\n    P: <a class=\"trait\" href=\"str/pattern/trait.Pattern.html\" title=\"trait std::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,</div></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 1.33.0: superseded by <code>trim_start_matches</code></span></div></span></summary><div class=\"docblock\"><p>Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.</p>\n<p>The <a href=\"str/pattern/index.html\" title=\"mod std::str::pattern\">pattern</a> can be a <code>&amp;str</code>, <a href=\"primitive.char.html\" title=\"primitive char\"><code>char</code></a>, a slice of <a href=\"primitive.char.html\" title=\"primitive char\"><code>char</code></a>s, or a\nfunction or closure that determines if a character matches.</p>\n<h5 id=\"text-directionality-6\"><a class=\"doc-anchor\" href=\"#text-directionality-6\">§</a>Text directionality</h5>\n<p>A string is a sequence of bytes. ‘Left’ in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are ‘right to left’ rather than ‘left to right’, this will be\nthe <em>right</em> side, not the left.</p>\n<h5 id=\"examples-52\"><a class=\"doc-anchor\" href=\"#examples-52\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"11foo1bar11\"</span>.trim_left_matches(<span class=\"string\">'1'</span>), <span class=\"string\">\"foo1bar11\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"123foo1bar123\"</span>.trim_left_matches(char::is_numeric), <span class=\"string\">\"foo1bar123\"</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"kw-2\">&amp;</span>[<span class=\"kw\">_</span>] = <span class=\"kw-2\">&amp;</span>[<span class=\"string\">'1'</span>, <span class=\"string\">'2'</span>];\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"12foo1bar12\"</span>.trim_left_matches(x), <span class=\"string\">\"foo1bar12\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(%2211foo1bar11%22.trim_left_matches('1'),+%22foo1bar11%22);%0A++++assert_eq!(%22123foo1bar123%22.trim_left_matches(char::is_numeric),+%22foo1bar123%22);%0A++++%0A++++let+x:+%26%5B_%5D+=+%26%5B'1',+'2'%5D;%0A++++assert_eq!(%2212foo1bar12%22.trim_left_matches(x),+%22foo1bar12%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.trim_right_matches\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#2372-2374\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.trim_right_matches\" class=\"fn\">trim_right_matches</a>&lt;'a, P&gt;(&amp;'a self, pat: P) -&gt; &amp;'a <a class=\"primitive\" href=\"primitive.str.html\">str</a><div class=\"where\">where\n    P: <a class=\"trait\" href=\"str/pattern/trait.Pattern.html\" title=\"trait std::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,\n    &lt;P as <a class=\"trait\" href=\"str/pattern/trait.Pattern.html\" title=\"trait std::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"str/pattern/trait.Pattern.html#associatedtype.Searcher\" title=\"type std::str::pattern::Pattern::Searcher\">Searcher</a>: <a class=\"trait\" href=\"str/pattern/trait.ReverseSearcher.html\" title=\"trait std::str::pattern::ReverseSearcher\">ReverseSearcher</a>&lt;'a&gt;,</div></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 1.33.0: superseded by <code>trim_end_matches</code></span></div></span></summary><div class=\"docblock\"><p>Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.</p>\n<p>The <a href=\"str/pattern/index.html\" title=\"mod std::str::pattern\">pattern</a> can be a <code>&amp;str</code>, <a href=\"primitive.char.html\" title=\"primitive char\"><code>char</code></a>, a slice of <a href=\"primitive.char.html\" title=\"primitive char\"><code>char</code></a>s, or a\nfunction or closure that determines if a character matches.</p>\n<h5 id=\"text-directionality-7\"><a class=\"doc-anchor\" href=\"#text-directionality-7\">§</a>Text directionality</h5>\n<p>A string is a sequence of bytes. ‘Right’ in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are ‘right to left’ rather than ‘left to right’, this will be\nthe <em>left</em> side, not the right.</p>\n<h5 id=\"examples-53\"><a class=\"doc-anchor\" href=\"#examples-53\">§</a>Examples</h5>\n<p>Simple patterns:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"11foo1bar11\"</span>.trim_right_matches(<span class=\"string\">'1'</span>), <span class=\"string\">\"11foo1bar\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"123foo1bar123\"</span>.trim_right_matches(char::is_numeric), <span class=\"string\">\"123foo1bar\"</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"kw-2\">&amp;</span>[<span class=\"kw\">_</span>] = <span class=\"kw-2\">&amp;</span>[<span class=\"string\">'1'</span>, <span class=\"string\">'2'</span>];\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"12foo1bar12\"</span>.trim_right_matches(x), <span class=\"string\">\"12foo1bar\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(%2211foo1bar11%22.trim_right_matches('1'),+%2211foo1bar%22);%0A++++assert_eq!(%22123foo1bar123%22.trim_right_matches(char::is_numeric),+%22123foo1bar%22);%0A++++%0A++++let+x:+%26%5B_%5D+=+%26%5B'1',+'2'%5D;%0A++++assert_eq!(%2212foo1bar12%22.trim_right_matches(x),+%2212foo1bar%22);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>A more complex pattern, using a closure:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"1fooX\"</span>.trim_right_matches(|c| c == <span class=\"string\">'1' </span>|| c == <span class=\"string\">'X'</span>), <span class=\"string\">\"1foo\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(%221fooX%22.trim_right_matches(%7Cc%7C+c+==+'1'+%7C%7C+c+==+'X'),+%221foo%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.parse\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#2424\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.parse\" class=\"fn\">parse</a>&lt;F&gt;(&amp;self) -&gt; <a class=\"enum\" href=\"result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;F, &lt;F as <a class=\"trait\" href=\"str/trait.FromStr.html\" title=\"trait std::str::FromStr\">FromStr</a>&gt;::<a class=\"associatedtype\" href=\"str/trait.FromStr.html#associatedtype.Err\" title=\"type std::str::FromStr::Err\">Err</a>&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"str/trait.FromStr.html\" title=\"trait std::str::FromStr\">FromStr</a>,</div></h4></section></summary><div class=\"docblock\"><p>Parses this string slice into another type.</p>\n<p>Because <code>parse</code> is so general, it can cause problems with type\ninference. As such, <code>parse</code> is one of the few times you’ll see\nthe syntax affectionately known as the ‘turbofish’: <code>::&lt;&gt;</code>. This\nhelps the inference algorithm understand specifically which type\nyou’re trying to parse into.</p>\n<p><code>parse</code> can parse into any type that implements the <a href=\"str/trait.FromStr.html\" title=\"trait std::str::FromStr\"><code>FromStr</code></a> trait.</p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h5>\n<p>Will return <a href=\"str/trait.FromStr.html#associatedtype.Err\" title=\"associated type std::str::FromStr::Err\"><code>Err</code></a> if it’s not possible to parse this string slice into\nthe desired type.</p>\n<h5 id=\"examples-54\"><a class=\"doc-anchor\" href=\"#examples-54\">§</a>Examples</h5>\n<p>Basic usage</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>four: u32 = <span class=\"string\">\"4\"</span>.parse().unwrap();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">4</span>, four);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+four:+u32+=+%224%22.parse().unwrap();%0A++++%0A++++assert_eq!(4,+four);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Using the ‘turbofish’ instead of annotating <code>four</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>four = <span class=\"string\">\"4\"</span>.parse::&lt;u32&gt;();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Ok</span>(<span class=\"number\">4</span>), four);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+four+=+%224%22.parse::%3Cu32%3E();%0A++++%0A++++assert_eq!(Ok(4),+four);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Failing to parse:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>nope = <span class=\"string\">\"j\"</span>.parse::&lt;u32&gt;();\n\n<span class=\"macro\">assert!</span>(nope.is_err());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+nope+=+%22j%22.parse::%3Cu32%3E();%0A++++%0A++++assert!(nope.is_err());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_ascii\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.23.0, const since 1.74.0\">1.23.0 (const: 1.74.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#2443\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.is_ascii\" class=\"fn\">is_ascii</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Checks if all characters in this string are within the ASCII range.</p>\n<h5 id=\"examples-55\"><a class=\"doc-anchor\" href=\"#examples-55\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>ascii = <span class=\"string\">\"hello!\\n\"</span>;\n<span class=\"kw\">let </span>non_ascii = <span class=\"string\">\"Grüße, Jürgen ❤\"</span>;\n\n<span class=\"macro\">assert!</span>(ascii.is_ascii());\n<span class=\"macro\">assert!</span>(!non_ascii.is_ascii());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+ascii+=+%22hello!%5Cn%22;%0A++++let+non_ascii+=+%22Gr%C3%BC%C3%9Fe,+J%C3%BCrgen+%E2%9D%A4%22;%0A++++%0A++++assert!(ascii.is_ascii());%0A++++assert!(!non_ascii.is_ascii());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_ascii\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#2455\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.as_ascii\" class=\"fn\">as_ascii</a>(&amp;self) -&gt; <a class=\"enum\" href=\"option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;[<a class=\"enum\" href=\"ascii/enum.Char.html\" title=\"enum std::ascii::Char\">AsciiChar</a>]&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>ascii_char</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span></summary><div class=\"docblock\"><p>If this string slice <a href=\"primitive.str.html#method.is_ascii\" title=\"method str::is_ascii\"><code>is_ascii</code></a>, returns it as a slice\nof <a href=\"ascii/enum.Char.html\" title=\"enum std::ascii::Char\">ASCII characters</a>, otherwise returns <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq_ignore_ascii_case\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.23.0\">1.23.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#2475\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.eq_ignore_ascii_case\" class=\"fn\">eq_ignore_ascii_case</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Checks that two strings are an ASCII case-insensitive match.</p>\n<p>Same as <code>to_ascii_lowercase(a) == to_ascii_lowercase(b)</code>,\nbut without allocating and copying temporaries.</p>\n<h5 id=\"examples-56\"><a class=\"doc-anchor\" href=\"#examples-56\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert!</span>(<span class=\"string\">\"Ferris\"</span>.eq_ignore_ascii_case(<span class=\"string\">\"FERRIS\"</span>));\n<span class=\"macro\">assert!</span>(<span class=\"string\">\"Ferrös\"</span>.eq_ignore_ascii_case(<span class=\"string\">\"FERRöS\"</span>));\n<span class=\"macro\">assert!</span>(!<span class=\"string\">\"Ferrös\"</span>.eq_ignore_ascii_case(<span class=\"string\">\"FERRÖS\"</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert!(%22Ferris%22.eq_ignore_ascii_case(%22FERRIS%22));%0A++++assert!(%22Ferr%C3%B6s%22.eq_ignore_ascii_case(%22FERR%C3%B6S%22));%0A++++assert!(!%22Ferr%C3%B6s%22.eq_ignore_ascii_case(%22FERR%C3%96S%22));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.make_ascii_uppercase\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.23.0\">1.23.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#2500\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.make_ascii_uppercase\" class=\"fn\">make_ascii_uppercase</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Converts this string to its ASCII upper case equivalent in-place.</p>\n<p>ASCII letters ‘a’ to ‘z’ are mapped to ‘A’ to ‘Z’,\nbut non-ASCII letters are unchanged.</p>\n<p>To return a new uppercased value without modifying the existing one, use\n<a href=\"#method.to_ascii_uppercase\"><code>to_ascii_uppercase()</code></a>.</p>\n<h5 id=\"examples-57\"><a class=\"doc-anchor\" href=\"#examples-57\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = String::from(<span class=\"string\">\"Grüße, Jürgen ❤\"</span>);\n\ns.make_ascii_uppercase();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"GRüßE, JüRGEN ❤\"</span>, s);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+s+=+String::from(%22Gr%C3%BC%C3%9Fe,+J%C3%BCrgen+%E2%9D%A4%22);%0A++++%0A++++s.make_ascii_uppercase();%0A++++%0A++++assert_eq!(%22GR%C3%BC%C3%9FE,+J%C3%BCRGEN+%E2%9D%A4%22,+s);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.make_ascii_lowercase\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.23.0\">1.23.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#2527\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.make_ascii_lowercase\" class=\"fn\">make_ascii_lowercase</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Converts this string to its ASCII lower case equivalent in-place.</p>\n<p>ASCII letters ‘A’ to ‘Z’ are mapped to ‘a’ to ‘z’,\nbut non-ASCII letters are unchanged.</p>\n<p>To return a new lowercased value without modifying the existing one, use\n<a href=\"#method.to_ascii_lowercase\"><code>to_ascii_lowercase()</code></a>.</p>\n<h5 id=\"examples-58\"><a class=\"doc-anchor\" href=\"#examples-58\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = String::from(<span class=\"string\">\"GRÜßE, JÜRGEN ❤\"</span>);\n\ns.make_ascii_lowercase();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"grÜße, jÜrgen ❤\"</span>, s);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+s+=+String::from(%22GR%C3%9C%C3%9FE,+J%C3%9CRGEN+%E2%9D%A4%22);%0A++++%0A++++s.make_ascii_lowercase();%0A++++%0A++++assert_eq!(%22gr%C3%9C%C3%9Fe,+j%C3%9Crgen+%E2%9D%A4%22,+s);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.trim_ascii_start\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0, const since 1.80.0\">1.80.0 (const: 1.80.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#2552\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.trim_ascii_start\" class=\"fn\">trim_ascii_start</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a></h4></section></summary><div class=\"docblock\"><p>Returns a string slice with leading ASCII whitespace removed.</p>\n<p>‘Whitespace’ refers to the definition used by\n<a href=\"primitive.u8.html#method.is_ascii_whitespace\" title=\"method u8::is_ascii_whitespace\"><code>u8::is_ascii_whitespace</code></a>.</p>\n<h5 id=\"examples-59\"><a class=\"doc-anchor\" href=\"#examples-59\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"string\">\" \\t \\u{3000}hello world\\n\"</span>.trim_ascii_start(), <span class=\"string\">\"\\u{3000}hello world\\n\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"  \"</span>.trim_ascii_start(), <span class=\"string\">\"\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"\"</span>.trim_ascii_start(), <span class=\"string\">\"\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(%22+%5Ct+%5Cu%7B3000%7Dhello+world%5Cn%22.trim_ascii_start(),+%22%5Cu%7B3000%7Dhello+world%5Cn%22);%0A++++assert_eq!(%22++%22.trim_ascii_start(),+%22%22);%0A++++assert_eq!(%22%22.trim_ascii_start(),+%22%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.trim_ascii_end\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0, const since 1.80.0\">1.80.0 (const: 1.80.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#2577\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.trim_ascii_end\" class=\"fn\">trim_ascii_end</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a></h4></section></summary><div class=\"docblock\"><p>Returns a string slice with trailing ASCII whitespace removed.</p>\n<p>‘Whitespace’ refers to the definition used by\n<a href=\"primitive.u8.html#method.is_ascii_whitespace\" title=\"method u8::is_ascii_whitespace\"><code>u8::is_ascii_whitespace</code></a>.</p>\n<h5 id=\"examples-60\"><a class=\"doc-anchor\" href=\"#examples-60\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"\\r hello world\\u{3000}\\n \"</span>.trim_ascii_end(), <span class=\"string\">\"\\r hello world\\u{3000}\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"  \"</span>.trim_ascii_end(), <span class=\"string\">\"\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"\"</span>.trim_ascii_end(), <span class=\"string\">\"\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(%22%5Cr+hello+world%5Cu%7B3000%7D%5Cn+%22.trim_ascii_end(),+%22%5Cr+hello+world%5Cu%7B3000%7D%22);%0A++++assert_eq!(%22++%22.trim_ascii_end(),+%22%22);%0A++++assert_eq!(%22%22.trim_ascii_end(),+%22%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.trim_ascii\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0, const since 1.80.0\">1.80.0 (const: 1.80.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#2603\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.trim_ascii\" class=\"fn\">trim_ascii</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a></h4></section></summary><div class=\"docblock\"><p>Returns a string slice with leading and trailing ASCII whitespace\nremoved.</p>\n<p>‘Whitespace’ refers to the definition used by\n<a href=\"primitive.u8.html#method.is_ascii_whitespace\" title=\"method u8::is_ascii_whitespace\"><code>u8::is_ascii_whitespace</code></a>.</p>\n<h5 id=\"examples-61\"><a class=\"doc-anchor\" href=\"#examples-61\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"\\r hello world\\n \"</span>.trim_ascii(), <span class=\"string\">\"hello world\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"  \"</span>.trim_ascii(), <span class=\"string\">\"\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"\"</span>.trim_ascii(), <span class=\"string\">\"\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(%22%5Cr+hello+world%5Cn+%22.trim_ascii(),+%22hello+world%22);%0A++++assert_eq!(%22++%22.trim_ascii(),+%22%22);%0A++++assert_eq!(%22%22.trim_ascii(),+%22%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.escape_debug\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#2646\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.escape_debug\" class=\"fn\">escape_debug</a>(&amp;self) -&gt; <a class=\"struct\" href=\"str/struct.EscapeDebug.html\" title=\"struct std::str::EscapeDebug\">EscapeDebug</a>&lt;'_&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"EscapeDebug<'_>\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Return an iterator that escapes each char in <code>self</code> with <a href=\"primitive.char.html#method.escape_debug\" title=\"method char::escape_debug\"><code>char::escape_debug</code></a>.</p>\n<p>Note: only extended grapheme codepoints that begin the string will be\nescaped.</p>\n<h5 id=\"examples-62\"><a class=\"doc-anchor\" href=\"#examples-62\">§</a>Examples</h5>\n<p>As an iterator:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">for </span>c <span class=\"kw\">in </span><span class=\"string\">\"❤\\n!\"</span>.escape_debug() {\n    <span class=\"macro\">print!</span>(<span class=\"string\">\"{c}\"</span>);\n}\n<span class=\"macro\">println!</span>();</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++for+c+in+%22%E2%9D%A4%5Cn!%22.escape_debug()+%7B%0A++++++++print!(%22%7Bc%7D%22);%0A++++%7D%0A++++println!();%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Using <code>println!</code> directly:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, <span class=\"string\">\"❤\\n!\"</span>.escape_debug());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++println!(%22%7B%7D%22,+%22%E2%9D%A4%5Cn!%22.escape_debug());%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Both are equivalent to:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">println!</span>(<span class=\"string\">\"❤\\\\n!\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++println!(%22%E2%9D%A4%5C%5Cn!%22);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Using <code>to_string</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"❤\\n!\"</span>.escape_debug().to_string(), <span class=\"string\">\"❤\\\\n!\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(%22%E2%9D%A4%5Cn!%22.escape_debug().to_string(),+%22%E2%9D%A4%5C%5Cn!%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.escape_default\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#2697\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.escape_default\" class=\"fn\">escape_default</a>(&amp;self) -&gt; <a class=\"struct\" href=\"str/struct.EscapeDefault.html\" title=\"struct std::str::EscapeDefault\">EscapeDefault</a>&lt;'_&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"EscapeDefault<'_>\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Return an iterator that escapes each char in <code>self</code> with <a href=\"primitive.char.html#method.escape_default\" title=\"method char::escape_default\"><code>char::escape_default</code></a>.</p>\n<h5 id=\"examples-63\"><a class=\"doc-anchor\" href=\"#examples-63\">§</a>Examples</h5>\n<p>As an iterator:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">for </span>c <span class=\"kw\">in </span><span class=\"string\">\"❤\\n!\"</span>.escape_default() {\n    <span class=\"macro\">print!</span>(<span class=\"string\">\"{c}\"</span>);\n}\n<span class=\"macro\">println!</span>();</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++for+c+in+%22%E2%9D%A4%5Cn!%22.escape_default()+%7B%0A++++++++print!(%22%7Bc%7D%22);%0A++++%7D%0A++++println!();%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Using <code>println!</code> directly:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, <span class=\"string\">\"❤\\n!\"</span>.escape_default());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++println!(%22%7B%7D%22,+%22%E2%9D%A4%5Cn!%22.escape_default());%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Both are equivalent to:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">println!</span>(<span class=\"string\">\"\\\\u{{2764}}\\\\n!\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++println!(%22%5C%5Cu%7B%7B2764%7D%7D%5C%5Cn!%22);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Using <code>to_string</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"❤\\n!\"</span>.escape_default().to_string(), <span class=\"string\">\"\\\\u{2764}\\\\n!\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(%22%E2%9D%A4%5Cn!%22.escape_default().to_string(),+%22%5C%5Cu%7B2764%7D%5C%5Cn!%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.escape_unicode\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#2735\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.escape_unicode\" class=\"fn\">escape_unicode</a>(&amp;self) -&gt; <a class=\"struct\" href=\"str/struct.EscapeUnicode.html\" title=\"struct std::str::EscapeUnicode\">EscapeUnicode</a>&lt;'_&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"EscapeUnicode<'_>\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Return an iterator that escapes each char in <code>self</code> with <a href=\"primitive.char.html#method.escape_unicode\" title=\"method char::escape_unicode\"><code>char::escape_unicode</code></a>.</p>\n<h5 id=\"examples-64\"><a class=\"doc-anchor\" href=\"#examples-64\">§</a>Examples</h5>\n<p>As an iterator:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">for </span>c <span class=\"kw\">in </span><span class=\"string\">\"❤\\n!\"</span>.escape_unicode() {\n    <span class=\"macro\">print!</span>(<span class=\"string\">\"{c}\"</span>);\n}\n<span class=\"macro\">println!</span>();</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++for+c+in+%22%E2%9D%A4%5Cn!%22.escape_unicode()+%7B%0A++++++++print!(%22%7Bc%7D%22);%0A++++%7D%0A++++println!();%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Using <code>println!</code> directly:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, <span class=\"string\">\"❤\\n!\"</span>.escape_unicode());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++println!(%22%7B%7D%22,+%22%E2%9D%A4%5Cn!%22.escape_unicode());%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Both are equivalent to:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">println!</span>(<span class=\"string\">\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++println!(%22%5C%5Cu%7B%7B2764%7D%7D%5C%5Cu%7B%7Ba%7D%7D%5C%5Cu%7B%7B21%7D%7D%22);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Using <code>to_string</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"❤\\n!\"</span>.escape_unicode().to_string(), <span class=\"string\">\"\\\\u{2764}\\\\u{a}\\\\u{21}\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(%22%E2%9D%A4%5Cn!%22.escape_unicode().to_string(),+%22%5C%5Cu%7B2764%7D%5C%5Cu%7Ba%7D%5C%5Cu%7B21%7D%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-str-1\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/str.rs.html#223\">source</a><a href=\"#impl-str-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"primitive\" href=\"primitive.str.html\">str</a></h3></section></summary><div class=\"docblock\"><p>Methods for string slices.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_boxed_bytes\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/str.rs.html#238\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.into_boxed_bytes\" class=\"fn\">into_boxed_bytes</a>(self: <a class=\"struct\" href=\"boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;) -&gt; <a class=\"struct\" href=\"boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;[<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>]&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <code>Box&lt;str&gt;</code> into a <code>Box&lt;[u8]&gt;</code> without copying or allocating.</p>\n<h5 id=\"examples-65\"><a class=\"doc-anchor\" href=\"#examples-65\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">\"this is a string\"</span>;\n<span class=\"kw\">let </span>boxed_str = s.to_owned().into_boxed_str();\n<span class=\"kw\">let </span>boxed_bytes = boxed_str.into_boxed_bytes();\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>boxed_bytes, <span class=\"kw-2\">*</span>s.as_bytes());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s+=+%22this+is+a+string%22;%0A++++let+boxed_str+=+s.to_owned().into_boxed_str();%0A++++let+boxed_bytes+=+boxed_str.into_boxed_bytes();%0A++++assert_eq!(*boxed_bytes,+*s.as_bytes());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.replace\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/str.rs.html#271\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.replace\" class=\"fn\">replace</a>&lt;'a, P&gt;(&amp;'a self, from: P, to: &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; <a class=\"struct\" href=\"string/struct.String.html\" title=\"struct std::string::String\">String</a><div class=\"where\">where\n    P: <a class=\"trait\" href=\"str/pattern/trait.Pattern.html\" title=\"trait std::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Replaces all matches of a pattern with another string.</p>\n<p><code>replace</code> creates a new <a href=\"string/struct.String.html\" title=\"struct std::string::String\"><code>String</code></a>, and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.</p>\n<h5 id=\"examples-66\"><a class=\"doc-anchor\" href=\"#examples-66\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">\"this is old\"</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"this is new\"</span>, s.replace(<span class=\"string\">\"old\"</span>, <span class=\"string\">\"new\"</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"than an old\"</span>, s.replace(<span class=\"string\">\"is\"</span>, <span class=\"string\">\"an\"</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s+=+%22this+is+old%22;%0A++++%0A++++assert_eq!(%22this+is+new%22,+s.replace(%22old%22,+%22new%22));%0A++++assert_eq!(%22than+an+old%22,+s.replace(%22is%22,+%22an%22));%0A%7D&amp;edition=2021\">Run</a></div>\n<p>When the pattern doesn’t match, it returns this string slice as <a href=\"string/struct.String.html\" title=\"struct std::string::String\"><code>String</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">\"this is old\"</span>;\n<span class=\"macro\">assert_eq!</span>(s, s.replace(<span class=\"string\">\"cookie monster\"</span>, <span class=\"string\">\"little lamb\"</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s+=+%22this+is+old%22;%0A++++assert_eq!(s,+s.replace(%22cookie+monster%22,+%22little+lamb%22));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.replacen\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.16.0\">1.16.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/str.rs.html#311\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.replacen\" class=\"fn\">replacen</a>&lt;'a, P&gt;(&amp;'a self, pat: P, to: &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>, count: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"string/struct.String.html\" title=\"struct std::string::String\">String</a><div class=\"where\">where\n    P: <a class=\"trait\" href=\"str/pattern/trait.Pattern.html\" title=\"trait std::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Replaces first N matches of a pattern with another string.</p>\n<p><code>replacen</code> creates a new <a href=\"string/struct.String.html\" title=\"struct std::string::String\"><code>String</code></a>, and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most <code>count</code> times.</p>\n<h5 id=\"examples-67\"><a class=\"doc-anchor\" href=\"#examples-67\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">\"foo foo 123 foo\"</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"new new 123 foo\"</span>, s.replacen(<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"new\"</span>, <span class=\"number\">2</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"faa fao 123 foo\"</span>, s.replacen(<span class=\"string\">'o'</span>, <span class=\"string\">\"a\"</span>, <span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"foo foo new23 foo\"</span>, s.replacen(char::is_numeric, <span class=\"string\">\"new\"</span>, <span class=\"number\">1</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s+=+%22foo+foo+123+foo%22;%0A++++assert_eq!(%22new+new+123+foo%22,+s.replacen(%22foo%22,+%22new%22,+2));%0A++++assert_eq!(%22faa+fao+123+foo%22,+s.replacen('o',+%22a%22,+3));%0A++++assert_eq!(%22foo+foo+new23+foo%22,+s.replacen(char::is_numeric,+%22new%22,+1));%0A%7D&amp;edition=2021\">Run</a></div>\n<p>When the pattern doesn’t match, it returns this string slice as <a href=\"string/struct.String.html\" title=\"struct std::string::String\"><code>String</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">\"this is old\"</span>;\n<span class=\"macro\">assert_eq!</span>(s, s.replacen(<span class=\"string\">\"cookie monster\"</span>, <span class=\"string\">\"little lamb\"</span>, <span class=\"number\">10</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s+=+%22this+is+old%22;%0A++++assert_eq!(s,+s.replacen(%22cookie+monster%22,+%22little+lamb%22,+10));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_lowercase\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0\">1.2.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/str.rs.html#368\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.to_lowercase\" class=\"fn\">to_lowercase</a>(&amp;self) -&gt; <a class=\"struct\" href=\"string/struct.String.html\" title=\"struct std::string::String\">String</a></h4></section></summary><div class=\"docblock\"><p>Returns the lowercase equivalent of this string slice, as a new <a href=\"string/struct.String.html\" title=\"struct std::string::String\"><code>String</code></a>.</p>\n<p>‘Lowercase’ is defined according to the terms of the Unicode Derived Core Property\n<code>Lowercase</code>.</p>\n<p>Since some characters can expand into multiple characters when changing\nthe case, this function returns a <a href=\"string/struct.String.html\" title=\"struct std::string::String\"><code>String</code></a> instead of modifying the\nparameter in-place.</p>\n<h5 id=\"examples-68\"><a class=\"doc-anchor\" href=\"#examples-68\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">\"HELLO\"</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"hello\"</span>, s.to_lowercase());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s+=+%22HELLO%22;%0A++++%0A++++assert_eq!(%22hello%22,+s.to_lowercase());%0A%7D&amp;edition=2021\">Run</a></div>\n<p>A tricky example, with sigma:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>sigma = <span class=\"string\">\"Σ\"</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"σ\"</span>, sigma.to_lowercase());\n\n<span class=\"comment\">// but at the end of a word, it's ς, not σ:\n</span><span class=\"kw\">let </span>odysseus = <span class=\"string\">\"ὈΔΥΣΣΕΎΣ\"</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"ὀδυσσεύς\"</span>, odysseus.to_lowercase());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+sigma+=+%22%CE%A3%22;%0A++++%0A++++assert_eq!(%22%CF%83%22,+sigma.to_lowercase());%0A++++%0A++++//+but+at+the+end+of+a+word,+it's+%CF%82,+not+%CF%83:%0A++++let+odysseus+=+%22%E1%BD%88%CE%94%CE%A5%CE%A3%CE%A3%CE%95%CE%8E%CE%A3%22;%0A++++%0A++++assert_eq!(%22%E1%BD%80%CE%B4%CF%85%CF%83%CF%83%CE%B5%CF%8D%CF%82%22,+odysseus.to_lowercase());%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Languages without case are not changed:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>new_year = <span class=\"string\">\"农历新年\"</span>;\n\n<span class=\"macro\">assert_eq!</span>(new_year, new_year.to_lowercase());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+new_year+=+%22%E5%86%9C%E5%8E%86%E6%96%B0%E5%B9%B4%22;%0A++++%0A++++assert_eq!(new_year,+new_year.to_lowercase());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_uppercase\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0\">1.2.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/str.rs.html#461\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.to_uppercase\" class=\"fn\">to_uppercase</a>(&amp;self) -&gt; <a class=\"struct\" href=\"string/struct.String.html\" title=\"struct std::string::String\">String</a></h4></section></summary><div class=\"docblock\"><p>Returns the uppercase equivalent of this string slice, as a new <a href=\"string/struct.String.html\" title=\"struct std::string::String\"><code>String</code></a>.</p>\n<p>‘Uppercase’ is defined according to the terms of the Unicode Derived Core Property\n<code>Uppercase</code>.</p>\n<p>Since some characters can expand into multiple characters when changing\nthe case, this function returns a <a href=\"string/struct.String.html\" title=\"struct std::string::String\"><code>String</code></a> instead of modifying the\nparameter in-place.</p>\n<h5 id=\"examples-69\"><a class=\"doc-anchor\" href=\"#examples-69\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">\"hello\"</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"HELLO\"</span>, s.to_uppercase());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s+=+%22hello%22;%0A++++%0A++++assert_eq!(%22HELLO%22,+s.to_uppercase());%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Scripts without case are not changed:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>new_year = <span class=\"string\">\"农历新年\"</span>;\n\n<span class=\"macro\">assert_eq!</span>(new_year, new_year.to_uppercase());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+new_year+=+%22%E5%86%9C%E5%8E%86%E6%96%B0%E5%B9%B4%22;%0A++++%0A++++assert_eq!(new_year,+new_year.to_uppercase());%0A%7D&amp;edition=2021\">Run</a></div>\n<p>One character can become multiple:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">\"tschüß\"</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"TSCHÜSS\"</span>, s.to_uppercase());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s+=+%22tsch%C3%BC%C3%9F%22;%0A++++%0A++++assert_eq!(%22TSCH%C3%9CSS%22,+s.to_uppercase());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_string\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/str.rs.html#502\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.into_string\" class=\"fn\">into_string</a>(self: <a class=\"struct\" href=\"boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;) -&gt; <a class=\"struct\" href=\"string/struct.String.html\" title=\"struct std::string::String\">String</a></h4></section></summary><div class=\"docblock\"><p>Converts a <a href=\"boxed/struct.Box.html\" title=\"struct std::boxed::Box\"><code>Box&lt;str&gt;</code></a> into a <a href=\"string/struct.String.html\" title=\"struct std::string::String\"><code>String</code></a> without copying or allocating.</p>\n<h5 id=\"examples-70\"><a class=\"doc-anchor\" href=\"#examples-70\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>string = String::from(<span class=\"string\">\"birthday gift\"</span>);\n<span class=\"kw\">let </span>boxed_str = string.clone().into_boxed_str();\n\n<span class=\"macro\">assert_eq!</span>(boxed_str.into_string(), string);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+string+=+String::from(%22birthday+gift%22);%0A++++let+boxed_str+=+string.clone().into_boxed_str();%0A++++%0A++++assert_eq!(boxed_str.into_string(),+string);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.repeat\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.16.0\">1.16.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/str.rs.html#531\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.repeat\" class=\"fn\">repeat</a>(&amp;self, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"string/struct.String.html\" title=\"struct std::string::String\">String</a></h4></section></summary><div class=\"docblock\"><p>Creates a new <a href=\"string/struct.String.html\" title=\"struct std::string::String\"><code>String</code></a> by repeating a string <code>n</code> times.</p>\n<h5 id=\"panics-2\"><a class=\"doc-anchor\" href=\"#panics-2\">§</a>Panics</h5>\n<p>This function will panic if the capacity would overflow.</p>\n<h5 id=\"examples-71\"><a class=\"doc-anchor\" href=\"#examples-71\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"abc\"</span>.repeat(<span class=\"number\">4</span>), String::from(<span class=\"string\">\"abcabcabcabc\"</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(%22abc%22.repeat(4),+String::from(%22abcabcabcabc%22));%0A%7D&amp;edition=2021\">Run</a></div>\n<p>A panic upon overflow:</p>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"comment\">// this will panic at runtime\n</span><span class=\"kw\">let </span>huge = <span class=\"string\">\"0123456789abcdef\"</span>.repeat(usize::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A//+this+will+panic+at+runtime%0Afn+main()+%7B%0A++++let+huge+=+%220123456789abcdef%22.repeat(usize::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_ascii_uppercase\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.23.0\">1.23.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/str.rs.html#561\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.to_ascii_uppercase\" class=\"fn\">to_ascii_uppercase</a>(&amp;self) -&gt; <a class=\"struct\" href=\"string/struct.String.html\" title=\"struct std::string::String\">String</a></h4></section></summary><div class=\"docblock\"><p>Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.</p>\n<p>ASCII letters ‘a’ to ‘z’ are mapped to ‘A’ to ‘Z’,\nbut non-ASCII letters are unchanged.</p>\n<p>To uppercase the value in-place, use <a href=\"primitive.str.html#method.make_ascii_uppercase\" title=\"method str::make_ascii_uppercase\"><code>make_ascii_uppercase</code></a>.</p>\n<p>To uppercase ASCII characters in addition to non-ASCII characters, use\n<a href=\"#method.to_uppercase\"><code>to_uppercase</code></a>.</p>\n<h5 id=\"examples-72\"><a class=\"doc-anchor\" href=\"#examples-72\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">\"Grüße, Jürgen ❤\"</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"GRüßE, JüRGEN ❤\"</span>, s.to_ascii_uppercase());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s+=+%22Gr%C3%BC%C3%9Fe,+J%C3%BCrgen+%E2%9D%A4%22;%0A++++%0A++++assert_eq!(%22GR%C3%BC%C3%9FE,+J%C3%BCRGEN+%E2%9D%A4%22,+s.to_ascii_uppercase());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_ascii_lowercase\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.23.0\">1.23.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/str.rs.html#593\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.to_ascii_lowercase\" class=\"fn\">to_ascii_lowercase</a>(&amp;self) -&gt; <a class=\"struct\" href=\"string/struct.String.html\" title=\"struct std::string::String\">String</a></h4></section></summary><div class=\"docblock\"><p>Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.</p>\n<p>ASCII letters ‘A’ to ‘Z’ are mapped to ‘a’ to ‘z’,\nbut non-ASCII letters are unchanged.</p>\n<p>To lowercase the value in-place, use <a href=\"primitive.str.html#method.make_ascii_lowercase\" title=\"method str::make_ascii_lowercase\"><code>make_ascii_lowercase</code></a>.</p>\n<p>To lowercase ASCII characters in addition to non-ASCII characters, use\n<a href=\"#method.to_lowercase\"><code>to_lowercase</code></a>.</p>\n<h5 id=\"examples-73\"><a class=\"doc-anchor\" href=\"#examples-73\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">\"Grüße, Jürgen ❤\"</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"grüße, jürgen ❤\"</span>, s.to_ascii_lowercase());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s+=+%22Gr%C3%BC%C3%9Fe,+J%C3%BCrgen+%E2%9D%A4%22;%0A++++%0A++++assert_eq!(%22gr%C3%BC%C3%9Fe,+j%C3%BCrgen+%E2%9D%A4%22,+s.to_ascii_lowercase());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details></div><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">§</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Add%3C%26str%3E-for-Cow%3C'a,+str%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.14.0\">1.14.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#443\">source</a></span><a href=\"#impl-Add%3C%26str%3E-for-Cow%3C'a,+str%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a>&lt;&amp;'a <a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt; for <a class=\"enum\" href=\"borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-8\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-8\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"ops/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"enum\" href=\"borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#447\">source</a><a href=\"#method.add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ops/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, rhs: &amp;'a <a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; &lt;<a class=\"enum\" href=\"borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt; as <a class=\"trait\" href=\"ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a>&lt;&amp;'a <a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"ops/trait.Add.html#associatedtype.Output\" title=\"type std::ops::Add::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>+</code> operation. <a href=\"ops/trait.Add.html#tymethod.add\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Add%3C%26str%3E-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2432\">source</a></span><a href=\"#impl-Add%3C%26str%3E-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"string/struct.String.html\" title=\"struct std::string::String\">String</a></h3></section></summary><div class=\"docblock\"><p>Implements the <code>+</code> operator for concatenating two strings.</p>\n<p>This consumes the <code>String</code> on the left-hand side and re-uses its buffer (growing it if\nnecessary). This is done to avoid allocating a new <code>String</code> and copying the entire contents on\nevery operation, which would lead to <em>O</em>(<em>n</em>^2) running time when building an <em>n</em>-byte string by\nrepeated concatenation.</p>\n<p>The string on the right-hand side is only borrowed; its contents are copied into the returned\n<code>String</code>.</p>\n<h4 id=\"examples-76\"><a class=\"doc-anchor\" href=\"#examples-76\">§</a>Examples</h4>\n<p>Concatenating two <code>String</code>s takes the first by value and borrows the second:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a = String::from(<span class=\"string\">\"hello\"</span>);\n<span class=\"kw\">let </span>b = String::from(<span class=\"string\">\" world\"</span>);\n<span class=\"kw\">let </span>c = a + <span class=\"kw-2\">&amp;</span>b;\n<span class=\"comment\">// `a` is moved and can no longer be used here.</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+a+=+String::from(%22hello%22);%0A++++let+b+=+String::from(%22+world%22);%0A++++let+c+=+a+%2B+%26b;%0A++++//+%60a%60+is+moved+and+can+no+longer+be+used+here.%0A%7D&amp;edition=2021\">Run</a></div>\n<p>If you want to keep using the first <code>String</code>, you can clone it and append to the clone instead:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a = String::from(<span class=\"string\">\"hello\"</span>);\n<span class=\"kw\">let </span>b = String::from(<span class=\"string\">\" world\"</span>);\n<span class=\"kw\">let </span>c = a.clone() + <span class=\"kw-2\">&amp;</span>b;\n<span class=\"comment\">// `a` is still valid here.</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+a+=+String::from(%22hello%22);%0A++++let+b+=+String::from(%22+world%22);%0A++++let+c+=+a.clone()+%2B+%26b;%0A++++//+%60a%60+is+still+valid+here.%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Concatenating <code>&amp;str</code> slices can be done by converting the first to a <code>String</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a = <span class=\"string\">\"hello\"</span>;\n<span class=\"kw\">let </span>b = <span class=\"string\">\" world\"</span>;\n<span class=\"kw\">let </span>c = a.to_string() + b;</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+a+=+%22hello%22;%0A++++let+b+=+%22+world%22;%0A++++let+c+=+a.to_string()+%2B+b;%0A%7D&amp;edition=2021\">Run</a></div>\n</div><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-9\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-9\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"ops/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"string/struct.String.html\" title=\"struct std::string::String\">String</a></h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.add-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2436\">source</a><a href=\"#method.add-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ops/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; <a class=\"struct\" href=\"string/struct.String.html\" title=\"struct std::string::String\">String</a></h4></section></summary><div class=\"docblock\">Performs the <code>+</code> operation. <a href=\"ops/trait.Add.html#tymethod.add\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AddAssign%3C%26str%3E-for-Cow%3C'a,+str%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.14.0\">1.14.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#467\">source</a></span><a href=\"#impl-AddAssign%3C%26str%3E-for-Cow%3C'a,+str%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"ops/trait.AddAssign.html\" title=\"trait std::ops::AddAssign\">AddAssign</a>&lt;&amp;'a <a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt; for <a class=\"enum\" href=\"borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.add_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#468\">source</a><a href=\"#method.add_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ops/trait.AddAssign.html#tymethod.add_assign\" class=\"fn\">add_assign</a>(&amp;mut self, rhs: &amp;'a <a class=\"primitive\" href=\"primitive.str.html\">str</a>)</h4></section></summary><div class=\"docblock\">Performs the <code>+=</code> operation. <a href=\"ops/trait.AddAssign.html#tymethod.add_assign\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AddAssign%3C%26str%3E-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2447\">source</a></span><a href=\"#impl-AddAssign%3C%26str%3E-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"ops/trait.AddAssign.html\" title=\"trait std::ops::AddAssign\">AddAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"string/struct.String.html\" title=\"struct std::string::String\">String</a></h3></section></summary><div class=\"docblock\"><p>Implements the <code>+=</code> operator for appending to a <code>String</code>.</p>\n<p>This has the same behavior as the <a href=\"string/struct.String.html#method.push_str\" title=\"method std::string::String::push_str\"><code>push_str</code></a> method.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.add_assign-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2449\">source</a><a href=\"#method.add_assign-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ops/trait.AddAssign.html#tymethod.add_assign\" class=\"fn\">add_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>)</h4></section></summary><div class=\"docblock\">Performs the <code>+=</code> operation. <a href=\"ops/trait.AddAssign.html#tymethod.add_assign\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AsMut%3Cstr%3E-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.43.0\">1.43.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2692\">source</a></span><a href=\"#impl-AsMut%3Cstr%3E-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"convert/trait.AsMut.html\" title=\"trait std::convert::AsMut\">AsMut</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"string/struct.String.html\" title=\"struct std::string::String\">String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_mut-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2694\">source</a><a href=\"#method.as_mut-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.AsMut.html#tymethod.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"primitive.str.html\">str</a></h4></section></summary><div class=\"docblock\">Converts this type into a mutable reference of the (usually inferred) input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AsMut%3Cstr%3E-for-str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.51.0\">1.51.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#846\">source</a></span><a href=\"#impl-AsMut%3Cstr%3E-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"convert/trait.AsMut.html\" title=\"trait std::convert::AsMut\">AsMut</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt; for <a class=\"primitive\" href=\"primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#848\">source</a><a href=\"#method.as_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.AsMut.html#tymethod.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"primitive.str.html\">str</a></h4></section></summary><div class=\"docblock\">Converts this type into a mutable reference of the (usually inferred) input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AsRef%3C%5Bu8%5D%3E-for-str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#2741\">source</a></span><a href=\"#impl-AsRef%3C%5Bu8%5D%3E-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;[<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>]&gt; for <a class=\"primitive\" href=\"primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#2743\">source</a><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;[<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>] <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;[u8]\">ⓘ</a></h4></section></summary><div class=\"docblock\">Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AsRef%3COsStr%3E-for-str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../src/std/ffi/os_str.rs.html#1576-1581\">source</a></span><a href=\"#impl-AsRef%3COsStr%3E-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt; for <a class=\"primitive\" href=\"primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_ref-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../src/std/ffi/os_str.rs.html#1578-1580\">source</a><a href=\"#method.as_ref-5\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a></h4></section></summary><div class=\"docblock\">Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AsRef%3CPath%3E-for-str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../src/std/path.rs.html#3174-3179\">source</a></span><a href=\"#impl-AsRef%3CPath%3E-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt; for <a class=\"primitive\" href=\"primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_ref-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../src/std/path.rs.html#3176-3178\">source</a><a href=\"#method.as_ref-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"path/struct.Path.html\" title=\"struct std::path::Path\">Path</a></h4></section></summary><div class=\"docblock\">Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AsRef%3Cstr%3E-for-Drain%3C'a%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.55.0\">1.55.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2996\">source</a></span><a href=\"#impl-AsRef%3Cstr%3E-for-Drain%3C'a%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"string/struct.Drain.html\" title=\"struct std::string::Drain\">Drain</a>&lt;'a&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_ref-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2997\">source</a><a href=\"#method.as_ref-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a></h4></section></summary><div class=\"docblock\">Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AsRef%3Cstr%3E-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2684\">source</a></span><a href=\"#impl-AsRef%3Cstr%3E-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"string/struct.String.html\" title=\"struct std::string::String\">String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_ref-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2686\">source</a><a href=\"#method.as_ref-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a></h4></section></summary><div class=\"docblock\">Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AsRef%3Cstr%3E-for-str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#838\">source</a></span><a href=\"#impl-AsRef%3Cstr%3E-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt; for <a class=\"primitive\" href=\"primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_ref-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#840\">source</a><a href=\"#method.as_ref-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a></h4></section></summary><div class=\"docblock\">Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AsciiExt-for-str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../src/std/ascii.rs.html#207-211\">source</a></span><a href=\"#impl-AsciiExt-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"ascii/trait.AsciiExt.html\" title=\"trait std::ascii::AsciiExt\">AsciiExt</a> for <a class=\"primitive\" href=\"primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Owned-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Owned-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"ascii/trait.AsciiExt.html#associatedtype.Owned\" class=\"associatedtype\">Owned</a> = <a class=\"struct\" href=\"string/struct.String.html\" title=\"struct std::string::String\">String</a></h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 1.26.0: use inherent methods instead</span></div></span><div class=\"docblock\">Container type for copied ASCII characters.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_ascii-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../src/std/ascii.rs.html#210\">source</a><a href=\"#method.is_ascii-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ascii/trait.AsciiExt.html#tymethod.is_ascii\" class=\"fn\">is_ascii</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 1.26.0: use inherent methods instead</span></div></span><div class=\"docblock\">Checks if the value is within the ASCII range. <a href=\"ascii/trait.AsciiExt.html#tymethod.is_ascii\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_ascii_uppercase-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../src/std/ascii.rs.html#210\">source</a><a href=\"#method.to_ascii_uppercase-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ascii/trait.AsciiExt.html#tymethod.to_ascii_uppercase\" class=\"fn\">to_ascii_uppercase</a>(&amp;self) -&gt; Self::<a class=\"associatedtype\" href=\"ascii/trait.AsciiExt.html#associatedtype.Owned\" title=\"type std::ascii::AsciiExt::Owned\">Owned</a></h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 1.26.0: use inherent methods instead</span></div></span><div class=\"docblock\">Makes a copy of the value in its ASCII upper case equivalent. <a href=\"ascii/trait.AsciiExt.html#tymethod.to_ascii_uppercase\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_ascii_lowercase-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../src/std/ascii.rs.html#210\">source</a><a href=\"#method.to_ascii_lowercase-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ascii/trait.AsciiExt.html#tymethod.to_ascii_lowercase\" class=\"fn\">to_ascii_lowercase</a>(&amp;self) -&gt; Self::<a class=\"associatedtype\" href=\"ascii/trait.AsciiExt.html#associatedtype.Owned\" title=\"type std::ascii::AsciiExt::Owned\">Owned</a></h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 1.26.0: use inherent methods instead</span></div></span><div class=\"docblock\">Makes a copy of the value in its ASCII lower case equivalent. <a href=\"ascii/trait.AsciiExt.html#tymethod.to_ascii_lowercase\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq_ignore_ascii_case-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../src/std/ascii.rs.html#210\">source</a><a href=\"#method.eq_ignore_ascii_case-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ascii/trait.AsciiExt.html#tymethod.eq_ignore_ascii_case\" class=\"fn\">eq_ignore_ascii_case</a>(&amp;self, o: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;Self</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 1.26.0: use inherent methods instead</span></div></span><div class=\"docblock\">Checks that two values are an ASCII case-insensitive match. <a href=\"ascii/trait.AsciiExt.html#tymethod.eq_ignore_ascii_case\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.make_ascii_uppercase-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../src/std/ascii.rs.html#210\">source</a><a href=\"#method.make_ascii_uppercase-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ascii/trait.AsciiExt.html#tymethod.make_ascii_uppercase\" class=\"fn\">make_ascii_uppercase</a>(&amp;mut self)</h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 1.26.0: use inherent methods instead</span></div></span><div class=\"docblock\">Converts this type to its ASCII upper case equivalent in-place. <a href=\"ascii/trait.AsciiExt.html#tymethod.make_ascii_uppercase\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.make_ascii_lowercase-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../src/std/ascii.rs.html#210\">source</a><a href=\"#method.make_ascii_lowercase-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ascii/trait.AsciiExt.html#tymethod.make_ascii_lowercase\" class=\"fn\">make_ascii_lowercase</a>(&amp;mut self)</h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 1.26.0: use inherent methods instead</span></div></span><div class=\"docblock\">Converts this type to its ASCII lower case equivalent in-place. <a href=\"ascii/trait.AsciiExt.html#tymethod.make_ascii_lowercase\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Borrow%3Cstr%3E-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/str.rs.html#190\">source</a></span><a href=\"#impl-Borrow%3Cstr%3E-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"string/struct.String.html\" title=\"struct std::string::String\">String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/str.rs.html#192\">source</a><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BorrowMut%3Cstr%3E-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.36.0\">1.36.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/str.rs.html#198\">source</a></span><a href=\"#impl-BorrowMut%3Cstr%3E-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"string/struct.String.html\" title=\"struct std::string::String\">String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/str.rs.html#200\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"primitive.str.html\">str</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Clone-for-Box%3Cstr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1380\">source</a></span><a href=\"#impl-Clone-for-Box%3Cstr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1381\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;</h4></section></summary><div class=\"docblock\">Returns a copy of the value. <a href=\"clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class=\"docblock\">Performs copy-assignment from <code>source</code>. <a href=\"clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Concat%3Cstr%3E-for-%5BS%5D\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/str.rs.html#63\">source</a><a href=\"#impl-Concat%3Cstr%3E-for-%5BS%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S&gt; <a class=\"trait\" href=\"slice/trait.Concat.html\" title=\"trait std::slice::Concat\">Concat</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt; for <a class=\"primitive\" href=\"primitive.slice.html\">[S]</a><div class=\"where\">where\n    S: <a class=\"trait\" href=\"borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;,</div></h3></section></summary><div class=\"docblock\"><p>Note: <code>str</code> in <code>Concat&lt;str&gt;</code> is not meaningful here.\nThis type parameter of the trait only exists to enable another impl.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-11\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-11\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"slice/trait.Concat.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"string/struct.String.html\" title=\"struct std::string::String\">String</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_concat_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/27747\">#27747</a>)</span></div></span><div class=\"docblock\">The resulting type after concatenation</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.concat\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/str.rs.html#66\">source</a><a href=\"#method.concat\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"slice/trait.Concat.html#tymethod.concat\" class=\"fn\">concat</a>(slice: &amp;<a class=\"primitive\" href=\"primitive.slice.html\">[S]</a>) -&gt; <a class=\"struct\" href=\"string/struct.String.html\" title=\"struct std::string::String\">String</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_concat_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/27747\">#27747</a>)</span></div></span><div class=\"docblock\">Implementation of <a href=\"primitive.slice.html#method.concat\" title=\"method slice::concat\"><code>[T]::concat</code></a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#2398\">source</a></span><a href=\"#impl-Debug-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"primitive\" href=\"primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#2399\">source</a><a href=\"#method.fmt-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Default-for-%26mut+str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#2758\">source</a></span><a href=\"#impl-Default-for-%26mut+str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for &amp;mut <a class=\"primitive\" href=\"primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.default-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#2761\">source</a><a href=\"#method.default-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; &amp;mut <a class=\"primitive\" href=\"primitive.str.html\">str</a></h4></section></summary><div class=\"docblock\"><p>Creates an empty mutable str</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Default-for-%26str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#2749\">source</a></span><a href=\"#impl-Default-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#2752\">source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a></h4></section></summary><div class=\"docblock\"><p>Creates an empty str</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Default-for-Box%3Cstr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.17.0\">1.17.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1316\">source</a></span><a href=\"#impl-Default-for-Box%3Cstr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for <a class=\"struct\" href=\"boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.default-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1318\">source</a><a href=\"#method.default-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"struct\" href=\"boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;</h4></section></summary><div class=\"docblock\">Returns the “default value” for a type. <a href=\"default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Display-for-str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#2447\">source</a></span><a href=\"#impl-Display-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"fmt/trait.Display.html\" title=\"trait std::fmt::Display\">Display</a> for <a class=\"primitive\" href=\"primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#2448\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"fmt/trait.Display.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"fmt/trait.Display.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Error-for-%26str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#2779\">source</a></span><a href=\"#impl-Error-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl !<a class=\"trait\" href=\"error/trait.Error.html\" title=\"trait std::error::Error\">Error</a> for &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.source\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.30.0\">1.30.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/error.rs.html#84\">source</a></span><a href=\"#method.source\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"error/trait.Error.html#method.source\" class=\"fn\">source</a>(&amp;self) -&gt; <a class=\"enum\" href=\"option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;(dyn <a class=\"trait\" href=\"error/trait.Error.html\" title=\"trait std::error::Error\">Error</a> + 'static)&gt;</h4></section></summary><div class=\"docblock\">The lower-level source of this error, if any. <a href=\"error/trait.Error.html#method.source\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.description\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/error.rs.html#110\">source</a></span><a href=\"#method.description\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"error/trait.Error.html#method.description\" class=\"fn\">description</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a></h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 1.42.0: use the Display impl or to_string()</span></div></span><div class=\"docblock\"> <a href=\"error/trait.Error.html#method.description\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.cause\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/error.rs.html#120\">source</a></span><a href=\"#method.cause\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"error/trait.Error.html#method.cause\" class=\"fn\">cause</a>(&amp;self) -&gt; <a class=\"enum\" href=\"option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;dyn <a class=\"trait\" href=\"error/trait.Error.html\" title=\"trait std::error::Error\">Error</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 1.33.0: replaced by Error::source, which can support downcasting</span></div></span></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.provide\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/error.rs.html#184\">source</a><a href=\"#method.provide\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"error/trait.Error.html#method.provide\" class=\"fn\">provide</a>&lt;'a&gt;(&amp;'a self, request: &amp;mut <a class=\"struct\" href=\"error/struct.Request.html\" title=\"struct std::error::Request\">Request</a>&lt;'a&gt;)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>error_generic_member_access</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/99301\">#99301</a>)</span></div></span><div class=\"docblock\">Provides type based access to context intended for error reports. <a href=\"error/trait.Error.html#method.provide\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Extend%3C%26str%3E-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2231\">source</a></span><a href=\"#impl-Extend%3C%26str%3E-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"iter/trait.Extend.html\" title=\"trait std::iter::Extend\">Extend</a>&lt;&amp;'a <a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"string/struct.String.html\" title=\"struct std::string::String\">String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.extend\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2232\">source</a><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"iter/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;I&gt;(&amp;mut self, iter: I)<div class=\"where\">where\n    I: <a class=\"trait\" href=\"iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&lt;Item = &amp;'a <a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;,</div></h4></section></summary><div class=\"docblock\">Extends a collection with the contents of an iterator. <a href=\"iter/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2237\">source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"iter/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, s: &amp;'a <a class=\"primitive\" href=\"primitive.str.html\">str</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/72631\">#72631</a>)</span></div></span><div class=\"docblock\">Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/collect.rs.html#461\">source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"iter/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/72631\">#72631</a>)</span></div></span><div class=\"docblock\">Reserves capacity in a collection for the given number of additional elements. <a href=\"iter/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%26mut+str%3E-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.44.0\">1.44.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2721\">source</a></span><a href=\"#impl-From%3C%26mut+str%3E-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;&amp;mut <a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"string/struct.String.html\" title=\"struct std::string::String\">String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2726\">source</a><a href=\"#method.from-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: &amp;mut <a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; <a class=\"struct\" href=\"string/struct.String.html\" title=\"struct std::string::String\">String</a></h4></section></summary><div class=\"docblock\"><p>Converts a <code>&amp;mut str</code> into a <a href=\"string/struct.String.html\" title=\"struct std::string::String\"><code>String</code></a>.</p>\n<p>The result is allocated on the heap.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%26str%3E-for-Arc%3Cstr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/sync.rs.html#3539\">source</a></span><a href=\"#impl-From%3C%26str%3E-for-Arc%3Cstr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"sync/struct.Arc.html\" title=\"struct std::sync::Arc\">Arc</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/sync.rs.html#3550\">source</a><a href=\"#method.from-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(v: &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; <a class=\"struct\" href=\"sync/struct.Arc.html\" title=\"struct std::sync::Arc\">Arc</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Allocate a reference-counted <code>str</code> and copy <code>v</code> into it.</p>\n<h5 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>shared: Arc&lt;str&gt; = Arc::from(<span class=\"string\">\"eggplant\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"eggplant\"</span>, <span class=\"kw-2\">&amp;</span>shared[..]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::Arc;%0A++++let+shared:+Arc%3Cstr%3E+=+Arc::from(%22eggplant%22);%0A++++assert_eq!(%22eggplant%22,+%26shared%5B..%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%26str%3E-for-Box%3Cdyn+Error%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2559\">source</a></span><a href=\"#impl-From%3C%26str%3E-for-Box%3Cdyn+Error%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"error/trait.Error.html\" title=\"trait std::error::Error\">Error</a> + 'a&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2574\">source</a><a href=\"#method.from-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(err: &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; <a class=\"struct\" href=\"boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"error/trait.Error.html\" title=\"trait std::error::Error\">Error</a> + 'a&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <a href=\"primitive.str.html\" title=\"primitive str\"><code>str</code></a> into a box of dyn <a href=\"error/trait.Error.html\" title=\"trait std::error::Error\"><code>Error</code></a>.</p>\n<h5 id=\"examples-78\"><a class=\"doc-anchor\" href=\"#examples-78\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::error::Error;\n<span class=\"kw\">use </span>std::mem;\n\n<span class=\"kw\">let </span>a_str_error = <span class=\"string\">\"a str error\"</span>;\n<span class=\"kw\">let </span>a_boxed_error = Box::&lt;<span class=\"kw\">dyn </span>Error&gt;::from(a_str_error);\n<span class=\"macro\">assert!</span>(mem::size_of::&lt;Box&lt;<span class=\"kw\">dyn </span>Error&gt;&gt;() == mem::size_of_val(<span class=\"kw-2\">&amp;</span>a_boxed_error))</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::error::Error;%0A++++use+std::mem;%0A++++%0A++++let+a_str_error+=+%22a+str+error%22;%0A++++let+a_boxed_error+=+Box::%3Cdyn+Error%3E::from(a_str_error);%0A++++assert!(mem::size_of::%3CBox%3Cdyn+Error%3E%3E()+==+mem::size_of_val(%26a_boxed_error))%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%26str%3E-for-Box%3Cdyn+Error+%2B+Send+%2B+Sync%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2535\">source</a></span><a href=\"#impl-From%3C%26str%3E-for-Box%3Cdyn+Error+%2B+Send+%2B+Sync%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"error/trait.Error.html\" title=\"trait std::error::Error\">Error</a> + <a class=\"trait\" href=\"marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> + 'a&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2552\">source</a><a href=\"#method.from-8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(err: &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; <a class=\"struct\" href=\"boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"error/trait.Error.html\" title=\"trait std::error::Error\">Error</a> + <a class=\"trait\" href=\"marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> + 'a&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <a href=\"primitive.str.html\" title=\"primitive str\"><code>str</code></a> into a box of dyn <a href=\"error/trait.Error.html\" title=\"trait std::error::Error\"><code>Error</code></a> + <a href=\"marker/trait.Send.html\" title=\"trait std::marker::Send\"><code>Send</code></a> + <a href=\"marker/trait.Sync.html\" title=\"trait std::marker::Sync\"><code>Sync</code></a>.</p>\n<h5 id=\"examples-81\"><a class=\"doc-anchor\" href=\"#examples-81\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::error::Error;\n<span class=\"kw\">use </span>std::mem;\n\n<span class=\"kw\">let </span>a_str_error = <span class=\"string\">\"a str error\"</span>;\n<span class=\"kw\">let </span>a_boxed_error = Box::&lt;<span class=\"kw\">dyn </span>Error + Send + Sync&gt;::from(a_str_error);\n<span class=\"macro\">assert!</span>(\n    mem::size_of::&lt;Box&lt;<span class=\"kw\">dyn </span>Error + Send + Sync&gt;&gt;() == mem::size_of_val(<span class=\"kw-2\">&amp;</span>a_boxed_error))</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::error::Error;%0A++++use+std::mem;%0A++++%0A++++let+a_str_error+=+%22a+str+error%22;%0A++++let+a_boxed_error+=+Box::%3Cdyn+Error+%2B+Send+%2B+Sync%3E::from(a_str_error);%0A++++assert!(%0A++++++++mem::size_of::%3CBox%3Cdyn+Error+%2B+Send+%2B+Sync%3E%3E()+==+mem::size_of_val(%26a_boxed_error))%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%26str%3E-for-Box%3Cstr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.17.0\">1.17.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1602\">source</a></span><a href=\"#impl-From%3C%26str%3E-for-Box%3Cstr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-10\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1615\">source</a><a href=\"#method.from-10\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; <a class=\"struct\" href=\"boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <code>&amp;str</code> into a <code>Box&lt;str&gt;</code></p>\n<p>This conversion allocates on the heap\nand performs a copy of <code>s</code>.</p>\n<h5 id=\"examples-82\"><a class=\"doc-anchor\" href=\"#examples-82\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>boxed: Box&lt;str&gt; = Box::from(<span class=\"string\">\"hello\"</span>);\n<span class=\"macro\">println!</span>(<span class=\"string\">\"{boxed}\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+boxed:+Box%3Cstr%3E+=+Box::from(%22hello%22);%0A++++println!(%22%7Bboxed%7D%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%26str%3E-for-Cow%3C'a,+str%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2809\">source</a></span><a href=\"#impl-From%3C%26str%3E-for-Cow%3C'a,+str%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;&amp;'a <a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt; for <a class=\"enum\" href=\"borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2823\">source</a><a href=\"#method.from-6\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: &amp;'a <a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a string slice into a <a href=\"borrow/enum.Cow.html#variant.Borrowed\" title=\"borrow::Cow::Borrowed\"><code>Borrowed</code></a> variant.\nNo heap allocation is performed, and the string\nis not copied.</p>\n<h5 id=\"example-2\"><a class=\"doc-anchor\" href=\"#example-2\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(Cow::from(<span class=\"string\">\"eggplant\"</span>), Cow::Borrowed(<span class=\"string\">\"eggplant\"</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::borrow::Cow;%0A++++assert_eq!(Cow::from(%22eggplant%22),+Cow::Borrowed(%22eggplant%22));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%26str%3E-for-Rc%3Cstr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/rc.rs.html#2580\">source</a></span><a href=\"#impl-From%3C%26str%3E-for-Rc%3Cstr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"rc/struct.Rc.html\" title=\"struct std::rc::Rc\">Rc</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/rc.rs.html#2591\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(v: &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; <a class=\"struct\" href=\"rc/struct.Rc.html\" title=\"struct std::rc::Rc\">Rc</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Allocate a reference-counted string slice and copy <code>v</code> into it.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>shared: Rc&lt;str&gt; = Rc::from(<span class=\"string\">\"statue\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"statue\"</span>, <span class=\"kw-2\">&amp;</span>shared[..]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::rc::Rc;%0A++++let+shared:+Rc%3Cstr%3E+=+Rc::from(%22statue%22);%0A++++assert_eq!(%22statue%22,+%26shared%5B..%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%26str%3E-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2709\">source</a></span><a href=\"#impl-From%3C%26str%3E-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"string/struct.String.html\" title=\"struct std::string::String\">String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-9\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2714\">source</a><a href=\"#method.from-9\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; <a class=\"struct\" href=\"string/struct.String.html\" title=\"struct std::string::String\">String</a></h4></section></summary><div class=\"docblock\"><p>Converts a <code>&amp;str</code> into a <a href=\"string/struct.String.html\" title=\"struct std::string::String\"><code>String</code></a>.</p>\n<p>The result is allocated on the heap.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%26str%3E-for-Vec%3Cu8%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3497\">source</a></span><a href=\"#impl-From%3C%26str%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"vec/struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3505\">source</a><a href=\"#method.from-7\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; <a class=\"struct\" href=\"vec/struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec<u8>\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Allocate a <code>Vec&lt;u8&gt;</code> and fill it with a UTF-8 string.</p>\n<h5 id=\"examples-80\"><a class=\"doc-anchor\" href=\"#examples-80\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(Vec::from(<span class=\"string\">\"123\"</span>), <span class=\"macro\">vec!</span>[<span class=\"string\">b'1'</span>, <span class=\"string\">b'2'</span>, <span class=\"string\">b'3'</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(Vec::from(%22123%22),+vec!%5Bb'1',+b'2',+b'3'%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CCow%3C'_,+str%3E%3E-for-Box%3Cstr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0\">1.45.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1622\">source</a></span><a href=\"#impl-From%3CCow%3C'_,+str%3E%3E-for-Box%3Cstr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"enum\" href=\"borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'_, <a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;&gt; for <a class=\"struct\" href=\"boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1647\">source</a><a href=\"#method.from-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(cow: <a class=\"enum\" href=\"borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'_, <a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;) -&gt; <a class=\"struct\" href=\"boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <code>Cow&lt;'_, str&gt;</code> into a <code>Box&lt;str&gt;</code></p>\n<p>When <code>cow</code> is the <code>Cow::Borrowed</code> variant, this\nconversion allocates on the heap and copies the\nunderlying <code>str</code>. Otherwise, it will try to reuse the owned\n<code>String</code>’s allocation.</p>\n<h5 id=\"examples-77\"><a class=\"doc-anchor\" href=\"#examples-77\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::borrow::Cow;\n\n<span class=\"kw\">let </span>unboxed = Cow::Borrowed(<span class=\"string\">\"hello\"</span>);\n<span class=\"kw\">let </span>boxed: Box&lt;str&gt; = Box::from(unboxed);\n<span class=\"macro\">println!</span>(<span class=\"string\">\"{boxed}\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::borrow::Cow;%0A++++%0A++++let+unboxed+=+Cow::Borrowed(%22hello%22);%0A++++let+boxed:+Box%3Cstr%3E+=+Box::from(unboxed);%0A++++println!(%22%7Bboxed%7D%22);%0A%7D&amp;edition=2021\">Run</a></div>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>unboxed = Cow::Owned(<span class=\"string\">\"hello\"</span>.to_string());\n<span class=\"kw\">let </span>boxed: Box&lt;str&gt; = Box::from(unboxed);\n<span class=\"macro\">println!</span>(<span class=\"string\">\"{boxed}\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::borrow::Cow;%0A++++let+unboxed+=+Cow::Owned(%22hello%22.to_string());%0A++++let+boxed:+Box%3Cstr%3E+=+Box::from(unboxed);%0A++++println!(%22%7Bboxed%7D%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CString%3E-for-Box%3Cstr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2766\">source</a></span><a href=\"#impl-From%3CString%3E-for-Box%3Cstr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"string/struct.String.html\" title=\"struct std::string::String\">String</a>&gt; for <a class=\"struct\" href=\"boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2778\">source</a><a href=\"#method.from-5\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: <a class=\"struct\" href=\"string/struct.String.html\" title=\"struct std::string::String\">String</a>) -&gt; <a class=\"struct\" href=\"boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts the given <a href=\"string/struct.String.html\" title=\"struct std::string::String\"><code>String</code></a> to a boxed <code>str</code> slice that is owned.</p>\n<h5 id=\"examples-79\"><a class=\"doc-anchor\" href=\"#examples-79\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s1: String = String::from(<span class=\"string\">\"hello world\"</span>);\n<span class=\"kw\">let </span>s2: Box&lt;str&gt; = Box::from(s1);\n<span class=\"kw\">let </span>s3: String = String::from(s2);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"hello world\"</span>, s3)</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s1:+String+=+String::from(%22hello+world%22);%0A++++let+s2:+Box%3Cstr%3E+=+Box::from(s1);%0A++++let+s3:+String+=+String::from(s2);%0A++++%0A++++assert_eq!(%22hello+world%22,+s3)%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-FromIterator%3C%26char%3E-for-Box%3Cstr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0\">1.80.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2179\">source</a></span><a href=\"#impl-FromIterator%3C%26char%3E-for-Box%3Cstr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"iter/trait.FromIterator.html\" title=\"trait std::iter::FromIterator\">FromIterator</a>&lt;&amp;'a <a class=\"primitive\" href=\"primitive.char.html\">char</a>&gt; for <a class=\"struct\" href=\"boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_iter-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2180\">source</a><a href=\"#method.from_iter-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"iter/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;T&gt;(iter: T) -&gt; <a class=\"struct\" href=\"boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&lt;Item = &amp;'a <a class=\"primitive\" href=\"primitive.char.html\">char</a>&gt;,</div></h4></section></summary><div class=\"docblock\">Creates a value from an iterator. <a href=\"iter/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-FromIterator%3C%26str%3E-for-Box%3Cstr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0\">1.80.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2187\">source</a></span><a href=\"#impl-FromIterator%3C%26str%3E-for-Box%3Cstr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"iter/trait.FromIterator.html\" title=\"trait std::iter::FromIterator\">FromIterator</a>&lt;&amp;'a <a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_iter-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2188\">source</a><a href=\"#method.from_iter-6\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"iter/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;T&gt;(iter: T) -&gt; <a class=\"struct\" href=\"boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&lt;Item = &amp;'a <a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;,</div></h4></section></summary><div class=\"docblock\">Creates a value from an iterator. <a href=\"iter/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-FromIterator%3C%26str%3E-for-Cow%3C'a,+str%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2883\">source</a></span><a href=\"#impl-FromIterator%3C%26str%3E-for-Cow%3C'a,+str%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; <a class=\"trait\" href=\"iter/trait.FromIterator.html\" title=\"trait std::iter::FromIterator\">FromIterator</a>&lt;&amp;'b <a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt; for <a class=\"enum\" href=\"borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_iter-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2884\">source</a><a href=\"#method.from_iter-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"iter/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(it: I) -&gt; <a class=\"enum\" href=\"borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&lt;Item = &amp;'b <a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;,</div></h4></section></summary><div class=\"docblock\">Creates a value from an iterator. <a href=\"iter/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-FromIterator%3C%26str%3E-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2133\">source</a></span><a href=\"#impl-FromIterator%3C%26str%3E-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"iter/trait.FromIterator.html\" title=\"trait std::iter::FromIterator\">FromIterator</a>&lt;&amp;'a <a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"string/struct.String.html\" title=\"struct std::string::String\">String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_iter-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2134\">source</a><a href=\"#method.from_iter-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"iter/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"string/struct.String.html\" title=\"struct std::string::String\">String</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&lt;Item = &amp;'a <a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;,</div></h4></section></summary><div class=\"docblock\">Creates a value from an iterator. <a href=\"iter/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-FromIterator%3CBox%3Cstr,+A%3E%3E-for-Box%3Cstr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0\">1.80.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2203\">source</a></span><a href=\"#impl-FromIterator%3CBox%3Cstr,+A%3E%3E-for-Box%3Cstr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"iter/trait.FromIterator.html\" title=\"trait std::iter::FromIterator\">FromIterator</a>&lt;<a class=\"struct\" href=\"boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>, A&gt;&gt; for <a class=\"struct\" href=\"boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_iter-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2204\">source</a><a href=\"#method.from_iter-7\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"iter/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;T&gt;(iter: T) -&gt; <a class=\"struct\" href=\"boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"struct\" href=\"boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>, A&gt;&gt;,</div></h4></section></summary><div class=\"docblock\">Creates a value from an iterator. <a href=\"iter/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-FromIterator%3CCow%3C'a,+str%3E%3E-for-Box%3Cstr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0\">1.80.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2211\">source</a></span><a href=\"#impl-FromIterator%3CCow%3C'a,+str%3E%3E-for-Box%3Cstr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"iter/trait.FromIterator.html\" title=\"trait std::iter::FromIterator\">FromIterator</a>&lt;<a class=\"enum\" href=\"borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;&gt; for <a class=\"struct\" href=\"boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_iter-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2212\">source</a><a href=\"#method.from_iter-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"iter/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;T&gt;(iter: T) -&gt; <a class=\"struct\" href=\"boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"enum\" href=\"borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;&gt;,</div></h4></section></summary><div class=\"docblock\">Creates a value from an iterator. <a href=\"iter/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-FromIterator%3CString%3E-for-Box%3Cstr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0\">1.80.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2195\">source</a></span><a href=\"#impl-FromIterator%3CString%3E-for-Box%3Cstr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"iter/trait.FromIterator.html\" title=\"trait std::iter::FromIterator\">FromIterator</a>&lt;<a class=\"struct\" href=\"string/struct.String.html\" title=\"struct std::string::String\">String</a>&gt; for <a class=\"struct\" href=\"boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_iter-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2196\">source</a><a href=\"#method.from_iter-5\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"iter/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;T&gt;(iter: T) -&gt; <a class=\"struct\" href=\"boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"struct\" href=\"string/struct.String.html\" title=\"struct std::string::String\">String</a>&gt;,</div></h4></section></summary><div class=\"docblock\">Creates a value from an iterator. <a href=\"iter/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-FromIterator%3Cchar%3E-for-Box%3Cstr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0\">1.80.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2171\">source</a></span><a href=\"#impl-FromIterator%3Cchar%3E-for-Box%3Cstr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"iter/trait.FromIterator.html\" title=\"trait std::iter::FromIterator\">FromIterator</a>&lt;<a class=\"primitive\" href=\"primitive.char.html\">char</a>&gt; for <a class=\"struct\" href=\"boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2172\">source</a><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"iter/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;T&gt;(iter: T) -&gt; <a class=\"struct\" href=\"boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"primitive.char.html\">char</a>&gt;,</div></h4></section></summary><div class=\"docblock\">Creates a value from an iterator. <a href=\"iter/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Hash-for-str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#868\">source</a></span><a href=\"#impl-Hash-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"primitive\" href=\"primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#870\">source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;H&gt;(&amp;self, state: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class=\"docblock\">Feeds this value into the given <a href=\"hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Index%3CI%3E-for-str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#54-56\">source</a></span><a href=\"#impl-Index%3CI%3E-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I&gt; <a class=\"trait\" href=\"ops/trait.Index.html\" title=\"trait std::ops::Index\">Index</a>&lt;I&gt; for <a class=\"primitive\" href=\"primitive.str.html\">str</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-7\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-7\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"ops/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;I as <a class=\"trait\" href=\"slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type std::slice::SliceIndex::Output\">Output</a></h4></section></summary><div class=\"docblock\">The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.index-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#61\">source</a><a href=\"#method.index-7\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ops/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: I) -&gt; &amp;&lt;I as <a class=\"trait\" href=\"slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type std::slice::SliceIndex::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the indexing (<code>container[index]</code>) operation. <a href=\"ops/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-IndexMut%3CI%3E-for-str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#67-69\">source</a></span><a href=\"#impl-IndexMut%3CI%3E-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I&gt; <a class=\"trait\" href=\"ops/trait.IndexMut.html\" title=\"trait std::ops::IndexMut\">IndexMut</a>&lt;I&gt; for <a class=\"primitive\" href=\"primitive.str.html\">str</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.index_mut-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#72\">source</a><a href=\"#method.index_mut-7\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ops/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(&amp;mut self, index: I) -&gt; &amp;mut &lt;I as <a class=\"trait\" href=\"slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type std::slice::SliceIndex::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the mutable indexing (<code>container[index]</code>) operation. <a href=\"ops/trait.IndexMut.html#tymethod.index_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Join%3C%26str%3E-for-%5BS%5D\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/str.rs.html#73\">source</a><a href=\"#impl-Join%3C%26str%3E-for-%5BS%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S&gt; <a class=\"trait\" href=\"slice/trait.Join.html\" title=\"trait std::slice::Join\">Join</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt; for <a class=\"primitive\" href=\"primitive.slice.html\">[S]</a><div class=\"where\">where\n    S: <a class=\"trait\" href=\"borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-10\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-10\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"slice/trait.Join.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"string/struct.String.html\" title=\"struct std::string::String\">String</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_concat_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/27747\">#27747</a>)</span></div></span><div class=\"docblock\">The resulting type after concatenation</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.join\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/str.rs.html#76\">source</a><a href=\"#method.join\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"slice/trait.Join.html#tymethod.join\" class=\"fn\">join</a>(slice: &amp;<a class=\"primitive\" href=\"primitive.slice.html\">[S]</a>, sep: &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; <a class=\"struct\" href=\"string/struct.String.html\" title=\"struct std::string::String\">String</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_concat_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/27747\">#27747</a>)</span></div></span><div class=\"docblock\">Implementation of <a href=\"primitive.slice.html#method.join\" title=\"method slice::join\"><code>[T]::join</code></a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Ord-for-str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#20\">source</a></span><a href=\"#impl-Ord-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"primitive\" href=\"primitive.str.html\">str</a></h3></section></summary><div class=\"docblock\"><p>Implements ordering of strings.</p>\n<p>Strings are ordered  <a href=\"cmp/trait.Ord.html#lexicographical-comparison\" title=\"trait std::cmp::Ord\">lexicographically</a> by their byte values. This orders Unicode code\npoints based on their positions in the code charts. This is not necessarily the same as\n“alphabetical” order, which varies by language and locale. Sorting strings according to\nculturally-accepted standards requires locale-specific data that is outside the scope of\nthe <code>str</code> type.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#22\">source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a></h4></section></summary><div class=\"docblock\">This method returns an <a href=\"cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3C%26str%3E-for-Cow%3C'a,+str%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2356\">source</a></span><a href=\"#impl-PartialEq%3C%26str%3E-for-Cow%3C'a,+str%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; <a class=\"trait\" href=\"cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;&amp;'b <a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt; for <a class=\"enum\" href=\"borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2356\">source</a><a href=\"#method.eq-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;'b <a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2356\">source</a><a href=\"#method.ne-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;&amp;'b <a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3C%26str%3E-for-OsString\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.29.0\">1.29.0</span> · <a class=\"src\" href=\"../src/std/ffi/os_str.rs.html#657-662\">source</a></span><a href=\"#impl-PartialEq%3C%26str%3E-for-OsString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"ffi/struct.OsString.html\" title=\"struct std::ffi::OsString\">OsString</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-12\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../src/std/ffi/os_str.rs.html#659-661\">source</a><a href=\"#method.eq-12\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-12\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne-12\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3C%26str%3E-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2352\">source</a></span><a href=\"#impl-PartialEq%3C%26str%3E-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; <a class=\"trait\" href=\"cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;&amp;'a <a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"string/struct.String.html\" title=\"struct std::string::String\">String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2352\">source</a><a href=\"#method.eq-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;'a <a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2352\">source</a><a href=\"#method.ne-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;&amp;'a <a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3CCow%3C'a,+str%3E%3E-for-%26str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2356\">source</a></span><a href=\"#impl-PartialEq%3CCow%3C'a,+str%3E%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; <a class=\"trait\" href=\"cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"enum\" href=\"borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;&gt; for &amp;'b <a class=\"primitive\" href=\"primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2356\">source</a><a href=\"#method.eq-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2356\">source</a><a href=\"#method.ne-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3CCow%3C'a,+str%3E%3E-for-str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2354\">source</a></span><a href=\"#impl-PartialEq%3CCow%3C'a,+str%3E%3E-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; <a class=\"trait\" href=\"cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"enum\" href=\"borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;&gt; for <a class=\"primitive\" href=\"primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2354\">source</a><a href=\"#method.eq-8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2354\">source</a><a href=\"#method.ne-8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3COsStr%3E-for-str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../src/std/ffi/os_str.rs.html#1372-1377\">source</a></span><a href=\"#impl-PartialEq%3COsStr%3E-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt; for <a class=\"primitive\" href=\"primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-9\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../src/std/ffi/os_str.rs.html#1374-1376\">source</a><a href=\"#method.eq-9\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-9\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne-9\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3COsString%3E-for-%26str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.29.0\">1.29.0</span> · <a class=\"src\" href=\"../src/std/ffi/os_str.rs.html#665-670\">source</a></span><a href=\"#impl-PartialEq%3COsString%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"ffi/struct.OsString.html\" title=\"struct std::ffi::OsString\">OsString</a>&gt; for &amp;'a <a class=\"primitive\" href=\"primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-13\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../src/std/ffi/os_str.rs.html#667-669\">source</a><a href=\"#method.eq-13\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"ffi/struct.OsString.html\" title=\"struct std::ffi::OsString\">OsString</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-13\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne-13\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3COsString%3E-for-str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../src/std/ffi/os_str.rs.html#649-654\">source</a></span><a href=\"#impl-PartialEq%3COsString%3E-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"ffi/struct.OsString.html\" title=\"struct std::ffi::OsString\">OsString</a>&gt; for <a class=\"primitive\" href=\"primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-11\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../src/std/ffi/os_str.rs.html#651-653\">source</a><a href=\"#method.eq-11\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"ffi/struct.OsString.html\" title=\"struct std::ffi::OsString\">OsString</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-11\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne-11\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3CString%3E-for-%26str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2352\">source</a></span><a href=\"#impl-PartialEq%3CString%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; <a class=\"trait\" href=\"cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"string/struct.String.html\" title=\"struct std::string::String\">String</a>&gt; for &amp;'a <a class=\"primitive\" href=\"primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2352\">source</a><a href=\"#method.eq-5\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"string/struct.String.html\" title=\"struct std::string::String\">String</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2352\">source</a><a href=\"#method.ne-5\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"string/struct.String.html\" title=\"struct std::string::String\">String</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3CString%3E-for-str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2351\">source</a></span><a href=\"#impl-PartialEq%3CString%3E-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; <a class=\"trait\" href=\"cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"string/struct.String.html\" title=\"struct std::string::String\">String</a>&gt; for <a class=\"primitive\" href=\"primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2351\">source</a><a href=\"#method.eq-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"string/struct.String.html\" title=\"struct std::string::String\">String</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2351\">source</a><a href=\"#method.ne-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"string/struct.String.html\" title=\"struct std::string::String\">String</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3Cstr%3E-for-Cow%3C'a,+str%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2354\">source</a></span><a href=\"#impl-PartialEq%3Cstr%3E-for-Cow%3C'a,+str%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; <a class=\"trait\" href=\"cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt; for <a class=\"enum\" href=\"borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2354\">source</a><a href=\"#method.eq-6\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2354\">source</a><a href=\"#method.ne-6\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3Cstr%3E-for-OsStr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../src/std/ffi/os_str.rs.html#1364-1369\">source</a></span><a href=\"#impl-PartialEq%3Cstr%3E-for-OsStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-10\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../src/std/ffi/os_str.rs.html#1366-1368\">source</a><a href=\"#method.eq-10\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-10\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne-10\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3Cstr%3E-for-OsString\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../src/std/ffi/os_str.rs.html#641-646\">source</a></span><a href=\"#impl-PartialEq%3Cstr%3E-for-OsString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"ffi/struct.OsString.html\" title=\"struct std::ffi::OsString\">OsString</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-14\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../src/std/ffi/os_str.rs.html#643-645\">source</a><a href=\"#method.eq-14\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-14\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne-14\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3Cstr%3E-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2351\">source</a></span><a href=\"#impl-PartialEq%3Cstr%3E-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; <a class=\"trait\" href=\"cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"string/struct.String.html\" title=\"struct std::string::String\">String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2351\">source</a><a href=\"#method.eq-7\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2351\">source</a><a href=\"#method.ne-7\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq-for-str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#28\">source</a></span><a href=\"#impl-PartialEq-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a> for <a class=\"primitive\" href=\"primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#30\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialOrd%3Cstr%3E-for-OsStr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../src/std/ffi/os_str.rs.html#1407-1412\">source</a></span><a href=\"#impl-PartialOrd%3Cstr%3E-for-OsStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../src/std/ffi/os_str.rs.html#1409-1411\">source</a><a href=\"#method.partial_cmp-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\">This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lt-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180\">source</a></span><a href=\"#method.lt-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.le-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198\">source</a></span><a href=\"#method.le-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gt-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215\">source</a></span><a href=\"#method.gt-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ge-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233\">source</a></span><a href=\"#method.ge-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialOrd%3Cstr%3E-for-OsString\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../src/std/ffi/os_str.rs.html#700-705\">source</a></span><a href=\"#impl-PartialOrd%3Cstr%3E-for-OsString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"ffi/struct.OsString.html\" title=\"struct std::ffi::OsString\">OsString</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../src/std/ffi/os_str.rs.html#702-704\">source</a><a href=\"#method.partial_cmp-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\">This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lt-2\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180\">source</a></span><a href=\"#method.lt-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.le-2\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198\">source</a></span><a href=\"#method.le-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gt-2\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215\">source</a></span><a href=\"#method.gt-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ge-2\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233\">source</a></span><a href=\"#method.ge-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialOrd-for-str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#46\">source</a></span><a href=\"#impl-PartialOrd-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a> for <a class=\"primitive\" href=\"primitive.str.html\">str</a></h3></section></summary><div class=\"docblock\"><p>Implements comparison operations on strings.</p>\n<p>Strings are compared <a href=\"cmp/trait.Ord.html#lexicographical-comparison\" title=\"trait std::cmp::Ord\">lexicographically</a> by their byte values. This compares Unicode code\npoints based on their positions in the code charts. This is not necessarily the same as\n“alphabetical” order, which varies by language and locale. Comparing strings according to\nculturally-accepted standards requires locale-specific data that is outside the scope of\nthe <code>str</code> type.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#48\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\">This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180\">source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198\">source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215\">source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233\">source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Pattern%3C'a%3E-for-%26str\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#952\">source</a><a href=\"#impl-Pattern%3C'a%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; <a class=\"trait\" href=\"str/pattern/trait.Pattern.html\" title=\"trait std::str::pattern::Pattern\">Pattern</a>&lt;'a&gt; for &amp;'b <a class=\"primitive\" href=\"primitive.str.html\">str</a></h3></section></summary><div class=\"docblock\"><p>Non-allocating substring search.</p>\n<p>Will handle the pattern <code>\"\"</code> as returning empty matches at each character\nboundary.</p>\n<h4 id=\"examples-75\"><a class=\"doc-anchor\" href=\"#examples-75\">§</a>Examples</h4>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"Hello world\"</span>.find(<span class=\"string\">\"world\"</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">6</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(%22Hello+world%22.find(%22world%22),+Some(6));%0A%7D&amp;edition=2021\">Run</a></div>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_prefix_of\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#962\">source</a><a href=\"#method.is_prefix_of\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"str/pattern/trait.Pattern.html#method.is_prefix_of\" class=\"fn\">is_prefix_of</a>(self, haystack: &amp;'a <a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>pattern</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/27721\">#27721</a>)</span></div></span></summary><div class=\"docblock\"><p>Checks whether the pattern matches at the front of the haystack.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_contained_in\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#968\">source</a><a href=\"#method.is_contained_in\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"str/pattern/trait.Pattern.html#method.is_contained_in\" class=\"fn\">is_contained_in</a>(self, haystack: &amp;'a <a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>pattern</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/27721\">#27721</a>)</span></div></span></summary><div class=\"docblock\"><p>Checks whether the pattern matches anywhere in the haystack</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.strip_prefix_of\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#994\">source</a><a href=\"#method.strip_prefix_of\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"str/pattern/trait.Pattern.html#method.strip_prefix_of\" class=\"fn\">strip_prefix_of</a>(self, haystack: &amp;'a <a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;'a <a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>pattern</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/27721\">#27721</a>)</span></div></span></summary><div class=\"docblock\"><p>Removes the pattern from the front of haystack, if it matches.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_suffix_of\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#1005\">source</a><a href=\"#method.is_suffix_of\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"str/pattern/trait.Pattern.html#method.is_suffix_of\" class=\"fn\">is_suffix_of</a>(self, haystack: &amp;'a <a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>pattern</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/27721\">#27721</a>)</span></div></span></summary><div class=\"docblock\"><p>Checks whether the pattern matches at the back of the haystack.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.strip_suffix_of\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#1011\">source</a><a href=\"#method.strip_suffix_of\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"str/pattern/trait.Pattern.html#method.strip_suffix_of\" class=\"fn\">strip_suffix_of</a>(self, haystack: &amp;'a <a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;'a <a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>pattern</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/27721\">#27721</a>)</span></div></span></summary><div class=\"docblock\"><p>Removes the pattern from the back of haystack, if it matches.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Searcher\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Searcher\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"str/pattern/trait.Pattern.html#associatedtype.Searcher\" class=\"associatedtype\">Searcher</a> = <a class=\"struct\" href=\"str/pattern/struct.StrSearcher.html\" title=\"struct std::str::pattern::StrSearcher\">StrSearcher</a>&lt;'a, 'b&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>pattern</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/27721\">#27721</a>)</span></div></span><div class=\"docblock\">Associated searcher for this pattern</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_searcher\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#956\">source</a><a href=\"#method.into_searcher\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"str/pattern/trait.Pattern.html#tymethod.into_searcher\" class=\"fn\">into_searcher</a>(self, haystack: &amp;'a <a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; <a class=\"struct\" href=\"str/pattern/struct.StrSearcher.html\" title=\"struct std::str::pattern::StrSearcher\">StrSearcher</a>&lt;'a, 'b&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>pattern</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/27721\">#27721</a>)</span></div></span><div class=\"docblock\">Constructs the associated searcher from\n<code>self</code> and the <code>haystack</code> to search in.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SliceIndex%3Cstr%3E-for-(Bound%3Cusize%3E,+Bound%3Cusize%3E)\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.73.0\">1.73.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#278\">source</a></span><a href=\"#impl-SliceIndex%3Cstr%3E-for-(Bound%3Cusize%3E,+Bound%3Cusize%3E)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt; for (<a class=\"enum\" href=\"ops/enum.Bound.html\" title=\"enum std::ops::Bound\">Bound</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;, <a class=\"enum\" href=\"ops/enum.Bound.html\" title=\"enum std::ops::Bound\">Bound</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;)</h3></section></summary><div class=\"docblock\"><p>Implements substring slicing for arbitrary bounds.</p>\n<p>Returns a slice of the given string bounded by the byte indices\nprovided by each bound.</p>\n<p>This operation is <em>O</em>(1).</p>\n<h4 id=\"panics-7\"><a class=\"doc-anchor\" href=\"#panics-7\">§</a>Panics</h4>\n<p>Panics if <code>begin</code> or <code>end</code> (if it exists and once adjusted for\ninclusion/exclusion) does not point to the starting byte offset of\na character (as defined by <code>is_char_boundary</code>), if <code>begin &gt; end</code>, or if\n<code>end &gt; len</code>.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-5\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-5\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"slice/trait.SliceIndex.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.str.html\">str</a></h4></section></summary><div class=\"docblock\">The output type returned by methods.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#282\">source</a><a href=\"#method.get-6\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"slice/trait.SliceIndex.html#tymethod.get\" class=\"fn\">get</a>(self, slice: &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class=\"docblock\">Returns a shared reference to the output at this location, if in\nbounds.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_mut-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#287\">source</a><a href=\"#method.get_mut-6\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"slice/trait.SliceIndex.html#tymethod.get_mut\" class=\"fn\">get_mut</a>(self, slice: &amp;mut <a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;mut <a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class=\"docblock\">Returns a mutable reference to the output at this location, if in\nbounds.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_unchecked-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#292\">source</a><a href=\"#method.get_unchecked-6\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"slice/trait.SliceIndex.html#tymethod.get_unchecked\" class=\"fn\">get_unchecked</a>(self, slice: <a class=\"primitive\" href=\"primitive.pointer.html\">*const </a><a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"primitive.pointer.html\">*const </a><a class=\"primitive\" href=\"primitive.str.html\">str</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class=\"docblock\">Returns a pointer to the output at this location, without\nperforming any bounds checking.\nCalling this method with an out-of-bounds index or a dangling <code>slice</code> pointer\nis <em><a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">undefined behavior</a></em> even if the resulting pointer is not used.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_unchecked_mut-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#299\">source</a><a href=\"#method.get_unchecked_mut-6\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"slice/trait.SliceIndex.html#tymethod.get_unchecked_mut\" class=\"fn\">get_unchecked_mut</a>(self, slice: <a class=\"primitive\" href=\"primitive.pointer.html\">*mut </a><a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"primitive.pointer.html\">*mut </a><a class=\"primitive\" href=\"primitive.str.html\">str</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class=\"docblock\">Returns a mutable pointer to the output at this location, without\nperforming any bounds checking.\nCalling this method with an out-of-bounds index or a dangling <code>slice</code> pointer\nis <em><a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">undefined behavior</a></em> even if the resulting pointer is not used.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.index-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#306\">source</a><a href=\"#method.index-5\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"slice/trait.SliceIndex.html#tymethod.index\" class=\"fn\">index</a>(self, slice: &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class=\"docblock\">Returns a shared reference to the output at this location, panicking\nif out of bounds.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.index_mut-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#311\">source</a><a href=\"#method.index_mut-5\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"slice/trait.SliceIndex.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(self, slice: &amp;mut <a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; &amp;mut <a class=\"primitive\" href=\"primitive.str.html\">str</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class=\"docblock\">Returns a mutable reference to the output at this location, panicking\nif out of bounds.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SliceIndex%3Cstr%3E-for-Range%3Cusize%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0, const unstable\">1.20.0 (const: unstable)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#163\">source</a></span><a href=\"#impl-SliceIndex%3Cstr%3E-for-Range%3Cusize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"ops/struct.Range.html\" title=\"struct std::ops::Range\">Range</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;</h3></section></summary><div class=\"docblock\"><p>Implements substring slicing with syntax <code>&amp;self[begin .. end]</code> or <code>&amp;mut self[begin .. end]</code>.</p>\n<p>Returns a slice of the given string from the byte range\n[<code>begin</code>, <code>end</code>).</p>\n<p>This operation is <em>O</em>(1).</p>\n<p>Prior to 1.20.0, these indexing operations were still supported by\ndirect implementation of <code>Index</code> and <code>IndexMut</code>.</p>\n<h4 id=\"panics-8\"><a class=\"doc-anchor\" href=\"#panics-8\">§</a>Panics</h4>\n<p>Panics if <code>begin</code> or <code>end</code> does not point to the starting byte offset of\na character (as defined by <code>is_char_boundary</code>), if <code>begin &gt; end</code>, or if\n<code>end &gt; len</code>.</p>\n<h4 id=\"examples-74\"><a class=\"doc-anchor\" href=\"#examples-74\">§</a>Examples</h4>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">\"Löwe 老虎 Léopard\"</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>s[<span class=\"number\">0 </span>.. <span class=\"number\">1</span>], <span class=\"string\">\"L\"</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>s[<span class=\"number\">1 </span>.. <span class=\"number\">9</span>], <span class=\"string\">\"öwe 老\"</span>);\n\n<span class=\"comment\">// these will panic:\n// byte 2 lies within `ö`:\n// &amp;s[2 ..3];\n\n// byte 8 lies within `老`\n// &amp;s[1 .. 8];\n\n// byte 100 is outside the string\n// &amp;s[3 .. 100];</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s+=+%22L%C3%B6we+%E8%80%81%E8%99%8E+L%C3%A9opard%22;%0A++++assert_eq!(%26s%5B0+..+1%5D,+%22L%22);%0A++++%0A++++assert_eq!(%26s%5B1+..+9%5D,+%22%C3%B6we+%E8%80%81%22);%0A++++%0A++++//+these+will+panic:%0A++++//+byte+2+lies+within+%60%C3%B6%60:%0A++++//+%26s%5B2+..3%5D;%0A++++%0A++++//+byte+8+lies+within+%60%E8%80%81%60%0A++++//+%26s%5B1+..+8%5D;%0A++++%0A++++//+byte+100+is+outside+the+string%0A++++//+%26s%5B3+..+100%5D;%0A%7D&amp;edition=2021\">Run</a></div>\n</div><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-6\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-6\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"slice/trait.SliceIndex.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.str.html\">str</a></h4></section></summary><div class=\"docblock\">The output type returned by methods.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#166\">source</a><a href=\"#method.get-7\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"slice/trait.SliceIndex.html#tymethod.get\" class=\"fn\">get</a>(self, slice: &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;&lt;<a class=\"struct\" href=\"ops/struct.Range.html\" title=\"struct std::ops::Range\">Range</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; as <a class=\"trait\" href=\"slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type std::slice::SliceIndex::Output\">Output</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class=\"docblock\">Returns a shared reference to the output at this location, if in\nbounds.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_mut-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#180\">source</a><a href=\"#method.get_mut-7\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"slice/trait.SliceIndex.html#tymethod.get_mut\" class=\"fn\">get_mut</a>(\n    self,\n    slice: &amp;mut <a class=\"primitive\" href=\"primitive.str.html\">str</a>,\n) -&gt; <a class=\"enum\" href=\"option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;mut &lt;<a class=\"struct\" href=\"ops/struct.Range.html\" title=\"struct std::ops::Range\">Range</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; as <a class=\"trait\" href=\"slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type std::slice::SliceIndex::Output\">Output</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class=\"docblock\">Returns a mutable reference to the output at this location, if in\nbounds.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_unchecked-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#193\">source</a><a href=\"#method.get_unchecked-7\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"slice/trait.SliceIndex.html#tymethod.get_unchecked\" class=\"fn\">get_unchecked</a>(\n    self,\n    slice: <a class=\"primitive\" href=\"primitive.pointer.html\">*const </a><a class=\"primitive\" href=\"primitive.str.html\">str</a>,\n) -&gt; <a class=\"primitive\" href=\"primitive.pointer.html\">*const </a>&lt;<a class=\"struct\" href=\"ops/struct.Range.html\" title=\"struct std::ops::Range\">Range</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; as <a class=\"trait\" href=\"slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type std::slice::SliceIndex::Output\">Output</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class=\"docblock\">Returns a pointer to the output at this location, without\nperforming any bounds checking.\nCalling this method with an out-of-bounds index or a dangling <code>slice</code> pointer\nis <em><a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">undefined behavior</a></em> even if the resulting pointer is not used.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_unchecked_mut-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#220\">source</a><a href=\"#method.get_unchecked_mut-7\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"slice/trait.SliceIndex.html#tymethod.get_unchecked_mut\" class=\"fn\">get_unchecked_mut</a>(\n    self,\n    slice: <a class=\"primitive\" href=\"primitive.pointer.html\">*mut </a><a class=\"primitive\" href=\"primitive.str.html\">str</a>,\n) -&gt; <a class=\"primitive\" href=\"primitive.pointer.html\">*mut </a>&lt;<a class=\"struct\" href=\"ops/struct.Range.html\" title=\"struct std::ops::Range\">Range</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; as <a class=\"trait\" href=\"slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type std::slice::SliceIndex::Output\">Output</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class=\"docblock\">Returns a mutable pointer to the output at this location, without\nperforming any bounds checking.\nCalling this method with an out-of-bounds index or a dangling <code>slice</code> pointer\nis <em><a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">undefined behavior</a></em> even if the resulting pointer is not used.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.index-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#240\">source</a><a href=\"#method.index-6\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"slice/trait.SliceIndex.html#tymethod.index\" class=\"fn\">index</a>(self, slice: &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; &amp;&lt;<a class=\"struct\" href=\"ops/struct.Range.html\" title=\"struct std::ops::Range\">Range</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; as <a class=\"trait\" href=\"slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type std::slice::SliceIndex::Output\">Output</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;<Range<usize> as SliceIndex<str>>::Output\">ⓘ</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class=\"docblock\">Returns a shared reference to the output at this location, panicking\nif out of bounds.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.index_mut-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#248\">source</a><a href=\"#method.index_mut-6\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"slice/trait.SliceIndex.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(\n    self,\n    slice: &amp;mut <a class=\"primitive\" href=\"primitive.str.html\">str</a>,\n) -&gt; &amp;mut &lt;<a class=\"struct\" href=\"ops/struct.Range.html\" title=\"struct std::ops::Range\">Range</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; as <a class=\"trait\" href=\"slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type std::slice::SliceIndex::Output\">Output</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;mut <Range<usize> as SliceIndex<str>>::Output\">ⓘ</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class=\"docblock\">Returns a mutable reference to the output at this location, panicking\nif out of bounds.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SliceIndex%3Cstr%3E-for-RangeFrom%3Cusize%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0, const unstable\">1.20.0 (const: unstable)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#402\">source</a></span><a href=\"#impl-SliceIndex%3Cstr%3E-for-RangeFrom%3Cusize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"ops/struct.RangeFrom.html\" title=\"struct std::ops::RangeFrom\">RangeFrom</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;</h3></section></summary><div class=\"docblock\"><p>Implements substring slicing with syntax <code>&amp;self[begin ..]</code> or <code>&amp;mut self[begin ..]</code>.</p>\n<p>Returns a slice of the given string from the byte range [<code>begin</code>, <code>len</code>).\nEquivalent to <code>&amp;self[begin .. len]</code> or <code>&amp;mut self[begin .. len]</code>.</p>\n<p>This operation is <em>O</em>(1).</p>\n<p>Prior to 1.20.0, these indexing operations were still supported by\ndirect implementation of <code>Index</code> and <code>IndexMut</code>.</p>\n<h4 id=\"panics-6\"><a class=\"doc-anchor\" href=\"#panics-6\">§</a>Panics</h4>\n<p>Panics if <code>begin</code> does not point to the starting byte offset of\na character (as defined by <code>is_char_boundary</code>), or if <code>begin &gt; len</code>.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-3\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-3\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"slice/trait.SliceIndex.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.str.html\">str</a></h4></section></summary><div class=\"docblock\">The output type returned by methods.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#405\">source</a><a href=\"#method.get-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"slice/trait.SliceIndex.html#tymethod.get\" class=\"fn\">get</a>(\n    self,\n    slice: &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>,\n) -&gt; <a class=\"enum\" href=\"option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;&lt;<a class=\"struct\" href=\"ops/struct.RangeFrom.html\" title=\"struct std::ops::RangeFrom\">RangeFrom</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; as <a class=\"trait\" href=\"slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type std::slice::SliceIndex::Output\">Output</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class=\"docblock\">Returns a shared reference to the output at this location, if in\nbounds.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_mut-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#415\">source</a><a href=\"#method.get_mut-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"slice/trait.SliceIndex.html#tymethod.get_mut\" class=\"fn\">get_mut</a>(\n    self,\n    slice: &amp;mut <a class=\"primitive\" href=\"primitive.str.html\">str</a>,\n) -&gt; <a class=\"enum\" href=\"option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;mut &lt;<a class=\"struct\" href=\"ops/struct.RangeFrom.html\" title=\"struct std::ops::RangeFrom\">RangeFrom</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; as <a class=\"trait\" href=\"slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type std::slice::SliceIndex::Output\">Output</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class=\"docblock\">Returns a mutable reference to the output at this location, if in\nbounds.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_unchecked-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#425\">source</a><a href=\"#method.get_unchecked-4\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"slice/trait.SliceIndex.html#tymethod.get_unchecked\" class=\"fn\">get_unchecked</a>(\n    self,\n    slice: <a class=\"primitive\" href=\"primitive.pointer.html\">*const </a><a class=\"primitive\" href=\"primitive.str.html\">str</a>,\n) -&gt; <a class=\"primitive\" href=\"primitive.pointer.html\">*const </a>&lt;<a class=\"struct\" href=\"ops/struct.RangeFrom.html\" title=\"struct std::ops::RangeFrom\">RangeFrom</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; as <a class=\"trait\" href=\"slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type std::slice::SliceIndex::Output\">Output</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class=\"docblock\">Returns a pointer to the output at this location, without\nperforming any bounds checking.\nCalling this method with an out-of-bounds index or a dangling <code>slice</code> pointer\nis <em><a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">undefined behavior</a></em> even if the resulting pointer is not used.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_unchecked_mut-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#431\">source</a><a href=\"#method.get_unchecked_mut-4\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"slice/trait.SliceIndex.html#tymethod.get_unchecked_mut\" class=\"fn\">get_unchecked_mut</a>(\n    self,\n    slice: <a class=\"primitive\" href=\"primitive.pointer.html\">*mut </a><a class=\"primitive\" href=\"primitive.str.html\">str</a>,\n) -&gt; <a class=\"primitive\" href=\"primitive.pointer.html\">*mut </a>&lt;<a class=\"struct\" href=\"ops/struct.RangeFrom.html\" title=\"struct std::ops::RangeFrom\">RangeFrom</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; as <a class=\"trait\" href=\"slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type std::slice::SliceIndex::Output\">Output</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class=\"docblock\">Returns a mutable pointer to the output at this location, without\nperforming any bounds checking.\nCalling this method with an out-of-bounds index or a dangling <code>slice</code> pointer\nis <em><a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">undefined behavior</a></em> even if the resulting pointer is not used.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.index-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#437\">source</a><a href=\"#method.index-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"slice/trait.SliceIndex.html#tymethod.index\" class=\"fn\">index</a>(self, slice: &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; &amp;&lt;<a class=\"struct\" href=\"ops/struct.RangeFrom.html\" title=\"struct std::ops::RangeFrom\">RangeFrom</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; as <a class=\"trait\" href=\"slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type std::slice::SliceIndex::Output\">Output</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;<RangeFrom<usize> as SliceIndex<str>>::Output\">ⓘ</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class=\"docblock\">Returns a shared reference to the output at this location, panicking\nif out of bounds.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.index_mut-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#445\">source</a><a href=\"#method.index_mut-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"slice/trait.SliceIndex.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(\n    self,\n    slice: &amp;mut <a class=\"primitive\" href=\"primitive.str.html\">str</a>,\n) -&gt; &amp;mut &lt;<a class=\"struct\" href=\"ops/struct.RangeFrom.html\" title=\"struct std::ops::RangeFrom\">RangeFrom</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; as <a class=\"trait\" href=\"slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type std::slice::SliceIndex::Output\">Output</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;mut <RangeFrom<usize> as SliceIndex<str>>::Output\">ⓘ</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class=\"docblock\">Returns a mutable reference to the output at this location, panicking\nif out of bounds.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SliceIndex%3Cstr%3E-for-RangeFull\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0, const unstable\">1.20.0 (const: unstable)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#98\">source</a></span><a href=\"#impl-SliceIndex%3Cstr%3E-for-RangeFull\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"ops/struct.RangeFull.html\" title=\"struct std::ops::RangeFull\">RangeFull</a></h3></section></summary><div class=\"docblock\"><p>Implements substring slicing with syntax <code>&amp;self[..]</code> or <code>&amp;mut self[..]</code>.</p>\n<p>Returns a slice of the whole string, i.e., returns <code>&amp;self</code> or <code>&amp;mut self</code>. Equivalent to <code>&amp;self[0 .. len]</code> or <code>&amp;mut self[0 .. len]</code>. Unlike\nother indexing operations, this can never panic.</p>\n<p>This operation is <em>O</em>(1).</p>\n<p>Prior to 1.20.0, these indexing operations were still supported by\ndirect implementation of <code>Index</code> and <code>IndexMut</code>.</p>\n<p>Equivalent to <code>&amp;self[0 .. len]</code> or <code>&amp;mut self[0 .. len]</code>.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-4\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-4\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"slice/trait.SliceIndex.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.str.html\">str</a></h4></section></summary><div class=\"docblock\">The output type returned by methods.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#101\">source</a><a href=\"#method.get-5\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"slice/trait.SliceIndex.html#tymethod.get\" class=\"fn\">get</a>(self, slice: &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;&lt;<a class=\"struct\" href=\"ops/struct.RangeFull.html\" title=\"struct std::ops::RangeFull\">RangeFull</a> as <a class=\"trait\" href=\"slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type std::slice::SliceIndex::Output\">Output</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class=\"docblock\">Returns a shared reference to the output at this location, if in\nbounds.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_mut-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#105\">source</a><a href=\"#method.get_mut-5\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"slice/trait.SliceIndex.html#tymethod.get_mut\" class=\"fn\">get_mut</a>(\n    self,\n    slice: &amp;mut <a class=\"primitive\" href=\"primitive.str.html\">str</a>,\n) -&gt; <a class=\"enum\" href=\"option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;mut &lt;<a class=\"struct\" href=\"ops/struct.RangeFull.html\" title=\"struct std::ops::RangeFull\">RangeFull</a> as <a class=\"trait\" href=\"slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type std::slice::SliceIndex::Output\">Output</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class=\"docblock\">Returns a mutable reference to the output at this location, if in\nbounds.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_unchecked-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#109\">source</a><a href=\"#method.get_unchecked-5\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"slice/trait.SliceIndex.html#tymethod.get_unchecked\" class=\"fn\">get_unchecked</a>(\n    self,\n    slice: <a class=\"primitive\" href=\"primitive.pointer.html\">*const </a><a class=\"primitive\" href=\"primitive.str.html\">str</a>,\n) -&gt; <a class=\"primitive\" href=\"primitive.pointer.html\">*const </a>&lt;<a class=\"struct\" href=\"ops/struct.RangeFull.html\" title=\"struct std::ops::RangeFull\">RangeFull</a> as <a class=\"trait\" href=\"slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type std::slice::SliceIndex::Output\">Output</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class=\"docblock\">Returns a pointer to the output at this location, without\nperforming any bounds checking.\nCalling this method with an out-of-bounds index or a dangling <code>slice</code> pointer\nis <em><a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">undefined behavior</a></em> even if the resulting pointer is not used.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_unchecked_mut-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#113\">source</a><a href=\"#method.get_unchecked_mut-5\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"slice/trait.SliceIndex.html#tymethod.get_unchecked_mut\" class=\"fn\">get_unchecked_mut</a>(\n    self,\n    slice: <a class=\"primitive\" href=\"primitive.pointer.html\">*mut </a><a class=\"primitive\" href=\"primitive.str.html\">str</a>,\n) -&gt; <a class=\"primitive\" href=\"primitive.pointer.html\">*mut </a>&lt;<a class=\"struct\" href=\"ops/struct.RangeFull.html\" title=\"struct std::ops::RangeFull\">RangeFull</a> as <a class=\"trait\" href=\"slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type std::slice::SliceIndex::Output\">Output</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class=\"docblock\">Returns a mutable pointer to the output at this location, without\nperforming any bounds checking.\nCalling this method with an out-of-bounds index or a dangling <code>slice</code> pointer\nis <em><a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">undefined behavior</a></em> even if the resulting pointer is not used.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.index-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#117\">source</a><a href=\"#method.index-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"slice/trait.SliceIndex.html#tymethod.index\" class=\"fn\">index</a>(self, slice: &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; &amp;&lt;<a class=\"struct\" href=\"ops/struct.RangeFull.html\" title=\"struct std::ops::RangeFull\">RangeFull</a> as <a class=\"trait\" href=\"slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type std::slice::SliceIndex::Output\">Output</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class=\"docblock\">Returns a shared reference to the output at this location, panicking\nif out of bounds.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.index_mut-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#121\">source</a><a href=\"#method.index_mut-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"slice/trait.SliceIndex.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(\n    self,\n    slice: &amp;mut <a class=\"primitive\" href=\"primitive.str.html\">str</a>,\n) -&gt; &amp;mut &lt;<a class=\"struct\" href=\"ops/struct.RangeFull.html\" title=\"struct std::ops::RangeFull\">RangeFull</a> as <a class=\"trait\" href=\"slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type std::slice::SliceIndex::Output\">Output</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class=\"docblock\">Returns a mutable reference to the output at this location, panicking\nif out of bounds.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SliceIndex%3Cstr%3E-for-RangeInclusive%3Cusize%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.26.0, const unstable\">1.26.0 (const: unstable)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#474\">source</a></span><a href=\"#impl-SliceIndex%3Cstr%3E-for-RangeInclusive%3Cusize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"ops/struct.RangeInclusive.html\" title=\"struct std::ops::RangeInclusive\">RangeInclusive</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;</h3></section></summary><div class=\"docblock\"><p>Implements substring slicing with syntax <code>&amp;self[begin ..= end]</code> or <code>&amp;mut self[begin ..= end]</code>.</p>\n<p>Returns a slice of the given string from the byte range\n[<code>begin</code>, <code>end</code>]. Equivalent to <code>&amp;self [begin .. end + 1]</code> or <code>&amp;mut self[begin .. end + 1]</code>, except if <code>end</code> has the maximum value for\n<code>usize</code>.</p>\n<p>This operation is <em>O</em>(1).</p>\n<h4 id=\"panics-3\"><a class=\"doc-anchor\" href=\"#panics-3\">§</a>Panics</h4>\n<p>Panics if <code>begin</code> does not point to the starting byte offset of\na character (as defined by <code>is_char_boundary</code>), if <code>end</code> does not point\nto the ending byte offset of a character (<code>end + 1</code> is either a starting\nbyte offset or equal to <code>len</code>), if <code>begin &gt; end</code>, or if <code>end &gt;= len</code>.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"slice/trait.SliceIndex.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.str.html\">str</a></h4></section></summary><div class=\"docblock\">The output type returned by methods.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#477\">source</a><a href=\"#method.get-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"slice/trait.SliceIndex.html#tymethod.get\" class=\"fn\">get</a>(\n    self,\n    slice: &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>,\n) -&gt; <a class=\"enum\" href=\"option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;&lt;<a class=\"struct\" href=\"ops/struct.RangeInclusive.html\" title=\"struct std::ops::RangeInclusive\">RangeInclusive</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; as <a class=\"trait\" href=\"slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type std::slice::SliceIndex::Output\">Output</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class=\"docblock\">Returns a shared reference to the output at this location, if in\nbounds.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_mut-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#481\">source</a><a href=\"#method.get_mut-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"slice/trait.SliceIndex.html#tymethod.get_mut\" class=\"fn\">get_mut</a>(\n    self,\n    slice: &amp;mut <a class=\"primitive\" href=\"primitive.str.html\">str</a>,\n) -&gt; <a class=\"enum\" href=\"option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;mut &lt;<a class=\"struct\" href=\"ops/struct.RangeInclusive.html\" title=\"struct std::ops::RangeInclusive\">RangeInclusive</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; as <a class=\"trait\" href=\"slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type std::slice::SliceIndex::Output\">Output</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class=\"docblock\">Returns a mutable reference to the output at this location, if in\nbounds.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_unchecked-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#485\">source</a><a href=\"#method.get_unchecked-1\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"slice/trait.SliceIndex.html#tymethod.get_unchecked\" class=\"fn\">get_unchecked</a>(\n    self,\n    slice: <a class=\"primitive\" href=\"primitive.pointer.html\">*const </a><a class=\"primitive\" href=\"primitive.str.html\">str</a>,\n) -&gt; <a class=\"primitive\" href=\"primitive.pointer.html\">*const </a>&lt;<a class=\"struct\" href=\"ops/struct.RangeInclusive.html\" title=\"struct std::ops::RangeInclusive\">RangeInclusive</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; as <a class=\"trait\" href=\"slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type std::slice::SliceIndex::Output\">Output</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class=\"docblock\">Returns a pointer to the output at this location, without\nperforming any bounds checking.\nCalling this method with an out-of-bounds index or a dangling <code>slice</code> pointer\nis <em><a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">undefined behavior</a></em> even if the resulting pointer is not used.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_unchecked_mut-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#490\">source</a><a href=\"#method.get_unchecked_mut-1\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"slice/trait.SliceIndex.html#tymethod.get_unchecked_mut\" class=\"fn\">get_unchecked_mut</a>(\n    self,\n    slice: <a class=\"primitive\" href=\"primitive.pointer.html\">*mut </a><a class=\"primitive\" href=\"primitive.str.html\">str</a>,\n) -&gt; <a class=\"primitive\" href=\"primitive.pointer.html\">*mut </a>&lt;<a class=\"struct\" href=\"ops/struct.RangeInclusive.html\" title=\"struct std::ops::RangeInclusive\">RangeInclusive</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; as <a class=\"trait\" href=\"slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type std::slice::SliceIndex::Output\">Output</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class=\"docblock\">Returns a mutable pointer to the output at this location, without\nperforming any bounds checking.\nCalling this method with an out-of-bounds index or a dangling <code>slice</code> pointer\nis <em><a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">undefined behavior</a></em> even if the resulting pointer is not used.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.index\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#495\">source</a><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"slice/trait.SliceIndex.html#tymethod.index\" class=\"fn\">index</a>(\n    self,\n    slice: &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>,\n) -&gt; &amp;&lt;<a class=\"struct\" href=\"ops/struct.RangeInclusive.html\" title=\"struct std::ops::RangeInclusive\">RangeInclusive</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; as <a class=\"trait\" href=\"slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type std::slice::SliceIndex::Output\">Output</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;<RangeInclusive<usize> as SliceIndex<str>>::Output\">ⓘ</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class=\"docblock\">Returns a shared reference to the output at this location, panicking\nif out of bounds.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#502\">source</a><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"slice/trait.SliceIndex.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(\n    self,\n    slice: &amp;mut <a class=\"primitive\" href=\"primitive.str.html\">str</a>,\n) -&gt; &amp;mut &lt;<a class=\"struct\" href=\"ops/struct.RangeInclusive.html\" title=\"struct std::ops::RangeInclusive\">RangeInclusive</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; as <a class=\"trait\" href=\"slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type std::slice::SliceIndex::Output\">Output</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;mut <RangeInclusive<usize> as SliceIndex<str>>::Output\">ⓘ</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class=\"docblock\">Returns a mutable reference to the output at this location, panicking\nif out of bounds.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SliceIndex%3Cstr%3E-for-RangeTo%3Cusize%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0, const unstable\">1.20.0 (const: unstable)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#333\">source</a></span><a href=\"#impl-SliceIndex%3Cstr%3E-for-RangeTo%3Cusize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"ops/struct.RangeTo.html\" title=\"struct std::ops::RangeTo\">RangeTo</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;</h3></section></summary><div class=\"docblock\"><p>Implements substring slicing with syntax <code>&amp;self[.. end]</code> or <code>&amp;mut self[.. end]</code>.</p>\n<p>Returns a slice of the given string from the byte range [0, <code>end</code>).\nEquivalent to <code>&amp;self[0 .. end]</code> or <code>&amp;mut self[0 .. end]</code>.</p>\n<p>This operation is <em>O</em>(1).</p>\n<p>Prior to 1.20.0, these indexing operations were still supported by\ndirect implementation of <code>Index</code> and <code>IndexMut</code>.</p>\n<h4 id=\"panics-5\"><a class=\"doc-anchor\" href=\"#panics-5\">§</a>Panics</h4>\n<p>Panics if <code>end</code> does not point to the starting byte offset of a\ncharacter (as defined by <code>is_char_boundary</code>), or if <code>end &gt; len</code>.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-2\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-2\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"slice/trait.SliceIndex.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.str.html\">str</a></h4></section></summary><div class=\"docblock\">The output type returned by methods.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#336\">source</a><a href=\"#method.get-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"slice/trait.SliceIndex.html#tymethod.get\" class=\"fn\">get</a>(\n    self,\n    slice: &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>,\n) -&gt; <a class=\"enum\" href=\"option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;&lt;<a class=\"struct\" href=\"ops/struct.RangeTo.html\" title=\"struct std::ops::RangeTo\">RangeTo</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; as <a class=\"trait\" href=\"slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type std::slice::SliceIndex::Output\">Output</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class=\"docblock\">Returns a shared reference to the output at this location, if in\nbounds.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_mut-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#346\">source</a><a href=\"#method.get_mut-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"slice/trait.SliceIndex.html#tymethod.get_mut\" class=\"fn\">get_mut</a>(\n    self,\n    slice: &amp;mut <a class=\"primitive\" href=\"primitive.str.html\">str</a>,\n) -&gt; <a class=\"enum\" href=\"option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;mut &lt;<a class=\"struct\" href=\"ops/struct.RangeTo.html\" title=\"struct std::ops::RangeTo\">RangeTo</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; as <a class=\"trait\" href=\"slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type std::slice::SliceIndex::Output\">Output</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class=\"docblock\">Returns a mutable reference to the output at this location, if in\nbounds.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_unchecked-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#356\">source</a><a href=\"#method.get_unchecked-3\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"slice/trait.SliceIndex.html#tymethod.get_unchecked\" class=\"fn\">get_unchecked</a>(\n    self,\n    slice: <a class=\"primitive\" href=\"primitive.pointer.html\">*const </a><a class=\"primitive\" href=\"primitive.str.html\">str</a>,\n) -&gt; <a class=\"primitive\" href=\"primitive.pointer.html\">*const </a>&lt;<a class=\"struct\" href=\"ops/struct.RangeTo.html\" title=\"struct std::ops::RangeTo\">RangeTo</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; as <a class=\"trait\" href=\"slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type std::slice::SliceIndex::Output\">Output</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class=\"docblock\">Returns a pointer to the output at this location, without\nperforming any bounds checking.\nCalling this method with an out-of-bounds index or a dangling <code>slice</code> pointer\nis <em><a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">undefined behavior</a></em> even if the resulting pointer is not used.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_unchecked_mut-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#361\">source</a><a href=\"#method.get_unchecked_mut-3\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"slice/trait.SliceIndex.html#tymethod.get_unchecked_mut\" class=\"fn\">get_unchecked_mut</a>(\n    self,\n    slice: <a class=\"primitive\" href=\"primitive.pointer.html\">*mut </a><a class=\"primitive\" href=\"primitive.str.html\">str</a>,\n) -&gt; <a class=\"primitive\" href=\"primitive.pointer.html\">*mut </a>&lt;<a class=\"struct\" href=\"ops/struct.RangeTo.html\" title=\"struct std::ops::RangeTo\">RangeTo</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; as <a class=\"trait\" href=\"slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type std::slice::SliceIndex::Output\">Output</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class=\"docblock\">Returns a mutable pointer to the output at this location, without\nperforming any bounds checking.\nCalling this method with an out-of-bounds index or a dangling <code>slice</code> pointer\nis <em><a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">undefined behavior</a></em> even if the resulting pointer is not used.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.index-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#366\">source</a><a href=\"#method.index-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"slice/trait.SliceIndex.html#tymethod.index\" class=\"fn\">index</a>(self, slice: &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; &amp;&lt;<a class=\"struct\" href=\"ops/struct.RangeTo.html\" title=\"struct std::ops::RangeTo\">RangeTo</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; as <a class=\"trait\" href=\"slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type std::slice::SliceIndex::Output\">Output</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class=\"docblock\">Returns a shared reference to the output at this location, panicking\nif out of bounds.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.index_mut-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#374\">source</a><a href=\"#method.index_mut-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"slice/trait.SliceIndex.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(\n    self,\n    slice: &amp;mut <a class=\"primitive\" href=\"primitive.str.html\">str</a>,\n) -&gt; &amp;mut &lt;<a class=\"struct\" href=\"ops/struct.RangeTo.html\" title=\"struct std::ops::RangeTo\">RangeTo</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; as <a class=\"trait\" href=\"slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type std::slice::SliceIndex::Output\">Output</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class=\"docblock\">Returns a mutable reference to the output at this location, panicking\nif out of bounds.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SliceIndex%3Cstr%3E-for-RangeToInclusive%3Cusize%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.26.0, const unstable\">1.26.0 (const: unstable)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#526\">source</a></span><a href=\"#impl-SliceIndex%3Cstr%3E-for-RangeToInclusive%3Cusize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"ops/struct.RangeToInclusive.html\" title=\"struct std::ops::RangeToInclusive\">RangeToInclusive</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;</h3></section></summary><div class=\"docblock\"><p>Implements substring slicing with syntax <code>&amp;self[..= end]</code> or <code>&amp;mut self[..= end]</code>.</p>\n<p>Returns a slice of the given string from the byte range [0, <code>end</code>].\nEquivalent to <code>&amp;self [0 .. end + 1]</code>, except if <code>end</code> has the maximum\nvalue for <code>usize</code>.</p>\n<p>This operation is <em>O</em>(1).</p>\n<h4 id=\"panics-4\"><a class=\"doc-anchor\" href=\"#panics-4\">§</a>Panics</h4>\n<p>Panics if <code>end</code> does not point to the ending byte offset of a character\n(<code>end + 1</code> is either a starting byte offset as defined by\n<code>is_char_boundary</code>, or equal to <code>len</code>), or if <code>end &gt;= len</code>.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"slice/trait.SliceIndex.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.str.html\">str</a></h4></section></summary><div class=\"docblock\">The output type returned by methods.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#529\">source</a><a href=\"#method.get-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"slice/trait.SliceIndex.html#tymethod.get\" class=\"fn\">get</a>(\n    self,\n    slice: &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>,\n) -&gt; <a class=\"enum\" href=\"option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;&lt;<a class=\"struct\" href=\"ops/struct.RangeToInclusive.html\" title=\"struct std::ops::RangeToInclusive\">RangeToInclusive</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; as <a class=\"trait\" href=\"slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type std::slice::SliceIndex::Output\">Output</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class=\"docblock\">Returns a shared reference to the output at this location, if in\nbounds.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_mut-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#533\">source</a><a href=\"#method.get_mut-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"slice/trait.SliceIndex.html#tymethod.get_mut\" class=\"fn\">get_mut</a>(\n    self,\n    slice: &amp;mut <a class=\"primitive\" href=\"primitive.str.html\">str</a>,\n) -&gt; <a class=\"enum\" href=\"option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;mut &lt;<a class=\"struct\" href=\"ops/struct.RangeToInclusive.html\" title=\"struct std::ops::RangeToInclusive\">RangeToInclusive</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; as <a class=\"trait\" href=\"slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type std::slice::SliceIndex::Output\">Output</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class=\"docblock\">Returns a mutable reference to the output at this location, if in\nbounds.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_unchecked-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#537\">source</a><a href=\"#method.get_unchecked-2\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"slice/trait.SliceIndex.html#tymethod.get_unchecked\" class=\"fn\">get_unchecked</a>(\n    self,\n    slice: <a class=\"primitive\" href=\"primitive.pointer.html\">*const </a><a class=\"primitive\" href=\"primitive.str.html\">str</a>,\n) -&gt; <a class=\"primitive\" href=\"primitive.pointer.html\">*const </a>&lt;<a class=\"struct\" href=\"ops/struct.RangeToInclusive.html\" title=\"struct std::ops::RangeToInclusive\">RangeToInclusive</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; as <a class=\"trait\" href=\"slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type std::slice::SliceIndex::Output\">Output</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class=\"docblock\">Returns a pointer to the output at this location, without\nperforming any bounds checking.\nCalling this method with an out-of-bounds index or a dangling <code>slice</code> pointer\nis <em><a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">undefined behavior</a></em> even if the resulting pointer is not used.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_unchecked_mut-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#542\">source</a><a href=\"#method.get_unchecked_mut-2\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"slice/trait.SliceIndex.html#tymethod.get_unchecked_mut\" class=\"fn\">get_unchecked_mut</a>(\n    self,\n    slice: <a class=\"primitive\" href=\"primitive.pointer.html\">*mut </a><a class=\"primitive\" href=\"primitive.str.html\">str</a>,\n) -&gt; <a class=\"primitive\" href=\"primitive.pointer.html\">*mut </a>&lt;<a class=\"struct\" href=\"ops/struct.RangeToInclusive.html\" title=\"struct std::ops::RangeToInclusive\">RangeToInclusive</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; as <a class=\"trait\" href=\"slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type std::slice::SliceIndex::Output\">Output</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class=\"docblock\">Returns a mutable pointer to the output at this location, without\nperforming any bounds checking.\nCalling this method with an out-of-bounds index or a dangling <code>slice</code> pointer\nis <em><a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">undefined behavior</a></em> even if the resulting pointer is not used.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.index-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#547\">source</a><a href=\"#method.index-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"slice/trait.SliceIndex.html#tymethod.index\" class=\"fn\">index</a>(\n    self,\n    slice: &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>,\n) -&gt; &amp;&lt;<a class=\"struct\" href=\"ops/struct.RangeToInclusive.html\" title=\"struct std::ops::RangeToInclusive\">RangeToInclusive</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; as <a class=\"trait\" href=\"slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type std::slice::SliceIndex::Output\">Output</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class=\"docblock\">Returns a shared reference to the output at this location, panicking\nif out of bounds.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.index_mut-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#551\">source</a><a href=\"#method.index_mut-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"slice/trait.SliceIndex.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(\n    self,\n    slice: &amp;mut <a class=\"primitive\" href=\"primitive.str.html\">str</a>,\n) -&gt; &amp;mut &lt;<a class=\"struct\" href=\"ops/struct.RangeToInclusive.html\" title=\"struct std::ops::RangeToInclusive\">RangeToInclusive</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; as <a class=\"trait\" href=\"slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type std::slice::SliceIndex::Output\">Output</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class=\"docblock\">Returns a mutable reference to the output at this location, panicking\nif out of bounds.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-ToOwned-for-str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/str.rs.html#207\">source</a></span><a href=\"#impl-ToOwned-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"borrow/trait.ToOwned.html\" title=\"trait std::borrow::ToOwned\">ToOwned</a> for <a class=\"primitive\" href=\"primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Owned\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Owned\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"borrow/trait.ToOwned.html#associatedtype.Owned\" class=\"associatedtype\">Owned</a> = <a class=\"struct\" href=\"string/struct.String.html\" title=\"struct std::string::String\">String</a></h4></section></summary><div class=\"docblock\">The resulting type after obtaining ownership.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_owned\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/str.rs.html#210\">source</a><a href=\"#method.to_owned\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"borrow/trait.ToOwned.html#tymethod.to_owned\" class=\"fn\">to_owned</a>(&amp;self) -&gt; <a class=\"struct\" href=\"string/struct.String.html\" title=\"struct std::string::String\">String</a></h4></section></summary><div class=\"docblock\">Creates owned data from borrowed data, usually by cloning. <a href=\"borrow/trait.ToOwned.html#tymethod.to_owned\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/str.rs.html#214\">source</a><a href=\"#method.clone_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"borrow/trait.ToOwned.html#method.clone_into\" class=\"fn\">clone_into</a>(&amp;self, target: &amp;mut <a class=\"struct\" href=\"string/struct.String.html\" title=\"struct std::string::String\">String</a>)</h4></section></summary><div class=\"docblock\">Uses borrowed data to replace owned data, usually by cloning. <a href=\"borrow/trait.ToOwned.html#method.clone_into\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-ToSocketAddrs-for-str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../src/std/net/socket_addr.rs.html#280-290\">source</a></span><a href=\"#impl-ToSocketAddrs-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"net/trait.ToSocketAddrs.html\" title=\"trait std::net::ToSocketAddrs\">ToSocketAddrs</a> for <a class=\"primitive\" href=\"primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Iter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Iter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"net/trait.ToSocketAddrs.html#associatedtype.Iter\" class=\"associatedtype\">Iter</a> = <a class=\"struct\" href=\"vec/struct.IntoIter.html\" title=\"struct std::vec::IntoIter\">IntoIter</a>&lt;<a class=\"enum\" href=\"net/enum.SocketAddr.html\" title=\"enum std::net::SocketAddr\">SocketAddr</a>&gt;</h4></section></summary><div class=\"docblock\">Returned iterator over socket addresses which this type may correspond\nto.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_socket_addrs\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../src/std/net/socket_addr.rs.html#282-289\">source</a><a href=\"#method.to_socket_addrs\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"net/trait.ToSocketAddrs.html#tymethod.to_socket_addrs\" class=\"fn\">to_socket_addrs</a>(&amp;self) -&gt; <a class=\"type\" href=\"io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"struct\" href=\"vec/struct.IntoIter.html\" title=\"struct std::vec::IntoIter\">IntoIter</a>&lt;<a class=\"enum\" href=\"net/enum.SocketAddr.html\" title=\"enum std::net::SocketAddr\">SocketAddr</a>&gt;&gt;</h4></section></summary><div class=\"docblock\">Converts this object to an iterator of resolved <a href=\"net/enum.SocketAddr.html\" title=\"enum std::net::SocketAddr\"><code>SocketAddr</code></a>s. <a href=\"net/trait.ToSocketAddrs.html#tymethod.to_socket_addrs\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3C%26OsStr%3E-for-%26str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.72.0\">1.72.0</span> · <a class=\"src\" href=\"../src/std/ffi/os_str.rs.html#1320-1335\">source</a></span><a href=\"#impl-TryFrom%3C%26OsStr%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;&amp;'a <a class=\"struct\" href=\"ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt; for &amp;'a <a class=\"primitive\" href=\"primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../src/std/ffi/os_str.rs.html#1332-1334\">source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: &amp;'a <a class=\"struct\" href=\"ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>) -&gt; <a class=\"enum\" href=\"result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;Self, Self::<a class=\"associatedtype\" href=\"convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Tries to convert an <code>&amp;OsStr</code> to a <code>&amp;str</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ffi::OsStr;\n\n<span class=\"kw\">let </span>os_str = OsStr::new(<span class=\"string\">\"foo\"</span>);\n<span class=\"kw\">let </span>as_str = &lt;<span class=\"kw-2\">&amp;</span>str&gt;::try_from(os_str).unwrap();\n<span class=\"macro\">assert_eq!</span>(as_str, <span class=\"string\">\"foo\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::OsStr;%0A++++%0A++++let+os_str+=+OsStr::new(%22foo%22);%0A++++let+as_str+=+%3C%26str%3E::try_from(os_str).unwrap();%0A++++assert_eq!(as_str,+%22foo%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"str/struct.Utf8Error.html\" title=\"struct std::str::Utf8Error\">Utf8Error</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><section id=\"impl-ConstParamTy-for-str\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/marker.rs.html#992-1003\">source</a><a href=\"#impl-ConstParamTy-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"marker/trait.ConstParamTy.html\" title=\"trait std::marker::ConstParamTy\">ConstParamTy</a> for <a class=\"primitive\" href=\"primitive.str.html\">str</a></h3></section><section id=\"impl-Eq-for-str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#36\">source</a></span><a href=\"#impl-Eq-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> for <a class=\"primitive\" href=\"primitive.str.html\">str</a></h3></section><section id=\"impl-StructuralPartialEq-for-str\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/marker.rs.html#214-226\">source</a><a href=\"#impl-StructuralPartialEq-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"marker/trait.StructuralPartialEq.html\" title=\"trait std::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"primitive\" href=\"primitive.str.html\">str</a></h3></section></div><h2 id=\"synthetic-implementations\" class=\"section-header\">Auto Trait Implementations<a href=\"#synthetic-implementations\" class=\"anchor\">§</a></h2><div id=\"synthetic-implementations-list\"><section id=\"impl-Freeze-for-str\" class=\"impl\"><a href=\"#impl-Freeze-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"primitive\" href=\"primitive.str.html\">str</a></h3></section><section id=\"impl-RefUnwindSafe-for-str\" class=\"impl\"><a href=\"#impl-RefUnwindSafe-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"primitive\" href=\"primitive.str.html\">str</a></h3></section><section id=\"impl-Send-for-str\" class=\"impl\"><a href=\"#impl-Send-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"primitive\" href=\"primitive.str.html\">str</a></h3></section><section id=\"impl-Sized-for-str\" class=\"impl\"><a href=\"#impl-Sized-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl !<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a> for <a class=\"primitive\" href=\"primitive.str.html\">str</a></h3></section><section id=\"impl-Sync-for-str\" class=\"impl\"><a href=\"#impl-Sync-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"primitive\" href=\"primitive.str.html\">str</a></h3></section><section id=\"impl-Unpin-for-str\" class=\"impl\"><a href=\"#impl-Unpin-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"primitive\" href=\"primitive.str.html\">str</a></h3></section><section id=\"impl-UnwindSafe-for-str\" class=\"impl\"><a href=\"#impl-UnwindSafe-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"primitive\" href=\"primitive.str.html\">str</a></h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">§</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Any-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a><a href=\"#impl-Any-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#141\">source</a><a href=\"#method.type_id\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"any/trait.Any.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\">Gets the <code>TypeId</code> of <code>self</code>. <a href=\"any/trait.Any.html#tymethod.type_id\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Borrow%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208\">source</a><a href=\"#impl-Borrow%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#210\">source</a><a href=\"#method.borrow-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216\">source</a><a href=\"#impl-BorrowMut%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#217\">source</a><a href=\"#method.borrow_mut-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-ToString-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2552\">source</a><a href=\"#impl-ToString-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"string/trait.ToString.html\" title=\"trait std::string::ToString\">ToString</a> for T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"fmt/trait.Display.html\" title=\"trait std::fmt::Display\">Display</a> + ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_string\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2558\">source</a><a href=\"#method.to_string\" class=\"anchor\">§</a><h4 class=\"code-header\">default fn <a href=\"string/trait.ToString.html#tymethod.to_string\" class=\"fn\">to_string</a>(&amp;self) -&gt; <a class=\"struct\" href=\"string/struct.String.html\" title=\"struct std::string::String\">String</a></h4></section></summary><div class=\"docblock\">Converts the given value to a <code>String</code>. <a href=\"string/trait.ToString.html#tymethod.to_string\">Read more</a></div></details></div></details></div><script type=\"text/json\" id=\"notable-traits-data\">{\"&<Range<usize> as SliceIndex<str>>::Output\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"ops/struct.Range.html\\\" title=\\\"struct std::ops::Range\\\">Range</a>&lt;A&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;A&gt; <a class=\\\"trait\\\" href=\\\"iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"ops/struct.Range.html\\\" title=\\\"struct std::ops::Range\\\">Range</a>&lt;A&gt;<div class=\\\"where\\\">where\\n    A: <a class=\\\"trait\\\" href=\\\"iter/trait.Step.html\\\" title=\\\"trait std::iter::Step\\\">Step</a>,</div></div><div class=\\\"where\\\">    type <a href=\\\"iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = A;</div>\",\"&<RangeFrom<usize> as SliceIndex<str>>::Output\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"ops/struct.RangeFrom.html\\\" title=\\\"struct std::ops::RangeFrom\\\">RangeFrom</a>&lt;A&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;A&gt; <a class=\\\"trait\\\" href=\\\"iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"ops/struct.RangeFrom.html\\\" title=\\\"struct std::ops::RangeFrom\\\">RangeFrom</a>&lt;A&gt;<div class=\\\"where\\\">where\\n    A: <a class=\\\"trait\\\" href=\\\"iter/trait.Step.html\\\" title=\\\"trait std::iter::Step\\\">Step</a>,</div></div><div class=\\\"where\\\">    type <a href=\\\"iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = A;</div>\",\"&<RangeInclusive<usize> as SliceIndex<str>>::Output\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"ops/struct.RangeInclusive.html\\\" title=\\\"struct std::ops::RangeInclusive\\\">RangeInclusive</a>&lt;A&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;A&gt; <a class=\\\"trait\\\" href=\\\"iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"ops/struct.RangeInclusive.html\\\" title=\\\"struct std::ops::RangeInclusive\\\">RangeInclusive</a>&lt;A&gt;<div class=\\\"where\\\">where\\n    A: <a class=\\\"trait\\\" href=\\\"iter/trait.Step.html\\\" title=\\\"trait std::iter::Step\\\">Step</a>,</div></div><div class=\\\"where\\\">    type <a href=\\\"iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = A;</div>\",\"&[u8]\":\"<h3>Notable traits for <code>&amp;[<a class=\\\"primitive\\\" href=\\\"primitive.u8.html\\\">u8</a>]</code></h3><pre><code><div class=\\\"where\\\">impl <a class=\\\"trait\\\" href=\\\"io/trait.Read.html\\\" title=\\\"trait std::io::Read\\\">Read</a> for &amp;[<a class=\\\"primitive\\\" href=\\\"primitive.u8.html\\\">u8</a>]</div>\",\"&mut <Range<usize> as SliceIndex<str>>::Output\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"ops/struct.Range.html\\\" title=\\\"struct std::ops::Range\\\">Range</a>&lt;A&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;A&gt; <a class=\\\"trait\\\" href=\\\"iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"ops/struct.Range.html\\\" title=\\\"struct std::ops::Range\\\">Range</a>&lt;A&gt;<div class=\\\"where\\\">where\\n    A: <a class=\\\"trait\\\" href=\\\"iter/trait.Step.html\\\" title=\\\"trait std::iter::Step\\\">Step</a>,</div></div><div class=\\\"where\\\">    type <a href=\\\"iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = A;</div>\",\"&mut <RangeFrom<usize> as SliceIndex<str>>::Output\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"ops/struct.RangeFrom.html\\\" title=\\\"struct std::ops::RangeFrom\\\">RangeFrom</a>&lt;A&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;A&gt; <a class=\\\"trait\\\" href=\\\"iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"ops/struct.RangeFrom.html\\\" title=\\\"struct std::ops::RangeFrom\\\">RangeFrom</a>&lt;A&gt;<div class=\\\"where\\\">where\\n    A: <a class=\\\"trait\\\" href=\\\"iter/trait.Step.html\\\" title=\\\"trait std::iter::Step\\\">Step</a>,</div></div><div class=\\\"where\\\">    type <a href=\\\"iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = A;</div>\",\"&mut <RangeInclusive<usize> as SliceIndex<str>>::Output\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"ops/struct.RangeInclusive.html\\\" title=\\\"struct std::ops::RangeInclusive\\\">RangeInclusive</a>&lt;A&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;A&gt; <a class=\\\"trait\\\" href=\\\"iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"ops/struct.RangeInclusive.html\\\" title=\\\"struct std::ops::RangeInclusive\\\">RangeInclusive</a>&lt;A&gt;<div class=\\\"where\\\">where\\n    A: <a class=\\\"trait\\\" href=\\\"iter/trait.Step.html\\\" title=\\\"trait std::iter::Step\\\">Step</a>,</div></div><div class=\\\"where\\\">    type <a href=\\\"iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = A;</div>\",\"&mut [u8]\":\"<h3>Notable traits for <code>&amp;mut [<a class=\\\"primitive\\\" href=\\\"primitive.u8.html\\\">u8</a>]</code></h3><pre><code><div class=\\\"where\\\">impl <a class=\\\"trait\\\" href=\\\"io/trait.Write.html\\\" title=\\\"trait std::io::Write\\\">Write</a> for &amp;mut [<a class=\\\"primitive\\\" href=\\\"primitive.u8.html\\\">u8</a>]</div>\",\"Bytes<'_>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"str/struct.Bytes.html\\\" title=\\\"struct std::str::Bytes\\\">Bytes</a>&lt;'_&gt;</code></h3><pre><code><div class=\\\"where\\\">impl <a class=\\\"trait\\\" href=\\\"iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"str/struct.Bytes.html\\\" title=\\\"struct std::str::Bytes\\\">Bytes</a>&lt;'_&gt;</div><div class=\\\"where\\\">    type <a href=\\\"iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = <a class=\\\"primitive\\\" href=\\\"primitive.u8.html\\\">u8</a>;</div>\",\"CharIndices<'_>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"str/struct.CharIndices.html\\\" title=\\\"struct std::str::CharIndices\\\">CharIndices</a>&lt;'a&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a&gt; <a class=\\\"trait\\\" href=\\\"iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"str/struct.CharIndices.html\\\" title=\\\"struct std::str::CharIndices\\\">CharIndices</a>&lt;'a&gt;</div><div class=\\\"where\\\">    type <a href=\\\"iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = (<a class=\\\"primitive\\\" href=\\\"primitive.usize.html\\\">usize</a>, <a class=\\\"primitive\\\" href=\\\"primitive.char.html\\\">char</a>);</div>\",\"Chars<'_>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"str/struct.Chars.html\\\" title=\\\"struct std::str::Chars\\\">Chars</a>&lt;'a&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a&gt; <a class=\\\"trait\\\" href=\\\"iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"str/struct.Chars.html\\\" title=\\\"struct std::str::Chars\\\">Chars</a>&lt;'a&gt;</div><div class=\\\"where\\\">    type <a href=\\\"iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = <a class=\\\"primitive\\\" href=\\\"primitive.char.html\\\">char</a>;</div>\",\"EncodeUtf16<'_>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"str/struct.EncodeUtf16.html\\\" title=\\\"struct std::str::EncodeUtf16\\\">EncodeUtf16</a>&lt;'a&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a&gt; <a class=\\\"trait\\\" href=\\\"iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"str/struct.EncodeUtf16.html\\\" title=\\\"struct std::str::EncodeUtf16\\\">EncodeUtf16</a>&lt;'a&gt;</div><div class=\\\"where\\\">    type <a href=\\\"iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = <a class=\\\"primitive\\\" href=\\\"primitive.u16.html\\\">u16</a>;</div>\",\"EscapeDebug<'_>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"str/struct.EscapeDebug.html\\\" title=\\\"struct std::str::EscapeDebug\\\">EscapeDebug</a>&lt;'a&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a&gt; <a class=\\\"trait\\\" href=\\\"iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"str/struct.EscapeDebug.html\\\" title=\\\"struct std::str::EscapeDebug\\\">EscapeDebug</a>&lt;'a&gt;</div><div class=\\\"where\\\">    type <a href=\\\"iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = <a class=\\\"primitive\\\" href=\\\"primitive.char.html\\\">char</a>;</div>\",\"EscapeDefault<'_>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"str/struct.EscapeDefault.html\\\" title=\\\"struct std::str::EscapeDefault\\\">EscapeDefault</a>&lt;'a&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a&gt; <a class=\\\"trait\\\" href=\\\"iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"str/struct.EscapeDefault.html\\\" title=\\\"struct std::str::EscapeDefault\\\">EscapeDefault</a>&lt;'a&gt;</div><div class=\\\"where\\\">    type <a href=\\\"iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = <a class=\\\"primitive\\\" href=\\\"primitive.char.html\\\">char</a>;</div>\",\"EscapeUnicode<'_>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"str/struct.EscapeUnicode.html\\\" title=\\\"struct std::str::EscapeUnicode\\\">EscapeUnicode</a>&lt;'a&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a&gt; <a class=\\\"trait\\\" href=\\\"iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"str/struct.EscapeUnicode.html\\\" title=\\\"struct std::str::EscapeUnicode\\\">EscapeUnicode</a>&lt;'a&gt;</div><div class=\\\"where\\\">    type <a href=\\\"iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = <a class=\\\"primitive\\\" href=\\\"primitive.char.html\\\">char</a>;</div>\",\"Lines<'_>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"str/struct.Lines.html\\\" title=\\\"struct std::str::Lines\\\">Lines</a>&lt;'a&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a&gt; <a class=\\\"trait\\\" href=\\\"iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"str/struct.Lines.html\\\" title=\\\"struct std::str::Lines\\\">Lines</a>&lt;'a&gt;</div><div class=\\\"where\\\">    type <a href=\\\"iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = &amp;'a <a class=\\\"primitive\\\" href=\\\"primitive.str.html\\\">str</a>;</div>\",\"LinesAny<'_>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"str/struct.LinesAny.html\\\" title=\\\"struct std::str::LinesAny\\\">LinesAny</a>&lt;'a&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a&gt; <a class=\\\"trait\\\" href=\\\"iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"str/struct.LinesAny.html\\\" title=\\\"struct std::str::LinesAny\\\">LinesAny</a>&lt;'a&gt;</div><div class=\\\"where\\\">    type <a href=\\\"iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = &amp;'a <a class=\\\"primitive\\\" href=\\\"primitive.str.html\\\">str</a>;</div>\",\"MatchIndices<'a, P>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"str/struct.MatchIndices.html\\\" title=\\\"struct std::str::MatchIndices\\\">MatchIndices</a>&lt;'a, P&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a, P&gt; <a class=\\\"trait\\\" href=\\\"iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"str/struct.MatchIndices.html\\\" title=\\\"struct std::str::MatchIndices\\\">MatchIndices</a>&lt;'a, P&gt;<div class=\\\"where\\\">where\\n    P: <a class=\\\"trait\\\" href=\\\"str/pattern/trait.Pattern.html\\\" title=\\\"trait std::str::pattern::Pattern\\\">Pattern</a>&lt;'a&gt;,</div></div><div class=\\\"where\\\">    type <a href=\\\"iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = (<a class=\\\"primitive\\\" href=\\\"primitive.usize.html\\\">usize</a>, &amp;'a <a class=\\\"primitive\\\" href=\\\"primitive.str.html\\\">str</a>);</div>\",\"Matches<'a, P>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"str/struct.Matches.html\\\" title=\\\"struct std::str::Matches\\\">Matches</a>&lt;'a, P&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a, P&gt; <a class=\\\"trait\\\" href=\\\"iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"str/struct.Matches.html\\\" title=\\\"struct std::str::Matches\\\">Matches</a>&lt;'a, P&gt;<div class=\\\"where\\\">where\\n    P: <a class=\\\"trait\\\" href=\\\"str/pattern/trait.Pattern.html\\\" title=\\\"trait std::str::pattern::Pattern\\\">Pattern</a>&lt;'a&gt;,</div></div><div class=\\\"where\\\">    type <a href=\\\"iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = &amp;'a <a class=\\\"primitive\\\" href=\\\"primitive.str.html\\\">str</a>;</div>\",\"RMatchIndices<'a, P>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"str/struct.RMatchIndices.html\\\" title=\\\"struct std::str::RMatchIndices\\\">RMatchIndices</a>&lt;'a, P&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a, P&gt; <a class=\\\"trait\\\" href=\\\"iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"str/struct.RMatchIndices.html\\\" title=\\\"struct std::str::RMatchIndices\\\">RMatchIndices</a>&lt;'a, P&gt;<div class=\\\"where\\\">where\\n    P: <a class=\\\"trait\\\" href=\\\"str/pattern/trait.Pattern.html\\\" title=\\\"trait std::str::pattern::Pattern\\\">Pattern</a>&lt;'a&gt;,\\n    &lt;P as <a class=\\\"trait\\\" href=\\\"str/pattern/trait.Pattern.html\\\" title=\\\"trait std::str::pattern::Pattern\\\">Pattern</a>&lt;'a&gt;&gt;::<a class=\\\"associatedtype\\\" href=\\\"str/pattern/trait.Pattern.html#associatedtype.Searcher\\\" title=\\\"type std::str::pattern::Pattern::Searcher\\\">Searcher</a>: <a class=\\\"trait\\\" href=\\\"str/pattern/trait.ReverseSearcher.html\\\" title=\\\"trait std::str::pattern::ReverseSearcher\\\">ReverseSearcher</a>&lt;'a&gt;,</div></div><div class=\\\"where\\\">    type <a href=\\\"iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = (<a class=\\\"primitive\\\" href=\\\"primitive.usize.html\\\">usize</a>, &amp;'a <a class=\\\"primitive\\\" href=\\\"primitive.str.html\\\">str</a>);</div>\",\"RMatches<'a, P>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"str/struct.RMatches.html\\\" title=\\\"struct std::str::RMatches\\\">RMatches</a>&lt;'a, P&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a, P&gt; <a class=\\\"trait\\\" href=\\\"iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"str/struct.RMatches.html\\\" title=\\\"struct std::str::RMatches\\\">RMatches</a>&lt;'a, P&gt;<div class=\\\"where\\\">where\\n    P: <a class=\\\"trait\\\" href=\\\"str/pattern/trait.Pattern.html\\\" title=\\\"trait std::str::pattern::Pattern\\\">Pattern</a>&lt;'a&gt;,\\n    &lt;P as <a class=\\\"trait\\\" href=\\\"str/pattern/trait.Pattern.html\\\" title=\\\"trait std::str::pattern::Pattern\\\">Pattern</a>&lt;'a&gt;&gt;::<a class=\\\"associatedtype\\\" href=\\\"str/pattern/trait.Pattern.html#associatedtype.Searcher\\\" title=\\\"type std::str::pattern::Pattern::Searcher\\\">Searcher</a>: <a class=\\\"trait\\\" href=\\\"str/pattern/trait.ReverseSearcher.html\\\" title=\\\"trait std::str::pattern::ReverseSearcher\\\">ReverseSearcher</a>&lt;'a&gt;,</div></div><div class=\\\"where\\\">    type <a href=\\\"iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = &amp;'a <a class=\\\"primitive\\\" href=\\\"primitive.str.html\\\">str</a>;</div>\",\"RSplit<'a, P>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"str/struct.RSplit.html\\\" title=\\\"struct std::str::RSplit\\\">RSplit</a>&lt;'a, P&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a, P&gt; <a class=\\\"trait\\\" href=\\\"iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"str/struct.RSplit.html\\\" title=\\\"struct std::str::RSplit\\\">RSplit</a>&lt;'a, P&gt;<div class=\\\"where\\\">where\\n    P: <a class=\\\"trait\\\" href=\\\"str/pattern/trait.Pattern.html\\\" title=\\\"trait std::str::pattern::Pattern\\\">Pattern</a>&lt;'a&gt;,\\n    &lt;P as <a class=\\\"trait\\\" href=\\\"str/pattern/trait.Pattern.html\\\" title=\\\"trait std::str::pattern::Pattern\\\">Pattern</a>&lt;'a&gt;&gt;::<a class=\\\"associatedtype\\\" href=\\\"str/pattern/trait.Pattern.html#associatedtype.Searcher\\\" title=\\\"type std::str::pattern::Pattern::Searcher\\\">Searcher</a>: <a class=\\\"trait\\\" href=\\\"str/pattern/trait.ReverseSearcher.html\\\" title=\\\"trait std::str::pattern::ReverseSearcher\\\">ReverseSearcher</a>&lt;'a&gt;,</div></div><div class=\\\"where\\\">    type <a href=\\\"iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = &amp;'a <a class=\\\"primitive\\\" href=\\\"primitive.str.html\\\">str</a>;</div>\",\"RSplitN<'a, P>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"str/struct.RSplitN.html\\\" title=\\\"struct std::str::RSplitN\\\">RSplitN</a>&lt;'a, P&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a, P&gt; <a class=\\\"trait\\\" href=\\\"iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"str/struct.RSplitN.html\\\" title=\\\"struct std::str::RSplitN\\\">RSplitN</a>&lt;'a, P&gt;<div class=\\\"where\\\">where\\n    P: <a class=\\\"trait\\\" href=\\\"str/pattern/trait.Pattern.html\\\" title=\\\"trait std::str::pattern::Pattern\\\">Pattern</a>&lt;'a&gt;,\\n    &lt;P as <a class=\\\"trait\\\" href=\\\"str/pattern/trait.Pattern.html\\\" title=\\\"trait std::str::pattern::Pattern\\\">Pattern</a>&lt;'a&gt;&gt;::<a class=\\\"associatedtype\\\" href=\\\"str/pattern/trait.Pattern.html#associatedtype.Searcher\\\" title=\\\"type std::str::pattern::Pattern::Searcher\\\">Searcher</a>: <a class=\\\"trait\\\" href=\\\"str/pattern/trait.ReverseSearcher.html\\\" title=\\\"trait std::str::pattern::ReverseSearcher\\\">ReverseSearcher</a>&lt;'a&gt;,</div></div><div class=\\\"where\\\">    type <a href=\\\"iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = &amp;'a <a class=\\\"primitive\\\" href=\\\"primitive.str.html\\\">str</a>;</div>\",\"RSplitTerminator<'a, P>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"str/struct.RSplitTerminator.html\\\" title=\\\"struct std::str::RSplitTerminator\\\">RSplitTerminator</a>&lt;'a, P&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a, P&gt; <a class=\\\"trait\\\" href=\\\"iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"str/struct.RSplitTerminator.html\\\" title=\\\"struct std::str::RSplitTerminator\\\">RSplitTerminator</a>&lt;'a, P&gt;<div class=\\\"where\\\">where\\n    P: <a class=\\\"trait\\\" href=\\\"str/pattern/trait.Pattern.html\\\" title=\\\"trait std::str::pattern::Pattern\\\">Pattern</a>&lt;'a&gt;,\\n    &lt;P as <a class=\\\"trait\\\" href=\\\"str/pattern/trait.Pattern.html\\\" title=\\\"trait std::str::pattern::Pattern\\\">Pattern</a>&lt;'a&gt;&gt;::<a class=\\\"associatedtype\\\" href=\\\"str/pattern/trait.Pattern.html#associatedtype.Searcher\\\" title=\\\"type std::str::pattern::Pattern::Searcher\\\">Searcher</a>: <a class=\\\"trait\\\" href=\\\"str/pattern/trait.ReverseSearcher.html\\\" title=\\\"trait std::str::pattern::ReverseSearcher\\\">ReverseSearcher</a>&lt;'a&gt;,</div></div><div class=\\\"where\\\">    type <a href=\\\"iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = &amp;'a <a class=\\\"primitive\\\" href=\\\"primitive.str.html\\\">str</a>;</div>\",\"Split<'a, P>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"str/struct.Split.html\\\" title=\\\"struct std::str::Split\\\">Split</a>&lt;'a, P&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a, P&gt; <a class=\\\"trait\\\" href=\\\"iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"str/struct.Split.html\\\" title=\\\"struct std::str::Split\\\">Split</a>&lt;'a, P&gt;<div class=\\\"where\\\">where\\n    P: <a class=\\\"trait\\\" href=\\\"str/pattern/trait.Pattern.html\\\" title=\\\"trait std::str::pattern::Pattern\\\">Pattern</a>&lt;'a&gt;,</div></div><div class=\\\"where\\\">    type <a href=\\\"iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = &amp;'a <a class=\\\"primitive\\\" href=\\\"primitive.str.html\\\">str</a>;</div>\",\"SplitAsciiWhitespace<'_>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"str/struct.SplitAsciiWhitespace.html\\\" title=\\\"struct std::str::SplitAsciiWhitespace\\\">SplitAsciiWhitespace</a>&lt;'a&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a&gt; <a class=\\\"trait\\\" href=\\\"iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"str/struct.SplitAsciiWhitespace.html\\\" title=\\\"struct std::str::SplitAsciiWhitespace\\\">SplitAsciiWhitespace</a>&lt;'a&gt;</div><div class=\\\"where\\\">    type <a href=\\\"iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = &amp;'a <a class=\\\"primitive\\\" href=\\\"primitive.str.html\\\">str</a>;</div>\",\"SplitInclusive<'a, P>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"str/struct.SplitInclusive.html\\\" title=\\\"struct std::str::SplitInclusive\\\">SplitInclusive</a>&lt;'a, P&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a, P&gt; <a class=\\\"trait\\\" href=\\\"iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"str/struct.SplitInclusive.html\\\" title=\\\"struct std::str::SplitInclusive\\\">SplitInclusive</a>&lt;'a, P&gt;<div class=\\\"where\\\">where\\n    P: <a class=\\\"trait\\\" href=\\\"str/pattern/trait.Pattern.html\\\" title=\\\"trait std::str::pattern::Pattern\\\">Pattern</a>&lt;'a&gt;,</div></div><div class=\\\"where\\\">    type <a href=\\\"iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = &amp;'a <a class=\\\"primitive\\\" href=\\\"primitive.str.html\\\">str</a>;</div>\",\"SplitN<'a, P>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"str/struct.SplitN.html\\\" title=\\\"struct std::str::SplitN\\\">SplitN</a>&lt;'a, P&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a, P&gt; <a class=\\\"trait\\\" href=\\\"iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"str/struct.SplitN.html\\\" title=\\\"struct std::str::SplitN\\\">SplitN</a>&lt;'a, P&gt;<div class=\\\"where\\\">where\\n    P: <a class=\\\"trait\\\" href=\\\"str/pattern/trait.Pattern.html\\\" title=\\\"trait std::str::pattern::Pattern\\\">Pattern</a>&lt;'a&gt;,</div></div><div class=\\\"where\\\">    type <a href=\\\"iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = &amp;'a <a class=\\\"primitive\\\" href=\\\"primitive.str.html\\\">str</a>;</div>\",\"SplitTerminator<'a, P>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"str/struct.SplitTerminator.html\\\" title=\\\"struct std::str::SplitTerminator\\\">SplitTerminator</a>&lt;'a, P&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a, P&gt; <a class=\\\"trait\\\" href=\\\"iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"str/struct.SplitTerminator.html\\\" title=\\\"struct std::str::SplitTerminator\\\">SplitTerminator</a>&lt;'a, P&gt;<div class=\\\"where\\\">where\\n    P: <a class=\\\"trait\\\" href=\\\"str/pattern/trait.Pattern.html\\\" title=\\\"trait std::str::pattern::Pattern\\\">Pattern</a>&lt;'a&gt;,</div></div><div class=\\\"where\\\">    type <a href=\\\"iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = &amp;'a <a class=\\\"primitive\\\" href=\\\"primitive.str.html\\\">str</a>;</div>\",\"SplitWhitespace<'_>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"str/struct.SplitWhitespace.html\\\" title=\\\"struct std::str::SplitWhitespace\\\">SplitWhitespace</a>&lt;'a&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a&gt; <a class=\\\"trait\\\" href=\\\"iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"str/struct.SplitWhitespace.html\\\" title=\\\"struct std::str::SplitWhitespace\\\">SplitWhitespace</a>&lt;'a&gt;</div><div class=\\\"where\\\">    type <a href=\\\"iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = &amp;'a <a class=\\\"primitive\\\" href=\\\"primitive.str.html\\\">str</a>;</div>\",\"Vec<u8>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"vec/struct.Vec.html\\\" title=\\\"struct std::vec::Vec\\\">Vec</a>&lt;<a class=\\\"primitive\\\" href=\\\"primitive.u8.html\\\">u8</a>, A&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;A: <a class=\\\"trait\\\" href=\\\"alloc/trait.Allocator.html\\\" title=\\\"trait std::alloc::Allocator\\\">Allocator</a>&gt; <a class=\\\"trait\\\" href=\\\"io/trait.Write.html\\\" title=\\\"trait std::io::Write\\\">Write</a> for <a class=\\\"struct\\\" href=\\\"vec/struct.Vec.html\\\" title=\\\"struct std::vec::Vec\\\">Vec</a>&lt;<a class=\\\"primitive\\\" href=\\\"primitive.u8.html\\\">u8</a>, A&gt;</div>\"}</script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:09:09.688Z"
}