{
	"title": "Hash in std::hash - Rust",
	"url": "https://doc.rust-lang.org/stable/std/hash/trait.Hash.html",
	"markdown": "# Hash in std::hash - Rust\n\n## Trait [std](../index.html)::[hash](index.html)::[Hash](#)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#189) ·\n\n```\npub trait Hash {\n    // Required method\n    fn hash<H>(&self, state: &mut H)\n       where H: Hasher;\n\n    // Provided method\n    fn hash_slice<H>(data: &[Self], state: &mut H)\n       where H: Hasher,\n             Self: Sized { ... }\n}\n```\n\nExpand description\n\nA hashable type.\n\nTypes implementing `Hash` are able to be [`hash`](about:blank/trait.Hash.html#tymethod.hash \"method std::hash::Hash::hash\")ed with an instance of [`Hasher`](trait.Hasher.html \"trait std::hash::Hasher\").\n\n### [§](#implementing-hash)Implementing `Hash`\n\nYou can derive `Hash` with `#[derive(Hash)]` if all fields implement `Hash`. The resulting hash will be the combination of the values from calling [`hash`](about:blank/trait.Hash.html#tymethod.hash \"method std::hash::Hash::hash\") on each field.\n\n```\n#[derive(Hash)]\nstruct Rustacean {\n    name: String,\n    country: String,\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++%23%5Bderive(Hash)%5D%0A++++struct+Rustacean+%7B%0A++++++++name:+String,%0A++++++++country:+String,%0A++++%7D%0A%7D&edition=2021)\n\nIf you need more control over how a value is hashed, you can of course implement the `Hash` trait yourself:\n\n```\nuse std::hash::{Hash, Hasher};\n\nstruct Person {\n    id: u32,\n    name: String,\n    phone: u64,\n}\n\nimpl Hash for Person {\n    fn hash<H: Hasher>(&self, state: &mut H) {\n        self.id.hash(state);\n        self.phone.hash(state);\n    }\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::hash::%7BHash,+Hasher%7D;%0A++++%0A++++struct+Person+%7B%0A++++++++id:+u32,%0A++++++++name:+String,%0A++++++++phone:+u64,%0A++++%7D%0A++++%0A++++impl+Hash+for+Person+%7B%0A++++++++fn+hash%3CH:+Hasher%3E(%26self,+state:+%26mut+H)+%7B%0A++++++++++++self.id.hash(state);%0A++++++++++++self.phone.hash(state);%0A++++++++%7D%0A++++%7D%0A%7D&edition=2021)\n\n### [§](#hash-and-eq)`Hash` and `Eq`\n\nWhen implementing both `Hash` and [`Eq`](../cmp/trait.Eq.html \"trait std::cmp::Eq\"), it is important that the following property holds:\n\n```text\nk1 == k2 -> hash(k1) == hash(k2)\n\n```\n\nIn other words, if two keys are equal, their hashes must also be equal. [`HashMap`](../../std/collections/struct.HashMap.html) and [`HashSet`](../../std/collections/struct.HashSet.html) both rely on this behavior.\n\nThankfully, you won’t need to worry about upholding this property when deriving both [`Eq`](../cmp/trait.Eq.html \"trait std::cmp::Eq\") and `Hash` with `#[derive(PartialEq, Eq, Hash)]`.\n\nViolating this property is a logic error. The behavior resulting from a logic error is not specified, but users of the trait must ensure that such logic errors do _not_ result in undefined behavior. This means that `unsafe` code **must not** rely on the correctness of these methods.\n\n### [§](#prefix-collisions)Prefix collisions\n\nImplementations of `hash` should ensure that the data they pass to the `Hasher` are prefix-free. That is, values which are not equal should cause two different sequences of values to be written, and neither of the two sequences should be a prefix of the other.\n\nFor example, the standard implementation of [`Hash` for `&str`](about:blank/std/primitive.str.html#impl-Hash-for-str) passes an extra `0xFF` byte to the `Hasher` so that the values `(\"ab\", \"c\")` and `(\"a\", \"bc\")` hash differently.\n\n### [§](#portability)Portability\n\nDue to differences in endianness and type sizes, data fed by `Hash` to a `Hasher` should not be considered portable across platforms. Additionally the data passed by most standard library types should not be considered stable between compiler versions.\n\nThis means tests shouldn’t probe hard-coded hash values or data fed to a `Hasher` and instead should check consistency with `Eq`.\n\nSerialization formats intended to be portable between platforms or compiler versions should either avoid encoding hashes or only rely on `Hash` and `Hasher` implementations that provide additional guarantees.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#202)\n\nFeeds this value into the given [`Hasher`](trait.Hasher.html \"trait std::hash::Hasher\").\n\n##### [§](#examples)Examples\n\n```\nuse std::hash::{DefaultHasher, Hash, Hasher};\n\nlet mut hasher = DefaultHasher::new();\n7920.hash(&mut hasher);\nprintln!(\"Hash is {:x}!\", hasher.finish());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::hash::%7BDefaultHasher,+Hash,+Hasher%7D;%0A++++%0A++++let+mut+hasher+=+DefaultHasher::new();%0A++++7920.hash(%26mut+hasher);%0A++++println!(%22Hash+is+%7B:x%7D!%22,+hasher.finish());%0A%7D&edition=2021)\n\n1.3.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#238-240)\n\nFeeds a slice of this type into the given [`Hasher`](trait.Hasher.html \"trait std::hash::Hasher\").\n\nThis method is meant as a convenience, but its implementation is also explicitly left unspecified. It isn’t guaranteed to be equivalent to repeated calls of [`hash`](about:blank/trait.Hash.html#tymethod.hash \"method std::hash::Hash::hash\") and implementations of [`Hash`](about:blank/trait.Hash.html#tymethod.hash \"method std::hash::Hash::hash\") should keep that in mind and call [`hash`](about:blank/trait.Hash.html#tymethod.hash \"method std::hash::Hash::hash\") themselves if the slice isn’t treated as a whole unit in the [`PartialEq`](../cmp/trait.PartialEq.html \"trait std::cmp::PartialEq\") implementation.\n\nFor example, a [`VecDeque`](../../std/collections/struct.VecDeque.html) implementation might naïvely call [`as_slices`](about:blank/std/collections/struct.VecDeque.html#method.as_slices) and then [`hash_slice`](about:blank/trait.Hash.html#method.hash_slice \"associated function std::hash::Hash::hash_slice\") on each slice, but this is wrong since the two slices can change with a call to [`make_contiguous`](about:blank/std/collections/struct.VecDeque.html#method.make_contiguous) without affecting the [`PartialEq`](../cmp/trait.PartialEq.html \"trait std::cmp::PartialEq\") result. Since these slices aren’t treated as singular units, and instead part of a larger deque, this method cannot be used.\n\n##### [§](#examples-1)Examples\n\n```\nuse std::hash::{DefaultHasher, Hash, Hasher};\n\nlet mut hasher = DefaultHasher::new();\nlet numbers = [6, 28, 496, 8128];\nHash::hash_slice(&numbers, &mut hasher);\nprintln!(\"Hash is {:x}!\", hasher.finish());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::hash::%7BDefaultHasher,+Hash,+Hasher%7D;%0A++++%0A++++let+mut+hasher+=+DefaultHasher::new();%0A++++let+numbers+=+%5B6,+28,+496,+8128%5D;%0A++++Hash::hash_slice(%26numbers,+%26mut+hasher);%0A++++println!(%22Hash+is+%7B:x%7D!%22,+hasher.finish());%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ascii/ascii_char.rs.html#57)[§](#impl-Hash-for-Char)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#377)[§](#impl-Hash-for-Ordering)\n\n1.44.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#967)[§](#impl-Hash-for-Infallible)\n\n1.0.0 · [source](about:blank/src/std/io/error.rs.html#211)[§](#impl-Hash-for-ErrorKind)\n\n1.7.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#30)[§](#impl-Hash-for-IpAddr)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#194)[§](#impl-Hash-for-Ipv6MulticastScope)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/net/socket_addr.rs.html#28)[§](#impl-Hash-for-SocketAddr)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/sync/atomic.rs.html#320)[§](#impl-Hash-for-Ordering-1)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#852)[§](#impl-Hash-for-bool)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#860)[§](#impl-Hash-for-char)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#836-849)[§](#impl-Hash-for-i8)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#836-849)[§](#impl-Hash-for-i16)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#836-849)[§](#impl-Hash-for-i32)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#836-849)[§](#impl-Hash-for-i64)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#836-849)[§](#impl-Hash-for-i128)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#836-849)[§](#impl-Hash-for-isize)\n\n1.29.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#876)[§](#impl-Hash-for-!)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#868)[§](#impl-Hash-for-str)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#836-849)[§](#impl-Hash-for-u8)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#836-849)[§](#impl-Hash-for-u16)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#836-849)[§](#impl-Hash-for-u32)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#836-849)[§](#impl-Hash-for-u64)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#836-849)[§](#impl-Hash-for-u128)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#927)[§](#impl-Hash-for-())\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#836-849)[§](#impl-Hash-for-usize)\n\n1.28.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/alloc/layout.rs.html#38)[§](#impl-Hash-for-Layout)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#650)[§](#impl-Hash-for-TypeId)\n\n1.64.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/ffi/c_str.rs.html#97)[§](#impl-Hash-for-CStr)\n\n1.64.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#112)[§](#impl-Hash-for-CString)\n\n1.0.0 · [source](about:blank/src/std/ffi/os_str.rs.html#1468-1473)[§](#impl-Hash-for-OsStr)\n\n1.0.0 · [source](about:blank/src/std/ffi/os_str.rs.html#716-721)[§](#impl-Hash-for-OsString)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#106)[§](#impl-Hash-for-Error)\n\n1.1.0 · [source](about:blank/src/std/fs.rs.html#217)[§](#impl-Hash-for-FileType)\n\n1.33.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/marker.rs.html#919)[§](#impl-Hash-for-PhantomPinned)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#71)[§](#impl-Hash-for-Ipv4Addr)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#153)[§](#impl-Hash-for-Ipv6Addr)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/net/socket_addr.rs.html#64)[§](#impl-Hash-for-SocketAddrV4)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/net/socket_addr.rs.html#97)[§](#impl-Hash-for-SocketAddrV6)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#41)[§](#impl-Hash-for-RangeFull)\n\n[source](about:blank/src/std/os/unix/net/ucred.rs.html#11)[§](#impl-Hash-for-UCred)\n\nAvailable on **Unix** only.\n\n1.0.0 · [source](about:blank/src/std/path.rs.html#3072-3120)[§](#impl-Hash-for-Path)\n\n1.0.0 · [source](about:blank/src/std/path.rs.html#1931-1935)[§](#impl-Hash-for-PathBuf)\n\n1.0.0 · [source](about:blank/src/std/path.rs.html#473-477)[§](#impl-Hash-for-PrefixComponent%3C'_%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/alignment.rs.html#223)[§](#impl-Hash-for-Alignment)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2386)[§](#impl-Hash-for-String)\n\n1.19.0 · [source](about:blank/src/std/thread/mod.rs.html#1206)[§](#impl-Hash-for-ThreadId)\n\n1.3.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#96)[§](#impl-Hash-for-Duration)\n\n1.8.0 · [source](about:blank/src/std/time.rs.html#153)[§](#impl-Hash-for-Instant)\n\n1.8.0 · [source](about:blank/src/std/time.rs.html#246)[§](#impl-Hash-for-SystemTime)\n\n1.0.0 · [source](about:blank/src/std/path.rs.html#501)[§](#impl-Hash-for-Component%3C'a%3E)\n\n1.0.0 · [source](about:blank/src/std/path.rs.html#141)[§](#impl-Hash-for-Prefix%3C'a%3E)\n\n1.10.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/panic/location.rs.html#31)[§](#impl-Hash-for-Location%3C'a%3E)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#424-426)[§](#impl-Hash-for-Cow%3C'_,+B%3E)\n\n1.55.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/ops/control_flow.rs.html#84)[§](#impl-Hash-for-ControlFlow%3CB,+C%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/metadata.rs.html#290)[§](#impl-Hash-for-DynMetadata%3CDyn%3E)\n\n1.4.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/mod.rs.html#2117)[§](#impl-Hash-for-F)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#78)[§](#impl-Hash-for-Range%3CIdx%3E)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#187)[§](#impl-Hash-for-RangeFrom%3CIdx%3E)\n\n1.26.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#343)[§](#impl-Hash-for-RangeInclusive%3CIdx%3E)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#269)[§](#impl-Hash-for-RangeTo%3CIdx%3E)\n\n1.26.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#590)[§](#impl-Hash-for-RangeToInclusive%3CIdx%3E)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/map.rs.html#2268)[§](#impl-Hash-for-BTreeMap%3CK,+V,+A%3E)\n\n1.41.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1164)[§](#impl-Hash-for-Pin%3CPtr%3E)\n\n1.17.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#671)[§](#impl-Hash-for-Bound%3CT%3E)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#569)[§](#impl-Hash-for-Option%3CT%3E)\n\n1.36.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/task/poll.rs.html#9)[§](#impl-Hash-for-Poll%3CT%3E)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#967)[§](#impl-Hash-for-*const+T)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#977)[§](#impl-Hash-for-*mut+T)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#951)[§](#impl-Hash-for-%26T)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#959)[§](#impl-Hash-for-%26mut+T)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#942)[§](#impl-Hash-for-%5BT%5D)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#928)[§](#impl-Hash-for-(T,))\n\nThis trait is implemented for tuples up to twelve items long.\n\n1.19.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#645)[§](#impl-Hash-for-Reverse%3CT%3E)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/marker.rs.html#743)[§](#impl-Hash-for-PhantomData%3CT%3E)\n\n1.21.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/mem/mod.rs.html#1055)[§](#impl-Hash-for-Discriminant%3CT%3E)\n\n1.20.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/mem/manually_drop.rs.html#48)[§](#impl-Hash-for-ManuallyDrop%3CT%3E)\n\n1.28.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#257-259)[§](#impl-Hash-for-NonZero%3CT%3E)\n\n1.74.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/saturating.rs.html#35)[§](#impl-Hash-for-Saturating%3CT%3E)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/wrapping.rs.html#40)[§](#impl-Hash-for-Wrapping%3CT%3E)\n\n1.25.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1819)[§](#impl-Hash-for-NonNull%3CT%3E)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1433)[§](#impl-Hash-for-Box%3CT,+A%3E)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#83)[§](#impl-Hash-for-BTreeSet%3CT,+A%3E)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#2157)[§](#impl-Hash-for-LinkedList%3CT,+A%3E)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2829)[§](#impl-Hash-for-VecDeque%3CT,+A%3E)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/rc.rs.html#2490)[§](#impl-Hash-for-Rc%3CT,+A%3E)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/sync.rs.html#3469)[§](#impl-Hash-for-Arc%3CT,+A%3E)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#2888)[§](#impl-Hash-for-Vec%3CT,+A%3E)\n\nThe hash of a vector is the same as that of the corresponding slice, as required by the `core::borrow::Borrow` implementation.\n\n```\nuse std::hash::BuildHasher;\n\nlet b = std::hash::RandomState::new();\nlet v: Vec<u8> = vec![0xa8, 0x3c, 0x09];\nlet s: &[u8] = &[0xa8, 0x3c, 0x09];\nassert_eq!(b.hash_one(v), b.hash_one(s));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::hash::BuildHasher;%0A++++%0A++++let+b+=+std::hash::RandomState::new();%0A++++let+v:+Vec%3Cu8%3E+=+vec!%5B0xa8,+0x3c,+0x09%5D;%0A++++let+s:+%26%5Bu8%5D+=+%26%5B0xa8,+0x3c,+0x09%5D;%0A++++assert_eq!(b.hash_one(v),+b.hash_one(s));%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/result.rs.html#523)[§](#impl-Hash-for-Result%3CT,+E%3E)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#306)[§](#impl-Hash-for-%5BT;+N%5D)\n\nThe hash of an array is the same as that of the corresponding slice, as required by the `Borrow` implementation.\n\n```\nuse std::hash::BuildHasher;\n\nlet b = std::hash::RandomState::new();\nlet a: [u8; 3] = [0xa8, 0x3c, 0x09];\nlet s: &[u8] = &[0xa8, 0x3c, 0x09];\nassert_eq!(b.hash_one(a), b.hash_one(s));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::hash::BuildHasher;%0A++++%0A++++let+b+=+std::hash::RandomState::new();%0A++++let+a:+%5Bu8;+3%5D+=+%5B0xa8,+0x3c,+0x09%5D;%0A++++let+s:+%26%5Bu8%5D+=+%26%5B0xa8,+0x3c,+0x09%5D;%0A++++assert_eq!(b.hash_one(a),+b.hash_one(s));%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#958-961)[§](#impl-Hash-for-Simd%3CT,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ops/coroutine.rs.html#8)[§](#impl-Hash-for-CoroutineState%3CY,+R%3E)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"A hashable type.\"><title>Hash in std::hash - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc trait\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">Hash</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">Hash</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#required-methods\">Required Methods</a></h3><ul class=\"block\"><li><a href=\"#tymethod.hash\">hash</a></li></ul><h3><a href=\"#provided-methods\">Provided Methods</a></h3><ul class=\"block\"><li><a href=\"#method.hash_slice\">hash_slice</a></li></ul><h3><a href=\"#object-safety\">Object Safety</a></h3><h3><a href=\"#implementors\">Implementors</a></h3></section><h2><a href=\"index.html\">In std::hash</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.BuildHasherDefault.html\">BuildHasherDefault</a></li><li><a href=\"struct.DefaultHasher.html\">DefaultHasher</a></li><li><a href=\"struct.RandomState.html\">RandomState</a></li><li><a href=\"struct.SipHasher.html\">SipHasher</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.BuildHasher.html\">BuildHasher</a></li><li><a href=\"trait.Hash.html\">Hash</a></li><li><a href=\"trait.Hasher.html\">Hasher</a></li></ul><h3><a href=\"index.html#derives\">Derive Macros</a></h3><ul class=\"block derive\"><li><a href=\"derive.Hash.html\">Hash</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Trait <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">hash</a>::<wbr><a class=\"trait\" href=\"#\">Hash</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#189\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub trait Hash {\n    // Required method\n    fn <a href=\"#tymethod.hash\" class=\"fn\">hash</a>&lt;H&gt;(&amp;self, state: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut H</a>)\n       <span class=\"where\">where H: <a class=\"trait\" href=\"trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a></span>;\n\n    // Provided method\n    fn <a href=\"#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut H</a>)\n       <span class=\"where\">where H: <a class=\"trait\" href=\"trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,\n             Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a></span> { ... }\n}</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>A hashable type.</p>\n<p>Types implementing <code>Hash</code> are able to be <a href=\"trait.Hash.html#tymethod.hash\" title=\"method std::hash::Hash::hash\"><code>hash</code></a>ed with an instance of\n<a href=\"trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>.</p>\n<h3 id=\"implementing-hash\"><a class=\"doc-anchor\" href=\"#implementing-hash\">§</a>Implementing <code>Hash</code></h3>\n<p>You can derive <code>Hash</code> with <code>#[derive(Hash)]</code> if all fields implement <code>Hash</code>.\nThe resulting hash will be the combination of the values from calling\n<a href=\"trait.Hash.html#tymethod.hash\" title=\"method std::hash::Hash::hash\"><code>hash</code></a> on each field.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#[derive(Hash)]\n</span><span class=\"kw\">struct </span>Rustacean {\n    name: String,\n    country: String,\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++%23%5Bderive(Hash)%5D%0A++++struct+Rustacean+%7B%0A++++++++name:+String,%0A++++++++country:+String,%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<p>If you need more control over how a value is hashed, you can of course\nimplement the <code>Hash</code> trait yourself:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::hash::{Hash, Hasher};\n\n<span class=\"kw\">struct </span>Person {\n    id: u32,\n    name: String,\n    phone: u64,\n}\n\n<span class=\"kw\">impl </span>Hash <span class=\"kw\">for </span>Person {\n    <span class=\"kw\">fn </span>hash&lt;H: Hasher&gt;(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, state: <span class=\"kw-2\">&amp;mut </span>H) {\n        <span class=\"self\">self</span>.id.hash(state);\n        <span class=\"self\">self</span>.phone.hash(state);\n    }\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::hash::%7BHash,+Hasher%7D;%0A++++%0A++++struct+Person+%7B%0A++++++++id:+u32,%0A++++++++name:+String,%0A++++++++phone:+u64,%0A++++%7D%0A++++%0A++++impl+Hash+for+Person+%7B%0A++++++++fn+hash%3CH:+Hasher%3E(%26self,+state:+%26mut+H)+%7B%0A++++++++++++self.id.hash(state);%0A++++++++++++self.phone.hash(state);%0A++++++++%7D%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<h3 id=\"hash-and-eq\"><a class=\"doc-anchor\" href=\"#hash-and-eq\">§</a><code>Hash</code> and <code>Eq</code></h3>\n<p>When implementing both <code>Hash</code> and <a href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\"><code>Eq</code></a>, it is important that the following\nproperty holds:</p>\n<div class=\"example-wrap\"><pre class=\"language-text\"><code>k1 == k2 -&gt; hash(k1) == hash(k2)\n</code></pre></div>\n<p>In other words, if two keys are equal, their hashes must also be equal.\n<a href=\"../../std/collections/struct.HashMap.html\"><code>HashMap</code></a> and <a href=\"../../std/collections/struct.HashSet.html\"><code>HashSet</code></a> both rely on this behavior.</p>\n<p>Thankfully, you won’t need to worry about upholding this property when\nderiving both <a href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\"><code>Eq</code></a> and <code>Hash</code> with <code>#[derive(PartialEq, Eq, Hash)]</code>.</p>\n<p>Violating this property is a logic error. The behavior resulting from a logic error is not\nspecified, but users of the trait must ensure that such logic errors do <em>not</em> result in\nundefined behavior. This means that <code>unsafe</code> code <strong>must not</strong> rely on the correctness of these\nmethods.</p>\n<h3 id=\"prefix-collisions\"><a class=\"doc-anchor\" href=\"#prefix-collisions\">§</a>Prefix collisions</h3>\n<p>Implementations of <code>hash</code> should ensure that the data they\npass to the <code>Hasher</code> are prefix-free. That is,\nvalues which are not equal should cause two different sequences of values to be written,\nand neither of the two sequences should be a prefix of the other.</p>\n<p>For example, the standard implementation of <a href=\"../../std/primitive.str.html#impl-Hash-for-str\"><code>Hash</code> for <code>&amp;str</code></a> passes an extra\n<code>0xFF</code> byte to the <code>Hasher</code> so that the values <code>(\"ab\", \"c\")</code> and <code>(\"a\", \"bc\")</code> hash differently.</p>\n<h3 id=\"portability\"><a class=\"doc-anchor\" href=\"#portability\">§</a>Portability</h3>\n<p>Due to differences in endianness and type sizes, data fed by <code>Hash</code> to a <code>Hasher</code>\nshould not be considered portable across platforms. Additionally the data passed by most\nstandard library types should not be considered stable between compiler versions.</p>\n<p>This means tests shouldn’t probe hard-coded hash values or data fed to a <code>Hasher</code> and\ninstead should check consistency with <code>Eq</code>.</p>\n<p>Serialization formats intended to be portable between platforms or compiler versions should\neither avoid encoding hashes or only rely on <code>Hash</code> and <code>Hasher</code> implementations that\nprovide additional guarantees.</p>\n</div></details><h2 id=\"required-methods\" class=\"section-header\">Required Methods<a href=\"#required-methods\" class=\"anchor\">§</a></h2><div class=\"methods\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.hash\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#202\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.hash\" class=\"fn\">hash</a>&lt;H&gt;(&amp;self, state: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class=\"docblock\"><p>Feeds this value into the given <a href=\"trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::hash::{DefaultHasher, Hash, Hasher};\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>hasher = DefaultHasher::new();\n<span class=\"number\">7920</span>.hash(<span class=\"kw-2\">&amp;mut </span>hasher);\n<span class=\"macro\">println!</span>(<span class=\"string\">\"Hash is {:x}!\"</span>, hasher.finish());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::hash::%7BDefaultHasher,+Hash,+Hasher%7D;%0A++++%0A++++let+mut+hasher+=+DefaultHasher::new();%0A++++7920.hash(%26mut+hasher);%0A++++println!(%22Hash+is+%7B:x%7D!%22,+hasher.finish());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div><h2 id=\"provided-methods\" class=\"section-header\">Provided Methods<a href=\"#provided-methods\" class=\"anchor\">§</a></h2><div class=\"methods\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.hash_slice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#238-240\">source</a></span><h4 class=\"code-header\">fn <a href=\"#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Feeds a slice of this type into the given <a href=\"trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>.</p>\n<p>This method is meant as a convenience, but its implementation is\nalso explicitly left unspecified. It isn’t guaranteed to be\nequivalent to repeated calls of <a href=\"trait.Hash.html#tymethod.hash\" title=\"method std::hash::Hash::hash\"><code>hash</code></a> and implementations of\n<a href=\"trait.Hash.html#tymethod.hash\" title=\"method std::hash::Hash::hash\"><code>Hash</code></a> should keep that in mind and call <a href=\"trait.Hash.html#tymethod.hash\" title=\"method std::hash::Hash::hash\"><code>hash</code></a> themselves\nif the slice isn’t treated as a whole unit in the <a href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\"><code>PartialEq</code></a>\nimplementation.</p>\n<p>For example, a <a href=\"../../std/collections/struct.VecDeque.html\"><code>VecDeque</code></a> implementation might naïvely call\n<a href=\"../../std/collections/struct.VecDeque.html#method.as_slices\"><code>as_slices</code></a> and then <a href=\"trait.Hash.html#method.hash_slice\" title=\"associated function std::hash::Hash::hash_slice\"><code>hash_slice</code></a> on each slice, but this\nis wrong since the two slices can change with a call to\n<a href=\"../../std/collections/struct.VecDeque.html#method.make_contiguous\"><code>make_contiguous</code></a> without affecting the <a href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\"><code>PartialEq</code></a>\nresult. Since these slices aren’t treated as singular\nunits, and instead part of a larger deque, this method cannot\nbe used.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::hash::{DefaultHasher, Hash, Hasher};\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>hasher = DefaultHasher::new();\n<span class=\"kw\">let </span>numbers = [<span class=\"number\">6</span>, <span class=\"number\">28</span>, <span class=\"number\">496</span>, <span class=\"number\">8128</span>];\nHash::hash_slice(<span class=\"kw-2\">&amp;</span>numbers, <span class=\"kw-2\">&amp;mut </span>hasher);\n<span class=\"macro\">println!</span>(<span class=\"string\">\"Hash is {:x}!\"</span>, hasher.finish());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::hash::%7BDefaultHasher,+Hash,+Hasher%7D;%0A++++%0A++++let+mut+hasher+=+DefaultHasher::new();%0A++++let+numbers+=+%5B6,+28,+496,+8128%5D;%0A++++Hash::hash_slice(%26numbers,+%26mut+hasher);%0A++++println!(%22Hash+is+%7B:x%7D!%22,+hasher.finish());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div><h2 id=\"object-safety\" class=\"section-header\">Object Safety<a href=\"#object-safety\" class=\"anchor\">§</a></h2><div class=\"object-safety-info\">This trait is <b>not</b> <a href=\"https://doc.rust-lang.org/1.80.0/reference/items/traits.html#object-safety\">object safe</a>.</div><h2 id=\"implementors\" class=\"section-header\">Implementors<a href=\"#implementors\" class=\"anchor\">§</a></h2><div id=\"implementors-list\"><section id=\"impl-Hash-for-Char\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ascii/ascii_char.rs.html#57\">source</a><a href=\"#impl-Hash-for-Char\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"enum\" href=\"../ascii/enum.Char.html\" title=\"enum std::ascii::Char\">AsciiChar</a></h3></section><section id=\"impl-Hash-for-Ordering\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#377\">source</a></span><a href=\"#impl-Hash-for-Ordering\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for std::cmp::<a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a></h3></section><section id=\"impl-Hash-for-Infallible\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.44.0\">1.44.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#967\">source</a></span><a href=\"#impl-Hash-for-Infallible\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"enum\" href=\"../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h3></section><section id=\"impl-Hash-for-ErrorKind\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/error.rs.html#211\">source</a></span><a href=\"#impl-Hash-for-ErrorKind\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"enum\" href=\"../io/enum.ErrorKind.html\" title=\"enum std::io::ErrorKind\">ErrorKind</a></h3></section><section id=\"impl-Hash-for-IpAddr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0\">1.7.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#30\">source</a></span><a href=\"#impl-Hash-for-IpAddr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"enum\" href=\"../net/enum.IpAddr.html\" title=\"enum std::net::IpAddr\">IpAddr</a></h3></section><section id=\"impl-Hash-for-Ipv6MulticastScope\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#194\">source</a><a href=\"#impl-Hash-for-Ipv6MulticastScope\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"enum\" href=\"../net/enum.Ipv6MulticastScope.html\" title=\"enum std::net::Ipv6MulticastScope\">Ipv6MulticastScope</a></h3></section><section id=\"impl-Hash-for-SocketAddr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/socket_addr.rs.html#28\">source</a></span><a href=\"#impl-Hash-for-SocketAddr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"enum\" href=\"../net/enum.SocketAddr.html\" title=\"enum std::net::SocketAddr\">SocketAddr</a></h3></section><section id=\"impl-Hash-for-Ordering-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/sync/atomic.rs.html#320\">source</a></span><a href=\"#impl-Hash-for-Ordering-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for std::sync::atomic::<a class=\"enum\" href=\"../sync/atomic/enum.Ordering.html\" title=\"enum std::sync::atomic::Ordering\">Ordering</a></h3></section><section id=\"impl-Hash-for-bool\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#852\">source</a></span><a href=\"#impl-Hash-for-bool\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h3></section><section id=\"impl-Hash-for-char\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#860\">source</a></span><a href=\"#impl-Hash-for-char\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"primitive\" href=\"../primitive.char.html\">char</a></h3></section><section id=\"impl-Hash-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#836-849\">source</a></span><a href=\"#impl-Hash-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"primitive\" href=\"../primitive.i8.html\">i8</a></h3></section><section id=\"impl-Hash-for-i16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#836-849\">source</a></span><a href=\"#impl-Hash-for-i16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"primitive\" href=\"../primitive.i16.html\">i16</a></h3></section><section id=\"impl-Hash-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#836-849\">source</a></span><a href=\"#impl-Hash-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"primitive\" href=\"../primitive.i32.html\">i32</a></h3></section><section id=\"impl-Hash-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#836-849\">source</a></span><a href=\"#impl-Hash-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"primitive\" href=\"../primitive.i64.html\">i64</a></h3></section><section id=\"impl-Hash-for-i128\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#836-849\">source</a></span><a href=\"#impl-Hash-for-i128\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"primitive\" href=\"../primitive.i128.html\">i128</a></h3></section><section id=\"impl-Hash-for-isize\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#836-849\">source</a></span><a href=\"#impl-Hash-for-isize\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"primitive\" href=\"../primitive.isize.html\">isize</a></h3></section><section id=\"impl-Hash-for-!\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.29.0\">1.29.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#876\">source</a></span><a href=\"#impl-Hash-for-!\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"primitive\" href=\"../primitive.never.html\">!</a></h3></section><section id=\"impl-Hash-for-str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#868\">source</a></span><a href=\"#impl-Hash-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"primitive\" href=\"../primitive.str.html\">str</a></h3></section><section id=\"impl-Hash-for-u8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#836-849\">source</a></span><a href=\"#impl-Hash-for-u8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"primitive\" href=\"../primitive.u8.html\">u8</a></h3></section><section id=\"impl-Hash-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#836-849\">source</a></span><a href=\"#impl-Hash-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"primitive\" href=\"../primitive.u16.html\">u16</a></h3></section><section id=\"impl-Hash-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#836-849\">source</a></span><a href=\"#impl-Hash-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a></h3></section><section id=\"impl-Hash-for-u64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#836-849\">source</a></span><a href=\"#impl-Hash-for-u64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a></h3></section><section id=\"impl-Hash-for-u128\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#836-849\">source</a></span><a href=\"#impl-Hash-for-u128\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"primitive\" href=\"../primitive.u128.html\">u128</a></h3></section><section id=\"impl-Hash-for-()\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#927\">source</a></span><a href=\"#impl-Hash-for-()\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"primitive\" href=\"../primitive.unit.html\">()</a></h3></section><section id=\"impl-Hash-for-usize\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#836-849\">source</a></span><a href=\"#impl-Hash-for-usize\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a></h3></section><section id=\"impl-Hash-for-Layout\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/alloc/layout.rs.html#38\">source</a></span><a href=\"#impl-Hash-for-Layout\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"../alloc/struct.Layout.html\" title=\"struct std::alloc::Layout\">Layout</a></h3></section><section id=\"impl-Hash-for-TypeId\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#650\">source</a></span><a href=\"#impl-Hash-for-TypeId\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"../any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h3></section><section id=\"impl-Hash-for-CStr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0\">1.64.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ffi/c_str.rs.html#97\">source</a></span><a href=\"#impl-Hash-for-CStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"../ffi/struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a></h3></section><section id=\"impl-Hash-for-CString\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0\">1.64.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#112\">source</a></span><a href=\"#impl-Hash-for-CString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"../ffi/struct.CString.html\" title=\"struct std::ffi::CString\">CString</a></h3></section><section id=\"impl-Hash-for-OsStr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/ffi/os_str.rs.html#1468-1473\">source</a></span><a href=\"#impl-Hash-for-OsStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a></h3></section><section id=\"impl-Hash-for-OsString\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/ffi/os_str.rs.html#716-721\">source</a></span><a href=\"#impl-Hash-for-OsString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"../ffi/struct.OsString.html\" title=\"struct std::ffi::OsString\">OsString</a></h3></section><section id=\"impl-Hash-for-Error\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#106\">source</a></span><a href=\"#impl-Hash-for-Error\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"../fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a></h3></section><section id=\"impl-Hash-for-FileType\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.1.0\">1.1.0</span> · <a class=\"src\" href=\"../../src/std/fs.rs.html#217\">source</a></span><a href=\"#impl-Hash-for-FileType\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"../fs/struct.FileType.html\" title=\"struct std::fs::FileType\">FileType</a></h3></section><section id=\"impl-Hash-for-PhantomPinned\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0\">1.33.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/marker.rs.html#919\">source</a></span><a href=\"#impl-Hash-for-PhantomPinned\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"../marker/struct.PhantomPinned.html\" title=\"struct std::marker::PhantomPinned\">PhantomPinned</a></h3></section><section id=\"impl-Hash-for-Ipv4Addr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#71\">source</a></span><a href=\"#impl-Hash-for-Ipv4Addr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"../net/struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a></h3></section><section id=\"impl-Hash-for-Ipv6Addr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#153\">source</a></span><a href=\"#impl-Hash-for-Ipv6Addr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"../net/struct.Ipv6Addr.html\" title=\"struct std::net::Ipv6Addr\">Ipv6Addr</a></h3></section><section id=\"impl-Hash-for-SocketAddrV4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/socket_addr.rs.html#64\">source</a></span><a href=\"#impl-Hash-for-SocketAddrV4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"../net/struct.SocketAddrV4.html\" title=\"struct std::net::SocketAddrV4\">SocketAddrV4</a></h3></section><section id=\"impl-Hash-for-SocketAddrV6\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/socket_addr.rs.html#97\">source</a></span><a href=\"#impl-Hash-for-SocketAddrV6\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"../net/struct.SocketAddrV6.html\" title=\"struct std::net::SocketAddrV6\">SocketAddrV6</a></h3></section><section id=\"impl-Hash-for-RangeFull\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#41\">source</a></span><a href=\"#impl-Hash-for-RangeFull\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"../ops/struct.RangeFull.html\" title=\"struct std::ops::RangeFull\">RangeFull</a></h3></section><section id=\"impl-Hash-for-UCred\" class=\"impl\"><a class=\"src rightside\" href=\"../../src/std/os/unix/net/ucred.rs.html#11\">source</a><a href=\"#impl-Hash-for-UCred\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"../os/unix/net/struct.UCred.html\" title=\"struct std::os::unix::net::UCred\">UCred</a></h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Unix</strong> only.</div></span></section><section id=\"impl-Hash-for-Path\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#3072-3120\">source</a></span><a href=\"#impl-Hash-for-Path\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a></h3></section><section id=\"impl-Hash-for-PathBuf\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#1931-1935\">source</a></span><a href=\"#impl-Hash-for-PathBuf\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"../path/struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a></h3></section><section id=\"impl-Hash-for-PrefixComponent%3C'_%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#473-477\">source</a></span><a href=\"#impl-Hash-for-PrefixComponent%3C'_%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"../path/struct.PrefixComponent.html\" title=\"struct std::path::PrefixComponent\">PrefixComponent</a>&lt;'_&gt;</h3></section><section id=\"impl-Hash-for-Alignment\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/alignment.rs.html#223\">source</a><a href=\"#impl-Hash-for-Alignment\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"../ptr/struct.Alignment.html\" title=\"struct std::ptr::Alignment\">Alignment</a></h3></section><section id=\"impl-Hash-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2386\">source</a></span><a href=\"#impl-Hash-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"../string/struct.String.html\" title=\"struct std::string::String\">String</a></h3></section><section id=\"impl-Hash-for-ThreadId\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.19.0\">1.19.0</span> · <a class=\"src\" href=\"../../src/std/thread/mod.rs.html#1206\">source</a></span><a href=\"#impl-Hash-for-ThreadId\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"../thread/struct.ThreadId.html\" title=\"struct std::thread::ThreadId\">ThreadId</a></h3></section><section id=\"impl-Hash-for-Duration\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#96\">source</a></span><a href=\"#impl-Hash-for-Duration\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"../time/struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a></h3></section><section id=\"impl-Hash-for-Instant\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../src/std/time.rs.html#153\">source</a></span><a href=\"#impl-Hash-for-Instant\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"../time/struct.Instant.html\" title=\"struct std::time::Instant\">Instant</a></h3></section><section id=\"impl-Hash-for-SystemTime\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../src/std/time.rs.html#246\">source</a></span><a href=\"#impl-Hash-for-SystemTime\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"../time/struct.SystemTime.html\" title=\"struct std::time::SystemTime\">SystemTime</a></h3></section><section id=\"impl-Hash-for-Component%3C'a%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#501\">source</a></span><a href=\"#impl-Hash-for-Component%3C'a%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"enum\" href=\"../path/enum.Component.html\" title=\"enum std::path::Component\">Component</a>&lt;'a&gt;</h3></section><section id=\"impl-Hash-for-Prefix%3C'a%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#141\">source</a></span><a href=\"#impl-Hash-for-Prefix%3C'a%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"enum\" href=\"../path/enum.Prefix.html\" title=\"enum std::path::Prefix\">Prefix</a>&lt;'a&gt;</h3></section><section id=\"impl-Hash-for-Location%3C'a%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/panic/location.rs.html#31\">source</a></span><a href=\"#impl-Hash-for-Location%3C'a%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"../panic/struct.Location.html\" title=\"struct std::panic::Location\">Location</a>&lt;'a&gt;</h3></section><section id=\"impl-Hash-for-Cow%3C'_,+B%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#424-426\">source</a></span><a href=\"#impl-Hash-for-Cow%3C'_,+B%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;B&gt; <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"enum\" href=\"../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'_, B&gt;<div class=\"where\">where\n    B: <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"../borrow/trait.ToOwned.html\" title=\"trait std::borrow::ToOwned\">ToOwned</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-Hash-for-ControlFlow%3CB,+C%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.55.0\">1.55.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/control_flow.rs.html#84\">source</a></span><a href=\"#impl-Hash-for-ControlFlow%3CB,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;B, C&gt; <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"enum\" href=\"../ops/enum.ControlFlow.html\" title=\"enum std::ops::ControlFlow\">ControlFlow</a>&lt;B, C&gt;<div class=\"where\">where\n    B: <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a>,\n    C: <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a>,</div></h3></section><section id=\"impl-Hash-for-DynMetadata%3CDyn%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/metadata.rs.html#290\">source</a><a href=\"#impl-Hash-for-DynMetadata%3CDyn%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Dyn&gt; <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"../ptr/struct.DynMetadata.html\" title=\"struct std::ptr::DynMetadata\">DynMetadata</a>&lt;Dyn&gt;<div class=\"where\">where\n    Dyn: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-Hash-for-F\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/mod.rs.html#2117\">source</a></span><a href=\"#impl-Hash-for-F\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F&gt; <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for F<div class=\"where\">where\n    F: <a class=\"trait\" href=\"../marker/trait.FnPtr.html\" title=\"trait std::marker::FnPtr\">FnPtr</a>,</div></h3></section><section id=\"impl-Hash-for-Range%3CIdx%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#78\">source</a></span><a href=\"#impl-Hash-for-Range%3CIdx%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Idx&gt; <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"../ops/struct.Range.html\" title=\"struct std::ops::Range\">Range</a>&lt;Idx&gt;<div class=\"where\">where\n    Idx: <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a>,</div></h3></section><section id=\"impl-Hash-for-RangeFrom%3CIdx%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#187\">source</a></span><a href=\"#impl-Hash-for-RangeFrom%3CIdx%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Idx&gt; <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"../ops/struct.RangeFrom.html\" title=\"struct std::ops::RangeFrom\">RangeFrom</a>&lt;Idx&gt;<div class=\"where\">where\n    Idx: <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a>,</div></h3></section><section id=\"impl-Hash-for-RangeInclusive%3CIdx%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.26.0\">1.26.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#343\">source</a></span><a href=\"#impl-Hash-for-RangeInclusive%3CIdx%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Idx&gt; <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"../ops/struct.RangeInclusive.html\" title=\"struct std::ops::RangeInclusive\">RangeInclusive</a>&lt;Idx&gt;<div class=\"where\">where\n    Idx: <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a>,</div></h3></section><section id=\"impl-Hash-for-RangeTo%3CIdx%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#269\">source</a></span><a href=\"#impl-Hash-for-RangeTo%3CIdx%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Idx&gt; <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"../ops/struct.RangeTo.html\" title=\"struct std::ops::RangeTo\">RangeTo</a>&lt;Idx&gt;<div class=\"where\">where\n    Idx: <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a>,</div></h3></section><section id=\"impl-Hash-for-RangeToInclusive%3CIdx%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.26.0\">1.26.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#590\">source</a></span><a href=\"#impl-Hash-for-RangeToInclusive%3CIdx%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Idx&gt; <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"../ops/struct.RangeToInclusive.html\" title=\"struct std::ops::RangeToInclusive\">RangeToInclusive</a>&lt;Idx&gt;<div class=\"where\">where\n    Idx: <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a>,</div></h3></section><section id=\"impl-Hash-for-BTreeMap%3CK,+V,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/map.rs.html#2268\">source</a></span><a href=\"#impl-Hash-for-BTreeMap%3CK,+V,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, A&gt; <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"../collections/struct.BTreeMap.html\" title=\"struct std::collections::BTreeMap\">BTreeMap</a>&lt;K, V, A&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a>,\n    V: <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a>,\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a> + <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section><section id=\"impl-Hash-for-Pin%3CPtr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.41.0\">1.41.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1164\">source</a></span><a href=\"#impl-Hash-for-Pin%3CPtr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Ptr&gt; <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"../pin/struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;Ptr&gt;<div class=\"where\">where\n    Ptr: <a class=\"trait\" href=\"../ops/trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a>,\n    &lt;Ptr as <a class=\"trait\" href=\"../ops/trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Deref.html#associatedtype.Target\" title=\"type std::ops::Deref::Target\">Target</a>: <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a>,</div></h3></section><section id=\"impl-Hash-for-Bound%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.17.0\">1.17.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#671\">source</a></span><a href=\"#impl-Hash-for-Bound%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"enum\" href=\"../ops/enum.Bound.html\" title=\"enum std::ops::Bound\">Bound</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a>,</div></h3></section><section id=\"impl-Hash-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#569\">source</a></span><a href=\"#impl-Hash-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a>,</div></h3></section><section id=\"impl-Hash-for-Poll%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.36.0\">1.36.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/poll.rs.html#9\">source</a></span><a href=\"#impl-Hash-for-Poll%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"enum\" href=\"../task/enum.Poll.html\" title=\"enum std::task::Poll\">Poll</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a>,</div></h3></section><section id=\"impl-Hash-for-*const+T\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#967\">source</a></span><a href=\"#impl-Hash-for-*const+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"primitive\" href=\"../primitive.pointer.html\">*const T</a><div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-Hash-for-*mut+T\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#977\">source</a></span><a href=\"#impl-Hash-for-*mut+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"primitive\" href=\"../primitive.pointer.html\">*mut T</a><div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-Hash-for-%26T\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#951\">source</a></span><a href=\"#impl-Hash-for-%26T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-Hash-for-%26mut+T\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#959\">source</a></span><a href=\"#impl-Hash-for-%26mut+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-Hash-for-%5BT%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#942\">source</a></span><a href=\"#impl-Hash-for-%5BT%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a>,</div></h3></section><section id=\"impl-Hash-for-(T,)\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#928\">source</a></span><a href=\"#impl-Hash-for-(T,)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"primitive\" href=\"../primitive.tuple.html#trait-implementations-1\">(T₁, T₂, …, Tₙ)</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><div class=\"docblock\"><p>This trait is implemented for tuples up to twelve items long.</p>\n</div><section id=\"impl-Hash-for-Reverse%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.19.0\">1.19.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#645\">source</a></span><a href=\"#impl-Hash-for-Reverse%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"../cmp/struct.Reverse.html\" title=\"struct std::cmp::Reverse\">Reverse</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a>,</div></h3></section><section id=\"impl-Hash-for-PhantomData%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/marker.rs.html#743\">source</a></span><a href=\"#impl-Hash-for-PhantomData%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"../marker/struct.PhantomData.html\" title=\"struct std::marker::PhantomData\">PhantomData</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-Hash-for-Discriminant%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/mem/mod.rs.html#1055\">source</a></span><a href=\"#impl-Hash-for-Discriminant%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"../mem/struct.Discriminant.html\" title=\"struct std::mem::Discriminant\">Discriminant</a>&lt;T&gt;</h3></section><section id=\"impl-Hash-for-ManuallyDrop%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/mem/manually_drop.rs.html#48\">source</a></span><a href=\"#impl-Hash-for-ManuallyDrop%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"../mem/struct.ManuallyDrop.html\" title=\"struct std::mem::ManuallyDrop\">ManuallyDrop</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-Hash-for-NonZero%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#257-259\">source</a></span><a href=\"#impl-Hash-for-NonZero%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"../num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../num/trait.ZeroablePrimitive.html\" title=\"trait std::num::ZeroablePrimitive\">ZeroablePrimitive</a> + <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a>,</div></h3></section><section id=\"impl-Hash-for-Saturating%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.74.0\">1.74.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/saturating.rs.html#35\">source</a></span><a href=\"#impl-Hash-for-Saturating%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"../num/struct.Saturating.html\" title=\"struct std::num::Saturating\">Saturating</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a>,</div></h3></section><section id=\"impl-Hash-for-Wrapping%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/wrapping.rs.html#40\">source</a></span><a href=\"#impl-Hash-for-Wrapping%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"../num/struct.Wrapping.html\" title=\"struct std::num::Wrapping\">Wrapping</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a>,</div></h3></section><section id=\"impl-Hash-for-NonNull%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.25.0\">1.25.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1819\">source</a></span><a href=\"#impl-Hash-for-NonNull%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"../ptr/struct.NonNull.html\" title=\"struct std::ptr::NonNull\">NonNull</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-Hash-for-Box%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1433\">source</a></span><a href=\"#impl-Hash-for-Box%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section><section id=\"impl-Hash-for-BTreeSet%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#83\">source</a></span><a href=\"#impl-Hash-for-BTreeSet%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"../collections/struct.BTreeSet.html\" title=\"struct std::collections::BTreeSet\">BTreeSet</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a>,\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a> + <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section><section id=\"impl-Hash-for-LinkedList%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#2157\">source</a></span><a href=\"#impl-Hash-for-LinkedList%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"../collections/struct.LinkedList.html\" title=\"struct std::collections::LinkedList\">LinkedList</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a>,\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section><section id=\"impl-Hash-for-VecDeque%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2829\">source</a></span><a href=\"#impl-Hash-for-VecDeque%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"../collections/struct.VecDeque.html\" title=\"struct std::collections::VecDeque\">VecDeque</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a>,\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section><section id=\"impl-Hash-for-Rc%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/rc.rs.html#2490\">source</a></span><a href=\"#impl-Hash-for-Rc%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"../rc/struct.Rc.html\" title=\"struct std::rc::Rc\">Rc</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section><section id=\"impl-Hash-for-Arc%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/sync.rs.html#3469\">source</a></span><a href=\"#impl-Hash-for-Arc%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"../sync/struct.Arc.html\" title=\"struct std::sync::Arc\">Arc</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section><section id=\"impl-Hash-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#2888\">source</a></span><a href=\"#impl-Hash-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"../vec/struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a>,\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section><div class=\"docblock\"><p>The hash of a vector is the same as that of the corresponding slice,\nas required by the <code>core::borrow::Borrow</code> implementation.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::hash::BuildHasher;\n\n<span class=\"kw\">let </span>b = std::hash::RandomState::new();\n<span class=\"kw\">let </span>v: Vec&lt;u8&gt; = <span class=\"macro\">vec!</span>[<span class=\"number\">0xa8</span>, <span class=\"number\">0x3c</span>, <span class=\"number\">0x09</span>];\n<span class=\"kw\">let </span>s: <span class=\"kw-2\">&amp;</span>[u8] = <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0xa8</span>, <span class=\"number\">0x3c</span>, <span class=\"number\">0x09</span>];\n<span class=\"macro\">assert_eq!</span>(b.hash_one(v), b.hash_one(s));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::hash::BuildHasher;%0A++++%0A++++let+b+=+std::hash::RandomState::new();%0A++++let+v:+Vec%3Cu8%3E+=+vec!%5B0xa8,+0x3c,+0x09%5D;%0A++++let+s:+%26%5Bu8%5D+=+%26%5B0xa8,+0x3c,+0x09%5D;%0A++++assert_eq!(b.hash_one(v),+b.hash_one(s));%0A%7D&amp;edition=2021\">Run</a></div>\n</div><section id=\"impl-Hash-for-Result%3CT,+E%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/result.rs.html#523\">source</a></span><a href=\"#impl-Hash-for-Result%3CT,+E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, E&gt; <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, E&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a>,\n    E: <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a>,</div></h3></section><section id=\"impl-Hash-for-%5BT;+N%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#306\">source</a></span><a href=\"#impl-Hash-for-%5BT;+N%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"primitive\" href=\"../primitive.array.html\">[T; N]</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a>,</div></h3></section><div class=\"docblock\"><p>The hash of an array is the same as that of the corresponding slice,\nas required by the <code>Borrow</code> implementation.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::hash::BuildHasher;\n\n<span class=\"kw\">let </span>b = std::hash::RandomState::new();\n<span class=\"kw\">let </span>a: [u8; <span class=\"number\">3</span>] = [<span class=\"number\">0xa8</span>, <span class=\"number\">0x3c</span>, <span class=\"number\">0x09</span>];\n<span class=\"kw\">let </span>s: <span class=\"kw-2\">&amp;</span>[u8] = <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0xa8</span>, <span class=\"number\">0x3c</span>, <span class=\"number\">0x09</span>];\n<span class=\"macro\">assert_eq!</span>(b.hash_one(a), b.hash_one(s));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::hash::BuildHasher;%0A++++%0A++++let+b+=+std::hash::RandomState::new();%0A++++let+a:+%5Bu8;+3%5D+=+%5B0xa8,+0x3c,+0x09%5D;%0A++++let+s:+%26%5Bu8%5D+=+%26%5B0xa8,+0x3c,+0x09%5D;%0A++++assert_eq!(b.hash_one(a),+b.hash_one(s));%0A%7D&amp;edition=2021\">Run</a></div>\n</div><section id=\"impl-Hash-for-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#958-961\">source</a><a href=\"#impl-Hash-for-Simd%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"../simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"../simd/struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../simd/trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,\n    T: <a class=\"trait\" href=\"../simd/trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a> + <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a>,</div></h3></section><section id=\"impl-Hash-for-CoroutineState%3CY,+R%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/coroutine.rs.html#8\">source</a><a href=\"#impl-Hash-for-CoroutineState%3CY,+R%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Y, R&gt; <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"enum\" href=\"../ops/enum.CoroutineState.html\" title=\"enum std::ops::CoroutineState\">CoroutineState</a>&lt;Y, R&gt;<div class=\"where\">where\n    Y: <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a>,\n    R: <a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a>,</div></h3></section><div id=\"impl-Hash-91\" class=\"impl\"><a href=\"#impl-Hash-91\" class=\"anchor\"></a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"enum\" href=\"../../test/enum.NamePadding.html\" title=\"enum test::NamePadding\">NamePadding</a></h3></div><div id=\"impl-Hash-92\" class=\"impl\"><a href=\"#impl-Hash-92\" class=\"anchor\"></a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"enum\" href=\"../../test/test/enum.ShouldPanic.html\" title=\"enum test::test::ShouldPanic\">ShouldPanic</a></h3></div><div id=\"impl-Hash-93\" class=\"impl\"><a href=\"#impl-Hash-93\" class=\"anchor\"></a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"enum\" href=\"../../test/test/enum.TestName.html\" title=\"enum test::test::TestName\">TestName</a></h3></div><div id=\"impl-Hash-94\" class=\"impl\"><a href=\"#impl-Hash-94\" class=\"anchor\"></a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"enum\" href=\"../../test/test/enum.TestType.html\" title=\"enum test::test::TestType\">TestType</a></h3></div><div id=\"impl-Hash-95\" class=\"impl\"><a href=\"#impl-Hash-95\" class=\"anchor\"></a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"../../test/test/struct.TestId.html\" title=\"struct test::test::TestId\">TestId</a></h3></div></div><script src=\"../../trait.impl/core/hash/trait.Hash.js\" data-ignore-extern-crates=\"alloc,core\" async=\"\"></script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:12:23.844Z"
}