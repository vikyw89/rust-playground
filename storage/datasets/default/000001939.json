{
	"title": "addr_of in std::ptr - Rust",
	"url": "https://doc.rust-lang.org/stable/std/ptr/macro.addr_of.html",
	"markdown": "# addr\\_of in std::ptr - Rust\n\n## Macro [std](../index.html)::[ptr](index.html)::[addr\\_of](#)\n\n1.51.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/mod.rs.html#2207) ·\n\n```\npub macro addr_of($place:expr) {\n    ...\n}\n```\n\nExpand description\n\nCreate a `const` raw pointer to a place, without creating an intermediate reference.\n\nCreating a reference with `&`/`&mut` is only allowed if the pointer is properly aligned and points to initialized data. For cases where those requirements do not hold, raw pointers should be used instead. However, `&expr as *const _` creates a reference before casting it to a raw pointer, and that reference is subject to the same rules as all other references. This macro can create a raw pointer _without_ creating a reference first.\n\nSee [`addr_of_mut`](macro.addr_of_mut.html \"macro std::ptr::addr_of_mut\") for how to create a pointer to uninitialized data. Doing that with `addr_of` would not make much sense since one could only read the data, and that would be Undefined Behavior.\n\n## [§](#safety)Safety\n\nThe `expr` in `addr_of!(expr)` is evaluated as a place expression, but never loads from the place or requires the place to be dereferenceable. This means that `addr_of!((*ptr).field)` still requires the projection to `field` to be in-bounds, using the same rules as [`offset`](about:blank/primitive.pointer.html#method.offset \"method pointer::offset\"). However, `addr_of!(*ptr)` is defined behavior even if `ptr` is null, dangling, or misaligned.\n\nNote that `Deref`/`Index` coercions (and their mutable counterparts) are applied inside `addr_of!` like everywhere else, in which case a reference is created to call `Deref::deref` or `Index::index`, respectively. The statements above only apply when no such coercions are applied.\n\n## [§](#example)Example\n\n**Correct usage: Creating a pointer to unaligned data**\n\n```\nuse std::ptr;\n\n#[repr(packed)]\nstruct Packed {\n    f1: u8,\n    f2: u16,\n}\n\nlet packed = Packed { f1: 1, f2: 2 };\n// `&packed.f2` would create an unaligned reference, and thus be Undefined Behavior!\nlet raw_f2 = ptr::addr_of!(packed.f2);\nassert_eq!(unsafe { raw_f2.read_unaligned() }, 2);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ptr;%0A++++%0A++++%23%5Brepr(packed)%5D%0A++++struct+Packed+%7B%0A++++++++f1:+u8,%0A++++++++f2:+u16,%0A++++%7D%0A++++%0A++++let+packed+=+Packed+%7B+f1:+1,+f2:+2+%7D;%0A++++//+%60%26packed.f2%60+would+create+an+unaligned+reference,+and+thus+be+Undefined+Behavior!%0A++++let+raw_f2+=+ptr::addr_of!(packed.f2);%0A++++assert_eq!(unsafe+%7B+raw_f2.read_unaligned()+%7D,+2);%0A%7D&edition=2021)\n\n**Incorrect usage: Out-of-bounds fields projection**\n\n```\nuse std::ptr;\n\n#[repr(C)]\nstruct MyStruct {\n    field1: i32,\n    field2: i32,\n}\n\nlet ptr: *const MyStruct = ptr::null();\nlet fieldptr = unsafe { ptr::addr_of!((*ptr).field2) }; // Undefined Behavior ⚠️\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ptr;%0A++++%0A++++%23%5Brepr(C)%5D%0A++++struct+MyStruct+%7B%0A++++++++field1:+i32,%0A++++++++field2:+i32,%0A++++%7D%0A++++%0A++++let+ptr:+*const+MyStruct+=+ptr::null();%0A++++let+fieldptr+=+unsafe+%7B+ptr::addr_of!((*ptr).field2)+%7D;+//+Undefined+Behavior+%E2%9A%A0%EF%B8%8F%0A%7D&edition=2021)\n\nThe field projection `.field2` would offset the pointer by 4 bytes, but the pointer is not in-bounds of an allocation for 4 bytes, so this offset is Undefined Behavior. See the [`offset`](about:blank/primitive.pointer.html#method.offset \"method pointer::offset\") docs for a full list of requirements for inbounds pointer arithmetic; the same requirements apply to field projections, even inside `addr_of!`. (In particular, it makes no difference whether the pointer is null or dangling.)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Create a `const` raw pointer to a place, without creating an intermediate reference.\"><title>addr_of in std::ptr - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc macro\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><div class=\"sidebar-elems\"><h2><a href=\"index.html\">In std::ptr</a></h2><h3><a href=\"index.html#macros\">Macros</a></h3><ul class=\"block macro\"><li><a href=\"macro.addr_of.html\">addr_of</a></li><li><a href=\"macro.addr_of_mut.html\">addr_of_mut</a></li></ul><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.Alignment.html\">Alignment</a></li><li><a href=\"struct.DynMetadata.html\">DynMetadata</a></li><li><a href=\"struct.NonNull.html\">NonNull</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.Pointee.html\">Pointee</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.addr_eq.html\">addr_eq</a></li><li><a href=\"fn.copy.html\">copy</a></li><li><a href=\"fn.copy_nonoverlapping.html\">copy_nonoverlapping</a></li><li><a href=\"fn.dangling.html\">dangling</a></li><li><a href=\"fn.dangling_mut.html\">dangling_mut</a></li><li><a href=\"fn.drop_in_place.html\">drop_in_place</a></li><li><a href=\"fn.eq.html\">eq</a></li><li><a href=\"fn.from_mut.html\">from_mut</a></li><li><a href=\"fn.from_raw_parts.html\">from_raw_parts</a></li><li><a href=\"fn.from_raw_parts_mut.html\">from_raw_parts_mut</a></li><li><a href=\"fn.from_ref.html\">from_ref</a></li><li><a href=\"fn.hash.html\">hash</a></li><li><a href=\"fn.metadata.html\">metadata</a></li><li><a href=\"fn.null.html\">null</a></li><li><a href=\"fn.null_mut.html\">null_mut</a></li><li><a href=\"fn.read.html\">read</a></li><li><a href=\"fn.read_unaligned.html\">read_unaligned</a></li><li><a href=\"fn.read_volatile.html\">read_volatile</a></li><li><a href=\"fn.replace.html\">replace</a></li><li><a href=\"fn.slice_from_raw_parts.html\">slice_from_raw_parts</a></li><li><a href=\"fn.slice_from_raw_parts_mut.html\">slice_from_raw_parts_mut</a></li><li><a href=\"fn.swap.html\">swap</a></li><li><a href=\"fn.swap_nonoverlapping.html\">swap_nonoverlapping</a></li><li><a href=\"fn.with_exposed_provenance.html\">with_exposed_provenance</a></li><li><a href=\"fn.with_exposed_provenance_mut.html\">with_exposed_provenance_mut</a></li><li><a href=\"fn.without_provenance.html\">without_provenance</a></li><li><a href=\"fn.without_provenance_mut.html\">without_provenance_mut</a></li><li><a href=\"fn.write.html\">write</a></li><li><a href=\"fn.write_bytes.html\">write_bytes</a></li><li><a href=\"fn.write_unaligned.html\">write_unaligned</a></li><li><a href=\"fn.write_volatile.html\">write_volatile</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Macro <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">ptr</a>::<wbr><a class=\"macro\" href=\"#\">addr_of</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.51.0\">1.51.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/mod.rs.html#2207\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><span class=\"kw\">pub macro </span>addr_of(<span class=\"macro-nonterminal\">$place</span>:expr) {\n    ...\n}</pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Create a <code>const</code> raw pointer to a place, without creating an intermediate reference.</p>\n<p>Creating a reference with <code>&amp;</code>/<code>&amp;mut</code> is only allowed if the pointer is properly aligned\nand points to initialized data. For cases where those requirements do not hold,\nraw pointers should be used instead. However, <code>&amp;expr as *const _</code> creates a reference\nbefore casting it to a raw pointer, and that reference is subject to the same rules\nas all other references. This macro can create a raw pointer <em>without</em> creating\na reference first.</p>\n<p>See <a href=\"macro.addr_of_mut.html\" title=\"macro std::ptr::addr_of_mut\"><code>addr_of_mut</code></a> for how to create a pointer to uninitialized data.\nDoing that with <code>addr_of</code> would not make much sense since one could only\nread the data, and that would be Undefined Behavior.</p>\n<h2 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h2>\n<p>The <code>expr</code> in <code>addr_of!(expr)</code> is evaluated as a place expression, but never loads from the\nplace or requires the place to be dereferenceable. This means that <code>addr_of!((*ptr).field)</code>\nstill requires the projection to <code>field</code> to be in-bounds, using the same rules as <a href=\"../primitive.pointer.html#method.offset\" title=\"method pointer::offset\"><code>offset</code></a>.\nHowever, <code>addr_of!(*ptr)</code> is defined behavior even if <code>ptr</code> is null, dangling, or misaligned.</p>\n<p>Note that <code>Deref</code>/<code>Index</code> coercions (and their mutable counterparts) are applied inside\n<code>addr_of!</code> like everywhere else, in which case a reference is created to call <code>Deref::deref</code> or\n<code>Index::index</code>, respectively. The statements above only apply when no such coercions are\napplied.</p>\n<h2 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h2>\n<p><strong>Correct usage: Creating a pointer to unaligned data</strong></p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ptr;\n\n<span class=\"attr\">#[repr(packed)]\n</span><span class=\"kw\">struct </span>Packed {\n    f1: u8,\n    f2: u16,\n}\n\n<span class=\"kw\">let </span>packed = Packed { f1: <span class=\"number\">1</span>, f2: <span class=\"number\">2 </span>};\n<span class=\"comment\">// `&amp;packed.f2` would create an unaligned reference, and thus be Undefined Behavior!\n</span><span class=\"kw\">let </span>raw_f2 = <span class=\"macro\">ptr::addr_of!</span>(packed.f2);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw\">unsafe </span>{ raw_f2.read_unaligned() }, <span class=\"number\">2</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ptr;%0A++++%0A++++%23%5Brepr(packed)%5D%0A++++struct+Packed+%7B%0A++++++++f1:+u8,%0A++++++++f2:+u16,%0A++++%7D%0A++++%0A++++let+packed+=+Packed+%7B+f1:+1,+f2:+2+%7D;%0A++++//+%60%26packed.f2%60+would+create+an+unaligned+reference,+and+thus+be+Undefined+Behavior!%0A++++let+raw_f2+=+ptr::addr_of!(packed.f2);%0A++++assert_eq!(unsafe+%7B+raw_f2.read_unaligned()+%7D,+2);%0A%7D&amp;edition=2021\">Run</a></div>\n<p><strong>Incorrect usage: Out-of-bounds fields projection</strong></p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ptr;\n\n<span class=\"attr\">#[repr(C)]\n</span><span class=\"kw\">struct </span>MyStruct {\n    field1: i32,\n    field2: i32,\n}\n\n<span class=\"kw\">let </span>ptr: <span class=\"kw-2\">*const </span>MyStruct = ptr::null();\n<span class=\"kw\">let </span>fieldptr = <span class=\"kw\">unsafe </span>{ <span class=\"macro\">ptr::addr_of!</span>((<span class=\"kw-2\">*</span>ptr).field2) }; <span class=\"comment\">// Undefined Behavior ⚠️</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ptr;%0A++++%0A++++%23%5Brepr(C)%5D%0A++++struct+MyStruct+%7B%0A++++++++field1:+i32,%0A++++++++field2:+i32,%0A++++%7D%0A++++%0A++++let+ptr:+*const+MyStruct+=+ptr::null();%0A++++let+fieldptr+=+unsafe+%7B+ptr::addr_of!((*ptr).field2)+%7D;+//+Undefined+Behavior+%E2%9A%A0%EF%B8%8F%0A%7D&amp;edition=2021\">Run</a></div>\n<p>The field projection <code>.field2</code> would offset the pointer by 4 bytes,\nbut the pointer is not in-bounds of an allocation for 4 bytes,\nso this offset is Undefined Behavior.\nSee the <a href=\"../primitive.pointer.html#method.offset\" title=\"method pointer::offset\"><code>offset</code></a> docs for a full list of requirements for inbounds pointer arithmetic; the\nsame requirements apply to field projections, even inside <code>addr_of!</code>. (In particular, it makes\nno difference whether the pointer is null or dangling.)</p>\n</div></details></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:21:29.646Z"
}