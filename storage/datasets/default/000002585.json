{
	"title": "get_backtrace_style in std::panic - Rust",
	"url": "https://doc.rust-lang.org/stable/std/panic/fn.get_backtrace_style.html",
	"markdown": "# get\\_backtrace\\_style in std::panic - Rust\n\n```\npub fn get_backtrace_style() -> Option<BacktraceStyle>\n```\n\nðŸ”¬This is a nightly-only experimental API. (`panic_backtrace_config`Â [#93346](https://github.com/rust-lang/rust/issues/93346))\n\nExpand description\n\nChecks whether the standard libraryâ€™s panic hook will capture and print a backtrace.\n\nThis function will, if a backtrace style has not been set via [`set_backtrace_style`](fn.set_backtrace_style.html \"fn std::panic::set_backtrace_style\"), read the environment variable `RUST_BACKTRACE` to determine a default value for the backtrace formatting:\n\nThe first call to `get_backtrace_style` may read the `RUST_BACKTRACE` environment variable if `set_backtrace_style` has not been called to override the default value. After a call to `set_backtrace_style` or `get_backtrace_style`, any changes to `RUST_BACKTRACE` will have no effect.\n\n`RUST_BACKTRACE` is read according to these rules:\n\n-   `0` for `BacktraceStyle::Off`\n-   `full` for `BacktraceStyle::Full`\n-   `1` for `BacktraceStyle::Short`\n-   Other values are currently `BacktraceStyle::Short`, but this may change in the future\n\nReturns `None` if backtraces arenâ€™t currently supported.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Checks whether the standard libraryâ€™s panic hook will capture and print a backtrace.\"><title>get_backtrace_style in std::panic - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc fn\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><div class=\"sidebar-elems\"><h2><a href=\"index.html\">In std::panic</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.AssertUnwindSafe.html\">AssertUnwindSafe</a></li><li><a href=\"struct.Location.html\">Location</a></li><li><a href=\"struct.PanicInfo.html\">PanicInfo</a></li></ul><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.BacktraceStyle.html\">BacktraceStyle</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.RefUnwindSafe.html\">RefUnwindSafe</a></li><li><a href=\"trait.UnwindSafe.html\">UnwindSafe</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.always_abort.html\">always_abort</a></li><li><a href=\"fn.catch_unwind.html\">catch_unwind</a></li><li><a href=\"fn.get_backtrace_style.html\">get_backtrace_style</a></li><li><a href=\"fn.panic_any.html\">panic_any</a></li><li><a href=\"fn.resume_unwind.html\">resume_unwind</a></li><li><a href=\"fn.set_backtrace_style.html\">set_backtrace_style</a></li><li><a href=\"fn.set_hook.html\">set_hook</a></li><li><a href=\"fn.take_hook.html\">take_hook</a></li><li><a href=\"fn.update_hook.html\">update_hook</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type â€˜Sâ€™ or â€˜/â€™ to search, â€˜?â€™ for more optionsâ€¦\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Function <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">panic</a>::<wbr><a class=\"fn\" href=\"#\">get_backtrace_style</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><a class=\"src\" href=\"../../src/std/panic.rs.html#299-327\">source</a> Â· <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>âˆ’</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub fn get_backtrace_style() -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"enum.BacktraceStyle.html\" title=\"enum std::panic::BacktraceStyle\">BacktraceStyle</a>&gt;</code></pre><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>panic_backtrace_config</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/93346\">#93346</a>)</span></div></span><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Checks whether the standard libraryâ€™s panic hook will capture and print a\nbacktrace.</p>\n<p>This function will, if a backtrace style has not been set via\n<a href=\"fn.set_backtrace_style.html\" title=\"fn std::panic::set_backtrace_style\"><code>set_backtrace_style</code></a>, read the environment variable <code>RUST_BACKTRACE</code> to\ndetermine a default value for the backtrace formatting:</p>\n<p>The first call to <code>get_backtrace_style</code> may read the <code>RUST_BACKTRACE</code>\nenvironment variable if <code>set_backtrace_style</code> has not been called to\noverride the default value. After a call to <code>set_backtrace_style</code> or\n<code>get_backtrace_style</code>, any changes to <code>RUST_BACKTRACE</code> will have no effect.</p>\n<p><code>RUST_BACKTRACE</code> is read according to these rules:</p>\n<ul>\n<li><code>0</code> for <code>BacktraceStyle::Off</code></li>\n<li><code>full</code> for <code>BacktraceStyle::Full</code></li>\n<li><code>1</code> for <code>BacktraceStyle::Short</code></li>\n<li>Other values are currently <code>BacktraceStyle::Short</code>, but this may change in\nthe future</li>\n</ul>\n<p>Returns <code>None</code> if backtraces arenâ€™t currently supported.</p>\n</div></details></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:24:09.613Z"
}