{
	"title": "Waker in std::task - Rust",
	"url": "https://doc.rust-lang.org/stable/std/task/struct.Waker.html",
	"markdown": "# Waker in std::task - Rust\n\n## Struct [std](../index.html)::[task](index.html)::[Waker](#)\n\n1.36.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#434) Â·\n\n```\npub struct Waker { /* private fields */ }\n```\n\nExpand description\n\nA `Waker` is a handle for waking up a task by notifying its executor that it is ready to be run.\n\nThis handle encapsulates a [`RawWaker`](struct.RawWaker.html \"struct std::task::RawWaker\") instance, which defines the executor-specific wakeup behavior.\n\nThe typical life of a `Waker` is that it is constructed by an executor, wrapped in a [`Context`](struct.Context.html \"struct std::task::Context\"), then passed to [`Future::poll()`](about:blank/future/trait.Future.html#tymethod.poll \"method std::future::Future::poll\"). Then, if the future chooses to return [`Poll::Pending`](about:blank/enum.Poll.html#variant.Pending \"variant std::task::Poll::Pending\"), it must also store the waker somehow and call [`Waker::wake()`](about:blank/struct.Waker.html#method.wake \"method std::task::Waker::wake\") when the future should be polled again.\n\nImplements [`Clone`](../clone/trait.Clone.html \"trait std::clone::Clone\"), [`Send`](../marker/trait.Send.html \"trait std::marker::Send\"), and [`Sync`](../marker/trait.Sync.html \"trait std::marker::Sync\"); therefore, a waker may be invoked from any thread, including ones not in any way managed by the executor. For example, this might be done to wake a future when a blocking function call completes on another thread.\n\nNote that it is preferable to use `waker.clone_from(&new_waker)` instead of `*waker = new_waker.clone()`, as the former will avoid cloning the waker unnecessarily if the two wakers [wake the same task](about:blank/struct.Waker.html#method.will_wake \"method std::task::Waker::will_wake\").\n\nConstructing a `Waker` from a [`RawWaker`](struct.RawWaker.html \"struct std::task::RawWaker\") is unsafe. Implementing the [`Wake`](../../alloc/task/trait.Wake.html) trait is a safe alternative that requires memory allocation.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#445)[Â§](#impl-Waker)\n\n1.36.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#465)\n\nWake up the task associated with this `Waker`.\n\nAs long as the executor keeps running and the task is not finished, it is guaranteed that each invocation of [`wake()`](about:blank/struct.Waker.html#method.wake \"method std::task::Waker::wake\") (or [`wake_by_ref()`](about:blank/struct.Waker.html#method.wake_by_ref \"method std::task::Waker::wake_by_ref\")) will be followed by at least one [`poll()`](about:blank/future/trait.Future.html#tymethod.poll \"method std::future::Future::poll\") of the task to which this `Waker` belongs. This makes it possible to temporarily yield to other tasks while running potentially unbounded processing loops.\n\nNote that the above implies that multiple wake-ups may be coalesced into a single [`poll()`](about:blank/future/trait.Future.html#tymethod.poll \"method std::future::Future::poll\") invocation by the runtime.\n\nAlso note that yielding to competing tasks is not guaranteed: it is the executorâ€™s choice which task to run and the executor may choose to run the current task again.\n\n1.36.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#487)\n\nWake up the task associated with this `Waker` without consuming the `Waker`.\n\nThis is similar to [`wake()`](about:blank/struct.Waker.html#method.wake \"method std::task::Waker::wake\"), but may be slightly less efficient in the case where an owned `Waker` is available. This method should be preferred to calling `waker.clone().wake()`.\n\n1.36.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#507)\n\nReturns `true` if this `Waker` and another `Waker` would awake the same task.\n\nThis function works on a best-effort basis, and may return false even when the `Waker`s would awaken the same task. However, if this function returns `true`, it is guaranteed that the `Waker`s will awaken the same task.\n\nThis function is primarily used for optimization purposes â€” for example, this typeâ€™s [`clone_from`](about:blank/struct.Waker.html#method.clone_from \"method std::task::Waker::clone_from\") implementation uses it to avoid cloning the waker when they would wake the same task anyway.\n\n1.36.0 (const: [unstable](https://github.com/rust-lang/rust/issues/102012 \"Tracking issue for const_waker\")) Â· [source](https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#528)\n\nCreates a new `Waker` from [`RawWaker`](struct.RawWaker.html \"struct std::task::RawWaker\").\n\n##### [Â§](#safety)Safety\n\nThe behavior of the returned `Waker` is undefined if the contract defined in [`RawWaker`](struct.RawWaker.html \"struct std::task::RawWaker\")â€™s and [`RawWakerVTable`](struct.RawWakerVTable.html \"struct std::task::RawWakerVTable\")â€™s documentation is not upheld.\n\n(Authors wishing to avoid unsafe code may implement the [`Wake`](../../alloc/task/trait.Wake.html) trait instead, at the cost of a required heap allocation.)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#556)\n\nðŸ”¬This is a nightly-only experimental API. (`noop_waker`Â [#98286](https://github.com/rust-lang/rust/issues/98286))\n\nReturns a reference to a `Waker` that does nothing when used.\n\nThis is mostly useful for writing tests that need a [`Context`](struct.Context.html \"struct std::task::Context\") to poll some futures, but are not expecting those futures to wake the waker or do not need to do anything specific if it happens.\n\nIf an owned `Waker` is needed, `clone()` this one.\n\n##### [Â§](#examples)Examples\n\n```\n#![feature(noop_waker)]\n\nuse std::future::Future;\nuse std::task;\n\nlet mut cx = task::Context::from_waker(task::Waker::noop());\n\nlet mut future = Box::pin(async { 10 });\nassert_eq!(future.as_mut().poll(&mut cx), task::Poll::Ready(10));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(noop_waker)%5D%0A%0Afn+main()+%7B%0A++++use+std::future::Future;%0A++++use+std::task;%0A++++%0A++++let+mut+cx+=+task::Context::from_waker(task::Waker::noop());%0A++++%0A++++let+mut+future+=+Box::pin(async+%7B+10+%7D);%0A++++assert_eq!(future.as_mut().poll(%26mut+cx),+task::Poll::Ready(10));%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#565)\n\nðŸ”¬This is a nightly-only experimental API. (`waker_getters`Â [#96992](https://github.com/rust-lang/rust/issues/96992))\n\nGet a reference to the underlying [`RawWaker`](struct.RawWaker.html \"struct std::task::RawWaker\").\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#844)[Â§](#impl-AsRef%3CLocalWaker%3E-for-Waker)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#845)[Â§](#method.as_ref)\n\nConverts this type into a shared reference of the (usually inferred) input type.\n\n1.36.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#571)[Â§](#impl-Clone-for-Waker)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#619)[Â§](#method.clone_from)\n\nAssigns a clone of `source` to `self`, unless [`self.will_wake(source)`](about:blank/struct.Waker.html#method.will_wake \"method std::task::Waker::will_wake\") anyway.\n\nThis method is preferred over simply assigning `source.clone()` to `self`, as it avoids cloning the waker if `self` is already the same waker.\n\n##### [Â§](#examples-1)Examples\n\n```\nuse std::future::Future;\nuse std::pin::Pin;\nuse std::sync::{Arc, Mutex};\nuse std::task::{Context, Poll, Waker};\n\nstruct Waiter {\n    shared: Arc<Mutex<Shared>>,\n}\n\nstruct Shared {\n    waker: Waker,\n    // ...\n}\n\nimpl Future for Waiter {\n    type Output = ();\n    fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<()> {\n        let mut shared = self.shared.lock().unwrap();\n\n        // update the waker\n        shared.waker.clone_from(cx.waker());\n\n        // readiness logic ...\n    }\n}\n\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::future::Future;%0A++++use+std::pin::Pin;%0A++++use+std::sync::%7BArc,+Mutex%7D;%0A++++use+std::task::%7BContext,+Poll,+Waker%7D;%0A++++%0A++++struct+Waiter+%7B%0A++++++++shared:+Arc%3CMutex%3CShared%3E%3E,%0A++++%7D%0A++++%0A++++struct+Shared+%7B%0A++++++++waker:+Waker,%0A++++++++//+...%0A++++%7D%0A++++%0A++++impl+Future+for+Waiter+%7B%0A++++++++type+Output+=+();%0A++++++++fn+poll(self:+Pin%3C%26mut+Self%3E,+cx:+%26mut+Context%3C%27_%3E)+-%3E+Poll%3C()%3E+%7B%0A++++++++++++let+mut+shared+=+self.shared.lock().unwrap();%0A++++%0A++++++++++++//+update+the+waker%0A++++++++++++shared.waker.clone_from(cx.waker());%0A++++%0A++++++++++++//+readiness+logic+...%0A++++++++++Poll::Ready(())%0A++++++++%7D%0A++++%7D%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#573)[Â§](#method.clone)\n\nReturns a copy of the value. [Read more](about:blank/clone/trait.Clone.html#tymethod.clone)\n\n1.36.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#638)[Â§](#impl-Debug-for-Waker)\n\n1.36.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#627)[Â§](#impl-Drop-for-Waker)\n\n1.51.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/alloc/task.rs.html#109)[Â§](#impl-From%3CArc%3CW%3E%3E-for-Waker)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/task.rs.html#113)[Â§](#method.from)\n\nUse a [`Wake`](trait.Wake.html \"trait std::task::Wake\")\\-able type as a `Waker`.\n\nNo heap allocations or atomic operations are used for this conversion.\n\n1.36.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#441)[Â§](#impl-Send-for-Waker)\n\n1.36.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#443)[Â§](#impl-Sync-for-Waker)\n\n1.36.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#439)[Â§](#impl-Unpin-for-Waker)\n\n[Â§](#impl-Freeze-for-Waker)\n\n[Â§](#impl-RefUnwindSafe-for-Waker)\n\n[Â§](#impl-UnwindSafe-for-Waker)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140)[Â§](#impl-Any-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208)[Â§](#impl-Borrow%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216)[Â§](#impl-BorrowMut%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765)[Â§](#impl-From%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768)[Â§](#method.from-1)\n\nReturns the argument unchanged.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750)[Â§](#impl-Into%3CU%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758)[Â§](#method.into)\n\nCalls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of `[From](../convert/trait.From.html \"trait std::convert::From\")<T> for U` chooses to do.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85)[Â§](#impl-ToOwned-for-T)\n\n[Â§](#associatedtype.Owned)\n\nThe resulting type after obtaining ownership.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88)[Â§](#method.to_owned)\n\nCreates owned data from borrowed data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#tymethod.to_owned)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92)[Â§](#method.clone_into)\n\nUses borrowed data to replace owned data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#method.clone_into)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807)[Â§](#impl-TryFrom%3CU%3E-for-T)\n\n[Â§](#associatedtype.Error-1)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812)[Â§](#method.try_from)\n\nPerforms the conversion.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792)[Â§](#impl-TryInto%3CU%3E-for-T)\n\n[Â§](#associatedtype.Error)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797)[Â§](#method.try_into)\n\nPerforms the conversion.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"A `Waker` is a handle for waking up a task by notifying its executor that it is ready to be run.\"><title>Waker in std::task - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc struct\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">Waker</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">Waker</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#implementations\">Methods</a></h3><ul class=\"block method\"><li><a href=\"#method.as_raw\">as_raw</a></li><li><a href=\"#method.from_raw\">from_raw</a></li><li><a href=\"#method.noop\">noop</a></li><li><a href=\"#method.wake\">wake</a></li><li><a href=\"#method.wake_by_ref\">wake_by_ref</a></li><li><a href=\"#method.will_wake\">will_wake</a></li></ul><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-AsRef%3CLocalWaker%3E-for-Waker\">AsRef&lt;LocalWaker&gt;</a></li><li><a href=\"#impl-Clone-for-Waker\">Clone</a></li><li><a href=\"#impl-Debug-for-Waker\">Debug</a></li><li><a href=\"#impl-Drop-for-Waker\">Drop</a></li><li><a href=\"#impl-From%3CArc%3CW%3E%3E-for-Waker\">From&lt;Arc&lt;W&gt;&gt;</a></li><li><a href=\"#impl-Send-for-Waker\">Send</a></li><li><a href=\"#impl-Sync-for-Waker\">Sync</a></li><li><a href=\"#impl-Unpin-for-Waker\">Unpin</a></li></ul><h3><a href=\"#synthetic-implementations\">Auto Trait Implementations</a></h3><ul class=\"block synthetic-implementation\"><li><a href=\"#impl-Freeze-for-Waker\">Freeze</a></li><li><a href=\"#impl-RefUnwindSafe-for-Waker\">RefUnwindSafe</a></li><li><a href=\"#impl-UnwindSafe-for-Waker\">UnwindSafe</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-Any-for-T\">Any</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-T\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-T\">BorrowMut&lt;T&gt;</a></li><li><a href=\"#impl-From%3CT%3E-for-T\">From&lt;T&gt;</a></li><li><a href=\"#impl-Into%3CU%3E-for-T\">Into&lt;U&gt;</a></li><li><a href=\"#impl-ToOwned-for-T\">ToOwned</a></li><li><a href=\"#impl-TryFrom%3CU%3E-for-T\">TryFrom&lt;U&gt;</a></li><li><a href=\"#impl-TryInto%3CU%3E-for-T\">TryInto&lt;U&gt;</a></li></ul></section><h2><a href=\"index.html\">In std::task</a></h2><h3><a href=\"index.html#macros\">Macros</a></h3><ul class=\"block macro\"><li><a href=\"macro.ready.html\">ready</a></li></ul><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.Context.html\">Context</a></li><li><a href=\"struct.ContextBuilder.html\">ContextBuilder</a></li><li><a href=\"struct.LocalWaker.html\">LocalWaker</a></li><li><a href=\"struct.RawWaker.html\">RawWaker</a></li><li><a href=\"struct.RawWakerVTable.html\">RawWakerVTable</a></li><li><a href=\"struct.Waker.html\">Waker</a></li></ul><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.Poll.html\">Poll</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.LocalWake.html\">LocalWake</a></li><li><a href=\"trait.Wake.html\">Wake</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type â€˜Sâ€™ or â€˜/â€™ to search, â€˜?â€™ for more optionsâ€¦\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Struct <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">task</a>::<wbr><a class=\"struct\" href=\"#\">Waker</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.36.0\">1.36.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#434\">source</a> Â· <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>âˆ’</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub struct Waker { <span class=\"comment\">/* private fields */</span> }</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>A <code>Waker</code> is a handle for waking up a task by notifying its executor that it\nis ready to be run.</p>\n<p>This handle encapsulates a <a href=\"struct.RawWaker.html\" title=\"struct std::task::RawWaker\"><code>RawWaker</code></a> instance, which defines the\nexecutor-specific wakeup behavior.</p>\n<p>The typical life of a <code>Waker</code> is that it is constructed by an executor, wrapped in a\n<a href=\"struct.Context.html\" title=\"struct std::task::Context\"><code>Context</code></a>, then passed to <a href=\"../future/trait.Future.html#tymethod.poll\" title=\"method std::future::Future::poll\"><code>Future::poll()</code></a>. Then, if the future chooses to return\n<a href=\"enum.Poll.html#variant.Pending\" title=\"variant std::task::Poll::Pending\"><code>Poll::Pending</code></a>, it must also store the waker somehow and call <a href=\"struct.Waker.html#method.wake\" title=\"method std::task::Waker::wake\"><code>Waker::wake()</code></a> when\nthe future should be polled again.</p>\n<p>Implements <a href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\"><code>Clone</code></a>, <a href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\"><code>Send</code></a>, and <a href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\"><code>Sync</code></a>; therefore, a waker may be invoked\nfrom any thread, including ones not in any way managed by the executor. For example,\nthis might be done to wake a future when a blocking function call completes on another\nthread.</p>\n<p>Note that it is preferable to use <code>waker.clone_from(&amp;new_waker)</code> instead\nof <code>*waker = new_waker.clone()</code>, as the former will avoid cloning the waker\nunnecessarily if the two wakers <a href=\"struct.Waker.html#method.will_wake\" title=\"method std::task::Waker::will_wake\">wake the same task</a>.</p>\n<p>Constructing a <code>Waker</code> from a <a href=\"struct.RawWaker.html\" title=\"struct std::task::RawWaker\"><code>RawWaker</code></a> is unsafe.\nImplementing the <a href=\"../../alloc/task/trait.Wake.html\"><code>Wake</code></a> trait is a safe alternative that requires memory allocation.</p>\n</div></details><h2 id=\"implementations\" class=\"section-header\">Implementations<a href=\"#implementations\" class=\"anchor\">Â§</a></h2><div id=\"implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Waker\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#445\">source</a><a href=\"#impl-Waker\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"struct.Waker.html\" title=\"struct std::task::Waker\">Waker</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.wake\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.36.0\">1.36.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#465\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.wake\" class=\"fn\">wake</a>(self)</h4></section></summary><div class=\"docblock\"><p>Wake up the task associated with this <code>Waker</code>.</p>\n<p>As long as the executor keeps running and the task is not finished, it is\nguaranteed that each invocation of <a href=\"struct.Waker.html#method.wake\" title=\"method std::task::Waker::wake\"><code>wake()</code></a> (or\n<a href=\"struct.Waker.html#method.wake_by_ref\" title=\"method std::task::Waker::wake_by_ref\"><code>wake_by_ref()</code></a>) will be followed by at least one\n<a href=\"../future/trait.Future.html#tymethod.poll\" title=\"method std::future::Future::poll\"><code>poll()</code></a> of the task to which this <code>Waker</code> belongs. This makes\nit possible to temporarily yield to other tasks while running potentially\nunbounded processing loops.</p>\n<p>Note that the above implies that multiple wake-ups may be coalesced into a\nsingle <a href=\"../future/trait.Future.html#tymethod.poll\" title=\"method std::future::Future::poll\"><code>poll()</code></a> invocation by the runtime.</p>\n<p>Also note that yielding to competing tasks is not guaranteed: it is the\nexecutorâ€™s choice which task to run and the executor may choose to run the\ncurrent task again.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.wake_by_ref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.36.0\">1.36.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#487\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.wake_by_ref\" class=\"fn\">wake_by_ref</a>(&amp;self)</h4></section></summary><div class=\"docblock\"><p>Wake up the task associated with this <code>Waker</code> without consuming the <code>Waker</code>.</p>\n<p>This is similar to <a href=\"struct.Waker.html#method.wake\" title=\"method std::task::Waker::wake\"><code>wake()</code></a>, but may be slightly less efficient in\nthe case where an owned <code>Waker</code> is available. This method should be preferred to\ncalling <code>waker.clone().wake()</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.will_wake\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.36.0\">1.36.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#507\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.will_wake\" class=\"fn\">will_wake</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.Waker.html\" title=\"struct std::task::Waker\">Waker</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if this <code>Waker</code> and another <code>Waker</code> would awake the same task.</p>\n<p>This function works on a best-effort basis, and may return false even\nwhen the <code>Waker</code>s would awaken the same task. However, if this function\nreturns <code>true</code>, it is guaranteed that the <code>Waker</code>s will awaken the same task.</p>\n<p>This function is primarily used for optimization purposes â€” for example,\nthis typeâ€™s <a href=\"struct.Waker.html#method.clone_from\" title=\"method std::task::Waker::clone_from\"><code>clone_from</code></a> implementation uses it to\navoid cloning the waker when they would wake the same task anyway.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_raw\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.36.0, const unstable\">1.36.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/102012\" title=\"Tracking issue for const_waker\">unstable</a>)</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#528\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.from_raw\" class=\"fn\">from_raw</a>(waker: <a class=\"struct\" href=\"struct.RawWaker.html\" title=\"struct std::task::RawWaker\">RawWaker</a>) -&gt; <a class=\"struct\" href=\"struct.Waker.html\" title=\"struct std::task::Waker\">Waker</a></h4></section></summary><div class=\"docblock\"><p>Creates a new <code>Waker</code> from <a href=\"struct.RawWaker.html\" title=\"struct std::task::RawWaker\"><code>RawWaker</code></a>.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">Â§</a>Safety</h5>\n<p>The behavior of the returned <code>Waker</code> is undefined if the contract defined\nin <a href=\"struct.RawWaker.html\" title=\"struct std::task::RawWaker\"><code>RawWaker</code></a>â€™s and <a href=\"struct.RawWakerVTable.html\" title=\"struct std::task::RawWakerVTable\"><code>RawWakerVTable</code></a>â€™s documentation is not upheld.</p>\n<p>(Authors wishing to avoid unsafe code may implement the <a href=\"../../alloc/task/trait.Wake.html\"><code>Wake</code></a> trait instead, at the\ncost of a required heap allocation.)</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.noop\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#556\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.noop\" class=\"fn\">noop</a>() -&gt; &amp;'static <a class=\"struct\" href=\"struct.Waker.html\" title=\"struct std::task::Waker\">Waker</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>noop_waker</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/98286\">#98286</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns a reference to a <code>Waker</code> that does nothing when used.</p>\n<p>This is mostly useful for writing tests that need a <a href=\"struct.Context.html\" title=\"struct std::task::Context\"><code>Context</code></a> to poll\nsome futures, but are not expecting those futures to wake the waker or\ndo not need to do anything specific if it happens.</p>\n<p>If an owned <code>Waker</code> is needed, <code>clone()</code> this one.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(noop_waker)]\n\n</span><span class=\"kw\">use </span>std::future::Future;\n<span class=\"kw\">use </span>std::task;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>cx = task::Context::from_waker(task::Waker::noop());\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>future = Box::pin(<span class=\"kw\">async </span>{ <span class=\"number\">10 </span>});\n<span class=\"macro\">assert_eq!</span>(future.as_mut().poll(<span class=\"kw-2\">&amp;mut </span>cx), task::Poll::Ready(<span class=\"number\">10</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(noop_waker)%5D%0A%0Afn+main()+%7B%0A++++use+std::future::Future;%0A++++use+std::task;%0A++++%0A++++let+mut+cx+=+task::Context::from_waker(task::Waker::noop());%0A++++%0A++++let+mut+future+=+Box::pin(async+%7B+10+%7D);%0A++++assert_eq!(future.as_mut().poll(%26mut+cx),+task::Poll::Ready(10));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_raw\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#565\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.as_raw\" class=\"fn\">as_raw</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"struct.RawWaker.html\" title=\"struct std::task::RawWaker\">RawWaker</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>waker_getters</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/96992\">#96992</a>)</span></div></span></summary><div class=\"docblock\"><p>Get a reference to the underlying <a href=\"struct.RawWaker.html\" title=\"struct std::task::RawWaker\"><code>RawWaker</code></a>.</p>\n</div></details></div></details></div><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">Â§</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AsRef%3CLocalWaker%3E-for-Waker\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#844\">source</a><a href=\"#impl-AsRef%3CLocalWaker%3E-for-Waker\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"struct.LocalWaker.html\" title=\"struct std::task::LocalWaker\">LocalWaker</a>&gt; for <a class=\"struct\" href=\"struct.Waker.html\" title=\"struct std::task::Waker\">Waker</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#845\">source</a><a href=\"#method.as_ref\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"struct.LocalWaker.html\" title=\"struct std::task::LocalWaker\">LocalWaker</a></h4></section></summary><div class=\"docblock\">Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Clone-for-Waker\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.36.0\">1.36.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#571\">source</a></span><a href=\"#impl-Clone-for-Waker\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"struct.Waker.html\" title=\"struct std::task::Waker\">Waker</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#619\">source</a><a href=\"#method.clone_from\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;<a class=\"struct\" href=\"struct.Waker.html\" title=\"struct std::task::Waker\">Waker</a>)</h4></section></summary><div class=\"docblock\"><p>Assigns a clone of <code>source</code> to <code>self</code>, unless <a href=\"struct.Waker.html#method.will_wake\" title=\"method std::task::Waker::will_wake\"><code>self.will_wake(source)</code></a> anyway.</p>\n<p>This method is preferred over simply assigning <code>source.clone()</code> to <code>self</code>,\nas it avoids cloning the waker if <code>self</code> is already the same waker.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::future::Future;\n<span class=\"kw\">use </span>std::pin::Pin;\n<span class=\"kw\">use </span>std::sync::{Arc, Mutex};\n<span class=\"kw\">use </span>std::task::{Context, Poll, Waker};\n\n<span class=\"kw\">struct </span>Waiter {\n    shared: Arc&lt;Mutex&lt;Shared&gt;&gt;,\n}\n\n<span class=\"kw\">struct </span>Shared {\n    waker: Waker,\n    <span class=\"comment\">// ...\n</span>}\n\n<span class=\"kw\">impl </span>Future <span class=\"kw\">for </span>Waiter {\n    <span class=\"kw\">type </span>Output = ();\n    <span class=\"kw\">fn </span>poll(<span class=\"self\">self</span>: Pin&lt;<span class=\"kw-2\">&amp;mut </span><span class=\"self\">Self</span>&gt;, cx: <span class=\"kw-2\">&amp;mut </span>Context&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; Poll&lt;()&gt; {\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>shared = <span class=\"self\">self</span>.shared.lock().unwrap();\n\n        <span class=\"comment\">// update the waker\n        </span>shared.waker.clone_from(cx.waker());\n\n        <span class=\"comment\">// readiness logic ...\n    </span>}\n}\n</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::future::Future;%0A++++use+std::pin::Pin;%0A++++use+std::sync::%7BArc,+Mutex%7D;%0A++++use+std::task::%7BContext,+Poll,+Waker%7D;%0A++++%0A++++struct+Waiter+%7B%0A++++++++shared:+Arc%3CMutex%3CShared%3E%3E,%0A++++%7D%0A++++%0A++++struct+Shared+%7B%0A++++++++waker:+Waker,%0A++++++++//+...%0A++++%7D%0A++++%0A++++impl+Future+for+Waiter+%7B%0A++++++++type+Output+=+();%0A++++++++fn+poll(self:+Pin%3C%26mut+Self%3E,+cx:+%26mut+Context%3C'_%3E)+-%3E+Poll%3C()%3E+%7B%0A++++++++++++let+mut+shared+=+self.shared.lock().unwrap();%0A++++%0A++++++++++++//+update+the+waker%0A++++++++++++shared.waker.clone_from(cx.waker());%0A++++%0A++++++++++++//+readiness+logic+...%0A++++++++++Poll::Ready(())%0A++++++++%7D%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#573\">source</a><a href=\"#method.clone\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"struct.Waker.html\" title=\"struct std::task::Waker\">Waker</a></h4></section></summary><div class=\"docblock\">Returns a copy of the value. <a href=\"../clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-Waker\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.36.0\">1.36.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#638\">source</a></span><a href=\"#impl-Debug-for-Waker\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"struct.Waker.html\" title=\"struct std::task::Waker\">Waker</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#639\">source</a><a href=\"#method.fmt\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"../fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Drop-for-Waker\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.36.0\">1.36.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#627\">source</a></span><a href=\"#impl-Drop-for-Waker\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../ops/trait.Drop.html\" title=\"trait std::ops::Drop\">Drop</a> for <a class=\"struct\" href=\"struct.Waker.html\" title=\"struct std::task::Waker\">Waker</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.drop\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#629\">source</a><a href=\"#method.drop\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Drop.html#tymethod.drop\" class=\"fn\">drop</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\">Executes the destructor for this type. <a href=\"../ops/trait.Drop.html#tymethod.drop\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CArc%3CW%3E%3E-for-Waker\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.51.0\">1.51.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/task.rs.html#109\">source</a></span><a href=\"#impl-From%3CArc%3CW%3E%3E-for-Waker\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;W&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"../sync/struct.Arc.html\" title=\"struct std::sync::Arc\">Arc</a>&lt;W&gt;&gt; for <a class=\"struct\" href=\"struct.Waker.html\" title=\"struct std::task::Waker\">Waker</a><div class=\"where\">where\n    W: <a class=\"trait\" href=\"trait.Wake.html\" title=\"trait std::task::Wake\">Wake</a> + <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> + <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> + 'static,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/task.rs.html#113\">source</a><a href=\"#method.from\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(waker: <a class=\"struct\" href=\"../sync/struct.Arc.html\" title=\"struct std::sync::Arc\">Arc</a>&lt;W&gt;) -&gt; <a class=\"struct\" href=\"struct.Waker.html\" title=\"struct std::task::Waker\">Waker</a></h4></section></summary><div class=\"docblock\"><p>Use a <a href=\"trait.Wake.html\" title=\"trait std::task::Wake\"><code>Wake</code></a>-able type as a <code>Waker</code>.</p>\n<p>No heap allocations or atomic operations are used for this conversion.</p>\n</div></details></div></details><section id=\"impl-Send-for-Waker\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.36.0\">1.36.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#441\">source</a></span><a href=\"#impl-Send-for-Waker\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"struct\" href=\"struct.Waker.html\" title=\"struct std::task::Waker\">Waker</a></h3></section><section id=\"impl-Sync-for-Waker\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.36.0\">1.36.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#443\">source</a></span><a href=\"#impl-Sync-for-Waker\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"struct.Waker.html\" title=\"struct std::task::Waker\">Waker</a></h3></section><section id=\"impl-Unpin-for-Waker\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.36.0\">1.36.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#439\">source</a></span><a href=\"#impl-Unpin-for-Waker\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"struct\" href=\"struct.Waker.html\" title=\"struct std::task::Waker\">Waker</a></h3></section></div><h2 id=\"synthetic-implementations\" class=\"section-header\">Auto Trait Implementations<a href=\"#synthetic-implementations\" class=\"anchor\">Â§</a></h2><div id=\"synthetic-implementations-list\"><section id=\"impl-Freeze-for-Waker\" class=\"impl\"><a href=\"#impl-Freeze-for-Waker\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"struct\" href=\"struct.Waker.html\" title=\"struct std::task::Waker\">Waker</a></h3></section><section id=\"impl-RefUnwindSafe-for-Waker\" class=\"impl\"><a href=\"#impl-RefUnwindSafe-for-Waker\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"struct\" href=\"struct.Waker.html\" title=\"struct std::task::Waker\">Waker</a></h3></section><section id=\"impl-UnwindSafe-for-Waker\" class=\"impl\"><a href=\"#impl-UnwindSafe-for-Waker\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"struct.Waker.html\" title=\"struct std::task::Waker\">Waker</a></h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">Â§</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Any-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a><a href=\"#impl-Any-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#141\">source</a><a href=\"#method.type_id\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../any/trait.Any.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\">Gets the <code>TypeId</code> of <code>self</code>. <a href=\"../any/trait.Any.html#tymethod.type_id\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Borrow%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208\">source</a><a href=\"#impl-Borrow%3CT%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#210\">source</a><a href=\"#method.borrow\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216\">source</a><a href=\"#impl-BorrowMut%3CT%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#217\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765\">source</a><a href=\"#impl-From%3CT%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768\">source</a><a href=\"#method.from-1\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the argument unchanged.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Into%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750\">source</a><a href=\"#impl-Into%3CU%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758\">source</a><a href=\"#method.into\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; U</h4></section></summary><div class=\"docblock\"><p>Calls <code>U::from(self)</code>.</p>\n<p>That is, this conversion is whatever the implementation of\n<code><a href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for U</code> chooses to do.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-ToOwned-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85\">source</a><a href=\"#impl-ToOwned-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.ToOwned.html\" title=\"trait std::borrow::ToOwned\">ToOwned</a> for T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Owned\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Owned\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"../borrow/trait.ToOwned.html#associatedtype.Owned\" class=\"associatedtype\">Owned</a> = T</h4></section></summary><div class=\"docblock\">The resulting type after obtaining ownership.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_owned\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88\">source</a><a href=\"#method.to_owned\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.ToOwned.html#tymethod.to_owned\" class=\"fn\">to_owned</a>(&amp;self) -&gt; T</h4></section></summary><div class=\"docblock\">Creates owned data from borrowed data, usually by cloning. <a href=\"../borrow/trait.ToOwned.html#tymethod.to_owned\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92\">source</a><a href=\"#method.clone_into\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.ToOwned.html#method.clone_into\" class=\"fn\">clone_into</a>(&amp;self, target: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>)</h4></section></summary><div class=\"docblock\">Uses borrowed data to replace owned data, usually by cloning. <a href=\"../borrow/trait.ToOwned.html#method.clone_into\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryFrom%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807\">source</a><a href=\"#impl-TryFrom%3CU%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812\">source</a><a href=\"#method.try_from\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: U) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, &lt;T as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryInto%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792\">source</a><a href=\"#impl-TryInto%3CU%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryInto.html\" title=\"trait std::convert::TryInto\">TryInto</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryInto.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797\">source</a><a href=\"#method.try_into\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryInto.html#tymethod.try_into\" class=\"fn\">try_into</a>(self) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;U, &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details></div></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:13:11.348Z"
}