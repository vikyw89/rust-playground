{
	"title": "mod.rs - source",
	"url": "https://doc.rust-lang.org/1.80.0/src/core/num/mod.rs.html#1547",
	"markdown": "# mod.rs - source\n\n```\n//! Numeric traits and functions for the built-in numeric types.\n\n#![stable(feature = \"rust1\", since = \"1.0.0\")]\n\nuse crate::ascii;\nuse crate::hint;\nuse crate::intrinsics;\nuse crate::mem;\nuse crate::str::FromStr;\nuse crate::ub_checks::assert_unsafe_precondition;\n\n// Used because the `?` operator is not allowed in a const context.\nmacro_rules! try_opt {\n    ($e:expr) => {\n        match $e {\n            Some(x) => x,\n            None => return None,\n        }\n    };\n}\n\n#[allow_internal_unstable(const_likely)]\nmacro_rules! unlikely {\n    ($e: expr) => {\n        intrinsics::unlikely($e)\n    };\n}\n\n// All these modules are technically private and only exposed for coretests:\n#[cfg(not(no_fp_fmt_parse))]\npub mod bignum;\n#[cfg(not(no_fp_fmt_parse))]\npub mod dec2flt;\n#[cfg(not(no_fp_fmt_parse))]\npub mod diy_float;\n#[cfg(not(no_fp_fmt_parse))]\npub mod flt2dec;\npub mod fmt;\n\n#[macro_use]\nmod int_macros; // import int_impl!\n#[macro_use]\nmod uint_macros; // import uint_impl!\n\nmod error;\nmod int_log10;\nmod nonzero;\nmod overflow_panic;\nmod saturating;\nmod wrapping;\n\n#[stable(feature = \"saturating_int_impl\", since = \"1.74.0\")]\npub use saturating::Saturating;\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\npub use wrapping::Wrapping;\n\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\n#[cfg(not(no_fp_fmt_parse))]\npub use dec2flt::ParseFloatError;\n\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\npub use error::ParseIntError;\n\n#[unstable(\n    feature = \"nonzero_internals\",\n    reason = \"implementation detail which may disappear or be replaced at any time\",\n    issue = \"none\"\n)]\npub use nonzero::ZeroablePrimitive;\n\n#[stable(feature = \"generic_nonzero\", since = \"1.79.0\")]\npub use nonzero::NonZero;\n\n#[stable(feature = \"signed_nonzero\", since = \"1.34.0\")]\npub use nonzero::{NonZeroI128, NonZeroI16, NonZeroI32, NonZeroI64, NonZeroI8, NonZeroIsize};\n\n#[stable(feature = \"nonzero\", since = \"1.28.0\")]\npub use nonzero::{NonZeroU128, NonZeroU16, NonZeroU32, NonZeroU64, NonZeroU8, NonZeroUsize};\n\n#[stable(feature = \"try_from\", since = \"1.34.0\")]\npub use error::TryFromIntError;\n\n#[stable(feature = \"int_error_matching\", since = \"1.55.0\")]\npub use error::IntErrorKind;\n\nmacro_rules! usize_isize_to_xe_bytes_doc {\n    () => {\n        \"\n\n**Note**: This function returns an array of length 2, 4 or 8 bytes\ndepending on the target pointer size.\n\n\"\n    };\n}\n\nmacro_rules! usize_isize_from_xe_bytes_doc {\n    () => {\n        \"\n\n**Note**: This function takes an array of length 2, 4 or 8 bytes\ndepending on the target pointer size.\n\n\"\n    };\n}\n\nmacro_rules! midpoint_impl {\n    ($SelfT:ty, unsigned) => {\n        /// Calculates the middle point of `self` and `rhs`.\n        ///\n        /// `midpoint(a, b)` is `(a + b) >> 1` as if it were performed in a\n        /// sufficiently-large signed integral type. This implies that the result is\n        /// always rounded towards negative infinity and that no overflow will ever occur.\n        ///\n        /// # Examples\n        ///\n        /// ```\n        /// #![feature(num_midpoint)]\n        #[doc = concat!(\"assert_eq!(0\", stringify!($SelfT), \".midpoint(4), 2);\")]\n        #[doc = concat!(\"assert_eq!(1\", stringify!($SelfT), \".midpoint(4), 2);\")]\n        /// ```\n        #[unstable(feature = \"num_midpoint\", issue = \"110840\")]\n        #[rustc_const_unstable(feature = \"const_num_midpoint\", issue = \"110840\")]\n        #[must_use = \"this returns the result of the operation, \\\n                      without modifying the original\"]\n        #[inline]\n        pub const fn midpoint(self, rhs: $SelfT) -> $SelfT {\n            // Use the well known branchless algorithm from Hacker's Delight to compute\n            // `(a + b) / 2` without overflowing: `((a ^ b) >> 1) + (a & b)`.\n            ((self ^ rhs) >> 1) + (self & rhs)\n        }\n    };\n    ($SelfT:ty, $WideT:ty, unsigned) => {\n        /// Calculates the middle point of `self` and `rhs`.\n        ///\n        /// `midpoint(a, b)` is `(a + b) >> 1` as if it were performed in a\n        /// sufficiently-large signed integral type. This implies that the result is\n        /// always rounded towards negative infinity and that no overflow will ever occur.\n        ///\n        /// # Examples\n        ///\n        /// ```\n        /// #![feature(num_midpoint)]\n        #[doc = concat!(\"assert_eq!(0\", stringify!($SelfT), \".midpoint(4), 2);\")]\n        #[doc = concat!(\"assert_eq!(1\", stringify!($SelfT), \".midpoint(4), 2);\")]\n        /// ```\n        #[unstable(feature = \"num_midpoint\", issue = \"110840\")]\n        #[rustc_const_unstable(feature = \"const_num_midpoint\", issue = \"110840\")]\n        #[must_use = \"this returns the result of the operation, \\\n                      without modifying the original\"]\n        #[inline]\n        pub const fn midpoint(self, rhs: $SelfT) -> $SelfT {\n            ((self as $WideT + rhs as $WideT) / 2) as $SelfT\n        }\n    };\n}\n\nmacro_rules! widening_impl {\n    ($SelfT:ty, $WideT:ty, $BITS:literal, unsigned) => {\n        /// Calculates the complete product `self * rhs` without the possibility to overflow.\n        ///\n        /// This returns the low-order (wrapping) bits and the high-order (overflow) bits\n        /// of the result as two separate values, in that order.\n        ///\n        /// If you also need to add a carry to the wide result, then you want\n        /// [`Self::carrying_mul`] instead.\n        ///\n        /// # Examples\n        ///\n        /// Basic usage:\n        ///\n        /// Please note that this example is shared between integer types.\n        /// Which explains why `u32` is used here.\n        ///\n        /// ```\n        /// #![feature(bigint_helper_methods)]\n        /// assert_eq!(5u32.widening_mul(2), (10, 0));\n        /// assert_eq!(1_000_000_000u32.widening_mul(10), (1410065408, 2));\n        /// ```\n        #[unstable(feature = \"bigint_helper_methods\", issue = \"85532\")]\n        #[rustc_const_unstable(feature = \"const_bigint_helper_methods\", issue = \"85532\")]\n        #[must_use = \"this returns the result of the operation, \\\n                      without modifying the original\"]\n        #[inline]\n        pub const fn widening_mul(self, rhs: Self) -> (Self, Self) {\n            // note: longer-term this should be done via an intrinsic,\n            //   but for now we can deal without an impl for u128/i128\n            // SAFETY: overflow will be contained within the wider types\n            let wide = unsafe { (self as $WideT).unchecked_mul(rhs as $WideT) };\n            (wide as $SelfT, (wide >> $BITS) as $SelfT)\n        }\n\n        /// Calculates the \"full multiplication\" `self * rhs + carry`\n        /// without the possibility to overflow.\n        ///\n        /// This returns the low-order (wrapping) bits and the high-order (overflow) bits\n        /// of the result as two separate values, in that order.\n        ///\n        /// Performs \"long multiplication\" which takes in an extra amount to add, and may return an\n        /// additional amount of overflow. This allows for chaining together multiple\n        /// multiplications to create \"big integers\" which represent larger values.\n        ///\n        /// If you don't need the `carry`, then you can use [`Self::widening_mul`] instead.\n        ///\n        /// # Examples\n        ///\n        /// Basic usage:\n        ///\n        /// Please note that this example is shared between integer types.\n        /// Which explains why `u32` is used here.\n        ///\n        /// ```\n        /// #![feature(bigint_helper_methods)]\n        /// assert_eq!(5u32.carrying_mul(2, 0), (10, 0));\n        /// assert_eq!(5u32.carrying_mul(2, 10), (20, 0));\n        /// assert_eq!(1_000_000_000u32.carrying_mul(10, 0), (1410065408, 2));\n        /// assert_eq!(1_000_000_000u32.carrying_mul(10, 10), (1410065418, 2));\n        #[doc = concat!(\"assert_eq!(\",\n            stringify!($SelfT), \"::MAX.carrying_mul(\", stringify!($SelfT), \"::MAX, \", stringify!($SelfT), \"::MAX), \",\n            \"(0, \", stringify!($SelfT), \"::MAX));\"\n        )]\n        /// ```\n        ///\n        /// This is the core operation needed for scalar multiplication when\n        /// implementing it for wider-than-native types.\n        ///\n        /// ```\n        /// #![feature(bigint_helper_methods)]\n        /// fn scalar_mul_eq(little_endian_digits: &mut Vec<u16>, multiplicand: u16) {\n        ///     let mut carry = 0;\n        ///     for d in little_endian_digits.iter_mut() {\n        ///         (*d, carry) = d.carrying_mul(multiplicand, carry);\n        ///     }\n        ///     if carry != 0 {\n        ///         little_endian_digits.push(carry);\n        ///     }\n        /// }\n        ///\n        /// let mut v = vec![10, 20];\n        /// scalar_mul_eq(&mut v, 3);\n        /// assert_eq!(v, [30, 60]);\n        ///\n        /// assert_eq!(0x87654321_u64 * 0xFEED, 0x86D3D159E38D);\n        /// let mut v = vec![0x4321, 0x8765];\n        /// scalar_mul_eq(&mut v, 0xFEED);\n        /// assert_eq!(v, [0xE38D, 0xD159, 0x86D3]);\n        /// ```\n        ///\n        /// If `carry` is zero, this is similar to [`overflowing_mul`](Self::overflowing_mul),\n        /// except that it gives the value of the overflow instead of just whether one happened:\n        ///\n        /// ```\n        /// #![feature(bigint_helper_methods)]\n        /// let r = u8::carrying_mul(7, 13, 0);\n        /// assert_eq!((r.0, r.1 != 0), u8::overflowing_mul(7, 13));\n        /// let r = u8::carrying_mul(13, 42, 0);\n        /// assert_eq!((r.0, r.1 != 0), u8::overflowing_mul(13, 42));\n        /// ```\n        ///\n        /// The value of the first field in the returned tuple matches what you'd get\n        /// by combining the [`wrapping_mul`](Self::wrapping_mul) and\n        /// [`wrapping_add`](Self::wrapping_add) methods:\n        ///\n        /// ```\n        /// #![feature(bigint_helper_methods)]\n        /// assert_eq!(\n        ///     789_u16.carrying_mul(456, 123).0,\n        ///     789_u16.wrapping_mul(456).wrapping_add(123),\n        /// );\n        /// ```\n        #[unstable(feature = \"bigint_helper_methods\", issue = \"85532\")]\n        #[rustc_const_unstable(feature = \"bigint_helper_methods\", issue = \"85532\")]\n        #[must_use = \"this returns the result of the operation, \\\n                      without modifying the original\"]\n        #[inline]\n        pub const fn carrying_mul(self, rhs: Self, carry: Self) -> (Self, Self) {\n            // note: longer-term this should be done via an intrinsic,\n            //   but for now we can deal without an impl for u128/i128\n            // SAFETY: overflow will be contained within the wider types\n            let wide = unsafe {\n                (self as $WideT).unchecked_mul(rhs as $WideT).unchecked_add(carry as $WideT)\n            };\n            (wide as $SelfT, (wide >> $BITS) as $SelfT)\n        }\n    };\n}\n\nimpl i8 {\n    int_impl! {\n        Self = i8,\n        ActualT = i8,\n        UnsignedT = u8,\n        BITS = 8,\n        BITS_MINUS_ONE = 7,\n        Min = -128,\n        Max = 127,\n        rot = 2,\n        rot_op = \"-0x7e\",\n        rot_result = \"0xa\",\n        swap_op = \"0x12\",\n        swapped = \"0x12\",\n        reversed = \"0x48\",\n        le_bytes = \"[0x12]\",\n        be_bytes = \"[0x12]\",\n        to_xe_bytes_doc = \"\",\n        from_xe_bytes_doc = \"\",\n        bound_condition = \"\",\n    }\n}\n\nimpl i16 {\n    int_impl! {\n        Self = i16,\n        ActualT = i16,\n        UnsignedT = u16,\n        BITS = 16,\n        BITS_MINUS_ONE = 15,\n        Min = -32768,\n        Max = 32767,\n        rot = 4,\n        rot_op = \"-0x5ffd\",\n        rot_result = \"0x3a\",\n        swap_op = \"0x1234\",\n        swapped = \"0x3412\",\n        reversed = \"0x2c48\",\n        le_bytes = \"[0x34, 0x12]\",\n        be_bytes = \"[0x12, 0x34]\",\n        to_xe_bytes_doc = \"\",\n        from_xe_bytes_doc = \"\",\n        bound_condition = \"\",\n    }\n}\n\nimpl i32 {\n    int_impl! {\n        Self = i32,\n        ActualT = i32,\n        UnsignedT = u32,\n        BITS = 32,\n        BITS_MINUS_ONE = 31,\n        Min = -2147483648,\n        Max = 2147483647,\n        rot = 8,\n        rot_op = \"0x10000b3\",\n        rot_result = \"0xb301\",\n        swap_op = \"0x12345678\",\n        swapped = \"0x78563412\",\n        reversed = \"0x1e6a2c48\",\n        le_bytes = \"[0x78, 0x56, 0x34, 0x12]\",\n        be_bytes = \"[0x12, 0x34, 0x56, 0x78]\",\n        to_xe_bytes_doc = \"\",\n        from_xe_bytes_doc = \"\",\n        bound_condition = \"\",\n    }\n}\n\nimpl i64 {\n    int_impl! {\n        Self = i64,\n        ActualT = i64,\n        UnsignedT = u64,\n        BITS = 64,\n        BITS_MINUS_ONE = 63,\n        Min = -9223372036854775808,\n        Max = 9223372036854775807,\n        rot = 12,\n        rot_op = \"0xaa00000000006e1\",\n        rot_result = \"0x6e10aa\",\n        swap_op = \"0x1234567890123456\",\n        swapped = \"0x5634129078563412\",\n        reversed = \"0x6a2c48091e6a2c48\",\n        le_bytes = \"[0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\",\n        be_bytes = \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\",\n        to_xe_bytes_doc = \"\",\n        from_xe_bytes_doc = \"\",\n        bound_condition = \"\",\n    }\n}\n\nimpl i128 {\n    int_impl! {\n        Self = i128,\n        ActualT = i128,\n        UnsignedT = u128,\n        BITS = 128,\n        BITS_MINUS_ONE = 127,\n        Min = -170141183460469231731687303715884105728,\n        Max = 170141183460469231731687303715884105727,\n        rot = 16,\n        rot_op = \"0x13f40000000000000000000000004f76\",\n        rot_result = \"0x4f7613f4\",\n        swap_op = \"0x12345678901234567890123456789012\",\n        swapped = \"0x12907856341290785634129078563412\",\n        reversed = \"0x48091e6a2c48091e6a2c48091e6a2c48\",\n        le_bytes = \"[0x12, 0x90, 0x78, 0x56, 0x34, 0x12, 0x90, 0x78, \\\n            0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\",\n        be_bytes = \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56, \\\n            0x78, 0x90, 0x12, 0x34, 0x56, 0x78, 0x90, 0x12]\",\n        to_xe_bytes_doc = \"\",\n        from_xe_bytes_doc = \"\",\n        bound_condition = \"\",\n    }\n}\n\n#[cfg(target_pointer_width = \"16\")]\nimpl isize {\n    int_impl! {\n        Self = isize,\n        ActualT = i16,\n        UnsignedT = usize,\n        BITS = 16,\n        BITS_MINUS_ONE = 15,\n        Min = -32768,\n        Max = 32767,\n        rot = 4,\n        rot_op = \"-0x5ffd\",\n        rot_result = \"0x3a\",\n        swap_op = \"0x1234\",\n        swapped = \"0x3412\",\n        reversed = \"0x2c48\",\n        le_bytes = \"[0x34, 0x12]\",\n        be_bytes = \"[0x12, 0x34]\",\n        to_xe_bytes_doc = usize_isize_to_xe_bytes_doc!(),\n        from_xe_bytes_doc = usize_isize_from_xe_bytes_doc!(),\n        bound_condition = \" on 16-bit targets\",\n    }\n}\n\n#[cfg(target_pointer_width = \"32\")]\nimpl isize {\n    int_impl! {\n        Self = isize,\n        ActualT = i32,\n        UnsignedT = usize,\n        BITS = 32,\n        BITS_MINUS_ONE = 31,\n        Min = -2147483648,\n        Max = 2147483647,\n        rot = 8,\n        rot_op = \"0x10000b3\",\n        rot_result = \"0xb301\",\n        swap_op = \"0x12345678\",\n        swapped = \"0x78563412\",\n        reversed = \"0x1e6a2c48\",\n        le_bytes = \"[0x78, 0x56, 0x34, 0x12]\",\n        be_bytes = \"[0x12, 0x34, 0x56, 0x78]\",\n        to_xe_bytes_doc = usize_isize_to_xe_bytes_doc!(),\n        from_xe_bytes_doc = usize_isize_from_xe_bytes_doc!(),\n        bound_condition = \" on 32-bit targets\",\n    }\n}\n\n#[cfg(target_pointer_width = \"64\")]\nimpl isize {\n    int_impl! {\n        Self = isize,\n        ActualT = i64,\n        UnsignedT = usize,\n        BITS = 64,\n        BITS_MINUS_ONE = 63,\n        Min = -9223372036854775808,\n        Max = 9223372036854775807,\n        rot = 12,\n        rot_op = \"0xaa00000000006e1\",\n        rot_result = \"0x6e10aa\",\n        swap_op = \"0x1234567890123456\",\n        swapped = \"0x5634129078563412\",\n        reversed = \"0x6a2c48091e6a2c48\",\n        le_bytes = \"[0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\",\n        be_bytes = \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\",\n        to_xe_bytes_doc = usize_isize_to_xe_bytes_doc!(),\n        from_xe_bytes_doc = usize_isize_from_xe_bytes_doc!(),\n        bound_condition = \" on 64-bit targets\",\n    }\n}\n\n/// If the 6th bit is set ascii is lower case.\nconst ASCII_CASE_MASK: u8 = 0b0010_0000;\n\nimpl u8 {\n    uint_impl! {\n        Self = u8,\n        ActualT = u8,\n        SignedT = i8,\n        NonZeroT = NonZero<u8>,\n        BITS = 8,\n        MAX = 255,\n        rot = 2,\n        rot_op = \"0x82\",\n        rot_result = \"0xa\",\n        swap_op = \"0x12\",\n        swapped = \"0x12\",\n        reversed = \"0x48\",\n        le_bytes = \"[0x12]\",\n        be_bytes = \"[0x12]\",\n        to_xe_bytes_doc = \"\",\n        from_xe_bytes_doc = \"\",\n        bound_condition = \"\",\n    }\n    widening_impl! { u8, u16, 8, unsigned }\n    midpoint_impl! { u8, u16, unsigned }\n\n    /// Checks if the value is within the ASCII range.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let ascii = 97u8;\n    /// let non_ascii = 150u8;\n    ///\n    /// assert!(ascii.is_ascii());\n    /// assert!(!non_ascii.is_ascii());\n    /// ```\n    #[must_use]\n    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n    #[rustc_const_stable(feature = \"const_u8_is_ascii\", since = \"1.43.0\")]\n    #[inline]\n    pub const fn is_ascii(&self) -> bool {\n        *self <= 127\n    }\n\n    /// If the value of this byte is within the ASCII range, returns it as an\n    /// [ASCII character](ascii::Char).  Otherwise, returns `None`.\n    #[must_use]\n    #[unstable(feature = \"ascii_char\", issue = \"110998\")]\n    #[inline]\n    pub const fn as_ascii(&self) -> Option<ascii::Char> {\n        ascii::Char::from_u8(*self)\n    }\n\n    /// Makes a copy of the value in its ASCII upper case equivalent.\n    ///\n    /// ASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\n    /// but non-ASCII letters are unchanged.\n    ///\n    /// To uppercase the value in-place, use [`make_ascii_uppercase`].\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let lowercase_a = 97u8;\n    ///\n    /// assert_eq!(65, lowercase_a.to_ascii_uppercase());\n    /// ```\n    ///\n    /// [`make_ascii_uppercase`]: Self::make_ascii_uppercase\n    #[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]\n    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n    #[rustc_const_stable(feature = \"const_ascii_methods_on_intrinsics\", since = \"1.52.0\")]\n    #[inline]\n    pub const fn to_ascii_uppercase(&self) -> u8 {\n        // Toggle the 6th bit if this is a lowercase letter\n        *self ^ ((self.is_ascii_lowercase() as u8) * ASCII_CASE_MASK)\n    }\n\n    /// Makes a copy of the value in its ASCII lower case equivalent.\n    ///\n    /// ASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\n    /// but non-ASCII letters are unchanged.\n    ///\n    /// To lowercase the value in-place, use [`make_ascii_lowercase`].\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let uppercase_a = 65u8;\n    ///\n    /// assert_eq!(97, uppercase_a.to_ascii_lowercase());\n    /// ```\n    ///\n    /// [`make_ascii_lowercase`]: Self::make_ascii_lowercase\n    #[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]\n    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n    #[rustc_const_stable(feature = \"const_ascii_methods_on_intrinsics\", since = \"1.52.0\")]\n    #[inline]\n    pub const fn to_ascii_lowercase(&self) -> u8 {\n        // Set the 6th bit if this is an uppercase letter\n        *self | (self.is_ascii_uppercase() as u8 * ASCII_CASE_MASK)\n    }\n\n    /// Assumes self is ascii\n    #[inline]\n    pub(crate) const fn ascii_change_case_unchecked(&self) -> u8 {\n        *self ^ ASCII_CASE_MASK\n    }\n\n    /// Checks that two values are an ASCII case-insensitive match.\n    ///\n    /// This is equivalent to `to_ascii_lowercase(a) == to_ascii_lowercase(b)`.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let lowercase_a = 97u8;\n    /// let uppercase_a = 65u8;\n    ///\n    /// assert!(lowercase_a.eq_ignore_ascii_case(&uppercase_a));\n    /// ```\n    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n    #[rustc_const_stable(feature = \"const_ascii_methods_on_intrinsics\", since = \"1.52.0\")]\n    #[inline]\n    pub const fn eq_ignore_ascii_case(&self, other: &u8) -> bool {\n        self.to_ascii_lowercase() == other.to_ascii_lowercase()\n    }\n\n    /// Converts this value to its ASCII upper case equivalent in-place.\n    ///\n    /// ASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\n    /// but non-ASCII letters are unchanged.\n    ///\n    /// To return a new uppercased value without modifying the existing one, use\n    /// [`to_ascii_uppercase`].\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let mut byte = b'a';\n    ///\n    /// byte.make_ascii_uppercase();\n    ///\n    /// assert_eq!(b'A', byte);\n    /// ```\n    ///\n    /// [`to_ascii_uppercase`]: Self::to_ascii_uppercase\n    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n    #[inline]\n    pub fn make_ascii_uppercase(&mut self) {\n        *self = self.to_ascii_uppercase();\n    }\n\n    /// Converts this value to its ASCII lower case equivalent in-place.\n    ///\n    /// ASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\n    /// but non-ASCII letters are unchanged.\n    ///\n    /// To return a new lowercased value without modifying the existing one, use\n    /// [`to_ascii_lowercase`].\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let mut byte = b'A';\n    ///\n    /// byte.make_ascii_lowercase();\n    ///\n    /// assert_eq!(b'a', byte);\n    /// ```\n    ///\n    /// [`to_ascii_lowercase`]: Self::to_ascii_lowercase\n    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n    #[inline]\n    pub fn make_ascii_lowercase(&mut self) {\n        *self = self.to_ascii_lowercase();\n    }\n\n    /// Checks if the value is an ASCII alphabetic character:\n    ///\n    /// - U+0041 'A' ..= U+005A 'Z', or\n    /// - U+0061 'a' ..= U+007A 'z'.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let uppercase_a = b'A';\n    /// let uppercase_g = b'G';\n    /// let a = b'a';\n    /// let g = b'g';\n    /// let zero = b'0';\n    /// let percent = b'%';\n    /// let space = b' ';\n    /// let lf = b'\\n';\n    /// let esc = b'\\x1b';\n    ///\n    /// assert!(uppercase_a.is_ascii_alphabetic());\n    /// assert!(uppercase_g.is_ascii_alphabetic());\n    /// assert!(a.is_ascii_alphabetic());\n    /// assert!(g.is_ascii_alphabetic());\n    /// assert!(!zero.is_ascii_alphabetic());\n    /// assert!(!percent.is_ascii_alphabetic());\n    /// assert!(!space.is_ascii_alphabetic());\n    /// assert!(!lf.is_ascii_alphabetic());\n    /// assert!(!esc.is_ascii_alphabetic());\n    /// ```\n    #[must_use]\n    #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n    #[inline]\n    pub const fn is_ascii_alphabetic(&self) -> bool {\n        matches!(*self, b'A'..=b'Z' | b'a'..=b'z')\n    }\n\n    /// Checks if the value is an ASCII uppercase character:\n    /// U+0041 'A' ..= U+005A 'Z'.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let uppercase_a = b'A';\n    /// let uppercase_g = b'G';\n    /// let a = b'a';\n    /// let g = b'g';\n    /// let zero = b'0';\n    /// let percent = b'%';\n    /// let space = b' ';\n    /// let lf = b'\\n';\n    /// let esc = b'\\x1b';\n    ///\n    /// assert!(uppercase_a.is_ascii_uppercase());\n    /// assert!(uppercase_g.is_ascii_uppercase());\n    /// assert!(!a.is_ascii_uppercase());\n    /// assert!(!g.is_ascii_uppercase());\n    /// assert!(!zero.is_ascii_uppercase());\n    /// assert!(!percent.is_ascii_uppercase());\n    /// assert!(!space.is_ascii_uppercase());\n    /// assert!(!lf.is_ascii_uppercase());\n    /// assert!(!esc.is_ascii_uppercase());\n    /// ```\n    #[must_use]\n    #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n    #[inline]\n    pub const fn is_ascii_uppercase(&self) -> bool {\n        matches!(*self, b'A'..=b'Z')\n    }\n\n    /// Checks if the value is an ASCII lowercase character:\n    /// U+0061 'a' ..= U+007A 'z'.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let uppercase_a = b'A';\n    /// let uppercase_g = b'G';\n    /// let a = b'a';\n    /// let g = b'g';\n    /// let zero = b'0';\n    /// let percent = b'%';\n    /// let space = b' ';\n    /// let lf = b'\\n';\n    /// let esc = b'\\x1b';\n    ///\n    /// assert!(!uppercase_a.is_ascii_lowercase());\n    /// assert!(!uppercase_g.is_ascii_lowercase());\n    /// assert!(a.is_ascii_lowercase());\n    /// assert!(g.is_ascii_lowercase());\n    /// assert!(!zero.is_ascii_lowercase());\n    /// assert!(!percent.is_ascii_lowercase());\n    /// assert!(!space.is_ascii_lowercase());\n    /// assert!(!lf.is_ascii_lowercase());\n    /// assert!(!esc.is_ascii_lowercase());\n    /// ```\n    #[must_use]\n    #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n    #[inline]\n    pub const fn is_ascii_lowercase(&self) -> bool {\n        matches!(*self, b'a'..=b'z')\n    }\n\n    /// Checks if the value is an ASCII alphanumeric character:\n    ///\n    /// - U+0041 'A' ..= U+005A 'Z', or\n    /// - U+0061 'a' ..= U+007A 'z', or\n    /// - U+0030 '0' ..= U+0039 '9'.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let uppercase_a = b'A';\n    /// let uppercase_g = b'G';\n    /// let a = b'a';\n    /// let g = b'g';\n    /// let zero = b'0';\n    /// let percent = b'%';\n    /// let space = b' ';\n    /// let lf = b'\\n';\n    /// let esc = b'\\x1b';\n    ///\n    /// assert!(uppercase_a.is_ascii_alphanumeric());\n    /// assert!(uppercase_g.is_ascii_alphanumeric());\n    /// assert!(a.is_ascii_alphanumeric());\n    /// assert!(g.is_ascii_alphanumeric());\n    /// assert!(zero.is_ascii_alphanumeric());\n    /// assert!(!percent.is_ascii_alphanumeric());\n    /// assert!(!space.is_ascii_alphanumeric());\n    /// assert!(!lf.is_ascii_alphanumeric());\n    /// assert!(!esc.is_ascii_alphanumeric());\n    /// ```\n    #[must_use]\n    #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n    #[inline]\n    pub const fn is_ascii_alphanumeric(&self) -> bool {\n        matches!(*self, b'0'..=b'9') | matches!(*self, b'A'..=b'Z') | matches!(*self, b'a'..=b'z')\n    }\n\n    /// Checks if the value is an ASCII decimal digit:\n    /// U+0030 '0' ..= U+0039 '9'.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let uppercase_a = b'A';\n    /// let uppercase_g = b'G';\n    /// let a = b'a';\n    /// let g = b'g';\n    /// let zero = b'0';\n    /// let percent = b'%';\n    /// let space = b' ';\n    /// let lf = b'\\n';\n    /// let esc = b'\\x1b';\n    ///\n    /// assert!(!uppercase_a.is_ascii_digit());\n    /// assert!(!uppercase_g.is_ascii_digit());\n    /// assert!(!a.is_ascii_digit());\n    /// assert!(!g.is_ascii_digit());\n    /// assert!(zero.is_ascii_digit());\n    /// assert!(!percent.is_ascii_digit());\n    /// assert!(!space.is_ascii_digit());\n    /// assert!(!lf.is_ascii_digit());\n    /// assert!(!esc.is_ascii_digit());\n    /// ```\n    #[must_use]\n    #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n    #[inline]\n    pub const fn is_ascii_digit(&self) -> bool {\n        matches!(*self, b'0'..=b'9')\n    }\n\n    /// Checks if the value is an ASCII octal digit:\n    /// U+0030 '0' ..= U+0037 '7'.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// #![feature(is_ascii_octdigit)]\n    ///\n    /// let uppercase_a = b'A';\n    /// let a = b'a';\n    /// let zero = b'0';\n    /// let seven = b'7';\n    /// let nine = b'9';\n    /// let percent = b'%';\n    /// let lf = b'\\n';\n    ///\n    /// assert!(!uppercase_a.is_ascii_octdigit());\n    /// assert!(!a.is_ascii_octdigit());\n    /// assert!(zero.is_ascii_octdigit());\n    /// assert!(seven.is_ascii_octdigit());\n    /// assert!(!nine.is_ascii_octdigit());\n    /// assert!(!percent.is_ascii_octdigit());\n    /// assert!(!lf.is_ascii_octdigit());\n    /// ```\n    #[must_use]\n    #[unstable(feature = \"is_ascii_octdigit\", issue = \"101288\")]\n    #[rustc_const_unstable(feature = \"is_ascii_octdigit\", issue = \"101288\")]\n    #[inline]\n    pub const fn is_ascii_octdigit(&self) -> bool {\n        matches!(*self, b'0'..=b'7')\n    }\n\n    /// Checks if the value is an ASCII hexadecimal digit:\n    ///\n    /// - U+0030 '0' ..= U+0039 '9', or\n    /// - U+0041 'A' ..= U+0046 'F', or\n    /// - U+0061 'a' ..= U+0066 'f'.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let uppercase_a = b'A';\n    /// let uppercase_g = b'G';\n    /// let a = b'a';\n    /// let g = b'g';\n    /// let zero = b'0';\n    /// let percent = b'%';\n    /// let space = b' ';\n    /// let lf = b'\\n';\n    /// let esc = b'\\x1b';\n    ///\n    /// assert!(uppercase_a.is_ascii_hexdigit());\n    /// assert!(!uppercase_g.is_ascii_hexdigit());\n    /// assert!(a.is_ascii_hexdigit());\n    /// assert!(!g.is_ascii_hexdigit());\n    /// assert!(zero.is_ascii_hexdigit());\n    /// assert!(!percent.is_ascii_hexdigit());\n    /// assert!(!space.is_ascii_hexdigit());\n    /// assert!(!lf.is_ascii_hexdigit());\n    /// assert!(!esc.is_ascii_hexdigit());\n    /// ```\n    #[must_use]\n    #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n    #[inline]\n    pub const fn is_ascii_hexdigit(&self) -> bool {\n        matches!(*self, b'0'..=b'9') | matches!(*self, b'A'..=b'F') | matches!(*self, b'a'..=b'f')\n    }\n\n    /// Checks if the value is an ASCII punctuation character:\n    ///\n    /// - U+0021 ..= U+002F `! \" # $ % & ' ( ) * + , - . /`, or\n    /// - U+003A ..= U+0040 `: ; < = > ? @`, or\n    /// - U+005B ..= U+0060 `` [ \\ ] ^ _ ` ``, or\n    /// - U+007B ..= U+007E `{ | } ~`\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let uppercase_a = b'A';\n    /// let uppercase_g = b'G';\n    /// let a = b'a';\n    /// let g = b'g';\n    /// let zero = b'0';\n    /// let percent = b'%';\n    /// let space = b' ';\n    /// let lf = b'\\n';\n    /// let esc = b'\\x1b';\n    ///\n    /// assert!(!uppercase_a.is_ascii_punctuation());\n    /// assert!(!uppercase_g.is_ascii_punctuation());\n    /// assert!(!a.is_ascii_punctuation());\n    /// assert!(!g.is_ascii_punctuation());\n    /// assert!(!zero.is_ascii_punctuation());\n    /// assert!(percent.is_ascii_punctuation());\n    /// assert!(!space.is_ascii_punctuation());\n    /// assert!(!lf.is_ascii_punctuation());\n    /// assert!(!esc.is_ascii_punctuation());\n    /// ```\n    #[must_use]\n    #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n    #[inline]\n    pub const fn is_ascii_punctuation(&self) -> bool {\n        matches!(*self, b'!'..=b'/')\n            | matches!(*self, b':'..=b'@')\n            | matches!(*self, b'['..=b'`')\n            | matches!(*self, b'{'..=b'~')\n    }\n\n    /// Checks if the value is an ASCII graphic character:\n    /// U+0021 '!' ..= U+007E '~'.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let uppercase_a = b'A';\n    /// let uppercase_g = b'G';\n    /// let a = b'a';\n    /// let g = b'g';\n    /// let zero = b'0';\n    /// let percent = b'%';\n    /// let space = b' ';\n    /// let lf = b'\\n';\n    /// let esc = b'\\x1b';\n    ///\n    /// assert!(uppercase_a.is_ascii_graphic());\n    /// assert!(uppercase_g.is_ascii_graphic());\n    /// assert!(a.is_ascii_graphic());\n    /// assert!(g.is_ascii_graphic());\n    /// assert!(zero.is_ascii_graphic());\n    /// assert!(percent.is_ascii_graphic());\n    /// assert!(!space.is_ascii_graphic());\n    /// assert!(!lf.is_ascii_graphic());\n    /// assert!(!esc.is_ascii_graphic());\n    /// ```\n    #[must_use]\n    #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n    #[inline]\n    pub const fn is_ascii_graphic(&self) -> bool {\n        matches!(*self, b'!'..=b'~')\n    }\n\n    /// Checks if the value is an ASCII whitespace character:\n    /// U+0020 SPACE, U+0009 HORIZONTAL TAB, U+000A LINE FEED,\n    /// U+000C FORM FEED, or U+000D CARRIAGE RETURN.\n    ///\n    /// Rust uses the WhatWG Infra Standard's [definition of ASCII\n    /// whitespace][infra-aw]. There are several other definitions in\n    /// wide use. For instance, [the POSIX locale][pct] includes\n    /// U+000B VERTICAL TAB as well as all the above characters,\n    /// but—from the very same specification—[the default rule for\n    /// \"field splitting\" in the Bourne shell][bfs] considers *only*\n    /// SPACE, HORIZONTAL TAB, and LINE FEED as whitespace.\n    ///\n    /// If you are writing a program that will process an existing\n    /// file format, check what that format's definition of whitespace is\n    /// before using this function.\n    ///\n    /// [infra-aw]: https://infra.spec.whatwg.org/#ascii-whitespace\n    /// [pct]: https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap07.html#tag_07_03_01\n    /// [bfs]: https://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_06_05\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let uppercase_a = b'A';\n    /// let uppercase_g = b'G';\n    /// let a = b'a';\n    /// let g = b'g';\n    /// let zero = b'0';\n    /// let percent = b'%';\n    /// let space = b' ';\n    /// let lf = b'\\n';\n    /// let esc = b'\\x1b';\n    ///\n    /// assert!(!uppercase_a.is_ascii_whitespace());\n    /// assert!(!uppercase_g.is_ascii_whitespace());\n    /// assert!(!a.is_ascii_whitespace());\n    /// assert!(!g.is_ascii_whitespace());\n    /// assert!(!zero.is_ascii_whitespace());\n    /// assert!(!percent.is_ascii_whitespace());\n    /// assert!(space.is_ascii_whitespace());\n    /// assert!(lf.is_ascii_whitespace());\n    /// assert!(!esc.is_ascii_whitespace());\n    /// ```\n    #[must_use]\n    #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n    #[inline]\n    pub const fn is_ascii_whitespace(&self) -> bool {\n        matches!(*self, b'\\t' | b'\\n' | b'\\x0C' | b'\\r' | b' ')\n    }\n\n    /// Checks if the value is an ASCII control character:\n    /// U+0000 NUL ..= U+001F UNIT SEPARATOR, or U+007F DELETE.\n    /// Note that most ASCII whitespace characters are control\n    /// characters, but SPACE is not.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let uppercase_a = b'A';\n    /// let uppercase_g = b'G';\n    /// let a = b'a';\n    /// let g = b'g';\n    /// let zero = b'0';\n    /// let percent = b'%';\n    /// let space = b' ';\n    /// let lf = b'\\n';\n    /// let esc = b'\\x1b';\n    ///\n    /// assert!(!uppercase_a.is_ascii_control());\n    /// assert!(!uppercase_g.is_ascii_control());\n    /// assert!(!a.is_ascii_control());\n    /// assert!(!g.is_ascii_control());\n    /// assert!(!zero.is_ascii_control());\n    /// assert!(!percent.is_ascii_control());\n    /// assert!(!space.is_ascii_control());\n    /// assert!(lf.is_ascii_control());\n    /// assert!(esc.is_ascii_control());\n    /// ```\n    #[must_use]\n    #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n    #[inline]\n    pub const fn is_ascii_control(&self) -> bool {\n        matches!(*self, b'\\0'..=b'\\x1F' | b'\\x7F')\n    }\n\n    /// Returns an iterator that produces an escaped version of a `u8`,\n    /// treating it as an ASCII character.\n    ///\n    /// The behavior is identical to [`ascii::escape_default`].\n    ///\n    /// # Examples\n    ///\n    /// ```\n    ///\n    /// assert_eq!(\"0\", b'0'.escape_ascii().to_string());\n    /// assert_eq!(\"\\\\t\", b'\\t'.escape_ascii().to_string());\n    /// assert_eq!(\"\\\\r\", b'\\r'.escape_ascii().to_string());\n    /// assert_eq!(\"\\\\n\", b'\\n'.escape_ascii().to_string());\n    /// assert_eq!(\"\\\\'\", b'\\''.escape_ascii().to_string());\n    /// assert_eq!(\"\\\\\\\"\", b'\"'.escape_ascii().to_string());\n    /// assert_eq!(\"\\\\\\\\\", b'\\\\'.escape_ascii().to_string());\n    /// assert_eq!(\"\\\\x9d\", b'\\x9d'.escape_ascii().to_string());\n    /// ```\n    #[must_use = \"this returns the escaped byte as an iterator, \\\n                  without modifying the original\"]\n    #[stable(feature = \"inherent_ascii_escape\", since = \"1.60.0\")]\n    #[inline]\n    pub fn escape_ascii(self) -> ascii::EscapeDefault {\n        ascii::escape_default(self)\n    }\n\n    #[inline]\n    pub(crate) const fn is_utf8_char_boundary(self) -> bool {\n        // This is bit magic equivalent to: b < 128 || b >= 192\n        (self as i8) >= -0x40\n    }\n}\n\nimpl u16 {\n    uint_impl! {\n        Self = u16,\n        ActualT = u16,\n        SignedT = i16,\n        NonZeroT = NonZero<u16>,\n        BITS = 16,\n        MAX = 65535,\n        rot = 4,\n        rot_op = \"0xa003\",\n        rot_result = \"0x3a\",\n        swap_op = \"0x1234\",\n        swapped = \"0x3412\",\n        reversed = \"0x2c48\",\n        le_bytes = \"[0x34, 0x12]\",\n        be_bytes = \"[0x12, 0x34]\",\n        to_xe_bytes_doc = \"\",\n        from_xe_bytes_doc = \"\",\n        bound_condition = \"\",\n    }\n    widening_impl! { u16, u32, 16, unsigned }\n    midpoint_impl! { u16, u32, unsigned }\n\n    /// Checks if the value is a Unicode surrogate code point, which are disallowed values for [`char`].\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// #![feature(utf16_extra)]\n    ///\n    /// let low_non_surrogate = 0xA000u16;\n    /// let low_surrogate = 0xD800u16;\n    /// let high_surrogate = 0xDC00u16;\n    /// let high_non_surrogate = 0xE000u16;\n    ///\n    /// assert!(!low_non_surrogate.is_utf16_surrogate());\n    /// assert!(low_surrogate.is_utf16_surrogate());\n    /// assert!(high_surrogate.is_utf16_surrogate());\n    /// assert!(!high_non_surrogate.is_utf16_surrogate());\n    /// ```\n    #[must_use]\n    #[unstable(feature = \"utf16_extra\", issue = \"94919\")]\n    #[rustc_const_unstable(feature = \"utf16_extra_const\", issue = \"94919\")]\n    #[inline]\n    pub const fn is_utf16_surrogate(self) -> bool {\n        matches!(self, 0xD800..=0xDFFF)\n    }\n}\n\nimpl u32 {\n    uint_impl! {\n        Self = u32,\n        ActualT = u32,\n        SignedT = i32,\n        NonZeroT = NonZero<u32>,\n        BITS = 32,\n        MAX = 4294967295,\n        rot = 8,\n        rot_op = \"0x10000b3\",\n        rot_result = \"0xb301\",\n        swap_op = \"0x12345678\",\n        swapped = \"0x78563412\",\n        reversed = \"0x1e6a2c48\",\n        le_bytes = \"[0x78, 0x56, 0x34, 0x12]\",\n        be_bytes = \"[0x12, 0x34, 0x56, 0x78]\",\n        to_xe_bytes_doc = \"\",\n        from_xe_bytes_doc = \"\",\n        bound_condition = \"\",\n    }\n    widening_impl! { u32, u64, 32, unsigned }\n    midpoint_impl! { u32, u64, unsigned }\n}\n\nimpl u64 {\n    uint_impl! {\n        Self = u64,\n        ActualT = u64,\n        SignedT = i64,\n        NonZeroT = NonZero<u64>,\n        BITS = 64,\n        MAX = 18446744073709551615,\n        rot = 12,\n        rot_op = \"0xaa00000000006e1\",\n        rot_result = \"0x6e10aa\",\n        swap_op = \"0x1234567890123456\",\n        swapped = \"0x5634129078563412\",\n        reversed = \"0x6a2c48091e6a2c48\",\n        le_bytes = \"[0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\",\n        be_bytes = \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\",\n        to_xe_bytes_doc = \"\",\n        from_xe_bytes_doc = \"\",\n        bound_condition = \"\",\n    }\n    widening_impl! { u64, u128, 64, unsigned }\n    midpoint_impl! { u64, u128, unsigned }\n}\n\nimpl u128 {\n    uint_impl! {\n        Self = u128,\n        ActualT = u128,\n        SignedT = i128,\n        NonZeroT = NonZero<u128>,\n        BITS = 128,\n        MAX = 340282366920938463463374607431768211455,\n        rot = 16,\n        rot_op = \"0x13f40000000000000000000000004f76\",\n        rot_result = \"0x4f7613f4\",\n        swap_op = \"0x12345678901234567890123456789012\",\n        swapped = \"0x12907856341290785634129078563412\",\n        reversed = \"0x48091e6a2c48091e6a2c48091e6a2c48\",\n        le_bytes = \"[0x12, 0x90, 0x78, 0x56, 0x34, 0x12, 0x90, 0x78, \\\n            0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\",\n        be_bytes = \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56, \\\n            0x78, 0x90, 0x12, 0x34, 0x56, 0x78, 0x90, 0x12]\",\n        to_xe_bytes_doc = \"\",\n        from_xe_bytes_doc = \"\",\n        bound_condition = \"\",\n    }\n    midpoint_impl! { u128, unsigned }\n}\n\n#[cfg(target_pointer_width = \"16\")]\nimpl usize {\n    uint_impl! {\n        Self = usize,\n        ActualT = u16,\n        SignedT = isize,\n        NonZeroT = NonZero<usize>,\n        BITS = 16,\n        MAX = 65535,\n        rot = 4,\n        rot_op = \"0xa003\",\n        rot_result = \"0x3a\",\n        swap_op = \"0x1234\",\n        swapped = \"0x3412\",\n        reversed = \"0x2c48\",\n        le_bytes = \"[0x34, 0x12]\",\n        be_bytes = \"[0x12, 0x34]\",\n        to_xe_bytes_doc = usize_isize_to_xe_bytes_doc!(),\n        from_xe_bytes_doc = usize_isize_from_xe_bytes_doc!(),\n        bound_condition = \" on 16-bit targets\",\n    }\n    widening_impl! { usize, u32, 16, unsigned }\n    midpoint_impl! { usize, u32, unsigned }\n}\n\n#[cfg(target_pointer_width = \"32\")]\nimpl usize {\n    uint_impl! {\n        Self = usize,\n        ActualT = u32,\n        SignedT = isize,\n        NonZeroT = NonZero<usize>,\n        BITS = 32,\n        MAX = 4294967295,\n        rot = 8,\n        rot_op = \"0x10000b3\",\n        rot_result = \"0xb301\",\n        swap_op = \"0x12345678\",\n        swapped = \"0x78563412\",\n        reversed = \"0x1e6a2c48\",\n        le_bytes = \"[0x78, 0x56, 0x34, 0x12]\",\n        be_bytes = \"[0x12, 0x34, 0x56, 0x78]\",\n        to_xe_bytes_doc = usize_isize_to_xe_bytes_doc!(),\n        from_xe_bytes_doc = usize_isize_from_xe_bytes_doc!(),\n        bound_condition = \" on 32-bit targets\",\n    }\n    widening_impl! { usize, u64, 32, unsigned }\n    midpoint_impl! { usize, u64, unsigned }\n}\n\n#[cfg(target_pointer_width = \"64\")]\nimpl usize {\n    uint_impl! {\n        Self = usize,\n        ActualT = u64,\n        SignedT = isize,\n        NonZeroT = NonZero<usize>,\n        BITS = 64,\n        MAX = 18446744073709551615,\n        rot = 12,\n        rot_op = \"0xaa00000000006e1\",\n        rot_result = \"0x6e10aa\",\n        swap_op = \"0x1234567890123456\",\n        swapped = \"0x5634129078563412\",\n        reversed = \"0x6a2c48091e6a2c48\",\n        le_bytes = \"[0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\",\n        be_bytes = \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\",\n        to_xe_bytes_doc = usize_isize_to_xe_bytes_doc!(),\n        from_xe_bytes_doc = usize_isize_from_xe_bytes_doc!(),\n        bound_condition = \" on 64-bit targets\",\n    }\n    widening_impl! { usize, u128, 64, unsigned }\n    midpoint_impl! { usize, u128, unsigned }\n}\n\nimpl usize {\n    /// Returns an `usize` where every byte is equal to `x`.\n    #[inline]\n    pub(crate) const fn repeat_u8(x: u8) -> usize {\n        usize::from_ne_bytes([x; mem::size_of::<usize>()])\n    }\n\n    /// Returns an `usize` where every byte pair is equal to `x`.\n    #[inline]\n    pub(crate) const fn repeat_u16(x: u16) -> usize {\n        let mut r = 0usize;\n        let mut i = 0;\n        while i < mem::size_of::<usize>() {\n            // Use `wrapping_shl` to make it work on targets with 16-bit `usize`\n            r = r.wrapping_shl(16) | (x as usize);\n            i += 2;\n        }\n        r\n    }\n}\n\n/// A classification of floating point numbers.\n///\n/// This `enum` is used as the return type for [`f32::classify`] and [`f64::classify`]. See\n/// their documentation for more.\n///\n/// # Examples\n///\n/// ```\n/// use std::num::FpCategory;\n///\n/// let num = 12.4_f32;\n/// let inf = f32::INFINITY;\n/// let zero = 0f32;\n/// let sub: f32 = 1.1754942e-38;\n/// let nan = f32::NAN;\n///\n/// assert_eq!(num.classify(), FpCategory::Normal);\n/// assert_eq!(inf.classify(), FpCategory::Infinite);\n/// assert_eq!(zero.classify(), FpCategory::Zero);\n/// assert_eq!(sub.classify(), FpCategory::Subnormal);\n/// assert_eq!(nan.classify(), FpCategory::Nan);\n/// ```\n#[derive(Copy, Clone, PartialEq, Eq, Debug)]\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\npub enum FpCategory {\n    /// NaN (not a number): this value results from calculations like `(-1.0).sqrt()`.\n    ///\n    /// See [the documentation for `f32`](f32) for more information on the unusual properties\n    /// of NaN.\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    Nan,\n\n    /// Positive or negative infinity, which often results from dividing a nonzero number\n    /// by zero.\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    Infinite,\n\n    /// Positive or negative zero.\n    ///\n    /// See [the documentation for `f32`](f32) for more information on the signedness of zeroes.\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    Zero,\n\n    /// “Subnormal” or “denormal” floating point representation (less precise, relative to\n    /// their magnitude, than [`Normal`]).\n    ///\n    /// Subnormal numbers are larger in magnitude than [`Zero`] but smaller in magnitude than all\n    /// [`Normal`] numbers.\n    ///\n    /// [`Normal`]: Self::Normal\n    /// [`Zero`]: Self::Zero\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    Subnormal,\n\n    /// A regular floating point number, not any of the exceptional categories.\n    ///\n    /// The smallest positive normal numbers are [`f32::MIN_POSITIVE`] and [`f64::MIN_POSITIVE`],\n    /// and the largest positive normal numbers are [`f32::MAX`] and [`f64::MAX`]. (Unlike signed\n    /// integers, floating point numbers are symmetric in their range, so negating any of these\n    /// constants will produce their negative counterpart.)\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    Normal,\n}\n\nmacro_rules! from_str_radix_int_impl {\n    ($($t:ty)*) => {$(\n        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n        impl FromStr for $t {\n            type Err = ParseIntError;\n            fn from_str(src: &str) -> Result<Self, ParseIntError> {\n                <$t>::from_str_radix(src, 10)\n            }\n        }\n    )*}\n}\nfrom_str_radix_int_impl! { isize i8 i16 i32 i64 i128 usize u8 u16 u32 u64 u128 }\n\n/// Determines if a string of text of that length of that radix could be guaranteed to be\n/// stored in the given type T.\n/// Note that if the radix is known to the compiler, it is just the check of digits.len that\n/// is done at runtime.\n#[doc(hidden)]\n#[inline(always)]\n#[unstable(issue = \"none\", feature = \"std_internals\")]\npub const fn can_not_overflow<T>(radix: u32, is_signed_ty: bool, digits: &[u8]) -> bool {\n    radix <= 16 && digits.len() <= mem::size_of::<T>() * 2 - is_signed_ty as usize\n}\n\n#[track_caller]\nconst fn from_str_radix_panic_ct(_radix: u32) -> ! {\n    panic!(\"from_str_radix_int: must lie in the range `[2, 36]`\");\n}\n\n#[track_caller]\nfn from_str_radix_panic_rt(radix: u32) -> ! {\n    panic!(\"from_str_radix_int: must lie in the range `[2, 36]` - found {}\", radix);\n}\n\n#[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never))]\n#[cfg_attr(feature = \"panic_immediate_abort\", inline)]\n#[cold]\n#[track_caller]\nconst fn from_str_radix_panic(radix: u32) {\n    // The only difference between these two functions is their panic message.\n    intrinsics::const_eval_select((radix,), from_str_radix_panic_ct, from_str_radix_panic_rt);\n}\n\nmacro_rules! from_str_radix {\n    ($($int_ty:ty)+) => {$(\n        impl $int_ty {\n            /// Converts a string slice in a given base to an integer.\n            ///\n            /// The string is expected to be an optional `+` sign\n            /// followed by digits.\n            /// Leading and trailing whitespace represent an error.\n            /// Digits are a subset of these characters, depending on `radix`:\n            ///\n            /// * `0-9`\n            /// * `a-z`\n            /// * `A-Z`\n            ///\n            /// # Panics\n            ///\n            /// This function panics if `radix` is not in the range from 2 to 36.\n            ///\n            /// # Examples\n            ///\n            /// Basic usage:\n            ///\n            /// ```\n            #[doc = concat!(\"assert_eq!(\", stringify!($int_ty), \"::from_str_radix(\\\"A\\\", 16), Ok(10));\")]\n            /// ```\n            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n            #[rustc_const_unstable(feature = \"const_int_from_str\", issue = \"59133\")]\n            pub const fn from_str_radix(src: &str, radix: u32) -> Result<$int_ty, ParseIntError> {\n                use self::IntErrorKind::*;\n                use self::ParseIntError as PIE;\n\n                if 2 > radix || radix > 36 {\n                    from_str_radix_panic(radix);\n                }\n\n                if src.is_empty() {\n                    return Err(PIE { kind: Empty });\n                }\n\n                #[allow(unused_comparisons)]\n                let is_signed_ty = 0 > <$int_ty>::MIN;\n\n                // all valid digits are ascii, so we will just iterate over the utf8 bytes\n                // and cast them to chars. .to_digit() will safely return None for anything\n                // other than a valid ascii digit for the given radix, including the first-byte\n                // of multi-byte sequences\n                let src = src.as_bytes();\n\n                let (is_positive, mut digits) = match src {\n                    [b'+' | b'-'] => {\n                        return Err(PIE { kind: InvalidDigit });\n                    }\n                    [b'+', rest @ ..] => (true, rest),\n                    [b'-', rest @ ..] if is_signed_ty => (false, rest),\n                    _ => (true, src),\n                };\n\n                let mut result = 0;\n\n                macro_rules! unwrap_or_PIE {\n                    ($option:expr, $kind:ident) => {\n                        match $option {\n                            Some(value) => value,\n                            None => return Err(PIE { kind: $kind }),\n                        }\n                    };\n                }\n\n                if can_not_overflow::<$int_ty>(radix, is_signed_ty, digits) {\n                    // If the len of the str is short compared to the range of the type\n                    // we are parsing into, then we can be certain that an overflow will not occur.\n                    // This bound is when `radix.pow(digits.len()) - 1 <= T::MAX` but the condition\n                    // above is a faster (conservative) approximation of this.\n                    //\n                    // Consider radix 16 as it has the highest information density per digit and will thus overflow the earliest:\n                    // `u8::MAX` is `ff` - any str of len 2 is guaranteed to not overflow.\n                    // `i8::MAX` is `7f` - only a str of len 1 is guaranteed to not overflow.\n                    macro_rules! run_unchecked_loop {\n                        ($unchecked_additive_op:tt) => {{\n                            while let [c, rest @ ..] = digits {\n                                result = result * (radix as $int_ty);\n                                let x = unwrap_or_PIE!((*c as char).to_digit(radix), InvalidDigit);\n                                result = result $unchecked_additive_op (x as $int_ty);\n                                digits = rest;\n                            }\n                        }};\n                    }\n                    if is_positive {\n                        run_unchecked_loop!(+)\n                    } else {\n                        run_unchecked_loop!(-)\n                    };\n                } else {\n                    macro_rules! run_checked_loop {\n                        ($checked_additive_op:ident, $overflow_err:ident) => {{\n                            while let [c, rest @ ..] = digits {\n                                // When `radix` is passed in as a literal, rather than doing a slow `imul`\n                                // the compiler can use shifts if `radix` can be expressed as a\n                                // sum of powers of 2 (x*10 can be written as x*8 + x*2).\n                                // When the compiler can't use these optimisations,\n                                // the latency of the multiplication can be hidden by issuing it\n                                // before the result is needed to improve performance on\n                                // modern out-of-order CPU as multiplication here is slower\n                                // than the other instructions, we can get the end result faster\n                                // doing multiplication first and let the CPU spends other cycles\n                                // doing other computation and get multiplication result later.\n                                let mul = result.checked_mul(radix as $int_ty);\n                                let x = unwrap_or_PIE!((*c as char).to_digit(radix), InvalidDigit) as $int_ty;\n                                result = unwrap_or_PIE!(mul, $overflow_err);\n                                result = unwrap_or_PIE!(<$int_ty>::$checked_additive_op(result, x), $overflow_err);\n                                digits = rest;\n                            }\n                        }};\n                    }\n                    if is_positive {\n                        run_checked_loop!(checked_add, PosOverflow)\n                    } else {\n                        run_checked_loop!(checked_sub, NegOverflow)\n                    };\n                }\n                Ok(result)\n            }\n        }\n    )+}\n}\n\nfrom_str_radix! { i8 u8 i16 u16 i32 u32 i64 u64 i128 u128 }\n\n// Re-use the relevant implementation of from_str_radix for isize and usize to avoid outputting two\n// identical functions.\nmacro_rules! from_str_radix_size_impl {\n    ($($t:ident $size:ty),*) => {$(\n    impl $size {\n        /// Converts a string slice in a given base to an integer.\n        ///\n        /// The string is expected to be an optional `+` sign\n        /// followed by digits.\n        /// Leading and trailing whitespace represent an error.\n        /// Digits are a subset of these characters, depending on `radix`:\n        ///\n        /// * `0-9`\n        /// * `a-z`\n        /// * `A-Z`\n        ///\n        /// # Panics\n        ///\n        /// This function panics if `radix` is not in the range from 2 to 36.\n        ///\n        /// # Examples\n        ///\n        /// Basic usage:\n        ///\n        /// ```\n        #[doc = concat!(\"assert_eq!(\", stringify!($size), \"::from_str_radix(\\\"A\\\", 16), Ok(10));\")]\n        /// ```\n        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n        #[rustc_const_unstable(feature = \"const_int_from_str\", issue = \"59133\")]\n        pub const fn from_str_radix(src: &str, radix: u32) -> Result<$size, ParseIntError> {\n            match <$t>::from_str_radix(src, radix) {\n                Ok(x) => Ok(x as $size),\n                Err(e) => Err(e),\n            }\n        }\n    })*}\n}\n\n#[cfg(target_pointer_width = \"16\")]\nfrom_str_radix_size_impl! { i16 isize, u16 usize }\n#[cfg(target_pointer_width = \"32\")]\nfrom_str_radix_size_impl! { i32 isize, u32 usize }\n#[cfg(target_pointer_width = \"64\")]\nfrom_str_radix_size_impl! { i64 isize, u64 usize }\n\n```",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Source of the Rust file `library/core/src/num/mod.rs`.\"><title>mod.rs - source</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../../\" data-static-root-path=\"../../../static.files/\" data-current-crate=\"core\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"../../../static.files/src-script-e66d777a5a92e9b2.js\"></script><script defer=\"\" src=\"../../../src-files1.80.0.js\"></script><script defer=\"\" src=\"../../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc src\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"sidebar\"><div class=\"src-sidebar-title\"><h2>Files</h2></div><div id=\"src-sidebar\"><details class=\"dir-entry\"><summary>alloc</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>boxed</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/alloc/boxed/thin.rs.html\">thin.rs</a></div></details><details class=\"dir-entry\"><summary>collections</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>binary_heap</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/alloc/collections/binary_heap/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>btree</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>map</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/alloc/collections/btree/map/entry.rs.html\">entry.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/alloc/collections/btree/append.rs.html\">append.rs</a><a href=\"../../../src/alloc/collections/btree/borrow.rs.html\">borrow.rs</a><a href=\"../../../src/alloc/collections/btree/dedup_sorted_iter.rs.html\">dedup_sorted_iter.rs</a><a href=\"../../../src/alloc/collections/btree/fix.rs.html\">fix.rs</a><a href=\"../../../src/alloc/collections/btree/map.rs.html\">map.rs</a><a href=\"../../../src/alloc/collections/btree/mem.rs.html\">mem.rs</a><a href=\"../../../src/alloc/collections/btree/merge_iter.rs.html\">merge_iter.rs</a><a href=\"../../../src/alloc/collections/btree/mod.rs.html\">mod.rs</a><a href=\"../../../src/alloc/collections/btree/navigate.rs.html\">navigate.rs</a><a href=\"../../../src/alloc/collections/btree/node.rs.html\">node.rs</a><a href=\"../../../src/alloc/collections/btree/remove.rs.html\">remove.rs</a><a href=\"../../../src/alloc/collections/btree/search.rs.html\">search.rs</a><a href=\"../../../src/alloc/collections/btree/set.rs.html\">set.rs</a><a href=\"../../../src/alloc/collections/btree/set_val.rs.html\">set_val.rs</a><a href=\"../../../src/alloc/collections/btree/split.rs.html\">split.rs</a></div></details><details class=\"dir-entry\"><summary>vec_deque</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/alloc/collections/vec_deque/drain.rs.html\">drain.rs</a><a href=\"../../../src/alloc/collections/vec_deque/into_iter.rs.html\">into_iter.rs</a><a href=\"../../../src/alloc/collections/vec_deque/iter.rs.html\">iter.rs</a><a href=\"../../../src/alloc/collections/vec_deque/iter_mut.rs.html\">iter_mut.rs</a><a href=\"../../../src/alloc/collections/vec_deque/macros.rs.html\">macros.rs</a><a href=\"../../../src/alloc/collections/vec_deque/mod.rs.html\">mod.rs</a><a href=\"../../../src/alloc/collections/vec_deque/spec_extend.rs.html\">spec_extend.rs</a><a href=\"../../../src/alloc/collections/vec_deque/spec_from_iter.rs.html\">spec_from_iter.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/alloc/collections/linked_list.rs.html\">linked_list.rs</a><a href=\"../../../src/alloc/collections/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>ffi</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/alloc/ffi/c_str.rs.html\">c_str.rs</a><a href=\"../../../src/alloc/ffi/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>vec</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/alloc/vec/cow.rs.html\">cow.rs</a><a href=\"../../../src/alloc/vec/drain.rs.html\">drain.rs</a><a href=\"../../../src/alloc/vec/extract_if.rs.html\">extract_if.rs</a><a href=\"../../../src/alloc/vec/in_place_collect.rs.html\">in_place_collect.rs</a><a href=\"../../../src/alloc/vec/in_place_drop.rs.html\">in_place_drop.rs</a><a href=\"../../../src/alloc/vec/into_iter.rs.html\">into_iter.rs</a><a href=\"../../../src/alloc/vec/is_zero.rs.html\">is_zero.rs</a><a href=\"../../../src/alloc/vec/mod.rs.html\">mod.rs</a><a href=\"../../../src/alloc/vec/partial_eq.rs.html\">partial_eq.rs</a><a href=\"../../../src/alloc/vec/set_len_on_drop.rs.html\">set_len_on_drop.rs</a><a href=\"../../../src/alloc/vec/spec_extend.rs.html\">spec_extend.rs</a><a href=\"../../../src/alloc/vec/spec_from_elem.rs.html\">spec_from_elem.rs</a><a href=\"../../../src/alloc/vec/spec_from_iter.rs.html\">spec_from_iter.rs</a><a href=\"../../../src/alloc/vec/spec_from_iter_nested.rs.html\">spec_from_iter_nested.rs</a><a href=\"../../../src/alloc/vec/splice.rs.html\">splice.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/alloc/alloc.rs.html\">alloc.rs</a><a href=\"../../../src/alloc/borrow.rs.html\">borrow.rs</a><a href=\"../../../src/alloc/boxed.rs.html\">boxed.rs</a><a href=\"../../../src/alloc/fmt.rs.html\">fmt.rs</a><a href=\"../../../src/alloc/lib.rs.html\">lib.rs</a><a href=\"../../../src/alloc/macros.rs.html\">macros.rs</a><a href=\"../../../src/alloc/raw_vec.rs.html\">raw_vec.rs</a><a href=\"../../../src/alloc/rc.rs.html\">rc.rs</a><a href=\"../../../src/alloc/slice.rs.html\">slice.rs</a><a href=\"../../../src/alloc/str.rs.html\">str.rs</a><a href=\"../../../src/alloc/string.rs.html\">string.rs</a><a href=\"../../../src/alloc/sync.rs.html\">sync.rs</a><a href=\"../../../src/alloc/task.rs.html\">task.rs</a></div></details><details class=\"dir-entry\" open=\"\"><summary>core</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>alloc</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/alloc/global.rs.html\">global.rs</a><a href=\"../../../src/core/alloc/layout.rs.html\">layout.rs</a><a href=\"../../../src/core/alloc/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>array</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/array/ascii.rs.html\">ascii.rs</a><a href=\"../../../src/core/array/drain.rs.html\">drain.rs</a><a href=\"../../../src/core/array/equality.rs.html\">equality.rs</a><a href=\"../../../src/core/array/iter.rs.html\">iter.rs</a><a href=\"../../../src/core/array/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>ascii</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/ascii/ascii_char.rs.html\">ascii_char.rs</a></div></details><details class=\"dir-entry\"><summary>async_iter</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/async_iter/async_iter.rs.html\">async_iter.rs</a><a href=\"../../../src/core/async_iter/from_iter.rs.html\">from_iter.rs</a><a href=\"../../../src/core/async_iter/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>cell</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/cell/lazy.rs.html\">lazy.rs</a><a href=\"../../../src/core/cell/once.rs.html\">once.rs</a></div></details><details class=\"dir-entry\"><summary>char</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/char/convert.rs.html\">convert.rs</a><a href=\"../../../src/core/char/decode.rs.html\">decode.rs</a><a href=\"../../../src/core/char/methods.rs.html\">methods.rs</a><a href=\"../../../src/core/char/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>cmp</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/cmp/bytewise.rs.html\">bytewise.rs</a></div></details><details class=\"dir-entry\"><summary>convert</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/convert/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/convert/num.rs.html\">num.rs</a></div></details><details class=\"dir-entry\"><summary>ffi</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/ffi/c_str.rs.html\">c_str.rs</a><a href=\"../../../src/core/ffi/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>fmt</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/fmt/builders.rs.html\">builders.rs</a><a href=\"../../../src/core/fmt/float.rs.html\">float.rs</a><a href=\"../../../src/core/fmt/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/fmt/num.rs.html\">num.rs</a><a href=\"../../../src/core/fmt/rt.rs.html\">rt.rs</a></div></details><details class=\"dir-entry\"><summary>future</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/future/async_drop.rs.html\">async_drop.rs</a><a href=\"../../../src/core/future/future.rs.html\">future.rs</a><a href=\"../../../src/core/future/into_future.rs.html\">into_future.rs</a><a href=\"../../../src/core/future/join.rs.html\">join.rs</a><a href=\"../../../src/core/future/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/future/pending.rs.html\">pending.rs</a><a href=\"../../../src/core/future/poll_fn.rs.html\">poll_fn.rs</a><a href=\"../../../src/core/future/ready.rs.html\">ready.rs</a></div></details><details class=\"dir-entry\"><summary>hash</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/hash/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/hash/sip.rs.html\">sip.rs</a></div></details><details class=\"dir-entry\"><summary>intrinsics</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/intrinsics/mir.rs.html\">mir.rs</a><a href=\"../../../src/core/intrinsics/simd.rs.html\">simd.rs</a></div></details><details class=\"dir-entry\"><summary>io</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/io/borrowed_buf.rs.html\">borrowed_buf.rs</a><a href=\"../../../src/core/io/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>iter</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>adapters</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/iter/adapters/array_chunks.rs.html\">array_chunks.rs</a><a href=\"../../../src/core/iter/adapters/by_ref_sized.rs.html\">by_ref_sized.rs</a><a href=\"../../../src/core/iter/adapters/chain.rs.html\">chain.rs</a><a href=\"../../../src/core/iter/adapters/cloned.rs.html\">cloned.rs</a><a href=\"../../../src/core/iter/adapters/copied.rs.html\">copied.rs</a><a href=\"../../../src/core/iter/adapters/cycle.rs.html\">cycle.rs</a><a href=\"../../../src/core/iter/adapters/enumerate.rs.html\">enumerate.rs</a><a href=\"../../../src/core/iter/adapters/filter.rs.html\">filter.rs</a><a href=\"../../../src/core/iter/adapters/filter_map.rs.html\">filter_map.rs</a><a href=\"../../../src/core/iter/adapters/flatten.rs.html\">flatten.rs</a><a href=\"../../../src/core/iter/adapters/fuse.rs.html\">fuse.rs</a><a href=\"../../../src/core/iter/adapters/inspect.rs.html\">inspect.rs</a><a href=\"../../../src/core/iter/adapters/intersperse.rs.html\">intersperse.rs</a><a href=\"../../../src/core/iter/adapters/map.rs.html\">map.rs</a><a href=\"../../../src/core/iter/adapters/map_while.rs.html\">map_while.rs</a><a href=\"../../../src/core/iter/adapters/map_windows.rs.html\">map_windows.rs</a><a href=\"../../../src/core/iter/adapters/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/iter/adapters/peekable.rs.html\">peekable.rs</a><a href=\"../../../src/core/iter/adapters/rev.rs.html\">rev.rs</a><a href=\"../../../src/core/iter/adapters/scan.rs.html\">scan.rs</a><a href=\"../../../src/core/iter/adapters/skip.rs.html\">skip.rs</a><a href=\"../../../src/core/iter/adapters/skip_while.rs.html\">skip_while.rs</a><a href=\"../../../src/core/iter/adapters/step_by.rs.html\">step_by.rs</a><a href=\"../../../src/core/iter/adapters/take.rs.html\">take.rs</a><a href=\"../../../src/core/iter/adapters/take_while.rs.html\">take_while.rs</a><a href=\"../../../src/core/iter/adapters/zip.rs.html\">zip.rs</a></div></details><details class=\"dir-entry\"><summary>sources</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/iter/sources/empty.rs.html\">empty.rs</a><a href=\"../../../src/core/iter/sources/from_coroutine.rs.html\">from_coroutine.rs</a><a href=\"../../../src/core/iter/sources/from_fn.rs.html\">from_fn.rs</a><a href=\"../../../src/core/iter/sources/once.rs.html\">once.rs</a><a href=\"../../../src/core/iter/sources/once_with.rs.html\">once_with.rs</a><a href=\"../../../src/core/iter/sources/repeat.rs.html\">repeat.rs</a><a href=\"../../../src/core/iter/sources/repeat_n.rs.html\">repeat_n.rs</a><a href=\"../../../src/core/iter/sources/repeat_with.rs.html\">repeat_with.rs</a><a href=\"../../../src/core/iter/sources/successors.rs.html\">successors.rs</a></div></details><details class=\"dir-entry\"><summary>traits</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/iter/traits/accum.rs.html\">accum.rs</a><a href=\"../../../src/core/iter/traits/collect.rs.html\">collect.rs</a><a href=\"../../../src/core/iter/traits/double_ended.rs.html\">double_ended.rs</a><a href=\"../../../src/core/iter/traits/exact_size.rs.html\">exact_size.rs</a><a href=\"../../../src/core/iter/traits/iterator.rs.html\">iterator.rs</a><a href=\"../../../src/core/iter/traits/marker.rs.html\">marker.rs</a><a href=\"../../../src/core/iter/traits/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/iter/traits/unchecked_iterator.rs.html\">unchecked_iterator.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/iter/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/iter/range.rs.html\">range.rs</a><a href=\"../../../src/core/iter/sources.rs.html\">sources.rs</a></div></details><details class=\"dir-entry\"><summary>macros</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/macros/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>mem</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/mem/manually_drop.rs.html\">manually_drop.rs</a><a href=\"../../../src/core/mem/maybe_uninit.rs.html\">maybe_uninit.rs</a><a href=\"../../../src/core/mem/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/mem/transmutability.rs.html\">transmutability.rs</a></div></details><details class=\"dir-entry\"><summary>net</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/net/display_buffer.rs.html\">display_buffer.rs</a><a href=\"../../../src/core/net/ip_addr.rs.html\">ip_addr.rs</a><a href=\"../../../src/core/net/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/net/parser.rs.html\">parser.rs</a><a href=\"../../../src/core/net/socket_addr.rs.html\">socket_addr.rs</a></div></details><details class=\"dir-entry\" open=\"\"><summary>num</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>dec2flt</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/num/dec2flt/common.rs.html\">common.rs</a><a href=\"../../../src/core/num/dec2flt/decimal.rs.html\">decimal.rs</a><a href=\"../../../src/core/num/dec2flt/float.rs.html\">float.rs</a><a href=\"../../../src/core/num/dec2flt/fpu.rs.html\">fpu.rs</a><a href=\"../../../src/core/num/dec2flt/lemire.rs.html\">lemire.rs</a><a href=\"../../../src/core/num/dec2flt/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/num/dec2flt/number.rs.html\">number.rs</a><a href=\"../../../src/core/num/dec2flt/parse.rs.html\">parse.rs</a><a href=\"../../../src/core/num/dec2flt/slow.rs.html\">slow.rs</a><a href=\"../../../src/core/num/dec2flt/table.rs.html\">table.rs</a></div></details><details class=\"dir-entry\"><summary>flt2dec</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>strategy</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/num/flt2dec/strategy/dragon.rs.html\">dragon.rs</a><a href=\"../../../src/core/num/flt2dec/strategy/grisu.rs.html\">grisu.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/num/flt2dec/decoder.rs.html\">decoder.rs</a><a href=\"../../../src/core/num/flt2dec/estimator.rs.html\">estimator.rs</a><a href=\"../../../src/core/num/flt2dec/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>shells</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/num/shells/i128.rs.html\">i128.rs</a><a href=\"../../../src/core/num/shells/i16.rs.html\">i16.rs</a><a href=\"../../../src/core/num/shells/i32.rs.html\">i32.rs</a><a href=\"../../../src/core/num/shells/i64.rs.html\">i64.rs</a><a href=\"../../../src/core/num/shells/i8.rs.html\">i8.rs</a><a href=\"../../../src/core/num/shells/int_macros.rs.html\">int_macros.rs</a><a href=\"../../../src/core/num/shells/isize.rs.html\">isize.rs</a><a href=\"../../../src/core/num/shells/u128.rs.html\">u128.rs</a><a href=\"../../../src/core/num/shells/u16.rs.html\">u16.rs</a><a href=\"../../../src/core/num/shells/u32.rs.html\">u32.rs</a><a href=\"../../../src/core/num/shells/u64.rs.html\">u64.rs</a><a href=\"../../../src/core/num/shells/u8.rs.html\">u8.rs</a><a href=\"../../../src/core/num/shells/usize.rs.html\">usize.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/num/bignum.rs.html\">bignum.rs</a><a href=\"../../../src/core/num/diy_float.rs.html\">diy_float.rs</a><a href=\"../../../src/core/num/error.rs.html\">error.rs</a><a href=\"../../../src/core/num/f128.rs.html\">f128.rs</a><a href=\"../../../src/core/num/f16.rs.html\">f16.rs</a><a href=\"../../../src/core/num/f32.rs.html\">f32.rs</a><a href=\"../../../src/core/num/f64.rs.html\">f64.rs</a><a href=\"../../../src/core/num/fmt.rs.html\">fmt.rs</a><a href=\"../../../src/core/num/int_log10.rs.html\">int_log10.rs</a><a href=\"../../../src/core/num/int_macros.rs.html\">int_macros.rs</a><a href=\"../../../src/core/num/mod.rs.html\" class=\"selected\">mod.rs</a><a href=\"../../../src/core/num/nonzero.rs.html\">nonzero.rs</a><a href=\"../../../src/core/num/overflow_panic.rs.html\">overflow_panic.rs</a><a href=\"../../../src/core/num/saturating.rs.html\">saturating.rs</a><a href=\"../../../src/core/num/uint_macros.rs.html\">uint_macros.rs</a><a href=\"../../../src/core/num/wrapping.rs.html\">wrapping.rs</a></div></details><details class=\"dir-entry\"><summary>ops</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/ops/arith.rs.html\">arith.rs</a><a href=\"../../../src/core/ops/async_function.rs.html\">async_function.rs</a><a href=\"../../../src/core/ops/bit.rs.html\">bit.rs</a><a href=\"../../../src/core/ops/control_flow.rs.html\">control_flow.rs</a><a href=\"../../../src/core/ops/coroutine.rs.html\">coroutine.rs</a><a href=\"../../../src/core/ops/deref.rs.html\">deref.rs</a><a href=\"../../../src/core/ops/drop.rs.html\">drop.rs</a><a href=\"../../../src/core/ops/function.rs.html\">function.rs</a><a href=\"../../../src/core/ops/index.rs.html\">index.rs</a><a href=\"../../../src/core/ops/index_range.rs.html\">index_range.rs</a><a href=\"../../../src/core/ops/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/ops/range.rs.html\">range.rs</a><a href=\"../../../src/core/ops/try_trait.rs.html\">try_trait.rs</a><a href=\"../../../src/core/ops/unsize.rs.html\">unsize.rs</a></div></details><details class=\"dir-entry\"><summary>panic</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/panic/location.rs.html\">location.rs</a><a href=\"../../../src/core/panic/panic_info.rs.html\">panic_info.rs</a><a href=\"../../../src/core/panic/unwind_safe.rs.html\">unwind_safe.rs</a></div></details><details class=\"dir-entry\"><summary>portable-simd</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>crates</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>core_simd</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>src</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>masks</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/portable-simd/crates/core_simd/src/masks/full_masks.rs.html\">full_masks.rs</a></div></details><details class=\"dir-entry\"><summary>ops</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/portable-simd/crates/core_simd/src/ops/assign.rs.html\">assign.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html\">deref.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html\">shift_scalar.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html\">unary.rs</a></div></details><details class=\"dir-entry\"><summary>simd</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>cmp</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html\">eq.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html\">ord.rs</a></div></details><details class=\"dir-entry\"><summary>num</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html\">float.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html\">int.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html\">uint.rs</a></div></details><details class=\"dir-entry\"><summary>ptr</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/ptr/const_ptr.rs.html\">const_ptr.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/ptr/mut_ptr.rs.html\">mut_ptr.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/cmp.rs.html\">cmp.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/num.rs.html\">num.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/prelude.rs.html\">prelude.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/ptr.rs.html\">ptr.rs</a></div></details><details class=\"dir-entry\"><summary>vendor</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html\">x86.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/portable-simd/crates/core_simd/src/alias.rs.html\">alias.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/cast.rs.html\">cast.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/fmt.rs.html\">fmt.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/iter.rs.html\">iter.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/lane_count.rs.html\">lane_count.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/masks.rs.html\">masks.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/ops.rs.html\">ops.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/select.rs.html\">select.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/swizzle.rs.html\">swizzle.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/swizzle_dyn.rs.html\">swizzle_dyn.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html\">to_bytes.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/vector.rs.html\">vector.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/vendor.rs.html\">vendor.rs</a></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details><details class=\"dir-entry\"><summary>prelude</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/prelude/common.rs.html\">common.rs</a><a href=\"../../../src/core/prelude/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>ptr</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/ptr/alignment.rs.html\">alignment.rs</a><a href=\"../../../src/core/ptr/const_ptr.rs.html\">const_ptr.rs</a><a href=\"../../../src/core/ptr/metadata.rs.html\">metadata.rs</a><a href=\"../../../src/core/ptr/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/ptr/mut_ptr.rs.html\">mut_ptr.rs</a><a href=\"../../../src/core/ptr/non_null.rs.html\">non_null.rs</a><a href=\"../../../src/core/ptr/unique.rs.html\">unique.rs</a></div></details><details class=\"dir-entry\"><summary>slice</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>iter</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/slice/iter/macros.rs.html\">macros.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/slice/ascii.rs.html\">ascii.rs</a><a href=\"../../../src/core/slice/cmp.rs.html\">cmp.rs</a><a href=\"../../../src/core/slice/index.rs.html\">index.rs</a><a href=\"../../../src/core/slice/iter.rs.html\">iter.rs</a><a href=\"../../../src/core/slice/memchr.rs.html\">memchr.rs</a><a href=\"../../../src/core/slice/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/slice/raw.rs.html\">raw.rs</a><a href=\"../../../src/core/slice/rotate.rs.html\">rotate.rs</a><a href=\"../../../src/core/slice/select.rs.html\">select.rs</a><a href=\"../../../src/core/slice/sort.rs.html\">sort.rs</a><a href=\"../../../src/core/slice/specialize.rs.html\">specialize.rs</a></div></details><details class=\"dir-entry\"><summary>stdarch</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>crates</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>core_arch</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>src</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>aarch64</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>neon</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/aarch64/neon/generated.rs.html\">generated.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/aarch64/neon/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/aarch64/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/aarch64/prefetch.rs.html\">prefetch.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/aarch64/tme.rs.html\">tme.rs</a></div></details><details class=\"dir-entry\"><summary>arm</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm/dsp.rs.html\">dsp.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm/neon.rs.html\">neon.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm/sat.rs.html\">sat.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm/simd32.rs.html\">simd32.rs</a></div></details><details class=\"dir-entry\"><summary>arm_shared</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>barrier</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm_shared/barrier/cp15.rs.html\">cp15.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm_shared/barrier/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>neon</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm_shared/neon/generated.rs.html\">generated.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm_shared/neon/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm_shared/crc.rs.html\">crc.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm_shared/crypto.rs.html\">crypto.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm_shared/hints.rs.html\">hints.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm_shared/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>loongarch64</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>lasx</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/loongarch64/lasx/generated.rs.html\">generated.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/loongarch64/lasx/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/loongarch64/lasx/types.rs.html\">types.rs</a></div></details><details class=\"dir-entry\"><summary>lsx</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/loongarch64/lsx/generated.rs.html\">generated.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/loongarch64/lsx/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/loongarch64/lsx/types.rs.html\">types.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/loongarch64/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>mips</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/mips/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>nvptx</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/nvptx/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>powerpc</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/powerpc/altivec.rs.html\">altivec.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/powerpc/macros.rs.html\">macros.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/powerpc/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/powerpc/vsx.rs.html\">vsx.rs</a></div></details><details class=\"dir-entry\"><summary>powerpc64</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/powerpc64/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/powerpc64/vsx.rs.html\">vsx.rs</a></div></details><details class=\"dir-entry\"><summary>riscv32</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/riscv32/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/riscv32/zk.rs.html\">zk.rs</a></div></details><details class=\"dir-entry\"><summary>riscv64</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/riscv64/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/riscv64/zk.rs.html\">zk.rs</a></div></details><details class=\"dir-entry\"><summary>riscv_shared</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/riscv_shared/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/riscv_shared/p.rs.html\">p.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/riscv_shared/zb.rs.html\">zb.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/riscv_shared/zk.rs.html\">zk.rs</a></div></details><details class=\"dir-entry\"><summary>wasm32</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/wasm32/atomic.rs.html\">atomic.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/wasm32/memory.rs.html\">memory.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/wasm32/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/wasm32/relaxed_simd.rs.html\">relaxed_simd.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/wasm32/simd128.rs.html\">simd128.rs</a></div></details><details class=\"dir-entry\"><summary>x86</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/abm.rs.html\">abm.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/adx.rs.html\">adx.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/aes.rs.html\">aes.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx.rs.html\">avx.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx2.rs.html\">avx2.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx512bf16.rs.html\">avx512bf16.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx512bitalg.rs.html\">avx512bitalg.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx512bw.rs.html\">avx512bw.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx512cd.rs.html\">avx512cd.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx512f.rs.html\">avx512f.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx512ifma.rs.html\">avx512ifma.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx512vbmi.rs.html\">avx512vbmi.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx512vbmi2.rs.html\">avx512vbmi2.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx512vnni.rs.html\">avx512vnni.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx512vpopcntdq.rs.html\">avx512vpopcntdq.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/bmi1.rs.html\">bmi1.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/bmi2.rs.html\">bmi2.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/bswap.rs.html\">bswap.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/bt.rs.html\">bt.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/cpuid.rs.html\">cpuid.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/eflags.rs.html\">eflags.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/f16c.rs.html\">f16c.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/fma.rs.html\">fma.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/fxsr.rs.html\">fxsr.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/gfni.rs.html\">gfni.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/macros.rs.html\">macros.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/pclmulqdq.rs.html\">pclmulqdq.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/rdrand.rs.html\">rdrand.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/rdtsc.rs.html\">rdtsc.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/rtm.rs.html\">rtm.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/sha.rs.html\">sha.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/sse.rs.html\">sse.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/sse2.rs.html\">sse2.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/sse3.rs.html\">sse3.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/sse41.rs.html\">sse41.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/sse42.rs.html\">sse42.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/sse4a.rs.html\">sse4a.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/ssse3.rs.html\">ssse3.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/tbm.rs.html\">tbm.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/vaes.rs.html\">vaes.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/vpclmulqdq.rs.html\">vpclmulqdq.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/xsave.rs.html\">xsave.rs</a></div></details><details class=\"dir-entry\"><summary>x86_64</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/abm.rs.html\">abm.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/adx.rs.html\">adx.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/avx.rs.html\">avx.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/avx2.rs.html\">avx2.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/avx512f.rs.html\">avx512f.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/bmi.rs.html\">bmi.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/bmi2.rs.html\">bmi2.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/bswap.rs.html\">bswap.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/bt.rs.html\">bt.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/cmpxchg16b.rs.html\">cmpxchg16b.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/fxsr.rs.html\">fxsr.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/macros.rs.html\">macros.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/rdrand.rs.html\">rdrand.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/sse.rs.html\">sse.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/sse2.rs.html\">sse2.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/sse41.rs.html\">sse41.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/sse42.rs.html\">sse42.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/xsave.rs.html\">xsave.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/macros.rs.html\">macros.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/simd.rs.html\">simd.rs</a></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details><details class=\"dir-entry\"><summary>str</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/str/converts.rs.html\">converts.rs</a><a href=\"../../../src/core/str/count.rs.html\">count.rs</a><a href=\"../../../src/core/str/error.rs.html\">error.rs</a><a href=\"../../../src/core/str/iter.rs.html\">iter.rs</a><a href=\"../../../src/core/str/lossy.rs.html\">lossy.rs</a><a href=\"../../../src/core/str/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/str/pattern.rs.html\">pattern.rs</a><a href=\"../../../src/core/str/traits.rs.html\">traits.rs</a><a href=\"../../../src/core/str/validations.rs.html\">validations.rs</a></div></details><details class=\"dir-entry\"><summary>sync</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/sync/atomic.rs.html\">atomic.rs</a><a href=\"../../../src/core/sync/exclusive.rs.html\">exclusive.rs</a><a href=\"../../../src/core/sync/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>task</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/task/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/task/poll.rs.html\">poll.rs</a><a href=\"../../../src/core/task/ready.rs.html\">ready.rs</a><a href=\"../../../src/core/task/wake.rs.html\">wake.rs</a></div></details><details class=\"dir-entry\"><summary>unicode</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/unicode/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/unicode/printable.rs.html\">printable.rs</a><a href=\"../../../src/core/unicode/unicode_data.rs.html\">unicode_data.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/any.rs.html\">any.rs</a><a href=\"../../../src/core/arch.rs.html\">arch.rs</a><a href=\"../../../src/core/ascii.rs.html\">ascii.rs</a><a href=\"../../../src/core/asserting.rs.html\">asserting.rs</a><a href=\"../../../src/core/bool.rs.html\">bool.rs</a><a href=\"../../../src/core/borrow.rs.html\">borrow.rs</a><a href=\"../../../src/core/cell.rs.html\">cell.rs</a><a href=\"../../../src/core/clone.rs.html\">clone.rs</a><a href=\"../../../src/core/cmp.rs.html\">cmp.rs</a><a href=\"../../../src/core/default.rs.html\">default.rs</a><a href=\"../../../src/core/error.rs.html\">error.rs</a><a href=\"../../../src/core/escape.rs.html\">escape.rs</a><a href=\"../../../src/core/hint.rs.html\">hint.rs</a><a href=\"../../../src/core/internal_macros.rs.html\">internal_macros.rs</a><a href=\"../../../src/core/intrinsics.rs.html\">intrinsics.rs</a><a href=\"../../../src/core/lib.rs.html\">lib.rs</a><a href=\"../../../src/core/marker.rs.html\">marker.rs</a><a href=\"../../../src/core/option.rs.html\">option.rs</a><a href=\"../../../src/core/panic.rs.html\">panic.rs</a><a href=\"../../../src/core/panicking.rs.html\">panicking.rs</a><a href=\"../../../src/core/pat.rs.html\">pat.rs</a><a href=\"../../../src/core/pin.rs.html\">pin.rs</a><a href=\"../../../src/core/primitive.rs.html\">primitive.rs</a><a href=\"../../../src/core/primitive_docs.rs.html\">primitive_docs.rs</a><a href=\"../../../src/core/result.rs.html\">result.rs</a><a href=\"../../../src/core/time.rs.html\">time.rs</a><a href=\"../../../src/core/tuple.rs.html\">tuple.rs</a><a href=\"../../../src/core/ub_checks.rs.html\">ub_checks.rs</a><a href=\"../../../src/core/unit.rs.html\">unit.rs</a></div></details><details class=\"dir-entry\"><summary>proc_macro</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>bridge</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/proc_macro/bridge/arena.rs.html\">arena.rs</a><a href=\"../../../src/proc_macro/bridge/buffer.rs.html\">buffer.rs</a><a href=\"../../../src/proc_macro/bridge/client.rs.html\">client.rs</a><a href=\"../../../src/proc_macro/bridge/closure.rs.html\">closure.rs</a><a href=\"../../../src/proc_macro/bridge/fxhash.rs.html\">fxhash.rs</a><a href=\"../../../src/proc_macro/bridge/handle.rs.html\">handle.rs</a><a href=\"../../../src/proc_macro/bridge/mod.rs.html\">mod.rs</a><a href=\"../../../src/proc_macro/bridge/rpc.rs.html\">rpc.rs</a><a href=\"../../../src/proc_macro/bridge/selfless_reify.rs.html\">selfless_reify.rs</a><a href=\"../../../src/proc_macro/bridge/server.rs.html\">server.rs</a><a href=\"../../../src/proc_macro/bridge/symbol.rs.html\">symbol.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/proc_macro/diagnostic.rs.html\">diagnostic.rs</a><a href=\"../../../src/proc_macro/lib.rs.html\">lib.rs</a><a href=\"../../../src/proc_macro/quote.rs.html\">quote.rs</a></div></details><details class=\"dir-entry\"><summary>std</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>backtrace</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>src</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>backtrace</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/backtrace/src/backtrace/libunwind.rs.html\">libunwind.rs</a><a href=\"../../../src/std/backtrace/src/backtrace/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>symbolize</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>gimli</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/backtrace/src/symbolize/gimli/elf.rs.html\">elf.rs</a><a href=\"../../../src/std/backtrace/src/symbolize/gimli/libs_dl_iterate_phdr.rs.html\">libs_dl_iterate_phdr.rs</a><a href=\"../../../src/std/backtrace/src/symbolize/gimli/mmap_unix.rs.html\">mmap_unix.rs</a><a href=\"../../../src/std/backtrace/src/symbolize/gimli/parse_running_mmaps_unix.rs.html\">parse_running_mmaps_unix.rs</a><a href=\"../../../src/std/backtrace/src/symbolize/gimli/stash.rs.html\">stash.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/backtrace/src/symbolize/gimli.rs.html\">gimli.rs</a><a href=\"../../../src/std/backtrace/src/symbolize/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/backtrace/src/lib.rs.html\">lib.rs</a><a href=\"../../../src/std/backtrace/src/print.rs.html\">print.rs</a><a href=\"../../../src/std/backtrace/src/types.rs.html\">types.rs</a></div></details></div><div class=\"files\"></div></details><details class=\"dir-entry\"><summary>collections</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>hash</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/collections/hash/map.rs.html\">map.rs</a><a href=\"../../../src/std/collections/hash/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/collections/hash/set.rs.html\">set.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/collections/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>core</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>src</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/core/src/primitive_docs.rs.html\">primitive_docs.rs</a></div></details></div><div class=\"files\"></div></details><details class=\"dir-entry\"><summary>ffi</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/ffi/c_str.rs.html\">c_str.rs</a><a href=\"../../../src/std/ffi/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/ffi/os_str.rs.html\">os_str.rs</a></div></details><details class=\"dir-entry\"><summary>hash</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/hash/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/hash/random.rs.html\">random.rs</a></div></details><details class=\"dir-entry\"><summary>io</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>buffered</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>bufreader</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/io/buffered/bufreader/buffer.rs.html\">buffer.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/io/buffered/bufreader.rs.html\">bufreader.rs</a><a href=\"../../../src/std/io/buffered/bufwriter.rs.html\">bufwriter.rs</a><a href=\"../../../src/std/io/buffered/linewriter.rs.html\">linewriter.rs</a><a href=\"../../../src/std/io/buffered/linewritershim.rs.html\">linewritershim.rs</a><a href=\"../../../src/std/io/buffered/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>error</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/io/error/repr_bitpacked.rs.html\">repr_bitpacked.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/io/copy.rs.html\">copy.rs</a><a href=\"../../../src/std/io/cursor.rs.html\">cursor.rs</a><a href=\"../../../src/std/io/error.rs.html\">error.rs</a><a href=\"../../../src/std/io/impls.rs.html\">impls.rs</a><a href=\"../../../src/std/io/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/io/prelude.rs.html\">prelude.rs</a><a href=\"../../../src/std/io/stdio.rs.html\">stdio.rs</a><a href=\"../../../src/std/io/util.rs.html\">util.rs</a></div></details><details class=\"dir-entry\"><summary>net</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/net/ip_addr.rs.html\">ip_addr.rs</a><a href=\"../../../src/std/net/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/net/socket_addr.rs.html\">socket_addr.rs</a><a href=\"../../../src/std/net/tcp.rs.html\">tcp.rs</a><a href=\"../../../src/std/net/udp.rs.html\">udp.rs</a></div></details><details class=\"dir-entry\"><summary>os</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>fd</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/fd/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/os/fd/net.rs.html\">net.rs</a><a href=\"../../../src/std/os/fd/owned.rs.html\">owned.rs</a><a href=\"../../../src/std/os/fd/raw.rs.html\">raw.rs</a></div></details><details class=\"dir-entry\"><summary>linux</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/linux/fs.rs.html\">fs.rs</a><a href=\"../../../src/std/os/linux/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/os/linux/net.rs.html\">net.rs</a><a href=\"../../../src/std/os/linux/process.rs.html\">process.rs</a><a href=\"../../../src/std/os/linux/raw.rs.html\">raw.rs</a></div></details><details class=\"dir-entry\"><summary>net</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>linux_ext</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/net/linux_ext/addr.rs.html\">addr.rs</a><a href=\"../../../src/std/os/net/linux_ext/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/os/net/linux_ext/socket.rs.html\">socket.rs</a><a href=\"../../../src/std/os/net/linux_ext/tcp.rs.html\">tcp.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/os/net/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>raw</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/raw/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>unix</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>ffi</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/unix/ffi/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/os/unix/ffi/os_str.rs.html\">os_str.rs</a></div></details><details class=\"dir-entry\"><summary>io</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/unix/io/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>net</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/unix/net/addr.rs.html\">addr.rs</a><a href=\"../../../src/std/os/unix/net/ancillary.rs.html\">ancillary.rs</a><a href=\"../../../src/std/os/unix/net/datagram.rs.html\">datagram.rs</a><a href=\"../../../src/std/os/unix/net/listener.rs.html\">listener.rs</a><a href=\"../../../src/std/os/unix/net/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/os/unix/net/stream.rs.html\">stream.rs</a><a href=\"../../../src/std/os/unix/net/ucred.rs.html\">ucred.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/os/unix/fs.rs.html\">fs.rs</a><a href=\"../../../src/std/os/unix/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/os/unix/process.rs.html\">process.rs</a><a href=\"../../../src/std/os/unix/raw.rs.html\">raw.rs</a><a href=\"../../../src/std/os/unix/thread.rs.html\">thread.rs</a></div></details><details class=\"dir-entry\"><summary>wasi</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>io</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/wasi/io/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>net</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/wasi/net/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/os/wasi/ffi.rs.html\">ffi.rs</a><a href=\"../../../src/std/os/wasi/fs.rs.html\">fs.rs</a><a href=\"../../../src/std/os/wasi/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>wasip2</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/wasip2/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>windows</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>io</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/windows/io/handle.rs.html\">handle.rs</a><a href=\"../../../src/std/os/windows/io/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/os/windows/io/raw.rs.html\">raw.rs</a><a href=\"../../../src/std/os/windows/io/socket.rs.html\">socket.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/os/windows/ffi.rs.html\">ffi.rs</a><a href=\"../../../src/std/os/windows/fs.rs.html\">fs.rs</a><a href=\"../../../src/std/os/windows/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/os/windows/process.rs.html\">process.rs</a><a href=\"../../../src/std/os/windows/raw.rs.html\">raw.rs</a><a href=\"../../../src/std/os/windows/thread.rs.html\">thread.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/os/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>portable-simd</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>crates</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>std_float</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>src</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/portable-simd/crates/std_float/src/lib.rs.html\">lib.rs</a></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details><details class=\"dir-entry\"><summary>prelude</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/prelude/common.rs.html\">common.rs</a><a href=\"../../../src/std/prelude/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>sync</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>mpmc</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sync/mpmc/array.rs.html\">array.rs</a><a href=\"../../../src/std/sync/mpmc/context.rs.html\">context.rs</a><a href=\"../../../src/std/sync/mpmc/counter.rs.html\">counter.rs</a><a href=\"../../../src/std/sync/mpmc/error.rs.html\">error.rs</a><a href=\"../../../src/std/sync/mpmc/list.rs.html\">list.rs</a><a href=\"../../../src/std/sync/mpmc/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/sync/mpmc/select.rs.html\">select.rs</a><a href=\"../../../src/std/sync/mpmc/utils.rs.html\">utils.rs</a><a href=\"../../../src/std/sync/mpmc/waker.rs.html\">waker.rs</a><a href=\"../../../src/std/sync/mpmc/zero.rs.html\">zero.rs</a></div></details><details class=\"dir-entry\"><summary>mpsc</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sync/mpsc/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/sync/barrier.rs.html\">barrier.rs</a><a href=\"../../../src/std/sync/condvar.rs.html\">condvar.rs</a><a href=\"../../../src/std/sync/lazy_lock.rs.html\">lazy_lock.rs</a><a href=\"../../../src/std/sync/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/sync/mutex.rs.html\">mutex.rs</a><a href=\"../../../src/std/sync/once.rs.html\">once.rs</a><a href=\"../../../src/std/sync/once_lock.rs.html\">once_lock.rs</a><a href=\"../../../src/std/sync/poison.rs.html\">poison.rs</a><a href=\"../../../src/std/sync/reentrant_lock.rs.html\">reentrant_lock.rs</a><a href=\"../../../src/std/sync/rwlock.rs.html\">rwlock.rs</a></div></details><details class=\"dir-entry\"><summary>sys</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>os_str</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/os_str/bytes.rs.html\">bytes.rs</a><a href=\"../../../src/std/sys/os_str/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>pal</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>common</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/pal/common/alloc.rs.html\">alloc.rs</a><a href=\"../../../src/std/sys/pal/common/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/sys/pal/common/small_c_string.rs.html\">small_c_string.rs</a></div></details><details class=\"dir-entry\"><summary>unix</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>process</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/pal/unix/process/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/sys/pal/unix/process/process_common.rs.html\">process_common.rs</a><a href=\"../../../src/std/sys/pal/unix/process/process_unix.rs.html\">process_unix.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/sys/pal/unix/alloc.rs.html\">alloc.rs</a><a href=\"../../../src/std/sys/pal/unix/args.rs.html\">args.rs</a><a href=\"../../../src/std/sys/pal/unix/env.rs.html\">env.rs</a><a href=\"../../../src/std/sys/pal/unix/fd.rs.html\">fd.rs</a><a href=\"../../../src/std/sys/pal/unix/fs.rs.html\">fs.rs</a><a href=\"../../../src/std/sys/pal/unix/futex.rs.html\">futex.rs</a><a href=\"../../../src/std/sys/pal/unix/io.rs.html\">io.rs</a><a href=\"../../../src/std/sys/pal/unix/kernel_copy.rs.html\">kernel_copy.rs</a><a href=\"../../../src/std/sys/pal/unix/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/sys/pal/unix/net.rs.html\">net.rs</a><a href=\"../../../src/std/sys/pal/unix/os.rs.html\">os.rs</a><a href=\"../../../src/std/sys/pal/unix/pipe.rs.html\">pipe.rs</a><a href=\"../../../src/std/sys/pal/unix/rand.rs.html\">rand.rs</a><a href=\"../../../src/std/sys/pal/unix/stack_overflow.rs.html\">stack_overflow.rs</a><a href=\"../../../src/std/sys/pal/unix/stdio.rs.html\">stdio.rs</a><a href=\"../../../src/std/sys/pal/unix/thread.rs.html\">thread.rs</a><a href=\"../../../src/std/sys/pal/unix/thread_local_dtor.rs.html\">thread_local_dtor.rs</a><a href=\"../../../src/std/sys/pal/unix/thread_local_key.rs.html\">thread_local_key.rs</a><a href=\"../../../src/std/sys/pal/unix/time.rs.html\">time.rs</a><a href=\"../../../src/std/sys/pal/unix/weak.rs.html\">weak.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/sys/pal/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>path</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/path/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/sys/path/unix.rs.html\">unix.rs</a></div></details><details class=\"dir-entry\"><summary>personality</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>dwarf</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/personality/dwarf/eh.rs.html\">eh.rs</a><a href=\"../../../src/std/sys/personality/dwarf/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/sys/personality/gcc.rs.html\">gcc.rs</a><a href=\"../../../src/std/sys/personality/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>sync</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>condvar</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/sync/condvar/futex.rs.html\">futex.rs</a><a href=\"../../../src/std/sys/sync/condvar/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>mutex</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/sync/mutex/futex.rs.html\">futex.rs</a><a href=\"../../../src/std/sys/sync/mutex/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>once</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/sync/once/futex.rs.html\">futex.rs</a><a href=\"../../../src/std/sys/sync/once/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>rwlock</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/sync/rwlock/futex.rs.html\">futex.rs</a><a href=\"../../../src/std/sys/sync/rwlock/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>thread_parking</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/sync/thread_parking/futex.rs.html\">futex.rs</a><a href=\"../../../src/std/sys/sync/thread_parking/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/sys/sync/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>thread_local</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>fast_local</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/thread_local/fast_local/eager.rs.html\">eager.rs</a><a href=\"../../../src/std/sys/thread_local/fast_local/lazy.rs.html\">lazy.rs</a><a href=\"../../../src/std/sys/thread_local/fast_local/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/sys/thread_local/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/sys/cmath.rs.html\">cmath.rs</a><a href=\"../../../src/std/sys/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>sys_common</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys_common/backtrace.rs.html\">backtrace.rs</a><a href=\"../../../src/std/sys_common/fs.rs.html\">fs.rs</a><a href=\"../../../src/std/sys_common/io.rs.html\">io.rs</a><a href=\"../../../src/std/sys_common/lazy_box.rs.html\">lazy_box.rs</a><a href=\"../../../src/std/sys_common/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/sys_common/net.rs.html\">net.rs</a><a href=\"../../../src/std/sys_common/process.rs.html\">process.rs</a><a href=\"../../../src/std/sys_common/thread_local_dtor.rs.html\">thread_local_dtor.rs</a><a href=\"../../../src/std/sys_common/thread_local_key.rs.html\">thread_local_key.rs</a><a href=\"../../../src/std/sys_common/wstr.rs.html\">wstr.rs</a><a href=\"../../../src/std/sys_common/wtf8.rs.html\">wtf8.rs</a></div></details><details class=\"dir-entry\"><summary>thread</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/thread/local.rs.html\">local.rs</a><a href=\"../../../src/std/thread/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/thread/scoped.rs.html\">scoped.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/alloc.rs.html\">alloc.rs</a><a href=\"../../../src/std/ascii.rs.html\">ascii.rs</a><a href=\"../../../src/std/backtrace.rs.html\">backtrace.rs</a><a href=\"../../../src/std/env.rs.html\">env.rs</a><a href=\"../../../src/std/error.rs.html\">error.rs</a><a href=\"../../../src/std/f128.rs.html\">f128.rs</a><a href=\"../../../src/std/f16.rs.html\">f16.rs</a><a href=\"../../../src/std/f32.rs.html\">f32.rs</a><a href=\"../../../src/std/f64.rs.html\">f64.rs</a><a href=\"../../../src/std/fs.rs.html\">fs.rs</a><a href=\"../../../src/std/keyword_docs.rs.html\">keyword_docs.rs</a><a href=\"../../../src/std/lib.rs.html\">lib.rs</a><a href=\"../../../src/std/macros.rs.html\">macros.rs</a><a href=\"../../../src/std/num.rs.html\">num.rs</a><a href=\"../../../src/std/panic.rs.html\">panic.rs</a><a href=\"../../../src/std/panicking.rs.html\">panicking.rs</a><a href=\"../../../src/std/pat.rs.html\">pat.rs</a><a href=\"../../../src/std/path.rs.html\">path.rs</a><a href=\"../../../src/std/process.rs.html\">process.rs</a><a href=\"../../../src/std/rt.rs.html\">rt.rs</a><a href=\"../../../src/std/time.rs.html\">time.rs</a></div></details><details class=\"dir-entry\"><summary>test</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>formatters</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/test/formatters/json.rs.html\">json.rs</a><a href=\"../../../src/test/formatters/junit.rs.html\">junit.rs</a><a href=\"../../../src/test/formatters/mod.rs.html\">mod.rs</a><a href=\"../../../src/test/formatters/pretty.rs.html\">pretty.rs</a><a href=\"../../../src/test/formatters/terse.rs.html\">terse.rs</a></div></details><details class=\"dir-entry\"><summary>helpers</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/test/helpers/concurrency.rs.html\">concurrency.rs</a><a href=\"../../../src/test/helpers/metrics.rs.html\">metrics.rs</a><a href=\"../../../src/test/helpers/mod.rs.html\">mod.rs</a><a href=\"../../../src/test/helpers/shuffle.rs.html\">shuffle.rs</a></div></details><details class=\"dir-entry\"><summary>term</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>terminfo</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>parser</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/test/term/terminfo/parser/compiled.rs.html\">compiled.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/test/term/terminfo/mod.rs.html\">mod.rs</a><a href=\"../../../src/test/term/terminfo/parm.rs.html\">parm.rs</a><a href=\"../../../src/test/term/terminfo/searcher.rs.html\">searcher.rs</a></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"><a href=\"../../../src/test/bench.rs.html\">bench.rs</a><a href=\"../../../src/test/cli.rs.html\">cli.rs</a><a href=\"../../../src/test/console.rs.html\">console.rs</a><a href=\"../../../src/test/event.rs.html\">event.rs</a><a href=\"../../../src/test/lib.rs.html\">lib.rs</a><a href=\"../../../src/test/options.rs.html\">options.rs</a><a href=\"../../../src/test/stats.rs.html\">stats.rs</a><a href=\"../../../src/test/term.rs.html\">term.rs</a><a href=\"../../../src/test/test_result.rs.html\">test_result.rs</a><a href=\"../../../src/test/time.rs.html\">time.rs</a><a href=\"../../../src/test/types.rs.html\">types.rs</a></div></details></div></nav><div class=\"sidebar-resizer\"></div><main><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../../core/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"example-wrap\"><div data-nosnippet=\"\"><pre class=\"src-line-numbers\"><a href=\"#1\" id=\"1\">1</a>\n<a href=\"#2\" id=\"2\">2</a>\n<a href=\"#3\" id=\"3\">3</a>\n<a href=\"#4\" id=\"4\">4</a>\n<a href=\"#5\" id=\"5\">5</a>\n<a href=\"#6\" id=\"6\">6</a>\n<a href=\"#7\" id=\"7\">7</a>\n<a href=\"#8\" id=\"8\">8</a>\n<a href=\"#9\" id=\"9\">9</a>\n<a href=\"#10\" id=\"10\">10</a>\n<a href=\"#11\" id=\"11\">11</a>\n<a href=\"#12\" id=\"12\">12</a>\n<a href=\"#13\" id=\"13\">13</a>\n<a href=\"#14\" id=\"14\">14</a>\n<a href=\"#15\" id=\"15\">15</a>\n<a href=\"#16\" id=\"16\">16</a>\n<a href=\"#17\" id=\"17\">17</a>\n<a href=\"#18\" id=\"18\">18</a>\n<a href=\"#19\" id=\"19\">19</a>\n<a href=\"#20\" id=\"20\">20</a>\n<a href=\"#21\" id=\"21\">21</a>\n<a href=\"#22\" id=\"22\">22</a>\n<a href=\"#23\" id=\"23\">23</a>\n<a href=\"#24\" id=\"24\">24</a>\n<a href=\"#25\" id=\"25\">25</a>\n<a href=\"#26\" id=\"26\">26</a>\n<a href=\"#27\" id=\"27\">27</a>\n<a href=\"#28\" id=\"28\">28</a>\n<a href=\"#29\" id=\"29\">29</a>\n<a href=\"#30\" id=\"30\">30</a>\n<a href=\"#31\" id=\"31\">31</a>\n<a href=\"#32\" id=\"32\">32</a>\n<a href=\"#33\" id=\"33\">33</a>\n<a href=\"#34\" id=\"34\">34</a>\n<a href=\"#35\" id=\"35\">35</a>\n<a href=\"#36\" id=\"36\">36</a>\n<a href=\"#37\" id=\"37\">37</a>\n<a href=\"#38\" id=\"38\">38</a>\n<a href=\"#39\" id=\"39\">39</a>\n<a href=\"#40\" id=\"40\">40</a>\n<a href=\"#41\" id=\"41\">41</a>\n<a href=\"#42\" id=\"42\">42</a>\n<a href=\"#43\" id=\"43\">43</a>\n<a href=\"#44\" id=\"44\">44</a>\n<a href=\"#45\" id=\"45\">45</a>\n<a href=\"#46\" id=\"46\">46</a>\n<a href=\"#47\" id=\"47\">47</a>\n<a href=\"#48\" id=\"48\">48</a>\n<a href=\"#49\" id=\"49\">49</a>\n<a href=\"#50\" id=\"50\">50</a>\n<a href=\"#51\" id=\"51\">51</a>\n<a href=\"#52\" id=\"52\">52</a>\n<a href=\"#53\" id=\"53\">53</a>\n<a href=\"#54\" id=\"54\">54</a>\n<a href=\"#55\" id=\"55\">55</a>\n<a href=\"#56\" id=\"56\">56</a>\n<a href=\"#57\" id=\"57\">57</a>\n<a href=\"#58\" id=\"58\">58</a>\n<a href=\"#59\" id=\"59\">59</a>\n<a href=\"#60\" id=\"60\">60</a>\n<a href=\"#61\" id=\"61\">61</a>\n<a href=\"#62\" id=\"62\">62</a>\n<a href=\"#63\" id=\"63\">63</a>\n<a href=\"#64\" id=\"64\">64</a>\n<a href=\"#65\" id=\"65\">65</a>\n<a href=\"#66\" id=\"66\">66</a>\n<a href=\"#67\" id=\"67\">67</a>\n<a href=\"#68\" id=\"68\">68</a>\n<a href=\"#69\" id=\"69\">69</a>\n<a href=\"#70\" id=\"70\">70</a>\n<a href=\"#71\" id=\"71\">71</a>\n<a href=\"#72\" id=\"72\">72</a>\n<a href=\"#73\" id=\"73\">73</a>\n<a href=\"#74\" id=\"74\">74</a>\n<a href=\"#75\" id=\"75\">75</a>\n<a href=\"#76\" id=\"76\">76</a>\n<a href=\"#77\" id=\"77\">77</a>\n<a href=\"#78\" id=\"78\">78</a>\n<a href=\"#79\" id=\"79\">79</a>\n<a href=\"#80\" id=\"80\">80</a>\n<a href=\"#81\" id=\"81\">81</a>\n<a href=\"#82\" id=\"82\">82</a>\n<a href=\"#83\" id=\"83\">83</a>\n<a href=\"#84\" id=\"84\">84</a>\n<a href=\"#85\" id=\"85\">85</a>\n<a href=\"#86\" id=\"86\">86</a>\n<a href=\"#87\" id=\"87\">87</a>\n<a href=\"#88\" id=\"88\">88</a>\n<a href=\"#89\" id=\"89\">89</a>\n<a href=\"#90\" id=\"90\">90</a>\n<a href=\"#91\" id=\"91\">91</a>\n<a href=\"#92\" id=\"92\">92</a>\n<a href=\"#93\" id=\"93\">93</a>\n<a href=\"#94\" id=\"94\">94</a>\n<a href=\"#95\" id=\"95\">95</a>\n<a href=\"#96\" id=\"96\">96</a>\n<a href=\"#97\" id=\"97\">97</a>\n<a href=\"#98\" id=\"98\">98</a>\n<a href=\"#99\" id=\"99\">99</a>\n<a href=\"#100\" id=\"100\">100</a>\n<a href=\"#101\" id=\"101\">101</a>\n<a href=\"#102\" id=\"102\">102</a>\n<a href=\"#103\" id=\"103\">103</a>\n<a href=\"#104\" id=\"104\">104</a>\n<a href=\"#105\" id=\"105\">105</a>\n<a href=\"#106\" id=\"106\">106</a>\n<a href=\"#107\" id=\"107\">107</a>\n<a href=\"#108\" id=\"108\">108</a>\n<a href=\"#109\" id=\"109\">109</a>\n<a href=\"#110\" id=\"110\">110</a>\n<a href=\"#111\" id=\"111\">111</a>\n<a href=\"#112\" id=\"112\">112</a>\n<a href=\"#113\" id=\"113\">113</a>\n<a href=\"#114\" id=\"114\">114</a>\n<a href=\"#115\" id=\"115\">115</a>\n<a href=\"#116\" id=\"116\">116</a>\n<a href=\"#117\" id=\"117\">117</a>\n<a href=\"#118\" id=\"118\">118</a>\n<a href=\"#119\" id=\"119\">119</a>\n<a href=\"#120\" id=\"120\">120</a>\n<a href=\"#121\" id=\"121\">121</a>\n<a href=\"#122\" id=\"122\">122</a>\n<a href=\"#123\" id=\"123\">123</a>\n<a href=\"#124\" id=\"124\">124</a>\n<a href=\"#125\" id=\"125\">125</a>\n<a href=\"#126\" id=\"126\">126</a>\n<a href=\"#127\" id=\"127\">127</a>\n<a href=\"#128\" id=\"128\">128</a>\n<a href=\"#129\" id=\"129\">129</a>\n<a href=\"#130\" id=\"130\">130</a>\n<a href=\"#131\" id=\"131\">131</a>\n<a href=\"#132\" id=\"132\">132</a>\n<a href=\"#133\" id=\"133\">133</a>\n<a href=\"#134\" id=\"134\">134</a>\n<a href=\"#135\" id=\"135\">135</a>\n<a href=\"#136\" id=\"136\">136</a>\n<a href=\"#137\" id=\"137\">137</a>\n<a href=\"#138\" id=\"138\">138</a>\n<a href=\"#139\" id=\"139\">139</a>\n<a href=\"#140\" id=\"140\">140</a>\n<a href=\"#141\" id=\"141\">141</a>\n<a href=\"#142\" id=\"142\">142</a>\n<a href=\"#143\" id=\"143\">143</a>\n<a href=\"#144\" id=\"144\">144</a>\n<a href=\"#145\" id=\"145\">145</a>\n<a href=\"#146\" id=\"146\">146</a>\n<a href=\"#147\" id=\"147\">147</a>\n<a href=\"#148\" id=\"148\">148</a>\n<a href=\"#149\" id=\"149\">149</a>\n<a href=\"#150\" id=\"150\">150</a>\n<a href=\"#151\" id=\"151\">151</a>\n<a href=\"#152\" id=\"152\">152</a>\n<a href=\"#153\" id=\"153\">153</a>\n<a href=\"#154\" id=\"154\">154</a>\n<a href=\"#155\" id=\"155\">155</a>\n<a href=\"#156\" id=\"156\">156</a>\n<a href=\"#157\" id=\"157\">157</a>\n<a href=\"#158\" id=\"158\">158</a>\n<a href=\"#159\" id=\"159\">159</a>\n<a href=\"#160\" id=\"160\">160</a>\n<a href=\"#161\" id=\"161\">161</a>\n<a href=\"#162\" id=\"162\">162</a>\n<a href=\"#163\" id=\"163\">163</a>\n<a href=\"#164\" id=\"164\">164</a>\n<a href=\"#165\" id=\"165\">165</a>\n<a href=\"#166\" id=\"166\">166</a>\n<a href=\"#167\" id=\"167\">167</a>\n<a href=\"#168\" id=\"168\">168</a>\n<a href=\"#169\" id=\"169\">169</a>\n<a href=\"#170\" id=\"170\">170</a>\n<a href=\"#171\" id=\"171\">171</a>\n<a href=\"#172\" id=\"172\">172</a>\n<a href=\"#173\" id=\"173\">173</a>\n<a href=\"#174\" id=\"174\">174</a>\n<a href=\"#175\" id=\"175\">175</a>\n<a href=\"#176\" id=\"176\">176</a>\n<a href=\"#177\" id=\"177\">177</a>\n<a href=\"#178\" id=\"178\">178</a>\n<a href=\"#179\" id=\"179\">179</a>\n<a href=\"#180\" id=\"180\">180</a>\n<a href=\"#181\" id=\"181\">181</a>\n<a href=\"#182\" id=\"182\">182</a>\n<a href=\"#183\" id=\"183\">183</a>\n<a href=\"#184\" id=\"184\">184</a>\n<a href=\"#185\" id=\"185\">185</a>\n<a href=\"#186\" id=\"186\">186</a>\n<a href=\"#187\" id=\"187\">187</a>\n<a href=\"#188\" id=\"188\">188</a>\n<a href=\"#189\" id=\"189\">189</a>\n<a href=\"#190\" id=\"190\">190</a>\n<a href=\"#191\" id=\"191\">191</a>\n<a href=\"#192\" id=\"192\">192</a>\n<a href=\"#193\" id=\"193\">193</a>\n<a href=\"#194\" id=\"194\">194</a>\n<a href=\"#195\" id=\"195\">195</a>\n<a href=\"#196\" id=\"196\">196</a>\n<a href=\"#197\" id=\"197\">197</a>\n<a href=\"#198\" id=\"198\">198</a>\n<a href=\"#199\" id=\"199\">199</a>\n<a href=\"#200\" id=\"200\">200</a>\n<a href=\"#201\" id=\"201\">201</a>\n<a href=\"#202\" id=\"202\">202</a>\n<a href=\"#203\" id=\"203\">203</a>\n<a href=\"#204\" id=\"204\">204</a>\n<a href=\"#205\" id=\"205\">205</a>\n<a href=\"#206\" id=\"206\">206</a>\n<a href=\"#207\" id=\"207\">207</a>\n<a href=\"#208\" id=\"208\">208</a>\n<a href=\"#209\" id=\"209\">209</a>\n<a href=\"#210\" id=\"210\">210</a>\n<a href=\"#211\" id=\"211\">211</a>\n<a href=\"#212\" id=\"212\">212</a>\n<a href=\"#213\" id=\"213\">213</a>\n<a href=\"#214\" id=\"214\">214</a>\n<a href=\"#215\" id=\"215\">215</a>\n<a href=\"#216\" id=\"216\">216</a>\n<a href=\"#217\" id=\"217\">217</a>\n<a href=\"#218\" id=\"218\">218</a>\n<a href=\"#219\" id=\"219\">219</a>\n<a href=\"#220\" id=\"220\">220</a>\n<a href=\"#221\" id=\"221\">221</a>\n<a href=\"#222\" id=\"222\">222</a>\n<a href=\"#223\" id=\"223\">223</a>\n<a href=\"#224\" id=\"224\">224</a>\n<a href=\"#225\" id=\"225\">225</a>\n<a href=\"#226\" id=\"226\">226</a>\n<a href=\"#227\" id=\"227\">227</a>\n<a href=\"#228\" id=\"228\">228</a>\n<a href=\"#229\" id=\"229\">229</a>\n<a href=\"#230\" id=\"230\">230</a>\n<a href=\"#231\" id=\"231\">231</a>\n<a href=\"#232\" id=\"232\">232</a>\n<a href=\"#233\" id=\"233\">233</a>\n<a href=\"#234\" id=\"234\">234</a>\n<a href=\"#235\" id=\"235\">235</a>\n<a href=\"#236\" id=\"236\">236</a>\n<a href=\"#237\" id=\"237\">237</a>\n<a href=\"#238\" id=\"238\">238</a>\n<a href=\"#239\" id=\"239\">239</a>\n<a href=\"#240\" id=\"240\">240</a>\n<a href=\"#241\" id=\"241\">241</a>\n<a href=\"#242\" id=\"242\">242</a>\n<a href=\"#243\" id=\"243\">243</a>\n<a href=\"#244\" id=\"244\">244</a>\n<a href=\"#245\" id=\"245\">245</a>\n<a href=\"#246\" id=\"246\">246</a>\n<a href=\"#247\" id=\"247\">247</a>\n<a href=\"#248\" id=\"248\">248</a>\n<a href=\"#249\" id=\"249\">249</a>\n<a href=\"#250\" id=\"250\">250</a>\n<a href=\"#251\" id=\"251\">251</a>\n<a href=\"#252\" id=\"252\">252</a>\n<a href=\"#253\" id=\"253\">253</a>\n<a href=\"#254\" id=\"254\">254</a>\n<a href=\"#255\" id=\"255\">255</a>\n<a href=\"#256\" id=\"256\">256</a>\n<a href=\"#257\" id=\"257\">257</a>\n<a href=\"#258\" id=\"258\">258</a>\n<a href=\"#259\" id=\"259\">259</a>\n<a href=\"#260\" id=\"260\">260</a>\n<a href=\"#261\" id=\"261\">261</a>\n<a href=\"#262\" id=\"262\">262</a>\n<a href=\"#263\" id=\"263\">263</a>\n<a href=\"#264\" id=\"264\">264</a>\n<a href=\"#265\" id=\"265\">265</a>\n<a href=\"#266\" id=\"266\">266</a>\n<a href=\"#267\" id=\"267\">267</a>\n<a href=\"#268\" id=\"268\">268</a>\n<a href=\"#269\" id=\"269\">269</a>\n<a href=\"#270\" id=\"270\">270</a>\n<a href=\"#271\" id=\"271\">271</a>\n<a href=\"#272\" id=\"272\">272</a>\n<a href=\"#273\" id=\"273\">273</a>\n<a href=\"#274\" id=\"274\">274</a>\n<a href=\"#275\" id=\"275\">275</a>\n<a href=\"#276\" id=\"276\">276</a>\n<a href=\"#277\" id=\"277\">277</a>\n<a href=\"#278\" id=\"278\">278</a>\n<a href=\"#279\" id=\"279\">279</a>\n<a href=\"#280\" id=\"280\">280</a>\n<a href=\"#281\" id=\"281\">281</a>\n<a href=\"#282\" id=\"282\">282</a>\n<a href=\"#283\" id=\"283\">283</a>\n<a href=\"#284\" id=\"284\">284</a>\n<a href=\"#285\" id=\"285\">285</a>\n<a href=\"#286\" id=\"286\">286</a>\n<a href=\"#287\" id=\"287\">287</a>\n<a href=\"#288\" id=\"288\">288</a>\n<a href=\"#289\" id=\"289\">289</a>\n<a href=\"#290\" id=\"290\">290</a>\n<a href=\"#291\" id=\"291\">291</a>\n<a href=\"#292\" id=\"292\">292</a>\n<a href=\"#293\" id=\"293\">293</a>\n<a href=\"#294\" id=\"294\">294</a>\n<a href=\"#295\" id=\"295\">295</a>\n<a href=\"#296\" id=\"296\">296</a>\n<a href=\"#297\" id=\"297\">297</a>\n<a href=\"#298\" id=\"298\">298</a>\n<a href=\"#299\" id=\"299\">299</a>\n<a href=\"#300\" id=\"300\">300</a>\n<a href=\"#301\" id=\"301\">301</a>\n<a href=\"#302\" id=\"302\">302</a>\n<a href=\"#303\" id=\"303\">303</a>\n<a href=\"#304\" id=\"304\">304</a>\n<a href=\"#305\" id=\"305\">305</a>\n<a href=\"#306\" id=\"306\">306</a>\n<a href=\"#307\" id=\"307\">307</a>\n<a href=\"#308\" id=\"308\">308</a>\n<a href=\"#309\" id=\"309\">309</a>\n<a href=\"#310\" id=\"310\">310</a>\n<a href=\"#311\" id=\"311\">311</a>\n<a href=\"#312\" id=\"312\">312</a>\n<a href=\"#313\" id=\"313\">313</a>\n<a href=\"#314\" id=\"314\">314</a>\n<a href=\"#315\" id=\"315\">315</a>\n<a href=\"#316\" id=\"316\">316</a>\n<a href=\"#317\" id=\"317\">317</a>\n<a href=\"#318\" id=\"318\">318</a>\n<a href=\"#319\" id=\"319\">319</a>\n<a href=\"#320\" id=\"320\">320</a>\n<a href=\"#321\" id=\"321\">321</a>\n<a href=\"#322\" id=\"322\">322</a>\n<a href=\"#323\" id=\"323\">323</a>\n<a href=\"#324\" id=\"324\">324</a>\n<a href=\"#325\" id=\"325\">325</a>\n<a href=\"#326\" id=\"326\">326</a>\n<a href=\"#327\" id=\"327\">327</a>\n<a href=\"#328\" id=\"328\">328</a>\n<a href=\"#329\" id=\"329\">329</a>\n<a href=\"#330\" id=\"330\">330</a>\n<a href=\"#331\" id=\"331\">331</a>\n<a href=\"#332\" id=\"332\">332</a>\n<a href=\"#333\" id=\"333\">333</a>\n<a href=\"#334\" id=\"334\">334</a>\n<a href=\"#335\" id=\"335\">335</a>\n<a href=\"#336\" id=\"336\">336</a>\n<a href=\"#337\" id=\"337\">337</a>\n<a href=\"#338\" id=\"338\">338</a>\n<a href=\"#339\" id=\"339\">339</a>\n<a href=\"#340\" id=\"340\">340</a>\n<a href=\"#341\" id=\"341\">341</a>\n<a href=\"#342\" id=\"342\">342</a>\n<a href=\"#343\" id=\"343\">343</a>\n<a href=\"#344\" id=\"344\">344</a>\n<a href=\"#345\" id=\"345\">345</a>\n<a href=\"#346\" id=\"346\">346</a>\n<a href=\"#347\" id=\"347\">347</a>\n<a href=\"#348\" id=\"348\">348</a>\n<a href=\"#349\" id=\"349\">349</a>\n<a href=\"#350\" id=\"350\">350</a>\n<a href=\"#351\" id=\"351\">351</a>\n<a href=\"#352\" id=\"352\">352</a>\n<a href=\"#353\" id=\"353\">353</a>\n<a href=\"#354\" id=\"354\">354</a>\n<a href=\"#355\" id=\"355\">355</a>\n<a href=\"#356\" id=\"356\">356</a>\n<a href=\"#357\" id=\"357\">357</a>\n<a href=\"#358\" id=\"358\">358</a>\n<a href=\"#359\" id=\"359\">359</a>\n<a href=\"#360\" id=\"360\">360</a>\n<a href=\"#361\" id=\"361\">361</a>\n<a href=\"#362\" id=\"362\">362</a>\n<a href=\"#363\" id=\"363\">363</a>\n<a href=\"#364\" id=\"364\">364</a>\n<a href=\"#365\" id=\"365\">365</a>\n<a href=\"#366\" id=\"366\">366</a>\n<a href=\"#367\" id=\"367\">367</a>\n<a href=\"#368\" id=\"368\">368</a>\n<a href=\"#369\" id=\"369\">369</a>\n<a href=\"#370\" id=\"370\">370</a>\n<a href=\"#371\" id=\"371\">371</a>\n<a href=\"#372\" id=\"372\">372</a>\n<a href=\"#373\" id=\"373\">373</a>\n<a href=\"#374\" id=\"374\">374</a>\n<a href=\"#375\" id=\"375\">375</a>\n<a href=\"#376\" id=\"376\">376</a>\n<a href=\"#377\" id=\"377\">377</a>\n<a href=\"#378\" id=\"378\">378</a>\n<a href=\"#379\" id=\"379\">379</a>\n<a href=\"#380\" id=\"380\">380</a>\n<a href=\"#381\" id=\"381\">381</a>\n<a href=\"#382\" id=\"382\">382</a>\n<a href=\"#383\" id=\"383\">383</a>\n<a href=\"#384\" id=\"384\">384</a>\n<a href=\"#385\" id=\"385\">385</a>\n<a href=\"#386\" id=\"386\">386</a>\n<a href=\"#387\" id=\"387\">387</a>\n<a href=\"#388\" id=\"388\">388</a>\n<a href=\"#389\" id=\"389\">389</a>\n<a href=\"#390\" id=\"390\">390</a>\n<a href=\"#391\" id=\"391\">391</a>\n<a href=\"#392\" id=\"392\">392</a>\n<a href=\"#393\" id=\"393\">393</a>\n<a href=\"#394\" id=\"394\">394</a>\n<a href=\"#395\" id=\"395\">395</a>\n<a href=\"#396\" id=\"396\">396</a>\n<a href=\"#397\" id=\"397\">397</a>\n<a href=\"#398\" id=\"398\">398</a>\n<a href=\"#399\" id=\"399\">399</a>\n<a href=\"#400\" id=\"400\">400</a>\n<a href=\"#401\" id=\"401\">401</a>\n<a href=\"#402\" id=\"402\">402</a>\n<a href=\"#403\" id=\"403\">403</a>\n<a href=\"#404\" id=\"404\">404</a>\n<a href=\"#405\" id=\"405\">405</a>\n<a href=\"#406\" id=\"406\">406</a>\n<a href=\"#407\" id=\"407\">407</a>\n<a href=\"#408\" id=\"408\">408</a>\n<a href=\"#409\" id=\"409\">409</a>\n<a href=\"#410\" id=\"410\">410</a>\n<a href=\"#411\" id=\"411\">411</a>\n<a href=\"#412\" id=\"412\">412</a>\n<a href=\"#413\" id=\"413\">413</a>\n<a href=\"#414\" id=\"414\">414</a>\n<a href=\"#415\" id=\"415\">415</a>\n<a href=\"#416\" id=\"416\">416</a>\n<a href=\"#417\" id=\"417\">417</a>\n<a href=\"#418\" id=\"418\">418</a>\n<a href=\"#419\" id=\"419\">419</a>\n<a href=\"#420\" id=\"420\">420</a>\n<a href=\"#421\" id=\"421\">421</a>\n<a href=\"#422\" id=\"422\">422</a>\n<a href=\"#423\" id=\"423\">423</a>\n<a href=\"#424\" id=\"424\">424</a>\n<a href=\"#425\" id=\"425\">425</a>\n<a href=\"#426\" id=\"426\">426</a>\n<a href=\"#427\" id=\"427\">427</a>\n<a href=\"#428\" id=\"428\">428</a>\n<a href=\"#429\" id=\"429\">429</a>\n<a href=\"#430\" id=\"430\">430</a>\n<a href=\"#431\" id=\"431\">431</a>\n<a href=\"#432\" id=\"432\">432</a>\n<a href=\"#433\" id=\"433\">433</a>\n<a href=\"#434\" id=\"434\">434</a>\n<a href=\"#435\" id=\"435\">435</a>\n<a href=\"#436\" id=\"436\">436</a>\n<a href=\"#437\" id=\"437\">437</a>\n<a href=\"#438\" id=\"438\">438</a>\n<a href=\"#439\" id=\"439\">439</a>\n<a href=\"#440\" id=\"440\">440</a>\n<a href=\"#441\" id=\"441\">441</a>\n<a href=\"#442\" id=\"442\">442</a>\n<a href=\"#443\" id=\"443\">443</a>\n<a href=\"#444\" id=\"444\">444</a>\n<a href=\"#445\" id=\"445\">445</a>\n<a href=\"#446\" id=\"446\">446</a>\n<a href=\"#447\" id=\"447\">447</a>\n<a href=\"#448\" id=\"448\">448</a>\n<a href=\"#449\" id=\"449\">449</a>\n<a href=\"#450\" id=\"450\">450</a>\n<a href=\"#451\" id=\"451\">451</a>\n<a href=\"#452\" id=\"452\">452</a>\n<a href=\"#453\" id=\"453\">453</a>\n<a href=\"#454\" id=\"454\">454</a>\n<a href=\"#455\" id=\"455\">455</a>\n<a href=\"#456\" id=\"456\">456</a>\n<a href=\"#457\" id=\"457\">457</a>\n<a href=\"#458\" id=\"458\">458</a>\n<a href=\"#459\" id=\"459\">459</a>\n<a href=\"#460\" id=\"460\">460</a>\n<a href=\"#461\" id=\"461\">461</a>\n<a href=\"#462\" id=\"462\">462</a>\n<a href=\"#463\" id=\"463\">463</a>\n<a href=\"#464\" id=\"464\">464</a>\n<a href=\"#465\" id=\"465\">465</a>\n<a href=\"#466\" id=\"466\">466</a>\n<a href=\"#467\" id=\"467\">467</a>\n<a href=\"#468\" id=\"468\">468</a>\n<a href=\"#469\" id=\"469\">469</a>\n<a href=\"#470\" id=\"470\">470</a>\n<a href=\"#471\" id=\"471\">471</a>\n<a href=\"#472\" id=\"472\">472</a>\n<a href=\"#473\" id=\"473\">473</a>\n<a href=\"#474\" id=\"474\">474</a>\n<a href=\"#475\" id=\"475\">475</a>\n<a href=\"#476\" id=\"476\">476</a>\n<a href=\"#477\" id=\"477\">477</a>\n<a href=\"#478\" id=\"478\">478</a>\n<a href=\"#479\" id=\"479\">479</a>\n<a href=\"#480\" id=\"480\">480</a>\n<a href=\"#481\" id=\"481\">481</a>\n<a href=\"#482\" id=\"482\">482</a>\n<a href=\"#483\" id=\"483\">483</a>\n<a href=\"#484\" id=\"484\">484</a>\n<a href=\"#485\" id=\"485\">485</a>\n<a href=\"#486\" id=\"486\">486</a>\n<a href=\"#487\" id=\"487\">487</a>\n<a href=\"#488\" id=\"488\">488</a>\n<a href=\"#489\" id=\"489\">489</a>\n<a href=\"#490\" id=\"490\">490</a>\n<a href=\"#491\" id=\"491\">491</a>\n<a href=\"#492\" id=\"492\">492</a>\n<a href=\"#493\" id=\"493\">493</a>\n<a href=\"#494\" id=\"494\">494</a>\n<a href=\"#495\" id=\"495\">495</a>\n<a href=\"#496\" id=\"496\">496</a>\n<a href=\"#497\" id=\"497\">497</a>\n<a href=\"#498\" id=\"498\">498</a>\n<a href=\"#499\" id=\"499\">499</a>\n<a href=\"#500\" id=\"500\">500</a>\n<a href=\"#501\" id=\"501\">501</a>\n<a href=\"#502\" id=\"502\">502</a>\n<a href=\"#503\" id=\"503\">503</a>\n<a href=\"#504\" id=\"504\">504</a>\n<a href=\"#505\" id=\"505\">505</a>\n<a href=\"#506\" id=\"506\">506</a>\n<a href=\"#507\" id=\"507\">507</a>\n<a href=\"#508\" id=\"508\">508</a>\n<a href=\"#509\" id=\"509\">509</a>\n<a href=\"#510\" id=\"510\">510</a>\n<a href=\"#511\" id=\"511\">511</a>\n<a href=\"#512\" id=\"512\">512</a>\n<a href=\"#513\" id=\"513\">513</a>\n<a href=\"#514\" id=\"514\">514</a>\n<a href=\"#515\" id=\"515\">515</a>\n<a href=\"#516\" id=\"516\">516</a>\n<a href=\"#517\" id=\"517\">517</a>\n<a href=\"#518\" id=\"518\">518</a>\n<a href=\"#519\" id=\"519\">519</a>\n<a href=\"#520\" id=\"520\">520</a>\n<a href=\"#521\" id=\"521\">521</a>\n<a href=\"#522\" id=\"522\">522</a>\n<a href=\"#523\" id=\"523\">523</a>\n<a href=\"#524\" id=\"524\">524</a>\n<a href=\"#525\" id=\"525\">525</a>\n<a href=\"#526\" id=\"526\">526</a>\n<a href=\"#527\" id=\"527\">527</a>\n<a href=\"#528\" id=\"528\">528</a>\n<a href=\"#529\" id=\"529\">529</a>\n<a href=\"#530\" id=\"530\">530</a>\n<a href=\"#531\" id=\"531\">531</a>\n<a href=\"#532\" id=\"532\">532</a>\n<a href=\"#533\" id=\"533\">533</a>\n<a href=\"#534\" id=\"534\">534</a>\n<a href=\"#535\" id=\"535\">535</a>\n<a href=\"#536\" id=\"536\">536</a>\n<a href=\"#537\" id=\"537\">537</a>\n<a href=\"#538\" id=\"538\">538</a>\n<a href=\"#539\" id=\"539\">539</a>\n<a href=\"#540\" id=\"540\">540</a>\n<a href=\"#541\" id=\"541\">541</a>\n<a href=\"#542\" id=\"542\">542</a>\n<a href=\"#543\" id=\"543\">543</a>\n<a href=\"#544\" id=\"544\">544</a>\n<a href=\"#545\" id=\"545\">545</a>\n<a href=\"#546\" id=\"546\">546</a>\n<a href=\"#547\" id=\"547\">547</a>\n<a href=\"#548\" id=\"548\">548</a>\n<a href=\"#549\" id=\"549\">549</a>\n<a href=\"#550\" id=\"550\">550</a>\n<a href=\"#551\" id=\"551\">551</a>\n<a href=\"#552\" id=\"552\">552</a>\n<a href=\"#553\" id=\"553\">553</a>\n<a href=\"#554\" id=\"554\">554</a>\n<a href=\"#555\" id=\"555\">555</a>\n<a href=\"#556\" id=\"556\">556</a>\n<a href=\"#557\" id=\"557\">557</a>\n<a href=\"#558\" id=\"558\">558</a>\n<a href=\"#559\" id=\"559\">559</a>\n<a href=\"#560\" id=\"560\">560</a>\n<a href=\"#561\" id=\"561\">561</a>\n<a href=\"#562\" id=\"562\">562</a>\n<a href=\"#563\" id=\"563\">563</a>\n<a href=\"#564\" id=\"564\">564</a>\n<a href=\"#565\" id=\"565\">565</a>\n<a href=\"#566\" id=\"566\">566</a>\n<a href=\"#567\" id=\"567\">567</a>\n<a href=\"#568\" id=\"568\">568</a>\n<a href=\"#569\" id=\"569\">569</a>\n<a href=\"#570\" id=\"570\">570</a>\n<a href=\"#571\" id=\"571\">571</a>\n<a href=\"#572\" id=\"572\">572</a>\n<a href=\"#573\" id=\"573\">573</a>\n<a href=\"#574\" id=\"574\">574</a>\n<a href=\"#575\" id=\"575\">575</a>\n<a href=\"#576\" id=\"576\">576</a>\n<a href=\"#577\" id=\"577\">577</a>\n<a href=\"#578\" id=\"578\">578</a>\n<a href=\"#579\" id=\"579\">579</a>\n<a href=\"#580\" id=\"580\">580</a>\n<a href=\"#581\" id=\"581\">581</a>\n<a href=\"#582\" id=\"582\">582</a>\n<a href=\"#583\" id=\"583\">583</a>\n<a href=\"#584\" id=\"584\">584</a>\n<a href=\"#585\" id=\"585\">585</a>\n<a href=\"#586\" id=\"586\">586</a>\n<a href=\"#587\" id=\"587\">587</a>\n<a href=\"#588\" id=\"588\">588</a>\n<a href=\"#589\" id=\"589\">589</a>\n<a href=\"#590\" id=\"590\">590</a>\n<a href=\"#591\" id=\"591\">591</a>\n<a href=\"#592\" id=\"592\">592</a>\n<a href=\"#593\" id=\"593\">593</a>\n<a href=\"#594\" id=\"594\">594</a>\n<a href=\"#595\" id=\"595\">595</a>\n<a href=\"#596\" id=\"596\">596</a>\n<a href=\"#597\" id=\"597\">597</a>\n<a href=\"#598\" id=\"598\">598</a>\n<a href=\"#599\" id=\"599\">599</a>\n<a href=\"#600\" id=\"600\">600</a>\n<a href=\"#601\" id=\"601\">601</a>\n<a href=\"#602\" id=\"602\">602</a>\n<a href=\"#603\" id=\"603\">603</a>\n<a href=\"#604\" id=\"604\">604</a>\n<a href=\"#605\" id=\"605\">605</a>\n<a href=\"#606\" id=\"606\">606</a>\n<a href=\"#607\" id=\"607\">607</a>\n<a href=\"#608\" id=\"608\">608</a>\n<a href=\"#609\" id=\"609\">609</a>\n<a href=\"#610\" id=\"610\">610</a>\n<a href=\"#611\" id=\"611\">611</a>\n<a href=\"#612\" id=\"612\">612</a>\n<a href=\"#613\" id=\"613\">613</a>\n<a href=\"#614\" id=\"614\">614</a>\n<a href=\"#615\" id=\"615\">615</a>\n<a href=\"#616\" id=\"616\">616</a>\n<a href=\"#617\" id=\"617\">617</a>\n<a href=\"#618\" id=\"618\">618</a>\n<a href=\"#619\" id=\"619\">619</a>\n<a href=\"#620\" id=\"620\">620</a>\n<a href=\"#621\" id=\"621\">621</a>\n<a href=\"#622\" id=\"622\">622</a>\n<a href=\"#623\" id=\"623\">623</a>\n<a href=\"#624\" id=\"624\">624</a>\n<a href=\"#625\" id=\"625\">625</a>\n<a href=\"#626\" id=\"626\">626</a>\n<a href=\"#627\" id=\"627\">627</a>\n<a href=\"#628\" id=\"628\">628</a>\n<a href=\"#629\" id=\"629\">629</a>\n<a href=\"#630\" id=\"630\">630</a>\n<a href=\"#631\" id=\"631\">631</a>\n<a href=\"#632\" id=\"632\">632</a>\n<a href=\"#633\" id=\"633\">633</a>\n<a href=\"#634\" id=\"634\">634</a>\n<a href=\"#635\" id=\"635\">635</a>\n<a href=\"#636\" id=\"636\">636</a>\n<a href=\"#637\" id=\"637\">637</a>\n<a href=\"#638\" id=\"638\">638</a>\n<a href=\"#639\" id=\"639\">639</a>\n<a href=\"#640\" id=\"640\">640</a>\n<a href=\"#641\" id=\"641\">641</a>\n<a href=\"#642\" id=\"642\">642</a>\n<a href=\"#643\" id=\"643\">643</a>\n<a href=\"#644\" id=\"644\">644</a>\n<a href=\"#645\" id=\"645\">645</a>\n<a href=\"#646\" id=\"646\">646</a>\n<a href=\"#647\" id=\"647\">647</a>\n<a href=\"#648\" id=\"648\">648</a>\n<a href=\"#649\" id=\"649\">649</a>\n<a href=\"#650\" id=\"650\">650</a>\n<a href=\"#651\" id=\"651\">651</a>\n<a href=\"#652\" id=\"652\">652</a>\n<a href=\"#653\" id=\"653\">653</a>\n<a href=\"#654\" id=\"654\">654</a>\n<a href=\"#655\" id=\"655\">655</a>\n<a href=\"#656\" id=\"656\">656</a>\n<a href=\"#657\" id=\"657\">657</a>\n<a href=\"#658\" id=\"658\">658</a>\n<a href=\"#659\" id=\"659\">659</a>\n<a href=\"#660\" id=\"660\">660</a>\n<a href=\"#661\" id=\"661\">661</a>\n<a href=\"#662\" id=\"662\">662</a>\n<a href=\"#663\" id=\"663\">663</a>\n<a href=\"#664\" id=\"664\">664</a>\n<a href=\"#665\" id=\"665\">665</a>\n<a href=\"#666\" id=\"666\">666</a>\n<a href=\"#667\" id=\"667\">667</a>\n<a href=\"#668\" id=\"668\">668</a>\n<a href=\"#669\" id=\"669\">669</a>\n<a href=\"#670\" id=\"670\">670</a>\n<a href=\"#671\" id=\"671\">671</a>\n<a href=\"#672\" id=\"672\">672</a>\n<a href=\"#673\" id=\"673\">673</a>\n<a href=\"#674\" id=\"674\">674</a>\n<a href=\"#675\" id=\"675\">675</a>\n<a href=\"#676\" id=\"676\">676</a>\n<a href=\"#677\" id=\"677\">677</a>\n<a href=\"#678\" id=\"678\">678</a>\n<a href=\"#679\" id=\"679\">679</a>\n<a href=\"#680\" id=\"680\">680</a>\n<a href=\"#681\" id=\"681\">681</a>\n<a href=\"#682\" id=\"682\">682</a>\n<a href=\"#683\" id=\"683\">683</a>\n<a href=\"#684\" id=\"684\">684</a>\n<a href=\"#685\" id=\"685\">685</a>\n<a href=\"#686\" id=\"686\">686</a>\n<a href=\"#687\" id=\"687\">687</a>\n<a href=\"#688\" id=\"688\">688</a>\n<a href=\"#689\" id=\"689\">689</a>\n<a href=\"#690\" id=\"690\">690</a>\n<a href=\"#691\" id=\"691\">691</a>\n<a href=\"#692\" id=\"692\">692</a>\n<a href=\"#693\" id=\"693\">693</a>\n<a href=\"#694\" id=\"694\">694</a>\n<a href=\"#695\" id=\"695\">695</a>\n<a href=\"#696\" id=\"696\">696</a>\n<a href=\"#697\" id=\"697\">697</a>\n<a href=\"#698\" id=\"698\">698</a>\n<a href=\"#699\" id=\"699\">699</a>\n<a href=\"#700\" id=\"700\">700</a>\n<a href=\"#701\" id=\"701\">701</a>\n<a href=\"#702\" id=\"702\">702</a>\n<a href=\"#703\" id=\"703\">703</a>\n<a href=\"#704\" id=\"704\">704</a>\n<a href=\"#705\" id=\"705\">705</a>\n<a href=\"#706\" id=\"706\">706</a>\n<a href=\"#707\" id=\"707\">707</a>\n<a href=\"#708\" id=\"708\">708</a>\n<a href=\"#709\" id=\"709\">709</a>\n<a href=\"#710\" id=\"710\">710</a>\n<a href=\"#711\" id=\"711\">711</a>\n<a href=\"#712\" id=\"712\">712</a>\n<a href=\"#713\" id=\"713\">713</a>\n<a href=\"#714\" id=\"714\">714</a>\n<a href=\"#715\" id=\"715\">715</a>\n<a href=\"#716\" id=\"716\">716</a>\n<a href=\"#717\" id=\"717\">717</a>\n<a href=\"#718\" id=\"718\">718</a>\n<a href=\"#719\" id=\"719\">719</a>\n<a href=\"#720\" id=\"720\">720</a>\n<a href=\"#721\" id=\"721\">721</a>\n<a href=\"#722\" id=\"722\">722</a>\n<a href=\"#723\" id=\"723\">723</a>\n<a href=\"#724\" id=\"724\">724</a>\n<a href=\"#725\" id=\"725\">725</a>\n<a href=\"#726\" id=\"726\">726</a>\n<a href=\"#727\" id=\"727\">727</a>\n<a href=\"#728\" id=\"728\">728</a>\n<a href=\"#729\" id=\"729\">729</a>\n<a href=\"#730\" id=\"730\">730</a>\n<a href=\"#731\" id=\"731\">731</a>\n<a href=\"#732\" id=\"732\">732</a>\n<a href=\"#733\" id=\"733\">733</a>\n<a href=\"#734\" id=\"734\">734</a>\n<a href=\"#735\" id=\"735\">735</a>\n<a href=\"#736\" id=\"736\">736</a>\n<a href=\"#737\" id=\"737\">737</a>\n<a href=\"#738\" id=\"738\">738</a>\n<a href=\"#739\" id=\"739\">739</a>\n<a href=\"#740\" id=\"740\">740</a>\n<a href=\"#741\" id=\"741\">741</a>\n<a href=\"#742\" id=\"742\">742</a>\n<a href=\"#743\" id=\"743\">743</a>\n<a href=\"#744\" id=\"744\">744</a>\n<a href=\"#745\" id=\"745\">745</a>\n<a href=\"#746\" id=\"746\">746</a>\n<a href=\"#747\" id=\"747\">747</a>\n<a href=\"#748\" id=\"748\">748</a>\n<a href=\"#749\" id=\"749\">749</a>\n<a href=\"#750\" id=\"750\">750</a>\n<a href=\"#751\" id=\"751\">751</a>\n<a href=\"#752\" id=\"752\">752</a>\n<a href=\"#753\" id=\"753\">753</a>\n<a href=\"#754\" id=\"754\">754</a>\n<a href=\"#755\" id=\"755\">755</a>\n<a href=\"#756\" id=\"756\">756</a>\n<a href=\"#757\" id=\"757\">757</a>\n<a href=\"#758\" id=\"758\">758</a>\n<a href=\"#759\" id=\"759\">759</a>\n<a href=\"#760\" id=\"760\">760</a>\n<a href=\"#761\" id=\"761\">761</a>\n<a href=\"#762\" id=\"762\">762</a>\n<a href=\"#763\" id=\"763\">763</a>\n<a href=\"#764\" id=\"764\">764</a>\n<a href=\"#765\" id=\"765\">765</a>\n<a href=\"#766\" id=\"766\">766</a>\n<a href=\"#767\" id=\"767\">767</a>\n<a href=\"#768\" id=\"768\">768</a>\n<a href=\"#769\" id=\"769\">769</a>\n<a href=\"#770\" id=\"770\">770</a>\n<a href=\"#771\" id=\"771\">771</a>\n<a href=\"#772\" id=\"772\">772</a>\n<a href=\"#773\" id=\"773\">773</a>\n<a href=\"#774\" id=\"774\">774</a>\n<a href=\"#775\" id=\"775\">775</a>\n<a href=\"#776\" id=\"776\">776</a>\n<a href=\"#777\" id=\"777\">777</a>\n<a href=\"#778\" id=\"778\">778</a>\n<a href=\"#779\" id=\"779\">779</a>\n<a href=\"#780\" id=\"780\">780</a>\n<a href=\"#781\" id=\"781\">781</a>\n<a href=\"#782\" id=\"782\">782</a>\n<a href=\"#783\" id=\"783\">783</a>\n<a href=\"#784\" id=\"784\">784</a>\n<a href=\"#785\" id=\"785\">785</a>\n<a href=\"#786\" id=\"786\">786</a>\n<a href=\"#787\" id=\"787\">787</a>\n<a href=\"#788\" id=\"788\">788</a>\n<a href=\"#789\" id=\"789\">789</a>\n<a href=\"#790\" id=\"790\">790</a>\n<a href=\"#791\" id=\"791\">791</a>\n<a href=\"#792\" id=\"792\">792</a>\n<a href=\"#793\" id=\"793\">793</a>\n<a href=\"#794\" id=\"794\">794</a>\n<a href=\"#795\" id=\"795\">795</a>\n<a href=\"#796\" id=\"796\">796</a>\n<a href=\"#797\" id=\"797\">797</a>\n<a href=\"#798\" id=\"798\">798</a>\n<a href=\"#799\" id=\"799\">799</a>\n<a href=\"#800\" id=\"800\">800</a>\n<a href=\"#801\" id=\"801\">801</a>\n<a href=\"#802\" id=\"802\">802</a>\n<a href=\"#803\" id=\"803\">803</a>\n<a href=\"#804\" id=\"804\">804</a>\n<a href=\"#805\" id=\"805\">805</a>\n<a href=\"#806\" id=\"806\">806</a>\n<a href=\"#807\" id=\"807\">807</a>\n<a href=\"#808\" id=\"808\">808</a>\n<a href=\"#809\" id=\"809\">809</a>\n<a href=\"#810\" id=\"810\">810</a>\n<a href=\"#811\" id=\"811\">811</a>\n<a href=\"#812\" id=\"812\">812</a>\n<a href=\"#813\" id=\"813\">813</a>\n<a href=\"#814\" id=\"814\">814</a>\n<a href=\"#815\" id=\"815\">815</a>\n<a href=\"#816\" id=\"816\">816</a>\n<a href=\"#817\" id=\"817\">817</a>\n<a href=\"#818\" id=\"818\">818</a>\n<a href=\"#819\" id=\"819\">819</a>\n<a href=\"#820\" id=\"820\">820</a>\n<a href=\"#821\" id=\"821\">821</a>\n<a href=\"#822\" id=\"822\">822</a>\n<a href=\"#823\" id=\"823\">823</a>\n<a href=\"#824\" id=\"824\">824</a>\n<a href=\"#825\" id=\"825\">825</a>\n<a href=\"#826\" id=\"826\">826</a>\n<a href=\"#827\" id=\"827\">827</a>\n<a href=\"#828\" id=\"828\">828</a>\n<a href=\"#829\" id=\"829\">829</a>\n<a href=\"#830\" id=\"830\">830</a>\n<a href=\"#831\" id=\"831\">831</a>\n<a href=\"#832\" id=\"832\">832</a>\n<a href=\"#833\" id=\"833\">833</a>\n<a href=\"#834\" id=\"834\">834</a>\n<a href=\"#835\" id=\"835\">835</a>\n<a href=\"#836\" id=\"836\">836</a>\n<a href=\"#837\" id=\"837\">837</a>\n<a href=\"#838\" id=\"838\">838</a>\n<a href=\"#839\" id=\"839\">839</a>\n<a href=\"#840\" id=\"840\">840</a>\n<a href=\"#841\" id=\"841\">841</a>\n<a href=\"#842\" id=\"842\">842</a>\n<a href=\"#843\" id=\"843\">843</a>\n<a href=\"#844\" id=\"844\">844</a>\n<a href=\"#845\" id=\"845\">845</a>\n<a href=\"#846\" id=\"846\">846</a>\n<a href=\"#847\" id=\"847\">847</a>\n<a href=\"#848\" id=\"848\">848</a>\n<a href=\"#849\" id=\"849\">849</a>\n<a href=\"#850\" id=\"850\">850</a>\n<a href=\"#851\" id=\"851\">851</a>\n<a href=\"#852\" id=\"852\">852</a>\n<a href=\"#853\" id=\"853\">853</a>\n<a href=\"#854\" id=\"854\">854</a>\n<a href=\"#855\" id=\"855\">855</a>\n<a href=\"#856\" id=\"856\">856</a>\n<a href=\"#857\" id=\"857\">857</a>\n<a href=\"#858\" id=\"858\">858</a>\n<a href=\"#859\" id=\"859\">859</a>\n<a href=\"#860\" id=\"860\">860</a>\n<a href=\"#861\" id=\"861\">861</a>\n<a href=\"#862\" id=\"862\">862</a>\n<a href=\"#863\" id=\"863\">863</a>\n<a href=\"#864\" id=\"864\">864</a>\n<a href=\"#865\" id=\"865\">865</a>\n<a href=\"#866\" id=\"866\">866</a>\n<a href=\"#867\" id=\"867\">867</a>\n<a href=\"#868\" id=\"868\">868</a>\n<a href=\"#869\" id=\"869\">869</a>\n<a href=\"#870\" id=\"870\">870</a>\n<a href=\"#871\" id=\"871\">871</a>\n<a href=\"#872\" id=\"872\">872</a>\n<a href=\"#873\" id=\"873\">873</a>\n<a href=\"#874\" id=\"874\">874</a>\n<a href=\"#875\" id=\"875\">875</a>\n<a href=\"#876\" id=\"876\">876</a>\n<a href=\"#877\" id=\"877\">877</a>\n<a href=\"#878\" id=\"878\">878</a>\n<a href=\"#879\" id=\"879\">879</a>\n<a href=\"#880\" id=\"880\">880</a>\n<a href=\"#881\" id=\"881\">881</a>\n<a href=\"#882\" id=\"882\">882</a>\n<a href=\"#883\" id=\"883\">883</a>\n<a href=\"#884\" id=\"884\">884</a>\n<a href=\"#885\" id=\"885\">885</a>\n<a href=\"#886\" id=\"886\">886</a>\n<a href=\"#887\" id=\"887\">887</a>\n<a href=\"#888\" id=\"888\">888</a>\n<a href=\"#889\" id=\"889\">889</a>\n<a href=\"#890\" id=\"890\">890</a>\n<a href=\"#891\" id=\"891\">891</a>\n<a href=\"#892\" id=\"892\">892</a>\n<a href=\"#893\" id=\"893\">893</a>\n<a href=\"#894\" id=\"894\">894</a>\n<a href=\"#895\" id=\"895\">895</a>\n<a href=\"#896\" id=\"896\">896</a>\n<a href=\"#897\" id=\"897\">897</a>\n<a href=\"#898\" id=\"898\">898</a>\n<a href=\"#899\" id=\"899\">899</a>\n<a href=\"#900\" id=\"900\">900</a>\n<a href=\"#901\" id=\"901\">901</a>\n<a href=\"#902\" id=\"902\">902</a>\n<a href=\"#903\" id=\"903\">903</a>\n<a href=\"#904\" id=\"904\">904</a>\n<a href=\"#905\" id=\"905\">905</a>\n<a href=\"#906\" id=\"906\">906</a>\n<a href=\"#907\" id=\"907\">907</a>\n<a href=\"#908\" id=\"908\">908</a>\n<a href=\"#909\" id=\"909\">909</a>\n<a href=\"#910\" id=\"910\">910</a>\n<a href=\"#911\" id=\"911\">911</a>\n<a href=\"#912\" id=\"912\">912</a>\n<a href=\"#913\" id=\"913\">913</a>\n<a href=\"#914\" id=\"914\">914</a>\n<a href=\"#915\" id=\"915\">915</a>\n<a href=\"#916\" id=\"916\">916</a>\n<a href=\"#917\" id=\"917\">917</a>\n<a href=\"#918\" id=\"918\">918</a>\n<a href=\"#919\" id=\"919\">919</a>\n<a href=\"#920\" id=\"920\">920</a>\n<a href=\"#921\" id=\"921\">921</a>\n<a href=\"#922\" id=\"922\">922</a>\n<a href=\"#923\" id=\"923\">923</a>\n<a href=\"#924\" id=\"924\">924</a>\n<a href=\"#925\" id=\"925\">925</a>\n<a href=\"#926\" id=\"926\">926</a>\n<a href=\"#927\" id=\"927\">927</a>\n<a href=\"#928\" id=\"928\">928</a>\n<a href=\"#929\" id=\"929\">929</a>\n<a href=\"#930\" id=\"930\">930</a>\n<a href=\"#931\" id=\"931\">931</a>\n<a href=\"#932\" id=\"932\">932</a>\n<a href=\"#933\" id=\"933\">933</a>\n<a href=\"#934\" id=\"934\">934</a>\n<a href=\"#935\" id=\"935\">935</a>\n<a href=\"#936\" id=\"936\">936</a>\n<a href=\"#937\" id=\"937\">937</a>\n<a href=\"#938\" id=\"938\">938</a>\n<a href=\"#939\" id=\"939\">939</a>\n<a href=\"#940\" id=\"940\">940</a>\n<a href=\"#941\" id=\"941\">941</a>\n<a href=\"#942\" id=\"942\">942</a>\n<a href=\"#943\" id=\"943\">943</a>\n<a href=\"#944\" id=\"944\">944</a>\n<a href=\"#945\" id=\"945\">945</a>\n<a href=\"#946\" id=\"946\">946</a>\n<a href=\"#947\" id=\"947\">947</a>\n<a href=\"#948\" id=\"948\">948</a>\n<a href=\"#949\" id=\"949\">949</a>\n<a href=\"#950\" id=\"950\">950</a>\n<a href=\"#951\" id=\"951\">951</a>\n<a href=\"#952\" id=\"952\">952</a>\n<a href=\"#953\" id=\"953\">953</a>\n<a href=\"#954\" id=\"954\">954</a>\n<a href=\"#955\" id=\"955\">955</a>\n<a href=\"#956\" id=\"956\">956</a>\n<a href=\"#957\" id=\"957\">957</a>\n<a href=\"#958\" id=\"958\">958</a>\n<a href=\"#959\" id=\"959\">959</a>\n<a href=\"#960\" id=\"960\">960</a>\n<a href=\"#961\" id=\"961\">961</a>\n<a href=\"#962\" id=\"962\">962</a>\n<a href=\"#963\" id=\"963\">963</a>\n<a href=\"#964\" id=\"964\">964</a>\n<a href=\"#965\" id=\"965\">965</a>\n<a href=\"#966\" id=\"966\">966</a>\n<a href=\"#967\" id=\"967\">967</a>\n<a href=\"#968\" id=\"968\">968</a>\n<a href=\"#969\" id=\"969\">969</a>\n<a href=\"#970\" id=\"970\">970</a>\n<a href=\"#971\" id=\"971\">971</a>\n<a href=\"#972\" id=\"972\">972</a>\n<a href=\"#973\" id=\"973\">973</a>\n<a href=\"#974\" id=\"974\">974</a>\n<a href=\"#975\" id=\"975\">975</a>\n<a href=\"#976\" id=\"976\">976</a>\n<a href=\"#977\" id=\"977\">977</a>\n<a href=\"#978\" id=\"978\">978</a>\n<a href=\"#979\" id=\"979\">979</a>\n<a href=\"#980\" id=\"980\">980</a>\n<a href=\"#981\" id=\"981\">981</a>\n<a href=\"#982\" id=\"982\">982</a>\n<a href=\"#983\" id=\"983\">983</a>\n<a href=\"#984\" id=\"984\">984</a>\n<a href=\"#985\" id=\"985\">985</a>\n<a href=\"#986\" id=\"986\">986</a>\n<a href=\"#987\" id=\"987\">987</a>\n<a href=\"#988\" id=\"988\">988</a>\n<a href=\"#989\" id=\"989\">989</a>\n<a href=\"#990\" id=\"990\">990</a>\n<a href=\"#991\" id=\"991\">991</a>\n<a href=\"#992\" id=\"992\">992</a>\n<a href=\"#993\" id=\"993\">993</a>\n<a href=\"#994\" id=\"994\">994</a>\n<a href=\"#995\" id=\"995\">995</a>\n<a href=\"#996\" id=\"996\">996</a>\n<a href=\"#997\" id=\"997\">997</a>\n<a href=\"#998\" id=\"998\">998</a>\n<a href=\"#999\" id=\"999\">999</a>\n<a href=\"#1000\" id=\"1000\">1000</a>\n<a href=\"#1001\" id=\"1001\">1001</a>\n<a href=\"#1002\" id=\"1002\">1002</a>\n<a href=\"#1003\" id=\"1003\">1003</a>\n<a href=\"#1004\" id=\"1004\">1004</a>\n<a href=\"#1005\" id=\"1005\">1005</a>\n<a href=\"#1006\" id=\"1006\">1006</a>\n<a href=\"#1007\" id=\"1007\">1007</a>\n<a href=\"#1008\" id=\"1008\">1008</a>\n<a href=\"#1009\" id=\"1009\">1009</a>\n<a href=\"#1010\" id=\"1010\">1010</a>\n<a href=\"#1011\" id=\"1011\">1011</a>\n<a href=\"#1012\" id=\"1012\">1012</a>\n<a href=\"#1013\" id=\"1013\">1013</a>\n<a href=\"#1014\" id=\"1014\">1014</a>\n<a href=\"#1015\" id=\"1015\">1015</a>\n<a href=\"#1016\" id=\"1016\">1016</a>\n<a href=\"#1017\" id=\"1017\">1017</a>\n<a href=\"#1018\" id=\"1018\">1018</a>\n<a href=\"#1019\" id=\"1019\">1019</a>\n<a href=\"#1020\" id=\"1020\">1020</a>\n<a href=\"#1021\" id=\"1021\">1021</a>\n<a href=\"#1022\" id=\"1022\">1022</a>\n<a href=\"#1023\" id=\"1023\">1023</a>\n<a href=\"#1024\" id=\"1024\">1024</a>\n<a href=\"#1025\" id=\"1025\">1025</a>\n<a href=\"#1026\" id=\"1026\">1026</a>\n<a href=\"#1027\" id=\"1027\">1027</a>\n<a href=\"#1028\" id=\"1028\">1028</a>\n<a href=\"#1029\" id=\"1029\">1029</a>\n<a href=\"#1030\" id=\"1030\">1030</a>\n<a href=\"#1031\" id=\"1031\">1031</a>\n<a href=\"#1032\" id=\"1032\">1032</a>\n<a href=\"#1033\" id=\"1033\">1033</a>\n<a href=\"#1034\" id=\"1034\">1034</a>\n<a href=\"#1035\" id=\"1035\">1035</a>\n<a href=\"#1036\" id=\"1036\">1036</a>\n<a href=\"#1037\" id=\"1037\">1037</a>\n<a href=\"#1038\" id=\"1038\">1038</a>\n<a href=\"#1039\" id=\"1039\">1039</a>\n<a href=\"#1040\" id=\"1040\">1040</a>\n<a href=\"#1041\" id=\"1041\">1041</a>\n<a href=\"#1042\" id=\"1042\">1042</a>\n<a href=\"#1043\" id=\"1043\">1043</a>\n<a href=\"#1044\" id=\"1044\">1044</a>\n<a href=\"#1045\" id=\"1045\">1045</a>\n<a href=\"#1046\" id=\"1046\">1046</a>\n<a href=\"#1047\" id=\"1047\">1047</a>\n<a href=\"#1048\" id=\"1048\">1048</a>\n<a href=\"#1049\" id=\"1049\">1049</a>\n<a href=\"#1050\" id=\"1050\">1050</a>\n<a href=\"#1051\" id=\"1051\">1051</a>\n<a href=\"#1052\" id=\"1052\">1052</a>\n<a href=\"#1053\" id=\"1053\">1053</a>\n<a href=\"#1054\" id=\"1054\">1054</a>\n<a href=\"#1055\" id=\"1055\">1055</a>\n<a href=\"#1056\" id=\"1056\">1056</a>\n<a href=\"#1057\" id=\"1057\">1057</a>\n<a href=\"#1058\" id=\"1058\">1058</a>\n<a href=\"#1059\" id=\"1059\">1059</a>\n<a href=\"#1060\" id=\"1060\">1060</a>\n<a href=\"#1061\" id=\"1061\">1061</a>\n<a href=\"#1062\" id=\"1062\">1062</a>\n<a href=\"#1063\" id=\"1063\">1063</a>\n<a href=\"#1064\" id=\"1064\">1064</a>\n<a href=\"#1065\" id=\"1065\">1065</a>\n<a href=\"#1066\" id=\"1066\">1066</a>\n<a href=\"#1067\" id=\"1067\">1067</a>\n<a href=\"#1068\" id=\"1068\">1068</a>\n<a href=\"#1069\" id=\"1069\">1069</a>\n<a href=\"#1070\" id=\"1070\">1070</a>\n<a href=\"#1071\" id=\"1071\">1071</a>\n<a href=\"#1072\" id=\"1072\">1072</a>\n<a href=\"#1073\" id=\"1073\">1073</a>\n<a href=\"#1074\" id=\"1074\">1074</a>\n<a href=\"#1075\" id=\"1075\">1075</a>\n<a href=\"#1076\" id=\"1076\">1076</a>\n<a href=\"#1077\" id=\"1077\">1077</a>\n<a href=\"#1078\" id=\"1078\">1078</a>\n<a href=\"#1079\" id=\"1079\">1079</a>\n<a href=\"#1080\" id=\"1080\">1080</a>\n<a href=\"#1081\" id=\"1081\">1081</a>\n<a href=\"#1082\" id=\"1082\">1082</a>\n<a href=\"#1083\" id=\"1083\">1083</a>\n<a href=\"#1084\" id=\"1084\">1084</a>\n<a href=\"#1085\" id=\"1085\">1085</a>\n<a href=\"#1086\" id=\"1086\">1086</a>\n<a href=\"#1087\" id=\"1087\">1087</a>\n<a href=\"#1088\" id=\"1088\">1088</a>\n<a href=\"#1089\" id=\"1089\">1089</a>\n<a href=\"#1090\" id=\"1090\">1090</a>\n<a href=\"#1091\" id=\"1091\">1091</a>\n<a href=\"#1092\" id=\"1092\">1092</a>\n<a href=\"#1093\" id=\"1093\">1093</a>\n<a href=\"#1094\" id=\"1094\">1094</a>\n<a href=\"#1095\" id=\"1095\">1095</a>\n<a href=\"#1096\" id=\"1096\">1096</a>\n<a href=\"#1097\" id=\"1097\">1097</a>\n<a href=\"#1098\" id=\"1098\">1098</a>\n<a href=\"#1099\" id=\"1099\">1099</a>\n<a href=\"#1100\" id=\"1100\">1100</a>\n<a href=\"#1101\" id=\"1101\">1101</a>\n<a href=\"#1102\" id=\"1102\">1102</a>\n<a href=\"#1103\" id=\"1103\">1103</a>\n<a href=\"#1104\" id=\"1104\">1104</a>\n<a href=\"#1105\" id=\"1105\">1105</a>\n<a href=\"#1106\" id=\"1106\">1106</a>\n<a href=\"#1107\" id=\"1107\">1107</a>\n<a href=\"#1108\" id=\"1108\">1108</a>\n<a href=\"#1109\" id=\"1109\">1109</a>\n<a href=\"#1110\" id=\"1110\">1110</a>\n<a href=\"#1111\" id=\"1111\">1111</a>\n<a href=\"#1112\" id=\"1112\">1112</a>\n<a href=\"#1113\" id=\"1113\">1113</a>\n<a href=\"#1114\" id=\"1114\">1114</a>\n<a href=\"#1115\" id=\"1115\">1115</a>\n<a href=\"#1116\" id=\"1116\">1116</a>\n<a href=\"#1117\" id=\"1117\">1117</a>\n<a href=\"#1118\" id=\"1118\">1118</a>\n<a href=\"#1119\" id=\"1119\">1119</a>\n<a href=\"#1120\" id=\"1120\">1120</a>\n<a href=\"#1121\" id=\"1121\">1121</a>\n<a href=\"#1122\" id=\"1122\">1122</a>\n<a href=\"#1123\" id=\"1123\">1123</a>\n<a href=\"#1124\" id=\"1124\">1124</a>\n<a href=\"#1125\" id=\"1125\">1125</a>\n<a href=\"#1126\" id=\"1126\">1126</a>\n<a href=\"#1127\" id=\"1127\">1127</a>\n<a href=\"#1128\" id=\"1128\">1128</a>\n<a href=\"#1129\" id=\"1129\">1129</a>\n<a href=\"#1130\" id=\"1130\">1130</a>\n<a href=\"#1131\" id=\"1131\">1131</a>\n<a href=\"#1132\" id=\"1132\">1132</a>\n<a href=\"#1133\" id=\"1133\">1133</a>\n<a href=\"#1134\" id=\"1134\">1134</a>\n<a href=\"#1135\" id=\"1135\">1135</a>\n<a href=\"#1136\" id=\"1136\">1136</a>\n<a href=\"#1137\" id=\"1137\">1137</a>\n<a href=\"#1138\" id=\"1138\">1138</a>\n<a href=\"#1139\" id=\"1139\">1139</a>\n<a href=\"#1140\" id=\"1140\">1140</a>\n<a href=\"#1141\" id=\"1141\">1141</a>\n<a href=\"#1142\" id=\"1142\">1142</a>\n<a href=\"#1143\" id=\"1143\">1143</a>\n<a href=\"#1144\" id=\"1144\">1144</a>\n<a href=\"#1145\" id=\"1145\">1145</a>\n<a href=\"#1146\" id=\"1146\">1146</a>\n<a href=\"#1147\" id=\"1147\">1147</a>\n<a href=\"#1148\" id=\"1148\">1148</a>\n<a href=\"#1149\" id=\"1149\">1149</a>\n<a href=\"#1150\" id=\"1150\">1150</a>\n<a href=\"#1151\" id=\"1151\">1151</a>\n<a href=\"#1152\" id=\"1152\">1152</a>\n<a href=\"#1153\" id=\"1153\">1153</a>\n<a href=\"#1154\" id=\"1154\">1154</a>\n<a href=\"#1155\" id=\"1155\">1155</a>\n<a href=\"#1156\" id=\"1156\">1156</a>\n<a href=\"#1157\" id=\"1157\">1157</a>\n<a href=\"#1158\" id=\"1158\">1158</a>\n<a href=\"#1159\" id=\"1159\">1159</a>\n<a href=\"#1160\" id=\"1160\">1160</a>\n<a href=\"#1161\" id=\"1161\">1161</a>\n<a href=\"#1162\" id=\"1162\">1162</a>\n<a href=\"#1163\" id=\"1163\">1163</a>\n<a href=\"#1164\" id=\"1164\">1164</a>\n<a href=\"#1165\" id=\"1165\">1165</a>\n<a href=\"#1166\" id=\"1166\">1166</a>\n<a href=\"#1167\" id=\"1167\">1167</a>\n<a href=\"#1168\" id=\"1168\">1168</a>\n<a href=\"#1169\" id=\"1169\">1169</a>\n<a href=\"#1170\" id=\"1170\">1170</a>\n<a href=\"#1171\" id=\"1171\">1171</a>\n<a href=\"#1172\" id=\"1172\">1172</a>\n<a href=\"#1173\" id=\"1173\">1173</a>\n<a href=\"#1174\" id=\"1174\">1174</a>\n<a href=\"#1175\" id=\"1175\">1175</a>\n<a href=\"#1176\" id=\"1176\">1176</a>\n<a href=\"#1177\" id=\"1177\">1177</a>\n<a href=\"#1178\" id=\"1178\">1178</a>\n<a href=\"#1179\" id=\"1179\">1179</a>\n<a href=\"#1180\" id=\"1180\">1180</a>\n<a href=\"#1181\" id=\"1181\">1181</a>\n<a href=\"#1182\" id=\"1182\">1182</a>\n<a href=\"#1183\" id=\"1183\">1183</a>\n<a href=\"#1184\" id=\"1184\">1184</a>\n<a href=\"#1185\" id=\"1185\">1185</a>\n<a href=\"#1186\" id=\"1186\">1186</a>\n<a href=\"#1187\" id=\"1187\">1187</a>\n<a href=\"#1188\" id=\"1188\">1188</a>\n<a href=\"#1189\" id=\"1189\">1189</a>\n<a href=\"#1190\" id=\"1190\">1190</a>\n<a href=\"#1191\" id=\"1191\">1191</a>\n<a href=\"#1192\" id=\"1192\">1192</a>\n<a href=\"#1193\" id=\"1193\">1193</a>\n<a href=\"#1194\" id=\"1194\">1194</a>\n<a href=\"#1195\" id=\"1195\">1195</a>\n<a href=\"#1196\" id=\"1196\">1196</a>\n<a href=\"#1197\" id=\"1197\">1197</a>\n<a href=\"#1198\" id=\"1198\">1198</a>\n<a href=\"#1199\" id=\"1199\">1199</a>\n<a href=\"#1200\" id=\"1200\">1200</a>\n<a href=\"#1201\" id=\"1201\">1201</a>\n<a href=\"#1202\" id=\"1202\">1202</a>\n<a href=\"#1203\" id=\"1203\">1203</a>\n<a href=\"#1204\" id=\"1204\">1204</a>\n<a href=\"#1205\" id=\"1205\">1205</a>\n<a href=\"#1206\" id=\"1206\">1206</a>\n<a href=\"#1207\" id=\"1207\">1207</a>\n<a href=\"#1208\" id=\"1208\">1208</a>\n<a href=\"#1209\" id=\"1209\">1209</a>\n<a href=\"#1210\" id=\"1210\">1210</a>\n<a href=\"#1211\" id=\"1211\">1211</a>\n<a href=\"#1212\" id=\"1212\">1212</a>\n<a href=\"#1213\" id=\"1213\">1213</a>\n<a href=\"#1214\" id=\"1214\">1214</a>\n<a href=\"#1215\" id=\"1215\">1215</a>\n<a href=\"#1216\" id=\"1216\">1216</a>\n<a href=\"#1217\" id=\"1217\">1217</a>\n<a href=\"#1218\" id=\"1218\">1218</a>\n<a href=\"#1219\" id=\"1219\">1219</a>\n<a href=\"#1220\" id=\"1220\">1220</a>\n<a href=\"#1221\" id=\"1221\">1221</a>\n<a href=\"#1222\" id=\"1222\">1222</a>\n<a href=\"#1223\" id=\"1223\">1223</a>\n<a href=\"#1224\" id=\"1224\">1224</a>\n<a href=\"#1225\" id=\"1225\">1225</a>\n<a href=\"#1226\" id=\"1226\">1226</a>\n<a href=\"#1227\" id=\"1227\">1227</a>\n<a href=\"#1228\" id=\"1228\">1228</a>\n<a href=\"#1229\" id=\"1229\">1229</a>\n<a href=\"#1230\" id=\"1230\">1230</a>\n<a href=\"#1231\" id=\"1231\">1231</a>\n<a href=\"#1232\" id=\"1232\">1232</a>\n<a href=\"#1233\" id=\"1233\">1233</a>\n<a href=\"#1234\" id=\"1234\">1234</a>\n<a href=\"#1235\" id=\"1235\">1235</a>\n<a href=\"#1236\" id=\"1236\">1236</a>\n<a href=\"#1237\" id=\"1237\">1237</a>\n<a href=\"#1238\" id=\"1238\">1238</a>\n<a href=\"#1239\" id=\"1239\">1239</a>\n<a href=\"#1240\" id=\"1240\">1240</a>\n<a href=\"#1241\" id=\"1241\">1241</a>\n<a href=\"#1242\" id=\"1242\">1242</a>\n<a href=\"#1243\" id=\"1243\">1243</a>\n<a href=\"#1244\" id=\"1244\">1244</a>\n<a href=\"#1245\" id=\"1245\">1245</a>\n<a href=\"#1246\" id=\"1246\">1246</a>\n<a href=\"#1247\" id=\"1247\">1247</a>\n<a href=\"#1248\" id=\"1248\">1248</a>\n<a href=\"#1249\" id=\"1249\">1249</a>\n<a href=\"#1250\" id=\"1250\">1250</a>\n<a href=\"#1251\" id=\"1251\">1251</a>\n<a href=\"#1252\" id=\"1252\">1252</a>\n<a href=\"#1253\" id=\"1253\">1253</a>\n<a href=\"#1254\" id=\"1254\">1254</a>\n<a href=\"#1255\" id=\"1255\">1255</a>\n<a href=\"#1256\" id=\"1256\">1256</a>\n<a href=\"#1257\" id=\"1257\">1257</a>\n<a href=\"#1258\" id=\"1258\">1258</a>\n<a href=\"#1259\" id=\"1259\">1259</a>\n<a href=\"#1260\" id=\"1260\">1260</a>\n<a href=\"#1261\" id=\"1261\">1261</a>\n<a href=\"#1262\" id=\"1262\">1262</a>\n<a href=\"#1263\" id=\"1263\">1263</a>\n<a href=\"#1264\" id=\"1264\">1264</a>\n<a href=\"#1265\" id=\"1265\">1265</a>\n<a href=\"#1266\" id=\"1266\">1266</a>\n<a href=\"#1267\" id=\"1267\">1267</a>\n<a href=\"#1268\" id=\"1268\">1268</a>\n<a href=\"#1269\" id=\"1269\">1269</a>\n<a href=\"#1270\" id=\"1270\">1270</a>\n<a href=\"#1271\" id=\"1271\">1271</a>\n<a href=\"#1272\" id=\"1272\">1272</a>\n<a href=\"#1273\" id=\"1273\">1273</a>\n<a href=\"#1274\" id=\"1274\">1274</a>\n<a href=\"#1275\" id=\"1275\">1275</a>\n<a href=\"#1276\" id=\"1276\">1276</a>\n<a href=\"#1277\" id=\"1277\">1277</a>\n<a href=\"#1278\" id=\"1278\">1278</a>\n<a href=\"#1279\" id=\"1279\">1279</a>\n<a href=\"#1280\" id=\"1280\">1280</a>\n<a href=\"#1281\" id=\"1281\">1281</a>\n<a href=\"#1282\" id=\"1282\">1282</a>\n<a href=\"#1283\" id=\"1283\">1283</a>\n<a href=\"#1284\" id=\"1284\">1284</a>\n<a href=\"#1285\" id=\"1285\">1285</a>\n<a href=\"#1286\" id=\"1286\">1286</a>\n<a href=\"#1287\" id=\"1287\">1287</a>\n<a href=\"#1288\" id=\"1288\">1288</a>\n<a href=\"#1289\" id=\"1289\">1289</a>\n<a href=\"#1290\" id=\"1290\">1290</a>\n<a href=\"#1291\" id=\"1291\">1291</a>\n<a href=\"#1292\" id=\"1292\">1292</a>\n<a href=\"#1293\" id=\"1293\">1293</a>\n<a href=\"#1294\" id=\"1294\">1294</a>\n<a href=\"#1295\" id=\"1295\">1295</a>\n<a href=\"#1296\" id=\"1296\">1296</a>\n<a href=\"#1297\" id=\"1297\">1297</a>\n<a href=\"#1298\" id=\"1298\">1298</a>\n<a href=\"#1299\" id=\"1299\">1299</a>\n<a href=\"#1300\" id=\"1300\">1300</a>\n<a href=\"#1301\" id=\"1301\">1301</a>\n<a href=\"#1302\" id=\"1302\">1302</a>\n<a href=\"#1303\" id=\"1303\">1303</a>\n<a href=\"#1304\" id=\"1304\">1304</a>\n<a href=\"#1305\" id=\"1305\">1305</a>\n<a href=\"#1306\" id=\"1306\">1306</a>\n<a href=\"#1307\" id=\"1307\">1307</a>\n<a href=\"#1308\" id=\"1308\">1308</a>\n<a href=\"#1309\" id=\"1309\">1309</a>\n<a href=\"#1310\" id=\"1310\">1310</a>\n<a href=\"#1311\" id=\"1311\">1311</a>\n<a href=\"#1312\" id=\"1312\">1312</a>\n<a href=\"#1313\" id=\"1313\">1313</a>\n<a href=\"#1314\" id=\"1314\">1314</a>\n<a href=\"#1315\" id=\"1315\">1315</a>\n<a href=\"#1316\" id=\"1316\">1316</a>\n<a href=\"#1317\" id=\"1317\">1317</a>\n<a href=\"#1318\" id=\"1318\">1318</a>\n<a href=\"#1319\" id=\"1319\">1319</a>\n<a href=\"#1320\" id=\"1320\">1320</a>\n<a href=\"#1321\" id=\"1321\">1321</a>\n<a href=\"#1322\" id=\"1322\">1322</a>\n<a href=\"#1323\" id=\"1323\">1323</a>\n<a href=\"#1324\" id=\"1324\">1324</a>\n<a href=\"#1325\" id=\"1325\">1325</a>\n<a href=\"#1326\" id=\"1326\">1326</a>\n<a href=\"#1327\" id=\"1327\">1327</a>\n<a href=\"#1328\" id=\"1328\">1328</a>\n<a href=\"#1329\" id=\"1329\">1329</a>\n<a href=\"#1330\" id=\"1330\">1330</a>\n<a href=\"#1331\" id=\"1331\">1331</a>\n<a href=\"#1332\" id=\"1332\">1332</a>\n<a href=\"#1333\" id=\"1333\">1333</a>\n<a href=\"#1334\" id=\"1334\">1334</a>\n<a href=\"#1335\" id=\"1335\">1335</a>\n<a href=\"#1336\" id=\"1336\">1336</a>\n<a href=\"#1337\" id=\"1337\">1337</a>\n<a href=\"#1338\" id=\"1338\">1338</a>\n<a href=\"#1339\" id=\"1339\">1339</a>\n<a href=\"#1340\" id=\"1340\">1340</a>\n<a href=\"#1341\" id=\"1341\">1341</a>\n<a href=\"#1342\" id=\"1342\">1342</a>\n<a href=\"#1343\" id=\"1343\">1343</a>\n<a href=\"#1344\" id=\"1344\">1344</a>\n<a href=\"#1345\" id=\"1345\">1345</a>\n<a href=\"#1346\" id=\"1346\">1346</a>\n<a href=\"#1347\" id=\"1347\">1347</a>\n<a href=\"#1348\" id=\"1348\">1348</a>\n<a href=\"#1349\" id=\"1349\">1349</a>\n<a href=\"#1350\" id=\"1350\">1350</a>\n<a href=\"#1351\" id=\"1351\">1351</a>\n<a href=\"#1352\" id=\"1352\">1352</a>\n<a href=\"#1353\" id=\"1353\">1353</a>\n<a href=\"#1354\" id=\"1354\">1354</a>\n<a href=\"#1355\" id=\"1355\">1355</a>\n<a href=\"#1356\" id=\"1356\">1356</a>\n<a href=\"#1357\" id=\"1357\">1357</a>\n<a href=\"#1358\" id=\"1358\">1358</a>\n<a href=\"#1359\" id=\"1359\">1359</a>\n<a href=\"#1360\" id=\"1360\">1360</a>\n<a href=\"#1361\" id=\"1361\">1361</a>\n<a href=\"#1362\" id=\"1362\">1362</a>\n<a href=\"#1363\" id=\"1363\">1363</a>\n<a href=\"#1364\" id=\"1364\">1364</a>\n<a href=\"#1365\" id=\"1365\">1365</a>\n<a href=\"#1366\" id=\"1366\">1366</a>\n<a href=\"#1367\" id=\"1367\">1367</a>\n<a href=\"#1368\" id=\"1368\">1368</a>\n<a href=\"#1369\" id=\"1369\">1369</a>\n<a href=\"#1370\" id=\"1370\">1370</a>\n<a href=\"#1371\" id=\"1371\">1371</a>\n<a href=\"#1372\" id=\"1372\">1372</a>\n<a href=\"#1373\" id=\"1373\">1373</a>\n<a href=\"#1374\" id=\"1374\">1374</a>\n<a href=\"#1375\" id=\"1375\">1375</a>\n<a href=\"#1376\" id=\"1376\">1376</a>\n<a href=\"#1377\" id=\"1377\">1377</a>\n<a href=\"#1378\" id=\"1378\">1378</a>\n<a href=\"#1379\" id=\"1379\">1379</a>\n<a href=\"#1380\" id=\"1380\">1380</a>\n<a href=\"#1381\" id=\"1381\">1381</a>\n<a href=\"#1382\" id=\"1382\">1382</a>\n<a href=\"#1383\" id=\"1383\">1383</a>\n<a href=\"#1384\" id=\"1384\">1384</a>\n<a href=\"#1385\" id=\"1385\">1385</a>\n<a href=\"#1386\" id=\"1386\">1386</a>\n<a href=\"#1387\" id=\"1387\">1387</a>\n<a href=\"#1388\" id=\"1388\">1388</a>\n<a href=\"#1389\" id=\"1389\">1389</a>\n<a href=\"#1390\" id=\"1390\">1390</a>\n<a href=\"#1391\" id=\"1391\">1391</a>\n<a href=\"#1392\" id=\"1392\">1392</a>\n<a href=\"#1393\" id=\"1393\">1393</a>\n<a href=\"#1394\" id=\"1394\">1394</a>\n<a href=\"#1395\" id=\"1395\">1395</a>\n<a href=\"#1396\" id=\"1396\">1396</a>\n<a href=\"#1397\" id=\"1397\">1397</a>\n<a href=\"#1398\" id=\"1398\">1398</a>\n<a href=\"#1399\" id=\"1399\">1399</a>\n<a href=\"#1400\" id=\"1400\">1400</a>\n<a href=\"#1401\" id=\"1401\">1401</a>\n<a href=\"#1402\" id=\"1402\">1402</a>\n<a href=\"#1403\" id=\"1403\">1403</a>\n<a href=\"#1404\" id=\"1404\">1404</a>\n<a href=\"#1405\" id=\"1405\">1405</a>\n<a href=\"#1406\" id=\"1406\">1406</a>\n<a href=\"#1407\" id=\"1407\">1407</a>\n<a href=\"#1408\" id=\"1408\">1408</a>\n<a href=\"#1409\" id=\"1409\">1409</a>\n<a href=\"#1410\" id=\"1410\">1410</a>\n<a href=\"#1411\" id=\"1411\">1411</a>\n<a href=\"#1412\" id=\"1412\">1412</a>\n<a href=\"#1413\" id=\"1413\">1413</a>\n<a href=\"#1414\" id=\"1414\">1414</a>\n<a href=\"#1415\" id=\"1415\">1415</a>\n<a href=\"#1416\" id=\"1416\">1416</a>\n<a href=\"#1417\" id=\"1417\">1417</a>\n<a href=\"#1418\" id=\"1418\">1418</a>\n<a href=\"#1419\" id=\"1419\">1419</a>\n<a href=\"#1420\" id=\"1420\">1420</a>\n<a href=\"#1421\" id=\"1421\">1421</a>\n<a href=\"#1422\" id=\"1422\">1422</a>\n<a href=\"#1423\" id=\"1423\">1423</a>\n<a href=\"#1424\" id=\"1424\">1424</a>\n<a href=\"#1425\" id=\"1425\">1425</a>\n<a href=\"#1426\" id=\"1426\">1426</a>\n<a href=\"#1427\" id=\"1427\">1427</a>\n<a href=\"#1428\" id=\"1428\">1428</a>\n<a href=\"#1429\" id=\"1429\">1429</a>\n<a href=\"#1430\" id=\"1430\">1430</a>\n<a href=\"#1431\" id=\"1431\">1431</a>\n<a href=\"#1432\" id=\"1432\">1432</a>\n<a href=\"#1433\" id=\"1433\">1433</a>\n<a href=\"#1434\" id=\"1434\">1434</a>\n<a href=\"#1435\" id=\"1435\">1435</a>\n<a href=\"#1436\" id=\"1436\">1436</a>\n<a href=\"#1437\" id=\"1437\">1437</a>\n<a href=\"#1438\" id=\"1438\">1438</a>\n<a href=\"#1439\" id=\"1439\">1439</a>\n<a href=\"#1440\" id=\"1440\">1440</a>\n<a href=\"#1441\" id=\"1441\">1441</a>\n<a href=\"#1442\" id=\"1442\">1442</a>\n<a href=\"#1443\" id=\"1443\">1443</a>\n<a href=\"#1444\" id=\"1444\">1444</a>\n<a href=\"#1445\" id=\"1445\">1445</a>\n<a href=\"#1446\" id=\"1446\">1446</a>\n<a href=\"#1447\" id=\"1447\">1447</a>\n<a href=\"#1448\" id=\"1448\">1448</a>\n<a href=\"#1449\" id=\"1449\">1449</a>\n<a href=\"#1450\" id=\"1450\">1450</a>\n<a href=\"#1451\" id=\"1451\">1451</a>\n<a href=\"#1452\" id=\"1452\">1452</a>\n<a href=\"#1453\" id=\"1453\">1453</a>\n<a href=\"#1454\" id=\"1454\">1454</a>\n<a href=\"#1455\" id=\"1455\">1455</a>\n<a href=\"#1456\" id=\"1456\">1456</a>\n<a href=\"#1457\" id=\"1457\">1457</a>\n<a href=\"#1458\" id=\"1458\">1458</a>\n<a href=\"#1459\" id=\"1459\">1459</a>\n<a href=\"#1460\" id=\"1460\">1460</a>\n<a href=\"#1461\" id=\"1461\">1461</a>\n<a href=\"#1462\" id=\"1462\">1462</a>\n<a href=\"#1463\" id=\"1463\">1463</a>\n<a href=\"#1464\" id=\"1464\">1464</a>\n<a href=\"#1465\" id=\"1465\">1465</a>\n<a href=\"#1466\" id=\"1466\">1466</a>\n<a href=\"#1467\" id=\"1467\">1467</a>\n<a href=\"#1468\" id=\"1468\">1468</a>\n<a href=\"#1469\" id=\"1469\">1469</a>\n<a href=\"#1470\" id=\"1470\">1470</a>\n<a href=\"#1471\" id=\"1471\">1471</a>\n<a href=\"#1472\" id=\"1472\">1472</a>\n<a href=\"#1473\" id=\"1473\">1473</a>\n<a href=\"#1474\" id=\"1474\">1474</a>\n<a href=\"#1475\" id=\"1475\">1475</a>\n<a href=\"#1476\" id=\"1476\">1476</a>\n<a href=\"#1477\" id=\"1477\">1477</a>\n<a href=\"#1478\" id=\"1478\">1478</a>\n<a href=\"#1479\" id=\"1479\">1479</a>\n<a href=\"#1480\" id=\"1480\">1480</a>\n<a href=\"#1481\" id=\"1481\">1481</a>\n<a href=\"#1482\" id=\"1482\">1482</a>\n<a href=\"#1483\" id=\"1483\">1483</a>\n<a href=\"#1484\" id=\"1484\">1484</a>\n<a href=\"#1485\" id=\"1485\">1485</a>\n<a href=\"#1486\" id=\"1486\">1486</a>\n<a href=\"#1487\" id=\"1487\">1487</a>\n<a href=\"#1488\" id=\"1488\">1488</a>\n<a href=\"#1489\" id=\"1489\">1489</a>\n<a href=\"#1490\" id=\"1490\">1490</a>\n<a href=\"#1491\" id=\"1491\">1491</a>\n<a href=\"#1492\" id=\"1492\">1492</a>\n<a href=\"#1493\" id=\"1493\">1493</a>\n<a href=\"#1494\" id=\"1494\">1494</a>\n<a href=\"#1495\" id=\"1495\">1495</a>\n<a href=\"#1496\" id=\"1496\">1496</a>\n<a href=\"#1497\" id=\"1497\">1497</a>\n<a href=\"#1498\" id=\"1498\">1498</a>\n<a href=\"#1499\" id=\"1499\">1499</a>\n<a href=\"#1500\" id=\"1500\">1500</a>\n<a href=\"#1501\" id=\"1501\">1501</a>\n<a href=\"#1502\" id=\"1502\">1502</a>\n<a href=\"#1503\" id=\"1503\">1503</a>\n<a href=\"#1504\" id=\"1504\">1504</a>\n<a href=\"#1505\" id=\"1505\">1505</a>\n<a href=\"#1506\" id=\"1506\">1506</a>\n<a href=\"#1507\" id=\"1507\">1507</a>\n<a href=\"#1508\" id=\"1508\">1508</a>\n<a href=\"#1509\" id=\"1509\">1509</a>\n<a href=\"#1510\" id=\"1510\">1510</a>\n<a href=\"#1511\" id=\"1511\">1511</a>\n<a href=\"#1512\" id=\"1512\">1512</a>\n<a href=\"#1513\" id=\"1513\">1513</a>\n<a href=\"#1514\" id=\"1514\">1514</a>\n<a href=\"#1515\" id=\"1515\">1515</a>\n<a href=\"#1516\" id=\"1516\">1516</a>\n<a href=\"#1517\" id=\"1517\">1517</a>\n<a href=\"#1518\" id=\"1518\">1518</a>\n<a href=\"#1519\" id=\"1519\">1519</a>\n<a href=\"#1520\" id=\"1520\">1520</a>\n<a href=\"#1521\" id=\"1521\">1521</a>\n<a href=\"#1522\" id=\"1522\">1522</a>\n<a href=\"#1523\" id=\"1523\">1523</a>\n<a href=\"#1524\" id=\"1524\">1524</a>\n<a href=\"#1525\" id=\"1525\">1525</a>\n<a href=\"#1526\" id=\"1526\">1526</a>\n<a href=\"#1527\" id=\"1527\">1527</a>\n<a href=\"#1528\" id=\"1528\">1528</a>\n<a href=\"#1529\" id=\"1529\">1529</a>\n<a href=\"#1530\" id=\"1530\">1530</a>\n<a href=\"#1531\" id=\"1531\">1531</a>\n<a href=\"#1532\" id=\"1532\">1532</a>\n<a href=\"#1533\" id=\"1533\">1533</a>\n<a href=\"#1534\" id=\"1534\">1534</a>\n<a href=\"#1535\" id=\"1535\">1535</a>\n<a href=\"#1536\" id=\"1536\">1536</a>\n<a href=\"#1537\" id=\"1537\">1537</a>\n<a href=\"#1538\" id=\"1538\">1538</a>\n<a href=\"#1539\" id=\"1539\">1539</a>\n<a href=\"#1540\" id=\"1540\">1540</a>\n<a href=\"#1541\" id=\"1541\">1541</a>\n<a href=\"#1542\" id=\"1542\">1542</a>\n<a href=\"#1543\" id=\"1543\">1543</a>\n<a href=\"#1544\" id=\"1544\">1544</a>\n<a href=\"#1545\" id=\"1545\">1545</a>\n<a href=\"#1546\" id=\"1546\">1546</a>\n<a href=\"#1547\" id=\"1547\" class=\"line-highlighted\">1547</a>\n<a href=\"#1548\" id=\"1548\">1548</a>\n<a href=\"#1549\" id=\"1549\">1549</a>\n<a href=\"#1550\" id=\"1550\">1550</a>\n<a href=\"#1551\" id=\"1551\">1551</a>\n<a href=\"#1552\" id=\"1552\">1552</a>\n<a href=\"#1553\" id=\"1553\">1553</a>\n<a href=\"#1554\" id=\"1554\">1554</a>\n<a href=\"#1555\" id=\"1555\">1555</a>\n<a href=\"#1556\" id=\"1556\">1556</a>\n<a href=\"#1557\" id=\"1557\">1557</a>\n<a href=\"#1558\" id=\"1558\">1558</a>\n<a href=\"#1559\" id=\"1559\">1559</a>\n<a href=\"#1560\" id=\"1560\">1560</a>\n<a href=\"#1561\" id=\"1561\">1561</a>\n<a href=\"#1562\" id=\"1562\">1562</a>\n<a href=\"#1563\" id=\"1563\">1563</a>\n<a href=\"#1564\" id=\"1564\">1564</a>\n<a href=\"#1565\" id=\"1565\">1565</a>\n<a href=\"#1566\" id=\"1566\">1566</a>\n<a href=\"#1567\" id=\"1567\">1567</a>\n<a href=\"#1568\" id=\"1568\">1568</a>\n<a href=\"#1569\" id=\"1569\">1569</a>\n<a href=\"#1570\" id=\"1570\">1570</a>\n<a href=\"#1571\" id=\"1571\">1571</a>\n<a href=\"#1572\" id=\"1572\">1572</a>\n<a href=\"#1573\" id=\"1573\">1573</a>\n<a href=\"#1574\" id=\"1574\">1574</a>\n<a href=\"#1575\" id=\"1575\">1575</a>\n<a href=\"#1576\" id=\"1576\">1576</a>\n<a href=\"#1577\" id=\"1577\">1577</a>\n<a href=\"#1578\" id=\"1578\">1578</a>\n<a href=\"#1579\" id=\"1579\">1579</a>\n<a href=\"#1580\" id=\"1580\">1580</a>\n<a href=\"#1581\" id=\"1581\">1581</a>\n<a href=\"#1582\" id=\"1582\">1582</a>\n<a href=\"#1583\" id=\"1583\">1583</a>\n<a href=\"#1584\" id=\"1584\">1584</a>\n<a href=\"#1585\" id=\"1585\">1585</a>\n<a href=\"#1586\" id=\"1586\">1586</a>\n<a href=\"#1587\" id=\"1587\">1587</a>\n<a href=\"#1588\" id=\"1588\">1588</a>\n<a href=\"#1589\" id=\"1589\">1589</a>\n<a href=\"#1590\" id=\"1590\">1590</a>\n<a href=\"#1591\" id=\"1591\">1591</a>\n<a href=\"#1592\" id=\"1592\">1592</a>\n</pre></div><pre class=\"rust\"><code><span class=\"doccomment\">//! Numeric traits and functions for the built-in numeric types.\n\n</span><span class=\"attr\">#![stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n\n</span><span class=\"kw\">use </span><span class=\"kw\">crate</span>::ascii;\n<span class=\"kw\">use </span><span class=\"kw\">crate</span>::hint;\n<span class=\"kw\">use </span><span class=\"kw\">crate</span>::intrinsics;\n<span class=\"kw\">use </span><span class=\"kw\">crate</span>::mem;\n<span class=\"kw\">use </span><span class=\"kw\">crate</span>::str::FromStr;\n<span class=\"kw\">use </span><span class=\"kw\">crate</span>::ub_checks::assert_unsafe_precondition;\n\n<span class=\"comment\">// Used because the `?` operator is not allowed in a const context.\n</span><span class=\"macro\">macro_rules!</span> try_opt {\n    (<span class=\"macro-nonterminal\">$e</span>:expr) =&gt; {\n        <span class=\"kw\">match </span><span class=\"macro-nonterminal\">$e </span>{\n            <span class=\"prelude-val\">Some</span>(x) =&gt; x,\n            <span class=\"prelude-val\">None </span>=&gt; <span class=\"kw\">return </span><span class=\"prelude-val\">None</span>,\n        }\n    };\n}\n\n<span class=\"attr\">#[allow_internal_unstable(const_likely)]\n</span><span class=\"macro\">macro_rules!</span> unlikely {\n    (<span class=\"macro-nonterminal\">$e</span>: expr) =&gt; {\n        intrinsics::unlikely(<span class=\"macro-nonterminal\">$e</span>)\n    };\n}\n\n<span class=\"comment\">// All these modules are technically private and only exposed for coretests:\n</span><span class=\"attr\">#[cfg(not(no_fp_fmt_parse))]\n</span><span class=\"kw\">pub mod </span>bignum;\n<span class=\"attr\">#[cfg(not(no_fp_fmt_parse))]\n</span><span class=\"kw\">pub mod </span>dec2flt;\n<span class=\"attr\">#[cfg(not(no_fp_fmt_parse))]\n</span><span class=\"kw\">pub mod </span>diy_float;\n<span class=\"attr\">#[cfg(not(no_fp_fmt_parse))]\n</span><span class=\"kw\">pub mod </span>flt2dec;\n<span class=\"kw\">pub mod </span>fmt;\n\n<span class=\"attr\">#[macro_use]\n</span><span class=\"kw\">mod </span>int_macros; <span class=\"comment\">// import int_impl!\n</span><span class=\"attr\">#[macro_use]\n</span><span class=\"kw\">mod </span>uint_macros; <span class=\"comment\">// import uint_impl!\n\n</span><span class=\"kw\">mod </span>error;\n<span class=\"kw\">mod </span>int_log10;\n<span class=\"kw\">mod </span>nonzero;\n<span class=\"kw\">mod </span>overflow_panic;\n<span class=\"kw\">mod </span>saturating;\n<span class=\"kw\">mod </span>wrapping;\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"saturating_int_impl\"</span>, since = <span class=\"string\">\"1.74.0\"</span>)]\n</span><span class=\"kw\">pub use </span>saturating::Saturating;\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">pub use </span>wrapping::Wrapping;\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n#[cfg(not(no_fp_fmt_parse))]\n</span><span class=\"kw\">pub use </span>dec2flt::ParseFloatError;\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">pub use </span>error::ParseIntError;\n\n<span class=\"attr\">#[unstable(\n    feature = <span class=\"string\">\"nonzero_internals\"</span>,\n    reason = <span class=\"string\">\"implementation detail which may disappear or be replaced at any time\"</span>,\n    issue = <span class=\"string\">\"none\"\n</span>)]\n</span><span class=\"kw\">pub use </span>nonzero::ZeroablePrimitive;\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"generic_nonzero\"</span>, since = <span class=\"string\">\"1.79.0\"</span>)]\n</span><span class=\"kw\">pub use </span>nonzero::NonZero;\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"signed_nonzero\"</span>, since = <span class=\"string\">\"1.34.0\"</span>)]\n</span><span class=\"kw\">pub use </span>nonzero::{NonZeroI128, NonZeroI16, NonZeroI32, NonZeroI64, NonZeroI8, NonZeroIsize};\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"nonzero\"</span>, since = <span class=\"string\">\"1.28.0\"</span>)]\n</span><span class=\"kw\">pub use </span>nonzero::{NonZeroU128, NonZeroU16, NonZeroU32, NonZeroU64, NonZeroU8, NonZeroUsize};\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"try_from\"</span>, since = <span class=\"string\">\"1.34.0\"</span>)]\n</span><span class=\"kw\">pub use </span>error::TryFromIntError;\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"int_error_matching\"</span>, since = <span class=\"string\">\"1.55.0\"</span>)]\n</span><span class=\"kw\">pub use </span>error::IntErrorKind;\n\n<span class=\"macro\">macro_rules!</span> usize_isize_to_xe_bytes_doc {\n    () =&gt; {\n        <span class=\"string\">\"\n\n**Note**: This function returns an array of length 2, 4 or 8 bytes\ndepending on the target pointer size.\n\n\"\n    </span>};\n}\n\n<span class=\"macro\">macro_rules!</span> usize_isize_from_xe_bytes_doc {\n    () =&gt; {\n        <span class=\"string\">\"\n\n**Note**: This function takes an array of length 2, 4 or 8 bytes\ndepending on the target pointer size.\n\n\"\n    </span>};\n}\n\n<span class=\"macro\">macro_rules!</span> midpoint_impl {\n    (<span class=\"macro-nonterminal\">$SelfT</span>:ty, unsigned) =&gt; {\n        <span class=\"doccomment\">/// Calculates the middle point of `self` and `rhs`.\n        ///\n        /// `midpoint(a, b)` is `(a + b) &gt;&gt; 1` as if it were performed in a\n        /// sufficiently-large signed integral type. This implies that the result is\n        /// always rounded towards negative infinity and that no overflow will ever occur.\n        ///\n        /// # Examples\n        ///\n        /// ```\n        /// #![feature(num_midpoint)]\n        </span><span class=\"attr\">#[doc = <span class=\"macro\">concat!</span>(<span class=\"string\">\"assert_eq!(0\"</span>, <span class=\"macro\">stringify!</span>(<span class=\"macro-nonterminal\">$SelfT</span>), <span class=\"string\">\".midpoint(4), 2);\"</span>)]\n        #[doc = <span class=\"macro\">concat!</span>(<span class=\"string\">\"assert_eq!(1\"</span>, <span class=\"macro\">stringify!</span>(<span class=\"macro-nonterminal\">$SelfT</span>), <span class=\"string\">\".midpoint(4), 2);\"</span>)]\n        </span><span class=\"doccomment\">/// ```\n        </span><span class=\"attr\">#[unstable(feature = <span class=\"string\">\"num_midpoint\"</span>, issue = <span class=\"string\">\"110840\"</span>)]\n        #[rustc_const_unstable(feature = <span class=\"string\">\"const_num_midpoint\"</span>, issue = <span class=\"string\">\"110840\"</span>)]\n        #[must_use = <span class=\"string\">\"this returns the result of the operation, \\\n                      without modifying the original\"</span>]\n        #[inline]\n        </span><span class=\"kw\">pub const fn </span>midpoint(<span class=\"self\">self</span>, rhs: <span class=\"macro-nonterminal\">$SelfT</span>) -&gt; <span class=\"macro-nonterminal\">$SelfT </span>{\n            <span class=\"comment\">// Use the well known branchless algorithm from Hacker's Delight to compute\n            // `(a + b) / 2` without overflowing: `((a ^ b) &gt;&gt; 1) + (a &amp; b)`.\n            </span>((<span class=\"self\">self </span>^ rhs) &gt;&gt; <span class=\"number\">1</span>) + (<span class=\"self\">self </span>&amp; rhs)\n        }\n    };\n    (<span class=\"macro-nonterminal\">$SelfT</span>:ty, <span class=\"macro-nonterminal\">$WideT</span>:ty, unsigned) =&gt; {\n        <span class=\"doccomment\">/// Calculates the middle point of `self` and `rhs`.\n        ///\n        /// `midpoint(a, b)` is `(a + b) &gt;&gt; 1` as if it were performed in a\n        /// sufficiently-large signed integral type. This implies that the result is\n        /// always rounded towards negative infinity and that no overflow will ever occur.\n        ///\n        /// # Examples\n        ///\n        /// ```\n        /// #![feature(num_midpoint)]\n        </span><span class=\"attr\">#[doc = <span class=\"macro\">concat!</span>(<span class=\"string\">\"assert_eq!(0\"</span>, <span class=\"macro\">stringify!</span>(<span class=\"macro-nonterminal\">$SelfT</span>), <span class=\"string\">\".midpoint(4), 2);\"</span>)]\n        #[doc = <span class=\"macro\">concat!</span>(<span class=\"string\">\"assert_eq!(1\"</span>, <span class=\"macro\">stringify!</span>(<span class=\"macro-nonterminal\">$SelfT</span>), <span class=\"string\">\".midpoint(4), 2);\"</span>)]\n        </span><span class=\"doccomment\">/// ```\n        </span><span class=\"attr\">#[unstable(feature = <span class=\"string\">\"num_midpoint\"</span>, issue = <span class=\"string\">\"110840\"</span>)]\n        #[rustc_const_unstable(feature = <span class=\"string\">\"const_num_midpoint\"</span>, issue = <span class=\"string\">\"110840\"</span>)]\n        #[must_use = <span class=\"string\">\"this returns the result of the operation, \\\n                      without modifying the original\"</span>]\n        #[inline]\n        </span><span class=\"kw\">pub const fn </span>midpoint(<span class=\"self\">self</span>, rhs: <span class=\"macro-nonterminal\">$SelfT</span>) -&gt; <span class=\"macro-nonterminal\">$SelfT </span>{\n            ((<span class=\"self\">self </span><span class=\"kw\">as </span><span class=\"macro-nonterminal\">$WideT </span>+ rhs <span class=\"kw\">as </span><span class=\"macro-nonterminal\">$WideT</span>) / <span class=\"number\">2</span>) <span class=\"kw\">as </span><span class=\"macro-nonterminal\">$SelfT\n        </span>}\n    };\n}\n\n<span class=\"macro\">macro_rules!</span> widening_impl {\n    (<span class=\"macro-nonterminal\">$SelfT</span>:ty, <span class=\"macro-nonterminal\">$WideT</span>:ty, <span class=\"macro-nonterminal\">$BITS</span>:literal, unsigned) =&gt; {\n        <span class=\"doccomment\">/// Calculates the complete product `self * rhs` without the possibility to overflow.\n        ///\n        /// This returns the low-order (wrapping) bits and the high-order (overflow) bits\n        /// of the result as two separate values, in that order.\n        ///\n        /// If you also need to add a carry to the wide result, then you want\n        /// [`Self::carrying_mul`] instead.\n        ///\n        /// # Examples\n        ///\n        /// Basic usage:\n        ///\n        /// Please note that this example is shared between integer types.\n        /// Which explains why `u32` is used here.\n        ///\n        /// ```\n        /// #![feature(bigint_helper_methods)]\n        /// assert_eq!(5u32.widening_mul(2), (10, 0));\n        /// assert_eq!(1_000_000_000u32.widening_mul(10), (1410065408, 2));\n        /// ```\n        </span><span class=\"attr\">#[unstable(feature = <span class=\"string\">\"bigint_helper_methods\"</span>, issue = <span class=\"string\">\"85532\"</span>)]\n        #[rustc_const_unstable(feature = <span class=\"string\">\"const_bigint_helper_methods\"</span>, issue = <span class=\"string\">\"85532\"</span>)]\n        #[must_use = <span class=\"string\">\"this returns the result of the operation, \\\n                      without modifying the original\"</span>]\n        #[inline]\n        </span><span class=\"kw\">pub const fn </span>widening_mul(<span class=\"self\">self</span>, rhs: <span class=\"self\">Self</span>) -&gt; (<span class=\"self\">Self</span>, <span class=\"self\">Self</span>) {\n            <span class=\"comment\">// note: longer-term this should be done via an intrinsic,\n            //   but for now we can deal without an impl for u128/i128\n            // SAFETY: overflow will be contained within the wider types\n            </span><span class=\"kw\">let </span>wide = <span class=\"kw\">unsafe </span>{ (<span class=\"self\">self </span><span class=\"kw\">as </span><span class=\"macro-nonterminal\">$WideT</span>).unchecked_mul(rhs <span class=\"kw\">as </span><span class=\"macro-nonterminal\">$WideT</span>) };\n            (wide <span class=\"kw\">as </span><span class=\"macro-nonterminal\">$SelfT</span>, (wide &gt;&gt; <span class=\"macro-nonterminal\">$BITS</span>) <span class=\"kw\">as </span><span class=\"macro-nonterminal\">$SelfT</span>)\n        }\n\n        <span class=\"doccomment\">/// Calculates the \"full multiplication\" `self * rhs + carry`\n        /// without the possibility to overflow.\n        ///\n        /// This returns the low-order (wrapping) bits and the high-order (overflow) bits\n        /// of the result as two separate values, in that order.\n        ///\n        /// Performs \"long multiplication\" which takes in an extra amount to add, and may return an\n        /// additional amount of overflow. This allows for chaining together multiple\n        /// multiplications to create \"big integers\" which represent larger values.\n        ///\n        /// If you don't need the `carry`, then you can use [`Self::widening_mul`] instead.\n        ///\n        /// # Examples\n        ///\n        /// Basic usage:\n        ///\n        /// Please note that this example is shared between integer types.\n        /// Which explains why `u32` is used here.\n        ///\n        /// ```\n        /// #![feature(bigint_helper_methods)]\n        /// assert_eq!(5u32.carrying_mul(2, 0), (10, 0));\n        /// assert_eq!(5u32.carrying_mul(2, 10), (20, 0));\n        /// assert_eq!(1_000_000_000u32.carrying_mul(10, 0), (1410065408, 2));\n        /// assert_eq!(1_000_000_000u32.carrying_mul(10, 10), (1410065418, 2));\n        </span><span class=\"attr\">#[doc = <span class=\"macro\">concat!</span>(<span class=\"string\">\"assert_eq!(\"</span>,\n            <span class=\"macro\">stringify!</span>(<span class=\"macro-nonterminal\">$SelfT</span>), <span class=\"string\">\"::MAX.carrying_mul(\"</span>, <span class=\"macro\">stringify!</span>(<span class=\"macro-nonterminal\">$SelfT</span>), <span class=\"string\">\"::MAX, \"</span>, <span class=\"macro\">stringify!</span>(<span class=\"macro-nonterminal\">$SelfT</span>), <span class=\"string\">\"::MAX), \"</span>,\n            <span class=\"string\">\"(0, \"</span>, <span class=\"macro\">stringify!</span>(<span class=\"macro-nonterminal\">$SelfT</span>), <span class=\"string\">\"::MAX));\"\n        </span>)]\n        </span><span class=\"doccomment\">/// ```\n        ///\n        /// This is the core operation needed for scalar multiplication when\n        /// implementing it for wider-than-native types.\n        ///\n        /// ```\n        /// #![feature(bigint_helper_methods)]\n        /// fn scalar_mul_eq(little_endian_digits: &amp;mut Vec&lt;u16&gt;, multiplicand: u16) {\n        ///     let mut carry = 0;\n        ///     for d in little_endian_digits.iter_mut() {\n        ///         (*d, carry) = d.carrying_mul(multiplicand, carry);\n        ///     }\n        ///     if carry != 0 {\n        ///         little_endian_digits.push(carry);\n        ///     }\n        /// }\n        ///\n        /// let mut v = vec![10, 20];\n        /// scalar_mul_eq(&amp;mut v, 3);\n        /// assert_eq!(v, [30, 60]);\n        ///\n        /// assert_eq!(0x87654321_u64 * 0xFEED, 0x86D3D159E38D);\n        /// let mut v = vec![0x4321, 0x8765];\n        /// scalar_mul_eq(&amp;mut v, 0xFEED);\n        /// assert_eq!(v, [0xE38D, 0xD159, 0x86D3]);\n        /// ```\n        ///\n        /// If `carry` is zero, this is similar to [`overflowing_mul`](Self::overflowing_mul),\n        /// except that it gives the value of the overflow instead of just whether one happened:\n        ///\n        /// ```\n        /// #![feature(bigint_helper_methods)]\n        /// let r = u8::carrying_mul(7, 13, 0);\n        /// assert_eq!((r.0, r.1 != 0), u8::overflowing_mul(7, 13));\n        /// let r = u8::carrying_mul(13, 42, 0);\n        /// assert_eq!((r.0, r.1 != 0), u8::overflowing_mul(13, 42));\n        /// ```\n        ///\n        /// The value of the first field in the returned tuple matches what you'd get\n        /// by combining the [`wrapping_mul`](Self::wrapping_mul) and\n        /// [`wrapping_add`](Self::wrapping_add) methods:\n        ///\n        /// ```\n        /// #![feature(bigint_helper_methods)]\n        /// assert_eq!(\n        ///     789_u16.carrying_mul(456, 123).0,\n        ///     789_u16.wrapping_mul(456).wrapping_add(123),\n        /// );\n        /// ```\n        </span><span class=\"attr\">#[unstable(feature = <span class=\"string\">\"bigint_helper_methods\"</span>, issue = <span class=\"string\">\"85532\"</span>)]\n        #[rustc_const_unstable(feature = <span class=\"string\">\"bigint_helper_methods\"</span>, issue = <span class=\"string\">\"85532\"</span>)]\n        #[must_use = <span class=\"string\">\"this returns the result of the operation, \\\n                      without modifying the original\"</span>]\n        #[inline]\n        </span><span class=\"kw\">pub const fn </span>carrying_mul(<span class=\"self\">self</span>, rhs: <span class=\"self\">Self</span>, carry: <span class=\"self\">Self</span>) -&gt; (<span class=\"self\">Self</span>, <span class=\"self\">Self</span>) {\n            <span class=\"comment\">// note: longer-term this should be done via an intrinsic,\n            //   but for now we can deal without an impl for u128/i128\n            // SAFETY: overflow will be contained within the wider types\n            </span><span class=\"kw\">let </span>wide = <span class=\"kw\">unsafe </span>{\n                (<span class=\"self\">self </span><span class=\"kw\">as </span><span class=\"macro-nonterminal\">$WideT</span>).unchecked_mul(rhs <span class=\"kw\">as </span><span class=\"macro-nonterminal\">$WideT</span>).unchecked_add(carry <span class=\"kw\">as </span><span class=\"macro-nonterminal\">$WideT</span>)\n            };\n            (wide <span class=\"kw\">as </span><span class=\"macro-nonterminal\">$SelfT</span>, (wide &gt;&gt; <span class=\"macro-nonterminal\">$BITS</span>) <span class=\"kw\">as </span><span class=\"macro-nonterminal\">$SelfT</span>)\n        }\n    };\n}\n\n<span class=\"kw\">impl </span>i8 {\n    <span class=\"macro\">int_impl!</span> {\n        <span class=\"self\">Self </span>= i8,\n        ActualT = i8,\n        UnsignedT = u8,\n        BITS = <span class=\"number\">8</span>,\n        BITS_MINUS_ONE = <span class=\"number\">7</span>,\n        Min = -<span class=\"number\">128</span>,\n        Max = <span class=\"number\">127</span>,\n        rot = <span class=\"number\">2</span>,\n        rot_op = <span class=\"string\">\"-0x7e\"</span>,\n        rot_result = <span class=\"string\">\"0xa\"</span>,\n        swap_op = <span class=\"string\">\"0x12\"</span>,\n        swapped = <span class=\"string\">\"0x12\"</span>,\n        reversed = <span class=\"string\">\"0x48\"</span>,\n        le_bytes = <span class=\"string\">\"[0x12]\"</span>,\n        be_bytes = <span class=\"string\">\"[0x12]\"</span>,\n        to_xe_bytes_doc = <span class=\"string\">\"\"</span>,\n        from_xe_bytes_doc = <span class=\"string\">\"\"</span>,\n        bound_condition = <span class=\"string\">\"\"</span>,\n    }\n}\n\n<span class=\"kw\">impl </span>i16 {\n    <span class=\"macro\">int_impl!</span> {\n        <span class=\"self\">Self </span>= i16,\n        ActualT = i16,\n        UnsignedT = u16,\n        BITS = <span class=\"number\">16</span>,\n        BITS_MINUS_ONE = <span class=\"number\">15</span>,\n        Min = -<span class=\"number\">32768</span>,\n        Max = <span class=\"number\">32767</span>,\n        rot = <span class=\"number\">4</span>,\n        rot_op = <span class=\"string\">\"-0x5ffd\"</span>,\n        rot_result = <span class=\"string\">\"0x3a\"</span>,\n        swap_op = <span class=\"string\">\"0x1234\"</span>,\n        swapped = <span class=\"string\">\"0x3412\"</span>,\n        reversed = <span class=\"string\">\"0x2c48\"</span>,\n        le_bytes = <span class=\"string\">\"[0x34, 0x12]\"</span>,\n        be_bytes = <span class=\"string\">\"[0x12, 0x34]\"</span>,\n        to_xe_bytes_doc = <span class=\"string\">\"\"</span>,\n        from_xe_bytes_doc = <span class=\"string\">\"\"</span>,\n        bound_condition = <span class=\"string\">\"\"</span>,\n    }\n}\n\n<span class=\"kw\">impl </span>i32 {\n    <span class=\"macro\">int_impl!</span> {\n        <span class=\"self\">Self </span>= i32,\n        ActualT = i32,\n        UnsignedT = u32,\n        BITS = <span class=\"number\">32</span>,\n        BITS_MINUS_ONE = <span class=\"number\">31</span>,\n        Min = -<span class=\"number\">2147483648</span>,\n        Max = <span class=\"number\">2147483647</span>,\n        rot = <span class=\"number\">8</span>,\n        rot_op = <span class=\"string\">\"0x10000b3\"</span>,\n        rot_result = <span class=\"string\">\"0xb301\"</span>,\n        swap_op = <span class=\"string\">\"0x12345678\"</span>,\n        swapped = <span class=\"string\">\"0x78563412\"</span>,\n        reversed = <span class=\"string\">\"0x1e6a2c48\"</span>,\n        le_bytes = <span class=\"string\">\"[0x78, 0x56, 0x34, 0x12]\"</span>,\n        be_bytes = <span class=\"string\">\"[0x12, 0x34, 0x56, 0x78]\"</span>,\n        to_xe_bytes_doc = <span class=\"string\">\"\"</span>,\n        from_xe_bytes_doc = <span class=\"string\">\"\"</span>,\n        bound_condition = <span class=\"string\">\"\"</span>,\n    }\n}\n\n<span class=\"kw\">impl </span>i64 {\n    <span class=\"macro\">int_impl!</span> {\n        <span class=\"self\">Self </span>= i64,\n        ActualT = i64,\n        UnsignedT = u64,\n        BITS = <span class=\"number\">64</span>,\n        BITS_MINUS_ONE = <span class=\"number\">63</span>,\n        Min = -<span class=\"number\">9223372036854775808</span>,\n        Max = <span class=\"number\">9223372036854775807</span>,\n        rot = <span class=\"number\">12</span>,\n        rot_op = <span class=\"string\">\"0xaa00000000006e1\"</span>,\n        rot_result = <span class=\"string\">\"0x6e10aa\"</span>,\n        swap_op = <span class=\"string\">\"0x1234567890123456\"</span>,\n        swapped = <span class=\"string\">\"0x5634129078563412\"</span>,\n        reversed = <span class=\"string\">\"0x6a2c48091e6a2c48\"</span>,\n        le_bytes = <span class=\"string\">\"[0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\"</span>,\n        be_bytes = <span class=\"string\">\"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\"</span>,\n        to_xe_bytes_doc = <span class=\"string\">\"\"</span>,\n        from_xe_bytes_doc = <span class=\"string\">\"\"</span>,\n        bound_condition = <span class=\"string\">\"\"</span>,\n    }\n}\n\n<span class=\"kw\">impl </span>i128 {\n    <span class=\"macro\">int_impl!</span> {\n        <span class=\"self\">Self </span>= i128,\n        ActualT = i128,\n        UnsignedT = u128,\n        BITS = <span class=\"number\">128</span>,\n        BITS_MINUS_ONE = <span class=\"number\">127</span>,\n        Min = -<span class=\"number\">170141183460469231731687303715884105728</span>,\n        Max = <span class=\"number\">170141183460469231731687303715884105727</span>,\n        rot = <span class=\"number\">16</span>,\n        rot_op = <span class=\"string\">\"0x13f40000000000000000000000004f76\"</span>,\n        rot_result = <span class=\"string\">\"0x4f7613f4\"</span>,\n        swap_op = <span class=\"string\">\"0x12345678901234567890123456789012\"</span>,\n        swapped = <span class=\"string\">\"0x12907856341290785634129078563412\"</span>,\n        reversed = <span class=\"string\">\"0x48091e6a2c48091e6a2c48091e6a2c48\"</span>,\n        le_bytes = <span class=\"string\">\"[0x12, 0x90, 0x78, 0x56, 0x34, 0x12, 0x90, 0x78, \\\n            0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\"</span>,\n        be_bytes = <span class=\"string\">\"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56, \\\n            0x78, 0x90, 0x12, 0x34, 0x56, 0x78, 0x90, 0x12]\"</span>,\n        to_xe_bytes_doc = <span class=\"string\">\"\"</span>,\n        from_xe_bytes_doc = <span class=\"string\">\"\"</span>,\n        bound_condition = <span class=\"string\">\"\"</span>,\n    }\n}\n\n<span class=\"attr\">#[cfg(target_pointer_width = <span class=\"string\">\"16\"</span>)]\n</span><span class=\"kw\">impl </span>isize {\n    <span class=\"macro\">int_impl!</span> {\n        <span class=\"self\">Self </span>= isize,\n        ActualT = i16,\n        UnsignedT = usize,\n        BITS = <span class=\"number\">16</span>,\n        BITS_MINUS_ONE = <span class=\"number\">15</span>,\n        Min = -<span class=\"number\">32768</span>,\n        Max = <span class=\"number\">32767</span>,\n        rot = <span class=\"number\">4</span>,\n        rot_op = <span class=\"string\">\"-0x5ffd\"</span>,\n        rot_result = <span class=\"string\">\"0x3a\"</span>,\n        swap_op = <span class=\"string\">\"0x1234\"</span>,\n        swapped = <span class=\"string\">\"0x3412\"</span>,\n        reversed = <span class=\"string\">\"0x2c48\"</span>,\n        le_bytes = <span class=\"string\">\"[0x34, 0x12]\"</span>,\n        be_bytes = <span class=\"string\">\"[0x12, 0x34]\"</span>,\n        to_xe_bytes_doc = <span class=\"macro\">usize_isize_to_xe_bytes_doc!</span>(),\n        from_xe_bytes_doc = <span class=\"macro\">usize_isize_from_xe_bytes_doc!</span>(),\n        bound_condition = <span class=\"string\">\" on 16-bit targets\"</span>,\n    }\n}\n\n<span class=\"attr\">#[cfg(target_pointer_width = <span class=\"string\">\"32\"</span>)]\n</span><span class=\"kw\">impl </span>isize {\n    <span class=\"macro\">int_impl!</span> {\n        <span class=\"self\">Self </span>= isize,\n        ActualT = i32,\n        UnsignedT = usize,\n        BITS = <span class=\"number\">32</span>,\n        BITS_MINUS_ONE = <span class=\"number\">31</span>,\n        Min = -<span class=\"number\">2147483648</span>,\n        Max = <span class=\"number\">2147483647</span>,\n        rot = <span class=\"number\">8</span>,\n        rot_op = <span class=\"string\">\"0x10000b3\"</span>,\n        rot_result = <span class=\"string\">\"0xb301\"</span>,\n        swap_op = <span class=\"string\">\"0x12345678\"</span>,\n        swapped = <span class=\"string\">\"0x78563412\"</span>,\n        reversed = <span class=\"string\">\"0x1e6a2c48\"</span>,\n        le_bytes = <span class=\"string\">\"[0x78, 0x56, 0x34, 0x12]\"</span>,\n        be_bytes = <span class=\"string\">\"[0x12, 0x34, 0x56, 0x78]\"</span>,\n        to_xe_bytes_doc = <span class=\"macro\">usize_isize_to_xe_bytes_doc!</span>(),\n        from_xe_bytes_doc = <span class=\"macro\">usize_isize_from_xe_bytes_doc!</span>(),\n        bound_condition = <span class=\"string\">\" on 32-bit targets\"</span>,\n    }\n}\n\n<span class=\"attr\">#[cfg(target_pointer_width = <span class=\"string\">\"64\"</span>)]\n</span><span class=\"kw\">impl </span>isize {\n    <span class=\"macro\">int_impl!</span> {\n        <span class=\"self\">Self </span>= isize,\n        ActualT = i64,\n        UnsignedT = usize,\n        BITS = <span class=\"number\">64</span>,\n        BITS_MINUS_ONE = <span class=\"number\">63</span>,\n        Min = -<span class=\"number\">9223372036854775808</span>,\n        Max = <span class=\"number\">9223372036854775807</span>,\n        rot = <span class=\"number\">12</span>,\n        rot_op = <span class=\"string\">\"0xaa00000000006e1\"</span>,\n        rot_result = <span class=\"string\">\"0x6e10aa\"</span>,\n        swap_op = <span class=\"string\">\"0x1234567890123456\"</span>,\n        swapped = <span class=\"string\">\"0x5634129078563412\"</span>,\n        reversed = <span class=\"string\">\"0x6a2c48091e6a2c48\"</span>,\n        le_bytes = <span class=\"string\">\"[0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\"</span>,\n        be_bytes = <span class=\"string\">\"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\"</span>,\n        to_xe_bytes_doc = <span class=\"macro\">usize_isize_to_xe_bytes_doc!</span>(),\n        from_xe_bytes_doc = <span class=\"macro\">usize_isize_from_xe_bytes_doc!</span>(),\n        bound_condition = <span class=\"string\">\" on 64-bit targets\"</span>,\n    }\n}\n\n<span class=\"doccomment\">/// If the 6th bit is set ascii is lower case.\n</span><span class=\"kw\">const </span>ASCII_CASE_MASK: u8 = <span class=\"number\">0b0010_0000</span>;\n\n<span class=\"kw\">impl </span>u8 {\n    <span class=\"macro\">uint_impl!</span> {\n        <span class=\"self\">Self </span>= u8,\n        ActualT = u8,\n        SignedT = i8,\n        NonZeroT = NonZero&lt;u8&gt;,\n        BITS = <span class=\"number\">8</span>,\n        MAX = <span class=\"number\">255</span>,\n        rot = <span class=\"number\">2</span>,\n        rot_op = <span class=\"string\">\"0x82\"</span>,\n        rot_result = <span class=\"string\">\"0xa\"</span>,\n        swap_op = <span class=\"string\">\"0x12\"</span>,\n        swapped = <span class=\"string\">\"0x12\"</span>,\n        reversed = <span class=\"string\">\"0x48\"</span>,\n        le_bytes = <span class=\"string\">\"[0x12]\"</span>,\n        be_bytes = <span class=\"string\">\"[0x12]\"</span>,\n        to_xe_bytes_doc = <span class=\"string\">\"\"</span>,\n        from_xe_bytes_doc = <span class=\"string\">\"\"</span>,\n        bound_condition = <span class=\"string\">\"\"</span>,\n    }\n    <span class=\"macro\">widening_impl!</span> { u8, u16, <span class=\"number\">8</span>, unsigned }\n    <span class=\"macro\">midpoint_impl!</span> { u8, u16, unsigned }\n\n    <span class=\"doccomment\">/// Checks if the value is within the ASCII range.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let ascii = 97u8;\n    /// let non_ascii = 150u8;\n    ///\n    /// assert!(ascii.is_ascii());\n    /// assert!(!non_ascii.is_ascii());\n    /// ```\n    </span><span class=\"attr\">#[must_use]\n    #[stable(feature = <span class=\"string\">\"ascii_methods_on_intrinsics\"</span>, since = <span class=\"string\">\"1.23.0\"</span>)]\n    #[rustc_const_stable(feature = <span class=\"string\">\"const_u8_is_ascii\"</span>, since = <span class=\"string\">\"1.43.0\"</span>)]\n    #[inline]\n    </span><span class=\"kw\">pub const fn </span>is_ascii(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; bool {\n        <span class=\"kw-2\">*</span><span class=\"self\">self </span>&lt;= <span class=\"number\">127\n    </span>}\n\n    <span class=\"doccomment\">/// If the value of this byte is within the ASCII range, returns it as an\n    /// [ASCII character](ascii::Char).  Otherwise, returns `None`.\n    </span><span class=\"attr\">#[must_use]\n    #[unstable(feature = <span class=\"string\">\"ascii_char\"</span>, issue = <span class=\"string\">\"110998\"</span>)]\n    #[inline]\n    </span><span class=\"kw\">pub const fn </span>as_ascii(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Option</span>&lt;ascii::Char&gt; {\n        ascii::Char::from_u8(<span class=\"kw-2\">*</span><span class=\"self\">self</span>)\n    }\n\n    <span class=\"doccomment\">/// Makes a copy of the value in its ASCII upper case equivalent.\n    ///\n    /// ASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\n    /// but non-ASCII letters are unchanged.\n    ///\n    /// To uppercase the value in-place, use [`make_ascii_uppercase`].\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let lowercase_a = 97u8;\n    ///\n    /// assert_eq!(65, lowercase_a.to_ascii_uppercase());\n    /// ```\n    ///\n    /// [`make_ascii_uppercase`]: Self::make_ascii_uppercase\n    </span><span class=\"attr\">#[must_use = <span class=\"string\">\"to uppercase the value in-place, use `make_ascii_uppercase()`\"</span>]\n    #[stable(feature = <span class=\"string\">\"ascii_methods_on_intrinsics\"</span>, since = <span class=\"string\">\"1.23.0\"</span>)]\n    #[rustc_const_stable(feature = <span class=\"string\">\"const_ascii_methods_on_intrinsics\"</span>, since = <span class=\"string\">\"1.52.0\"</span>)]\n    #[inline]\n    </span><span class=\"kw\">pub const fn </span>to_ascii_uppercase(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; u8 {\n        <span class=\"comment\">// Toggle the 6th bit if this is a lowercase letter\n        </span><span class=\"kw-2\">*</span><span class=\"self\">self </span>^ ((<span class=\"self\">self</span>.is_ascii_lowercase() <span class=\"kw\">as </span>u8) * ASCII_CASE_MASK)\n    }\n\n    <span class=\"doccomment\">/// Makes a copy of the value in its ASCII lower case equivalent.\n    ///\n    /// ASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\n    /// but non-ASCII letters are unchanged.\n    ///\n    /// To lowercase the value in-place, use [`make_ascii_lowercase`].\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let uppercase_a = 65u8;\n    ///\n    /// assert_eq!(97, uppercase_a.to_ascii_lowercase());\n    /// ```\n    ///\n    /// [`make_ascii_lowercase`]: Self::make_ascii_lowercase\n    </span><span class=\"attr\">#[must_use = <span class=\"string\">\"to lowercase the value in-place, use `make_ascii_lowercase()`\"</span>]\n    #[stable(feature = <span class=\"string\">\"ascii_methods_on_intrinsics\"</span>, since = <span class=\"string\">\"1.23.0\"</span>)]\n    #[rustc_const_stable(feature = <span class=\"string\">\"const_ascii_methods_on_intrinsics\"</span>, since = <span class=\"string\">\"1.52.0\"</span>)]\n    #[inline]\n    </span><span class=\"kw\">pub const fn </span>to_ascii_lowercase(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; u8 {\n        <span class=\"comment\">// Set the 6th bit if this is an uppercase letter\n        </span><span class=\"kw-2\">*</span><span class=\"self\">self </span>| (<span class=\"self\">self</span>.is_ascii_uppercase() <span class=\"kw\">as </span>u8 * ASCII_CASE_MASK)\n    }\n\n    <span class=\"doccomment\">/// Assumes self is ascii\n    </span><span class=\"attr\">#[inline]\n    </span><span class=\"kw\">pub</span>(<span class=\"kw\">crate</span>) <span class=\"kw\">const fn </span>ascii_change_case_unchecked(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; u8 {\n        <span class=\"kw-2\">*</span><span class=\"self\">self </span>^ ASCII_CASE_MASK\n    }\n\n    <span class=\"doccomment\">/// Checks that two values are an ASCII case-insensitive match.\n    ///\n    /// This is equivalent to `to_ascii_lowercase(a) == to_ascii_lowercase(b)`.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let lowercase_a = 97u8;\n    /// let uppercase_a = 65u8;\n    ///\n    /// assert!(lowercase_a.eq_ignore_ascii_case(&amp;uppercase_a));\n    /// ```\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"ascii_methods_on_intrinsics\"</span>, since = <span class=\"string\">\"1.23.0\"</span>)]\n    #[rustc_const_stable(feature = <span class=\"string\">\"const_ascii_methods_on_intrinsics\"</span>, since = <span class=\"string\">\"1.52.0\"</span>)]\n    #[inline]\n    </span><span class=\"kw\">pub const fn </span>eq_ignore_ascii_case(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, other: <span class=\"kw-2\">&amp;</span>u8) -&gt; bool {\n        <span class=\"self\">self</span>.to_ascii_lowercase() == other.to_ascii_lowercase()\n    }\n\n    <span class=\"doccomment\">/// Converts this value to its ASCII upper case equivalent in-place.\n    ///\n    /// ASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\n    /// but non-ASCII letters are unchanged.\n    ///\n    /// To return a new uppercased value without modifying the existing one, use\n    /// [`to_ascii_uppercase`].\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let mut byte = b'a';\n    ///\n    /// byte.make_ascii_uppercase();\n    ///\n    /// assert_eq!(b'A', byte);\n    /// ```\n    ///\n    /// [`to_ascii_uppercase`]: Self::to_ascii_uppercase\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"ascii_methods_on_intrinsics\"</span>, since = <span class=\"string\">\"1.23.0\"</span>)]\n    #[inline]\n    </span><span class=\"kw\">pub fn </span>make_ascii_uppercase(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) {\n        <span class=\"kw-2\">*</span><span class=\"self\">self </span>= <span class=\"self\">self</span>.to_ascii_uppercase();\n    }\n\n    <span class=\"doccomment\">/// Converts this value to its ASCII lower case equivalent in-place.\n    ///\n    /// ASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\n    /// but non-ASCII letters are unchanged.\n    ///\n    /// To return a new lowercased value without modifying the existing one, use\n    /// [`to_ascii_lowercase`].\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let mut byte = b'A';\n    ///\n    /// byte.make_ascii_lowercase();\n    ///\n    /// assert_eq!(b'a', byte);\n    /// ```\n    ///\n    /// [`to_ascii_lowercase`]: Self::to_ascii_lowercase\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"ascii_methods_on_intrinsics\"</span>, since = <span class=\"string\">\"1.23.0\"</span>)]\n    #[inline]\n    </span><span class=\"kw\">pub fn </span>make_ascii_lowercase(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) {\n        <span class=\"kw-2\">*</span><span class=\"self\">self </span>= <span class=\"self\">self</span>.to_ascii_lowercase();\n    }\n\n    <span class=\"doccomment\">/// Checks if the value is an ASCII alphabetic character:\n    ///\n    /// - U+0041 'A' ..= U+005A 'Z', or\n    /// - U+0061 'a' ..= U+007A 'z'.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let uppercase_a = b'A';\n    /// let uppercase_g = b'G';\n    /// let a = b'a';\n    /// let g = b'g';\n    /// let zero = b'0';\n    /// let percent = b'%';\n    /// let space = b' ';\n    /// let lf = b'\\n';\n    /// let esc = b'\\x1b';\n    ///\n    /// assert!(uppercase_a.is_ascii_alphabetic());\n    /// assert!(uppercase_g.is_ascii_alphabetic());\n    /// assert!(a.is_ascii_alphabetic());\n    /// assert!(g.is_ascii_alphabetic());\n    /// assert!(!zero.is_ascii_alphabetic());\n    /// assert!(!percent.is_ascii_alphabetic());\n    /// assert!(!space.is_ascii_alphabetic());\n    /// assert!(!lf.is_ascii_alphabetic());\n    /// assert!(!esc.is_ascii_alphabetic());\n    /// ```\n    </span><span class=\"attr\">#[must_use]\n    #[stable(feature = <span class=\"string\">\"ascii_ctype_on_intrinsics\"</span>, since = <span class=\"string\">\"1.24.0\"</span>)]\n    #[rustc_const_stable(feature = <span class=\"string\">\"const_ascii_ctype_on_intrinsics\"</span>, since = <span class=\"string\">\"1.47.0\"</span>)]\n    #[inline]\n    </span><span class=\"kw\">pub const fn </span>is_ascii_alphabetic(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; bool {\n        <span class=\"macro\">matches!</span>(<span class=\"kw-2\">*</span><span class=\"self\">self</span>, <span class=\"string\">b'A'</span>..=<span class=\"string\">b'Z' </span>| <span class=\"string\">b'a'</span>..=<span class=\"string\">b'z'</span>)\n    }\n\n    <span class=\"doccomment\">/// Checks if the value is an ASCII uppercase character:\n    /// U+0041 'A' ..= U+005A 'Z'.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let uppercase_a = b'A';\n    /// let uppercase_g = b'G';\n    /// let a = b'a';\n    /// let g = b'g';\n    /// let zero = b'0';\n    /// let percent = b'%';\n    /// let space = b' ';\n    /// let lf = b'\\n';\n    /// let esc = b'\\x1b';\n    ///\n    /// assert!(uppercase_a.is_ascii_uppercase());\n    /// assert!(uppercase_g.is_ascii_uppercase());\n    /// assert!(!a.is_ascii_uppercase());\n    /// assert!(!g.is_ascii_uppercase());\n    /// assert!(!zero.is_ascii_uppercase());\n    /// assert!(!percent.is_ascii_uppercase());\n    /// assert!(!space.is_ascii_uppercase());\n    /// assert!(!lf.is_ascii_uppercase());\n    /// assert!(!esc.is_ascii_uppercase());\n    /// ```\n    </span><span class=\"attr\">#[must_use]\n    #[stable(feature = <span class=\"string\">\"ascii_ctype_on_intrinsics\"</span>, since = <span class=\"string\">\"1.24.0\"</span>)]\n    #[rustc_const_stable(feature = <span class=\"string\">\"const_ascii_ctype_on_intrinsics\"</span>, since = <span class=\"string\">\"1.47.0\"</span>)]\n    #[inline]\n    </span><span class=\"kw\">pub const fn </span>is_ascii_uppercase(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; bool {\n        <span class=\"macro\">matches!</span>(<span class=\"kw-2\">*</span><span class=\"self\">self</span>, <span class=\"string\">b'A'</span>..=<span class=\"string\">b'Z'</span>)\n    }\n\n    <span class=\"doccomment\">/// Checks if the value is an ASCII lowercase character:\n    /// U+0061 'a' ..= U+007A 'z'.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let uppercase_a = b'A';\n    /// let uppercase_g = b'G';\n    /// let a = b'a';\n    /// let g = b'g';\n    /// let zero = b'0';\n    /// let percent = b'%';\n    /// let space = b' ';\n    /// let lf = b'\\n';\n    /// let esc = b'\\x1b';\n    ///\n    /// assert!(!uppercase_a.is_ascii_lowercase());\n    /// assert!(!uppercase_g.is_ascii_lowercase());\n    /// assert!(a.is_ascii_lowercase());\n    /// assert!(g.is_ascii_lowercase());\n    /// assert!(!zero.is_ascii_lowercase());\n    /// assert!(!percent.is_ascii_lowercase());\n    /// assert!(!space.is_ascii_lowercase());\n    /// assert!(!lf.is_ascii_lowercase());\n    /// assert!(!esc.is_ascii_lowercase());\n    /// ```\n    </span><span class=\"attr\">#[must_use]\n    #[stable(feature = <span class=\"string\">\"ascii_ctype_on_intrinsics\"</span>, since = <span class=\"string\">\"1.24.0\"</span>)]\n    #[rustc_const_stable(feature = <span class=\"string\">\"const_ascii_ctype_on_intrinsics\"</span>, since = <span class=\"string\">\"1.47.0\"</span>)]\n    #[inline]\n    </span><span class=\"kw\">pub const fn </span>is_ascii_lowercase(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; bool {\n        <span class=\"macro\">matches!</span>(<span class=\"kw-2\">*</span><span class=\"self\">self</span>, <span class=\"string\">b'a'</span>..=<span class=\"string\">b'z'</span>)\n    }\n\n    <span class=\"doccomment\">/// Checks if the value is an ASCII alphanumeric character:\n    ///\n    /// - U+0041 'A' ..= U+005A 'Z', or\n    /// - U+0061 'a' ..= U+007A 'z', or\n    /// - U+0030 '0' ..= U+0039 '9'.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let uppercase_a = b'A';\n    /// let uppercase_g = b'G';\n    /// let a = b'a';\n    /// let g = b'g';\n    /// let zero = b'0';\n    /// let percent = b'%';\n    /// let space = b' ';\n    /// let lf = b'\\n';\n    /// let esc = b'\\x1b';\n    ///\n    /// assert!(uppercase_a.is_ascii_alphanumeric());\n    /// assert!(uppercase_g.is_ascii_alphanumeric());\n    /// assert!(a.is_ascii_alphanumeric());\n    /// assert!(g.is_ascii_alphanumeric());\n    /// assert!(zero.is_ascii_alphanumeric());\n    /// assert!(!percent.is_ascii_alphanumeric());\n    /// assert!(!space.is_ascii_alphanumeric());\n    /// assert!(!lf.is_ascii_alphanumeric());\n    /// assert!(!esc.is_ascii_alphanumeric());\n    /// ```\n    </span><span class=\"attr\">#[must_use]\n    #[stable(feature = <span class=\"string\">\"ascii_ctype_on_intrinsics\"</span>, since = <span class=\"string\">\"1.24.0\"</span>)]\n    #[rustc_const_stable(feature = <span class=\"string\">\"const_ascii_ctype_on_intrinsics\"</span>, since = <span class=\"string\">\"1.47.0\"</span>)]\n    #[inline]\n    </span><span class=\"kw\">pub const fn </span>is_ascii_alphanumeric(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; bool {\n        <span class=\"macro\">matches!</span>(<span class=\"kw-2\">*</span><span class=\"self\">self</span>, <span class=\"string\">b'0'</span>..=<span class=\"string\">b'9'</span>) | <span class=\"macro\">matches!</span>(<span class=\"kw-2\">*</span><span class=\"self\">self</span>, <span class=\"string\">b'A'</span>..=<span class=\"string\">b'Z'</span>) | <span class=\"macro\">matches!</span>(<span class=\"kw-2\">*</span><span class=\"self\">self</span>, <span class=\"string\">b'a'</span>..=<span class=\"string\">b'z'</span>)\n    }\n\n    <span class=\"doccomment\">/// Checks if the value is an ASCII decimal digit:\n    /// U+0030 '0' ..= U+0039 '9'.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let uppercase_a = b'A';\n    /// let uppercase_g = b'G';\n    /// let a = b'a';\n    /// let g = b'g';\n    /// let zero = b'0';\n    /// let percent = b'%';\n    /// let space = b' ';\n    /// let lf = b'\\n';\n    /// let esc = b'\\x1b';\n    ///\n    /// assert!(!uppercase_a.is_ascii_digit());\n    /// assert!(!uppercase_g.is_ascii_digit());\n    /// assert!(!a.is_ascii_digit());\n    /// assert!(!g.is_ascii_digit());\n    /// assert!(zero.is_ascii_digit());\n    /// assert!(!percent.is_ascii_digit());\n    /// assert!(!space.is_ascii_digit());\n    /// assert!(!lf.is_ascii_digit());\n    /// assert!(!esc.is_ascii_digit());\n    /// ```\n    </span><span class=\"attr\">#[must_use]\n    #[stable(feature = <span class=\"string\">\"ascii_ctype_on_intrinsics\"</span>, since = <span class=\"string\">\"1.24.0\"</span>)]\n    #[rustc_const_stable(feature = <span class=\"string\">\"const_ascii_ctype_on_intrinsics\"</span>, since = <span class=\"string\">\"1.47.0\"</span>)]\n    #[inline]\n    </span><span class=\"kw\">pub const fn </span>is_ascii_digit(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; bool {\n        <span class=\"macro\">matches!</span>(<span class=\"kw-2\">*</span><span class=\"self\">self</span>, <span class=\"string\">b'0'</span>..=<span class=\"string\">b'9'</span>)\n    }\n\n    <span class=\"doccomment\">/// Checks if the value is an ASCII octal digit:\n    /// U+0030 '0' ..= U+0037 '7'.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// #![feature(is_ascii_octdigit)]\n    ///\n    /// let uppercase_a = b'A';\n    /// let a = b'a';\n    /// let zero = b'0';\n    /// let seven = b'7';\n    /// let nine = b'9';\n    /// let percent = b'%';\n    /// let lf = b'\\n';\n    ///\n    /// assert!(!uppercase_a.is_ascii_octdigit());\n    /// assert!(!a.is_ascii_octdigit());\n    /// assert!(zero.is_ascii_octdigit());\n    /// assert!(seven.is_ascii_octdigit());\n    /// assert!(!nine.is_ascii_octdigit());\n    /// assert!(!percent.is_ascii_octdigit());\n    /// assert!(!lf.is_ascii_octdigit());\n    /// ```\n    </span><span class=\"attr\">#[must_use]\n    #[unstable(feature = <span class=\"string\">\"is_ascii_octdigit\"</span>, issue = <span class=\"string\">\"101288\"</span>)]\n    #[rustc_const_unstable(feature = <span class=\"string\">\"is_ascii_octdigit\"</span>, issue = <span class=\"string\">\"101288\"</span>)]\n    #[inline]\n    </span><span class=\"kw\">pub const fn </span>is_ascii_octdigit(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; bool {\n        <span class=\"macro\">matches!</span>(<span class=\"kw-2\">*</span><span class=\"self\">self</span>, <span class=\"string\">b'0'</span>..=<span class=\"string\">b'7'</span>)\n    }\n\n    <span class=\"doccomment\">/// Checks if the value is an ASCII hexadecimal digit:\n    ///\n    /// - U+0030 '0' ..= U+0039 '9', or\n    /// - U+0041 'A' ..= U+0046 'F', or\n    /// - U+0061 'a' ..= U+0066 'f'.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let uppercase_a = b'A';\n    /// let uppercase_g = b'G';\n    /// let a = b'a';\n    /// let g = b'g';\n    /// let zero = b'0';\n    /// let percent = b'%';\n    /// let space = b' ';\n    /// let lf = b'\\n';\n    /// let esc = b'\\x1b';\n    ///\n    /// assert!(uppercase_a.is_ascii_hexdigit());\n    /// assert!(!uppercase_g.is_ascii_hexdigit());\n    /// assert!(a.is_ascii_hexdigit());\n    /// assert!(!g.is_ascii_hexdigit());\n    /// assert!(zero.is_ascii_hexdigit());\n    /// assert!(!percent.is_ascii_hexdigit());\n    /// assert!(!space.is_ascii_hexdigit());\n    /// assert!(!lf.is_ascii_hexdigit());\n    /// assert!(!esc.is_ascii_hexdigit());\n    /// ```\n    </span><span class=\"attr\">#[must_use]\n    #[stable(feature = <span class=\"string\">\"ascii_ctype_on_intrinsics\"</span>, since = <span class=\"string\">\"1.24.0\"</span>)]\n    #[rustc_const_stable(feature = <span class=\"string\">\"const_ascii_ctype_on_intrinsics\"</span>, since = <span class=\"string\">\"1.47.0\"</span>)]\n    #[inline]\n    </span><span class=\"kw\">pub const fn </span>is_ascii_hexdigit(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; bool {\n        <span class=\"macro\">matches!</span>(<span class=\"kw-2\">*</span><span class=\"self\">self</span>, <span class=\"string\">b'0'</span>..=<span class=\"string\">b'9'</span>) | <span class=\"macro\">matches!</span>(<span class=\"kw-2\">*</span><span class=\"self\">self</span>, <span class=\"string\">b'A'</span>..=<span class=\"string\">b'F'</span>) | <span class=\"macro\">matches!</span>(<span class=\"kw-2\">*</span><span class=\"self\">self</span>, <span class=\"string\">b'a'</span>..=<span class=\"string\">b'f'</span>)\n    }\n\n    <span class=\"doccomment\">/// Checks if the value is an ASCII punctuation character:\n    ///\n    /// - U+0021 ..= U+002F `! \" # $ % &amp; ' ( ) * + , - . /`, or\n    /// - U+003A ..= U+0040 `: ; &lt; = &gt; ? @`, or\n    /// - U+005B ..= U+0060 `` [ \\ ] ^ _ ` ``, or\n    /// - U+007B ..= U+007E `{ | } ~`\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let uppercase_a = b'A';\n    /// let uppercase_g = b'G';\n    /// let a = b'a';\n    /// let g = b'g';\n    /// let zero = b'0';\n    /// let percent = b'%';\n    /// let space = b' ';\n    /// let lf = b'\\n';\n    /// let esc = b'\\x1b';\n    ///\n    /// assert!(!uppercase_a.is_ascii_punctuation());\n    /// assert!(!uppercase_g.is_ascii_punctuation());\n    /// assert!(!a.is_ascii_punctuation());\n    /// assert!(!g.is_ascii_punctuation());\n    /// assert!(!zero.is_ascii_punctuation());\n    /// assert!(percent.is_ascii_punctuation());\n    /// assert!(!space.is_ascii_punctuation());\n    /// assert!(!lf.is_ascii_punctuation());\n    /// assert!(!esc.is_ascii_punctuation());\n    /// ```\n    </span><span class=\"attr\">#[must_use]\n    #[stable(feature = <span class=\"string\">\"ascii_ctype_on_intrinsics\"</span>, since = <span class=\"string\">\"1.24.0\"</span>)]\n    #[rustc_const_stable(feature = <span class=\"string\">\"const_ascii_ctype_on_intrinsics\"</span>, since = <span class=\"string\">\"1.47.0\"</span>)]\n    #[inline]\n    </span><span class=\"kw\">pub const fn </span>is_ascii_punctuation(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; bool {\n        <span class=\"macro\">matches!</span>(<span class=\"kw-2\">*</span><span class=\"self\">self</span>, <span class=\"string\">b'!'</span>..=<span class=\"string\">b'/'</span>)\n            | <span class=\"macro\">matches!</span>(<span class=\"kw-2\">*</span><span class=\"self\">self</span>, <span class=\"string\">b':'</span>..=<span class=\"string\">b'@'</span>)\n            | <span class=\"macro\">matches!</span>(<span class=\"kw-2\">*</span><span class=\"self\">self</span>, <span class=\"string\">b'['</span>..=<span class=\"string\">b'`'</span>)\n            | <span class=\"macro\">matches!</span>(<span class=\"kw-2\">*</span><span class=\"self\">self</span>, <span class=\"string\">b'{'</span>..=<span class=\"string\">b'~'</span>)\n    }\n\n    <span class=\"doccomment\">/// Checks if the value is an ASCII graphic character:\n    /// U+0021 '!' ..= U+007E '~'.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let uppercase_a = b'A';\n    /// let uppercase_g = b'G';\n    /// let a = b'a';\n    /// let g = b'g';\n    /// let zero = b'0';\n    /// let percent = b'%';\n    /// let space = b' ';\n    /// let lf = b'\\n';\n    /// let esc = b'\\x1b';\n    ///\n    /// assert!(uppercase_a.is_ascii_graphic());\n    /// assert!(uppercase_g.is_ascii_graphic());\n    /// assert!(a.is_ascii_graphic());\n    /// assert!(g.is_ascii_graphic());\n    /// assert!(zero.is_ascii_graphic());\n    /// assert!(percent.is_ascii_graphic());\n    /// assert!(!space.is_ascii_graphic());\n    /// assert!(!lf.is_ascii_graphic());\n    /// assert!(!esc.is_ascii_graphic());\n    /// ```\n    </span><span class=\"attr\">#[must_use]\n    #[stable(feature = <span class=\"string\">\"ascii_ctype_on_intrinsics\"</span>, since = <span class=\"string\">\"1.24.0\"</span>)]\n    #[rustc_const_stable(feature = <span class=\"string\">\"const_ascii_ctype_on_intrinsics\"</span>, since = <span class=\"string\">\"1.47.0\"</span>)]\n    #[inline]\n    </span><span class=\"kw\">pub const fn </span>is_ascii_graphic(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; bool {\n        <span class=\"macro\">matches!</span>(<span class=\"kw-2\">*</span><span class=\"self\">self</span>, <span class=\"string\">b'!'</span>..=<span class=\"string\">b'~'</span>)\n    }\n\n    <span class=\"doccomment\">/// Checks if the value is an ASCII whitespace character:\n    /// U+0020 SPACE, U+0009 HORIZONTAL TAB, U+000A LINE FEED,\n    /// U+000C FORM FEED, or U+000D CARRIAGE RETURN.\n    ///\n    /// Rust uses the WhatWG Infra Standard's [definition of ASCII\n    /// whitespace][infra-aw]. There are several other definitions in\n    /// wide use. For instance, [the POSIX locale][pct] includes\n    /// U+000B VERTICAL TAB as well as all the above characters,\n    /// but—from the very same specification—[the default rule for\n    /// \"field splitting\" in the Bourne shell][bfs] considers *only*\n    /// SPACE, HORIZONTAL TAB, and LINE FEED as whitespace.\n    ///\n    /// If you are writing a program that will process an existing\n    /// file format, check what that format's definition of whitespace is\n    /// before using this function.\n    ///\n    /// [infra-aw]: https://infra.spec.whatwg.org/#ascii-whitespace\n    /// [pct]: https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap07.html#tag_07_03_01\n    /// [bfs]: https://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_06_05\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let uppercase_a = b'A';\n    /// let uppercase_g = b'G';\n    /// let a = b'a';\n    /// let g = b'g';\n    /// let zero = b'0';\n    /// let percent = b'%';\n    /// let space = b' ';\n    /// let lf = b'\\n';\n    /// let esc = b'\\x1b';\n    ///\n    /// assert!(!uppercase_a.is_ascii_whitespace());\n    /// assert!(!uppercase_g.is_ascii_whitespace());\n    /// assert!(!a.is_ascii_whitespace());\n    /// assert!(!g.is_ascii_whitespace());\n    /// assert!(!zero.is_ascii_whitespace());\n    /// assert!(!percent.is_ascii_whitespace());\n    /// assert!(space.is_ascii_whitespace());\n    /// assert!(lf.is_ascii_whitespace());\n    /// assert!(!esc.is_ascii_whitespace());\n    /// ```\n    </span><span class=\"attr\">#[must_use]\n    #[stable(feature = <span class=\"string\">\"ascii_ctype_on_intrinsics\"</span>, since = <span class=\"string\">\"1.24.0\"</span>)]\n    #[rustc_const_stable(feature = <span class=\"string\">\"const_ascii_ctype_on_intrinsics\"</span>, since = <span class=\"string\">\"1.47.0\"</span>)]\n    #[inline]\n    </span><span class=\"kw\">pub const fn </span>is_ascii_whitespace(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; bool {\n        <span class=\"macro\">matches!</span>(<span class=\"kw-2\">*</span><span class=\"self\">self</span>, <span class=\"string\">b'\\t' </span>| <span class=\"string\">b'\\n' </span>| <span class=\"string\">b'\\x0C' </span>| <span class=\"string\">b'\\r' </span>| <span class=\"string\">b' '</span>)\n    }\n\n    <span class=\"doccomment\">/// Checks if the value is an ASCII control character:\n    /// U+0000 NUL ..= U+001F UNIT SEPARATOR, or U+007F DELETE.\n    /// Note that most ASCII whitespace characters are control\n    /// characters, but SPACE is not.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let uppercase_a = b'A';\n    /// let uppercase_g = b'G';\n    /// let a = b'a';\n    /// let g = b'g';\n    /// let zero = b'0';\n    /// let percent = b'%';\n    /// let space = b' ';\n    /// let lf = b'\\n';\n    /// let esc = b'\\x1b';\n    ///\n    /// assert!(!uppercase_a.is_ascii_control());\n    /// assert!(!uppercase_g.is_ascii_control());\n    /// assert!(!a.is_ascii_control());\n    /// assert!(!g.is_ascii_control());\n    /// assert!(!zero.is_ascii_control());\n    /// assert!(!percent.is_ascii_control());\n    /// assert!(!space.is_ascii_control());\n    /// assert!(lf.is_ascii_control());\n    /// assert!(esc.is_ascii_control());\n    /// ```\n    </span><span class=\"attr\">#[must_use]\n    #[stable(feature = <span class=\"string\">\"ascii_ctype_on_intrinsics\"</span>, since = <span class=\"string\">\"1.24.0\"</span>)]\n    #[rustc_const_stable(feature = <span class=\"string\">\"const_ascii_ctype_on_intrinsics\"</span>, since = <span class=\"string\">\"1.47.0\"</span>)]\n    #[inline]\n    </span><span class=\"kw\">pub const fn </span>is_ascii_control(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; bool {\n        <span class=\"macro\">matches!</span>(<span class=\"kw-2\">*</span><span class=\"self\">self</span>, <span class=\"string\">b'\\0'</span>..=<span class=\"string\">b'\\x1F' </span>| <span class=\"string\">b'\\x7F'</span>)\n    }\n\n    <span class=\"doccomment\">/// Returns an iterator that produces an escaped version of a `u8`,\n    /// treating it as an ASCII character.\n    ///\n    /// The behavior is identical to [`ascii::escape_default`].\n    ///\n    /// # Examples\n    ///\n    /// ```\n    ///\n    /// assert_eq!(\"0\", b'0'.escape_ascii().to_string());\n    /// assert_eq!(\"\\\\t\", b'\\t'.escape_ascii().to_string());\n    /// assert_eq!(\"\\\\r\", b'\\r'.escape_ascii().to_string());\n    /// assert_eq!(\"\\\\n\", b'\\n'.escape_ascii().to_string());\n    /// assert_eq!(\"\\\\'\", b'\\''.escape_ascii().to_string());\n    /// assert_eq!(\"\\\\\\\"\", b'\"'.escape_ascii().to_string());\n    /// assert_eq!(\"\\\\\\\\\", b'\\\\'.escape_ascii().to_string());\n    /// assert_eq!(\"\\\\x9d\", b'\\x9d'.escape_ascii().to_string());\n    /// ```\n    </span><span class=\"attr\">#[must_use = <span class=\"string\">\"this returns the escaped byte as an iterator, \\\n                  without modifying the original\"</span>]\n    #[stable(feature = <span class=\"string\">\"inherent_ascii_escape\"</span>, since = <span class=\"string\">\"1.60.0\"</span>)]\n    #[inline]\n    </span><span class=\"kw\">pub fn </span>escape_ascii(<span class=\"self\">self</span>) -&gt; ascii::EscapeDefault {\n        ascii::escape_default(<span class=\"self\">self</span>)\n    }\n\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">pub</span>(<span class=\"kw\">crate</span>) <span class=\"kw\">const fn </span>is_utf8_char_boundary(<span class=\"self\">self</span>) -&gt; bool {\n        <span class=\"comment\">// This is bit magic equivalent to: b &lt; 128 || b &gt;= 192\n        </span>(<span class=\"self\">self </span><span class=\"kw\">as </span>i8) &gt;= -<span class=\"number\">0x40\n    </span>}\n}\n\n<span class=\"kw\">impl </span>u16 {\n    <span class=\"macro\">uint_impl!</span> {\n        <span class=\"self\">Self </span>= u16,\n        ActualT = u16,\n        SignedT = i16,\n        NonZeroT = NonZero&lt;u16&gt;,\n        BITS = <span class=\"number\">16</span>,\n        MAX = <span class=\"number\">65535</span>,\n        rot = <span class=\"number\">4</span>,\n        rot_op = <span class=\"string\">\"0xa003\"</span>,\n        rot_result = <span class=\"string\">\"0x3a\"</span>,\n        swap_op = <span class=\"string\">\"0x1234\"</span>,\n        swapped = <span class=\"string\">\"0x3412\"</span>,\n        reversed = <span class=\"string\">\"0x2c48\"</span>,\n        le_bytes = <span class=\"string\">\"[0x34, 0x12]\"</span>,\n        be_bytes = <span class=\"string\">\"[0x12, 0x34]\"</span>,\n        to_xe_bytes_doc = <span class=\"string\">\"\"</span>,\n        from_xe_bytes_doc = <span class=\"string\">\"\"</span>,\n        bound_condition = <span class=\"string\">\"\"</span>,\n    }\n    <span class=\"macro\">widening_impl!</span> { u16, u32, <span class=\"number\">16</span>, unsigned }\n    <span class=\"macro\">midpoint_impl!</span> { u16, u32, unsigned }\n\n    <span class=\"doccomment\">/// Checks if the value is a Unicode surrogate code point, which are disallowed values for [`char`].\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// #![feature(utf16_extra)]\n    ///\n    /// let low_non_surrogate = 0xA000u16;\n    /// let low_surrogate = 0xD800u16;\n    /// let high_surrogate = 0xDC00u16;\n    /// let high_non_surrogate = 0xE000u16;\n    ///\n    /// assert!(!low_non_surrogate.is_utf16_surrogate());\n    /// assert!(low_surrogate.is_utf16_surrogate());\n    /// assert!(high_surrogate.is_utf16_surrogate());\n    /// assert!(!high_non_surrogate.is_utf16_surrogate());\n    /// ```\n    </span><span class=\"attr\">#[must_use]\n    #[unstable(feature = <span class=\"string\">\"utf16_extra\"</span>, issue = <span class=\"string\">\"94919\"</span>)]\n    #[rustc_const_unstable(feature = <span class=\"string\">\"utf16_extra_const\"</span>, issue = <span class=\"string\">\"94919\"</span>)]\n    #[inline]\n    </span><span class=\"kw\">pub const fn </span>is_utf16_surrogate(<span class=\"self\">self</span>) -&gt; bool {\n        <span class=\"macro\">matches!</span>(<span class=\"self\">self</span>, <span class=\"number\">0xD800</span>..=<span class=\"number\">0xDFFF</span>)\n    }\n}\n\n<span class=\"kw\">impl </span>u32 {\n    <span class=\"macro\">uint_impl!</span> {\n        <span class=\"self\">Self </span>= u32,\n        ActualT = u32,\n        SignedT = i32,\n        NonZeroT = NonZero&lt;u32&gt;,\n        BITS = <span class=\"number\">32</span>,\n        MAX = <span class=\"number\">4294967295</span>,\n        rot = <span class=\"number\">8</span>,\n        rot_op = <span class=\"string\">\"0x10000b3\"</span>,\n        rot_result = <span class=\"string\">\"0xb301\"</span>,\n        swap_op = <span class=\"string\">\"0x12345678\"</span>,\n        swapped = <span class=\"string\">\"0x78563412\"</span>,\n        reversed = <span class=\"string\">\"0x1e6a2c48\"</span>,\n        le_bytes = <span class=\"string\">\"[0x78, 0x56, 0x34, 0x12]\"</span>,\n        be_bytes = <span class=\"string\">\"[0x12, 0x34, 0x56, 0x78]\"</span>,\n        to_xe_bytes_doc = <span class=\"string\">\"\"</span>,\n        from_xe_bytes_doc = <span class=\"string\">\"\"</span>,\n        bound_condition = <span class=\"string\">\"\"</span>,\n    }\n    <span class=\"macro\">widening_impl!</span> { u32, u64, <span class=\"number\">32</span>, unsigned }\n    <span class=\"macro\">midpoint_impl!</span> { u32, u64, unsigned }\n}\n\n<span class=\"kw\">impl </span>u64 {\n    <span class=\"macro\">uint_impl!</span> {\n        <span class=\"self\">Self </span>= u64,\n        ActualT = u64,\n        SignedT = i64,\n        NonZeroT = NonZero&lt;u64&gt;,\n        BITS = <span class=\"number\">64</span>,\n        MAX = <span class=\"number\">18446744073709551615</span>,\n        rot = <span class=\"number\">12</span>,\n        rot_op = <span class=\"string\">\"0xaa00000000006e1\"</span>,\n        rot_result = <span class=\"string\">\"0x6e10aa\"</span>,\n        swap_op = <span class=\"string\">\"0x1234567890123456\"</span>,\n        swapped = <span class=\"string\">\"0x5634129078563412\"</span>,\n        reversed = <span class=\"string\">\"0x6a2c48091e6a2c48\"</span>,\n        le_bytes = <span class=\"string\">\"[0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\"</span>,\n        be_bytes = <span class=\"string\">\"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\"</span>,\n        to_xe_bytes_doc = <span class=\"string\">\"\"</span>,\n        from_xe_bytes_doc = <span class=\"string\">\"\"</span>,\n        bound_condition = <span class=\"string\">\"\"</span>,\n    }\n    <span class=\"macro\">widening_impl!</span> { u64, u128, <span class=\"number\">64</span>, unsigned }\n    <span class=\"macro\">midpoint_impl!</span> { u64, u128, unsigned }\n}\n\n<span class=\"kw\">impl </span>u128 {\n    <span class=\"macro\">uint_impl!</span> {\n        <span class=\"self\">Self </span>= u128,\n        ActualT = u128,\n        SignedT = i128,\n        NonZeroT = NonZero&lt;u128&gt;,\n        BITS = <span class=\"number\">128</span>,\n        MAX = <span class=\"number\">340282366920938463463374607431768211455</span>,\n        rot = <span class=\"number\">16</span>,\n        rot_op = <span class=\"string\">\"0x13f40000000000000000000000004f76\"</span>,\n        rot_result = <span class=\"string\">\"0x4f7613f4\"</span>,\n        swap_op = <span class=\"string\">\"0x12345678901234567890123456789012\"</span>,\n        swapped = <span class=\"string\">\"0x12907856341290785634129078563412\"</span>,\n        reversed = <span class=\"string\">\"0x48091e6a2c48091e6a2c48091e6a2c48\"</span>,\n        le_bytes = <span class=\"string\">\"[0x12, 0x90, 0x78, 0x56, 0x34, 0x12, 0x90, 0x78, \\\n            0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\"</span>,\n        be_bytes = <span class=\"string\">\"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56, \\\n            0x78, 0x90, 0x12, 0x34, 0x56, 0x78, 0x90, 0x12]\"</span>,\n        to_xe_bytes_doc = <span class=\"string\">\"\"</span>,\n        from_xe_bytes_doc = <span class=\"string\">\"\"</span>,\n        bound_condition = <span class=\"string\">\"\"</span>,\n    }\n    <span class=\"macro\">midpoint_impl!</span> { u128, unsigned }\n}\n\n<span class=\"attr\">#[cfg(target_pointer_width = <span class=\"string\">\"16\"</span>)]\n</span><span class=\"kw\">impl </span>usize {\n    <span class=\"macro\">uint_impl!</span> {\n        <span class=\"self\">Self </span>= usize,\n        ActualT = u16,\n        SignedT = isize,\n        NonZeroT = NonZero&lt;usize&gt;,\n        BITS = <span class=\"number\">16</span>,\n        MAX = <span class=\"number\">65535</span>,\n        rot = <span class=\"number\">4</span>,\n        rot_op = <span class=\"string\">\"0xa003\"</span>,\n        rot_result = <span class=\"string\">\"0x3a\"</span>,\n        swap_op = <span class=\"string\">\"0x1234\"</span>,\n        swapped = <span class=\"string\">\"0x3412\"</span>,\n        reversed = <span class=\"string\">\"0x2c48\"</span>,\n        le_bytes = <span class=\"string\">\"[0x34, 0x12]\"</span>,\n        be_bytes = <span class=\"string\">\"[0x12, 0x34]\"</span>,\n        to_xe_bytes_doc = <span class=\"macro\">usize_isize_to_xe_bytes_doc!</span>(),\n        from_xe_bytes_doc = <span class=\"macro\">usize_isize_from_xe_bytes_doc!</span>(),\n        bound_condition = <span class=\"string\">\" on 16-bit targets\"</span>,\n    }\n    <span class=\"macro\">widening_impl!</span> { usize, u32, <span class=\"number\">16</span>, unsigned }\n    <span class=\"macro\">midpoint_impl!</span> { usize, u32, unsigned }\n}\n\n<span class=\"attr\">#[cfg(target_pointer_width = <span class=\"string\">\"32\"</span>)]\n</span><span class=\"kw\">impl </span>usize {\n    <span class=\"macro\">uint_impl!</span> {\n        <span class=\"self\">Self </span>= usize,\n        ActualT = u32,\n        SignedT = isize,\n        NonZeroT = NonZero&lt;usize&gt;,\n        BITS = <span class=\"number\">32</span>,\n        MAX = <span class=\"number\">4294967295</span>,\n        rot = <span class=\"number\">8</span>,\n        rot_op = <span class=\"string\">\"0x10000b3\"</span>,\n        rot_result = <span class=\"string\">\"0xb301\"</span>,\n        swap_op = <span class=\"string\">\"0x12345678\"</span>,\n        swapped = <span class=\"string\">\"0x78563412\"</span>,\n        reversed = <span class=\"string\">\"0x1e6a2c48\"</span>,\n        le_bytes = <span class=\"string\">\"[0x78, 0x56, 0x34, 0x12]\"</span>,\n        be_bytes = <span class=\"string\">\"[0x12, 0x34, 0x56, 0x78]\"</span>,\n        to_xe_bytes_doc = <span class=\"macro\">usize_isize_to_xe_bytes_doc!</span>(),\n        from_xe_bytes_doc = <span class=\"macro\">usize_isize_from_xe_bytes_doc!</span>(),\n        bound_condition = <span class=\"string\">\" on 32-bit targets\"</span>,\n    }\n    <span class=\"macro\">widening_impl!</span> { usize, u64, <span class=\"number\">32</span>, unsigned }\n    <span class=\"macro\">midpoint_impl!</span> { usize, u64, unsigned }\n}\n\n<span class=\"attr\">#[cfg(target_pointer_width = <span class=\"string\">\"64\"</span>)]\n</span><span class=\"kw\">impl </span>usize {\n    <span class=\"macro\">uint_impl!</span> {\n        <span class=\"self\">Self </span>= usize,\n        ActualT = u64,\n        SignedT = isize,\n        NonZeroT = NonZero&lt;usize&gt;,\n        BITS = <span class=\"number\">64</span>,\n        MAX = <span class=\"number\">18446744073709551615</span>,\n        rot = <span class=\"number\">12</span>,\n        rot_op = <span class=\"string\">\"0xaa00000000006e1\"</span>,\n        rot_result = <span class=\"string\">\"0x6e10aa\"</span>,\n        swap_op = <span class=\"string\">\"0x1234567890123456\"</span>,\n        swapped = <span class=\"string\">\"0x5634129078563412\"</span>,\n        reversed = <span class=\"string\">\"0x6a2c48091e6a2c48\"</span>,\n        le_bytes = <span class=\"string\">\"[0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\"</span>,\n        be_bytes = <span class=\"string\">\"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\"</span>,\n        to_xe_bytes_doc = <span class=\"macro\">usize_isize_to_xe_bytes_doc!</span>(),\n        from_xe_bytes_doc = <span class=\"macro\">usize_isize_from_xe_bytes_doc!</span>(),\n        bound_condition = <span class=\"string\">\" on 64-bit targets\"</span>,\n    }\n    <span class=\"macro\">widening_impl!</span> { usize, u128, <span class=\"number\">64</span>, unsigned }\n    <span class=\"macro\">midpoint_impl!</span> { usize, u128, unsigned }\n}\n\n<span class=\"kw\">impl </span>usize {\n    <span class=\"doccomment\">/// Returns an `usize` where every byte is equal to `x`.\n    </span><span class=\"attr\">#[inline]\n    </span><span class=\"kw\">pub</span>(<span class=\"kw\">crate</span>) <span class=\"kw\">const fn </span>repeat_u8(x: u8) -&gt; usize {\n        usize::from_ne_bytes([x; mem::size_of::&lt;usize&gt;()])\n    }\n\n    <span class=\"doccomment\">/// Returns an `usize` where every byte pair is equal to `x`.\n    </span><span class=\"attr\">#[inline]\n    </span><span class=\"kw\">pub</span>(<span class=\"kw\">crate</span>) <span class=\"kw\">const fn </span>repeat_u16(x: u16) -&gt; usize {\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>r = <span class=\"number\">0usize</span>;\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>i = <span class=\"number\">0</span>;\n        <span class=\"kw\">while </span>i &lt; mem::size_of::&lt;usize&gt;() {\n            <span class=\"comment\">// Use `wrapping_shl` to make it work on targets with 16-bit `usize`\n            </span>r = r.wrapping_shl(<span class=\"number\">16</span>) | (x <span class=\"kw\">as </span>usize);\n            i += <span class=\"number\">2</span>;\n        }\n        r\n    }\n}\n\n<span class=\"doccomment\">/// A classification of floating point numbers.\n///\n/// This `enum` is used as the return type for [`f32::classify`] and [`f64::classify`]. See\n/// their documentation for more.\n///\n/// # Examples\n///\n/// ```\n/// use std::num::FpCategory;\n///\n/// let num = 12.4_f32;\n/// let inf = f32::INFINITY;\n/// let zero = 0f32;\n/// let sub: f32 = 1.1754942e-38;\n/// let nan = f32::NAN;\n///\n/// assert_eq!(num.classify(), FpCategory::Normal);\n/// assert_eq!(inf.classify(), FpCategory::Infinite);\n/// assert_eq!(zero.classify(), FpCategory::Zero);\n/// assert_eq!(sub.classify(), FpCategory::Subnormal);\n/// assert_eq!(nan.classify(), FpCategory::Nan);\n/// ```\n</span><span class=\"attr\">#[derive(Copy, Clone, PartialEq, Eq, Debug)]\n#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">pub enum </span>FpCategory {\n    <span class=\"doccomment\">/// NaN (not a number): this value results from calculations like `(-1.0).sqrt()`.\n    ///\n    /// See [the documentation for `f32`](f32) for more information on the unusual properties\n    /// of NaN.\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span>Nan,\n\n    <span class=\"doccomment\">/// Positive or negative infinity, which often results from dividing a nonzero number\n    /// by zero.\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span>Infinite,\n\n    <span class=\"doccomment\">/// Positive or negative zero.\n    ///\n    /// See [the documentation for `f32`](f32) for more information on the signedness of zeroes.\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span>Zero,\n\n    <span class=\"doccomment\">/// “Subnormal” or “denormal” floating point representation (less precise, relative to\n    /// their magnitude, than [`Normal`]).\n    ///\n    /// Subnormal numbers are larger in magnitude than [`Zero`] but smaller in magnitude than all\n    /// [`Normal`] numbers.\n    ///\n    /// [`Normal`]: Self::Normal\n    /// [`Zero`]: Self::Zero\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span>Subnormal,\n\n    <span class=\"doccomment\">/// A regular floating point number, not any of the exceptional categories.\n    ///\n    /// The smallest positive normal numbers are [`f32::MIN_POSITIVE`] and [`f64::MIN_POSITIVE`],\n    /// and the largest positive normal numbers are [`f32::MAX`] and [`f64::MAX`]. (Unlike signed\n    /// integers, floating point numbers are symmetric in their range, so negating any of these\n    /// constants will produce their negative counterpart.)\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span>Normal,\n}\n\n<span class=\"macro\">macro_rules!</span> from_str_radix_int_impl {\n    ($(<span class=\"macro-nonterminal\">$t</span>:ty)<span class=\"kw-2\">*</span>) =&gt; {$(\n        <span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n        </span><span class=\"kw\">impl </span>FromStr <span class=\"kw\">for </span><span class=\"macro-nonterminal\">$t </span>{\n            <span class=\"kw\">type </span><span class=\"prelude-val\">Err </span>= ParseIntError;\n            <span class=\"kw\">fn </span>from_str(src: <span class=\"kw-2\">&amp;</span>str) -&gt; <span class=\"prelude-ty\">Result</span>&lt;<span class=\"self\">Self</span>, ParseIntError&gt; {\n                &lt;<span class=\"macro-nonterminal\">$t</span>&gt;::from_str_radix(src, <span class=\"number\">10</span>)\n            }\n        }\n    )<span class=\"kw-2\">*</span>}\n}\n<span class=\"macro\">from_str_radix_int_impl!</span> { isize i8 i16 i32 i64 i128 usize u8 u16 u32 u64 u128 }\n\n<span class=\"doccomment\">/// Determines if a string of text of that length of that radix could be guaranteed to be\n/// stored in the given type T.\n/// Note that if the radix is known to the compiler, it is just the check of digits.len that\n/// is done at runtime.\n</span><span class=\"attr\">#[doc(hidden)]\n#[inline(always)]\n#[unstable(issue = <span class=\"string\">\"none\"</span>, feature = <span class=\"string\">\"std_internals\"</span>)]\n</span><span class=\"kw\">pub const fn </span>can_not_overflow&lt;T&gt;(radix: u32, is_signed_ty: bool, digits: <span class=\"kw-2\">&amp;</span>[u8]) -&gt; bool {\n    radix &lt;= <span class=\"number\">16 </span>&amp;&amp; digits.len() &lt;= mem::size_of::&lt;T&gt;() * <span class=\"number\">2 </span>- is_signed_ty <span class=\"kw\">as </span>usize\n}\n\n<span class=\"attr\">#[track_caller]\n</span><span class=\"kw\">const fn </span>from_str_radix_panic_ct(_radix: u32) -&gt; ! {\n    <span class=\"macro\">panic!</span>(<span class=\"string\">\"from_str_radix_int: must lie in the range `[2, 36]`\"</span>);\n}\n\n<span class=\"attr\">#[track_caller]\n</span><span class=\"kw\">fn </span>from_str_radix_panic_rt(radix: u32) -&gt; ! {\n    <span class=\"macro\">panic!</span>(<span class=\"string\">\"from_str_radix_int: must lie in the range `[2, 36]` - found {}\"</span>, radix);\n}\n\n<span class=\"attr\">#[cfg_attr(not(feature = <span class=\"string\">\"panic_immediate_abort\"</span>), inline(never))]\n#[cfg_attr(feature = <span class=\"string\">\"panic_immediate_abort\"</span>, inline)]\n#[cold]\n#[track_caller]\n</span><span class=\"kw\">const fn </span>from_str_radix_panic(radix: u32) {\n    <span class=\"comment\">// The only difference between these two functions is their panic message.\n    </span>intrinsics::const_eval_select((radix,), from_str_radix_panic_ct, from_str_radix_panic_rt);\n}\n\n<span class=\"macro\">macro_rules!</span> from_str_radix {\n    ($(<span class=\"macro-nonterminal\">$int_ty</span>:ty)+) =&gt; {$(\n        <span class=\"kw\">impl </span><span class=\"macro-nonterminal\">$int_ty </span>{\n            <span class=\"doccomment\">/// Converts a string slice in a given base to an integer.\n            ///\n            /// The string is expected to be an optional `+` sign\n            /// followed by digits.\n            /// Leading and trailing whitespace represent an error.\n            /// Digits are a subset of these characters, depending on `radix`:\n            ///\n            /// * `0-9`\n            /// * `a-z`\n            /// * `A-Z`\n            ///\n            /// # Panics\n            ///\n            /// This function panics if `radix` is not in the range from 2 to 36.\n            ///\n            /// # Examples\n            ///\n            /// Basic usage:\n            ///\n            /// ```\n            </span><span class=\"attr\">#[doc = <span class=\"macro\">concat!</span>(<span class=\"string\">\"assert_eq!(\"</span>, <span class=\"macro\">stringify!</span>(<span class=\"macro-nonterminal\">$int_ty</span>), <span class=\"string\">\"::from_str_radix(\\\"A\\\", 16), Ok(10));\"</span>)]\n            </span><span class=\"doccomment\">/// ```\n            </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n            #[rustc_const_unstable(feature = <span class=\"string\">\"const_int_from_str\"</span>, issue = <span class=\"string\">\"59133\"</span>)]\n            </span><span class=\"kw\">pub const fn </span>from_str_radix(src: <span class=\"kw-2\">&amp;</span>str, radix: u32) -&gt; <span class=\"prelude-ty\">Result</span>&lt;<span class=\"macro-nonterminal\">$int_ty</span>, ParseIntError&gt; {\n                <span class=\"kw\">use </span><span class=\"self\">self</span>::IntErrorKind::<span class=\"kw-2\">*</span>;\n                <span class=\"kw\">use </span><span class=\"self\">self</span>::ParseIntError <span class=\"kw\">as </span>PIE;\n\n                <span class=\"kw\">if </span><span class=\"number\">2 </span>&gt; radix || radix &gt; <span class=\"number\">36 </span>{\n                    from_str_radix_panic(radix);\n                }\n\n                <span class=\"kw\">if </span>src.is_empty() {\n                    <span class=\"kw\">return </span><span class=\"prelude-val\">Err</span>(PIE { kind: Empty });\n                }\n\n                <span class=\"attr\">#[allow(unused_comparisons)]\n                </span><span class=\"kw\">let </span>is_signed_ty = <span class=\"number\">0 </span>&gt; &lt;<span class=\"macro-nonterminal\">$int_ty</span>&gt;::MIN;\n\n                <span class=\"comment\">// all valid digits are ascii, so we will just iterate over the utf8 bytes\n                // and cast them to chars. .to_digit() will safely return None for anything\n                // other than a valid ascii digit for the given radix, including the first-byte\n                // of multi-byte sequences\n                </span><span class=\"kw\">let </span>src = src.as_bytes();\n\n                <span class=\"kw\">let </span>(is_positive, <span class=\"kw-2\">mut </span>digits) = <span class=\"kw\">match </span>src {\n                    [<span class=\"string\">b'+' </span>| <span class=\"string\">b'-'</span>] =&gt; {\n                        <span class=\"kw\">return </span><span class=\"prelude-val\">Err</span>(PIE { kind: InvalidDigit });\n                    }\n                    [<span class=\"string\">b'+'</span>, rest @ ..] =&gt; (<span class=\"bool-val\">true</span>, rest),\n                    [<span class=\"string\">b'-'</span>, rest @ ..] <span class=\"kw\">if </span>is_signed_ty =&gt; (<span class=\"bool-val\">false</span>, rest),\n                    <span class=\"kw\">_ </span>=&gt; (<span class=\"bool-val\">true</span>, src),\n                };\n\n                <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>result = <span class=\"number\">0</span>;\n\n                <span class=\"macro\">macro_rules!</span> unwrap_or_PIE {\n                    (<span class=\"macro-nonterminal\">$option</span>:expr, <span class=\"macro-nonterminal\">$kind</span>:ident) =&gt; {\n                        <span class=\"kw\">match </span><span class=\"macro-nonterminal\">$option </span>{\n                            <span class=\"prelude-val\">Some</span>(value) =&gt; value,\n                            <span class=\"prelude-val\">None </span>=&gt; <span class=\"kw\">return </span><span class=\"prelude-val\">Err</span>(PIE { kind: <span class=\"macro-nonterminal\">$kind </span>}),\n                        }\n                    };\n                }\n\n                <span class=\"kw\">if </span>can_not_overflow::&lt;<span class=\"macro-nonterminal\">$int_ty</span>&gt;(radix, is_signed_ty, digits) {\n                    <span class=\"comment\">// If the len of the str is short compared to the range of the type\n                    // we are parsing into, then we can be certain that an overflow will not occur.\n                    // This bound is when `radix.pow(digits.len()) - 1 &lt;= T::MAX` but the condition\n                    // above is a faster (conservative) approximation of this.\n                    //\n                    // Consider radix 16 as it has the highest information density per digit and will thus overflow the earliest:\n                    // `u8::MAX` is `ff` - any str of len 2 is guaranteed to not overflow.\n                    // `i8::MAX` is `7f` - only a str of len 1 is guaranteed to not overflow.\n                    </span><span class=\"macro\">macro_rules!</span> run_unchecked_loop {\n                        (<span class=\"macro-nonterminal\">$unchecked_additive_op</span>:tt) =&gt; {{\n                            <span class=\"kw\">while let </span>[c, rest @ ..] = digits {\n                                result = result * (radix <span class=\"kw\">as </span><span class=\"macro-nonterminal\">$int_ty</span>);\n                                <span class=\"kw\">let </span>x = <span class=\"macro\">unwrap_or_PIE!</span>((<span class=\"kw-2\">*</span>c <span class=\"kw\">as </span>char).to_digit(radix), InvalidDigit);\n                                result = result <span class=\"macro-nonterminal\">$unchecked_additive_op </span>(x <span class=\"kw\">as </span><span class=\"macro-nonterminal\">$int_ty</span>);\n                                digits = rest;\n                            }\n                        }};\n                    }\n                    <span class=\"kw\">if </span>is_positive {\n                        <span class=\"macro\">run_unchecked_loop!</span>(+)\n                    } <span class=\"kw\">else </span>{\n                        <span class=\"macro\">run_unchecked_loop!</span>(-)\n                    };\n                } <span class=\"kw\">else </span>{\n                    <span class=\"macro\">macro_rules!</span> run_checked_loop {\n                        (<span class=\"macro-nonterminal\">$checked_additive_op</span>:ident, <span class=\"macro-nonterminal\">$overflow_err</span>:ident) =&gt; {{\n                            <span class=\"kw\">while let </span>[c, rest @ ..] = digits {\n                                <span class=\"comment\">// When `radix` is passed in as a literal, rather than doing a slow `imul`\n                                // the compiler can use shifts if `radix` can be expressed as a\n                                // sum of powers of 2 (x*10 can be written as x*8 + x*2).\n                                // When the compiler can't use these optimisations,\n                                // the latency of the multiplication can be hidden by issuing it\n                                // before the result is needed to improve performance on\n                                // modern out-of-order CPU as multiplication here is slower\n                                // than the other instructions, we can get the end result faster\n                                // doing multiplication first and let the CPU spends other cycles\n                                // doing other computation and get multiplication result later.\n                                </span><span class=\"kw\">let </span>mul = result.checked_mul(radix <span class=\"kw\">as </span><span class=\"macro-nonterminal\">$int_ty</span>);\n                                <span class=\"kw\">let </span>x = <span class=\"macro\">unwrap_or_PIE!</span>((<span class=\"kw-2\">*</span>c <span class=\"kw\">as </span>char).to_digit(radix), InvalidDigit) <span class=\"kw\">as </span><span class=\"macro-nonterminal\">$int_ty</span>;\n                                result = <span class=\"macro\">unwrap_or_PIE!</span>(mul, <span class=\"macro-nonterminal\">$overflow_err</span>);\n                                result = <span class=\"macro\">unwrap_or_PIE!</span>(&lt;<span class=\"macro-nonterminal\">$int_ty</span>&gt;::<span class=\"macro-nonterminal\">$checked_additive_op</span>(result, x), <span class=\"macro-nonterminal\">$overflow_err</span>);\n                                digits = rest;\n                            }\n                        }};\n                    }\n                    <span class=\"kw\">if </span>is_positive {\n                        <span class=\"macro\">run_checked_loop!</span>(checked_add, PosOverflow)\n                    } <span class=\"kw\">else </span>{\n                        <span class=\"macro\">run_checked_loop!</span>(checked_sub, NegOverflow)\n                    };\n                }\n                <span class=\"prelude-val\">Ok</span>(result)\n            }\n        }\n    )+}\n}\n\n<span class=\"macro\">from_str_radix!</span> { i8 u8 i16 u16 i32 u32 i64 u64 i128 u128 }\n\n<span class=\"comment\">// Re-use the relevant implementation of from_str_radix for isize and usize to avoid outputting two\n// identical functions.\n</span><span class=\"macro\">macro_rules!</span> from_str_radix_size_impl {\n    ($(<span class=\"macro-nonterminal\">$t</span>:ident <span class=\"macro-nonterminal\">$size</span>:ty),<span class=\"kw-2\">*</span>) =&gt; {$(\n    <span class=\"kw\">impl </span><span class=\"macro-nonterminal\">$size </span>{\n        <span class=\"doccomment\">/// Converts a string slice in a given base to an integer.\n        ///\n        /// The string is expected to be an optional `+` sign\n        /// followed by digits.\n        /// Leading and trailing whitespace represent an error.\n        /// Digits are a subset of these characters, depending on `radix`:\n        ///\n        /// * `0-9`\n        /// * `a-z`\n        /// * `A-Z`\n        ///\n        /// # Panics\n        ///\n        /// This function panics if `radix` is not in the range from 2 to 36.\n        ///\n        /// # Examples\n        ///\n        /// Basic usage:\n        ///\n        /// ```\n        </span><span class=\"attr\">#[doc = <span class=\"macro\">concat!</span>(<span class=\"string\">\"assert_eq!(\"</span>, <span class=\"macro\">stringify!</span>(<span class=\"macro-nonterminal\">$size</span>), <span class=\"string\">\"::from_str_radix(\\\"A\\\", 16), Ok(10));\"</span>)]\n        </span><span class=\"doccomment\">/// ```\n        </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n        #[rustc_const_unstable(feature = <span class=\"string\">\"const_int_from_str\"</span>, issue = <span class=\"string\">\"59133\"</span>)]\n        </span><span class=\"kw\">pub const fn </span>from_str_radix(src: <span class=\"kw-2\">&amp;</span>str, radix: u32) -&gt; <span class=\"prelude-ty\">Result</span>&lt;<span class=\"macro-nonterminal\">$size</span>, ParseIntError&gt; {\n            <span class=\"kw\">match </span>&lt;<span class=\"macro-nonterminal\">$t</span>&gt;::from_str_radix(src, radix) {\n                <span class=\"prelude-val\">Ok</span>(x) =&gt; <span class=\"prelude-val\">Ok</span>(x <span class=\"kw\">as </span><span class=\"macro-nonterminal\">$size</span>),\n                <span class=\"prelude-val\">Err</span>(e) =&gt; <span class=\"prelude-val\">Err</span>(e),\n            }\n        }\n    })<span class=\"kw-2\">*</span>}\n}\n\n<span class=\"attr\">#[cfg(target_pointer_width = <span class=\"string\">\"16\"</span>)]\n</span><span class=\"macro\">from_str_radix_size_impl!</span> { i16 isize, u16 usize }\n<span class=\"attr\">#[cfg(target_pointer_width = <span class=\"string\">\"32\"</span>)]\n</span><span class=\"macro\">from_str_radix_size_impl!</span> { i32 isize, u32 usize }\n<span class=\"attr\">#[cfg(target_pointer_width = <span class=\"string\">\"64\"</span>)]\n</span><span class=\"macro\">from_str_radix_size_impl!</span> { i64 isize, u64 usize }\n</code></pre></div></section></main></body></html>",
	"crawlDate": "2024-07-28T05:21:11.389Z"
}