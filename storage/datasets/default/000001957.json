{
	"title": "write_bytes in std::ptr - Rust",
	"url": "https://doc.rust-lang.org/stable/std/ptr/fn.write_bytes.html",
	"markdown": "# write\\_bytes in std::ptr - Rust\n\n## Function [std](../index.html)::[ptr](index.html)::[write\\_bytes](#)\n\n1.0.0 (const: [unstable](https://github.com/rust-lang/rust/issues/86302 \"Tracking issue for const_ptr_write\")) · [source](https://doc.rust-lang.org/1.80.0/src/core/intrinsics.rs.html#3117) ·\n\n```\npub unsafe fn write_bytes<T>(dst: *mut T, val: u8, count: usize)\n```\n\nExpand description\n\nSets `count * size_of::<T>()` bytes of memory starting at `dst` to `val`.\n\n`write_bytes` is similar to C’s [`memset`](https://en.cppreference.com/w/c/string/byte/memset), but sets `count * size_of::<T>()` bytes to `val`.\n\n## [§](#safety)Safety\n\nBehavior is undefined if any of the following conditions are violated:\n\n-   `dst` must be [valid](about:blank/index.html#safety \"mod std::ptr\") for writes of `count * size_of::<T>()` bytes.\n    \n-   `dst` must be properly aligned.\n    \n\nNote that even if the effectively copied size (`count * size_of::<T>()`) is `0`, the pointer must be non-null and properly aligned.\n\nAdditionally, note that changing `*dst` in this way can easily lead to undefined behavior (UB) later if the written bytes are not a valid representation of some `T`. For instance, the following is an **incorrect** use of this function:\n\n```\nunsafe {\n    let mut value: u8 = 0;\n    let ptr: *mut bool = &mut value as *mut u8 as *mut bool;\n    let _bool = ptr.read(); // This is fine, `ptr` points to a valid `bool`.\n    ptr.write_bytes(42u8, 1); // This function itself does not cause UB...\n    let _bool = ptr.read(); // ...but it makes this operation UB! ⚠️\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++unsafe+%7B%0A++++++++let+mut+value:+u8+=+0;%0A++++++++let+ptr:+*mut+bool+=+%26mut+value+as+*mut+u8+as+*mut+bool;%0A++++++++let+_bool+=+ptr.read();+//+This+is+fine,+%60ptr%60+points+to+a+valid+%60bool%60.%0A++++++++ptr.write_bytes(42u8,+1);+//+This+function+itself+does+not+cause+UB...%0A++++++++let+_bool+=+ptr.read();+//+...but+it+makes+this+operation+UB!+%E2%9A%A0%EF%B8%8F%0A++++%7D%0A%7D&edition=2021)\n\n## [§](#examples)Examples\n\nBasic usage:\n\n```\nuse std::ptr;\n\nlet mut vec = vec![0u32; 4];\nunsafe {\n    let vec_ptr = vec.as_mut_ptr();\n    ptr::write_bytes(vec_ptr, 0xfe, 2);\n}\nassert_eq!(vec, [0xfefefefe, 0xfefefefe, 0, 0]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ptr;%0A++++%0A++++let+mut+vec+=+vec!%5B0u32;+4%5D;%0A++++unsafe+%7B%0A++++++++let+vec_ptr+=+vec.as_mut_ptr();%0A++++++++ptr::write_bytes(vec_ptr,+0xfe,+2);%0A++++%7D%0A++++assert_eq!(vec,+%5B0xfefefefe,+0xfefefefe,+0,+0%5D);%0A%7D&edition=2021)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Sets `count * size_of::<T>()` bytes of memory starting at `dst` to `val`.\"><title>write_bytes in std::ptr - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc fn\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><div class=\"sidebar-elems\"><h2><a href=\"index.html\">In std::ptr</a></h2><h3><a href=\"index.html#macros\">Macros</a></h3><ul class=\"block macro\"><li><a href=\"macro.addr_of.html\">addr_of</a></li><li><a href=\"macro.addr_of_mut.html\">addr_of_mut</a></li></ul><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.Alignment.html\">Alignment</a></li><li><a href=\"struct.DynMetadata.html\">DynMetadata</a></li><li><a href=\"struct.NonNull.html\">NonNull</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.Pointee.html\">Pointee</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.addr_eq.html\">addr_eq</a></li><li><a href=\"fn.copy.html\">copy</a></li><li><a href=\"fn.copy_nonoverlapping.html\">copy_nonoverlapping</a></li><li><a href=\"fn.dangling.html\">dangling</a></li><li><a href=\"fn.dangling_mut.html\">dangling_mut</a></li><li><a href=\"fn.drop_in_place.html\">drop_in_place</a></li><li><a href=\"fn.eq.html\">eq</a></li><li><a href=\"fn.from_mut.html\">from_mut</a></li><li><a href=\"fn.from_raw_parts.html\">from_raw_parts</a></li><li><a href=\"fn.from_raw_parts_mut.html\">from_raw_parts_mut</a></li><li><a href=\"fn.from_ref.html\">from_ref</a></li><li><a href=\"fn.hash.html\">hash</a></li><li><a href=\"fn.metadata.html\">metadata</a></li><li><a href=\"fn.null.html\">null</a></li><li><a href=\"fn.null_mut.html\">null_mut</a></li><li><a href=\"fn.read.html\">read</a></li><li><a href=\"fn.read_unaligned.html\">read_unaligned</a></li><li><a href=\"fn.read_volatile.html\">read_volatile</a></li><li><a href=\"fn.replace.html\">replace</a></li><li><a href=\"fn.slice_from_raw_parts.html\">slice_from_raw_parts</a></li><li><a href=\"fn.slice_from_raw_parts_mut.html\">slice_from_raw_parts_mut</a></li><li><a href=\"fn.swap.html\">swap</a></li><li><a href=\"fn.swap_nonoverlapping.html\">swap_nonoverlapping</a></li><li><a href=\"fn.with_exposed_provenance.html\">with_exposed_provenance</a></li><li><a href=\"fn.with_exposed_provenance_mut.html\">with_exposed_provenance_mut</a></li><li><a href=\"fn.without_provenance.html\">without_provenance</a></li><li><a href=\"fn.without_provenance_mut.html\">without_provenance_mut</a></li><li><a href=\"fn.write.html\">write</a></li><li><a href=\"fn.write_bytes.html\">write_bytes</a></li><li><a href=\"fn.write_unaligned.html\">write_unaligned</a></li><li><a href=\"fn.write_volatile.html\">write_volatile</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Function <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">ptr</a>::<wbr><a class=\"fn\" href=\"#\">write_bytes</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/86302\" title=\"Tracking issue for const_ptr_write\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/intrinsics.rs.html#3117\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub unsafe fn write_bytes&lt;T&gt;(dst: <a class=\"primitive\" href=\"../primitive.pointer.html\">*mut T</a>, val: <a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, count: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>)</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Sets <code>count * size_of::&lt;T&gt;()</code> bytes of memory starting at <code>dst</code> to\n<code>val</code>.</p>\n<p><code>write_bytes</code> is similar to C’s <a href=\"https://en.cppreference.com/w/c/string/byte/memset\"><code>memset</code></a>, but sets <code>count * size_of::&lt;T&gt;()</code> bytes to <code>val</code>.</p>\n<h2 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h2>\n<p>Behavior is undefined if any of the following conditions are violated:</p>\n<ul>\n<li>\n<p><code>dst</code> must be <a href=\"index.html#safety\" title=\"mod std::ptr\">valid</a> for writes of <code>count * size_of::&lt;T&gt;()</code> bytes.</p>\n</li>\n<li>\n<p><code>dst</code> must be properly aligned.</p>\n</li>\n</ul>\n<p>Note that even if the effectively copied size (<code>count * size_of::&lt;T&gt;()</code>) is\n<code>0</code>, the pointer must be non-null and properly aligned.</p>\n<p>Additionally, note that changing <code>*dst</code> in this way can easily lead to undefined behavior (UB)\nlater if the written bytes are not a valid representation of some <code>T</code>. For instance, the\nfollowing is an <strong>incorrect</strong> use of this function:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>value: u8 = <span class=\"number\">0</span>;\n    <span class=\"kw\">let </span>ptr: <span class=\"kw-2\">*mut </span>bool = <span class=\"kw-2\">&amp;mut </span>value <span class=\"kw\">as </span><span class=\"kw-2\">*mut </span>u8 <span class=\"kw\">as </span><span class=\"kw-2\">*mut </span>bool;\n    <span class=\"kw\">let </span>_bool = ptr.read(); <span class=\"comment\">// This is fine, `ptr` points to a valid `bool`.\n    </span>ptr.write_bytes(<span class=\"number\">42u8</span>, <span class=\"number\">1</span>); <span class=\"comment\">// This function itself does not cause UB...\n    </span><span class=\"kw\">let </span>_bool = ptr.read(); <span class=\"comment\">// ...but it makes this operation UB! ⚠️\n</span>}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++unsafe+%7B%0A++++++++let+mut+value:+u8+=+0;%0A++++++++let+ptr:+*mut+bool+=+%26mut+value+as+*mut+u8+as+*mut+bool;%0A++++++++let+_bool+=+ptr.read();+//+This+is+fine,+%60ptr%60+points+to+a+valid+%60bool%60.%0A++++++++ptr.write_bytes(42u8,+1);+//+This+function+itself+does+not+cause+UB...%0A++++++++let+_bool+=+ptr.read();+//+...but+it+makes+this+operation+UB!+%E2%9A%A0%EF%B8%8F%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ptr;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">0u32</span>; <span class=\"number\">4</span>];\n<span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">let </span>vec_ptr = vec.as_mut_ptr();\n    ptr::write_bytes(vec_ptr, <span class=\"number\">0xfe</span>, <span class=\"number\">2</span>);\n}\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">0xfefefefe</span>, <span class=\"number\">0xfefefefe</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ptr;%0A++++%0A++++let+mut+vec+=+vec!%5B0u32;+4%5D;%0A++++unsafe+%7B%0A++++++++let+vec_ptr+=+vec.as_mut_ptr();%0A++++++++ptr::write_bytes(vec_ptr,+0xfe,+2);%0A++++%7D%0A++++assert_eq!(vec,+%5B0xfefefefe,+0xfefefefe,+0,+0%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:21:34.910Z"
}