{
	"title": "std::thread - Rust",
	"url": "https://doc.rust-lang.org/stable/std/thread/index.html",
	"markdown": "# std::thread - Rust\n\n## Module [std](../index.html)::[thread](#)\n\n1.0.0 · [source](about:blank/src/std/thread/mod.rs.html#1-1856) ·\n\nExpand description\n\nNative threads.\n\n### [§](#the-threading-model)The threading model\n\nAn executing Rust program consists of a collection of native OS threads, each with their own stack and local state. Threads can be named, and provide some built-in support for low-level synchronization.\n\nCommunication between threads can be done through [channels](../sync/mpsc/index.html \"mod std::sync::mpsc\"), Rust’s message-passing types, along with [other forms of thread synchronization](../../std/sync/index.html) and shared-memory data structures. In particular, types that are guaranteed to be threadsafe are easily shared between threads using the atomically-reference-counted container, [`Arc`](../sync/struct.Arc.html \"struct std::sync::Arc\").\n\nFatal logic errors in Rust cause _thread panic_, during which a thread will unwind the stack, running destructors and freeing owned resources. While not meant as a ‘try/catch’ mechanism, panics in Rust can nonetheless be caught (unless compiling with `panic=abort`) with [`catch_unwind`](../../std/panic/fn.catch_unwind.html) and recovered from, or alternatively be resumed with [`resume_unwind`](../../std/panic/fn.resume_unwind.html). If the panic is not caught the thread will exit, but the panic may optionally be detected from a different thread with [`join`](about:blank/struct.JoinHandle.html#method.join \"method std::thread::JoinHandle::join\"). If the main thread panics without the panic being caught, the application will exit with a non-zero exit code.\n\nWhen the main thread of a Rust program terminates, the entire program shuts down, even if other threads are still running. However, this module provides convenient facilities for automatically waiting for the termination of a thread (i.e., join).\n\n### [§](#spawning-a-thread)Spawning a thread\n\nA new thread can be spawned using the [`thread::spawn`](fn.spawn.html \"fn std::thread::spawn\") function:\n\n```\nuse std::thread;\n\nthread::spawn(move || {\n    // some work here\n});\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::thread;%0A++++%0A++++thread::spawn(move+%7C%7C+%7B%0A++++++++//+some+work+here%0A++++%7D);%0A%7D&edition=2021)\n\nIn this example, the spawned thread is “detached,” which means that there is no way for the program to learn when the spawned thread completes or otherwise terminates.\n\nTo learn when a thread completes, it is necessary to capture the [`JoinHandle`](struct.JoinHandle.html \"struct std::thread::JoinHandle\") object that is returned by the call to [`spawn`](fn.spawn.html \"fn std::thread::spawn\"), which provides a `join` method that allows the caller to wait for the completion of the spawned thread:\n\n```\nuse std::thread;\n\nlet thread_join_handle = thread::spawn(move || {\n    // some work here\n});\n// some work here\nlet res = thread_join_handle.join();\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::thread;%0A++++%0A++++let+thread_join_handle+=+thread::spawn(move+%7C%7C+%7B%0A++++++++//+some+work+here%0A++++%7D);%0A++++//+some+work+here%0A++++let+res+=+thread_join_handle.join();%0A%7D&edition=2021)\n\nThe [`join`](about:blank/struct.JoinHandle.html#method.join \"method std::thread::JoinHandle::join\") method returns a [`thread::Result`](type.Result.html \"type std::thread::Result\") containing [`Ok`](about:blank/result/enum.Result.html#variant.Ok \"variant std::result::Result::Ok\") of the final value produced by the spawned thread, or [`Err`](about:blank/result/enum.Result.html#variant.Err \"variant std::result::Result::Err\") of the value given to a call to [`panic!`](../macro.panic.html \"macro std::panic\") if the thread panicked.\n\nNote that there is no parent/child relationship between a thread that spawns a new thread and the thread being spawned. In particular, the spawned thread may or may not outlive the spawning thread, unless the spawning thread is the main thread.\n\n### [§](#configuring-threads)Configuring threads\n\nA new thread can be configured before it is spawned via the [`Builder`](struct.Builder.html \"struct std::thread::Builder\") type, which currently allows you to set the name and stack size for the thread:\n\n```\nuse std::thread;\n\nthread::Builder::new().name(\"thread1\".to_string()).spawn(move || {\n    println!(\"Hello, world!\");\n});\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Ballow(unused_must_use)%5D%0Afn+main()+%7B%0A++++use+std::thread;%0A++++%0A++++thread::Builder::new().name(%22thread1%22.to_string()).spawn(move+%7C%7C+%7B%0A++++++++println!(%22Hello,+world!%22);%0A++++%7D);%0A%7D&edition=2021)\n\n### [§](#the-thread-type)The `Thread` type\n\nThreads are represented via the [`Thread`](struct.Thread.html \"struct std::thread::Thread\") type, which you can get in one of two ways:\n\n-   By spawning a new thread, e.g., using the [`thread::spawn`](fn.spawn.html \"fn std::thread::spawn\") function, and calling [`thread`](about:blank/struct.JoinHandle.html#method.thread \"method std::thread::JoinHandle::thread\") on the [`JoinHandle`](struct.JoinHandle.html \"struct std::thread::JoinHandle\").\n-   By requesting the current thread, using the [`thread::current`](fn.current.html \"fn std::thread::current\") function.\n\nThe [`thread::current`](fn.current.html \"fn std::thread::current\") function is available even for threads not spawned by the APIs of this module.\n\n### [§](#thread-local-storage)Thread-local storage\n\nThis module also provides an implementation of thread-local storage for Rust programs. Thread-local storage is a method of storing data into a global variable that each thread in the program will have its own copy of. Threads do not share this data, so accesses do not need to be synchronized.\n\nA thread-local key owns the value it contains and will destroy the value when the thread exits. It is created with the [`thread_local!`](../macro.thread_local.html \"macro std::thread_local\") macro and can contain any value that is `'static` (no borrowed pointers). It provides an accessor function, [`with`](about:blank/struct.LocalKey.html#method.with \"method std::thread::LocalKey::with\"), that yields a shared reference to the value to the specified closure. Thread-local keys allow only shared access to values, as there would be no way to guarantee uniqueness if mutable borrows were allowed. Most values will want to make use of some form of **interior mutability** through the [`Cell`](../cell/struct.Cell.html \"struct std::cell::Cell\") or [`RefCell`](../cell/struct.RefCell.html \"struct std::cell::RefCell\") types.\n\n### [§](#naming-threads)Naming threads\n\nThreads are able to have associated names for identification purposes. By default, spawned threads are unnamed. To specify a name for a thread, build the thread with [`Builder`](struct.Builder.html \"struct std::thread::Builder\") and pass the desired thread name to [`Builder::name`](about:blank/struct.Builder.html#method.name \"method std::thread::Builder::name\"). To retrieve the thread name from within the thread, use [`Thread::name`](about:blank/struct.Thread.html#method.name \"method std::thread::Thread::name\"). A couple of examples where the name of a thread gets used:\n\n-   If a panic occurs in a named thread, the thread name will be printed in the panic message.\n-   The thread name is provided to the OS where applicable (e.g., `pthread_setname_np` in unix-like platforms).\n\n### [§](#stack-size)Stack size\n\nThe default stack size is platform-dependent and subject to change. Currently, it is 2 MiB on all Tier-1 platforms.\n\nThere are two ways to manually specify the stack size for spawned threads:\n\n-   Build the thread with [`Builder`](struct.Builder.html \"struct std::thread::Builder\") and pass the desired stack size to [`Builder::stack_size`](about:blank/struct.Builder.html#method.stack_size \"method std::thread::Builder::stack_size\").\n-   Set the `RUST_MIN_STACK` environment variable to an integer representing the desired stack size (in bytes). Note that setting [`Builder::stack_size`](about:blank/struct.Builder.html#method.stack_size \"method std::thread::Builder::stack_size\") will override this. Be aware that changes to `RUST_MIN_STACK` may be ignored after program start.\n\nNote that the stack size of the main thread is _not_ determined by Rust.\n\n-   Thread factory, which can be used in order to configure the properties of a new thread.\n    \n-   An owned permission to join on a thread (block on its termination).\n    \n-   A thread local storage key which owns its contents.\n    \n-   A scope to spawn scoped threads in.\n    \n-   An owned permission to join on a scoped thread (block on its termination).\n    \n-   A handle to a thread.\n    \n-   A unique identifier for a running thread.\n    \n\n-   Returns an estimate of the default amount of parallelism a program should use.\n    \n-   Gets a handle to the thread that invokes it.\n    \n-   Determines whether the current thread is unwinding because of panic.\n    \n-   Blocks unless or until the current thread’s token is made available.\n    \n-   Blocks unless or until the current thread’s token is made available or the specified duration has been reached (may wake spuriously).\n    \n\n-   Create a scope for spawning scoped threads.\n    \n-   Puts the current thread to sleep for at least the specified amount of time.\n    \n\n-   Spawns a new thread, returning a [`JoinHandle`](struct.JoinHandle.html \"struct std::thread::JoinHandle\") for it.\n    \n-   Cooperatively gives up a timeslice to the OS scheduler.\n    \n-   Puts the current thread to sleep until the specified deadline has passed.\n    \n\n-   A specialized [`Result`](../result/enum.Result.html \"enum std::result::Result\") type for threads.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Native threads.\"><title>std::thread - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"../sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc mod\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">Module thread</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">Module thread</a></h2><div class=\"sidebar-elems\"><section><ul class=\"block\"><li><a href=\"#structs\">Structs</a></li><li><a href=\"#functions\">Functions</a></li><li><a href=\"#types\">Type Aliases</a></li></ul></section><h2><a href=\"../index.html\">In crate std</a></h2><h3><a href=\"../index.html#primitives\">Primitive Types</a></h3><ul class=\"block primitive\"><li><a href=\"../primitive.array.html\">array</a></li><li><a href=\"../primitive.bool.html\">bool</a></li><li><a href=\"../primitive.char.html\">char</a></li><li><a href=\"../primitive.f128.html\">f128</a></li><li><a href=\"../primitive.f16.html\">f16</a></li><li><a href=\"../primitive.f32.html\">f32</a></li><li><a href=\"../primitive.f64.html\">f64</a></li><li><a href=\"../primitive.fn.html\">fn</a></li><li><a href=\"../primitive.i128.html\">i128</a></li><li><a href=\"../primitive.i16.html\">i16</a></li><li><a href=\"../primitive.i32.html\">i32</a></li><li><a href=\"../primitive.i64.html\">i64</a></li><li><a href=\"../primitive.i8.html\">i8</a></li><li><a href=\"../primitive.isize.html\">isize</a></li><li><a href=\"../primitive.never.html\">never</a></li><li><a href=\"../primitive.pointer.html\">pointer</a></li><li><a href=\"../primitive.reference.html\">reference</a></li><li><a href=\"../primitive.slice.html\">slice</a></li><li><a href=\"../primitive.str.html\">str</a></li><li><a href=\"../primitive.tuple.html\">tuple</a></li><li><a href=\"../primitive.u128.html\">u128</a></li><li><a href=\"../primitive.u16.html\">u16</a></li><li><a href=\"../primitive.u32.html\">u32</a></li><li><a href=\"../primitive.u64.html\">u64</a></li><li><a href=\"../primitive.u8.html\">u8</a></li><li><a href=\"../primitive.unit.html\">unit</a></li><li><a href=\"../primitive.usize.html\">usize</a></li></ul><h3><a href=\"../index.html#modules\">Modules</a></h3><ul class=\"block mod\"><li><a href=\"../alloc/index.html\">alloc</a></li><li><a href=\"../any/index.html\">any</a></li><li><a href=\"../arch/index.html\">arch</a></li><li><a href=\"../array/index.html\">array</a></li><li><a href=\"../ascii/index.html\">ascii</a></li><li><a href=\"../assert_matches/index.html\">assert_matches</a></li><li><a href=\"../async_iter/index.html\">async_iter</a></li><li><a href=\"../backtrace/index.html\">backtrace</a></li><li><a href=\"../borrow/index.html\">borrow</a></li><li><a href=\"../boxed/index.html\">boxed</a></li><li><a href=\"../cell/index.html\">cell</a></li><li><a href=\"../char/index.html\">char</a></li><li><a href=\"../clone/index.html\">clone</a></li><li><a href=\"../cmp/index.html\">cmp</a></li><li><a href=\"../collections/index.html\">collections</a></li><li><a href=\"../convert/index.html\">convert</a></li><li><a href=\"../default/index.html\">default</a></li><li><a href=\"../env/index.html\">env</a></li><li><a href=\"../error/index.html\">error</a></li><li><a href=\"../f128/index.html\">f128</a></li><li><a href=\"../f16/index.html\">f16</a></li><li><a href=\"../f32/index.html\">f32</a></li><li><a href=\"../f64/index.html\">f64</a></li><li><a href=\"../ffi/index.html\">ffi</a></li><li><a href=\"../fmt/index.html\">fmt</a></li><li><a href=\"../fs/index.html\">fs</a></li><li><a href=\"../future/index.html\">future</a></li><li><a href=\"../hash/index.html\">hash</a></li><li><a href=\"../hint/index.html\">hint</a></li><li><a href=\"../i128/index.html\">i128</a></li><li><a href=\"../i16/index.html\">i16</a></li><li><a href=\"../i32/index.html\">i32</a></li><li><a href=\"../i64/index.html\">i64</a></li><li><a href=\"../i8/index.html\">i8</a></li><li><a href=\"../intrinsics/index.html\">intrinsics</a></li><li><a href=\"../io/index.html\">io</a></li><li><a href=\"../isize/index.html\">isize</a></li><li><a href=\"../iter/index.html\">iter</a></li><li><a href=\"../marker/index.html\">marker</a></li><li><a href=\"../mem/index.html\">mem</a></li><li><a href=\"../net/index.html\">net</a></li><li><a href=\"../num/index.html\">num</a></li><li><a href=\"../ops/index.html\">ops</a></li><li><a href=\"../option/index.html\">option</a></li><li><a href=\"../os/index.html\">os</a></li><li><a href=\"../panic/index.html\">panic</a></li><li><a href=\"../pat/index.html\">pat</a></li><li><a href=\"../path/index.html\">path</a></li><li><a href=\"../pin/index.html\">pin</a></li><li><a href=\"../prelude/index.html\">prelude</a></li><li><a href=\"../primitive/index.html\">primitive</a></li><li><a href=\"../process/index.html\">process</a></li><li><a href=\"../ptr/index.html\">ptr</a></li><li><a href=\"../rc/index.html\">rc</a></li><li><a href=\"../result/index.html\">result</a></li><li><a href=\"../simd/index.html\">simd</a></li><li><a href=\"../slice/index.html\">slice</a></li><li><a href=\"../str/index.html\">str</a></li><li><a href=\"../string/index.html\">string</a></li><li><a href=\"../sync/index.html\">sync</a></li><li><a href=\"../task/index.html\">task</a></li><li><a href=\"../thread/index.html\">thread</a></li><li><a href=\"../time/index.html\">time</a></li><li><a href=\"../u128/index.html\">u128</a></li><li><a href=\"../u16/index.html\">u16</a></li><li><a href=\"../u32/index.html\">u32</a></li><li><a href=\"../u64/index.html\">u64</a></li><li><a href=\"../u8/index.html\">u8</a></li><li><a href=\"../usize/index.html\">usize</a></li><li><a href=\"../vec/index.html\">vec</a></li></ul><h3><a href=\"../index.html#macros\">Macros</a></h3><ul class=\"block macro\"><li><a href=\"../macro.assert.html\">assert</a></li><li><a href=\"../macro.assert_eq.html\">assert_eq</a></li><li><a href=\"../macro.assert_ne.html\">assert_ne</a></li><li><a href=\"../macro.cfg.html\">cfg</a></li><li><a href=\"../macro.cfg_match.html\">cfg_match</a></li><li><a href=\"../macro.column.html\">column</a></li><li><a href=\"../macro.compile_error.html\">compile_error</a></li><li><a href=\"../macro.concat.html\">concat</a></li><li><a href=\"../macro.concat_bytes.html\">concat_bytes</a></li><li><a href=\"../macro.concat_idents.html\">concat_idents</a></li><li><a href=\"../macro.const_format_args.html\">const_format_args</a></li><li><a href=\"../macro.dbg.html\">dbg</a></li><li><a href=\"../macro.debug_assert.html\">debug_assert</a></li><li><a href=\"../macro.debug_assert_eq.html\">debug_assert_eq</a></li><li><a href=\"../macro.debug_assert_ne.html\">debug_assert_ne</a></li><li><a href=\"../macro.env.html\">env</a></li><li><a href=\"../macro.eprint.html\">eprint</a></li><li><a href=\"../macro.eprintln.html\">eprintln</a></li><li><a href=\"../macro.file.html\">file</a></li><li><a href=\"../macro.format.html\">format</a></li><li><a href=\"../macro.format_args.html\">format_args</a></li><li><a href=\"../macro.format_args_nl.html\">format_args_nl</a></li><li><a href=\"../macro.include.html\">include</a></li><li><a href=\"../macro.include_bytes.html\">include_bytes</a></li><li><a href=\"../macro.include_str.html\">include_str</a></li><li><a href=\"../macro.is_x86_feature_detected.html\">is_x86_feature_detected</a></li><li><a href=\"../macro.line.html\">line</a></li><li><a href=\"../macro.log_syntax.html\">log_syntax</a></li><li><a href=\"../macro.matches.html\">matches</a></li><li><a href=\"../macro.module_path.html\">module_path</a></li><li><a href=\"../macro.option_env.html\">option_env</a></li><li><a href=\"../macro.panic.html\">panic</a></li><li><a href=\"../macro.print.html\">print</a></li><li><a href=\"../macro.println.html\">println</a></li><li><a href=\"../macro.stringify.html\">stringify</a></li><li><a href=\"../macro.thread_local.html\">thread_local</a></li><li><a href=\"../macro.todo.html\">todo</a></li><li><a href=\"../macro.trace_macros.html\">trace_macros</a></li><li><a href=\"../macro.try.html\">try</a></li><li><a href=\"../macro.unimplemented.html\">unimplemented</a></li><li><a href=\"../macro.unreachable.html\">unreachable</a></li><li><a href=\"../macro.vec.html\">vec</a></li><li><a href=\"../macro.write.html\">write</a></li><li><a href=\"../macro.writeln.html\">writeln</a></li></ul><h3><a href=\"../index.html#keywords\">Keywords</a></h3><ul class=\"block keyword\"><li><a href=\"../keyword.SelfTy.html\">SelfTy</a></li><li><a href=\"../keyword.as.html\">as</a></li><li><a href=\"../keyword.async.html\">async</a></li><li><a href=\"../keyword.await.html\">await</a></li><li><a href=\"../keyword.break.html\">break</a></li><li><a href=\"../keyword.const.html\">const</a></li><li><a href=\"../keyword.continue.html\">continue</a></li><li><a href=\"../keyword.crate.html\">crate</a></li><li><a href=\"../keyword.dyn.html\">dyn</a></li><li><a href=\"../keyword.else.html\">else</a></li><li><a href=\"../keyword.enum.html\">enum</a></li><li><a href=\"../keyword.extern.html\">extern</a></li><li><a href=\"../keyword.false.html\">false</a></li><li><a href=\"../keyword.fn.html\">fn</a></li><li><a href=\"../keyword.for.html\">for</a></li><li><a href=\"../keyword.if.html\">if</a></li><li><a href=\"../keyword.impl.html\">impl</a></li><li><a href=\"../keyword.in.html\">in</a></li><li><a href=\"../keyword.let.html\">let</a></li><li><a href=\"../keyword.loop.html\">loop</a></li><li><a href=\"../keyword.match.html\">match</a></li><li><a href=\"../keyword.mod.html\">mod</a></li><li><a href=\"../keyword.move.html\">move</a></li><li><a href=\"../keyword.mut.html\">mut</a></li><li><a href=\"../keyword.pub.html\">pub</a></li><li><a href=\"../keyword.ref.html\">ref</a></li><li><a href=\"../keyword.return.html\">return</a></li><li><a href=\"../keyword.self.html\">self</a></li><li><a href=\"../keyword.static.html\">static</a></li><li><a href=\"../keyword.struct.html\">struct</a></li><li><a href=\"../keyword.super.html\">super</a></li><li><a href=\"../keyword.trait.html\">trait</a></li><li><a href=\"../keyword.true.html\">true</a></li><li><a href=\"../keyword.type.html\">type</a></li><li><a href=\"../keyword.union.html\">union</a></li><li><a href=\"../keyword.unsafe.html\">unsafe</a></li><li><a href=\"../keyword.use.html\">use</a></li><li><a href=\"../keyword.where.html\">where</a></li><li><a href=\"../keyword.while.html\">while</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Module <a href=\"../index.html\">std</a>::<wbr><a class=\"mod\" href=\"#\">thread</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/thread/mod.rs.html#1-1856\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Native threads.</p>\n<h3 id=\"the-threading-model\"><a class=\"doc-anchor\" href=\"#the-threading-model\">§</a>The threading model</h3>\n<p>An executing Rust program consists of a collection of native OS threads,\neach with their own stack and local state. Threads can be named, and\nprovide some built-in support for low-level synchronization.</p>\n<p>Communication between threads can be done through\n<a href=\"../sync/mpsc/index.html\" title=\"mod std::sync::mpsc\">channels</a>, Rust’s message-passing types, along with <a href=\"../../std/sync/index.html\">other forms of thread\nsynchronization</a> and shared-memory data\nstructures. In particular, types that are guaranteed to be\nthreadsafe are easily shared between threads using the\natomically-reference-counted container, <a href=\"../sync/struct.Arc.html\" title=\"struct std::sync::Arc\"><code>Arc</code></a>.</p>\n<p>Fatal logic errors in Rust cause <em>thread panic</em>, during which\na thread will unwind the stack, running destructors and freeing\nowned resources. While not meant as a ‘try/catch’ mechanism, panics\nin Rust can nonetheless be caught (unless compiling with <code>panic=abort</code>) with\n<a href=\"../../std/panic/fn.catch_unwind.html\"><code>catch_unwind</code></a> and recovered\nfrom, or alternatively be resumed with\n<a href=\"../../std/panic/fn.resume_unwind.html\"><code>resume_unwind</code></a>. If the panic\nis not caught the thread will exit, but the panic may optionally be\ndetected from a different thread with <a href=\"struct.JoinHandle.html#method.join\" title=\"method std::thread::JoinHandle::join\"><code>join</code></a>. If the main thread panics\nwithout the panic being caught, the application will exit with a\nnon-zero exit code.</p>\n<p>When the main thread of a Rust program terminates, the entire program shuts\ndown, even if other threads are still running. However, this module provides\nconvenient facilities for automatically waiting for the termination of a\nthread (i.e., join).</p>\n<h3 id=\"spawning-a-thread\"><a class=\"doc-anchor\" href=\"#spawning-a-thread\">§</a>Spawning a thread</h3>\n<p>A new thread can be spawned using the <a href=\"fn.spawn.html\" title=\"fn std::thread::spawn\"><code>thread::spawn</code></a> function:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::thread;\n\nthread::spawn(<span class=\"kw\">move </span>|| {\n    <span class=\"comment\">// some work here\n</span>});</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::thread;%0A++++%0A++++thread::spawn(move+%7C%7C+%7B%0A++++++++//+some+work+here%0A++++%7D);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>In this example, the spawned thread is “detached,” which means that there is\nno way for the program to learn when the spawned thread completes or otherwise\nterminates.</p>\n<p>To learn when a thread completes, it is necessary to capture the <a href=\"struct.JoinHandle.html\" title=\"struct std::thread::JoinHandle\"><code>JoinHandle</code></a>\nobject that is returned by the call to <a href=\"fn.spawn.html\" title=\"fn std::thread::spawn\"><code>spawn</code></a>, which provides\na <code>join</code> method that allows the caller to wait for the completion of the\nspawned thread:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::thread;\n\n<span class=\"kw\">let </span>thread_join_handle = thread::spawn(<span class=\"kw\">move </span>|| {\n    <span class=\"comment\">// some work here\n</span>});\n<span class=\"comment\">// some work here\n</span><span class=\"kw\">let </span>res = thread_join_handle.join();</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::thread;%0A++++%0A++++let+thread_join_handle+=+thread::spawn(move+%7C%7C+%7B%0A++++++++//+some+work+here%0A++++%7D);%0A++++//+some+work+here%0A++++let+res+=+thread_join_handle.join();%0A%7D&amp;edition=2021\">Run</a></div>\n<p>The <a href=\"struct.JoinHandle.html#method.join\" title=\"method std::thread::JoinHandle::join\"><code>join</code></a> method returns a <a href=\"type.Result.html\" title=\"type std::thread::Result\"><code>thread::Result</code></a> containing <a href=\"../result/enum.Result.html#variant.Ok\" title=\"variant std::result::Result::Ok\"><code>Ok</code></a> of the final\nvalue produced by the spawned thread, or <a href=\"../result/enum.Result.html#variant.Err\" title=\"variant std::result::Result::Err\"><code>Err</code></a> of the value given to\na call to <a href=\"../macro.panic.html\" title=\"macro std::panic\"><code>panic!</code></a> if the thread panicked.</p>\n<p>Note that there is no parent/child relationship between a thread that spawns a\nnew thread and the thread being spawned.  In particular, the spawned thread may or\nmay not outlive the spawning thread, unless the spawning thread is the main thread.</p>\n<h3 id=\"configuring-threads\"><a class=\"doc-anchor\" href=\"#configuring-threads\">§</a>Configuring threads</h3>\n<p>A new thread can be configured before it is spawned via the <a href=\"struct.Builder.html\" title=\"struct std::thread::Builder\"><code>Builder</code></a> type,\nwhich currently allows you to set the name and stack size for the thread:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::thread;\n\nthread::Builder::new().name(<span class=\"string\">\"thread1\"</span>.to_string()).spawn(<span class=\"kw\">move </span>|| {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"Hello, world!\"</span>);\n});</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Ballow(unused_must_use)%5D%0Afn+main()+%7B%0A++++use+std::thread;%0A++++%0A++++thread::Builder::new().name(%22thread1%22.to_string()).spawn(move+%7C%7C+%7B%0A++++++++println!(%22Hello,+world!%22);%0A++++%7D);%0A%7D&amp;edition=2021\">Run</a></div>\n<h3 id=\"the-thread-type\"><a class=\"doc-anchor\" href=\"#the-thread-type\">§</a>The <code>Thread</code> type</h3>\n<p>Threads are represented via the <a href=\"struct.Thread.html\" title=\"struct std::thread::Thread\"><code>Thread</code></a> type, which you can get in one of\ntwo ways:</p>\n<ul>\n<li>By spawning a new thread, e.g., using the <a href=\"fn.spawn.html\" title=\"fn std::thread::spawn\"><code>thread::spawn</code></a>\nfunction, and calling <a href=\"struct.JoinHandle.html#method.thread\" title=\"method std::thread::JoinHandle::thread\"><code>thread</code></a> on the <a href=\"struct.JoinHandle.html\" title=\"struct std::thread::JoinHandle\"><code>JoinHandle</code></a>.</li>\n<li>By requesting the current thread, using the <a href=\"fn.current.html\" title=\"fn std::thread::current\"><code>thread::current</code></a> function.</li>\n</ul>\n<p>The <a href=\"fn.current.html\" title=\"fn std::thread::current\"><code>thread::current</code></a> function is available even for threads not spawned\nby the APIs of this module.</p>\n<h3 id=\"thread-local-storage\"><a class=\"doc-anchor\" href=\"#thread-local-storage\">§</a>Thread-local storage</h3>\n<p>This module also provides an implementation of thread-local storage for Rust\nprograms. Thread-local storage is a method of storing data into a global\nvariable that each thread in the program will have its own copy of.\nThreads do not share this data, so accesses do not need to be synchronized.</p>\n<p>A thread-local key owns the value it contains and will destroy the value when the\nthread exits. It is created with the <a href=\"../macro.thread_local.html\" title=\"macro std::thread_local\"><code>thread_local!</code></a> macro and can contain any\nvalue that is <code>'static</code> (no borrowed pointers). It provides an accessor function,\n<a href=\"struct.LocalKey.html#method.with\" title=\"method std::thread::LocalKey::with\"><code>with</code></a>, that yields a shared reference to the value to the specified\nclosure. Thread-local keys allow only shared access to values, as there would be no\nway to guarantee uniqueness if mutable borrows were allowed. Most values\nwill want to make use of some form of <strong>interior mutability</strong> through the\n<a href=\"../cell/struct.Cell.html\" title=\"struct std::cell::Cell\"><code>Cell</code></a> or <a href=\"../cell/struct.RefCell.html\" title=\"struct std::cell::RefCell\"><code>RefCell</code></a> types.</p>\n<h3 id=\"naming-threads\"><a class=\"doc-anchor\" href=\"#naming-threads\">§</a>Naming threads</h3>\n<p>Threads are able to have associated names for identification purposes. By default, spawned\nthreads are unnamed. To specify a name for a thread, build the thread with <a href=\"struct.Builder.html\" title=\"struct std::thread::Builder\"><code>Builder</code></a> and pass\nthe desired thread name to <a href=\"struct.Builder.html#method.name\" title=\"method std::thread::Builder::name\"><code>Builder::name</code></a>. To retrieve the thread name from within the\nthread, use <a href=\"struct.Thread.html#method.name\" title=\"method std::thread::Thread::name\"><code>Thread::name</code></a>. A couple of examples where the name of a thread gets used:</p>\n<ul>\n<li>If a panic occurs in a named thread, the thread name will be printed in the panic message.</li>\n<li>The thread name is provided to the OS where applicable (e.g., <code>pthread_setname_np</code> in\nunix-like platforms).</li>\n</ul>\n<h3 id=\"stack-size\"><a class=\"doc-anchor\" href=\"#stack-size\">§</a>Stack size</h3>\n<p>The default stack size is platform-dependent and subject to change.\nCurrently, it is 2 MiB on all Tier-1 platforms.</p>\n<p>There are two ways to manually specify the stack size for spawned threads:</p>\n<ul>\n<li>Build the thread with <a href=\"struct.Builder.html\" title=\"struct std::thread::Builder\"><code>Builder</code></a> and pass the desired stack size to <a href=\"struct.Builder.html#method.stack_size\" title=\"method std::thread::Builder::stack_size\"><code>Builder::stack_size</code></a>.</li>\n<li>Set the <code>RUST_MIN_STACK</code> environment variable to an integer representing the desired stack\nsize (in bytes). Note that setting <a href=\"struct.Builder.html#method.stack_size\" title=\"method std::thread::Builder::stack_size\"><code>Builder::stack_size</code></a> will override this. Be aware that\nchanges to <code>RUST_MIN_STACK</code> may be ignored after program start.</li>\n</ul>\n<p>Note that the stack size of the main thread is <em>not</em> determined by Rust.</p>\n</div></details><h2 id=\"structs\" class=\"section-header\">Structs<a href=\"#structs\" class=\"anchor\">§</a></h2><ul class=\"item-table\"><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.AccessError.html\" title=\"struct std::thread::AccessError\">AccessError</a></div><div class=\"desc docblock-short\">An error returned by <a href=\"struct.LocalKey.html#method.try_with\"><code>LocalKey::try_with</code></a>.</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.Builder.html\" title=\"struct std::thread::Builder\">Builder</a></div><div class=\"desc docblock-short\">Thread factory, which can be used in order to configure the properties of\na new thread.</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.JoinHandle.html\" title=\"struct std::thread::JoinHandle\">JoinHandle</a></div><div class=\"desc docblock-short\">An owned permission to join on a thread (block on its termination).</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.LocalKey.html\" title=\"struct std::thread::LocalKey\">LocalKey</a></div><div class=\"desc docblock-short\">A thread local storage key which owns its contents.</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.Scope.html\" title=\"struct std::thread::Scope\">Scope</a></div><div class=\"desc docblock-short\">A scope to spawn scoped threads in.</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.ScopedJoinHandle.html\" title=\"struct std::thread::ScopedJoinHandle\">ScopedJoinHandle</a></div><div class=\"desc docblock-short\">An owned permission to join on a scoped thread (block on its termination).</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.Thread.html\" title=\"struct std::thread::Thread\">Thread</a></div><div class=\"desc docblock-short\">A handle to a thread.</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.ThreadId.html\" title=\"struct std::thread::ThreadId\">ThreadId</a></div><div class=\"desc docblock-short\">A unique identifier for a running thread.</div></li></ul><h2 id=\"functions\" class=\"section-header\">Functions<a href=\"#functions\" class=\"anchor\">§</a></h2><ul class=\"item-table\"><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.available_parallelism.html\" title=\"fn std::thread::available_parallelism\">available_parallelism</a></div><div class=\"desc docblock-short\">Returns an estimate of the default amount of parallelism a program should use.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.current.html\" title=\"fn std::thread::current\">current</a></div><div class=\"desc docblock-short\">Gets a handle to the thread that invokes it.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.panicking.html\" title=\"fn std::thread::panicking\">panicking</a></div><div class=\"desc docblock-short\">Determines whether the current thread is unwinding because of panic.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.park.html\" title=\"fn std::thread::park\">park</a></div><div class=\"desc docblock-short\">Blocks unless or until the current thread’s token is made available.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.park_timeout.html\" title=\"fn std::thread::park_timeout\">park_timeout</a></div><div class=\"desc docblock-short\">Blocks unless or until the current thread’s token is made available or\nthe specified duration has been reached (may wake spuriously).</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.park_timeout_ms.html\" title=\"fn std::thread::park_timeout_ms\">park_timeout_ms</a><span class=\"stab deprecated\" title=\"\">Deprecated</span></div><div class=\"desc docblock-short\">Use <a href=\"fn.park_timeout.html\" title=\"fn std::thread::park_timeout\"><code>park_timeout</code></a>.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.scope.html\" title=\"fn std::thread::scope\">scope</a></div><div class=\"desc docblock-short\">Create a scope for spawning scoped threads.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.sleep.html\" title=\"fn std::thread::sleep\">sleep</a></div><div class=\"desc docblock-short\">Puts the current thread to sleep for at least the specified amount of time.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.sleep_ms.html\" title=\"fn std::thread::sleep_ms\">sleep_ms</a><span class=\"stab deprecated\" title=\"\">Deprecated</span></div><div class=\"desc docblock-short\">Use <a href=\"fn.sleep.html\" title=\"fn std::thread::sleep\"><code>sleep</code></a>.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.spawn.html\" title=\"fn std::thread::spawn\">spawn</a></div><div class=\"desc docblock-short\">Spawns a new thread, returning a <a href=\"struct.JoinHandle.html\" title=\"struct std::thread::JoinHandle\"><code>JoinHandle</code></a> for it.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.yield_now.html\" title=\"fn std::thread::yield_now\">yield_now</a></div><div class=\"desc docblock-short\">Cooperatively gives up a timeslice to the OS scheduler.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.sleep_until.html\" title=\"fn std::thread::sleep_until\">sleep_until</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Puts the current thread to sleep until the specified deadline has passed.</div></li></ul><h2 id=\"types\" class=\"section-header\">Type Aliases<a href=\"#types\" class=\"anchor\">§</a></h2><ul class=\"item-table\"><li><div class=\"item-name\"><a class=\"type\" href=\"type.Result.html\" title=\"type std::thread::Result\">Result</a></div><div class=\"desc docblock-short\">A specialized <a href=\"../result/enum.Result.html\" title=\"enum std::result::Result\"><code>Result</code></a> type for threads.</div></li></ul></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:11:09.061Z"
}