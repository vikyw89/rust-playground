{
	"title": "simd_scatter in std::intrinsics::simd - Rust",
	"url": "https://doc.rust-lang.org/stable/std/intrinsics/simd/fn.simd_scatter.html",
	"markdown": "# simd\\_scatter in std::intrinsics::simd - Rust\n\n```\npub unsafe extern \"rust-intrinsic\" fn simd_scatter<T, U, V>(\n    val: T,\n    ptr: U,\n    mask: V,\n)\n```\n\nðŸ”¬This is a nightly-only experimental API. (`core_intrinsics`)\n\nExpand description\n\nWrite to a vector of pointers.\n\n`T` must be a vector.\n\n`U` must be a vector of pointers to the element type of `T`, with the same length as `T`.\n\n`V` must be a vector of integers with the same length as `T` (but any element size).\n\nFor each pointer in `ptr`, if the corresponding value in `mask` is `!0`, write the corresponding value in `val` to the pointer. Otherwise if the corresponding value in `mask` is `0`, do nothing.\n\nThe stores happen in left-to-right order. (This is relevant in case two of the stores overlap.)\n\n## [Â§](#safety)Safety\n\nUnmasked values in `T` must be writeable as if by `<ptr>::write` (e.g. aligned to the element type).\n\n`mask` must only contain `0` or `!0` values.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Write to a vector of pointers.\"><title>simd_scatter in std::intrinsics::simd - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../../\" data-static-root-path=\"../../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc fn\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><div class=\"sidebar-elems\"><h2><a href=\"index.html\">In std::intrinsics::simd</a></h2><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.simd_add.html\">simd_add</a></li><li><a href=\"fn.simd_and.html\">simd_and</a></li><li><a href=\"fn.simd_arith_offset.html\">simd_arith_offset</a></li><li><a href=\"fn.simd_as.html\">simd_as</a></li><li><a href=\"fn.simd_bitmask.html\">simd_bitmask</a></li><li><a href=\"fn.simd_bitreverse.html\">simd_bitreverse</a></li><li><a href=\"fn.simd_bswap.html\">simd_bswap</a></li><li><a href=\"fn.simd_cast.html\">simd_cast</a></li><li><a href=\"fn.simd_cast_ptr.html\">simd_cast_ptr</a></li><li><a href=\"fn.simd_ceil.html\">simd_ceil</a></li><li><a href=\"fn.simd_ctlz.html\">simd_ctlz</a></li><li><a href=\"fn.simd_ctpop.html\">simd_ctpop</a></li><li><a href=\"fn.simd_cttz.html\">simd_cttz</a></li><li><a href=\"fn.simd_div.html\">simd_div</a></li><li><a href=\"fn.simd_eq.html\">simd_eq</a></li><li><a href=\"fn.simd_expose_provenance.html\">simd_expose_provenance</a></li><li><a href=\"fn.simd_extract.html\">simd_extract</a></li><li><a href=\"fn.simd_fabs.html\">simd_fabs</a></li><li><a href=\"fn.simd_fcos.html\">simd_fcos</a></li><li><a href=\"fn.simd_fexp.html\">simd_fexp</a></li><li><a href=\"fn.simd_fexp2.html\">simd_fexp2</a></li><li><a href=\"fn.simd_flog.html\">simd_flog</a></li><li><a href=\"fn.simd_flog10.html\">simd_flog10</a></li><li><a href=\"fn.simd_flog2.html\">simd_flog2</a></li><li><a href=\"fn.simd_floor.html\">simd_floor</a></li><li><a href=\"fn.simd_fma.html\">simd_fma</a></li><li><a href=\"fn.simd_fmax.html\">simd_fmax</a></li><li><a href=\"fn.simd_fmin.html\">simd_fmin</a></li><li><a href=\"fn.simd_fsin.html\">simd_fsin</a></li><li><a href=\"fn.simd_fsqrt.html\">simd_fsqrt</a></li><li><a href=\"fn.simd_gather.html\">simd_gather</a></li><li><a href=\"fn.simd_ge.html\">simd_ge</a></li><li><a href=\"fn.simd_gt.html\">simd_gt</a></li><li><a href=\"fn.simd_insert.html\">simd_insert</a></li><li><a href=\"fn.simd_le.html\">simd_le</a></li><li><a href=\"fn.simd_lt.html\">simd_lt</a></li><li><a href=\"fn.simd_masked_load.html\">simd_masked_load</a></li><li><a href=\"fn.simd_masked_store.html\">simd_masked_store</a></li><li><a href=\"fn.simd_mul.html\">simd_mul</a></li><li><a href=\"fn.simd_ne.html\">simd_ne</a></li><li><a href=\"fn.simd_neg.html\">simd_neg</a></li><li><a href=\"fn.simd_or.html\">simd_or</a></li><li><a href=\"fn.simd_reduce_add_ordered.html\">simd_reduce_add_ordered</a></li><li><a href=\"fn.simd_reduce_add_unordered.html\">simd_reduce_add_unordered</a></li><li><a href=\"fn.simd_reduce_all.html\">simd_reduce_all</a></li><li><a href=\"fn.simd_reduce_and.html\">simd_reduce_and</a></li><li><a href=\"fn.simd_reduce_any.html\">simd_reduce_any</a></li><li><a href=\"fn.simd_reduce_max.html\">simd_reduce_max</a></li><li><a href=\"fn.simd_reduce_min.html\">simd_reduce_min</a></li><li><a href=\"fn.simd_reduce_mul_ordered.html\">simd_reduce_mul_ordered</a></li><li><a href=\"fn.simd_reduce_mul_unordered.html\">simd_reduce_mul_unordered</a></li><li><a href=\"fn.simd_reduce_or.html\">simd_reduce_or</a></li><li><a href=\"fn.simd_reduce_xor.html\">simd_reduce_xor</a></li><li><a href=\"fn.simd_rem.html\">simd_rem</a></li><li><a href=\"fn.simd_round.html\">simd_round</a></li><li><a href=\"fn.simd_saturating_add.html\">simd_saturating_add</a></li><li><a href=\"fn.simd_saturating_sub.html\">simd_saturating_sub</a></li><li><a href=\"fn.simd_scatter.html\">simd_scatter</a></li><li><a href=\"fn.simd_select.html\">simd_select</a></li><li><a href=\"fn.simd_select_bitmask.html\">simd_select_bitmask</a></li><li><a href=\"fn.simd_shl.html\">simd_shl</a></li><li><a href=\"fn.simd_shr.html\">simd_shr</a></li><li><a href=\"fn.simd_shuffle.html\">simd_shuffle</a></li><li><a href=\"fn.simd_shuffle_generic.html\">simd_shuffle_generic</a></li><li><a href=\"fn.simd_sub.html\">simd_sub</a></li><li><a href=\"fn.simd_trunc.html\">simd_trunc</a></li><li><a href=\"fn.simd_with_exposed_provenance.html\">simd_with_exposed_provenance</a></li><li><a href=\"fn.simd_xor.html\">simd_xor</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type â€˜Sâ€™ or â€˜/â€™ to search, â€˜?â€™ for more optionsâ€¦\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Function <a href=\"../../index.html\">std</a>::<wbr><a href=\"../index.html\">intrinsics</a>::<wbr><a href=\"index.html\">simd</a>::<wbr><a class=\"fn\" href=\"#\">simd_scatter</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/intrinsics/simd.rs.html#302\">source</a> Â· <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>âˆ’</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub unsafe extern \"rust-intrinsic\" fn simd_scatter&lt;T, U, V&gt;(\n    val: T,\n    ptr: U,\n    mask: V,\n)</code></pre><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>core_intrinsics</code>)</span></div></span><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Write to a vector of pointers.</p>\n<p><code>T</code> must be a vector.</p>\n<p><code>U</code> must be a vector of pointers to the element type of <code>T</code>, with the same length as <code>T</code>.</p>\n<p><code>V</code> must be a vector of integers with the same length as <code>T</code> (but any element size).</p>\n<p>For each pointer in <code>ptr</code>, if the corresponding value in <code>mask</code> is <code>!0</code>, write the\ncorresponding value in <code>val</code> to the pointer.\nOtherwise if the corresponding value in <code>mask</code> is <code>0</code>, do nothing.</p>\n<p>The stores happen in left-to-right order.\n(This is relevant in case two of the stores overlap.)</p>\n<h2 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">Â§</a>Safety</h2>\n<p>Unmasked values in <code>T</code> must be writeable as if by <code>&lt;ptr&gt;::write</code> (e.g. aligned to the element\ntype).</p>\n<p><code>mask</code> must only contain <code>0</code> or <code>!0</code> values.</p>\n</div></details></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:26:48.843Z"
}