{
	"title": "Unstable features - The rustdoc book",
	"url": "https://doc.rust-lang.org/nightly/rustdoc/unstable-features.html",
	"markdown": "# Unstable features - The rustdoc book\n\nRustdoc is under active development, and like the Rust compiler, some features are only available on nightly releases. Some of these features are new and need some more testing before they're able to be released to the world at large, and some of them are tied to features in the Rust compiler that are unstable. Several features here require a matching `#![feature(...)]` attribute to enable, and thus are more fully documented in the [Unstable Book](../unstable-book/index.html). Those sections will link over there as necessary.\n\n## [Nightly-gated functionality](#nightly-gated-functionality)\n\nThese features just require a nightly build to operate. Unlike the other features on this page, these don't need to be \"turned on\" with a command-line flag or a `#![feature(...)]` attribute in your crate. This can give them some subtle fallback modes when used on a stable release, so be careful!\n\n### [Error numbers for `compile-fail` doctests](#error-numbers-for-compile-fail-doctests)\n\nAs detailed in [the chapter on documentation tests](about:blank/write-documentation/documentation-tests.html#attributes), you can add a `compile_fail` attribute to a doctest to state that the test should fail to compile. However, on nightly, you can optionally add an error number to state that a doctest should emit a specific error number:\n\n```markdown\n```compile_fail,E0044\nextern { fn some_func<T>(x: T); }\n```\n\n```\n\nThis is used by the error index to ensure that the samples that correspond to a given error number properly emit that error code. However, these error codes aren't guaranteed to be the only thing that a piece of code emits from version to version, so this is unlikely to be stabilized in the future.\n\nAttempting to use these error numbers on stable will result in the code sample being interpreted as plain text.\n\n### [`missing_doc_code_examples` lint](#missing_doc_code_examples-lint)\n\nThis lint will emit a warning if an item doesn't have a code example in its documentation. It can be enabled using:\n\n```rust\n#![deny(rustdoc::missing_doc_code_examples)]\n```\n\n## [Extensions to the `#[doc]` attribute](#extensions-to-the-doc-attribute)\n\nThese features operate by extending the `#[doc]` attribute, and thus can be caught by the compiler and enabled with a `#![feature(...)]` attribute in your crate.\n\n### [`#[doc(cfg)]`: Recording what platforms or features are required for code to be present](#doccfg-recording-what-platforms-or-features-are-required-for-code-to-be-present)\n\n-   Tracking issue: [#43781](https://github.com/rust-lang/rust/issues/43781)\n\nYou can use `#[doc(cfg(...))]` to tell Rustdoc exactly which platform items appear on. This has two effects:\n\n1.  doctests will only run on the appropriate platforms, and\n2.  When Rustdoc renders documentation for that item, it will be accompanied by a banner explaining that the item is only available on certain platforms.\n\n`#[doc(cfg)]` is intended to be used alongside [`#[cfg(doc)]`](./advanced-features.html). For example, `#[cfg(any(windows, doc))]` will preserve the item either on Windows or during the documentation process. Then, adding a new attribute `#[doc(cfg(windows))]` will tell Rustdoc that the item is supposed to be used on Windows. For example:\n\n```rust\n#![allow(unused)]\n#![feature(doc_cfg)]\n\nfn main() {\n/// Token struct that can only be used on Windows.\n#[cfg(any(windows, doc))]\n#[doc(cfg(windows))]\npub struct WindowsToken;\n\n/// Token struct that can only be used on Unix.\n#[cfg(any(unix, doc))]\n#[doc(cfg(unix))]\npub struct UnixToken;\n\n/// Token struct that is only available with the `serde` feature\n#[cfg(feature = \"serde\")]\n#[doc(cfg(feature = \"serde\"))]\n#[derive(serde::Deserialize)]\npub struct SerdeToken;\n}\n```\n\nIn this sample, the tokens will only appear on their respective platforms, but they will both appear in documentation.\n\n`#[doc(cfg(...))]` was introduced to be used by the standard library and currently requires the `#![feature(doc_cfg)]` feature gate. For more information, see [its chapter in the Unstable Book](../unstable-book/language-features/doc-cfg.html) and [its tracking issue](https://github.com/rust-lang/rust/issues/43781).\n\n### [`doc_auto_cfg`: Automatically generate `#[doc(cfg)]`](#doc_auto_cfg-automatically-generate-doccfg)\n\n-   Tracking issue: [#43781](https://github.com/rust-lang/rust/issues/43781)\n\n`doc_auto_cfg` is an extension to the `#[doc(cfg)]` feature. With it, you don't need to add `#[doc(cfg(...)]` anymore unless you want to override the default behaviour. So if we take the previous source code:\n\n```rust\n#![allow(unused)]\n#![feature(doc_auto_cfg)]\n\nfn main() {\n/// Token struct that can only be used on Windows.\n#[cfg(any(windows, doc))]\npub struct WindowsToken;\n\n/// Token struct that can only be used on Unix.\n#[cfg(any(unix, doc))]\npub struct UnixToken;\n\n/// Token struct that is only available with the `serde` feature\n#[cfg(feature = \"serde\")]\n#[derive(serde::Deserialize)]\npub struct SerdeToken;\n}\n```\n\nIt'll render almost the same, the difference being that `doc` will also be displayed. To fix this, you can use `doc_cfg_hide`:\n\n```rust\n#![allow(unused)]\n#![feature(doc_cfg_hide)]\n#![doc(cfg_hide(doc))]\nfn main() {\n}\n```\n\nAnd `doc` won't show up anymore!\n\n### [Adding your trait to the \"Notable traits\" dialog](#adding-your-trait-to-the-notable-traits-dialog)\n\n-   Tracking issue: [#45040](https://github.com/rust-lang/rust/issues/45040)\n\nRustdoc keeps a list of a few traits that are believed to be \"fundamental\" to types that implement them. These traits are intended to be the primary interface for their implementers, and are often most of the API available to be documented on their types. For this reason, Rustdoc will track when a given type implements one of these traits and call special attention to it when a function returns one of these types. This is the \"Notable traits\" dialog, accessible as a circled `i` button next to the function, which, when clicked, shows the dialog.\n\nIn the standard library, some of the traits that are part of this list are `Iterator`, `Future`, `io::Read`, and `io::Write`. However, rather than being implemented as a hard-coded list, these traits have a special marker attribute on them: `#[doc(notable_trait)]`. This means that you can apply this attribute to your own trait to include it in the \"Notable traits\" dialog in documentation.\n\nThe `#[doc(notable_trait)]` attribute currently requires the `#![feature(doc_notable_trait)]` feature gate. For more information, see [its chapter in the Unstable Book](../unstable-book/language-features/doc-notable-trait.html) and [its tracking issue](https://github.com/rust-lang/rust/issues/45040).\n\n### [Exclude certain dependencies from documentation](#exclude-certain-dependencies-from-documentation)\n\n-   Tracking issue: [#44027](https://github.com/rust-lang/rust/issues/44027)\n\nThe standard library uses several dependencies which, in turn, use several types and traits from the standard library. In addition, there are several compiler-internal crates that are not considered to be part of the official standard library, and thus would be a distraction to include in documentation. It's not enough to exclude their crate documentation, since information about trait implementations appears on the pages for both the type and the trait, which can be in different crates!\n\nTo prevent internal types from being included in documentation, the standard library adds an attribute to their `extern crate` declarations: `#[doc(masked)]`. This causes Rustdoc to \"mask out\" types from these crates when building lists of trait implementations.\n\nThe `#[doc(masked)]` attribute is intended to be used internally, and requires the `#![feature(doc_masked)]` feature gate. For more information, see [its chapter in the Unstable Book](../unstable-book/language-features/doc-masked.html) and [its tracking issue](https://github.com/rust-lang/rust/issues/44027).\n\n### [Document primitives](#document-primitives)\n\nThis is for Rust compiler internal use only.\n\nSince primitive types are defined in the compiler, there's no place to attach documentation attributes. The `#[rustc_doc_primitive = \"...\"]` attribute is used by the standard library to provide a way to generate documentation for primitive types, and requires `#![feature(rustc_attrs)]` to enable.\n\n### [Document keywords](#document-keywords)\n\nThis is for Rust compiler internal use only.\n\nRust keywords are documented in the standard library (look for `match` for example).\n\nTo do so, the `#[doc(keyword = \"...\")]` attribute is used. Example:\n\n```rust\n#![allow(unused)]\n#![feature(rustdoc_internals)]\n#![allow(internal_features)]\n\nfn main() {\n/// Some documentation about the keyword.\n#[doc(keyword = \"keyword\")]\nmod empty_mod {}\n}\n```\n\n### [Use the Rust logo as the crate logo](#use-the-rust-logo-as-the-crate-logo)\n\nThis is for official Rust project use only.\n\nInternal Rustdoc pages like settings.html and scrape-examples-help.html show the Rust logo. This logo is tracked as a static resource. The attribute `#![doc(rust_logo)]` makes this same built-in resource act as the main logo.\n\n```rust\n#![allow(unused)]\n#![feature(rustdoc_internals)]\n#![allow(internal_features)]\n#![doc(rust_logo)]\nfn main() {\n//! This crate has the Rust(tm) branding on it.\n}\n```\n\n## [Effects of other nightly features](#effects-of-other-nightly-features)\n\nThese nightly-only features are not primarily related to Rustdoc, but have convenient effects on the documentation produced.\n\n### [`fundamental` types](#fundamental-types)\n\nAnnotating a type with `#[fundamental]` primarily influences coherence rules about generic types, i.e., they alter whether other crates can provide implementations for that type. The unstable book [links to further information](https://doc.rust-lang.org/unstable-book/language-features/fundamental.html).\n\nFor documentation, this has an additional side effect: If a method is implemented on `F<T>` (or `F<&T>`), where `F` is a fundamental type, then the method is not only documented at the page about `F`, but also on the page about `T`. In a sense, it makes the type transparent to Rustdoc. This is especially convenient for types that work as annotated pointers, such as `Pin<&mut T>`, as it ensures that methods only implemented through those annotated pointers can still be found with the type they act on.\n\nIf the `fundamental` feature's effect on coherence is not intended, such a type can be marked as fundamental only for purposes of documentation by introducing a custom feature and limiting the use of `fundamental` to when documentation is built.\n\n## [Unstable command-line arguments](#unstable-command-line-arguments)\n\nThese features are enabled by passing a command-line flag to Rustdoc, but the flags in question are themselves marked as unstable. To use any of these options, pass `-Z unstable-options` as well as the flag in question to Rustdoc on the command-line. To do this from Cargo, you can either use the `RUSTDOCFLAGS` environment variable or the `cargo rustdoc` command.\n\n### [`--markdown-before-content`: include rendered Markdown before the content](#--markdown-before-content-include-rendered-markdown-before-the-content)\n\n-   Tracking issue: [#44027](https://github.com/rust-lang/rust/issues/44027)\n\nUsing this flag looks like this:\n\n```bash\n$ rustdoc src/lib.rs -Z unstable-options --markdown-before-content extra.md\n$ rustdoc README.md -Z unstable-options --markdown-before-content extra.md\n\n```\n\nJust like `--html-before-content`, this allows you to insert extra content inside the `<body>` tag but before the other content `rustdoc` would normally produce in the rendered documentation. However, instead of directly inserting the file verbatim, `rustdoc` will pass the files through a Markdown renderer before inserting the result into the file.\n\n### [`--markdown-after-content`: include rendered Markdown after the content](#--markdown-after-content-include-rendered-markdown-after-the-content)\n\nUsing this flag looks like this:\n\n```bash\n$ rustdoc src/lib.rs -Z unstable-options --markdown-after-content extra.md\n$ rustdoc README.md -Z unstable-options --markdown-after-content extra.md\n\n```\n\nJust like `--html-after-content`, this allows you to insert extra content before the `</body>` tag but after the other content `rustdoc` would normally produce in the rendered documentation. However, instead of directly inserting the file verbatim, `rustdoc` will pass the files through a Markdown renderer before inserting the result into the file.\n\n### [`--playground-url`: control the location of the playground](#--playground-url-control-the-location-of-the-playground)\n\nUsing this flag looks like this:\n\n```bash\n$ rustdoc src/lib.rs -Z unstable-options --playground-url https://play.rust-lang.org/\n\n```\n\nWhen rendering a crate's docs, this flag gives the base URL of the Rust Playground, to use for generating `Run` buttons. Unlike `--markdown-playground-url`, this argument works for standalone Markdown files _and_ Rust crates. This works the same way as adding `#![doc(html_playground_url = \"url\")]` to your crate root, as mentioned in [the chapter about the `#[doc]` attribute](about:blank/write-documentation/the-doc-attribute.html#html_playground_url). Please be aware that the official Rust Playground at https://play.rust-lang.org does not have every crate available, so if your examples require your crate, make sure the playground you provide has your crate available.\n\nIf both `--playground-url` and `--markdown-playground-url` are present when rendering a standalone Markdown file, the URL given to `--markdown-playground-url` will take precedence. If both `--playground-url` and `#![doc(html_playground_url = \"url\")]` are present when rendering crate docs, the attribute will take precedence.\n\n### [`--sort-modules-by-appearance`: control how items on module pages are sorted](#--sort-modules-by-appearance-control-how-items-on-module-pages-are-sorted)\n\nUsing this flag looks like this:\n\n```bash\n$ rustdoc src/lib.rs -Z unstable-options --sort-modules-by-appearance\n\n```\n\nOrdinarily, when `rustdoc` prints items in module pages, it will sort them alphabetically (taking some consideration for their stability, and names that end in a number). Giving this flag to `rustdoc` will disable this sorting and instead make it print the items in the order they appear in the source.\n\n### [`--show-type-layout`: add a section to each type's docs describing its memory layout](#--show-type-layout-add-a-section-to-each-types-docs-describing-its-memory-layout)\n\n-   Tracking issue: [#113248](https://github.com/rust-lang/rust/issues/113248)\n\nUsing this flag looks like this:\n\n```bash\n$ rustdoc src/lib.rs -Z unstable-options --show-type-layout\n\n```\n\nWhen this flag is passed, rustdoc will add a \"Layout\" section at the bottom of each type's docs page that includes a summary of the type's memory layout as computed by rustc. For example, rustdoc will show the size in bytes that a value of that type will take in memory.\n\nNote that most layout information is **completely unstable** and may even differ between compilations.\n\n### [`--resource-suffix`: modifying the name of CSS/JavaScript in crate docs](#--resource-suffix-modifying-the-name-of-cssjavascript-in-crate-docs)\n\n-   Tracking issue: [#54765](https://github.com/rust-lang/rust/issues/54765)\n\nUsing this flag looks like this:\n\n```bash\n$ rustdoc src/lib.rs -Z unstable-options --resource-suffix suf\n\n```\n\nWhen rendering docs, `rustdoc` creates several CSS and JavaScript files as part of the output. Since all these files are linked from every page, changing where they are can be cumbersome if you need to specially cache them. This flag will rename all these files in the output to include the suffix in the filename. For example, `light.css` would become `light-suf.css` with the above command.\n\n### [`--extern-html-root-url`: control how rustdoc links to non-local crates](#--extern-html-root-url-control-how-rustdoc-links-to-non-local-crates)\n\nUsing this flag looks like this:\n\n```bash\n$ rustdoc src/lib.rs -Z unstable-options --extern-html-root-url some-crate=https://example.com/some-crate/1.0.1\n\n```\n\nOrdinarily, when rustdoc wants to link to a type from a different crate, it looks in two places: docs that already exist in the output directory, or the `#![doc(doc_html_root)]` set in the other crate. However, if you want to link to docs that exist in neither of those places, you can use these flags to control that behavior. When the `--extern-html-root-url` flag is given with a name matching one of your dependencies, rustdoc use that URL for those docs. Keep in mind that if those docs exist in the output directory, those local docs will still override this flag.\n\n### [`-Z force-unstable-if-unmarked`](#-z-force-unstable-if-unmarked)\n\nUsing this flag looks like this:\n\n```bash\n$ rustdoc src/lib.rs -Z force-unstable-if-unmarked\n\n```\n\nThis is an internal flag intended for the standard library and compiler that applies an `#[unstable]` attribute to any dependent crate that doesn't have another stability attribute. This allows `rustdoc` to be able to generate documentation for the compiler crates and the standard library, as an equivalent command-line argument is provided to `rustc` when building those crates.\n\n### [`--index-page`: provide a top-level landing page for docs](#--index-page-provide-a-top-level-landing-page-for-docs)\n\nThis feature allows you to generate an index-page with a given markdown file. A good example of it is the [rust documentation index](https://doc.rust-lang.org/nightly/index.html).\n\nWith this, you'll have a page which you can customize as much as you want at the top of your crates.\n\nUsing `index-page` option enables `enable-index-page` option as well.\n\n### [`--enable-index-page`: generate a default index page for docs](#--enable-index-page-generate-a-default-index-page-for-docs)\n\nThis feature allows the generation of a default index-page which lists the generated crates.\n\n### [`--nocapture`: disable output capture for test](#--nocapture-disable-output-capture-for-test)\n\nWhen this flag is used with `--test`, the output (stdout and stderr) of your tests won't be captured by rustdoc. Instead, the output will be directed to your terminal, as if you had run the test executable manually. This is especially useful for debugging your tests!\n\n### [`--check`: only checks the documentation](#--check-only-checks-the-documentation)\n\nWhen this flag is supplied, rustdoc will type check and lint your code, but will not generate any documentation or run your doctests.\n\nUsing this flag looks like:\n\n```bash\nrustdoc -Z unstable-options --check src/lib.rs\n\n```\n\n### [`--static-root-path`: control how static files are loaded in HTML output](#--static-root-path-control-how-static-files-are-loaded-in-html-output)\n\nUsing this flag looks like this:\n\n```bash\n$ rustdoc src/lib.rs -Z unstable-options --static-root-path '/cache/'\n\n```\n\nThis flag controls how rustdoc links to its static files on HTML pages. If you're hosting a lot of crates' docs generated by the same version of rustdoc, you can use this flag to cache rustdoc's CSS, JavaScript, and font files in a single location, rather than duplicating it once per \"doc root\" (grouping of crate docs generated into the same output directory, like with `cargo doc`). Per-crate files like the search index will still load from the documentation root, but anything that gets renamed with `--resource-suffix` will load from the given path.\n\n### [`--persist-doctests`: persist doctest executables after running](#--persist-doctests-persist-doctest-executables-after-running)\n\n-   Tracking issue: [#56925](https://github.com/rust-lang/rust/issues/56925)\n\nUsing this flag looks like this:\n\n```bash\n$ rustdoc src/lib.rs --test -Z unstable-options --persist-doctests target/rustdoctest\n\n```\n\nThis flag allows you to keep doctest executables around after they're compiled or run. Usually, rustdoc will immediately discard a compiled doctest after it's been tested, but with this option, you can keep those binaries around for farther testing.\n\n### [`--show-coverage`: calculate the percentage of items with documentation](#--show-coverage-calculate-the-percentage-of-items-with-documentation)\n\n-   Tracking issue: [#58154](https://github.com/rust-lang/rust/issues/58154)\n\nUsing this flag looks like this:\n\n```bash\n$ rustdoc src/lib.rs -Z unstable-options --show-coverage\n\n```\n\nIt generates something like this:\n\n```bash\n+-------------------------------------+------------+------------+------------+------------+\n| File                                | Documented | Percentage |   Examples | Percentage |\n+-------------------------------------+------------+------------+------------+------------+\n| lib.rs                              |          4 |     100.0% |          1 |      25.0% |\n+-------------------------------------+------------+------------+------------+------------+\n| Total                               |          4 |     100.0% |          1 |      25.0% |\n+-------------------------------------+------------+------------+------------+------------+\n\n```\n\nIf you want to determine how many items in your crate are documented, pass this flag to rustdoc. When it receives this flag, it will count the public items in your crate that have documentation, and print out the counts and a percentage instead of generating docs.\n\nSome methodology notes about what rustdoc counts in this metric:\n\n-   Rustdoc will only count items from your crate (i.e. items re-exported from other crates don't count).\n-   Docs written directly onto inherent impl blocks are not counted, even though their doc comments are displayed, because the common pattern in Rust code is to write all inherent methods into the same impl block.\n-   Items in a trait implementation are not counted, as those impls will inherit any docs from the trait itself.\n-   By default, only public items are counted. To count private items as well, pass `--document-private-items` at the same time.\n\nPublic items that are not documented can be seen with the built-in `missing_docs` lint. Private items that are not documented can be seen with Clippy's `missing_docs_in_private_items` lint.\n\nCalculating code examples follows these rules:\n\n1.  These items aren't accounted by default:\n\n-   struct/union field\n-   enum variant\n-   constant\n-   static\n-   typedef\n\n2.  If one of the previously listed items has a code example, then it'll be counted.\n\n#### [JSON output](#json-output)\n\nWhen using `--output-format json` with this option, it will display the coverage information in JSON format. For example, here is the JSON for a file with one documented item and one undocumented item:\n\n```rust\n#![allow(unused)]\nfn main() {\n/// This item has documentation\npub fn foo() {}\n\npub fn no_documentation() {}\n}\n```\n\n```json\n{\"no_std.rs\":{\"total\":3,\"with_docs\":1,\"total_examples\":3,\"with_examples\":0}}\n\n```\n\nNote that the third item is the crate root, which in this case is undocumented.\n\n### [`-w`/`--output-format`: output format](#-w--output-format-output-format)\n\n`--output-format json` emits documentation in the experimental [JSON format](https://doc.rust-lang.org/nightly/nightly-rustc/rustdoc_json_types/). `--output-format html` has no effect, and is also accepted on stable toolchains.\n\nJSON Output for toolchain crates (`std`, `alloc`, `core`, `test`, and `proc_macro`) is available via the `rust-docs-json` rustup component.\n\n```shell\nrustup component add --toolchain nightly rust-docs-json\n\n```\n\nThen the json files will be present in the `share/doc/rust/json/` directory of the rustup toolchain directory.\n\nIt can also be used with `--show-coverage`. Take a look at its [documentation](#--show-coverage-calculate-the-percentage-of-items-with-documentation) for more information.\n\n### [`--enable-per-target-ignores`: allow `ignore-foo` style filters for doctests](#--enable-per-target-ignores-allow-ignore-foo-style-filters-for-doctests)\n\n-   Tracking issue: [#64245](https://github.com/rust-lang/rust/issues/64245)\n\nUsing this flag looks like this:\n\n```bash\n$ rustdoc src/lib.rs -Z unstable-options --enable-per-target-ignores\n\n```\n\nThis flag allows you to tag doctests with compiletest style `ignore-foo` filters that prevent rustdoc from running that test if the target triple string contains foo. For example:\n\n```rust\n#![allow(unused)]\nfn main() {\n///```ignore-foo,ignore-bar\n///assert!(2 == 2);\n///```\nstruct Foo;\n}\n```\n\nThis will not be run when the build target is `super-awesome-foo` or `less-bar-awesome`. If the flag is not enabled, then rustdoc will consume the filter, but do nothing with it, and the above example will be run for all targets. If you want to preserve backwards compatibility for older versions of rustdoc, you can use\n\n```rust\n#![allow(unused)]\nfn main() {\n///```ignore,ignore-foo\n///assert!(2 == 2);\n///```\nstruct Foo;\n}\n```\n\nIn older versions, this will be ignored on all targets, but on newer versions `ignore-gnu` will override `ignore`.\n\n### [`--runtool`, `--runtool-arg`: program to run tests with; args to pass to it](#--runtool---runtool-arg-program-to-run-tests-with-args-to-pass-to-it)\n\n-   Tracking issue: [#64245](https://github.com/rust-lang/rust/issues/64245)\n\nUsing these options looks like this:\n\n```bash\n$ rustdoc src/lib.rs -Z unstable-options --runtool runner --runtool-arg --do-thing --runtool-arg --do-other-thing\n\n```\n\nThese options can be used to run the doctest under a program, and also pass arguments to that program. For example, if you want to run your doctests under valgrind you might run\n\n```bash\n$ rustdoc src/lib.rs -Z unstable-options --runtool valgrind\n\n```\n\nAnother use case would be to run a test inside an emulator, or through a Virtual Machine.\n\n### [`--with-examples`: include examples of uses of items as documentation](#--with-examples-include-examples-of-uses-of-items-as-documentation)\n\n-   Tracking issue: [#88791](https://github.com/rust-lang/rust/issues/88791)\n\nThis option, combined with `--scrape-examples-target-crate` and `--scrape-examples-output-path`, is used to implement the functionality in [RFC #3123](https://github.com/rust-lang/rfcs/pull/3123). Uses of an item (currently functions / call-sites) are found in a crate and its reverse-dependencies, and then the uses are included as documentation for that item. This feature is intended to be used via `cargo doc --scrape-examples`, but the rustdoc-only workflow looks like:\n\n```bash\n$ rustdoc examples/ex.rs -Z unstable-options \\\n    --extern foobar=target/deps/libfoobar.rmeta \\\n    --scrape-examples-target-crate foobar \\\n    --scrape-examples-output-path output.calls\n$ rustdoc src/lib.rs -Z unstable-options --with-examples output.calls\n\n```\n\nFirst, the library must be checked to generate an `rmeta`. Then a reverse-dependency like `examples/ex.rs` is given to rustdoc with the target crate being documented (`foobar`) and a path to output the calls (`output.calls`). Then, the generated calls file can be passed via `--with-examples` to the subsequent documentation of `foobar`.\n\nTo scrape examples from test code, e.g. functions marked `#[test]`, then add the `--scrape-tests` flag.\n\n### [`--generate-link-to-definition`: Generate links on types in source code](#--generate-link-to-definition-generate-links-on-types-in-source-code)\n\n-   Tracking issue: [#89095](https://github.com/rust-lang/rust/issues/89095)\n\nThis flag enables the generation of links in the source code pages which allow the reader to jump to a type definition.",
	"html": "<!DOCTYPE html><html lang=\"en\" class=\"light\" dir=\"ltr\"><head>\n        <!-- Book generated using mdBook -->\n        <meta charset=\"UTF-8\">\n        <title>Unstable features - The rustdoc book</title>\n\n\n        <!-- Custom HTML head -->\n        \n        <meta name=\"description\" content=\"\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <meta name=\"theme-color\" content=\"rgb(255, 255, 255)\">\n\n        <link rel=\"icon\" href=\"favicon.svg\">\n        <link rel=\"shortcut icon\" href=\"favicon.png\">\n        <link rel=\"stylesheet\" href=\"css/variables.css\">\n        <link rel=\"stylesheet\" href=\"css/general.css\">\n        <link rel=\"stylesheet\" href=\"css/chrome.css\">\n        <link rel=\"stylesheet\" href=\"css/print.css\" media=\"print\">\n\n        <!-- Fonts -->\n        <link rel=\"stylesheet\" href=\"FontAwesome/css/font-awesome.css\">\n        <link rel=\"stylesheet\" href=\"fonts/fonts.css\">\n\n        <!-- Highlight.js Stylesheets -->\n        <link rel=\"stylesheet\" href=\"highlight.css\">\n        <link rel=\"stylesheet\" href=\"tomorrow-night.css\" disabled=\"\">\n        <link rel=\"stylesheet\" href=\"ayu-highlight.css\" disabled=\"\">\n\n        <!-- Custom theme stylesheets -->\n\n    </head>\n    <body class=\"js sidebar-visible\">\n    <div id=\"body-container\">\n        <!-- Provide site root to javascript -->\n        <script>\n            var path_to_root = \"\";\n            var default_theme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"navy\" : \"light\";\n        </script>\n\n        <!-- Work around some values being stored in localStorage wrapped in quotes -->\n        <script>\n            try {\n                var theme = localStorage.getItem('mdbook-theme');\n                var sidebar = localStorage.getItem('mdbook-sidebar');\n\n                if (theme.startsWith('\"') && theme.endsWith('\"')) {\n                    localStorage.setItem('mdbook-theme', theme.slice(1, theme.length - 1));\n                }\n\n                if (sidebar.startsWith('\"') && sidebar.endsWith('\"')) {\n                    localStorage.setItem('mdbook-sidebar', sidebar.slice(1, sidebar.length - 1));\n                }\n            } catch (e) { }\n        </script>\n\n        <!-- Set the theme before any content is loaded, prevents flash -->\n        <script>\n            var theme;\n            try { theme = localStorage.getItem('mdbook-theme'); } catch(e) { }\n            if (theme === null || theme === undefined) { theme = default_theme; }\n            var html = document.querySelector('html');\n            html.classList.remove('light')\n            html.classList.add(theme);\n            var body = document.querySelector('body');\n            body.classList.remove('no-js')\n            body.classList.add('js');\n        </script>\n\n        <input type=\"checkbox\" id=\"sidebar-toggle-anchor\" class=\"hidden\">\n\n        <!-- Hide / unhide sidebar before it is displayed -->\n        <script>\n            var body = document.querySelector('body');\n            var sidebar = null;\n            var sidebar_toggle = document.getElementById(\"sidebar-toggle-anchor\");\n            if (document.body.clientWidth >= 1080) {\n                try { sidebar = localStorage.getItem('mdbook-sidebar'); } catch(e) { }\n                sidebar = sidebar || 'visible';\n            } else {\n                sidebar = 'hidden';\n            }\n            sidebar_toggle.checked = sidebar === 'visible';\n            body.classList.remove('sidebar-visible');\n            body.classList.add(\"sidebar-\" + sidebar);\n        </script>\n\n        <nav id=\"sidebar\" class=\"sidebar\" aria-label=\"Table of contents\" aria-hidden=\"false\">\n            <div class=\"sidebar-scrollbox\">\n                <ol class=\"chapter\"><li class=\"chapter-item expanded \"><a href=\"what-is-rustdoc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.</strong> What is rustdoc?</a></li><li class=\"chapter-item expanded \"><a href=\"command-line-arguments.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.</strong> Command-line arguments</a></li><li class=\"chapter-item expanded \"><a href=\"how-to-read-rustdoc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.</strong> How to read rustdoc output</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"read-documentation/in-doc-settings.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.1.</strong> In-doc settings</a></li><li class=\"chapter-item expanded \"><a href=\"read-documentation/search.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.2.</strong> Search</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"how-to-write-documentation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.</strong> How to write documentation</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"write-documentation/what-to-include.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.</strong> What to include (and exclude)</a></li><li class=\"chapter-item expanded \"><a href=\"write-documentation/the-doc-attribute.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.</strong> The #[doc] attribute</a></li><li class=\"chapter-item expanded \"><a href=\"write-documentation/re-exports.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.</strong> Re-exports</a></li><li class=\"chapter-item expanded \"><a href=\"write-documentation/linking-to-items-by-name.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.</strong> Linking to items by name</a></li><li class=\"chapter-item expanded \"><a href=\"write-documentation/documentation-tests.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.</strong> Documentation tests</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"lints.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.</strong> Rustdoc-specific lints</a></li><li class=\"chapter-item expanded \"><a href=\"scraped-examples.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.</strong> Scraped examples</a></li><li class=\"chapter-item expanded \"><a href=\"advanced-features.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.</strong> Advanced features</a></li><li class=\"chapter-item expanded \"><a href=\"unstable-features.html\" class=\"active\" tabindex=\"0\"><strong aria-hidden=\"true\">8.</strong> Unstable features</a></li><li class=\"chapter-item expanded \"><a href=\"deprecated-features.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.</strong> Deprecated features</a></li><li class=\"chapter-item expanded \"><a href=\"references.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.</strong> References</a></li></ol>\n            </div>\n            <div id=\"sidebar-resize-handle\" class=\"sidebar-resize-handle\">\n                <div class=\"sidebar-resize-indicator\"></div>\n            </div>\n        </nav>\n\n        <!-- Track and set sidebar scroll position -->\n        <script>\n            var sidebarScrollbox = document.querySelector('#sidebar .sidebar-scrollbox');\n            sidebarScrollbox.addEventListener('click', function(e) {\n                if (e.target.tagName === 'A') {\n                    sessionStorage.setItem('sidebar-scroll', sidebarScrollbox.scrollTop);\n                }\n            }, { passive: true });\n            var sidebarScrollTop = sessionStorage.getItem('sidebar-scroll');\n            sessionStorage.removeItem('sidebar-scroll');\n            if (sidebarScrollTop) {\n                // preserve sidebar scroll position when navigating via links within sidebar\n                sidebarScrollbox.scrollTop = sidebarScrollTop;\n            } else {\n                // scroll sidebar to current active section when navigating via \"next/previous chapter\" buttons\n                var activeSection = document.querySelector('#sidebar .active');\n                if (activeSection) {\n                    activeSection.scrollIntoView({ block: 'center' });\n                }\n            }\n        </script>\n\n        <div id=\"page-wrapper\" class=\"page-wrapper\">\n\n            <div class=\"page\">\n                                <div id=\"menu-bar-hover-placeholder\"></div>\n                <div id=\"menu-bar\" class=\"menu-bar\" style=\"top: 0px;\">\n                    <div class=\"left-buttons\">\n                        <label id=\"sidebar-toggle\" class=\"icon-button\" for=\"sidebar-toggle-anchor\" title=\"Toggle Table of Contents\" aria-label=\"Toggle Table of Contents\" aria-controls=\"sidebar\" aria-expanded=\"true\">\n                            <i class=\"fa fa-bars\"></i>\n                        </label>\n                        <button id=\"theme-toggle\" class=\"icon-button\" type=\"button\" title=\"Change theme\" aria-label=\"Change theme\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-controls=\"theme-list\">\n                            <i class=\"fa fa-paint-brush\"></i>\n                        </button>\n                        <ul id=\"theme-list\" class=\"theme-popup\" aria-label=\"Themes\" role=\"menu\">\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme theme-selected\" id=\"light\">Light</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"rust\">Rust</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"coal\">Coal</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"navy\">Navy</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"ayu\">Ayu</button></li>\n                        </ul>\n                        <button id=\"search-toggle\" class=\"icon-button\" type=\"button\" title=\"Search. (Shortkey: s)\" aria-label=\"Toggle Searchbar\" aria-expanded=\"false\" aria-keyshortcuts=\"S\" aria-controls=\"searchbar\">\n                            <i class=\"fa fa-search\"></i>\n                        </button>\n                    </div>\n\n                    <h1 class=\"menu-title\">The rustdoc book</h1>\n\n                    <div class=\"right-buttons\">\n                        <a href=\"print.html\" title=\"Print this book\" aria-label=\"Print this book\">\n                            <i id=\"print-button\" class=\"fa fa-print\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/rust/tree/master/src/doc/rustdoc\" title=\"Git repository\" aria-label=\"Git repository\">\n                            <i id=\"git-repository-button\" class=\"fa fa-github\"></i>\n                        </a>\n\n                    </div>\n                </div>\n\n                <div id=\"search-wrapper\" class=\"hidden\">\n                    <form id=\"searchbar-outer\" class=\"searchbar-outer\">\n                        <input type=\"search\" id=\"searchbar\" name=\"searchbar\" placeholder=\"Search this book ...\" aria-controls=\"searchresults-outer\" aria-describedby=\"searchresults-header\">\n                    </form>\n                    <div id=\"searchresults-outer\" class=\"searchresults-outer hidden\">\n                        <div id=\"searchresults-header\" class=\"searchresults-header\"></div>\n                        <ul id=\"searchresults\">\n                        </ul>\n                    </div>\n                </div>\n\n                <!-- Apply ARIA attributes after the sidebar and the sidebar toggle button are added to the DOM -->\n                <script>\n                    document.getElementById('sidebar-toggle').setAttribute('aria-expanded', sidebar === 'visible');\n                    document.getElementById('sidebar').setAttribute('aria-hidden', sidebar !== 'visible');\n                    Array.from(document.querySelectorAll('#sidebar a')).forEach(function(link) {\n                        link.setAttribute('tabIndex', sidebar === 'visible' ? 0 : -1);\n                    });\n                </script>\n\n                <div id=\"content\" class=\"content\">\n                    <main>\n                        <h1 id=\"unstable-features\"><a class=\"header\" href=\"#unstable-features\">Unstable features</a></h1>\n<p>Rustdoc is under active development, and like the Rust compiler, some features are only available\non nightly releases. Some of these features are new and need some more testing before they're able to be\nreleased to the world at large, and some of them are tied to features in the Rust compiler that are unstable. Several features here require a matching <code class=\"hljs\">#![feature(...)]</code> attribute to\nenable, and thus are more fully documented in the <a href=\"../unstable-book/index.html\">Unstable Book</a>. Those sections will link over\nthere as necessary.</p>\n<h2 id=\"nightly-gated-functionality\"><a class=\"header\" href=\"#nightly-gated-functionality\">Nightly-gated functionality</a></h2>\n<p>These features just require a nightly build to operate. Unlike the other features on this page,\nthese don't need to be \"turned on\" with a command-line flag or a <code class=\"hljs\">#![feature(...)]</code> attribute in\nyour crate. This can give them some subtle fallback modes when used on a stable release, so be\ncareful!</p>\n<h3 id=\"error-numbers-for-compile-fail-doctests\"><a class=\"header\" href=\"#error-numbers-for-compile-fail-doctests\">Error numbers for <code>compile-fail</code> doctests</a></h3>\n<p>As detailed in <a href=\"write-documentation/documentation-tests.html#attributes\">the chapter on documentation tests</a>, you can add a\n<code class=\"hljs\">compile_fail</code> attribute to a doctest to state that the test should fail to compile. However, on\nnightly, you can optionally add an error number to state that a doctest should emit a specific error\nnumber:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-markdown hljs\"><span class=\"hljs-code\">```compile_fail,E0044\nextern { fn some_func&lt;T&gt;(x: T); }\n```</span>\n</code></pre>\n<p>This is used by the error index to ensure that the samples that correspond to a given error number\nproperly emit that error code. However, these error codes aren't guaranteed to be the only thing\nthat a piece of code emits from version to version, so this is unlikely to be stabilized in the\nfuture.</p>\n<p>Attempting to use these error numbers on stable will result in the code sample being interpreted as\nplain text.</p>\n<h3 id=\"missing_doc_code_examples-lint\"><a class=\"header\" href=\"#missing_doc_code_examples-lint\"><code>missing_doc_code_examples</code> lint</a></h3>\n<p>This lint will emit a warning if an item doesn't have a code example in its documentation.\nIt can be enabled using:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore (nightly) hljs\"><span class=\"hljs-meta\">#![deny(rustdoc::missing_doc_code_examples)]</span></code></pre>\n<h2 id=\"extensions-to-the-doc-attribute\"><a class=\"header\" href=\"#extensions-to-the-doc-attribute\">Extensions to the <code>#[doc]</code> attribute</a></h2>\n<p>These features operate by extending the <code class=\"hljs\">#[doc]</code> attribute, and thus can be caught by the compiler\nand enabled with a <code class=\"hljs\">#![feature(...)]</code> attribute in your crate.</p>\n<h3 id=\"doccfg-recording-what-platforms-or-features-are-required-for-code-to-be-present\"><a class=\"header\" href=\"#doccfg-recording-what-platforms-or-features-are-required-for-code-to-be-present\"><code>#[doc(cfg)]</code>: Recording what platforms or features are required for code to be present</a></h3>\n<ul>\n<li>Tracking issue: <a href=\"https://github.com/rust-lang/rust/issues/43781\">#43781</a></li>\n</ul>\n<p>You can use <code class=\"hljs\">#[doc(cfg(...))]</code> to tell Rustdoc exactly which platform items appear on.\nThis has two effects:</p>\n<ol>\n<li>doctests will only run on the appropriate platforms, and</li>\n<li>When Rustdoc renders documentation for that item, it will be accompanied by a banner explaining\nthat the item is only available on certain platforms.</li>\n</ol>\n<p><code class=\"hljs\">#[doc(cfg)]</code> is intended to be used alongside <a href=\"./advanced-features.html\"><code class=\"hljs\">#[cfg(doc)]</code></a>.\nFor example, <code class=\"hljs\">#[cfg(any(windows, doc))]</code> will preserve the item either on Windows or during the\ndocumentation process. Then, adding a new attribute <code class=\"hljs\">#[doc(cfg(windows))]</code> will tell Rustdoc that\nthe item is supposed to be used on Windows. For example:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"hljs-meta\">#![feature(doc_cfg)]</span>\n\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">/// Token struct that can only be used on Windows.</span>\n<span class=\"hljs-meta\">#[cfg(any(windows, doc))]</span>\n<span class=\"hljs-meta\">#[doc(cfg(windows))]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">WindowsToken</span></span>;\n\n<span class=\"hljs-comment\">/// Token struct that can only be used on Unix.</span>\n<span class=\"hljs-meta\">#[cfg(any(unix, doc))]</span>\n<span class=\"hljs-meta\">#[doc(cfg(unix))]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">UnixToken</span></span>;\n\n<span class=\"hljs-comment\">/// Token struct that is only available with the `serde` feature</span>\n<span class=\"hljs-meta\">#[cfg(feature = <span class=\"hljs-meta-string\">\"serde\"</span>)]</span>\n<span class=\"hljs-meta\">#[doc(cfg(feature = <span class=\"hljs-meta-string\">\"serde\"</span>))]</span>\n<span class=\"hljs-meta\">#[derive(serde::Deserialize)]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">SerdeToken</span></span>;\n<span class=\"boring\">}</span></code></pre></pre>\n<p>In this sample, the tokens will only appear on their respective platforms, but they will both appear\nin documentation.</p>\n<p><code class=\"hljs\">#[doc(cfg(...))]</code> was introduced to be used by the standard library and currently requires the\n<code class=\"hljs\">#![feature(doc_cfg)]</code> feature gate. For more information, see <a href=\"../unstable-book/language-features/doc-cfg.html\">its chapter in the Unstable\nBook</a> and <a href=\"https://github.com/rust-lang/rust/issues/43781\">its tracking issue</a>.</p>\n<h3 id=\"doc_auto_cfg-automatically-generate-doccfg\"><a class=\"header\" href=\"#doc_auto_cfg-automatically-generate-doccfg\"><code>doc_auto_cfg</code>: Automatically generate <code>#[doc(cfg)]</code></a></h3>\n<ul>\n<li>Tracking issue: <a href=\"https://github.com/rust-lang/rust/issues/43781\">#43781</a></li>\n</ul>\n<p><code class=\"hljs\">doc_auto_cfg</code> is an extension to the <code class=\"hljs\">#[doc(cfg)]</code> feature. With it, you don't need to add\n<code class=\"hljs\">#[doc(cfg(...)]</code> anymore unless you want to override the default behaviour. So if we take the\nprevious source code:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"hljs-meta\">#![feature(doc_auto_cfg)]</span>\n\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">/// Token struct that can only be used on Windows.</span>\n<span class=\"hljs-meta\">#[cfg(any(windows, doc))]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">WindowsToken</span></span>;\n\n<span class=\"hljs-comment\">/// Token struct that can only be used on Unix.</span>\n<span class=\"hljs-meta\">#[cfg(any(unix, doc))]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">UnixToken</span></span>;\n\n<span class=\"hljs-comment\">/// Token struct that is only available with the `serde` feature</span>\n<span class=\"hljs-meta\">#[cfg(feature = <span class=\"hljs-meta-string\">\"serde\"</span>)]</span>\n<span class=\"hljs-meta\">#[derive(serde::Deserialize)]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">SerdeToken</span></span>;\n<span class=\"boring\">}</span></code></pre></pre>\n<p>It'll render almost the same, the difference being that <code class=\"hljs\">doc</code> will also be displayed. To fix this,\nyou can use <code class=\"hljs\">doc_cfg_hide</code>:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"hljs-meta\">#![feature(doc_cfg_hide)]</span>\n<span class=\"hljs-meta\">#![doc(cfg_hide(doc))]</span>\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">}</span></code></pre></pre>\n<p>And <code class=\"hljs\">doc</code> won't show up anymore!</p>\n<h3 id=\"adding-your-trait-to-the-notable-traits-dialog\"><a class=\"header\" href=\"#adding-your-trait-to-the-notable-traits-dialog\">Adding your trait to the \"Notable traits\" dialog</a></h3>\n<ul>\n<li>Tracking issue: <a href=\"https://github.com/rust-lang/rust/issues/45040\">#45040</a></li>\n</ul>\n<p>Rustdoc keeps a list of a few traits that are believed to be \"fundamental\" to\ntypes that implement them. These traits are intended to be the primary interface\nfor their implementers, and are often most of the API available to be documented\non their types. For this reason, Rustdoc will track when a given type implements\none of these traits and call special attention to it when a function returns one\nof these types. This is the \"Notable traits\" dialog, accessible as a circled <code class=\"hljs\">i</code>\nbutton next to the function, which, when clicked, shows the dialog.</p>\n<p>In the standard library, some of the traits that are part of this list are\n<code class=\"hljs\">Iterator</code>, <code class=\"hljs\">Future</code>, <code class=\"hljs\">io::Read</code>, and <code class=\"hljs\">io::Write</code>. However, rather than being\nimplemented as a hard-coded list, these traits have a special marker attribute\non them: <code class=\"hljs\">#[doc(notable_trait)]</code>. This means that you can apply this attribute\nto your own trait to include it in the \"Notable traits\" dialog in documentation.</p>\n<p>The <code class=\"hljs\">#[doc(notable_trait)]</code> attribute currently requires the <code class=\"hljs\">#![feature(doc_notable_trait)]</code>\nfeature gate. For more information, see <a href=\"../unstable-book/language-features/doc-notable-trait.html\">its chapter in the Unstable Book</a>\nand <a href=\"https://github.com/rust-lang/rust/issues/45040\">its tracking issue</a>.</p>\n<h3 id=\"exclude-certain-dependencies-from-documentation\"><a class=\"header\" href=\"#exclude-certain-dependencies-from-documentation\">Exclude certain dependencies from documentation</a></h3>\n<ul>\n<li>Tracking issue: <a href=\"https://github.com/rust-lang/rust/issues/44027\">#44027</a></li>\n</ul>\n<p>The standard library uses several dependencies which, in turn, use several types and traits from the\nstandard library. In addition, there are several compiler-internal crates that are not considered to\nbe part of the official standard library, and thus would be a distraction to include in\ndocumentation. It's not enough to exclude their crate documentation, since information about trait\nimplementations appears on the pages for both the type and the trait, which can be in different\ncrates!</p>\n<p>To prevent internal types from being included in documentation, the standard library adds an\nattribute to their <code class=\"hljs\">extern crate</code> declarations: <code class=\"hljs\">#[doc(masked)]</code>. This causes Rustdoc to \"mask out\"\ntypes from these crates when building lists of trait implementations.</p>\n<p>The <code class=\"hljs\">#[doc(masked)]</code> attribute is intended to be used internally, and requires the\n<code class=\"hljs\">#![feature(doc_masked)]</code> feature gate.  For more information, see <a href=\"../unstable-book/language-features/doc-masked.html\">its chapter in the Unstable\nBook</a> and <a href=\"https://github.com/rust-lang/rust/issues/44027\">its tracking issue</a>.</p>\n<h3 id=\"document-primitives\"><a class=\"header\" href=\"#document-primitives\">Document primitives</a></h3>\n<p>This is for Rust compiler internal use only.</p>\n<p>Since primitive types are defined in the compiler, there's no place to attach documentation\nattributes. The <code class=\"hljs\">#[rustc_doc_primitive = \"...\"]</code> attribute is used by the standard library to\nprovide a way to generate documentation for primitive types, and requires <code class=\"hljs\">#![feature(rustc_attrs)]</code>\nto enable.</p>\n<h3 id=\"document-keywords\"><a class=\"header\" href=\"#document-keywords\">Document keywords</a></h3>\n<p>This is for Rust compiler internal use only.</p>\n<p>Rust keywords are documented in the standard library (look for <code class=\"hljs\">match</code> for example).</p>\n<p>To do so, the <code class=\"hljs\">#[doc(keyword = \"...\")]</code> attribute is used. Example:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"hljs-meta\">#![feature(rustdoc_internals)]</span>\n<span class=\"hljs-meta\">#![allow(internal_features)]</span>\n\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">/// Some documentation about the keyword.</span>\n<span class=\"hljs-meta\">#[doc(keyword = <span class=\"hljs-meta-string\">\"keyword\"</span>)]</span>\n<span class=\"hljs-keyword\">mod</span> empty_mod {}\n<span class=\"boring\">}</span></code></pre></pre>\n<h3 id=\"use-the-rust-logo-as-the-crate-logo\"><a class=\"header\" href=\"#use-the-rust-logo-as-the-crate-logo\">Use the Rust logo as the crate logo</a></h3>\n<p>This is for official Rust project use only.</p>\n<p>Internal Rustdoc pages like settings.html and scrape-examples-help.html show the Rust logo.\nThis logo is tracked as a static resource. The attribute <code class=\"hljs\">#![doc(rust_logo)]</code> makes this same\nbuilt-in resource act as the main logo.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"hljs-meta\">#![feature(rustdoc_internals)]</span>\n<span class=\"hljs-meta\">#![allow(internal_features)]</span>\n<span class=\"hljs-meta\">#![doc(rust_logo)]</span>\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">//! This crate has the Rust(tm) branding on it.</span>\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"effects-of-other-nightly-features\"><a class=\"header\" href=\"#effects-of-other-nightly-features\">Effects of other nightly features</a></h2>\n<p>These nightly-only features are not primarily related to Rustdoc,\nbut have convenient effects on the documentation produced.</p>\n<h3 id=\"fundamental-types\"><a class=\"header\" href=\"#fundamental-types\"><code>fundamental</code> types</a></h3>\n<p>Annotating a type with <code class=\"hljs\">#[fundamental]</code> primarily influences coherence rules about generic types,\ni.e., they alter whether other crates can provide implementations for that type.\nThe unstable book <a href=\"https://doc.rust-lang.org/unstable-book/language-features/fundamental.html\">links to further information</a>.</p>\n<p>For documentation, this has an additional side effect:\nIf a method is implemented on <code class=\"hljs\">F&lt;T&gt;</code> (or <code class=\"hljs\">F&lt;&amp;T&gt;</code>),\nwhere <code class=\"hljs\">F</code> is a fundamental type,\nthen the method is not only documented at the page about <code class=\"hljs\">F</code>,\nbut also on the page about <code class=\"hljs\">T</code>.\nIn a sense, it makes the type transparent to Rustdoc.\nThis is especially convenient for types that work as annotated pointers,\nsuch as <code class=\"hljs\">Pin&lt;&amp;mut T&gt;</code>,\nas it ensures that methods only implemented through those annotated pointers\ncan still be found with the type they act on.</p>\n<p>If the <code class=\"hljs\">fundamental</code> feature's effect on coherence is not intended,\nsuch a type can be marked as fundamental only for purposes of documentation\nby introducing a custom feature and\nlimiting the use of <code class=\"hljs\">fundamental</code> to when documentation is built.</p>\n<h2 id=\"unstable-command-line-arguments\"><a class=\"header\" href=\"#unstable-command-line-arguments\">Unstable command-line arguments</a></h2>\n<p>These features are enabled by passing a command-line flag to Rustdoc, but the flags in question are\nthemselves marked as unstable. To use any of these options, pass <code class=\"hljs\">-Z unstable-options</code> as well as\nthe flag in question to Rustdoc on the command-line. To do this from Cargo, you can either use the\n<code class=\"hljs\">RUSTDOCFLAGS</code> environment variable or the <code class=\"hljs\">cargo rustdoc</code> command.</p>\n<h3 id=\"--markdown-before-content-include-rendered-markdown-before-the-content\"><a class=\"header\" href=\"#--markdown-before-content-include-rendered-markdown-before-the-content\"><code>--markdown-before-content</code>: include rendered Markdown before the content</a></h3>\n<ul>\n<li>Tracking issue: <a href=\"https://github.com/rust-lang/rust/issues/44027\">#44027</a></li>\n</ul>\n<p>Using this flag looks like this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-bash hljs\">$ rustdoc src/lib.rs -Z unstable-options --markdown-before-content extra.md\n$ rustdoc README.md -Z unstable-options --markdown-before-content extra.md\n</code></pre>\n<p>Just like <code class=\"hljs\">--html-before-content</code>, this allows you to insert extra content inside the <code class=\"hljs\">&lt;body&gt;</code> tag\nbut before the other content <code class=\"hljs\">rustdoc</code> would normally produce in the rendered documentation.\nHowever, instead of directly inserting the file verbatim, <code class=\"hljs\">rustdoc</code> will pass the files through a\nMarkdown renderer before inserting the result into the file.</p>\n<h3 id=\"--markdown-after-content-include-rendered-markdown-after-the-content\"><a class=\"header\" href=\"#--markdown-after-content-include-rendered-markdown-after-the-content\"><code>--markdown-after-content</code>: include rendered Markdown after the content</a></h3>\n<p>Using this flag looks like this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-bash hljs\">$ rustdoc src/lib.rs -Z unstable-options --markdown-after-content extra.md\n$ rustdoc README.md -Z unstable-options --markdown-after-content extra.md\n</code></pre>\n<p>Just like <code class=\"hljs\">--html-after-content</code>, this allows you to insert extra content before the <code class=\"hljs\">&lt;/body&gt;</code> tag\nbut after the other content <code class=\"hljs\">rustdoc</code> would normally produce in the rendered documentation.\nHowever, instead of directly inserting the file verbatim, <code class=\"hljs\">rustdoc</code> will pass the files through a\nMarkdown renderer before inserting the result into the file.</p>\n<h3 id=\"--playground-url-control-the-location-of-the-playground\"><a class=\"header\" href=\"#--playground-url-control-the-location-of-the-playground\"><code>--playground-url</code>: control the location of the playground</a></h3>\n<p>Using this flag looks like this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-bash hljs\">$ rustdoc src/lib.rs -Z unstable-options --playground-url https://play.rust-lang.org/\n</code></pre>\n<p>When rendering a crate's docs, this flag gives the base URL of the Rust Playground, to use for\ngenerating <code class=\"hljs\">Run</code> buttons. Unlike <code class=\"hljs\">--markdown-playground-url</code>, this argument works for standalone\nMarkdown files <em>and</em> Rust crates. This works the same way as adding <code class=\"hljs\">#![doc(html_playground_url = \"url\")]</code> to your crate root, as mentioned in <a href=\"write-documentation/the-doc-attribute.html#html_playground_url\">the chapter about the <code class=\"hljs\">#[doc]</code>\nattribute</a>. Please be aware that the official Rust Playground at\nhttps://play.rust-lang.org does not have every crate available, so if your examples require your\ncrate, make sure the playground you provide has your crate available.</p>\n<p>If both <code class=\"hljs\">--playground-url</code> and <code class=\"hljs\">--markdown-playground-url</code> are present when rendering a standalone\nMarkdown file, the URL given to <code class=\"hljs\">--markdown-playground-url</code> will take precedence. If both\n<code class=\"hljs\">--playground-url</code> and <code class=\"hljs\">#![doc(html_playground_url = \"url\")]</code> are present when rendering crate docs,\nthe attribute will take precedence.</p>\n<h3 id=\"--sort-modules-by-appearance-control-how-items-on-module-pages-are-sorted\"><a class=\"header\" href=\"#--sort-modules-by-appearance-control-how-items-on-module-pages-are-sorted\"><code>--sort-modules-by-appearance</code>: control how items on module pages are sorted</a></h3>\n<p>Using this flag looks like this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-bash hljs\">$ rustdoc src/lib.rs -Z unstable-options --sort-modules-by-appearance\n</code></pre>\n<p>Ordinarily, when <code class=\"hljs\">rustdoc</code> prints items in module pages, it will sort them alphabetically (taking\nsome consideration for their stability, and names that end in a number). Giving this flag to\n<code class=\"hljs\">rustdoc</code> will disable this sorting and instead make it print the items in the order they appear in\nthe source.</p>\n<h3 id=\"--show-type-layout-add-a-section-to-each-types-docs-describing-its-memory-layout\"><a class=\"header\" href=\"#--show-type-layout-add-a-section-to-each-types-docs-describing-its-memory-layout\"><code>--show-type-layout</code>: add a section to each type's docs describing its memory layout</a></h3>\n<ul>\n<li>Tracking issue: <a href=\"https://github.com/rust-lang/rust/issues/113248\">#113248</a></li>\n</ul>\n<p>Using this flag looks like this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-bash hljs\">$ rustdoc src/lib.rs -Z unstable-options --show-type-layout\n</code></pre>\n<p>When this flag is passed, rustdoc will add a \"Layout\" section at the bottom of\neach type's docs page that includes a summary of the type's memory layout as\ncomputed by rustc. For example, rustdoc will show the size in bytes that a value\nof that type will take in memory.</p>\n<p>Note that most layout information is <strong>completely unstable</strong> and may even differ\nbetween compilations.</p>\n<h3 id=\"--resource-suffix-modifying-the-name-of-cssjavascript-in-crate-docs\"><a class=\"header\" href=\"#--resource-suffix-modifying-the-name-of-cssjavascript-in-crate-docs\"><code>--resource-suffix</code>: modifying the name of CSS/JavaScript in crate docs</a></h3>\n<ul>\n<li>Tracking issue: <a href=\"https://github.com/rust-lang/rust/issues/54765\">#54765</a></li>\n</ul>\n<p>Using this flag looks like this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-bash hljs\">$ rustdoc src/lib.rs -Z unstable-options --resource-suffix suf\n</code></pre>\n<p>When rendering docs, <code class=\"hljs\">rustdoc</code> creates several CSS and JavaScript files as part of the output. Since\nall these files are linked from every page, changing where they are can be cumbersome if you need to\nspecially cache them. This flag will rename all these files in the output to include the suffix in\nthe filename. For example, <code class=\"hljs\">light.css</code> would become <code class=\"hljs\">light-suf.css</code> with the above command.</p>\n<h3 id=\"--extern-html-root-url-control-how-rustdoc-links-to-non-local-crates\"><a class=\"header\" href=\"#--extern-html-root-url-control-how-rustdoc-links-to-non-local-crates\"><code>--extern-html-root-url</code>: control how rustdoc links to non-local crates</a></h3>\n<p>Using this flag looks like this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-bash hljs\">$ rustdoc src/lib.rs -Z unstable-options --extern-html-root-url some-crate=https://example.com/some-crate/1.0.1\n</code></pre>\n<p>Ordinarily, when rustdoc wants to link to a type from a different crate, it looks in two places:\ndocs that already exist in the output directory, or the <code class=\"hljs\">#![doc(doc_html_root)]</code> set in the other\ncrate. However, if you want to link to docs that exist in neither of those places, you can use these\nflags to control that behavior. When the <code class=\"hljs\">--extern-html-root-url</code> flag is given with a name matching\none of your dependencies, rustdoc use that URL for those docs. Keep in mind that if those docs exist\nin the output directory, those local docs will still override this flag.</p>\n<h3 id=\"-z-force-unstable-if-unmarked\"><a class=\"header\" href=\"#-z-force-unstable-if-unmarked\"><code>-Z force-unstable-if-unmarked</code></a></h3>\n<p>Using this flag looks like this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-bash hljs\">$ rustdoc src/lib.rs -Z force-unstable-if-unmarked\n</code></pre>\n<p>This is an internal flag intended for the standard library and compiler that applies an\n<code class=\"hljs\">#[unstable]</code> attribute to any dependent crate that doesn't have another stability attribute. This\nallows <code class=\"hljs\">rustdoc</code> to be able to generate documentation for the compiler crates and the standard\nlibrary, as an equivalent command-line argument is provided to <code class=\"hljs\">rustc</code> when building those crates.</p>\n<h3 id=\"--index-page-provide-a-top-level-landing-page-for-docs\"><a class=\"header\" href=\"#--index-page-provide-a-top-level-landing-page-for-docs\"><code>--index-page</code>: provide a top-level landing page for docs</a></h3>\n<p>This feature allows you to generate an index-page with a given markdown file. A good example of it\nis the <a href=\"https://doc.rust-lang.org/nightly/index.html\">rust documentation index</a>.</p>\n<p>With this, you'll have a page which you can customize as much as you want at the top of your crates.</p>\n<p>Using <code class=\"hljs\">index-page</code> option enables <code class=\"hljs\">enable-index-page</code> option as well.</p>\n<h3 id=\"--enable-index-page-generate-a-default-index-page-for-docs\"><a class=\"header\" href=\"#--enable-index-page-generate-a-default-index-page-for-docs\"><code>--enable-index-page</code>: generate a default index page for docs</a></h3>\n<p>This feature allows the generation of a default index-page which lists the generated crates.</p>\n<h3 id=\"--nocapture-disable-output-capture-for-test\"><a class=\"header\" href=\"#--nocapture-disable-output-capture-for-test\"><code>--nocapture</code>: disable output capture for test</a></h3>\n<p>When this flag is used with <code class=\"hljs\">--test</code>, the output (stdout and stderr) of your tests won't be\ncaptured by rustdoc. Instead, the output will be directed to your terminal,\nas if you had run the test executable manually. This is especially useful\nfor debugging your tests!</p>\n<h3 id=\"--check-only-checks-the-documentation\"><a class=\"header\" href=\"#--check-only-checks-the-documentation\"><code>--check</code>: only checks the documentation</a></h3>\n<p>When this flag is supplied, rustdoc will type check and lint your code, but will not generate any\ndocumentation or run your doctests.</p>\n<p>Using this flag looks like:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-bash hljs\">rustdoc -Z unstable-options --check src/lib.rs\n</code></pre>\n<h3 id=\"--static-root-path-control-how-static-files-are-loaded-in-html-output\"><a class=\"header\" href=\"#--static-root-path-control-how-static-files-are-loaded-in-html-output\"><code>--static-root-path</code>: control how static files are loaded in HTML output</a></h3>\n<p>Using this flag looks like this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-bash hljs\">$ rustdoc src/lib.rs -Z unstable-options --static-root-path <span class=\"hljs-string\">'/cache/'</span>\n</code></pre>\n<p>This flag controls how rustdoc links to its static files on HTML pages. If you're hosting a lot of\ncrates' docs generated by the same version of rustdoc, you can use this flag to cache rustdoc's CSS,\nJavaScript, and font files in a single location, rather than duplicating it once per \"doc root\"\n(grouping of crate docs generated into the same output directory, like with <code class=\"hljs\">cargo doc</code>). Per-crate\nfiles like the search index will still load from the documentation root, but anything that gets\nrenamed with <code class=\"hljs\">--resource-suffix</code> will load from the given path.</p>\n<h3 id=\"--persist-doctests-persist-doctest-executables-after-running\"><a class=\"header\" href=\"#--persist-doctests-persist-doctest-executables-after-running\"><code>--persist-doctests</code>: persist doctest executables after running</a></h3>\n<ul>\n<li>Tracking issue: <a href=\"https://github.com/rust-lang/rust/issues/56925\">#56925</a></li>\n</ul>\n<p>Using this flag looks like this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-bash hljs\">$ rustdoc src/lib.rs --<span class=\"hljs-built_in\">test</span> -Z unstable-options --persist-doctests target/rustdoctest\n</code></pre>\n<p>This flag allows you to keep doctest executables around after they're compiled or run.\nUsually, rustdoc will immediately discard a compiled doctest after it's been tested, but\nwith this option, you can keep those binaries around for farther testing.</p>\n<h3 id=\"--show-coverage-calculate-the-percentage-of-items-with-documentation\"><a class=\"header\" href=\"#--show-coverage-calculate-the-percentage-of-items-with-documentation\"><code>--show-coverage</code>: calculate the percentage of items with documentation</a></h3>\n<ul>\n<li>Tracking issue: <a href=\"https://github.com/rust-lang/rust/issues/58154\">#58154</a></li>\n</ul>\n<p>Using this flag looks like this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-bash hljs\">$ rustdoc src/lib.rs -Z unstable-options --show-coverage\n</code></pre>\n<p>It generates something like this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-bash hljs\">+-------------------------------------+------------+------------+------------+------------+\n| File                                | Documented | Percentage |   Examples | Percentage |\n+-------------------------------------+------------+------------+------------+------------+\n| lib.rs                              |          4 |     100.0% |          1 |      25.0% |\n+-------------------------------------+------------+------------+------------+------------+\n| Total                               |          4 |     100.0% |          1 |      25.0% |\n+-------------------------------------+------------+------------+------------+------------+\n</code></pre>\n<p>If you want to determine how many items in your crate are documented, pass this flag to rustdoc.\nWhen it receives this flag, it will count the public items in your crate that have documentation,\nand print out the counts and a percentage instead of generating docs.</p>\n<p>Some methodology notes about what rustdoc counts in this metric:</p>\n<ul>\n<li>Rustdoc will only count items from your crate (i.e. items re-exported from other crates don't\ncount).</li>\n<li>Docs written directly onto inherent impl blocks are not counted, even though their doc comments\nare displayed, because the common pattern in Rust code is to write all inherent methods into the\nsame impl block.</li>\n<li>Items in a trait implementation are not counted, as those impls will inherit any docs from the\ntrait itself.</li>\n<li>By default, only public items are counted. To count private items as well, pass\n<code class=\"hljs\">--document-private-items</code> at the same time.</li>\n</ul>\n<p>Public items that are not documented can be seen with the built-in <code class=\"hljs\">missing_docs</code> lint. Private\nitems that are not documented can be seen with Clippy's <code class=\"hljs\">missing_docs_in_private_items</code> lint.</p>\n<p>Calculating code examples follows these rules:</p>\n<ol>\n<li>These items aren't accounted by default:</li>\n</ol>\n<ul>\n<li>struct/union field</li>\n<li>enum variant</li>\n<li>constant</li>\n<li>static</li>\n<li>typedef</li>\n</ul>\n<ol start=\"2\">\n<li>If one of the previously listed items has a code example, then it'll be counted.</li>\n</ol>\n<h4 id=\"json-output\"><a class=\"header\" href=\"#json-output\">JSON output</a></h4>\n<p>When using <code class=\"hljs\">--output-format json</code> with this option, it will display the coverage information in\nJSON format. For example, here is the JSON for a file with one documented item and one\nundocumented item:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">/// This item has documentation</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>() {}\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">no_documentation</span></span>() {}\n<span class=\"boring\">}</span></code></pre></pre>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-json hljs\">{<span class=\"hljs-attr\">\"no_std.rs\"</span>:{<span class=\"hljs-attr\">\"total\"</span>:<span class=\"hljs-number\">3</span>,<span class=\"hljs-attr\">\"with_docs\"</span>:<span class=\"hljs-number\">1</span>,<span class=\"hljs-attr\">\"total_examples\"</span>:<span class=\"hljs-number\">3</span>,<span class=\"hljs-attr\">\"with_examples\"</span>:<span class=\"hljs-number\">0</span>}}\n</code></pre>\n<p>Note that the third item is the crate root, which in this case is undocumented.</p>\n<h3 id=\"-w--output-format-output-format\"><a class=\"header\" href=\"#-w--output-format-output-format\"><code>-w</code>/<code>--output-format</code>: output format</a></h3>\n<p><code class=\"hljs\">--output-format json</code> emits documentation in the experimental\n<a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustdoc_json_types/\">JSON format</a>. <code class=\"hljs\">--output-format html</code> has no effect,\nand is also accepted on stable toolchains.</p>\n<p>JSON Output for toolchain crates (<code class=\"hljs\">std</code>, <code class=\"hljs\">alloc</code>, <code class=\"hljs\">core</code>, <code class=\"hljs\">test</code>, and <code class=\"hljs\">proc_macro</code>)\nis available via the <code class=\"hljs\">rust-docs-json</code> rustup component.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-shell hljs\">rustup component add --toolchain nightly rust-docs-json\n</code></pre>\n<p>Then the json files will be present in the <code class=\"hljs\">share/doc/rust/json/</code> directory\nof the rustup toolchain directory.</p>\n<p>It can also be used with <code class=\"hljs\">--show-coverage</code>. Take a look at its\n<a href=\"#--show-coverage-calculate-the-percentage-of-items-with-documentation\">documentation</a> for more\ninformation.</p>\n<h3 id=\"--enable-per-target-ignores-allow-ignore-foo-style-filters-for-doctests\"><a class=\"header\" href=\"#--enable-per-target-ignores-allow-ignore-foo-style-filters-for-doctests\"><code>--enable-per-target-ignores</code>: allow <code>ignore-foo</code> style filters for doctests</a></h3>\n<ul>\n<li>Tracking issue: <a href=\"https://github.com/rust-lang/rust/issues/64245\">#64245</a></li>\n</ul>\n<p>Using this flag looks like this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-bash hljs\">$ rustdoc src/lib.rs -Z unstable-options --<span class=\"hljs-built_in\">enable</span>-per-target-ignores\n</code></pre>\n<p>This flag allows you to tag doctests with compiletest style <code class=\"hljs\">ignore-foo</code> filters that prevent\nrustdoc from running that test if the target triple string contains foo. For example:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">///```ignore-foo,ignore-bar</span>\n<span class=\"hljs-comment\">///assert!(2 == 2);</span>\n<span class=\"hljs-comment\">///```</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Foo</span></span>;\n<span class=\"boring\">}</span></code></pre></pre>\n<p>This will not be run when the build target is <code class=\"hljs\">super-awesome-foo</code> or <code class=\"hljs\">less-bar-awesome</code>.\nIf the flag is not enabled, then rustdoc will consume the filter, but do nothing with it, and\nthe above example will be run for all targets.\nIf you want to preserve backwards compatibility for older versions of rustdoc, you can use</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">///```ignore,ignore-foo</span>\n<span class=\"hljs-comment\">///assert!(2 == 2);</span>\n<span class=\"hljs-comment\">///```</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Foo</span></span>;\n<span class=\"boring\">}</span></code></pre></pre>\n<p>In older versions, this will be ignored on all targets, but on newer versions <code class=\"hljs\">ignore-gnu</code> will\noverride <code class=\"hljs\">ignore</code>.</p>\n<h3 id=\"--runtool---runtool-arg-program-to-run-tests-with-args-to-pass-to-it\"><a class=\"header\" href=\"#--runtool---runtool-arg-program-to-run-tests-with-args-to-pass-to-it\"><code>--runtool</code>, <code>--runtool-arg</code>: program to run tests with; args to pass to it</a></h3>\n<ul>\n<li>Tracking issue: <a href=\"https://github.com/rust-lang/rust/issues/64245\">#64245</a></li>\n</ul>\n<p>Using these options looks like this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-bash hljs\">$ rustdoc src/lib.rs -Z unstable-options --runtool runner --runtool-arg --<span class=\"hljs-keyword\">do</span>-thing --runtool-arg --<span class=\"hljs-keyword\">do</span>-other-thing\n</code></pre>\n<p>These options can be used to run the doctest under a program, and also pass arguments to\nthat program. For example, if you want to run your doctests under valgrind you might run</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-bash hljs\">$ rustdoc src/lib.rs -Z unstable-options --runtool valgrind\n</code></pre>\n<p>Another use case would be to run a test inside an emulator, or through a Virtual Machine.</p>\n<h3 id=\"--with-examples-include-examples-of-uses-of-items-as-documentation\"><a class=\"header\" href=\"#--with-examples-include-examples-of-uses-of-items-as-documentation\"><code>--with-examples</code>: include examples of uses of items as documentation</a></h3>\n<ul>\n<li>Tracking issue: <a href=\"https://github.com/rust-lang/rust/issues/88791\">#88791</a></li>\n</ul>\n<p>This option, combined with <code class=\"hljs\">--scrape-examples-target-crate</code> and\n<code class=\"hljs\">--scrape-examples-output-path</code>, is used to implement the functionality in <a href=\"https://github.com/rust-lang/rfcs/pull/3123\">RFC\n#3123</a>. Uses of an item (currently\nfunctions / call-sites) are found in a crate and its reverse-dependencies, and\nthen the uses are included as documentation for that item. This feature is\nintended to be used via <code class=\"hljs\">cargo doc --scrape-examples</code>, but the rustdoc-only\nworkflow looks like:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-bash hljs\">$ rustdoc examples/ex.rs -Z unstable-options \\\n    --extern foobar=target/deps/libfoobar.rmeta \\\n    --scrape-examples-target-crate foobar \\\n    --scrape-examples-output-path output.calls\n$ rustdoc src/lib.rs -Z unstable-options --with-examples output.calls\n</code></pre>\n<p>First, the library must be checked to generate an <code class=\"hljs\">rmeta</code>. Then a\nreverse-dependency like <code class=\"hljs\">examples/ex.rs</code> is given to rustdoc with the target\ncrate being documented (<code class=\"hljs\">foobar</code>) and a path to output the calls\n(<code class=\"hljs\">output.calls</code>). Then, the generated calls file can be passed via\n<code class=\"hljs\">--with-examples</code> to the subsequent documentation of <code class=\"hljs\">foobar</code>.</p>\n<p>To scrape examples from test code, e.g. functions marked <code class=\"hljs\">#[test]</code>, then\nadd the <code class=\"hljs\">--scrape-tests</code> flag.</p>\n<h3 id=\"--generate-link-to-definition-generate-links-on-types-in-source-code\"><a class=\"header\" href=\"#--generate-link-to-definition-generate-links-on-types-in-source-code\"><code>--generate-link-to-definition</code>: Generate links on types in source code</a></h3>\n<ul>\n<li>Tracking issue: <a href=\"https://github.com/rust-lang/rust/issues/89095\">#89095</a></li>\n</ul>\n<p>This flag enables the generation of links in the source code pages which allow the reader\nto jump to a type definition.</p>\n\n                    </main>\n\n                    <nav class=\"nav-wrapper\" aria-label=\"Page navigation\">\n                        <!-- Mobile navigation buttons -->\n                            <a rel=\"prev\" href=\"advanced-features.html\" class=\"mobile-nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                                <i class=\"fa fa-angle-left\"></i>\n                            </a>\n\n                            <a rel=\"next prefetch\" href=\"deprecated-features.html\" class=\"mobile-nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                                <i class=\"fa fa-angle-right\"></i>\n                            </a>\n\n                        <div style=\"clear: both\"></div>\n                    </nav>\n                </div>\n            </div>\n\n            <nav class=\"nav-wide-wrapper\" aria-label=\"Page navigation\">\n                    <a rel=\"prev\" href=\"advanced-features.html\" class=\"nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                        <i class=\"fa fa-angle-left\"></i>\n                    </a>\n\n                    <a rel=\"next prefetch\" href=\"deprecated-features.html\" class=\"nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                        <i class=\"fa fa-angle-right\"></i>\n                    </a>\n            </nav>\n\n        </div>\n\n\n\n\n        <script>\n            window.playground_copyable = true;\n        </script>\n\n\n        <script src=\"elasticlunr.min.js\"></script>\n        <script src=\"mark.min.js\"></script>\n        <script src=\"searcher.js\"></script>\n\n        <script src=\"clipboard.min.js\"></script>\n        <script src=\"highlight.js\"></script>\n        <script src=\"book.js\"></script>\n\n        <!-- Custom JS scripts -->\n\n\n    </div>\n    \n\n</body></html>",
	"crawlDate": "2024-07-28T05:20:47.934Z"
}