{
	"title": "sink in std::io - Rust",
	"url": "https://doc.rust-lang.org/stable/std/io/fn.sink.html",
	"markdown": "# sink in std::io - Rust\n\n## Function [std](../index.html)::[io](index.html)::[sink](#)\n\n1.0.0 (const: 1.79.0) · [source](about:blank/src/std/io/util.rs.html#280-282) ·\n\n```\npub const fn sink() -> Sink ⓘ\n```\n\nExpand description\n\nCreates an instance of a writer which will successfully consume all data.\n\nAll calls to [`write`](about:blank/trait.Write.html#tymethod.write \"method std::io::Write::write\") on the returned instance will return [`Ok(buf.len())`](about:blank/result/enum.Result.html#variant.Ok \"variant std::result::Result::Ok\") and the contents of the buffer will not be inspected.\n\n## [§](#examples)Examples\n\n```\nuse std::io::{self, Write};\n\nlet buffer = vec![1, 2, 3, 5, 8];\nlet num_bytes = io::sink().write(&buffer).unwrap();\nassert_eq!(num_bytes, 5);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::io::%7Bself,+Write%7D;%0A++++%0A++++let+buffer+=+vec!%5B1,+2,+3,+5,+8%5D;%0A++++let+num_bytes+=+io::sink().write(%26buffer).unwrap();%0A++++assert_eq!(num_bytes,+5);%0A%7D&edition=2021)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Creates an instance of a writer which will successfully consume all data.\"><title>sink in std::io - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc fn\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><div class=\"sidebar-elems\"><h2><a href=\"index.html\">In std::io</a></h2><h3><a href=\"index.html#modules\">Modules</a></h3><ul class=\"block mod\"><li><a href=\"prelude/index.html\">prelude</a></li></ul><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.BorrowedBuf.html\">BorrowedBuf</a></li><li><a href=\"struct.BorrowedCursor.html\">BorrowedCursor</a></li><li><a href=\"struct.BufReader.html\">BufReader</a></li><li><a href=\"struct.BufWriter.html\">BufWriter</a></li><li><a href=\"struct.Bytes.html\">Bytes</a></li><li><a href=\"struct.Chain.html\">Chain</a></li><li><a href=\"struct.Cursor.html\">Cursor</a></li><li><a href=\"struct.Empty.html\">Empty</a></li><li><a href=\"struct.Error.html\">Error</a></li><li><a href=\"struct.IntoInnerError.html\">IntoInnerError</a></li><li><a href=\"struct.IoSlice.html\">IoSlice</a></li><li><a href=\"struct.IoSliceMut.html\">IoSliceMut</a></li><li><a href=\"struct.LineWriter.html\">LineWriter</a></li><li><a href=\"struct.Lines.html\">Lines</a></li><li><a href=\"struct.Repeat.html\">Repeat</a></li><li><a href=\"struct.Sink.html\">Sink</a></li><li><a href=\"struct.Split.html\">Split</a></li><li><a href=\"struct.Stderr.html\">Stderr</a></li><li><a href=\"struct.StderrLock.html\">StderrLock</a></li><li><a href=\"struct.Stdin.html\">Stdin</a></li><li><a href=\"struct.StdinLock.html\">StdinLock</a></li><li><a href=\"struct.Stdout.html\">Stdout</a></li><li><a href=\"struct.StdoutLock.html\">StdoutLock</a></li><li><a href=\"struct.Take.html\">Take</a></li><li><a href=\"struct.WriterPanicked.html\">WriterPanicked</a></li></ul><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.ErrorKind.html\">ErrorKind</a></li><li><a href=\"enum.SeekFrom.html\">SeekFrom</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.BufRead.html\">BufRead</a></li><li><a href=\"trait.IsTerminal.html\">IsTerminal</a></li><li><a href=\"trait.Read.html\">Read</a></li><li><a href=\"trait.Seek.html\">Seek</a></li><li><a href=\"trait.Write.html\">Write</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.copy.html\">copy</a></li><li><a href=\"fn.empty.html\">empty</a></li><li><a href=\"fn.read_to_string.html\">read_to_string</a></li><li><a href=\"fn.repeat.html\">repeat</a></li><li><a href=\"fn.sink.html\">sink</a></li><li><a href=\"fn.stderr.html\">stderr</a></li><li><a href=\"fn.stdin.html\">stdin</a></li><li><a href=\"fn.stdout.html\">stdout</a></li></ul><h3><a href=\"index.html#types\">Type Aliases</a></h3><ul class=\"block type\"><li><a href=\"type.RawOsError.html\">RawOsError</a></li><li><a href=\"type.Result.html\">Result</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Function <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">io</a>::<wbr><a class=\"fn\" href=\"#\">sink</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.79.0\">1.0.0 (const: 1.79.0)</span> · <a class=\"src\" href=\"../../src/std/io/util.rs.html#280-282\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub const fn sink() -&gt; <a class=\"struct\" href=\"struct.Sink.html\" title=\"struct std::io::Sink\">Sink</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Sink\">ⓘ</a></code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Creates an instance of a writer which will successfully consume all data.</p>\n<p>All calls to <a href=\"trait.Write.html#tymethod.write\" title=\"method std::io::Write::write\"><code>write</code></a> on the returned instance will return <a href=\"../result/enum.Result.html#variant.Ok\" title=\"variant std::result::Result::Ok\"><code>Ok(buf.len())</code></a>\nand the contents of the buffer will not be inspected.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io::{<span class=\"self\">self</span>, Write};\n\n<span class=\"kw\">let </span>buffer = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>];\n<span class=\"kw\">let </span>num_bytes = io::sink().write(<span class=\"kw-2\">&amp;</span>buffer).unwrap();\n<span class=\"macro\">assert_eq!</span>(num_bytes, <span class=\"number\">5</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::io::%7Bself,+Write%7D;%0A++++%0A++++let+buffer+=+vec!%5B1,+2,+3,+5,+8%5D;%0A++++let+num_bytes+=+io::sink().write(%26buffer).unwrap();%0A++++assert_eq!(num_bytes,+5);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><script type=\"text/json\" id=\"notable-traits-data\">{\"Sink\":\"<h3>Notable traits for <code>&amp;<a class=\\\"struct\\\" href=\\\"struct.Sink.html\\\" title=\\\"struct std::io::Sink\\\">Sink</a></code></h3><pre><code><div class=\\\"where\\\">impl <a class=\\\"trait\\\" href=\\\"trait.Write.html\\\" title=\\\"trait std::io::Write\\\">Write</a> for &amp;<a class=\\\"struct\\\" href=\\\"struct.Sink.html\\\" title=\\\"struct std::io::Sink\\\">Sink</a></div><div class=\\\"where\\\">impl <a class=\\\"trait\\\" href=\\\"trait.Write.html\\\" title=\\\"trait std::io::Write\\\">Write</a> for <a class=\\\"struct\\\" href=\\\"struct.Sink.html\\\" title=\\\"struct std::io::Sink\\\">Sink</a></div>\"}</script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:11:33.638Z"
}