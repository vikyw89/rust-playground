{
	"title": "trait - Rust",
	"url": "https://doc.rust-lang.org/stable/std/keyword.trait.html",
	"markdown": "# trait - Rust\n\nExpand description\n\nA common interface for a group of types.\n\nA `trait` is like an interface that data types can implement. When a type implements a trait it can be treated abstractly as that trait using generics or trait objects.\n\nTraits can be made up of three varieties of associated items:\n\n-   functions and methods\n-   types\n-   constants\n\nTraits may also contain additional type parameters. Those type parameters or the trait itself can be constrained by other traits.\n\nTraits can serve as markers or carry other logical semantics that aren’t expressed through their items. When a type implements that trait it is promising to uphold its contract. [`Send`](marker/trait.Send.html \"trait std::marker::Send\") and [`Sync`](marker/trait.Sync.html \"trait std::marker::Sync\") are two such marker traits present in the standard library.\n\nSee the [Reference](../reference/items/traits.html) for a lot more information on traits.\n\n## [§](#examples)Examples\n\nTraits are declared using the `trait` keyword. Types can implement them using [`impl`](keyword.impl.html) `Trait` [`for`](keyword.for.html) `Type`:\n\n```\ntrait Zero {\n    const ZERO: Self;\n    fn is_zero(&self) -> bool;\n}\n\nimpl Zero for i32 {\n    const ZERO: Self = 0;\n\n    fn is_zero(&self) -> bool {\n        *self == Self::ZERO\n    }\n}\n\nassert_eq!(i32::ZERO, 0);\nassert!(i32::ZERO.is_zero());\nassert!(!4.is_zero());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++trait+Zero+%7B%0A++++++++const+ZERO:+Self;%0A++++++++fn+is_zero(%26self)+-%3E+bool;%0A++++%7D%0A++++%0A++++impl+Zero+for+i32+%7B%0A++++++++const+ZERO:+Self+=+0;%0A++++%0A++++++++fn+is_zero(%26self)+-%3E+bool+%7B%0A++++++++++++*self+==+Self::ZERO%0A++++++++%7D%0A++++%7D%0A++++%0A++++assert_eq!(i32::ZERO,+0);%0A++++assert!(i32::ZERO.is_zero());%0A++++assert!(!4.is_zero());%0A%7D&edition=2021)\n\nWith an associated type:\n\n```\ntrait Builder {\n    type Built;\n\n    fn build(&self) -> Self::Built;\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++trait+Builder+%7B%0A++++++++type+Built;%0A++++%0A++++++++fn+build(%26self)+-%3E+Self::Built;%0A++++%7D%0A%7D&edition=2021)\n\nTraits can be generic, with constraints or without:\n\n```\ntrait MaybeFrom<T> {\n    fn maybe_from(value: T) -> Option<Self>\n    where\n        Self: Sized;\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++trait+MaybeFrom%3CT%3E+%7B%0A++++++++fn+maybe_from(value:+T)+-%3E+Option%3CSelf%3E%0A++++++++where%0A++++++++++++Self:+Sized;%0A++++%7D%0A%7D&edition=2021)\n\nTraits can build upon the requirements of other traits. In the example below `Iterator` is a **supertrait** and `ThreeIterator` is a **subtrait**:\n\n```\ntrait ThreeIterator: Iterator {\n    fn next_three(&mut self) -> Option<[Self::Item; 3]>;\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++trait+ThreeIterator:+Iterator+%7B%0A++++++++fn+next_three(%26mut+self)+-%3E+Option%3C%5BSelf::Item;+3%5D%3E;%0A++++%7D%0A%7D&edition=2021)\n\nTraits can be used in functions, as parameters:\n\n```\nfn debug_iter<I: Iterator>(it: I) where I::Item: std::fmt::Debug {\n    for elem in it {\n        println!(\"{elem:#?}\");\n    }\n}\n\n// u8_len_1, u8_len_2 and u8_len_3 are equivalent\n\nfn u8_len_1(val: impl Into<Vec<u8>>) -> usize {\n    val.into().len()\n}\n\nfn u8_len_2<T: Into<Vec<u8>>>(val: T) -> usize {\n    val.into().len()\n}\n\nfn u8_len_3<T>(val: T) -> usize\nwhere\n    T: Into<Vec<u8>>,\n{\n    val.into().len()\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Ballow(dead_code)%5D%0Afn+main()+%7B%0A++++fn+debug_iter%3CI:+Iterator%3E(it:+I)+where+I::Item:+std::fmt::Debug+%7B%0A++++++++for+elem+in+it+%7B%0A++++++++++++println!(%22%7Belem:%23?%7D%22);%0A++++++++%7D%0A++++%7D%0A++++%0A++++//+u8_len_1,+u8_len_2+and+u8_len_3+are+equivalent%0A++++%0A++++fn+u8_len_1(val:+impl+Into%3CVec%3Cu8%3E%3E)+-%3E+usize+%7B%0A++++++++val.into().len()%0A++++%7D%0A++++%0A++++fn+u8_len_2%3CT:+Into%3CVec%3Cu8%3E%3E%3E(val:+T)+-%3E+usize+%7B%0A++++++++val.into().len()%0A++++%7D%0A++++%0A++++fn+u8_len_3%3CT%3E(val:+T)+-%3E+usize%0A++++where%0A++++++++T:+Into%3CVec%3Cu8%3E%3E,%0A++++%7B%0A++++++++val.into().len()%0A++++%7D%0A%7D&edition=2021)\n\nOr as return types:\n\n```\nfn from_zero_to(v: u8) -> impl Iterator<Item = u8> {\n    (0..v).into_iter()\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Ballow(dead_code)%5D%0Afn+main()+%7B%0A++++fn+from_zero_to(v:+u8)+-%3E+impl+Iterator%3CItem+=+u8%3E+%7B%0A++++++++(0..v).into_iter()%0A++++%7D%0A%7D&edition=2021)\n\nThe use of the [`impl`](keyword.impl.html) keyword in this position allows the function writer to hide the concrete type as an implementation detail which can change without breaking user’s code.\n\n## [§](#trait-objects)Trait objects\n\nA _trait object_ is an opaque value of another type that implements a set of traits. A trait object implements all specified traits as well as their supertraits (if any).\n\nThe syntax is the following: `dyn BaseTrait + AutoTrait1 + ... AutoTraitN`. Only one `BaseTrait` can be used so this will not compile:\n\n[ⓘ](# \"This example deliberately fails to compile\")\n\n```\ntrait A {}\ntrait B {}\n\nlet _: Box<dyn A + B>;\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++trait+A+%7B%7D%0A++++trait+B+%7B%7D%0A++++%0A++++let+_:+Box%3Cdyn+A+%2B+B%3E;%0A%7D&edition=2021)\n\nNeither will this, which is a syntax error:\n\n[ⓘ](# \"This example deliberately fails to compile\")\n\n```\ntrait A {}\ntrait B {}\n\nlet _: Box<dyn A + dyn B>;\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++trait+A+%7B%7D%0A++++trait+B+%7B%7D%0A++++%0A++++let+_:+Box%3Cdyn+A+%2B+dyn+B%3E;%0A%7D&edition=2021)\n\nOn the other hand, this is correct:\n\n```\ntrait A {}\n\nlet _: Box<dyn A + Send + Sync>;\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++trait+A+%7B%7D%0A++++%0A++++let+_:+Box%3Cdyn+A+%2B+Send+%2B+Sync%3E;%0A%7D&edition=2021)\n\nThe [Reference](../reference/types/trait-object.html) has more information about trait objects, their limitations and the differences between editions.\n\n## [§](#unsafe-traits)Unsafe traits\n\nSome traits may be unsafe to implement. Using the [`unsafe`](keyword.unsafe.html) keyword in front of the trait’s declaration is used to mark this:\n\n```\nunsafe trait UnsafeTrait {}\n\nunsafe impl UnsafeTrait for i32 {}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++unsafe+trait+UnsafeTrait+%7B%7D%0A++++%0A++++unsafe+impl+UnsafeTrait+for+i32+%7B%7D%0A%7D&edition=2021)\n\n## [§](#differences-between-the-2015-and-2018-editions)Differences between the 2015 and 2018 editions\n\nIn the 2015 edition the parameters pattern was not needed for traits:\n\n[ⓘ](# \"This example runs with edition 2015\")\n\n```\ntrait Tr {\n    fn f(i32);\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Ballow(anonymous_parameters)%5D%0Afn+main()+%7B%0A++++trait+Tr+%7B%0A++++++++fn+f(i32);%0A++++%7D%0A%7D&edition=2015)\n\nThis behavior is no longer valid in edition 2018.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"A common interface for a group of types.\"><title>trait - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../\" data-static-root-path=\"../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc keyword\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../std/index.html\"><img class=\"rust-logo\" src=\"../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../std/index.html\"><img class=\"rust-logo\" src=\"../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><div class=\"sidebar-elems\"><h3><a href=\"index.html#primitives\">Primitive Types</a></h3><ul class=\"block primitive\"><li><a href=\"primitive.array.html\">array</a></li><li><a href=\"primitive.bool.html\">bool</a></li><li><a href=\"primitive.char.html\">char</a></li><li><a href=\"primitive.f128.html\">f128</a></li><li><a href=\"primitive.f16.html\">f16</a></li><li><a href=\"primitive.f32.html\">f32</a></li><li><a href=\"primitive.f64.html\">f64</a></li><li><a href=\"primitive.fn.html\">fn</a></li><li><a href=\"primitive.i128.html\">i128</a></li><li><a href=\"primitive.i16.html\">i16</a></li><li><a href=\"primitive.i32.html\">i32</a></li><li><a href=\"primitive.i64.html\">i64</a></li><li><a href=\"primitive.i8.html\">i8</a></li><li><a href=\"primitive.isize.html\">isize</a></li><li><a href=\"primitive.never.html\">never</a></li><li><a href=\"primitive.pointer.html\">pointer</a></li><li><a href=\"primitive.reference.html\">reference</a></li><li><a href=\"primitive.slice.html\">slice</a></li><li><a href=\"primitive.str.html\">str</a></li><li><a href=\"primitive.tuple.html\">tuple</a></li><li><a href=\"primitive.u128.html\">u128</a></li><li><a href=\"primitive.u16.html\">u16</a></li><li><a href=\"primitive.u32.html\">u32</a></li><li><a href=\"primitive.u64.html\">u64</a></li><li><a href=\"primitive.u8.html\">u8</a></li><li><a href=\"primitive.unit.html\">unit</a></li><li><a href=\"primitive.usize.html\">usize</a></li></ul><h3><a href=\"index.html#modules\">Modules</a></h3><ul class=\"block mod\"><li><a href=\"alloc/index.html\">alloc</a></li><li><a href=\"any/index.html\">any</a></li><li><a href=\"arch/index.html\">arch</a></li><li><a href=\"array/index.html\">array</a></li><li><a href=\"ascii/index.html\">ascii</a></li><li><a href=\"assert_matches/index.html\">assert_matches</a></li><li><a href=\"async_iter/index.html\">async_iter</a></li><li><a href=\"backtrace/index.html\">backtrace</a></li><li><a href=\"borrow/index.html\">borrow</a></li><li><a href=\"boxed/index.html\">boxed</a></li><li><a href=\"cell/index.html\">cell</a></li><li><a href=\"char/index.html\">char</a></li><li><a href=\"clone/index.html\">clone</a></li><li><a href=\"cmp/index.html\">cmp</a></li><li><a href=\"collections/index.html\">collections</a></li><li><a href=\"convert/index.html\">convert</a></li><li><a href=\"default/index.html\">default</a></li><li><a href=\"env/index.html\">env</a></li><li><a href=\"error/index.html\">error</a></li><li><a href=\"f128/index.html\">f128</a></li><li><a href=\"f16/index.html\">f16</a></li><li><a href=\"f32/index.html\">f32</a></li><li><a href=\"f64/index.html\">f64</a></li><li><a href=\"ffi/index.html\">ffi</a></li><li><a href=\"fmt/index.html\">fmt</a></li><li><a href=\"fs/index.html\">fs</a></li><li><a href=\"future/index.html\">future</a></li><li><a href=\"hash/index.html\">hash</a></li><li><a href=\"hint/index.html\">hint</a></li><li><a href=\"i128/index.html\">i128</a></li><li><a href=\"i16/index.html\">i16</a></li><li><a href=\"i32/index.html\">i32</a></li><li><a href=\"i64/index.html\">i64</a></li><li><a href=\"i8/index.html\">i8</a></li><li><a href=\"intrinsics/index.html\">intrinsics</a></li><li><a href=\"io/index.html\">io</a></li><li><a href=\"isize/index.html\">isize</a></li><li><a href=\"iter/index.html\">iter</a></li><li><a href=\"marker/index.html\">marker</a></li><li><a href=\"mem/index.html\">mem</a></li><li><a href=\"net/index.html\">net</a></li><li><a href=\"num/index.html\">num</a></li><li><a href=\"ops/index.html\">ops</a></li><li><a href=\"option/index.html\">option</a></li><li><a href=\"os/index.html\">os</a></li><li><a href=\"panic/index.html\">panic</a></li><li><a href=\"pat/index.html\">pat</a></li><li><a href=\"path/index.html\">path</a></li><li><a href=\"pin/index.html\">pin</a></li><li><a href=\"prelude/index.html\">prelude</a></li><li><a href=\"primitive/index.html\">primitive</a></li><li><a href=\"process/index.html\">process</a></li><li><a href=\"ptr/index.html\">ptr</a></li><li><a href=\"rc/index.html\">rc</a></li><li><a href=\"result/index.html\">result</a></li><li><a href=\"simd/index.html\">simd</a></li><li><a href=\"slice/index.html\">slice</a></li><li><a href=\"str/index.html\">str</a></li><li><a href=\"string/index.html\">string</a></li><li><a href=\"sync/index.html\">sync</a></li><li><a href=\"task/index.html\">task</a></li><li><a href=\"thread/index.html\">thread</a></li><li><a href=\"time/index.html\">time</a></li><li><a href=\"u128/index.html\">u128</a></li><li><a href=\"u16/index.html\">u16</a></li><li><a href=\"u32/index.html\">u32</a></li><li><a href=\"u64/index.html\">u64</a></li><li><a href=\"u8/index.html\">u8</a></li><li><a href=\"usize/index.html\">usize</a></li><li><a href=\"vec/index.html\">vec</a></li></ul><h3><a href=\"index.html#macros\">Macros</a></h3><ul class=\"block macro\"><li><a href=\"macro.assert.html\">assert</a></li><li><a href=\"macro.assert_eq.html\">assert_eq</a></li><li><a href=\"macro.assert_ne.html\">assert_ne</a></li><li><a href=\"macro.cfg.html\">cfg</a></li><li><a href=\"macro.cfg_match.html\">cfg_match</a></li><li><a href=\"macro.column.html\">column</a></li><li><a href=\"macro.compile_error.html\">compile_error</a></li><li><a href=\"macro.concat.html\">concat</a></li><li><a href=\"macro.concat_bytes.html\">concat_bytes</a></li><li><a href=\"macro.concat_idents.html\">concat_idents</a></li><li><a href=\"macro.const_format_args.html\">const_format_args</a></li><li><a href=\"macro.dbg.html\">dbg</a></li><li><a href=\"macro.debug_assert.html\">debug_assert</a></li><li><a href=\"macro.debug_assert_eq.html\">debug_assert_eq</a></li><li><a href=\"macro.debug_assert_ne.html\">debug_assert_ne</a></li><li><a href=\"macro.env.html\">env</a></li><li><a href=\"macro.eprint.html\">eprint</a></li><li><a href=\"macro.eprintln.html\">eprintln</a></li><li><a href=\"macro.file.html\">file</a></li><li><a href=\"macro.format.html\">format</a></li><li><a href=\"macro.format_args.html\">format_args</a></li><li><a href=\"macro.format_args_nl.html\">format_args_nl</a></li><li><a href=\"macro.include.html\">include</a></li><li><a href=\"macro.include_bytes.html\">include_bytes</a></li><li><a href=\"macro.include_str.html\">include_str</a></li><li><a href=\"macro.is_x86_feature_detected.html\">is_x86_feature_detected</a></li><li><a href=\"macro.line.html\">line</a></li><li><a href=\"macro.log_syntax.html\">log_syntax</a></li><li><a href=\"macro.matches.html\">matches</a></li><li><a href=\"macro.module_path.html\">module_path</a></li><li><a href=\"macro.option_env.html\">option_env</a></li><li><a href=\"macro.panic.html\">panic</a></li><li><a href=\"macro.print.html\">print</a></li><li><a href=\"macro.println.html\">println</a></li><li><a href=\"macro.stringify.html\">stringify</a></li><li><a href=\"macro.thread_local.html\">thread_local</a></li><li><a href=\"macro.todo.html\">todo</a></li><li><a href=\"macro.trace_macros.html\">trace_macros</a></li><li><a href=\"macro.try.html\">try</a></li><li><a href=\"macro.unimplemented.html\">unimplemented</a></li><li><a href=\"macro.unreachable.html\">unreachable</a></li><li><a href=\"macro.vec.html\">vec</a></li><li><a href=\"macro.write.html\">write</a></li><li><a href=\"macro.writeln.html\">writeln</a></li></ul><h3><a href=\"index.html#keywords\">Keywords</a></h3><ul class=\"block keyword\"><li><a href=\"keyword.SelfTy.html\">SelfTy</a></li><li><a href=\"keyword.as.html\">as</a></li><li><a href=\"keyword.async.html\">async</a></li><li><a href=\"keyword.await.html\">await</a></li><li><a href=\"keyword.break.html\">break</a></li><li><a href=\"keyword.const.html\">const</a></li><li><a href=\"keyword.continue.html\">continue</a></li><li><a href=\"keyword.crate.html\">crate</a></li><li><a href=\"keyword.dyn.html\">dyn</a></li><li><a href=\"keyword.else.html\">else</a></li><li><a href=\"keyword.enum.html\">enum</a></li><li><a href=\"keyword.extern.html\">extern</a></li><li><a href=\"keyword.false.html\">false</a></li><li><a href=\"keyword.fn.html\">fn</a></li><li><a href=\"keyword.for.html\">for</a></li><li><a href=\"keyword.if.html\">if</a></li><li><a href=\"keyword.impl.html\">impl</a></li><li><a href=\"keyword.in.html\">in</a></li><li><a href=\"keyword.let.html\">let</a></li><li><a href=\"keyword.loop.html\">loop</a></li><li><a href=\"keyword.match.html\">match</a></li><li><a href=\"keyword.mod.html\">mod</a></li><li><a href=\"keyword.move.html\">move</a></li><li><a href=\"keyword.mut.html\">mut</a></li><li><a href=\"keyword.pub.html\">pub</a></li><li><a href=\"keyword.ref.html\">ref</a></li><li><a href=\"keyword.return.html\">return</a></li><li><a href=\"keyword.self.html\">self</a></li><li><a href=\"keyword.static.html\">static</a></li><li><a href=\"keyword.struct.html\">struct</a></li><li><a href=\"keyword.super.html\">super</a></li><li><a href=\"keyword.trait.html\">trait</a></li><li><a href=\"keyword.true.html\">true</a></li><li><a href=\"keyword.type.html\">type</a></li><li><a href=\"keyword.union.html\">union</a></li><li><a href=\"keyword.unsafe.html\">unsafe</a></li><li><a href=\"keyword.use.html\">use</a></li><li><a href=\"keyword.where.html\">where</a></li><li><a href=\"keyword.while.html\">while</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Keyword <a class=\"keyword\" href=\"#\">trait</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><a class=\"src\" href=\"../src/std/keyword_docs.rs.html#1792\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>A common interface for a group of types.</p>\n<p>A <code>trait</code> is like an interface that data types can implement. When a type\nimplements a trait it can be treated abstractly as that trait using generics\nor trait objects.</p>\n<p>Traits can be made up of three varieties of associated items:</p>\n<ul>\n<li>functions and methods</li>\n<li>types</li>\n<li>constants</li>\n</ul>\n<p>Traits may also contain additional type parameters. Those type parameters\nor the trait itself can be constrained by other traits.</p>\n<p>Traits can serve as markers or carry other logical semantics that\naren’t expressed through their items. When a type implements that\ntrait it is promising to uphold its contract. <a href=\"marker/trait.Send.html\" title=\"trait std::marker::Send\"><code>Send</code></a> and <a href=\"marker/trait.Sync.html\" title=\"trait std::marker::Sync\"><code>Sync</code></a> are two\nsuch marker traits present in the standard library.</p>\n<p>See the <a href=\"../reference/items/traits.html\">Reference</a> for a lot more information on traits.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<p>Traits are declared using the <code>trait</code> keyword. Types can implement them\nusing <a href=\"keyword.impl.html\"><code>impl</code></a> <code>Trait</code> <a href=\"keyword.for.html\"><code>for</code></a> <code>Type</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">trait </span>Zero {\n    <span class=\"kw\">const </span>ZERO: <span class=\"self\">Self</span>;\n    <span class=\"kw\">fn </span>is_zero(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; bool;\n}\n\n<span class=\"kw\">impl </span>Zero <span class=\"kw\">for </span>i32 {\n    <span class=\"kw\">const </span>ZERO: <span class=\"self\">Self </span>= <span class=\"number\">0</span>;\n\n    <span class=\"kw\">fn </span>is_zero(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; bool {\n        <span class=\"kw-2\">*</span><span class=\"self\">self </span>== <span class=\"self\">Self</span>::ZERO\n    }\n}\n\n<span class=\"macro\">assert_eq!</span>(i32::ZERO, <span class=\"number\">0</span>);\n<span class=\"macro\">assert!</span>(i32::ZERO.is_zero());\n<span class=\"macro\">assert!</span>(!<span class=\"number\">4</span>.is_zero());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++trait+Zero+%7B%0A++++++++const+ZERO:+Self;%0A++++++++fn+is_zero(%26self)+-%3E+bool;%0A++++%7D%0A++++%0A++++impl+Zero+for+i32+%7B%0A++++++++const+ZERO:+Self+=+0;%0A++++%0A++++++++fn+is_zero(%26self)+-%3E+bool+%7B%0A++++++++++++*self+==+Self::ZERO%0A++++++++%7D%0A++++%7D%0A++++%0A++++assert_eq!(i32::ZERO,+0);%0A++++assert!(i32::ZERO.is_zero());%0A++++assert!(!4.is_zero());%0A%7D&amp;edition=2021\">Run</a></div>\n<p>With an associated type:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">trait </span>Builder {\n    <span class=\"kw\">type </span>Built;\n\n    <span class=\"kw\">fn </span>build(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; <span class=\"self\">Self</span>::Built;\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++trait+Builder+%7B%0A++++++++type+Built;%0A++++%0A++++++++fn+build(%26self)+-%3E+Self::Built;%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Traits can be generic, with constraints or without:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">trait </span>MaybeFrom&lt;T&gt; {\n    <span class=\"kw\">fn </span>maybe_from(value: T) -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"self\">Self</span>&gt;\n    <span class=\"kw\">where\n        </span><span class=\"self\">Self</span>: Sized;\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++trait+MaybeFrom%3CT%3E+%7B%0A++++++++fn+maybe_from(value:+T)+-%3E+Option%3CSelf%3E%0A++++++++where%0A++++++++++++Self:+Sized;%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Traits can build upon the requirements of other traits. In the example\nbelow <code>Iterator</code> is a <strong>supertrait</strong> and <code>ThreeIterator</code> is a <strong>subtrait</strong>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">trait </span>ThreeIterator: Iterator {\n    <span class=\"kw\">fn </span>next_three(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Option</span>&lt;[<span class=\"self\">Self</span>::Item; <span class=\"number\">3</span>]&gt;;\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++trait+ThreeIterator:+Iterator+%7B%0A++++++++fn+next_three(%26mut+self)+-%3E+Option%3C%5BSelf::Item;+3%5D%3E;%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Traits can be used in functions, as parameters:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>debug_iter&lt;I: Iterator&gt;(it: I) <span class=\"kw\">where </span>I::Item: std::fmt::Debug {\n    <span class=\"kw\">for </span>elem <span class=\"kw\">in </span>it {\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"{elem:#?}\"</span>);\n    }\n}\n\n<span class=\"comment\">// u8_len_1, u8_len_2 and u8_len_3 are equivalent\n\n</span><span class=\"kw\">fn </span>u8_len_1(val: <span class=\"kw\">impl </span>Into&lt;Vec&lt;u8&gt;&gt;) -&gt; usize {\n    val.into().len()\n}\n\n<span class=\"kw\">fn </span>u8_len_2&lt;T: Into&lt;Vec&lt;u8&gt;&gt;&gt;(val: T) -&gt; usize {\n    val.into().len()\n}\n\n<span class=\"kw\">fn </span>u8_len_3&lt;T&gt;(val: T) -&gt; usize\n<span class=\"kw\">where\n    </span>T: Into&lt;Vec&lt;u8&gt;&gt;,\n{\n    val.into().len()\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Ballow(dead_code)%5D%0Afn+main()+%7B%0A++++fn+debug_iter%3CI:+Iterator%3E(it:+I)+where+I::Item:+std::fmt::Debug+%7B%0A++++++++for+elem+in+it+%7B%0A++++++++++++println!(%22%7Belem:%23?%7D%22);%0A++++++++%7D%0A++++%7D%0A++++%0A++++//+u8_len_1,+u8_len_2+and+u8_len_3+are+equivalent%0A++++%0A++++fn+u8_len_1(val:+impl+Into%3CVec%3Cu8%3E%3E)+-%3E+usize+%7B%0A++++++++val.into().len()%0A++++%7D%0A++++%0A++++fn+u8_len_2%3CT:+Into%3CVec%3Cu8%3E%3E%3E(val:+T)+-%3E+usize+%7B%0A++++++++val.into().len()%0A++++%7D%0A++++%0A++++fn+u8_len_3%3CT%3E(val:+T)+-%3E+usize%0A++++where%0A++++++++T:+Into%3CVec%3Cu8%3E%3E,%0A++++%7B%0A++++++++val.into().len()%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Or as return types:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>from_zero_to(v: u8) -&gt; <span class=\"kw\">impl </span>Iterator&lt;Item = u8&gt; {\n    (<span class=\"number\">0</span>..v).into_iter()\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Ballow(dead_code)%5D%0Afn+main()+%7B%0A++++fn+from_zero_to(v:+u8)+-%3E+impl+Iterator%3CItem+=+u8%3E+%7B%0A++++++++(0..v).into_iter()%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<p>The use of the <a href=\"keyword.impl.html\"><code>impl</code></a> keyword in this position allows the function writer\nto hide the concrete type as an implementation detail which can change\nwithout breaking user’s code.</p>\n<h2 id=\"trait-objects\"><a class=\"doc-anchor\" href=\"#trait-objects\">§</a>Trait objects</h2>\n<p>A <em>trait object</em> is an opaque value of another type that implements a set of\ntraits. A trait object implements all specified traits as well as their\nsupertraits (if any).</p>\n<p>The syntax is the following: <code>dyn BaseTrait + AutoTrait1 + ... AutoTraitN</code>.\nOnly one <code>BaseTrait</code> can be used so this will not compile:</p>\n\n<div class=\"example-wrap compile_fail\"><a href=\"#\" class=\"tooltip\" title=\"This example deliberately fails to compile\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">trait </span>A {}\n<span class=\"kw\">trait </span>B {}\n\n<span class=\"kw\">let _</span>: Box&lt;<span class=\"kw\">dyn </span>A + B&gt;;</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++trait+A+%7B%7D%0A++++trait+B+%7B%7D%0A++++%0A++++let+_:+Box%3Cdyn+A+%2B+B%3E;%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Neither will this, which is a syntax error:</p>\n\n<div class=\"example-wrap compile_fail\"><a href=\"#\" class=\"tooltip\" title=\"This example deliberately fails to compile\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">trait </span>A {}\n<span class=\"kw\">trait </span>B {}\n\n<span class=\"kw\">let _</span>: Box&lt;<span class=\"kw\">dyn </span>A + <span class=\"kw\">dyn </span>B&gt;;</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++trait+A+%7B%7D%0A++++trait+B+%7B%7D%0A++++%0A++++let+_:+Box%3Cdyn+A+%2B+dyn+B%3E;%0A%7D&amp;edition=2021\">Run</a></div>\n<p>On the other hand, this is correct:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">trait </span>A {}\n\n<span class=\"kw\">let _</span>: Box&lt;<span class=\"kw\">dyn </span>A + Send + Sync&gt;;</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++trait+A+%7B%7D%0A++++%0A++++let+_:+Box%3Cdyn+A+%2B+Send+%2B+Sync%3E;%0A%7D&amp;edition=2021\">Run</a></div>\n<p>The <a href=\"../reference/types/trait-object.html\">Reference</a> has more information about trait objects,\ntheir limitations and the differences between editions.</p>\n<h2 id=\"unsafe-traits\"><a class=\"doc-anchor\" href=\"#unsafe-traits\">§</a>Unsafe traits</h2>\n<p>Some traits may be unsafe to implement. Using the <a href=\"keyword.unsafe.html\"><code>unsafe</code></a> keyword in\nfront of the trait’s declaration is used to mark this:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">unsafe trait </span>UnsafeTrait {}\n\n<span class=\"kw\">unsafe impl </span>UnsafeTrait <span class=\"kw\">for </span>i32 {}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++unsafe+trait+UnsafeTrait+%7B%7D%0A++++%0A++++unsafe+impl+UnsafeTrait+for+i32+%7B%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<h2 id=\"differences-between-the-2015-and-2018-editions\"><a class=\"doc-anchor\" href=\"#differences-between-the-2015-and-2018-editions\">§</a>Differences between the 2015 and 2018 editions</h2>\n<p>In the 2015 edition the parameters pattern was not needed for traits:</p>\n\n<div class=\"example-wrap edition\"><a href=\"#\" class=\"tooltip\" title=\"This example runs with edition 2015\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">trait </span>Tr {\n    <span class=\"kw\">fn </span>f(i32);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Ballow(anonymous_parameters)%5D%0Afn+main()+%7B%0A++++trait+Tr+%7B%0A++++++++fn+f(i32);%0A++++%7D%0A%7D&amp;edition=2015\">Run</a></div>\n<p>This behavior is no longer valid in edition 2018.</p>\n</div></details></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:11:31.516Z"
}