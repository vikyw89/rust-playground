{
	"title": "dbg in std - Rust",
	"url": "https://doc.rust-lang.org/stable/std/macro.dbg.html",
	"markdown": "# dbg in std - Rust\n\n## Macro [std](index.html)::[dbg](#)\n\n1.32.0 · [source](about:blank/src/std/macros.rs.html#352-374) ·\n\n```\nmacro_rules! dbg {\n    () => { ... };\n    ($val:expr $(,)?) => { ... };\n    ($($val:expr),+ $(,)?) => { ... };\n}\n```\n\nExpand description\n\nPrints and returns the value of a given expression for quick and dirty debugging.\n\nAn example:\n\n```\nlet a = 2;\nlet b = dbg!(a * 2) + 1;\n//      ^-- prints: [src/main.rs:2] a * 2 = 4\nassert_eq!(b, 5);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+a+=+2;%0A++++let+b+=+dbg!(a+*+2)+%2B+1;%0A++++//++++++%5E--+prints:+%5Bsrc/main.rs:2%5D+a+*+2+=+4%0A++++assert_eq!(b,+5);%0A%7D&edition=2021)\n\nThe macro works by using the `Debug` implementation of the type of the given expression to print the value to [stderr](https://en.wikipedia.org/wiki/Standard_streams#Standard_error_(stderr)) along with the source location of the macro invocation as well as the source code of the expression.\n\nInvoking the macro on an expression moves and takes ownership of it before returning the evaluated expression unchanged. If the type of the expression does not implement `Copy` and you don’t want to give up ownership, you can instead borrow with `dbg!(&expr)` for some expression `expr`.\n\nThe `dbg!` macro works exactly the same in release builds. This is useful when debugging issues that only occur in release builds or when debugging in release mode is significantly faster.\n\nNote that the macro is intended as a debugging tool and therefore you should avoid having uses of it in version control for long periods (other than in tests and similar). Debug output from production code is better done with other facilities such as the [`debug!`](https://docs.rs/log/*/log/macro.debug.html) macro from the [`log`](https://crates.io/crates/log) crate.\n\n## [§](#stability)Stability\n\nThe exact output printed by this macro should not be relied upon and is subject to future changes.\n\n## [§](#panics)Panics\n\nPanics if writing to `io::stderr` fails.\n\n## [§](#further-examples)Further examples\n\nWith a method call:\n\n```\nfn foo(n: usize) {\n    if let Some(_) = dbg!(n.checked_sub(4)) {\n        // ...\n    }\n}\n\nfoo(3)\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++fn+foo(n:+usize)+%7B%0A++++++++if+let+Some(_)+=+dbg!(n.checked_sub(4))+%7B%0A++++++++++++//+...%0A++++++++%7D%0A++++%7D%0A++++%0A++++foo(3)%0A%7D&edition=2021)\n\nThis prints to [stderr](https://en.wikipedia.org/wiki/Standard_streams#Standard_error_(stderr)):\n\n```text\n[src/main.rs:4] n.checked_sub(4) = None\n\n```\n\nNaive factorial implementation:\n\n```\nfn factorial(n: u32) -> u32 {\n    if dbg!(n <= 1) {\n        dbg!(1)\n    } else {\n        dbg!(n * factorial(n - 1))\n    }\n}\n\ndbg!(factorial(4));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++fn+factorial(n:+u32)+-%3E+u32+%7B%0A++++++++if+dbg!(n+%3C=+1)+%7B%0A++++++++++++dbg!(1)%0A++++++++%7D+else+%7B%0A++++++++++++dbg!(n+*+factorial(n+-+1))%0A++++++++%7D%0A++++%7D%0A++++%0A++++dbg!(factorial(4));%0A%7D&edition=2021)\n\nThis prints to [stderr](https://en.wikipedia.org/wiki/Standard_streams#Standard_error_(stderr)):\n\n```text\n[src/main.rs:3] n <= 1 = false\n[src/main.rs:3] n <= 1 = false\n[src/main.rs:3] n <= 1 = false\n[src/main.rs:3] n <= 1 = true\n[src/main.rs:4] 1 = 1\n[src/main.rs:5] n * factorial(n - 1) = 2\n[src/main.rs:5] n * factorial(n - 1) = 6\n[src/main.rs:5] n * factorial(n - 1) = 24\n[src/main.rs:11] factorial(4) = 24\n\n```\n\nThe `dbg!(..)` macro moves the input:\n\n[ⓘ](# \"This example deliberately fails to compile\")\n\n```\n/// A wrapper around `usize` which importantly is not Copyable.\n#[derive(Debug)]\nstruct NoCopy(usize);\n\nlet a = NoCopy(42);\nlet _ = dbg!(a); // <-- `a` is moved here.\nlet _ = dbg!(a); // <-- `a` is moved again; error!\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++///+A+wrapper+around+%60usize%60+which+importantly+is+not+Copyable.%0A++++%23%5Bderive(Debug)%5D%0A++++struct+NoCopy(usize);%0A++++%0A++++let+a+=+NoCopy(42);%0A++++let+_+=+dbg!(a);+//+%3C--+%60a%60+is+moved+here.%0A++++let+_+=+dbg!(a);+//+%3C--+%60a%60+is+moved+again;+error!%0A%7D&edition=2021)\n\nYou can also use `dbg!()` without a value to just print the file and line whenever it’s reached.\n\nFinally, if you want to `dbg!(..)` multiple values, it will treat them as a tuple (and return it, too):\n\n```\nassert_eq!(dbg!(1usize, 2u32), (1, 2));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(dbg!(1usize,+2u32),+(1,+2));%0A%7D&edition=2021)\n\nHowever, a single argument with a trailing comma will still not be treated as a tuple, following the convention of ignoring trailing commas in macro invocations. You can use a 1-tuple directly if you need one:\n\n```\nassert_eq!(1, dbg!(1u32,)); // trailing comma ignored\nassert_eq!((1,), dbg!((1u32,))); // 1-tuple\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(1,+dbg!(1u32,));+//+trailing+comma+ignored%0A++++assert_eq!((1,),+dbg!((1u32,)));+//+1-tuple%0A%7D&edition=2021)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Prints and returns the value of a given expression for quick and dirty debugging.\"><title>dbg in std - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../\" data-static-root-path=\"../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc macro\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../std/index.html\"><img class=\"rust-logo\" src=\"../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../std/index.html\"><img class=\"rust-logo\" src=\"../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><div class=\"sidebar-elems\"><h3><a href=\"index.html#primitives\">Primitive Types</a></h3><ul class=\"block primitive\"><li><a href=\"primitive.array.html\">array</a></li><li><a href=\"primitive.bool.html\">bool</a></li><li><a href=\"primitive.char.html\">char</a></li><li><a href=\"primitive.f128.html\">f128</a></li><li><a href=\"primitive.f16.html\">f16</a></li><li><a href=\"primitive.f32.html\">f32</a></li><li><a href=\"primitive.f64.html\">f64</a></li><li><a href=\"primitive.fn.html\">fn</a></li><li><a href=\"primitive.i128.html\">i128</a></li><li><a href=\"primitive.i16.html\">i16</a></li><li><a href=\"primitive.i32.html\">i32</a></li><li><a href=\"primitive.i64.html\">i64</a></li><li><a href=\"primitive.i8.html\">i8</a></li><li><a href=\"primitive.isize.html\">isize</a></li><li><a href=\"primitive.never.html\">never</a></li><li><a href=\"primitive.pointer.html\">pointer</a></li><li><a href=\"primitive.reference.html\">reference</a></li><li><a href=\"primitive.slice.html\">slice</a></li><li><a href=\"primitive.str.html\">str</a></li><li><a href=\"primitive.tuple.html\">tuple</a></li><li><a href=\"primitive.u128.html\">u128</a></li><li><a href=\"primitive.u16.html\">u16</a></li><li><a href=\"primitive.u32.html\">u32</a></li><li><a href=\"primitive.u64.html\">u64</a></li><li><a href=\"primitive.u8.html\">u8</a></li><li><a href=\"primitive.unit.html\">unit</a></li><li><a href=\"primitive.usize.html\">usize</a></li></ul><h3><a href=\"index.html#modules\">Modules</a></h3><ul class=\"block mod\"><li><a href=\"alloc/index.html\">alloc</a></li><li><a href=\"any/index.html\">any</a></li><li><a href=\"arch/index.html\">arch</a></li><li><a href=\"array/index.html\">array</a></li><li><a href=\"ascii/index.html\">ascii</a></li><li><a href=\"assert_matches/index.html\">assert_matches</a></li><li><a href=\"async_iter/index.html\">async_iter</a></li><li><a href=\"backtrace/index.html\">backtrace</a></li><li><a href=\"borrow/index.html\">borrow</a></li><li><a href=\"boxed/index.html\">boxed</a></li><li><a href=\"cell/index.html\">cell</a></li><li><a href=\"char/index.html\">char</a></li><li><a href=\"clone/index.html\">clone</a></li><li><a href=\"cmp/index.html\">cmp</a></li><li><a href=\"collections/index.html\">collections</a></li><li><a href=\"convert/index.html\">convert</a></li><li><a href=\"default/index.html\">default</a></li><li><a href=\"env/index.html\">env</a></li><li><a href=\"error/index.html\">error</a></li><li><a href=\"f128/index.html\">f128</a></li><li><a href=\"f16/index.html\">f16</a></li><li><a href=\"f32/index.html\">f32</a></li><li><a href=\"f64/index.html\">f64</a></li><li><a href=\"ffi/index.html\">ffi</a></li><li><a href=\"fmt/index.html\">fmt</a></li><li><a href=\"fs/index.html\">fs</a></li><li><a href=\"future/index.html\">future</a></li><li><a href=\"hash/index.html\">hash</a></li><li><a href=\"hint/index.html\">hint</a></li><li><a href=\"i128/index.html\">i128</a></li><li><a href=\"i16/index.html\">i16</a></li><li><a href=\"i32/index.html\">i32</a></li><li><a href=\"i64/index.html\">i64</a></li><li><a href=\"i8/index.html\">i8</a></li><li><a href=\"intrinsics/index.html\">intrinsics</a></li><li><a href=\"io/index.html\">io</a></li><li><a href=\"isize/index.html\">isize</a></li><li><a href=\"iter/index.html\">iter</a></li><li><a href=\"marker/index.html\">marker</a></li><li><a href=\"mem/index.html\">mem</a></li><li><a href=\"net/index.html\">net</a></li><li><a href=\"num/index.html\">num</a></li><li><a href=\"ops/index.html\">ops</a></li><li><a href=\"option/index.html\">option</a></li><li><a href=\"os/index.html\">os</a></li><li><a href=\"panic/index.html\">panic</a></li><li><a href=\"pat/index.html\">pat</a></li><li><a href=\"path/index.html\">path</a></li><li><a href=\"pin/index.html\">pin</a></li><li><a href=\"prelude/index.html\">prelude</a></li><li><a href=\"primitive/index.html\">primitive</a></li><li><a href=\"process/index.html\">process</a></li><li><a href=\"ptr/index.html\">ptr</a></li><li><a href=\"rc/index.html\">rc</a></li><li><a href=\"result/index.html\">result</a></li><li><a href=\"simd/index.html\">simd</a></li><li><a href=\"slice/index.html\">slice</a></li><li><a href=\"str/index.html\">str</a></li><li><a href=\"string/index.html\">string</a></li><li><a href=\"sync/index.html\">sync</a></li><li><a href=\"task/index.html\">task</a></li><li><a href=\"thread/index.html\">thread</a></li><li><a href=\"time/index.html\">time</a></li><li><a href=\"u128/index.html\">u128</a></li><li><a href=\"u16/index.html\">u16</a></li><li><a href=\"u32/index.html\">u32</a></li><li><a href=\"u64/index.html\">u64</a></li><li><a href=\"u8/index.html\">u8</a></li><li><a href=\"usize/index.html\">usize</a></li><li><a href=\"vec/index.html\">vec</a></li></ul><h3><a href=\"index.html#macros\">Macros</a></h3><ul class=\"block macro\"><li><a href=\"macro.assert.html\">assert</a></li><li><a href=\"macro.assert_eq.html\">assert_eq</a></li><li><a href=\"macro.assert_ne.html\">assert_ne</a></li><li><a href=\"macro.cfg.html\">cfg</a></li><li><a href=\"macro.cfg_match.html\">cfg_match</a></li><li><a href=\"macro.column.html\">column</a></li><li><a href=\"macro.compile_error.html\">compile_error</a></li><li><a href=\"macro.concat.html\">concat</a></li><li><a href=\"macro.concat_bytes.html\">concat_bytes</a></li><li><a href=\"macro.concat_idents.html\">concat_idents</a></li><li><a href=\"macro.const_format_args.html\">const_format_args</a></li><li><a href=\"macro.dbg.html\">dbg</a></li><li><a href=\"macro.debug_assert.html\">debug_assert</a></li><li><a href=\"macro.debug_assert_eq.html\">debug_assert_eq</a></li><li><a href=\"macro.debug_assert_ne.html\">debug_assert_ne</a></li><li><a href=\"macro.env.html\">env</a></li><li><a href=\"macro.eprint.html\">eprint</a></li><li><a href=\"macro.eprintln.html\">eprintln</a></li><li><a href=\"macro.file.html\">file</a></li><li><a href=\"macro.format.html\">format</a></li><li><a href=\"macro.format_args.html\">format_args</a></li><li><a href=\"macro.format_args_nl.html\">format_args_nl</a></li><li><a href=\"macro.include.html\">include</a></li><li><a href=\"macro.include_bytes.html\">include_bytes</a></li><li><a href=\"macro.include_str.html\">include_str</a></li><li><a href=\"macro.is_x86_feature_detected.html\">is_x86_feature_detected</a></li><li><a href=\"macro.line.html\">line</a></li><li><a href=\"macro.log_syntax.html\">log_syntax</a></li><li><a href=\"macro.matches.html\">matches</a></li><li><a href=\"macro.module_path.html\">module_path</a></li><li><a href=\"macro.option_env.html\">option_env</a></li><li><a href=\"macro.panic.html\">panic</a></li><li><a href=\"macro.print.html\">print</a></li><li><a href=\"macro.println.html\">println</a></li><li><a href=\"macro.stringify.html\">stringify</a></li><li><a href=\"macro.thread_local.html\">thread_local</a></li><li><a href=\"macro.todo.html\">todo</a></li><li><a href=\"macro.trace_macros.html\">trace_macros</a></li><li><a href=\"macro.try.html\">try</a></li><li><a href=\"macro.unimplemented.html\">unimplemented</a></li><li><a href=\"macro.unreachable.html\">unreachable</a></li><li><a href=\"macro.vec.html\">vec</a></li><li><a href=\"macro.write.html\">write</a></li><li><a href=\"macro.writeln.html\">writeln</a></li></ul><h3><a href=\"index.html#keywords\">Keywords</a></h3><ul class=\"block keyword\"><li><a href=\"keyword.SelfTy.html\">SelfTy</a></li><li><a href=\"keyword.as.html\">as</a></li><li><a href=\"keyword.async.html\">async</a></li><li><a href=\"keyword.await.html\">await</a></li><li><a href=\"keyword.break.html\">break</a></li><li><a href=\"keyword.const.html\">const</a></li><li><a href=\"keyword.continue.html\">continue</a></li><li><a href=\"keyword.crate.html\">crate</a></li><li><a href=\"keyword.dyn.html\">dyn</a></li><li><a href=\"keyword.else.html\">else</a></li><li><a href=\"keyword.enum.html\">enum</a></li><li><a href=\"keyword.extern.html\">extern</a></li><li><a href=\"keyword.false.html\">false</a></li><li><a href=\"keyword.fn.html\">fn</a></li><li><a href=\"keyword.for.html\">for</a></li><li><a href=\"keyword.if.html\">if</a></li><li><a href=\"keyword.impl.html\">impl</a></li><li><a href=\"keyword.in.html\">in</a></li><li><a href=\"keyword.let.html\">let</a></li><li><a href=\"keyword.loop.html\">loop</a></li><li><a href=\"keyword.match.html\">match</a></li><li><a href=\"keyword.mod.html\">mod</a></li><li><a href=\"keyword.move.html\">move</a></li><li><a href=\"keyword.mut.html\">mut</a></li><li><a href=\"keyword.pub.html\">pub</a></li><li><a href=\"keyword.ref.html\">ref</a></li><li><a href=\"keyword.return.html\">return</a></li><li><a href=\"keyword.self.html\">self</a></li><li><a href=\"keyword.static.html\">static</a></li><li><a href=\"keyword.struct.html\">struct</a></li><li><a href=\"keyword.super.html\">super</a></li><li><a href=\"keyword.trait.html\">trait</a></li><li><a href=\"keyword.true.html\">true</a></li><li><a href=\"keyword.type.html\">type</a></li><li><a href=\"keyword.union.html\">union</a></li><li><a href=\"keyword.unsafe.html\">unsafe</a></li><li><a href=\"keyword.use.html\">use</a></li><li><a href=\"keyword.where.html\">where</a></li><li><a href=\"keyword.while.html\">while</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Macro <a href=\"index.html\">std</a>::<wbr><a class=\"macro\" href=\"#\">dbg</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.32.0\">1.32.0</span> · <a class=\"src\" href=\"../src/std/macros.rs.html#352-374\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><span class=\"macro\">macro_rules!</span> dbg {\n    () =&gt; { ... };\n    (<span class=\"macro-nonterminal\">$val</span>:expr $(,)<span class=\"question-mark\">?</span>) =&gt; { ... };\n    ($(<span class=\"macro-nonterminal\">$val</span>:expr),+ $(,)<span class=\"question-mark\">?</span>) =&gt; { ... };\n}</pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Prints and returns the value of a given expression for quick and dirty\ndebugging.</p>\n<p>An example:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a = <span class=\"number\">2</span>;\n<span class=\"kw\">let </span>b = <span class=\"macro\">dbg!</span>(a * <span class=\"number\">2</span>) + <span class=\"number\">1</span>;\n<span class=\"comment\">//      ^-- prints: [src/main.rs:2] a * 2 = 4\n</span><span class=\"macro\">assert_eq!</span>(b, <span class=\"number\">5</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+a+=+2;%0A++++let+b+=+dbg!(a+*+2)+%2B+1;%0A++++//++++++%5E--+prints:+%5Bsrc/main.rs:2%5D+a+*+2+=+4%0A++++assert_eq!(b,+5);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>The macro works by using the <code>Debug</code> implementation of the type of\nthe given expression to print the value to <a href=\"https://en.wikipedia.org/wiki/Standard_streams#Standard_error_(stderr)\">stderr</a> along with the\nsource location of the macro invocation as well as the source code\nof the expression.</p>\n<p>Invoking the macro on an expression moves and takes ownership of it\nbefore returning the evaluated expression unchanged. If the type\nof the expression does not implement <code>Copy</code> and you don’t want\nto give up ownership, you can instead borrow with <code>dbg!(&amp;expr)</code>\nfor some expression <code>expr</code>.</p>\n<p>The <code>dbg!</code> macro works exactly the same in release builds.\nThis is useful when debugging issues that only occur in release\nbuilds or when debugging in release mode is significantly faster.</p>\n<p>Note that the macro is intended as a debugging tool and therefore you\nshould avoid having uses of it in version control for long periods\n(other than in tests and similar).\nDebug output from production code is better done with other facilities\nsuch as the <a href=\"https://docs.rs/log/*/log/macro.debug.html\"><code>debug!</code></a> macro from the <a href=\"https://crates.io/crates/log\"><code>log</code></a> crate.</p>\n<h2 id=\"stability\"><a class=\"doc-anchor\" href=\"#stability\">§</a>Stability</h2>\n<p>The exact output printed by this macro should not be relied upon\nand is subject to future changes.</p>\n<h2 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h2>\n<p>Panics if writing to <code>io::stderr</code> fails.</p>\n<h2 id=\"further-examples\"><a class=\"doc-anchor\" href=\"#further-examples\">§</a>Further examples</h2>\n<p>With a method call:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>foo(n: usize) {\n    <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(<span class=\"kw\">_</span>) = <span class=\"macro\">dbg!</span>(n.checked_sub(<span class=\"number\">4</span>)) {\n        <span class=\"comment\">// ...\n    </span>}\n}\n\nfoo(<span class=\"number\">3</span>)</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++fn+foo(n:+usize)+%7B%0A++++++++if+let+Some(_)+=+dbg!(n.checked_sub(4))+%7B%0A++++++++++++//+...%0A++++++++%7D%0A++++%7D%0A++++%0A++++foo(3)%0A%7D&amp;edition=2021\">Run</a></div>\n<p>This prints to <a href=\"https://en.wikipedia.org/wiki/Standard_streams#Standard_error_(stderr)\">stderr</a>:</p>\n<div class=\"example-wrap\"><pre class=\"language-text\"><code>[src/main.rs:4] n.checked_sub(4) = None\n</code></pre></div>\n<p>Naive factorial implementation:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>factorial(n: u32) -&gt; u32 {\n    <span class=\"kw\">if </span><span class=\"macro\">dbg!</span>(n &lt;= <span class=\"number\">1</span>) {\n        <span class=\"macro\">dbg!</span>(<span class=\"number\">1</span>)\n    } <span class=\"kw\">else </span>{\n        <span class=\"macro\">dbg!</span>(n * factorial(n - <span class=\"number\">1</span>))\n    }\n}\n\n<span class=\"macro\">dbg!</span>(factorial(<span class=\"number\">4</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++fn+factorial(n:+u32)+-%3E+u32+%7B%0A++++++++if+dbg!(n+%3C=+1)+%7B%0A++++++++++++dbg!(1)%0A++++++++%7D+else+%7B%0A++++++++++++dbg!(n+*+factorial(n+-+1))%0A++++++++%7D%0A++++%7D%0A++++%0A++++dbg!(factorial(4));%0A%7D&amp;edition=2021\">Run</a></div>\n<p>This prints to <a href=\"https://en.wikipedia.org/wiki/Standard_streams#Standard_error_(stderr)\">stderr</a>:</p>\n<div class=\"example-wrap\"><pre class=\"language-text\"><code>[src/main.rs:3] n &lt;= 1 = false\n[src/main.rs:3] n &lt;= 1 = false\n[src/main.rs:3] n &lt;= 1 = false\n[src/main.rs:3] n &lt;= 1 = true\n[src/main.rs:4] 1 = 1\n[src/main.rs:5] n * factorial(n - 1) = 2\n[src/main.rs:5] n * factorial(n - 1) = 6\n[src/main.rs:5] n * factorial(n - 1) = 24\n[src/main.rs:11] factorial(4) = 24\n</code></pre></div>\n<p>The <code>dbg!(..)</code> macro moves the input:</p>\n\n<div class=\"example-wrap compile_fail\"><a href=\"#\" class=\"tooltip\" title=\"This example deliberately fails to compile\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"doccomment\">/// A wrapper around `usize` which importantly is not Copyable.\n</span><span class=\"attr\">#[derive(Debug)]\n</span><span class=\"kw\">struct </span>NoCopy(usize);\n\n<span class=\"kw\">let </span>a = NoCopy(<span class=\"number\">42</span>);\n<span class=\"kw\">let _ </span>= <span class=\"macro\">dbg!</span>(a); <span class=\"comment\">// &lt;-- `a` is moved here.\n</span><span class=\"kw\">let _ </span>= <span class=\"macro\">dbg!</span>(a); <span class=\"comment\">// &lt;-- `a` is moved again; error!</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++///+A+wrapper+around+%60usize%60+which+importantly+is+not+Copyable.%0A++++%23%5Bderive(Debug)%5D%0A++++struct+NoCopy(usize);%0A++++%0A++++let+a+=+NoCopy(42);%0A++++let+_+=+dbg!(a);+//+%3C--+%60a%60+is+moved+here.%0A++++let+_+=+dbg!(a);+//+%3C--+%60a%60+is+moved+again;+error!%0A%7D&amp;edition=2021\">Run</a></div>\n<p>You can also use <code>dbg!()</code> without a value to just print the\nfile and line whenever it’s reached.</p>\n<p>Finally, if you want to <code>dbg!(..)</code> multiple values, it will treat them as\na tuple (and return it, too):</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"macro\">dbg!</span>(<span class=\"number\">1usize</span>, <span class=\"number\">2u32</span>), (<span class=\"number\">1</span>, <span class=\"number\">2</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(dbg!(1usize,+2u32),+(1,+2));%0A%7D&amp;edition=2021\">Run</a></div>\n<p>However, a single argument with a trailing comma will still not be treated\nas a tuple, following the convention of ignoring trailing commas in macro\ninvocations. You can use a 1-tuple directly if you need one:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1</span>, <span class=\"macro\">dbg!</span>(<span class=\"number\">1u32</span>,)); <span class=\"comment\">// trailing comma ignored\n</span><span class=\"macro\">assert_eq!</span>((<span class=\"number\">1</span>,), <span class=\"macro\">dbg!</span>((<span class=\"number\">1u32</span>,))); <span class=\"comment\">// 1-tuple</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(1,+dbg!(1u32,));+//+trailing+comma+ignored%0A++++assert_eq!((1,),+dbg!((1u32,)));+//+1-tuple%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:09:10.522Z"
}