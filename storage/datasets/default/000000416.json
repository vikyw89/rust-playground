{
	"title": "IsTerminal in std::io - Rust",
	"url": "https://doc.rust-lang.org/stable/std/io/trait.IsTerminal.html",
	"markdown": "# IsTerminal in std::io - Rust\n\n## Trait [std](../index.html)::[io](index.html)::[IsTerminal](#)\n\n1.70.0 · [source](about:blank/src/std/io/stdio.rs.html#1150-1200) ·\n\n```\npub trait IsTerminal: Sealed {\n    // Required method\n    fn is_terminal(&self) -> bool;\n}\n```\n\nExpand description\n\nTrait to determine if a descriptor/handle refers to a terminal/tty.\n\n1.70.0 · [source](about:blank/src/std/io/stdio.rs.html#1199)\n\nReturns `true` if the descriptor/handle refers to a terminal/tty.\n\nOn platforms where Rust does not know how to detect a terminal yet, this will return `false`. This will also return `false` if an unexpected error occurred, such as from passing an invalid file descriptor.\n\n##### [§](#platform-specific-behavior)Platform-specific behavior\n\nOn Windows, in addition to detecting consoles, this currently uses some heuristics to detect older msys/cygwin/mingw pseudo-terminals based on device name: devices with names starting with `msys-` or `cygwin-` and ending in `-pty` will be considered terminals. Note that this [may change in the future](about:blank/index.html#platform-specific-behavior \"mod std::io\").\n\n##### [§](#examples)Examples\n\nAn example of a type for which `IsTerminal` is implemented is [`Stdin`](struct.Stdin.html \"struct std::io::Stdin\"):\n\n```\nuse std::io::{self, IsTerminal, Write};\n\nfn main() -> io::Result<()> {\n    let stdin = io::stdin();\n\n    // Indicate that the user is prompted for input, if this is a terminal.\n    if stdin.is_terminal() {\n        print!(\"> \");\n        io::stdout().flush()?;\n    }\n\n    let mut name = String::new();\n    let _ = stdin.read_line(&mut name)?;\n\n    println!(\"Hello {}\", name.trim_end());\n\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::io::%7Bself,+IsTerminal,+Write%7D;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+stdin+=+io::stdin();%0A%0A++++//+Indicate+that+the+user+is+prompted+for+input,+if+this+is+a+terminal.%0A++++if+stdin.is_terminal()+%7B%0A++++++++print!(%22%3E+%22);%0A++++++++io::stdout().flush()?;%0A++++%7D%0A%0A++++let+mut+name+=+String::new();%0A++++let+_+=+stdin.read_line(%26mut+name)?;%0A%0A++++println!(%22Hello+%7B%7D%22,+name.trim_end());%0A%0A++++Ok(())%0A%7D&edition=2021)\n\nThe example can be run in two ways:\n\n-   If you run this example by piping some text to it, e.g. `echo \"foo\" | path/to/executable` it will print: `Hello foo`.\n-   If you instead run the example interactively by running `path/to/executable` directly, it will prompt for input.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Trait to determine if a descriptor/handle refers to a terminal/tty.\"><title>IsTerminal in std::io - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc trait\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">IsTerminal</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">IsTerminal</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#required-methods\">Required Methods</a></h3><ul class=\"block\"><li><a href=\"#tymethod.is_terminal\">is_terminal</a></li></ul><h3><a href=\"#implementors\">Implementors</a></h3></section><h2><a href=\"index.html\">In std::io</a></h2><h3><a href=\"index.html#modules\">Modules</a></h3><ul class=\"block mod\"><li><a href=\"prelude/index.html\">prelude</a></li></ul><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.BorrowedBuf.html\">BorrowedBuf</a></li><li><a href=\"struct.BorrowedCursor.html\">BorrowedCursor</a></li><li><a href=\"struct.BufReader.html\">BufReader</a></li><li><a href=\"struct.BufWriter.html\">BufWriter</a></li><li><a href=\"struct.Bytes.html\">Bytes</a></li><li><a href=\"struct.Chain.html\">Chain</a></li><li><a href=\"struct.Cursor.html\">Cursor</a></li><li><a href=\"struct.Empty.html\">Empty</a></li><li><a href=\"struct.Error.html\">Error</a></li><li><a href=\"struct.IntoInnerError.html\">IntoInnerError</a></li><li><a href=\"struct.IoSlice.html\">IoSlice</a></li><li><a href=\"struct.IoSliceMut.html\">IoSliceMut</a></li><li><a href=\"struct.LineWriter.html\">LineWriter</a></li><li><a href=\"struct.Lines.html\">Lines</a></li><li><a href=\"struct.Repeat.html\">Repeat</a></li><li><a href=\"struct.Sink.html\">Sink</a></li><li><a href=\"struct.Split.html\">Split</a></li><li><a href=\"struct.Stderr.html\">Stderr</a></li><li><a href=\"struct.StderrLock.html\">StderrLock</a></li><li><a href=\"struct.Stdin.html\">Stdin</a></li><li><a href=\"struct.StdinLock.html\">StdinLock</a></li><li><a href=\"struct.Stdout.html\">Stdout</a></li><li><a href=\"struct.StdoutLock.html\">StdoutLock</a></li><li><a href=\"struct.Take.html\">Take</a></li><li><a href=\"struct.WriterPanicked.html\">WriterPanicked</a></li></ul><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.ErrorKind.html\">ErrorKind</a></li><li><a href=\"enum.SeekFrom.html\">SeekFrom</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.BufRead.html\">BufRead</a></li><li><a href=\"trait.IsTerminal.html\">IsTerminal</a></li><li><a href=\"trait.Read.html\">Read</a></li><li><a href=\"trait.Seek.html\">Seek</a></li><li><a href=\"trait.Write.html\">Write</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.copy.html\">copy</a></li><li><a href=\"fn.empty.html\">empty</a></li><li><a href=\"fn.read_to_string.html\">read_to_string</a></li><li><a href=\"fn.repeat.html\">repeat</a></li><li><a href=\"fn.sink.html\">sink</a></li><li><a href=\"fn.stderr.html\">stderr</a></li><li><a href=\"fn.stdin.html\">stdin</a></li><li><a href=\"fn.stdout.html\">stdout</a></li></ul><h3><a href=\"index.html#types\">Type Aliases</a></h3><ul class=\"block type\"><li><a href=\"type.RawOsError.html\">RawOsError</a></li><li><a href=\"type.Result.html\">Result</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Trait <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">io</a>::<wbr><a class=\"trait\" href=\"#\">IsTerminal</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"../../src/std/io/stdio.rs.html#1150-1200\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub trait IsTerminal: Sealed {\n    // Required method\n    fn <a href=\"#tymethod.is_terminal\" class=\"fn\">is_terminal</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>;\n}</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Trait to determine if a descriptor/handle refers to a terminal/tty.</p>\n</div></details><h2 id=\"required-methods\" class=\"section-header\">Required Methods<a href=\"#required-methods\" class=\"anchor\">§</a></h2><div class=\"methods\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.is_terminal\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"../../src/std/io/stdio.rs.html#1199\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.is_terminal\" class=\"fn\">is_terminal</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the descriptor/handle refers to a terminal/tty.</p>\n<p>On platforms where Rust does not know how to detect a terminal yet, this will return\n<code>false</code>. This will also return <code>false</code> if an unexpected error occurred, such as from\npassing an invalid file descriptor.</p>\n<h5 id=\"platform-specific-behavior\"><a class=\"doc-anchor\" href=\"#platform-specific-behavior\">§</a>Platform-specific behavior</h5>\n<p>On Windows, in addition to detecting consoles, this currently uses some heuristics to\ndetect older msys/cygwin/mingw pseudo-terminals based on device name: devices with names\nstarting with <code>msys-</code> or <code>cygwin-</code> and ending in <code>-pty</code> will be considered terminals.\nNote that this <a href=\"index.html#platform-specific-behavior\" title=\"mod std::io\">may change in the future</a>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>An example of a type for which <code>IsTerminal</code> is implemented is <a href=\"struct.Stdin.html\" title=\"struct std::io::Stdin\"><code>Stdin</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io::{<span class=\"self\">self</span>, IsTerminal, Write};\n\n<span class=\"kw\">fn </span>main() -&gt; io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>stdin = io::stdin();\n\n    <span class=\"comment\">// Indicate that the user is prompted for input, if this is a terminal.\n    </span><span class=\"kw\">if </span>stdin.is_terminal() {\n        <span class=\"macro\">print!</span>(<span class=\"string\">\"&gt; \"</span>);\n        io::stdout().flush()<span class=\"question-mark\">?</span>;\n    }\n\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>name = String::new();\n    <span class=\"kw\">let _ </span>= stdin.read_line(<span class=\"kw-2\">&amp;mut </span>name)<span class=\"question-mark\">?</span>;\n\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"Hello {}\"</span>, name.trim_end());\n\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::io::%7Bself,+IsTerminal,+Write%7D;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+stdin+=+io::stdin();%0A%0A++++//+Indicate+that+the+user+is+prompted+for+input,+if+this+is+a+terminal.%0A++++if+stdin.is_terminal()+%7B%0A++++++++print!(%22%3E+%22);%0A++++++++io::stdout().flush()?;%0A++++%7D%0A%0A++++let+mut+name+=+String::new();%0A++++let+_+=+stdin.read_line(%26mut+name)?;%0A%0A++++println!(%22Hello+%7B%7D%22,+name.trim_end());%0A%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n<p>The example can be run in two ways:</p>\n<ul>\n<li>If you run this example by piping some text to it, e.g. <code>echo \"foo\" | path/to/executable</code>\nit will print: <code>Hello foo</code>.</li>\n<li>If you instead run the example interactively by running <code>path/to/executable</code> directly, it will\nprompt for input.</li>\n</ul>\n</div></details></div><h2 id=\"implementors\" class=\"section-header\">Implementors<a href=\"#implementors\" class=\"anchor\">§</a></h2><div id=\"implementors-list\"><section id=\"impl-IsTerminal-for-File\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"../../src/std/io/stdio.rs.html#1217\">source</a></span><a href=\"#impl-IsTerminal-for-File\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.IsTerminal.html\" title=\"trait std::io::IsTerminal\">IsTerminal</a> for <a class=\"struct\" href=\"../fs/struct.File.html\" title=\"struct std::fs::File\">File</a></h3></section><section id=\"impl-IsTerminal-for-BorrowedFd%3C'_%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"../../src/std/os/fd/owned.rs.html#220\">source</a></span><a href=\"#impl-IsTerminal-for-BorrowedFd%3C'_%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.IsTerminal.html\" title=\"trait std::io::IsTerminal\">IsTerminal</a> for <a class=\"struct\" href=\"../os/fd/struct.BorrowedFd.html\" title=\"struct std::os::fd::BorrowedFd\">BorrowedFd</a>&lt;'_&gt;</h3></section><section id=\"impl-IsTerminal-for-OwnedFd\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"../../src/std/os/fd/owned.rs.html#220\">source</a></span><a href=\"#impl-IsTerminal-for-OwnedFd\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.IsTerminal.html\" title=\"trait std::io::IsTerminal\">IsTerminal</a> for <a class=\"struct\" href=\"../os/fd/struct.OwnedFd.html\" title=\"struct std::os::fd::OwnedFd\">OwnedFd</a></h3></section><section id=\"impl-IsTerminal-for-BorrowedHandle%3C'_%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"../../src/std/os/windows/io/handle.rs.html#428\">source</a></span><a href=\"#impl-IsTerminal-for-BorrowedHandle%3C'_%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.IsTerminal.html\" title=\"trait std::io::IsTerminal\">IsTerminal</a> for <a class=\"struct\" href=\"../os/windows/io/struct.BorrowedHandle.html\" title=\"struct std::os::windows::io::BorrowedHandle\">BorrowedHandle</a>&lt;'_&gt;</h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Windows</strong> only.</div></span></section><section id=\"impl-IsTerminal-for-OwnedHandle\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"../../src/std/os/windows/io/handle.rs.html#428\">source</a></span><a href=\"#impl-IsTerminal-for-OwnedHandle\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.IsTerminal.html\" title=\"trait std::io::IsTerminal\">IsTerminal</a> for <a class=\"struct\" href=\"../os/windows/io/struct.OwnedHandle.html\" title=\"struct std::os::windows::io::OwnedHandle\">OwnedHandle</a></h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Windows</strong> only.</div></span></section><section id=\"impl-IsTerminal-for-Stderr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"../../src/std/io/stdio.rs.html#1217\">source</a></span><a href=\"#impl-IsTerminal-for-Stderr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.IsTerminal.html\" title=\"trait std::io::IsTerminal\">IsTerminal</a> for <a class=\"struct\" href=\"struct.Stderr.html\" title=\"struct std::io::Stderr\">Stderr</a></h3></section><section id=\"impl-IsTerminal-for-StderrLock%3C'_%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"../../src/std/io/stdio.rs.html#1217\">source</a></span><a href=\"#impl-IsTerminal-for-StderrLock%3C'_%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.IsTerminal.html\" title=\"trait std::io::IsTerminal\">IsTerminal</a> for <a class=\"struct\" href=\"struct.StderrLock.html\" title=\"struct std::io::StderrLock\">StderrLock</a>&lt;'_&gt;</h3></section><section id=\"impl-IsTerminal-for-Stdin\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"../../src/std/io/stdio.rs.html#1217\">source</a></span><a href=\"#impl-IsTerminal-for-Stdin\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.IsTerminal.html\" title=\"trait std::io::IsTerminal\">IsTerminal</a> for <a class=\"struct\" href=\"struct.Stdin.html\" title=\"struct std::io::Stdin\">Stdin</a></h3></section><section id=\"impl-IsTerminal-for-StdinLock%3C'_%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"../../src/std/io/stdio.rs.html#1217\">source</a></span><a href=\"#impl-IsTerminal-for-StdinLock%3C'_%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.IsTerminal.html\" title=\"trait std::io::IsTerminal\">IsTerminal</a> for <a class=\"struct\" href=\"struct.StdinLock.html\" title=\"struct std::io::StdinLock\">StdinLock</a>&lt;'_&gt;</h3></section><section id=\"impl-IsTerminal-for-Stdout\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"../../src/std/io/stdio.rs.html#1217\">source</a></span><a href=\"#impl-IsTerminal-for-Stdout\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.IsTerminal.html\" title=\"trait std::io::IsTerminal\">IsTerminal</a> for <a class=\"struct\" href=\"struct.Stdout.html\" title=\"struct std::io::Stdout\">Stdout</a></h3></section><section id=\"impl-IsTerminal-for-StdoutLock%3C'_%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"../../src/std/io/stdio.rs.html#1217\">source</a></span><a href=\"#impl-IsTerminal-for-StdoutLock%3C'_%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.IsTerminal.html\" title=\"trait std::io::IsTerminal\">IsTerminal</a> for <a class=\"struct\" href=\"struct.StdoutLock.html\" title=\"struct std::io::StdoutLock\">StdoutLock</a>&lt;'_&gt;</h3></section></div><script src=\"../../trait.impl/std/io/stdio/trait.IsTerminal.js\" async=\"\"></script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:11:31.379Z"
}