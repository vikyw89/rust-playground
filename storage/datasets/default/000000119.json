{
	"title": "Option in std::option - Rust",
	"url": "https://doc.rust-lang.org/stable/std/option/enum.Option.html",
	"markdown": "# Option in std::option - Rust\n\n```\npub enum Option<T> {\n    None,\n    Some(T),\n}\n```\n\nExpand description\n\n[§](#variant.None)1.0.0\n\nNo value.\n\n[§](#variant.Some)1.0.0\n\nSome value of type `T`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#589)[§](#impl-Option%3CT%3E)\n\n1.0.0 (const: 1.48.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#609)\n\nReturns `true` if the option is a [`Some`](about:blank/enum.Option.html#variant.Some \"variant std::option::Option::Some\") value.\n\n##### [§](#examples)Examples\n\n```\nlet x: Option<u32> = Some(2);\nassert_eq!(x.is_some(), true);\n\nlet x: Option<u32> = None;\nassert_eq!(x.is_some(), false);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x:+Option%3Cu32%3E+=+Some(2);%0A++++assert_eq!(x.is_some(),+true);%0A++++%0A++++let+x:+Option%3Cu32%3E+=+None;%0A++++assert_eq!(x.is_some(),+false);%0A%7D&edition=2021)\n\n1.70.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#630)\n\nReturns `true` if the option is a [`Some`](about:blank/enum.Option.html#variant.Some \"variant std::option::Option::Some\") and the value inside of it matches a predicate.\n\n##### [§](#examples-1)Examples\n\n```\nlet x: Option<u32> = Some(2);\nassert_eq!(x.is_some_and(|x| x > 1), true);\n\nlet x: Option<u32> = Some(0);\nassert_eq!(x.is_some_and(|x| x > 1), false);\n\nlet x: Option<u32> = None;\nassert_eq!(x.is_some_and(|x| x > 1), false);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x:+Option%3Cu32%3E+=+Some(2);%0A++++assert_eq!(x.is_some_and(%7Cx%7C+x+%3E+1),+true);%0A++++%0A++++let+x:+Option%3Cu32%3E+=+Some(0);%0A++++assert_eq!(x.is_some_and(%7Cx%7C+x+%3E+1),+false);%0A++++%0A++++let+x:+Option%3Cu32%3E+=+None;%0A++++assert_eq!(x.is_some_and(%7Cx%7C+x+%3E+1),+false);%0A%7D&edition=2021)\n\n1.0.0 (const: 1.48.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#653)\n\nReturns `true` if the option is a [`None`](about:blank/enum.Option.html#variant.None \"variant std::option::Option::None\") value.\n\n##### [§](#examples-2)Examples\n\n```\nlet x: Option<u32> = Some(2);\nassert_eq!(x.is_none(), false);\n\nlet x: Option<u32> = None;\nassert_eq!(x.is_none(), true);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x:+Option%3Cu32%3E+=+Some(2);%0A++++assert_eq!(x.is_none(),+false);%0A++++%0A++++let+x:+Option%3Cu32%3E+=+None;%0A++++assert_eq!(x.is_none(),+true);%0A%7D&edition=2021)\n\n1.0.0 (const: 1.48.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#684)\n\nConverts from `&Option<T>` to `Option<&T>`.\n\n##### [§](#examples-3)Examples\n\nCalculates the length of an `Option<[String](../../std/string/struct.String.html \"String\")>` as an `Option<[usize](../primitive.usize.html \"primitive usize\")>` without moving the [`String`](../../std/string/struct.String.html \"String\"). The [`map`](about:blank/enum.Option.html#method.map \"method std::option::Option::map\") method takes the `self` argument by value, consuming the original, so this technique uses `as_ref` to first take an `Option` to a reference to the value inside the original.\n\n```\nlet text: Option<String> = Some(\"Hello, world!\".to_string());\n// First, cast `Option<String>` to `Option<&String>` with `as_ref`,\n// then consume *that* with `map`, leaving `text` on the stack.\nlet text_length: Option<usize> = text.as_ref().map(|s| s.len());\nprintln!(\"still can print text: {text:?}\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+text:+Option%3CString%3E+=+Some(%22Hello,+world!%22.to_string());%0A++++//+First,+cast+%60Option%3CString%3E%60+to+%60Option%3C%26String%3E%60+with+%60as_ref%60,%0A++++//+then+consume+*that*+with+%60map%60,+leaving+%60text%60+on+the+stack.%0A++++let+text_length:+Option%3Cusize%3E+=+text.as_ref().map(%7Cs%7C+s.len());%0A++++println!(%22still+can+print+text:+%7Btext:?%7D%22);%0A%7D&edition=2021)\n\n1.0.0 (const: [unstable](https://github.com/rust-lang/rust/issues/67441 \"Tracking issue for const_option\")) · [source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#706)\n\nConverts from `&mut Option<T>` to `Option<&mut T>`.\n\n##### [§](#examples-4)Examples\n\n```\nlet mut x = Some(2);\nmatch x.as_mut() {\n    Some(v) => *v = 42,\n    None => {},\n}\nassert_eq!(x, Some(42));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+x+=+Some(2);%0A++++match+x.as_mut()+%7B%0A++++++++Some(v)+=%3E+*v+=+42,%0A++++++++None+=%3E+%7B%7D,%0A++++%7D%0A++++assert_eq!(x,+Some(42));%0A%7D&edition=2021)\n\n1.33.0 (const: [unstable](https://github.com/rust-lang/rust/issues/91930 \"Tracking issue for const_option_ext\")) · [source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#720)\n\nConverts from `[Pin](../pin/struct.Pin.html \"struct std::pin::Pin\")<[&](../primitive.reference.html \"shared reference\")Option<T>>` to `Option<[Pin](../pin/struct.Pin.html \"struct std::pin::Pin\")<[&](../primitive.reference.html \"shared reference\")T>>`.\n\n1.33.0 (const: [unstable](https://github.com/rust-lang/rust/issues/91930 \"Tracking issue for const_option_ext\")) · [source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#736)\n\nConverts from `[Pin](../pin/struct.Pin.html \"struct std::pin::Pin\")<[&mut](../primitive.reference.html \"mutable reference\") Option<T>>` to `Option<[Pin](../pin/struct.Pin.html \"struct std::pin::Pin\")<[&mut](../primitive.reference.html \"mutable reference\") T>>`.\n\n1.75.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#774)\n\nReturns a slice of the contained value, if any. If this is `None`, an empty slice is returned. This can be useful to have a single type of iterator over an `Option` or slice.\n\nNote: Should you have an `Option<&T>` and wish to get a slice of `T`, you can unpack it via `opt.map_or(&[], std::slice::from_ref)`.\n\n##### [§](#examples-5)Examples\n\n```\nassert_eq!(\n    [Some(1234).as_slice(), None.as_slice()],\n    [&[1234][..], &[][..]],\n);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(%0A++++++++%5BSome(1234).as_slice(),+None.as_slice()%5D,%0A++++++++%5B%26%5B1234%5D%5B..%5D,+%26%5B%5D%5B..%5D%5D,%0A++++);%0A%7D&edition=2021)\n\nThe inverse of this function is (discounting borrowing) [`[_]::first`](about:blank/primitive.slice.html#method.first \"method slice::first\"):\n\n```\nfor i in [Some(1234_u16), None] {\n    assert_eq!(i.as_ref(), i.as_slice().first());\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++for+i+in+%5BSome(1234_u16),+None%5D+%7B%0A++++++++assert_eq!(i.as_ref(),+i.as_slice().first());%0A++++%7D%0A%7D&edition=2021)\n\n1.75.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#828)\n\nReturns a mutable slice of the contained value, if any. If this is `None`, an empty slice is returned. This can be useful to have a single type of iterator over an `Option` or slice.\n\nNote: Should you have an `Option<&mut T>` instead of a `&mut Option<T>`, which this method takes, you can obtain a mutable slice via `opt.map_or(&mut [], std::slice::from_mut)`.\n\n##### [§](#examples-6)Examples\n\n```\nassert_eq!(\n    [Some(1234).as_mut_slice(), None.as_mut_slice()],\n    [&mut [1234][..], &mut [][..]],\n);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(%0A++++++++%5BSome(1234).as_mut_slice(),+None.as_mut_slice()%5D,%0A++++++++%5B%26mut+%5B1234%5D%5B..%5D,+%26mut+%5B%5D%5B..%5D%5D,%0A++++);%0A%7D&edition=2021)\n\nThe result is a mutable slice of zero or one items that points into our original `Option`:\n\n```\nlet mut x = Some(1234);\nx.as_mut_slice()[0] += 1;\nassert_eq!(x, Some(1235));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+x+=+Some(1234);%0A++++x.as_mut_slice()%5B0%5D+%2B=+1;%0A++++assert_eq!(x,+Some(1235));%0A%7D&edition=2021)\n\nThe inverse of this method (discounting borrowing) is [`[_]::first_mut`](about:blank/primitive.slice.html#method.first_mut \"method slice::first_mut\"):\n\n```\nassert_eq!(Some(123).as_mut_slice().first_mut(), Some(&mut 123))\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(Some(123).as_mut_slice().first_mut(),+Some(%26mut+123))%0A%7D&edition=2021)\n\n1.0.0 (const: [unstable](https://github.com/rust-lang/rust/issues/67441 \"Tracking issue for const_option\")) · [source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#895)\n\nReturns the contained [`Some`](about:blank/enum.Option.html#variant.Some \"variant std::option::Option::Some\") value, consuming the `self` value.\n\n##### [§](#panics)Panics\n\nPanics if the value is a [`None`](about:blank/enum.Option.html#variant.None \"variant std::option::Option::None\") with a custom panic message provided by `msg`.\n\n##### [§](#examples-7)Examples\n\n```\nlet x = Some(\"value\");\nassert_eq!(x.expect(\"fruits are healthy\"), \"value\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+Some(%22value%22);%0A++++assert_eq!(x.expect(%22fruits+are+healthy%22),+%22value%22);%0A%7D&edition=2021)\n\n[ⓘ](# \"This example panics\")\n\n```\nlet x: Option<&str> = None;\nx.expect(\"fruits are healthy\"); // panics with `fruits are healthy`\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x:+Option%3C%26str%3E+=+None;%0A++++x.expect(%22fruits+are+healthy%22);+//+panics+with+%60fruits+are+healthy%60%0A%7D&edition=2021)\n\n##### [§](#recommended-message-style)Recommended Message Style\n\nWe recommend that `expect` messages are used to describe the reason you _expect_ the `Option` should be `Some`.\n\n[ⓘ](# \"This example panics\")\n\n```\nlet item = slice.get(0)\n    .expect(\"slice should not be empty\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+slice:+%26%5Bu8%5D+=+%26%5B%5D;%0A++++let+item+=+slice.get(0)%0A++++++++.expect(%22slice+should+not+be+empty%22);%0A%7D&edition=2021)\n\n**Hint**: If you’re having trouble remembering how to phrase expect error messages remember to focus on the word “should” as in “env variable should be set by blah” or “the given binary should be available and executable by the current user”.\n\nFor more detail on expect message styles and the reasoning behind our recommendation please refer to the section on [“Common Message Styles”](about:blank/std/error/index.html#common-message-styles) in the [`std::error`](../../std/error/index.html) module docs.\n\n1.0.0 (const: [unstable](https://github.com/rust-lang/rust/issues/67441 \"Tracking issue for const_option\")) · [source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#932)\n\nReturns the contained [`Some`](about:blank/enum.Option.html#variant.Some \"variant std::option::Option::Some\") value, consuming the `self` value.\n\nBecause this function may panic, its use is generally discouraged. Instead, prefer to use pattern matching and handle the [`None`](about:blank/enum.Option.html#variant.None \"variant std::option::Option::None\") case explicitly, or call [`unwrap_or`](about:blank/enum.Option.html#method.unwrap_or \"method std::option::Option::unwrap_or\"), [`unwrap_or_else`](about:blank/enum.Option.html#method.unwrap_or_else \"method std::option::Option::unwrap_or_else\"), or [`unwrap_or_default`](about:blank/enum.Option.html#method.unwrap_or_default \"method std::option::Option::unwrap_or_default\").\n\n##### [§](#panics-1)Panics\n\nPanics if the self value equals [`None`](about:blank/enum.Option.html#variant.None \"variant std::option::Option::None\").\n\n##### [§](#examples-8)Examples\n\n```\nlet x = Some(\"air\");\nassert_eq!(x.unwrap(), \"air\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+Some(%22air%22);%0A++++assert_eq!(x.unwrap(),+%22air%22);%0A%7D&edition=2021)\n\n[ⓘ](# \"This example panics\")\n\n```\nlet x: Option<&str> = None;\nassert_eq!(x.unwrap(), \"air\"); // fails\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x:+Option%3C%26str%3E+=+None;%0A++++assert_eq!(x.unwrap(),+%22air%22);+//+fails%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#955)\n\nReturns the contained [`Some`](about:blank/enum.Option.html#variant.Some \"variant std::option::Option::Some\") value or a provided default.\n\nArguments passed to `unwrap_or` are eagerly evaluated; if you are passing the result of a function call, it is recommended to use [`unwrap_or_else`](about:blank/enum.Option.html#method.unwrap_or_else \"method std::option::Option::unwrap_or_else\"), which is lazily evaluated.\n\n##### [§](#examples-9)Examples\n\n```\nassert_eq!(Some(\"car\").unwrap_or(\"bike\"), \"car\");\nassert_eq!(None.unwrap_or(\"bike\"), \"bike\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(Some(%22car%22).unwrap_or(%22bike%22),+%22car%22);%0A++++assert_eq!(None.unwrap_or(%22bike%22),+%22bike%22);%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#974-976)\n\nReturns the contained [`Some`](about:blank/enum.Option.html#variant.Some \"variant std::option::Option::Some\") value or computes it from a closure.\n\n##### [§](#examples-10)Examples\n\n```\nlet k = 10;\nassert_eq!(Some(4).unwrap_or_else(|| 2 * k), 4);\nassert_eq!(None.unwrap_or_else(|| 2 * k), 20);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+k+=+10;%0A++++assert_eq!(Some(4).unwrap_or_else(%7C%7C+2+*+k),+4);%0A++++assert_eq!(None.unwrap_or_else(%7C%7C+2+*+k),+20);%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#1005-1007)\n\nReturns the contained [`Some`](about:blank/enum.Option.html#variant.Some \"variant std::option::Option::Some\") value or a default.\n\nConsumes the `self` argument then, if [`Some`](about:blank/enum.Option.html#variant.Some \"variant std::option::Option::Some\"), returns the contained value, otherwise if [`None`](about:blank/enum.Option.html#variant.None \"variant std::option::Option::None\"), returns the [default value](about:blank/default/trait.Default.html#tymethod.default \"associated function std::default::Default::default\") for that type.\n\n##### [§](#examples-11)Examples\n\n```\nlet x: Option<u32> = None;\nlet y: Option<u32> = Some(12);\n\nassert_eq!(x.unwrap_or_default(), 0);\nassert_eq!(y.unwrap_or_default(), 12);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x:+Option%3Cu32%3E+=+None;%0A++++let+y:+Option%3Cu32%3E+=+Some(12);%0A++++%0A++++assert_eq!(x.unwrap_or_default(),+0);%0A++++assert_eq!(y.unwrap_or_default(),+12);%0A%7D&edition=2021)\n\n1.58.0 (const: [unstable](https://github.com/rust-lang/rust/issues/91930 \"Tracking issue for const_option_ext\")) · [source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#1039)\n\nReturns the contained [`Some`](about:blank/enum.Option.html#variant.Some \"variant std::option::Option::Some\") value, consuming the `self` value, without checking that the value is not [`None`](about:blank/enum.Option.html#variant.None \"variant std::option::Option::None\").\n\n##### [§](#safety)Safety\n\nCalling this method on [`None`](about:blank/enum.Option.html#variant.None \"variant std::option::Option::None\") is _[undefined behavior](https://doc.rust-lang.org/reference/behavior-considered-undefined.html)_.\n\n##### [§](#examples-12)Examples\n\n```\nlet x = Some(\"air\");\nassert_eq!(unsafe { x.unwrap_unchecked() }, \"air\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+Some(%22air%22);%0A++++assert_eq!(unsafe+%7B+x.unwrap_unchecked()+%7D,+%22air%22);%0A%7D&edition=2021)\n\n```\nlet x: Option<&str> = None;\nassert_eq!(unsafe { x.unwrap_unchecked() }, \"air\"); // Undefined behavior!\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x:+Option%3C%26str%3E+=+None;%0A++++assert_eq!(unsafe+%7B+x.unwrap_unchecked()+%7D,+%22air%22);+//+Undefined+behavior!%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#1070-1072)\n\nMaps an `Option<T>` to `Option<U>` by applying a function to a contained value (if `Some`) or returns `None` (if `None`).\n\n##### [§](#examples-13)Examples\n\nCalculates the length of an `Option<[String](../../std/string/struct.String.html \"String\")>` as an `Option<[usize](../primitive.usize.html \"primitive usize\")>`, consuming the original:\n\n```\nlet maybe_some_string = Some(String::from(\"Hello, World!\"));\n// `Option::map` takes self *by value*, consuming `maybe_some_string`\nlet maybe_some_len = maybe_some_string.map(|s| s.len());\nassert_eq!(maybe_some_len, Some(13));\n\nlet x: Option<&str> = None;\nassert_eq!(x.map(|s| s.len()), None);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+maybe_some_string+=+Some(String::from(%22Hello,+World!%22));%0A++++//+%60Option::map%60+takes+self+*by+value*,+consuming+%60maybe_some_string%60%0A++++let+maybe_some_len+=+maybe_some_string.map(%7Cs%7C+s.len());%0A++++assert_eq!(maybe_some_len,+Some(13));%0A++++%0A++++let+x:+Option%3C%26str%3E+=+None;%0A++++assert_eq!(x.map(%7Cs%7C+s.len()),+None);%0A%7D&edition=2021)\n\n1.76.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#1100)\n\nCalls a function with a reference to the contained value if [`Some`](about:blank/enum.Option.html#variant.Some \"variant std::option::Option::Some\").\n\nReturns the original option.\n\n##### [§](#examples-14)Examples\n\n```\nlet list = vec![1, 2, 3];\n\n// prints \"got: 2\"\nlet x = list\n    .get(1)\n    .inspect(|x| println!(\"got: {x}\"))\n    .expect(\"list should be long enough\");\n\n// prints nothing\nlist.get(5).inspect(|x| println!(\"got: {x}\"));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+list+=+vec!%5B1,+2,+3%5D;%0A++++%0A++++//+prints+%22got:+2%22%0A++++let+x+=+list%0A++++++++.get(1)%0A++++++++.inspect(%7Cx%7C+println!(%22got:+%7Bx%7D%22))%0A++++++++.expect(%22list+should+be+long+enough%22);%0A++++%0A++++//+prints+nothing%0A++++list.get(5).inspect(%7Cx%7C+println!(%22got:+%7Bx%7D%22));%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#1129-1131)\n\nReturns the provided default result (if none), or applies a function to the contained value (if any).\n\nArguments passed to `map_or` are eagerly evaluated; if you are passing the result of a function call, it is recommended to use [`map_or_else`](about:blank/enum.Option.html#method.map_or_else \"method std::option::Option::map_or_else\"), which is lazily evaluated.\n\n##### [§](#examples-15)Examples\n\n```\nlet x = Some(\"foo\");\nassert_eq!(x.map_or(42, |v| v.len()), 3);\n\nlet x: Option<&str> = None;\nassert_eq!(x.map_or(42, |v| v.len()), 42);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+Some(%22foo%22);%0A++++assert_eq!(x.map_or(42,+%7Cv%7C+v.len()),+3);%0A++++%0A++++let+x:+Option%3C%26str%3E+=+None;%0A++++assert_eq!(x.map_or(42,+%7Cv%7C+v.len()),+42);%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#1174-1177)\n\nComputes a default function result (if none), or applies a different function to the contained value (if any).\n\n##### [§](#basic-examples)Basic examples\n\n```\nlet k = 21;\n\nlet x = Some(\"foo\");\nassert_eq!(x.map_or_else(|| 2 * k, |v| v.len()), 3);\n\nlet x: Option<&str> = None;\nassert_eq!(x.map_or_else(|| 2 * k, |v| v.len()), 42);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+k+=+21;%0A++++%0A++++let+x+=+Some(%22foo%22);%0A++++assert_eq!(x.map_or_else(%7C%7C+2+*+k,+%7Cv%7C+v.len()),+3);%0A++++%0A++++let+x:+Option%3C%26str%3E+=+None;%0A++++assert_eq!(x.map_or_else(%7C%7C+2+*+k,+%7Cv%7C+v.len()),+42);%0A%7D&edition=2021)\n\n##### [§](#handling-a-result-based-fallback)Handling a Result-based fallback\n\nA somewhat common occurrence when dealing with optional values in combination with [`Result<T, E>`](../result/enum.Result.html \"enum std::result::Result\") is the case where one wants to invoke a fallible fallback if the option is not present. This example parses a command line argument (if present), or the contents of a file to an integer. However, unlike accessing the command line argument, reading the file is fallible, so it must be wrapped with `Ok`.\n\n```\nlet v: u64 = std::env::args()\n   .nth(1)\n   .map_or_else(|| std::fs::read_to_string(\"/etc/someconfig.conf\"), Ok)?\n   .parse()?;\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+-%3E+Result%3C(),+Box%3Cdyn+std::error::Error%3E%3E+%7B%0Alet+v:+u64+=+std::env::args()%0A+++.nth(1)%0A+++.map_or_else(%7C%7C+std::fs::read_to_string(%22/etc/someconfig.conf%22),+Ok)?%0A+++.parse()?;%0A++Ok(())%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#1208)\n\nTransforms the `Option<T>` into a [`Result<T, E>`](../result/enum.Result.html \"enum std::result::Result\"), mapping [`Some(v)`](about:blank/enum.Option.html#variant.Some \"variant std::option::Option::Some\") to [`Ok(v)`](about:blank/result/enum.Result.html#variant.Ok \"variant std::result::Result::Ok\") and [`None`](about:blank/enum.Option.html#variant.None \"variant std::option::Option::None\") to [`Err(err)`](about:blank/result/enum.Result.html#variant.Err \"variant std::result::Result::Err\").\n\nArguments passed to `ok_or` are eagerly evaluated; if you are passing the result of a function call, it is recommended to use [`ok_or_else`](about:blank/enum.Option.html#method.ok_or_else \"method std::option::Option::ok_or_else\"), which is lazily evaluated.\n\n##### [§](#examples-16)Examples\n\n```\nlet x = Some(\"foo\");\nassert_eq!(x.ok_or(0), Ok(\"foo\"));\n\nlet x: Option<&str> = None;\nassert_eq!(x.ok_or(0), Err(0));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+Some(%22foo%22);%0A++++assert_eq!(x.ok_or(0),+Ok(%22foo%22));%0A++++%0A++++let+x:+Option%3C%26str%3E+=+None;%0A++++assert_eq!(x.ok_or(0),+Err(0));%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#1233-1235)\n\nTransforms the `Option<T>` into a [`Result<T, E>`](../result/enum.Result.html \"enum std::result::Result\"), mapping [`Some(v)`](about:blank/enum.Option.html#variant.Some \"variant std::option::Option::Some\") to [`Ok(v)`](about:blank/result/enum.Result.html#variant.Ok \"variant std::result::Result::Ok\") and [`None`](about:blank/enum.Option.html#variant.None \"variant std::option::Option::None\") to [`Err(err())`](about:blank/result/enum.Result.html#variant.Err \"variant std::result::Result::Err\").\n\n##### [§](#examples-17)Examples\n\n```\nlet x = Some(\"foo\");\nassert_eq!(x.ok_or_else(|| 0), Ok(\"foo\"));\n\nlet x: Option<&str> = None;\nassert_eq!(x.ok_or_else(|| 0), Err(0));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+Some(%22foo%22);%0A++++assert_eq!(x.ok_or_else(%7C%7C+0),+Ok(%22foo%22));%0A++++%0A++++let+x:+Option%3C%26str%3E+=+None;%0A++++assert_eq!(x.ok_or_else(%7C%7C+0),+Err(0));%0A%7D&edition=2021)\n\n1.40.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#1259-1261)\n\nConverts from `Option<T>` (or `&Option<T>`) to `Option<&T::Target>`.\n\nLeaves the original Option in-place, creating a new one with a reference to the original one, additionally coercing the contents via [`Deref`](../ops/trait.Deref.html \"trait std::ops::Deref\").\n\n##### [§](#examples-18)Examples\n\n```\nlet x: Option<String> = Some(\"hey\".to_owned());\nassert_eq!(x.as_deref(), Some(\"hey\"));\n\nlet x: Option<String> = None;\nassert_eq!(x.as_deref(), None);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x:+Option%3CString%3E+=+Some(%22hey%22.to_owned());%0A++++assert_eq!(x.as_deref(),+Some(%22hey%22));%0A++++%0A++++let+x:+Option%3CString%3E+=+None;%0A++++assert_eq!(x.as_deref(),+None);%0A%7D&edition=2021)\n\n1.40.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#1285-1287)\n\nConverts from `Option<T>` (or `&mut Option<T>`) to `Option<&mut T::Target>`.\n\nLeaves the original `Option` in-place, creating a new one containing a mutable reference to the inner type’s [`Deref::Target`](about:blank/ops/trait.Deref.html#associatedtype.Target \"associated type std::ops::Deref::Target\") type.\n\n##### [§](#examples-19)Examples\n\n```\nlet mut x: Option<String> = Some(\"hey\".to_owned());\nassert_eq!(x.as_deref_mut().map(|x| {\n    x.make_ascii_uppercase();\n    x\n}), Some(\"HEY\".to_owned().as_mut_str()));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+x:+Option%3CString%3E+=+Some(%22hey%22.to_owned());%0A++++assert_eq!(x.as_deref_mut().map(%7Cx%7C+%7B%0A++++++++x.make_ascii_uppercase();%0A++++++++x%0A++++%7D),+Some(%22HEY%22.to_owned().as_mut_str()));%0A%7D&edition=2021)\n\n1.0.0 (const: [unstable](https://github.com/rust-lang/rust/issues/67441 \"Tracking issue for const_option\")) · [source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#1313)\n\nReturns an iterator over the possibly contained value.\n\n##### [§](#examples-20)Examples\n\n```\nlet x = Some(4);\nassert_eq!(x.iter().next(), Some(&4));\n\nlet x: Option<u32> = None;\nassert_eq!(x.iter().next(), None);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+Some(4);%0A++++assert_eq!(x.iter().next(),+Some(%264));%0A++++%0A++++let+x:+Option%3Cu32%3E+=+None;%0A++++assert_eq!(x.iter().next(),+None);%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#1334)\n\nReturns a mutable iterator over the possibly contained value.\n\n##### [§](#examples-21)Examples\n\n```\nlet mut x = Some(4);\nmatch x.iter_mut().next() {\n    Some(v) => *v = 42,\n    None => {},\n}\nassert_eq!(x, Some(42));\n\nlet mut x: Option<u32> = None;\nassert_eq!(x.iter_mut().next(), None);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+x+=+Some(4);%0A++++match+x.iter_mut().next()+%7B%0A++++++++Some(v)+=%3E+*v+=+42,%0A++++++++None+=%3E+%7B%7D,%0A++++%7D%0A++++assert_eq!(x,+Some(42));%0A++++%0A++++let+mut+x:+Option%3Cu32%3E+=+None;%0A++++assert_eq!(x.iter_mut().next(),+None);%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#1371)\n\nReturns [`None`](about:blank/enum.Option.html#variant.None \"variant std::option::Option::None\") if the option is [`None`](about:blank/enum.Option.html#variant.None \"variant std::option::Option::None\"), otherwise returns `optb`.\n\nArguments passed to `and` are eagerly evaluated; if you are passing the result of a function call, it is recommended to use [`and_then`](about:blank/enum.Option.html#method.and_then \"method std::option::Option::and_then\"), which is lazily evaluated.\n\n##### [§](#examples-22)Examples\n\n```\nlet x = Some(2);\nlet y: Option<&str> = None;\nassert_eq!(x.and(y), None);\n\nlet x: Option<u32> = None;\nlet y = Some(\"foo\");\nassert_eq!(x.and(y), None);\n\nlet x = Some(2);\nlet y = Some(\"foo\");\nassert_eq!(x.and(y), Some(\"foo\"));\n\nlet x: Option<u32> = None;\nlet y: Option<&str> = None;\nassert_eq!(x.and(y), None);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+Some(2);%0A++++let+y:+Option%3C%26str%3E+=+None;%0A++++assert_eq!(x.and(y),+None);%0A++++%0A++++let+x:+Option%3Cu32%3E+=+None;%0A++++let+y+=+Some(%22foo%22);%0A++++assert_eq!(x.and(y),+None);%0A++++%0A++++let+x+=+Some(2);%0A++++let+y+=+Some(%22foo%22);%0A++++assert_eq!(x.and(y),+Some(%22foo%22));%0A++++%0A++++let+x:+Option%3Cu32%3E+=+None;%0A++++let+y:+Option%3C%26str%3E+=+None;%0A++++assert_eq!(x.and(y),+None);%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#1410-1412)\n\nReturns [`None`](about:blank/enum.Option.html#variant.None \"variant std::option::Option::None\") if the option is [`None`](about:blank/enum.Option.html#variant.None \"variant std::option::Option::None\"), otherwise calls `f` with the wrapped value and returns the result.\n\nSome languages call this operation flatmap.\n\n##### [§](#examples-23)Examples\n\n```\nfn sq_then_to_string(x: u32) -> Option<String> {\n    x.checked_mul(x).map(|sq| sq.to_string())\n}\n\nassert_eq!(Some(2).and_then(sq_then_to_string), Some(4.to_string()));\nassert_eq!(Some(1_000_000).and_then(sq_then_to_string), None); // overflowed!\nassert_eq!(None.and_then(sq_then_to_string), None);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++fn+sq_then_to_string(x:+u32)+-%3E+Option%3CString%3E+%7B%0A++++++++x.checked_mul(x).map(%7Csq%7C+sq.to_string())%0A++++%7D%0A++++%0A++++assert_eq!(Some(2).and_then(sq_then_to_string),+Some(4.to_string()));%0A++++assert_eq!(Some(1_000_000).and_then(sq_then_to_string),+None);+//+overflowed!%0A++++assert_eq!(None.and_then(sq_then_to_string),+None);%0A%7D&edition=2021)\n\nOften used to chain fallible operations that may return [`None`](about:blank/enum.Option.html#variant.None \"variant std::option::Option::None\").\n\n```\nlet arr_2d = [[\"A0\", \"A1\"], [\"B0\", \"B1\"]];\n\nlet item_0_1 = arr_2d.get(0).and_then(|row| row.get(1));\nassert_eq!(item_0_1, Some(&\"A1\"));\n\nlet item_2_0 = arr_2d.get(2).and_then(|row| row.get(0));\nassert_eq!(item_2_0, None);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+arr_2d+=+%5B%5B%22A0%22,+%22A1%22%5D,+%5B%22B0%22,+%22B1%22%5D%5D;%0A++++%0A++++let+item_0_1+=+arr_2d.get(0).and_then(%7Crow%7C+row.get(1));%0A++++assert_eq!(item_0_1,+Some(%26%22A1%22));%0A++++%0A++++let+item_2_0+=+arr_2d.get(2).and_then(%7Crow%7C+row.get(0));%0A++++assert_eq!(item_2_0,+None);%0A%7D&edition=2021)\n\n1.27.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#1446-1448)\n\nReturns [`None`](about:blank/enum.Option.html#variant.None \"variant std::option::Option::None\") if the option is [`None`](about:blank/enum.Option.html#variant.None \"variant std::option::Option::None\"), otherwise calls `predicate` with the wrapped value and returns:\n\n-   [`Some(t)`](about:blank/enum.Option.html#variant.Some \"variant std::option::Option::Some\") if `predicate` returns `true` (where `t` is the wrapped value), and\n-   [`None`](about:blank/enum.Option.html#variant.None \"variant std::option::Option::None\") if `predicate` returns `false`.\n\nThis function works similar to [`Iterator::filter()`](about:blank/iter/trait.Iterator.html#method.filter \"method std::iter::Iterator::filter\"). You can imagine the `Option<T>` being an iterator over one or zero elements. `filter()` lets you decide which elements to keep.\n\n##### [§](#examples-24)Examples\n\n```\nfn is_even(n: &i32) -> bool {\n    n % 2 == 0\n}\n\nassert_eq!(None.filter(is_even), None);\nassert_eq!(Some(3).filter(is_even), None);\nassert_eq!(Some(4).filter(is_even), Some(4));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++fn+is_even(n:+%26i32)+-%3E+bool+%7B%0A++++++++n+%25+2+==+0%0A++++%7D%0A++++%0A++++assert_eq!(None.filter(is_even),+None);%0A++++assert_eq!(Some(3).filter(is_even),+None);%0A++++assert_eq!(Some(4).filter(is_even),+Some(4));%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#1487)\n\nReturns the option if it contains a value, otherwise returns `optb`.\n\nArguments passed to `or` are eagerly evaluated; if you are passing the result of a function call, it is recommended to use [`or_else`](about:blank/enum.Option.html#method.or_else \"method std::option::Option::or_else\"), which is lazily evaluated.\n\n##### [§](#examples-25)Examples\n\n```\nlet x = Some(2);\nlet y = None;\nassert_eq!(x.or(y), Some(2));\n\nlet x = None;\nlet y = Some(100);\nassert_eq!(x.or(y), Some(100));\n\nlet x = Some(2);\nlet y = Some(100);\nassert_eq!(x.or(y), Some(2));\n\nlet x: Option<u32> = None;\nlet y = None;\nassert_eq!(x.or(y), None);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+Some(2);%0A++++let+y+=+None;%0A++++assert_eq!(x.or(y),+Some(2));%0A++++%0A++++let+x+=+None;%0A++++let+y+=+Some(100);%0A++++assert_eq!(x.or(y),+Some(100));%0A++++%0A++++let+x+=+Some(2);%0A++++let+y+=+Some(100);%0A++++assert_eq!(x.or(y),+Some(2));%0A++++%0A++++let+x:+Option%3Cu32%3E+=+None;%0A++++let+y+=+None;%0A++++assert_eq!(x.or(y),+None);%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#1509-1511)\n\nReturns the option if it contains a value, otherwise calls `f` and returns the result.\n\n##### [§](#examples-26)Examples\n\n```\nfn nobody() -> Option<&'static str> { None }\nfn vikings() -> Option<&'static str> { Some(\"vikings\") }\n\nassert_eq!(Some(\"barbarians\").or_else(vikings), Some(\"barbarians\"));\nassert_eq!(None.or_else(vikings), Some(\"vikings\"));\nassert_eq!(None.or_else(nobody), None);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++fn+nobody()+-%3E+Option%3C%26%27static+str%3E+%7B+None+%7D%0A++++fn+vikings()+-%3E+Option%3C%26%27static+str%3E+%7B+Some(%22vikings%22)+%7D%0A++++%0A++++assert_eq!(Some(%22barbarians%22).or_else(vikings),+Some(%22barbarians%22));%0A++++assert_eq!(None.or_else(vikings),+Some(%22vikings%22));%0A++++assert_eq!(None.or_else(nobody),+None);%0A%7D&edition=2021)\n\n1.37.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#1542)\n\nReturns [`Some`](about:blank/enum.Option.html#variant.Some \"variant std::option::Option::Some\") if exactly one of `self`, `optb` is [`Some`](about:blank/enum.Option.html#variant.Some \"variant std::option::Option::Some\"), otherwise returns [`None`](about:blank/enum.Option.html#variant.None \"variant std::option::Option::None\").\n\n##### [§](#examples-27)Examples\n\n```\nlet x = Some(2);\nlet y: Option<u32> = None;\nassert_eq!(x.xor(y), Some(2));\n\nlet x: Option<u32> = None;\nlet y = Some(2);\nassert_eq!(x.xor(y), Some(2));\n\nlet x = Some(2);\nlet y = Some(2);\nassert_eq!(x.xor(y), None);\n\nlet x: Option<u32> = None;\nlet y: Option<u32> = None;\nassert_eq!(x.xor(y), None);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+Some(2);%0A++++let+y:+Option%3Cu32%3E+=+None;%0A++++assert_eq!(x.xor(y),+Some(2));%0A++++%0A++++let+x:+Option%3Cu32%3E+=+None;%0A++++let+y+=+Some(2);%0A++++assert_eq!(x.xor(y),+Some(2));%0A++++%0A++++let+x+=+Some(2);%0A++++let+y+=+Some(2);%0A++++assert_eq!(x.xor(y),+None);%0A++++%0A++++let+x:+Option%3Cu32%3E+=+None;%0A++++let+y:+Option%3Cu32%3E+=+None;%0A++++assert_eq!(x.xor(y),+None);%0A%7D&edition=2021)\n\n1.53.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#1576)\n\nInserts `value` into the option, then returns a mutable reference to it.\n\nIf the option already contains a value, the old value is dropped.\n\nSee also [`Option::get_or_insert`](about:blank/enum.Option.html#method.get_or_insert \"method std::option::Option::get_or_insert\"), which doesn’t update the value if the option already contains [`Some`](about:blank/enum.Option.html#variant.Some \"variant std::option::Option::Some\").\n\n##### [§](#example)Example\n\n```\nlet mut opt = None;\nlet val = opt.insert(1);\nassert_eq!(*val, 1);\nassert_eq!(opt.unwrap(), 1);\nlet val = opt.insert(2);\nassert_eq!(*val, 2);\n*val = 3;\nassert_eq!(opt.unwrap(), 3);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+opt+=+None;%0A++++let+val+=+opt.insert(1);%0A++++assert_eq!(*val,+1);%0A++++assert_eq!(opt.unwrap(),+1);%0A++++let+val+=+opt.insert(2);%0A++++assert_eq!(*val,+2);%0A++++*val+=+3;%0A++++assert_eq!(opt.unwrap(),+3);%0A%7D&edition=2021)\n\n1.20.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#1605)\n\nInserts `value` into the option if it is [`None`](about:blank/enum.Option.html#variant.None \"variant std::option::Option::None\"), then returns a mutable reference to the contained value.\n\nSee also [`Option::insert`](about:blank/enum.Option.html#method.insert \"method std::option::Option::insert\"), which updates the value even if the option already contains [`Some`](about:blank/enum.Option.html#variant.Some \"variant std::option::Option::Some\").\n\n##### [§](#examples-28)Examples\n\n```\nlet mut x = None;\n\n{\n    let y: &mut u32 = x.get_or_insert(5);\n    assert_eq!(y, &5);\n\n    *y = 7;\n}\n\nassert_eq!(x, Some(7));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+x+=+None;%0A++++%0A++++%7B%0A++++++++let+y:+%26mut+u32+=+x.get_or_insert(5);%0A++++++++assert_eq!(y,+%265);%0A++++%0A++++++++*y+=+7;%0A++++%7D%0A++++%0A++++assert_eq!(x,+Some(7));%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#1636-1638)\n\n🔬This is a nightly-only experimental API. (`option_get_or_insert_default` [#82901](https://github.com/rust-lang/rust/issues/82901))\n\nInserts the default value into the option if it is [`None`](about:blank/enum.Option.html#variant.None \"variant std::option::Option::None\"), then returns a mutable reference to the contained value.\n\n##### [§](#examples-29)Examples\n\n```\n#![feature(option_get_or_insert_default)]\n\nlet mut x = None;\n\n{\n    let y: &mut u32 = x.get_or_insert_default();\n    assert_eq!(y, &0);\n\n    *y = 7;\n}\n\nassert_eq!(x, Some(7));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(option_get_or_insert_default)%5D%0A%0Afn+main()+%7B%0A++++let+mut+x+=+None;%0A++++%0A++++%7B%0A++++++++let+y:+%26mut+u32+=+x.get_or_insert_default();%0A++++++++assert_eq!(y,+%260);%0A++++%0A++++++++*y+=+7;%0A++++%7D%0A++++%0A++++assert_eq!(x,+Some(7));%0A%7D&version=nightly&edition=2021)\n\n1.20.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#1662-1664)\n\nInserts a value computed from `f` into the option if it is [`None`](about:blank/enum.Option.html#variant.None \"variant std::option::Option::None\"), then returns a mutable reference to the contained value.\n\n##### [§](#examples-30)Examples\n\n```\nlet mut x = None;\n\n{\n    let y: &mut u32 = x.get_or_insert_with(|| 5);\n    assert_eq!(y, &5);\n\n    *y = 7;\n}\n\nassert_eq!(x, Some(7));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+x+=+None;%0A++++%0A++++%7B%0A++++++++let+y:+%26mut+u32+=+x.get_or_insert_with(%7C%7C+5);%0A++++++++assert_eq!(y,+%265);%0A++++%0A++++++++*y+=+7;%0A++++%7D%0A++++%0A++++assert_eq!(x,+Some(7));%0A%7D&edition=2021)\n\n1.0.0 (const: [unstable](https://github.com/rust-lang/rust/issues/67441 \"Tracking issue for const_option\")) · [source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#1697)\n\nTakes the value out of the option, leaving a [`None`](about:blank/enum.Option.html#variant.None \"variant std::option::Option::None\") in its place.\n\n##### [§](#examples-31)Examples\n\n```\nlet mut x = Some(2);\nlet y = x.take();\nassert_eq!(x, None);\nassert_eq!(y, Some(2));\n\nlet mut x: Option<u32> = None;\nlet y = x.take();\nassert_eq!(x, None);\nassert_eq!(y, None);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+x+=+Some(2);%0A++++let+y+=+x.take();%0A++++assert_eq!(x,+None);%0A++++assert_eq!(y,+Some(2));%0A++++%0A++++let+mut+x:+Option%3Cu32%3E+=+None;%0A++++let+y+=+x.take();%0A++++assert_eq!(x,+None);%0A++++assert_eq!(y,+None);%0A%7D&edition=2021)\n\n1.80.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#1728-1730)\n\nTakes the value out of the option, but only if the predicate evaluates to `true` on a mutable reference to the value.\n\nIn other words, replaces `self` with `None` if the predicate returns `true`. This method operates similar to [`Option::take`](about:blank/enum.Option.html#method.take \"method std::option::Option::take\") but conditional.\n\n##### [§](#examples-32)Examples\n\n```\nlet mut x = Some(42);\n\nlet prev = x.take_if(|v| if *v == 42 {\n    *v += 1;\n    false\n} else {\n    false\n});\nassert_eq!(x, Some(43));\nassert_eq!(prev, None);\n\nlet prev = x.take_if(|v| *v == 43);\nassert_eq!(x, None);\nassert_eq!(prev, Some(43));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+x+=+Some(42);%0A++++%0A++++let+prev+=+x.take_if(%7Cv%7C+if+*v+==+42+%7B%0A++++++++*v+%2B=+1;%0A++++++++false%0A++++%7D+else+%7B%0A++++++++false%0A++++%7D);%0A++++assert_eq!(x,+Some(43));%0A++++assert_eq!(prev,+None);%0A++++%0A++++let+prev+=+x.take_if(%7Cv%7C+*v+==+43);%0A++++assert_eq!(x,+None);%0A++++assert_eq!(prev,+Some(43));%0A%7D&edition=2021)\n\n1.31.0 (const: [unstable](https://github.com/rust-lang/rust/issues/67441 \"Tracking issue for const_option\")) · [source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#1755)\n\nReplaces the actual value in the option by the value given in parameter, returning the old value if present, leaving a [`Some`](about:blank/enum.Option.html#variant.Some \"variant std::option::Option::Some\") in its place without deinitializing either one.\n\n##### [§](#examples-33)Examples\n\n```\nlet mut x = Some(2);\nlet old = x.replace(5);\nassert_eq!(x, Some(5));\nassert_eq!(old, Some(2));\n\nlet mut x = None;\nlet old = x.replace(3);\nassert_eq!(x, Some(3));\nassert_eq!(old, None);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+x+=+Some(2);%0A++++let+old+=+x.replace(5);%0A++++assert_eq!(x,+Some(5));%0A++++assert_eq!(old,+Some(2));%0A++++%0A++++let+mut+x+=+None;%0A++++let+old+=+x.replace(3);%0A++++assert_eq!(x,+Some(3));%0A++++assert_eq!(old,+None);%0A%7D&edition=2021)\n\n1.46.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#1775)\n\nZips `self` with another `Option`.\n\nIf `self` is `Some(s)` and `other` is `Some(o)`, this method returns `Some((s, o))`. Otherwise, `None` is returned.\n\n##### [§](#examples-34)Examples\n\n```\nlet x = Some(1);\nlet y = Some(\"hi\");\nlet z = None::<u8>;\n\nassert_eq!(x.zip(y), Some((1, \"hi\")));\nassert_eq!(x.zip(z), None);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+Some(1);%0A++++let+y+=+Some(%22hi%22);%0A++++let+z+=+None::%3Cu8%3E;%0A++++%0A++++assert_eq!(x.zip(y),+Some((1,+%22hi%22)));%0A++++assert_eq!(x.zip(z),+None);%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#1811-1813)\n\n🔬This is a nightly-only experimental API. (`option_zip` [#70086](https://github.com/rust-lang/rust/issues/70086))\n\nZips `self` and another `Option` with function `f`.\n\nIf `self` is `Some(s)` and `other` is `Some(o)`, this method returns `Some(f(s, o))`. Otherwise, `None` is returned.\n\n##### [§](#examples-35)Examples\n\n```\n#![feature(option_zip)]\n\n#[derive(Debug, PartialEq)]\nstruct Point {\n    x: f64,\n    y: f64,\n}\n\nimpl Point {\n    fn new(x: f64, y: f64) -> Self {\n        Self { x, y }\n    }\n}\n\nlet x = Some(17.5);\nlet y = Some(42.7);\n\nassert_eq!(x.zip_with(y, Point::new), Some(Point { x: 17.5, y: 42.7 }));\nassert_eq!(x.zip_with(None, Point::new), None);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(option_zip)%5D%0A%0Afn+main()+%7B%0A++++%23%5Bderive(Debug,+PartialEq)%5D%0A++++struct+Point+%7B%0A++++++++x:+f64,%0A++++++++y:+f64,%0A++++%7D%0A++++%0A++++impl+Point+%7B%0A++++++++fn+new(x:+f64,+y:+f64)+-%3E+Self+%7B%0A++++++++++++Self+%7B+x,+y+%7D%0A++++++++%7D%0A++++%7D%0A++++%0A++++let+x+=+Some(17.5);%0A++++let+y+=+Some(42.7);%0A++++%0A++++assert_eq!(x.zip_with(y,+Point::new),+Some(Point+%7B+x:+17.5,+y:+42.7+%7D));%0A++++assert_eq!(x.zip_with(None,+Point::new),+None);%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#1822)[§](#impl-Option%3C(T,+U)%3E)\n\n1.66.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#1839)\n\nUnzips an option containing a tuple of two options.\n\nIf `self` is `Some((a, b))` this method returns `(Some(a), Some(b))`. Otherwise, `(None, None)` is returned.\n\n##### [§](#examples-36)Examples\n\n```\nlet x = Some((1, \"hi\"));\nlet y = None::<(u8, u32)>;\n\nassert_eq!(x.unzip(), (Some(1), Some(\"hi\")));\nassert_eq!(y.unzip(), (None, None));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+Some((1,+%22hi%22));%0A++++let+y+=+None::%3C(u8,+u32)%3E;%0A++++%0A++++assert_eq!(x.unzip(),+(Some(1),+Some(%22hi%22)));%0A++++assert_eq!(y.unzip(),+(None,+None));%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#1847)[§](#impl-Option%3C%26T%3E)\n\n1.35.0 (const: [unstable](https://github.com/rust-lang/rust/issues/67441 \"Tracking issue for const_option\")) · [source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#1863-1865)\n\nMaps an `Option<&T>` to an `Option<T>` by copying the contents of the option.\n\n##### [§](#examples-37)Examples\n\n```\nlet x = 12;\nlet opt_x = Some(&x);\nassert_eq!(opt_x, Some(&12));\nlet copied = opt_x.copied();\nassert_eq!(copied, Some(12));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+12;%0A++++let+opt_x+=+Some(%26x);%0A++++assert_eq!(opt_x,+Some(%2612));%0A++++let+copied+=+opt_x.copied();%0A++++assert_eq!(copied,+Some(12));%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#1889-1891)\n\nMaps an `Option<&T>` to an `Option<T>` by cloning the contents of the option.\n\n##### [§](#examples-38)Examples\n\n```\nlet x = 12;\nlet opt_x = Some(&x);\nassert_eq!(opt_x, Some(&12));\nlet cloned = opt_x.cloned();\nassert_eq!(cloned, Some(12));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+12;%0A++++let+opt_x+=+Some(%26x);%0A++++assert_eq!(opt_x,+Some(%2612));%0A++++let+cloned+=+opt_x.cloned();%0A++++assert_eq!(cloned,+Some(12));%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#1900)[§](#impl-Option%3C%26mut+T%3E)\n\n1.35.0 (const: [unstable](https://github.com/rust-lang/rust/issues/91930 \"Tracking issue for const_option_ext\")) · [source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#1916-1918)\n\nMaps an `Option<&mut T>` to an `Option<T>` by copying the contents of the option.\n\n##### [§](#examples-39)Examples\n\n```\nlet mut x = 12;\nlet opt_x = Some(&mut x);\nassert_eq!(opt_x, Some(&mut 12));\nlet copied = opt_x.copied();\nassert_eq!(copied, Some(12));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+x+=+12;%0A++++let+opt_x+=+Some(%26mut+x);%0A++++assert_eq!(opt_x,+Some(%26mut+12));%0A++++let+copied+=+opt_x.copied();%0A++++assert_eq!(copied,+Some(12));%0A%7D&edition=2021)\n\n1.26.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#1940-1942)\n\nMaps an `Option<&mut T>` to an `Option<T>` by cloning the contents of the option.\n\n##### [§](#examples-40)Examples\n\n```\nlet mut x = 12;\nlet opt_x = Some(&mut x);\nassert_eq!(opt_x, Some(&mut 12));\nlet cloned = opt_x.cloned();\nassert_eq!(cloned, Some(12));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+x+=+12;%0A++++let+opt_x+=+Some(%26mut+x);%0A++++assert_eq!(opt_x,+Some(%26mut+12));%0A++++let+cloned+=+opt_x.cloned();%0A++++assert_eq!(cloned,+Some(12));%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#1951)[§](#impl-Option%3CResult%3CT,+E%3E%3E)\n\n1.33.0 (const: [unstable](https://github.com/rust-lang/rust/issues/67441 \"Tracking issue for const_option\")) · [source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#1971)\n\nTransposes an `Option` of a [`Result`](../result/enum.Result.html \"enum std::result::Result\") into a [`Result`](../result/enum.Result.html \"enum std::result::Result\") of an `Option`.\n\n[`None`](about:blank/enum.Option.html#variant.None \"variant std::option::Option::None\") will be mapped to `[Ok](about:blank/result/enum.Result.html#variant.Ok \"variant std::result::Result::Ok\")([None](about:blank/enum.Option.html#variant.None \"variant std::option::Option::None\"))`. `[Some](about:blank/enum.Option.html#variant.Some \"variant std::option::Option::Some\")([Ok](about:blank/result/enum.Result.html#variant.Ok \"variant std::result::Result::Ok\")(_))` and `[Some](about:blank/enum.Option.html#variant.Some \"variant std::option::Option::Some\")([Err](about:blank/result/enum.Result.html#variant.Err \"variant std::result::Result::Err\")(_))` will be mapped to `[Ok](about:blank/result/enum.Result.html#variant.Ok \"variant std::result::Result::Ok\")([Some](about:blank/enum.Option.html#variant.Some \"variant std::option::Option::Some\")(_))` and `[Err](about:blank/result/enum.Result.html#variant.Err \"variant std::result::Result::Err\")(_)`.\n\n##### [§](#examples-41)Examples\n\n```\n#[derive(Debug, Eq, PartialEq)]\nstruct SomeErr;\n\nlet x: Result<Option<i32>, SomeErr> = Ok(Some(5));\nlet y: Option<Result<i32, SomeErr>> = Some(Ok(5));\nassert_eq!(x, y.transpose());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++%23%5Bderive(Debug,+Eq,+PartialEq)%5D%0A++++struct+SomeErr;%0A++++%0A++++let+x:+Result%3COption%3Ci32%3E,+SomeErr%3E+=+Ok(Some(5));%0A++++let+y:+Option%3CResult%3Ci32,+SomeErr%3E%3E+=+Some(Ok(5));%0A++++assert_eq!(x,+y.transpose());%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#2485)[§](#impl-Option%3COption%3CT%3E%3E)\n\n1.40.0 (const: [unstable](https://github.com/rust-lang/rust/issues/67441 \"Tracking issue for const_option\")) · [source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#2513)\n\nConverts from `Option<Option<T>>` to `Option<T>`.\n\n##### [§](#examples-42)Examples\n\nBasic usage:\n\n```\nlet x: Option<Option<u32>> = Some(Some(6));\nassert_eq!(Some(6), x.flatten());\n\nlet x: Option<Option<u32>> = Some(None);\nassert_eq!(None, x.flatten());\n\nlet x: Option<Option<u32>> = None;\nassert_eq!(None, x.flatten());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x:+Option%3COption%3Cu32%3E%3E+=+Some(Some(6));%0A++++assert_eq!(Some(6),+x.flatten());%0A++++%0A++++let+x:+Option%3COption%3Cu32%3E%3E+=+Some(None);%0A++++assert_eq!(None,+x.flatten());%0A++++%0A++++let+x:+Option%3COption%3Cu32%3E%3E+=+None;%0A++++assert_eq!(None,+x.flatten());%0A%7D&edition=2021)\n\nFlattening only removes one level of nesting at a time:\n\n```\nlet x: Option<Option<Option<u32>>> = Some(Some(Some(6)));\nassert_eq!(Some(Some(6)), x.flatten());\nassert_eq!(Some(6), x.flatten().flatten());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x:+Option%3COption%3COption%3Cu32%3E%3E%3E+=+Some(Some(Some(6)));%0A++++assert_eq!(Some(Some(6)),+x.flatten());%0A++++assert_eq!(Some(6),+x.flatten().flatten());%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#2003-2005)[§](#impl-Clone-for-Option%3CT%3E)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#569)[§](#impl-Debug-for-Option%3CT%3E)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#2025)[§](#impl-Default-for-Option%3CT%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#2035)[§](#method.default)\n\nReturns [`None`](about:blank/enum.Option.html#variant.None \"variant std::option::Option::None\").\n\n##### [§](#examples-44)Examples\n\n```\nlet opt: Option<u32> = Option::default();\nassert!(opt.is_none());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+opt:+Option%3Cu32%3E+=+Option::default();%0A++++assert!(opt.is_none());%0A%7D&edition=2021)\n\n1.30.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#2101)[§](#impl-From%3C%26Option%3CT%3E%3E-for-Option%3C%26T%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#2122)[§](#method.from-1)\n\nConverts from `&Option<T>` to `Option<&T>`.\n\n##### [§](#examples-47)Examples\n\nConverts an `[Option](enum.Option.html \"enum std::option::Option\")<[String](../../std/string/struct.String.html \"String\")>` into an `[Option](enum.Option.html \"enum std::option::Option\")<[usize](../primitive.usize.html \"primitive usize\")>`, preserving the original. The [`map`](about:blank/enum.Option.html#method.map \"method std::option::Option::map\") method takes the `self` argument by value, consuming the original, so this technique uses `from` to first take an [`Option`](enum.Option.html \"enum std::option::Option\") to a reference to the value inside the original.\n\n```\nlet s: Option<String> = Some(String::from(\"Hello, Rustaceans!\"));\nlet o: Option<usize> = Option::from(&s).map(|ss: &String| ss.len());\n\nprintln!(\"Can still print s: {s:?}\");\n\nassert_eq!(o, Some(18));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s:+Option%3CString%3E+=+Some(String::from(%22Hello,+Rustaceans!%22));%0A++++let+o:+Option%3Cusize%3E+=+Option::from(%26s).map(%7Css:+%26String%7C+ss.len());%0A++++%0A++++println!(%22Can+still+print+s:+%7Bs:?%7D%22);%0A++++%0A++++assert_eq!(o,+Some(18));%0A%7D&edition=2021)\n\n1.30.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#2128)[§](#impl-From%3C%26mut+Option%3CT%3E%3E-for-Option%3C%26mut+T%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#2144)[§](#method.from)\n\nConverts from `&mut Option<T>` to `Option<&mut T>`\n\n##### [§](#examples-46)Examples\n\n```\nlet mut s = Some(String::from(\"Hello\"));\nlet o: Option<&mut String> = Option::from(&mut s);\n\nmatch o {\n    Some(t) => *t = String::from(\"Hello, Rustaceans!\"),\n    None => (),\n}\n\nassert_eq!(s, Some(String::from(\"Hello, Rustaceans!\")));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+s+=+Some(String::from(%22Hello%22));%0A++++let+o:+Option%3C%26mut+String%3E+=+Option::from(%26mut+s);%0A++++%0A++++match+o+%7B%0A++++++++Some(t)+=%3E+*t+=+String::from(%22Hello,+Rustaceans!%22),%0A++++++++None+=%3E+(),%0A++++%7D%0A++++%0A++++assert_eq!(s,+Some(String::from(%22Hello,+Rustaceans!%22)));%0A%7D&edition=2021)\n\n1.12.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#2085)[§](#impl-From%3CT%3E-for-Option%3CT%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#2095)[§](#method.from-2)\n\nMoves `val` into a new [`Some`](about:blank/enum.Option.html#variant.Some \"variant std::option::Option::Some\").\n\n##### [§](#examples-48)Examples\n\n```\nlet o: Option<u8> = Option::from(67);\n\nassert_eq!(Some(67), o);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+o:+Option%3Cu8%3E+=+Option::from(67);%0A++++%0A++++assert_eq!(Some(67),+o);%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#2373)[§](#impl-FromIterator%3COption%3CA%3E%3E-for-Option%3CV%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#2435)[§](#method.from_iter)\n\nTakes each element in the [`Iterator`](../iter/trait.Iterator.html \"trait std::iter::Iterator\"): if it is [`None`](about:blank/enum.Option.html#variant.None \"variant std::option::Option::None\"), no further elements are taken, and the [`None`](about:blank/enum.Option.html#variant.None \"variant std::option::Option::None\") is returned. Should no [`None`](about:blank/enum.Option.html#variant.None \"variant std::option::Option::None\") occur, a container of type `V` containing the values of each [`Option`](enum.Option.html \"enum std::option::Option\") is returned.\n\n##### [§](#examples-45)Examples\n\nHere is an example which increments every integer in a vector. We use the checked variant of `add` that returns `None` when the calculation would result in an overflow.\n\n```\nlet items = vec![0_u16, 1, 2];\n\nlet res: Option<Vec<u16>> = items\n    .iter()\n    .map(|x| x.checked_add(1))\n    .collect();\n\nassert_eq!(res, Some(vec![1, 2, 3]));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+items+=+vec!%5B0_u16,+1,+2%5D;%0A++++%0A++++let+res:+Option%3CVec%3Cu16%3E%3E+=+items%0A++++++++.iter()%0A++++++++.map(%7Cx%7C+x.checked_add(1))%0A++++++++.collect();%0A++++%0A++++assert_eq!(res,+Some(vec!%5B1,+2,+3%5D));%0A%7D&edition=2021)\n\nAs you can see, this will return the expected, valid items.\n\nHere is another example that tries to subtract one from another list of integers, this time checking for underflow:\n\n```\nlet items = vec![2_u16, 1, 0];\n\nlet res: Option<Vec<u16>> = items\n    .iter()\n    .map(|x| x.checked_sub(1))\n    .collect();\n\nassert_eq!(res, None);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+items+=+vec!%5B2_u16,+1,+0%5D;%0A++++%0A++++let+res:+Option%3CVec%3Cu16%3E%3E+=+items%0A++++++++.iter()%0A++++++++.map(%7Cx%7C+x.checked_sub(1))%0A++++++++.collect();%0A++++%0A++++assert_eq!(res,+None);%0A%7D&edition=2021)\n\nSince the last element is zero, it would underflow. Thus, the resulting value is `None`.\n\nHere is a variation on the previous example, showing that no further elements are taken from `iter` after the first `None`.\n\n```\nlet items = vec![3_u16, 2, 1, 10];\n\nlet mut shared = 0;\n\nlet res: Option<Vec<u16>> = items\n    .iter()\n    .map(|x| { shared += x; x.checked_sub(2) })\n    .collect();\n\nassert_eq!(res, None);\nassert_eq!(shared, 6);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+items+=+vec!%5B3_u16,+2,+1,+10%5D;%0A++++%0A++++let+mut+shared+=+0;%0A++++%0A++++let+res:+Option%3CVec%3Cu16%3E%3E+=+items%0A++++++++.iter()%0A++++++++.map(%7Cx%7C+%7B+shared+%2B=+x;+x.checked_sub(2)+%7D)%0A++++++++.collect();%0A++++%0A++++assert_eq!(res,+None);%0A++++assert_eq!(shared,+6);%0A%7D&edition=2021)\n\nSince the third element caused an underflow, no further elements were taken, so the final value of `shared` is 6 (= `3 + 2 + 1`), not 16.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#2473)[§](#impl-FromResidual%3CYeet%3C()%3E%3E-for-Option%3CT%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#2475)[§](#method.from_residual-1)\n\n🔬This is a nightly-only experimental API. (`try_trait_v2` [#84277](https://github.com/rust-lang/rust/issues/84277))\n\nConstructs the type from a compatible `Residual` type. [Read more](about:blank/ops/trait.FromResidual.html#tymethod.from_residual)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#2463)[§](#impl-FromResidual-for-Option%3CT%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#2465)[§](#method.from_residual)\n\n🔬This is a nightly-only experimental API. (`try_trait_v2` [#84277](https://github.com/rust-lang/rust/issues/84277))\n\nConstructs the type from a compatible `Residual` type. [Read more](about:blank/ops/trait.FromResidual.html#tymethod.from_residual)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#569)[§](#impl-Hash-for-Option%3CT%3E)\n\n1.4.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#2065)[§](#impl-IntoIterator-for-%26Option%3CT%3E)\n\n[§](#associatedtype.Item-2)\n\nThe type of the elements being iterated over.\n\n[§](#associatedtype.IntoIter-2)\n\nWhich kind of iterator are we turning this into?\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#2069)[§](#method.into_iter-2)\n\nCreates an iterator from a value. [Read more](about:blank/iter/trait.IntoIterator.html#tymethod.into_iter)\n\n1.4.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#2075)[§](#impl-IntoIterator-for-%26mut+Option%3CT%3E)\n\n[§](#associatedtype.Item-1)\n\nThe type of the elements being iterated over.\n\n[§](#associatedtype.IntoIter-1)\n\nWhich kind of iterator are we turning this into?\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#2079)[§](#method.into_iter-1)\n\nCreates an iterator from a value. [Read more](about:blank/iter/trait.IntoIterator.html#tymethod.into_iter)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#2041)[§](#impl-IntoIterator-for-Option%3CT%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#2059)[§](#method.into_iter)\n\nReturns a consuming iterator over the possibly contained value.\n\n##### [§](#examples-49)Examples\n\n```\nlet x = Some(\"string\");\nlet v: Vec<&str> = x.into_iter().collect();\nassert_eq!(v, [\"string\"]);\n\nlet x = None;\nlet v: Vec<&str> = x.into_iter().collect();\nassert!(v.is_empty());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+Some(%22string%22);%0A++++let+v:+Vec%3C%26str%3E+=+x.into_iter().collect();%0A++++assert_eq!(v,+%5B%22string%22%5D);%0A++++%0A++++let+x+=+None;%0A++++let+v:+Vec%3C%26str%3E+=+x.into_iter().collect();%0A++++assert!(v.is_empty());%0A%7D&edition=2021)\n\n[§](#associatedtype.Item)\n\nThe type of the elements being iterated over.\n\n[§](#associatedtype.IntoIter)\n\nWhich kind of iterator are we turning this into?\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#2186)[§](#impl-Ord-for-Option%3CT%3E)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#2155)[§](#impl-PartialEq-for-Option%3CT%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#2157)[§](#method.eq)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[§](#method.ne)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#2173)[§](#impl-PartialOrd-for-Option%3CT%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#2175)[§](#method.partial_cmp)\n\nThis method returns an ordering between `self` and `other` values if one exists. [Read more](about:blank/cmp/trait.PartialOrd.html#tymethod.partial_cmp)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180)[§](#method.lt)\n\nThis method tests less than (for `self` and `other`) and is used by the `<` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.lt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198)[§](#method.le)\n\nThis method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.le)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215)[§](#method.gt)\n\nThis method tests greater than (for `self` and `other`) and is used by the `>` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.gt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233)[§](#method.ge)\n\nThis method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.ge)\n\n1.37.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/accum.rs.html#244-246)[§](#impl-Product%3COption%3CU%3E%3E-for-Option%3CT%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/accum.rs.html#265-267)[§](#method.product)\n\nTakes each element in the [`Iterator`](../iter/trait.Iterator.html \"trait std::iter::Iterator\"): if it is a [`None`](about:blank/enum.Option.html#variant.None \"variant std::option::Option::None\"), no further elements are taken, and the [`None`](about:blank/enum.Option.html#variant.None \"variant std::option::Option::None\") is returned. Should no [`None`](about:blank/enum.Option.html#variant.None \"variant std::option::Option::None\") occur, the product of all elements is returned.\n\n##### [§](#examples-43)Examples\n\nThis multiplies each number in a vector of strings, if a string could not be parsed the operation returns `None`:\n\n```\nlet nums = vec![\"5\", \"10\", \"1\", \"2\"];\nlet total: Option<usize> = nums.iter().map(|w| w.parse::<usize>().ok()).product();\nassert_eq!(total, Some(100));\nlet nums = vec![\"5\", \"10\", \"one\", \"2\"];\nlet total: Option<usize> = nums.iter().map(|w| w.parse::<usize>().ok()).product();\nassert_eq!(total, None);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+nums+=+vec!%5B%225%22,+%2210%22,+%221%22,+%222%22%5D;%0A++++let+total:+Option%3Cusize%3E+=+nums.iter().map(%7Cw%7C+w.parse::%3Cusize%3E().ok()).product();%0A++++assert_eq!(total,+Some(100));%0A++++let+nums+=+vec!%5B%225%22,+%2210%22,+%22one%22,+%222%22%5D;%0A++++let+total:+Option%3Cusize%3E+=+nums.iter().map(%7Cw%7C+w.parse::%3Cusize%3E().ok()).product();%0A++++assert_eq!(total,+None);%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#2481)[§](#impl-Residual%3CT%3E-for-Option%3CInfallible%3E)\n\n[§](#associatedtype.TryType)\n\n🔬This is a nightly-only experimental API. (`try_trait_v2_residual` [#91285](https://github.com/rust-lang/rust/issues/91285))\n\nThe “return” type of this meta-function.\n\n1.37.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/accum.rs.html#214-216)[§](#impl-Sum%3COption%3CU%3E%3E-for-Option%3CT%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/accum.rs.html#235-237)[§](#method.sum)\n\nTakes each element in the [`Iterator`](../iter/trait.Iterator.html \"trait std::iter::Iterator\"): if it is a [`None`](about:blank/enum.Option.html#variant.None \"variant std::option::Option::None\"), no further elements are taken, and the [`None`](about:blank/enum.Option.html#variant.None \"variant std::option::Option::None\") is returned. Should no [`None`](about:blank/enum.Option.html#variant.None \"variant std::option::Option::None\") occur, the sum of all elements is returned.\n\n##### [§](#examples-50)Examples\n\nThis sums up the position of the character ‘a’ in a vector of strings, if a word did not have the character ‘a’ the operation returns `None`:\n\n```\nlet words = vec![\"have\", \"a\", \"great\", \"day\"];\nlet total: Option<usize> = words.iter().map(|w| w.find('a')).sum();\nassert_eq!(total, Some(5));\nlet words = vec![\"have\", \"a\", \"good\", \"day\"];\nlet total: Option<usize> = words.iter().map(|w| w.find('a')).sum();\nassert_eq!(total, None);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+words+=+vec!%5B%22have%22,+%22a%22,+%22great%22,+%22day%22%5D;%0A++++let+total:+Option%3Cusize%3E+=+words.iter().map(%7Cw%7C+w.find(%27a%27)).sum();%0A++++assert_eq!(total,+Some(5));%0A++++let+words+=+vec!%5B%22have%22,+%22a%22,+%22good%22,+%22day%22%5D;%0A++++let+total:+Option%3Cusize%3E+=+words.iter().map(%7Cw%7C+w.find(%27a%27)).sum();%0A++++assert_eq!(total,+None);%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#2444)[§](#impl-Try-for-Option%3CT%3E)\n\n[§](#associatedtype.Output)\n\n🔬This is a nightly-only experimental API. (`try_trait_v2` [#84277](https://github.com/rust-lang/rust/issues/84277))\n\nThe type of the value produced by `?` when _not_ short-circuiting.\n\n[§](#associatedtype.Residual)\n\n🔬This is a nightly-only experimental API. (`try_trait_v2` [#84277](https://github.com/rust-lang/rust/issues/84277))\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#2449)[§](#method.from_output)\n\n🔬This is a nightly-only experimental API. (`try_trait_v2` [#84277](https://github.com/rust-lang/rust/issues/84277))\n\nConstructs the type from its `Output` type. [Read more](about:blank/ops/trait.Try.html#tymethod.from_output)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#2454)[§](#method.branch)\n\n🔬This is a nightly-only experimental API. (`try_trait_v2` [#84277](https://github.com/rust-lang/rust/issues/84277))\n\nUsed in `?` to decide whether the operator should produce a value (because this returned [`ControlFlow::Continue`](about:blank/ops/enum.ControlFlow.html#variant.Continue \"variant std::ops::ControlFlow::Continue\")) or propagate a value back to the caller (because this returned [`ControlFlow::Break`](about:blank/ops/enum.ControlFlow.html#variant.Break \"variant std::ops::ControlFlow::Break\")). [Read more](about:blank/ops/trait.Try.html#tymethod.branch)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#569)[§](#impl-Copy-for-Option%3CT%3E)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#569)[§](#impl-Eq-for-Option%3CT%3E)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#2153)[§](#impl-StructuralPartialEq-for-Option%3CT%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140)[§](#impl-Any-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208)[§](#impl-Borrow%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216)[§](#impl-BorrowMut%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#782)[§](#impl-From%3C!%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#783)[§](#method.from-3)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765)[§](#impl-From%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768)[§](#method.from-4)\n\nReturns the argument unchanged.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750)[§](#impl-Into%3CU%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758)[§](#method.into)\n\nCalls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of `[From](../convert/trait.From.html \"trait std::convert::From\")<T> for U` chooses to do.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85)[§](#impl-ToOwned-for-T)\n\n[§](#associatedtype.Owned)\n\nThe resulting type after obtaining ownership.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88)[§](#method.to_owned)\n\nCreates owned data from borrowed data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#tymethod.to_owned)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92)[§](#method.clone_into)\n\nUses borrowed data to replace owned data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#method.clone_into)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807)[§](#impl-TryFrom%3CU%3E-for-T)\n\n[§](#associatedtype.Error-1)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812)[§](#method.try_from)\n\nPerforms the conversion.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792)[§](#impl-TryInto%3CU%3E-for-T)\n\n[§](#associatedtype.Error)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797)[§](#method.try_into)\n\nPerforms the conversion.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"The `Option` type. See the module level documentation for more.\"><title>Option in std::option - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc enum\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">Option</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">Option</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#variants\">Variants</a></h3><ul class=\"block variant\"><li><a href=\"#variant.None\">None</a></li><li><a href=\"#variant.Some\">Some</a></li></ul><h3><a href=\"#implementations\">Methods</a></h3><ul class=\"block method\"><li><a href=\"#method.and\">and</a></li><li><a href=\"#method.and_then\">and_then</a></li><li><a href=\"#method.as_deref\">as_deref</a></li><li><a href=\"#method.as_deref_mut\">as_deref_mut</a></li><li><a href=\"#method.as_mut\">as_mut</a></li><li><a href=\"#method.as_mut_slice\">as_mut_slice</a></li><li><a href=\"#method.as_pin_mut\">as_pin_mut</a></li><li><a href=\"#method.as_pin_ref\">as_pin_ref</a></li><li><a href=\"#method.as_ref\">as_ref</a></li><li><a href=\"#method.as_slice\">as_slice</a></li><li><a href=\"#method.cloned\">cloned</a></li><li><a href=\"#method.cloned-1\">cloned</a></li><li><a href=\"#method.copied\">copied</a></li><li><a href=\"#method.copied-1\">copied</a></li><li><a href=\"#method.expect\">expect</a></li><li><a href=\"#method.filter\">filter</a></li><li><a href=\"#method.flatten\">flatten</a></li><li><a href=\"#method.get_or_insert\">get_or_insert</a></li><li><a href=\"#method.get_or_insert_default\">get_or_insert_default</a></li><li><a href=\"#method.get_or_insert_with\">get_or_insert_with</a></li><li><a href=\"#method.insert\">insert</a></li><li><a href=\"#method.inspect\">inspect</a></li><li><a href=\"#method.is_none\">is_none</a></li><li><a href=\"#method.is_some\">is_some</a></li><li><a href=\"#method.is_some_and\">is_some_and</a></li><li><a href=\"#method.iter\">iter</a></li><li><a href=\"#method.iter_mut\">iter_mut</a></li><li><a href=\"#method.map\">map</a></li><li><a href=\"#method.map_or\">map_or</a></li><li><a href=\"#method.map_or_else\">map_or_else</a></li><li><a href=\"#method.ok_or\">ok_or</a></li><li><a href=\"#method.ok_or_else\">ok_or_else</a></li><li><a href=\"#method.or\">or</a></li><li><a href=\"#method.or_else\">or_else</a></li><li><a href=\"#method.replace\">replace</a></li><li><a href=\"#method.take\">take</a></li><li><a href=\"#method.take_if\">take_if</a></li><li><a href=\"#method.transpose\">transpose</a></li><li><a href=\"#method.unwrap\">unwrap</a></li><li><a href=\"#method.unwrap_or\">unwrap_or</a></li><li><a href=\"#method.unwrap_or_default\">unwrap_or_default</a></li><li><a href=\"#method.unwrap_or_else\">unwrap_or_else</a></li><li><a href=\"#method.unwrap_unchecked\">unwrap_unchecked</a></li><li><a href=\"#method.unzip\">unzip</a></li><li><a href=\"#method.xor\">xor</a></li><li><a href=\"#method.zip\">zip</a></li><li><a href=\"#method.zip_with\">zip_with</a></li></ul><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-Clone-for-Option%3CT%3E\">Clone</a></li><li><a href=\"#impl-Copy-for-Option%3CT%3E\">Copy</a></li><li><a href=\"#impl-Debug-for-Option%3CT%3E\">Debug</a></li><li><a href=\"#impl-Default-for-Option%3CT%3E\">Default</a></li><li><a href=\"#impl-Eq-for-Option%3CT%3E\">Eq</a></li><li><a href=\"#impl-From%3C%26Option%3CT%3E%3E-for-Option%3C%26T%3E\">From&lt;&amp;'a Option&lt;T&gt;&gt;</a></li><li><a href=\"#impl-From%3C%26mut+Option%3CT%3E%3E-for-Option%3C%26mut+T%3E\">From&lt;&amp;'a mut Option&lt;T&gt;&gt;</a></li><li><a href=\"#impl-From%3CT%3E-for-Option%3CT%3E\">From&lt;T&gt;</a></li><li><a href=\"#impl-FromIterator%3COption%3CA%3E%3E-for-Option%3CV%3E\">FromIterator&lt;Option&lt;A&gt;&gt;</a></li><li><a href=\"#impl-FromResidual-for-Option%3CT%3E\">FromResidual</a></li><li><a href=\"#impl-FromResidual%3CYeet%3C()%3E%3E-for-Option%3CT%3E\">FromResidual&lt;Yeet&lt;()&gt;&gt;</a></li><li><a href=\"#impl-Hash-for-Option%3CT%3E\">Hash</a></li><li><a href=\"#impl-IntoIterator-for-%26Option%3CT%3E\">IntoIterator</a></li><li><a href=\"#impl-IntoIterator-for-%26mut+Option%3CT%3E\">IntoIterator</a></li><li><a href=\"#impl-IntoIterator-for-Option%3CT%3E\">IntoIterator</a></li><li><a href=\"#impl-Ord-for-Option%3CT%3E\">Ord</a></li><li><a href=\"#impl-PartialEq-for-Option%3CT%3E\">PartialEq</a></li><li><a href=\"#impl-PartialOrd-for-Option%3CT%3E\">PartialOrd</a></li><li><a href=\"#impl-Product%3COption%3CU%3E%3E-for-Option%3CT%3E\">Product&lt;Option&lt;U&gt;&gt;</a></li><li><a href=\"#impl-Residual%3CT%3E-for-Option%3CInfallible%3E\">Residual&lt;T&gt;</a></li><li><a href=\"#impl-StructuralPartialEq-for-Option%3CT%3E\">StructuralPartialEq</a></li><li><a href=\"#impl-Sum%3COption%3CU%3E%3E-for-Option%3CT%3E\">Sum&lt;Option&lt;U&gt;&gt;</a></li><li><a href=\"#impl-Try-for-Option%3CT%3E\">Try</a></li></ul><h3><a href=\"#synthetic-implementations\">Auto Trait Implementations</a></h3><ul class=\"block synthetic-implementation\"><li><a href=\"#impl-Freeze-for-Option%3CT%3E\">Freeze</a></li><li><a href=\"#impl-RefUnwindSafe-for-Option%3CT%3E\">RefUnwindSafe</a></li><li><a href=\"#impl-Send-for-Option%3CT%3E\">Send</a></li><li><a href=\"#impl-Sync-for-Option%3CT%3E\">Sync</a></li><li><a href=\"#impl-Unpin-for-Option%3CT%3E\">Unpin</a></li><li><a href=\"#impl-UnwindSafe-for-Option%3CT%3E\">UnwindSafe</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-Any-for-T\">Any</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-T\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-T\">BorrowMut&lt;T&gt;</a></li><li><a href=\"#impl-From%3C!%3E-for-T\">From&lt;!&gt;</a></li><li><a href=\"#impl-From%3CT%3E-for-T\">From&lt;T&gt;</a></li><li><a href=\"#impl-Into%3CU%3E-for-T\">Into&lt;U&gt;</a></li><li><a href=\"#impl-ToOwned-for-T\">ToOwned</a></li><li><a href=\"#impl-TryFrom%3CU%3E-for-T\">TryFrom&lt;U&gt;</a></li><li><a href=\"#impl-TryInto%3CU%3E-for-T\">TryInto&lt;U&gt;</a></li></ul></section><h2><a href=\"index.html\">In std::option</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.IntoIter.html\">IntoIter</a></li><li><a href=\"struct.Iter.html\">Iter</a></li><li><a href=\"struct.IterMut.html\">IterMut</a></li></ul><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.Option.html\">Option</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Enum <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">option</a>::<wbr><a class=\"enum\" href=\"#\">Option</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#574\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub enum Option&lt;T&gt; {\n    None,\n    Some(T),\n}</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>The <code>Option</code> type. See <a href=\"index.html\" title=\"mod std::option\">the module level documentation</a> for more.</p>\n</div></details><h2 id=\"variants\" class=\"variants section-header\">Variants<a href=\"#variants\" class=\"anchor\">§</a></h2><div class=\"variants\"><section id=\"variant.None\" class=\"variant\"><a href=\"#variant.None\" class=\"anchor\">§</a><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><h3 class=\"code-header\">None</h3></section><div class=\"docblock\"><p>No value.</p>\n</div><section id=\"variant.Some\" class=\"variant\"><a href=\"#variant.Some\" class=\"anchor\">§</a><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><h3 class=\"code-header\">Some(T)</h3></section><div class=\"docblock\"><p>Some value of type <code>T</code>.</p>\n</div></div><h2 id=\"implementations\" class=\"section-header\">Implementations<a href=\"#implementations\" class=\"anchor\">§</a></h2><div id=\"implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#589\">source</a><a href=\"#impl-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_some\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.48.0\">1.0.0 (const: 1.48.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#609\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.is_some\" class=\"fn\">is_some</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the option is a <a href=\"enum.Option.html#variant.Some\" title=\"variant std::option::Option::Some\"><code>Some</code></a> value.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_some(), <span class=\"bool-val\">true</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.is_some(), <span class=\"bool-val\">false</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x:+Option%3Cu32%3E+=+Some(2);%0A++++assert_eq!(x.is_some(),+true);%0A++++%0A++++let+x:+Option%3Cu32%3E+=+None;%0A++++assert_eq!(x.is_some(),+false);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_some_and\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#630\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.is_some_and\" class=\"fn\">is_some_and</a>(self, f: impl <a class=\"trait\" href=\"../ops/trait.FnOnce.html\" title=\"trait std::ops::FnOnce\">FnOnce</a>(T) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the option is a <a href=\"enum.Option.html#variant.Some\" title=\"variant std::option::Option::Some\"><code>Some</code></a> and the value inside of it matches a predicate.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_some_and(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">true</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_some_and(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">false</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.is_some_and(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">false</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x:+Option%3Cu32%3E+=+Some(2);%0A++++assert_eq!(x.is_some_and(%7Cx%7C+x+%3E+1),+true);%0A++++%0A++++let+x:+Option%3Cu32%3E+=+Some(0);%0A++++assert_eq!(x.is_some_and(%7Cx%7C+x+%3E+1),+false);%0A++++%0A++++let+x:+Option%3Cu32%3E+=+None;%0A++++assert_eq!(x.is_some_and(%7Cx%7C+x+%3E+1),+false);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_none\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.48.0\">1.0.0 (const: 1.48.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#653\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.is_none\" class=\"fn\">is_none</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the option is a <a href=\"enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a> value.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_none(), <span class=\"bool-val\">false</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.is_none(), <span class=\"bool-val\">true</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x:+Option%3Cu32%3E+=+Some(2);%0A++++assert_eq!(x.is_none(),+false);%0A++++%0A++++let+x:+Option%3Cu32%3E+=+None;%0A++++assert_eq!(x.is_none(),+true);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_ref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.48.0\">1.0.0 (const: 1.48.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#684\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code>&amp;Option&lt;T&gt;</code> to <code>Option&lt;&amp;T&gt;</code>.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<p>Calculates the length of an <code>Option&lt;<a href=\"../../std/string/struct.String.html\" title=\"String\">String</a>&gt;</code> as an <code>Option&lt;<a href=\"../primitive.usize.html\" title=\"primitive usize\">usize</a>&gt;</code>\nwithout moving the <a href=\"../../std/string/struct.String.html\" title=\"String\"><code>String</code></a>. The <a href=\"enum.Option.html#method.map\" title=\"method std::option::Option::map\"><code>map</code></a> method takes the <code>self</code> argument by value,\nconsuming the original, so this technique uses <code>as_ref</code> to first take an <code>Option</code> to a\nreference to the value inside the original.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>text: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"Hello, world!\"</span>.to_string());\n<span class=\"comment\">// First, cast `Option&lt;String&gt;` to `Option&lt;&amp;String&gt;` with `as_ref`,\n// then consume *that* with `map`, leaving `text` on the stack.\n</span><span class=\"kw\">let </span>text_length: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = text.as_ref().map(|s| s.len());\n<span class=\"macro\">println!</span>(<span class=\"string\">\"still can print text: {text:?}\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+text:+Option%3CString%3E+=+Some(%22Hello,+world!%22.to_string());%0A++++//+First,+cast+%60Option%3CString%3E%60+to+%60Option%3C%26String%3E%60+with+%60as_ref%60,%0A++++//+then+consume+*that*+with+%60map%60,+leaving+%60text%60+on+the+stack.%0A++++let+text_length:+Option%3Cusize%3E+=+text.as_ref().map(%7Cs%7C+s.len());%0A++++println!(%22still+can+print+text:+%7Btext:?%7D%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#706\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code>&amp;mut Option&lt;T&gt;</code> to <code>Option&lt;&amp;mut T&gt;</code>.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">match </span>x.as_mut() {\n    <span class=\"prelude-val\">Some</span>(v) =&gt; <span class=\"kw-2\">*</span>v = <span class=\"number\">42</span>,\n    <span class=\"prelude-val\">None </span>=&gt; {},\n}\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">42</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+x+=+Some(2);%0A++++match+x.as_mut()+%7B%0A++++++++Some(v)+=%3E+*v+=+42,%0A++++++++None+=%3E+%7B%7D,%0A++++%7D%0A++++assert_eq!(x,+Some(42));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_pin_ref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0, const unstable\">1.33.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/91930\" title=\"Tracking issue for const_option_ext\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#720\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.as_pin_ref\" class=\"fn\">as_pin_ref</a>(self: <a class=\"struct\" href=\"../pin/struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;&amp;<a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;&gt;) -&gt; <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"../pin/struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code><a href=\"../pin/struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;<a href=\"../primitive.reference.html\" title=\"shared reference\">&amp;</a>Option&lt;T&gt;&gt;</code> to <code>Option&lt;<a href=\"../pin/struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;<a href=\"../primitive.reference.html\" title=\"shared reference\">&amp;</a>T&gt;&gt;</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_pin_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0, const unstable\">1.33.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/91930\" title=\"Tracking issue for const_option_ext\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#736\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.as_pin_mut\" class=\"fn\">as_pin_mut</a>(self: <a class=\"struct\" href=\"../pin/struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;&gt;) -&gt; <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"../pin/struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code><a href=\"../pin/struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;<a href=\"../primitive.reference.html\" title=\"mutable reference\">&amp;mut</a> Option&lt;T&gt;&gt;</code> to <code>Option&lt;<a href=\"../pin/struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;<a href=\"../primitive.reference.html\" title=\"mutable reference\">&amp;mut</a> T&gt;&gt;</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_slice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0\">1.75.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#774\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.as_slice\" class=\"fn\">as_slice</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Returns a slice of the contained value, if any. If this is <code>None</code>, an\nempty slice is returned. This can be useful to have a single type of\niterator over an <code>Option</code> or slice.</p>\n<p>Note: Should you have an <code>Option&lt;&amp;T&gt;</code> and wish to get a slice of <code>T</code>,\nyou can unpack it via <code>opt.map_or(&amp;[], std::slice::from_ref)</code>.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(\n    [<span class=\"prelude-val\">Some</span>(<span class=\"number\">1234</span>).as_slice(), <span class=\"prelude-val\">None</span>.as_slice()],\n    [<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1234</span>][..], <span class=\"kw-2\">&amp;</span>[][..]],\n);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(%0A++++++++%5BSome(1234).as_slice(),+None.as_slice()%5D,%0A++++++++%5B%26%5B1234%5D%5B..%5D,+%26%5B%5D%5B..%5D%5D,%0A++++);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>The inverse of this function is (discounting\nborrowing) <a href=\"../primitive.slice.html#method.first\" title=\"method slice::first\"><code>[_]::first</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">for </span>i <span class=\"kw\">in </span>[<span class=\"prelude-val\">Some</span>(<span class=\"number\">1234_u16</span>), <span class=\"prelude-val\">None</span>] {\n    <span class=\"macro\">assert_eq!</span>(i.as_ref(), i.as_slice().first());\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++for+i+in+%5BSome(1234_u16),+None%5D+%7B%0A++++++++assert_eq!(i.as_ref(),+i.as_slice().first());%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_mut_slice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0\">1.75.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#828\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.as_mut_slice\" class=\"fn\">as_mut_slice</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Returns a mutable slice of the contained value, if any. If this is\n<code>None</code>, an empty slice is returned. This can be useful to have a\nsingle type of iterator over an <code>Option</code> or slice.</p>\n<p>Note: Should you have an <code>Option&lt;&amp;mut T&gt;</code> instead of a\n<code>&amp;mut Option&lt;T&gt;</code>, which this method takes, you can obtain a mutable\nslice via <code>opt.map_or(&amp;mut [], std::slice::from_mut)</code>.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(\n    [<span class=\"prelude-val\">Some</span>(<span class=\"number\">1234</span>).as_mut_slice(), <span class=\"prelude-val\">None</span>.as_mut_slice()],\n    [<span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">1234</span>][..], <span class=\"kw-2\">&amp;mut </span>[][..]],\n);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(%0A++++++++%5BSome(1234).as_mut_slice(),+None.as_mut_slice()%5D,%0A++++++++%5B%26mut+%5B1234%5D%5B..%5D,+%26mut+%5B%5D%5B..%5D%5D,%0A++++);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>The result is a mutable slice of zero or one items that points into\nour original <code>Option</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">1234</span>);\nx.as_mut_slice()[<span class=\"number\">0</span>] += <span class=\"number\">1</span>;\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">1235</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+x+=+Some(1234);%0A++++x.as_mut_slice()%5B0%5D+%2B=+1;%0A++++assert_eq!(x,+Some(1235));%0A%7D&amp;edition=2021\">Run</a></div>\n<p>The inverse of this method (discounting borrowing)\nis <a href=\"../primitive.slice.html#method.first_mut\" title=\"method slice::first_mut\"><code>[_]::first_mut</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">123</span>).as_mut_slice().first_mut(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;mut </span><span class=\"number\">123</span>))</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(Some(123).as_mut_slice().first_mut(),+Some(%26mut+123))%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.expect\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#895\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.expect\" class=\"fn\">expect</a>(self, msg: &amp;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"enum.Option.html#variant.Some\" title=\"variant std::option::Option::Some\"><code>Some</code></a> value, consuming the <code>self</code> value.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the value is a <a href=\"enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a> with a custom panic message provided by\n<code>msg</code>.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"value\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.expect(<span class=\"string\">\"fruits are healthy\"</span>), <span class=\"string\">\"value\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+Some(%22value%22);%0A++++assert_eq!(x.expect(%22fruits+are+healthy%22),+%22value%22);%0A%7D&amp;edition=2021\">Run</a></div>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\nx.expect(<span class=\"string\">\"fruits are healthy\"</span>); <span class=\"comment\">// panics with `fruits are healthy`</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x:+Option%3C%26str%3E+=+None;%0A++++x.expect(%22fruits+are+healthy%22);+//+panics+with+%60fruits+are+healthy%60%0A%7D&amp;edition=2021\">Run</a></div>\n<h5 id=\"recommended-message-style\"><a class=\"doc-anchor\" href=\"#recommended-message-style\">§</a>Recommended Message Style</h5>\n<p>We recommend that <code>expect</code> messages are used to describe the reason you\n<em>expect</em> the <code>Option</code> should be <code>Some</code>.</p>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>item = slice.get(<span class=\"number\">0</span>)\n    .expect(<span class=\"string\">\"slice should not be empty\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+slice:+%26%5Bu8%5D+=+%26%5B%5D;%0A++++let+item+=+slice.get(0)%0A++++++++.expect(%22slice+should+not+be+empty%22);%0A%7D&amp;edition=2021\">Run</a></div>\n<p><strong>Hint</strong>: If you’re having trouble remembering how to phrase expect\nerror messages remember to focus on the word “should” as in “env\nvariable should be set by blah” or “the given binary should be available\nand executable by the current user”.</p>\n<p>For more detail on expect message styles and the reasoning behind our\nrecommendation please refer to the section on <a href=\"../../std/error/index.html#common-message-styles\">“Common Message\nStyles”</a> in the <a href=\"../../std/error/index.html\"><code>std::error</code></a> module docs.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.unwrap\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#932\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.unwrap\" class=\"fn\">unwrap</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"enum.Option.html#variant.Some\" title=\"variant std::option::Option::Some\"><code>Some</code></a> value, consuming the <code>self</code> value.</p>\n<p>Because this function may panic, its use is generally discouraged.\nInstead, prefer to use pattern matching and handle the <a href=\"enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a>\ncase explicitly, or call <a href=\"enum.Option.html#method.unwrap_or\" title=\"method std::option::Option::unwrap_or\"><code>unwrap_or</code></a>, <a href=\"enum.Option.html#method.unwrap_or_else\" title=\"method std::option::Option::unwrap_or_else\"><code>unwrap_or_else</code></a>, or\n<a href=\"enum.Option.html#method.unwrap_or_default\" title=\"method std::option::Option::unwrap_or_default\"><code>unwrap_or_default</code></a>.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if the self value equals <a href=\"enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"air\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.unwrap(), <span class=\"string\">\"air\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+Some(%22air%22);%0A++++assert_eq!(x.unwrap(),+%22air%22);%0A%7D&amp;edition=2021\">Run</a></div>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.unwrap(), <span class=\"string\">\"air\"</span>); <span class=\"comment\">// fails</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x:+Option%3C%26str%3E+=+None;%0A++++assert_eq!(x.unwrap(),+%22air%22);+//+fails%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.unwrap_or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#955\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.unwrap_or\" class=\"fn\">unwrap_or</a>(self, default: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"enum.Option.html#variant.Some\" title=\"variant std::option::Option::Some\"><code>Some</code></a> value or a provided default.</p>\n<p>Arguments passed to <code>unwrap_or</code> are eagerly evaluated; if you are passing\nthe result of a function call, it is recommended to use <a href=\"enum.Option.html#method.unwrap_or_else\" title=\"method std::option::Option::unwrap_or_else\"><code>unwrap_or_else</code></a>,\nwhich is lazily evaluated.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"car\"</span>).unwrap_or(<span class=\"string\">\"bike\"</span>), <span class=\"string\">\"car\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.unwrap_or(<span class=\"string\">\"bike\"</span>), <span class=\"string\">\"bike\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(Some(%22car%22).unwrap_or(%22bike%22),+%22car%22);%0A++++assert_eq!(None.unwrap_or(%22bike%22),+%22bike%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.unwrap_or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#974-976\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.unwrap_or_else\" class=\"fn\">unwrap_or_else</a>&lt;F&gt;(self, f: F) -&gt; T<div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnOnce.html\" title=\"trait std::ops::FnOnce\">FnOnce</a>() -&gt; T,</div></h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"enum.Option.html#variant.Some\" title=\"variant std::option::Option::Some\"><code>Some</code></a> value or computes it from a closure.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>k = <span class=\"number\">10</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>).unwrap_or_else(|| <span class=\"number\">2 </span>* k), <span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.unwrap_or_else(|| <span class=\"number\">2 </span>* k), <span class=\"number\">20</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+k+=+10;%0A++++assert_eq!(Some(4).unwrap_or_else(%7C%7C+2+*+k),+4);%0A++++assert_eq!(None.unwrap_or_else(%7C%7C+2+*+k),+20);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.unwrap_or_default\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#1005-1007\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.unwrap_or_default\" class=\"fn\">unwrap_or_default</a>(self) -&gt; T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../default/trait.Default.html\" title=\"trait std::default::Default\">Default</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"enum.Option.html#variant.Some\" title=\"variant std::option::Option::Some\"><code>Some</code></a> value or a default.</p>\n<p>Consumes the <code>self</code> argument then, if <a href=\"enum.Option.html#variant.Some\" title=\"variant std::option::Option::Some\"><code>Some</code></a>, returns the contained\nvalue, otherwise if <a href=\"enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a>, returns the <a href=\"../default/trait.Default.html#tymethod.default\" title=\"associated function std::default::Default::default\">default value</a> for that\ntype.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">12</span>);\n\n<span class=\"macro\">assert_eq!</span>(x.unwrap_or_default(), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(y.unwrap_or_default(), <span class=\"number\">12</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x:+Option%3Cu32%3E+=+None;%0A++++let+y:+Option%3Cu32%3E+=+Some(12);%0A++++%0A++++assert_eq!(x.unwrap_or_default(),+0);%0A++++assert_eq!(y.unwrap_or_default(),+12);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.unwrap_unchecked\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.58.0, const unstable\">1.58.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/91930\" title=\"Tracking issue for const_option_ext\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#1039\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.unwrap_unchecked\" class=\"fn\">unwrap_unchecked</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"enum.Option.html#variant.Some\" title=\"variant std::option::Option::Some\"><code>Some</code></a> value, consuming the <code>self</code> value,\nwithout checking that the value is not <a href=\"enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>Calling this method on <a href=\"enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a> is <em><a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">undefined behavior</a></em>.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"air\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw\">unsafe </span>{ x.unwrap_unchecked() }, <span class=\"string\">\"air\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+Some(%22air%22);%0A++++assert_eq!(unsafe+%7B+x.unwrap_unchecked()+%7D,+%22air%22);%0A%7D&amp;edition=2021\">Run</a></div>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw\">unsafe </span>{ x.unwrap_unchecked() }, <span class=\"string\">\"air\"</span>); <span class=\"comment\">// Undefined behavior!</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x:+Option%3C%26str%3E+=+None;%0A++++assert_eq!(unsafe+%7B+x.unwrap_unchecked()+%7D,+%22air%22);+//+Undefined+behavior!%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.map\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#1070-1072\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.map\" class=\"fn\">map</a>&lt;U, F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;U&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnOnce.html\" title=\"trait std::ops::FnOnce\">FnOnce</a>(T) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Maps an <code>Option&lt;T&gt;</code> to <code>Option&lt;U&gt;</code> by applying a function to a contained value (if <code>Some</code>) or returns <code>None</code> (if <code>None</code>).</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<p>Calculates the length of an <code>Option&lt;<a href=\"../../std/string/struct.String.html\" title=\"String\">String</a>&gt;</code> as an\n<code>Option&lt;<a href=\"../primitive.usize.html\" title=\"primitive usize\">usize</a>&gt;</code>, consuming the original:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>maybe_some_string = <span class=\"prelude-val\">Some</span>(String::from(<span class=\"string\">\"Hello, World!\"</span>));\n<span class=\"comment\">// `Option::map` takes self *by value*, consuming `maybe_some_string`\n</span><span class=\"kw\">let </span>maybe_some_len = maybe_some_string.map(|s| s.len());\n<span class=\"macro\">assert_eq!</span>(maybe_some_len, <span class=\"prelude-val\">Some</span>(<span class=\"number\">13</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.map(|s| s.len()), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+maybe_some_string+=+Some(String::from(%22Hello,+World!%22));%0A++++//+%60Option::map%60+takes+self+*by+value*,+consuming+%60maybe_some_string%60%0A++++let+maybe_some_len+=+maybe_some_string.map(%7Cs%7C+s.len());%0A++++assert_eq!(maybe_some_len,+Some(13));%0A++++%0A++++let+x:+Option%3C%26str%3E+=+None;%0A++++assert_eq!(x.map(%7Cs%7C+s.len()),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.inspect\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.76.0\">1.76.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#1100\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.inspect\" class=\"fn\">inspect</a>&lt;F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnOnce.html\" title=\"trait std::ops::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>),</div></h4></section></summary><div class=\"docblock\"><p>Calls a function with a reference to the contained value if <a href=\"enum.Option.html#variant.Some\" title=\"variant std::option::Option::Some\"><code>Some</code></a>.</p>\n<p>Returns the original option.</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>list = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n\n<span class=\"comment\">// prints \"got: 2\"\n</span><span class=\"kw\">let </span>x = list\n    .get(<span class=\"number\">1</span>)\n    .inspect(|x| <span class=\"macro\">println!</span>(<span class=\"string\">\"got: {x}\"</span>))\n    .expect(<span class=\"string\">\"list should be long enough\"</span>);\n\n<span class=\"comment\">// prints nothing\n</span>list.get(<span class=\"number\">5</span>).inspect(|x| <span class=\"macro\">println!</span>(<span class=\"string\">\"got: {x}\"</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+list+=+vec!%5B1,+2,+3%5D;%0A++++%0A++++//+prints+%22got:+2%22%0A++++let+x+=+list%0A++++++++.get(1)%0A++++++++.inspect(%7Cx%7C+println!(%22got:+%7Bx%7D%22))%0A++++++++.expect(%22list+should+be+long+enough%22);%0A++++%0A++++//+prints+nothing%0A++++list.get(5).inspect(%7Cx%7C+println!(%22got:+%7Bx%7D%22));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.map_or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#1129-1131\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.map_or\" class=\"fn\">map_or</a>&lt;U, F&gt;(self, default: U, f: F) -&gt; U<div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnOnce.html\" title=\"trait std::ops::FnOnce\">FnOnce</a>(T) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Returns the provided default result (if none),\nor applies a function to the contained value (if any).</p>\n<p>Arguments passed to <code>map_or</code> are eagerly evaluated; if you are passing\nthe result of a function call, it is recommended to use <a href=\"enum.Option.html#method.map_or_else\" title=\"method std::option::Option::map_or_else\"><code>map_or_else</code></a>,\nwhich is lazily evaluated.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.map_or(<span class=\"number\">42</span>, |v| v.len()), <span class=\"number\">3</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.map_or(<span class=\"number\">42</span>, |v| v.len()), <span class=\"number\">42</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+Some(%22foo%22);%0A++++assert_eq!(x.map_or(42,+%7Cv%7C+v.len()),+3);%0A++++%0A++++let+x:+Option%3C%26str%3E+=+None;%0A++++assert_eq!(x.map_or(42,+%7Cv%7C+v.len()),+42);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.map_or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#1174-1177\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.map_or_else\" class=\"fn\">map_or_else</a>&lt;U, D, F&gt;(self, default: D, f: F) -&gt; U<div class=\"where\">where\n    D: <a class=\"trait\" href=\"../ops/trait.FnOnce.html\" title=\"trait std::ops::FnOnce\">FnOnce</a>() -&gt; U,\n    F: <a class=\"trait\" href=\"../ops/trait.FnOnce.html\" title=\"trait std::ops::FnOnce\">FnOnce</a>(T) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Computes a default function result (if none), or\napplies a different function to the contained value (if any).</p>\n<h5 id=\"basic-examples\"><a class=\"doc-anchor\" href=\"#basic-examples\">§</a>Basic examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>k = <span class=\"number\">21</span>;\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.map_or_else(|| <span class=\"number\">2 </span>* k, |v| v.len()), <span class=\"number\">3</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.map_or_else(|| <span class=\"number\">2 </span>* k, |v| v.len()), <span class=\"number\">42</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+k+=+21;%0A++++%0A++++let+x+=+Some(%22foo%22);%0A++++assert_eq!(x.map_or_else(%7C%7C+2+*+k,+%7Cv%7C+v.len()),+3);%0A++++%0A++++let+x:+Option%3C%26str%3E+=+None;%0A++++assert_eq!(x.map_or_else(%7C%7C+2+*+k,+%7Cv%7C+v.len()),+42);%0A%7D&amp;edition=2021\">Run</a></div>\n<h5 id=\"handling-a-result-based-fallback\"><a class=\"doc-anchor\" href=\"#handling-a-result-based-fallback\">§</a>Handling a Result-based fallback</h5>\n<p>A somewhat common occurrence when dealing with optional values\nin combination with <a href=\"../result/enum.Result.html\" title=\"enum std::result::Result\"><code>Result&lt;T, E&gt;</code></a> is the case where one wants to invoke\na fallible fallback if the option is not present.  This example\nparses a command line argument (if present), or the contents of a file to\nan integer.  However, unlike accessing the command line argument, reading\nthe file is fallible, so it must be wrapped with <code>Ok</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v: u64 = std::env::args()\n   .nth(<span class=\"number\">1</span>)\n   .map_or_else(|| std::fs::read_to_string(<span class=\"string\">\"/etc/someconfig.conf\"</span>), <span class=\"prelude-val\">Ok</span>)<span class=\"question-mark\">?\n   </span>.parse()<span class=\"question-mark\">?</span>;</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+-%3E+Result%3C(),+Box%3Cdyn+std::error::Error%3E%3E+%7B%0Alet+v:+u64+=+std::env::args()%0A+++.nth(1)%0A+++.map_or_else(%7C%7C+std::fs::read_to_string(%22/etc/someconfig.conf%22),+Ok)?%0A+++.parse()?;%0A++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ok_or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#1208\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.ok_or\" class=\"fn\">ok_or</a>&lt;E&gt;(self, err: E) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, E&gt;</h4></section></summary><div class=\"docblock\"><p>Transforms the <code>Option&lt;T&gt;</code> into a <a href=\"../result/enum.Result.html\" title=\"enum std::result::Result\"><code>Result&lt;T, E&gt;</code></a>, mapping <a href=\"enum.Option.html#variant.Some\" title=\"variant std::option::Option::Some\"><code>Some(v)</code></a> to\n<a href=\"../result/enum.Result.html#variant.Ok\" title=\"variant std::result::Result::Ok\"><code>Ok(v)</code></a> and <a href=\"enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a> to <a href=\"../result/enum.Result.html#variant.Err\" title=\"variant std::result::Result::Err\"><code>Err(err)</code></a>.</p>\n<p>Arguments passed to <code>ok_or</code> are eagerly evaluated; if you are passing the\nresult of a function call, it is recommended to use <a href=\"enum.Option.html#method.ok_or_else\" title=\"method std::option::Option::ok_or_else\"><code>ok_or_else</code></a>, which is\nlazily evaluated.</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.ok_or(<span class=\"number\">0</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"string\">\"foo\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.ok_or(<span class=\"number\">0</span>), <span class=\"prelude-val\">Err</span>(<span class=\"number\">0</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+Some(%22foo%22);%0A++++assert_eq!(x.ok_or(0),+Ok(%22foo%22));%0A++++%0A++++let+x:+Option%3C%26str%3E+=+None;%0A++++assert_eq!(x.ok_or(0),+Err(0));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ok_or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#1233-1235\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.ok_or_else\" class=\"fn\">ok_or_else</a>&lt;E, F&gt;(self, err: F) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, E&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnOnce.html\" title=\"trait std::ops::FnOnce\">FnOnce</a>() -&gt; E,</div></h4></section></summary><div class=\"docblock\"><p>Transforms the <code>Option&lt;T&gt;</code> into a <a href=\"../result/enum.Result.html\" title=\"enum std::result::Result\"><code>Result&lt;T, E&gt;</code></a>, mapping <a href=\"enum.Option.html#variant.Some\" title=\"variant std::option::Option::Some\"><code>Some(v)</code></a> to\n<a href=\"../result/enum.Result.html#variant.Ok\" title=\"variant std::result::Result::Ok\"><code>Ok(v)</code></a> and <a href=\"enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a> to <a href=\"../result/enum.Result.html#variant.Err\" title=\"variant std::result::Result::Err\"><code>Err(err())</code></a>.</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.ok_or_else(|| <span class=\"number\">0</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"string\">\"foo\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.ok_or_else(|| <span class=\"number\">0</span>), <span class=\"prelude-val\">Err</span>(<span class=\"number\">0</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+Some(%22foo%22);%0A++++assert_eq!(x.ok_or_else(%7C%7C+0),+Ok(%22foo%22));%0A++++%0A++++let+x:+Option%3C%26str%3E+=+None;%0A++++assert_eq!(x.ok_or_else(%7C%7C+0),+Err(0));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_deref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.40.0\">1.40.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#1259-1261\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.as_deref\" class=\"fn\">as_deref</a>(&amp;self) -&gt; <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;&lt;T as <a class=\"trait\" href=\"../ops/trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Deref.html#associatedtype.Target\" title=\"type std::ops::Deref::Target\">Target</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../ops/trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a>,</div></h4></section></summary><div class=\"docblock\"><p>Converts from <code>Option&lt;T&gt;</code> (or <code>&amp;Option&lt;T&gt;</code>) to <code>Option&lt;&amp;T::Target&gt;</code>.</p>\n<p>Leaves the original Option in-place, creating a new one with a reference\nto the original one, additionally coercing the contents via <a href=\"../ops/trait.Deref.html\" title=\"trait std::ops::Deref\"><code>Deref</code></a>.</p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hey\"</span>.to_owned());\n<span class=\"macro\">assert_eq!</span>(x.as_deref(), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hey\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.as_deref(), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x:+Option%3CString%3E+=+Some(%22hey%22.to_owned());%0A++++assert_eq!(x.as_deref(),+Some(%22hey%22));%0A++++%0A++++let+x:+Option%3CString%3E+=+None;%0A++++assert_eq!(x.as_deref(),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_deref_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.40.0\">1.40.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#1285-1287\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.as_deref_mut\" class=\"fn\">as_deref_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;mut &lt;T as <a class=\"trait\" href=\"../ops/trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Deref.html#associatedtype.Target\" title=\"type std::ops::Deref::Target\">Target</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../ops/trait.DerefMut.html\" title=\"trait std::ops::DerefMut\">DerefMut</a>,</div></h4></section></summary><div class=\"docblock\"><p>Converts from <code>Option&lt;T&gt;</code> (or <code>&amp;mut Option&lt;T&gt;</code>) to <code>Option&lt;&amp;mut T::Target&gt;</code>.</p>\n<p>Leaves the original <code>Option</code> in-place, creating a new one containing a mutable reference to\nthe inner type’s <a href=\"../ops/trait.Deref.html#associatedtype.Target\" title=\"associated type std::ops::Deref::Target\"><code>Deref::Target</code></a> type.</p>\n<h5 id=\"examples-19\"><a class=\"doc-anchor\" href=\"#examples-19\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hey\"</span>.to_owned());\n<span class=\"macro\">assert_eq!</span>(x.as_deref_mut().map(|x| {\n    x.make_ascii_uppercase();\n    x\n}), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"HEY\"</span>.to_owned().as_mut_str()));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+x:+Option%3CString%3E+=+Some(%22hey%22.to_owned());%0A++++assert_eq!(x.as_deref_mut().map(%7Cx%7C+%7B%0A++++++++x.make_ascii_uppercase();%0A++++++++x%0A++++%7D),+Some(%22HEY%22.to_owned().as_mut_str()));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.iter\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#1313\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.iter\" class=\"fn\">iter</a>(&amp;self) -&gt; <a class=\"struct\" href=\"struct.Iter.html\" title=\"struct std::option::Iter\">Iter</a>&lt;'_, T&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Iter<'_, T>\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns an iterator over the possibly contained value.</p>\n<h5 id=\"examples-20\"><a class=\"doc-anchor\" href=\"#examples-20\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(x.iter().next(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">4</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.iter().next(), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+Some(4);%0A++++assert_eq!(x.iter().next(),+Some(%264));%0A++++%0A++++let+x:+Option%3Cu32%3E+=+None;%0A++++assert_eq!(x.iter().next(),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.iter_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#1334\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.iter_mut\" class=\"fn\">iter_mut</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"struct.IterMut.html\" title=\"struct std::option::IterMut\">IterMut</a>&lt;'_, T&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"IterMut<'_, T>\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns a mutable iterator over the possibly contained value.</p>\n<h5 id=\"examples-21\"><a class=\"doc-anchor\" href=\"#examples-21\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>);\n<span class=\"kw\">match </span>x.iter_mut().next() {\n    <span class=\"prelude-val\">Some</span>(v) =&gt; <span class=\"kw-2\">*</span>v = <span class=\"number\">42</span>,\n    <span class=\"prelude-val\">None </span>=&gt; {},\n}\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">42</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.iter_mut().next(), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+x+=+Some(4);%0A++++match+x.iter_mut().next()+%7B%0A++++++++Some(v)+=%3E+*v+=+42,%0A++++++++None+=%3E+%7B%7D,%0A++++%7D%0A++++assert_eq!(x,+Some(42));%0A++++%0A++++let+mut+x:+Option%3Cu32%3E+=+None;%0A++++assert_eq!(x.iter_mut().next(),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.and\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#1371\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.and\" class=\"fn\">and</a>&lt;U&gt;(self, optb: <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;U&gt;) -&gt; <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;U&gt;</h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a> if the option is <a href=\"enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a>, otherwise returns <code>optb</code>.</p>\n<p>Arguments passed to <code>and</code> are eagerly evaluated; if you are passing the\nresult of a function call, it is recommended to use <a href=\"enum.Option.html#method.and_then\" title=\"method std::option::Option::and_then\"><code>and_then</code></a>, which is\nlazily evaluated.</p>\n<h5 id=\"examples-22\"><a class=\"doc-anchor\" href=\"#examples-22\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+Some(2);%0A++++let+y:+Option%3C%26str%3E+=+None;%0A++++assert_eq!(x.and(y),+None);%0A++++%0A++++let+x:+Option%3Cu32%3E+=+None;%0A++++let+y+=+Some(%22foo%22);%0A++++assert_eq!(x.and(y),+None);%0A++++%0A++++let+x+=+Some(2);%0A++++let+y+=+Some(%22foo%22);%0A++++assert_eq!(x.and(y),+Some(%22foo%22));%0A++++%0A++++let+x:+Option%3Cu32%3E+=+None;%0A++++let+y:+Option%3C%26str%3E+=+None;%0A++++assert_eq!(x.and(y),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.and_then\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#1410-1412\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.and_then\" class=\"fn\">and_then</a>&lt;U, F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;U&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnOnce.html\" title=\"trait std::ops::FnOnce\">FnOnce</a>(T) -&gt; <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;U&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a> if the option is <a href=\"enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a>, otherwise calls <code>f</code> with the\nwrapped value and returns the result.</p>\n<p>Some languages call this operation flatmap.</p>\n<h5 id=\"examples-23\"><a class=\"doc-anchor\" href=\"#examples-23\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>sq_then_to_string(x: u32) -&gt; <span class=\"prelude-ty\">Option</span>&lt;String&gt; {\n    x.checked_mul(x).map(|sq| sq.to_string())\n}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>).and_then(sq_then_to_string), <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>.to_string()));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">1_000_000</span>).and_then(sq_then_to_string), <span class=\"prelude-val\">None</span>); <span class=\"comment\">// overflowed!\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.and_then(sq_then_to_string), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++fn+sq_then_to_string(x:+u32)+-%3E+Option%3CString%3E+%7B%0A++++++++x.checked_mul(x).map(%7Csq%7C+sq.to_string())%0A++++%7D%0A++++%0A++++assert_eq!(Some(2).and_then(sq_then_to_string),+Some(4.to_string()));%0A++++assert_eq!(Some(1_000_000).and_then(sq_then_to_string),+None);+//+overflowed!%0A++++assert_eq!(None.and_then(sq_then_to_string),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Often used to chain fallible operations that may return <a href=\"enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>arr_2d = [[<span class=\"string\">\"A0\"</span>, <span class=\"string\">\"A1\"</span>], [<span class=\"string\">\"B0\"</span>, <span class=\"string\">\"B1\"</span>]];\n\n<span class=\"kw\">let </span>item_0_1 = arr_2d.get(<span class=\"number\">0</span>).and_then(|row| row.get(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(item_0_1, <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"string\">\"A1\"</span>));\n\n<span class=\"kw\">let </span>item_2_0 = arr_2d.get(<span class=\"number\">2</span>).and_then(|row| row.get(<span class=\"number\">0</span>));\n<span class=\"macro\">assert_eq!</span>(item_2_0, <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+arr_2d+=+%5B%5B%22A0%22,+%22A1%22%5D,+%5B%22B0%22,+%22B1%22%5D%5D;%0A++++%0A++++let+item_0_1+=+arr_2d.get(0).and_then(%7Crow%7C+row.get(1));%0A++++assert_eq!(item_0_1,+Some(%26%22A1%22));%0A++++%0A++++let+item_2_0+=+arr_2d.get(2).and_then(%7Crow%7C+row.get(0));%0A++++assert_eq!(item_2_0,+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.filter\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.27.0\">1.27.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#1446-1448\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.filter\" class=\"fn\">filter</a>&lt;P&gt;(self, predicate: P) -&gt; <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"../ops/trait.FnOnce.html\" title=\"trait std::ops::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a> if the option is <a href=\"enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a>, otherwise calls <code>predicate</code>\nwith the wrapped value and returns:</p>\n<ul>\n<li><a href=\"enum.Option.html#variant.Some\" title=\"variant std::option::Option::Some\"><code>Some(t)</code></a> if <code>predicate</code> returns <code>true</code> (where <code>t</code> is the wrapped\nvalue), and</li>\n<li><a href=\"enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a> if <code>predicate</code> returns <code>false</code>.</li>\n</ul>\n<p>This function works similar to <a href=\"../iter/trait.Iterator.html#method.filter\" title=\"method std::iter::Iterator::filter\"><code>Iterator::filter()</code></a>. You can imagine\nthe <code>Option&lt;T&gt;</code> being an iterator over one or zero elements. <code>filter()</code>\nlets you decide which elements to keep.</p>\n<h5 id=\"examples-24\"><a class=\"doc-anchor\" href=\"#examples-24\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>is_even(n: <span class=\"kw-2\">&amp;</span>i32) -&gt; bool {\n    n % <span class=\"number\">2 </span>== <span class=\"number\">0\n</span>}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.filter(is_even), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>).filter(is_even), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>).filter(is_even), <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++fn+is_even(n:+%26i32)+-%3E+bool+%7B%0A++++++++n+%25+2+==+0%0A++++%7D%0A++++%0A++++assert_eq!(None.filter(is_even),+None);%0A++++assert_eq!(Some(3).filter(is_even),+None);%0A++++assert_eq!(Some(4).filter(is_even),+Some(4));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#1487\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.or\" class=\"fn\">or</a>(self, optb: <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the option if it contains a value, otherwise returns <code>optb</code>.</p>\n<p>Arguments passed to <code>or</code> are eagerly evaluated; if you are passing the\nresult of a function call, it is recommended to use <a href=\"enum.Option.html#method.or_else\" title=\"method std::option::Option::or_else\"><code>or_else</code></a>, which is\nlazily evaluated.</p>\n<h5 id=\"examples-25\"><a class=\"doc-anchor\" href=\"#examples-25\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>));\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+Some(2);%0A++++let+y+=+None;%0A++++assert_eq!(x.or(y),+Some(2));%0A++++%0A++++let+x+=+None;%0A++++let+y+=+Some(100);%0A++++assert_eq!(x.or(y),+Some(100));%0A++++%0A++++let+x+=+Some(2);%0A++++let+y+=+Some(100);%0A++++assert_eq!(x.or(y),+Some(2));%0A++++%0A++++let+x:+Option%3Cu32%3E+=+None;%0A++++let+y+=+None;%0A++++assert_eq!(x.or(y),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#1509-1511\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.or_else\" class=\"fn\">or_else</a>&lt;F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnOnce.html\" title=\"trait std::ops::FnOnce\">FnOnce</a>() -&gt; <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns the option if it contains a value, otherwise calls <code>f</code> and\nreturns the result.</p>\n<h5 id=\"examples-26\"><a class=\"doc-anchor\" href=\"#examples-26\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>nobody() -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>str&gt; { <span class=\"prelude-val\">None </span>}\n<span class=\"kw\">fn </span>vikings() -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>str&gt; { <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"vikings\"</span>) }\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"barbarians\"</span>).or_else(vikings), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"barbarians\"</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.or_else(vikings), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"vikings\"</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.or_else(nobody), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++fn+nobody()+-%3E+Option%3C%26'static+str%3E+%7B+None+%7D%0A++++fn+vikings()+-%3E+Option%3C%26'static+str%3E+%7B+Some(%22vikings%22)+%7D%0A++++%0A++++assert_eq!(Some(%22barbarians%22).or_else(vikings),+Some(%22barbarians%22));%0A++++assert_eq!(None.or_else(vikings),+Some(%22vikings%22));%0A++++assert_eq!(None.or_else(nobody),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.xor\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0\">1.37.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#1542\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.xor\" class=\"fn\">xor</a>(self, optb: <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"enum.Option.html#variant.Some\" title=\"variant std::option::Option::Some\"><code>Some</code></a> if exactly one of <code>self</code>, <code>optb</code> is <a href=\"enum.Option.html#variant.Some\" title=\"variant std::option::Option::Some\"><code>Some</code></a>, otherwise returns <a href=\"enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"examples-27\"><a class=\"doc-anchor\" href=\"#examples-27\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+Some(2);%0A++++let+y:+Option%3Cu32%3E+=+None;%0A++++assert_eq!(x.xor(y),+Some(2));%0A++++%0A++++let+x:+Option%3Cu32%3E+=+None;%0A++++let+y+=+Some(2);%0A++++assert_eq!(x.xor(y),+Some(2));%0A++++%0A++++let+x+=+Some(2);%0A++++let+y+=+Some(2);%0A++++assert_eq!(x.xor(y),+None);%0A++++%0A++++let+x:+Option%3Cu32%3E+=+None;%0A++++let+y:+Option%3Cu32%3E+=+None;%0A++++assert_eq!(x.xor(y),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.insert\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0\">1.53.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#1576\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.insert\" class=\"fn\">insert</a>(&amp;mut self, value: T) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\"><p>Inserts <code>value</code> into the option, then returns a mutable reference to it.</p>\n<p>If the option already contains a value, the old value is dropped.</p>\n<p>See also <a href=\"enum.Option.html#method.get_or_insert\" title=\"method std::option::Option::get_or_insert\"><code>Option::get_or_insert</code></a>, which doesn’t update the value if\nthe option already contains <a href=\"enum.Option.html#variant.Some\" title=\"variant std::option::Option::Some\"><code>Some</code></a>.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>opt = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>val = opt.insert(<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>val, <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(opt.unwrap(), <span class=\"number\">1</span>);\n<span class=\"kw\">let </span>val = opt.insert(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>val, <span class=\"number\">2</span>);\n<span class=\"kw-2\">*</span>val = <span class=\"number\">3</span>;\n<span class=\"macro\">assert_eq!</span>(opt.unwrap(), <span class=\"number\">3</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+opt+=+None;%0A++++let+val+=+opt.insert(1);%0A++++assert_eq!(*val,+1);%0A++++assert_eq!(opt.unwrap(),+1);%0A++++let+val+=+opt.insert(2);%0A++++assert_eq!(*val,+2);%0A++++*val+=+3;%0A++++assert_eq!(opt.unwrap(),+3);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_or_insert\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#1605\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.get_or_insert\" class=\"fn\">get_or_insert</a>(&amp;mut self, value: T) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\"><p>Inserts <code>value</code> into the option if it is <a href=\"enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a>, then\nreturns a mutable reference to the contained value.</p>\n<p>See also <a href=\"enum.Option.html#method.insert\" title=\"method std::option::Option::insert\"><code>Option::insert</code></a>, which updates the value even if\nthe option already contains <a href=\"enum.Option.html#variant.Some\" title=\"variant std::option::Option::Some\"><code>Some</code></a>.</p>\n<h5 id=\"examples-28\"><a class=\"doc-anchor\" href=\"#examples-28\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n\n{\n    <span class=\"kw\">let </span>y: <span class=\"kw-2\">&amp;mut </span>u32 = x.get_or_insert(<span class=\"number\">5</span>);\n    <span class=\"macro\">assert_eq!</span>(y, <span class=\"kw-2\">&amp;</span><span class=\"number\">5</span>);\n\n    <span class=\"kw-2\">*</span>y = <span class=\"number\">7</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">7</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+x+=+None;%0A++++%0A++++%7B%0A++++++++let+y:+%26mut+u32+=+x.get_or_insert(5);%0A++++++++assert_eq!(y,+%265);%0A++++%0A++++++++*y+=+7;%0A++++%7D%0A++++%0A++++assert_eq!(x,+Some(7));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_or_insert_default\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#1636-1638\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.get_or_insert_default\" class=\"fn\">get_or_insert_default</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"../default/trait.Default.html\" title=\"trait std::default::Default\">Default</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>option_get_or_insert_default</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/82901\">#82901</a>)</span></div></span></summary><div class=\"docblock\"><p>Inserts the default value into the option if it is <a href=\"enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a>, then\nreturns a mutable reference to the contained value.</p>\n<h5 id=\"examples-29\"><a class=\"doc-anchor\" href=\"#examples-29\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(option_get_or_insert_default)]\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n\n{\n    <span class=\"kw\">let </span>y: <span class=\"kw-2\">&amp;mut </span>u32 = x.get_or_insert_default();\n    <span class=\"macro\">assert_eq!</span>(y, <span class=\"kw-2\">&amp;</span><span class=\"number\">0</span>);\n\n    <span class=\"kw-2\">*</span>y = <span class=\"number\">7</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">7</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(option_get_or_insert_default)%5D%0A%0Afn+main()+%7B%0A++++let+mut+x+=+None;%0A++++%0A++++%7B%0A++++++++let+y:+%26mut+u32+=+x.get_or_insert_default();%0A++++++++assert_eq!(y,+%260);%0A++++%0A++++++++*y+=+7;%0A++++%7D%0A++++%0A++++assert_eq!(x,+Some(7));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_or_insert_with\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#1662-1664\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.get_or_insert_with\" class=\"fn\">get_or_insert_with</a>&lt;F&gt;(&amp;mut self, f: F) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnOnce.html\" title=\"trait std::ops::FnOnce\">FnOnce</a>() -&gt; T,</div></h4></section></summary><div class=\"docblock\"><p>Inserts a value computed from <code>f</code> into the option if it is <a href=\"enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a>,\nthen returns a mutable reference to the contained value.</p>\n<h5 id=\"examples-30\"><a class=\"doc-anchor\" href=\"#examples-30\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n\n{\n    <span class=\"kw\">let </span>y: <span class=\"kw-2\">&amp;mut </span>u32 = x.get_or_insert_with(|| <span class=\"number\">5</span>);\n    <span class=\"macro\">assert_eq!</span>(y, <span class=\"kw-2\">&amp;</span><span class=\"number\">5</span>);\n\n    <span class=\"kw-2\">*</span>y = <span class=\"number\">7</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">7</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+x+=+None;%0A++++%0A++++%7B%0A++++++++let+y:+%26mut+u32+=+x.get_or_insert_with(%7C%7C+5);%0A++++++++assert_eq!(y,+%265);%0A++++%0A++++++++*y+=+7;%0A++++%7D%0A++++%0A++++assert_eq!(x,+Some(7));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.take\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#1697\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.take\" class=\"fn\">take</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Takes the value out of the option, leaving a <a href=\"enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a> in its place.</p>\n<h5 id=\"examples-31\"><a class=\"doc-anchor\" href=\"#examples-31\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = x.take();\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(y, <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = x.take();\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(y, <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+x+=+Some(2);%0A++++let+y+=+x.take();%0A++++assert_eq!(x,+None);%0A++++assert_eq!(y,+Some(2));%0A++++%0A++++let+mut+x:+Option%3Cu32%3E+=+None;%0A++++let+y+=+x.take();%0A++++assert_eq!(x,+None);%0A++++assert_eq!(y,+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.take_if\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0\">1.80.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#1728-1730\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.take_if\" class=\"fn\">take_if</a>&lt;P&gt;(&amp;mut self, predicate: P) -&gt; <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"../ops/trait.FnOnce.html\" title=\"trait std::ops::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Takes the value out of the option, but only if the predicate evaluates to\n<code>true</code> on a mutable reference to the value.</p>\n<p>In other words, replaces <code>self</code> with <code>None</code> if the predicate returns <code>true</code>.\nThis method operates similar to <a href=\"enum.Option.html#method.take\" title=\"method std::option::Option::take\"><code>Option::take</code></a> but conditional.</p>\n<h5 id=\"examples-32\"><a class=\"doc-anchor\" href=\"#examples-32\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">42</span>);\n\n<span class=\"kw\">let </span>prev = x.take_if(|v| <span class=\"kw\">if </span><span class=\"kw-2\">*</span>v == <span class=\"number\">42 </span>{\n    <span class=\"kw-2\">*</span>v += <span class=\"number\">1</span>;\n    <span class=\"bool-val\">false\n</span>} <span class=\"kw\">else </span>{\n    <span class=\"bool-val\">false\n</span>});\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">43</span>));\n<span class=\"macro\">assert_eq!</span>(prev, <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>prev = x.take_if(|v| <span class=\"kw-2\">*</span>v == <span class=\"number\">43</span>);\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(prev, <span class=\"prelude-val\">Some</span>(<span class=\"number\">43</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+x+=+Some(42);%0A++++%0A++++let+prev+=+x.take_if(%7Cv%7C+if+*v+==+42+%7B%0A++++++++*v+%2B=+1;%0A++++++++false%0A++++%7D+else+%7B%0A++++++++false%0A++++%7D);%0A++++assert_eq!(x,+Some(43));%0A++++assert_eq!(prev,+None);%0A++++%0A++++let+prev+=+x.take_if(%7Cv%7C+*v+==+43);%0A++++assert_eq!(x,+None);%0A++++assert_eq!(prev,+Some(43));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.replace\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.31.0, const unstable\">1.31.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#1755\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.replace\" class=\"fn\">replace</a>(&amp;mut self, value: T) -&gt; <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Replaces the actual value in the option by the value given in parameter,\nreturning the old value if present,\nleaving a <a href=\"enum.Option.html#variant.Some\" title=\"variant std::option::Option::Some\"><code>Some</code></a> in its place without deinitializing either one.</p>\n<h5 id=\"examples-33\"><a class=\"doc-anchor\" href=\"#examples-33\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>old = x.replace(<span class=\"number\">5</span>);\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">5</span>));\n<span class=\"macro\">assert_eq!</span>(old, <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>old = x.replace(<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(old, <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+x+=+Some(2);%0A++++let+old+=+x.replace(5);%0A++++assert_eq!(x,+Some(5));%0A++++assert_eq!(old,+Some(2));%0A++++%0A++++let+mut+x+=+None;%0A++++let+old+=+x.replace(3);%0A++++assert_eq!(x,+Some(3));%0A++++assert_eq!(old,+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.zip\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0\">1.46.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#1775\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.zip\" class=\"fn\">zip</a>&lt;U&gt;(self, other: <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;U&gt;) -&gt; <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../primitive.tuple.html\">(T, U)</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Zips <code>self</code> with another <code>Option</code>.</p>\n<p>If <code>self</code> is <code>Some(s)</code> and <code>other</code> is <code>Some(o)</code>, this method returns <code>Some((s, o))</code>.\nOtherwise, <code>None</code> is returned.</p>\n<h5 id=\"examples-34\"><a class=\"doc-anchor\" href=\"#examples-34\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hi\"</span>);\n<span class=\"kw\">let </span>z = <span class=\"prelude-val\">None</span>::&lt;u8&gt;;\n\n<span class=\"macro\">assert_eq!</span>(x.zip(y), <span class=\"prelude-val\">Some</span>((<span class=\"number\">1</span>, <span class=\"string\">\"hi\"</span>)));\n<span class=\"macro\">assert_eq!</span>(x.zip(z), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+Some(1);%0A++++let+y+=+Some(%22hi%22);%0A++++let+z+=+None::%3Cu8%3E;%0A++++%0A++++assert_eq!(x.zip(y),+Some((1,+%22hi%22)));%0A++++assert_eq!(x.zip(z),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.zip_with\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#1811-1813\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.zip_with\" class=\"fn\">zip_with</a>&lt;U, F, R&gt;(self, other: <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;U&gt;, f: F) -&gt; <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;R&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnOnce.html\" title=\"trait std::ops::FnOnce\">FnOnce</a>(T, U) -&gt; R,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>option_zip</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/70086\">#70086</a>)</span></div></span></summary><div class=\"docblock\"><p>Zips <code>self</code> and another <code>Option</code> with function <code>f</code>.</p>\n<p>If <code>self</code> is <code>Some(s)</code> and <code>other</code> is <code>Some(o)</code>, this method returns <code>Some(f(s, o))</code>.\nOtherwise, <code>None</code> is returned.</p>\n<h5 id=\"examples-35\"><a class=\"doc-anchor\" href=\"#examples-35\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(option_zip)]\n\n#[derive(Debug, PartialEq)]\n</span><span class=\"kw\">struct </span>Point {\n    x: f64,\n    y: f64,\n}\n\n<span class=\"kw\">impl </span>Point {\n    <span class=\"kw\">fn </span>new(x: f64, y: f64) -&gt; <span class=\"self\">Self </span>{\n        <span class=\"self\">Self </span>{ x, y }\n    }\n}\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">17.5</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">42.7</span>);\n\n<span class=\"macro\">assert_eq!</span>(x.zip_with(y, Point::new), <span class=\"prelude-val\">Some</span>(Point { x: <span class=\"number\">17.5</span>, y: <span class=\"number\">42.7 </span>}));\n<span class=\"macro\">assert_eq!</span>(x.zip_with(<span class=\"prelude-val\">None</span>, Point::new), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(option_zip)%5D%0A%0Afn+main()+%7B%0A++++%23%5Bderive(Debug,+PartialEq)%5D%0A++++struct+Point+%7B%0A++++++++x:+f64,%0A++++++++y:+f64,%0A++++%7D%0A++++%0A++++impl+Point+%7B%0A++++++++fn+new(x:+f64,+y:+f64)+-%3E+Self+%7B%0A++++++++++++Self+%7B+x,+y+%7D%0A++++++++%7D%0A++++%7D%0A++++%0A++++let+x+=+Some(17.5);%0A++++let+y+=+Some(42.7);%0A++++%0A++++assert_eq!(x.zip_with(y,+Point::new),+Some(Point+%7B+x:+17.5,+y:+42.7+%7D));%0A++++assert_eq!(x.zip_with(None,+Point::new),+None);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Option%3C(T,+U)%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#1822\">source</a><a href=\"#impl-Option%3C(T,+U)%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../primitive.tuple.html\">(T, U)</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.unzip\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0\">1.66.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#1839\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.unzip\" class=\"fn\">unzip</a>(self) -&gt; (<a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;, <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;U&gt;)</h4></section></summary><div class=\"docblock\"><p>Unzips an option containing a tuple of two options.</p>\n<p>If <code>self</code> is <code>Some((a, b))</code> this method returns <code>(Some(a), Some(b))</code>.\nOtherwise, <code>(None, None)</code> is returned.</p>\n<h5 id=\"examples-36\"><a class=\"doc-anchor\" href=\"#examples-36\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>((<span class=\"number\">1</span>, <span class=\"string\">\"hi\"</span>));\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">None</span>::&lt;(u8, u32)&gt;;\n\n<span class=\"macro\">assert_eq!</span>(x.unzip(), (<span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hi\"</span>)));\n<span class=\"macro\">assert_eq!</span>(y.unzip(), (<span class=\"prelude-val\">None</span>, <span class=\"prelude-val\">None</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+Some((1,+%22hi%22));%0A++++let+y+=+None::%3C(u8,+u32)%3E;%0A++++%0A++++assert_eq!(x.unzip(),+(Some(1),+Some(%22hi%22)));%0A++++assert_eq!(y.unzip(),+(None,+None));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Option%3C%26T%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#1847\">source</a><a href=\"#impl-Option%3C%26T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.copied\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.35.0, const unstable\">1.35.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#1863-1865\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.copied\" class=\"fn\">copied</a>(self) -&gt; <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a>,</div></h4></section></summary><div class=\"docblock\"><p>Maps an <code>Option&lt;&amp;T&gt;</code> to an <code>Option&lt;T&gt;</code> by copying the contents of the\noption.</p>\n<h5 id=\"examples-37\"><a class=\"doc-anchor\" href=\"#examples-37\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"number\">12</span>;\n<span class=\"kw\">let </span>opt_x = <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span>x);\n<span class=\"macro\">assert_eq!</span>(opt_x, <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">12</span>));\n<span class=\"kw\">let </span>copied = opt_x.copied();\n<span class=\"macro\">assert_eq!</span>(copied, <span class=\"prelude-val\">Some</span>(<span class=\"number\">12</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+12;%0A++++let+opt_x+=+Some(%26x);%0A++++assert_eq!(opt_x,+Some(%2612));%0A++++let+copied+=+opt_x.copied();%0A++++assert_eq!(copied,+Some(12));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.cloned\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#1889-1891\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.cloned\" class=\"fn\">cloned</a>(self) -&gt; <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h4></section></summary><div class=\"docblock\"><p>Maps an <code>Option&lt;&amp;T&gt;</code> to an <code>Option&lt;T&gt;</code> by cloning the contents of the\noption.</p>\n<h5 id=\"examples-38\"><a class=\"doc-anchor\" href=\"#examples-38\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"number\">12</span>;\n<span class=\"kw\">let </span>opt_x = <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span>x);\n<span class=\"macro\">assert_eq!</span>(opt_x, <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">12</span>));\n<span class=\"kw\">let </span>cloned = opt_x.cloned();\n<span class=\"macro\">assert_eq!</span>(cloned, <span class=\"prelude-val\">Some</span>(<span class=\"number\">12</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+12;%0A++++let+opt_x+=+Some(%26x);%0A++++assert_eq!(opt_x,+Some(%2612));%0A++++let+cloned+=+opt_x.cloned();%0A++++assert_eq!(cloned,+Some(12));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Option%3C%26mut+T%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#1900\">source</a><a href=\"#impl-Option%3C%26mut+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.copied-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.35.0, const unstable\">1.35.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/91930\" title=\"Tracking issue for const_option_ext\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#1916-1918\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.copied-1\" class=\"fn\">copied</a>(self) -&gt; <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a>,</div></h4></section></summary><div class=\"docblock\"><p>Maps an <code>Option&lt;&amp;mut T&gt;</code> to an <code>Option&lt;T&gt;</code> by copying the contents of the\noption.</p>\n<h5 id=\"examples-39\"><a class=\"doc-anchor\" href=\"#examples-39\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"number\">12</span>;\n<span class=\"kw\">let </span>opt_x = <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;mut </span>x);\n<span class=\"macro\">assert_eq!</span>(opt_x, <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;mut </span><span class=\"number\">12</span>));\n<span class=\"kw\">let </span>copied = opt_x.copied();\n<span class=\"macro\">assert_eq!</span>(copied, <span class=\"prelude-val\">Some</span>(<span class=\"number\">12</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+x+=+12;%0A++++let+opt_x+=+Some(%26mut+x);%0A++++assert_eq!(opt_x,+Some(%26mut+12));%0A++++let+copied+=+opt_x.copied();%0A++++assert_eq!(copied,+Some(12));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.cloned-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.26.0\">1.26.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#1940-1942\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.cloned-1\" class=\"fn\">cloned</a>(self) -&gt; <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h4></section></summary><div class=\"docblock\"><p>Maps an <code>Option&lt;&amp;mut T&gt;</code> to an <code>Option&lt;T&gt;</code> by cloning the contents of the\noption.</p>\n<h5 id=\"examples-40\"><a class=\"doc-anchor\" href=\"#examples-40\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"number\">12</span>;\n<span class=\"kw\">let </span>opt_x = <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;mut </span>x);\n<span class=\"macro\">assert_eq!</span>(opt_x, <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;mut </span><span class=\"number\">12</span>));\n<span class=\"kw\">let </span>cloned = opt_x.cloned();\n<span class=\"macro\">assert_eq!</span>(cloned, <span class=\"prelude-val\">Some</span>(<span class=\"number\">12</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+x+=+12;%0A++++let+opt_x+=+Some(%26mut+x);%0A++++assert_eq!(opt_x,+Some(%26mut+12));%0A++++let+cloned+=+opt_x.cloned();%0A++++assert_eq!(cloned,+Some(12));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Option%3CResult%3CT,+E%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#1951\">source</a><a href=\"#impl-Option%3CResult%3CT,+E%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, E&gt; <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, E&gt;&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.transpose\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0, const unstable\">1.33.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#1971\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.transpose\" class=\"fn\">transpose</a>(self) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;, E&gt;</h4></section></summary><div class=\"docblock\"><p>Transposes an <code>Option</code> of a <a href=\"../result/enum.Result.html\" title=\"enum std::result::Result\"><code>Result</code></a> into a <a href=\"../result/enum.Result.html\" title=\"enum std::result::Result\"><code>Result</code></a> of an <code>Option</code>.</p>\n<p><a href=\"enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a> will be mapped to <code><a href=\"../result/enum.Result.html#variant.Ok\" title=\"variant std::result::Result::Ok\">Ok</a>(<a href=\"enum.Option.html#variant.None\" title=\"variant std::option::Option::None\">None</a>)</code>.\n<code><a href=\"enum.Option.html#variant.Some\" title=\"variant std::option::Option::Some\">Some</a>(<a href=\"../result/enum.Result.html#variant.Ok\" title=\"variant std::result::Result::Ok\">Ok</a>(_))</code> and <code><a href=\"enum.Option.html#variant.Some\" title=\"variant std::option::Option::Some\">Some</a>(<a href=\"../result/enum.Result.html#variant.Err\" title=\"variant std::result::Result::Err\">Err</a>(_))</code> will be mapped to\n<code><a href=\"../result/enum.Result.html#variant.Ok\" title=\"variant std::result::Result::Ok\">Ok</a>(<a href=\"enum.Option.html#variant.Some\" title=\"variant std::option::Option::Some\">Some</a>(_))</code> and <code><a href=\"../result/enum.Result.html#variant.Err\" title=\"variant std::result::Result::Err\">Err</a>(_)</code>.</p>\n<h5 id=\"examples-41\"><a class=\"doc-anchor\" href=\"#examples-41\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#[derive(Debug, Eq, PartialEq)]\n</span><span class=\"kw\">struct </span>SomeErr;\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Result</span>&lt;<span class=\"prelude-ty\">Option</span>&lt;i32&gt;, SomeErr&gt; = <span class=\"prelude-val\">Ok</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">5</span>));\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"prelude-ty\">Result</span>&lt;i32, SomeErr&gt;&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"prelude-val\">Ok</span>(<span class=\"number\">5</span>));\n<span class=\"macro\">assert_eq!</span>(x, y.transpose());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++%23%5Bderive(Debug,+Eq,+PartialEq)%5D%0A++++struct+SomeErr;%0A++++%0A++++let+x:+Result%3COption%3Ci32%3E,+SomeErr%3E+=+Ok(Some(5));%0A++++let+y:+Option%3CResult%3Ci32,+SomeErr%3E%3E+=+Some(Ok(5));%0A++++assert_eq!(x,+y.transpose());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Option%3COption%3CT%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#2485\">source</a><a href=\"#impl-Option%3COption%3CT%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.flatten\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.40.0, const unstable\">1.40.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#2513\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.flatten\" class=\"fn\">flatten</a>(self) -&gt; <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code>Option&lt;Option&lt;T&gt;&gt;</code> to <code>Option&lt;T&gt;</code>.</p>\n<h5 id=\"examples-42\"><a class=\"doc-anchor\" href=\"#examples-42\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"prelude-ty\">Option</span>&lt;u32&gt;&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">6</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">6</span>), x.flatten());\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"prelude-ty\">Option</span>&lt;u32&gt;&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, x.flatten());\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"prelude-ty\">Option</span>&lt;u32&gt;&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, x.flatten());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x:+Option%3COption%3Cu32%3E%3E+=+Some(Some(6));%0A++++assert_eq!(Some(6),+x.flatten());%0A++++%0A++++let+x:+Option%3COption%3Cu32%3E%3E+=+Some(None);%0A++++assert_eq!(None,+x.flatten());%0A++++%0A++++let+x:+Option%3COption%3Cu32%3E%3E+=+None;%0A++++assert_eq!(None,+x.flatten());%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Flattening only removes one level of nesting at a time:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"prelude-ty\">Option</span>&lt;<span class=\"prelude-ty\">Option</span>&lt;u32&gt;&gt;&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"prelude-val\">Some</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">6</span>)));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">6</span>)), x.flatten());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">6</span>), x.flatten().flatten());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x:+Option%3COption%3COption%3Cu32%3E%3E%3E+=+Some(Some(Some(6)));%0A++++assert_eq!(Some(Some(6)),+x.flatten());%0A++++assert_eq!(Some(6),+x.flatten().flatten());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details></div><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">§</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Clone-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#2003-2005\">source</a></span><a href=\"#impl-Clone-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a> for <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#2008\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\">Returns a copy of the value. <a href=\"../clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#2016\">source</a><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;<a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;)</h4></section></summary><div class=\"docblock\">Performs copy-assignment from <code>source</code>. <a href=\"../clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#569\">source</a></span><a href=\"#impl-Debug-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#569\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"../fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Default-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#2025\">source</a></span><a href=\"#impl-Default-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#2035\">source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"examples-44\"><a class=\"doc-anchor\" href=\"#examples-44\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>opt: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = Option::default();\n<span class=\"macro\">assert!</span>(opt.is_none());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+opt:+Option%3Cu32%3E+=+Option::default();%0A++++assert!(opt.is_none());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%26Option%3CT%3E%3E-for-Option%3C%26T%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.30.0\">1.30.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#2101\">source</a></span><a href=\"#impl-From%3C%26Option%3CT%3E%3E-for-Option%3C%26T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;&amp;'a <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;&gt; for <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;'a T</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#2122\">source</a><a href=\"#method.from-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(o: &amp;'a <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;'a T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code>&amp;Option&lt;T&gt;</code> to <code>Option&lt;&amp;T&gt;</code>.</p>\n<h5 id=\"examples-47\"><a class=\"doc-anchor\" href=\"#examples-47\">§</a>Examples</h5>\n<p>Converts an <code><a href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a href=\"../../std/string/struct.String.html\" title=\"String\">String</a>&gt;</code> into an <code><a href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a href=\"../primitive.usize.html\" title=\"primitive usize\">usize</a>&gt;</code>, preserving\nthe original. The <a href=\"enum.Option.html#method.map\" title=\"method std::option::Option::map\"><code>map</code></a> method takes the <code>self</code> argument by value, consuming the original,\nso this technique uses <code>from</code> to first take an <a href=\"enum.Option.html\" title=\"enum std::option::Option\"><code>Option</code></a> to a reference\nto the value inside the original.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">Some</span>(String::from(<span class=\"string\">\"Hello, Rustaceans!\"</span>));\n<span class=\"kw\">let </span>o: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = Option::from(<span class=\"kw-2\">&amp;</span>s).map(|ss: <span class=\"kw-2\">&amp;</span>String| ss.len());\n\n<span class=\"macro\">println!</span>(<span class=\"string\">\"Can still print s: {s:?}\"</span>);\n\n<span class=\"macro\">assert_eq!</span>(o, <span class=\"prelude-val\">Some</span>(<span class=\"number\">18</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s:+Option%3CString%3E+=+Some(String::from(%22Hello,+Rustaceans!%22));%0A++++let+o:+Option%3Cusize%3E+=+Option::from(%26s).map(%7Css:+%26String%7C+ss.len());%0A++++%0A++++println!(%22Can+still+print+s:+%7Bs:?%7D%22);%0A++++%0A++++assert_eq!(o,+Some(18));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%26mut+Option%3CT%3E%3E-for-Option%3C%26mut+T%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.30.0\">1.30.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#2128\">source</a></span><a href=\"#impl-From%3C%26mut+Option%3CT%3E%3E-for-Option%3C%26mut+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;&amp;'a mut <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;&gt; for <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;'a mut T</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#2144\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(o: &amp;'a mut <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;'a mut T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code>&amp;mut Option&lt;T&gt;</code> to <code>Option&lt;&amp;mut T&gt;</code></p>\n<h5 id=\"examples-46\"><a class=\"doc-anchor\" href=\"#examples-46\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = <span class=\"prelude-val\">Some</span>(String::from(<span class=\"string\">\"Hello\"</span>));\n<span class=\"kw\">let </span>o: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;mut </span>String&gt; = Option::from(<span class=\"kw-2\">&amp;mut </span>s);\n\n<span class=\"kw\">match </span>o {\n    <span class=\"prelude-val\">Some</span>(t) =&gt; <span class=\"kw-2\">*</span>t = String::from(<span class=\"string\">\"Hello, Rustaceans!\"</span>),\n    <span class=\"prelude-val\">None </span>=&gt; (),\n}\n\n<span class=\"macro\">assert_eq!</span>(s, <span class=\"prelude-val\">Some</span>(String::from(<span class=\"string\">\"Hello, Rustaceans!\"</span>)));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+s+=+Some(String::from(%22Hello%22));%0A++++let+o:+Option%3C%26mut+String%3E+=+Option::from(%26mut+s);%0A++++%0A++++match+o+%7B%0A++++++++Some(t)+=%3E+*t+=+String::from(%22Hello,+Rustaceans!%22),%0A++++++++None+=%3E+(),%0A++++%7D%0A++++%0A++++assert_eq!(s,+Some(String::from(%22Hello,+Rustaceans!%22)));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CT%3E-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#2085\">source</a></span><a href=\"#impl-From%3CT%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#2095\">source</a><a href=\"#method.from-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(val: T) -&gt; <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Moves <code>val</code> into a new <a href=\"enum.Option.html#variant.Some\" title=\"variant std::option::Option::Some\"><code>Some</code></a>.</p>\n<h5 id=\"examples-48\"><a class=\"doc-anchor\" href=\"#examples-48\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>o: <span class=\"prelude-ty\">Option</span>&lt;u8&gt; = Option::from(<span class=\"number\">67</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">67</span>), o);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+o:+Option%3Cu8%3E+=+Option::from(67);%0A++++%0A++++assert_eq!(Some(67),+o);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-FromIterator%3COption%3CA%3E%3E-for-Option%3CV%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#2373\">source</a></span><a href=\"#impl-FromIterator%3COption%3CA%3E%3E-for-Option%3CV%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, V&gt; <a class=\"trait\" href=\"../iter/trait.FromIterator.html\" title=\"trait std::iter::FromIterator\">FromIterator</a>&lt;<a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;A&gt;&gt; for <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;V&gt;<div class=\"where\">where\n    V: <a class=\"trait\" href=\"../iter/trait.FromIterator.html\" title=\"trait std::iter::FromIterator\">FromIterator</a>&lt;A&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#2435\">source</a><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iter: I) -&gt; <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;V&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;A&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Takes each element in the <a href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\"><code>Iterator</code></a>: if it is <a href=\"enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a>,\nno further elements are taken, and the <a href=\"enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a> is\nreturned. Should no <a href=\"enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a> occur, a container of type\n<code>V</code> containing the values of each <a href=\"enum.Option.html\" title=\"enum std::option::Option\"><code>Option</code></a> is returned.</p>\n<h5 id=\"examples-45\"><a class=\"doc-anchor\" href=\"#examples-45\">§</a>Examples</h5>\n<p>Here is an example which increments every integer in a vector.\nWe use the checked variant of <code>add</code> that returns <code>None</code> when the\ncalculation would result in an overflow.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>items = <span class=\"macro\">vec!</span>[<span class=\"number\">0_u16</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];\n\n<span class=\"kw\">let </span>res: <span class=\"prelude-ty\">Option</span>&lt;Vec&lt;u16&gt;&gt; = items\n    .iter()\n    .map(|x| x.checked_add(<span class=\"number\">1</span>))\n    .collect();\n\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">Some</span>(<span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+items+=+vec!%5B0_u16,+1,+2%5D;%0A++++%0A++++let+res:+Option%3CVec%3Cu16%3E%3E+=+items%0A++++++++.iter()%0A++++++++.map(%7Cx%7C+x.checked_add(1))%0A++++++++.collect();%0A++++%0A++++assert_eq!(res,+Some(vec!%5B1,+2,+3%5D));%0A%7D&amp;edition=2021\">Run</a></div>\n<p>As you can see, this will return the expected, valid items.</p>\n<p>Here is another example that tries to subtract one from another list\nof integers, this time checking for underflow:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>items = <span class=\"macro\">vec!</span>[<span class=\"number\">2_u16</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>];\n\n<span class=\"kw\">let </span>res: <span class=\"prelude-ty\">Option</span>&lt;Vec&lt;u16&gt;&gt; = items\n    .iter()\n    .map(|x| x.checked_sub(<span class=\"number\">1</span>))\n    .collect();\n\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+items+=+vec!%5B2_u16,+1,+0%5D;%0A++++%0A++++let+res:+Option%3CVec%3Cu16%3E%3E+=+items%0A++++++++.iter()%0A++++++++.map(%7Cx%7C+x.checked_sub(1))%0A++++++++.collect();%0A++++%0A++++assert_eq!(res,+None);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Since the last element is zero, it would underflow. Thus, the resulting\nvalue is <code>None</code>.</p>\n<p>Here is a variation on the previous example, showing that no\nfurther elements are taken from <code>iter</code> after the first <code>None</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>items = <span class=\"macro\">vec!</span>[<span class=\"number\">3_u16</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">10</span>];\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>shared = <span class=\"number\">0</span>;\n\n<span class=\"kw\">let </span>res: <span class=\"prelude-ty\">Option</span>&lt;Vec&lt;u16&gt;&gt; = items\n    .iter()\n    .map(|x| { shared += x; x.checked_sub(<span class=\"number\">2</span>) })\n    .collect();\n\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(shared, <span class=\"number\">6</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+items+=+vec!%5B3_u16,+2,+1,+10%5D;%0A++++%0A++++let+mut+shared+=+0;%0A++++%0A++++let+res:+Option%3CVec%3Cu16%3E%3E+=+items%0A++++++++.iter()%0A++++++++.map(%7Cx%7C+%7B+shared+%2B=+x;+x.checked_sub(2)+%7D)%0A++++++++.collect();%0A++++%0A++++assert_eq!(res,+None);%0A++++assert_eq!(shared,+6);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Since the third element caused an underflow, no further elements were taken,\nso the final value of <code>shared</code> is 6 (= <code>3 + 2 + 1</code>), not 16.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-FromResidual%3CYeet%3C()%3E%3E-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#2473\">source</a><a href=\"#impl-FromResidual%3CYeet%3C()%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../ops/trait.FromResidual.html\" title=\"trait std::ops::FromResidual\">FromResidual</a>&lt;<a class=\"struct\" href=\"../ops/struct.Yeet.html\" title=\"struct std::ops::Yeet\">Yeet</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;&gt; for <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_residual-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#2475\">source</a><a href=\"#method.from_residual-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.FromResidual.html#tymethod.from_residual\" class=\"fn\">from_residual</a>(_: <a class=\"struct\" href=\"../ops/struct.Yeet.html\" title=\"struct std::ops::Yeet\">Yeet</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;) -&gt; <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/84277\">#84277</a>)</span></div></span><div class=\"docblock\">Constructs the type from a compatible <code>Residual</code> type. <a href=\"../ops/trait.FromResidual.html#tymethod.from_residual\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-FromResidual-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#2463\">source</a><a href=\"#impl-FromResidual-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../ops/trait.FromResidual.html\" title=\"trait std::ops::FromResidual\">FromResidual</a> for <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_residual\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#2465\">source</a><a href=\"#method.from_residual\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.FromResidual.html#tymethod.from_residual\" class=\"fn\">from_residual</a>(residual: <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a>&gt;) -&gt; <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/84277\">#84277</a>)</span></div></span><div class=\"docblock\">Constructs the type from a compatible <code>Residual</code> type. <a href=\"../ops/trait.FromResidual.html#tymethod.from_residual\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Hash-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#569\">source</a></span><a href=\"#impl-Hash-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#569\">source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;__H&gt;(&amp;self, state: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut __H</a>)<div class=\"where\">where\n    __H: <a class=\"trait\" href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class=\"docblock\">Feeds this value into the given <a href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"../hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#238-240\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Feeds a slice of this type into the given <a href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"../hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-IntoIterator-for-%26Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#2065\">source</a></span><a href=\"#impl-IntoIterator-for-%26Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a> for &amp;'a <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Item-2\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item-2\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../iter/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;'a T</a></h4></section></summary><div class=\"docblock\">The type of the elements being iterated over.</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.IntoIter-2\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoIter-2\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../iter/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"struct.Iter.html\" title=\"struct std::option::Iter\">Iter</a>&lt;'a, T&gt;</h4></section></summary><div class=\"docblock\">Which kind of iterator are we turning this into?</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_iter-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#2069\">source</a><a href=\"#method.into_iter-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; <a class=\"struct\" href=\"struct.Iter.html\" title=\"struct std::option::Iter\">Iter</a>&lt;'a, T&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Iter<'a, T>\">ⓘ</a></h4></section></summary><div class=\"docblock\">Creates an iterator from a value. <a href=\"../iter/trait.IntoIterator.html#tymethod.into_iter\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-IntoIterator-for-%26mut+Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#2075\">source</a></span><a href=\"#impl-IntoIterator-for-%26mut+Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a> for &amp;'a mut <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Item-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../iter/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;'a mut T</a></h4></section></summary><div class=\"docblock\">The type of the elements being iterated over.</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.IntoIter-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoIter-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../iter/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"struct.IterMut.html\" title=\"struct std::option::IterMut\">IterMut</a>&lt;'a, T&gt;</h4></section></summary><div class=\"docblock\">Which kind of iterator are we turning this into?</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_iter-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#2079\">source</a><a href=\"#method.into_iter-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; <a class=\"struct\" href=\"struct.IterMut.html\" title=\"struct std::option::IterMut\">IterMut</a>&lt;'a, T&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"IterMut<'a, T>\">ⓘ</a></h4></section></summary><div class=\"docblock\">Creates an iterator from a value. <a href=\"../iter/trait.IntoIterator.html#tymethod.into_iter\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-IntoIterator-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#2041\">source</a></span><a href=\"#impl-IntoIterator-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a> for <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#2059\">source</a><a href=\"#method.into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; <a class=\"struct\" href=\"struct.IntoIter.html\" title=\"struct std::option::IntoIter\">IntoIter</a>&lt;T&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"IntoIter<T>\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns a consuming iterator over the possibly contained value.</p>\n<h5 id=\"examples-49\"><a class=\"doc-anchor\" href=\"#examples-49\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"string\"</span>);\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = x.into_iter().collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"string\"</span>]);\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = x.into_iter().collect();\n<span class=\"macro\">assert!</span>(v.is_empty());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+Some(%22string%22);%0A++++let+v:+Vec%3C%26str%3E+=+x.into_iter().collect();%0A++++assert_eq!(v,+%5B%22string%22%5D);%0A++++%0A++++let+x+=+None;%0A++++let+v:+Vec%3C%26str%3E+=+x.into_iter().collect();%0A++++assert!(v.is_empty());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../iter/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = T</h4></section></summary><div class=\"docblock\">The type of the elements being iterated over.</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../iter/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"struct.IntoIter.html\" title=\"struct std::option::IntoIter\">IntoIter</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\">Which kind of iterator are we turning this into?</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Ord-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#2186\">source</a></span><a href=\"#impl-Ord-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#2188\">source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a></h4></section></summary><div class=\"docblock\">This method returns an <a href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"../cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#856-858\">source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Compares and returns the maximum of two values. <a href=\"../cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#877-879\">source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Compares and returns the minimum of two values. <a href=\"../cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#903-906\">source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>,</div></h4></section></summary><div class=\"docblock\">Restrict a value to a certain interval. <a href=\"../cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#2155\">source</a></span><a href=\"#impl-PartialEq-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a> for <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#2157\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialOrd-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#2173\">source</a></span><a href=\"#impl-PartialOrd-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a> for <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#2175\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\">This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"../cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180\">source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"../cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198\">source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"../cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215\">source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"../cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233\">source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"../cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Product%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0\">1.37.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/accum.rs.html#244-246\">source</a></span><a href=\"#impl-Product%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../iter/trait.Product.html\" title=\"trait std::iter::Product\">Product</a>&lt;<a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;U&gt;&gt; for <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../iter/trait.Product.html\" title=\"trait std::iter::Product\">Product</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.product\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/accum.rs.html#265-267\">source</a><a href=\"#method.product\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Product.html#tymethod.product\" class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;U&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Takes each element in the <a href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\"><code>Iterator</code></a>: if it is a <a href=\"enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a>, no further\nelements are taken, and the <a href=\"enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a> is returned. Should no <a href=\"enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a>\noccur, the product of all elements is returned.</p>\n<h5 id=\"examples-43\"><a class=\"doc-anchor\" href=\"#examples-43\">§</a>Examples</h5>\n<p>This multiplies each number in a vector of strings,\nif a string could not be parsed the operation returns <code>None</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>nums = <span class=\"macro\">vec!</span>[<span class=\"string\">\"5\"</span>, <span class=\"string\">\"10\"</span>, <span class=\"string\">\"1\"</span>, <span class=\"string\">\"2\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = nums.iter().map(|w| w.parse::&lt;usize&gt;().ok()).product();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>));\n<span class=\"kw\">let </span>nums = <span class=\"macro\">vec!</span>[<span class=\"string\">\"5\"</span>, <span class=\"string\">\"10\"</span>, <span class=\"string\">\"one\"</span>, <span class=\"string\">\"2\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = nums.iter().map(|w| w.parse::&lt;usize&gt;().ok()).product();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+nums+=+vec!%5B%225%22,+%2210%22,+%221%22,+%222%22%5D;%0A++++let+total:+Option%3Cusize%3E+=+nums.iter().map(%7Cw%7C+w.parse::%3Cusize%3E().ok()).product();%0A++++assert_eq!(total,+Some(100));%0A++++let+nums+=+vec!%5B%225%22,+%2210%22,+%22one%22,+%222%22%5D;%0A++++let+total:+Option%3Cusize%3E+=+nums.iter().map(%7Cw%7C+w.parse::%3Cusize%3E().ok()).product();%0A++++assert_eq!(total,+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Residual%3CT%3E-for-Option%3CInfallible%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#2481\">source</a><a href=\"#impl-Residual%3CT%3E-for-Option%3CInfallible%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../ops/trait.Residual.html\" title=\"trait std::ops::Residual\">Residual</a>&lt;T&gt; for <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.TryType\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.TryType\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Residual.html#associatedtype.TryType\" class=\"associatedtype\">TryType</a> = <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2_residual</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/91285\">#91285</a>)</span></div></span><div class=\"docblock\">The “return” type of this meta-function.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Sum%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0\">1.37.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/accum.rs.html#214-216\">source</a></span><a href=\"#impl-Sum%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../iter/trait.Sum.html\" title=\"trait std::iter::Sum\">Sum</a>&lt;<a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;U&gt;&gt; for <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../iter/trait.Sum.html\" title=\"trait std::iter::Sum\">Sum</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sum\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/accum.rs.html#235-237\">source</a><a href=\"#method.sum\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Sum.html#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;U&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Takes each element in the <a href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\"><code>Iterator</code></a>: if it is a <a href=\"enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a>, no further\nelements are taken, and the <a href=\"enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a> is returned. Should no <a href=\"enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a>\noccur, the sum of all elements is returned.</p>\n<h5 id=\"examples-50\"><a class=\"doc-anchor\" href=\"#examples-50\">§</a>Examples</h5>\n<p>This sums up the position of the character ‘a’ in a vector of strings,\nif a word did not have the character ‘a’ the operation returns <code>None</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>words = <span class=\"macro\">vec!</span>[<span class=\"string\">\"have\"</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"great\"</span>, <span class=\"string\">\"day\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = words.iter().map(|w| w.find(<span class=\"string\">'a'</span>)).sum();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">Some</span>(<span class=\"number\">5</span>));\n<span class=\"kw\">let </span>words = <span class=\"macro\">vec!</span>[<span class=\"string\">\"have\"</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"good\"</span>, <span class=\"string\">\"day\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = words.iter().map(|w| w.find(<span class=\"string\">'a'</span>)).sum();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+words+=+vec!%5B%22have%22,+%22a%22,+%22great%22,+%22day%22%5D;%0A++++let+total:+Option%3Cusize%3E+=+words.iter().map(%7Cw%7C+w.find('a')).sum();%0A++++assert_eq!(total,+Some(5));%0A++++let+words+=+vec!%5B%22have%22,+%22a%22,+%22good%22,+%22day%22%5D;%0A++++let+total:+Option%3Cusize%3E+=+words.iter().map(%7Cw%7C+w.find('a')).sum();%0A++++assert_eq!(total,+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Try-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#2444\">source</a><a href=\"#impl-Try-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../ops/trait.Try.html\" title=\"trait std::ops::Try\">Try</a> for <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Try.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = T</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/84277\">#84277</a>)</span></div></span><div class=\"docblock\">The type of the value produced by <code>?</code> when <em>not</em> short-circuiting.</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Residual\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Residual\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Try.html#associatedtype.Residual\" class=\"associatedtype\">Residual</a> = <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/84277\">#84277</a>)</span></div></span><div class=\"docblock\">The type of the value passed to <a href=\"../ops/trait.FromResidual.html#tymethod.from_residual\" title=\"associated function std::ops::FromResidual::from_residual\"><code>FromResidual::from_residual</code></a>\nas part of <code>?</code> when short-circuiting. <a href=\"../ops/trait.Try.html#associatedtype.Residual\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_output\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#2449\">source</a><a href=\"#method.from_output\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Try.html#tymethod.from_output\" class=\"fn\">from_output</a>(output: &lt;<a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt; as <a class=\"trait\" href=\"../ops/trait.Try.html\" title=\"trait std::ops::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Try.html#associatedtype.Output\" title=\"type std::ops::Try::Output\">Output</a>) -&gt; <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/84277\">#84277</a>)</span></div></span><div class=\"docblock\">Constructs the type from its <code>Output</code> type. <a href=\"../ops/trait.Try.html#tymethod.from_output\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.branch\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#2454\">source</a><a href=\"#method.branch\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Try.html#tymethod.branch\" class=\"fn\">branch</a>(\n    self,\n) -&gt; <a class=\"enum\" href=\"../ops/enum.ControlFlow.html\" title=\"enum std::ops::ControlFlow\">ControlFlow</a>&lt;&lt;<a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt; as <a class=\"trait\" href=\"../ops/trait.Try.html\" title=\"trait std::ops::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Try.html#associatedtype.Residual\" title=\"type std::ops::Try::Residual\">Residual</a>, &lt;<a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt; as <a class=\"trait\" href=\"../ops/trait.Try.html\" title=\"trait std::ops::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Try.html#associatedtype.Output\" title=\"type std::ops::Try::Output\">Output</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/84277\">#84277</a>)</span></div></span><div class=\"docblock\">Used in <code>?</code> to decide whether the operator should produce a value\n(because this returned <a href=\"../ops/enum.ControlFlow.html#variant.Continue\" title=\"variant std::ops::ControlFlow::Continue\"><code>ControlFlow::Continue</code></a>)\nor propagate a value back to the caller\n(because this returned <a href=\"../ops/enum.ControlFlow.html#variant.Break\" title=\"variant std::ops::ControlFlow::Break\"><code>ControlFlow::Break</code></a>). <a href=\"../ops/trait.Try.html#tymethod.branch\">Read more</a></div></details></div></details><section id=\"impl-Copy-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#569\">source</a></span><a href=\"#impl-Copy-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a> for <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a>,</div></h3></section><section id=\"impl-Eq-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#569\">source</a></span><a href=\"#impl-Eq-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> for <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a>,</div></h3></section><section id=\"impl-StructuralPartialEq-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#2153\">source</a></span><a href=\"#impl-StructuralPartialEq-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../marker/trait.StructuralPartialEq.html\" title=\"trait std::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;</h3></section></div><h2 id=\"synthetic-implementations\" class=\"section-header\">Auto Trait Implementations<a href=\"#synthetic-implementations\" class=\"anchor\">§</a></h2><div id=\"synthetic-implementations-list\"><section id=\"impl-Freeze-for-Option%3CT%3E\" class=\"impl\"><a href=\"#impl-Freeze-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a>,</div></h3></section><section id=\"impl-RefUnwindSafe-for-Option%3CT%3E\" class=\"impl\"><a href=\"#impl-RefUnwindSafe-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a>,</div></h3></section><section id=\"impl-Send-for-Option%3CT%3E\" class=\"impl\"><a href=\"#impl-Send-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a>,</div></h3></section><section id=\"impl-Sync-for-Option%3CT%3E\" class=\"impl\"><a href=\"#impl-Sync-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a>,</div></h3></section><section id=\"impl-Unpin-for-Option%3CT%3E\" class=\"impl\"><a href=\"#impl-Unpin-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a>,</div></h3></section><section id=\"impl-UnwindSafe-for-Option%3CT%3E\" class=\"impl\"><a href=\"#impl-UnwindSafe-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"enum\" href=\"enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a>,</div></h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">§</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Any-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a><a href=\"#impl-Any-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#141\">source</a><a href=\"#method.type_id\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../any/trait.Any.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\">Gets the <code>TypeId</code> of <code>self</code>. <a href=\"../any/trait.Any.html#tymethod.type_id\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Borrow%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208\">source</a><a href=\"#impl-Borrow%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#210\">source</a><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216\">source</a><a href=\"#impl-BorrowMut%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#217\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3C!%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#782\">source</a><a href=\"#impl-From%3C!%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"../primitive.never.html\">!</a>&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#783\">source</a><a href=\"#method.from-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: <a class=\"primitive\" href=\"../primitive.never.html\">!</a>) -&gt; T</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765\">source</a><a href=\"#impl-From%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768\">source</a><a href=\"#method.from-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the argument unchanged.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Into%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750\">source</a><a href=\"#impl-Into%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758\">source</a><a href=\"#method.into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; U</h4></section></summary><div class=\"docblock\"><p>Calls <code>U::from(self)</code>.</p>\n<p>That is, this conversion is whatever the implementation of\n<code><a href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for U</code> chooses to do.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-ToOwned-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85\">source</a><a href=\"#impl-ToOwned-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.ToOwned.html\" title=\"trait std::borrow::ToOwned\">ToOwned</a> for T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Owned\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Owned\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../borrow/trait.ToOwned.html#associatedtype.Owned\" class=\"associatedtype\">Owned</a> = T</h4></section></summary><div class=\"docblock\">The resulting type after obtaining ownership.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_owned\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88\">source</a><a href=\"#method.to_owned\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.ToOwned.html#tymethod.to_owned\" class=\"fn\">to_owned</a>(&amp;self) -&gt; T</h4></section></summary><div class=\"docblock\">Creates owned data from borrowed data, usually by cloning. <a href=\"../borrow/trait.ToOwned.html#tymethod.to_owned\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92\">source</a><a href=\"#method.clone_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.ToOwned.html#method.clone_into\" class=\"fn\">clone_into</a>(&amp;self, target: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>)</h4></section></summary><div class=\"docblock\">Uses borrowed data to replace owned data, usually by cloning. <a href=\"../borrow/trait.ToOwned.html#method.clone_into\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryFrom%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807\">source</a><a href=\"#impl-TryFrom%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812\">source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: U) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, &lt;T as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryInto%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792\">source</a><a href=\"#impl-TryInto%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryInto.html\" title=\"trait std::convert::TryInto\">TryInto</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryInto.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797\">source</a><a href=\"#method.try_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryInto.html#tymethod.try_into\" class=\"fn\">try_into</a>(self) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;U, &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details></div><script type=\"text/json\" id=\"notable-traits-data\">{\"IntoIter<T>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"struct.IntoIter.html\\\" title=\\\"struct std::option::IntoIter\\\">IntoIter</a>&lt;A&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;A&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"struct.IntoIter.html\\\" title=\\\"struct std::option::IntoIter\\\">IntoIter</a>&lt;A&gt;</div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = A;</div>\",\"Iter<'_, T>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"struct.Iter.html\\\" title=\\\"struct std::option::Iter\\\">Iter</a>&lt;'a, A&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a, A&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"struct.Iter.html\\\" title=\\\"struct std::option::Iter\\\">Iter</a>&lt;'a, A&gt;</div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = <a class=\\\"primitive\\\" href=\\\"../primitive.reference.html\\\">&amp;'a A</a>;</div>\",\"Iter<'a, T>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"struct.Iter.html\\\" title=\\\"struct std::option::Iter\\\">Iter</a>&lt;'a, A&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a, A&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"struct.Iter.html\\\" title=\\\"struct std::option::Iter\\\">Iter</a>&lt;'a, A&gt;</div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = <a class=\\\"primitive\\\" href=\\\"../primitive.reference.html\\\">&amp;'a A</a>;</div>\",\"IterMut<'_, T>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"struct.IterMut.html\\\" title=\\\"struct std::option::IterMut\\\">IterMut</a>&lt;'a, A&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a, A&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"struct.IterMut.html\\\" title=\\\"struct std::option::IterMut\\\">IterMut</a>&lt;'a, A&gt;</div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = <a class=\\\"primitive\\\" href=\\\"../primitive.reference.html\\\">&amp;'a mut A</a>;</div>\",\"IterMut<'a, T>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"struct.IterMut.html\\\" title=\\\"struct std::option::IterMut\\\">IterMut</a>&lt;'a, A&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a, A&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"struct.IterMut.html\\\" title=\\\"struct std::option::IterMut\\\">IterMut</a>&lt;'a, A&gt;</div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = <a class=\\\"primitive\\\" href=\\\"../primitive.reference.html\\\">&amp;'a mut A</a>;</div>\"}</script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:09:11.434Z"
}