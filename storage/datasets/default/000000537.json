{
	"title": "std::str::pattern - Rust",
	"url": "https://doc.rust-lang.org/stable/std/str/pattern/index.html",
	"markdown": "# std::str::pattern - Rust\n\nðŸ”¬This is a nightly-only experimental API. (`pattern`Â [#27721](https://github.com/rust-lang/rust/issues/27721))\n\nExpand description\n\nThe string Pattern API.\n\nThe Pattern API provides a generic mechanism for using different pattern types when searching through a string.\n\nFor more details, see the traits [`Pattern`](trait.Pattern.html \"trait std::str::pattern::Pattern\"), [`Searcher`](trait.Searcher.html \"trait std::str::pattern::Searcher\"), [`ReverseSearcher`](trait.ReverseSearcher.html \"trait std::str::pattern::ReverseSearcher\"), and [`DoubleEndedSearcher`](trait.DoubleEndedSearcher.html \"trait std::str::pattern::DoubleEndedSearcher\").\n\nAlthough this API is unstable, it is exposed via stable APIs on the [`str`](../../primitive.str.html \"primitive str\") type.\n\n## [Â§](#examples)Examples\n\n[`Pattern`](trait.Pattern.html \"trait std::str::pattern::Pattern\") is [implemented](about:blank/trait.Pattern.html#implementors \"trait std::str::pattern::Pattern\") in the stable API for [`&str`](../../primitive.str.html \"primitive str\"), [`char`](../../primitive.char.html \"primitive char\"), slices of [`char`](../../primitive.char.html \"primitive char\"), and functions and closures implementing `FnMut(char) -> bool`.\n\n```\nlet s = \"Can you find a needle in a haystack?\";\n\n// &str pattern\nassert_eq!(s.find(\"you\"), Some(4));\n// char pattern\nassert_eq!(s.find('n'), Some(2));\n// array of chars pattern\nassert_eq!(s.find(&['a', 'e', 'i', 'o', 'u']), Some(1));\n// slice of chars pattern\nassert_eq!(s.find(&['a', 'e', 'i', 'o', 'u'][..]), Some(1));\n// closure pattern\nassert_eq!(s.find(|c: char| c.is_ascii_punctuation()), Some(35));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s+=+%22Can+you+find+a+needle+in+a+haystack?%22;%0A++++%0A++++//+%26str+pattern%0A++++assert_eq!(s.find(%22you%22),+Some(4));%0A++++//+char+pattern%0A++++assert_eq!(s.find(%27n%27),+Some(2));%0A++++//+array+of+chars+pattern%0A++++assert_eq!(s.find(%26%5B%27a%27,+%27e%27,+%27i%27,+%27o%27,+%27u%27%5D),+Some(1));%0A++++//+slice+of+chars+pattern%0A++++assert_eq!(s.find(%26%5B%27a%27,+%27e%27,+%27i%27,+%27o%27,+%27u%27%5D%5B..%5D),+Some(1));%0A++++//+closure+pattern%0A++++assert_eq!(s.find(%7Cc:+char%7C+c.is_ascii_punctuation()),+Some(35));%0A%7D&edition=2021)\n\n-   Associated type for `<&[char; N] as Pattern<'a>>::Searcher`.\n    \n-   Associated type for `<[char; N] as Pattern<'a>>::Searcher`.\n    \n-   Associated type for `<F as Pattern<'a>>::Searcher`.\n    \n-   Associated type for `<char as Pattern<'a>>::Searcher`.\n    \n-   Associated type for `<&[char] as Pattern<'a>>::Searcher`.\n    \n-   Associated type for `<&str as Pattern<'a>>::Searcher`.\n    \n\n-   A string pattern.\n    \n-   A reverse searcher for a string pattern.\n    \n-   A searcher for a string pattern.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"The string Pattern API.\"><title>std::str::pattern - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../../\" data-static-root-path=\"../../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"../sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc mod\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">Module pattern</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">Module pattern</a></h2><div class=\"sidebar-elems\"><section><ul class=\"block\"><li><a href=\"#structs\">Structs</a></li><li><a href=\"#enums\">Enums</a></li><li><a href=\"#traits\">Traits</a></li></ul></section><h2><a href=\"../index.html\">In std::str</a></h2><h3><a href=\"../index.html#modules\">Modules</a></h3><ul class=\"block mod\"><li><a href=\"../pattern/index.html\">pattern</a></li></ul><h3><a href=\"../index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"../struct.Bytes.html\">Bytes</a></li><li><a href=\"../struct.CharIndices.html\">CharIndices</a></li><li><a href=\"../struct.Chars.html\">Chars</a></li><li><a href=\"../struct.EncodeUtf16.html\">EncodeUtf16</a></li><li><a href=\"../struct.EscapeDebug.html\">EscapeDebug</a></li><li><a href=\"../struct.EscapeDefault.html\">EscapeDefault</a></li><li><a href=\"../struct.EscapeUnicode.html\">EscapeUnicode</a></li><li><a href=\"../struct.Lines.html\">Lines</a></li><li><a href=\"../struct.LinesAny.html\">LinesAny</a></li><li><a href=\"../struct.MatchIndices.html\">MatchIndices</a></li><li><a href=\"../struct.Matches.html\">Matches</a></li><li><a href=\"../struct.ParseBoolError.html\">ParseBoolError</a></li><li><a href=\"../struct.RMatchIndices.html\">RMatchIndices</a></li><li><a href=\"../struct.RMatches.html\">RMatches</a></li><li><a href=\"../struct.RSplit.html\">RSplit</a></li><li><a href=\"../struct.RSplitN.html\">RSplitN</a></li><li><a href=\"../struct.RSplitTerminator.html\">RSplitTerminator</a></li><li><a href=\"../struct.Split.html\">Split</a></li><li><a href=\"../struct.SplitAsciiWhitespace.html\">SplitAsciiWhitespace</a></li><li><a href=\"../struct.SplitInclusive.html\">SplitInclusive</a></li><li><a href=\"../struct.SplitN.html\">SplitN</a></li><li><a href=\"../struct.SplitTerminator.html\">SplitTerminator</a></li><li><a href=\"../struct.SplitWhitespace.html\">SplitWhitespace</a></li><li><a href=\"../struct.Utf8Chunk.html\">Utf8Chunk</a></li><li><a href=\"../struct.Utf8Chunks.html\">Utf8Chunks</a></li><li><a href=\"../struct.Utf8Error.html\">Utf8Error</a></li></ul><h3><a href=\"../index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"../trait.FromStr.html\">FromStr</a></li></ul><h3><a href=\"../index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"../fn.from_boxed_utf8_unchecked.html\">from_boxed_utf8_unchecked</a></li><li><a href=\"../fn.from_raw_parts.html\">from_raw_parts</a></li><li><a href=\"../fn.from_raw_parts_mut.html\">from_raw_parts_mut</a></li><li><a href=\"../fn.from_utf8.html\">from_utf8</a></li><li><a href=\"../fn.from_utf8_mut.html\">from_utf8_mut</a></li><li><a href=\"../fn.from_utf8_unchecked.html\">from_utf8_unchecked</a></li><li><a href=\"../fn.from_utf8_unchecked_mut.html\">from_utf8_unchecked_mut</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type â€˜Sâ€™ or â€˜/â€™ to search, â€˜?â€™ for more optionsâ€¦\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Module <a href=\"../../index.html\">std</a>::<wbr><a href=\"../index.html\">str</a>::<wbr><a class=\"mod\" href=\"#\">pattern</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/mod.rs.html#24\">source</a> Â· <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>âˆ’</span>]</button></span></div><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>pattern</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/27721\">#27721</a>)</span></div></span><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>The string Pattern API.</p>\n<p>The Pattern API provides a generic mechanism for using different pattern\ntypes when searching through a string.</p>\n<p>For more details, see the traits <a href=\"trait.Pattern.html\" title=\"trait std::str::pattern::Pattern\"><code>Pattern</code></a>, <a href=\"trait.Searcher.html\" title=\"trait std::str::pattern::Searcher\"><code>Searcher</code></a>,\n<a href=\"trait.ReverseSearcher.html\" title=\"trait std::str::pattern::ReverseSearcher\"><code>ReverseSearcher</code></a>, and <a href=\"trait.DoubleEndedSearcher.html\" title=\"trait std::str::pattern::DoubleEndedSearcher\"><code>DoubleEndedSearcher</code></a>.</p>\n<p>Although this API is unstable, it is exposed via stable APIs on the\n<a href=\"../../primitive.str.html\" title=\"primitive str\"><code>str</code></a> type.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">Â§</a>Examples</h2>\n<p><a href=\"trait.Pattern.html\" title=\"trait std::str::pattern::Pattern\"><code>Pattern</code></a> is <a href=\"trait.Pattern.html#implementors\" title=\"trait std::str::pattern::Pattern\">implemented</a> in the stable API for\n<a href=\"../../primitive.str.html\" title=\"primitive str\"><code>&amp;str</code></a>, <a href=\"../../primitive.char.html\" title=\"primitive char\"><code>char</code></a>, slices of <a href=\"../../primitive.char.html\" title=\"primitive char\"><code>char</code></a>, and functions and closures\nimplementing <code>FnMut(char) -&gt; bool</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">\"Can you find a needle in a haystack?\"</span>;\n\n<span class=\"comment\">// &amp;str pattern\n</span><span class=\"macro\">assert_eq!</span>(s.find(<span class=\"string\">\"you\"</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>));\n<span class=\"comment\">// char pattern\n</span><span class=\"macro\">assert_eq!</span>(s.find(<span class=\"string\">'n'</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n<span class=\"comment\">// array of chars pattern\n</span><span class=\"macro\">assert_eq!</span>(s.find(<span class=\"kw-2\">&amp;</span>[<span class=\"string\">'a'</span>, <span class=\"string\">'e'</span>, <span class=\"string\">'i'</span>, <span class=\"string\">'o'</span>, <span class=\"string\">'u'</span>]), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));\n<span class=\"comment\">// slice of chars pattern\n</span><span class=\"macro\">assert_eq!</span>(s.find(<span class=\"kw-2\">&amp;</span>[<span class=\"string\">'a'</span>, <span class=\"string\">'e'</span>, <span class=\"string\">'i'</span>, <span class=\"string\">'o'</span>, <span class=\"string\">'u'</span>][..]), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));\n<span class=\"comment\">// closure pattern\n</span><span class=\"macro\">assert_eq!</span>(s.find(|c: char| c.is_ascii_punctuation()), <span class=\"prelude-val\">Some</span>(<span class=\"number\">35</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s+=+%22Can+you+find+a+needle+in+a+haystack?%22;%0A++++%0A++++//+%26str+pattern%0A++++assert_eq!(s.find(%22you%22),+Some(4));%0A++++//+char+pattern%0A++++assert_eq!(s.find('n'),+Some(2));%0A++++//+array+of+chars+pattern%0A++++assert_eq!(s.find(%26%5B'a',+'e',+'i',+'o',+'u'%5D),+Some(1));%0A++++//+slice+of+chars+pattern%0A++++assert_eq!(s.find(%26%5B'a',+'e',+'i',+'o',+'u'%5D%5B..%5D),+Some(1));%0A++++//+closure+pattern%0A++++assert_eq!(s.find(%7Cc:+char%7C+c.is_ascii_punctuation()),+Some(35));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><h2 id=\"structs\" class=\"section-header\">Structs<a href=\"#structs\" class=\"anchor\">Â§</a></h2><ul class=\"item-table\"><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.CharArrayRefSearcher.html\" title=\"struct std::str::pattern::CharArrayRefSearcher\">CharArrayRefSearcher</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Associated type for <code>&lt;&amp;[char; N] as Pattern&lt;'a&gt;&gt;::Searcher</code>.</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.CharArraySearcher.html\" title=\"struct std::str::pattern::CharArraySearcher\">CharArraySearcher</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Associated type for <code>&lt;[char; N] as Pattern&lt;'a&gt;&gt;::Searcher</code>.</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.CharPredicateSearcher.html\" title=\"struct std::str::pattern::CharPredicateSearcher\">CharPredicateSearcher</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Associated type for <code>&lt;F as Pattern&lt;'a&gt;&gt;::Searcher</code>.</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.CharSearcher.html\" title=\"struct std::str::pattern::CharSearcher\">CharSearcher</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Associated type for <code>&lt;char as Pattern&lt;'a&gt;&gt;::Searcher</code>.</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.CharSliceSearcher.html\" title=\"struct std::str::pattern::CharSliceSearcher\">CharSliceSearcher</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Associated type for <code>&lt;&amp;[char] as Pattern&lt;'a&gt;&gt;::Searcher</code>.</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.StrSearcher.html\" title=\"struct std::str::pattern::StrSearcher\">StrSearcher</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Associated type for <code>&lt;&amp;str as Pattern&lt;'a&gt;&gt;::Searcher</code>.</div></li></ul><h2 id=\"enums\" class=\"section-header\">Enums<a href=\"#enums\" class=\"anchor\">Â§</a></h2><ul class=\"item-table\"><li><div class=\"item-name\"><a class=\"enum\" href=\"enum.SearchStep.html\" title=\"enum std::str::pattern::SearchStep\">SearchStep</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Result of calling <a href=\"trait.Searcher.html#tymethod.next\" title=\"method std::str::pattern::Searcher::next\"><code>Searcher::next()</code></a> or <a href=\"trait.ReverseSearcher.html#tymethod.next_back\" title=\"method std::str::pattern::ReverseSearcher::next_back\"><code>ReverseSearcher::next_back()</code></a>.</div></li></ul><h2 id=\"traits\" class=\"section-header\">Traits<a href=\"#traits\" class=\"anchor\">Â§</a></h2><ul class=\"item-table\"><li><div class=\"item-name\"><a class=\"trait\" href=\"trait.DoubleEndedSearcher.html\" title=\"trait std::str::pattern::DoubleEndedSearcher\">DoubleEndedSearcher</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">A marker trait to express that a <a href=\"trait.ReverseSearcher.html\" title=\"trait std::str::pattern::ReverseSearcher\"><code>ReverseSearcher</code></a>\ncan be used for a <a href=\"../../iter/trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\"><code>DoubleEndedIterator</code></a> implementation.</div></li><li><div class=\"item-name\"><a class=\"trait\" href=\"trait.Pattern.html\" title=\"trait std::str::pattern::Pattern\">Pattern</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">A string pattern.</div></li><li><div class=\"item-name\"><a class=\"trait\" href=\"trait.ReverseSearcher.html\" title=\"trait std::str::pattern::ReverseSearcher\">ReverseSearcher</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">A reverse searcher for a string pattern.</div></li><li><div class=\"item-name\"><a class=\"trait\" href=\"trait.Searcher.html\" title=\"trait std::str::pattern::Searcher\">Searcher</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">A searcher for a string pattern.</div></li></ul></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:12:08.797Z"
}