{
	"title": "Block expressions - The Rust Reference",
	"url": "https://doc.rust-lang.org/stable/reference/expressions/block-expr.html",
	"markdown": "# Block expressions - The Rust Reference\n\n> **Syntax**  \n> _BlockExpression_ :  \n>    `{`  \n>       [_InnerAttribute_](../attributes.html)\\*  \n>       _Statements_?  \n>    `}`\n> \n> _Statements_ :  \n>       [_Statement_](../statements.html)+  \n>    | [_Statement_](../statements.html)+ [_ExpressionWithoutBlock_](../expressions.html)  \n>    | [_ExpressionWithoutBlock_](../expressions.html)\n\nA _block expression_, or _block_, is a control flow expression and anonymous namespace scope for items and variable declarations. As a control flow expression, a block sequentially executes its component non-item declaration statements and then its final optional expression. As an anonymous namespace scope, item declarations are only in scope inside the block itself and variables declared by `let` statements are in scope from the next statement until the end of the block. See the [scopes](../names/scopes.html) chapter for more details.\n\nThe syntax for a block is `{`, then any [inner attributes](../attributes.html), then any number of [statements](../statements.html), then an optional expression, called the final operand, and finally a `}`.\n\nStatements are usually required to be followed by a semicolon, with two exceptions:\n\n1.  Item declaration statements do not need to be followed by a semicolon.\n2.  Expression statements usually require a following semicolon except if its outer expression is a flow control expression.\n\nFurthermore, extra semicolons between statements are allowed, but these semicolons do not affect semantics.\n\nWhen evaluating a block expression, each statement, except for item declaration statements, is executed sequentially. Then the final operand is executed, if given.\n\nThe type of a block is the type of the final operand, or `()` if the final operand is omitted.\n\n```rust\n#![allow(unused)]\nfn main() {\nfn fn_call() {}\nlet _: () = {\n    fn_call();\n};\n\nlet five: i32 = {\n    fn_call();\n    5\n};\n\nassert_eq!(5, five);\n}\n```\n\n> Note: As a control flow expression, if a block expression is the outer expression of an expression statement, the expected type is `()` unless it is followed immediately by a semicolon.\n\nBlocks are always [value expressions](about:blank/expressions.html#place-expressions-and-value-expressions) and evaluate the last operand in value expression context.\n\n> **Note**: This can be used to force moving a value if really needed. For example, the following example fails on the call to `consume_self` because the struct was moved out of `s` in the block expression.\n> \n> ```rust\n> #![allow(unused)]\n> fn main() {\n> struct Struct;\n> \n> impl Struct {\n>     fn consume_self(self) {}\n>     fn borrow_self(&self) {}\n> }\n> \n> fn move_by_block_expression() {\n>     let s = Struct;\n> \n>     // Move the value out of `s` in the block expression.\n>     (&{ s }).borrow_self();\n> \n>     // Fails to execute because `s` is moved out of.\n>     s.consume_self();\n> }\n> }\n> ```\n\n## [`async` blocks](#async-blocks)\n\n> **Syntax**  \n> _AsyncBlockExpression_ :  \n>    `async` `move`? _BlockExpression_\n\nAn _async block_ is a variant of a block expression which evaluates to a future. The final expression of the block, if present, determines the result value of the future.\n\nExecuting an async block is similar to executing a closure expression: its immediate effect is to produce and return an anonymous type. Whereas closures return a type that implements one or more of the [`std::ops::Fn`](../../std/ops/trait.Fn.html) traits, however, the type returned for an async block implements the [`std::future::Future`](../../std/future/trait.Future.html) trait. The actual data format for this type is unspecified.\n\n> **Note:** The future type that rustc generates is roughly equivalent to an enum with one variant per `await` point, where each variant stores the data needed to resume from its corresponding point.\n\n> **Edition differences**: Async blocks are only available beginning with Rust 2018.\n\n### [Capture modes](#capture-modes)\n\nAsync blocks capture variables from their environment using the same [capture modes](about:blank/types/closure.html#capture-modes) as closures. Like closures, when written `async { .. }` the capture mode for each variable will be inferred from the content of the block. `async move { .. }` blocks however will move all referenced variables into the resulting future.\n\n### [Async context](#async-context)\n\nBecause async blocks construct a future, they define an **async context** which can in turn contain [`await` expressions](await-expr.html). Async contexts are established by async blocks as well as the bodies of async functions, whose semantics are defined in terms of async blocks.\n\n### [Control-flow operators](#control-flow-operators)\n\nAsync blocks act like a function boundary, much like closures. Therefore, the `?` operator and `return` expressions both affect the output of the future, not the enclosing function or other context. That is, `return <expr>` from within an async block will return the result of `<expr>` as the output of the future. Similarly, if `<expr>?` propagates an error, that error is propagated as the result of the future.\n\nFinally, the `break` and `continue` keywords cannot be used to branch out from an async block. Therefore the following is illegal:\n\n```rust\n#![allow(unused)]\nfn main() {\nloop {\n    async move {\n        break; // error[E0267]: `break` inside of an `async` block\n    }\n}\n}\n```\n\n## [`const` blocks](#const-blocks)\n\n> **Syntax**  \n> _ConstBlockExpression_ :  \n>    `const` _BlockExpression_\n\nA _const block_ is a variant of a block expression whose body evaluates at compile-time instead of at runtime.\n\nConst blocks allows you to define a constant value without having to define new [constant items](../items/constant-items.html), and thus they are also sometimes referred as _inline consts_. It also supports type inference so there is no need to specify the type, unlike [constant items](../items/constant-items.html).\n\nConst blocks have the ability to reference generic parameters in scope, unlike [free](about:blank/glossary.html#free-item) constant items. They are desugared to constant items with generic parameters in scope (similar to associated constants, but without a trait or type they are associated with). For example, this code:\n\n```rust\n#![allow(unused)]\nfn main() {\nfn foo<T>() -> usize {\n    const { std::mem::size_of::<T>() + 1 }\n}\n}\n```\n\nis equivalent to:\n\n```rust\n#![allow(unused)]\nfn main() {\nfn foo<T>() -> usize {\n    {\n        struct Const<T>(T);\n        impl<T> Const<T> {\n            const CONST: usize = std::mem::size_of::<T>() + 1;\n        }\n        Const::<T>::CONST\n    }\n}\n}\n```\n\nIf the const block expression is executed at runtime, then the constant is guaranteed to be evaluated, even if its return value is ignored:\n\n```rust\n#![allow(unused)]\nfn main() {\nfn foo<T>() -> usize {\n    // If this code ever gets executed, then the assertion has definitely\n    // been evaluated at compile-time.\n    const { assert!(std::mem::size_of::<T>() > 0); }\n    // Here we can have unsafe code relying on the type being non-zero-sized.\n    /* ... */\n    42\n}\n}\n```\n\nIf the const block expression is not executed at runtime, it may or may not be evaluated:\n\n```rust\n#![allow(unused)]\nfn main() {\nif false {\n    // The panic may or may not occur when the program is built.\n    const { panic!(); }\n}\n}\n```\n\n## [`unsafe` blocks](#unsafe-blocks)\n\n> **Syntax**  \n> _UnsafeBlockExpression_ :  \n>    `unsafe` _BlockExpression_\n\n_See [`unsafe` block](../unsafe-blocks.html) for more information on when to use `unsafe`_\n\nA block of code can be prefixed with the `unsafe` keyword to permit [unsafe operations](../unsafety.html). Examples:\n\n```rust\n#![allow(unused)]\nfn main() {\nunsafe {\n    let b = [13u8, 17u8];\n    let a = &b[0] as *const u8;\n    assert_eq!(*a, 13);\n    assert_eq!(*a.offset(1), 17);\n}\n\nunsafe fn an_unsafe_fn() -> i32 { 10 }\nlet a = unsafe { an_unsafe_fn() };\n}\n```\n\n## [Labelled block expressions](#labelled-block-expressions)\n\nLabelled block expressions are documented in the [Loops and other breakable expressions](about:blank/loop-expr.html#labelled-block-expressions) section.\n\n## [Attributes on block expressions](#attributes-on-block-expressions)\n\n[Inner attributes](../attributes.html) are allowed directly after the opening brace of a block expression in the following situations:\n\n-   [Function](../items/functions.html) and [method](about:blank/items/associated-items.html#methods) bodies.\n-   Loop bodies ([`loop`](about:blank/loop-expr.html#infinite-loops), [`while`](about:blank/loop-expr.html#predicate-loops), [`while let`](about:blank/loop-expr.html#predicate-pattern-loops), and [`for`](about:blank/loop-expr.html#iterator-loops)).\n-   Block expressions used as a [statement](../statements.html).\n-   Block expressions as elements of [array expressions](array-expr.html), [tuple expressions](tuple-expr.html), [call expressions](call-expr.html), and tuple-style [struct](struct-expr.html) expressions.\n-   A block expression as the tail expression of another block expression.\n\nThe attributes that have meaning on a block expression are [`cfg`](../conditional-compilation.html) and [the lint check attributes](about:blank/attributes/diagnostics.html#lint-check-attributes).\n\nFor example, this function returns `true` on unix platforms and `false` on other platforms.\n\n```rust\n#![allow(unused)]\nfn main() {\nfn is_unix_platform() -> bool {\n    #[cfg(unix)] { true }\n    #[cfg(not(unix))] { false }\n}\n}\n```",
	"html": "<!DOCTYPE html><html lang=\"en\" class=\"light\" dir=\"ltr\"><head>\n        <!-- Book generated using mdBook -->\n        <meta charset=\"UTF-8\">\n        <title>Block expressions - The Rust Reference</title>\n\n\n        <!-- Custom HTML head -->\n        \n        <meta name=\"description\" content=\"\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <meta name=\"theme-color\" content=\"rgb(255, 255, 255)\">\n\n        <link rel=\"icon\" href=\"../favicon.svg\">\n        <link rel=\"shortcut icon\" href=\"../favicon.png\">\n        <link rel=\"stylesheet\" href=\"../css/variables.css\">\n        <link rel=\"stylesheet\" href=\"../css/general.css\">\n        <link rel=\"stylesheet\" href=\"../css/chrome.css\">\n        <link rel=\"stylesheet\" href=\"../css/print.css\" media=\"print\">\n\n        <!-- Fonts -->\n        <link rel=\"stylesheet\" href=\"../FontAwesome/css/font-awesome.css\">\n        <link rel=\"stylesheet\" href=\"../fonts/fonts.css\">\n\n        <!-- Highlight.js Stylesheets -->\n        <link rel=\"stylesheet\" href=\"../highlight.css\">\n        <link rel=\"stylesheet\" href=\"../tomorrow-night.css\" disabled=\"\">\n        <link rel=\"stylesheet\" href=\"../ayu-highlight.css\" disabled=\"\">\n\n        <!-- Custom theme stylesheets -->\n        <link rel=\"stylesheet\" href=\"../theme/reference.css\">\n\n    </head>\n    <body class=\"js sidebar-visible\">\n    <div id=\"body-container\">\n        <!-- Provide site root to javascript -->\n        <script>\n            var path_to_root = \"../\";\n            var default_theme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"navy\" : \"light\";\n        </script>\n\n        <!-- Work around some values being stored in localStorage wrapped in quotes -->\n        <script>\n            try {\n                var theme = localStorage.getItem('mdbook-theme');\n                var sidebar = localStorage.getItem('mdbook-sidebar');\n\n                if (theme.startsWith('\"') && theme.endsWith('\"')) {\n                    localStorage.setItem('mdbook-theme', theme.slice(1, theme.length - 1));\n                }\n\n                if (sidebar.startsWith('\"') && sidebar.endsWith('\"')) {\n                    localStorage.setItem('mdbook-sidebar', sidebar.slice(1, sidebar.length - 1));\n                }\n            } catch (e) { }\n        </script>\n\n        <!-- Set the theme before any content is loaded, prevents flash -->\n        <script>\n            var theme;\n            try { theme = localStorage.getItem('mdbook-theme'); } catch(e) { }\n            if (theme === null || theme === undefined) { theme = default_theme; }\n            var html = document.querySelector('html');\n            html.classList.remove('light')\n            html.classList.add(theme);\n            var body = document.querySelector('body');\n            body.classList.remove('no-js')\n            body.classList.add('js');\n        </script>\n\n        <input type=\"checkbox\" id=\"sidebar-toggle-anchor\" class=\"hidden\">\n\n        <!-- Hide / unhide sidebar before it is displayed -->\n        <script>\n            var body = document.querySelector('body');\n            var sidebar = null;\n            var sidebar_toggle = document.getElementById(\"sidebar-toggle-anchor\");\n            if (document.body.clientWidth >= 1080) {\n                try { sidebar = localStorage.getItem('mdbook-sidebar'); } catch(e) { }\n                sidebar = sidebar || 'visible';\n            } else {\n                sidebar = 'hidden';\n            }\n            sidebar_toggle.checked = sidebar === 'visible';\n            body.classList.remove('sidebar-visible');\n            body.classList.add(\"sidebar-\" + sidebar);\n        </script>\n\n        <nav id=\"sidebar\" class=\"sidebar\" aria-label=\"Table of contents\" aria-hidden=\"false\">\n            <div class=\"sidebar-scrollbox\">\n                <ol class=\"chapter\"><li class=\"chapter-item expanded affix \"><a href=\"../introduction.html\" tabindex=\"0\">Introduction</a></li><li class=\"chapter-item expanded \"><a href=\"../notation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.</strong> Notation</a></li><li class=\"chapter-item expanded \"><a href=\"../lexical-structure.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.</strong> Lexical structure</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../input-format.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.1.</strong> Input format</a></li><li class=\"chapter-item expanded \"><a href=\"../keywords.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.2.</strong> Keywords</a></li><li class=\"chapter-item expanded \"><a href=\"../identifiers.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.3.</strong> Identifiers</a></li><li class=\"chapter-item expanded \"><a href=\"../comments.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.4.</strong> Comments</a></li><li class=\"chapter-item expanded \"><a href=\"../whitespace.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.5.</strong> Whitespace</a></li><li class=\"chapter-item expanded \"><a href=\"../tokens.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.6.</strong> Tokens</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../macros.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.</strong> Macros</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../macros-by-example.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.1.</strong> Macros By Example</a></li><li class=\"chapter-item expanded \"><a href=\"../procedural-macros.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.2.</strong> Procedural Macros</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../crates-and-source-files.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.</strong> Crates and source files</a></li><li class=\"chapter-item expanded \"><a href=\"../conditional-compilation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.</strong> Conditional compilation</a></li><li class=\"chapter-item expanded \"><a href=\"../items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.</strong> Items</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../items/modules.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.1.</strong> Modules</a></li><li class=\"chapter-item expanded \"><a href=\"../items/extern-crates.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.2.</strong> Extern crates</a></li><li class=\"chapter-item expanded \"><a href=\"../items/use-declarations.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.3.</strong> Use declarations</a></li><li class=\"chapter-item expanded \"><a href=\"../items/functions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.4.</strong> Functions</a></li><li class=\"chapter-item expanded \"><a href=\"../items/type-aliases.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.5.</strong> Type aliases</a></li><li class=\"chapter-item expanded \"><a href=\"../items/structs.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.6.</strong> Structs</a></li><li class=\"chapter-item expanded \"><a href=\"../items/enumerations.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.7.</strong> Enumerations</a></li><li class=\"chapter-item expanded \"><a href=\"../items/unions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.8.</strong> Unions</a></li><li class=\"chapter-item expanded \"><a href=\"../items/constant-items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.9.</strong> Constant items</a></li><li class=\"chapter-item expanded \"><a href=\"../items/static-items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.10.</strong> Static items</a></li><li class=\"chapter-item expanded \"><a href=\"../items/traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.11.</strong> Traits</a></li><li class=\"chapter-item expanded \"><a href=\"../items/implementations.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.12.</strong> Implementations</a></li><li class=\"chapter-item expanded \"><a href=\"../items/external-blocks.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.13.</strong> External blocks</a></li><li class=\"chapter-item expanded \"><a href=\"../items/generics.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.14.</strong> Generic parameters</a></li><li class=\"chapter-item expanded \"><a href=\"../items/associated-items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.15.</strong> Associated Items</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../attributes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.</strong> Attributes</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../attributes/testing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.1.</strong> Testing</a></li><li class=\"chapter-item expanded \"><a href=\"../attributes/derive.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.2.</strong> Derive</a></li><li class=\"chapter-item expanded \"><a href=\"../attributes/diagnostics.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.3.</strong> Diagnostics</a></li><li class=\"chapter-item expanded \"><a href=\"../attributes/codegen.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.4.</strong> Code generation</a></li><li class=\"chapter-item expanded \"><a href=\"../attributes/limits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.5.</strong> Limits</a></li><li class=\"chapter-item expanded \"><a href=\"../attributes/type_system.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.6.</strong> Type System</a></li><li class=\"chapter-item expanded \"><a href=\"../attributes/debugger.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.7.</strong> Debugger</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../statements-and-expressions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.</strong> Statements and expressions</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../statements.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.1.</strong> Statements</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.</strong> Expressions</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../expressions/literal-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.1.</strong> Literal expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/path-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.2.</strong> Path expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/block-expr.html\" class=\"active\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.3.</strong> Block expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/operator-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.4.</strong> Operator expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/grouped-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.5.</strong> Grouped expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/array-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.6.</strong> Array and index expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/tuple-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.7.</strong> Tuple and index expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/struct-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.8.</strong> Struct expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/call-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.9.</strong> Call expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/method-call-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.10.</strong> Method call expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/field-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.11.</strong> Field access expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/closure-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.12.</strong> Closure expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/loop-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.13.</strong> Loop expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/range-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.14.</strong> Range expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/if-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.15.</strong> If and if let expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/match-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.16.</strong> Match expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/return-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.17.</strong> Return expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/await-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.18.</strong> Await expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/underscore-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.19.</strong> Underscore expressions</a></li></ol></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../patterns.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.</strong> Patterns</a></li><li class=\"chapter-item expanded \"><a href=\"../type-system.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.</strong> Type system</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../types.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.</strong> Types</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../types/boolean.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.1.</strong> Boolean type</a></li><li class=\"chapter-item expanded \"><a href=\"../types/numeric.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.2.</strong> Numeric types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/textual.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.3.</strong> Textual types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/never.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.4.</strong> Never type</a></li><li class=\"chapter-item expanded \"><a href=\"../types/tuple.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.5.</strong> Tuple types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/array.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.6.</strong> Array types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/slice.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.7.</strong> Slice types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/struct.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.8.</strong> Struct types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/enum.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.9.</strong> Enumerated types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/union.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.10.</strong> Union types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/function-item.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.11.</strong> Function item types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/closure.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.12.</strong> Closure types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/pointer.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.13.</strong> Pointer types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/function-pointer.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.14.</strong> Function pointer types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/trait-object.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.15.</strong> Trait object types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/impl-trait.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.16.</strong> Impl trait type</a></li><li class=\"chapter-item expanded \"><a href=\"../types/parameters.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.17.</strong> Type parameters</a></li><li class=\"chapter-item expanded \"><a href=\"../types/inferred.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.18.</strong> Inferred type</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../dynamically-sized-types.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.2.</strong> Dynamically Sized Types</a></li><li class=\"chapter-item expanded \"><a href=\"../type-layout.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.3.</strong> Type layout</a></li><li class=\"chapter-item expanded \"><a href=\"../interior-mutability.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.4.</strong> Interior mutability</a></li><li class=\"chapter-item expanded \"><a href=\"../subtyping.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.5.</strong> Subtyping and Variance</a></li><li class=\"chapter-item expanded \"><a href=\"../trait-bounds.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.6.</strong> Trait and lifetime bounds</a></li><li class=\"chapter-item expanded \"><a href=\"../type-coercions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.7.</strong> Type coercions</a></li><li class=\"chapter-item expanded \"><a href=\"../destructors.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.8.</strong> Destructors</a></li><li class=\"chapter-item expanded \"><a href=\"../lifetime-elision.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.9.</strong> Lifetime elision</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../special-types-and-traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.</strong> Special types and traits</a></li><li class=\"chapter-item expanded \"><a href=\"../names.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.</strong> Names</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../names/namespaces.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.1.</strong> Namespaces</a></li><li class=\"chapter-item expanded \"><a href=\"../names/scopes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.2.</strong> Scopes</a></li><li class=\"chapter-item expanded \"><a href=\"../names/preludes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.3.</strong> Preludes</a></li><li class=\"chapter-item expanded \"><a href=\"../paths.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.4.</strong> Paths</a></li><li class=\"chapter-item expanded \"><a href=\"../names/name-resolution.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.5.</strong> Name resolution</a></li><li class=\"chapter-item expanded \"><a href=\"../visibility-and-privacy.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.6.</strong> Visibility and privacy</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../memory-model.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.</strong> Memory model</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../memory-allocation-and-lifetime.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.1.</strong> Memory allocation and lifetime</a></li><li class=\"chapter-item expanded \"><a href=\"../variables.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.2.</strong> Variables</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../linkage.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.</strong> Linkage</a></li><li class=\"chapter-item expanded \"><a href=\"../inline-assembly.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.</strong> Inline assembly</a></li><li class=\"chapter-item expanded \"><a href=\"../unsafety.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.</strong> Unsafety</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../unsafe-keyword.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.1.</strong> The unsafe keyword</a></li><li class=\"chapter-item expanded \"><a href=\"../behavior-considered-undefined.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.2.</strong> Behavior considered undefined</a></li><li class=\"chapter-item expanded \"><a href=\"../behavior-not-considered-unsafe.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.3.</strong> Behavior not considered unsafe</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../const_eval.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.</strong> Constant Evaluation</a></li><li class=\"chapter-item expanded \"><a href=\"../abi.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.</strong> Application Binary Interface</a></li><li class=\"chapter-item expanded \"><a href=\"../runtime.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.</strong> The Rust runtime</a></li><li class=\"chapter-item expanded \"><a href=\"../appendices.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.</strong> Appendices</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../macro-ambiguity.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.1.</strong> Macro Follow-Set Ambiguity Formal Specification</a></li><li class=\"chapter-item expanded \"><a href=\"../influences.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.2.</strong> Influences</a></li><li class=\"chapter-item expanded \"><a href=\"../glossary.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.3.</strong> Glossary</a></li></ol></li></ol>\n            </div>\n            <div id=\"sidebar-resize-handle\" class=\"sidebar-resize-handle\">\n                <div class=\"sidebar-resize-indicator\"></div>\n            </div>\n        </nav>\n\n        <!-- Track and set sidebar scroll position -->\n        <script>\n            var sidebarScrollbox = document.querySelector('#sidebar .sidebar-scrollbox');\n            sidebarScrollbox.addEventListener('click', function(e) {\n                if (e.target.tagName === 'A') {\n                    sessionStorage.setItem('sidebar-scroll', sidebarScrollbox.scrollTop);\n                }\n            }, { passive: true });\n            var sidebarScrollTop = sessionStorage.getItem('sidebar-scroll');\n            sessionStorage.removeItem('sidebar-scroll');\n            if (sidebarScrollTop) {\n                // preserve sidebar scroll position when navigating via links within sidebar\n                sidebarScrollbox.scrollTop = sidebarScrollTop;\n            } else {\n                // scroll sidebar to current active section when navigating via \"next/previous chapter\" buttons\n                var activeSection = document.querySelector('#sidebar .active');\n                if (activeSection) {\n                    activeSection.scrollIntoView({ block: 'center' });\n                }\n            }\n        </script>\n\n        <div id=\"page-wrapper\" class=\"page-wrapper\">\n\n            <div class=\"page\">\n                                <div id=\"menu-bar-hover-placeholder\"></div>\n                <div id=\"menu-bar\" class=\"menu-bar\" style=\"top: 0px;\">\n                    <div class=\"left-buttons\">\n                        <label id=\"sidebar-toggle\" class=\"icon-button\" for=\"sidebar-toggle-anchor\" title=\"Toggle Table of Contents\" aria-label=\"Toggle Table of Contents\" aria-controls=\"sidebar\" aria-expanded=\"true\">\n                            <i class=\"fa fa-bars\"></i>\n                        </label>\n                        <button id=\"theme-toggle\" class=\"icon-button\" type=\"button\" title=\"Change theme\" aria-label=\"Change theme\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-controls=\"theme-list\">\n                            <i class=\"fa fa-paint-brush\"></i>\n                        </button>\n                        <ul id=\"theme-list\" class=\"theme-popup\" aria-label=\"Themes\" role=\"menu\">\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme theme-selected\" id=\"light\">Light</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"rust\">Rust</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"coal\">Coal</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"navy\">Navy</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"ayu\">Ayu</button></li>\n                        </ul>\n                        <button id=\"search-toggle\" class=\"icon-button\" type=\"button\" title=\"Search. (Shortkey: s)\" aria-label=\"Toggle Searchbar\" aria-expanded=\"false\" aria-keyshortcuts=\"S\" aria-controls=\"searchbar\">\n                            <i class=\"fa fa-search\"></i>\n                        </button>\n                    </div>\n\n                    <h1 class=\"menu-title\">The Rust Reference</h1>\n\n                    <div class=\"right-buttons\">\n                        <a href=\"../print.html\" title=\"Print this book\" aria-label=\"Print this book\">\n                            <i id=\"print-button\" class=\"fa fa-print\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/reference/\" title=\"Git repository\" aria-label=\"Git repository\">\n                            <i id=\"git-repository-button\" class=\"fa fa-github\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/reference/edit/master/src/expressions/block-expr.md\" title=\"Suggest an edit\" aria-label=\"Suggest an edit\">\n                            <i id=\"git-edit-button\" class=\"fa fa-edit\"></i>\n                        </a>\n\n                    </div>\n                </div>\n\n                <div id=\"search-wrapper\" class=\"hidden\">\n                    <form id=\"searchbar-outer\" class=\"searchbar-outer\">\n                        <input type=\"search\" id=\"searchbar\" name=\"searchbar\" placeholder=\"Search this book ...\" aria-controls=\"searchresults-outer\" aria-describedby=\"searchresults-header\">\n                    </form>\n                    <div id=\"searchresults-outer\" class=\"searchresults-outer hidden\">\n                        <div id=\"searchresults-header\" class=\"searchresults-header\"></div>\n                        <ul id=\"searchresults\">\n                        </ul>\n                    </div>\n                </div>\n\n                <!-- Apply ARIA attributes after the sidebar and the sidebar toggle button are added to the DOM -->\n                <script>\n                    document.getElementById('sidebar-toggle').setAttribute('aria-expanded', sidebar === 'visible');\n                    document.getElementById('sidebar').setAttribute('aria-hidden', sidebar !== 'visible');\n                    Array.from(document.querySelectorAll('#sidebar a')).forEach(function(link) {\n                        link.setAttribute('tabIndex', sidebar === 'visible' ? 0 : -1);\n                    });\n                </script>\n\n                <div id=\"content\" class=\"content\">\n                    <main>\n                        <h1 id=\"block-expressions\"><a class=\"header\" href=\"#block-expressions\">Block expressions</a></h1>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>BlockExpression</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">{</code><br>\n&nbsp;&nbsp; &nbsp;&nbsp; <a href=\"../attributes.html\"><em>InnerAttribute</em></a><sup>*</sup><br>\n&nbsp;&nbsp; &nbsp;&nbsp; <em>Statements</em><sup>?</sup><br>\n&nbsp;&nbsp; <code class=\"hljs\">}</code></p>\n<p><em>Statements</em> :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; <a href=\"../statements.html\"><em>Statement</em></a><sup>+</sup><br>\n&nbsp;&nbsp; | <a href=\"../statements.html\"><em>Statement</em></a><sup>+</sup> <a href=\"../expressions.html\"><em>ExpressionWithoutBlock</em></a><br>\n&nbsp;&nbsp; | <a href=\"../expressions.html\"><em>ExpressionWithoutBlock</em></a></p>\n</blockquote>\n<p>A <em>block expression</em>, or <em>block</em>, is a control flow expression and anonymous namespace scope for items and variable declarations.\nAs a control flow expression, a block sequentially executes its component non-item declaration statements and then its final optional expression.\nAs an anonymous namespace scope, item declarations are only in scope inside the block itself and variables declared by <code class=\"hljs\">let</code> statements are in scope from the next statement until the end of the block.\nSee the <a href=\"../names/scopes.html\">scopes</a> chapter for more details.</p>\n<p>The syntax for a block is <code class=\"hljs\">{</code>, then any <a href=\"../attributes.html\">inner attributes</a>, then any number of <a href=\"../statements.html\">statements</a>, then an optional expression, called the final operand, and finally a <code class=\"hljs\">}</code>.</p>\n<p>Statements are usually required to be followed by a semicolon, with two exceptions:</p>\n<ol>\n<li>Item declaration statements do not need to be followed by a semicolon.</li>\n<li>Expression statements usually require a following semicolon except if its outer expression is a flow control expression.</li>\n</ol>\n<p>Furthermore, extra semicolons between statements are allowed, but these semicolons do not affect semantics.</p>\n<p>When evaluating a block expression, each statement, except for item declaration statements, is executed sequentially.\nThen the final operand is executed, if given.</p>\n<p>The type of a block is the type of the final operand, or <code class=\"hljs\">()</code> if the final operand is omitted.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">fn_call</span></span>() {}\n</span><span class=\"hljs-keyword\">let</span> _: () = {\n    fn_call();\n};\n\n<span class=\"hljs-keyword\">let</span> five: <span class=\"hljs-built_in\">i32</span> = {\n    fn_call();\n    <span class=\"hljs-number\">5</span>\n};\n\n<span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">5</span>, five);\n<span class=\"boring\">}</span></code></pre></pre>\n<blockquote>\n<p>Note: As a control flow expression, if a block expression is the outer expression of an expression statement, the expected type is <code class=\"hljs\">()</code> unless it is followed immediately by a semicolon.</p>\n</blockquote>\n<p>Blocks are always <a href=\"../expressions.html#place-expressions-and-value-expressions\">value expressions</a> and evaluate the last operand in value expression context.</p>\n<blockquote>\n<p><strong>Note</strong>: This can be used to force moving a value if really needed.\nFor example, the following example fails on the call to <code class=\"hljs\">consume_self</code> because the struct was moved out of <code class=\"hljs\">s</code> in the block expression.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust compile_fail edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Struct</span></span>;\n\n<span class=\"hljs-keyword\">impl</span> Struct {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">consume_self</span></span>(<span class=\"hljs-keyword\">self</span>) {}\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">borrow_self</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) {}\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">move_by_block_expression</span></span>() {\n    <span class=\"hljs-keyword\">let</span> s = Struct;\n\n    <span class=\"hljs-comment\">// Move the value out of `s` in the block expression.</span>\n    (&amp;{ s }).borrow_self();\n\n    <span class=\"hljs-comment\">// Fails to execute because `s` is moved out of.</span>\n    s.consume_self();\n}\n<span class=\"boring\">}</span></code></pre></pre>\n</blockquote>\n<h2 id=\"async-blocks\"><a class=\"header\" href=\"#async-blocks\"><code>async</code> blocks</a></h2>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>AsyncBlockExpression</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">async</code> <code class=\"hljs\">move</code><sup>?</sup> <em>BlockExpression</em></p>\n</blockquote>\n<p>An <em>async block</em> is a variant of a block expression which evaluates to a future.\nThe final expression of the block, if present, determines the result value of the future.</p>\n<p>Executing an async block is similar to executing a closure expression:\nits immediate effect is to produce and return an anonymous type.\nWhereas closures return a type that implements one or more of the <a href=\"../../std/ops/trait.Fn.html\"><code class=\"hljs\">std::ops::Fn</code></a> traits, however, the type returned for an async block implements the <a href=\"../../std/future/trait.Future.html\"><code class=\"hljs\">std::future::Future</code></a> trait.\nThe actual data format for this type is unspecified.</p>\n<blockquote>\n<p><strong>Note:</strong> The future type that rustc generates is roughly equivalent to an enum with one variant per <code class=\"hljs\">await</code> point, where each variant stores the data needed to resume from its corresponding point.</p>\n</blockquote>\n<blockquote>\n<p><strong>Edition differences</strong>: Async blocks are only available beginning with Rust 2018.</p>\n</blockquote>\n<h3 id=\"capture-modes\"><a class=\"header\" href=\"#capture-modes\">Capture modes</a></h3>\n<p>Async blocks capture variables from their environment using the same <a href=\"../types/closure.html#capture-modes\">capture modes</a> as closures.\nLike closures, when written <code class=\"hljs\">async { .. }</code> the capture mode for each variable will be inferred from the content of the block.\n<code class=\"hljs\">async move { .. }</code> blocks however will move all referenced variables into the resulting future.</p>\n<h3 id=\"async-context\"><a class=\"header\" href=\"#async-context\">Async context</a></h3>\n<p>Because async blocks construct a future, they define an <strong>async context</strong> which can in turn contain <a href=\"await-expr.html\"><code class=\"hljs\">await</code> expressions</a>.\nAsync contexts are established by async blocks as well as the bodies of async functions, whose semantics are defined in terms of async blocks.</p>\n<h3 id=\"control-flow-operators\"><a class=\"header\" href=\"#control-flow-operators\">Control-flow operators</a></h3>\n<p>Async blocks act like a function boundary, much like closures.\nTherefore, the <code class=\"hljs\">?</code> operator and <code class=\"hljs\">return</code> expressions both affect the output of the future, not the enclosing function or other context.\nThat is, <code class=\"hljs\">return &lt;expr&gt;</code> from within an async block will return the result of <code class=\"hljs\">&lt;expr&gt;</code> as the output of the future.\nSimilarly, if <code class=\"hljs\">&lt;expr&gt;?</code> propagates an error, that error is propagated as the result of the future.</p>\n<p>Finally, the <code class=\"hljs\">break</code> and <code class=\"hljs\">continue</code> keywords cannot be used to branch out from an async block.\nTherefore the following is illegal:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust compile_fail edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">loop</span> {\n    <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">move</span> {\n        <span class=\"hljs-keyword\">break</span>; <span class=\"hljs-comment\">// error[E0267]: `break` inside of an `async` block</span>\n    }\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"const-blocks\"><a class=\"header\" href=\"#const-blocks\"><code>const</code> blocks</a></h2>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>ConstBlockExpression</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">const</code> <em>BlockExpression</em></p>\n</blockquote>\n<p>A <em>const block</em> is a variant of a block expression whose body evaluates at compile-time instead of at runtime.</p>\n<p>Const blocks allows you to define a constant value without having to define new <a href=\"../items/constant-items.html\">constant items</a>, and thus they are also sometimes referred as <em>inline consts</em>.\nIt also supports type inference so there is no need to specify the type, unlike <a href=\"../items/constant-items.html\">constant items</a>.</p>\n<p>Const blocks have the ability to reference generic parameters in scope, unlike <a href=\"../glossary.html#free-item\">free</a> constant items.\nThey are desugared to constant items with generic parameters in scope (similar to associated constants, but without a trait or type they are associated with).\nFor example, this code:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>&lt;T&gt;() -&gt; <span class=\"hljs-built_in\">usize</span> {\n    <span class=\"hljs-keyword\">const</span> { std::mem::size_of::&lt;T&gt;() + <span class=\"hljs-number\">1</span> }\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>is equivalent to:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>&lt;T&gt;() -&gt; <span class=\"hljs-built_in\">usize</span> {\n    {\n        <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Const</span></span>&lt;T&gt;(T);\n        <span class=\"hljs-keyword\">impl</span>&lt;T&gt; Const&lt;T&gt; {\n            <span class=\"hljs-keyword\">const</span> CONST: <span class=\"hljs-built_in\">usize</span> = std::mem::size_of::&lt;T&gt;() + <span class=\"hljs-number\">1</span>;\n        }\n        Const::&lt;T&gt;::CONST\n    }\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>If the const block expression is executed at runtime, then the constant is guaranteed to be evaluated, even if its return value is ignored:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>&lt;T&gt;() -&gt; <span class=\"hljs-built_in\">usize</span> {\n    <span class=\"hljs-comment\">// If this code ever gets executed, then the assertion has definitely</span>\n    <span class=\"hljs-comment\">// been evaluated at compile-time.</span>\n    <span class=\"hljs-keyword\">const</span> { <span class=\"hljs-built_in\">assert!</span>(std::mem::size_of::&lt;T&gt;() &gt; <span class=\"hljs-number\">0</span>); }\n    <span class=\"hljs-comment\">// Here we can have unsafe code relying on the type being non-zero-sized.</span>\n    <span class=\"hljs-comment\">/* ... */</span>\n    <span class=\"hljs-number\">42</span>\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>If the const block expression is not executed at runtime, it may or may not be evaluated:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust compile_fail edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">if</span> <span class=\"hljs-literal\">false</span> {\n    <span class=\"hljs-comment\">// The panic may or may not occur when the program is built.</span>\n    <span class=\"hljs-keyword\">const</span> { <span class=\"hljs-built_in\">panic!</span>(); }\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"unsafe-blocks\"><a class=\"header\" href=\"#unsafe-blocks\"><code>unsafe</code> blocks</a></h2>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>UnsafeBlockExpression</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">unsafe</code> <em>BlockExpression</em></p>\n</blockquote>\n<p><em>See <a href=\"../unsafe-blocks.html\"><code class=\"hljs\">unsafe</code> block</a> for more information on when to use <code class=\"hljs\">unsafe</code></em></p>\n<p>A block of code can be prefixed with the <code class=\"hljs\">unsafe</code> keyword to permit <a href=\"../unsafety.html\">unsafe operations</a>.\nExamples:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">unsafe</span> {\n    <span class=\"hljs-keyword\">let</span> b = [<span class=\"hljs-number\">13u8</span>, <span class=\"hljs-number\">17u8</span>];\n    <span class=\"hljs-keyword\">let</span> a = &amp;b[<span class=\"hljs-number\">0</span>] <span class=\"hljs-keyword\">as</span> *<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">u8</span>;\n    <span class=\"hljs-built_in\">assert_eq!</span>(*a, <span class=\"hljs-number\">13</span>);\n    <span class=\"hljs-built_in\">assert_eq!</span>(*a.offset(<span class=\"hljs-number\">1</span>), <span class=\"hljs-number\">17</span>);\n}\n\n<span class=\"boring\"><span class=\"hljs-keyword\">unsafe</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">an_unsafe_fn</span></span>() -&gt; <span class=\"hljs-built_in\">i32</span> { <span class=\"hljs-number\">10</span> }\n</span><span class=\"hljs-keyword\">let</span> a = <span class=\"hljs-keyword\">unsafe</span> { an_unsafe_fn() };\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"labelled-block-expressions\"><a class=\"header\" href=\"#labelled-block-expressions\">Labelled block expressions</a></h2>\n<p>Labelled block expressions are documented in the <a href=\"loop-expr.html#labelled-block-expressions\">Loops and other breakable expressions</a> section.</p>\n<h2 id=\"attributes-on-block-expressions\"><a class=\"header\" href=\"#attributes-on-block-expressions\">Attributes on block expressions</a></h2>\n<p><a href=\"../attributes.html\">Inner attributes</a> are allowed directly after the opening brace of a block expression in the following situations:</p>\n<ul>\n<li><a href=\"../items/functions.html\">Function</a> and <a href=\"../items/associated-items.html#methods\">method</a> bodies.</li>\n<li>Loop bodies (<a href=\"loop-expr.html#infinite-loops\"><code class=\"hljs\">loop</code></a>, <a href=\"loop-expr.html#predicate-loops\"><code class=\"hljs\">while</code></a>, <a href=\"loop-expr.html#predicate-pattern-loops\"><code class=\"hljs\">while let</code></a>, and <a href=\"loop-expr.html#iterator-loops\"><code class=\"hljs\">for</code></a>).</li>\n<li>Block expressions used as a <a href=\"../statements.html\">statement</a>.</li>\n<li>Block expressions as elements of <a href=\"array-expr.html\">array expressions</a>, <a href=\"tuple-expr.html\">tuple expressions</a>,\n<a href=\"call-expr.html\">call expressions</a>, and tuple-style <a href=\"struct-expr.html\">struct</a> expressions.</li>\n<li>A block expression as the tail expression of another block expression.</li>\n</ul>\n<!-- Keep list in sync with expressions.md -->\n<p>The attributes that have meaning on a block expression are <a href=\"../conditional-compilation.html\"><code class=\"hljs\">cfg</code></a> and <a href=\"../attributes/diagnostics.html#lint-check-attributes\">the lint check attributes</a>.</p>\n<p>For example, this function returns <code class=\"hljs\">true</code> on unix platforms and <code class=\"hljs\">false</code> on other platforms.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">is_unix_platform</span></span>() -&gt; <span class=\"hljs-built_in\">bool</span> {\n    <span class=\"hljs-meta\">#[cfg(unix)]</span> { <span class=\"hljs-literal\">true</span> }\n    <span class=\"hljs-meta\">#[cfg(not(unix))]</span> { <span class=\"hljs-literal\">false</span> }\n}\n<span class=\"boring\">}</span></code></pre></pre>\n\n                    </main>\n\n                    <nav class=\"nav-wrapper\" aria-label=\"Page navigation\">\n                        <!-- Mobile navigation buttons -->\n                            <a rel=\"prev\" href=\"../expressions/path-expr.html\" class=\"mobile-nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                                <i class=\"fa fa-angle-left\"></i>\n                            </a>\n\n                            <a rel=\"next prefetch\" href=\"../expressions/operator-expr.html\" class=\"mobile-nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                                <i class=\"fa fa-angle-right\"></i>\n                            </a>\n\n                        <div style=\"clear: both\"></div>\n                    </nav>\n                </div>\n            </div>\n\n            <nav class=\"nav-wide-wrapper\" aria-label=\"Page navigation\">\n                    <a rel=\"prev\" href=\"../expressions/path-expr.html\" class=\"nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                        <i class=\"fa fa-angle-left\"></i>\n                    </a>\n\n                    <a rel=\"next prefetch\" href=\"../expressions/operator-expr.html\" class=\"nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                        <i class=\"fa fa-angle-right\"></i>\n                    </a>\n            </nav>\n\n        </div>\n\n\n\n\n        <script>\n            window.playground_copyable = true;\n        </script>\n\n\n        <script src=\"../elasticlunr.min.js\"></script>\n        <script src=\"../mark.min.js\"></script>\n        <script src=\"../searcher.js\"></script>\n\n        <script src=\"../clipboard.min.js\"></script>\n        <script src=\"../highlight.js\"></script>\n        <script src=\"../book.js\"></script>\n\n        <!-- Custom JS scripts -->\n\n\n    </div>\n    \n\n</body></html>",
	"crawlDate": "2024-07-28T05:13:05.861Z"
}