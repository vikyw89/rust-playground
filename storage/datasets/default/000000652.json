{
	"title": "Functions - The Rust Reference",
	"url": "https://doc.rust-lang.org/stable/reference/items/functions.html",
	"markdown": "# Functions - The Rust Reference\n\n> **Syntax**  \n> _Function_ :  \n>    _FunctionQualifiers_ `fn` [IDENTIFIER](../identifiers.html) [_GenericParams_](generics.html)?  \n>       `(` _FunctionParameters_? `)`  \n>       _FunctionReturnType_? [_WhereClause_](about:blank/generics.html#where-clauses)?  \n>       ( [_BlockExpression_](../expressions/block-expr.html) | `;` )\n> \n> _FunctionQualifiers_ :  \n>    `const`? `async`[1](#async-edition)? `unsafe`? (`extern` _Abi_?)?\n> \n> _Abi_ :  \n>    [STRING\\_LITERAL](about:blank/tokens.html#string-literals) | [RAW\\_STRING\\_LITERAL](about:blank/tokens.html#raw-string-literals)\n> \n> _FunctionParameters_ :  \n>       _SelfParam_ `,`?  \n>    | (_SelfParam_ `,`)? _FunctionParam_ (`,` _FunctionParam_)\\* `,`?\n> \n> _SelfParam_ :  \n>    [_OuterAttribute_](../attributes.html)\\* ( _ShorthandSelf_ | _TypedSelf_ )\n> \n> _ShorthandSelf_ :  \n>    (`&` | `&` [_Lifetime_](../trait-bounds.html))? `mut`? `self`\n> \n> _TypedSelf_ :  \n>    `mut`? `self` `:` [_Type_](about:blank/types.html#type-expressions)\n> \n> _FunctionParam_ :  \n>    [_OuterAttribute_](../attributes.html)\\* ( _FunctionParamPattern_ | `...` | [_Type_](about:blank/types.html#type-expressions) [2](#fn-param-2015) )\n> \n> _FunctionParamPattern_ :  \n>    [_PatternNoTopAlt_](../patterns.html) `:` ( [_Type_](about:blank/types.html#type-expressions) | `...` )\n> \n> _FunctionReturnType_ :  \n>    `->` [_Type_](about:blank/types.html#type-expressions)\n\nA _function_ consists of a [block](../expressions/block-expr.html), along with a name, a set of parameters, and an output type. Other than a name, all these are optional. Functions are declared with the keyword `fn`. Functions may declare a set of _input_ [_variables_](../variables.html) as parameters, through which the caller passes arguments into the function, and the _output_ [_type_](about:blank/types.html#type-expressions) of the value the function will return to its caller on completion. If the output type is not explicitly stated, it is the [unit type](../types/tuple.html).\n\nWhen referred to, a _function_ yields a first-class _value_ of the corresponding zero-sized [_function item type_](../types/function-item.html), which when called evaluates to a direct call to the function.\n\nFor example, this is a simple function:\n\n```rust\n#![allow(unused)]\nfn main() {\nfn answer_to_life_the_universe_and_everything() -> i32 {\n    return 42;\n}\n}\n```\n\n## [Function parameters](#function-parameters)\n\nFunction parameters are irrefutable [patterns](../patterns.html), so any pattern that is valid in an else-less `let` binding is also valid as a parameter:\n\n```rust\n#![allow(unused)]\nfn main() {\nfn first((value, _): (i32, i32)) -> i32 { value }\n}\n```\n\nIf the first parameter is a _SelfParam_, this indicates that the function is a [method](about:blank/associated-items.html#methods). Functions with a self parameter may only appear as an [associated function](about:blank/associated-items.html#associated-functions-and-methods) in a [trait](traits.html) or [implementation](implementations.html).\n\nA parameter with the `...` token indicates a [variadic function](about:blank/external-blocks.html#variadic-functions), and may only be used as the last parameter of an [external block](external-blocks.html) function. The variadic parameter may have an optional identifier, such as `args: ...`.\n\n## [Function body](#function-body)\n\nThe block of a function is conceptually wrapped in a block that binds the argument patterns and then `return`s the value of the function's block. This means that the tail expression of the block, if evaluated, ends up being returned to the caller. As usual, an explicit return expression within the body of the function will short-cut that implicit return, if reached.\n\nFor example, the function above behaves as if it was written as:\n\n```rust\n// argument_0 is the actual first argument passed from the caller\nlet (value, _) = argument_0;\nreturn {\n    value\n};\n```\n\nFunctions without a body block are terminated with a semicolon. This form may only appear in a [trait](traits.html) or [external block](external-blocks.html).\n\n## [Generic functions](#generic-functions)\n\nA _generic function_ allows one or more _parameterized types_ to appear in its signature. Each type parameter must be explicitly declared in an angle-bracket-enclosed and comma-separated list, following the function name.\n\n```rust\n#![allow(unused)]\nfn main() {\n// foo is generic over A and B\n\nfn foo<A, B>(x: A, y: B) {\n}\n}\n```\n\nInside the function signature and body, the name of the type parameter can be used as a type name. [Trait](traits.html) bounds can be specified for type parameters to allow methods with that trait to be called on values of that type. This is specified using the `where` syntax:\n\n```rust\n#![allow(unused)]\nfn main() {\nuse std::fmt::Debug;\nfn foo<T>(x: T) where T: Debug {\n}\n}\n```\n\nWhen a generic function is referenced, its type is instantiated based on the context of the reference. For example, calling the `foo` function here:\n\n```rust\n#![allow(unused)]\nfn main() {\nuse std::fmt::Debug;\n\nfn foo<T>(x: &[T]) where T: Debug {\n    // details elided\n}\n\nfoo(&[1, 2]);\n}\n```\n\nwill instantiate type parameter `T` with `i32`.\n\nThe type parameters can also be explicitly supplied in a trailing [path](../paths.html) component after the function name. This might be necessary if there is not sufficient context to determine the type parameters. For example, `mem::size_of::<u32>() == 4`.\n\n## [Extern function qualifier](#extern-function-qualifier)\n\nThe `extern` function qualifier allows providing function _definitions_ that can be called with a particular ABI:\n\n```rust\nextern \"ABI\" fn foo() { /* ... */ }\n```\n\nThese are often used in combination with [external block](external-blocks.html) items which provide function _declarations_ that can be used to call functions without providing their _definition_:\n\n```rust\nextern \"ABI\" {\n  fn foo(); /* no body */\n}\nunsafe { foo() }\n```\n\nWhen `\"extern\" Abi?*` is omitted from `FunctionQualifiers` in function items, the ABI `\"Rust\"` is assigned. For example:\n\n```rust\n#![allow(unused)]\nfn main() {\nfn foo() {}\n}\n```\n\nis equivalent to:\n\n```rust\n#![allow(unused)]\nfn main() {\nextern \"Rust\" fn foo() {}\n}\n```\n\nFunctions can be called by foreign code, and using an ABI that differs from Rust allows, for example, to provide functions that can be called from other programming languages like C:\n\n```rust\n#![allow(unused)]\nfn main() {\n// Declares a function with the \"C\" ABI\nextern \"C\" fn new_i32() -> i32 { 0 }\n\n// Declares a function with the \"stdcall\" ABI\n#[cfg(target_arch = \"x86_64\")]\nextern \"stdcall\" fn new_i32_stdcall() -> i32 { 0 }\n}\n```\n\nJust as with [external block](external-blocks.html), when the `extern` keyword is used and the `\"ABI\"` is omitted, the ABI used defaults to `\"C\"`. That is, this:\n\n```rust\n#![allow(unused)]\nfn main() {\nextern fn new_i32() -> i32 { 0 }\nlet fptr: extern fn() -> i32 = new_i32;\n}\n```\n\nis equivalent to:\n\n```rust\n#![allow(unused)]\nfn main() {\nextern \"C\" fn new_i32() -> i32 { 0 }\nlet fptr: extern \"C\" fn() -> i32 = new_i32;\n}\n```\n\nFunctions with an ABI that differs from `\"Rust\"` do not support unwinding in the exact same way that Rust does. Therefore, unwinding past the end of functions with such ABIs causes the process to abort.\n\n> **Note**: The LLVM backend of the `rustc` implementation aborts the process by executing an illegal instruction.\n\n## [Const functions](#const-functions)\n\nFunctions qualified with the `const` keyword are [const functions](about:blank/const_eval.html#const-functions), as are [tuple struct](structs.html) and [tuple variant](enumerations.html) constructors. _Const functions_ can be called from within [const contexts](about:blank/const_eval.html#const-context).\n\nConst functions may use the [`extern`](#extern-function-qualifier) function qualifier, but only with the `\"Rust\"` and `\"C\"` ABIs.\n\nConst functions are not allowed to be [async](#async-functions).\n\n## [Async functions](#async-functions)\n\nFunctions may be qualified as async, and this can also be combined with the `unsafe` qualifier:\n\n```rust\n#![allow(unused)]\nfn main() {\nasync fn regular_example() { }\nasync unsafe fn unsafe_example() { }\n}\n```\n\nAsync functions do no work when called: instead, they capture their arguments into a future. When polled, that future will execute the function's body.\n\nAn async function is roughly equivalent to a function that returns [`impl Future`](../types/impl-trait.html) and with an [`async move` block](about:blank/expressions/block-expr.html#async-blocks) as its body:\n\n```rust\n#![allow(unused)]\nfn main() {\n// Source\nasync fn example(x: &str) -> usize {\n    x.len()\n}\n}\n```\n\nis roughly equivalent to:\n\n```rust\n#![allow(unused)]\nfn main() {\nuse std::future::Future;\n// Desugared\nfn example<'a>(x: &'a str) -> impl Future<Output = usize> + 'a {\n    async move { x.len() }\n}\n}\n```\n\nThe actual desugaring is more complex:\n\n-   The return type in the desugaring is assumed to capture all lifetime parameters from the `async fn` declaration. This can be seen in the desugared example above, which explicitly outlives, and hence captures, `'a`.\n-   The [`async move` block](about:blank/expressions/block-expr.html#async-blocks) in the body captures all function parameters, including those that are unused or bound to a `_` pattern. This ensures that function parameters are dropped in the same order as they would be if the function were not async, except that the drop occurs when the returned future has been fully awaited.\n\nFor more information on the effect of async, see [`async` blocks](about:blank/expressions/block-expr.html#async-blocks).\n\n> **Edition differences**: Async functions are only available beginning with Rust 2018.\n\n### [Combining `async` and `unsafe`](#combining-async-and-unsafe)\n\nIt is legal to declare a function that is both async and unsafe. The resulting function is unsafe to call and (like any async function) returns a future. This future is just an ordinary future and thus an `unsafe` context is not required to \"await\" it:\n\n```rust\n#![allow(unused)]\nfn main() {\n// Returns a future that, when awaited, dereferences `x`.\n//\n// Soundness condition: `x` must be safe to dereference until\n// the resulting future is complete.\nasync unsafe fn unsafe_example(x: *const i32) -> i32 {\n  *x\n}\n\nasync fn safe_example() {\n    // An `unsafe` block is required to invoke the function initially:\n    let p = 22;\n    let future = unsafe { unsafe_example(&p) };\n\n    // But no `unsafe` block required here. This will\n    // read the value of `p`:\n    let q = future.await;\n}\n}\n```\n\nNote that this behavior is a consequence of the desugaring to a function that returns an `impl Future` -- in this case, the function we desugar to is an `unsafe` function, but the return value remains the same.\n\nUnsafe is used on an async function in precisely the same way that it is used on other functions: it indicates that the function imposes some additional obligations on its caller to ensure soundness. As in any other unsafe function, these conditions may extend beyond the initial call itself -- in the snippet above, for example, the `unsafe_example` function took a pointer `x` as argument, and then (when awaited) dereferenced that pointer. This implies that `x` would have to be valid until the future is finished executing, and it is the caller's responsibility to ensure that.\n\n## [Attributes on functions](#attributes-on-functions)\n\n[Outer attributes](../attributes.html) are allowed on functions. [Inner attributes](../attributes.html) are allowed directly after the `{` inside its [block](../expressions/block-expr.html).\n\nThis example shows an inner attribute on a function. The function is documented with just the word \"Example\".\n\n```rust\n#![allow(unused)]\nfn main() {\nfn documented() {\n    #![doc = \"Example\"]\n}\n}\n```\n\n> Note: Except for lints, it is idiomatic to only use outer attributes on function items.\n\nThe attributes that have meaning on a function are [`cfg`](about:blank/conditional-compilation.html#the-cfg-attribute), [`cfg_attr`](about:blank/conditional-compilation.html#the-cfg_attr-attribute), [`deprecated`](about:blank/attributes/diagnostics.html#the-deprecated-attribute), [`doc`](../../rustdoc/the-doc-attribute.html), [`export_name`](about:blank/abi.html#the-export_name-attribute), [`link_section`](about:blank/abi.html#the-link_section-attribute), [`no_mangle`](about:blank/abi.html#the-no_mangle-attribute), [the lint check attributes](about:blank/attributes/diagnostics.html#lint-check-attributes), [`must_use`](about:blank/attributes/diagnostics.html#the-must_use-attribute), [the procedural macro attributes](../procedural-macros.html), [the testing attributes](../attributes/testing.html), and [the optimization hint attributes](about:blank/attributes/codegen.html#optimization-hints). Functions also accept attributes macros.\n\n## [Attributes on function parameters](#attributes-on-function-parameters)\n\n[Outer attributes](../attributes.html) are allowed on function parameters and the permitted [built-in attributes](about:blank/attributes.html#built-in-attributes-index) are restricted to `cfg`, `cfg_attr`, `allow`, `warn`, `deny`, and `forbid`.\n\n```rust\n#![allow(unused)]\nfn main() {\nfn len(\n    #[cfg(windows)] slice: &[u16],\n    #[cfg(not(windows))] slice: &[u8],\n) -> usize {\n    slice.len()\n}\n}\n```\n\nInert helper attributes used by procedural macro attributes applied to items are also allowed but be careful to not include these inert attributes in your final `TokenStream`.\n\nFor example, the following code defines an inert `some_inert_attribute` attribute that is not formally defined anywhere and the `some_proc_macro_attribute` procedural macro is responsible for detecting its presence and removing it from the output token stream.\n\n```rust\n#[some_proc_macro_attribute]\nfn foo_oof(#[some_inert_attribute] arg: u8) {\n}\n```",
	"html": "<!DOCTYPE html><html lang=\"en\" class=\"light\" dir=\"ltr\"><head>\n        <!-- Book generated using mdBook -->\n        <meta charset=\"UTF-8\">\n        <title>Functions - The Rust Reference</title>\n\n\n        <!-- Custom HTML head -->\n        \n        <meta name=\"description\" content=\"\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <meta name=\"theme-color\" content=\"rgb(255, 255, 255)\">\n\n        <link rel=\"icon\" href=\"../favicon.svg\">\n        <link rel=\"shortcut icon\" href=\"../favicon.png\">\n        <link rel=\"stylesheet\" href=\"../css/variables.css\">\n        <link rel=\"stylesheet\" href=\"../css/general.css\">\n        <link rel=\"stylesheet\" href=\"../css/chrome.css\">\n        <link rel=\"stylesheet\" href=\"../css/print.css\" media=\"print\">\n\n        <!-- Fonts -->\n        <link rel=\"stylesheet\" href=\"../FontAwesome/css/font-awesome.css\">\n        <link rel=\"stylesheet\" href=\"../fonts/fonts.css\">\n\n        <!-- Highlight.js Stylesheets -->\n        <link rel=\"stylesheet\" href=\"../highlight.css\">\n        <link rel=\"stylesheet\" href=\"../tomorrow-night.css\" disabled=\"\">\n        <link rel=\"stylesheet\" href=\"../ayu-highlight.css\" disabled=\"\">\n\n        <!-- Custom theme stylesheets -->\n        <link rel=\"stylesheet\" href=\"../theme/reference.css\">\n\n    </head>\n    <body class=\"js sidebar-visible\">\n    <div id=\"body-container\">\n        <!-- Provide site root to javascript -->\n        <script>\n            var path_to_root = \"../\";\n            var default_theme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"navy\" : \"light\";\n        </script>\n\n        <!-- Work around some values being stored in localStorage wrapped in quotes -->\n        <script>\n            try {\n                var theme = localStorage.getItem('mdbook-theme');\n                var sidebar = localStorage.getItem('mdbook-sidebar');\n\n                if (theme.startsWith('\"') && theme.endsWith('\"')) {\n                    localStorage.setItem('mdbook-theme', theme.slice(1, theme.length - 1));\n                }\n\n                if (sidebar.startsWith('\"') && sidebar.endsWith('\"')) {\n                    localStorage.setItem('mdbook-sidebar', sidebar.slice(1, sidebar.length - 1));\n                }\n            } catch (e) { }\n        </script>\n\n        <!-- Set the theme before any content is loaded, prevents flash -->\n        <script>\n            var theme;\n            try { theme = localStorage.getItem('mdbook-theme'); } catch(e) { }\n            if (theme === null || theme === undefined) { theme = default_theme; }\n            var html = document.querySelector('html');\n            html.classList.remove('light')\n            html.classList.add(theme);\n            var body = document.querySelector('body');\n            body.classList.remove('no-js')\n            body.classList.add('js');\n        </script>\n\n        <input type=\"checkbox\" id=\"sidebar-toggle-anchor\" class=\"hidden\">\n\n        <!-- Hide / unhide sidebar before it is displayed -->\n        <script>\n            var body = document.querySelector('body');\n            var sidebar = null;\n            var sidebar_toggle = document.getElementById(\"sidebar-toggle-anchor\");\n            if (document.body.clientWidth >= 1080) {\n                try { sidebar = localStorage.getItem('mdbook-sidebar'); } catch(e) { }\n                sidebar = sidebar || 'visible';\n            } else {\n                sidebar = 'hidden';\n            }\n            sidebar_toggle.checked = sidebar === 'visible';\n            body.classList.remove('sidebar-visible');\n            body.classList.add(\"sidebar-\" + sidebar);\n        </script>\n\n        <nav id=\"sidebar\" class=\"sidebar\" aria-label=\"Table of contents\" aria-hidden=\"false\">\n            <div class=\"sidebar-scrollbox\">\n                <ol class=\"chapter\"><li class=\"chapter-item expanded affix \"><a href=\"../introduction.html\" tabindex=\"0\">Introduction</a></li><li class=\"chapter-item expanded \"><a href=\"../notation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.</strong> Notation</a></li><li class=\"chapter-item expanded \"><a href=\"../lexical-structure.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.</strong> Lexical structure</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../input-format.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.1.</strong> Input format</a></li><li class=\"chapter-item expanded \"><a href=\"../keywords.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.2.</strong> Keywords</a></li><li class=\"chapter-item expanded \"><a href=\"../identifiers.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.3.</strong> Identifiers</a></li><li class=\"chapter-item expanded \"><a href=\"../comments.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.4.</strong> Comments</a></li><li class=\"chapter-item expanded \"><a href=\"../whitespace.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.5.</strong> Whitespace</a></li><li class=\"chapter-item expanded \"><a href=\"../tokens.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.6.</strong> Tokens</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../macros.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.</strong> Macros</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../macros-by-example.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.1.</strong> Macros By Example</a></li><li class=\"chapter-item expanded \"><a href=\"../procedural-macros.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.2.</strong> Procedural Macros</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../crates-and-source-files.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.</strong> Crates and source files</a></li><li class=\"chapter-item expanded \"><a href=\"../conditional-compilation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.</strong> Conditional compilation</a></li><li class=\"chapter-item expanded \"><a href=\"../items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.</strong> Items</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../items/modules.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.1.</strong> Modules</a></li><li class=\"chapter-item expanded \"><a href=\"../items/extern-crates.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.2.</strong> Extern crates</a></li><li class=\"chapter-item expanded \"><a href=\"../items/use-declarations.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.3.</strong> Use declarations</a></li><li class=\"chapter-item expanded \"><a href=\"../items/functions.html\" class=\"active\" tabindex=\"0\"><strong aria-hidden=\"true\">6.4.</strong> Functions</a></li><li class=\"chapter-item expanded \"><a href=\"../items/type-aliases.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.5.</strong> Type aliases</a></li><li class=\"chapter-item expanded \"><a href=\"../items/structs.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.6.</strong> Structs</a></li><li class=\"chapter-item expanded \"><a href=\"../items/enumerations.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.7.</strong> Enumerations</a></li><li class=\"chapter-item expanded \"><a href=\"../items/unions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.8.</strong> Unions</a></li><li class=\"chapter-item expanded \"><a href=\"../items/constant-items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.9.</strong> Constant items</a></li><li class=\"chapter-item expanded \"><a href=\"../items/static-items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.10.</strong> Static items</a></li><li class=\"chapter-item expanded \"><a href=\"../items/traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.11.</strong> Traits</a></li><li class=\"chapter-item expanded \"><a href=\"../items/implementations.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.12.</strong> Implementations</a></li><li class=\"chapter-item expanded \"><a href=\"../items/external-blocks.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.13.</strong> External blocks</a></li><li class=\"chapter-item expanded \"><a href=\"../items/generics.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.14.</strong> Generic parameters</a></li><li class=\"chapter-item expanded \"><a href=\"../items/associated-items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.15.</strong> Associated Items</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../attributes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.</strong> Attributes</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../attributes/testing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.1.</strong> Testing</a></li><li class=\"chapter-item expanded \"><a href=\"../attributes/derive.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.2.</strong> Derive</a></li><li class=\"chapter-item expanded \"><a href=\"../attributes/diagnostics.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.3.</strong> Diagnostics</a></li><li class=\"chapter-item expanded \"><a href=\"../attributes/codegen.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.4.</strong> Code generation</a></li><li class=\"chapter-item expanded \"><a href=\"../attributes/limits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.5.</strong> Limits</a></li><li class=\"chapter-item expanded \"><a href=\"../attributes/type_system.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.6.</strong> Type System</a></li><li class=\"chapter-item expanded \"><a href=\"../attributes/debugger.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.7.</strong> Debugger</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../statements-and-expressions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.</strong> Statements and expressions</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../statements.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.1.</strong> Statements</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.</strong> Expressions</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../expressions/literal-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.1.</strong> Literal expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/path-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.2.</strong> Path expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/block-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.3.</strong> Block expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/operator-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.4.</strong> Operator expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/grouped-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.5.</strong> Grouped expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/array-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.6.</strong> Array and index expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/tuple-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.7.</strong> Tuple and index expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/struct-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.8.</strong> Struct expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/call-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.9.</strong> Call expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/method-call-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.10.</strong> Method call expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/field-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.11.</strong> Field access expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/closure-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.12.</strong> Closure expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/loop-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.13.</strong> Loop expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/range-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.14.</strong> Range expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/if-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.15.</strong> If and if let expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/match-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.16.</strong> Match expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/return-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.17.</strong> Return expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/await-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.18.</strong> Await expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/underscore-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.19.</strong> Underscore expressions</a></li></ol></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../patterns.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.</strong> Patterns</a></li><li class=\"chapter-item expanded \"><a href=\"../type-system.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.</strong> Type system</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../types.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.</strong> Types</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../types/boolean.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.1.</strong> Boolean type</a></li><li class=\"chapter-item expanded \"><a href=\"../types/numeric.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.2.</strong> Numeric types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/textual.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.3.</strong> Textual types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/never.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.4.</strong> Never type</a></li><li class=\"chapter-item expanded \"><a href=\"../types/tuple.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.5.</strong> Tuple types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/array.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.6.</strong> Array types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/slice.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.7.</strong> Slice types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/struct.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.8.</strong> Struct types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/enum.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.9.</strong> Enumerated types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/union.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.10.</strong> Union types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/function-item.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.11.</strong> Function item types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/closure.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.12.</strong> Closure types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/pointer.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.13.</strong> Pointer types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/function-pointer.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.14.</strong> Function pointer types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/trait-object.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.15.</strong> Trait object types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/impl-trait.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.16.</strong> Impl trait type</a></li><li class=\"chapter-item expanded \"><a href=\"../types/parameters.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.17.</strong> Type parameters</a></li><li class=\"chapter-item expanded \"><a href=\"../types/inferred.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.18.</strong> Inferred type</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../dynamically-sized-types.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.2.</strong> Dynamically Sized Types</a></li><li class=\"chapter-item expanded \"><a href=\"../type-layout.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.3.</strong> Type layout</a></li><li class=\"chapter-item expanded \"><a href=\"../interior-mutability.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.4.</strong> Interior mutability</a></li><li class=\"chapter-item expanded \"><a href=\"../subtyping.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.5.</strong> Subtyping and Variance</a></li><li class=\"chapter-item expanded \"><a href=\"../trait-bounds.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.6.</strong> Trait and lifetime bounds</a></li><li class=\"chapter-item expanded \"><a href=\"../type-coercions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.7.</strong> Type coercions</a></li><li class=\"chapter-item expanded \"><a href=\"../destructors.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.8.</strong> Destructors</a></li><li class=\"chapter-item expanded \"><a href=\"../lifetime-elision.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.9.</strong> Lifetime elision</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../special-types-and-traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.</strong> Special types and traits</a></li><li class=\"chapter-item expanded \"><a href=\"../names.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.</strong> Names</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../names/namespaces.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.1.</strong> Namespaces</a></li><li class=\"chapter-item expanded \"><a href=\"../names/scopes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.2.</strong> Scopes</a></li><li class=\"chapter-item expanded \"><a href=\"../names/preludes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.3.</strong> Preludes</a></li><li class=\"chapter-item expanded \"><a href=\"../paths.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.4.</strong> Paths</a></li><li class=\"chapter-item expanded \"><a href=\"../names/name-resolution.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.5.</strong> Name resolution</a></li><li class=\"chapter-item expanded \"><a href=\"../visibility-and-privacy.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.6.</strong> Visibility and privacy</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../memory-model.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.</strong> Memory model</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../memory-allocation-and-lifetime.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.1.</strong> Memory allocation and lifetime</a></li><li class=\"chapter-item expanded \"><a href=\"../variables.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.2.</strong> Variables</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../linkage.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.</strong> Linkage</a></li><li class=\"chapter-item expanded \"><a href=\"../inline-assembly.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.</strong> Inline assembly</a></li><li class=\"chapter-item expanded \"><a href=\"../unsafety.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.</strong> Unsafety</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../unsafe-keyword.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.1.</strong> The unsafe keyword</a></li><li class=\"chapter-item expanded \"><a href=\"../behavior-considered-undefined.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.2.</strong> Behavior considered undefined</a></li><li class=\"chapter-item expanded \"><a href=\"../behavior-not-considered-unsafe.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.3.</strong> Behavior not considered unsafe</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../const_eval.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.</strong> Constant Evaluation</a></li><li class=\"chapter-item expanded \"><a href=\"../abi.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.</strong> Application Binary Interface</a></li><li class=\"chapter-item expanded \"><a href=\"../runtime.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.</strong> The Rust runtime</a></li><li class=\"chapter-item expanded \"><a href=\"../appendices.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.</strong> Appendices</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../macro-ambiguity.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.1.</strong> Macro Follow-Set Ambiguity Formal Specification</a></li><li class=\"chapter-item expanded \"><a href=\"../influences.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.2.</strong> Influences</a></li><li class=\"chapter-item expanded \"><a href=\"../glossary.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.3.</strong> Glossary</a></li></ol></li></ol>\n            </div>\n            <div id=\"sidebar-resize-handle\" class=\"sidebar-resize-handle\">\n                <div class=\"sidebar-resize-indicator\"></div>\n            </div>\n        </nav>\n\n        <!-- Track and set sidebar scroll position -->\n        <script>\n            var sidebarScrollbox = document.querySelector('#sidebar .sidebar-scrollbox');\n            sidebarScrollbox.addEventListener('click', function(e) {\n                if (e.target.tagName === 'A') {\n                    sessionStorage.setItem('sidebar-scroll', sidebarScrollbox.scrollTop);\n                }\n            }, { passive: true });\n            var sidebarScrollTop = sessionStorage.getItem('sidebar-scroll');\n            sessionStorage.removeItem('sidebar-scroll');\n            if (sidebarScrollTop) {\n                // preserve sidebar scroll position when navigating via links within sidebar\n                sidebarScrollbox.scrollTop = sidebarScrollTop;\n            } else {\n                // scroll sidebar to current active section when navigating via \"next/previous chapter\" buttons\n                var activeSection = document.querySelector('#sidebar .active');\n                if (activeSection) {\n                    activeSection.scrollIntoView({ block: 'center' });\n                }\n            }\n        </script>\n\n        <div id=\"page-wrapper\" class=\"page-wrapper\">\n\n            <div class=\"page\">\n                                <div id=\"menu-bar-hover-placeholder\"></div>\n                <div id=\"menu-bar\" class=\"menu-bar\" style=\"top: 0px;\">\n                    <div class=\"left-buttons\">\n                        <label id=\"sidebar-toggle\" class=\"icon-button\" for=\"sidebar-toggle-anchor\" title=\"Toggle Table of Contents\" aria-label=\"Toggle Table of Contents\" aria-controls=\"sidebar\" aria-expanded=\"true\">\n                            <i class=\"fa fa-bars\"></i>\n                        </label>\n                        <button id=\"theme-toggle\" class=\"icon-button\" type=\"button\" title=\"Change theme\" aria-label=\"Change theme\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-controls=\"theme-list\">\n                            <i class=\"fa fa-paint-brush\"></i>\n                        </button>\n                        <ul id=\"theme-list\" class=\"theme-popup\" aria-label=\"Themes\" role=\"menu\">\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme theme-selected\" id=\"light\">Light</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"rust\">Rust</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"coal\">Coal</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"navy\">Navy</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"ayu\">Ayu</button></li>\n                        </ul>\n                        <button id=\"search-toggle\" class=\"icon-button\" type=\"button\" title=\"Search. (Shortkey: s)\" aria-label=\"Toggle Searchbar\" aria-expanded=\"false\" aria-keyshortcuts=\"S\" aria-controls=\"searchbar\">\n                            <i class=\"fa fa-search\"></i>\n                        </button>\n                    </div>\n\n                    <h1 class=\"menu-title\">The Rust Reference</h1>\n\n                    <div class=\"right-buttons\">\n                        <a href=\"../print.html\" title=\"Print this book\" aria-label=\"Print this book\">\n                            <i id=\"print-button\" class=\"fa fa-print\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/reference/\" title=\"Git repository\" aria-label=\"Git repository\">\n                            <i id=\"git-repository-button\" class=\"fa fa-github\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/reference/edit/master/src/items/functions.md\" title=\"Suggest an edit\" aria-label=\"Suggest an edit\">\n                            <i id=\"git-edit-button\" class=\"fa fa-edit\"></i>\n                        </a>\n\n                    </div>\n                </div>\n\n                <div id=\"search-wrapper\" class=\"hidden\">\n                    <form id=\"searchbar-outer\" class=\"searchbar-outer\">\n                        <input type=\"search\" id=\"searchbar\" name=\"searchbar\" placeholder=\"Search this book ...\" aria-controls=\"searchresults-outer\" aria-describedby=\"searchresults-header\">\n                    </form>\n                    <div id=\"searchresults-outer\" class=\"searchresults-outer hidden\">\n                        <div id=\"searchresults-header\" class=\"searchresults-header\"></div>\n                        <ul id=\"searchresults\">\n                        </ul>\n                    </div>\n                </div>\n\n                <!-- Apply ARIA attributes after the sidebar and the sidebar toggle button are added to the DOM -->\n                <script>\n                    document.getElementById('sidebar-toggle').setAttribute('aria-expanded', sidebar === 'visible');\n                    document.getElementById('sidebar').setAttribute('aria-hidden', sidebar !== 'visible');\n                    Array.from(document.querySelectorAll('#sidebar a')).forEach(function(link) {\n                        link.setAttribute('tabIndex', sidebar === 'visible' ? 0 : -1);\n                    });\n                </script>\n\n                <div id=\"content\" class=\"content\">\n                    <main>\n                        <h1 id=\"functions\"><a class=\"header\" href=\"#functions\">Functions</a></h1>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>Function</em> :<br>\n&nbsp;&nbsp; <em>FunctionQualifiers</em> <code class=\"hljs\">fn</code> <a href=\"../identifiers.html\">IDENTIFIER</a>&nbsp;<a href=\"generics.html\"><em>GenericParams</em></a><sup>?</sup><br>\n&nbsp;&nbsp; &nbsp;&nbsp; <code class=\"hljs\">(</code> <em>FunctionParameters</em><sup>?</sup> <code class=\"hljs\">)</code><br>\n&nbsp;&nbsp; &nbsp;&nbsp; <em>FunctionReturnType</em><sup>?</sup> <a href=\"generics.html#where-clauses\"><em>WhereClause</em></a><sup>?</sup><br>\n&nbsp;&nbsp; &nbsp;&nbsp; ( <a href=\"../expressions/block-expr.html\"><em>BlockExpression</em></a> | <code class=\"hljs\">;</code> )</p>\n<p><em>FunctionQualifiers</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">const</code><sup>?</sup> <code class=\"hljs\">async</code><sup class=\"footnote-reference\"><a href=\"#async-edition\">1</a></sup><sup>?</sup> <code class=\"hljs\">unsafe</code><sup>?</sup> (<code class=\"hljs\">extern</code> <em>Abi</em><sup>?</sup>)<sup>?</sup></p>\n<p><em>Abi</em> :<br>\n&nbsp;&nbsp; <a href=\"../tokens.html#string-literals\">STRING_LITERAL</a> | <a href=\"../tokens.html#raw-string-literals\">RAW_STRING_LITERAL</a></p>\n<p><em>FunctionParameters</em> :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; <em>SelfParam</em> <code class=\"hljs\">,</code><sup>?</sup><br>\n&nbsp;&nbsp; | (<em>SelfParam</em> <code class=\"hljs\">,</code>)<sup>?</sup> <em>FunctionParam</em> (<code class=\"hljs\">,</code> <em>FunctionParam</em>)<sup>*</sup> <code class=\"hljs\">,</code><sup>?</sup></p>\n<p><em>SelfParam</em> :<br>\n&nbsp;&nbsp; <a href=\"../attributes.html\"><em>OuterAttribute</em></a><sup>*</sup> ( <em>ShorthandSelf</em> | <em>TypedSelf</em> )</p>\n<p><em>ShorthandSelf</em> :<br>\n&nbsp;&nbsp;  (<code class=\"hljs\">&amp;</code> | <code class=\"hljs\">&amp;</code> <a href=\"../trait-bounds.html\"><em>Lifetime</em></a>)<sup>?</sup> <code class=\"hljs\">mut</code><sup>?</sup> <code class=\"hljs\">self</code></p>\n<p><em>TypedSelf</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">mut</code><sup>?</sup> <code class=\"hljs\">self</code> <code class=\"hljs\">:</code> <a href=\"../types.html#type-expressions\"><em>Type</em></a></p>\n<p><em>FunctionParam</em> :<br>\n&nbsp;&nbsp; <a href=\"../attributes.html\"><em>OuterAttribute</em></a><sup>*</sup> (\n<em>FunctionParamPattern</em> | <code class=\"hljs\">...</code> | <a href=\"../types.html#type-expressions\"><em>Type</em></a> <sup class=\"footnote-reference\"><a href=\"#fn-param-2015\">2</a></sup>\n)</p>\n<p><em>FunctionParamPattern</em> :<br>\n&nbsp;&nbsp; <a href=\"../patterns.html\"><em>PatternNoTopAlt</em></a> <code class=\"hljs\">:</code> ( <a href=\"../types.html#type-expressions\"><em>Type</em></a> | <code class=\"hljs\">...</code> )</p>\n<p><em>FunctionReturnType</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">-&gt;</code> <a href=\"../types.html#type-expressions\"><em>Type</em></a></p>\n<div class=\"footnote-definition\" id=\"async-edition\"><sup class=\"footnote-definition-label\">1</sup>\n<p>The <code class=\"hljs\">async</code> qualifier is not allowed in the 2015 edition.</p>\n</div>\n<div class=\"footnote-definition\" id=\"fn-param-2015\"><sup class=\"footnote-definition-label\">2</sup>\n<p>Function parameters with only a type are only allowed\nin an associated function of a <a href=\"traits.html\">trait item</a> in the 2015 edition.</p>\n</div>\n</blockquote>\n<p>A <em>function</em> consists of a <a href=\"../expressions/block-expr.html\">block</a>, along with a name, a set of parameters, and an output type.\nOther than a name, all these are optional.\nFunctions are declared with the keyword <code class=\"hljs\">fn</code>.\nFunctions may declare a set of <em>input</em> <a href=\"../variables.html\"><em>variables</em></a> as parameters, through which the caller passes arguments into the function, and the <em>output</em> <a href=\"../types.html#type-expressions\"><em>type</em></a> of the value the function will return to its caller on completion.\nIf the output type is not explicitly stated, it is the <a href=\"../types/tuple.html\">unit type</a>.</p>\n<p>When referred to, a <em>function</em> yields a first-class <em>value</em> of the corresponding zero-sized <a href=\"../types/function-item.html\"><em>function item type</em></a>, which when called evaluates to a direct call to the function.</p>\n<p>For example, this is a simple function:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">answer_to_life_the_universe_and_everything</span></span>() -&gt; <span class=\"hljs-built_in\">i32</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">42</span>;\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"function-parameters\"><a class=\"header\" href=\"#function-parameters\">Function parameters</a></h2>\n<p>Function parameters are irrefutable <a href=\"../patterns.html\">patterns</a>, so any pattern that is valid in\nan else-less <code class=\"hljs\">let</code> binding is also valid as a parameter:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">first</span></span>((value, _): (<span class=\"hljs-built_in\">i32</span>, <span class=\"hljs-built_in\">i32</span>)) -&gt; <span class=\"hljs-built_in\">i32</span> { value }\n<span class=\"boring\">}</span></code></pre></pre>\n<p>If the first parameter is a <em>SelfParam</em>, this indicates that the function is a\n<a href=\"associated-items.html#methods\">method</a>. Functions with a self parameter may only appear as an <a href=\"associated-items.html#associated-functions-and-methods\">associated\nfunction</a> in a <a href=\"traits.html\">trait</a> or <a href=\"implementations.html\">implementation</a>.</p>\n<p>A parameter with the <code class=\"hljs\">...</code> token indicates a <a href=\"external-blocks.html#variadic-functions\">variadic function</a>, and may only\nbe used as the last parameter of an <a href=\"external-blocks.html\">external block</a> function. The variadic\nparameter may have an optional identifier, such as <code class=\"hljs\">args: ...</code>.</p>\n<h2 id=\"function-body\"><a class=\"header\" href=\"#function-body\">Function body</a></h2>\n<p>The block of a function is conceptually wrapped in a block that binds the\nargument patterns and then <code class=\"hljs\">return</code>s the value of the function's block. This\nmeans that the tail expression of the block, if evaluated, ends up being\nreturned to the caller. As usual, an explicit return expression within\nthe body of the function will short-cut that implicit return, if reached.</p>\n<p>For example, the function above behaves as if it was written as:</p>\n<!-- ignore: example expansion -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-comment\">// argument_0 is the actual first argument passed from the caller</span>\n<span class=\"hljs-keyword\">let</span> (value, _) = argument_0;\n<span class=\"hljs-keyword\">return</span> {\n    value\n};</code></pre>\n<p>Functions without a body block are terminated with a semicolon. This form\nmay only appear in a <a href=\"traits.html\">trait</a> or <a href=\"external-blocks.html\">external block</a>.</p>\n<h2 id=\"generic-functions\"><a class=\"header\" href=\"#generic-functions\">Generic functions</a></h2>\n<p>A <em>generic function</em> allows one or more <em>parameterized types</em> to appear in its\nsignature. Each type parameter must be explicitly declared in an\nangle-bracket-enclosed and comma-separated list, following the function name.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">// foo is generic over A and B</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>&lt;A, B&gt;(x: A, y: B) {\n<span class=\"boring\">}\n</span><span class=\"boring\">}</span></code></pre></pre>\n<p>Inside the function signature and body, the name of the type parameter can be\nused as a type name. <a href=\"traits.html\">Trait</a> bounds can be specified for type\nparameters to allow methods with that trait to be called on values of that\ntype. This is specified using the <code class=\"hljs\">where</code> syntax:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::fmt::<span class=\"hljs-built_in\">Debug</span>;\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>&lt;T&gt;(x: T) <span class=\"hljs-keyword\">where</span> T: <span class=\"hljs-built_in\">Debug</span> {\n<span class=\"boring\">}\n</span><span class=\"boring\">}</span></code></pre></pre>\n<p>When a generic function is referenced, its type is instantiated based on the\ncontext of the reference. For example, calling the <code class=\"hljs\">foo</code> function here:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">use</span> std::fmt::<span class=\"hljs-built_in\">Debug</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>&lt;T&gt;(x: &amp;[T]) <span class=\"hljs-keyword\">where</span> T: <span class=\"hljs-built_in\">Debug</span> {\n    <span class=\"hljs-comment\">// details elided</span>\n}\n\nfoo(&amp;[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>]);\n<span class=\"boring\">}</span></code></pre></pre>\n<p>will instantiate type parameter <code class=\"hljs\">T</code> with <code class=\"hljs\">i32</code>.</p>\n<p>The type parameters can also be explicitly supplied in a trailing <a href=\"../paths.html\">path</a>\ncomponent after the function name. This might be necessary if there is not\nsufficient context to determine the type parameters. For example,\n<code class=\"hljs\">mem::size_of::&lt;u32&gt;() == 4</code>.</p>\n<h2 id=\"extern-function-qualifier\"><a class=\"header\" href=\"#extern-function-qualifier\">Extern function qualifier</a></h2>\n<p>The <code class=\"hljs\">extern</code> function qualifier allows providing function <em>definitions</em> that can\nbe called with a particular ABI:</p>\n<!-- ignore: fake ABI -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">extern</span> <span class=\"hljs-string\">\"ABI\"</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>() { <span class=\"hljs-comment\">/* ... */</span> }</code></pre>\n<p>These are often used in combination with <a href=\"external-blocks.html\">external block</a> items which provide\nfunction <em>declarations</em> that can be used to call functions without providing\ntheir <em>definition</em>:</p>\n<!-- ignore: fake ABI -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">extern</span> <span class=\"hljs-string\">\"ABI\"</span> {\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>(); <span class=\"hljs-comment\">/* no body */</span>\n}\n<span class=\"hljs-keyword\">unsafe</span> { foo() }</code></pre>\n<p>When <code class=\"hljs\">\"extern\" Abi?*</code> is omitted from <code class=\"hljs\">FunctionQualifiers</code> in function items,\nthe ABI <code class=\"hljs\">\"Rust\"</code> is assigned. For example:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>() {}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>is equivalent to:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">extern</span> <span class=\"hljs-string\">\"Rust\"</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>() {}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Functions can be called by foreign code, and using an ABI that\ndiffers from Rust allows, for example, to provide functions that can be\ncalled from other programming languages like C:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">// Declares a function with the \"C\" ABI</span>\n<span class=\"hljs-keyword\">extern</span> <span class=\"hljs-string\">\"C\"</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new_i32</span></span>() -&gt; <span class=\"hljs-built_in\">i32</span> { <span class=\"hljs-number\">0</span> }\n\n<span class=\"hljs-comment\">// Declares a function with the \"stdcall\" ABI</span>\n<span class=\"boring\"><span class=\"hljs-meta\">#[cfg(target_arch = <span class=\"hljs-meta-string\">\"x86_64\"</span>)]</span>\n</span><span class=\"hljs-keyword\">extern</span> <span class=\"hljs-string\">\"stdcall\"</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new_i32_stdcall</span></span>() -&gt; <span class=\"hljs-built_in\">i32</span> { <span class=\"hljs-number\">0</span> }\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Just as with <a href=\"external-blocks.html\">external block</a>, when the <code class=\"hljs\">extern</code> keyword is used and the <code class=\"hljs\">\"ABI\"</code>\nis omitted, the ABI used defaults to <code class=\"hljs\">\"C\"</code>. That is, this:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">extern</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new_i32</span></span>() -&gt; <span class=\"hljs-built_in\">i32</span> { <span class=\"hljs-number\">0</span> }\n<span class=\"hljs-keyword\">let</span> fptr: <span class=\"hljs-keyword\">extern</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span></span>() -&gt; <span class=\"hljs-built_in\">i32</span> = new_i32;\n<span class=\"boring\">}</span></code></pre></pre>\n<p>is equivalent to:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">extern</span> <span class=\"hljs-string\">\"C\"</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new_i32</span></span>() -&gt; <span class=\"hljs-built_in\">i32</span> { <span class=\"hljs-number\">0</span> }\n<span class=\"hljs-keyword\">let</span> fptr: <span class=\"hljs-keyword\">extern</span> <span class=\"hljs-string\">\"C\"</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span></span>() -&gt; <span class=\"hljs-built_in\">i32</span> = new_i32;\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Functions with an ABI that differs from <code class=\"hljs\">\"Rust\"</code> do not support unwinding in the\nexact same way that Rust does. Therefore, unwinding past the end of functions\nwith such ABIs causes the process to abort.</p>\n<blockquote>\n<p><strong>Note</strong>: The LLVM backend of the <code class=\"hljs\">rustc</code> implementation\naborts the process by executing an illegal instruction.</p>\n</blockquote>\n<h2 id=\"const-functions\"><a class=\"header\" href=\"#const-functions\">Const functions</a></h2>\n<p>Functions qualified with the <code class=\"hljs\">const</code> keyword are <a href=\"../const_eval.html#const-functions\">const functions</a>, as are\n<a href=\"structs.html\">tuple struct</a> and <a href=\"enumerations.html\">tuple variant</a> constructors. <em>Const functions</em>  can be\ncalled from within <a href=\"../const_eval.html#const-context\">const contexts</a>.</p>\n<p>Const functions may use the <a href=\"#extern-function-qualifier\"><code class=\"hljs\">extern</code></a> function qualifier, but only with the <code class=\"hljs\">\"Rust\"</code> and <code class=\"hljs\">\"C\"</code> ABIs.</p>\n<p>Const functions are not allowed to be <a href=\"#async-functions\">async</a>.</p>\n<h2 id=\"async-functions\"><a class=\"header\" href=\"#async-functions\">Async functions</a></h2>\n<p>Functions may be qualified as async, and this can also be combined with the\n<code class=\"hljs\">unsafe</code> qualifier:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">regular_example</span></span>() { }\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">unsafe</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">unsafe_example</span></span>() { }\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Async functions do no work when called: instead, they\ncapture their arguments into a future. When polled, that future will\nexecute the function's body.</p>\n<p>An async function is roughly equivalent to a function\nthat returns <a href=\"../types/impl-trait.html\"><code class=\"hljs\">impl Future</code></a> and with an <a href=\"../expressions/block-expr.html#async-blocks\"><code class=\"hljs\">async move</code> block</a> as\nits body:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">// Source</span>\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">example</span></span>(x: &amp;<span class=\"hljs-built_in\">str</span>) -&gt; <span class=\"hljs-built_in\">usize</span> {\n    x.len()\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>is roughly equivalent to:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::future::Future;\n</span><span class=\"hljs-comment\">// Desugared</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">example</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(x: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>) -&gt; <span class=\"hljs-keyword\">impl</span> Future&lt;Output = <span class=\"hljs-built_in\">usize</span>&gt; + <span class=\"hljs-symbol\">'a</span> {\n    <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">move</span> { x.len() }\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>The actual desugaring is more complex:</p>\n<ul>\n<li>The return type in the desugaring is assumed to capture all lifetime\nparameters from the <code class=\"hljs\">async fn</code> declaration. This can be seen in the\ndesugared example above, which explicitly outlives, and hence\ncaptures, <code class=\"hljs\">'a</code>.</li>\n<li>The <a href=\"../expressions/block-expr.html#async-blocks\"><code class=\"hljs\">async move</code> block</a> in the body captures all function\nparameters, including those that are unused or bound to a <code class=\"hljs\">_</code>\npattern. This ensures that function parameters are dropped in the\nsame order as they would be if the function were not async, except\nthat the drop occurs when the returned future has been fully\nawaited.</li>\n</ul>\n<p>For more information on the effect of async, see <a href=\"../expressions/block-expr.html#async-blocks\"><code class=\"hljs\">async</code> blocks</a>.</p>\n<blockquote>\n<p><strong>Edition differences</strong>: Async functions are only available beginning with\nRust 2018.</p>\n</blockquote>\n<h3 id=\"combining-async-and-unsafe\"><a class=\"header\" href=\"#combining-async-and-unsafe\">Combining <code>async</code> and <code>unsafe</code></a></h3>\n<p>It is legal to declare a function that is both async and unsafe. The\nresulting function is unsafe to call and (like any async function)\nreturns a future. This future is just an ordinary future and thus an\n<code class=\"hljs\">unsafe</code> context is not required to \"await\" it:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">// Returns a future that, when awaited, dereferences `x`.</span>\n<span class=\"hljs-comment\">//</span>\n<span class=\"hljs-comment\">// Soundness condition: `x` must be safe to dereference until</span>\n<span class=\"hljs-comment\">// the resulting future is complete.</span>\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">unsafe</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">unsafe_example</span></span>(x: *<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">i32</span>) -&gt; <span class=\"hljs-built_in\">i32</span> {\n  *x\n}\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">safe_example</span></span>() {\n    <span class=\"hljs-comment\">// An `unsafe` block is required to invoke the function initially:</span>\n    <span class=\"hljs-keyword\">let</span> p = <span class=\"hljs-number\">22</span>;\n    <span class=\"hljs-keyword\">let</span> future = <span class=\"hljs-keyword\">unsafe</span> { unsafe_example(&amp;p) };\n\n    <span class=\"hljs-comment\">// But no `unsafe` block required here. This will</span>\n    <span class=\"hljs-comment\">// read the value of `p`:</span>\n    <span class=\"hljs-keyword\">let</span> q = future.<span class=\"hljs-keyword\">await</span>;\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Note that this behavior is a consequence of the desugaring to a\nfunction that returns an <code class=\"hljs\">impl Future</code> -- in this case, the function\nwe desugar to is an <code class=\"hljs\">unsafe</code> function, but the return value remains\nthe same.</p>\n<p>Unsafe is used on an async function in precisely the same way that it\nis used on other functions: it indicates that the function imposes\nsome additional obligations on its caller to ensure soundness. As in any\nother unsafe function, these conditions may extend beyond the initial\ncall itself -- in the snippet above, for example, the <code class=\"hljs\">unsafe_example</code>\nfunction took a pointer <code class=\"hljs\">x</code> as argument, and then (when awaited)\ndereferenced that pointer. This implies that <code class=\"hljs\">x</code> would have to be\nvalid until the future is finished executing, and it is the caller's\nresponsibility to ensure that.</p>\n<h2 id=\"attributes-on-functions\"><a class=\"header\" href=\"#attributes-on-functions\">Attributes on functions</a></h2>\n<p><a href=\"../attributes.html\">Outer attributes</a> are allowed on functions. <a href=\"../attributes.html\">Inner\nattributes</a> are allowed directly after the <code class=\"hljs\">{</code> inside its <a href=\"../expressions/block-expr.html\">block</a>.</p>\n<p>This example shows an inner attribute on a function. The function is documented\nwith just the word \"Example\".</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">documented</span></span>() {\n    <span class=\"hljs-meta\">#![doc = <span class=\"hljs-meta-string\">\"Example\"</span>]</span>\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<blockquote>\n<p>Note: Except for lints, it is idiomatic to only use outer attributes on\nfunction items.</p>\n</blockquote>\n<p>The attributes that have meaning on a function are <a href=\"../conditional-compilation.html#the-cfg-attribute\"><code class=\"hljs\">cfg</code></a>, <a href=\"../conditional-compilation.html#the-cfg_attr-attribute\"><code class=\"hljs\">cfg_attr</code></a>, <a href=\"../attributes/diagnostics.html#the-deprecated-attribute\"><code class=\"hljs\">deprecated</code></a>,\n<a href=\"../../rustdoc/the-doc-attribute.html\"><code class=\"hljs\">doc</code></a>, <a href=\"../abi.html#the-export_name-attribute\"><code class=\"hljs\">export_name</code></a>, <a href=\"../abi.html#the-link_section-attribute\"><code class=\"hljs\">link_section</code></a>, <a href=\"../abi.html#the-no_mangle-attribute\"><code class=\"hljs\">no_mangle</code></a>, <a href=\"../attributes/diagnostics.html#lint-check-attributes\">the lint check\nattributes</a>, <a href=\"../attributes/diagnostics.html#the-must_use-attribute\"><code class=\"hljs\">must_use</code></a>, <a href=\"../procedural-macros.html\">the procedural macro attributes</a>, <a href=\"../attributes/testing.html\">the testing\nattributes</a>, and <a href=\"../attributes/codegen.html#optimization-hints\">the optimization hint attributes</a>. Functions also accept\nattributes macros.</p>\n<h2 id=\"attributes-on-function-parameters\"><a class=\"header\" href=\"#attributes-on-function-parameters\">Attributes on function parameters</a></h2>\n<p><a href=\"../attributes.html\">Outer attributes</a> are allowed on function parameters and the\npermitted <a href=\"../attributes.html#built-in-attributes-index\">built-in attributes</a> are restricted to <code class=\"hljs\">cfg</code>, <code class=\"hljs\">cfg_attr</code>, <code class=\"hljs\">allow</code>,\n<code class=\"hljs\">warn</code>, <code class=\"hljs\">deny</code>, and <code class=\"hljs\">forbid</code>.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">len</span></span>(\n    <span class=\"hljs-meta\">#[cfg(windows)]</span> slice: &amp;[<span class=\"hljs-built_in\">u16</span>],\n    <span class=\"hljs-meta\">#[cfg(not(windows))]</span> slice: &amp;[<span class=\"hljs-built_in\">u8</span>],\n) -&gt; <span class=\"hljs-built_in\">usize</span> {\n    slice.len()\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Inert helper attributes used by procedural macro attributes applied to items are also\nallowed but be careful to not include these inert attributes in your final <code class=\"hljs\">TokenStream</code>.</p>\n<p>For example, the following code defines an inert <code class=\"hljs\">some_inert_attribute</code> attribute that\nis not formally defined anywhere and the <code class=\"hljs\">some_proc_macro_attribute</code> procedural macro is\nresponsible for detecting its presence and removing it from the output token stream.</p>\n<!-- ignore: requires proc macro -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-meta\">#[some_proc_macro_attribute]</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo_oof</span></span>(<span class=\"hljs-meta\">#[some_inert_attribute]</span> arg: <span class=\"hljs-built_in\">u8</span>) {\n}</code></pre>\n\n                    </main>\n\n                    <nav class=\"nav-wrapper\" aria-label=\"Page navigation\">\n                        <!-- Mobile navigation buttons -->\n                            <a rel=\"prev\" href=\"../items/use-declarations.html\" class=\"mobile-nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                                <i class=\"fa fa-angle-left\"></i>\n                            </a>\n\n                            <a rel=\"next prefetch\" href=\"../items/type-aliases.html\" class=\"mobile-nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                                <i class=\"fa fa-angle-right\"></i>\n                            </a>\n\n                        <div style=\"clear: both\"></div>\n                    </nav>\n                </div>\n            </div>\n\n            <nav class=\"nav-wide-wrapper\" aria-label=\"Page navigation\">\n                    <a rel=\"prev\" href=\"../items/use-declarations.html\" class=\"nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                        <i class=\"fa fa-angle-left\"></i>\n                    </a>\n\n                    <a rel=\"next prefetch\" href=\"../items/type-aliases.html\" class=\"nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                        <i class=\"fa fa-angle-right\"></i>\n                    </a>\n            </nav>\n\n        </div>\n\n\n\n\n        <script>\n            window.playground_copyable = true;\n        </script>\n\n\n        <script src=\"../elasticlunr.min.js\"></script>\n        <script src=\"../mark.min.js\"></script>\n        <script src=\"../searcher.js\"></script>\n\n        <script src=\"../clipboard.min.js\"></script>\n        <script src=\"../highlight.js\"></script>\n        <script src=\"../book.js\"></script>\n\n        <!-- Custom JS scripts -->\n\n\n    </div>\n    \n\n</body></html>",
	"crawlDate": "2024-07-28T05:12:51.831Z"
}