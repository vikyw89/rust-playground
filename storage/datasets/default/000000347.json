{
	"title": "panic in std - Rust",
	"url": "https://doc.rust-lang.org/stable/std/macro.panic.html",
	"markdown": "# panic in std - Rust\n\n## Macro [std](index.html)::[panic](#)\n\n1.0.0 · [source](about:blank/src/std/macros.rs.html#14-20) ·\n\n```\nmacro_rules! panic {\n    ($($arg:tt)*) => { ... };\n}\n```\n\nExpand description\n\nPanics the current thread.\n\nThis allows a program to terminate immediately and provide feedback to the caller of the program.\n\nThis macro is the perfect way to assert conditions in example code and in tests. `panic!` is closely tied with the `unwrap` method of both [`Option`](about:blank/option/enum.Option.html#method.unwrap \"method std::option::Option::unwrap\") and [`Result`](about:blank/result/enum.Result.html#method.unwrap \"method std::result::Result::unwrap\") enums. Both implementations call `panic!` when they are set to [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\") or [`Err`](about:blank/result/enum.Result.html#variant.Err \"variant std::result::Result::Err\") variants.\n\nWhen using `panic!()` you can specify a string payload that is built using [formatting syntax](../std/fmt/index.html). That payload is used when injecting the panic into the calling Rust thread, causing the thread to panic entirely.\n\nThe behavior of the default `std` hook, i.e. the code that runs directly after the panic is invoked, is to print the message payload to `stderr` along with the file/line/column information of the `panic!()` call. You can override the panic hook using [`std::panic::set_hook()`](../std/panic/fn.set_hook.html). Inside the hook a panic can be accessed as a `&dyn Any + Send`, which contains either a `&str` or `String` for regular `panic!()` invocations. (Whether a particular invocation contains the payload at type `&str` or `String` is unspecified and can change.) To panic with a value of another other type, [`panic_any`](../std/panic/fn.panic_any.html) can be used.\n\nSee also the macro [`compile_error!`](macro.compile_error.html \"macro std::compile_error\"), for raising errors during compilation.\n\n## [§](#when-to-use-panic-vs-result)When to use `panic!` vs `Result`\n\nThe Rust language provides two complementary systems for constructing / representing, reporting, propagating, reacting to, and discarding errors. These responsibilities are collectively known as “error handling.” `panic!` and `Result` are similar in that they are each the primary interface of their respective error handling systems; however, the meaning these interfaces attach to their errors and the responsibilities they fulfill within their respective error handling systems differ.\n\nThe `panic!` macro is used to construct errors that represent a bug that has been detected in your program. With `panic!` you provide a message that describes the bug and the language then constructs an error with that message, reports it, and propagates it for you.\n\n`Result` on the other hand is used to wrap other types that represent either the successful result of some computation, `Ok(T)`, or error types that represent an anticipated runtime failure mode of that computation, `Err(E)`. `Result` is used alongside user defined types which represent the various anticipated runtime failure modes that the associated computation could encounter. `Result` must be propagated manually, often with the help of the `?` operator and `Try` trait, and they must be reported manually, often with the help of the `Error` trait.\n\nFor more detailed information about error handling check out the [book](../book/ch09-00-error-handling.html) or the [`std::result`](../std/result/index.html) module docs.\n\n## [§](#current-implementation)Current implementation\n\nIf the main thread panics it will terminate all your threads and end your program with code `101`.\n\n## [§](#editions)Editions\n\nBehavior of the panic macros changed over editions.\n\n### [§](#2021-and-later)2021 and later\n\nIn Rust 2021 and later, `panic!` always requires a format string and the applicable format arguments, and is the same in `core` and `std`. Use [`std::panic::panic_any(x)`](../std/panic/fn.panic_any.html) to panic with an arbitrary payload.\n\n### [§](#2018-and-2015)2018 and 2015\n\nIn Rust Editions prior to 2021, `std::panic!(x)` with a single argument directly uses that argument as a payload. This is true even if the argument is a string literal. For example, `panic!(\"problem: {reason}\")` panics with a payload of literally `\"problem: {reason}\"` (a `&'static str`).\n\n`core::panic!(x)` with a single argument requires that `x` be `&str`, but otherwise behaves like `std::panic!`. In particular, the string need not be a literal, and is not interpreted as a format string.\n\n## [§](#examples)Examples\n\n[ⓘ](# \"This example panics\")\n\n```\npanic!();\npanic!(\"this is a terrible mistake!\");\npanic!(\"this is a {} {message}\", \"fancy\", message = \"message\");\nstd::panic::panic_any(4); // panic with the value of 4 to be collected elsewhere\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Ballow(unreachable_code)%5D%0Afn+main()+%7B%0A++++panic!();%0A++++panic!(%22this+is+a+terrible+mistake!%22);%0A++++panic!(%22this+is+a+%7B%7D+%7Bmessage%7D%22,+%22fancy%22,+message+=+%22message%22);%0A++++std::panic::panic_any(4);+//+panic+with+the+value+of+4+to+be+collected+elsewhere%0A%7D&edition=2021)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Panics the current thread.\"><title>panic in std - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../\" data-static-root-path=\"../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc macro\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../std/index.html\"><img class=\"rust-logo\" src=\"../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../std/index.html\"><img class=\"rust-logo\" src=\"../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><div class=\"sidebar-elems\"><h3><a href=\"index.html#primitives\">Primitive Types</a></h3><ul class=\"block primitive\"><li><a href=\"primitive.array.html\">array</a></li><li><a href=\"primitive.bool.html\">bool</a></li><li><a href=\"primitive.char.html\">char</a></li><li><a href=\"primitive.f128.html\">f128</a></li><li><a href=\"primitive.f16.html\">f16</a></li><li><a href=\"primitive.f32.html\">f32</a></li><li><a href=\"primitive.f64.html\">f64</a></li><li><a href=\"primitive.fn.html\">fn</a></li><li><a href=\"primitive.i128.html\">i128</a></li><li><a href=\"primitive.i16.html\">i16</a></li><li><a href=\"primitive.i32.html\">i32</a></li><li><a href=\"primitive.i64.html\">i64</a></li><li><a href=\"primitive.i8.html\">i8</a></li><li><a href=\"primitive.isize.html\">isize</a></li><li><a href=\"primitive.never.html\">never</a></li><li><a href=\"primitive.pointer.html\">pointer</a></li><li><a href=\"primitive.reference.html\">reference</a></li><li><a href=\"primitive.slice.html\">slice</a></li><li><a href=\"primitive.str.html\">str</a></li><li><a href=\"primitive.tuple.html\">tuple</a></li><li><a href=\"primitive.u128.html\">u128</a></li><li><a href=\"primitive.u16.html\">u16</a></li><li><a href=\"primitive.u32.html\">u32</a></li><li><a href=\"primitive.u64.html\">u64</a></li><li><a href=\"primitive.u8.html\">u8</a></li><li><a href=\"primitive.unit.html\">unit</a></li><li><a href=\"primitive.usize.html\">usize</a></li></ul><h3><a href=\"index.html#modules\">Modules</a></h3><ul class=\"block mod\"><li><a href=\"alloc/index.html\">alloc</a></li><li><a href=\"any/index.html\">any</a></li><li><a href=\"arch/index.html\">arch</a></li><li><a href=\"array/index.html\">array</a></li><li><a href=\"ascii/index.html\">ascii</a></li><li><a href=\"assert_matches/index.html\">assert_matches</a></li><li><a href=\"async_iter/index.html\">async_iter</a></li><li><a href=\"backtrace/index.html\">backtrace</a></li><li><a href=\"borrow/index.html\">borrow</a></li><li><a href=\"boxed/index.html\">boxed</a></li><li><a href=\"cell/index.html\">cell</a></li><li><a href=\"char/index.html\">char</a></li><li><a href=\"clone/index.html\">clone</a></li><li><a href=\"cmp/index.html\">cmp</a></li><li><a href=\"collections/index.html\">collections</a></li><li><a href=\"convert/index.html\">convert</a></li><li><a href=\"default/index.html\">default</a></li><li><a href=\"env/index.html\">env</a></li><li><a href=\"error/index.html\">error</a></li><li><a href=\"f128/index.html\">f128</a></li><li><a href=\"f16/index.html\">f16</a></li><li><a href=\"f32/index.html\">f32</a></li><li><a href=\"f64/index.html\">f64</a></li><li><a href=\"ffi/index.html\">ffi</a></li><li><a href=\"fmt/index.html\">fmt</a></li><li><a href=\"fs/index.html\">fs</a></li><li><a href=\"future/index.html\">future</a></li><li><a href=\"hash/index.html\">hash</a></li><li><a href=\"hint/index.html\">hint</a></li><li><a href=\"i128/index.html\">i128</a></li><li><a href=\"i16/index.html\">i16</a></li><li><a href=\"i32/index.html\">i32</a></li><li><a href=\"i64/index.html\">i64</a></li><li><a href=\"i8/index.html\">i8</a></li><li><a href=\"intrinsics/index.html\">intrinsics</a></li><li><a href=\"io/index.html\">io</a></li><li><a href=\"isize/index.html\">isize</a></li><li><a href=\"iter/index.html\">iter</a></li><li><a href=\"marker/index.html\">marker</a></li><li><a href=\"mem/index.html\">mem</a></li><li><a href=\"net/index.html\">net</a></li><li><a href=\"num/index.html\">num</a></li><li><a href=\"ops/index.html\">ops</a></li><li><a href=\"option/index.html\">option</a></li><li><a href=\"os/index.html\">os</a></li><li><a href=\"panic/index.html\">panic</a></li><li><a href=\"pat/index.html\">pat</a></li><li><a href=\"path/index.html\">path</a></li><li><a href=\"pin/index.html\">pin</a></li><li><a href=\"prelude/index.html\">prelude</a></li><li><a href=\"primitive/index.html\">primitive</a></li><li><a href=\"process/index.html\">process</a></li><li><a href=\"ptr/index.html\">ptr</a></li><li><a href=\"rc/index.html\">rc</a></li><li><a href=\"result/index.html\">result</a></li><li><a href=\"simd/index.html\">simd</a></li><li><a href=\"slice/index.html\">slice</a></li><li><a href=\"str/index.html\">str</a></li><li><a href=\"string/index.html\">string</a></li><li><a href=\"sync/index.html\">sync</a></li><li><a href=\"task/index.html\">task</a></li><li><a href=\"thread/index.html\">thread</a></li><li><a href=\"time/index.html\">time</a></li><li><a href=\"u128/index.html\">u128</a></li><li><a href=\"u16/index.html\">u16</a></li><li><a href=\"u32/index.html\">u32</a></li><li><a href=\"u64/index.html\">u64</a></li><li><a href=\"u8/index.html\">u8</a></li><li><a href=\"usize/index.html\">usize</a></li><li><a href=\"vec/index.html\">vec</a></li></ul><h3><a href=\"index.html#macros\">Macros</a></h3><ul class=\"block macro\"><li><a href=\"macro.assert.html\">assert</a></li><li><a href=\"macro.assert_eq.html\">assert_eq</a></li><li><a href=\"macro.assert_ne.html\">assert_ne</a></li><li><a href=\"macro.cfg.html\">cfg</a></li><li><a href=\"macro.cfg_match.html\">cfg_match</a></li><li><a href=\"macro.column.html\">column</a></li><li><a href=\"macro.compile_error.html\">compile_error</a></li><li><a href=\"macro.concat.html\">concat</a></li><li><a href=\"macro.concat_bytes.html\">concat_bytes</a></li><li><a href=\"macro.concat_idents.html\">concat_idents</a></li><li><a href=\"macro.const_format_args.html\">const_format_args</a></li><li><a href=\"macro.dbg.html\">dbg</a></li><li><a href=\"macro.debug_assert.html\">debug_assert</a></li><li><a href=\"macro.debug_assert_eq.html\">debug_assert_eq</a></li><li><a href=\"macro.debug_assert_ne.html\">debug_assert_ne</a></li><li><a href=\"macro.env.html\">env</a></li><li><a href=\"macro.eprint.html\">eprint</a></li><li><a href=\"macro.eprintln.html\">eprintln</a></li><li><a href=\"macro.file.html\">file</a></li><li><a href=\"macro.format.html\">format</a></li><li><a href=\"macro.format_args.html\">format_args</a></li><li><a href=\"macro.format_args_nl.html\">format_args_nl</a></li><li><a href=\"macro.include.html\">include</a></li><li><a href=\"macro.include_bytes.html\">include_bytes</a></li><li><a href=\"macro.include_str.html\">include_str</a></li><li><a href=\"macro.is_x86_feature_detected.html\">is_x86_feature_detected</a></li><li><a href=\"macro.line.html\">line</a></li><li><a href=\"macro.log_syntax.html\">log_syntax</a></li><li><a href=\"macro.matches.html\">matches</a></li><li><a href=\"macro.module_path.html\">module_path</a></li><li><a href=\"macro.option_env.html\">option_env</a></li><li><a href=\"macro.panic.html\">panic</a></li><li><a href=\"macro.print.html\">print</a></li><li><a href=\"macro.println.html\">println</a></li><li><a href=\"macro.stringify.html\">stringify</a></li><li><a href=\"macro.thread_local.html\">thread_local</a></li><li><a href=\"macro.todo.html\">todo</a></li><li><a href=\"macro.trace_macros.html\">trace_macros</a></li><li><a href=\"macro.try.html\">try</a></li><li><a href=\"macro.unimplemented.html\">unimplemented</a></li><li><a href=\"macro.unreachable.html\">unreachable</a></li><li><a href=\"macro.vec.html\">vec</a></li><li><a href=\"macro.write.html\">write</a></li><li><a href=\"macro.writeln.html\">writeln</a></li></ul><h3><a href=\"index.html#keywords\">Keywords</a></h3><ul class=\"block keyword\"><li><a href=\"keyword.SelfTy.html\">SelfTy</a></li><li><a href=\"keyword.as.html\">as</a></li><li><a href=\"keyword.async.html\">async</a></li><li><a href=\"keyword.await.html\">await</a></li><li><a href=\"keyword.break.html\">break</a></li><li><a href=\"keyword.const.html\">const</a></li><li><a href=\"keyword.continue.html\">continue</a></li><li><a href=\"keyword.crate.html\">crate</a></li><li><a href=\"keyword.dyn.html\">dyn</a></li><li><a href=\"keyword.else.html\">else</a></li><li><a href=\"keyword.enum.html\">enum</a></li><li><a href=\"keyword.extern.html\">extern</a></li><li><a href=\"keyword.false.html\">false</a></li><li><a href=\"keyword.fn.html\">fn</a></li><li><a href=\"keyword.for.html\">for</a></li><li><a href=\"keyword.if.html\">if</a></li><li><a href=\"keyword.impl.html\">impl</a></li><li><a href=\"keyword.in.html\">in</a></li><li><a href=\"keyword.let.html\">let</a></li><li><a href=\"keyword.loop.html\">loop</a></li><li><a href=\"keyword.match.html\">match</a></li><li><a href=\"keyword.mod.html\">mod</a></li><li><a href=\"keyword.move.html\">move</a></li><li><a href=\"keyword.mut.html\">mut</a></li><li><a href=\"keyword.pub.html\">pub</a></li><li><a href=\"keyword.ref.html\">ref</a></li><li><a href=\"keyword.return.html\">return</a></li><li><a href=\"keyword.self.html\">self</a></li><li><a href=\"keyword.static.html\">static</a></li><li><a href=\"keyword.struct.html\">struct</a></li><li><a href=\"keyword.super.html\">super</a></li><li><a href=\"keyword.trait.html\">trait</a></li><li><a href=\"keyword.true.html\">true</a></li><li><a href=\"keyword.type.html\">type</a></li><li><a href=\"keyword.union.html\">union</a></li><li><a href=\"keyword.unsafe.html\">unsafe</a></li><li><a href=\"keyword.use.html\">use</a></li><li><a href=\"keyword.where.html\">where</a></li><li><a href=\"keyword.while.html\">while</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Macro <a href=\"index.html\">std</a>::<wbr><a class=\"macro\" href=\"#\">panic</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../src/std/macros.rs.html#14-20\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><span class=\"macro\">macro_rules!</span> panic {\n    ($(<span class=\"macro-nonterminal\">$arg</span>:tt)<span class=\"kw-2\">*</span>) =&gt; { ... };\n}</pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Panics the current thread.</p>\n<p>This allows a program to terminate immediately and provide feedback\nto the caller of the program.</p>\n<p>This macro is the perfect way to assert conditions in example code and in\ntests. <code>panic!</code> is closely tied with the <code>unwrap</code> method of both\n<a href=\"option/enum.Option.html#method.unwrap\" title=\"method std::option::Option::unwrap\"><code>Option</code></a> and <a href=\"result/enum.Result.html#method.unwrap\" title=\"method std::result::Result::unwrap\"><code>Result</code></a> enums. Both implementations call\n<code>panic!</code> when they are set to <a href=\"option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a> or <a href=\"result/enum.Result.html#variant.Err\" title=\"variant std::result::Result::Err\"><code>Err</code></a> variants.</p>\n<p>When using <code>panic!()</code> you can specify a string payload that is built using\n<a href=\"../std/fmt/index.html\">formatting syntax</a>. That payload is used when injecting the panic into\nthe calling Rust thread, causing the thread to panic entirely.</p>\n<p>The behavior of the default <code>std</code> hook, i.e. the code that runs directly\nafter the panic is invoked, is to print the message payload to\n<code>stderr</code> along with the file/line/column information of the <code>panic!()</code>\ncall. You can override the panic hook using <a href=\"../std/panic/fn.set_hook.html\"><code>std::panic::set_hook()</code></a>.\nInside the hook a panic can be accessed as a <code>&amp;dyn Any + Send</code>,\nwhich contains either a <code>&amp;str</code> or <code>String</code> for regular <code>panic!()</code> invocations.\n(Whether a particular invocation contains the payload at type <code>&amp;str</code> or <code>String</code> is unspecified and can change.)\nTo panic with a value of another other type, <a href=\"../std/panic/fn.panic_any.html\"><code>panic_any</code></a> can be used.</p>\n<p>See also the macro <a href=\"macro.compile_error.html\" title=\"macro std::compile_error\"><code>compile_error!</code></a>, for raising errors during compilation.</p>\n<h2 id=\"when-to-use-panic-vs-result\"><a class=\"doc-anchor\" href=\"#when-to-use-panic-vs-result\">§</a>When to use <code>panic!</code> vs <code>Result</code></h2>\n<p>The Rust language provides two complementary systems for constructing /\nrepresenting, reporting, propagating, reacting to, and discarding errors. These\nresponsibilities are collectively known as “error handling.” <code>panic!</code> and\n<code>Result</code> are similar in that they are each the primary interface of their\nrespective error handling systems; however, the meaning these interfaces attach\nto their errors and the responsibilities they fulfill within their respective\nerror handling systems differ.</p>\n<p>The <code>panic!</code> macro is used to construct errors that represent a bug that has\nbeen detected in your program. With <code>panic!</code> you provide a message that\ndescribes the bug and the language then constructs an error with that message,\nreports it, and propagates it for you.</p>\n<p><code>Result</code> on the other hand is used to wrap other types that represent either\nthe successful result of some computation, <code>Ok(T)</code>, or error types that\nrepresent an anticipated runtime failure mode of that computation, <code>Err(E)</code>.\n<code>Result</code> is used alongside user defined types which represent the various\nanticipated runtime failure modes that the associated computation could\nencounter. <code>Result</code> must be propagated manually, often with the help of the\n<code>?</code> operator and <code>Try</code> trait, and they must be reported manually, often with\nthe help of the <code>Error</code> trait.</p>\n<p>For more detailed information about error handling check out the <a href=\"../book/ch09-00-error-handling.html\">book</a> or the\n<a href=\"../std/result/index.html\"><code>std::result</code></a> module docs.</p>\n<h2 id=\"current-implementation\"><a class=\"doc-anchor\" href=\"#current-implementation\">§</a>Current implementation</h2>\n<p>If the main thread panics it will terminate all your threads and end your\nprogram with code <code>101</code>.</p>\n<h2 id=\"editions\"><a class=\"doc-anchor\" href=\"#editions\">§</a>Editions</h2>\n<p>Behavior of the panic macros changed over editions.</p>\n<h3 id=\"2021-and-later\"><a class=\"doc-anchor\" href=\"#2021-and-later\">§</a>2021 and later</h3>\n<p>In Rust 2021 and later, <code>panic!</code> always requires a format string and\nthe applicable format arguments, and is the same in <code>core</code> and <code>std</code>.\nUse <a href=\"../std/panic/fn.panic_any.html\"><code>std::panic::panic_any(x)</code></a> to\npanic with an arbitrary payload.</p>\n<h3 id=\"2018-and-2015\"><a class=\"doc-anchor\" href=\"#2018-and-2015\">§</a>2018 and 2015</h3>\n<p>In Rust Editions prior to 2021, <code>std::panic!(x)</code> with a single\nargument directly uses that argument as a payload.\nThis is true even if the argument is a string literal.\nFor example, <code>panic!(\"problem: {reason}\")</code> panics with a\npayload of literally <code>\"problem: {reason}\"</code> (a <code>&amp;'static str</code>).</p>\n<p><code>core::panic!(x)</code> with a single argument requires that <code>x</code> be <code>&amp;str</code>,\nbut otherwise behaves like <code>std::panic!</code>. In particular, the string\nneed not be a literal, and is not interpreted as a format string.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">panic!</span>();\n<span class=\"macro\">panic!</span>(<span class=\"string\">\"this is a terrible mistake!\"</span>);\n<span class=\"macro\">panic!</span>(<span class=\"string\">\"this is a {} {message}\"</span>, <span class=\"string\">\"fancy\"</span>, message = <span class=\"string\">\"message\"</span>);\nstd::panic::panic_any(<span class=\"number\">4</span>); <span class=\"comment\">// panic with the value of 4 to be collected elsewhere</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Ballow(unreachable_code)%5D%0Afn+main()+%7B%0A++++panic!();%0A++++panic!(%22this+is+a+terrible+mistake!%22);%0A++++panic!(%22this+is+a+%7B%7D+%7Bmessage%7D%22,+%22fancy%22,+message+=+%22message%22);%0A++++std::panic::panic_any(4);+//+panic+with+the+value+of+4+to+be+collected+elsewhere%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:11:16.775Z"
}