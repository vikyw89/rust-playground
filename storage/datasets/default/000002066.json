{
	"title": "RefMut in std::cell - Rust",
	"url": "https://doc.rust-lang.org/stable/std/cell/struct.RefMut.html",
	"markdown": "# RefMut in std::cell - Rust\n\n## Struct [std](../index.html)::[cell](index.html)::[RefMut](#)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#1836) ·\n\n```\npub struct RefMut<'b, T>where\n    T: 'b + ?Sized,{ /* private fields */ }\n```\n\nExpand description\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#1628)[§](#impl-RefMut%3C'b,+T%3E)\n\n1.8.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#1654-1656)\n\nMakes a new `RefMut` for a component of the borrowed data, e.g., an enum variant.\n\nThe `RefCell` is already mutably borrowed, so this cannot fail.\n\nThis is an associated function that needs to be used as `RefMut::map(...)`. A method would interfere with methods of the same name on the contents of a `RefCell` used through `Deref`.\n\n##### [§](#examples)Examples\n\n```\nuse std::cell::{RefCell, RefMut};\n\nlet c = RefCell::new((5, 'b'));\n{\n    let b1: RefMut<'_, (u32, char)> = c.borrow_mut();\n    let mut b2: RefMut<'_, u32> = RefMut::map(b1, |t| &mut t.0);\n    assert_eq!(*b2, 5);\n    *b2 = 42;\n}\nassert_eq!(*c.borrow(), (42, 'b'));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::%7BRefCell,+RefMut%7D;%0A++++%0A++++let+c+=+RefCell::new((5,+%27b%27));%0A++++%7B%0A++++++++let+b1:+RefMut%3C%27_,+(u32,+char)%3E+=+c.borrow_mut();%0A++++++++let+mut+b2:+RefMut%3C%27_,+u32%3E+=+RefMut::map(b1,+%7Ct%7C+%26mut+t.0);%0A++++++++assert_eq!(*b2,+5);%0A++++++++*b2+=+42;%0A++++%7D%0A++++assert_eq!(*c.borrow(),+(42,+%27b%27));%0A%7D&edition=2021)\n\n1.63.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#1692-1694)\n\nMakes a new `RefMut` for an optional component of the borrowed data. The original guard is returned as an `Err(..)` if the closure returns `None`.\n\nThe `RefCell` is already mutably borrowed, so this cannot fail.\n\nThis is an associated function that needs to be used as `RefMut::filter_map(...)`. A method would interfere with methods of the same name on the contents of a `RefCell` used through `Deref`.\n\n##### [§](#examples-1)Examples\n\n```\nuse std::cell::{RefCell, RefMut};\n\nlet c = RefCell::new(vec![1, 2, 3]);\n\n{\n    let b1: RefMut<'_, Vec<u32>> = c.borrow_mut();\n    let mut b2: Result<RefMut<'_, u32>, _> = RefMut::filter_map(b1, |v| v.get_mut(1));\n\n    if let Ok(mut b2) = b2 {\n        *b2 += 2;\n    }\n}\n\nassert_eq!(*c.borrow(), vec![1, 4, 3]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::%7BRefCell,+RefMut%7D;%0A++++%0A++++let+c+=+RefCell::new(vec!%5B1,+2,+3%5D);%0A++++%0A++++%7B%0A++++++++let+b1:+RefMut%3C%27_,+Vec%3Cu32%3E%3E+=+c.borrow_mut();%0A++++++++let+mut+b2:+Result%3CRefMut%3C%27_,+u32%3E,+_%3E+=+RefMut::filter_map(b1,+%7Cv%7C+v.get_mut(1));%0A++++%0A++++++++if+let+Ok(mut+b2)+=+b2+%7B%0A++++++++++++*b2+%2B=+2;%0A++++++++%7D%0A++++%7D%0A++++%0A++++assert_eq!(*c.borrow(),+vec!%5B1,+4,+3%5D);%0A%7D&edition=2021)\n\n1.35.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#1735-1740)\n\nSplits a `RefMut` into multiple `RefMut`s for different components of the borrowed data.\n\nThe underlying `RefCell` will remain mutably borrowed until both returned `RefMut`s go out of scope.\n\nThe `RefCell` is already mutably borrowed, so this cannot fail.\n\nThis is an associated function that needs to be used as `RefMut::map_split(...)`. A method would interfere with methods of the same name on the contents of a `RefCell` used through `Deref`.\n\n##### [§](#examples-2)Examples\n\n```\nuse std::cell::{RefCell, RefMut};\n\nlet cell = RefCell::new([1, 2, 3, 4]);\nlet borrow = cell.borrow_mut();\nlet (mut begin, mut end) = RefMut::map_split(borrow, |slice| slice.split_at_mut(2));\nassert_eq!(*begin, [1, 2]);\nassert_eq!(*end, [3, 4]);\nbegin.copy_from_slice(&[4, 3]);\nend.copy_from_slice(&[2, 1]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::%7BRefCell,+RefMut%7D;%0A++++%0A++++let+cell+=+RefCell::new(%5B1,+2,+3,+4%5D);%0A++++let+borrow+=+cell.borrow_mut();%0A++++let+(mut+begin,+mut+end)+=+RefMut::map_split(borrow,+%7Cslice%7C+slice.split_at_mut(2));%0A++++assert_eq!(*begin,+%5B1,+2%5D);%0A++++assert_eq!(*end,+%5B3,+4%5D);%0A++++begin.copy_from_slice(%26%5B4,+3%5D);%0A++++end.copy_from_slice(%26%5B2,+1%5D);%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#1773)\n\n🔬This is a nightly-only experimental API. (`cell_leak` [#69099](https://github.com/rust-lang/rust/issues/69099))\n\nConvert into a mutable reference to the underlying data.\n\nThe underlying `RefCell` can not be borrowed from again and will always appear already mutably borrowed, making the returned reference the only to the interior.\n\nThis is an associated function that needs to be used as `RefMut::leak(...)`. A method would interfere with methods of the same name on the contents of a `RefCell` used through `Deref`.\n\n##### [§](#examples-3)Examples\n\n```\n#![feature(cell_leak)]\nuse std::cell::{RefCell, RefMut};\nlet cell = RefCell::new(0);\n\nlet value = RefMut::leak(cell.borrow_mut());\nassert_eq!(*value, 0);\n*value = 1;\n\nassert!(cell.try_borrow_mut().is_err());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(cell_leak)%5D%0Afn+main()+%7B%0A++++use+std::cell::%7BRefCell,+RefMut%7D;%0A++++let+cell+=+RefCell::new(0);%0A++++%0A++++let+value+=+RefMut::leak(cell.borrow_mut());%0A++++assert_eq!(*value,+0);%0A++++*value+=+1;%0A++++%0A++++assert!(cell.try_borrow_mut().is_err());%0A%7D&version=nightly&edition=2021)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"A wrapper type for a mutably borrowed value from a `RefCell<T>`.\"><title>RefMut in std::cell - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc struct\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">RefMut</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">RefMut</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#implementations\">Methods</a></h3><ul class=\"block method\"><li><a href=\"#method.filter_map\">filter_map</a></li><li><a href=\"#method.leak\">leak</a></li><li><a href=\"#method.map\">map</a></li><li><a href=\"#method.map_split\">map_split</a></li></ul><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-CoerceUnsized%3CRefMut%3C'b,+U%3E%3E-for-RefMut%3C'b,+T%3E\">CoerceUnsized&lt;RefMut&lt;'b, U&gt;&gt;</a></li><li><a href=\"#impl-Debug-for-RefMut%3C'_,+T%3E\">Debug</a></li><li><a href=\"#impl-Deref-for-RefMut%3C'_,+T%3E\">Deref</a></li><li><a href=\"#impl-DerefMut-for-RefMut%3C'_,+T%3E\">DerefMut</a></li><li><a href=\"#impl-DerefPure-for-RefMut%3C'_,+T%3E\">DerefPure</a></li><li><a href=\"#impl-Display-for-RefMut%3C'_,+T%3E\">Display</a></li></ul><h3><a href=\"#synthetic-implementations\">Auto Trait Implementations</a></h3><ul class=\"block synthetic-implementation\"><li><a href=\"#impl-RefUnwindSafe-for-RefMut%3C'b,+T%3E\">!RefUnwindSafe</a></li><li><a href=\"#impl-Send-for-RefMut%3C'b,+T%3E\">!Send</a></li><li><a href=\"#impl-Sync-for-RefMut%3C'b,+T%3E\">!Sync</a></li><li><a href=\"#impl-UnwindSafe-for-RefMut%3C'b,+T%3E\">!UnwindSafe</a></li><li><a href=\"#impl-Freeze-for-RefMut%3C'b,+T%3E\">Freeze</a></li><li><a href=\"#impl-Unpin-for-RefMut%3C'b,+T%3E\">Unpin</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-Any-for-T\">Any</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-T\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-T\">BorrowMut&lt;T&gt;</a></li><li><a href=\"#impl-From%3CT%3E-for-T\">From&lt;T&gt;</a></li><li><a href=\"#impl-Into%3CU%3E-for-T\">Into&lt;U&gt;</a></li><li><a href=\"#impl-ToString-for-T\">ToString</a></li><li><a href=\"#impl-TryFrom%3CU%3E-for-T\">TryFrom&lt;U&gt;</a></li><li><a href=\"#impl-TryInto%3CU%3E-for-T\">TryInto&lt;U&gt;</a></li></ul></section><h2><a href=\"index.html\">In std::cell</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.BorrowError.html\">BorrowError</a></li><li><a href=\"struct.BorrowMutError.html\">BorrowMutError</a></li><li><a href=\"struct.Cell.html\">Cell</a></li><li><a href=\"struct.LazyCell.html\">LazyCell</a></li><li><a href=\"struct.OnceCell.html\">OnceCell</a></li><li><a href=\"struct.Ref.html\">Ref</a></li><li><a href=\"struct.RefCell.html\">RefCell</a></li><li><a href=\"struct.RefMut.html\">RefMut</a></li><li><a href=\"struct.SyncUnsafeCell.html\">SyncUnsafeCell</a></li><li><a href=\"struct.UnsafeCell.html\">UnsafeCell</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Struct <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">cell</a>::<wbr><a class=\"struct\" href=\"#\">RefMut</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#1836\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub struct RefMut&lt;'b, T&gt;<div class=\"where\">where\n    T: 'b + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div>{ <span class=\"comment\">/* private fields */</span> }</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>A wrapper type for a mutably borrowed value from a <code>RefCell&lt;T&gt;</code>.</p>\n<p>See the <a href=\"index.html\" title=\"mod std::cell\">module-level documentation</a> for more.</p>\n</div></details><h2 id=\"implementations\" class=\"section-header\">Implementations<a href=\"#implementations\" class=\"anchor\">§</a></h2><div id=\"implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-RefMut%3C'b,+T%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#1628\">source</a><a href=\"#impl-RefMut%3C'b,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'b, T&gt; <a class=\"struct\" href=\"struct.RefMut.html\" title=\"struct std::cell::RefMut\">RefMut</a>&lt;'b, T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.map\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#1654-1656\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.map\" class=\"fn\">map</a>&lt;U, F&gt;(orig: <a class=\"struct\" href=\"struct.RefMut.html\" title=\"struct std::cell::RefMut\">RefMut</a>&lt;'b, T&gt;, f: F) -&gt; <a class=\"struct\" href=\"struct.RefMut.html\" title=\"struct std::cell::RefMut\">RefMut</a>&lt;'b, U&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnOnce.html\" title=\"trait std::ops::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut U</a>,\n    U: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Makes a new <code>RefMut</code> for a component of the borrowed data, e.g., an enum\nvariant.</p>\n<p>The <code>RefCell</code> is already mutably borrowed, so this cannot fail.</p>\n<p>This is an associated function that needs to be used as\n<code>RefMut::map(...)</code>. A method would interfere with methods of the same\nname on the contents of a <code>RefCell</code> used through <code>Deref</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::{RefCell, RefMut};\n\n<span class=\"kw\">let </span>c = RefCell::new((<span class=\"number\">5</span>, <span class=\"string\">'b'</span>));\n{\n    <span class=\"kw\">let </span>b1: RefMut&lt;<span class=\"lifetime\">'_</span>, (u32, char)&gt; = c.borrow_mut();\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>b2: RefMut&lt;<span class=\"lifetime\">'_</span>, u32&gt; = RefMut::map(b1, |t| <span class=\"kw-2\">&amp;mut </span>t.<span class=\"number\">0</span>);\n    <span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>b2, <span class=\"number\">5</span>);\n    <span class=\"kw-2\">*</span>b2 = <span class=\"number\">42</span>;\n}\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>c.borrow(), (<span class=\"number\">42</span>, <span class=\"string\">'b'</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::%7BRefCell,+RefMut%7D;%0A++++%0A++++let+c+=+RefCell::new((5,+'b'));%0A++++%7B%0A++++++++let+b1:+RefMut%3C'_,+(u32,+char)%3E+=+c.borrow_mut();%0A++++++++let+mut+b2:+RefMut%3C'_,+u32%3E+=+RefMut::map(b1,+%7Ct%7C+%26mut+t.0);%0A++++++++assert_eq!(*b2,+5);%0A++++++++*b2+=+42;%0A++++%7D%0A++++assert_eq!(*c.borrow(),+(42,+'b'));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.filter_map\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.63.0\">1.63.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#1692-1694\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.filter_map\" class=\"fn\">filter_map</a>&lt;U, F&gt;(\n    orig: <a class=\"struct\" href=\"struct.RefMut.html\" title=\"struct std::cell::RefMut\">RefMut</a>&lt;'b, T&gt;,\n    f: F,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.RefMut.html\" title=\"struct std::cell::RefMut\">RefMut</a>&lt;'b, U&gt;, <a class=\"struct\" href=\"struct.RefMut.html\" title=\"struct std::cell::RefMut\">RefMut</a>&lt;'b, T&gt;&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnOnce.html\" title=\"trait std::ops::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut U</a>&gt;,\n    U: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Makes a new <code>RefMut</code> for an optional component of the borrowed data. The\noriginal guard is returned as an <code>Err(..)</code> if the closure returns\n<code>None</code>.</p>\n<p>The <code>RefCell</code> is already mutably borrowed, so this cannot fail.</p>\n<p>This is an associated function that needs to be used as\n<code>RefMut::filter_map(...)</code>. A method would interfere with methods of the\nsame name on the contents of a <code>RefCell</code> used through <code>Deref</code>.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::{RefCell, RefMut};\n\n<span class=\"kw\">let </span>c = RefCell::new(<span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n\n{\n    <span class=\"kw\">let </span>b1: RefMut&lt;<span class=\"lifetime\">'_</span>, Vec&lt;u32&gt;&gt; = c.borrow_mut();\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>b2: <span class=\"prelude-ty\">Result</span>&lt;RefMut&lt;<span class=\"lifetime\">'_</span>, u32&gt;, <span class=\"kw\">_</span>&gt; = RefMut::filter_map(b1, |v| v.get_mut(<span class=\"number\">1</span>));\n\n    <span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span>(<span class=\"kw-2\">mut </span>b2) = b2 {\n        <span class=\"kw-2\">*</span>b2 += <span class=\"number\">2</span>;\n    }\n}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>c.borrow(), <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::%7BRefCell,+RefMut%7D;%0A++++%0A++++let+c+=+RefCell::new(vec!%5B1,+2,+3%5D);%0A++++%0A++++%7B%0A++++++++let+b1:+RefMut%3C'_,+Vec%3Cu32%3E%3E+=+c.borrow_mut();%0A++++++++let+mut+b2:+Result%3CRefMut%3C'_,+u32%3E,+_%3E+=+RefMut::filter_map(b1,+%7Cv%7C+v.get_mut(1));%0A++++%0A++++++++if+let+Ok(mut+b2)+=+b2+%7B%0A++++++++++++*b2+%2B=+2;%0A++++++++%7D%0A++++%7D%0A++++%0A++++assert_eq!(*c.borrow(),+vec!%5B1,+4,+3%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.map_split\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.35.0\">1.35.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#1735-1740\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.map_split\" class=\"fn\">map_split</a>&lt;U, V, F&gt;(\n    orig: <a class=\"struct\" href=\"struct.RefMut.html\" title=\"struct std::cell::RefMut\">RefMut</a>&lt;'b, T&gt;,\n    f: F,\n) -&gt; (<a class=\"struct\" href=\"struct.RefMut.html\" title=\"struct std::cell::RefMut\">RefMut</a>&lt;'b, U&gt;, <a class=\"struct\" href=\"struct.RefMut.html\" title=\"struct std::cell::RefMut\">RefMut</a>&lt;'b, V&gt;)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnOnce.html\" title=\"trait std::ops::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>) -&gt; (<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut U</a>, <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut V</a>),\n    U: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    V: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Splits a <code>RefMut</code> into multiple <code>RefMut</code>s for different components of the\nborrowed data.</p>\n<p>The underlying <code>RefCell</code> will remain mutably borrowed until both\nreturned <code>RefMut</code>s go out of scope.</p>\n<p>The <code>RefCell</code> is already mutably borrowed, so this cannot fail.</p>\n<p>This is an associated function that needs to be used as\n<code>RefMut::map_split(...)</code>. A method would interfere with methods of the\nsame name on the contents of a <code>RefCell</code> used through <code>Deref</code>.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::{RefCell, RefMut};\n\n<span class=\"kw\">let </span>cell = RefCell::new([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n<span class=\"kw\">let </span>borrow = cell.borrow_mut();\n<span class=\"kw\">let </span>(<span class=\"kw-2\">mut </span>begin, <span class=\"kw-2\">mut </span>end) = RefMut::map_split(borrow, |slice| slice.split_at_mut(<span class=\"number\">2</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>begin, [<span class=\"number\">1</span>, <span class=\"number\">2</span>]);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>end, [<span class=\"number\">3</span>, <span class=\"number\">4</span>]);\nbegin.copy_from_slice(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">4</span>, <span class=\"number\">3</span>]);\nend.copy_from_slice(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">2</span>, <span class=\"number\">1</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::%7BRefCell,+RefMut%7D;%0A++++%0A++++let+cell+=+RefCell::new(%5B1,+2,+3,+4%5D);%0A++++let+borrow+=+cell.borrow_mut();%0A++++let+(mut+begin,+mut+end)+=+RefMut::map_split(borrow,+%7Cslice%7C+slice.split_at_mut(2));%0A++++assert_eq!(*begin,+%5B1,+2%5D);%0A++++assert_eq!(*end,+%5B3,+4%5D);%0A++++begin.copy_from_slice(%26%5B4,+3%5D);%0A++++end.copy_from_slice(%26%5B2,+1%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.leak\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#1773\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.leak\" class=\"fn\">leak</a>(orig: <a class=\"struct\" href=\"struct.RefMut.html\" title=\"struct std::cell::RefMut\">RefMut</a>&lt;'b, T&gt;) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;'b mut T</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>cell_leak</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/69099\">#69099</a>)</span></div></span></summary><div class=\"docblock\"><p>Convert into a mutable reference to the underlying data.</p>\n<p>The underlying <code>RefCell</code> can not be borrowed from again and will always appear already\nmutably borrowed, making the returned reference the only to the interior.</p>\n<p>This is an associated function that needs to be used as\n<code>RefMut::leak(...)</code>. A method would interfere with methods of the\nsame name on the contents of a <code>RefCell</code> used through <code>Deref</code>.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(cell_leak)]\n</span><span class=\"kw\">use </span>std::cell::{RefCell, RefMut};\n<span class=\"kw\">let </span>cell = RefCell::new(<span class=\"number\">0</span>);\n\n<span class=\"kw\">let </span>value = RefMut::leak(cell.borrow_mut());\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>value, <span class=\"number\">0</span>);\n<span class=\"kw-2\">*</span>value = <span class=\"number\">1</span>;\n\n<span class=\"macro\">assert!</span>(cell.try_borrow_mut().is_err());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(cell_leak)%5D%0Afn+main()+%7B%0A++++use+std::cell::%7BRefCell,+RefMut%7D;%0A++++let+cell+=+RefCell::new(0);%0A++++%0A++++let+value+=+RefMut::leak(cell.borrow_mut());%0A++++assert_eq!(*value,+0);%0A++++*value+=+1;%0A++++%0A++++assert!(cell.try_borrow_mut().is_err());%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details></div></details></div><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">§</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-RefMut%3C'_,+T%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#2650\">source</a></span><a href=\"#impl-Debug-for-RefMut%3C'_,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"struct.RefMut.html\" title=\"struct std::cell::RefMut\">RefMut</a>&lt;'_, T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#2651\">source</a><a href=\"#method.fmt-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"../fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Deref-for-RefMut%3C'_,+T%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#1846\">source</a></span><a href=\"#impl-Deref-for-RefMut%3C'_,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../ops/trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a> for <a class=\"struct\" href=\"struct.RefMut.html\" title=\"struct std::cell::RefMut\">RefMut</a>&lt;'_, T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Target\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Target\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Deref.html#associatedtype.Target\" class=\"associatedtype\">Target</a> = T</h4></section></summary><div class=\"docblock\">The resulting type after dereferencing.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.deref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#1850\">source</a><a href=\"#method.deref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Deref.html#tymethod.deref\" class=\"fn\">deref</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Dereferences the value.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-DerefMut-for-RefMut%3C'_,+T%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#1857\">source</a></span><a href=\"#impl-DerefMut-for-RefMut%3C'_,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../ops/trait.DerefMut.html\" title=\"trait std::ops::DerefMut\">DerefMut</a> for <a class=\"struct\" href=\"struct.RefMut.html\" title=\"struct std::cell::RefMut\">RefMut</a>&lt;'_, T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.deref_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#1859\">source</a><a href=\"#method.deref_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.DerefMut.html#tymethod.deref_mut\" class=\"fn\">deref_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably dereferences the value.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Display-for-RefMut%3C'_,+T%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#1872\">source</a></span><a href=\"#impl-Display-for-RefMut%3C'_,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../fmt/trait.Display.html\" title=\"trait std::fmt::Display\">Display</a> for <a class=\"struct\" href=\"struct.RefMut.html\" title=\"struct std::cell::RefMut\">RefMut</a>&lt;'_, T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../fmt/trait.Display.html\" title=\"trait std::fmt::Display\">Display</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#1873\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../fmt/trait.Display.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"../fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../fmt/trait.Display.html#tymethod.fmt\">Read more</a></div></details></div></details><section id=\"impl-CoerceUnsized%3CRefMut%3C'b,+U%3E%3E-for-RefMut%3C'b,+T%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#1869\">source</a><a href=\"#impl-CoerceUnsized%3CRefMut%3C'b,+U%3E%3E-for-RefMut%3C'b,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'b, T, U&gt; <a class=\"trait\" href=\"../ops/trait.CoerceUnsized.html\" title=\"trait std::ops::CoerceUnsized\">CoerceUnsized</a>&lt;<a class=\"struct\" href=\"struct.RefMut.html\" title=\"struct std::cell::RefMut\">RefMut</a>&lt;'b, U&gt;&gt; for <a class=\"struct\" href=\"struct.RefMut.html\" title=\"struct std::cell::RefMut\">RefMut</a>&lt;'b, T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../marker/trait.Unsize.html\" title=\"trait std::marker::Unsize\">Unsize</a>&lt;U&gt; + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    U: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-DerefPure-for-RefMut%3C'_,+T%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#1866\">source</a><a href=\"#impl-DerefPure-for-RefMut%3C'_,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../ops/trait.DerefPure.html\" title=\"trait std::ops::DerefPure\">DerefPure</a> for <a class=\"struct\" href=\"struct.RefMut.html\" title=\"struct std::cell::RefMut\">RefMut</a>&lt;'_, T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></div><h2 id=\"synthetic-implementations\" class=\"section-header\">Auto Trait Implementations<a href=\"#synthetic-implementations\" class=\"anchor\">§</a></h2><div id=\"synthetic-implementations-list\"><section id=\"impl-Freeze-for-RefMut%3C'b,+T%3E\" class=\"impl\"><a href=\"#impl-Freeze-for-RefMut%3C'b,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'b, T&gt; <a class=\"trait\" href=\"../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"struct\" href=\"struct.RefMut.html\" title=\"struct std::cell::RefMut\">RefMut</a>&lt;'b, T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-RefUnwindSafe-for-RefMut%3C'b,+T%3E\" class=\"impl\"><a href=\"#impl-RefUnwindSafe-for-RefMut%3C'b,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'b, T&gt; !<a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"struct\" href=\"struct.RefMut.html\" title=\"struct std::cell::RefMut\">RefMut</a>&lt;'b, T&gt;</h3></section><section id=\"impl-Send-for-RefMut%3C'b,+T%3E\" class=\"impl\"><a href=\"#impl-Send-for-RefMut%3C'b,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'b, T&gt; !<a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"struct\" href=\"struct.RefMut.html\" title=\"struct std::cell::RefMut\">RefMut</a>&lt;'b, T&gt;</h3></section><section id=\"impl-Sync-for-RefMut%3C'b,+T%3E\" class=\"impl\"><a href=\"#impl-Sync-for-RefMut%3C'b,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'b, T&gt; !<a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"struct.RefMut.html\" title=\"struct std::cell::RefMut\">RefMut</a>&lt;'b, T&gt;</h3></section><section id=\"impl-Unpin-for-RefMut%3C'b,+T%3E\" class=\"impl\"><a href=\"#impl-Unpin-for-RefMut%3C'b,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'b, T&gt; <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"struct\" href=\"struct.RefMut.html\" title=\"struct std::cell::RefMut\">RefMut</a>&lt;'b, T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-UnwindSafe-for-RefMut%3C'b,+T%3E\" class=\"impl\"><a href=\"#impl-UnwindSafe-for-RefMut%3C'b,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'b, T&gt; !<a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"struct.RefMut.html\" title=\"struct std::cell::RefMut\">RefMut</a>&lt;'b, T&gt;</h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">§</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Any-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a><a href=\"#impl-Any-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#141\">source</a><a href=\"#method.type_id\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../any/trait.Any.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\">Gets the <code>TypeId</code> of <code>self</code>. <a href=\"../any/trait.Any.html#tymethod.type_id\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Borrow%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208\">source</a><a href=\"#impl-Borrow%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#210\">source</a><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216\">source</a><a href=\"#impl-BorrowMut%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#217\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765\">source</a><a href=\"#impl-From%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the argument unchanged.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Into%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750\">source</a><a href=\"#impl-Into%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758\">source</a><a href=\"#method.into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; U</h4></section></summary><div class=\"docblock\"><p>Calls <code>U::from(self)</code>.</p>\n<p>That is, this conversion is whatever the implementation of\n<code><a href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for U</code> chooses to do.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-ToString-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2552\">source</a><a href=\"#impl-ToString-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../string/trait.ToString.html\" title=\"trait std::string::ToString\">ToString</a> for T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../fmt/trait.Display.html\" title=\"trait std::fmt::Display\">Display</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_string\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2558\">source</a><a href=\"#method.to_string\" class=\"anchor\">§</a><h4 class=\"code-header\">default fn <a href=\"../string/trait.ToString.html#tymethod.to_string\" class=\"fn\">to_string</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../string/struct.String.html\" title=\"struct std::string::String\">String</a></h4></section></summary><div class=\"docblock\">Converts the given value to a <code>String</code>. <a href=\"../string/trait.ToString.html#tymethod.to_string\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryFrom%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807\">source</a><a href=\"#impl-TryFrom%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812\">source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: U) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, &lt;T as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryInto%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792\">source</a><a href=\"#impl-TryInto%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryInto.html\" title=\"trait std::convert::TryInto\">TryInto</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryInto.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797\">source</a><a href=\"#method.try_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryInto.html#tymethod.try_into\" class=\"fn\">try_into</a>(self) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;U, &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details></div></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:22:50.552Z"
}